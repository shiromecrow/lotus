
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007490  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007670  08007670  00017670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007770  08007770  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007770  08007770  00017770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007778  08007778  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007778  08007778  00017778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800777c  0800777c  0001777c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007780  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000070  080077f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  080077f0  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab59  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003469  00000000  00000000  0003abf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  0003e068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015c8  00000000  00000000  0003f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004386  00000000  00000000  00040d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcb3  00000000  00000000  000450e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6f92  00000000  00000000  00060d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147d2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006aac  00000000  00000000  00147d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007658 	.word	0x08007658

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007658 	.word	0x08007658

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80005ce:	2200      	movs	r2, #0
 80005d0:	2110      	movs	r1, #16
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <gyro_read_byte+0x50>)
 80005d4:	f002 fbcc 	bl	8002d70 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80005e2:	f107 010f 	add.w	r1, r7, #15
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	2201      	movs	r2, #1
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <gyro_read_byte+0x54>)
 80005ec:	f003 fca3 	bl	8003f36 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 80005f0:	f107 010e 	add.w	r1, r7, #14
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	2201      	movs	r2, #1
 80005f8:	4807      	ldr	r0, [pc, #28]	; (8000618 <gyro_read_byte+0x54>)
 80005fa:	f003 fe0a 	bl	8004212 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80005fe:	2201      	movs	r2, #1
 8000600:	2110      	movs	r1, #16
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <gyro_read_byte+0x50>)
 8000604:	f002 fbb4 	bl	8002d70 <HAL_GPIO_WritePin>

	return val;
 8000608:	7bbb      	ldrb	r3, [r7, #14]

}
 800060a:	4618      	mov	r0, r3
 800060c:	3710      	adds	r7, #16
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	48000800 	.word	0x48000800
 8000618:	20000114 	.word	0x20000114

0800061c <ICM20602_GYRO_READ>:

}

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff ffcb 	bl	80005c4 <gyro_read_byte>
 800062e:	4603      	mov	r3, r0
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3301      	adds	r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ffc2 	bl	80005c4 <gyro_read_byte>
 8000640:	4603      	mov	r3, r0
 8000642:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8000644:	4323      	orrs	r3, r4
 8000646:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8000648:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800064c:	ee07 3a90 	vmov	s15, r3
 8000650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000654:	eddf 6a06 	vldr	s13, [pc, #24]	; 8000670 <ICM20602_GYRO_READ+0x54>
 8000658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800065c:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	ee07 3a90 	vmov	s15, r3

}
 8000666:	eeb0 0a67 	vmov.f32	s0, s15
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	bd90      	pop	{r4, r7, pc}
 8000670:	41833333 	.word	0x41833333

08000674 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ff9f 	bl	80005c4 <gyro_read_byte>
 8000686:	4603      	mov	r3, r0
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	3301      	adds	r3, #1
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff96 	bl	80005c4 <gyro_read_byte>
 8000698:	4603      	mov	r3, r0
 800069a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800069c:	4323      	orrs	r3, r4
 800069e:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80006a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ac:	eddf 6a06 	vldr	s13, [pc, #24]	; 80006c8 <ICM20602_ACCEL_READ+0x54>
 80006b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b4:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	ee07 3a90 	vmov	s15, r3

}
 80006be:	eeb0 0a67 	vmov.f32	s0, s15
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd90      	pop	{r4, r7, pc}
 80006c8:	45000000 	.word	0x45000000

080006cc <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 80006d0:	4b1a      	ldr	r3, [pc, #104]	; (800073c <ICM20602_DataUpdate+0x70>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d12f      	bne.n	8000738 <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_x = ICM20602_GYRO_READ(0x43);
 80006d8:	2043      	movs	r0, #67	; 0x43
 80006da:	f7ff ff9f 	bl	800061c <ICM20602_GYRO_READ>
 80006de:	eef0 7a40 	vmov.f32	s15, s0
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <ICM20602_DataUpdate+0x74>)
 80006e4:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_y = ICM20602_GYRO_READ(0x45);
 80006e8:	2045      	movs	r0, #69	; 0x45
 80006ea:	f7ff ff97 	bl	800061c <ICM20602_GYRO_READ>
 80006ee:	eef0 7a40 	vmov.f32	s15, s0
 80006f2:	4b13      	ldr	r3, [pc, #76]	; (8000740 <ICM20602_DataUpdate+0x74>)
 80006f4:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 80006f8:	2047      	movs	r0, #71	; 0x47
 80006fa:	f7ff ff8f 	bl	800061c <ICM20602_GYRO_READ>
 80006fe:	eef0 7a40 	vmov.f32	s15, s0
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <ICM20602_DataUpdate+0x74>)
 8000704:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_x = ICM20602_ACCEL_READ(0x3B);
 8000708:	203b      	movs	r0, #59	; 0x3b
 800070a:	f7ff ffb3 	bl	8000674 <ICM20602_ACCEL_READ>
 800070e:	eef0 7a40 	vmov.f32	s15, s0
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <ICM20602_DataUpdate+0x74>)
 8000714:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_y = ICM20602_ACCEL_READ(0x3D);
 8000718:	203d      	movs	r0, #61	; 0x3d
 800071a:	f7ff ffab 	bl	8000674 <ICM20602_ACCEL_READ>
 800071e:	eef0 7a40 	vmov.f32	s15, s0
 8000722:	4b07      	ldr	r3, [pc, #28]	; (8000740 <ICM20602_DataUpdate+0x74>)
 8000724:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8000728:	203f      	movs	r0, #63	; 0x3f
 800072a:	f7ff ffa3 	bl	8000674 <ICM20602_ACCEL_READ>
 800072e:	eef0 7a40 	vmov.f32	s15, s0
 8000732:	4b03      	ldr	r3, [pc, #12]	; (8000740 <ICM20602_DataUpdate+0x74>)
 8000734:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000008c 	.word	0x2000008c
 8000740:	20000090 	.word	0x20000090

08000744 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	2220      	movs	r2, #32
 800075a:	2100      	movs	r1, #0
 800075c:	4618      	mov	r0, r3
 800075e:	f005 ffe5 	bl	800672c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000762:	4b32      	ldr	r3, [pc, #200]	; (800082c <MX_ADC1_Init+0xe8>)
 8000764:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076a:	4b30      	ldr	r3, [pc, #192]	; (800082c <MX_ADC1_Init+0xe8>)
 800076c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000770:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <MX_ADC1_Init+0xe8>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000778:	4b2c      	ldr	r3, [pc, #176]	; (800082c <MX_ADC1_Init+0xe8>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_ADC1_Init+0xe8>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_ADC1_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_ADC1_Init+0xe8>)
 800078c:	2204      	movs	r2, #4
 800078e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_ADC1_Init+0xe8>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_ADC1_Init+0xe8>)
 8000798:	2200      	movs	r2, #0
 800079a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800079c:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_ADC1_Init+0xe8>)
 800079e:	2201      	movs	r2, #1
 80007a0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a2:	4b22      	ldr	r3, [pc, #136]	; (800082c <MX_ADC1_Init+0xe8>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007aa:	4b20      	ldr	r3, [pc, #128]	; (800082c <MX_ADC1_Init+0xe8>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <MX_ADC1_Init+0xe8>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b6:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_ADC1_Init+0xe8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007be:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_ADC1_Init+0xe8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <MX_ADC1_Init+0xe8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007cc:	4817      	ldr	r0, [pc, #92]	; (800082c <MX_ADC1_Init+0xe8>)
 80007ce:	f001 f97b 	bl	8001ac8 <HAL_ADC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80007d8:	f000 fa0d 	bl	8000bf6 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_ADC1_Init+0xe8>)
 80007e8:	f001 ff74 	bl	80026d4 <HAL_ADCEx_MultiModeConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007f2:	f000 fa00 	bl	8000bf6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_ADC1_Init+0xec>)
 80007f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007fa:	2306      	movs	r3, #6
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000802:	237f      	movs	r3, #127	; 0x7f
 8000804:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000806:	2304      	movs	r3, #4
 8000808:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_ADC1_Init+0xe8>)
 8000814:	f001 fb0c 	bl	8001e30 <HAL_ADC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800081e:	f000 f9ea 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3730      	adds	r7, #48	; 0x30
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000a8 	.word	0x200000a8
 8000830:	04300002 	.word	0x04300002

08000834 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b09e      	sub	sp, #120	; 0x78
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800084c:	f107 0314 	add.w	r3, r7, #20
 8000850:	2250      	movs	r2, #80	; 0x50
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f005 ff69 	bl	800672c <memset>
  if(adcHandle->Instance==ADC1)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000862:	d14d      	bne.n	8000900 <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000868:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800086a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800086e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f003 f877 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000880:	f000 f9b9 	bl	8000bf6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000884:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000888:	4a1f      	ldr	r2, [pc, #124]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 800088a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800088e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000890:	4b1d      	ldr	r3, [pc, #116]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 8000892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 800089e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a0:	4a19      	ldr	r2, [pc, #100]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a8:	4b17      	ldr	r3, [pc, #92]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b8:	4a13      	ldr	r2, [pc, #76]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008ba:	f043 0302 	orr.w	r3, r3, #2
 80008be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c0:	4b11      	ldr	r3, [pc, #68]	; (8000908 <HAL_ADC_MspInit+0xd4>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c4:	f003 0302 	and.w	r3, r3, #2
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 80008cc:	230f      	movs	r3, #15
 80008ce:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d0:	2303      	movs	r3, #3
 80008d2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008dc:	4619      	mov	r1, r3
 80008de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e2:	f002 f8c3 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80008e6:	f241 0301 	movw	r3, #4097	; 0x1001
 80008ea:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ec:	2303      	movs	r3, #3
 80008ee:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008f8:	4619      	mov	r1, r3
 80008fa:	4804      	ldr	r0, [pc, #16]	; (800090c <HAL_ADC_MspInit+0xd8>)
 80008fc:	f002 f8b6 	bl	8002a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000900:	bf00      	nop
 8000902:	3778      	adds	r7, #120	; 0x78
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	48000400 	.word	0x48000400

08000910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a39      	ldr	r2, [pc, #228]	; (8000a10 <MX_GPIO_Init+0x100>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	4b34      	ldr	r3, [pc, #208]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4a33      	ldr	r2, [pc, #204]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0x100>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a2d      	ldr	r2, [pc, #180]	; (8000a10 <MX_GPIO_Init+0x100>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a27      	ldr	r2, [pc, #156]	; (8000a10 <MX_GPIO_Init+0x100>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_GPIO_Init+0x100>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8000986:	2200      	movs	r2, #0
 8000988:	f24e 0150 	movw	r1, #57424	; 0xe050
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <MX_GPIO_Init+0x104>)
 800098e:	f002 f9ef 	bl	8002d70 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f648 1110 	movw	r1, #35088	; 0x8910
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f002 f9e8 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 80009a0:	2200      	movs	r2, #0
 80009a2:	f64e 4196 	movw	r1, #60566	; 0xec96
 80009a6:	481c      	ldr	r0, [pc, #112]	; (8000a18 <MX_GPIO_Init+0x108>)
 80009a8:	f002 f9e2 	bl	8002d70 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 80009ac:	f24e 0350 	movw	r3, #57424	; 0xe050
 80009b0:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4813      	ldr	r0, [pc, #76]	; (8000a14 <MX_GPIO_Init+0x104>)
 80009c6:	f002 f851 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 80009ca:	f648 1310 	movw	r3, #35088	; 0x8910
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f002 f841 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 80009ea:	f64e 4396 	movw	r3, #60566	; 0xec96
 80009ee:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_GPIO_Init+0x108>)
 8000a04:	f002 f832 	bl	8002a6c <HAL_GPIO_Init>

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000800 	.word	0x48000800
 8000a18:	48000400 	.word	0x48000400

08000a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b087      	sub	sp, #28
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a22:	f000 fde4 	bl	80015ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a26:	f000 f89d 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a2a:	f7ff ff71 	bl	8000910 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000a2e:	f7ff fe89 	bl	8000744 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000a32:	f000 f8e5 	bl	8000c00 <MX_SPI1_Init>
  MX_TIM6_Init();
 8000a36:	f000 fafb 	bl	8001030 <MX_TIM6_Init>
  MX_TIM8_Init();
 8000a3a:	f000 fb2f 	bl	800109c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a3e:	f000 fd09 	bl	8001454 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 8000a42:	f000 f91b 	bl	8000c7c <MX_SPI3_Init>
  MX_TIM16_Init();
 8000a46:	f000 fbc9 	bl	80011dc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	uint8_t hello[] = "Hello World\n\r";
 8000a4a:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <main+0x130>)
 8000a4c:	1d3c      	adds	r4, r7, #4
 8000a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a50:	c407      	stmia	r4!, {r0, r1, r2}
 8000a52:	8023      	strh	r3, [r4, #0]
	float PI=3.14;
 8000a54:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <main+0x134>)
 8000a56:	617b      	str	r3, [r7, #20]
	uint8_t hoge = 3;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	74fb      	strb	r3, [r7, #19]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // test LED
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f002 f983 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f002 f97c 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	4835      	ldr	r0, [pc, #212]	; (8000b54 <main+0x138>)
 8000a7e:	f002 f977 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a88:	4833      	ldr	r0, [pc, #204]	; (8000b58 <main+0x13c>)
 8000a8a:	f002 f971 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a94:	4830      	ldr	r0, [pc, #192]	; (8000b58 <main+0x13c>)
 8000a96:	f002 f96b 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa0:	482d      	ldr	r0, [pc, #180]	; (8000b58 <main+0x13c>)
 8000aa2:	f002 f965 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aac:	482a      	ldr	r0, [pc, #168]	; (8000b58 <main+0x13c>)
 8000aae:	f002 f95f 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab8:	4827      	ldr	r0, [pc, #156]	; (8000b58 <main+0x13c>)
 8000aba:	f002 f959 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac2:	f000 fe05 	bl	80016d0 <HAL_Delay>
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000acc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad0:	f002 f94e 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f002 f947 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	481b      	ldr	r0, [pc, #108]	; (8000b54 <main+0x138>)
 8000ae8:	f002 f942 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af2:	4819      	ldr	r0, [pc, #100]	; (8000b58 <main+0x13c>)
 8000af4:	f002 f93c 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000afe:	4816      	ldr	r0, [pc, #88]	; (8000b58 <main+0x13c>)
 8000b00:	f002 f936 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8000b04:	2201      	movs	r2, #1
 8000b06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0a:	4813      	ldr	r0, [pc, #76]	; (8000b58 <main+0x13c>)
 8000b0c:	f002 f930 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	4810      	ldr	r0, [pc, #64]	; (8000b58 <main+0x13c>)
 8000b18:	f002 f92a 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <main+0x13c>)
 8000b24:	f002 f924 	bl	8002d70 <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b2c:	f000 fdd0 	bl	80016d0 <HAL_Delay>
	  	// test USART
	  	printf("hello=%s", hello);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <main+0x140>)
 8000b36:	f005 fe01 	bl	800673c <iprintf>
	  	printf("hoge=%d\n\r", hoge);
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4808      	ldr	r0, [pc, #32]	; (8000b60 <main+0x144>)
 8000b40:	f005 fdfc 	bl	800673c <iprintf>
	  	//printf("M_PI=%f\n\r", PI);
	  	// test GYRO
	  	ICM20602_DataUpdate();
 8000b44:	f7ff fdc2 	bl	80006cc <ICM20602_DataUpdate>
	  	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8000b48:	e788      	b.n	8000a5c <main+0x40>
 8000b4a:	bf00      	nop
 8000b4c:	08007688 	.word	0x08007688
 8000b50:	4048f5c3 	.word	0x4048f5c3
 8000b54:	48000800 	.word	0x48000800
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	08007670 	.word	0x08007670
 8000b60:	0800767c 	.word	0x0800767c

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b094      	sub	sp, #80	; 0x50
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 0318 	add.w	r3, r7, #24
 8000b6e:	2238      	movs	r2, #56	; 0x38
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f005 fdda 	bl	800672c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f002 f90a 	bl	8002da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b94:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b96:	2302      	movs	r3, #2
 8000b98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ba2:	2355      	movs	r3, #85	; 0x55
 8000ba4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb2:	f107 0318 	add.w	r3, r7, #24
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f002 f9a6 	bl	8002f08 <HAL_RCC_OscConfig>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bc2:	f000 f818 	bl	8000bf6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc6:	230f      	movs	r3, #15
 8000bc8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2104      	movs	r1, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f002 fcaa 	bl	8003538 <HAL_RCC_ClockConfig>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000bea:	f000 f804 	bl	8000bf6 <Error_Handler>
  }
}
 8000bee:	bf00      	nop
 8000bf0:	3750      	adds	r7, #80	; 0x50
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfa:	b672      	cpsid	i
}
 8000bfc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <Error_Handler+0x8>

08000c00 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_SPI1_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c1e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c32:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c36:	2218      	movs	r2, #24
 8000c38:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c4c:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c4e:	2207      	movs	r2, #7
 8000c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c5e:	4805      	ldr	r0, [pc, #20]	; (8000c74 <MX_SPI1_Init+0x74>)
 8000c60:	f003 f8be 	bl	8003de0 <HAL_SPI_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f7ff ffc4 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000114 	.word	0x20000114
 8000c78:	40013000 	.word	0x40013000

08000c7c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <MX_SPI3_Init+0x78>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000c96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c9a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cb2:	2218      	movs	r2, #24
 8000cb4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cca:	2207      	movs	r2, #7
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cd6:	2208      	movs	r2, #8
 8000cd8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <MX_SPI3_Init+0x74>)
 8000cdc:	f003 f880 	bl	8003de0 <HAL_SPI_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ce6:	f7ff ff86 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000178 	.word	0x20000178
 8000cf4:	40003c00 	.word	0x40003c00

08000cf8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08c      	sub	sp, #48	; 0x30
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a3d      	ldr	r2, [pc, #244]	; (8000e0c <HAL_SPI_MspInit+0x114>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d129      	bne.n	8000d6e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1e:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d24:	6613      	str	r3, [r2, #96]	; 0x60
 8000d26:	4b3a      	ldr	r3, [pc, #232]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2e:	61bb      	str	r3, [r7, #24]
 8000d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	4b37      	ldr	r3, [pc, #220]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d36:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3e:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d4a:	23e0      	movs	r3, #224	; 0xe0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d56:	2300      	movs	r3, #0
 8000d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d5a:	2305      	movs	r3, #5
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d68:	f001 fe80 	bl	8002a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d6c:	e049      	b.n	8000e02 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a28      	ldr	r2, [pc, #160]	; (8000e14 <HAL_SPI_MspInit+0x11c>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d144      	bne.n	8000e02 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d78:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d82:	6593      	str	r3, [r2, #88]	; 0x58
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d94:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d96:	f043 0304 	orr.w	r3, r3, #4
 8000d9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9c:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da0:	f003 0304 	and.w	r3, r3, #4
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dac:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000dae:	f043 0302 	orr.w	r3, r3, #2
 8000db2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db4:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_SPI_MspInit+0x118>)
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000dc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd2:	2306      	movs	r3, #6
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480e      	ldr	r0, [pc, #56]	; (8000e18 <HAL_SPI_MspInit+0x120>)
 8000dde:	f001 fe45 	bl	8002a6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000de2:	2320      	movs	r3, #32
 8000de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de6:	2302      	movs	r3, #2
 8000de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000df2:	2306      	movs	r3, #6
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4807      	ldr	r0, [pc, #28]	; (8000e1c <HAL_SPI_MspInit+0x124>)
 8000dfe:	f001 fe35 	bl	8002a6c <HAL_GPIO_Init>
}
 8000e02:	bf00      	nop
 8000e04:	3730      	adds	r7, #48	; 0x30
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40013000 	.word	0x40013000
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40003c00 	.word	0x40003c00
 8000e18:	48000800 	.word	0x48000800
 8000e1c:	48000400 	.word	0x48000400

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x44>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a0e      	ldr	r2, [pc, #56]	; (8000e64 <HAL_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <HAL_MspInit+0x44>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_MspInit+0x44>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e42:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_MspInit+0x44>)
 8000e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e48:	6593      	str	r3, [r2, #88]	; 0x58
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e52:	603b      	str	r3, [r7, #0]
 8000e54:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e56:	f002 f847 	bl	8002ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb4:	f000 fbee 	bl	8001694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	e00a      	b.n	8000ee4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ece:	f3af 8000 	nop.w
 8000ed2:	4601      	mov	r1, r0
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	1c5a      	adds	r2, r3, #1
 8000ed8:	60ba      	str	r2, [r7, #8]
 8000eda:	b2ca      	uxtb	r2, r1
 8000edc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	617b      	str	r3, [r7, #20]
 8000ee4:	697a      	ldr	r2, [r7, #20]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	dbf0      	blt.n	8000ece <_read+0x12>
	}

return len;
 8000eec:	687b      	ldr	r3, [r7, #4]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	e00a      	b.n	8000f20 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	1c4b      	adds	r3, r1, #1
 8000f0e:	60bb      	str	r3, [r7, #8]
 8000f10:	2301      	movs	r3, #1
 8000f12:	2201      	movs	r2, #1
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <_write+0x3c>)
 8000f16:	f004 fd95 	bl	8005a44 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dbf0      	blt.n	8000f0a <_write+0x12>
	}
	return len;
 8000f28:	687b      	ldr	r3, [r7, #4]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002c4 	.word	0x200002c4

08000f38 <_close>:

int _close(int file)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	return -1;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f60:	605a      	str	r2, [r3, #4]
	return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_isatty>:

int _isatty(int file)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	return 1;
 8000f78:	2301      	movs	r3, #1
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b085      	sub	sp, #20
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	60f8      	str	r0, [r7, #12]
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
	return 0;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <_sbrk+0x5c>)
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <_sbrk+0x60>)
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <_sbrk+0x64>)
 8000fbe:	4a12      	ldr	r2, [pc, #72]	; (8001008 <_sbrk+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d207      	bcs.n	8000fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd0:	f005 fb82 	bl	80066d8 <__errno>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	220c      	movs	r2, #12
 8000fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fda:	f04f 33ff 	mov.w	r3, #4294967295
 8000fde:	e009      	b.n	8000ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <_sbrk+0x64>)
 8000ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2001c000 	.word	0x2001c000
 8001000:	00000400 	.word	0x00000400
 8001004:	200001dc 	.word	0x200001dc
 8001008:	20000368 	.word	0x20000368

0800100c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SystemInit+0x20>)
 8001012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001016:	4a05      	ldr	r2, [pc, #20]	; (800102c <SystemInit+0x20>)
 8001018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800101c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001040:	4b14      	ldr	r3, [pc, #80]	; (8001094 <MX_TIM6_Init+0x64>)
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <MX_TIM6_Init+0x68>)
 8001044:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001046:	4b13      	ldr	r3, [pc, #76]	; (8001094 <MX_TIM6_Init+0x64>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <MX_TIM6_Init+0x64>)
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <MX_TIM6_Init+0x64>)
 8001054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001058:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_TIM6_Init+0x64>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001060:	480c      	ldr	r0, [pc, #48]	; (8001094 <MX_TIM6_Init+0x64>)
 8001062:	f003 fdd5 	bl	8004c10 <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800106c:	f7ff fdc3 	bl	8000bf6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_TIM6_Init+0x64>)
 800107e:	f004 fb51 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001088:	f7ff fdb5 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001e0 	.word	0x200001e0
 8001098:	40001000 	.word	0x40001000

0800109c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b098      	sub	sp, #96	; 0x60
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2234      	movs	r2, #52	; 0x34
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 fb2f 	bl	800672c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010ce:	4b41      	ldr	r3, [pc, #260]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010d0:	4a41      	ldr	r2, [pc, #260]	; (80011d8 <MX_TIM8_Init+0x13c>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010d4:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b3e      	ldr	r3, [pc, #248]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80010e0:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b3a      	ldr	r3, [pc, #232]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010ee:	4b39      	ldr	r3, [pc, #228]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b37      	ldr	r3, [pc, #220]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010fa:	4836      	ldr	r0, [pc, #216]	; (80011d4 <MX_TIM8_Init+0x138>)
 80010fc:	f003 fddf 	bl	8004cbe <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001106:	f7ff fd76 	bl	8000bf6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001116:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111a:	4619      	mov	r1, r3
 800111c:	482d      	ldr	r0, [pc, #180]	; (80011d4 <MX_TIM8_Init+0x138>)
 800111e:	f004 fb01 	bl	8005724 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001128:	f7ff fd65 	bl	8000bf6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	4820      	ldr	r0, [pc, #128]	; (80011d4 <MX_TIM8_Init+0x138>)
 8001152:	f003 fe0b 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800115c:	f7ff fd4b 	bl	8000bf6 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001164:	2208      	movs	r2, #8
 8001166:	4619      	mov	r1, r3
 8001168:	481a      	ldr	r0, [pc, #104]	; (80011d4 <MX_TIM8_Init+0x138>)
 800116a:	f003 fdff 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8001174:	f7ff fd3f 	bl	8000bf6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800119e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	4807      	ldr	r0, [pc, #28]	; (80011d4 <MX_TIM8_Init+0x138>)
 80011b6:	f004 fb43 	bl	8005840 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80011c0:	f7ff fd19 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <MX_TIM8_Init+0x138>)
 80011c6:	f000 f8d7 	bl	8001378 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3760      	adds	r7, #96	; 0x60
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000022c 	.word	0x2000022c
 80011d8:	40013400 	.word	0x40013400

080011dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	; 0x50
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2234      	movs	r2, #52	; 0x34
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fa95 	bl	800672c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001202:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001204:	4a31      	ldr	r2, [pc, #196]	; (80012cc <MX_TIM16_Init+0xf0>)
 8001206:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001208:	4b2f      	ldr	r3, [pc, #188]	; (80012c8 <MX_TIM16_Init+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001214:	4b2c      	ldr	r3, [pc, #176]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <MX_TIM16_Init+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	; (80012c8 <MX_TIM16_Init+0xec>)
 800122a:	2200      	movs	r2, #0
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800122e:	4826      	ldr	r0, [pc, #152]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001230:	f003 fcee 	bl	8004c10 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800123a:	f7ff fcdc 	bl	8000bf6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800123e:	4822      	ldr	r0, [pc, #136]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001240:	f003 fd3d 	bl	8004cbe <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800124a:	f7ff fcd4 	bl	8000bf6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4815      	ldr	r0, [pc, #84]	; (80012c8 <MX_TIM16_Init+0xec>)
 8001274:	f003 fd7a 	bl	8004d6c <HAL_TIM_PWM_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800127e:	f7ff fcba 	bl	8000bf6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800129a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM16_Init+0xec>)
 80012aa:	f004 fac9 	bl	8005840 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80012b4:	f7ff fc9f 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM16_Init+0xec>)
 80012ba:	f000 f85d 	bl	8001378 <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	; 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000278 	.word	0x20000278
 80012cc:	40014400 	.word	0x40014400

080012d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_TIM_Base_MspInit+0x5c>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d10c      	bne.n	80012fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <HAL_TIM_Base_MspInit+0x60>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <HAL_TIM_Base_MspInit+0x60>)
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	6593      	str	r3, [r2, #88]	; 0x58
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_TIM_Base_MspInit+0x60>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80012fa:	e010      	b.n	800131e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM16)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0c      	ldr	r2, [pc, #48]	; (8001334 <HAL_TIM_Base_MspInit+0x64>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d10b      	bne.n	800131e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x60>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	4a09      	ldr	r2, [pc, #36]	; (8001330 <HAL_TIM_Base_MspInit+0x60>)
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	6613      	str	r3, [r2, #96]	; 0x60
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_TIM_Base_MspInit+0x60>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
}
 800131e:	bf00      	nop
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40001000 	.word	0x40001000
 8001330:	40021000 	.word	0x40021000
 8001334:	40014400 	.word	0x40014400

08001338 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <HAL_TIM_PWM_MspInit+0x38>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d10b      	bne.n	8001362 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_TIM_PWM_MspInit+0x3c>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <HAL_TIM_PWM_MspInit+0x3c>)
 8001350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001354:	6613      	str	r3, [r2, #96]	; 0x60
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_TIM_PWM_MspInit+0x3c>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40013400 	.word	0x40013400
 8001374:	40021000 	.word	0x40021000

08001378 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2b      	ldr	r2, [pc, #172]	; (8001444 <HAL_TIM_MspPostInit+0xcc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12d      	bne.n	80013f6 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <HAL_TIM_MspPostInit+0xd0>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <HAL_TIM_MspPostInit+0xd0>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_TIM_MspPostInit+0xd0>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80013c2:	2305      	movs	r3, #5
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0314 	add.w	r3, r7, #20
 80013ca:	4619      	mov	r1, r3
 80013cc:	481f      	ldr	r0, [pc, #124]	; (800144c <HAL_TIM_MspPostInit+0xd4>)
 80013ce:	f001 fb4d 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 80013d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80013e4:	230a      	movs	r3, #10
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4817      	ldr	r0, [pc, #92]	; (800144c <HAL_TIM_MspPostInit+0xd4>)
 80013f0:	f001 fb3c 	bl	8002a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80013f4:	e022      	b.n	800143c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <HAL_TIM_MspPostInit+0xd8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d11d      	bne.n	800143c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_TIM_MspPostInit+0xd0>)
 8001402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_TIM_MspPostInit+0xd0>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_TIM_MspPostInit+0xd0>)
 800140e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800142a:	2301      	movs	r3, #1
 800142c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001438:	f001 fb18 	bl	8002a6c <HAL_GPIO_Init>
}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40013400 	.word	0x40013400
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400
 8001450:	40014400 	.word	0x40014400

08001454 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001458:	4b22      	ldr	r3, [pc, #136]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800145a:	4a23      	ldr	r2, [pc, #140]	; (80014e8 <MX_USART1_UART_Init+0x94>)
 800145c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001472:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b17      	ldr	r3, [pc, #92]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800149c:	4811      	ldr	r0, [pc, #68]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 800149e:	f004 fa81 	bl	80059a4 <HAL_UART_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014a8:	f7ff fba5 	bl	8000bf6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 80014b0:	f005 f848 	bl	8006544 <HAL_UARTEx_SetTxFifoThreshold>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014ba:	f7ff fb9c 	bl	8000bf6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014be:	2100      	movs	r1, #0
 80014c0:	4808      	ldr	r0, [pc, #32]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 80014c2:	f005 f87d 	bl	80065c0 <HAL_UARTEx_SetRxFifoThreshold>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014cc:	f7ff fb93 	bl	8000bf6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_USART1_UART_Init+0x90>)
 80014d2:	f004 fffe 	bl	80064d2 <HAL_UARTEx_DisableFifoMode>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014dc:	f7ff fb8b 	bl	8000bf6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200002c4 	.word	0x200002c4
 80014e8:	40013800 	.word	0x40013800

080014ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09e      	sub	sp, #120	; 0x78
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	2250      	movs	r2, #80	; 0x50
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f005 f90d 	bl	800672c <memset>
  if(uartHandle->Instance==USART1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <HAL_UART_MspInit+0xa8>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d137      	bne.n	800158c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800151c:	2301      	movs	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4618      	mov	r0, r3
 800152a:	f002 fa1d 	bl	8003968 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001534:	f7ff fb5f 	bl	8000bf6 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <HAL_UART_MspInit+0xac>)
 800153a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800153c:	4a16      	ldr	r2, [pc, #88]	; (8001598 <HAL_UART_MspInit+0xac>)
 800153e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001542:	6613      	str	r3, [r2, #96]	; 0x60
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_UART_MspInit+0xac>)
 8001546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_UART_MspInit+0xac>)
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <HAL_UART_MspInit+0xac>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_UART_MspInit+0xac>)
 800155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	60fb      	str	r3, [r7, #12]
 8001566:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001568:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800156c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800157a:	2307      	movs	r3, #7
 800157c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001582:	4619      	mov	r1, r3
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 fa70 	bl	8002a6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800158c:	bf00      	nop
 800158e:	3778      	adds	r7, #120	; 0x78
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40013800 	.word	0x40013800
 8001598:	40021000 	.word	0x40021000

0800159c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800159e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015a2:	490e      	ldr	r1, [pc, #56]	; (80015dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80015a4:	4a0e      	ldr	r2, [pc, #56]	; (80015e0 <LoopForever+0xe>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015a8:	e002      	b.n	80015b0 <LoopCopyDataInit>

080015aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ae:	3304      	adds	r3, #4

080015b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b4:	d3f9      	bcc.n	80015aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015b8:	4c0b      	ldr	r4, [pc, #44]	; (80015e8 <LoopForever+0x16>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015bc:	e001      	b.n	80015c2 <LoopFillZerobss>

080015be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c0:	3204      	adds	r2, #4

080015c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c4:	d3fb      	bcc.n	80015be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015c6:	f7ff fd21 	bl	800100c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ca:	f005 f88b 	bl	80066e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ce:	f7ff fa25 	bl	8000a1c <main>

080015d2 <LoopForever>:

LoopForever:
    b LoopForever
 80015d2:	e7fe      	b.n	80015d2 <LoopForever>
  ldr   r0, =_estack
 80015d4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015e0:	08007780 	.word	0x08007780
  ldr r2, =_sbss
 80015e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015e8:	20000368 	.word	0x20000368

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>

080015ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f8:	2003      	movs	r0, #3
 80015fa:	f001 fa05 	bl	8002a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fe:	200f      	movs	r0, #15
 8001600:	f000 f80e 	bl	8001620 <HAL_InitTick>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	71fb      	strb	r3, [r7, #7]
 800160e:	e001      	b.n	8001614 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001610:	f7ff fc06 	bl	8000e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001614:	79fb      	ldrb	r3, [r7, #7]

}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800162c:	4b16      	ldr	r3, [pc, #88]	; (8001688 <HAL_InitTick+0x68>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d022      	beq.n	800167a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_InitTick+0x6c>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <HAL_InitTick+0x68>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001640:	fbb1 f3f3 	udiv	r3, r1, r3
 8001644:	fbb2 f3f3 	udiv	r3, r2, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f001 fa02 	bl	8002a52 <HAL_SYSTICK_Config>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10f      	bne.n	8001674 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	d809      	bhi.n	800166e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165a:	2200      	movs	r2, #0
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	f04f 30ff 	mov.w	r0, #4294967295
 8001662:	f001 f9dc 	bl	8002a1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001666:	4a0a      	ldr	r2, [pc, #40]	; (8001690 <HAL_InitTick+0x70>)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e007      	b.n	800167e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e004      	b.n	800167e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e001      	b.n	800167e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800167e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000008 	.word	0x20000008
 800168c:	20000000 	.word	0x20000000
 8001690:	20000004 	.word	0x20000004

08001694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <HAL_IncTick+0x1c>)
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_IncTick+0x20>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4413      	add	r3, r2
 80016a2:	4a03      	ldr	r2, [pc, #12]	; (80016b0 <HAL_IncTick+0x1c>)
 80016a4:	6013      	str	r3, [r2, #0]
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	20000354 	.word	0x20000354
 80016b4:	20000008 	.word	0x20000008

080016b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return uwTick;
 80016bc:	4b03      	ldr	r3, [pc, #12]	; (80016cc <HAL_GetTick+0x14>)
 80016be:	681b      	ldr	r3, [r3, #0]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000354 	.word	0x20000354

080016d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d8:	f7ff ffee 	bl	80016b8 <HAL_GetTick>
 80016dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e8:	d004      	beq.n	80016f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_Delay+0x40>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016f4:	bf00      	nop
 80016f6:	f7ff ffdf 	bl	80016b8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	429a      	cmp	r2, r3
 8001704:	d8f7      	bhi.n	80016f6 <HAL_Delay+0x26>
  {
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000008 	.word	0x20000008

08001714 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	609a      	str	r2, [r3, #8]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001770:	4618      	mov	r0, r3
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	3360      	adds	r3, #96	; 0x60
 800178e:	461a      	mov	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <LL_ADC_SetOffset+0x44>)
 800179e:	4013      	ands	r3, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	4313      	orrs	r3, r2
 80017ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	03fff000 	.word	0x03fff000

080017c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	3360      	adds	r3, #96	; 0x60
 80017d2:	461a      	mov	r2, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b087      	sub	sp, #28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3360      	adds	r3, #96	; 0x60
 8001800:	461a      	mov	r2, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	431a      	orrs	r2, r3
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001826:	b480      	push	{r7}
 8001828:	b087      	sub	sp, #28
 800182a:	af00      	add	r7, sp, #0
 800182c:	60f8      	str	r0, [r7, #12]
 800182e:	60b9      	str	r1, [r7, #8]
 8001830:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	3360      	adds	r3, #96	; 0x60
 8001836:	461a      	mov	r2, r3
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	431a      	orrs	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001850:	bf00      	nop
 8001852:	371c      	adds	r7, #28
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3360      	adds	r3, #96	; 0x60
 800186c:	461a      	mov	r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	431a      	orrs	r2, r3
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001886:	bf00      	nop
 8001888:	371c      	adds	r7, #28
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	615a      	str	r2, [r3, #20]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b087      	sub	sp, #28
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3330      	adds	r3, #48	; 0x30
 80018c8:	461a      	mov	r2, r3
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	4413      	add	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	211f      	movs	r1, #31
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	401a      	ands	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0e9b      	lsrs	r3, r3, #26
 80018f0:	f003 011f 	and.w	r1, r3, #31
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	fa01 f303 	lsl.w	r3, r1, r3
 80018fe:	431a      	orrs	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001904:	bf00      	nop
 8001906:	371c      	adds	r7, #28
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001910:	b480      	push	{r7}
 8001912:	b087      	sub	sp, #28
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3314      	adds	r3, #20
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0e5b      	lsrs	r3, r3, #25
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	0d1b      	lsrs	r3, r3, #20
 8001938:	f003 031f 	and.w	r3, r3, #31
 800193c:	2107      	movs	r1, #7
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	401a      	ands	r2, r3
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	0d1b      	lsrs	r3, r3, #20
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d10a      	bne.n	8001992 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	431a      	orrs	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001990:	e00a      	b.n	80019a8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	43db      	mvns	r3, r3
 80019a0:	401a      	ands	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	407f0000 	.word	0x407f0000

080019b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6093      	str	r3, [r2, #8]
}
 80019d0:	bf00      	nop
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80019ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019f0:	d101      	bne.n	80019f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a14:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a40:	d101      	bne.n	8001a46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a46:	2300      	movs	r3, #0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <LL_ADC_IsEnabled+0x18>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <LL_ADC_IsEnabled+0x1a>
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b04      	cmp	r3, #4
 8001a8c:	d101      	bne.n	8001a92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	d101      	bne.n	8001ab8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e000      	b.n	8001aba <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e1a1      	b.n	8001e26 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7fe fe9f 	bl	8000834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff67 	bl	80019dc <LL_ADC_IsDeepPowerDownEnabled>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff4d 	bl	80019b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff82 	bl	8001a2c <LL_ADC_IsInternalRegulatorEnabled>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d115      	bne.n	8001b5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff66 	bl	8001a04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b38:	4b9a      	ldr	r3, [pc, #616]	; (8001da4 <HAL_ADC_Init+0x2dc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	4a9a      	ldr	r2, [pc, #616]	; (8001da8 <HAL_ADC_Init+0x2e0>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	3301      	adds	r3, #1
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b4c:	e002      	b.n	8001b54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f9      	bne.n	8001b4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff64 	bl	8001a2c <LL_ADC_IsInternalRegulatorEnabled>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10d      	bne.n	8001b86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff75 	bl	8001a7a <LL_ADC_REG_IsConversionOngoing>
 8001b90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f040 813a 	bne.w	8001e14 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8136 	bne.w	8001e14 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bb0:	f043 0202 	orr.w	r2, r3, #2
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff49 	bl	8001a54 <LL_ADC_IsEnabled>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d137      	bne.n	8001c38 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bd0:	d004      	beq.n	8001bdc <HAL_ADC_Init+0x114>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	; (8001dac <HAL_ADC_Init+0x2e4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d10f      	bne.n	8001bfc <HAL_ADC_Init+0x134>
 8001bdc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001be0:	f7ff ff38 	bl	8001a54 <LL_ADC_IsEnabled>
 8001be4:	4604      	mov	r4, r0
 8001be6:	4871      	ldr	r0, [pc, #452]	; (8001dac <HAL_ADC_Init+0x2e4>)
 8001be8:	f7ff ff34 	bl	8001a54 <LL_ADC_IsEnabled>
 8001bec:	4603      	mov	r3, r0
 8001bee:	4323      	orrs	r3, r4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	bf0c      	ite	eq
 8001bf4:	2301      	moveq	r3, #1
 8001bf6:	2300      	movne	r3, #0
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	e008      	b.n	8001c0e <HAL_ADC_Init+0x146>
 8001bfc:	486c      	ldr	r0, [pc, #432]	; (8001db0 <HAL_ADC_Init+0x2e8>)
 8001bfe:	f7ff ff29 	bl	8001a54 <LL_ADC_IsEnabled>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d012      	beq.n	8001c38 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c1a:	d004      	beq.n	8001c26 <HAL_ADC_Init+0x15e>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a62      	ldr	r2, [pc, #392]	; (8001dac <HAL_ADC_Init+0x2e4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Init+0x162>
 8001c26:	4a63      	ldr	r2, [pc, #396]	; (8001db4 <HAL_ADC_Init+0x2ec>)
 8001c28:	e000      	b.n	8001c2c <HAL_ADC_Init+0x164>
 8001c2a:	4a63      	ldr	r2, [pc, #396]	; (8001db8 <HAL_ADC_Init+0x2f0>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f7ff fd6e 	bl	8001714 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	7f5b      	ldrb	r3, [r3, #29]
 8001c3c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c42:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001c48:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001c4e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c56:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d106      	bne.n	8001c74 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	045b      	lsls	r3, r3, #17
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d009      	beq.n	8001c90 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c88:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <HAL_ADC_Init+0x2f4>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	69b9      	ldr	r1, [r7, #24]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fedb 	bl	8001a7a <LL_ADC_REG_IsConversionOngoing>
 8001cc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fee8 	bl	8001aa0 <LL_ADC_INJ_IsConversionOngoing>
 8001cd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d17b      	bne.n	8001dd0 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d178      	bne.n	8001dd0 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ce2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cfa:	f023 0302 	bic.w	r3, r3, #2
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	69b9      	ldr	r1, [r7, #24]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d017      	beq.n	8001d40 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d28:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6911      	ldr	r1, [r2, #16]
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d3e:	e013      	b.n	8001d68 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691a      	ldr	r2, [r3, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d64:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d126      	bne.n	8001dc0 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d88:	4311      	orrs	r1, r2
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d94:	430a      	orrs	r2, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	e015      	b.n	8001dd0 <HAL_ADC_Init+0x308>
 8001da4:	20000000 	.word	0x20000000
 8001da8:	053e2d63 	.word	0x053e2d63
 8001dac:	50000100 	.word	0x50000100
 8001db0:	50000400 	.word	0x50000400
 8001db4:	50000300 	.word	0x50000300
 8001db8:	50000700 	.word	0x50000700
 8001dbc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d10c      	bne.n	8001df2 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f023 010f 	bic.w	r1, r3, #15
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a1b      	ldr	r3, [r3, #32]
 8001de6:	1e5a      	subs	r2, r3, #1
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
 8001df0:	e007      	b.n	8001e02 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 020f 	bic.w	r2, r2, #15
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e06:	f023 0303 	bic.w	r3, r3, #3
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e12:	e007      	b.n	8001e24 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	f043 0210 	orr.w	r2, r3, #16
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	bf00      	nop

08001e30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b0b6      	sub	sp, #216	; 0xd8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d102      	bne.n	8001e54 <HAL_ADC_ConfigChannel+0x24>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	f000 bc04 	b.w	800265c <HAL_ADC_ConfigChannel+0x82c>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff fe0a 	bl	8001a7a <LL_ADC_REG_IsConversionOngoing>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 83e8 	bne.w	800263e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6859      	ldr	r1, [r3, #4]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f7ff fd1c 	bl	80018b8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fdf8 	bl	8001a7a <LL_ADC_REG_IsConversionOngoing>
 8001e8a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fe04 	bl	8001aa0 <LL_ADC_INJ_IsConversionOngoing>
 8001e98:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f040 81d9 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 81d4 	bne.w	8002258 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eb8:	d10f      	bne.n	8001eda <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f7ff fd23 	bl	8001910 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fcdd 	bl	8001892 <LL_ADC_SetSamplingTimeCommonConfig>
 8001ed8:	e00e      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	6819      	ldr	r1, [r3, #0]
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f7ff fd12 	bl	8001910 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff fccd 	bl	8001892 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	695a      	ldr	r2, [r3, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	08db      	lsrs	r3, r3, #3
 8001f04:	f003 0303 	and.w	r3, r3, #3
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	d022      	beq.n	8001f60 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	6919      	ldr	r1, [r3, #16]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f2a:	f7ff fc27 	bl	800177c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	6919      	ldr	r1, [r3, #16]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f7ff fc73 	bl	8001826 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6919      	ldr	r1, [r3, #16]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	7f1b      	ldrb	r3, [r3, #28]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x126>
 8001f50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f54:	e000      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x128>
 8001f56:	2300      	movs	r3, #0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f7ff fc7f 	bl	800185c <LL_ADC_SetOffsetSaturation>
 8001f5e:	e17b      	b.n	8002258 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2100      	movs	r1, #0
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fc2c 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x15c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fc21 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	0e9b      	lsrs	r3, r3, #26
 8001f86:	f003 021f 	and.w	r2, r3, #31
 8001f8a:	e01e      	b.n	8001fca <HAL_ADC_ConfigChannel+0x19a>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fc16 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001faa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d101      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001fba:	2320      	movs	r3, #32
 8001fbc:	e004      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001fbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	0e9b      	lsrs	r3, r3, #26
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	e018      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1e4>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ffa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001ffe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e004      	b.n	8002014 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800200a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800200e:	fab3 f383 	clz	r3, r3
 8002012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002014:	429a      	cmp	r2, r3
 8002016:	d106      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fbe5 	bl	80017f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fbc9 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x222>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2101      	movs	r1, #1
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fbbe 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002048:	4603      	mov	r3, r0
 800204a:	0e9b      	lsrs	r3, r3, #26
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	e01e      	b.n	8002090 <HAL_ADC_ConfigChannel+0x260>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2101      	movs	r1, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fbb3 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 800205e:	4603      	mov	r3, r0
 8002060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002070:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002080:	2320      	movs	r3, #32
 8002082:	e004      	b.n	800208e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002084:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x278>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0e9b      	lsrs	r3, r3, #26
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	e018      	b.n	80020da <HAL_ADC_ConfigChannel+0x2aa>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80020cc:	2320      	movs	r3, #32
 80020ce:	e004      	b.n	80020da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80020d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020da:	429a      	cmp	r2, r3
 80020dc:	d106      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	2101      	movs	r1, #1
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fb82 	bl	80017f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2102      	movs	r1, #2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fb66 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x2e8>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2102      	movs	r1, #2
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fb5b 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	0e9b      	lsrs	r3, r3, #26
 8002112:	f003 021f 	and.w	r2, r3, #31
 8002116:	e01e      	b.n	8002156 <HAL_ADC_ConfigChannel+0x326>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2102      	movs	r1, #2
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff fb50 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 8002124:	4603      	mov	r3, r0
 8002126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800212e:	fa93 f3a3 	rbit	r3, r3
 8002132:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002136:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800213a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800213e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e004      	b.n	8002154 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800214a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800214e:	fab3 f383 	clz	r3, r3
 8002152:	b2db      	uxtb	r3, r3
 8002154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215e:	2b00      	cmp	r3, #0
 8002160:	d105      	bne.n	800216e <HAL_ADC_ConfigChannel+0x33e>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	0e9b      	lsrs	r3, r3, #26
 8002168:	f003 031f 	and.w	r3, r3, #31
 800216c:	e016      	b.n	800219c <HAL_ADC_ConfigChannel+0x36c>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800217a:	fa93 f3a3 	rbit	r3, r3
 800217e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800218e:	2320      	movs	r3, #32
 8002190:	e004      	b.n	800219c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002192:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002196:	fab3 f383 	clz	r3, r3
 800219a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800219c:	429a      	cmp	r2, r3
 800219e:	d106      	bne.n	80021ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2200      	movs	r2, #0
 80021a6:	2102      	movs	r1, #2
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fb21 	bl	80017f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2103      	movs	r1, #3
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fb05 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80021ba:	4603      	mov	r3, r0
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <HAL_ADC_ConfigChannel+0x3aa>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2103      	movs	r1, #3
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fafa 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80021d0:	4603      	mov	r3, r0
 80021d2:	0e9b      	lsrs	r3, r3, #26
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	e017      	b.n	800220a <HAL_ADC_ConfigChannel+0x3da>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2103      	movs	r1, #3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff faef 	bl	80017c4 <LL_ADC_GetOffsetChannel>
 80021e6:	4603      	mov	r3, r0
 80021e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002212:	2b00      	cmp	r3, #0
 8002214:	d105      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x3f2>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	0e9b      	lsrs	r3, r3, #26
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	e011      	b.n	8002246 <HAL_ADC_ConfigChannel+0x416>
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002232:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800223a:	2320      	movs	r3, #32
 800223c:	e003      	b.n	8002246 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800223e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002246:	429a      	cmp	r2, r3
 8002248:	d106      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2200      	movs	r2, #0
 8002250:	2103      	movs	r1, #3
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff facc 	bl	80017f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fbf9 	bl	8001a54 <LL_ADC_IsEnabled>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f040 813d 	bne.w	80024e4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	6819      	ldr	r1, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	461a      	mov	r2, r3
 8002278:	f7ff fb76 	bl	8001968 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4aa2      	ldr	r2, [pc, #648]	; (800250c <HAL_ADC_ConfigChannel+0x6dc>)
 8002282:	4293      	cmp	r3, r2
 8002284:	f040 812e 	bne.w	80024e4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x480>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0e9b      	lsrs	r3, r3, #26
 800229e:	3301      	adds	r3, #1
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	2b09      	cmp	r3, #9
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e019      	b.n	80022e4 <HAL_ADC_ConfigChannel+0x4b4>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022c0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e003      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80022cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3301      	adds	r3, #1
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	2b09      	cmp	r3, #9
 80022dc:	bf94      	ite	ls
 80022de:	2301      	movls	r3, #1
 80022e0:	2300      	movhi	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d079      	beq.n	80023dc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x4d4>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	3301      	adds	r3, #1
 80022fc:	069b      	lsls	r3, r3, #26
 80022fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002302:	e015      	b.n	8002330 <HAL_ADC_ConfigChannel+0x500>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002312:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002314:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e003      	b.n	8002328 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	3301      	adds	r3, #1
 800232a:	069b      	lsls	r3, r3, #26
 800232c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x520>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	0e9b      	lsrs	r3, r3, #26
 8002342:	3301      	adds	r3, #1
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2101      	movs	r1, #1
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	e017      	b.n	8002380 <HAL_ADC_ConfigChannel+0x550>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800235e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002368:	2320      	movs	r3, #32
 800236a:	e003      	b.n	8002374 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800236c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800236e:	fab3 f383 	clz	r3, r3
 8002372:	b2db      	uxtb	r3, r3
 8002374:	3301      	adds	r3, #1
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	2101      	movs	r1, #1
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	ea42 0103 	orr.w	r1, r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10a      	bne.n	80023a6 <HAL_ADC_ConfigChannel+0x576>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0e9b      	lsrs	r3, r3, #26
 8002396:	3301      	adds	r3, #1
 8002398:	f003 021f 	and.w	r2, r3, #31
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	051b      	lsls	r3, r3, #20
 80023a4:	e018      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x5a8>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e003      	b.n	80023ca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80023c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023c4:	fab3 f383 	clz	r3, r3
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	3301      	adds	r3, #1
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4613      	mov	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	4413      	add	r3, r2
 80023d6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023d8:	430b      	orrs	r3, r1
 80023da:	e07e      	b.n	80024da <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d107      	bne.n	80023f8 <HAL_ADC_ConfigChannel+0x5c8>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	0e9b      	lsrs	r3, r3, #26
 80023ee:	3301      	adds	r3, #1
 80023f0:	069b      	lsls	r3, r3, #26
 80023f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023f6:	e015      	b.n	8002424 <HAL_ADC_ConfigChannel+0x5f4>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	fa93 f3a3 	rbit	r3, r3
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002408:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002410:	2320      	movs	r3, #32
 8002412:	e003      	b.n	800241c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	069b      	lsls	r3, r3, #26
 8002420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x614>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	3301      	adds	r3, #1
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f303 	lsl.w	r3, r1, r3
 8002442:	e017      	b.n	8002474 <HAL_ADC_ConfigChannel+0x644>
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	fa93 f3a3 	rbit	r3, r3
 8002450:	61fb      	str	r3, [r7, #28]
  return result;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800245c:	2320      	movs	r3, #32
 800245e:	e003      	b.n	8002468 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	fab3 f383 	clz	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	3301      	adds	r3, #1
 800246a:	f003 031f 	and.w	r3, r3, #31
 800246e:	2101      	movs	r1, #1
 8002470:	fa01 f303 	lsl.w	r3, r1, r3
 8002474:	ea42 0103 	orr.w	r1, r2, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10d      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x670>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	0e9b      	lsrs	r3, r3, #26
 800248a:	3301      	adds	r3, #1
 800248c:	f003 021f 	and.w	r2, r3, #31
 8002490:	4613      	mov	r3, r2
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	4413      	add	r3, r2
 8002496:	3b1e      	subs	r3, #30
 8002498:	051b      	lsls	r3, r3, #20
 800249a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800249e:	e01b      	b.n	80024d8 <HAL_ADC_ConfigChannel+0x6a8>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	613b      	str	r3, [r7, #16]
  return result;
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f003 021f 	and.w	r2, r3, #31
 80024ca:	4613      	mov	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	3b1e      	subs	r3, #30
 80024d2:	051b      	lsls	r3, r3, #20
 80024d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d8:	430b      	orrs	r3, r1
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	6892      	ldr	r2, [r2, #8]
 80024de:	4619      	mov	r1, r3
 80024e0:	f7ff fa16 	bl	8001910 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b09      	ldr	r3, [pc, #36]	; (8002510 <HAL_ADC_ConfigChannel+0x6e0>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80af 	beq.w	8002650 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_ConfigChannel+0x6d6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_ADC_ConfigChannel+0x6e4>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d10a      	bne.n	800251c <HAL_ADC_ConfigChannel+0x6ec>
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_ADC_ConfigChannel+0x6e8>)
 8002508:	e009      	b.n	800251e <HAL_ADC_ConfigChannel+0x6ee>
 800250a:	bf00      	nop
 800250c:	407f0000 	.word	0x407f0000
 8002510:	80080000 	.word	0x80080000
 8002514:	50000100 	.word	0x50000100
 8002518:	50000300 	.word	0x50000300
 800251c:	4b51      	ldr	r3, [pc, #324]	; (8002664 <HAL_ADC_ConfigChannel+0x834>)
 800251e:	4618      	mov	r0, r3
 8002520:	f7ff f91e 	bl	8001760 <LL_ADC_GetCommonPathInternalCh>
 8002524:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a4e      	ldr	r2, [pc, #312]	; (8002668 <HAL_ADC_ConfigChannel+0x838>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_ADC_ConfigChannel+0x70c>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_ADC_ConfigChannel+0x83c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d134      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800253c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d12e      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002550:	d17e      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800255a:	d004      	beq.n	8002566 <HAL_ADC_ConfigChannel+0x736>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a43      	ldr	r2, [pc, #268]	; (8002670 <HAL_ADC_ConfigChannel+0x840>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x73a>
 8002566:	4a43      	ldr	r2, [pc, #268]	; (8002674 <HAL_ADC_ConfigChannel+0x844>)
 8002568:	e000      	b.n	800256c <HAL_ADC_ConfigChannel+0x73c>
 800256a:	4a3e      	ldr	r2, [pc, #248]	; (8002664 <HAL_ADC_ConfigChannel+0x834>)
 800256c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002570:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002574:	4619      	mov	r1, r3
 8002576:	4610      	mov	r0, r2
 8002578:	f7ff f8df 	bl	800173a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <HAL_ADC_ConfigChannel+0x848>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	4a3e      	ldr	r2, [pc, #248]	; (800267c <HAL_ADC_ConfigChannel+0x84c>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002596:	e002      	b.n	800259e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3b01      	subs	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f9      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025a4:	e054      	b.n	8002650 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a35      	ldr	r2, [pc, #212]	; (8002680 <HAL_ADC_ConfigChannel+0x850>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d120      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x7c2>
 80025b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d11a      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c4:	d144      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025ce:	d004      	beq.n	80025da <HAL_ADC_ConfigChannel+0x7aa>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a26      	ldr	r2, [pc, #152]	; (8002670 <HAL_ADC_ConfigChannel+0x840>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d101      	bne.n	80025de <HAL_ADC_ConfigChannel+0x7ae>
 80025da:	4a26      	ldr	r2, [pc, #152]	; (8002674 <HAL_ADC_ConfigChannel+0x844>)
 80025dc:	e000      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x7b0>
 80025de:	4a21      	ldr	r2, [pc, #132]	; (8002664 <HAL_ADC_ConfigChannel+0x834>)
 80025e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f7ff f8a5 	bl	800173a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025f0:	e02e      	b.n	8002650 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a23      	ldr	r2, [pc, #140]	; (8002684 <HAL_ADC_ConfigChannel+0x854>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d129      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002600:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d123      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a18      	ldr	r2, [pc, #96]	; (8002670 <HAL_ADC_ConfigChannel+0x840>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d01e      	beq.n	8002650 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800261a:	d004      	beq.n	8002626 <HAL_ADC_ConfigChannel+0x7f6>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a13      	ldr	r2, [pc, #76]	; (8002670 <HAL_ADC_ConfigChannel+0x840>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x7fa>
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <HAL_ADC_ConfigChannel+0x844>)
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x7fc>
 800262a:	4a0e      	ldr	r2, [pc, #56]	; (8002664 <HAL_ADC_ConfigChannel+0x834>)
 800262c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002630:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f7ff f87f 	bl	800173a <LL_ADC_SetCommonPathInternalCh>
 800263c:	e008      	b.n	8002650 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	f043 0220 	orr.w	r2, r3, #32
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002658:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800265c:	4618      	mov	r0, r3
 800265e:	37d8      	adds	r7, #216	; 0xd8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	50000700 	.word	0x50000700
 8002668:	c3210000 	.word	0xc3210000
 800266c:	90c00010 	.word	0x90c00010
 8002670:	50000100 	.word	0x50000100
 8002674:	50000300 	.word	0x50000300
 8002678:	20000000 	.word	0x20000000
 800267c:	053e2d63 	.word	0x053e2d63
 8002680:	c7520000 	.word	0xc7520000
 8002684:	cb840000 	.word	0xcb840000

08002688 <LL_ADC_IsEnabled>:
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <LL_ADC_IsEnabled+0x18>
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <LL_ADC_IsEnabled+0x1a>
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr

080026ae <LL_ADC_REG_IsConversionOngoing>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b04      	cmp	r3, #4
 80026c0:	d101      	bne.n	80026c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b0a1      	sub	sp, #132	; 0x84
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e0cb      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80026fa:	2300      	movs	r3, #0
 80026fc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80026fe:	2300      	movs	r3, #0
 8002700:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800270a:	d102      	bne.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800270c:	4b61      	ldr	r3, [pc, #388]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	e001      	b.n	8002716 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002720:	f043 0220 	orr.w	r2, r3, #32
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0aa      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ffb9 	bl	80026ae <LL_ADC_REG_IsConversionOngoing>
 800273c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ffb3 	bl	80026ae <LL_ADC_REG_IsConversionOngoing>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	f040 808c 	bne.w	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002750:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 8088 	bne.w	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002760:	d004      	beq.n	800276c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a4b      	ldr	r2, [pc, #300]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d101      	bne.n	8002770 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800276c:	4b4a      	ldr	r3, [pc, #296]	; (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800276e:	e000      	b.n	8002772 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8002770:	4b4a      	ldr	r3, [pc, #296]	; (800289c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8002772:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d041      	beq.n	8002800 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800277c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800278e:	035b      	lsls	r3, r3, #13
 8002790:	430b      	orrs	r3, r1
 8002792:	431a      	orrs	r2, r3
 8002794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002796:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a0:	d004      	beq.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a3b      	ldr	r2, [pc, #236]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d10f      	bne.n	80027cc <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80027ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80027b0:	f7ff ff6a 	bl	8002688 <LL_ADC_IsEnabled>
 80027b4:	4604      	mov	r4, r0
 80027b6:	4837      	ldr	r0, [pc, #220]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80027b8:	f7ff ff66 	bl	8002688 <LL_ADC_IsEnabled>
 80027bc:	4603      	mov	r3, r0
 80027be:	4323      	orrs	r3, r4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e008      	b.n	80027de <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 80027cc:	4834      	ldr	r0, [pc, #208]	; (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80027ce:	f7ff ff5b 	bl	8002688 <LL_ADC_IsEnabled>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04c      	beq.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80027ea:	f023 030f 	bic.w	r3, r3, #15
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	6811      	ldr	r1, [r2, #0]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	6892      	ldr	r2, [r2, #8]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	431a      	orrs	r2, r3
 80027fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027fc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80027fe:	e03d      	b.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002814:	d004      	beq.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a1e      	ldr	r2, [pc, #120]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10f      	bne.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8002820:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002824:	f7ff ff30 	bl	8002688 <LL_ADC_IsEnabled>
 8002828:	4604      	mov	r4, r0
 800282a:	481a      	ldr	r0, [pc, #104]	; (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800282c:	f7ff ff2c 	bl	8002688 <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	4323      	orrs	r3, r4
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e008      	b.n	8002852 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8002840:	4817      	ldr	r0, [pc, #92]	; (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8002842:	f7ff ff21 	bl	8002688 <LL_ADC_IsEnabled>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d012      	beq.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002856:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800285e:	f023 030f 	bic.w	r3, r3, #15
 8002862:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002864:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002866:	e009      	b.n	800287c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	f043 0220 	orr.w	r2, r3, #32
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800287a:	e000      	b.n	800287e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800287c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800288a:	4618      	mov	r0, r3
 800288c:	3784      	adds	r7, #132	; 0x84
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}
 8002892:	bf00      	nop
 8002894:	50000100 	.word	0x50000100
 8002898:	50000300 	.word	0x50000300
 800289c:	50000700 	.word	0x50000700
 80028a0:	50000400 	.word	0x50000400

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	6039      	str	r1, [r7, #0]
 8002912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002918:	2b00      	cmp	r3, #0
 800291a:	db0a      	blt.n	8002932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	490c      	ldr	r1, [pc, #48]	; (8002954 <__NVIC_SetPriority+0x4c>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	0112      	lsls	r2, r2, #4
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	440b      	add	r3, r1
 800292c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002930:	e00a      	b.n	8002948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	b2da      	uxtb	r2, r3
 8002936:	4908      	ldr	r1, [pc, #32]	; (8002958 <__NVIC_SetPriority+0x50>)
 8002938:	79fb      	ldrb	r3, [r7, #7]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	3b04      	subs	r3, #4
 8002940:	0112      	lsls	r2, r2, #4
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	440b      	add	r3, r1
 8002946:	761a      	strb	r2, [r3, #24]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000e100 	.word	0xe000e100
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f1c3 0307 	rsb	r3, r3, #7
 8002976:	2b04      	cmp	r3, #4
 8002978:	bf28      	it	cs
 800297a:	2304      	movcs	r3, #4
 800297c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3304      	adds	r3, #4
 8002982:	2b06      	cmp	r3, #6
 8002984:	d902      	bls.n	800298c <NVIC_EncodePriority+0x30>
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3b03      	subs	r3, #3
 800298a:	e000      	b.n	800298e <NVIC_EncodePriority+0x32>
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002990:	f04f 32ff 	mov.w	r2, #4294967295
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	401a      	ands	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a4:	f04f 31ff 	mov.w	r1, #4294967295
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	fa01 f303 	lsl.w	r3, r1, r3
 80029ae:	43d9      	mvns	r1, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	4313      	orrs	r3, r2
         );
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029d4:	d301      	bcc.n	80029da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00f      	b.n	80029fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <SysTick_Config+0x40>)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3b01      	subs	r3, #1
 80029e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029e2:	210f      	movs	r1, #15
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f7ff ff8e 	bl	8002908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ec:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <SysTick_Config+0x40>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029f2:	4b04      	ldr	r3, [pc, #16]	; (8002a04 <SysTick_Config+0x40>)
 80029f4:	2207      	movs	r2, #7
 80029f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	e000e010 	.word	0xe000e010

08002a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff ff47 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
 8002a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2c:	f7ff ff5e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f7ff ff90 	bl	800295c <NVIC_EncodePriority>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7ff ff5f 	bl	8002908 <__NVIC_SetPriority>
}
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffb2 	bl	80029c4 <SysTick_Config>
 8002a60:	4603      	mov	r3, r0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a7a:	e15a      	b.n	8002d32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 814c 	beq.w	8002d2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d005      	beq.n	8002aac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d130      	bne.n	8002b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	f003 0201 	and.w	r2, r3, #1
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d017      	beq.n	8002b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d123      	bne.n	8002b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0307 	and.w	r3, r3, #7
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80a6 	beq.w	8002d2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be0:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_GPIO_Init+0x2e4>)
 8002be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be4:	4a5a      	ldr	r2, [pc, #360]	; (8002d50 <HAL_GPIO_Init+0x2e4>)
 8002be6:	f043 0301 	orr.w	r3, r3, #1
 8002bea:	6613      	str	r3, [r2, #96]	; 0x60
 8002bec:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_GPIO_Init+0x2e4>)
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bf8:	4a56      	ldr	r2, [pc, #344]	; (8002d54 <HAL_GPIO_Init+0x2e8>)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c22:	d01f      	beq.n	8002c64 <HAL_GPIO_Init+0x1f8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a4c      	ldr	r2, [pc, #304]	; (8002d58 <HAL_GPIO_Init+0x2ec>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d019      	beq.n	8002c60 <HAL_GPIO_Init+0x1f4>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a4b      	ldr	r2, [pc, #300]	; (8002d5c <HAL_GPIO_Init+0x2f0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <HAL_GPIO_Init+0x1f0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a4a      	ldr	r2, [pc, #296]	; (8002d60 <HAL_GPIO_Init+0x2f4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00d      	beq.n	8002c58 <HAL_GPIO_Init+0x1ec>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a49      	ldr	r2, [pc, #292]	; (8002d64 <HAL_GPIO_Init+0x2f8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <HAL_GPIO_Init+0x1e8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <HAL_GPIO_Init+0x2fc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d101      	bne.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c4c:	2305      	movs	r3, #5
 8002c4e:	e00a      	b.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c50:	2306      	movs	r3, #6
 8002c52:	e008      	b.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c54:	2304      	movs	r3, #4
 8002c56:	e006      	b.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e004      	b.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e002      	b.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_GPIO_Init+0x1fa>
 8002c64:	2300      	movs	r3, #0
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	f002 0203 	and.w	r2, r2, #3
 8002c6c:	0092      	lsls	r2, r2, #2
 8002c6e:	4093      	lsls	r3, r2
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c76:	4937      	ldr	r1, [pc, #220]	; (8002d54 <HAL_GPIO_Init+0x2e8>)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c84:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ca8:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cae:	4b2f      	ldr	r3, [pc, #188]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cd2:	4a26      	ldr	r2, [pc, #152]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002cd8:	4b24      	ldr	r3, [pc, #144]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d26:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_GPIO_Init+0x300>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f ae9d 	bne.w	8002a7c <HAL_GPIO_Init+0x10>
  }
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010000 	.word	0x40010000
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	48000800 	.word	0x48000800
 8002d60:	48000c00 	.word	0x48000c00
 8002d64:	48001000 	.word	0x48001000
 8002d68:	48001400 	.word	0x48001400
 8002d6c:	40010400 	.word	0x40010400

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d8c:	e002      	b.n	8002d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d141      	bne.n	8002e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dae:	4b4b      	ldr	r3, [pc, #300]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d131      	bne.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dbc:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dc2:	4a46      	ldr	r2, [pc, #280]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dcc:	4b43      	ldr	r3, [pc, #268]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd4:	4a41      	ldr	r2, [pc, #260]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ddc:	4b40      	ldr	r3, [pc, #256]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2232      	movs	r2, #50	; 0x32
 8002de2:	fb02 f303 	mul.w	r3, r2, r3
 8002de6:	4a3f      	ldr	r2, [pc, #252]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	0c9b      	lsrs	r3, r3, #18
 8002dee:	3301      	adds	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df2:	e002      	b.n	8002dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dfa:	4b38      	ldr	r3, [pc, #224]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e06:	d102      	bne.n	8002e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f2      	bne.n	8002df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e0e:	4b33      	ldr	r3, [pc, #204]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e1a:	d158      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e057      	b.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e20:	4b2e      	ldr	r3, [pc, #184]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e26:	4a2d      	ldr	r2, [pc, #180]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e30:	e04d      	b.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e38:	d141      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3a:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e46:	d131      	bne.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e48:	4b24      	ldr	r3, [pc, #144]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4e:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e68:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2232      	movs	r2, #50	; 0x32
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	0c9b      	lsrs	r3, r3, #18
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	e002      	b.n	8002e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e86:	4b15      	ldr	r3, [pc, #84]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e92:	d102      	bne.n	8002e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f2      	bne.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e9a:	4b10      	ldr	r3, [pc, #64]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea6:	d112      	bne.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e011      	b.n	8002ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ebc:	e007      	b.n	8002ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ebe:	4b07      	ldr	r3, [pc, #28]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ec6:	4a05      	ldr	r2, [pc, #20]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef6:	6093      	str	r3, [r2, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40007000 	.word	0x40007000

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e306      	b.n	8003528 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d075      	beq.n	8003012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f26:	4b97      	ldr	r3, [pc, #604]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
 8002f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f30:	4b94      	ldr	r3, [pc, #592]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_OscConfig+0x3e>
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d002      	beq.n	8002f4c <HAL_RCC_OscConfig+0x44>
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d10b      	bne.n	8002f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d05b      	beq.n	8003010 <HAL_RCC_OscConfig+0x108>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d157      	bne.n	8003010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e2e1      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f6c:	d106      	bne.n	8002f7c <HAL_RCC_OscConfig+0x74>
 8002f6e:	4b85      	ldr	r3, [pc, #532]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a84      	ldr	r2, [pc, #528]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	e01d      	b.n	8002fb8 <HAL_RCC_OscConfig+0xb0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x98>
 8002f86:	4b7f      	ldr	r3, [pc, #508]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a7e      	ldr	r2, [pc, #504]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	4b7c      	ldr	r3, [pc, #496]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a7b      	ldr	r2, [pc, #492]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e00b      	b.n	8002fb8 <HAL_RCC_OscConfig+0xb0>
 8002fa0:	4b78      	ldr	r3, [pc, #480]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a77      	ldr	r2, [pc, #476]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002faa:	6013      	str	r3, [r2, #0]
 8002fac:	4b75      	ldr	r3, [pc, #468]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a74      	ldr	r2, [pc, #464]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc0:	f7fe fb7a 	bl	80016b8 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc8:	f7fe fb76 	bl	80016b8 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b64      	cmp	r3, #100	; 0x64
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e2a6      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fda:	4b6a      	ldr	r3, [pc, #424]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0xc0>
 8002fe6:	e014      	b.n	8003012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe fb66 	bl	80016b8 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fb62 	bl	80016b8 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e292      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003002:	4b60      	ldr	r3, [pc, #384]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0xe8>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d075      	beq.n	800310a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301e:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003028:	4b56      	ldr	r3, [pc, #344]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b0c      	cmp	r3, #12
 8003036:	d102      	bne.n	800303e <HAL_RCC_OscConfig+0x136>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d002      	beq.n	8003044 <HAL_RCC_OscConfig+0x13c>
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d11f      	bne.n	8003084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003044:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_OscConfig+0x154>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e265      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b49      	ldr	r3, [pc, #292]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	061b      	lsls	r3, r3, #24
 800306a:	4946      	ldr	r1, [pc, #280]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003070:	4b45      	ldr	r3, [pc, #276]	; (8003188 <HAL_RCC_OscConfig+0x280>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe fad3 	bl	8001620 <HAL_InitTick>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d043      	beq.n	8003108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e251      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d023      	beq.n	80030d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800308c:	4b3d      	ldr	r3, [pc, #244]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a3c      	ldr	r2, [pc, #240]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe fb0e 	bl	80016b8 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a0:	f7fe fb0a 	bl	80016b8 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e23a      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b2:	4b34      	ldr	r3, [pc, #208]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030be:	4b31      	ldr	r3, [pc, #196]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	061b      	lsls	r3, r3, #24
 80030cc:	492d      	ldr	r1, [pc, #180]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	604b      	str	r3, [r1, #4]
 80030d2:	e01a      	b.n	800310a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d4:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2a      	ldr	r2, [pc, #168]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fe faea 	bl	80016b8 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fe fae6 	bl	80016b8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e216      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030fa:	4b22      	ldr	r3, [pc, #136]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1e0>
 8003106:	e000      	b.n	800310a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d041      	beq.n	800319a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01c      	beq.n	8003158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311e:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003120:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003124:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312e:	f7fe fac3 	bl	80016b8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003136:	f7fe fabf 	bl	80016b8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e1ef      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003148:	4b0e      	ldr	r3, [pc, #56]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0ef      	beq.n	8003136 <HAL_RCC_OscConfig+0x22e>
 8003156:	e020      	b.n	800319a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 800315a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315e:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_RCC_OscConfig+0x27c>)
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003168:	f7fe faa6 	bl	80016b8 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316e:	e00d      	b.n	800318c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003170:	f7fe faa2 	bl	80016b8 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d906      	bls.n	800318c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1d2      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800318c:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1ea      	bne.n	8003170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 80a6 	beq.w	80032f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031ac:	4b84      	ldr	r3, [pc, #528]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x2b4>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <HAL_RCC_OscConfig+0x2b6>
 80031bc:	2300      	movs	r3, #0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b7f      	ldr	r3, [pc, #508]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c6:	4a7e      	ldr	r2, [pc, #504]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	6593      	str	r3, [r2, #88]	; 0x58
 80031ce:	4b7c      	ldr	r3, [pc, #496]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031de:	4b79      	ldr	r3, [pc, #484]	; (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031ea:	4b76      	ldr	r3, [pc, #472]	; (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a75      	ldr	r2, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fe fa5f 	bl	80016b8 <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fe fa5b 	bl	80016b8 <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b02      	cmp	r3, #2
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e18b      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003210:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <HAL_RCC_OscConfig+0x4bc>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_RCC_OscConfig+0x32e>
 8003224:	4b66      	ldr	r3, [pc, #408]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800322a:	4a65      	ldr	r2, [pc, #404]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003234:	e024      	b.n	8003280 <HAL_RCC_OscConfig+0x378>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d110      	bne.n	8003260 <HAL_RCC_OscConfig+0x358>
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003246:	f043 0304 	orr.w	r3, r3, #4
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324e:	4b5c      	ldr	r3, [pc, #368]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003256:	f043 0301 	orr.w	r3, r3, #1
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325e:	e00f      	b.n	8003280 <HAL_RCC_OscConfig+0x378>
 8003260:	4b57      	ldr	r3, [pc, #348]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	4a56      	ldr	r2, [pc, #344]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	f023 0301 	bic.w	r3, r3, #1
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	4a52      	ldr	r2, [pc, #328]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003278:	f023 0304 	bic.w	r3, r3, #4
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d016      	beq.n	80032b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fe fa16 	bl	80016b8 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328e:	e00a      	b.n	80032a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003290:	f7fe fa12 	bl	80016b8 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	f241 3288 	movw	r2, #5000	; 0x1388
 800329e:	4293      	cmp	r3, r2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e140      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a6:	4b46      	ldr	r3, [pc, #280]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0ed      	beq.n	8003290 <HAL_RCC_OscConfig+0x388>
 80032b4:	e015      	b.n	80032e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b6:	f7fe f9ff 	bl	80016b8 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032be:	f7fe f9fb 	bl	80016b8 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e129      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d4:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f003 0302 	and.w	r3, r3, #2
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d1ed      	bne.n	80032be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032e2:	7ffb      	ldrb	r3, [r7, #31]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d105      	bne.n	80032f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e8:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ec:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d03c      	beq.n	800337a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01c      	beq.n	8003342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330e:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003318:	f7fe f9ce 	bl	80016b8 <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003320:	f7fe f9ca 	bl	80016b8 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e0fa      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003332:	4b23      	ldr	r3, [pc, #140]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003334:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0ef      	beq.n	8003320 <HAL_RCC_OscConfig+0x418>
 8003340:	e01b      	b.n	800337a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003342:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003344:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003348:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800334a:	f023 0301 	bic.w	r3, r3, #1
 800334e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7fe f9b1 	bl	80016b8 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800335a:	f7fe f9ad 	bl	80016b8 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e0dd      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800336c:	4b14      	ldr	r3, [pc, #80]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1ef      	bne.n	800335a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	2b00      	cmp	r3, #0
 8003380:	f000 80d1 	beq.w	8003526 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 030c 	and.w	r3, r3, #12
 800338c:	2b0c      	cmp	r3, #12
 800338e:	f000 808b 	beq.w	80034a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2b02      	cmp	r3, #2
 8003398:	d15e      	bne.n	8003458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe f987 	bl	80016b8 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033ac:	e00c      	b.n	80033c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ae:	f7fe f983 	bl	80016b8 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d905      	bls.n	80033c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e0b3      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c8:	4b59      	ldr	r3, [pc, #356]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1ec      	bne.n	80033ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	4b56      	ldr	r3, [pc, #344]	; (8003534 <HAL_RCC_OscConfig+0x62c>)
 80033da:	4013      	ands	r3, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6a11      	ldr	r1, [r2, #32]
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0112      	lsls	r2, r2, #4
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033ee:	0212      	lsls	r2, r2, #8
 80033f0:	4311      	orrs	r1, r2
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033f6:	0852      	lsrs	r2, r2, #1
 80033f8:	3a01      	subs	r2, #1
 80033fa:	0552      	lsls	r2, r2, #21
 80033fc:	4311      	orrs	r1, r2
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003402:	0852      	lsrs	r2, r2, #1
 8003404:	3a01      	subs	r2, #1
 8003406:	0652      	lsls	r2, r2, #25
 8003408:	4311      	orrs	r1, r2
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800340e:	06d2      	lsls	r2, r2, #27
 8003410:	430a      	orrs	r2, r1
 8003412:	4947      	ldr	r1, [pc, #284]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 8003414:	4313      	orrs	r3, r2
 8003416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003418:	4b45      	ldr	r3, [pc, #276]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a44      	ldr	r2, [pc, #272]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800341e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003424:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a41      	ldr	r2, [pc, #260]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003430:	f7fe f942 	bl	80016b8 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003438:	f7fe f93e 	bl	80016b8 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e06e      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x530>
 8003456:	e066      	b.n	8003526 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003458:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800345e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003462:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003464:	4b32      	ldr	r3, [pc, #200]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a31      	ldr	r2, [pc, #196]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800346a:	f023 0303 	bic.w	r3, r3, #3
 800346e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003470:	4b2f      	ldr	r3, [pc, #188]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a2e      	ldr	r2, [pc, #184]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 8003476:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fe f91a 	bl	80016b8 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003488:	f7fe f916 	bl	80016b8 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e046      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349a:	4b25      	ldr	r3, [pc, #148]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x580>
 80034a6:	e03e      	b.n	8003526 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e039      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_OscConfig+0x628>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d12c      	bne.n	8003522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	3b01      	subs	r3, #1
 80034d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d123      	bne.n	8003522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d11b      	bne.n	8003522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d113      	bne.n	8003522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	085b      	lsrs	r3, r3, #1
 8003506:	3b01      	subs	r3, #1
 8003508:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d109      	bne.n	8003522 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	085b      	lsrs	r3, r3, #1
 800351a:	3b01      	subs	r3, #1
 800351c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351e:	429a      	cmp	r2, r3
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	019f800c 	.word	0x019f800c

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e11e      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003550:	4b91      	ldr	r3, [pc, #580]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d910      	bls.n	8003580 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355e:	4b8e      	ldr	r3, [pc, #568]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 020f 	bic.w	r2, r3, #15
 8003566:	498c      	ldr	r1, [pc, #560]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	4313      	orrs	r3, r2
 800356c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b8a      	ldr	r3, [pc, #552]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d001      	beq.n	8003580 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e106      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d073      	beq.n	8003674 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b03      	cmp	r3, #3
 8003592:	d129      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003594:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0f4      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035a4:	f000 f99c 	bl	80038e0 <RCC_GetSysClockFreqFromPLLSource>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <HAL_RCC_ClockConfig+0x268>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d93f      	bls.n	8003632 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035b2:	4b7a      	ldr	r3, [pc, #488]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d033      	beq.n	8003632 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d12f      	bne.n	8003632 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035d2:	4b72      	ldr	r3, [pc, #456]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035da:	4a70      	ldr	r2, [pc, #448]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80035dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035e2:	2380      	movs	r3, #128	; 0x80
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	e024      	b.n	8003632 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d107      	bne.n	8003600 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035f0:	4b6a      	ldr	r3, [pc, #424]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d109      	bne.n	8003610 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0c6      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003600:	4b66      	ldr	r3, [pc, #408]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0be      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003610:	f000 f8ce 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8003614:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	4a61      	ldr	r2, [pc, #388]	; (80037a0 <HAL_RCC_ClockConfig+0x268>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d909      	bls.n	8003632 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800361e:	4b5f      	ldr	r3, [pc, #380]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003626:	4a5d      	ldr	r2, [pc, #372]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800362c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003632:	4b5a      	ldr	r3, [pc, #360]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f023 0203 	bic.w	r2, r3, #3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4957      	ldr	r1, [pc, #348]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003640:	4313      	orrs	r3, r2
 8003642:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003644:	f7fe f838 	bl	80016b8 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364a:	e00a      	b.n	8003662 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800364c:	f7fe f834 	bl	80016b8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e095      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003662:	4b4e      	ldr	r3, [pc, #312]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 020c 	and.w	r2, r3, #12
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	429a      	cmp	r2, r3
 8003672:	d1eb      	bne.n	800364c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d023      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b43      	ldr	r3, [pc, #268]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a42      	ldr	r2, [pc, #264]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003692:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003696:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036a4:	4b3d      	ldr	r3, [pc, #244]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036ac:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80036ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b4:	4b39      	ldr	r3, [pc, #228]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4936      	ldr	r1, [pc, #216]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
 80036c6:	e008      	b.n	80036da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d105      	bne.n	80036da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ce:	4b33      	ldr	r3, [pc, #204]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	4a32      	ldr	r2, [pc, #200]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 80036d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d21d      	bcs.n	8003724 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e8:	4b2b      	ldr	r3, [pc, #172]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 020f 	bic.w	r2, r3, #15
 80036f0:	4929      	ldr	r1, [pc, #164]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036f8:	f7fd ffde 	bl	80016b8 <HAL_GetTick>
 80036fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fe:	e00a      	b.n	8003716 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003700:	f7fd ffda 	bl	80016b8 <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	f241 3288 	movw	r2, #5000	; 0x1388
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e03b      	b.n	800378e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCC_ClockConfig+0x260>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d1ed      	bne.n	8003700 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003730:	4b1a      	ldr	r3, [pc, #104]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	4917      	ldr	r1, [pc, #92]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d009      	beq.n	8003762 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374e:	4b13      	ldr	r3, [pc, #76]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	490f      	ldr	r1, [pc, #60]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003762:	f000 f825 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8003766:	4602      	mov	r2, r0
 8003768:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_RCC_ClockConfig+0x264>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	091b      	lsrs	r3, r3, #4
 800376e:	f003 030f 	and.w	r3, r3, #15
 8003772:	490c      	ldr	r1, [pc, #48]	; (80037a4 <HAL_RCC_ClockConfig+0x26c>)
 8003774:	5ccb      	ldrb	r3, [r1, r3]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x270>)
 8003780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003782:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <HAL_RCC_ClockConfig+0x274>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd ff4a 	bl	8001620 <HAL_InitTick>
 800378c:	4603      	mov	r3, r0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40022000 	.word	0x40022000
 800379c:	40021000 	.word	0x40021000
 80037a0:	04c4b400 	.word	0x04c4b400
 80037a4:	08007698 	.word	0x08007698
 80037a8:	20000000 	.word	0x20000000
 80037ac:	20000004 	.word	0x20000004

080037b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037b6:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d102      	bne.n	80037c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037c2:	4b2a      	ldr	r3, [pc, #168]	; (800386c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	e047      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037c8:	4b27      	ldr	r3, [pc, #156]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 030c 	and.w	r3, r3, #12
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d102      	bne.n	80037da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	e03e      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037da:	4b23      	ldr	r3, [pc, #140]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d136      	bne.n	8003854 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037e6:	4b20      	ldr	r3, [pc, #128]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0303 	and.w	r3, r3, #3
 80037ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	3301      	adds	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d10c      	bne.n	800381e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	4a16      	ldr	r2, [pc, #88]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380e:	68d2      	ldr	r2, [r2, #12]
 8003810:	0a12      	lsrs	r2, r2, #8
 8003812:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	617b      	str	r3, [r7, #20]
      break;
 800381c:	e00c      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381e:	4a13      	ldr	r2, [pc, #76]	; (800386c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003828:	68d2      	ldr	r2, [r2, #12]
 800382a:	0a12      	lsrs	r2, r2, #8
 800382c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003830:	fb02 f303 	mul.w	r3, r2, r3
 8003834:	617b      	str	r3, [r7, #20]
      break;
 8003836:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_GetSysClockFreq+0xb8>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0e5b      	lsrs	r3, r3, #25
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	e001      	b.n	8003858 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003858:	693b      	ldr	r3, [r7, #16]
}
 800385a:	4618      	mov	r0, r3
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40021000 	.word	0x40021000
 800386c:	00f42400 	.word	0x00f42400

08003870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	080076a8 	.word	0x080076a8

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b8:	f7ff ffda 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0adb      	lsrs	r3, r3, #11
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	080076a8 	.word	0x080076a8

080038e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d10c      	bne.n	800391e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390e:	68d2      	ldr	r2, [r2, #12]
 8003910:	0a12      	lsrs	r2, r2, #8
 8003912:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
    break;
 800391c:	e00c      	b.n	8003938 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391e:	4a11      	ldr	r2, [pc, #68]	; (8003964 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003928:	68d2      	ldr	r2, [r2, #12]
 800392a:	0a12      	lsrs	r2, r2, #8
 800392c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
    break;
 8003936:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0e5b      	lsrs	r3, r3, #25
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003952:	687b      	ldr	r3, [r7, #4]
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40021000 	.word	0x40021000
 8003964:	00f42400 	.word	0x00f42400

08003968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003970:	2300      	movs	r3, #0
 8003972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003974:	2300      	movs	r3, #0
 8003976:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8098 	beq.w	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398a:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003996:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399a:	4a3f      	ldr	r2, [pc, #252]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a0:	6593      	str	r3, [r2, #88]	; 0x58
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ae:	2301      	movs	r3, #1
 80039b0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b2:	4b3a      	ldr	r3, [pc, #232]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a39      	ldr	r2, [pc, #228]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039be:	f7fd fe7b 	bl	80016b8 <HAL_GetTick>
 80039c2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c4:	e009      	b.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c6:	f7fd fe77 	bl	80016b8 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d902      	bls.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	74fb      	strb	r3, [r7, #19]
        break;
 80039d8:	e005      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039da:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ef      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d159      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01e      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d019      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a14:	4b20      	ldr	r3, [pc, #128]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1a:	4a1f      	ldr	r2, [pc, #124]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a34:	4a18      	ldr	r2, [pc, #96]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d016      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a46:	f7fd fe37 	bl	80016b8 <HAL_GetTick>
 8003a4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a4c:	e00b      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a4e:	f7fd fe33 	bl	80016b8 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d902      	bls.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	74fb      	strb	r3, [r7, #19]
            break;
 8003a64:	e006      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a66:	4b0c      	ldr	r3, [pc, #48]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ec      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7a:	4b07      	ldr	r3, [pc, #28]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a88:	4903      	ldr	r1, [pc, #12]	; (8003a98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a90:	e008      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a92:	7cfb      	ldrb	r3, [r7, #19]
 8003a94:	74bb      	strb	r3, [r7, #18]
 8003a96:	e005      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa0:	7cfb      	ldrb	r3, [r7, #19]
 8003aa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa4:	7c7b      	ldrb	r3, [r7, #17]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d105      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aaa:	4ba7      	ldr	r3, [pc, #668]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aae:	4aa6      	ldr	r2, [pc, #664]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00a      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac2:	4ba1      	ldr	r3, [pc, #644]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac8:	f023 0203 	bic.w	r2, r3, #3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	499d      	ldr	r1, [pc, #628]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae4:	4b98      	ldr	r3, [pc, #608]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aea:	f023 020c 	bic.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	4995      	ldr	r1, [pc, #596]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0304 	and.w	r3, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b06:	4b90      	ldr	r3, [pc, #576]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	498c      	ldr	r1, [pc, #560]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b28:	4b87      	ldr	r3, [pc, #540]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	4984      	ldr	r1, [pc, #528]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b4a:	4b7f      	ldr	r3, [pc, #508]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	497b      	ldr	r1, [pc, #492]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b6c:	4b76      	ldr	r3, [pc, #472]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	4973      	ldr	r1, [pc, #460]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b8e:	4b6e      	ldr	r3, [pc, #440]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	496a      	ldr	r1, [pc, #424]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb0:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	4962      	ldr	r1, [pc, #392]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	4959      	ldr	r1, [pc, #356]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf4:	4b54      	ldr	r3, [pc, #336]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	4951      	ldr	r1, [pc, #324]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d015      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c16:	4b4c      	ldr	r3, [pc, #304]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	4948      	ldr	r1, [pc, #288]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c34:	d105      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c36:	4b44      	ldr	r3, [pc, #272]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	4a43      	ldr	r2, [pc, #268]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c4e:	4b3e      	ldr	r3, [pc, #248]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	493a      	ldr	r1, [pc, #232]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c6c:	d105      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a35      	ldr	r2, [pc, #212]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c78:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d015      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c86:	4b30      	ldr	r3, [pc, #192]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c94:	492c      	ldr	r1, [pc, #176]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ca4:	d105      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca6:	4b28      	ldr	r3, [pc, #160]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a27      	ldr	r2, [pc, #156]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cbe:	4b22      	ldr	r3, [pc, #136]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	491e      	ldr	r1, [pc, #120]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cdc:	d105      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cde:	4b1a      	ldr	r3, [pc, #104]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	4a19      	ldr	r2, [pc, #100]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ce8:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d015      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cf6:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d04:	4910      	ldr	r1, [pc, #64]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d14:	d105      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d16:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d20:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d018      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d2e:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	4902      	ldr	r1, [pc, #8]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	e001      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d52:	d105      	bne.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d5e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d015      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d72:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	4918      	ldr	r1, [pc, #96]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d96:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d015      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003da4:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003da6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003daa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db2:	490a      	ldr	r1, [pc, #40]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dc2:	d105      	bne.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	4a04      	ldr	r2, [pc, #16]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40021000 	.word	0x40021000

08003de0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e09d      	b.n	8003f2e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d108      	bne.n	8003e0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d009      	beq.n	8003e18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	61da      	str	r2, [r3, #28]
 8003e0a:	e005      	b.n	8003e18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fc ff60 	bl	8000cf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e58:	d902      	bls.n	8003e60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	e002      	b.n	8003e66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e6e:	d007      	beq.n	8003e80 <HAL_SPI_Init+0xa0>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	ea42 0103 	orr.w	r1, r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	0c1b      	lsrs	r3, r3, #16
 8003edc:	f003 0204 	and.w	r2, r3, #4
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eee:	f003 0308 	and.w	r3, r3, #8
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003efc:	ea42 0103 	orr.w	r1, r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b088      	sub	sp, #32
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_SPI_Transmit+0x22>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e158      	b.n	800420a <HAL_SPI_Transmit+0x2d4>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f60:	f7fd fbaa 	bl	80016b8 <HAL_GetTick>
 8003f64:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f66:	88fb      	ldrh	r3, [r7, #6]
 8003f68:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d002      	beq.n	8003f7c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
 8003f78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f7a:	e13d      	b.n	80041f8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <HAL_SPI_Transmit+0x52>
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d102      	bne.n	8003f8e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f8c:	e134      	b.n	80041f8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2203      	movs	r2, #3
 8003f92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	88fa      	ldrh	r2, [r7, #6]
 8003fa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd8:	d10f      	bne.n	8003ffa <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b40      	cmp	r3, #64	; 0x40
 8004006:	d007      	beq.n	8004018 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004016:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004020:	d94b      	bls.n	80040ba <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d002      	beq.n	8004030 <HAL_SPI_Transmit+0xfa>
 800402a:	8afb      	ldrh	r3, [r7, #22]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d13e      	bne.n	80040ae <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	881a      	ldrh	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004040:	1c9a      	adds	r2, r3, #2
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004054:	e02b      	b.n	80040ae <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b02      	cmp	r3, #2
 8004062:	d112      	bne.n	800408a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004068:	881a      	ldrh	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407e:	b29b      	uxth	r3, r3
 8004080:	3b01      	subs	r3, #1
 8004082:	b29a      	uxth	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004088:	e011      	b.n	80040ae <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800408a:	f7fd fb15 	bl	80016b8 <HAL_GetTick>
 800408e:	4602      	mov	r2, r0
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	429a      	cmp	r2, r3
 8004098:	d803      	bhi.n	80040a2 <HAL_SPI_Transmit+0x16c>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d102      	bne.n	80040a8 <HAL_SPI_Transmit+0x172>
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040ac:	e0a4      	b.n	80041f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1ce      	bne.n	8004056 <HAL_SPI_Transmit+0x120>
 80040b8:	e07c      	b.n	80041b4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d002      	beq.n	80040c8 <HAL_SPI_Transmit+0x192>
 80040c2:	8afb      	ldrh	r3, [r7, #22]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d170      	bne.n	80041aa <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d912      	bls.n	80040f8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	881a      	ldrh	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	1c9a      	adds	r2, r3, #2
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	3b02      	subs	r3, #2
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040f6:	e058      	b.n	80041aa <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	330c      	adds	r3, #12
 8004102:	7812      	ldrb	r2, [r2, #0]
 8004104:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410a:	1c5a      	adds	r2, r3, #1
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004114:	b29b      	uxth	r3, r3
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800411e:	e044      	b.n	80041aa <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0302 	and.w	r3, r3, #2
 800412a:	2b02      	cmp	r3, #2
 800412c:	d12b      	bne.n	8004186 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004132:	b29b      	uxth	r3, r3
 8004134:	2b01      	cmp	r3, #1
 8004136:	d912      	bls.n	800415e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	881a      	ldrh	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	1c9a      	adds	r2, r3, #2
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b02      	subs	r3, #2
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800415c:	e025      	b.n	80041aa <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	330c      	adds	r3, #12
 8004168:	7812      	ldrb	r2, [r2, #0]
 800416a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004184:	e011      	b.n	80041aa <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004186:	f7fd fa97 	bl	80016b8 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d803      	bhi.n	800419e <HAL_SPI_Transmit+0x268>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800419c:	d102      	bne.n	80041a4 <HAL_SPI_Transmit+0x26e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d102      	bne.n	80041aa <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80041a8:	e026      	b.n	80041f8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1b5      	bne.n	8004120 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	6839      	ldr	r1, [r7, #0]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fce3 	bl	8004b84 <SPI_EndRxTxTransaction>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d2:	2300      	movs	r3, #0
 80041d4:	613b      	str	r3, [r7, #16]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d002      	beq.n	80041f6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e000      	b.n	80041f8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80041f6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004208:	7ffb      	ldrb	r3, [r7, #31]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b088      	sub	sp, #32
 8004216:	af02      	add	r7, sp, #8
 8004218:	60f8      	str	r0, [r7, #12]
 800421a:	60b9      	str	r1, [r7, #8]
 800421c:	603b      	str	r3, [r7, #0]
 800421e:	4613      	mov	r3, r2
 8004220:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422e:	d112      	bne.n	8004256 <HAL_SPI_Receive+0x44>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10e      	bne.n	8004256 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2204      	movs	r2, #4
 800423c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004240:	88fa      	ldrh	r2, [r7, #6]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	68b9      	ldr	r1, [r7, #8]
 800424c:	68f8      	ldr	r0, [r7, #12]
 800424e:	f000 f910 	bl	8004472 <HAL_SPI_TransmitReceive>
 8004252:	4603      	mov	r3, r0
 8004254:	e109      	b.n	800446a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800425c:	2b01      	cmp	r3, #1
 800425e:	d101      	bne.n	8004264 <HAL_SPI_Receive+0x52>
 8004260:	2302      	movs	r3, #2
 8004262:	e102      	b.n	800446a <HAL_SPI_Receive+0x258>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800426c:	f7fd fa24 	bl	80016b8 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b01      	cmp	r3, #1
 800427c:	d002      	beq.n	8004284 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800427e:	2302      	movs	r3, #2
 8004280:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004282:	e0e9      	b.n	8004458 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_SPI_Receive+0x7e>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004294:	e0e0      	b.n	8004458 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2204      	movs	r2, #4
 800429a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	88fa      	ldrh	r2, [r7, #6]
 80042ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042e0:	d908      	bls.n	80042f4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	e007      	b.n	8004304 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004302:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d10f      	bne.n	800432e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800431c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d007      	beq.n	800434c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800434a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004354:	d867      	bhi.n	8004426 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004356:	e030      	b.n	80043ba <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d117      	bne.n	8004396 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f103 020c 	add.w	r2, r3, #12
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	7812      	ldrb	r2, [r2, #0]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004394:	e011      	b.n	80043ba <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004396:	f7fd f98f 	bl	80016b8 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d803      	bhi.n	80043ae <HAL_SPI_Receive+0x19c>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d102      	bne.n	80043b4 <HAL_SPI_Receive+0x1a2>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043b8:	e04e      	b.n	8004458 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1c8      	bne.n	8004358 <HAL_SPI_Receive+0x146>
 80043c6:	e034      	b.n	8004432 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d115      	bne.n	8004402 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68da      	ldr	r2, [r3, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	b292      	uxth	r2, r2
 80043e2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	1c9a      	adds	r2, r3, #2
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004400:	e011      	b.n	8004426 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004402:	f7fd f959 	bl	80016b8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	429a      	cmp	r2, r3
 8004410:	d803      	bhi.n	800441a <HAL_SPI_Receive+0x208>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d102      	bne.n	8004420 <HAL_SPI_Receive+0x20e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004424:	e018      	b.n	8004458 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1ca      	bne.n	80043c8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 fb4c 	bl	8004ad4 <SPI_EndRxTransaction>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2220      	movs	r2, #32
 8004446:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	75fb      	strb	r3, [r7, #23]
 8004454:	e000      	b.n	8004458 <HAL_SPI_Receive+0x246>
  }

error :
 8004456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b08a      	sub	sp, #40	; 0x28
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004480:	2301      	movs	r3, #1
 8004482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_SPI_TransmitReceive+0x26>
 8004494:	2302      	movs	r3, #2
 8004496:	e1fb      	b.n	8004890 <HAL_SPI_TransmitReceive+0x41e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80044a0:	f7fd f90a 	bl	80016b8 <HAL_GetTick>
 80044a4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80044ac:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80044b4:	887b      	ldrh	r3, [r7, #2]
 80044b6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80044bc:	7efb      	ldrb	r3, [r7, #27]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d00e      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x6e>
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044c8:	d106      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d102      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x66>
 80044d2:	7efb      	ldrb	r3, [r7, #27]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d003      	beq.n	80044e0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80044d8:	2302      	movs	r3, #2
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044de:	e1cd      	b.n	800487c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x80>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_SPI_TransmitReceive+0x80>
 80044ec:	887b      	ldrh	r3, [r7, #2]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d103      	bne.n	80044fa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80044f8:	e1c0      	b.n	800487c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b04      	cmp	r3, #4
 8004504:	d003      	beq.n	800450e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2205      	movs	r2, #5
 800450a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	887a      	ldrh	r2, [r7, #2]
 800451e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	887a      	ldrh	r2, [r7, #2]
 8004526:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	887a      	ldrh	r2, [r7, #2]
 8004534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	887a      	ldrh	r2, [r7, #2]
 800453a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004550:	d802      	bhi.n	8004558 <HAL_SPI_TransmitReceive+0xe6>
 8004552:	8a3b      	ldrh	r3, [r7, #16]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d908      	bls.n	800456a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685a      	ldr	r2, [r3, #4]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004566:	605a      	str	r2, [r3, #4]
 8004568:	e007      	b.n	800457a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004578:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004584:	2b40      	cmp	r3, #64	; 0x40
 8004586:	d007      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004596:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045a0:	d97c      	bls.n	800469c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <HAL_SPI_TransmitReceive+0x13e>
 80045aa:	8a7b      	ldrh	r3, [r7, #18]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d169      	bne.n	8004684 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b01      	subs	r3, #1
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045d4:	e056      	b.n	8004684 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d11b      	bne.n	800461c <HAL_SPI_TransmitReceive+0x1aa>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d016      	beq.n	800461c <HAL_SPI_TransmitReceive+0x1aa>
 80045ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d113      	bne.n	800461c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004604:	1c9a      	adds	r2, r3, #2
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800460e:	b29b      	uxth	r3, r3
 8004610:	3b01      	subs	r3, #1
 8004612:	b29a      	uxth	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b01      	cmp	r3, #1
 8004628:	d11c      	bne.n	8004664 <HAL_SPI_TransmitReceive+0x1f2>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004630:	b29b      	uxth	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d016      	beq.n	8004664 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004640:	b292      	uxth	r2, r2
 8004642:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	1c9a      	adds	r2, r3, #2
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004660:	2301      	movs	r3, #1
 8004662:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004664:	f7fd f828 	bl	80016b8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004670:	429a      	cmp	r2, r3
 8004672:	d807      	bhi.n	8004684 <HAL_SPI_TransmitReceive+0x212>
 8004674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d003      	beq.n	8004684 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004682:	e0fb      	b.n	800487c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004688:	b29b      	uxth	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1a3      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x164>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d19d      	bne.n	80045d6 <HAL_SPI_TransmitReceive+0x164>
 800469a:	e0df      	b.n	800485c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d003      	beq.n	80046ac <HAL_SPI_TransmitReceive+0x23a>
 80046a4:	8a7b      	ldrh	r3, [r7, #18]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	f040 80cb 	bne.w	8004842 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d912      	bls.n	80046dc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b02      	subs	r3, #2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046da:	e0b2      	b.n	8004842 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004702:	e09e      	b.n	8004842 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b02      	cmp	r3, #2
 8004710:	d134      	bne.n	800477c <HAL_SPI_TransmitReceive+0x30a>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004716:	b29b      	uxth	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d02f      	beq.n	800477c <HAL_SPI_TransmitReceive+0x30a>
 800471c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471e:	2b01      	cmp	r3, #1
 8004720:	d12c      	bne.n	800477c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d912      	bls.n	8004752 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b02      	subs	r3, #2
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004750:	e012      	b.n	8004778 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	330c      	adds	r3, #12
 800475c:	7812      	ldrb	r2, [r2, #0]
 800475e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b01      	cmp	r3, #1
 8004788:	d148      	bne.n	800481c <HAL_SPI_TransmitReceive+0x3aa>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d042      	beq.n	800481c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d923      	bls.n	80047ea <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68da      	ldr	r2, [r3, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ac:	b292      	uxth	r2, r2
 80047ae:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	3b02      	subs	r3, #2
 80047c4:	b29a      	uxth	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d81f      	bhi.n	8004818 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	e016      	b.n	8004818 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f103 020c 	add.w	r2, r3, #12
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	7812      	ldrb	r2, [r2, #0]
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004818:	2301      	movs	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800481c:	f7fc ff4c 	bl	80016b8 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004828:	429a      	cmp	r2, r3
 800482a:	d803      	bhi.n	8004834 <HAL_SPI_TransmitReceive+0x3c2>
 800482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d102      	bne.n	800483a <HAL_SPI_TransmitReceive+0x3c8>
 8004834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004836:	2b00      	cmp	r3, #0
 8004838:	d103      	bne.n	8004842 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004840:	e01c      	b.n	800487c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004846:	b29b      	uxth	r3, r3
 8004848:	2b00      	cmp	r3, #0
 800484a:	f47f af5b 	bne.w	8004704 <HAL_SPI_TransmitReceive+0x292>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	f47f af54 	bne.w	8004704 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f98f 	bl	8004b84 <SPI_EndRxTxTransaction>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d006      	beq.n	800487a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2220      	movs	r2, #32
 8004876:	661a      	str	r2, [r3, #96]	; 0x60
 8004878:	e000      	b.n	800487c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800487a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800488c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004890:	4618      	mov	r0, r3
 8004892:	3728      	adds	r7, #40	; 0x28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b088      	sub	sp, #32
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	603b      	str	r3, [r7, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048a8:	f7fc ff06 	bl	80016b8 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	4413      	add	r3, r2
 80048b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048b8:	f7fc fefe 	bl	80016b8 <HAL_GetTick>
 80048bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048be:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	015b      	lsls	r3, r3, #5
 80048c4:	0d1b      	lsrs	r3, r3, #20
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	fb02 f303 	mul.w	r3, r2, r3
 80048cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ce:	e054      	b.n	800497a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d6:	d050      	beq.n	800497a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048d8:	f7fc feee 	bl	80016b8 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d902      	bls.n	80048ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d13d      	bne.n	800496a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004906:	d111      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004910:	d004      	beq.n	800491c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d107      	bne.n	800492c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800492a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004930:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004934:	d10f      	bne.n	8004956 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004954:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e017      	b.n	800499a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d101      	bne.n	8004974 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	3b01      	subs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4013      	ands	r3, r2
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	429a      	cmp	r2, r3
 8004988:	bf0c      	ite	eq
 800498a:	2301      	moveq	r3, #1
 800498c:	2300      	movne	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	461a      	mov	r2, r3
 8004992:	79fb      	ldrb	r3, [r7, #7]
 8004994:	429a      	cmp	r2, r3
 8004996:	d19b      	bne.n	80048d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000000 	.word	0x20000000

080049a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b08a      	sub	sp, #40	; 0x28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80049ba:	f7fc fe7d 	bl	80016b8 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	1a9b      	subs	r3, r3, r2
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	4413      	add	r3, r2
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80049ca:	f7fc fe75 	bl	80016b8 <HAL_GetTick>
 80049ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80049d8:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4613      	mov	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	00da      	lsls	r2, r3, #3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	0d1b      	lsrs	r3, r3, #20
 80049e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ea:	fb02 f303 	mul.w	r3, r2, r3
 80049ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80049f0:	e060      	b.n	8004ab4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80049f8:	d107      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0x62>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004a08:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a10:	d050      	beq.n	8004ab4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a12:	f7fc fe51 	bl	80016b8 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d902      	bls.n	8004a28 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d13d      	bne.n	8004aa4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004a36:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a40:	d111      	bne.n	8004a66 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d004      	beq.n	8004a56 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a54:	d107      	bne.n	8004a66 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6e:	d10f      	bne.n	8004a90 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a8e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e010      	b.n	8004ac6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4013      	ands	r3, r2
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d196      	bne.n	80049f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3728      	adds	r7, #40	; 0x28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000000 	.word	0x20000000

08004ad4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae8:	d111      	bne.n	8004b0e <SPI_EndRxTransaction+0x3a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af2:	d004      	beq.n	8004afe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004afc:	d107      	bne.n	8004b0e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7ff febd 	bl	8004898 <SPI_WaitFlagStateUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b28:	f043 0220 	orr.w	r2, r3, #32
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e023      	b.n	8004b7c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b3c:	d11d      	bne.n	8004b7a <SPI_EndRxTransaction+0xa6>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b46:	d004      	beq.n	8004b52 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b50:	d113      	bne.n	8004b7a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff ff22 	bl	80049a8 <SPI_WaitFifoStateUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e000      	b.n	8004b7c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f7ff ff03 	bl	80049a8 <SPI_WaitFifoStateUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d007      	beq.n	8004bb8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bac:	f043 0220 	orr.w	r2, r3, #32
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e027      	b.n	8004c08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2180      	movs	r1, #128	; 0x80
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff fe68 	bl	8004898 <SPI_WaitFlagStateUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d007      	beq.n	8004bde <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bd2:	f043 0220 	orr.w	r2, r3, #32
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e014      	b.n	8004c08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fedc 	bl	80049a8 <SPI_WaitFifoStateUntilTimeout>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e000      	b.n	8004c08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004c06:	2300      	movs	r3, #0
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e049      	b.n	8004cb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7fc fb4a 	bl	80012d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2202      	movs	r2, #2
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	f000 f9a0 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e049      	b.n	8004d64 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d106      	bne.n	8004cea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f7fc fb27 	bl	8001338 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f000 f949 	bl	8004f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e0ff      	b.n	8004f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b14      	cmp	r3, #20
 8004d96:	f200 80f0 	bhi.w	8004f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004df5 	.word	0x08004df5
 8004da4:	08004f7b 	.word	0x08004f7b
 8004da8:	08004f7b 	.word	0x08004f7b
 8004dac:	08004f7b 	.word	0x08004f7b
 8004db0:	08004e35 	.word	0x08004e35
 8004db4:	08004f7b 	.word	0x08004f7b
 8004db8:	08004f7b 	.word	0x08004f7b
 8004dbc:	08004f7b 	.word	0x08004f7b
 8004dc0:	08004e77 	.word	0x08004e77
 8004dc4:	08004f7b 	.word	0x08004f7b
 8004dc8:	08004f7b 	.word	0x08004f7b
 8004dcc:	08004f7b 	.word	0x08004f7b
 8004dd0:	08004eb7 	.word	0x08004eb7
 8004dd4:	08004f7b 	.word	0x08004f7b
 8004dd8:	08004f7b 	.word	0x08004f7b
 8004ddc:	08004f7b 	.word	0x08004f7b
 8004de0:	08004ef9 	.word	0x08004ef9
 8004de4:	08004f7b 	.word	0x08004f7b
 8004de8:	08004f7b 	.word	0x08004f7b
 8004dec:	08004f7b 	.word	0x08004f7b
 8004df0:	08004f39 	.word	0x08004f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 f968 	bl	80050d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f042 0208 	orr.w	r2, r2, #8
 8004e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	699a      	ldr	r2, [r3, #24]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0204 	bic.w	r2, r2, #4
 8004e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6999      	ldr	r1, [r3, #24]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	619a      	str	r2, [r3, #24]
      break;
 8004e32:	e0a5      	b.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68b9      	ldr	r1, [r7, #8]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f9e2 	bl	8005204 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699a      	ldr	r2, [r3, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	021a      	lsls	r2, r3, #8
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	619a      	str	r2, [r3, #24]
      break;
 8004e74:	e084      	b.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f000 fa55 	bl	800532c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f042 0208 	orr.w	r2, r2, #8
 8004e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69da      	ldr	r2, [r3, #28]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0204 	bic.w	r2, r2, #4
 8004ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69d9      	ldr	r1, [r3, #28]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	61da      	str	r2, [r3, #28]
      break;
 8004eb4:	e064      	b.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68b9      	ldr	r1, [r7, #8]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f000 fac7 	bl	8005450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	69d9      	ldr	r1, [r3, #28]
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	021a      	lsls	r2, r3, #8
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	61da      	str	r2, [r3, #28]
      break;
 8004ef6:	e043      	b.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fb3a 	bl	8005578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f36:	e023      	b.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fb84 	bl	800564c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f78:	e002      	b.n	8004f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop

08004f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	4a42      	ldr	r2, [pc, #264]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d013      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d00f      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a3f      	ldr	r2, [pc, #252]	; (80050b4 <TIM_Base_SetConfig+0x120>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a3e      	ldr	r2, [pc, #248]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d007      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3d      	ldr	r2, [pc, #244]	; (80050bc <TIM_Base_SetConfig+0x128>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a3c      	ldr	r2, [pc, #240]	; (80050c0 <TIM_Base_SetConfig+0x12c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d108      	bne.n	8004fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a31      	ldr	r2, [pc, #196]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d01f      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff4:	d01b      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <TIM_Base_SetConfig+0x120>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d017      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2d      	ldr	r2, [pc, #180]	; (80050b8 <TIM_Base_SetConfig+0x124>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2c      	ldr	r2, [pc, #176]	; (80050bc <TIM_Base_SetConfig+0x128>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00f      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <TIM_Base_SetConfig+0x130>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00b      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2b      	ldr	r2, [pc, #172]	; (80050c8 <TIM_Base_SetConfig+0x134>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d007      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <TIM_Base_SetConfig+0x138>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d003      	beq.n	800502e <TIM_Base_SetConfig+0x9a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a25      	ldr	r2, [pc, #148]	; (80050c0 <TIM_Base_SetConfig+0x12c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	4313      	orrs	r3, r2
 800504c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <TIM_Base_SetConfig+0x11c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d013      	beq.n	8005094 <TIM_Base_SetConfig+0x100>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a13      	ldr	r2, [pc, #76]	; (80050bc <TIM_Base_SetConfig+0x128>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00f      	beq.n	8005094 <TIM_Base_SetConfig+0x100>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <TIM_Base_SetConfig+0x130>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00b      	beq.n	8005094 <TIM_Base_SetConfig+0x100>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <TIM_Base_SetConfig+0x134>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_Base_SetConfig+0x100>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a11      	ldr	r2, [pc, #68]	; (80050cc <TIM_Base_SetConfig+0x138>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_Base_SetConfig+0x100>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a0c      	ldr	r2, [pc, #48]	; (80050c0 <TIM_Base_SetConfig+0x12c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d103      	bne.n	800509c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	615a      	str	r2, [r3, #20]
}
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40012c00 	.word	0x40012c00
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40013400 	.word	0x40013400
 80050c0:	40015000 	.word	0x40015000
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800

080050d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0201 	bic.w	r2, r3, #1
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f023 0303 	bic.w	r3, r3, #3
 800510a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f023 0302 	bic.w	r3, r3, #2
 800511c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	4313      	orrs	r3, r2
 8005126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a30      	ldr	r2, [pc, #192]	; (80051ec <TIM_OC1_SetConfig+0x11c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d013      	beq.n	8005158 <TIM_OC1_SetConfig+0x88>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <TIM_OC1_SetConfig+0x120>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d00f      	beq.n	8005158 <TIM_OC1_SetConfig+0x88>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a2e      	ldr	r2, [pc, #184]	; (80051f4 <TIM_OC1_SetConfig+0x124>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00b      	beq.n	8005158 <TIM_OC1_SetConfig+0x88>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a2d      	ldr	r2, [pc, #180]	; (80051f8 <TIM_OC1_SetConfig+0x128>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d007      	beq.n	8005158 <TIM_OC1_SetConfig+0x88>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a2c      	ldr	r2, [pc, #176]	; (80051fc <TIM_OC1_SetConfig+0x12c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d003      	beq.n	8005158 <TIM_OC1_SetConfig+0x88>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a2b      	ldr	r2, [pc, #172]	; (8005200 <TIM_OC1_SetConfig+0x130>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d10c      	bne.n	8005172 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	f023 0308 	bic.w	r3, r3, #8
 800515e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <TIM_OC1_SetConfig+0x11c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d013      	beq.n	80051a2 <TIM_OC1_SetConfig+0xd2>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <TIM_OC1_SetConfig+0x120>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00f      	beq.n	80051a2 <TIM_OC1_SetConfig+0xd2>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <TIM_OC1_SetConfig+0x124>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_OC1_SetConfig+0xd2>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <TIM_OC1_SetConfig+0x128>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_OC1_SetConfig+0xd2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a19      	ldr	r2, [pc, #100]	; (80051fc <TIM_OC1_SetConfig+0x12c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_OC1_SetConfig+0xd2>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <TIM_OC1_SetConfig+0x130>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	621a      	str	r2, [r3, #32]
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40013400 	.word	0x40013400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800
 8005200:	40015000 	.word	0x40015000

08005204 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005204:	b480      	push	{r7}
 8005206:	b087      	sub	sp, #28
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a1b      	ldr	r3, [r3, #32]
 8005212:	f023 0210 	bic.w	r2, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0320 	bic.w	r3, r3, #32
 8005252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <TIM_OC2_SetConfig+0x110>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC2_SetConfig+0x74>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a2b      	ldr	r2, [pc, #172]	; (8005318 <TIM_OC2_SetConfig+0x114>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC2_SetConfig+0x74>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a2a      	ldr	r2, [pc, #168]	; (800531c <TIM_OC2_SetConfig+0x118>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d10d      	bne.n	8005294 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800527e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	011b      	lsls	r3, r3, #4
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1f      	ldr	r2, [pc, #124]	; (8005314 <TIM_OC2_SetConfig+0x110>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <TIM_OC2_SetConfig+0xc0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a1e      	ldr	r2, [pc, #120]	; (8005318 <TIM_OC2_SetConfig+0x114>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_OC2_SetConfig+0xc0>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a1e      	ldr	r2, [pc, #120]	; (8005320 <TIM_OC2_SetConfig+0x11c>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_OC2_SetConfig+0xc0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <TIM_OC2_SetConfig+0x120>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_OC2_SetConfig+0xc0>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a1c      	ldr	r2, [pc, #112]	; (8005328 <TIM_OC2_SetConfig+0x124>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_OC2_SetConfig+0xc0>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <TIM_OC2_SetConfig+0x118>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d113      	bne.n	80052ec <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	693a      	ldr	r2, [r7, #16]
 80052dc:	4313      	orrs	r3, r2
 80052de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	40012c00 	.word	0x40012c00
 8005318:	40013400 	.word	0x40013400
 800531c:	40015000 	.word	0x40015000
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800

0800532c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a1b      	ldr	r3, [r3, #32]
 800533a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <TIM_OC3_SetConfig+0x10c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d007      	beq.n	800539e <TIM_OC3_SetConfig+0x72>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2a      	ldr	r2, [pc, #168]	; (800543c <TIM_OC3_SetConfig+0x110>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d003      	beq.n	800539e <TIM_OC3_SetConfig+0x72>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <TIM_OC3_SetConfig+0x114>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d10d      	bne.n	80053ba <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	021b      	lsls	r3, r3, #8
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <TIM_OC3_SetConfig+0x10c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d013      	beq.n	80053ea <TIM_OC3_SetConfig+0xbe>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a1d      	ldr	r2, [pc, #116]	; (800543c <TIM_OC3_SetConfig+0x110>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00f      	beq.n	80053ea <TIM_OC3_SetConfig+0xbe>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <TIM_OC3_SetConfig+0x118>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d00b      	beq.n	80053ea <TIM_OC3_SetConfig+0xbe>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <TIM_OC3_SetConfig+0x11c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d007      	beq.n	80053ea <TIM_OC3_SetConfig+0xbe>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a1b      	ldr	r2, [pc, #108]	; (800544c <TIM_OC3_SetConfig+0x120>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d003      	beq.n	80053ea <TIM_OC3_SetConfig+0xbe>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a16      	ldr	r2, [pc, #88]	; (8005440 <TIM_OC3_SetConfig+0x114>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d113      	bne.n	8005412 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	011b      	lsls	r3, r3, #4
 800540c:	693a      	ldr	r2, [r7, #16]
 800540e:	4313      	orrs	r3, r2
 8005410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	621a      	str	r2, [r3, #32]
}
 800542c:	bf00      	nop
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40013400 	.word	0x40013400
 8005440:	40015000 	.word	0x40015000
 8005444:	40014000 	.word	0x40014000
 8005448:	40014400 	.word	0x40014400
 800544c:	40014800 	.word	0x40014800

08005450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6a1b      	ldr	r3, [r3, #32]
 800545e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800547e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	021b      	lsls	r3, r3, #8
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	4313      	orrs	r3, r2
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800549e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	031b      	lsls	r3, r3, #12
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a2c      	ldr	r2, [pc, #176]	; (8005560 <TIM_OC4_SetConfig+0x110>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_OC4_SetConfig+0x74>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a2b      	ldr	r2, [pc, #172]	; (8005564 <TIM_OC4_SetConfig+0x114>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_OC4_SetConfig+0x74>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <TIM_OC4_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d10d      	bne.n	80054e0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	031b      	lsls	r3, r3, #12
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <TIM_OC4_SetConfig+0x110>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <TIM_OC4_SetConfig+0xc0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <TIM_OC4_SetConfig+0x114>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00f      	beq.n	8005510 <TIM_OC4_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1e      	ldr	r2, [pc, #120]	; (800556c <TIM_OC4_SetConfig+0x11c>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00b      	beq.n	8005510 <TIM_OC4_SetConfig+0xc0>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a1d      	ldr	r2, [pc, #116]	; (8005570 <TIM_OC4_SetConfig+0x120>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d007      	beq.n	8005510 <TIM_OC4_SetConfig+0xc0>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a1c      	ldr	r2, [pc, #112]	; (8005574 <TIM_OC4_SetConfig+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d003      	beq.n	8005510 <TIM_OC4_SetConfig+0xc0>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <TIM_OC4_SetConfig+0x118>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d113      	bne.n	8005538 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005516:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800551e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	019b      	lsls	r3, r3, #6
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	019b      	lsls	r3, r3, #6
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	693a      	ldr	r2, [r7, #16]
 800553c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	621a      	str	r2, [r3, #32]
}
 8005552:	bf00      	nop
 8005554:	371c      	adds	r7, #28
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40013400 	.word	0x40013400
 8005568:	40015000 	.word	0x40015000
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800

08005578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800559e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	689b      	ldr	r3, [r3, #8]
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a19      	ldr	r2, [pc, #100]	; (8005634 <TIM_OC5_SetConfig+0xbc>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d013      	beq.n	80055fa <TIM_OC5_SetConfig+0x82>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <TIM_OC5_SetConfig+0xc0>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00f      	beq.n	80055fa <TIM_OC5_SetConfig+0x82>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a17      	ldr	r2, [pc, #92]	; (800563c <TIM_OC5_SetConfig+0xc4>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00b      	beq.n	80055fa <TIM_OC5_SetConfig+0x82>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4a16      	ldr	r2, [pc, #88]	; (8005640 <TIM_OC5_SetConfig+0xc8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d007      	beq.n	80055fa <TIM_OC5_SetConfig+0x82>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a15      	ldr	r2, [pc, #84]	; (8005644 <TIM_OC5_SetConfig+0xcc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d003      	beq.n	80055fa <TIM_OC5_SetConfig+0x82>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a14      	ldr	r2, [pc, #80]	; (8005648 <TIM_OC5_SetConfig+0xd0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d109      	bne.n	800560e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005600:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	621a      	str	r2, [r3, #32]
}
 8005628:	bf00      	nop
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	40012c00 	.word	0x40012c00
 8005638:	40013400 	.word	0x40013400
 800563c:	40014000 	.word	0x40014000
 8005640:	40014400 	.word	0x40014400
 8005644:	40014800 	.word	0x40014800
 8005648:	40015000 	.word	0x40015000

0800564c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800567a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800567e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	021b      	lsls	r3, r3, #8
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	051b      	lsls	r3, r3, #20
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	4313      	orrs	r3, r2
 800569e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1a      	ldr	r2, [pc, #104]	; (800570c <TIM_OC6_SetConfig+0xc0>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d013      	beq.n	80056d0 <TIM_OC6_SetConfig+0x84>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a19      	ldr	r2, [pc, #100]	; (8005710 <TIM_OC6_SetConfig+0xc4>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00f      	beq.n	80056d0 <TIM_OC6_SetConfig+0x84>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a18      	ldr	r2, [pc, #96]	; (8005714 <TIM_OC6_SetConfig+0xc8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00b      	beq.n	80056d0 <TIM_OC6_SetConfig+0x84>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a17      	ldr	r2, [pc, #92]	; (8005718 <TIM_OC6_SetConfig+0xcc>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d007      	beq.n	80056d0 <TIM_OC6_SetConfig+0x84>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a16      	ldr	r2, [pc, #88]	; (800571c <TIM_OC6_SetConfig+0xd0>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d003      	beq.n	80056d0 <TIM_OC6_SetConfig+0x84>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a15      	ldr	r2, [pc, #84]	; (8005720 <TIM_OC6_SetConfig+0xd4>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d109      	bne.n	80056e4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	029b      	lsls	r3, r3, #10
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	697a      	ldr	r2, [r7, #20]
 80056e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	40012c00 	.word	0x40012c00
 8005710:	40013400 	.word	0x40013400
 8005714:	40014000 	.word	0x40014000
 8005718:	40014400 	.word	0x40014400
 800571c:	40014800 	.word	0x40014800
 8005720:	40015000 	.word	0x40015000

08005724 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005738:	2302      	movs	r3, #2
 800573a:	e06f      	b.n	800581c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2202      	movs	r2, #2
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a31      	ldr	r2, [pc, #196]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d009      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a30      	ldr	r2, [pc, #192]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d004      	beq.n	800577a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a2e      	ldr	r2, [pc, #184]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d108      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005780:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d01d      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057bc:	d018      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a1c      	ldr	r2, [pc, #112]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d013      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a1a      	ldr	r2, [pc, #104]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00e      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a15      	ldr	r2, [pc, #84]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d009      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a16      	ldr	r2, [pc, #88]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d004      	beq.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a11      	ldr	r2, [pc, #68]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d10c      	bne.n	800580a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3714      	adds	r7, #20
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	40012c00 	.word	0x40012c00
 800582c:	40013400 	.word	0x40013400
 8005830:	40015000 	.word	0x40015000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e096      	b.n	800598a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	041b      	lsls	r3, r3, #16
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a2f      	ldr	r2, [pc, #188]	; (8005998 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d009      	beq.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2d      	ldr	r2, [pc, #180]	; (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d106      	bne.n	8005902 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a24      	ldr	r2, [pc, #144]	; (8005998 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a22      	ldr	r2, [pc, #136]	; (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a21      	ldr	r2, [pc, #132]	; (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d12b      	bne.n	8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	051b      	lsls	r3, r3, #20
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a11      	ldr	r2, [pc, #68]	; (8005998 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a10      	ldr	r2, [pc, #64]	; (800599c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a0e      	ldr	r2, [pc, #56]	; (80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d106      	bne.n	8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	4313      	orrs	r3, r2
 8005976:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40013400 	.word	0x40013400
 80059a0:	40015000 	.word	0x40015000

080059a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d101      	bne.n	80059b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e042      	b.n	8005a3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d106      	bne.n	80059ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7fb fd8f 	bl	80014ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2224      	movs	r2, #36	; 0x24
 80059d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f022 0201 	bic.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8c2 	bl	8005b70 <UART_SetConfig>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e022      	b.n	8005a3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fbb2 	bl	8006168 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f042 0201 	orr.w	r2, r2, #1
 8005a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fc39 	bl	80062ac <UART_CheckIdleState>
 8005a3a:	4603      	mov	r3, r0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3708      	adds	r7, #8
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	603b      	str	r3, [r7, #0]
 8005a50:	4613      	mov	r3, r2
 8005a52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	f040 8083 	bne.w	8005b66 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_UART_Transmit+0x28>
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e07b      	b.n	8005b68 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Transmit+0x3a>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e074      	b.n	8005b68 <HAL_UART_Transmit+0x124>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2221      	movs	r2, #33	; 0x21
 8005a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a96:	f7fb fe0f 	bl	80016b8 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab4:	d108      	bne.n	8005ac8 <HAL_UART_Transmit+0x84>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d104      	bne.n	8005ac8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	61bb      	str	r3, [r7, #24]
 8005ac6:	e003      	b.n	8005ad0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005acc:	2300      	movs	r3, #0
 8005ace:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005ad8:	e02c      	b.n	8005b34 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fc2c 	bl	8006342 <UART_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e039      	b.n	8005b68 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10b      	bne.n	8005b12 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	881b      	ldrh	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	61bb      	str	r3, [r7, #24]
 8005b10:	e007      	b.n	8005b22 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	781a      	ldrb	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1cc      	bne.n	8005ada <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	2140      	movs	r1, #64	; 0x40
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fbf9 	bl	8006342 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e006      	b.n	8005b68 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2220      	movs	r2, #32
 8005b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e000      	b.n	8005b68 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b66:	2302      	movs	r3, #2
  }
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3720      	adds	r7, #32
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b74:	b08c      	sub	sp, #48	; 0x30
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	4baa      	ldr	r3, [pc, #680]	; (8005e48 <UART_SetConfig+0x2d8>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a9f      	ldr	r2, [pc, #636]	; (8005e4c <UART_SetConfig+0x2dc>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005be6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	6812      	ldr	r2, [r2, #0]
 8005bee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfa:	f023 010f 	bic.w	r1, r3, #15
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a90      	ldr	r2, [pc, #576]	; (8005e50 <UART_SetConfig+0x2e0>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d125      	bne.n	8005c60 <UART_SetConfig+0xf0>
 8005c14:	4b8f      	ldr	r3, [pc, #572]	; (8005e54 <UART_SetConfig+0x2e4>)
 8005c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	2b03      	cmp	r3, #3
 8005c20:	d81a      	bhi.n	8005c58 <UART_SetConfig+0xe8>
 8005c22:	a201      	add	r2, pc, #4	; (adr r2, 8005c28 <UART_SetConfig+0xb8>)
 8005c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c28:	08005c39 	.word	0x08005c39
 8005c2c:	08005c49 	.word	0x08005c49
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c51 	.word	0x08005c51
 8005c38:	2301      	movs	r3, #1
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3e:	e116      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c40:	2302      	movs	r3, #2
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c46:	e112      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c48:	2304      	movs	r3, #4
 8005c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c4e:	e10e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c50:	2308      	movs	r3, #8
 8005c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c56:	e10a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c58:	2310      	movs	r3, #16
 8005c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c5e:	e106      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a7c      	ldr	r2, [pc, #496]	; (8005e58 <UART_SetConfig+0x2e8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d138      	bne.n	8005cdc <UART_SetConfig+0x16c>
 8005c6a:	4b7a      	ldr	r3, [pc, #488]	; (8005e54 <UART_SetConfig+0x2e4>)
 8005c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c70:	f003 030c 	and.w	r3, r3, #12
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	d82d      	bhi.n	8005cd4 <UART_SetConfig+0x164>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0x110>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cbd 	.word	0x08005cbd
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cd5 	.word	0x08005cd5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e0d8      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc2:	e0d4      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cc4:	2304      	movs	r3, #4
 8005cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cca:	e0d0      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005ccc:	2308      	movs	r3, #8
 8005cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cd2:	e0cc      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cd4:	2310      	movs	r3, #16
 8005cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cda:	e0c8      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a5e      	ldr	r2, [pc, #376]	; (8005e5c <UART_SetConfig+0x2ec>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d125      	bne.n	8005d32 <UART_SetConfig+0x1c2>
 8005ce6:	4b5b      	ldr	r3, [pc, #364]	; (8005e54 <UART_SetConfig+0x2e4>)
 8005ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d016      	beq.n	8005d22 <UART_SetConfig+0x1b2>
 8005cf4:	2b30      	cmp	r3, #48	; 0x30
 8005cf6:	d818      	bhi.n	8005d2a <UART_SetConfig+0x1ba>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d00a      	beq.n	8005d12 <UART_SetConfig+0x1a2>
 8005cfc:	2b20      	cmp	r3, #32
 8005cfe:	d814      	bhi.n	8005d2a <UART_SetConfig+0x1ba>
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <UART_SetConfig+0x19a>
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d008      	beq.n	8005d1a <UART_SetConfig+0x1aa>
 8005d08:	e00f      	b.n	8005d2a <UART_SetConfig+0x1ba>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d10:	e0ad      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d12:	2302      	movs	r3, #2
 8005d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d18:	e0a9      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d1a:	2304      	movs	r3, #4
 8005d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d20:	e0a5      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d22:	2308      	movs	r3, #8
 8005d24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d28:	e0a1      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d2a:	2310      	movs	r3, #16
 8005d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d30:	e09d      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a4a      	ldr	r2, [pc, #296]	; (8005e60 <UART_SetConfig+0x2f0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d125      	bne.n	8005d88 <UART_SetConfig+0x218>
 8005d3c:	4b45      	ldr	r3, [pc, #276]	; (8005e54 <UART_SetConfig+0x2e4>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d46:	2bc0      	cmp	r3, #192	; 0xc0
 8005d48:	d016      	beq.n	8005d78 <UART_SetConfig+0x208>
 8005d4a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d4c:	d818      	bhi.n	8005d80 <UART_SetConfig+0x210>
 8005d4e:	2b80      	cmp	r3, #128	; 0x80
 8005d50:	d00a      	beq.n	8005d68 <UART_SetConfig+0x1f8>
 8005d52:	2b80      	cmp	r3, #128	; 0x80
 8005d54:	d814      	bhi.n	8005d80 <UART_SetConfig+0x210>
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <UART_SetConfig+0x1f0>
 8005d5a:	2b40      	cmp	r3, #64	; 0x40
 8005d5c:	d008      	beq.n	8005d70 <UART_SetConfig+0x200>
 8005d5e:	e00f      	b.n	8005d80 <UART_SetConfig+0x210>
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e082      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d68:	2302      	movs	r3, #2
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e07e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d70:	2304      	movs	r3, #4
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d76:	e07a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d78:	2308      	movs	r3, #8
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7e:	e076      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d80:	2310      	movs	r3, #16
 8005d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d86:	e072      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a35      	ldr	r2, [pc, #212]	; (8005e64 <UART_SetConfig+0x2f4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d12a      	bne.n	8005de8 <UART_SetConfig+0x278>
 8005d92:	4b30      	ldr	r3, [pc, #192]	; (8005e54 <UART_SetConfig+0x2e4>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da0:	d01a      	beq.n	8005dd8 <UART_SetConfig+0x268>
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da6:	d81b      	bhi.n	8005de0 <UART_SetConfig+0x270>
 8005da8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dac:	d00c      	beq.n	8005dc8 <UART_SetConfig+0x258>
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db2:	d815      	bhi.n	8005de0 <UART_SetConfig+0x270>
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d003      	beq.n	8005dc0 <UART_SetConfig+0x250>
 8005db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dbc:	d008      	beq.n	8005dd0 <UART_SetConfig+0x260>
 8005dbe:	e00f      	b.n	8005de0 <UART_SetConfig+0x270>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e052      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dce:	e04e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005dd0:	2304      	movs	r3, #4
 8005dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd6:	e04a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dde:	e046      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005de0:	2310      	movs	r3, #16
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005de6:	e042      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a17      	ldr	r2, [pc, #92]	; (8005e4c <UART_SetConfig+0x2dc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d13a      	bne.n	8005e68 <UART_SetConfig+0x2f8>
 8005df2:	4b18      	ldr	r3, [pc, #96]	; (8005e54 <UART_SetConfig+0x2e4>)
 8005df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e00:	d01a      	beq.n	8005e38 <UART_SetConfig+0x2c8>
 8005e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e06:	d81b      	bhi.n	8005e40 <UART_SetConfig+0x2d0>
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0c:	d00c      	beq.n	8005e28 <UART_SetConfig+0x2b8>
 8005e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e12:	d815      	bhi.n	8005e40 <UART_SetConfig+0x2d0>
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d003      	beq.n	8005e20 <UART_SetConfig+0x2b0>
 8005e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e1c:	d008      	beq.n	8005e30 <UART_SetConfig+0x2c0>
 8005e1e:	e00f      	b.n	8005e40 <UART_SetConfig+0x2d0>
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e022      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2e:	e01e      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e30:	2304      	movs	r3, #4
 8005e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e36:	e01a      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e38:	2308      	movs	r3, #8
 8005e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e3e:	e016      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e40:	2310      	movs	r3, #16
 8005e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e46:	e012      	b.n	8005e6e <UART_SetConfig+0x2fe>
 8005e48:	cfff69f3 	.word	0xcfff69f3
 8005e4c:	40008000 	.word	0x40008000
 8005e50:	40013800 	.word	0x40013800
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40004400 	.word	0x40004400
 8005e5c:	40004800 	.word	0x40004800
 8005e60:	40004c00 	.word	0x40004c00
 8005e64:	40005000 	.word	0x40005000
 8005e68:	2310      	movs	r3, #16
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4aae      	ldr	r2, [pc, #696]	; (800612c <UART_SetConfig+0x5bc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	f040 8097 	bne.w	8005fa8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d823      	bhi.n	8005eca <UART_SetConfig+0x35a>
 8005e82:	a201      	add	r2, pc, #4	; (adr r2, 8005e88 <UART_SetConfig+0x318>)
 8005e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005ecb 	.word	0x08005ecb
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ecb 	.word	0x08005ecb
 8005e98:	08005ebb 	.word	0x08005ebb
 8005e9c:	08005ecb 	.word	0x08005ecb
 8005ea0:	08005ecb 	.word	0x08005ecb
 8005ea4:	08005ecb 	.word	0x08005ecb
 8005ea8:	08005ec3 	.word	0x08005ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eac:	f7fd fcec 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8005eb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005eb2:	e010      	b.n	8005ed6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005eb4:	4b9e      	ldr	r3, [pc, #632]	; (8006130 <UART_SetConfig+0x5c0>)
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eb8:	e00d      	b.n	8005ed6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005eba:	f7fd fc79 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8005ebe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ec0:	e009      	b.n	8005ed6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ec8:	e005      	b.n	8005ed6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ed4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8130 	beq.w	800613e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	4a94      	ldr	r2, [pc, #592]	; (8006134 <UART_SetConfig+0x5c4>)
 8005ee4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eec:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	685a      	ldr	r2, [r3, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	005b      	lsls	r3, r3, #1
 8005efa:	4413      	add	r3, r2
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d305      	bcc.n	8005f0e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d903      	bls.n	8005f16 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f14:	e113      	b.n	800613e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	2200      	movs	r2, #0
 8005f1a:	60bb      	str	r3, [r7, #8]
 8005f1c:	60fa      	str	r2, [r7, #12]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	4a84      	ldr	r2, [pc, #528]	; (8006134 <UART_SetConfig+0x5c4>)
 8005f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	603b      	str	r3, [r7, #0]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f34:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f38:	f7fa f9c2 	bl	80002c0 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4610      	mov	r0, r2
 8005f42:	4619      	mov	r1, r3
 8005f44:	f04f 0200 	mov.w	r2, #0
 8005f48:	f04f 0300 	mov.w	r3, #0
 8005f4c:	020b      	lsls	r3, r1, #8
 8005f4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f52:	0202      	lsls	r2, r0, #8
 8005f54:	6979      	ldr	r1, [r7, #20]
 8005f56:	6849      	ldr	r1, [r1, #4]
 8005f58:	0849      	lsrs	r1, r1, #1
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	460c      	mov	r4, r1
 8005f5e:	4605      	mov	r5, r0
 8005f60:	eb12 0804 	adds.w	r8, r2, r4
 8005f64:	eb43 0905 	adc.w	r9, r3, r5
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	469a      	mov	sl, r3
 8005f70:	4693      	mov	fp, r2
 8005f72:	4652      	mov	r2, sl
 8005f74:	465b      	mov	r3, fp
 8005f76:	4640      	mov	r0, r8
 8005f78:	4649      	mov	r1, r9
 8005f7a:	f7fa f9a1 	bl	80002c0 <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4613      	mov	r3, r2
 8005f84:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f8c:	d308      	bcc.n	8005fa0 <UART_SetConfig+0x430>
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f94:	d204      	bcs.n	8005fa0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	60da      	str	r2, [r3, #12]
 8005f9e:	e0ce      	b.n	800613e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fa6:	e0ca      	b.n	800613e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb0:	d166      	bne.n	8006080 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005fb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d827      	bhi.n	800600a <UART_SetConfig+0x49a>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x450>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005fe5 	.word	0x08005fe5
 8005fc4:	08005fed 	.word	0x08005fed
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	0800600b 	.word	0x0800600b
 8005fd0:	08005ffb 	.word	0x08005ffb
 8005fd4:	0800600b 	.word	0x0800600b
 8005fd8:	0800600b 	.word	0x0800600b
 8005fdc:	0800600b 	.word	0x0800600b
 8005fe0:	08006003 	.word	0x08006003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fe4:	f7fd fc50 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8005fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fea:	e014      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fec:	f7fd fc62 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ff2:	e010      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ff4:	4b4e      	ldr	r3, [pc, #312]	; (8006130 <UART_SetConfig+0x5c0>)
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ff8:	e00d      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ffa:	f7fd fbd9 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 8005ffe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006000:	e009      	b.n	8006016 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006008:	e005      	b.n	8006016 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800600a:	2300      	movs	r3, #0
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800600e:	2301      	movs	r3, #1
 8006010:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006014:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8090 	beq.w	800613e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	4a44      	ldr	r2, [pc, #272]	; (8006134 <UART_SetConfig+0x5c4>)
 8006024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006028:	461a      	mov	r2, r3
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006030:	005a      	lsls	r2, r3, #1
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	441a      	add	r2, r3
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006042:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b0f      	cmp	r3, #15
 8006048:	d916      	bls.n	8006078 <UART_SetConfig+0x508>
 800604a:	6a3b      	ldr	r3, [r7, #32]
 800604c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006050:	d212      	bcs.n	8006078 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006052:	6a3b      	ldr	r3, [r7, #32]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f023 030f 	bic.w	r3, r3, #15
 800605a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800605c:	6a3b      	ldr	r3, [r7, #32]
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	b29a      	uxth	r2, r3
 8006068:	8bfb      	ldrh	r3, [r7, #30]
 800606a:	4313      	orrs	r3, r2
 800606c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	8bfa      	ldrh	r2, [r7, #30]
 8006074:	60da      	str	r2, [r3, #12]
 8006076:	e062      	b.n	800613e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800607e:	e05e      	b.n	800613e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006084:	2b08      	cmp	r3, #8
 8006086:	d828      	bhi.n	80060da <UART_SetConfig+0x56a>
 8006088:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x520>)
 800608a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608e:	bf00      	nop
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060c5 	.word	0x080060c5
 800609c:	080060db 	.word	0x080060db
 80060a0:	080060cb 	.word	0x080060cb
 80060a4:	080060db 	.word	0x080060db
 80060a8:	080060db 	.word	0x080060db
 80060ac:	080060db 	.word	0x080060db
 80060b0:	080060d3 	.word	0x080060d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060b4:	f7fd fbe8 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80060b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060ba:	e014      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060bc:	f7fd fbfa 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 80060c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060c2:	e010      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <UART_SetConfig+0x5c0>)
 80060c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c8:	e00d      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ca:	f7fd fb71 	bl	80037b0 <HAL_RCC_GetSysClockFreq>
 80060ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060d0:	e009      	b.n	80060e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060d8:	e005      	b.n	80060e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060e4:	bf00      	nop
    }

    if (pclk != 0U)
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d028      	beq.n	800613e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	4a10      	ldr	r2, [pc, #64]	; (8006134 <UART_SetConfig+0x5c4>)
 80060f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	085b      	lsrs	r3, r3, #1
 8006104:	441a      	add	r2, r3
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	fbb2 f3f3 	udiv	r3, r2, r3
 800610e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	2b0f      	cmp	r3, #15
 8006114:	d910      	bls.n	8006138 <UART_SetConfig+0x5c8>
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800611c:	d20c      	bcs.n	8006138 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	b29a      	uxth	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	60da      	str	r2, [r3, #12]
 8006128:	e009      	b.n	800613e <UART_SetConfig+0x5ce>
 800612a:	bf00      	nop
 800612c:	40008000 	.word	0x40008000
 8006130:	00f42400 	.word	0x00f42400
 8006134:	080076b0 	.word	0x080076b0
      }
      else
      {
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2201      	movs	r2, #1
 8006142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2201      	movs	r2, #1
 800614a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800615a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800615e:	4618      	mov	r0, r3
 8006160:	3730      	adds	r7, #48	; 0x30
 8006162:	46bd      	mov	sp, r7
 8006164:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006168 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	f003 0308 	and.w	r3, r3, #8
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	f003 0320 	and.w	r3, r3, #32
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01a      	beq.n	800627e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006266:	d10a      	bne.n	800627e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00a      	beq.n	80062a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	605a      	str	r2, [r3, #4]
  }
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062bc:	f7fb f9fc 	bl	80016b8 <HAL_GetTick>
 80062c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 0308 	and.w	r3, r3, #8
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d10e      	bne.n	80062ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d4:	9300      	str	r3, [sp, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f82f 	bl	8006342 <UART_WaitOnFlagUntilTimeout>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e025      	b.n	800633a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d10e      	bne.n	800631a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f000 f819 	bl	8006342 <UART_WaitOnFlagUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d001      	beq.n	800631a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e00f      	b.n	800633a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b09c      	sub	sp, #112	; 0x70
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	4613      	mov	r3, r2
 8006350:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006352:	e0a9      	b.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635a:	f000 80a5 	beq.w	80064a8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800635e:	f7fb f9ab 	bl	80016b8 <HAL_GetTick>
 8006362:	4602      	mov	r2, r0
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	1ad3      	subs	r3, r2, r3
 8006368:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800636a:	429a      	cmp	r2, r3
 800636c:	d302      	bcc.n	8006374 <UART_WaitOnFlagUntilTimeout+0x32>
 800636e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006370:	2b00      	cmp	r3, #0
 8006372:	d140      	bne.n	80063f6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800637c:	e853 3f00 	ldrex	r3, [r3]
 8006380:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006384:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006388:	667b      	str	r3, [r7, #100]	; 0x64
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	461a      	mov	r2, r3
 8006390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006392:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006394:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006398:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800639a:	e841 2300 	strex	r3, r2, [r1]
 800639e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80063a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1e6      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063b0:	e853 3f00 	ldrex	r3, [r3]
 80063b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	f023 0301 	bic.w	r3, r3, #1
 80063bc:	663b      	str	r3, [r7, #96]	; 0x60
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	3308      	adds	r3, #8
 80063c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063c6:	64ba      	str	r2, [r7, #72]	; 0x48
 80063c8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063ce:	e841 2300 	strex	r3, r2, [r1]
 80063d2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1e5      	bne.n	80063a6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2220      	movs	r2, #32
 80063de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2220      	movs	r2, #32
 80063e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e069      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 0304 	and.w	r3, r3, #4
 8006400:	2b00      	cmp	r3, #0
 8006402:	d051      	beq.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006412:	d149      	bne.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800641c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006432:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
 800643e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800644a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	613b      	str	r3, [r7, #16]
   return(result);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f023 0301 	bic.w	r3, r3, #1
 8006466:	66bb      	str	r3, [r7, #104]	; 0x68
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	3308      	adds	r3, #8
 800646e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006470:	623a      	str	r2, [r7, #32]
 8006472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	69f9      	ldr	r1, [r7, #28]
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	61bb      	str	r3, [r7, #24]
   return(result);
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e5      	bne.n	8006450 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e010      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69da      	ldr	r2, [r3, #28]
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	4013      	ands	r3, r2
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	bf0c      	ite	eq
 80064b8:	2301      	moveq	r3, #1
 80064ba:	2300      	movne	r3, #0
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	f43f af46 	beq.w	8006354 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064c8:	2300      	movs	r3, #0
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3770      	adds	r7, #112	; 0x70
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d101      	bne.n	80064e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80064e4:	2302      	movs	r3, #2
 80064e6:	e027      	b.n	8006538 <HAL_UARTEx_DisableFifoMode+0x66>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0201 	bic.w	r2, r2, #1
 800650e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006516:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006558:	2302      	movs	r3, #2
 800655a:	e02d      	b.n	80065b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2224      	movs	r2, #36	; 0x24
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f022 0201 	bic.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f84f 	bl	800663c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d101      	bne.n	80065d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80065d4:	2302      	movs	r3, #2
 80065d6:	e02d      	b.n	8006634 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2224      	movs	r2, #36	; 0x24
 80065e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0201 	bic.w	r2, r2, #1
 80065fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 f811 	bl	800663c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006648:	2b00      	cmp	r3, #0
 800664a:	d108      	bne.n	800665e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800665c:	e031      	b.n	80066c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800665e:	2308      	movs	r3, #8
 8006660:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006662:	2308      	movs	r3, #8
 8006664:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	0e5b      	lsrs	r3, r3, #25
 800666e:	b2db      	uxtb	r3, r3
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	0f5b      	lsrs	r3, r3, #29
 800667e:	b2db      	uxtb	r3, r3
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006686:	7bbb      	ldrb	r3, [r7, #14]
 8006688:	7b3a      	ldrb	r2, [r7, #12]
 800668a:	4911      	ldr	r1, [pc, #68]	; (80066d0 <UARTEx_SetNbDataToProcess+0x94>)
 800668c:	5c8a      	ldrb	r2, [r1, r2]
 800668e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006692:	7b3a      	ldrb	r2, [r7, #12]
 8006694:	490f      	ldr	r1, [pc, #60]	; (80066d4 <UARTEx_SetNbDataToProcess+0x98>)
 8006696:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006698:	fb93 f3f2 	sdiv	r3, r3, r2
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	7b7a      	ldrb	r2, [r7, #13]
 80066a8:	4909      	ldr	r1, [pc, #36]	; (80066d0 <UARTEx_SetNbDataToProcess+0x94>)
 80066aa:	5c8a      	ldrb	r2, [r1, r2]
 80066ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80066b0:	7b7a      	ldrb	r2, [r7, #13]
 80066b2:	4908      	ldr	r1, [pc, #32]	; (80066d4 <UARTEx_SetNbDataToProcess+0x98>)
 80066b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80066b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	080076c8 	.word	0x080076c8
 80066d4:	080076d0 	.word	0x080076d0

080066d8 <__errno>:
 80066d8:	4b01      	ldr	r3, [pc, #4]	; (80066e0 <__errno+0x8>)
 80066da:	6818      	ldr	r0, [r3, #0]
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <__libc_init_array>:
 80066e4:	b570      	push	{r4, r5, r6, lr}
 80066e6:	4d0d      	ldr	r5, [pc, #52]	; (800671c <__libc_init_array+0x38>)
 80066e8:	4c0d      	ldr	r4, [pc, #52]	; (8006720 <__libc_init_array+0x3c>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	2600      	movs	r6, #0
 80066f0:	42a6      	cmp	r6, r4
 80066f2:	d109      	bne.n	8006708 <__libc_init_array+0x24>
 80066f4:	4d0b      	ldr	r5, [pc, #44]	; (8006724 <__libc_init_array+0x40>)
 80066f6:	4c0c      	ldr	r4, [pc, #48]	; (8006728 <__libc_init_array+0x44>)
 80066f8:	f000 ffae 	bl	8007658 <_init>
 80066fc:	1b64      	subs	r4, r4, r5
 80066fe:	10a4      	asrs	r4, r4, #2
 8006700:	2600      	movs	r6, #0
 8006702:	42a6      	cmp	r6, r4
 8006704:	d105      	bne.n	8006712 <__libc_init_array+0x2e>
 8006706:	bd70      	pop	{r4, r5, r6, pc}
 8006708:	f855 3b04 	ldr.w	r3, [r5], #4
 800670c:	4798      	blx	r3
 800670e:	3601      	adds	r6, #1
 8006710:	e7ee      	b.n	80066f0 <__libc_init_array+0xc>
 8006712:	f855 3b04 	ldr.w	r3, [r5], #4
 8006716:	4798      	blx	r3
 8006718:	3601      	adds	r6, #1
 800671a:	e7f2      	b.n	8006702 <__libc_init_array+0x1e>
 800671c:	08007778 	.word	0x08007778
 8006720:	08007778 	.word	0x08007778
 8006724:	08007778 	.word	0x08007778
 8006728:	0800777c 	.word	0x0800777c

0800672c <memset>:
 800672c:	4402      	add	r2, r0
 800672e:	4603      	mov	r3, r0
 8006730:	4293      	cmp	r3, r2
 8006732:	d100      	bne.n	8006736 <memset+0xa>
 8006734:	4770      	bx	lr
 8006736:	f803 1b01 	strb.w	r1, [r3], #1
 800673a:	e7f9      	b.n	8006730 <memset+0x4>

0800673c <iprintf>:
 800673c:	b40f      	push	{r0, r1, r2, r3}
 800673e:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <iprintf+0x2c>)
 8006740:	b513      	push	{r0, r1, r4, lr}
 8006742:	681c      	ldr	r4, [r3, #0]
 8006744:	b124      	cbz	r4, 8006750 <iprintf+0x14>
 8006746:	69a3      	ldr	r3, [r4, #24]
 8006748:	b913      	cbnz	r3, 8006750 <iprintf+0x14>
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f866 	bl	800681c <__sinit>
 8006750:	ab05      	add	r3, sp, #20
 8006752:	9a04      	ldr	r2, [sp, #16]
 8006754:	68a1      	ldr	r1, [r4, #8]
 8006756:	9301      	str	r3, [sp, #4]
 8006758:	4620      	mov	r0, r4
 800675a:	f000 f9bd 	bl	8006ad8 <_vfiprintf_r>
 800675e:	b002      	add	sp, #8
 8006760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006764:	b004      	add	sp, #16
 8006766:	4770      	bx	lr
 8006768:	2000000c 	.word	0x2000000c

0800676c <std>:
 800676c:	2300      	movs	r3, #0
 800676e:	b510      	push	{r4, lr}
 8006770:	4604      	mov	r4, r0
 8006772:	e9c0 3300 	strd	r3, r3, [r0]
 8006776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800677a:	6083      	str	r3, [r0, #8]
 800677c:	8181      	strh	r1, [r0, #12]
 800677e:	6643      	str	r3, [r0, #100]	; 0x64
 8006780:	81c2      	strh	r2, [r0, #14]
 8006782:	6183      	str	r3, [r0, #24]
 8006784:	4619      	mov	r1, r3
 8006786:	2208      	movs	r2, #8
 8006788:	305c      	adds	r0, #92	; 0x5c
 800678a:	f7ff ffcf 	bl	800672c <memset>
 800678e:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <std+0x38>)
 8006790:	6263      	str	r3, [r4, #36]	; 0x24
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <std+0x3c>)
 8006794:	62a3      	str	r3, [r4, #40]	; 0x28
 8006796:	4b05      	ldr	r3, [pc, #20]	; (80067ac <std+0x40>)
 8006798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <std+0x44>)
 800679c:	6224      	str	r4, [r4, #32]
 800679e:	6323      	str	r3, [r4, #48]	; 0x30
 80067a0:	bd10      	pop	{r4, pc}
 80067a2:	bf00      	nop
 80067a4:	08007081 	.word	0x08007081
 80067a8:	080070a3 	.word	0x080070a3
 80067ac:	080070db 	.word	0x080070db
 80067b0:	080070ff 	.word	0x080070ff

080067b4 <_cleanup_r>:
 80067b4:	4901      	ldr	r1, [pc, #4]	; (80067bc <_cleanup_r+0x8>)
 80067b6:	f000 b8af 	b.w	8006918 <_fwalk_reent>
 80067ba:	bf00      	nop
 80067bc:	080073d9 	.word	0x080073d9

080067c0 <__sfmoreglue>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	2268      	movs	r2, #104	; 0x68
 80067c4:	1e4d      	subs	r5, r1, #1
 80067c6:	4355      	muls	r5, r2
 80067c8:	460e      	mov	r6, r1
 80067ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067ce:	f000 f8e5 	bl	800699c <_malloc_r>
 80067d2:	4604      	mov	r4, r0
 80067d4:	b140      	cbz	r0, 80067e8 <__sfmoreglue+0x28>
 80067d6:	2100      	movs	r1, #0
 80067d8:	e9c0 1600 	strd	r1, r6, [r0]
 80067dc:	300c      	adds	r0, #12
 80067de:	60a0      	str	r0, [r4, #8]
 80067e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067e4:	f7ff ffa2 	bl	800672c <memset>
 80067e8:	4620      	mov	r0, r4
 80067ea:	bd70      	pop	{r4, r5, r6, pc}

080067ec <__sfp_lock_acquire>:
 80067ec:	4801      	ldr	r0, [pc, #4]	; (80067f4 <__sfp_lock_acquire+0x8>)
 80067ee:	f000 b8b3 	b.w	8006958 <__retarget_lock_acquire_recursive>
 80067f2:	bf00      	nop
 80067f4:	20000359 	.word	0x20000359

080067f8 <__sfp_lock_release>:
 80067f8:	4801      	ldr	r0, [pc, #4]	; (8006800 <__sfp_lock_release+0x8>)
 80067fa:	f000 b8ae 	b.w	800695a <__retarget_lock_release_recursive>
 80067fe:	bf00      	nop
 8006800:	20000359 	.word	0x20000359

08006804 <__sinit_lock_acquire>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__sinit_lock_acquire+0x8>)
 8006806:	f000 b8a7 	b.w	8006958 <__retarget_lock_acquire_recursive>
 800680a:	bf00      	nop
 800680c:	2000035a 	.word	0x2000035a

08006810 <__sinit_lock_release>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sinit_lock_release+0x8>)
 8006812:	f000 b8a2 	b.w	800695a <__retarget_lock_release_recursive>
 8006816:	bf00      	nop
 8006818:	2000035a 	.word	0x2000035a

0800681c <__sinit>:
 800681c:	b510      	push	{r4, lr}
 800681e:	4604      	mov	r4, r0
 8006820:	f7ff fff0 	bl	8006804 <__sinit_lock_acquire>
 8006824:	69a3      	ldr	r3, [r4, #24]
 8006826:	b11b      	cbz	r3, 8006830 <__sinit+0x14>
 8006828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800682c:	f7ff bff0 	b.w	8006810 <__sinit_lock_release>
 8006830:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006834:	6523      	str	r3, [r4, #80]	; 0x50
 8006836:	4b13      	ldr	r3, [pc, #76]	; (8006884 <__sinit+0x68>)
 8006838:	4a13      	ldr	r2, [pc, #76]	; (8006888 <__sinit+0x6c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	62a2      	str	r2, [r4, #40]	; 0x28
 800683e:	42a3      	cmp	r3, r4
 8006840:	bf04      	itt	eq
 8006842:	2301      	moveq	r3, #1
 8006844:	61a3      	streq	r3, [r4, #24]
 8006846:	4620      	mov	r0, r4
 8006848:	f000 f820 	bl	800688c <__sfp>
 800684c:	6060      	str	r0, [r4, #4]
 800684e:	4620      	mov	r0, r4
 8006850:	f000 f81c 	bl	800688c <__sfp>
 8006854:	60a0      	str	r0, [r4, #8]
 8006856:	4620      	mov	r0, r4
 8006858:	f000 f818 	bl	800688c <__sfp>
 800685c:	2200      	movs	r2, #0
 800685e:	60e0      	str	r0, [r4, #12]
 8006860:	2104      	movs	r1, #4
 8006862:	6860      	ldr	r0, [r4, #4]
 8006864:	f7ff ff82 	bl	800676c <std>
 8006868:	68a0      	ldr	r0, [r4, #8]
 800686a:	2201      	movs	r2, #1
 800686c:	2109      	movs	r1, #9
 800686e:	f7ff ff7d 	bl	800676c <std>
 8006872:	68e0      	ldr	r0, [r4, #12]
 8006874:	2202      	movs	r2, #2
 8006876:	2112      	movs	r1, #18
 8006878:	f7ff ff78 	bl	800676c <std>
 800687c:	2301      	movs	r3, #1
 800687e:	61a3      	str	r3, [r4, #24]
 8006880:	e7d2      	b.n	8006828 <__sinit+0xc>
 8006882:	bf00      	nop
 8006884:	080076d8 	.word	0x080076d8
 8006888:	080067b5 	.word	0x080067b5

0800688c <__sfp>:
 800688c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800688e:	4607      	mov	r7, r0
 8006890:	f7ff ffac 	bl	80067ec <__sfp_lock_acquire>
 8006894:	4b1e      	ldr	r3, [pc, #120]	; (8006910 <__sfp+0x84>)
 8006896:	681e      	ldr	r6, [r3, #0]
 8006898:	69b3      	ldr	r3, [r6, #24]
 800689a:	b913      	cbnz	r3, 80068a2 <__sfp+0x16>
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff ffbd 	bl	800681c <__sinit>
 80068a2:	3648      	adds	r6, #72	; 0x48
 80068a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	d503      	bpl.n	80068b4 <__sfp+0x28>
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	b30b      	cbz	r3, 80068f4 <__sfp+0x68>
 80068b0:	6836      	ldr	r6, [r6, #0]
 80068b2:	e7f7      	b.n	80068a4 <__sfp+0x18>
 80068b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068b8:	b9d5      	cbnz	r5, 80068f0 <__sfp+0x64>
 80068ba:	4b16      	ldr	r3, [pc, #88]	; (8006914 <__sfp+0x88>)
 80068bc:	60e3      	str	r3, [r4, #12]
 80068be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068c2:	6665      	str	r5, [r4, #100]	; 0x64
 80068c4:	f000 f847 	bl	8006956 <__retarget_lock_init_recursive>
 80068c8:	f7ff ff96 	bl	80067f8 <__sfp_lock_release>
 80068cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068d4:	6025      	str	r5, [r4, #0]
 80068d6:	61a5      	str	r5, [r4, #24]
 80068d8:	2208      	movs	r2, #8
 80068da:	4629      	mov	r1, r5
 80068dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068e0:	f7ff ff24 	bl	800672c <memset>
 80068e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068ec:	4620      	mov	r0, r4
 80068ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f0:	3468      	adds	r4, #104	; 0x68
 80068f2:	e7d9      	b.n	80068a8 <__sfp+0x1c>
 80068f4:	2104      	movs	r1, #4
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7ff ff62 	bl	80067c0 <__sfmoreglue>
 80068fc:	4604      	mov	r4, r0
 80068fe:	6030      	str	r0, [r6, #0]
 8006900:	2800      	cmp	r0, #0
 8006902:	d1d5      	bne.n	80068b0 <__sfp+0x24>
 8006904:	f7ff ff78 	bl	80067f8 <__sfp_lock_release>
 8006908:	230c      	movs	r3, #12
 800690a:	603b      	str	r3, [r7, #0]
 800690c:	e7ee      	b.n	80068ec <__sfp+0x60>
 800690e:	bf00      	nop
 8006910:	080076d8 	.word	0x080076d8
 8006914:	ffff0001 	.word	0xffff0001

08006918 <_fwalk_reent>:
 8006918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800691c:	4606      	mov	r6, r0
 800691e:	4688      	mov	r8, r1
 8006920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006924:	2700      	movs	r7, #0
 8006926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800692a:	f1b9 0901 	subs.w	r9, r9, #1
 800692e:	d505      	bpl.n	800693c <_fwalk_reent+0x24>
 8006930:	6824      	ldr	r4, [r4, #0]
 8006932:	2c00      	cmp	r4, #0
 8006934:	d1f7      	bne.n	8006926 <_fwalk_reent+0xe>
 8006936:	4638      	mov	r0, r7
 8006938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800693c:	89ab      	ldrh	r3, [r5, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d907      	bls.n	8006952 <_fwalk_reent+0x3a>
 8006942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006946:	3301      	adds	r3, #1
 8006948:	d003      	beq.n	8006952 <_fwalk_reent+0x3a>
 800694a:	4629      	mov	r1, r5
 800694c:	4630      	mov	r0, r6
 800694e:	47c0      	blx	r8
 8006950:	4307      	orrs	r7, r0
 8006952:	3568      	adds	r5, #104	; 0x68
 8006954:	e7e9      	b.n	800692a <_fwalk_reent+0x12>

08006956 <__retarget_lock_init_recursive>:
 8006956:	4770      	bx	lr

08006958 <__retarget_lock_acquire_recursive>:
 8006958:	4770      	bx	lr

0800695a <__retarget_lock_release_recursive>:
 800695a:	4770      	bx	lr

0800695c <sbrk_aligned>:
 800695c:	b570      	push	{r4, r5, r6, lr}
 800695e:	4e0e      	ldr	r6, [pc, #56]	; (8006998 <sbrk_aligned+0x3c>)
 8006960:	460c      	mov	r4, r1
 8006962:	6831      	ldr	r1, [r6, #0]
 8006964:	4605      	mov	r5, r0
 8006966:	b911      	cbnz	r1, 800696e <sbrk_aligned+0x12>
 8006968:	f000 fb7a 	bl	8007060 <_sbrk_r>
 800696c:	6030      	str	r0, [r6, #0]
 800696e:	4621      	mov	r1, r4
 8006970:	4628      	mov	r0, r5
 8006972:	f000 fb75 	bl	8007060 <_sbrk_r>
 8006976:	1c43      	adds	r3, r0, #1
 8006978:	d00a      	beq.n	8006990 <sbrk_aligned+0x34>
 800697a:	1cc4      	adds	r4, r0, #3
 800697c:	f024 0403 	bic.w	r4, r4, #3
 8006980:	42a0      	cmp	r0, r4
 8006982:	d007      	beq.n	8006994 <sbrk_aligned+0x38>
 8006984:	1a21      	subs	r1, r4, r0
 8006986:	4628      	mov	r0, r5
 8006988:	f000 fb6a 	bl	8007060 <_sbrk_r>
 800698c:	3001      	adds	r0, #1
 800698e:	d101      	bne.n	8006994 <sbrk_aligned+0x38>
 8006990:	f04f 34ff 	mov.w	r4, #4294967295
 8006994:	4620      	mov	r0, r4
 8006996:	bd70      	pop	{r4, r5, r6, pc}
 8006998:	20000360 	.word	0x20000360

0800699c <_malloc_r>:
 800699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069a0:	1ccd      	adds	r5, r1, #3
 80069a2:	f025 0503 	bic.w	r5, r5, #3
 80069a6:	3508      	adds	r5, #8
 80069a8:	2d0c      	cmp	r5, #12
 80069aa:	bf38      	it	cc
 80069ac:	250c      	movcc	r5, #12
 80069ae:	2d00      	cmp	r5, #0
 80069b0:	4607      	mov	r7, r0
 80069b2:	db01      	blt.n	80069b8 <_malloc_r+0x1c>
 80069b4:	42a9      	cmp	r1, r5
 80069b6:	d905      	bls.n	80069c4 <_malloc_r+0x28>
 80069b8:	230c      	movs	r3, #12
 80069ba:	603b      	str	r3, [r7, #0]
 80069bc:	2600      	movs	r6, #0
 80069be:	4630      	mov	r0, r6
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c4:	4e2e      	ldr	r6, [pc, #184]	; (8006a80 <_malloc_r+0xe4>)
 80069c6:	f000 fdbb 	bl	8007540 <__malloc_lock>
 80069ca:	6833      	ldr	r3, [r6, #0]
 80069cc:	461c      	mov	r4, r3
 80069ce:	bb34      	cbnz	r4, 8006a1e <_malloc_r+0x82>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4638      	mov	r0, r7
 80069d4:	f7ff ffc2 	bl	800695c <sbrk_aligned>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	4604      	mov	r4, r0
 80069dc:	d14d      	bne.n	8006a7a <_malloc_r+0xde>
 80069de:	6834      	ldr	r4, [r6, #0]
 80069e0:	4626      	mov	r6, r4
 80069e2:	2e00      	cmp	r6, #0
 80069e4:	d140      	bne.n	8006a68 <_malloc_r+0xcc>
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	4631      	mov	r1, r6
 80069ea:	4638      	mov	r0, r7
 80069ec:	eb04 0803 	add.w	r8, r4, r3
 80069f0:	f000 fb36 	bl	8007060 <_sbrk_r>
 80069f4:	4580      	cmp	r8, r0
 80069f6:	d13a      	bne.n	8006a6e <_malloc_r+0xd2>
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	3503      	adds	r5, #3
 80069fc:	1a6d      	subs	r5, r5, r1
 80069fe:	f025 0503 	bic.w	r5, r5, #3
 8006a02:	3508      	adds	r5, #8
 8006a04:	2d0c      	cmp	r5, #12
 8006a06:	bf38      	it	cc
 8006a08:	250c      	movcc	r5, #12
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff ffa5 	bl	800695c <sbrk_aligned>
 8006a12:	3001      	adds	r0, #1
 8006a14:	d02b      	beq.n	8006a6e <_malloc_r+0xd2>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	442b      	add	r3, r5
 8006a1a:	6023      	str	r3, [r4, #0]
 8006a1c:	e00e      	b.n	8006a3c <_malloc_r+0xa0>
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	1b52      	subs	r2, r2, r5
 8006a22:	d41e      	bmi.n	8006a62 <_malloc_r+0xc6>
 8006a24:	2a0b      	cmp	r2, #11
 8006a26:	d916      	bls.n	8006a56 <_malloc_r+0xba>
 8006a28:	1961      	adds	r1, r4, r5
 8006a2a:	42a3      	cmp	r3, r4
 8006a2c:	6025      	str	r5, [r4, #0]
 8006a2e:	bf18      	it	ne
 8006a30:	6059      	strne	r1, [r3, #4]
 8006a32:	6863      	ldr	r3, [r4, #4]
 8006a34:	bf08      	it	eq
 8006a36:	6031      	streq	r1, [r6, #0]
 8006a38:	5162      	str	r2, [r4, r5]
 8006a3a:	604b      	str	r3, [r1, #4]
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f104 060b 	add.w	r6, r4, #11
 8006a42:	f000 fd83 	bl	800754c <__malloc_unlock>
 8006a46:	f026 0607 	bic.w	r6, r6, #7
 8006a4a:	1d23      	adds	r3, r4, #4
 8006a4c:	1af2      	subs	r2, r6, r3
 8006a4e:	d0b6      	beq.n	80069be <_malloc_r+0x22>
 8006a50:	1b9b      	subs	r3, r3, r6
 8006a52:	50a3      	str	r3, [r4, r2]
 8006a54:	e7b3      	b.n	80069be <_malloc_r+0x22>
 8006a56:	6862      	ldr	r2, [r4, #4]
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	bf0c      	ite	eq
 8006a5c:	6032      	streq	r2, [r6, #0]
 8006a5e:	605a      	strne	r2, [r3, #4]
 8006a60:	e7ec      	b.n	8006a3c <_malloc_r+0xa0>
 8006a62:	4623      	mov	r3, r4
 8006a64:	6864      	ldr	r4, [r4, #4]
 8006a66:	e7b2      	b.n	80069ce <_malloc_r+0x32>
 8006a68:	4634      	mov	r4, r6
 8006a6a:	6876      	ldr	r6, [r6, #4]
 8006a6c:	e7b9      	b.n	80069e2 <_malloc_r+0x46>
 8006a6e:	230c      	movs	r3, #12
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	4638      	mov	r0, r7
 8006a74:	f000 fd6a 	bl	800754c <__malloc_unlock>
 8006a78:	e7a1      	b.n	80069be <_malloc_r+0x22>
 8006a7a:	6025      	str	r5, [r4, #0]
 8006a7c:	e7de      	b.n	8006a3c <_malloc_r+0xa0>
 8006a7e:	bf00      	nop
 8006a80:	2000035c 	.word	0x2000035c

08006a84 <__sfputc_r>:
 8006a84:	6893      	ldr	r3, [r2, #8]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	b410      	push	{r4}
 8006a8c:	6093      	str	r3, [r2, #8]
 8006a8e:	da08      	bge.n	8006aa2 <__sfputc_r+0x1e>
 8006a90:	6994      	ldr	r4, [r2, #24]
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	db01      	blt.n	8006a9a <__sfputc_r+0x16>
 8006a96:	290a      	cmp	r1, #10
 8006a98:	d103      	bne.n	8006aa2 <__sfputc_r+0x1e>
 8006a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a9e:	f000 bb33 	b.w	8007108 <__swbuf_r>
 8006aa2:	6813      	ldr	r3, [r2, #0]
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	7019      	strb	r1, [r3, #0]
 8006aaa:	4608      	mov	r0, r1
 8006aac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <__sfputs_r>:
 8006ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460f      	mov	r7, r1
 8006ab8:	4614      	mov	r4, r2
 8006aba:	18d5      	adds	r5, r2, r3
 8006abc:	42ac      	cmp	r4, r5
 8006abe:	d101      	bne.n	8006ac4 <__sfputs_r+0x12>
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	e007      	b.n	8006ad4 <__sfputs_r+0x22>
 8006ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac8:	463a      	mov	r2, r7
 8006aca:	4630      	mov	r0, r6
 8006acc:	f7ff ffda 	bl	8006a84 <__sfputc_r>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d1f3      	bne.n	8006abc <__sfputs_r+0xa>
 8006ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006ad8 <_vfiprintf_r>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	460d      	mov	r5, r1
 8006ade:	b09d      	sub	sp, #116	; 0x74
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	4698      	mov	r8, r3
 8006ae4:	4606      	mov	r6, r0
 8006ae6:	b118      	cbz	r0, 8006af0 <_vfiprintf_r+0x18>
 8006ae8:	6983      	ldr	r3, [r0, #24]
 8006aea:	b90b      	cbnz	r3, 8006af0 <_vfiprintf_r+0x18>
 8006aec:	f7ff fe96 	bl	800681c <__sinit>
 8006af0:	4b89      	ldr	r3, [pc, #548]	; (8006d18 <_vfiprintf_r+0x240>)
 8006af2:	429d      	cmp	r5, r3
 8006af4:	d11b      	bne.n	8006b2e <_vfiprintf_r+0x56>
 8006af6:	6875      	ldr	r5, [r6, #4]
 8006af8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006afa:	07d9      	lsls	r1, r3, #31
 8006afc:	d405      	bmi.n	8006b0a <_vfiprintf_r+0x32>
 8006afe:	89ab      	ldrh	r3, [r5, #12]
 8006b00:	059a      	lsls	r2, r3, #22
 8006b02:	d402      	bmi.n	8006b0a <_vfiprintf_r+0x32>
 8006b04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b06:	f7ff ff27 	bl	8006958 <__retarget_lock_acquire_recursive>
 8006b0a:	89ab      	ldrh	r3, [r5, #12]
 8006b0c:	071b      	lsls	r3, r3, #28
 8006b0e:	d501      	bpl.n	8006b14 <_vfiprintf_r+0x3c>
 8006b10:	692b      	ldr	r3, [r5, #16]
 8006b12:	b9eb      	cbnz	r3, 8006b50 <_vfiprintf_r+0x78>
 8006b14:	4629      	mov	r1, r5
 8006b16:	4630      	mov	r0, r6
 8006b18:	f000 fb5a 	bl	80071d0 <__swsetup_r>
 8006b1c:	b1c0      	cbz	r0, 8006b50 <_vfiprintf_r+0x78>
 8006b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b20:	07dc      	lsls	r4, r3, #31
 8006b22:	d50e      	bpl.n	8006b42 <_vfiprintf_r+0x6a>
 8006b24:	f04f 30ff 	mov.w	r0, #4294967295
 8006b28:	b01d      	add	sp, #116	; 0x74
 8006b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2e:	4b7b      	ldr	r3, [pc, #492]	; (8006d1c <_vfiprintf_r+0x244>)
 8006b30:	429d      	cmp	r5, r3
 8006b32:	d101      	bne.n	8006b38 <_vfiprintf_r+0x60>
 8006b34:	68b5      	ldr	r5, [r6, #8]
 8006b36:	e7df      	b.n	8006af8 <_vfiprintf_r+0x20>
 8006b38:	4b79      	ldr	r3, [pc, #484]	; (8006d20 <_vfiprintf_r+0x248>)
 8006b3a:	429d      	cmp	r5, r3
 8006b3c:	bf08      	it	eq
 8006b3e:	68f5      	ldreq	r5, [r6, #12]
 8006b40:	e7da      	b.n	8006af8 <_vfiprintf_r+0x20>
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	0598      	lsls	r0, r3, #22
 8006b46:	d4ed      	bmi.n	8006b24 <_vfiprintf_r+0x4c>
 8006b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4a:	f7ff ff06 	bl	800695a <__retarget_lock_release_recursive>
 8006b4e:	e7e9      	b.n	8006b24 <_vfiprintf_r+0x4c>
 8006b50:	2300      	movs	r3, #0
 8006b52:	9309      	str	r3, [sp, #36]	; 0x24
 8006b54:	2320      	movs	r3, #32
 8006b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b5e:	2330      	movs	r3, #48	; 0x30
 8006b60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d24 <_vfiprintf_r+0x24c>
 8006b64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b68:	f04f 0901 	mov.w	r9, #1
 8006b6c:	4623      	mov	r3, r4
 8006b6e:	469a      	mov	sl, r3
 8006b70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b74:	b10a      	cbz	r2, 8006b7a <_vfiprintf_r+0xa2>
 8006b76:	2a25      	cmp	r2, #37	; 0x25
 8006b78:	d1f9      	bne.n	8006b6e <_vfiprintf_r+0x96>
 8006b7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006b7e:	d00b      	beq.n	8006b98 <_vfiprintf_r+0xc0>
 8006b80:	465b      	mov	r3, fp
 8006b82:	4622      	mov	r2, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7ff ff93 	bl	8006ab2 <__sfputs_r>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f000 80aa 	beq.w	8006ce6 <_vfiprintf_r+0x20e>
 8006b92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b94:	445a      	add	r2, fp
 8006b96:	9209      	str	r2, [sp, #36]	; 0x24
 8006b98:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 80a2 	beq.w	8006ce6 <_vfiprintf_r+0x20e>
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bac:	f10a 0a01 	add.w	sl, sl, #1
 8006bb0:	9304      	str	r3, [sp, #16]
 8006bb2:	9307      	str	r3, [sp, #28]
 8006bb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bb8:	931a      	str	r3, [sp, #104]	; 0x68
 8006bba:	4654      	mov	r4, sl
 8006bbc:	2205      	movs	r2, #5
 8006bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc2:	4858      	ldr	r0, [pc, #352]	; (8006d24 <_vfiprintf_r+0x24c>)
 8006bc4:	f7f9 fb2c 	bl	8000220 <memchr>
 8006bc8:	9a04      	ldr	r2, [sp, #16]
 8006bca:	b9d8      	cbnz	r0, 8006c04 <_vfiprintf_r+0x12c>
 8006bcc:	06d1      	lsls	r1, r2, #27
 8006bce:	bf44      	itt	mi
 8006bd0:	2320      	movmi	r3, #32
 8006bd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bd6:	0713      	lsls	r3, r2, #28
 8006bd8:	bf44      	itt	mi
 8006bda:	232b      	movmi	r3, #43	; 0x2b
 8006bdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006be0:	f89a 3000 	ldrb.w	r3, [sl]
 8006be4:	2b2a      	cmp	r3, #42	; 0x2a
 8006be6:	d015      	beq.n	8006c14 <_vfiprintf_r+0x13c>
 8006be8:	9a07      	ldr	r2, [sp, #28]
 8006bea:	4654      	mov	r4, sl
 8006bec:	2000      	movs	r0, #0
 8006bee:	f04f 0c0a 	mov.w	ip, #10
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bf8:	3b30      	subs	r3, #48	; 0x30
 8006bfa:	2b09      	cmp	r3, #9
 8006bfc:	d94e      	bls.n	8006c9c <_vfiprintf_r+0x1c4>
 8006bfe:	b1b0      	cbz	r0, 8006c2e <_vfiprintf_r+0x156>
 8006c00:	9207      	str	r2, [sp, #28]
 8006c02:	e014      	b.n	8006c2e <_vfiprintf_r+0x156>
 8006c04:	eba0 0308 	sub.w	r3, r0, r8
 8006c08:	fa09 f303 	lsl.w	r3, r9, r3
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	46a2      	mov	sl, r4
 8006c12:	e7d2      	b.n	8006bba <_vfiprintf_r+0xe2>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	1d19      	adds	r1, r3, #4
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	9103      	str	r1, [sp, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	bfbb      	ittet	lt
 8006c20:	425b      	neglt	r3, r3
 8006c22:	f042 0202 	orrlt.w	r2, r2, #2
 8006c26:	9307      	strge	r3, [sp, #28]
 8006c28:	9307      	strlt	r3, [sp, #28]
 8006c2a:	bfb8      	it	lt
 8006c2c:	9204      	strlt	r2, [sp, #16]
 8006c2e:	7823      	ldrb	r3, [r4, #0]
 8006c30:	2b2e      	cmp	r3, #46	; 0x2e
 8006c32:	d10c      	bne.n	8006c4e <_vfiprintf_r+0x176>
 8006c34:	7863      	ldrb	r3, [r4, #1]
 8006c36:	2b2a      	cmp	r3, #42	; 0x2a
 8006c38:	d135      	bne.n	8006ca6 <_vfiprintf_r+0x1ce>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	1d1a      	adds	r2, r3, #4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	9203      	str	r2, [sp, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	bfb8      	it	lt
 8006c46:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c4a:	3402      	adds	r4, #2
 8006c4c:	9305      	str	r3, [sp, #20]
 8006c4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d34 <_vfiprintf_r+0x25c>
 8006c52:	7821      	ldrb	r1, [r4, #0]
 8006c54:	2203      	movs	r2, #3
 8006c56:	4650      	mov	r0, sl
 8006c58:	f7f9 fae2 	bl	8000220 <memchr>
 8006c5c:	b140      	cbz	r0, 8006c70 <_vfiprintf_r+0x198>
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	eba0 000a 	sub.w	r0, r0, sl
 8006c64:	fa03 f000 	lsl.w	r0, r3, r0
 8006c68:	9b04      	ldr	r3, [sp, #16]
 8006c6a:	4303      	orrs	r3, r0
 8006c6c:	3401      	adds	r4, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	482c      	ldr	r0, [pc, #176]	; (8006d28 <_vfiprintf_r+0x250>)
 8006c76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c7a:	2206      	movs	r2, #6
 8006c7c:	f7f9 fad0 	bl	8000220 <memchr>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d03f      	beq.n	8006d04 <_vfiprintf_r+0x22c>
 8006c84:	4b29      	ldr	r3, [pc, #164]	; (8006d2c <_vfiprintf_r+0x254>)
 8006c86:	bb1b      	cbnz	r3, 8006cd0 <_vfiprintf_r+0x1f8>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	3307      	adds	r3, #7
 8006c8c:	f023 0307 	bic.w	r3, r3, #7
 8006c90:	3308      	adds	r3, #8
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	443b      	add	r3, r7
 8006c98:	9309      	str	r3, [sp, #36]	; 0x24
 8006c9a:	e767      	b.n	8006b6c <_vfiprintf_r+0x94>
 8006c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca0:	460c      	mov	r4, r1
 8006ca2:	2001      	movs	r0, #1
 8006ca4:	e7a5      	b.n	8006bf2 <_vfiprintf_r+0x11a>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	3401      	adds	r4, #1
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	4619      	mov	r1, r3
 8006cae:	f04f 0c0a 	mov.w	ip, #10
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb8:	3a30      	subs	r2, #48	; 0x30
 8006cba:	2a09      	cmp	r2, #9
 8006cbc:	d903      	bls.n	8006cc6 <_vfiprintf_r+0x1ee>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0c5      	beq.n	8006c4e <_vfiprintf_r+0x176>
 8006cc2:	9105      	str	r1, [sp, #20]
 8006cc4:	e7c3      	b.n	8006c4e <_vfiprintf_r+0x176>
 8006cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cca:	4604      	mov	r4, r0
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e7f0      	b.n	8006cb2 <_vfiprintf_r+0x1da>
 8006cd0:	ab03      	add	r3, sp, #12
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	4b16      	ldr	r3, [pc, #88]	; (8006d30 <_vfiprintf_r+0x258>)
 8006cd8:	a904      	add	r1, sp, #16
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	1c78      	adds	r0, r7, #1
 8006ce4:	d1d6      	bne.n	8006c94 <_vfiprintf_r+0x1bc>
 8006ce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ce8:	07d9      	lsls	r1, r3, #31
 8006cea:	d405      	bmi.n	8006cf8 <_vfiprintf_r+0x220>
 8006cec:	89ab      	ldrh	r3, [r5, #12]
 8006cee:	059a      	lsls	r2, r3, #22
 8006cf0:	d402      	bmi.n	8006cf8 <_vfiprintf_r+0x220>
 8006cf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cf4:	f7ff fe31 	bl	800695a <__retarget_lock_release_recursive>
 8006cf8:	89ab      	ldrh	r3, [r5, #12]
 8006cfa:	065b      	lsls	r3, r3, #25
 8006cfc:	f53f af12 	bmi.w	8006b24 <_vfiprintf_r+0x4c>
 8006d00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d02:	e711      	b.n	8006b28 <_vfiprintf_r+0x50>
 8006d04:	ab03      	add	r3, sp, #12
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	462a      	mov	r2, r5
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <_vfiprintf_r+0x258>)
 8006d0c:	a904      	add	r1, sp, #16
 8006d0e:	4630      	mov	r0, r6
 8006d10:	f000 f880 	bl	8006e14 <_printf_i>
 8006d14:	e7e4      	b.n	8006ce0 <_vfiprintf_r+0x208>
 8006d16:	bf00      	nop
 8006d18:	080076fc 	.word	0x080076fc
 8006d1c:	0800771c 	.word	0x0800771c
 8006d20:	080076dc 	.word	0x080076dc
 8006d24:	0800773c 	.word	0x0800773c
 8006d28:	08007746 	.word	0x08007746
 8006d2c:	00000000 	.word	0x00000000
 8006d30:	08006ab3 	.word	0x08006ab3
 8006d34:	08007742 	.word	0x08007742

08006d38 <_printf_common>:
 8006d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d3c:	4616      	mov	r6, r2
 8006d3e:	4699      	mov	r9, r3
 8006d40:	688a      	ldr	r2, [r1, #8]
 8006d42:	690b      	ldr	r3, [r1, #16]
 8006d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	bfb8      	it	lt
 8006d4c:	4613      	movlt	r3, r2
 8006d4e:	6033      	str	r3, [r6, #0]
 8006d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d54:	4607      	mov	r7, r0
 8006d56:	460c      	mov	r4, r1
 8006d58:	b10a      	cbz	r2, 8006d5e <_printf_common+0x26>
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	6033      	str	r3, [r6, #0]
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	0699      	lsls	r1, r3, #26
 8006d62:	bf42      	ittt	mi
 8006d64:	6833      	ldrmi	r3, [r6, #0]
 8006d66:	3302      	addmi	r3, #2
 8006d68:	6033      	strmi	r3, [r6, #0]
 8006d6a:	6825      	ldr	r5, [r4, #0]
 8006d6c:	f015 0506 	ands.w	r5, r5, #6
 8006d70:	d106      	bne.n	8006d80 <_printf_common+0x48>
 8006d72:	f104 0a19 	add.w	sl, r4, #25
 8006d76:	68e3      	ldr	r3, [r4, #12]
 8006d78:	6832      	ldr	r2, [r6, #0]
 8006d7a:	1a9b      	subs	r3, r3, r2
 8006d7c:	42ab      	cmp	r3, r5
 8006d7e:	dc26      	bgt.n	8006dce <_printf_common+0x96>
 8006d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d84:	1e13      	subs	r3, r2, #0
 8006d86:	6822      	ldr	r2, [r4, #0]
 8006d88:	bf18      	it	ne
 8006d8a:	2301      	movne	r3, #1
 8006d8c:	0692      	lsls	r2, r2, #26
 8006d8e:	d42b      	bmi.n	8006de8 <_printf_common+0xb0>
 8006d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d94:	4649      	mov	r1, r9
 8006d96:	4638      	mov	r0, r7
 8006d98:	47c0      	blx	r8
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	d01e      	beq.n	8006ddc <_printf_common+0xa4>
 8006d9e:	6823      	ldr	r3, [r4, #0]
 8006da0:	68e5      	ldr	r5, [r4, #12]
 8006da2:	6832      	ldr	r2, [r6, #0]
 8006da4:	f003 0306 	and.w	r3, r3, #6
 8006da8:	2b04      	cmp	r3, #4
 8006daa:	bf08      	it	eq
 8006dac:	1aad      	subeq	r5, r5, r2
 8006dae:	68a3      	ldr	r3, [r4, #8]
 8006db0:	6922      	ldr	r2, [r4, #16]
 8006db2:	bf0c      	ite	eq
 8006db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006db8:	2500      	movne	r5, #0
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	bfc4      	itt	gt
 8006dbe:	1a9b      	subgt	r3, r3, r2
 8006dc0:	18ed      	addgt	r5, r5, r3
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	341a      	adds	r4, #26
 8006dc6:	42b5      	cmp	r5, r6
 8006dc8:	d11a      	bne.n	8006e00 <_printf_common+0xc8>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e008      	b.n	8006de0 <_printf_common+0xa8>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	4652      	mov	r2, sl
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	4638      	mov	r0, r7
 8006dd6:	47c0      	blx	r8
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d103      	bne.n	8006de4 <_printf_common+0xac>
 8006ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8006de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de4:	3501      	adds	r5, #1
 8006de6:	e7c6      	b.n	8006d76 <_printf_common+0x3e>
 8006de8:	18e1      	adds	r1, r4, r3
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	2030      	movs	r0, #48	; 0x30
 8006dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006df2:	4422      	add	r2, r4
 8006df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dfc:	3302      	adds	r3, #2
 8006dfe:	e7c7      	b.n	8006d90 <_printf_common+0x58>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4622      	mov	r2, r4
 8006e04:	4649      	mov	r1, r9
 8006e06:	4638      	mov	r0, r7
 8006e08:	47c0      	blx	r8
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d0e6      	beq.n	8006ddc <_printf_common+0xa4>
 8006e0e:	3601      	adds	r6, #1
 8006e10:	e7d9      	b.n	8006dc6 <_printf_common+0x8e>
	...

08006e14 <_printf_i>:
 8006e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e18:	7e0f      	ldrb	r7, [r1, #24]
 8006e1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e1c:	2f78      	cmp	r7, #120	; 0x78
 8006e1e:	4691      	mov	r9, r2
 8006e20:	4680      	mov	r8, r0
 8006e22:	460c      	mov	r4, r1
 8006e24:	469a      	mov	sl, r3
 8006e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e2a:	d807      	bhi.n	8006e3c <_printf_i+0x28>
 8006e2c:	2f62      	cmp	r7, #98	; 0x62
 8006e2e:	d80a      	bhi.n	8006e46 <_printf_i+0x32>
 8006e30:	2f00      	cmp	r7, #0
 8006e32:	f000 80d8 	beq.w	8006fe6 <_printf_i+0x1d2>
 8006e36:	2f58      	cmp	r7, #88	; 0x58
 8006e38:	f000 80a3 	beq.w	8006f82 <_printf_i+0x16e>
 8006e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e44:	e03a      	b.n	8006ebc <_printf_i+0xa8>
 8006e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e4a:	2b15      	cmp	r3, #21
 8006e4c:	d8f6      	bhi.n	8006e3c <_printf_i+0x28>
 8006e4e:	a101      	add	r1, pc, #4	; (adr r1, 8006e54 <_printf_i+0x40>)
 8006e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006ec1 	.word	0x08006ec1
 8006e5c:	08006e3d 	.word	0x08006e3d
 8006e60:	08006e3d 	.word	0x08006e3d
 8006e64:	08006e3d 	.word	0x08006e3d
 8006e68:	08006e3d 	.word	0x08006e3d
 8006e6c:	08006ec1 	.word	0x08006ec1
 8006e70:	08006e3d 	.word	0x08006e3d
 8006e74:	08006e3d 	.word	0x08006e3d
 8006e78:	08006e3d 	.word	0x08006e3d
 8006e7c:	08006e3d 	.word	0x08006e3d
 8006e80:	08006fcd 	.word	0x08006fcd
 8006e84:	08006ef1 	.word	0x08006ef1
 8006e88:	08006faf 	.word	0x08006faf
 8006e8c:	08006e3d 	.word	0x08006e3d
 8006e90:	08006e3d 	.word	0x08006e3d
 8006e94:	08006fef 	.word	0x08006fef
 8006e98:	08006e3d 	.word	0x08006e3d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e3d 	.word	0x08006e3d
 8006ea4:	08006e3d 	.word	0x08006e3d
 8006ea8:	08006fb7 	.word	0x08006fb7
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	1d1a      	adds	r2, r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	602a      	str	r2, [r5, #0]
 8006eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0a3      	b.n	8007008 <_printf_i+0x1f4>
 8006ec0:	6820      	ldr	r0, [r4, #0]
 8006ec2:	6829      	ldr	r1, [r5, #0]
 8006ec4:	0606      	lsls	r6, r0, #24
 8006ec6:	f101 0304 	add.w	r3, r1, #4
 8006eca:	d50a      	bpl.n	8006ee2 <_printf_i+0xce>
 8006ecc:	680e      	ldr	r6, [r1, #0]
 8006ece:	602b      	str	r3, [r5, #0]
 8006ed0:	2e00      	cmp	r6, #0
 8006ed2:	da03      	bge.n	8006edc <_printf_i+0xc8>
 8006ed4:	232d      	movs	r3, #45	; 0x2d
 8006ed6:	4276      	negs	r6, r6
 8006ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006edc:	485e      	ldr	r0, [pc, #376]	; (8007058 <_printf_i+0x244>)
 8006ede:	230a      	movs	r3, #10
 8006ee0:	e019      	b.n	8006f16 <_printf_i+0x102>
 8006ee2:	680e      	ldr	r6, [r1, #0]
 8006ee4:	602b      	str	r3, [r5, #0]
 8006ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006eea:	bf18      	it	ne
 8006eec:	b236      	sxthne	r6, r6
 8006eee:	e7ef      	b.n	8006ed0 <_printf_i+0xbc>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6029      	str	r1, [r5, #0]
 8006ef8:	0601      	lsls	r1, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xec>
 8006efc:	681e      	ldr	r6, [r3, #0]
 8006efe:	e002      	b.n	8006f06 <_printf_i+0xf2>
 8006f00:	0646      	lsls	r6, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xe8>
 8006f04:	881e      	ldrh	r6, [r3, #0]
 8006f06:	4854      	ldr	r0, [pc, #336]	; (8007058 <_printf_i+0x244>)
 8006f08:	2f6f      	cmp	r7, #111	; 0x6f
 8006f0a:	bf0c      	ite	eq
 8006f0c:	2308      	moveq	r3, #8
 8006f0e:	230a      	movne	r3, #10
 8006f10:	2100      	movs	r1, #0
 8006f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f16:	6865      	ldr	r5, [r4, #4]
 8006f18:	60a5      	str	r5, [r4, #8]
 8006f1a:	2d00      	cmp	r5, #0
 8006f1c:	bfa2      	ittt	ge
 8006f1e:	6821      	ldrge	r1, [r4, #0]
 8006f20:	f021 0104 	bicge.w	r1, r1, #4
 8006f24:	6021      	strge	r1, [r4, #0]
 8006f26:	b90e      	cbnz	r6, 8006f2c <_printf_i+0x118>
 8006f28:	2d00      	cmp	r5, #0
 8006f2a:	d04d      	beq.n	8006fc8 <_printf_i+0x1b4>
 8006f2c:	4615      	mov	r5, r2
 8006f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f32:	fb03 6711 	mls	r7, r3, r1, r6
 8006f36:	5dc7      	ldrb	r7, [r0, r7]
 8006f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f3c:	4637      	mov	r7, r6
 8006f3e:	42bb      	cmp	r3, r7
 8006f40:	460e      	mov	r6, r1
 8006f42:	d9f4      	bls.n	8006f2e <_printf_i+0x11a>
 8006f44:	2b08      	cmp	r3, #8
 8006f46:	d10b      	bne.n	8006f60 <_printf_i+0x14c>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	07de      	lsls	r6, r3, #31
 8006f4c:	d508      	bpl.n	8006f60 <_printf_i+0x14c>
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	6861      	ldr	r1, [r4, #4]
 8006f52:	4299      	cmp	r1, r3
 8006f54:	bfde      	ittt	le
 8006f56:	2330      	movle	r3, #48	; 0x30
 8006f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f60:	1b52      	subs	r2, r2, r5
 8006f62:	6122      	str	r2, [r4, #16]
 8006f64:	f8cd a000 	str.w	sl, [sp]
 8006f68:	464b      	mov	r3, r9
 8006f6a:	aa03      	add	r2, sp, #12
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	4640      	mov	r0, r8
 8006f70:	f7ff fee2 	bl	8006d38 <_printf_common>
 8006f74:	3001      	adds	r0, #1
 8006f76:	d14c      	bne.n	8007012 <_printf_i+0x1fe>
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295
 8006f7c:	b004      	add	sp, #16
 8006f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f82:	4835      	ldr	r0, [pc, #212]	; (8007058 <_printf_i+0x244>)
 8006f84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f88:	6829      	ldr	r1, [r5, #0]
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f90:	6029      	str	r1, [r5, #0]
 8006f92:	061d      	lsls	r5, r3, #24
 8006f94:	d514      	bpl.n	8006fc0 <_printf_i+0x1ac>
 8006f96:	07df      	lsls	r7, r3, #31
 8006f98:	bf44      	itt	mi
 8006f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f9e:	6023      	strmi	r3, [r4, #0]
 8006fa0:	b91e      	cbnz	r6, 8006faa <_printf_i+0x196>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	f023 0320 	bic.w	r3, r3, #32
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	2310      	movs	r3, #16
 8006fac:	e7b0      	b.n	8006f10 <_printf_i+0xfc>
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	f043 0320 	orr.w	r3, r3, #32
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	2378      	movs	r3, #120	; 0x78
 8006fb8:	4828      	ldr	r0, [pc, #160]	; (800705c <_printf_i+0x248>)
 8006fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006fbe:	e7e3      	b.n	8006f88 <_printf_i+0x174>
 8006fc0:	0659      	lsls	r1, r3, #25
 8006fc2:	bf48      	it	mi
 8006fc4:	b2b6      	uxthmi	r6, r6
 8006fc6:	e7e6      	b.n	8006f96 <_printf_i+0x182>
 8006fc8:	4615      	mov	r5, r2
 8006fca:	e7bb      	b.n	8006f44 <_printf_i+0x130>
 8006fcc:	682b      	ldr	r3, [r5, #0]
 8006fce:	6826      	ldr	r6, [r4, #0]
 8006fd0:	6961      	ldr	r1, [r4, #20]
 8006fd2:	1d18      	adds	r0, r3, #4
 8006fd4:	6028      	str	r0, [r5, #0]
 8006fd6:	0635      	lsls	r5, r6, #24
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	d501      	bpl.n	8006fe0 <_printf_i+0x1cc>
 8006fdc:	6019      	str	r1, [r3, #0]
 8006fde:	e002      	b.n	8006fe6 <_printf_i+0x1d2>
 8006fe0:	0670      	lsls	r0, r6, #25
 8006fe2:	d5fb      	bpl.n	8006fdc <_printf_i+0x1c8>
 8006fe4:	8019      	strh	r1, [r3, #0]
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	4615      	mov	r5, r2
 8006fec:	e7ba      	b.n	8006f64 <_printf_i+0x150>
 8006fee:	682b      	ldr	r3, [r5, #0]
 8006ff0:	1d1a      	adds	r2, r3, #4
 8006ff2:	602a      	str	r2, [r5, #0]
 8006ff4:	681d      	ldr	r5, [r3, #0]
 8006ff6:	6862      	ldr	r2, [r4, #4]
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	f7f9 f910 	bl	8000220 <memchr>
 8007000:	b108      	cbz	r0, 8007006 <_printf_i+0x1f2>
 8007002:	1b40      	subs	r0, r0, r5
 8007004:	6060      	str	r0, [r4, #4]
 8007006:	6863      	ldr	r3, [r4, #4]
 8007008:	6123      	str	r3, [r4, #16]
 800700a:	2300      	movs	r3, #0
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007010:	e7a8      	b.n	8006f64 <_printf_i+0x150>
 8007012:	6923      	ldr	r3, [r4, #16]
 8007014:	462a      	mov	r2, r5
 8007016:	4649      	mov	r1, r9
 8007018:	4640      	mov	r0, r8
 800701a:	47d0      	blx	sl
 800701c:	3001      	adds	r0, #1
 800701e:	d0ab      	beq.n	8006f78 <_printf_i+0x164>
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	079b      	lsls	r3, r3, #30
 8007024:	d413      	bmi.n	800704e <_printf_i+0x23a>
 8007026:	68e0      	ldr	r0, [r4, #12]
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	4298      	cmp	r0, r3
 800702c:	bfb8      	it	lt
 800702e:	4618      	movlt	r0, r3
 8007030:	e7a4      	b.n	8006f7c <_printf_i+0x168>
 8007032:	2301      	movs	r3, #1
 8007034:	4632      	mov	r2, r6
 8007036:	4649      	mov	r1, r9
 8007038:	4640      	mov	r0, r8
 800703a:	47d0      	blx	sl
 800703c:	3001      	adds	r0, #1
 800703e:	d09b      	beq.n	8006f78 <_printf_i+0x164>
 8007040:	3501      	adds	r5, #1
 8007042:	68e3      	ldr	r3, [r4, #12]
 8007044:	9903      	ldr	r1, [sp, #12]
 8007046:	1a5b      	subs	r3, r3, r1
 8007048:	42ab      	cmp	r3, r5
 800704a:	dcf2      	bgt.n	8007032 <_printf_i+0x21e>
 800704c:	e7eb      	b.n	8007026 <_printf_i+0x212>
 800704e:	2500      	movs	r5, #0
 8007050:	f104 0619 	add.w	r6, r4, #25
 8007054:	e7f5      	b.n	8007042 <_printf_i+0x22e>
 8007056:	bf00      	nop
 8007058:	0800774d 	.word	0x0800774d
 800705c:	0800775e 	.word	0x0800775e

08007060 <_sbrk_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d06      	ldr	r5, [pc, #24]	; (800707c <_sbrk_r+0x1c>)
 8007064:	2300      	movs	r3, #0
 8007066:	4604      	mov	r4, r0
 8007068:	4608      	mov	r0, r1
 800706a:	602b      	str	r3, [r5, #0]
 800706c:	f7f9 ff98 	bl	8000fa0 <_sbrk>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_sbrk_r+0x1a>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_sbrk_r+0x1a>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	20000364 	.word	0x20000364

08007080 <__sread>:
 8007080:	b510      	push	{r4, lr}
 8007082:	460c      	mov	r4, r1
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	f000 fab2 	bl	80075f0 <_read_r>
 800708c:	2800      	cmp	r0, #0
 800708e:	bfab      	itete	ge
 8007090:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007092:	89a3      	ldrhlt	r3, [r4, #12]
 8007094:	181b      	addge	r3, r3, r0
 8007096:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800709a:	bfac      	ite	ge
 800709c:	6563      	strge	r3, [r4, #84]	; 0x54
 800709e:	81a3      	strhlt	r3, [r4, #12]
 80070a0:	bd10      	pop	{r4, pc}

080070a2 <__swrite>:
 80070a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	461f      	mov	r7, r3
 80070a8:	898b      	ldrh	r3, [r1, #12]
 80070aa:	05db      	lsls	r3, r3, #23
 80070ac:	4605      	mov	r5, r0
 80070ae:	460c      	mov	r4, r1
 80070b0:	4616      	mov	r6, r2
 80070b2:	d505      	bpl.n	80070c0 <__swrite+0x1e>
 80070b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b8:	2302      	movs	r3, #2
 80070ba:	2200      	movs	r2, #0
 80070bc:	f000 f9c8 	bl	8007450 <_lseek_r>
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070ca:	81a3      	strh	r3, [r4, #12]
 80070cc:	4632      	mov	r2, r6
 80070ce:	463b      	mov	r3, r7
 80070d0:	4628      	mov	r0, r5
 80070d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d6:	f000 b869 	b.w	80071ac <_write_r>

080070da <__sseek>:
 80070da:	b510      	push	{r4, lr}
 80070dc:	460c      	mov	r4, r1
 80070de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e2:	f000 f9b5 	bl	8007450 <_lseek_r>
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	bf15      	itete	ne
 80070ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070f6:	81a3      	strheq	r3, [r4, #12]
 80070f8:	bf18      	it	ne
 80070fa:	81a3      	strhne	r3, [r4, #12]
 80070fc:	bd10      	pop	{r4, pc}

080070fe <__sclose>:
 80070fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007102:	f000 b8d3 	b.w	80072ac <_close_r>
	...

08007108 <__swbuf_r>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	460e      	mov	r6, r1
 800710c:	4614      	mov	r4, r2
 800710e:	4605      	mov	r5, r0
 8007110:	b118      	cbz	r0, 800711a <__swbuf_r+0x12>
 8007112:	6983      	ldr	r3, [r0, #24]
 8007114:	b90b      	cbnz	r3, 800711a <__swbuf_r+0x12>
 8007116:	f7ff fb81 	bl	800681c <__sinit>
 800711a:	4b21      	ldr	r3, [pc, #132]	; (80071a0 <__swbuf_r+0x98>)
 800711c:	429c      	cmp	r4, r3
 800711e:	d12b      	bne.n	8007178 <__swbuf_r+0x70>
 8007120:	686c      	ldr	r4, [r5, #4]
 8007122:	69a3      	ldr	r3, [r4, #24]
 8007124:	60a3      	str	r3, [r4, #8]
 8007126:	89a3      	ldrh	r3, [r4, #12]
 8007128:	071a      	lsls	r2, r3, #28
 800712a:	d52f      	bpl.n	800718c <__swbuf_r+0x84>
 800712c:	6923      	ldr	r3, [r4, #16]
 800712e:	b36b      	cbz	r3, 800718c <__swbuf_r+0x84>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	6820      	ldr	r0, [r4, #0]
 8007134:	1ac0      	subs	r0, r0, r3
 8007136:	6963      	ldr	r3, [r4, #20]
 8007138:	b2f6      	uxtb	r6, r6
 800713a:	4283      	cmp	r3, r0
 800713c:	4637      	mov	r7, r6
 800713e:	dc04      	bgt.n	800714a <__swbuf_r+0x42>
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f948 	bl	80073d8 <_fflush_r>
 8007148:	bb30      	cbnz	r0, 8007198 <__swbuf_r+0x90>
 800714a:	68a3      	ldr	r3, [r4, #8]
 800714c:	3b01      	subs	r3, #1
 800714e:	60a3      	str	r3, [r4, #8]
 8007150:	6823      	ldr	r3, [r4, #0]
 8007152:	1c5a      	adds	r2, r3, #1
 8007154:	6022      	str	r2, [r4, #0]
 8007156:	701e      	strb	r6, [r3, #0]
 8007158:	6963      	ldr	r3, [r4, #20]
 800715a:	3001      	adds	r0, #1
 800715c:	4283      	cmp	r3, r0
 800715e:	d004      	beq.n	800716a <__swbuf_r+0x62>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	07db      	lsls	r3, r3, #31
 8007164:	d506      	bpl.n	8007174 <__swbuf_r+0x6c>
 8007166:	2e0a      	cmp	r6, #10
 8007168:	d104      	bne.n	8007174 <__swbuf_r+0x6c>
 800716a:	4621      	mov	r1, r4
 800716c:	4628      	mov	r0, r5
 800716e:	f000 f933 	bl	80073d8 <_fflush_r>
 8007172:	b988      	cbnz	r0, 8007198 <__swbuf_r+0x90>
 8007174:	4638      	mov	r0, r7
 8007176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007178:	4b0a      	ldr	r3, [pc, #40]	; (80071a4 <__swbuf_r+0x9c>)
 800717a:	429c      	cmp	r4, r3
 800717c:	d101      	bne.n	8007182 <__swbuf_r+0x7a>
 800717e:	68ac      	ldr	r4, [r5, #8]
 8007180:	e7cf      	b.n	8007122 <__swbuf_r+0x1a>
 8007182:	4b09      	ldr	r3, [pc, #36]	; (80071a8 <__swbuf_r+0xa0>)
 8007184:	429c      	cmp	r4, r3
 8007186:	bf08      	it	eq
 8007188:	68ec      	ldreq	r4, [r5, #12]
 800718a:	e7ca      	b.n	8007122 <__swbuf_r+0x1a>
 800718c:	4621      	mov	r1, r4
 800718e:	4628      	mov	r0, r5
 8007190:	f000 f81e 	bl	80071d0 <__swsetup_r>
 8007194:	2800      	cmp	r0, #0
 8007196:	d0cb      	beq.n	8007130 <__swbuf_r+0x28>
 8007198:	f04f 37ff 	mov.w	r7, #4294967295
 800719c:	e7ea      	b.n	8007174 <__swbuf_r+0x6c>
 800719e:	bf00      	nop
 80071a0:	080076fc 	.word	0x080076fc
 80071a4:	0800771c 	.word	0x0800771c
 80071a8:	080076dc 	.word	0x080076dc

080071ac <_write_r>:
 80071ac:	b538      	push	{r3, r4, r5, lr}
 80071ae:	4d07      	ldr	r5, [pc, #28]	; (80071cc <_write_r+0x20>)
 80071b0:	4604      	mov	r4, r0
 80071b2:	4608      	mov	r0, r1
 80071b4:	4611      	mov	r1, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	602a      	str	r2, [r5, #0]
 80071ba:	461a      	mov	r2, r3
 80071bc:	f7f9 fe9c 	bl	8000ef8 <_write>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_write_r+0x1e>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_write_r+0x1e>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000364 	.word	0x20000364

080071d0 <__swsetup_r>:
 80071d0:	4b32      	ldr	r3, [pc, #200]	; (800729c <__swsetup_r+0xcc>)
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	681d      	ldr	r5, [r3, #0]
 80071d6:	4606      	mov	r6, r0
 80071d8:	460c      	mov	r4, r1
 80071da:	b125      	cbz	r5, 80071e6 <__swsetup_r+0x16>
 80071dc:	69ab      	ldr	r3, [r5, #24]
 80071de:	b913      	cbnz	r3, 80071e6 <__swsetup_r+0x16>
 80071e0:	4628      	mov	r0, r5
 80071e2:	f7ff fb1b 	bl	800681c <__sinit>
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <__swsetup_r+0xd0>)
 80071e8:	429c      	cmp	r4, r3
 80071ea:	d10f      	bne.n	800720c <__swsetup_r+0x3c>
 80071ec:	686c      	ldr	r4, [r5, #4]
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071f4:	0719      	lsls	r1, r3, #28
 80071f6:	d42c      	bmi.n	8007252 <__swsetup_r+0x82>
 80071f8:	06dd      	lsls	r5, r3, #27
 80071fa:	d411      	bmi.n	8007220 <__swsetup_r+0x50>
 80071fc:	2309      	movs	r3, #9
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295
 800720a:	e03e      	b.n	800728a <__swsetup_r+0xba>
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <__swsetup_r+0xd4>)
 800720e:	429c      	cmp	r4, r3
 8007210:	d101      	bne.n	8007216 <__swsetup_r+0x46>
 8007212:	68ac      	ldr	r4, [r5, #8]
 8007214:	e7eb      	b.n	80071ee <__swsetup_r+0x1e>
 8007216:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <__swsetup_r+0xd8>)
 8007218:	429c      	cmp	r4, r3
 800721a:	bf08      	it	eq
 800721c:	68ec      	ldreq	r4, [r5, #12]
 800721e:	e7e6      	b.n	80071ee <__swsetup_r+0x1e>
 8007220:	0758      	lsls	r0, r3, #29
 8007222:	d512      	bpl.n	800724a <__swsetup_r+0x7a>
 8007224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007226:	b141      	cbz	r1, 800723a <__swsetup_r+0x6a>
 8007228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800722c:	4299      	cmp	r1, r3
 800722e:	d002      	beq.n	8007236 <__swsetup_r+0x66>
 8007230:	4630      	mov	r0, r6
 8007232:	f000 f991 	bl	8007558 <_free_r>
 8007236:	2300      	movs	r3, #0
 8007238:	6363      	str	r3, [r4, #52]	; 0x34
 800723a:	89a3      	ldrh	r3, [r4, #12]
 800723c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007240:	81a3      	strh	r3, [r4, #12]
 8007242:	2300      	movs	r3, #0
 8007244:	6063      	str	r3, [r4, #4]
 8007246:	6923      	ldr	r3, [r4, #16]
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	b94b      	cbnz	r3, 800726a <__swsetup_r+0x9a>
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800725c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007260:	d003      	beq.n	800726a <__swsetup_r+0x9a>
 8007262:	4621      	mov	r1, r4
 8007264:	4630      	mov	r0, r6
 8007266:	f000 f92b 	bl	80074c0 <__smakebuf_r>
 800726a:	89a0      	ldrh	r0, [r4, #12]
 800726c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007270:	f010 0301 	ands.w	r3, r0, #1
 8007274:	d00a      	beq.n	800728c <__swsetup_r+0xbc>
 8007276:	2300      	movs	r3, #0
 8007278:	60a3      	str	r3, [r4, #8]
 800727a:	6963      	ldr	r3, [r4, #20]
 800727c:	425b      	negs	r3, r3
 800727e:	61a3      	str	r3, [r4, #24]
 8007280:	6923      	ldr	r3, [r4, #16]
 8007282:	b943      	cbnz	r3, 8007296 <__swsetup_r+0xc6>
 8007284:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007288:	d1ba      	bne.n	8007200 <__swsetup_r+0x30>
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	0781      	lsls	r1, r0, #30
 800728e:	bf58      	it	pl
 8007290:	6963      	ldrpl	r3, [r4, #20]
 8007292:	60a3      	str	r3, [r4, #8]
 8007294:	e7f4      	b.n	8007280 <__swsetup_r+0xb0>
 8007296:	2000      	movs	r0, #0
 8007298:	e7f7      	b.n	800728a <__swsetup_r+0xba>
 800729a:	bf00      	nop
 800729c:	2000000c 	.word	0x2000000c
 80072a0:	080076fc 	.word	0x080076fc
 80072a4:	0800771c 	.word	0x0800771c
 80072a8:	080076dc 	.word	0x080076dc

080072ac <_close_r>:
 80072ac:	b538      	push	{r3, r4, r5, lr}
 80072ae:	4d06      	ldr	r5, [pc, #24]	; (80072c8 <_close_r+0x1c>)
 80072b0:	2300      	movs	r3, #0
 80072b2:	4604      	mov	r4, r0
 80072b4:	4608      	mov	r0, r1
 80072b6:	602b      	str	r3, [r5, #0]
 80072b8:	f7f9 fe3e 	bl	8000f38 <_close>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d102      	bne.n	80072c6 <_close_r+0x1a>
 80072c0:	682b      	ldr	r3, [r5, #0]
 80072c2:	b103      	cbz	r3, 80072c6 <_close_r+0x1a>
 80072c4:	6023      	str	r3, [r4, #0]
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	20000364 	.word	0x20000364

080072cc <__sflush_r>:
 80072cc:	898a      	ldrh	r2, [r1, #12]
 80072ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d2:	4605      	mov	r5, r0
 80072d4:	0710      	lsls	r0, r2, #28
 80072d6:	460c      	mov	r4, r1
 80072d8:	d458      	bmi.n	800738c <__sflush_r+0xc0>
 80072da:	684b      	ldr	r3, [r1, #4]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	dc05      	bgt.n	80072ec <__sflush_r+0x20>
 80072e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	dc02      	bgt.n	80072ec <__sflush_r+0x20>
 80072e6:	2000      	movs	r0, #0
 80072e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	d0f9      	beq.n	80072e6 <__sflush_r+0x1a>
 80072f2:	2300      	movs	r3, #0
 80072f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072f8:	682f      	ldr	r7, [r5, #0]
 80072fa:	602b      	str	r3, [r5, #0]
 80072fc:	d032      	beq.n	8007364 <__sflush_r+0x98>
 80072fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007300:	89a3      	ldrh	r3, [r4, #12]
 8007302:	075a      	lsls	r2, r3, #29
 8007304:	d505      	bpl.n	8007312 <__sflush_r+0x46>
 8007306:	6863      	ldr	r3, [r4, #4]
 8007308:	1ac0      	subs	r0, r0, r3
 800730a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800730c:	b10b      	cbz	r3, 8007312 <__sflush_r+0x46>
 800730e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007310:	1ac0      	subs	r0, r0, r3
 8007312:	2300      	movs	r3, #0
 8007314:	4602      	mov	r2, r0
 8007316:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007318:	6a21      	ldr	r1, [r4, #32]
 800731a:	4628      	mov	r0, r5
 800731c:	47b0      	blx	r6
 800731e:	1c43      	adds	r3, r0, #1
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	d106      	bne.n	8007332 <__sflush_r+0x66>
 8007324:	6829      	ldr	r1, [r5, #0]
 8007326:	291d      	cmp	r1, #29
 8007328:	d82c      	bhi.n	8007384 <__sflush_r+0xb8>
 800732a:	4a2a      	ldr	r2, [pc, #168]	; (80073d4 <__sflush_r+0x108>)
 800732c:	40ca      	lsrs	r2, r1
 800732e:	07d6      	lsls	r6, r2, #31
 8007330:	d528      	bpl.n	8007384 <__sflush_r+0xb8>
 8007332:	2200      	movs	r2, #0
 8007334:	6062      	str	r2, [r4, #4]
 8007336:	04d9      	lsls	r1, r3, #19
 8007338:	6922      	ldr	r2, [r4, #16]
 800733a:	6022      	str	r2, [r4, #0]
 800733c:	d504      	bpl.n	8007348 <__sflush_r+0x7c>
 800733e:	1c42      	adds	r2, r0, #1
 8007340:	d101      	bne.n	8007346 <__sflush_r+0x7a>
 8007342:	682b      	ldr	r3, [r5, #0]
 8007344:	b903      	cbnz	r3, 8007348 <__sflush_r+0x7c>
 8007346:	6560      	str	r0, [r4, #84]	; 0x54
 8007348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800734a:	602f      	str	r7, [r5, #0]
 800734c:	2900      	cmp	r1, #0
 800734e:	d0ca      	beq.n	80072e6 <__sflush_r+0x1a>
 8007350:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007354:	4299      	cmp	r1, r3
 8007356:	d002      	beq.n	800735e <__sflush_r+0x92>
 8007358:	4628      	mov	r0, r5
 800735a:	f000 f8fd 	bl	8007558 <_free_r>
 800735e:	2000      	movs	r0, #0
 8007360:	6360      	str	r0, [r4, #52]	; 0x34
 8007362:	e7c1      	b.n	80072e8 <__sflush_r+0x1c>
 8007364:	6a21      	ldr	r1, [r4, #32]
 8007366:	2301      	movs	r3, #1
 8007368:	4628      	mov	r0, r5
 800736a:	47b0      	blx	r6
 800736c:	1c41      	adds	r1, r0, #1
 800736e:	d1c7      	bne.n	8007300 <__sflush_r+0x34>
 8007370:	682b      	ldr	r3, [r5, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d0c4      	beq.n	8007300 <__sflush_r+0x34>
 8007376:	2b1d      	cmp	r3, #29
 8007378:	d001      	beq.n	800737e <__sflush_r+0xb2>
 800737a:	2b16      	cmp	r3, #22
 800737c:	d101      	bne.n	8007382 <__sflush_r+0xb6>
 800737e:	602f      	str	r7, [r5, #0]
 8007380:	e7b1      	b.n	80072e6 <__sflush_r+0x1a>
 8007382:	89a3      	ldrh	r3, [r4, #12]
 8007384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	e7ad      	b.n	80072e8 <__sflush_r+0x1c>
 800738c:	690f      	ldr	r7, [r1, #16]
 800738e:	2f00      	cmp	r7, #0
 8007390:	d0a9      	beq.n	80072e6 <__sflush_r+0x1a>
 8007392:	0793      	lsls	r3, r2, #30
 8007394:	680e      	ldr	r6, [r1, #0]
 8007396:	bf08      	it	eq
 8007398:	694b      	ldreq	r3, [r1, #20]
 800739a:	600f      	str	r7, [r1, #0]
 800739c:	bf18      	it	ne
 800739e:	2300      	movne	r3, #0
 80073a0:	eba6 0807 	sub.w	r8, r6, r7
 80073a4:	608b      	str	r3, [r1, #8]
 80073a6:	f1b8 0f00 	cmp.w	r8, #0
 80073aa:	dd9c      	ble.n	80072e6 <__sflush_r+0x1a>
 80073ac:	6a21      	ldr	r1, [r4, #32]
 80073ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073b0:	4643      	mov	r3, r8
 80073b2:	463a      	mov	r2, r7
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b0      	blx	r6
 80073b8:	2800      	cmp	r0, #0
 80073ba:	dc06      	bgt.n	80073ca <__sflush_r+0xfe>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c2:	81a3      	strh	r3, [r4, #12]
 80073c4:	f04f 30ff 	mov.w	r0, #4294967295
 80073c8:	e78e      	b.n	80072e8 <__sflush_r+0x1c>
 80073ca:	4407      	add	r7, r0
 80073cc:	eba8 0800 	sub.w	r8, r8, r0
 80073d0:	e7e9      	b.n	80073a6 <__sflush_r+0xda>
 80073d2:	bf00      	nop
 80073d4:	20400001 	.word	0x20400001

080073d8 <_fflush_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	690b      	ldr	r3, [r1, #16]
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	b913      	cbnz	r3, 80073e8 <_fflush_r+0x10>
 80073e2:	2500      	movs	r5, #0
 80073e4:	4628      	mov	r0, r5
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	b118      	cbz	r0, 80073f2 <_fflush_r+0x1a>
 80073ea:	6983      	ldr	r3, [r0, #24]
 80073ec:	b90b      	cbnz	r3, 80073f2 <_fflush_r+0x1a>
 80073ee:	f7ff fa15 	bl	800681c <__sinit>
 80073f2:	4b14      	ldr	r3, [pc, #80]	; (8007444 <_fflush_r+0x6c>)
 80073f4:	429c      	cmp	r4, r3
 80073f6:	d11b      	bne.n	8007430 <_fflush_r+0x58>
 80073f8:	686c      	ldr	r4, [r5, #4]
 80073fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0ef      	beq.n	80073e2 <_fflush_r+0xa>
 8007402:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007404:	07d0      	lsls	r0, r2, #31
 8007406:	d404      	bmi.n	8007412 <_fflush_r+0x3a>
 8007408:	0599      	lsls	r1, r3, #22
 800740a:	d402      	bmi.n	8007412 <_fflush_r+0x3a>
 800740c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800740e:	f7ff faa3 	bl	8006958 <__retarget_lock_acquire_recursive>
 8007412:	4628      	mov	r0, r5
 8007414:	4621      	mov	r1, r4
 8007416:	f7ff ff59 	bl	80072cc <__sflush_r>
 800741a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800741c:	07da      	lsls	r2, r3, #31
 800741e:	4605      	mov	r5, r0
 8007420:	d4e0      	bmi.n	80073e4 <_fflush_r+0xc>
 8007422:	89a3      	ldrh	r3, [r4, #12]
 8007424:	059b      	lsls	r3, r3, #22
 8007426:	d4dd      	bmi.n	80073e4 <_fflush_r+0xc>
 8007428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800742a:	f7ff fa96 	bl	800695a <__retarget_lock_release_recursive>
 800742e:	e7d9      	b.n	80073e4 <_fflush_r+0xc>
 8007430:	4b05      	ldr	r3, [pc, #20]	; (8007448 <_fflush_r+0x70>)
 8007432:	429c      	cmp	r4, r3
 8007434:	d101      	bne.n	800743a <_fflush_r+0x62>
 8007436:	68ac      	ldr	r4, [r5, #8]
 8007438:	e7df      	b.n	80073fa <_fflush_r+0x22>
 800743a:	4b04      	ldr	r3, [pc, #16]	; (800744c <_fflush_r+0x74>)
 800743c:	429c      	cmp	r4, r3
 800743e:	bf08      	it	eq
 8007440:	68ec      	ldreq	r4, [r5, #12]
 8007442:	e7da      	b.n	80073fa <_fflush_r+0x22>
 8007444:	080076fc 	.word	0x080076fc
 8007448:	0800771c 	.word	0x0800771c
 800744c:	080076dc 	.word	0x080076dc

08007450 <_lseek_r>:
 8007450:	b538      	push	{r3, r4, r5, lr}
 8007452:	4d07      	ldr	r5, [pc, #28]	; (8007470 <_lseek_r+0x20>)
 8007454:	4604      	mov	r4, r0
 8007456:	4608      	mov	r0, r1
 8007458:	4611      	mov	r1, r2
 800745a:	2200      	movs	r2, #0
 800745c:	602a      	str	r2, [r5, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f7f9 fd91 	bl	8000f86 <_lseek>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d102      	bne.n	800746e <_lseek_r+0x1e>
 8007468:	682b      	ldr	r3, [r5, #0]
 800746a:	b103      	cbz	r3, 800746e <_lseek_r+0x1e>
 800746c:	6023      	str	r3, [r4, #0]
 800746e:	bd38      	pop	{r3, r4, r5, pc}
 8007470:	20000364 	.word	0x20000364

08007474 <__swhatbuf_r>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	460e      	mov	r6, r1
 8007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800747c:	2900      	cmp	r1, #0
 800747e:	b096      	sub	sp, #88	; 0x58
 8007480:	4614      	mov	r4, r2
 8007482:	461d      	mov	r5, r3
 8007484:	da08      	bge.n	8007498 <__swhatbuf_r+0x24>
 8007486:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	602a      	str	r2, [r5, #0]
 800748e:	061a      	lsls	r2, r3, #24
 8007490:	d410      	bmi.n	80074b4 <__swhatbuf_r+0x40>
 8007492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007496:	e00e      	b.n	80074b6 <__swhatbuf_r+0x42>
 8007498:	466a      	mov	r2, sp
 800749a:	f000 f8bb 	bl	8007614 <_fstat_r>
 800749e:	2800      	cmp	r0, #0
 80074a0:	dbf1      	blt.n	8007486 <__swhatbuf_r+0x12>
 80074a2:	9a01      	ldr	r2, [sp, #4]
 80074a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074ac:	425a      	negs	r2, r3
 80074ae:	415a      	adcs	r2, r3
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	e7ee      	b.n	8007492 <__swhatbuf_r+0x1e>
 80074b4:	2340      	movs	r3, #64	; 0x40
 80074b6:	2000      	movs	r0, #0
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	b016      	add	sp, #88	; 0x58
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080074c0 <__smakebuf_r>:
 80074c0:	898b      	ldrh	r3, [r1, #12]
 80074c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80074c4:	079d      	lsls	r5, r3, #30
 80074c6:	4606      	mov	r6, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d507      	bpl.n	80074dc <__smakebuf_r+0x1c>
 80074cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	6123      	str	r3, [r4, #16]
 80074d4:	2301      	movs	r3, #1
 80074d6:	6163      	str	r3, [r4, #20]
 80074d8:	b002      	add	sp, #8
 80074da:	bd70      	pop	{r4, r5, r6, pc}
 80074dc:	ab01      	add	r3, sp, #4
 80074de:	466a      	mov	r2, sp
 80074e0:	f7ff ffc8 	bl	8007474 <__swhatbuf_r>
 80074e4:	9900      	ldr	r1, [sp, #0]
 80074e6:	4605      	mov	r5, r0
 80074e8:	4630      	mov	r0, r6
 80074ea:	f7ff fa57 	bl	800699c <_malloc_r>
 80074ee:	b948      	cbnz	r0, 8007504 <__smakebuf_r+0x44>
 80074f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d4ef      	bmi.n	80074d8 <__smakebuf_r+0x18>
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	e7e3      	b.n	80074cc <__smakebuf_r+0xc>
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <__smakebuf_r+0x7c>)
 8007506:	62b3      	str	r3, [r6, #40]	; 0x28
 8007508:	89a3      	ldrh	r3, [r4, #12]
 800750a:	6020      	str	r0, [r4, #0]
 800750c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	9b00      	ldr	r3, [sp, #0]
 8007514:	6163      	str	r3, [r4, #20]
 8007516:	9b01      	ldr	r3, [sp, #4]
 8007518:	6120      	str	r0, [r4, #16]
 800751a:	b15b      	cbz	r3, 8007534 <__smakebuf_r+0x74>
 800751c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f889 	bl	8007638 <_isatty_r>
 8007526:	b128      	cbz	r0, 8007534 <__smakebuf_r+0x74>
 8007528:	89a3      	ldrh	r3, [r4, #12]
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	f043 0301 	orr.w	r3, r3, #1
 8007532:	81a3      	strh	r3, [r4, #12]
 8007534:	89a0      	ldrh	r0, [r4, #12]
 8007536:	4305      	orrs	r5, r0
 8007538:	81a5      	strh	r5, [r4, #12]
 800753a:	e7cd      	b.n	80074d8 <__smakebuf_r+0x18>
 800753c:	080067b5 	.word	0x080067b5

08007540 <__malloc_lock>:
 8007540:	4801      	ldr	r0, [pc, #4]	; (8007548 <__malloc_lock+0x8>)
 8007542:	f7ff ba09 	b.w	8006958 <__retarget_lock_acquire_recursive>
 8007546:	bf00      	nop
 8007548:	20000358 	.word	0x20000358

0800754c <__malloc_unlock>:
 800754c:	4801      	ldr	r0, [pc, #4]	; (8007554 <__malloc_unlock+0x8>)
 800754e:	f7ff ba04 	b.w	800695a <__retarget_lock_release_recursive>
 8007552:	bf00      	nop
 8007554:	20000358 	.word	0x20000358

08007558 <_free_r>:
 8007558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800755a:	2900      	cmp	r1, #0
 800755c:	d044      	beq.n	80075e8 <_free_r+0x90>
 800755e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007562:	9001      	str	r0, [sp, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f1a1 0404 	sub.w	r4, r1, #4
 800756a:	bfb8      	it	lt
 800756c:	18e4      	addlt	r4, r4, r3
 800756e:	f7ff ffe7 	bl	8007540 <__malloc_lock>
 8007572:	4a1e      	ldr	r2, [pc, #120]	; (80075ec <_free_r+0x94>)
 8007574:	9801      	ldr	r0, [sp, #4]
 8007576:	6813      	ldr	r3, [r2, #0]
 8007578:	b933      	cbnz	r3, 8007588 <_free_r+0x30>
 800757a:	6063      	str	r3, [r4, #4]
 800757c:	6014      	str	r4, [r2, #0]
 800757e:	b003      	add	sp, #12
 8007580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007584:	f7ff bfe2 	b.w	800754c <__malloc_unlock>
 8007588:	42a3      	cmp	r3, r4
 800758a:	d908      	bls.n	800759e <_free_r+0x46>
 800758c:	6825      	ldr	r5, [r4, #0]
 800758e:	1961      	adds	r1, r4, r5
 8007590:	428b      	cmp	r3, r1
 8007592:	bf01      	itttt	eq
 8007594:	6819      	ldreq	r1, [r3, #0]
 8007596:	685b      	ldreq	r3, [r3, #4]
 8007598:	1949      	addeq	r1, r1, r5
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	e7ed      	b.n	800757a <_free_r+0x22>
 800759e:	461a      	mov	r2, r3
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	b10b      	cbz	r3, 80075a8 <_free_r+0x50>
 80075a4:	42a3      	cmp	r3, r4
 80075a6:	d9fa      	bls.n	800759e <_free_r+0x46>
 80075a8:	6811      	ldr	r1, [r2, #0]
 80075aa:	1855      	adds	r5, r2, r1
 80075ac:	42a5      	cmp	r5, r4
 80075ae:	d10b      	bne.n	80075c8 <_free_r+0x70>
 80075b0:	6824      	ldr	r4, [r4, #0]
 80075b2:	4421      	add	r1, r4
 80075b4:	1854      	adds	r4, r2, r1
 80075b6:	42a3      	cmp	r3, r4
 80075b8:	6011      	str	r1, [r2, #0]
 80075ba:	d1e0      	bne.n	800757e <_free_r+0x26>
 80075bc:	681c      	ldr	r4, [r3, #0]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	6053      	str	r3, [r2, #4]
 80075c2:	4421      	add	r1, r4
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	e7da      	b.n	800757e <_free_r+0x26>
 80075c8:	d902      	bls.n	80075d0 <_free_r+0x78>
 80075ca:	230c      	movs	r3, #12
 80075cc:	6003      	str	r3, [r0, #0]
 80075ce:	e7d6      	b.n	800757e <_free_r+0x26>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	1961      	adds	r1, r4, r5
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf04      	itt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	6063      	str	r3, [r4, #4]
 80075de:	bf04      	itt	eq
 80075e0:	1949      	addeq	r1, r1, r5
 80075e2:	6021      	streq	r1, [r4, #0]
 80075e4:	6054      	str	r4, [r2, #4]
 80075e6:	e7ca      	b.n	800757e <_free_r+0x26>
 80075e8:	b003      	add	sp, #12
 80075ea:	bd30      	pop	{r4, r5, pc}
 80075ec:	2000035c 	.word	0x2000035c

080075f0 <_read_r>:
 80075f0:	b538      	push	{r3, r4, r5, lr}
 80075f2:	4d07      	ldr	r5, [pc, #28]	; (8007610 <_read_r+0x20>)
 80075f4:	4604      	mov	r4, r0
 80075f6:	4608      	mov	r0, r1
 80075f8:	4611      	mov	r1, r2
 80075fa:	2200      	movs	r2, #0
 80075fc:	602a      	str	r2, [r5, #0]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7f9 fc5c 	bl	8000ebc <_read>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_read_r+0x1e>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_read_r+0x1e>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	20000364 	.word	0x20000364

08007614 <_fstat_r>:
 8007614:	b538      	push	{r3, r4, r5, lr}
 8007616:	4d07      	ldr	r5, [pc, #28]	; (8007634 <_fstat_r+0x20>)
 8007618:	2300      	movs	r3, #0
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	602b      	str	r3, [r5, #0]
 8007622:	f7f9 fc95 	bl	8000f50 <_fstat>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	d102      	bne.n	8007630 <_fstat_r+0x1c>
 800762a:	682b      	ldr	r3, [r5, #0]
 800762c:	b103      	cbz	r3, 8007630 <_fstat_r+0x1c>
 800762e:	6023      	str	r3, [r4, #0]
 8007630:	bd38      	pop	{r3, r4, r5, pc}
 8007632:	bf00      	nop
 8007634:	20000364 	.word	0x20000364

08007638 <_isatty_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d06      	ldr	r5, [pc, #24]	; (8007654 <_isatty_r+0x1c>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	602b      	str	r3, [r5, #0]
 8007644:	f7f9 fc94 	bl	8000f70 <_isatty>
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	d102      	bne.n	8007652 <_isatty_r+0x1a>
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	b103      	cbz	r3, 8007652 <_isatty_r+0x1a>
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	bd38      	pop	{r3, r4, r5, pc}
 8007654:	20000364 	.word	0x20000364

08007658 <_init>:
 8007658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765a:	bf00      	nop
 800765c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800765e:	bc08      	pop	{r3}
 8007660:	469e      	mov	lr, r3
 8007662:	4770      	bx	lr

08007664 <_fini>:
 8007664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007666:	bf00      	nop
 8007668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766a:	bc08      	pop	{r3}
 800766c:	469e      	mov	lr, r3
 800766e:	4770      	bx	lr
