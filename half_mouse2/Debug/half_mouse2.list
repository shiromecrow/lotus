
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000232ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08023490  08023490  00033490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023bb8  08023bb8  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08023bb8  08023bb8  00033bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023bc0  08023bc0  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023bc0  08023bc0  00033bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08023bc4  08023bc4  00033bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08023bc8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f720  200001fc  08023dc4  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f91c  08023dc4  0004f91c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002791b  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006017  00000000  00000000  00067b47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0006db60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  0006fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002854b  00000000  00000000  000717d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031c43  00000000  00000000  00099d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2f9  00000000  00000000  000cb966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6c5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097ac  00000000  00000000  001b6cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08023474 	.word	0x08023474

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08023474 	.word	0x08023474

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f59999a 	.word	0x3f59999a

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f59999a 	.word	0x3f59999a
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bde      	ldr	r3, [pc, #888]	; (8001400 <interupt_calEncoder+0x380>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bdd      	ldr	r3, [pc, #884]	; (8001404 <interupt_calEncoder+0x384>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8001408 <interupt_calEncoder+0x388>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 800140c <interupt_calEncoder+0x38c>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001410 <interupt_calEncoder+0x390>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800140c <interupt_calEncoder+0x38c>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bcd      	ldr	r3, [pc, #820]	; (8001414 <interupt_calEncoder+0x394>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bcc      	ldr	r3, [pc, #816]	; (8001418 <interupt_calEncoder+0x398>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001408 <interupt_calEncoder+0x388>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800140c <interupt_calEncoder+0x38c>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001410 <interupt_calEncoder+0x390>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800140c <interupt_calEncoder+0x38c>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a39b      	add	r3, pc, #620	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4bb1      	ldr	r3, [pc, #708]	; (800141c <interupt_calEncoder+0x39c>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a394      	add	r3, pc, #592	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a392      	add	r3, pc, #584	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a38f      	add	r3, pc, #572	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a38d      	add	r3, pc, #564	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <interupt_calEncoder+0x3a0>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a386      	add	r3, pc, #536	; (adr r3, 80013d8 <interupt_calEncoder+0x358>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b93      	ldr	r3, [pc, #588]	; (8001424 <interupt_calEncoder+0x3a4>)
 80011d6:	f7ff fa37 	bl	8000648 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b90      	ldr	r3, [pc, #576]	; (8001428 <interupt_calEncoder+0x3a8>)
 80011e8:	f7ff fb58 	bl	800089c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	a37a      	add	r3, pc, #488	; (adr r3, 80013e0 <interupt_calEncoder+0x360>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a378      	add	r3, pc, #480	; (adr r3, 80013e8 <interupt_calEncoder+0x368>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb46 	bl	800089c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	f7ff fb3c 	bl	800089c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <interupt_calEncoder+0x3ac>)
 8001232:	f7ff fa09 	bl	8000648 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a36c      	add	r3, pc, #432	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb2a 	bl	800089c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001258:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f99c 	bl	8000598 <__aeabi_f2d>
 8001260:	a353      	add	r3, pc, #332	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <interupt_calEncoder+0x39c>)
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	a34c      	add	r3, pc, #304	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9d4 	bl	8000648 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a347      	add	r3, pc, #284	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff faec 	bl	800089c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <interupt_calEncoder+0x3a0>)
 80012d2:	f7ff f9b9 	bl	8000648 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a346      	add	r3, pc, #280	; (adr r3, 80013f8 <interupt_calEncoder+0x378>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fada 	bl	800089c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <interupt_calEncoder+0x3a4>)
 80012f6:	f7ff f9a7 	bl	8000648 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <interupt_calEncoder+0x3a8>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff fabe 	bl	800089c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <interupt_calEncoder+0x3ac>)
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a32d      	add	r3, pc, #180	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff faac 	bl	800089c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc54 	bl	8000bf8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <interupt_calEncoder+0x3b4>)
 8001354:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f91c 	bl	8000598 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f915 	bl	8000598 <__aeabi_f2d>
 800136e:	a320      	add	r3, pc, #128	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f968 	bl	8000648 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ffac 	bl	80002dc <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc34 	bl	8000bf8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001394:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <interupt_calEncoder+0x3bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8fc 	bl	8000598 <__aeabi_f2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <interupt_calEncoder+0x3b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	e047      	b.n	8001440 <interupt_calEncoder+0x3c0>
 80013b0:	54411744 	.word	0x54411744
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	4e70a65b 	.word	0x4e70a65b
 80013bc:	3f882f36 	.word	0x3f882f36
 80013c0:	a858793e 	.word	0xa858793e
 80013c4:	3ff1cd35 	.word	0x3ff1cd35
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4078c000 	.word	0x4078c000
 80013d0:	147ae148 	.word	0x147ae148
 80013d4:	4078fbae 	.word	0x4078fbae
 80013d8:	0a3d70a4 	.word	0x0a3d70a4
 80013dc:	4078efd7 	.word	0x4078efd7
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4125eb2e 	.word	0x4125eb2e
 80013e8:	33333333 	.word	0x33333333
 80013ec:	4125f7be 	.word	0x4125f7be
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	5c28f5c3 	.word	0x5c28f5c3
 80013fc:	40792a8f 	.word	0x40792a8f
 8001400:	200006d8 	.word	0x200006d8
 8001404:	20000218 	.word	0x20000218
 8001408:	43340000 	.word	0x43340000
 800140c:	43b40000 	.word	0x43b40000
 8001410:	c3340000 	.word	0xc3340000
 8001414:	200006dc 	.word	0x200006dc
 8001418:	2000021c 	.word	0x2000021c
 800141c:	40668000 	.word	0x40668000
 8001420:	40790000 	.word	0x40790000
 8001424:	40870800 	.word	0x40870800
 8001428:	40868000 	.word	0x40868000
 800142c:	408f4000 	.word	0x408f4000
 8001430:	20000228 	.word	0x20000228
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20000220 	.word	0x20000220
 800143c:	20000224 	.word	0x20000224
 8001440:	a314      	add	r3, pc, #80	; (adr r3, 8001494 <interupt_calEncoder+0x414>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ff 	bl	8000648 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7fe ff43 	bl	80002dc <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbcb 	bl	8000bf8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <interupt_calEncoder+0x400>)
 8001466:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <interupt_calEncoder+0x404>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <interupt_calEncoder+0x408>)
 800146e:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <interupt_calEncoder+0x40c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <interupt_calEncoder+0x410>)
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	20000224 	.word	0x20000224
 8001484:	200006dc 	.word	0x200006dc
 8001488:	2000021c 	.word	0x2000021c
 800148c:	200006d8 	.word	0x200006d8
 8001490:	20000218 	.word	0x20000218
 8001494:	d2f1a9fc 	.word	0xd2f1a9fc
 8001498:	3f50624d 	.word	0x3f50624d
 800149c:	00000000 	.word	0x00000000

080014a0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80014a6:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <interupt_calFusion+0x298>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4ba3      	ldr	r3, [pc, #652]	; (800173c <interupt_calFusion+0x29c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <interupt_calFusion+0x298>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014c4:	4b9e      	ldr	r3, [pc, #632]	; (8001740 <interupt_calFusion+0x2a0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b9a      	ldr	r3, [pc, #616]	; (800173c <interupt_calFusion+0x29c>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 80014d8:	4b97      	ldr	r3, [pc, #604]	; (8001738 <interupt_calFusion+0x298>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b99      	ldr	r3, [pc, #612]	; (8001744 <interupt_calFusion+0x2a4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b93      	ldr	r3, [pc, #588]	; (8001738 <interupt_calFusion+0x298>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <interupt_calFusion+0x2a8>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <interupt_calFusion+0x2a4>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <interupt_calFusion+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f842 	bl	8000598 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <interupt_calFusion+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f83b 	bl	8000598 <__aeabi_f2d>
 8001522:	a383      	add	r3, pc, #524	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f88e 	bl	8000648 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fed2 	bl	80002dc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb5a 	bl	8000bf8 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <interupt_calFusion+0x2ac>)
 8001548:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <interupt_calFusion+0x2b0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f822 	bl	8000598 <__aeabi_f2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <interupt_calFusion+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f81b 	bl	8000598 <__aeabi_f2d>
 8001562:	a373      	add	r3, pc, #460	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f86e 	bl	8000648 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe feb2 	bl	80002dc <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <interupt_calFusion+0x2b0>)
 8001588:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <interupt_calFusion+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f802 	bl	8000598 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <interupt_calFusion+0x2b4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fffb 	bl	8000598 <__aeabi_f2d>
 80015a2:	4680      	mov	r8, r0
 80015a4:	4689      	mov	r9, r1
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <interupt_calFusion+0x2b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fff4 	bl	8000598 <__aeabi_f2d>
 80015b0:	a35f      	add	r3, pc, #380	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f847 	bl	8000648 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7fe fe8b 	bl	80002dc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <interupt_calFusion+0x298>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <interupt_calFusion+0x2a0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffcf 	bl	8000598 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fe6b 	bl	80002dc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff faf3 	bl	8000bf8 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <interupt_calFusion+0x2b4>)
 8001616:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <interupt_calFusion+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffbb 	bl	8000598 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <interupt_calFusion+0x2b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <interupt_calFusion+0x2b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a33c      	add	r3, pc, #240	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe fe44 	bl	80002dc <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fff4 	bl	8000648 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <interupt_calFusion+0x298>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <interupt_calFusion+0x2a8>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff88 	bl	8000598 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe24 	bl	80002dc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <interupt_calFusion+0x2bc>)
 80016a4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <interupt_calFusion+0x2c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <interupt_calFusion+0x2b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffc0 	bl	8000648 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fe04 	bl	80002dc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <interupt_calFusion+0x2c0>)
 80016e4:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <interupt_calFusion+0x2c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff54 	bl	8000598 <__aeabi_f2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <interupt_calFusion+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	a30c      	add	r3, pc, #48	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ffa0 	bl	8000648 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fde4 	bl	80002dc <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <interupt_calFusion+0x2c4>)
 8001724:	6013      	str	r3, [r2, #0]

}
 8001726:	bf00      	nop
 8001728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	20000260 	.word	0x20000260
 800173c:	20000238 	.word	0x20000238
 8001740:	20000228 	.word	0x20000228
 8001744:	2000023c 	.word	0x2000023c
 8001748:	2000022c 	.word	0x2000022c
 800174c:	20000230 	.word	0x20000230
 8001750:	20000234 	.word	0x20000234
 8001754:	20000258 	.word	0x20000258
 8001758:	20000280 	.word	0x20000280
 800175c:	2000025c 	.word	0x2000025c
 8001760:	20000250 	.word	0x20000250
 8001764:	20000254 	.word	0x20000254

08001768 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	int s = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <reset_gyro+0xfc>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <reset_gyro+0x100>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e026      	b.n	80017d6 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <reset_gyro+0x104>)
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <reset_gyro+0x100>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <reset_gyro+0x100>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <reset_gyro+0x104>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <reset_gyro+0x108>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <reset_gyro+0x108>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <reset_gyro+0x104>)
 80017b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <reset_gyro+0x10c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <reset_gyro+0x10c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f006 fbb4 	bl	8007f38 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017dc:	ddd4      	ble.n	8001788 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <reset_gyro+0x100>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001878 <reset_gyro+0x110>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <reset_gyro+0x100>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <reset_gyro+0x108>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001878 <reset_gyro+0x110>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <reset_gyro+0x108>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <reset_gyro+0x10c>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001878 <reset_gyro+0x110>
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <reset_gyro+0x10c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <reset_gyro+0xfc>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <reset_gyro+0x114>)
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <reset_gyro+0x118>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <reset_gyro+0x11c>)
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e009      	b.n	8001854 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <reset_gyro+0x120>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf2      	ble.n	8001840 <reset_gyro+0xd8>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000264 	.word	0x20000264
 8001868:	20000288 	.word	0x20000288
 800186c:	200006e4 	.word	0x200006e4
 8001870:	20000284 	.word	0x20000284
 8001874:	2000028c 	.word	0x2000028c
 8001878:	447a0000 	.word	0x447a0000
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000278 	.word	0x20000278
 8001884:	2000027c 	.word	0x2000027c
 8001888:	20000290 	.word	0x20000290
 800188c:	00000000 	.word	0x00000000

08001890 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	int j = 9;
 8001896:	2309      	movs	r3, #9
 8001898:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 800189a:	2309      	movs	r3, #9
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e00d      	b.n	80018bc <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4aa6      	ldr	r2, [pc, #664]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	49a4      	ldr	r1, [pc, #656]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dcee      	bgt.n	80018a0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 80018c2:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <interrupt_calGyro+0x2b8>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	ee17 0a90 	vmov	r0, s15
 80018d6:	f7fe fe5f 	bl	8000598 <__aeabi_f2d>
 80018da:	a387      	add	r3, pc, #540	; (adr r3, 8001af8 <interrupt_calGyro+0x268>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe feb2 	bl	8000648 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a384      	add	r3, pc, #528	; (adr r3, 8001b00 <interrupt_calGyro+0x270>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fea9 	bl	8000648 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	a382      	add	r3, pc, #520	; (adr r3, 8001b08 <interrupt_calGyro+0x278>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffca 	bl	800089c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f972 	bl	8000bf8 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <interrupt_calGyro+0x2b0>)
 8001918:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <interrupt_calGyro+0x2b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001920:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <interrupt_calGyro+0x2c0>)
 8001928:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <interrupt_calGyro+0x2b4>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <interrupt_calGyro+0x2c8>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001940:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <interrupt_calGyro+0x2cc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	a36d      	add	r3, pc, #436	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcb7 	bl	80002dc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f93f 	bl	8000bf8 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <interrupt_calGyro+0x2cc>)
 800197e:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001980:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <interrupt_calGyro+0x2d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_f2d>
 80019a6:	a35a      	add	r3, pc, #360	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe4c 	bl	8000648 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc90 	bl	80002dc <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <interrupt_calGyro+0x2d0>)
 80019cc:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80019d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <interrupt_calGyro+0x2d4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a34c      	add	r3, pc, #304	; (adr r3, 8001b18 <interrupt_calGyro+0x288>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a349      	add	r3, pc, #292	; (adr r3, 8001b20 <interrupt_calGyro+0x290>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe23 	bl	8000648 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a347      	add	r3, pc, #284	; (adr r3, 8001b28 <interrupt_calGyro+0x298>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff44 	bl	800089c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <interrupt_calGyro+0x2d8>)
 8001a22:	f7fe fe11 	bl	8000648 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <interrupt_calGyro+0x2a0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff32 	bl	800089c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <interrupt_calGyro+0x2dc>)
 8001a46:	f7fe fdff 	bl	8000648 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	a339      	add	r3, pc, #228	; (adr r3, 8001b38 <interrupt_calGyro+0x2a8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdf6 	bl	8000648 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a6c:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	a322      	add	r3, pc, #136	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fddc 	bl	8000648 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fc20 	bl	80002dc <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8a8 	bl	8000bf8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001aac:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	a312      	add	r3, pc, #72	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fdbc 	bl	8000648 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fc00 	bl	80002dc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f888 	bl	8000bf8 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001aec:	6013      	str	r3, [r2, #0]




}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40acd400 	.word	0x40acd400
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40ac2000 	.word	0x40ac2000
 8001b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b14:	3f50624d 	.word	0x3f50624d
 8001b18:	0fcf80dc 	.word	0x0fcf80dc
 8001b1c:	3ff0a423 	.word	0x3ff0a423
 8001b20:	00000000 	.word	0x00000000
 8001b24:	4078c000 	.word	0x4078c000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4077d000 	.word	0x4077d000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	407a7000 	.word	0x407a7000
 8001b38:	3a92a305 	.word	0x3a92a305
 8001b3c:	40239d01 	.word	0x40239d01
 8001b40:	20000290 	.word	0x20000290
 8001b44:	200006e4 	.word	0x200006e4
 8001b48:	20000288 	.word	0x20000288
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	20000270 	.word	0x20000270
 8001b54:	20000284 	.word	0x20000284
 8001b58:	20000274 	.word	0x20000274
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	2000026c 	.word	0x2000026c
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40790000 	.word	0x40790000
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000278 	.word	0x20000278
 8001b78:	2000027c 	.word	0x2000027c
 8001b7c:	00000000 	.word	0x00000000

08001b80 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e00f      	b.n	8001bac <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001b8c:	f005 ff78 	bl	8007a80 <pl_getbatt>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <battcheak+0xe8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f006 f985 	bl	8007eb0 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	ddec      	ble.n	8001b8c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <battcheak+0xec>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e010      	b.n	8001be2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <battcheak+0xe8>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <battcheak+0xec>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <battcheak+0xec>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b13      	cmp	r3, #19
 8001be6:	ddeb      	ble.n	8001bc0 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <battcheak+0xec>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <battcheak+0xec>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <battcheak+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcc9 	bl	8000598 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <battcheak+0xf0>)
 8001c0c:	f01f f820 	bl	8020c50 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <battcheak+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	a311      	add	r3, pc, #68	; (adr r3, 8001c60 <battcheak+0xe0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe ff8e 	bl	8000b40 <__aeabi_dcmple>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001c2a:	e014      	b.n	8001c56 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f005 f9af 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f005 f9be 	bl	8006fb4 <pl_l_blue_LED>
		wait_ms(500);
 8001c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3c:	f006 f938 	bl	8007eb0 <wait_ms>
		pl_r_blue_LED(OFF);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f005 f9a5 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f9b4 	bl	8006fb4 <pl_l_blue_LED>
		wait_ms(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c50:	f006 f92e 	bl	8007eb0 <wait_ms>
		pl_r_blue_LED(ON);
 8001c54:	e7ea      	b.n	8001c2c <battcheak+0xac>
}
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	400d9999 	.word	0x400d9999
 8001c68:	20000484 	.word	0x20000484
 8001c6c:	200004d4 	.word	0x200004d4
 8001c70:	08023490 	.word	0x08023490

08001c74 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001c7a:	f006 f89f 	bl	8007dbc <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001c7e:	2313      	movs	r3, #19
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e037      	b.n	8001cf4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <interupt_calSensor+0x170>)
 8001c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c8e:	4955      	ldr	r1, [pc, #340]	; (8001de4 <interupt_calSensor+0x170>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <interupt_calSensor+0x170>)
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca2:	4950      	ldr	r1, [pc, #320]	; (8001de4 <interupt_calSensor+0x170>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <interupt_calSensor+0x170>)
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb8:	494a      	ldr	r1, [pc, #296]	; (8001de4 <interupt_calSensor+0x170>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3328      	adds	r3, #40	; 0x28
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <interupt_calSensor+0x170>)
 8001cc8:	333c      	adds	r3, #60	; 0x3c
 8001cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cce:	4945      	ldr	r1, [pc, #276]	; (8001de4 <interupt_calSensor+0x170>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <interupt_calSensor+0x170>)
 8001cde:	3350      	adds	r3, #80	; 0x50
 8001ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce4:	493f      	ldr	r1, [pc, #252]	; (8001de4 <interupt_calSensor+0x170>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dcc4      	bgt.n	8001c84 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <interupt_calSensor+0x174>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <interupt_calSensor+0x178>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <interupt_calSensor+0x170>)
 8001d08:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <interupt_calSensor+0x174>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <interupt_calSensor+0x178>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <interupt_calSensor+0x170>)
 8001d18:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <interupt_calSensor+0x174>)
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <interupt_calSensor+0x178>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <interupt_calSensor+0x170>)
 8001d28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <interupt_calSensor+0x174>)
 8001d2e:	88db      	ldrh	r3, [r3, #6]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <interupt_calSensor+0x178>)
 8001d34:	88db      	ldrh	r3, [r3, #6]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <interupt_calSensor+0x170>)
 8001d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <interupt_calSensor+0x174>)
 8001d40:	891b      	ldrh	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <interupt_calSensor+0x178>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <interupt_calSensor+0x170>)
 8001d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e03d      	b.n	8001dd2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <interupt_calSensor+0x170>)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <interupt_calSensor+0x170>)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4403      	add	r3, r0
 8001d74:	332c      	adds	r3, #44	; 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	491d      	ldr	r1, [pc, #116]	; (8001df0 <interupt_calSensor+0x17c>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <interupt_calSensor+0x170>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <interupt_calSensor+0x170>)
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4403      	add	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4419      	add	r1, r3
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <interupt_calSensor+0x170>)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4403      	add	r3, r0
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <interupt_calSensor+0x180>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <interupt_calSensor+0x184>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	ddbe      	ble.n	8001d56 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002b8 	.word	0x200002b8
 8001de8:	2000070c 	.word	0x2000070c
 8001dec:	20000718 	.word	0x20000718
 8001df0:	20000448 	.word	0x20000448
 8001df4:	55555556 	.word	0x55555556
 8001df8:	20000470 	.word	0x20000470

08001dfc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <Control_mode_Init+0x28>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <Control_mode_Init+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <Control_mode_Init+0x30>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <Control_mode_Init+0x34>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000528 	.word	0x20000528
 8001e28:	20000805 	.word	0x20000805
 8001e2c:	20000800 	.word	0x20000800
 8001e30:	20000529 	.word	0x20000529

08001e34 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	db14      	blt.n	8001e7e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f005 fd49 	bl	80078ec <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <get_duty+0x11c>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f54 <get_duty+0x120>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e015      	b.n	8001eaa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f005 fd34 	bl	80078ec <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e88:	eef1 6a67 	vneg.f32	s13, s15
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <get_duty+0x11c>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f54 <get_duty+0x120>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	db14      	blt.n	8001ee2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f005 fd3f 	bl	800793c <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <get_duty+0x11c>)
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f54 <get_duty+0x120>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e015      	b.n	8001f0e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f005 fd2a 	bl	800793c <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eec:	eef1 6a67 	vneg.f32	s13, s15
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <get_duty+0x11c>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f54 <get_duty+0x120>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f26:	4293      	cmp	r3, r2
 8001f28:	dd03      	ble.n	8001f32 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f30:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dd03      	ble.n	8001f46 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f44:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004d4 	.word	0x200004d4
 8001f54:	44d1e000 	.word	0x44d1e000

08001f58 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f5c:	b08c      	sub	sp, #48	; 0x30
 8001f5e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001f86:	4bd2      	ldr	r3, [pc, #840]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f8e:	4bd1      	ldr	r3, [pc, #836]	; (80022d4 <interupt_DriveMotor+0x37c>)
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f94:	4bd0      	ldr	r3, [pc, #832]	; (80022d8 <interupt_DriveMotor+0x380>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f9a:	4bd0      	ldr	r3, [pc, #832]	; (80022dc <interupt_DriveMotor+0x384>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001fa0:	4bcb      	ldr	r3, [pc, #812]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 828f 	bne.w	80024c8 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001faa:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <interupt_DriveMotor+0x384>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001fb0:	4bcb      	ldr	r3, [pc, #812]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4aca      	ldr	r2, [pc, #808]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001fba:	4bca      	ldr	r3, [pc, #808]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faea 	bl	8000598 <__aeabi_f2d>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4bc6      	ldr	r3, [pc, #792]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fae3 	bl	8000598 <__aeabi_f2d>
 8001fd2:	a3bb      	add	r3, pc, #748	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb36 	bl	8000648 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4bbf      	ldr	r3, [pc, #764]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fad5 	bl	8000598 <__aeabi_f2d>
 8001fee:	a3b4      	add	r3, pc, #720	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb28 	bl	8000648 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	a3af      	add	r3, pc, #700	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb1f 	bl	8000648 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fc3f 	bl	800089c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4640      	mov	r0, r8
 8002024:	4649      	mov	r1, r9
 8002026:	f7fe f959 	bl	80002dc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f953 	bl	80002dc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fddb 	bl	8000bf8 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4aa7      	ldr	r2, [pc, #668]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002046:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002048:	4ba6      	ldr	r3, [pc, #664]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa9c 	bl	8000598 <__aeabi_f2d>
 8002060:	a397      	add	r3, pc, #604	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe faef 	bl	8000648 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f933 	bl	80002dc <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fdbb 	bl	8000bf8 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a97      	ldr	r2, [pc, #604]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002086:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002088:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <interupt_DriveMotor+0x390>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa83 	bl	8000598 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa7c 	bl	8000598 <__aeabi_f2d>
 80020a0:	a387      	add	r3, pc, #540	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4690      	mov	r8, r2
 80020b0:	4699      	mov	r9, r3
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <interupt_DriveMotor+0x390>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	a380      	add	r3, pc, #512	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fac1 	bl	8000648 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	a37c      	add	r3, pc, #496	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab8 	bl	8000648 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e8:	f7fe fbd8 	bl	800089c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4640      	mov	r0, r8
 80020f2:	4649      	mov	r1, r9
 80020f4:	f7fe f8f2 	bl	80002dc <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8ec 	bl	80002dc <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd74 	bl	8000bf8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002114:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa3c 	bl	8000598 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa35 	bl	8000598 <__aeabi_f2d>
 800212e:	a364      	add	r3, pc, #400	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa88 	bl	8000648 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8cc 	bl	80002dc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd54 	bl	8000bf8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002154:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <interupt_DriveMotor+0x394>)
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800215a:	9201      	str	r2, [sp, #4]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	9200      	str	r2, [sp, #0]
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	f006 f8a3 	bl	80082ac <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <interupt_DriveMotor+0x390>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	eef0 0a47 	vmov.f32	s1, s14
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa27 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <interupt_DriveMotor+0x398>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <interupt_DriveMotor+0x39c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800219e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <interupt_DriveMotor+0x38c>)
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <interupt_DriveMotor+0x3a0>)
 80021aa:	edd3 6a00 	vldr	s13, [r3]
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <interupt_DriveMotor+0x390>)
 80021b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	eef0 1a46 	vmov.f32	s3, s12
 80021be:	eeb0 1a66 	vmov.f32	s2, s13
 80021c2:	4611      	mov	r1, r2
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff57 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80021d2:	f002 fc19 	bl	8004a08 <calWallConrol>
 80021d6:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80021da:	ed97 7a04 	vldr	s14, [r7, #16]
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	edd7 7a03 	vldr	s15, [r7, #12]
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 7a02 	vldr	s15, [r7, #8]
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800222a:	ed97 7a04 	vldr	s14, [r7, #16]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_f2d>
 800224c:	a31e      	add	r3, pc, #120	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9f9 	bl	8000648 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fc83 	bl	8000b68 <__aeabi_dcmpgt>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 808d 	beq.w	8002384 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226c:	f7fe f994 	bl	8000598 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f98d 	bl	8000598 <__aeabi_f2d>
 800227e:	a312      	add	r3, pc, #72	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe f9e0 	bl	8000648 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	ed97 7a04 	vldr	s14, [r7, #16]
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f97a 	bl	8000598 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4640      	mov	r0, r8
 80022aa:	4649      	mov	r1, r9
 80022ac:	f7fe f814 	bl	80002d8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	e022      	b.n	8002300 <interupt_DriveMotor+0x3a8>
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	d916872b 	.word	0xd916872b
 80022cc:	3feff7ce 	.word	0x3feff7ce
 80022d0:	20000528 	.word	0x20000528
 80022d4:	20000804 	.word	0x20000804
 80022d8:	20000590 	.word	0x20000590
 80022dc:	20000592 	.word	0x20000592
 80022e0:	20000524 	.word	0x20000524
 80022e4:	200004d8 	.word	0x200004d8
 80022e8:	200004e4 	.word	0x200004e4
 80022ec:	200004f0 	.word	0x200004f0
 80022f0:	20000238 	.word	0x20000238
 80022f4:	2000023c 	.word	0x2000023c
 80022f8:	20000268 	.word	0x20000268
 80022fc:	200004d4 	.word	0x200004d4
 8002300:	f7fd ffec 	bl	80002dc <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc74 	bl	8000bf8 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	4604      	mov	r4, r0
 800231c:	460d      	mov	r5, r1
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <interupt_DriveMotor+0x428>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	a313      	add	r3, pc, #76	; (adr r3, 8002378 <interupt_DriveMotor+0x420>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	ed97 7a04 	vldr	s14, [r7, #16]
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ffbf 	bl	80002d8 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fd ffbb 	bl	80002dc <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc43 	bl	8000bf8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e095      	b.n	80024a4 <interupt_DriveMotor+0x54c>
 8002378:	d916872b 	.word	0xd916872b
 800237c:	3feff7ce 	.word	0x3feff7ce
 8002380:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	edd7 7a02 	vldr	s15, [r7, #8]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	ee17 0a90 	vmov	r0, s15
 8002394:	f7fe f900 	bl	8000598 <__aeabi_f2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	4bce      	ldr	r3, [pc, #824]	; (80026d8 <interupt_DriveMotor+0x780>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_f2d>
 80023b0:	a3c5      	add	r3, pc, #788	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f947 	bl	8000648 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06b      	beq.n	80024a4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_f2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4bc0      	ldr	r3, [pc, #768]	; (80026d8 <interupt_DriveMotor+0x780>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	a3b7      	add	r3, pc, #732	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f92a 	bl	8000648 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4690      	mov	r8, r2
 80023fa:	4699      	mov	r9, r3
 80023fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002400:	edd7 7a02 	vldr	s15, [r7, #8]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	ee17 0a90 	vmov	r0, s15
 800240c:	f7fe f8c4 	bl	8000598 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4640      	mov	r0, r8
 8002416:	4649      	mov	r1, r9
 8002418:	f7fd ff5e 	bl	80002d8 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff5a 	bl	80002dc <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbe2 	bl	8000bf8 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4ba5      	ldr	r3, [pc, #660]	; (80026d8 <interupt_DriveMotor+0x780>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eef1 7a67 	vneg.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8a1 	bl	8000598 <__aeabi_f2d>
 8002456:	a39c      	add	r3, pc, #624	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8f4 	bl	8000648 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4690      	mov	r8, r2
 8002466:	4699      	mov	r9, r3
 8002468:	ed97 7a04 	vldr	s14, [r7, #16]
 800246c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f88e 	bl	8000598 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fd ff28 	bl	80002d8 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff24 	bl	80002dc <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbac 	bl	8000bf8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80024a4:	f107 0214 	add.w	r2, r7, #20
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80024b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024b8:	f7ff fcbc 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fa7c 	bl	80079c0 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <interupt_DriveMotor+0x784>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d004      	beq.n	80024da <interupt_DriveMotor+0x582>
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <interupt_DriveMotor+0x784>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	f040 8287 	bne.w	80029e8 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80024da:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <interupt_DriveMotor+0x788>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <interupt_DriveMotor+0x78c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80024e6:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024ee:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <interupt_DriveMotor+0x794>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f84f 	bl	8000598 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <interupt_DriveMotor+0x794>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f848 	bl	8000598 <__aeabi_f2d>
 8002508:	a371      	add	r3, pc, #452	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f89b 	bl	8000648 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4690      	mov	r8, r2
 8002518:	4699      	mov	r9, r3
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <interupt_DriveMotor+0x794>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f83a 	bl	8000598 <__aeabi_f2d>
 8002524:	a36a      	add	r3, pc, #424	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a366      	add	r3, pc, #408	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f884 	bl	8000648 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002550:	f7fe f9a4 	bl	800089c <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fd febe 	bl	80002dc <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb8 	bl	80002dc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb40 	bl	8000bf8 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <interupt_DriveMotor+0x794>)
 800257c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <interupt_DriveMotor+0x794>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe f808 	bl	8000598 <__aeabi_f2d>
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <interupt_DriveMotor+0x794>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f801 	bl	8000598 <__aeabi_f2d>
 8002596:	a34e      	add	r3, pc, #312	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f854 	bl	8000648 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe98 	bl	80002dc <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb20 	bl	8000bf8 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <interupt_DriveMotor+0x794>)
 80025bc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffe8 	bl	8000598 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffe1 	bl	8000598 <__aeabi_f2d>
 80025d6:	a33e      	add	r3, pc, #248	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4690      	mov	r8, r2
 80025e6:	4699      	mov	r9, r3
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffd3 	bl	8000598 <__aeabi_f2d>
 80025f2:	a337      	add	r3, pc, #220	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe f826 	bl	8000648 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	a332      	add	r3, pc, #200	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f81d 	bl	8000648 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261e:	f7fe f93d 	bl	800089c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f7fd fe57 	bl	80002dc <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe51 	bl	80002dc <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fad9 	bl	8000bf8 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ffa1 	bl	8000598 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <interupt_DriveMotor+0x798>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff9a 	bl	8000598 <__aeabi_f2d>
 8002664:	a31a      	add	r3, pc, #104	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffed 	bl	8000648 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe31 	bl	80002dc <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fab9 	bl	8000bf8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <interupt_DriveMotor+0x798>)
 800268a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <interupt_DriveMotor+0x79c>)
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <interupt_DriveMotor+0x798>)
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002698:	f005 fe08 	bl	80082ac <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <interupt_DriveMotor+0x794>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <interupt_DriveMotor+0x798>)
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	eef0 0a47 	vmov.f32	s1, s14
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 ff8c 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <interupt_DriveMotor+0x7a0>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	e019      	b.n	80026fc <interupt_DriveMotor+0x7a4>
 80026c8:	d916872b 	.word	0xd916872b
 80026cc:	3feff7ce 	.word	0x3feff7ce
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	3f50624d 	.word	0x3f50624d
 80026d8:	200004d4 	.word	0x200004d4
 80026dc:	20000528 	.word	0x20000528
 80026e0:	20000590 	.word	0x20000590
 80026e4:	20000592 	.word	0x20000592
 80026e8:	20000524 	.word	0x20000524
 80026ec:	200004d8 	.word	0x200004d8
 80026f0:	200004e4 	.word	0x200004e4
 80026f4:	20000504 	.word	0x20000504
 80026f8:	20000238 	.word	0x20000238
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <interupt_DriveMotor+0x938>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <interupt_DriveMotor+0x93c>)
 8002710:	edd3 7a01 	vldr	s15, [r3, #4]
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <interupt_DriveMotor+0x940>)
 8002716:	edd3 6a00 	vldr	s13, [r3]
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <interupt_DriveMotor+0x944>)
 800271c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	eef0 1a46 	vmov.f32	s3, s12
 800272a:	eeb0 1a66 	vmov.f32	s2, s13
 800272e:	4611      	mov	r1, r2
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	eeb0 0a47 	vmov.f32	s0, s14
 8002738:	4618      	mov	r0, r3
 800273a:	f001 fca1 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800273e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002742:	edd7 7a03 	vldr	s15, [r7, #12]
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 7a02 	vldr	s15, [r7, #8]
 800274e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800275e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002762:	edd7 7a03 	vldr	s15, [r7, #12]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 7a02 	vldr	s15, [r7, #8]
 800276e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002772:	edd7 7a01 	vldr	s15, [r7, #4]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	4604      	mov	r4, r0
 8002794:	460d      	mov	r5, r1
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <interupt_DriveMotor+0x948>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_f2d>
 80027a0:	a339      	add	r3, pc, #228	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f9d9 	bl	8000b68 <__aeabi_dcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d073      	beq.n	80028a4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <interupt_DriveMotor+0x948>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff37 	bl	8000648 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fed1 	bl	8000598 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd fd6b 	bl	80002d8 <__aeabi_dsub>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd67 	bl	80002dc <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9ef 	bl	8000bf8 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	4604      	mov	r4, r0
 8002826:	460d      	mov	r5, r1
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <interupt_DriveMotor+0x948>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd ff06 	bl	8000648 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	ed97 7a04 	vldr	s14, [r7, #16]
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4640      	mov	r0, r8
 800285e:	4649      	mov	r1, r9
 8002860:	f7fd fd3a 	bl	80002d8 <__aeabi_dsub>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fd36 	bl	80002dc <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e0a0      	b.n	80029c4 <interupt_DriveMotor+0xa6c>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	d916872b 	.word	0xd916872b
 800288c:	3feff7ce 	.word	0x3feff7ce
 8002890:	2000023c 	.word	0x2000023c
 8002894:	200004d8 	.word	0x200004d8
 8002898:	20000268 	.word	0x20000268
 800289c:	200004e4 	.word	0x200004e4
 80028a0:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80028a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fe70 	bl	8000598 <__aeabi_f2d>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	4bd6      	ldr	r3, [pc, #856]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	ee17 3a90 	vmov	r3, s15
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe64 	bl	8000598 <__aeabi_f2d>
 80028d0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feb7 	bl	8000648 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fe f923 	bl	8000b2c <__aeabi_dcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06b      	beq.n	80029c4 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ee:	f7fd fe53 	bl	8000598 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4bc8      	ldr	r3, [pc, #800]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eef1 7a67 	vneg.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe9a 	bl	8000648 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fe34 	bl	8000598 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd fcce 	bl	80002d8 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fcca 	bl	80002dc <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f952 	bl	8000bf8 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002958:	6a38      	ldr	r0, [r7, #32]
 800295a:	f7fd fe1d 	bl	8000598 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4bad      	ldr	r3, [pc, #692]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fe11 	bl	8000598 <__aeabi_f2d>
 8002976:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe64 	bl	8000648 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4690      	mov	r8, r2
 8002986:	4699      	mov	r9, r3
 8002988:	ed97 7a04 	vldr	s14, [r7, #16]
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fdfe 	bl	8000598 <__aeabi_f2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc98 	bl	80002d8 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fc94 	bl	80002dc <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f91c 	bl	8000bf8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80029c4:	f107 0214 	add.w	r2, r7, #20
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	edd7 0a08 	vldr	s1, [r7, #32]
 80029d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80029d8:	f7ff fa2c 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ffec 	bl	80079c0 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <interupt_DriveMotor+0xcc4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f040 8137 	bne.w	8002c60 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <interupt_DriveMotor+0xcc8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80029f8:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <interupt_DriveMotor+0xccc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029fe:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a06:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	a37b      	add	r3, pc, #492	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	a374      	add	r3, pc, #464	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe01 	bl	8000648 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	a370      	add	r3, pc, #448	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdf8 	bl	8000648 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a68:	f7fd ff18 	bl	800089c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fc32 	bl	80002dc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a94:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a358      	add	r3, pc, #352	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc0c 	bl	80002dc <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f894 	bl	8000bf8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ad4:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd5c 	bl	8000598 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd55 	bl	8000598 <__aeabi_f2d>
 8002aee:	a348      	add	r3, pc, #288	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fda8 	bl	8000648 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4690      	mov	r8, r2
 8002afe:	4699      	mov	r9, r3
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	a341      	add	r3, pc, #260	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd9a 	bl	8000648 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd91 	bl	8000648 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b36:	f7fd feb1 	bl	800089c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4640      	mov	r0, r8
 8002b40:	4649      	mov	r1, r9
 8002b42:	f7fd fbcb 	bl	80002dc <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b62:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd0e 	bl	8000598 <__aeabi_f2d>
 8002b7c:	a324      	add	r3, pc, #144	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd61 	bl	8000648 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba5 	bl	80002dc <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f82d 	bl	8000bf8 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ba2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002bac:	ed93 7a00 	vldr	s14, [r3]
 8002bb0:	f107 020c 	add.w	r2, r7, #12
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	eef0 0a47 	vmov.f32	s1, s14
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd08 	bl	80045d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c00:	e018      	b.n	8002c34 <interupt_DriveMotor+0xcdc>
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	d916872b 	.word	0xd916872b
 8002c0c:	3feff7ce 	.word	0x3feff7ce
 8002c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c14:	3f50624d 	.word	0x3f50624d
 8002c18:	200004d4 	.word	0x200004d4
 8002c1c:	20000528 	.word	0x20000528
 8002c20:	20000590 	.word	0x20000590
 8002c24:	20000592 	.word	0x20000592
 8002c28:	20000524 	.word	0x20000524
 8002c2c:	200004d8 	.word	0x200004d8
 8002c30:	200004e4 	.word	0x200004e4
 8002c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c38:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c3c:	f107 0214 	add.w	r2, r7, #20
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c50:	f7ff f8f0 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 feb0 	bl	80079c0 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002c60:	4bd3      	ldr	r3, [pc, #844]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d137      	bne.n	8002cd8 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002c68:	4bd2      	ldr	r3, [pc, #840]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c6e:	4bd2      	ldr	r3, [pc, #840]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002cb4:	f107 0214 	add.w	r2, r7, #20
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002cc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002cc8:	f7ff f8b4 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe74 	bl	80079c0 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002cd8:	4bb5      	ldr	r3, [pc, #724]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	f040 8105 	bne.w	8002eec <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002ce2:	4bb4      	ldr	r3, [pc, #720]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ce8:	4bb3      	ldr	r3, [pc, #716]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002cee:	4bb3      	ldr	r3, [pc, #716]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4baf      	ldr	r3, [pc, #700]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	a3a8      	add	r3, pc, #672	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc9c 	bl	8000648 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4690      	mov	r8, r2
 8002d16:	4699      	mov	r9, r3
 8002d18:	4ba8      	ldr	r3, [pc, #672]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc3b 	bl	8000598 <__aeabi_f2d>
 8002d22:	a3a1      	add	r3, pc, #644	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fc8e 	bl	8000648 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	a39c      	add	r3, pc, #624	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d4e:	f7fd fda5 	bl	800089c <__aeabi_ddiv>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fabf 	bl	80002dc <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fab9 	bl	80002dc <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff41 	bl	8000bf8 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_f2d>
 8002d94:	a384      	add	r3, pc, #528	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fc55 	bl	8000648 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fa99 	bl	80002dc <__adddf3>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff21 	bl	8000bf8 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002dba:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbe2 	bl	8000598 <__aeabi_f2d>
 8002dd4:	a374      	add	r3, pc, #464	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc35 	bl	8000648 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa79 	bl	80002dc <__adddf3>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff01 	bl	8000bf8 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dfa:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002dfc:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <interupt_DriveMotor+0x106c>)
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0a:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 1a67 	vmov.f32	s2, s15
 8002e18:	f005 fda2 	bl	8008960 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	eef0 0a47 	vmov.f32	s1, s14
 8002e34:	eeb0 0a67 	vmov.f32	s0, s15
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbcc 	bl	80045d8 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <interupt_DriveMotor+0x1070>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <interupt_DriveMotor+0x1074>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <interupt_DriveMotor+0x1078>)
 8002e60:	edd3 6a00 	vldr	s13, [r3]
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e66:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	eef0 1a46 	vmov.f32	s3, s12
 8002e74:	eeb0 1a66 	vmov.f32	s2, s13
 8002e78:	4611      	mov	r1, r2
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8fc 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ec8:	f107 0214 	add.w	r2, r7, #20
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ed8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002edc:	f7fe ffaa 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fd6a 	bl	80079c0 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d14b      	bne.n	8002f8c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fb58 	bl	80045d8 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f28:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f64:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f68:	f107 0214 	add.w	r2, r7, #20
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f78:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f7c:	f7fe ff5a 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fd1a 	bl	80079c0 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <interupt_DriveMotor+0x107c>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <interupt_DriveMotor+0x1080>)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	6013      	str	r3, [r2, #0]



}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	20000528 	.word	0x20000528
 8002fb4:	20000590 	.word	0x20000590
 8002fb8:	20000592 	.word	0x20000592
 8002fbc:	200004d8 	.word	0x200004d8
 8002fc0:	200004e4 	.word	0x200004e4
 8002fc4:	20000518 	.word	0x20000518
 8002fc8:	20000238 	.word	0x20000238
 8002fcc:	2000023c 	.word	0x2000023c
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	2000052c 	.word	0x2000052c
 8002fd8:	20000530 	.word	0x20000530

08002fdc <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002fe6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002fea:	ed87 1a03 	vstr	s2, [r7, #12]
 8002fee:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ff2:	ed87 2a01 	vstr	s4, [r7, #4]
 8002ff6:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ffc:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003000:	edd7 7a04 	vldr	s15, [r7, #16]
 8003004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800300c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003010:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003014:	ed97 7a01 	vldr	s14, [r7, #4]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003020:	edd7 7a01 	vldr	s15, [r7, #4]
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d505      	bpl.n	800303a <straight_table2+0x5e>
 800302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003032:	eef1 7a67 	vneg.f32	s15, s15
 8003036:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 800303a:	4bb4      	ldr	r3, [pc, #720]	; (800330c <straight_table2+0x330>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8003042:	2300      	movs	r3, #0
 8003044:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003046:	4ab2      	ldr	r2, [pc, #712]	; (8003310 <straight_table2+0x334>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800304c:	4ab0      	ldr	r2, [pc, #704]	; (8003310 <straight_table2+0x334>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003052:	4aaf      	ldr	r2, [pc, #700]	; (8003310 <straight_table2+0x334>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003058:	4aad      	ldr	r2, [pc, #692]	; (8003310 <straight_table2+0x334>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800305e:	4aac      	ldr	r2, [pc, #688]	; (8003310 <straight_table2+0x334>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003064:	edd7 7a02 	vldr	s15, [r7, #8]
 8003068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db03      	blt.n	800307a <straight_table2+0x9e>
 8003072:	4aa8      	ldr	r2, [pc, #672]	; (8003314 <straight_table2+0x338>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e006      	b.n	8003088 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eef1 7a67 	vneg.f32	s15, s15
 8003082:	4ba4      	ldr	r3, [pc, #656]	; (8003314 <straight_table2+0x338>)
 8003084:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003088:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <straight_table2+0x338>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800308e:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <straight_table2+0x338>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <straight_table2+0x33c>)
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <straight_table2+0x33c>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80030a6:	4b9c      	ldr	r3, [pc, #624]	; (8003318 <straight_table2+0x33c>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80030ae:	4b9b      	ldr	r3, [pc, #620]	; (800331c <straight_table2+0x340>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <straight_table2+0x344>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	dd0e      	ble.n	80030e6 <straight_table2+0x10a>
 80030c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80030cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd05      	ble.n	80030e6 <straight_table2+0x10a>
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <straight_table2+0x344>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	4a8c      	ldr	r2, [pc, #560]	; (8003314 <straight_table2+0x338>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80030e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dd14      	ble.n	800311e <straight_table2+0x142>
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	eef1 7a67 	vneg.f32	s15, s15
 80030fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d509      	bpl.n	800311e <straight_table2+0x142>
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <straight_table2+0x344>)
 800310c:	2206      	movs	r2, #6
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	edd7 7a01 	vldr	s15, [r7, #4]
 8003114:	eef1 7a67 	vneg.f32	s15, s15
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <straight_table2+0x338>)
 800311a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800311e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d514      	bpl.n	8003156 <straight_table2+0x17a>
 800312c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003130:	eef1 7a67 	vneg.f32	s15, s15
 8003134:	ed97 7a07 	vldr	s14, [r7, #28]
 8003138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd09      	ble.n	8003156 <straight_table2+0x17a>
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <straight_table2+0x344>)
 8003144:	2205      	movs	r2, #5
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	edd7 7a01 	vldr	s15, [r7, #4]
 800314c:	eef1 7a67 	vneg.f32	s15, s15
 8003150:	4b70      	ldr	r3, [pc, #448]	; (8003314 <straight_table2+0x338>)
 8003152:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d50e      	bpl.n	8003182 <straight_table2+0x1a6>
 8003164:	ed97 7a07 	vldr	s14, [r7, #28]
 8003168:	edd7 7a05 	vldr	s15, [r7, #20]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d505      	bpl.n	8003182 <straight_table2+0x1a6>
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <straight_table2+0x344>)
 8003178:	2206      	movs	r2, #6
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	; (8003314 <straight_table2+0x338>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <straight_table2+0x348>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003188:	783a      	ldrb	r2, [r7, #0]
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <straight_table2+0x34c>)
 800318c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800318e:	f004 fbfb 	bl	8007988 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80d3 	bne.w	8003340 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <straight_table2+0x350>)
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <straight_table2+0x344>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <straight_table2+0x338>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031b0:	bf00      	nop
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <straight_table2+0x354>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80031bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	d409      	bmi.n	80031da <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <straight_table2+0x354>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003334 <straight_table2+0x358>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	dd18      	ble.n	800320c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031da:	4b57      	ldr	r3, [pc, #348]	; (8003338 <straight_table2+0x35c>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d409      	bmi.n	8003202 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80031ee:	4b52      	ldr	r3, [pc, #328]	; (8003338 <straight_table2+0x35c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003334 <straight_table2+0x358>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dd04      	ble.n	800320c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <straight_table2+0x360>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0d2      	beq.n	80031b2 <straight_table2+0x1d6>
		straight.displacement=0;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <straight_table2+0x338>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	db03      	blt.n	800322a <straight_table2+0x24e>
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <straight_table2+0x338>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e006      	b.n	8003238 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800322a:	edd7 7a01 	vldr	s15, [r7, #4]
 800322e:	eef1 7a67 	vneg.f32	s15, s15
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <straight_table2+0x338>)
 8003234:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <straight_table2+0x344>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800323e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	dd0e      	ble.n	800326a <straight_table2+0x28e>
 800324c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003250:	edd7 7a05 	vldr	s15, [r7, #20]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd05      	ble.n	800326a <straight_table2+0x28e>
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <straight_table2+0x344>)
 8003260:	2205      	movs	r2, #5
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <straight_table2+0x338>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800326a:	edd7 7a05 	vldr	s15, [r7, #20]
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd14      	ble.n	80032a2 <straight_table2+0x2c6>
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	eef1 7a67 	vneg.f32	s15, s15
 8003280:	ed97 7a07 	vldr	s14, [r7, #28]
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d509      	bpl.n	80032a2 <straight_table2+0x2c6>
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <straight_table2+0x344>)
 8003290:	2206      	movs	r2, #6
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	edd7 7a01 	vldr	s15, [r7, #4]
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <straight_table2+0x338>)
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80032a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d514      	bpl.n	80032da <straight_table2+0x2fe>
 80032b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dd09      	ble.n	80032da <straight_table2+0x2fe>
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <straight_table2+0x344>)
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d0:	eef1 7a67 	vneg.f32	s15, s15
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <straight_table2+0x338>)
 80032d6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80032da:	edd7 7a05 	vldr	s15, [r7, #20]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	f140 825b 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f140 8251 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <straight_table2+0x344>)
 8003300:	2206      	movs	r2, #6
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <straight_table2+0x338>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6053      	str	r3, [r2, #4]
 800330a:	e249      	b.n	80037a0 <straight_table2+0x7c4>
 800330c:	20000529 	.word	0x20000529
 8003310:	200004f0 	.word	0x200004f0
 8003314:	200004d8 	.word	0x200004d8
 8003318:	200004e4 	.word	0x200004e4
 800331c:	20000805 	.word	0x20000805
 8003320:	20000804 	.word	0x20000804
 8003324:	20000528 	.word	0x20000528
 8003328:	20000590 	.word	0x20000590
 800332c:	20000534 	.word	0x20000534
 8003330:	200005cc 	.word	0x200005cc
 8003334:	425c0000 	.word	0x425c0000
 8003338:	200005d0 	.word	0x200005d0
 800333c:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80c9 	bne.w	80034da <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 8003348:	4bb8      	ldr	r3, [pc, #736]	; (800362c <straight_table2+0x650>)
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800334e:	4bb8      	ldr	r3, [pc, #736]	; (8003630 <straight_table2+0x654>)
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003356:	bf00      	nop
 8003358:	4bb6      	ldr	r3, [pc, #728]	; (8003634 <straight_table2+0x658>)
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	d913      	bls.n	8003390 <straight_table2+0x3b4>
 8003368:	4bb2      	ldr	r3, [pc, #712]	; (8003634 <straight_table2+0x658>)
 800336a:	edd3 7a00 	vldr	s15, [r3]
 800336e:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003372:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	d909      	bls.n	8003390 <straight_table2+0x3b4>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800337c:	4bad      	ldr	r3, [pc, #692]	; (8003634 <straight_table2+0x658>)
 800337e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003382:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003638 <straight_table2+0x65c>
 8003386:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	db20      	blt.n	80033d2 <straight_table2+0x3f6>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003390:	4baa      	ldr	r3, [pc, #680]	; (800363c <straight_table2+0x660>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	d913      	bls.n	80033c8 <straight_table2+0x3ec>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033a0:	4ba6      	ldr	r3, [pc, #664]	; (800363c <straight_table2+0x660>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80033aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b2:	d909      	bls.n	80033c8 <straight_table2+0x3ec>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033b4:	4ba1      	ldr	r3, [pc, #644]	; (800363c <straight_table2+0x660>)
 80033b6:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033ba:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003638 <straight_table2+0x65c>
 80033be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c6:	db04      	blt.n	80033d2 <straight_table2+0x3f6>
			  front_wall_break_45==0){}
 80033c8:	4b9d      	ldr	r3, [pc, #628]	; (8003640 <straight_table2+0x664>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0c2      	beq.n	8003358 <straight_table2+0x37c>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 80033d2:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <straight_table2+0x668>)
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80033da:	4b95      	ldr	r3, [pc, #596]	; (8003630 <straight_table2+0x654>)
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	db03      	blt.n	80033f8 <straight_table2+0x41c>
 80033f0:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <straight_table2+0x654>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	e006      	b.n	8003406 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	eef1 7a67 	vneg.f32	s15, s15
 8003400:	4b8b      	ldr	r3, [pc, #556]	; (8003630 <straight_table2+0x654>)
 8003402:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003406:	4b89      	ldr	r3, [pc, #548]	; (800362c <straight_table2+0x650>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800340c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd0e      	ble.n	8003438 <straight_table2+0x45c>
 800341a:	ed97 7a07 	vldr	s14, [r7, #28]
 800341e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd05      	ble.n	8003438 <straight_table2+0x45c>
 800342c:	4b7f      	ldr	r3, [pc, #508]	; (800362c <straight_table2+0x650>)
 800342e:	2205      	movs	r2, #5
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4a7f      	ldr	r2, [pc, #508]	; (8003630 <straight_table2+0x654>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003438:	edd7 7a05 	vldr	s15, [r7, #20]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd14      	ble.n	8003470 <straight_table2+0x494>
 8003446:	edd7 7a05 	vldr	s15, [r7, #20]
 800344a:	eef1 7a67 	vneg.f32	s15, s15
 800344e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d509      	bpl.n	8003470 <straight_table2+0x494>
 800345c:	4b73      	ldr	r3, [pc, #460]	; (800362c <straight_table2+0x650>)
 800345e:	2206      	movs	r2, #6
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	edd7 7a01 	vldr	s15, [r7, #4]
 8003466:	eef1 7a67 	vneg.f32	s15, s15
 800346a:	4b71      	ldr	r3, [pc, #452]	; (8003630 <straight_table2+0x654>)
 800346c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003470:	edd7 7a05 	vldr	s15, [r7, #20]
 8003474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d514      	bpl.n	80034a8 <straight_table2+0x4cc>
 800347e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	ed97 7a07 	vldr	s14, [r7, #28]
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd09      	ble.n	80034a8 <straight_table2+0x4cc>
 8003494:	4b65      	ldr	r3, [pc, #404]	; (800362c <straight_table2+0x650>)
 8003496:	2205      	movs	r2, #5
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	edd7 7a01 	vldr	s15, [r7, #4]
 800349e:	eef1 7a67 	vneg.f32	s15, s15
 80034a2:	4b63      	ldr	r3, [pc, #396]	; (8003630 <straight_table2+0x654>)
 80034a4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80034a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	f140 8174 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	f140 816a 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034cc:	4b57      	ldr	r3, [pc, #348]	; (800362c <straight_table2+0x650>)
 80034ce:	2206      	movs	r2, #6
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	4a57      	ldr	r2, [pc, #348]	; (8003630 <straight_table2+0x654>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e162      	b.n	80037a0 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f040 80b9 	bne.w	8003654 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <straight_table2+0x650>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80034e8:	4b51      	ldr	r3, [pc, #324]	; (8003630 <straight_table2+0x654>)
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80034f0:	bf00      	nop
 80034f2:	4b55      	ldr	r3, [pc, #340]	; (8003648 <straight_table2+0x66c>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80034fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003504:	d409      	bmi.n	800351a <straight_table2+0x53e>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003506:	4b50      	ldr	r3, [pc, #320]	; (8003648 <straight_table2+0x66c>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 800350c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800364c <straight_table2+0x670>
 8003510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003518:	dd04      	ble.n	8003524 <straight_table2+0x548>
				  front_wall_break_45slant==0){}
 800351a:	4b4d      	ldr	r3, [pc, #308]	; (8003650 <straight_table2+0x674>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0e6      	beq.n	80034f2 <straight_table2+0x516>
		enc.sigma_error=0;
 8003524:	4b47      	ldr	r3, [pc, #284]	; (8003644 <straight_table2+0x668>)
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 800352c:	4b40      	ldr	r3, [pc, #256]	; (8003630 <straight_table2+0x654>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003534:	edd7 7a02 	vldr	s15, [r7, #8]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	db03      	blt.n	800354a <straight_table2+0x56e>
 8003542:	4a3b      	ldr	r2, [pc, #236]	; (8003630 <straight_table2+0x654>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e006      	b.n	8003558 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 800354a:	edd7 7a01 	vldr	s15, [r7, #4]
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	4b37      	ldr	r3, [pc, #220]	; (8003630 <straight_table2+0x654>)
 8003554:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003558:	4b34      	ldr	r3, [pc, #208]	; (800362c <straight_table2+0x650>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800355e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	dd0e      	ble.n	800358a <straight_table2+0x5ae>
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd05      	ble.n	800358a <straight_table2+0x5ae>
 800357e:	4b2b      	ldr	r3, [pc, #172]	; (800362c <straight_table2+0x650>)
 8003580:	2205      	movs	r2, #5
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	4a2a      	ldr	r2, [pc, #168]	; (8003630 <straight_table2+0x654>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800358a:	edd7 7a05 	vldr	s15, [r7, #20]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd14      	ble.n	80035c2 <straight_table2+0x5e6>
 8003598:	edd7 7a05 	vldr	s15, [r7, #20]
 800359c:	eef1 7a67 	vneg.f32	s15, s15
 80035a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	d509      	bpl.n	80035c2 <straight_table2+0x5e6>
 80035ae:	4b1f      	ldr	r3, [pc, #124]	; (800362c <straight_table2+0x650>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b8:	eef1 7a67 	vneg.f32	s15, s15
 80035bc:	4b1c      	ldr	r3, [pc, #112]	; (8003630 <straight_table2+0x654>)
 80035be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80035c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	d514      	bpl.n	80035fa <straight_table2+0x61e>
 80035d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d4:	eef1 7a67 	vneg.f32	s15, s15
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	dd09      	ble.n	80035fa <straight_table2+0x61e>
 80035e6:	4b11      	ldr	r3, [pc, #68]	; (800362c <straight_table2+0x650>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f0:	eef1 7a67 	vneg.f32	s15, s15
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <straight_table2+0x654>)
 80035f6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	f140 80cb 	bpl.w	80037a0 <straight_table2+0x7c4>
 800360a:	ed97 7a07 	vldr	s14, [r7, #28]
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	f140 80c1 	bpl.w	80037a0 <straight_table2+0x7c4>
 800361e:	4b03      	ldr	r3, [pc, #12]	; (800362c <straight_table2+0x650>)
 8003620:	2206      	movs	r2, #6
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	4a02      	ldr	r2, [pc, #8]	; (8003630 <straight_table2+0x654>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	e0b9      	b.n	80037a0 <straight_table2+0x7c4>
 800362c:	20000804 	.word	0x20000804
 8003630:	200004d8 	.word	0x200004d8
 8003634:	200005d4 	.word	0x200005d4
 8003638:	42000000 	.word	0x42000000
 800363c:	200005d8 	.word	0x200005d8
 8003640:	200005f3 	.word	0x200005f3
 8003644:	20000534 	.word	0x20000534
 8003648:	200005e4 	.word	0x200005e4
 800364c:	420c0000 	.word	0x420c0000
 8003650:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b04      	cmp	r3, #4
 8003658:	f040 80a2 	bne.w	80037a0 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 800365c:	4ba6      	ldr	r3, [pc, #664]	; (80038f8 <straight_table2+0x91c>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003662:	4ba6      	ldr	r3, [pc, #664]	; (80038fc <straight_table2+0x920>)
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800366a:	bf00      	nop
 800366c:	4ba4      	ldr	r3, [pc, #656]	; (8003900 <straight_table2+0x924>)
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d409      	bmi.n	8003694 <straight_table2+0x6b8>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003680:	4b9f      	ldr	r3, [pc, #636]	; (8003900 <straight_table2+0x924>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003686:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003904 <straight_table2+0x928>
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	dd04      	ble.n	800369e <straight_table2+0x6c2>
				  front_wall_break_45slant==0){}
 8003694:	4b9c      	ldr	r3, [pc, #624]	; (8003908 <straight_table2+0x92c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0e6      	beq.n	800366c <straight_table2+0x690>
		enc.sigma_error=0;
 800369e:	4b9b      	ldr	r3, [pc, #620]	; (800390c <straight_table2+0x930>)
 80036a0:	f04f 0200 	mov.w	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80036a6:	4b95      	ldr	r3, [pc, #596]	; (80038fc <straight_table2+0x920>)
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80036ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	db03      	blt.n	80036c4 <straight_table2+0x6e8>
 80036bc:	4a8f      	ldr	r2, [pc, #572]	; (80038fc <straight_table2+0x920>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6053      	str	r3, [r2, #4]
 80036c2:	e006      	b.n	80036d2 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	4b8b      	ldr	r3, [pc, #556]	; (80038fc <straight_table2+0x920>)
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80036d2:	4b89      	ldr	r3, [pc, #548]	; (80038f8 <straight_table2+0x91c>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	dd0e      	ble.n	8003704 <straight_table2+0x728>
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	dd05      	ble.n	8003704 <straight_table2+0x728>
 80036f8:	4b7f      	ldr	r3, [pc, #508]	; (80038f8 <straight_table2+0x91c>)
 80036fa:	2205      	movs	r2, #5
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	4a7f      	ldr	r2, [pc, #508]	; (80038fc <straight_table2+0x920>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003704:	edd7 7a05 	vldr	s15, [r7, #20]
 8003708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	dd14      	ble.n	800373c <straight_table2+0x760>
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	eef1 7a67 	vneg.f32	s15, s15
 800371a:	ed97 7a07 	vldr	s14, [r7, #28]
 800371e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d509      	bpl.n	800373c <straight_table2+0x760>
 8003728:	4b73      	ldr	r3, [pc, #460]	; (80038f8 <straight_table2+0x91c>)
 800372a:	2206      	movs	r2, #6
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003732:	eef1 7a67 	vneg.f32	s15, s15
 8003736:	4b71      	ldr	r3, [pc, #452]	; (80038fc <straight_table2+0x920>)
 8003738:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800373c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	d514      	bpl.n	8003774 <straight_table2+0x798>
 800374a:	edd7 7a05 	vldr	s15, [r7, #20]
 800374e:	eef1 7a67 	vneg.f32	s15, s15
 8003752:	ed97 7a07 	vldr	s14, [r7, #28]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd09      	ble.n	8003774 <straight_table2+0x798>
 8003760:	4b65      	ldr	r3, [pc, #404]	; (80038f8 <straight_table2+0x91c>)
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	edd7 7a01 	vldr	s15, [r7, #4]
 800376a:	eef1 7a67 	vneg.f32	s15, s15
 800376e:	4b63      	ldr	r3, [pc, #396]	; (80038fc <straight_table2+0x920>)
 8003770:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003774:	edd7 7a05 	vldr	s15, [r7, #20]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d50e      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003782:	ed97 7a07 	vldr	s14, [r7, #28]
 8003786:	edd7 7a05 	vldr	s15, [r7, #20]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	d505      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003794:	4b58      	ldr	r3, [pc, #352]	; (80038f8 <straight_table2+0x91c>)
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	4a58      	ldr	r2, [pc, #352]	; (80038fc <straight_table2+0x920>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80037a0:	78bb      	ldrb	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 809e 	bne.w	80038e4 <straight_table2+0x908>
	while (g_acc_flag!=4){
 80037a8:	e074      	b.n	8003894 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d120      	bne.n	80037f2 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80037b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037bc:	4b54      	ldr	r3, [pc, #336]	; (8003910 <straight_table2+0x934>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d90e      	bls.n	80037ea <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80037d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <straight_table2+0x938>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d900      	bls.n	80037ea <straight_table2+0x80e>
 80037e8:	e054      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ea:	4b43      	ldr	r3, [pc, #268]	; (80038f8 <straight_table2+0x91c>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
				break;
 80037f0:	e055      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d121      	bne.n	800383c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003804:	4b44      	ldr	r3, [pc, #272]	; (8003918 <straight_table2+0x93c>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d900      	bls.n	8003816 <straight_table2+0x83a>
 8003814:	e03e      	b.n	8003894 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003816:	edd7 7a05 	vldr	s15, [r7, #20]
 800381a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800381e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003822:	4b3e      	ldr	r3, [pc, #248]	; (800391c <straight_table2+0x940>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d900      	bls.n	8003834 <straight_table2+0x858>
 8003832:	e02f      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003834:	4b30      	ldr	r3, [pc, #192]	; (80038f8 <straight_table2+0x91c>)
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
				break;
 800383a:	e030      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d112      	bne.n	8003868 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <straight_table2+0x944>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	d900      	bls.n	8003860 <straight_table2+0x884>
 800385e:	e019      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003860:	4b25      	ldr	r3, [pc, #148]	; (80038f8 <straight_table2+0x91c>)
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
				break;
 8003866:	e01a      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d112      	bne.n	8003894 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387a:	4b21      	ldr	r3, [pc, #132]	; (8003900 <straight_table2+0x924>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d900      	bls.n	800388c <straight_table2+0x8b0>
 800388a:	e003      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 800388c:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <straight_table2+0x91c>)
 800388e:	2204      	movs	r2, #4
 8003890:	701a      	strb	r2, [r3, #0]
				break;
 8003892:	e004      	b.n	800389e <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <straight_table2+0x91c>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b04      	cmp	r3, #4
 800389c:	d185      	bne.n	80037aa <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800389e:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d105      	bne.n	80038b8 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	f004 fb43 	bl	8007f38 <wait_ms_NoReset>
		modeacc = 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <straight_table2+0x948>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <straight_table2+0x94c>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <straight_table2+0x94c>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <straight_table2+0x950>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <straight_table2+0x950>)
 80038dc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80038e0:	f004 f860 	bl	80079a4 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80038e4:	4b05      	ldr	r3, [pc, #20]	; (80038fc <straight_table2+0x920>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	ee07 3a90 	vmov	s15, r3



}
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000804 	.word	0x20000804
 80038fc:	200004d8 	.word	0x200004d8
 8003900:	200005e8 	.word	0x200005e8
 8003904:	420c0000 	.word	0x420c0000
 8003908:	200005f4 	.word	0x200005f4
 800390c:	20000534 	.word	0x20000534
 8003910:	200005d0 	.word	0x200005d0
 8003914:	200005cc 	.word	0x200005cc
 8003918:	200005d8 	.word	0x200005d8
 800391c:	200005d4 	.word	0x200005d4
 8003920:	200005e4 	.word	0x200005e4
 8003924:	20000528 	.word	0x20000528
 8003928:	20000220 	.word	0x20000220
 800392c:	20000224 	.word	0x20000224

08003930 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
 800393a:	60b8      	str	r0, [r7, #8]
 800393c:	460b      	mov	r3, r1
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	4613      	mov	r3, r2
 8003942:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003944:	e02f      	b.n	80039a6 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <End_straight+0x2e>
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d120      	bne.n	80039a6 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <End_straight+0xb4>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d90e      	bls.n	800399e <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003980:	edd7 7a03 	vldr	s15, [r7, #12]
 8003984:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <End_straight+0xb8>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d900      	bls.n	800399e <End_straight+0x6e>
 800399c:	e003      	b.n	80039a6 <End_straight+0x76>
						g_acc_flag=4;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <End_straight+0xbc>)
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
						break;
 80039a4:	e004      	b.n	80039b0 <End_straight+0x80>
	while (g_acc_flag!=4){
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <End_straight+0xbc>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d1ca      	bne.n	8003946 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <End_straight+0xc0>)
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <End_straight+0xc0>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <End_straight+0xc4>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <End_straight+0xc4>)
 80039d4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039d8:	f003 ffe4 	bl	80079a4 <pl_DriveMotor_stop>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200005d0 	.word	0x200005d0
 80039e8:	200005cc 	.word	0x200005cc
 80039ec:	20000804 	.word	0x20000804
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <turning_table2+0x5c>
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a54:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <turning_table2+0x204>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003a5a:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <turning_table2+0x204>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <turning_table2+0x204>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <turning_table2+0x204>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <turning_table2+0x204>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db03      	blt.n	8003a88 <turning_table2+0x90>
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <turning_table2+0x208>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e006      	b.n	8003a96 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eef1 7a67 	vneg.f32	s15, s15
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <turning_table2+0x208>)
 8003a92:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <turning_table2+0x208>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <turning_table2+0x208>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <turning_table2+0x20c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <turning_table2+0x20c>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <turning_table2+0x20c>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003abc:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <turning_table2+0x210>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <turning_table2+0x214>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd0e      	ble.n	8003af4 <turning_table2+0xfc>
 8003ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dd05      	ble.n	8003af4 <turning_table2+0xfc>
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <turning_table2+0x214>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <turning_table2+0x208>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd14      	ble.n	8003b2c <turning_table2+0x134>
 8003b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d509      	bpl.n	8003b2c <turning_table2+0x134>
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <turning_table2+0x214>)
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	eef1 7a67 	vneg.f32	s15, s15
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <turning_table2+0x208>)
 8003b28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d514      	bpl.n	8003b64 <turning_table2+0x16c>
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eef1 7a67 	vneg.f32	s15, s15
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd09      	ble.n	8003b64 <turning_table2+0x16c>
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <turning_table2+0x214>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <turning_table2+0x208>)
 8003b60:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50e      	bpl.n	8003b90 <turning_table2+0x198>
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d505      	bpl.n	8003b90 <turning_table2+0x198>
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <turning_table2+0x214>)
 8003b86:	2206      	movs	r2, #6
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <turning_table2+0x208>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <turning_table2+0x218>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b96:	f003 fef7 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b9a:	bf00      	nop
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <turning_table2+0x214>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d1fa      	bne.n	8003b9c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d106      	bne.n	8003bc2 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb8:	f004 f9be 	bl	8007f38 <wait_ms_NoReset>
		modeacc = 0;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <turning_table2+0x218>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <turning_table2+0x21c>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <turning_table2+0x21c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003bd6:	f003 fee5 	bl	80079a4 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <turning_table2+0x220>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <turning_table2+0x224>)
 8003be0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <turning_table2+0x228>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <turning_table2+0x22c>)
 8003be8:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <turning_table2+0x208>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee07 3a90 	vmov	s15, r3
}
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000504 	.word	0x20000504
 8003c00:	200004e4 	.word	0x200004e4
 8003c04:	200004d8 	.word	0x200004d8
 8003c08:	20000805 	.word	0x20000805
 8003c0c:	20000804 	.word	0x20000804
 8003c10:	20000528 	.word	0x20000528
 8003c14:	20000264 	.word	0x20000264
 8003c18:	20000228 	.word	0x20000228
 8003c1c:	20000258 	.word	0x20000258
 8003c20:	2000022c 	.word	0x2000022c
 8003c24:	2000025c 	.word	0x2000025c

08003c28 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c32:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c36:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c42:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c62:	ed97 7a00 	vldr	s14, [r7]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d505      	bpl.n	8003c88 <slalom_table2+0x60>
 8003c7c:	edd7 7a00 	vldr	s15, [r7]
 8003c80:	eef1 7a67 	vneg.f32	s15, s15
 8003c84:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <slalom_table2+0x1dc>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <slalom_table2+0x1dc>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c94:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <slalom_table2+0x1dc>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <slalom_table2+0x1dc>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <slalom_table2+0x1dc>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	db03      	blt.n	8003cbc <slalom_table2+0x94>
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <slalom_table2+0x1e0>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e006      	b.n	8003cca <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	eef1 7a67 	vneg.f32	s15, s15
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <slalom_table2+0x1e0>)
 8003cc6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <slalom_table2+0x1e0>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <slalom_table2+0x1e0>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <slalom_table2+0x1e4>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <slalom_table2+0x1e8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <slalom_table2+0x1ec>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dd0e      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d08:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	dd05      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <slalom_table2+0x1ec>)
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <slalom_table2+0x1e0>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dd14      	ble.n	8003d5e <slalom_table2+0x136>
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	eef1 7a67 	vneg.f32	s15, s15
 8003d3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d509      	bpl.n	8003d5e <slalom_table2+0x136>
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <slalom_table2+0x1ec>)
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	edd7 7a00 	vldr	s15, [r7]
 8003d54:	eef1 7a67 	vneg.f32	s15, s15
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <slalom_table2+0x1e0>)
 8003d5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d514      	bpl.n	8003d96 <slalom_table2+0x16e>
 8003d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d70:	eef1 7a67 	vneg.f32	s15, s15
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	dd09      	ble.n	8003d96 <slalom_table2+0x16e>
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <slalom_table2+0x1ec>)
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <slalom_table2+0x1e0>)
 8003d92:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d50e      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003da4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d505      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <slalom_table2+0x1ec>)
 8003db8:	2206      	movs	r2, #6
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <slalom_table2+0x1e0>)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <slalom_table2+0x1f0>)
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003dc8:	f003 fdde 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003dcc:	bf00      	nop
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <slalom_table2+0x1ec>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d1fa      	bne.n	8003dce <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <slalom_table2+0x1f4>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <slalom_table2+0x1f4>)
 8003de8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dec:	f003 fdda 	bl	80079a4 <pl_DriveMotor_stop>

	return turning.velocity;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <slalom_table2+0x1e0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000504 	.word	0x20000504
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	200004d8 	.word	0x200004d8
 8003e10:	20000805 	.word	0x20000805
 8003e14:	20000804 	.word	0x20000804
 8003e18:	20000528 	.word	0x20000528
 8003e1c:	20000264 	.word	0x20000264

08003e20 <no_angle>:

void no_angle(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <no_angle+0x88>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <no_angle+0x88>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <no_angle+0x88>)
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <no_angle+0x8c>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <no_angle+0x8c>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <no_angle+0x8c>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <no_angle+0x90>)
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e5a:	f003 fd95 	bl	8007988 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e5e:	e002      	b.n	8003e66 <no_angle+0x46>
		HAL_Delay(1);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f014 ffa3 	bl	8018dac <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <no_angle+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e6e:	ddf7      	ble.n	8003e60 <no_angle+0x40>
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <no_angle+0x94>)
 8003e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e7a:	ddf1      	ble.n	8003e60 <no_angle+0x40>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <no_angle+0x94>)
 8003e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e86:	ddeb      	ble.n	8003e60 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <no_angle+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e8e:	f003 fd89 	bl	80079a4 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <no_angle+0x98>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <no_angle+0x9c>)
 8003e98:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <no_angle+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <no_angle+0xa4>)
 8003ea0:	6013      	str	r3, [r2, #0]

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200004e4 	.word	0x200004e4
 8003eac:	200004d8 	.word	0x200004d8
 8003eb0:	20000528 	.word	0x20000528
 8003eb4:	200002b8 	.word	0x200002b8
 8003eb8:	20000228 	.word	0x20000228
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	2000022c 	.word	0x2000022c
 8003ec4:	2000025c 	.word	0x2000025c

08003ec8 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ed2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ed6:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <mollifier_slalom_table+0x114>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f22:	eef0 7ae7 	vabs.f32	s15, s15
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fb35 	bl	8000598 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f38:	a321      	add	r3, pc, #132	; (adr r3, 8003fc0 <mollifier_slalom_table+0xf8>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fcab 	bl	800089c <__aeabi_ddiv>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	a31e      	add	r3, pc, #120	; (adr r3, 8003fc8 <mollifier_slalom_table+0x100>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fb78 	bl	8000648 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fb19 	bl	8000598 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fc95 	bl	800089c <__aeabi_ddiv>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fe3d 	bl	8000bf8 <__aeabi_d2f>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <mollifier_slalom_table+0x11c>)
 8003f82:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <mollifier_slalom_table+0x120>)
 8003f86:	2206      	movs	r2, #6
 8003f88:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f8a:	f003 fcfd 	bl	8007988 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f8e:	bf00      	nop
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d1fa      	bne.n	8003f90 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <mollifier_slalom_table+0x124>)
 8003f9c:	ed93 7a00 	vldr	s14, [r3]
 8003fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <mollifier_slalom_table+0x124>)
 8003faa:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003fae:	f003 fcf9 	bl	80079a4 <pl_DriveMotor_stop>

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	f9db22d1 	.word	0xf9db22d1
 8003fc4:	3fdc6a7e 	.word	0x3fdc6a7e
 8003fc8:	362cef38 	.word	0x362cef38
 8003fcc:	3fd78b56 	.word	0x3fd78b56
 8003fd0:	20000518 	.word	0x20000518
 8003fd4:	200004e4 	.word	0x200004e4
 8003fd8:	200004d8 	.word	0x200004d8
 8003fdc:	20000805 	.word	0x20000805
 8003fe0:	20000804 	.word	0x20000804
 8003fe4:	20000800 	.word	0x20000800
 8003fe8:	20000528 	.word	0x20000528
 8003fec:	20000264 	.word	0x20000264

08003ff0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <no_frontwall_straight+0x70>)
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <no_frontwall_straight+0x70>)
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <no_frontwall_straight+0x70>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <no_frontwall_straight+0x74>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <no_frontwall_straight+0x74>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <no_frontwall_straight+0x74>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <no_frontwall_straight+0x78>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <no_frontwall_straight+0x7c>)
 800402c:	2205      	movs	r2, #5
 800402e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004030:	f003 fcaa 	bl	8007988 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004034:	2096      	movs	r0, #150	; 0x96
 8004036:	f003 ff7f 	bl	8007f38 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <no_frontwall_straight+0x78>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <no_frontwall_straight+0x7c>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004046:	f003 fcad 	bl	80079a4 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <no_frontwall_straight+0x80>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <no_frontwall_straight+0x84>)
 8004050:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <no_frontwall_straight+0x88>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <no_frontwall_straight+0x8c>)
 8004058:	6013      	str	r3, [r2, #0]

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200004e4 	.word	0x200004e4
 8004064:	200004d8 	.word	0x200004d8
 8004068:	20000591 	.word	0x20000591
 800406c:	20000528 	.word	0x20000528
 8004070:	20000228 	.word	0x20000228
 8004074:	20000258 	.word	0x20000258
 8004078:	2000022c 	.word	0x2000022c
 800407c:	2000025c 	.word	0x2000025c

08004080 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b088      	sub	sp, #32
 8004084:	af00      	add	r7, sp, #0
 8004086:	6178      	str	r0, [r7, #20]
 8004088:	ed87 0a04 	vstr	s0, [r7, #16]
 800408c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	ed87 1a01 	vstr	s2, [r7, #4]
 8004096:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 800409a:	4bd3      	ldr	r3, [pc, #844]	; (80043e8 <feedforward_const_accel+0x368>)
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d102      	bne.n	80040a8 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 80040a2:	4bd2      	ldr	r3, [pc, #840]	; (80043ec <feedforward_const_accel+0x36c>)
 80040a4:	61fb      	str	r3, [r7, #28]
 80040a6:	e001      	b.n	80040ac <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 80040a8:	4bd1      	ldr	r3, [pc, #836]	; (80043f0 <feedforward_const_accel+0x370>)
 80040aa:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 80040ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80040b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b8:	db7c      	blt.n	80041b4 <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80040ba:	68f8      	ldr	r0, [r7, #12]
 80040bc:	f7fc fa6c 	bl	8000598 <__aeabi_f2d>
 80040c0:	a3bd      	add	r3, pc, #756	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f7fc fabf 	bl	8000648 <__aeabi_dmul>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	4bc7      	ldr	r3, [pc, #796]	; (80043f4 <feedforward_const_accel+0x374>)
 80040d8:	f7fc fbe0 	bl	800089c <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80040e4:	a3b6      	add	r3, pc, #728	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f7fc fbd7 	bl	800089c <__aeabi_ddiv>
 80040ee:	4602      	mov	r2, r0
 80040f0:	460b      	mov	r3, r1
 80040f2:	4610      	mov	r0, r2
 80040f4:	4619      	mov	r1, r3
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040fe:	f7fc fbcd 	bl	800089c <__aeabi_ddiv>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	a3af      	add	r3, pc, #700	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc f8e4 	bl	80002dc <__adddf3>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	a3ac      	add	r3, pc, #688	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fa91 	bl	8000648 <__aeabi_dmul>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	a3aa      	add	r3, pc, #680	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 8004130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004134:	f7fc fbb2 	bl	800089c <__aeabi_ddiv>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4614      	mov	r4, r2
 800413e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004140:	ed97 7a04 	vldr	s14, [r7, #16]
 8004144:	eddf 6aad 	vldr	s13, [pc, #692]	; 80043fc <feedforward_const_accel+0x37c>
 8004148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800414c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80043f8 <feedforward_const_accel+0x378>
 8004150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004154:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004158:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800415c:	ee16 0a90 	vmov	r0, s13
 8004160:	f7fc fa1a 	bl	8000598 <__aeabi_f2d>
 8004164:	a39e      	add	r3, pc, #632	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fa6d 	bl	8000648 <__aeabi_dmul>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	a392      	add	r3, pc, #584	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f7fc fb8e 	bl	800089c <__aeabi_ddiv>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4610      	mov	r0, r2
 8004186:	4619      	mov	r1, r3
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004190:	f7fc fb84 	bl	800089c <__aeabi_ddiv>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4620      	mov	r0, r4
 800419a:	4629      	mov	r1, r5
 800419c:	f7fc f89e 	bl	80002dc <__adddf3>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4610      	mov	r0, r2
 80041a6:	4619      	mov	r1, r3
 80041a8:	f7fc fd26 	bl	8000bf8 <__aeabi_d2f>
 80041ac:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e07b      	b.n	80042ac <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fc f9ef 	bl	8000598 <__aeabi_f2d>
 80041ba:	a37f      	add	r3, pc, #508	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f7fc fa42 	bl	8000648 <__aeabi_dmul>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <feedforward_const_accel+0x374>)
 80041d2:	f7fc fb63 	bl	800089c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80041de:	a378      	add	r3, pc, #480	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f7fc fb5a 	bl	800089c <__aeabi_ddiv>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4610      	mov	r0, r2
 80041ee:	4619      	mov	r1, r3
 80041f0:	f04f 0200 	mov.w	r2, #0
 80041f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041f8:	f7fc fb50 	bl	800089c <__aeabi_ddiv>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	a370      	add	r3, pc, #448	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc f865 	bl	80002d8 <__aeabi_dsub>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	a36e      	add	r3, pc, #440	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fa14 	bl	8000648 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4610      	mov	r0, r2
 8004226:	4619      	mov	r1, r3
 8004228:	a36b      	add	r3, pc, #428	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 800422a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422e:	f7fc fb35 	bl	800089c <__aeabi_ddiv>
 8004232:	4602      	mov	r2, r0
 8004234:	460b      	mov	r3, r1
 8004236:	4614      	mov	r4, r2
 8004238:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800423a:	ed97 7a04 	vldr	s14, [r7, #16]
 800423e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80043fc <feedforward_const_accel+0x37c>
 8004242:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004246:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80043f8 <feedforward_const_accel+0x378>
 800424a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800424e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004252:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004256:	ee16 0a90 	vmov	r0, s13
 800425a:	f7fc f99d 	bl	8000598 <__aeabi_f2d>
 800425e:	a360      	add	r3, pc, #384	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f9f0 	bl	8000648 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	a353      	add	r3, pc, #332	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc fb11 	bl	800089c <__aeabi_ddiv>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428a:	f7fc fb07 	bl	800089c <__aeabi_ddiv>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc f821 	bl	80002dc <__adddf3>
 800429a:	4602      	mov	r2, r0
 800429c:	460b      	mov	r3, r1
 800429e:	4610      	mov	r0, r2
 80042a0:	4619      	mov	r1, r3
 80042a2:	f7fc fca9 	bl	8000bf8 <__aeabi_d2f>
 80042a6:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 80042ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80042b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	f2c0 80a2 	blt.w	8004400 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80042bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80042c0:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80043f8 <feedforward_const_accel+0x378>
 80042c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80042c8:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80042cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042d0:	edd7 7a00 	vldr	s15, [r7]
 80042d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d8:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80043fc <feedforward_const_accel+0x37c>
 80042dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80042e0:	ee16 0a90 	vmov	r0, s13
 80042e4:	f7fc f958 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042e8:	a335      	add	r3, pc, #212	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fc fad5 	bl	800089c <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004302:	f7fc facb 	bl	800089c <__aeabi_ddiv>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4610      	mov	r0, r2
 800430c:	4619      	mov	r1, r3
 800430e:	a32e      	add	r3, pc, #184	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f7fb ffe2 	bl	80002dc <__adddf3>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	a32b      	add	r3, pc, #172	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f7fc f98f 	bl	8000648 <__aeabi_dmul>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	a329      	add	r3, pc, #164	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc fab0 	bl	800089c <__aeabi_ddiv>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004344:	ed97 7a01 	vldr	s14, [r7, #4]
 8004348:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80043fc <feedforward_const_accel+0x37c>
 800434c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004350:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80043f8 <feedforward_const_accel+0x378>
 8004354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004358:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800435c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004360:	ee16 0a90 	vmov	r0, s13
 8004364:	f7fc f918 	bl	8000598 <__aeabi_f2d>
 8004368:	a31d      	add	r3, pc, #116	; (adr r3, 80043e0 <feedforward_const_accel+0x360>)
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	f7fc f96b 	bl	8000648 <__aeabi_dmul>
 8004372:	4602      	mov	r2, r0
 8004374:	460b      	mov	r3, r1
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	a311      	add	r3, pc, #68	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f7fc fa8c 	bl	800089c <__aeabi_ddiv>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4610      	mov	r0, r2
 800438a:	4619      	mov	r1, r3
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004394:	f7fc fa82 	bl	800089c <__aeabi_ddiv>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4620      	mov	r0, r4
 800439e:	4629      	mov	r1, r5
 80043a0:	f7fb ff9c 	bl	80002dc <__adddf3>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	f7fc fc24 	bl	8000bf8 <__aeabi_d2f>
 80043b0:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80043b6:	e0a0      	b.n	80044fa <feedforward_const_accel+0x47a>
 80043b8:	7df8b79b 	.word	0x7df8b79b
 80043bc:	3ed5fdfc 	.word	0x3ed5fdfc
 80043c0:	ca619631 	.word	0xca619631
 80043c4:	3f9b3322 	.word	0x3f9b3322
 80043c8:	eb1c432d 	.word	0xeb1c432d
 80043cc:	3f1a36e2 	.word	0x3f1a36e2
 80043d0:	51eb851f 	.word	0x51eb851f
 80043d4:	3ff11eb8 	.word	0x3ff11eb8
 80043d8:	b7952d23 	.word	0xb7952d23
 80043dc:	3f569c23 	.word	0x3f569c23
 80043e0:	761b0f50 	.word	0x761b0f50
 80043e4:	3f66bf29 	.word	0x3f66bf29
 80043e8:	20000808 	.word	0x20000808
 80043ec:	350b9621 	.word	0x350b9621
 80043f0:	34bbe7a2 	.word	0x34bbe7a2
 80043f4:	408f4000 	.word	0x408f4000
 80043f8:	421c0000 	.word	0x421c0000
 80043fc:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004400:	edd7 7a07 	vldr	s15, [r7, #28]
 8004404:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80043f8 <feedforward_const_accel+0x378>
 8004408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800440c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004410:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004414:	edd7 7a00 	vldr	s15, [r7]
 8004418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441c:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 80043fc <feedforward_const_accel+0x37c>
 8004420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004424:	ee16 0a90 	vmov	r0, s13
 8004428:	f7fc f8b6 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800442c:	a338      	add	r3, pc, #224	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f7fc fa33 	bl	800089c <__aeabi_ddiv>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004446:	f7fc fa29 	bl	800089c <__aeabi_ddiv>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4610      	mov	r0, r2
 8004450:	4619      	mov	r1, r3
 8004452:	a333      	add	r3, pc, #204	; (adr r3, 8004520 <feedforward_const_accel+0x4a0>)
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f7fb ff3e 	bl	80002d8 <__aeabi_dsub>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4610      	mov	r0, r2
 8004462:	4619      	mov	r1, r3
 8004464:	a330      	add	r3, pc, #192	; (adr r3, 8004528 <feedforward_const_accel+0x4a8>)
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	f7fc f8ed 	bl	8000648 <__aeabi_dmul>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	a32e      	add	r3, pc, #184	; (adr r3, 8004530 <feedforward_const_accel+0x4b0>)
 8004478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447c:	f7fc fa0e 	bl	800089c <__aeabi_ddiv>
 8004480:	4602      	mov	r2, r0
 8004482:	460b      	mov	r3, r1
 8004484:	4614      	mov	r4, r2
 8004486:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004488:	ed97 7a01 	vldr	s14, [r7, #4]
 800448c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8004518 <feedforward_const_accel+0x498>
 8004490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004494:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800451c <feedforward_const_accel+0x49c>
 8004498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800449c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80044a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044a4:	ee16 0a90 	vmov	r0, s13
 80044a8:	f7fc f876 	bl	8000598 <__aeabi_f2d>
 80044ac:	a316      	add	r3, pc, #88	; (adr r3, 8004508 <feedforward_const_accel+0x488>)
 80044ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b2:	f7fc f8c9 	bl	8000648 <__aeabi_dmul>
 80044b6:	4602      	mov	r2, r0
 80044b8:	460b      	mov	r3, r1
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	a314      	add	r3, pc, #80	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 80044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c4:	f7fc f9ea 	bl	800089c <__aeabi_ddiv>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4610      	mov	r0, r2
 80044ce:	4619      	mov	r1, r3
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d8:	f7fc f9e0 	bl	800089c <__aeabi_ddiv>
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4620      	mov	r0, r4
 80044e2:	4629      	mov	r1, r5
 80044e4:	f7fb fefa 	bl	80002dc <__adddf3>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	f7fc fb82 	bl	8000bf8 <__aeabi_d2f>
 80044f4:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	601a      	str	r2, [r3, #0]
}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bdb0      	pop	{r4, r5, r7, pc}
 8004502:	bf00      	nop
 8004504:	f3af 8000 	nop.w
 8004508:	761b0f50 	.word	0x761b0f50
 800450c:	3f66bf29 	.word	0x3f66bf29
 8004510:	ca619631 	.word	0xca619631
 8004514:	3f9b3322 	.word	0x3f9b3322
 8004518:	447a0000 	.word	0x447a0000
 800451c:	421c0000 	.word	0x421c0000
 8004520:	eb1c432d 	.word	0xeb1c432d
 8004524:	3f1a36e2 	.word	0x3f1a36e2
 8004528:	51eb851f 	.word	0x51eb851f
 800452c:	3ff11eb8 	.word	0x3ff11eb8
 8004530:	b7952d23 	.word	0xb7952d23
 8004534:	3f569c23 	.word	0x3f569c23

08004538 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <PID_Init+0x44>)
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <PID_Init+0x48>)
 8004540:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <PID_Init+0x4c>)
 8004544:	4a10      	ldr	r2, [pc, #64]	; (8004588 <PID_Init+0x50>)
 8004546:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8004548:	4b10      	ldr	r3, [pc, #64]	; (800458c <PID_Init+0x54>)
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004550:	4b0f      	ldr	r3, [pc, #60]	; (8004590 <PID_Init+0x58>)
 8004552:	4a10      	ldr	r2, [pc, #64]	; (8004594 <PID_Init+0x5c>)
 8004554:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <PID_Init+0x60>)
 8004558:	4a10      	ldr	r2, [pc, #64]	; (800459c <PID_Init+0x64>)
 800455a:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <PID_Init+0x68>)
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <PID_Init+0x6c>)
 8004560:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004562:	4b11      	ldr	r3, [pc, #68]	; (80045a8 <PID_Init+0x70>)
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <PID_Init+0x74>)
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	609a      	str	r2, [r3, #8]

}
 8004572:	bf00      	nop
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	20000554 	.word	0x20000554
 8004580:	40466666 	.word	0x40466666
 8004584:	20000558 	.word	0x20000558
 8004588:	3da3d70a 	.word	0x3da3d70a
 800458c:	2000055c 	.word	0x2000055c
 8004590:	20000560 	.word	0x20000560
 8004594:	3fcccccd 	.word	0x3fcccccd
 8004598:	20000564 	.word	0x20000564
 800459c:	3d75c28f 	.word	0x3d75c28f
 80045a0:	20000568 	.word	0x20000568
 80045a4:	3b03126f 	.word	0x3b03126f
 80045a8:	20000534 	.word	0x20000534
 80045ac:	20000544 	.word	0x20000544

080045b0 <clear_Ierror>:

void clear_Ierror(void) {
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80045b4:	4b06      	ldr	r3, [pc, #24]	; (80045d0 <clear_Ierror+0x20>)
 80045b6:	f04f 0200 	mov.w	r2, #0
 80045ba:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <clear_Ierror+0x24>)
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000534 	.word	0x20000534
 80045d4:	20000544 	.word	0x20000544

080045d8 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80045e6:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 80045f6:	4b80      	ldr	r3, [pc, #512]	; (80047f8 <EncoderGyro_PID+0x220>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d111      	bne.n	8004622 <EncoderGyro_PID+0x4a>
		Ksp = 3.7; //3//P項の制御量直進*****************************************************
 80045fe:	4b7f      	ldr	r3, [pc, #508]	; (80047fc <EncoderGyro_PID+0x224>)
 8004600:	4a7f      	ldr	r2, [pc, #508]	; (8004800 <EncoderGyro_PID+0x228>)
 8004602:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8004604:	4b7f      	ldr	r3, [pc, #508]	; (8004804 <EncoderGyro_PID+0x22c>)
 8004606:	4a80      	ldr	r2, [pc, #512]	; (8004808 <EncoderGyro_PID+0x230>)
 8004608:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 800460a:	4b80      	ldr	r3, [pc, #512]	; (800480c <EncoderGyro_PID+0x234>)
 800460c:	4a80      	ldr	r2, [pc, #512]	; (8004810 <EncoderGyro_PID+0x238>)
 800460e:	601a      	str	r2, [r3, #0]
		Ktp = 2.2; //295//P項の制御量旋回*****************************************************
 8004610:	4b80      	ldr	r3, [pc, #512]	; (8004814 <EncoderGyro_PID+0x23c>)
 8004612:	4a81      	ldr	r2, [pc, #516]	; (8004818 <EncoderGyro_PID+0x240>)
 8004614:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8004616:	4b81      	ldr	r3, [pc, #516]	; (800481c <EncoderGyro_PID+0x244>)
 8004618:	4a81      	ldr	r2, [pc, #516]	; (8004820 <EncoderGyro_PID+0x248>)
 800461a:	601a      	str	r2, [r3, #0]
		Ktd = -0.001; //205//D項の制御量旋回*****************************************************
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <EncoderGyro_PID+0x24c>)
 800461e:	4a82      	ldr	r2, [pc, #520]	; (8004828 <EncoderGyro_PID+0x250>)
 8004620:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8004622:	edd7 7a01 	vldr	s15, [r7, #4]
 8004626:	eef5 7a40 	vcmp.f32	s15, #0.0
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d101      	bne.n	8004634 <EncoderGyro_PID+0x5c>
		reset_speed();
 8004630:	f7fc fcf2 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004634:	4b7d      	ldr	r3, [pc, #500]	; (800482c <EncoderGyro_PID+0x254>)
 8004636:	edd3 7a00 	vldr	s15, [r3]
 800463a:	eef0 7ae7 	vabs.f32	s15, s15
 800463e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004830 <EncoderGyro_PID+0x258>
 8004642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800464a:	d520      	bpl.n	800468e <EncoderGyro_PID+0xb6>
 800464c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004650:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004834 <EncoderGyro_PID+0x25c>
 8004654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465c:	db17      	blt.n	800468e <EncoderGyro_PID+0xb6>
 800465e:	4b76      	ldr	r3, [pc, #472]	; (8004838 <EncoderGyro_PID+0x260>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d013      	beq.n	800468e <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004666:	4b75      	ldr	r3, [pc, #468]	; (800483c <EncoderGyro_PID+0x264>)
 8004668:	ed93 7a00 	vldr	s14, [r3]
 800466c:	4b74      	ldr	r3, [pc, #464]	; (8004840 <EncoderGyro_PID+0x268>)
 800466e:	edd3 7a00 	vldr	s15, [r3]
 8004672:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004676:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800467a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800467e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004686:	4b6f      	ldr	r3, [pc, #444]	; (8004844 <EncoderGyro_PID+0x26c>)
 8004688:	edc3 7a00 	vstr	s15, [r3]
 800468c:	e01a      	b.n	80046c4 <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 800468e:	4b6e      	ldr	r3, [pc, #440]	; (8004848 <EncoderGyro_PID+0x270>)
 8004690:	ed93 7a00 	vldr	s14, [r3]
 8004694:	4b6d      	ldr	r3, [pc, #436]	; (800484c <EncoderGyro_PID+0x274>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800469e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80046a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80046aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ae:	4b65      	ldr	r3, [pc, #404]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046b0:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80046b4:	4b66      	ldr	r3, [pc, #408]	; (8004850 <EncoderGyro_PID+0x278>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a61      	ldr	r2, [pc, #388]	; (8004840 <EncoderGyro_PID+0x268>)
 80046ba:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80046bc:	4b65      	ldr	r3, [pc, #404]	; (8004854 <EncoderGyro_PID+0x27c>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a5e      	ldr	r2, [pc, #376]	; (800483c <EncoderGyro_PID+0x264>)
 80046c2:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 80046c4:	4b5f      	ldr	r3, [pc, #380]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046c6:	ed93 7a00 	vldr	s14, [r3]
 80046ca:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80046d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046d4:	4b5b      	ldr	r3, [pc, #364]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046d6:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80046da:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a59      	ldr	r2, [pc, #356]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046e0:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80046e2:	4b58      	ldr	r3, [pc, #352]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80046e8:	4b56      	ldr	r3, [pc, #344]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f2:	4b54      	ldr	r3, [pc, #336]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046f4:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80046f8:	4b52      	ldr	r3, [pc, #328]	; (8004844 <EncoderGyro_PID+0x26c>)
 80046fa:	ed93 7a00 	vldr	s14, [r3]
 80046fe:	4b3f      	ldr	r3, [pc, #252]	; (80047fc <EncoderGyro_PID+0x224>)
 8004700:	edd3 7a00 	vldr	s15, [r3]
 8004704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004708:	4b4e      	ldr	r3, [pc, #312]	; (8004844 <EncoderGyro_PID+0x26c>)
 800470a:	edd3 6a02 	vldr	s13, [r3, #8]
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <EncoderGyro_PID+0x22c>)
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004718:	ee37 7a27 	vadd.f32	s14, s14, s15
 800471c:	4b49      	ldr	r3, [pc, #292]	; (8004844 <EncoderGyro_PID+0x26c>)
 800471e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004722:	4b3a      	ldr	r3, [pc, #232]	; (800480c <EncoderGyro_PID+0x234>)
 8004724:	edd3 7a00 	vldr	s15, [r3]
 8004728:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800472c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004730:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004734:	4b3d      	ldr	r3, [pc, #244]	; (800482c <EncoderGyro_PID+0x254>)
 8004736:	edd3 7a00 	vldr	s15, [r3]
 800473a:	ed97 7a00 	vldr	s14, [r7]
 800473e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004742:	4b45      	ldr	r3, [pc, #276]	; (8004858 <EncoderGyro_PID+0x280>)
 8004744:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004748:	4b43      	ldr	r3, [pc, #268]	; (8004858 <EncoderGyro_PID+0x280>)
 800474a:	ed93 7a00 	vldr	s14, [r3]
 800474e:	4b42      	ldr	r3, [pc, #264]	; (8004858 <EncoderGyro_PID+0x280>)
 8004750:	edd3 7a01 	vldr	s15, [r3, #4]
 8004754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004758:	4b3f      	ldr	r3, [pc, #252]	; (8004858 <EncoderGyro_PID+0x280>)
 800475a:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 800475e:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <EncoderGyro_PID+0x280>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <EncoderGyro_PID+0x280>)
 8004764:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004766:	4b3c      	ldr	r3, [pc, #240]	; (8004858 <EncoderGyro_PID+0x280>)
 8004768:	ed93 7a02 	vldr	s14, [r3, #8]
 800476c:	4b3a      	ldr	r3, [pc, #232]	; (8004858 <EncoderGyro_PID+0x280>)
 800476e:	edd3 7a00 	vldr	s15, [r3]
 8004772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004776:	4b38      	ldr	r3, [pc, #224]	; (8004858 <EncoderGyro_PID+0x280>)
 8004778:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 800477c:	4b36      	ldr	r3, [pc, #216]	; (8004858 <EncoderGyro_PID+0x280>)
 800477e:	ed93 7a00 	vldr	s14, [r3]
 8004782:	4b24      	ldr	r3, [pc, #144]	; (8004814 <EncoderGyro_PID+0x23c>)
 8004784:	edd3 7a00 	vldr	s15, [r3]
 8004788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800478c:	4b32      	ldr	r3, [pc, #200]	; (8004858 <EncoderGyro_PID+0x280>)
 800478e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004792:	4b22      	ldr	r3, [pc, #136]	; (800481c <EncoderGyro_PID+0x244>)
 8004794:	edd3 7a00 	vldr	s15, [r3]
 8004798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800479c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 80047a0:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <EncoderGyro_PID+0x280>)
 80047a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80047a6:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <EncoderGyro_PID+0x24c>)
 80047a8:	edd3 7a00 	vldr	s15, [r3]
 80047ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 80047b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047b4:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 80047b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80047bc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800485c <EncoderGyro_PID+0x284>
 80047c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047c4:	4b26      	ldr	r3, [pc, #152]	; (8004860 <EncoderGyro_PID+0x288>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 80047d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80047d8:	eddf 6a20 	vldr	s13, [pc, #128]	; 800485c <EncoderGyro_PID+0x284>
 80047dc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047e0:	4b1f      	ldr	r3, [pc, #124]	; (8004860 <EncoderGyro_PID+0x288>)
 80047e2:	edd3 7a00 	vldr	s15, [r3]
 80047e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	edc3 7a00 	vstr	s15, [r3]

}
 80047f0:	bf00      	nop
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	20000808 	.word	0x20000808
 80047fc:	20000554 	.word	0x20000554
 8004800:	406ccccd 	.word	0x406ccccd
 8004804:	20000558 	.word	0x20000558
 8004808:	3db851ec 	.word	0x3db851ec
 800480c:	2000055c 	.word	0x2000055c
 8004810:	bbe56042 	.word	0xbbe56042
 8004814:	20000560 	.word	0x20000560
 8004818:	400ccccd 	.word	0x400ccccd
 800481c:	20000564 	.word	0x20000564
 8004820:	3d8f5c29 	.word	0x3d8f5c29
 8004824:	20000568 	.word	0x20000568
 8004828:	ba83126f 	.word	0xba83126f
 800482c:	20000268 	.word	0x20000268
 8004830:	42f00000 	.word	0x42f00000
 8004834:	42c80000 	.word	0x42c80000
 8004838:	20000528 	.word	0x20000528
 800483c:	2000025c 	.word	0x2000025c
 8004840:	20000258 	.word	0x20000258
 8004844:	20000534 	.word	0x20000534
 8004848:	2000022c 	.word	0x2000022c
 800484c:	20000228 	.word	0x20000228
 8004850:	20000238 	.word	0x20000238
 8004854:	2000023c 	.word	0x2000023c
 8004858:	20000544 	.word	0x20000544
 800485c:	44d1e000 	.word	0x44d1e000
 8004860:	200004d4 	.word	0x200004d4

08004864 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004868:	4b3f      	ldr	r3, [pc, #252]	; (8004968 <init_WallControl+0x104>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 800486e:	4b3f      	ldr	r3, [pc, #252]	; (800496c <init_WallControl+0x108>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004874:	4b3e      	ldr	r3, [pc, #248]	; (8004970 <init_WallControl+0x10c>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <init_WallControl+0x110>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004880:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <init_WallControl+0x114>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004886:	4b3d      	ldr	r3, [pc, #244]	; (800497c <init_WallControl+0x118>)
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <init_WallControl+0x11c>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004892:	4b3c      	ldr	r3, [pc, #240]	; (8004984 <init_WallControl+0x120>)
 8004894:	4a3c      	ldr	r2, [pc, #240]	; (8004988 <init_WallControl+0x124>)
 8004896:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004898:	4b3c      	ldr	r3, [pc, #240]	; (800498c <init_WallControl+0x128>)
 800489a:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <init_WallControl+0x12c>)
 800489c:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <init_WallControl+0x130>)
 80048a0:	4a3d      	ldr	r2, [pc, #244]	; (8004998 <init_WallControl+0x134>)
 80048a2:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 80048a4:	4b3d      	ldr	r3, [pc, #244]	; (800499c <init_WallControl+0x138>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 80048aa:	4b3d      	ldr	r3, [pc, #244]	; (80049a0 <init_WallControl+0x13c>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 80048b0:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <init_WallControl+0x140>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 80048b6:	4b3c      	ldr	r3, [pc, #240]	; (80049a8 <init_WallControl+0x144>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 80048bc:	4b3b      	ldr	r3, [pc, #236]	; (80049ac <init_WallControl+0x148>)
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 80048c2:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <init_WallControl+0x14c>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 80048c8:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <init_WallControl+0x150>)
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 80048d0:	4b39      	ldr	r3, [pc, #228]	; (80049b8 <init_WallControl+0x154>)
 80048d2:	f04f 0200 	mov.w	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80048d8:	4b38      	ldr	r3, [pc, #224]	; (80049bc <init_WallControl+0x158>)
 80048da:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048de:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80048e0:	4b37      	ldr	r3, [pc, #220]	; (80049c0 <init_WallControl+0x15c>)
 80048e2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048e6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 80048e8:	4b36      	ldr	r3, [pc, #216]	; (80049c4 <init_WallControl+0x160>)
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <init_WallControl+0x164>)
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80048f8:	4b34      	ldr	r3, [pc, #208]	; (80049cc <init_WallControl+0x168>)
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004900:	4b33      	ldr	r3, [pc, #204]	; (80049d0 <init_WallControl+0x16c>)
 8004902:	f04f 0200 	mov.w	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004908:	4b32      	ldr	r3, [pc, #200]	; (80049d4 <init_WallControl+0x170>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 800490e:	4b32      	ldr	r3, [pc, #200]	; (80049d8 <init_WallControl+0x174>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004914:	4b31      	ldr	r3, [pc, #196]	; (80049dc <init_WallControl+0x178>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 800491a:	4b31      	ldr	r3, [pc, #196]	; (80049e0 <init_WallControl+0x17c>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004920:	4b30      	ldr	r3, [pc, #192]	; (80049e4 <init_WallControl+0x180>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004926:	4b30      	ldr	r3, [pc, #192]	; (80049e8 <init_WallControl+0x184>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 800492c:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <init_WallControl+0x188>)
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004932:	4b2f      	ldr	r3, [pc, #188]	; (80049f0 <init_WallControl+0x18c>)
 8004934:	2200      	movs	r2, #0
 8004936:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004938:	4b2e      	ldr	r3, [pc, #184]	; (80049f4 <init_WallControl+0x190>)
 800493a:	2200      	movs	r2, #0
 800493c:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 800493e:	4b2e      	ldr	r3, [pc, #184]	; (80049f8 <init_WallControl+0x194>)
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004946:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <init_WallControl+0x198>)
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 800494e:	4b2c      	ldr	r3, [pc, #176]	; (8004a00 <init_WallControl+0x19c>)
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004956:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <init_WallControl+0x1a0>)
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
}
 800495e:	bf00      	nop
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr
 8004968:	20000590 	.word	0x20000590
 800496c:	20000591 	.word	0x20000591
 8004970:	20000593 	.word	0x20000593
 8004974:	20000592 	.word	0x20000592
 8004978:	20000595 	.word	0x20000595
 800497c:	20000596 	.word	0x20000596
 8004980:	20000597 	.word	0x20000597
 8004984:	20000598 	.word	0x20000598
 8004988:	44be6000 	.word	0x44be6000
 800498c:	2000059c 	.word	0x2000059c
 8004990:	44974000 	.word	0x44974000
 8004994:	200005a0 	.word	0x200005a0
 8004998:	41a00000 	.word	0x41a00000
 800499c:	200005b8 	.word	0x200005b8
 80049a0:	200005b4 	.word	0x200005b4
 80049a4:	200005c0 	.word	0x200005c0
 80049a8:	200005bc 	.word	0x200005bc
 80049ac:	200005c8 	.word	0x200005c8
 80049b0:	200005c4 	.word	0x200005c4
 80049b4:	200005d0 	.word	0x200005d0
 80049b8:	200005cc 	.word	0x200005cc
 80049bc:	200005d8 	.word	0x200005d8
 80049c0:	200005d4 	.word	0x200005d4
 80049c4:	200005e0 	.word	0x200005e0
 80049c8:	200005dc 	.word	0x200005dc
 80049cc:	200005e8 	.word	0x200005e8
 80049d0:	200005e4 	.word	0x200005e4
 80049d4:	200005ec 	.word	0x200005ec
 80049d8:	200005ed 	.word	0x200005ed
 80049dc:	200005ee 	.word	0x200005ee
 80049e0:	200005ef 	.word	0x200005ef
 80049e4:	200005f0 	.word	0x200005f0
 80049e8:	200005f1 	.word	0x200005f1
 80049ec:	200005f2 	.word	0x200005f2
 80049f0:	200005f3 	.word	0x200005f3
 80049f4:	200005f4 	.word	0x200005f4
 80049f8:	200005f8 	.word	0x200005f8
 80049fc:	200005fc 	.word	0x200005fc
 8004a00:	20000600 	.word	0x20000600
 8004a04:	20000604 	.word	0x20000604

08004a08 <calWallConrol>:


float calWallConrol(void) {
 8004a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a0c:	b0aa      	sub	sp, #168	; 0xa8
 8004a0e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004a10:	4ba1      	ldr	r3, [pc, #644]	; (8004c98 <calWallConrol+0x290>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d13d      	bne.n	8004a94 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004a18:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <calWallConrol+0x294>)
 8004a1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004a1e:	4ba0      	ldr	r3, [pc, #640]	; (8004ca0 <calWallConrol+0x298>)
 8004a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8004a24:	4b9f      	ldr	r3, [pc, #636]	; (8004ca4 <calWallConrol+0x29c>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004ca8 <calWallConrol+0x2a0>
 8004a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a36:	dd06      	ble.n	8004a46 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8004a38:	4b9c      	ldr	r3, [pc, #624]	; (8004cac <calWallConrol+0x2a4>)
 8004a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8004a3e:	4b9c      	ldr	r3, [pc, #624]	; (8004cb0 <calWallConrol+0x2a8>)
 8004a40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a44:	e052      	b.n	8004aec <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004a46:	4b97      	ldr	r3, [pc, #604]	; (8004ca4 <calWallConrol+0x29c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fb fda4 	bl	8000598 <__aeabi_f2d>
 8004a50:	a389      	add	r3, pc, #548	; (adr r3, 8004c78 <calWallConrol+0x270>)
 8004a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a56:	f7fb fdf7 	bl	8000648 <__aeabi_dmul>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	4610      	mov	r0, r2
 8004a60:	4619      	mov	r1, r3
 8004a62:	f7fc f8c9 	bl	8000bf8 <__aeabi_d2f>
 8004a66:	4603      	mov	r3, r0
 8004a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004a6c:	4b8d      	ldr	r3, [pc, #564]	; (8004ca4 <calWallConrol+0x29c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7fb fd91 	bl	8000598 <__aeabi_f2d>
 8004a76:	a382      	add	r3, pc, #520	; (adr r3, 8004c80 <calWallConrol+0x278>)
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f7fb fde4 	bl	8000648 <__aeabi_dmul>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4610      	mov	r0, r2
 8004a86:	4619      	mov	r1, r3
 8004a88:	f7fc f8b6 	bl	8000bf8 <__aeabi_d2f>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a92:	e02b      	b.n	8004aec <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004a94:	4b87      	ldr	r3, [pc, #540]	; (8004cb4 <calWallConrol+0x2ac>)
 8004a96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004a9a:	4b87      	ldr	r3, [pc, #540]	; (8004cb8 <calWallConrol+0x2b0>)
 8004a9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004aa0:	4b80      	ldr	r3, [pc, #512]	; (8004ca4 <calWallConrol+0x29c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fb fd77 	bl	8000598 <__aeabi_f2d>
 8004aaa:	a377      	add	r3, pc, #476	; (adr r3, 8004c88 <calWallConrol+0x280>)
 8004aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab0:	f7fb fdca 	bl	8000648 <__aeabi_dmul>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f7fc f89c 	bl	8000bf8 <__aeabi_d2f>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004ac6:	4b77      	ldr	r3, [pc, #476]	; (8004ca4 <calWallConrol+0x29c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fb fd64 	bl	8000598 <__aeabi_f2d>
 8004ad0:	a36f      	add	r3, pc, #444	; (adr r3, 8004c90 <calWallConrol+0x288>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fdb7 	bl	8000648 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fc f889 	bl	8000bf8 <__aeabi_d2f>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004aec:	4b73      	ldr	r3, [pc, #460]	; (8004cbc <calWallConrol+0x2b4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f240 2289 	movw	r2, #649	; 0x289
 8004af4:	4293      	cmp	r3, r2
 8004af6:	dc03      	bgt.n	8004b00 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8004af8:	4b71      	ldr	r3, [pc, #452]	; (8004cc0 <calWallConrol+0x2b8>)
 8004afa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004afe:	e011      	b.n	8004b24 <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004b00:	4b6e      	ldr	r3, [pc, #440]	; (8004cbc <calWallConrol+0x2b4>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	dd03      	ble.n	8004b14 <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8004b0c:	4b6d      	ldr	r3, [pc, #436]	; (8004cc4 <calWallConrol+0x2bc>)
 8004b0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b12:	e007      	b.n	8004b24 <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004b14:	4b69      	ldr	r3, [pc, #420]	; (8004cbc <calWallConrol+0x2b4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	ee07 3a90 	vmov	s15, r3
 8004b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b20:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004b24:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <calWallConrol+0x2b4>)
 8004b26:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b2a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004b2e:	da03      	bge.n	8004b38 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004b30:	4b65      	ldr	r3, [pc, #404]	; (8004cc8 <calWallConrol+0x2c0>)
 8004b32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b36:	e012      	b.n	8004b5e <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004b38:	4b60      	ldr	r3, [pc, #384]	; (8004cbc <calWallConrol+0x2b4>)
 8004b3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b3e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b42:	dd03      	ble.n	8004b4c <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <calWallConrol+0x2c4>)
 8004b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b4a:	e008      	b.n	8004b5e <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004b4c:	4b5b      	ldr	r3, [pc, #364]	; (8004cbc <calWallConrol+0x2b4>)
 8004b4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b5a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004b66:	f04f 0300 	mov.w	r3, #0
 8004b6a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004b6c:	4b58      	ldr	r3, [pc, #352]	; (8004cd0 <calWallConrol+0x2c8>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d11c      	bne.n	8004bae <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004b74:	4b57      	ldr	r3, [pc, #348]	; (8004cd4 <calWallConrol+0x2cc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004b7a:	4b57      	ldr	r3, [pc, #348]	; (8004cd8 <calWallConrol+0x2d0>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <calWallConrol+0x2d4>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004b86:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <calWallConrol+0x2d8>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004b8c:	4b55      	ldr	r3, [pc, #340]	; (8004ce4 <calWallConrol+0x2dc>)
 8004b8e:	4a56      	ldr	r2, [pc, #344]	; (8004ce8 <calWallConrol+0x2e0>)
 8004b90:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <calWallConrol+0x2e4>)
 8004b94:	4a56      	ldr	r2, [pc, #344]	; (8004cf0 <calWallConrol+0x2e8>)
 8004b96:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004b98:	4b56      	ldr	r3, [pc, #344]	; (8004cf4 <calWallConrol+0x2ec>)
 8004b9a:	4a57      	ldr	r2, [pc, #348]	; (8004cf8 <calWallConrol+0x2f0>)
 8004b9c:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004ba6:	f002 f909 	bl	8006dbc <pl_yellow_LED_off>
 8004baa:	f001 ba4c 	b.w	8006046 <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 8004bae:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <calWallConrol+0x2c8>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	f040 82ef 	bne.w	8005196 <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004bb8:	4b46      	ldr	r3, [pc, #280]	; (8004cd4 <calWallConrol+0x2cc>)
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 809d 	beq.w	8004d00 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004bc6:	4b3d      	ldr	r3, [pc, #244]	; (8004cbc <calWallConrol+0x2b4>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004bce:	db16      	blt.n	8004bfe <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004bd0:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <calWallConrol+0x2f4>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fb fccd 	bl	8000574 <__aeabi_i2d>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	4690      	mov	r8, r2
 8004be0:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004be4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004be8:	f7fb fcd6 	bl	8000598 <__aeabi_f2d>
 8004bec:	4602      	mov	r2, r0
 8004bee:	460b      	mov	r3, r1
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb ffb8 	bl	8000b68 <__aeabi_dcmpgt>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d037      	beq.n	8004c6e <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004bfe:	4b35      	ldr	r3, [pc, #212]	; (8004cd4 <calWallConrol+0x2cc>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b2da      	uxtb	r2, r3
 8004c06:	4b33      	ldr	r3, [pc, #204]	; (8004cd4 <calWallConrol+0x2cc>)
 8004c08:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004c12:	2300      	movs	r3, #0
 8004c14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c18:	e021      	b.n	8004c5e <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004c1a:	4a28      	ldr	r2, [pc, #160]	; (8004cbc <calWallConrol+0x2b4>)
 8004c1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c2c:	4b2d      	ldr	r3, [pc, #180]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c2e:	edd3 7a00 	vldr	s15, [r3]
 8004c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	dd0b      	ble.n	8004c54 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <calWallConrol+0x2b4>)
 8004c3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c46:	ee07 3a90 	vmov	s15, r3
 8004c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c4e:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <calWallConrol+0x2dc>)
 8004c50:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004c54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c62:	2b13      	cmp	r3, #19
 8004c64:	ddd9      	ble.n	8004c1a <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <calWallConrol+0x2ec>)
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004c6e:	4b1b      	ldr	r3, [pc, #108]	; (8004cdc <calWallConrol+0x2d4>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e066      	b.n	8004d44 <calWallConrol+0x33c>
 8004c76:	bf00      	nop
 8004c78:	33333333 	.word	0x33333333
 8004c7c:	3fd33333 	.word	0x3fd33333
 8004c80:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c84:	bf70624d 	.word	0xbf70624d
 8004c88:	33333333 	.word	0x33333333
 8004c8c:	3fe33333 	.word	0x3fe33333
 8004c90:	bc6a7efa 	.word	0xbc6a7efa
 8004c94:	3f789374 	.word	0x3f789374
 8004c98:	20000808 	.word	0x20000808
 8004c9c:	435c0000 	.word	0x435c0000
 8004ca0:	43480000 	.word	0x43480000
 8004ca4:	200004d8 	.word	0x200004d8
 8004ca8:	447a0000 	.word	0x447a0000
 8004cac:	43960000 	.word	0x43960000
 8004cb0:	c0800000 	.word	0xc0800000
 8004cb4:	431d0000 	.word	0x431d0000
 8004cb8:	42dc0000 	.word	0x42dc0000
 8004cbc:	200002b8 	.word	0x200002b8
 8004cc0:	44228000 	.word	0x44228000
 8004cc4:	450fc000 	.word	0x450fc000
 8004cc8:	44160000 	.word	0x44160000
 8004ccc:	44fa0000 	.word	0x44fa0000
 8004cd0:	20000590 	.word	0x20000590
 8004cd4:	20000593 	.word	0x20000593
 8004cd8:	20000595 	.word	0x20000595
 8004cdc:	20000596 	.word	0x20000596
 8004ce0:	20000597 	.word	0x20000597
 8004ce4:	20000598 	.word	0x20000598
 8004ce8:	44be6000 	.word	0x44be6000
 8004cec:	2000059c 	.word	0x2000059c
 8004cf0:	44974000 	.word	0x44974000
 8004cf4:	200005a0 	.word	0x200005a0
 8004cf8:	41a00000 	.word	0x41a00000
 8004cfc:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004d00:	4bbf      	ldr	r3, [pc, #764]	; (8005000 <calWallConrol+0x5f8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004d08:	dd1c      	ble.n	8004d44 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004d0a:	4bbe      	ldr	r3, [pc, #760]	; (8005004 <calWallConrol+0x5fc>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fb fc30 	bl	8000574 <__aeabi_i2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4614      	mov	r4, r2
 8004d1a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004d1e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d22:	f7fb fc39 	bl	8000598 <__aeabi_f2d>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4620      	mov	r0, r4
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	f7fb fefd 	bl	8000b2c <__aeabi_dcmplt>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004d38:	4bb3      	ldr	r3, [pc, #716]	; (8005008 <calWallConrol+0x600>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	4bb1      	ldr	r3, [pc, #708]	; (8005008 <calWallConrol+0x600>)
 8004d42:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004d44:	4bb0      	ldr	r3, [pc, #704]	; (8005008 <calWallConrol+0x600>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d05c      	beq.n	8004e0e <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004d54:	4baa      	ldr	r3, [pc, #680]	; (8005000 <calWallConrol+0x5f8>)
 8004d56:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004d5a:	f240 2225 	movw	r2, #549	; 0x225
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	dd17      	ble.n	8004d92 <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d62:	4ba8      	ldr	r3, [pc, #672]	; (8005004 <calWallConrol+0x5fc>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fb fc04 	bl	8000574 <__aeabi_i2d>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	613a      	str	r2, [r7, #16]
 8004d72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d76:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004d78:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004d7c:	f7fb fc0c 	bl	8000598 <__aeabi_f2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d84:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d88:	f7fb feee 	bl	8000b68 <__aeabi_dcmpgt>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d039      	beq.n	8004e06 <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004d92:	4b9d      	ldr	r3, [pc, #628]	; (8005008 <calWallConrol+0x600>)
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	3b02      	subs	r3, #2
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b9b      	ldr	r3, [pc, #620]	; (8005008 <calWallConrol+0x600>)
 8004d9c:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004d9e:	4b9b      	ldr	r3, [pc, #620]	; (800500c <calWallConrol+0x604>)
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dac:	e023      	b.n	8004df6 <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004dae:	4a94      	ldr	r2, [pc, #592]	; (8005000 <calWallConrol+0x5f8>)
 8004db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004db4:	3350      	adds	r3, #80	; 0x50
 8004db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dba:	ee07 3a90 	vmov	s15, r3
 8004dbe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dc2:	4b92      	ldr	r3, [pc, #584]	; (800500c <calWallConrol+0x604>)
 8004dc4:	edd3 7a00 	vldr	s15, [r3]
 8004dc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd0:	dd0c      	ble.n	8004dec <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004dd2:	4a8b      	ldr	r2, [pc, #556]	; (8005000 <calWallConrol+0x5f8>)
 8004dd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd8:	3350      	adds	r3, #80	; 0x50
 8004dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004de6:	4b89      	ldr	r3, [pc, #548]	; (800500c <calWallConrol+0x604>)
 8004de8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df0:	3301      	adds	r3, #1
 8004df2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004df6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dfa:	2b13      	cmp	r3, #19
 8004dfc:	ddd7      	ble.n	8004dae <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8004dfe:	4b84      	ldr	r3, [pc, #528]	; (8005010 <calWallConrol+0x608>)
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004e06:	4b83      	ldr	r3, [pc, #524]	; (8005014 <calWallConrol+0x60c>)
 8004e08:	2200      	movs	r2, #0
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e024      	b.n	8004e58 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004e0e:	4b7c      	ldr	r3, [pc, #496]	; (8005000 <calWallConrol+0x5f8>)
 8004e10:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e14:	f240 2226 	movw	r2, #550	; 0x226
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	dd1d      	ble.n	8004e58 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e1c:	4b79      	ldr	r3, [pc, #484]	; (8005004 <calWallConrol+0x5fc>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fb fba7 	bl	8000574 <__aeabi_i2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	60ba      	str	r2, [r7, #8]
 8004e2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e30:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004e32:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004e36:	f7fb fbaf 	bl	8000598 <__aeabi_f2d>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e42:	f7fb fe73 	bl	8000b2c <__aeabi_dcmplt>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004e4c:	4b6e      	ldr	r3, [pc, #440]	; (8005008 <calWallConrol+0x600>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	3302      	adds	r3, #2
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	4b6c      	ldr	r3, [pc, #432]	; (8005008 <calWallConrol+0x600>)
 8004e56:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004e58:	4b6b      	ldr	r3, [pc, #428]	; (8005008 <calWallConrol+0x600>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	f201 80f2 	bhi.w	8006046 <calWallConrol+0x163e>
 8004e62:	a201      	add	r2, pc, #4	; (adr r2, 8004e68 <calWallConrol+0x460>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e79 	.word	0x08004e79
 8004e6c:	08004f7f 	.word	0x08004f7f
 8004e70:	0800502d 	.word	0x0800502d
 8004e74:	08005097 	.word	0x08005097
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004e78:	4b65      	ldr	r3, [pc, #404]	; (8005010 <calWallConrol+0x608>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fb fb8b 	bl	8000598 <__aeabi_f2d>
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
 8004e86:	4b64      	ldr	r3, [pc, #400]	; (8005018 <calWallConrol+0x610>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fb fb84 	bl	8000598 <__aeabi_f2d>
 8004e90:	a357      	add	r3, pc, #348	; (adr r3, 8004ff0 <calWallConrol+0x5e8>)
 8004e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e96:	f7fb fbd7 	bl	8000648 <__aeabi_dmul>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	4629      	mov	r1, r5
 8004ea2:	f7fb fa1b 	bl	80002dc <__adddf3>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	f7fb fea3 	bl	8000bf8 <__aeabi_d2f>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	4a56      	ldr	r2, [pc, #344]	; (8005010 <calWallConrol+0x608>)
 8004eb6:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8004eb8:	4b55      	ldr	r3, [pc, #340]	; (8005010 <calWallConrol+0x608>)
 8004eba:	edd3 7a00 	vldr	s15, [r3]
 8004ebe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eca:	d52e      	bpl.n	8004f2a <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004ecc:	4b53      	ldr	r3, [pc, #332]	; (800501c <calWallConrol+0x614>)
 8004ece:	edd3 7a00 	vldr	s15, [r3]
 8004ed2:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005020 <calWallConrol+0x618>
 8004ed6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004eda:	eef1 6a67 	vneg.f32	s13, s15
 8004ede:	4b4f      	ldr	r3, [pc, #316]	; (800501c <calWallConrol+0x614>)
 8004ee0:	edd3 7a00 	vldr	s15, [r3]
 8004ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8004ee8:	4b48      	ldr	r3, [pc, #288]	; (800500c <calWallConrol+0x604>)
 8004eea:	edd3 7a00 	vldr	s15, [r3]
 8004eee:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005028 <calWallConrol+0x620>
 8004ef2:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8004ef6:	4b45      	ldr	r3, [pc, #276]	; (800500c <calWallConrol+0x604>)
 8004ef8:	edd3 6a00 	vldr	s13, [r3]
 8004efc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f04:	ee17 0a90 	vmov	r0, s15
 8004f08:	f7fb fb46 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004f0c:	a33a      	add	r3, pc, #232	; (adr r3, 8004ff8 <calWallConrol+0x5f0>)
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	f7fb fb99 	bl	8000648 <__aeabi_dmul>
 8004f16:	4602      	mov	r2, r0
 8004f18:	460b      	mov	r3, r1
 8004f1a:	4610      	mov	r0, r2
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	f7fb fe6b 	bl	8000bf8 <__aeabi_d2f>
 8004f22:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8004f24:	4a3f      	ldr	r2, [pc, #252]	; (8005024 <calWallConrol+0x61c>)
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	e003      	b.n	8004f32 <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <calWallConrol+0x61c>)
 8004f2c:	f04f 0200 	mov.w	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004f32:	4b3c      	ldr	r3, [pc, #240]	; (8005024 <calWallConrol+0x61c>)
 8004f34:	ed93 7a00 	vldr	s14, [r3]
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <calWallConrol+0x61c>)
 8004f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f42:	4b38      	ldr	r3, [pc, #224]	; (8005024 <calWallConrol+0x61c>)
 8004f44:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004f48:	4b36      	ldr	r3, [pc, #216]	; (8005024 <calWallConrol+0x61c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	; (8005024 <calWallConrol+0x61c>)
 8004f4e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004f50:	4b34      	ldr	r3, [pc, #208]	; (8005024 <calWallConrol+0x61c>)
 8004f52:	ed93 7a00 	vldr	s14, [r3]
 8004f56:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004f5e:	4b31      	ldr	r3, [pc, #196]	; (8005024 <calWallConrol+0x61c>)
 8004f60:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f64:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f70:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8004f74:	2000      	movs	r0, #0
 8004f76:	f001 ff5b 	bl	8006e30 <pl_yellow_LED_count>
			break;
 8004f7a:	f001 b864 	b.w	8006046 <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f7e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004f82:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005020 <calWallConrol+0x618>
 8004f86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f8a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004f8e:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8004f92:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f9a:	4b22      	ldr	r3, [pc, #136]	; (8005024 <calWallConrol+0x61c>)
 8004f9c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004fa0:	4b20      	ldr	r3, [pc, #128]	; (8005024 <calWallConrol+0x61c>)
 8004fa2:	ed93 7a00 	vldr	s14, [r3]
 8004fa6:	4b1f      	ldr	r3, [pc, #124]	; (8005024 <calWallConrol+0x61c>)
 8004fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fb0:	4b1c      	ldr	r3, [pc, #112]	; (8005024 <calWallConrol+0x61c>)
 8004fb2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <calWallConrol+0x61c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <calWallConrol+0x61c>)
 8004fbc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004fbe:	4b19      	ldr	r3, [pc, #100]	; (8005024 <calWallConrol+0x61c>)
 8004fc0:	ed93 7a00 	vldr	s14, [r3]
 8004fc4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004fc8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004fcc:	4b15      	ldr	r3, [pc, #84]	; (8005024 <calWallConrol+0x61c>)
 8004fce:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fd2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fde:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8004fe2:	2080      	movs	r0, #128	; 0x80
 8004fe4:	f001 ff24 	bl	8006e30 <pl_yellow_LED_count>
			break;
 8004fe8:	f001 b82d 	b.w	8006046 <calWallConrol+0x163e>
 8004fec:	f3af 8000 	nop.w
 8004ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ff4:	3f50624d 	.word	0x3f50624d
 8004ff8:	66666666 	.word	0x66666666
 8004ffc:	3fe66666 	.word	0x3fe66666
 8005000:	200002b8 	.word	0x200002b8
 8005004:	20000448 	.word	0x20000448
 8005008:	20000593 	.word	0x20000593
 800500c:	2000059c 	.word	0x2000059c
 8005010:	200005a0 	.word	0x200005a0
 8005014:	20000597 	.word	0x20000597
 8005018:	200004d8 	.word	0x200004d8
 800501c:	20000598 	.word	0x20000598
 8005020:	44be6000 	.word	0x44be6000
 8005024:	2000056c 	.word	0x2000056c
 8005028:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 800502c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005030:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005028 <calWallConrol+0x620>
 8005034:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005038:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 800503c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005040:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005044:	4baa      	ldr	r3, [pc, #680]	; (80052f0 <calWallConrol+0x8e8>)
 8005046:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800504a:	4ba9      	ldr	r3, [pc, #676]	; (80052f0 <calWallConrol+0x8e8>)
 800504c:	ed93 7a00 	vldr	s14, [r3]
 8005050:	4ba7      	ldr	r3, [pc, #668]	; (80052f0 <calWallConrol+0x8e8>)
 8005052:	edd3 7a01 	vldr	s15, [r3, #4]
 8005056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800505a:	4ba5      	ldr	r3, [pc, #660]	; (80052f0 <calWallConrol+0x8e8>)
 800505c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005060:	4ba3      	ldr	r3, [pc, #652]	; (80052f0 <calWallConrol+0x8e8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4aa2      	ldr	r2, [pc, #648]	; (80052f0 <calWallConrol+0x8e8>)
 8005066:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005068:	4ba1      	ldr	r3, [pc, #644]	; (80052f0 <calWallConrol+0x8e8>)
 800506a:	ed93 7a00 	vldr	s14, [r3]
 800506e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005072:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005076:	4b9e      	ldr	r3, [pc, #632]	; (80052f0 <calWallConrol+0x8e8>)
 8005078:	edd3 6a02 	vldr	s13, [r3, #8]
 800507c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005080:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005088:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 800508c:	2001      	movs	r0, #1
 800508e:	f001 fecf 	bl	8006e30 <pl_yellow_LED_count>
			break;
 8005092:	f000 bfd8 	b.w	8006046 <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005096:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800509a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80052f4 <calWallConrol+0x8ec>
 800509e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80050a2:	eef1 6a67 	vneg.f32	s13, s15
 80050a6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80050ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80050b2:	eddf 6a91 	vldr	s13, [pc, #580]	; 80052f8 <calWallConrol+0x8f0>
 80050b6:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 80050ba:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80050be:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 80050c2:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 80050c6:	4b8a      	ldr	r3, [pc, #552]	; (80052f0 <calWallConrol+0x8e8>)
 80050c8:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80050cc:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <calWallConrol+0x8e8>)
 80050ce:	ed93 7a00 	vldr	s14, [r3]
 80050d2:	4b87      	ldr	r3, [pc, #540]	; (80052f0 <calWallConrol+0x8e8>)
 80050d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050dc:	4b84      	ldr	r3, [pc, #528]	; (80052f0 <calWallConrol+0x8e8>)
 80050de:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050e2:	4b83      	ldr	r3, [pc, #524]	; (80052f0 <calWallConrol+0x8e8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a82      	ldr	r2, [pc, #520]	; (80052f0 <calWallConrol+0x8e8>)
 80050e8:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050ea:	4b81      	ldr	r3, [pc, #516]	; (80052f0 <calWallConrol+0x8e8>)
 80050ec:	ed93 7a00 	vldr	s14, [r3]
 80050f0:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050f4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050f8:	4b7d      	ldr	r3, [pc, #500]	; (80052f0 <calWallConrol+0x8e8>)
 80050fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80050fe:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005102:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800510a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 800510e:	2081      	movs	r0, #129	; 0x81
 8005110:	f001 fe8e 	bl	8006e30 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005114:	4b79      	ldr	r3, [pc, #484]	; (80052fc <calWallConrol+0x8f4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fa2b 	bl	8000574 <__aeabi_i2d>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	603a      	str	r2, [r7, #0]
 8005124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	4b74      	ldr	r3, [pc, #464]	; (8005300 <calWallConrol+0x8f8>)
 8005130:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005134:	f7fb fcfa 	bl	8000b2c <__aeabi_dcmplt>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d01a      	beq.n	8005174 <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 800513e:	4b6f      	ldr	r3, [pc, #444]	; (80052fc <calWallConrol+0x8f4>)
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb fa16 	bl	8000574 <__aeabi_i2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4692      	mov	sl, r2
 800514e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	4b6a      	ldr	r3, [pc, #424]	; (8005300 <calWallConrol+0x8f8>)
 8005158:	4650      	mov	r0, sl
 800515a:	4659      	mov	r1, fp
 800515c:	f7fb fce6 	bl	8000b2c <__aeabi_dcmplt>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d006      	beq.n	8005174 <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005166:	4b67      	ldr	r3, [pc, #412]	; (8005304 <calWallConrol+0x8fc>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	3301      	adds	r3, #1
 800516c:	b2da      	uxtb	r2, r3
 800516e:	4b65      	ldr	r3, [pc, #404]	; (8005304 <calWallConrol+0x8fc>)
 8005170:	701a      	strb	r2, [r3, #0]
 8005172:	e002      	b.n	800517a <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005174:	4b63      	ldr	r3, [pc, #396]	; (8005304 <calWallConrol+0x8fc>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 800517a:	4b62      	ldr	r3, [pc, #392]	; (8005304 <calWallConrol+0x8fc>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b18      	cmp	r3, #24
 8005180:	f240 8760 	bls.w	8006044 <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 8005184:	4b60      	ldr	r3, [pc, #384]	; (8005308 <calWallConrol+0x900>)
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 800518c:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <calWallConrol+0x8fc>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005192:	f000 bf57 	b.w	8006044 <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005196:	4b5d      	ldr	r3, [pc, #372]	; (800530c <calWallConrol+0x904>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b02      	cmp	r3, #2
 800519c:	f000 8753 	beq.w	8006046 <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 80051a0:	4b5a      	ldr	r3, [pc, #360]	; (800530c <calWallConrol+0x904>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	f040 874e 	bne.w	8006046 <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 80051aa:	4b59      	ldr	r3, [pc, #356]	; (8005310 <calWallConrol+0x908>)
 80051ac:	edd3 7a00 	vldr	s15, [r3]
 80051b0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005314 <calWallConrol+0x90c>
 80051b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051bc:	dd05      	ble.n	80051ca <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 80051be:	4b56      	ldr	r3, [pc, #344]	; (8005318 <calWallConrol+0x910>)
 80051c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 80051c4:	4b55      	ldr	r3, [pc, #340]	; (800531c <calWallConrol+0x914>)
 80051c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051c8:	e024      	b.n	8005214 <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80051ca:	4b51      	ldr	r3, [pc, #324]	; (8005310 <calWallConrol+0x908>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb f9e2 	bl	8000598 <__aeabi_f2d>
 80051d4:	a342      	add	r3, pc, #264	; (adr r3, 80052e0 <calWallConrol+0x8d8>)
 80051d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051da:	f7fb fa35 	bl	8000648 <__aeabi_dmul>
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	f7fb fd07 	bl	8000bf8 <__aeabi_d2f>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80051f0:	4b47      	ldr	r3, [pc, #284]	; (8005310 <calWallConrol+0x908>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb f9cf 	bl	8000598 <__aeabi_f2d>
 80051fa:	a33b      	add	r3, pc, #236	; (adr r3, 80052e8 <calWallConrol+0x8e0>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	f7fb fa22 	bl	8000648 <__aeabi_dmul>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4610      	mov	r0, r2
 800520a:	4619      	mov	r1, r3
 800520c:	f7fb fcf4 	bl	8000bf8 <__aeabi_d2f>
 8005210:	4603      	mov	r3, r0
 8005212:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005214:	4b42      	ldr	r3, [pc, #264]	; (8005320 <calWallConrol+0x918>)
 8005216:	edd3 7a00 	vldr	s15, [r3]
 800521a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800521e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	dd12      	ble.n	800524e <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005228:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <calWallConrol+0x918>)
 800522a:	edd3 7a00 	vldr	s15, [r3]
 800522e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005232:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523a:	d808      	bhi.n	800524e <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <calWallConrol+0x91c>)
 800523e:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <calWallConrol+0x920>)
 8005242:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <calWallConrol+0x924>)
 8005246:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005248:	4b39      	ldr	r3, [pc, #228]	; (8005330 <calWallConrol+0x928>)
 800524a:	657b      	str	r3, [r7, #84]	; 0x54
 800524c:	e0a7      	b.n	800539e <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 800524e:	4b34      	ldr	r3, [pc, #208]	; (8005320 <calWallConrol+0x918>)
 8005250:	edd3 7a00 	vldr	s15, [r3]
 8005254:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005334 <calWallConrol+0x92c>
 8005258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800525c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005260:	dd12      	ble.n	8005288 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 8005262:	4b2f      	ldr	r3, [pc, #188]	; (8005320 <calWallConrol+0x918>)
 8005264:	edd3 7a00 	vldr	s15, [r3]
 8005268:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005338 <calWallConrol+0x930>
 800526c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	d808      	bhi.n	8005288 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <calWallConrol+0x934>)
 8005278:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <calWallConrol+0x938>)
 800527c:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800527e:	4b31      	ldr	r3, [pc, #196]	; (8005344 <calWallConrol+0x93c>)
 8005280:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005282:	4b31      	ldr	r3, [pc, #196]	; (8005348 <calWallConrol+0x940>)
 8005284:	657b      	str	r3, [r7, #84]	; 0x54
 8005286:	e08a      	b.n	800539e <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005288:	4b25      	ldr	r3, [pc, #148]	; (8005320 <calWallConrol+0x918>)
 800528a:	edd3 7a00 	vldr	s15, [r3]
 800528e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800534c <calWallConrol+0x944>
 8005292:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529a:	dd12      	ble.n	80052c2 <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 800529c:	4b20      	ldr	r3, [pc, #128]	; (8005320 <calWallConrol+0x918>)
 800529e:	edd3 7a00 	vldr	s15, [r3]
 80052a2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005350 <calWallConrol+0x948>
 80052a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052ae:	d808      	bhi.n	80052c2 <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <calWallConrol+0x94c>)
 80052b2:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <calWallConrol+0x950>)
 80052b6:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 80052b8:	4b28      	ldr	r3, [pc, #160]	; (800535c <calWallConrol+0x954>)
 80052ba:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <calWallConrol+0x958>)
 80052be:	657b      	str	r3, [r7, #84]	; 0x54
 80052c0:	e06d      	b.n	800539e <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 80052c2:	4b28      	ldr	r3, [pc, #160]	; (8005364 <calWallConrol+0x95c>)
 80052c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052c8:	2bb4      	cmp	r3, #180	; 0xb4
 80052ca:	dd4f      	ble.n	800536c <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80052cc:	4b26      	ldr	r3, [pc, #152]	; (8005368 <calWallConrol+0x960>)
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	f043 0302 	orr.w	r3, r3, #2
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <calWallConrol+0x960>)
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e04e      	b.n	800537a <calWallConrol+0x972>
 80052dc:	f3af 8000 	nop.w
 80052e0:	66666666 	.word	0x66666666
 80052e4:	3fe66666 	.word	0x3fe66666
 80052e8:	1eb851ec 	.word	0x1eb851ec
 80052ec:	bfb1eb85 	.word	0xbfb1eb85
 80052f0:	2000056c 	.word	0x2000056c
 80052f4:	44be6000 	.word	0x44be6000
 80052f8:	44974000 	.word	0x44974000
 80052fc:	20000448 	.word	0x20000448
 8005300:	403e0000 	.word	0x403e0000
 8005304:	20000595 	.word	0x20000595
 8005308:	20000544 	.word	0x20000544
 800530c:	20000590 	.word	0x20000590
 8005310:	200004d8 	.word	0x200004d8
 8005314:	447a0000 	.word	0x447a0000
 8005318:	442f0000 	.word	0x442f0000
 800531c:	c28c0000 	.word	0xc28c0000
 8005320:	200005dc 	.word	0x200005dc
 8005324:	4519d2f5 	.word	0x4519d2f5
 8005328:	c40e02ec 	.word	0xc40e02ec
 800532c:	423da41a 	.word	0x423da41a
 8005330:	bfa28f5c 	.word	0xbfa28f5c
 8005334:	420c0000 	.word	0x420c0000
 8005338:	42700000 	.word	0x42700000
 800533c:	440d1857 	.word	0x440d1857
 8005340:	c181619b 	.word	0xc181619b
 8005344:	3eaab6f2 	.word	0x3eaab6f2
 8005348:	bacaf00f 	.word	0xbacaf00f
 800534c:	42c80000 	.word	0x42c80000
 8005350:	42f00000 	.word	0x42f00000
 8005354:	4559c991 	.word	0x4559c991
 8005358:	41cef541 	.word	0x41cef541
 800535c:	bfbda504 	.word	0xbfbda504
 8005360:	3c22339c 	.word	0x3c22339c
 8005364:	200002b8 	.word	0x200002b8
 8005368:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800536c:	4b79      	ldr	r3, [pc, #484]	; (8005554 <calWallConrol+0xb4c>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f023 0302 	bic.w	r3, r3, #2
 8005374:	b2da      	uxtb	r2, r3
 8005376:	4b77      	ldr	r3, [pc, #476]	; (8005554 <calWallConrol+0xb4c>)
 8005378:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 800537a:	4b77      	ldr	r3, [pc, #476]	; (8005558 <calWallConrol+0xb50>)
 800537c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005380:	ee07 3a90 	vmov	s15, r3
 8005384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005388:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 800539e:	4b6f      	ldr	r3, [pc, #444]	; (800555c <calWallConrol+0xb54>)
 80053a0:	edd3 7a00 	vldr	s15, [r3]
 80053a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b0:	dd12      	ble.n	80053d8 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80053b2:	4b6a      	ldr	r3, [pc, #424]	; (800555c <calWallConrol+0xb54>)
 80053b4:	edd3 7a00 	vldr	s15, [r3]
 80053b8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80053bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053c4:	d808      	bhi.n	80053d8 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 80053c6:	4b66      	ldr	r3, [pc, #408]	; (8005560 <calWallConrol+0xb58>)
 80053c8:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80053ca:	4b66      	ldr	r3, [pc, #408]	; (8005564 <calWallConrol+0xb5c>)
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80053ce:	4b66      	ldr	r3, [pc, #408]	; (8005568 <calWallConrol+0xb60>)
 80053d0:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80053d2:	4b66      	ldr	r3, [pc, #408]	; (800556c <calWallConrol+0xb64>)
 80053d4:	647b      	str	r3, [r7, #68]	; 0x44
 80053d6:	e05d      	b.n	8005494 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80053d8:	4b60      	ldr	r3, [pc, #384]	; (800555c <calWallConrol+0xb54>)
 80053da:	edd3 7a00 	vldr	s15, [r3]
 80053de:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005570 <calWallConrol+0xb68>
 80053e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ea:	dd12      	ble.n	8005412 <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80053ec:	4b5b      	ldr	r3, [pc, #364]	; (800555c <calWallConrol+0xb54>)
 80053ee:	edd3 7a00 	vldr	s15, [r3]
 80053f2:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005574 <calWallConrol+0xb6c>
 80053f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fe:	d808      	bhi.n	8005412 <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005400:	4b5d      	ldr	r3, [pc, #372]	; (8005578 <calWallConrol+0xb70>)
 8005402:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 8005404:	4b5d      	ldr	r3, [pc, #372]	; (800557c <calWallConrol+0xb74>)
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005408:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <calWallConrol+0xb78>)
 800540a:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 800540c:	4b5d      	ldr	r3, [pc, #372]	; (8005584 <calWallConrol+0xb7c>)
 800540e:	647b      	str	r3, [r7, #68]	; 0x44
 8005410:	e040      	b.n	8005494 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 8005412:	4b52      	ldr	r3, [pc, #328]	; (800555c <calWallConrol+0xb54>)
 8005414:	edd3 7a00 	vldr	s15, [r3]
 8005418:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005588 <calWallConrol+0xb80>
 800541c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005424:	dd12      	ble.n	800544c <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 8005426:	4b4d      	ldr	r3, [pc, #308]	; (800555c <calWallConrol+0xb54>)
 8005428:	edd3 7a00 	vldr	s15, [r3]
 800542c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800558c <calWallConrol+0xb84>
 8005430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005438:	d808      	bhi.n	800544c <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 800543a:	4b55      	ldr	r3, [pc, #340]	; (8005590 <calWallConrol+0xb88>)
 800543c:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 800543e:	4b55      	ldr	r3, [pc, #340]	; (8005594 <calWallConrol+0xb8c>)
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 8005442:	4b55      	ldr	r3, [pc, #340]	; (8005598 <calWallConrol+0xb90>)
 8005444:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 8005446:	4b55      	ldr	r3, [pc, #340]	; (800559c <calWallConrol+0xb94>)
 8005448:	647b      	str	r3, [r7, #68]	; 0x44
 800544a:	e023      	b.n	8005494 <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 800544c:	4b42      	ldr	r3, [pc, #264]	; (8005558 <calWallConrol+0xb50>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2bb4      	cmp	r3, #180	; 0xb4
 8005452:	dd07      	ble.n	8005464 <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005454:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <calWallConrol+0xb4c>)
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	b2da      	uxtb	r2, r3
 800545e:	4b3d      	ldr	r3, [pc, #244]	; (8005554 <calWallConrol+0xb4c>)
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	e006      	b.n	8005472 <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005464:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <calWallConrol+0xb4c>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f023 0301 	bic.w	r3, r3, #1
 800546c:	b2da      	uxtb	r2, r3
 800546e:	4b39      	ldr	r3, [pc, #228]	; (8005554 <calWallConrol+0xb4c>)
 8005470:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 8005472:	4b39      	ldr	r3, [pc, #228]	; (8005558 <calWallConrol+0xb50>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800547e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 8005482:	f04f 0300 	mov.w	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005488:	f04f 0300 	mov.w	r3, #0
 800548c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 8005494:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005498:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800549c:	4b40      	ldr	r3, [pc, #256]	; (80055a0 <calWallConrol+0xb98>)
 800549e:	edd3 7a00 	vldr	s15, [r3]
 80054a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054a6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054aa:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80054ae:	4b3c      	ldr	r3, [pc, #240]	; (80055a0 <calWallConrol+0xb98>)
 80054b0:	edd3 7a00 	vldr	s15, [r3]
 80054b4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054b8:	4b39      	ldr	r3, [pc, #228]	; (80055a0 <calWallConrol+0xb98>)
 80054ba:	edd3 7a00 	vldr	s15, [r3]
 80054be:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054c2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80054c6:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80054ca:	4b35      	ldr	r3, [pc, #212]	; (80055a0 <calWallConrol+0xb98>)
 80054cc:	edd3 7a00 	vldr	s15, [r3]
 80054d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054d4:	4b32      	ldr	r3, [pc, #200]	; (80055a0 <calWallConrol+0xb98>)
 80054d6:	edd3 7a00 	vldr	s15, [r3]
 80054da:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80054de:	4b30      	ldr	r3, [pc, #192]	; (80055a0 <calWallConrol+0xb98>)
 80054e0:	edd3 7a00 	vldr	s15, [r3]
 80054e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80054e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054ec:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80054f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80054f4:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80054f8:	4b18      	ldr	r3, [pc, #96]	; (800555c <calWallConrol+0xb54>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005502:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005506:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <calWallConrol+0xb54>)
 800550c:	edd3 7a00 	vldr	s15, [r3]
 8005510:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <calWallConrol+0xb54>)
 8005516:	edd3 7a00 	vldr	s15, [r3]
 800551a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800551e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8005522:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005526:	4b0d      	ldr	r3, [pc, #52]	; (800555c <calWallConrol+0xb54>)
 8005528:	edd3 7a00 	vldr	s15, [r3]
 800552c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005530:	4b0a      	ldr	r3, [pc, #40]	; (800555c <calWallConrol+0xb54>)
 8005532:	edd3 7a00 	vldr	s15, [r3]
 8005536:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <calWallConrol+0xb54>)
 800553c:	edd3 7a00 	vldr	s15, [r3]
 8005540:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8005544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005548:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 800554c:	230b      	movs	r3, #11
 800554e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005550:	e041      	b.n	80055d6 <calWallConrol+0xbce>
 8005552:	bf00      	nop
 8005554:	20000593 	.word	0x20000593
 8005558:	200002b8 	.word	0x200002b8
 800555c:	200005e0 	.word	0x200005e0
 8005560:	44f286e9 	.word	0x44f286e9
 8005564:	c3c54757 	.word	0xc3c54757
 8005568:	41e9f1c4 	.word	0x41e9f1c4
 800556c:	bf307804 	.word	0xbf307804
 8005570:	420c0000 	.word	0x420c0000
 8005574:	42700000 	.word	0x42700000
 8005578:	43b4a7f9 	.word	0x43b4a7f9
 800557c:	c04f43da 	.word	0xc04f43da
 8005580:	3a9164ed 	.word	0x3a9164ed
 8005584:	3a8c6aa9 	.word	0x3a8c6aa9
 8005588:	42c80000 	.word	0x42c80000
 800558c:	42f00000 	.word	0x42f00000
 8005590:	478c2a26 	.word	0x478c2a26
 8005594:	c4fbb229 	.word	0xc4fbb229
 8005598:	4195b611 	.word	0x4195b611
 800559c:	bd67d567 	.word	0xbd67d567
 80055a0:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	3b01      	subs	r3, #1
 80055a8:	4a9c      	ldr	r2, [pc, #624]	; (800581c <calWallConrol+0xe14>)
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	499a      	ldr	r1, [pc, #616]	; (800581c <calWallConrol+0xe14>)
 80055b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 80055ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055bc:	3b01      	subs	r3, #1
 80055be:	4a98      	ldr	r2, [pc, #608]	; (8005820 <calWallConrol+0xe18>)
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4996      	ldr	r1, [pc, #600]	; (8005820 <calWallConrol+0xe18>)
 80055c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80055d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d2:	3b01      	subs	r3, #1
 80055d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d8:	2b00      	cmp	r3, #0
 80055da:	dce3      	bgt.n	80055a4 <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80055dc:	4a8f      	ldr	r2, [pc, #572]	; (800581c <calWallConrol+0xe14>)
 80055de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e0:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80055e2:	4a8f      	ldr	r2, [pc, #572]	; (8005820 <calWallConrol+0xe18>)
 80055e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055e6:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80055e8:	4b8c      	ldr	r3, [pc, #560]	; (800581c <calWallConrol+0xe14>)
 80055ea:	ed93 7a00 	vldr	s14, [r3]
 80055ee:	4b8b      	ldr	r3, [pc, #556]	; (800581c <calWallConrol+0xe14>)
 80055f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f8:	4b8a      	ldr	r3, [pc, #552]	; (8005824 <calWallConrol+0xe1c>)
 80055fa:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80055fe:	4b88      	ldr	r3, [pc, #544]	; (8005820 <calWallConrol+0xe18>)
 8005600:	ed93 7a00 	vldr	s14, [r3]
 8005604:	4b86      	ldr	r3, [pc, #536]	; (8005820 <calWallConrol+0xe18>)
 8005606:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800560a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800560e:	4b86      	ldr	r3, [pc, #536]	; (8005828 <calWallConrol+0xe20>)
 8005610:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005614:	4b85      	ldr	r3, [pc, #532]	; (800582c <calWallConrol+0xe24>)
 8005616:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800561a:	2bb4      	cmp	r3, #180	; 0xb4
 800561c:	dd1a      	ble.n	8005654 <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800561e:	4b84      	ldr	r3, [pc, #528]	; (8005830 <calWallConrol+0xe28>)
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800562a:	4b7e      	ldr	r3, [pc, #504]	; (8005824 <calWallConrol+0xe1c>)
 800562c:	edd3 7a00 	vldr	s15, [r3]
 8005630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005634:	eef0 7ae7 	vabs.f32	s15, s15
 8005638:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005834 <calWallConrol+0xe2c>
 800563c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005644:	d506      	bpl.n	8005654 <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005646:	4b7c      	ldr	r3, [pc, #496]	; (8005838 <calWallConrol+0xe30>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f043 0302 	orr.w	r3, r3, #2
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b79      	ldr	r3, [pc, #484]	; (8005838 <calWallConrol+0xe30>)
 8005652:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005654:	4b75      	ldr	r3, [pc, #468]	; (800582c <calWallConrol+0xe24>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2bb4      	cmp	r3, #180	; 0xb4
 800565a:	dd1a      	ble.n	8005692 <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800565c:	4b74      	ldr	r3, [pc, #464]	; (8005830 <calWallConrol+0xe28>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	ee07 3a90 	vmov	s15, r3
 8005664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005668:	4b6f      	ldr	r3, [pc, #444]	; (8005828 <calWallConrol+0xe20>)
 800566a:	edd3 7a00 	vldr	s15, [r3]
 800566e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005672:	eef0 7ae7 	vabs.f32	s15, s15
 8005676:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005834 <calWallConrol+0xe2c>
 800567a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800567e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005682:	d506      	bpl.n	8005692 <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005684:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <calWallConrol+0xe30>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	f043 0301 	orr.w	r3, r3, #1
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b6a      	ldr	r3, [pc, #424]	; (8005838 <calWallConrol+0xe30>)
 8005690:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005692:	4b66      	ldr	r3, [pc, #408]	; (800582c <calWallConrol+0xe24>)
 8005694:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005698:	2bb3      	cmp	r3, #179	; 0xb3
 800569a:	dd13      	ble.n	80056c4 <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800569c:	4b64      	ldr	r3, [pc, #400]	; (8005830 <calWallConrol+0xe28>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	ee07 3a90 	vmov	s15, r3
 80056a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <calWallConrol+0xe1c>)
 80056aa:	edd3 7a00 	vldr	s15, [r3]
 80056ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b2:	eef0 7ae7 	vabs.f32	s15, s15
 80056b6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005834 <calWallConrol+0xe2c>
 80056ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	dd06      	ble.n	80056d2 <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80056c4:	4b5c      	ldr	r3, [pc, #368]	; (8005838 <calWallConrol+0xe30>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	f023 0302 	bic.w	r3, r3, #2
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	4b5a      	ldr	r3, [pc, #360]	; (8005838 <calWallConrol+0xe30>)
 80056d0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 80056d2:	4b56      	ldr	r3, [pc, #344]	; (800582c <calWallConrol+0xe24>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2bb3      	cmp	r3, #179	; 0xb3
 80056d8:	dd13      	ble.n	8005702 <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80056da:	4b55      	ldr	r3, [pc, #340]	; (8005830 <calWallConrol+0xe28>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <calWallConrol+0xe20>)
 80056e8:	edd3 7a00 	vldr	s15, [r3]
 80056ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f0:	eef0 7ae7 	vabs.f32	s15, s15
 80056f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005834 <calWallConrol+0xe2c>
 80056f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	dd06      	ble.n	8005710 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005702:	4b4d      	ldr	r3, [pc, #308]	; (8005838 <calWallConrol+0xe30>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	b2da      	uxtb	r2, r3
 800570c:	4b4a      	ldr	r3, [pc, #296]	; (8005838 <calWallConrol+0xe30>)
 800570e:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005710:	4b49      	ldr	r3, [pc, #292]	; (8005838 <calWallConrol+0xe30>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	f200 813d 	bhi.w	8005994 <calWallConrol+0xf8c>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <calWallConrol+0xd18>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005731 	.word	0x08005731
 8005724:	08005785 	.word	0x08005785
 8005728:	08005849 	.word	0x08005849
 800572c:	080058df 	.word	0x080058df
		case 0:			//両壁なし
			PID_wall = 0;
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005738:	2000      	movs	r0, #0
 800573a:	f001 faf7 	bl	8006d2c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800573e:	2000      	movs	r0, #0
 8005740:	f001 fb2a 	bl	8006d98 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005744:	4b39      	ldr	r3, [pc, #228]	; (800582c <calWallConrol+0xe24>)
 8005746:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005752:	4b3a      	ldr	r3, [pc, #232]	; (800583c <calWallConrol+0xe34>)
 8005754:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005758:	4b34      	ldr	r3, [pc, #208]	; (800582c <calWallConrol+0xe24>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	ee07 3a90 	vmov	s15, r3
 8005760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005764:	4b36      	ldr	r3, [pc, #216]	; (8005840 <calWallConrol+0xe38>)
 8005766:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 800576a:	4b36      	ldr	r3, [pc, #216]	; (8005844 <calWallConrol+0xe3c>)
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005772:	4b34      	ldr	r3, [pc, #208]	; (8005844 <calWallConrol+0xe3c>)
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 800577a:	4b32      	ldr	r3, [pc, #200]	; (8005844 <calWallConrol+0xe3c>)
 800577c:	f04f 0200 	mov.w	r2, #0
 8005780:	605a      	str	r2, [r3, #4]
			break;
 8005782:	e107      	b.n	8005994 <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005784:	2000      	movs	r0, #0
 8005786:	f001 fad1 	bl	8006d2c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 800578a:	2001      	movs	r0, #1
 800578c:	f001 fb04 	bl	8006d98 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005790:	4b26      	ldr	r3, [pc, #152]	; (800582c <calWallConrol+0xe24>)
 8005792:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005796:	ee07 3a90 	vmov	s15, r3
 800579a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800579e:	4b27      	ldr	r3, [pc, #156]	; (800583c <calWallConrol+0xe34>)
 80057a0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 80057a4:	4a26      	ldr	r2, [pc, #152]	; (8005840 <calWallConrol+0xe38>)
 80057a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a8:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057aa:	4b20      	ldr	r3, [pc, #128]	; (800582c <calWallConrol+0xe24>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	ee07 3a90 	vmov	s15, r3
 80057b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80057ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057be:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 80057c2:	4b1a      	ldr	r3, [pc, #104]	; (800582c <calWallConrol+0xe24>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	ee07 3a90 	vmov	s15, r3
 80057ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057d2:	4b1c      	ldr	r3, [pc, #112]	; (8005844 <calWallConrol+0xe3c>)
 80057d4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80057d8:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <calWallConrol+0xe3c>)
 80057da:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80057de:	4b19      	ldr	r3, [pc, #100]	; (8005844 <calWallConrol+0xe3c>)
 80057e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80057e4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80057e8:	4b16      	ldr	r3, [pc, #88]	; (8005844 <calWallConrol+0xe3c>)
 80057ea:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80057ee:	4b15      	ldr	r3, [pc, #84]	; (8005844 <calWallConrol+0xe3c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a14      	ldr	r2, [pc, #80]	; (8005844 <calWallConrol+0xe3c>)
 80057f4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80057f6:	4b13      	ldr	r3, [pc, #76]	; (8005844 <calWallConrol+0xe3c>)
 80057f8:	ed93 7a00 	vldr	s14, [r3]
 80057fc:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005800:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <calWallConrol+0xe3c>)
 8005806:	edd3 6a02 	vldr	s13, [r3, #8]
 800580a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800580e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005816:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800581a:	e0bb      	b.n	8005994 <calWallConrol+0xf8c>
 800581c:	20000608 	.word	0x20000608
 8005820:	20000638 	.word	0x20000638
 8005824:	200006c8 	.word	0x200006c8
 8005828:	200006cc 	.word	0x200006cc
 800582c:	200002b8 	.word	0x200002b8
 8005830:	20000448 	.word	0x20000448
 8005834:	42a00000 	.word	0x42a00000
 8005838:	20000593 	.word	0x20000593
 800583c:	200005ac 	.word	0x200005ac
 8005840:	200005b0 	.word	0x200005b0
 8005844:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005848:	2001      	movs	r0, #1
 800584a:	f001 fa6f 	bl	8006d2c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800584e:	2000      	movs	r0, #0
 8005850:	f001 faa2 	bl	8006d98 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005854:	4aa4      	ldr	r2, [pc, #656]	; (8005ae8 <calWallConrol+0x10e0>)
 8005856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005858:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 800585a:	4ba4      	ldr	r3, [pc, #656]	; (8005aec <calWallConrol+0x10e4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	ee07 3a90 	vmov	s15, r3
 8005862:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005866:	4ba2      	ldr	r3, [pc, #648]	; (8005af0 <calWallConrol+0x10e8>)
 8005868:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 800586c:	4b9f      	ldr	r3, [pc, #636]	; (8005aec <calWallConrol+0x10e4>)
 800586e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800587a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800587e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005882:	4b9a      	ldr	r3, [pc, #616]	; (8005aec <calWallConrol+0x10e4>)
 8005884:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005890:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005894:	4b97      	ldr	r3, [pc, #604]	; (8005af4 <calWallConrol+0x10ec>)
 8005896:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 800589a:	4b96      	ldr	r3, [pc, #600]	; (8005af4 <calWallConrol+0x10ec>)
 800589c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80058a0:	4b94      	ldr	r3, [pc, #592]	; (8005af4 <calWallConrol+0x10ec>)
 80058a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80058a6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80058aa:	4b92      	ldr	r3, [pc, #584]	; (8005af4 <calWallConrol+0x10ec>)
 80058ac:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80058b0:	4b90      	ldr	r3, [pc, #576]	; (8005af4 <calWallConrol+0x10ec>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a8f      	ldr	r2, [pc, #572]	; (8005af4 <calWallConrol+0x10ec>)
 80058b6:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058b8:	4b8e      	ldr	r3, [pc, #568]	; (8005af4 <calWallConrol+0x10ec>)
 80058ba:	ed93 7a00 	vldr	s14, [r3]
 80058be:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80058c2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80058c6:	4b8b      	ldr	r3, [pc, #556]	; (8005af4 <calWallConrol+0x10ec>)
 80058c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80058cc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80058dc:	e05a      	b.n	8005994 <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 80058de:	2001      	movs	r0, #1
 80058e0:	f001 fa24 	bl	8006d2c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80058e4:	2001      	movs	r0, #1
 80058e6:	f001 fa57 	bl	8006d98 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80058ea:	4a7f      	ldr	r2, [pc, #508]	; (8005ae8 <calWallConrol+0x10e0>)
 80058ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058ee:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 80058f0:	4a7f      	ldr	r2, [pc, #508]	; (8005af0 <calWallConrol+0x10e8>)
 80058f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f4:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80058f6:	4b7d      	ldr	r3, [pc, #500]	; (8005aec <calWallConrol+0x10e4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005902:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 800590e:	4b77      	ldr	r3, [pc, #476]	; (8005aec <calWallConrol+0x10e4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800591a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 800591e:	4b73      	ldr	r3, [pc, #460]	; (8005aec <calWallConrol+0x10e4>)
 8005920:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005924:	ee07 3a90 	vmov	s15, r3
 8005928:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800592c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005930:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005934:	4b6d      	ldr	r3, [pc, #436]	; (8005aec <calWallConrol+0x10e4>)
 8005936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005942:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005946:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800594a:	4b6a      	ldr	r3, [pc, #424]	; (8005af4 <calWallConrol+0x10ec>)
 800594c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005950:	4b68      	ldr	r3, [pc, #416]	; (8005af4 <calWallConrol+0x10ec>)
 8005952:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005956:	4b67      	ldr	r3, [pc, #412]	; (8005af4 <calWallConrol+0x10ec>)
 8005958:	edd3 7a01 	vldr	s15, [r3, #4]
 800595c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005960:	4b64      	ldr	r3, [pc, #400]	; (8005af4 <calWallConrol+0x10ec>)
 8005962:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005966:	4b63      	ldr	r3, [pc, #396]	; (8005af4 <calWallConrol+0x10ec>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a62      	ldr	r2, [pc, #392]	; (8005af4 <calWallConrol+0x10ec>)
 800596c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800596e:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <calWallConrol+0x10ec>)
 8005970:	ed93 7a00 	vldr	s14, [r3]
 8005974:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005978:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 800597c:	4b5d      	ldr	r3, [pc, #372]	; (8005af4 <calWallConrol+0x10ec>)
 800597e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005982:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005986:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800598a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005992:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 8005994:	4b58      	ldr	r3, [pc, #352]	; (8005af8 <calWallConrol+0x10f0>)
 8005996:	edd3 7a00 	vldr	s15, [r3]
 800599a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005afc <calWallConrol+0x10f4>
 800599e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a6:	dd04      	ble.n	80059b2 <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 80059a8:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <calWallConrol+0x10f8>)
 80059aa:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 80059ac:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <calWallConrol+0x10fc>)
 80059ae:	673b      	str	r3, [r7, #112]	; 0x70
 80059b0:	e023      	b.n	80059fa <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 80059b2:	4b51      	ldr	r3, [pc, #324]	; (8005af8 <calWallConrol+0x10f0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fa fdee 	bl	8000598 <__aeabi_f2d>
 80059bc:	a346      	add	r3, pc, #280	; (adr r3, 8005ad8 <calWallConrol+0x10d0>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa fe41 	bl	8000648 <__aeabi_dmul>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	f7fb f913 	bl	8000bf8 <__aeabi_d2f>
 80059d2:	4603      	mov	r3, r0
 80059d4:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 80059d6:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <calWallConrol+0x10f0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fa fddc 	bl	8000598 <__aeabi_f2d>
 80059e0:	a33f      	add	r3, pc, #252	; (adr r3, 8005ae0 <calWallConrol+0x10d8>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa fe2f 	bl	8000648 <__aeabi_dmul>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	f7fb f901 	bl	8000bf8 <__aeabi_d2f>
 80059f6:	4603      	mov	r3, r0
 80059f8:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 80059fa:	4b43      	ldr	r3, [pc, #268]	; (8005b08 <calWallConrol+0x1100>)
 80059fc:	edd3 7a00 	vldr	s15, [r3]
 8005a00:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0c:	dd12      	ble.n	8005a34 <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005a0e:	4b3e      	ldr	r3, [pc, #248]	; (8005b08 <calWallConrol+0x1100>)
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005b0c <calWallConrol+0x1104>
 8005a18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a20:	d808      	bhi.n	8005a34 <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005a22:	4b3b      	ldr	r3, [pc, #236]	; (8005b10 <calWallConrol+0x1108>)
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005a26:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <calWallConrol+0x110c>)
 8005a28:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005a2a:	4b3b      	ldr	r3, [pc, #236]	; (8005b18 <calWallConrol+0x1110>)
 8005a2c:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005a2e:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <calWallConrol+0x1114>)
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
 8005a32:	e025      	b.n	8005a80 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005a34:	4b2d      	ldr	r3, [pc, #180]	; (8005aec <calWallConrol+0x10e4>)
 8005a36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a3a:	2bdc      	cmp	r3, #220	; 0xdc
 8005a3c:	dd07      	ble.n	8005a4e <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005a3e:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <calWallConrol+0x1118>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f043 0302 	orr.w	r3, r3, #2
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <calWallConrol+0x1118>)
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e006      	b.n	8005a5c <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005a4e:	4b34      	ldr	r3, [pc, #208]	; (8005b20 <calWallConrol+0x1118>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f023 0302 	bic.w	r3, r3, #2
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	4b31      	ldr	r3, [pc, #196]	; (8005b20 <calWallConrol+0x1118>)
 8005a5a:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005a5c:	4b23      	ldr	r3, [pc, #140]	; (8005aec <calWallConrol+0x10e4>)
 8005a5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a6a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005a6e:	f04f 0300 	mov.w	r3, #0
 8005a72:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005a80:	4b28      	ldr	r3, [pc, #160]	; (8005b24 <calWallConrol+0x111c>)
 8005a82:	edd3 7a00 	vldr	s15, [r3]
 8005a86:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a92:	dd12      	ble.n	8005aba <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005a94:	4b23      	ldr	r3, [pc, #140]	; (8005b24 <calWallConrol+0x111c>)
 8005a96:	edd3 7a00 	vldr	s15, [r3]
 8005a9a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005b0c <calWallConrol+0x1104>
 8005a9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa6:	d808      	bhi.n	8005aba <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005aa8:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <calWallConrol+0x1120>)
 8005aaa:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005aac:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <calWallConrol+0x1124>)
 8005aae:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005ab0:	4b1f      	ldr	r3, [pc, #124]	; (8005b30 <calWallConrol+0x1128>)
 8005ab2:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005ab4:	4b1f      	ldr	r3, [pc, #124]	; (8005b34 <calWallConrol+0x112c>)
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	e056      	b.n	8005b68 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <calWallConrol+0x10e4>)
 8005abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abe:	2bdc      	cmp	r3, #220	; 0xdc
 8005ac0:	dd3a      	ble.n	8005b38 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005ac2:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <calWallConrol+0x1118>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f043 0301 	orr.w	r3, r3, #1
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <calWallConrol+0x1118>)
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e039      	b.n	8005b46 <calWallConrol+0x113e>
 8005ad2:	bf00      	nop
 8005ad4:	f3af 8000 	nop.w
 8005ad8:	33333333 	.word	0x33333333
 8005adc:	3fe33333 	.word	0x3fe33333
 8005ae0:	eb851eb8 	.word	0xeb851eb8
 8005ae4:	bfaeb851 	.word	0xbfaeb851
 8005ae8:	200005ac 	.word	0x200005ac
 8005aec:	200002b8 	.word	0x200002b8
 8005af0:	200005b0 	.word	0x200005b0
 8005af4:	20000578 	.word	0x20000578
 8005af8:	200004d8 	.word	0x200004d8
 8005afc:	447a0000 	.word	0x447a0000
 8005b00:	44160000 	.word	0x44160000
 8005b04:	c2700000 	.word	0xc2700000
 8005b08:	200005dc 	.word	0x200005dc
 8005b0c:	42a00000 	.word	0x42a00000
 8005b10:	43e7e73c 	.word	0x43e7e73c
 8005b14:	c0f9d45b 	.word	0xc0f9d45b
 8005b18:	3e043787 	.word	0x3e043787
 8005b1c:	b83cbe62 	.word	0xb83cbe62
 8005b20:	20000594 	.word	0x20000594
 8005b24:	200005e0 	.word	0x200005e0
 8005b28:	440fa6b0 	.word	0x440fa6b0
 8005b2c:	c1892199 	.word	0xc1892199
 8005b30:	3ea1604b 	.word	0x3ea1604b
 8005b34:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005b38:	4bb5      	ldr	r3, [pc, #724]	; (8005e10 <calWallConrol+0x1408>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f023 0301 	bic.w	r3, r3, #1
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4bb3      	ldr	r3, [pc, #716]	; (8005e10 <calWallConrol+0x1408>)
 8005b44:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005b46:	4bb3      	ldr	r3, [pc, #716]	; (8005e14 <calWallConrol+0x140c>)
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	ee07 3a90 	vmov	s15, r3
 8005b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b52:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005b68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005b6c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005b70:	4ba9      	ldr	r3, [pc, #676]	; (8005e18 <calWallConrol+0x1410>)
 8005b72:	edd3 7a00 	vldr	s15, [r3]
 8005b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b7a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b7e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005b82:	4ba5      	ldr	r3, [pc, #660]	; (8005e18 <calWallConrol+0x1410>)
 8005b84:	edd3 7a00 	vldr	s15, [r3]
 8005b88:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005b8c:	4ba2      	ldr	r3, [pc, #648]	; (8005e18 <calWallConrol+0x1410>)
 8005b8e:	edd3 7a00 	vldr	s15, [r3]
 8005b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b96:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005b9a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b9e:	4b9e      	ldr	r3, [pc, #632]	; (8005e18 <calWallConrol+0x1410>)
 8005ba0:	edd3 7a00 	vldr	s15, [r3]
 8005ba4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005ba8:	4b9b      	ldr	r3, [pc, #620]	; (8005e18 <calWallConrol+0x1410>)
 8005baa:	edd3 7a00 	vldr	s15, [r3]
 8005bae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005bb2:	4b99      	ldr	r3, [pc, #612]	; (8005e18 <calWallConrol+0x1410>)
 8005bb4:	edd3 7a00 	vldr	s15, [r3]
 8005bb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bc0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005bc4:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bcc:	4b93      	ldr	r3, [pc, #588]	; (8005e1c <calWallConrol+0x1414>)
 8005bce:	edd3 7a00 	vldr	s15, [r3]
 8005bd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bd6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bda:	edd7 6a08 	vldr	s13, [r7, #32]
 8005bde:	4b8f      	ldr	r3, [pc, #572]	; (8005e1c <calWallConrol+0x1414>)
 8005be0:	edd3 7a00 	vldr	s15, [r3]
 8005be4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005be8:	4b8c      	ldr	r3, [pc, #560]	; (8005e1c <calWallConrol+0x1414>)
 8005bea:	edd3 7a00 	vldr	s15, [r3]
 8005bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bf2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005bf6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005bfa:	4b88      	ldr	r3, [pc, #544]	; (8005e1c <calWallConrol+0x1414>)
 8005bfc:	edd3 7a00 	vldr	s15, [r3]
 8005c00:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005c04:	4b85      	ldr	r3, [pc, #532]	; (8005e1c <calWallConrol+0x1414>)
 8005c06:	edd3 7a00 	vldr	s15, [r3]
 8005c0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005c0e:	4b83      	ldr	r3, [pc, #524]	; (8005e1c <calWallConrol+0x1414>)
 8005c10:	edd3 7a00 	vldr	s15, [r3]
 8005c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c1c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005c20:	230b      	movs	r3, #11
 8005c22:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c24:	e018      	b.n	8005c58 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005c26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	4a7d      	ldr	r2, [pc, #500]	; (8005e20 <calWallConrol+0x1418>)
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	497b      	ldr	r1, [pc, #492]	; (8005e20 <calWallConrol+0x1418>)
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	440b      	add	r3, r1
 8005c3a:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	4a78      	ldr	r2, [pc, #480]	; (8005e24 <calWallConrol+0x141c>)
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	4976      	ldr	r1, [pc, #472]	; (8005e24 <calWallConrol+0x141c>)
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c54:	3b01      	subs	r3, #1
 8005c56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	dce3      	bgt.n	8005c26 <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005c5e:	4a70      	ldr	r2, [pc, #448]	; (8005e20 <calWallConrol+0x1418>)
 8005c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c62:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005c64:	4a6f      	ldr	r2, [pc, #444]	; (8005e24 <calWallConrol+0x141c>)
 8005c66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c68:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005c6a:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <calWallConrol+0x1418>)
 8005c6c:	ed93 7a00 	vldr	s14, [r3]
 8005c70:	4b6b      	ldr	r3, [pc, #428]	; (8005e20 <calWallConrol+0x1418>)
 8005c72:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	; (8005e28 <calWallConrol+0x1420>)
 8005c7c:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005c80:	4b68      	ldr	r3, [pc, #416]	; (8005e24 <calWallConrol+0x141c>)
 8005c82:	ed93 7a00 	vldr	s14, [r3]
 8005c86:	4b67      	ldr	r3, [pc, #412]	; (8005e24 <calWallConrol+0x141c>)
 8005c88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c90:	4b66      	ldr	r3, [pc, #408]	; (8005e2c <calWallConrol+0x1424>)
 8005c92:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005c96:	4b5f      	ldr	r3, [pc, #380]	; (8005e14 <calWallConrol+0x140c>)
 8005c98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c9c:	2bdc      	cmp	r3, #220	; 0xdc
 8005c9e:	dd1a      	ble.n	8005cd6 <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005ca0:	4b63      	ldr	r3, [pc, #396]	; (8005e30 <calWallConrol+0x1428>)
 8005ca2:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005ca4:	ee07 3a90 	vmov	s15, r3
 8005ca8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cac:	4b5e      	ldr	r3, [pc, #376]	; (8005e28 <calWallConrol+0x1420>)
 8005cae:	edd3 7a00 	vldr	s15, [r3]
 8005cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cb6:	eef0 7ae7 	vabs.f32	s15, s15
 8005cba:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005e34 <calWallConrol+0x142c>
 8005cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc6:	d506      	bpl.n	8005cd6 <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005cc8:	4b51      	ldr	r3, [pc, #324]	; (8005e10 <calWallConrol+0x1408>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	f043 0302 	orr.w	r3, r3, #2
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	4b4f      	ldr	r3, [pc, #316]	; (8005e10 <calWallConrol+0x1408>)
 8005cd4:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005cd6:	4b4f      	ldr	r3, [pc, #316]	; (8005e14 <calWallConrol+0x140c>)
 8005cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cda:	2bdc      	cmp	r3, #220	; 0xdc
 8005cdc:	dd1a      	ble.n	8005d14 <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005cde:	4b54      	ldr	r3, [pc, #336]	; (8005e30 <calWallConrol+0x1428>)
 8005ce0:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005ce2:	ee07 3a90 	vmov	s15, r3
 8005ce6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cea:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <calWallConrol+0x1424>)
 8005cec:	edd3 7a00 	vldr	s15, [r3]
 8005cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cf4:	eef0 7ae7 	vabs.f32	s15, s15
 8005cf8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005e34 <calWallConrol+0x142c>
 8005cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	d506      	bpl.n	8005d14 <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005d06:	4b42      	ldr	r3, [pc, #264]	; (8005e10 <calWallConrol+0x1408>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	4b3f      	ldr	r3, [pc, #252]	; (8005e10 <calWallConrol+0x1408>)
 8005d12:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005d14:	4b3f      	ldr	r3, [pc, #252]	; (8005e14 <calWallConrol+0x140c>)
 8005d16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d1a:	2bdb      	cmp	r3, #219	; 0xdb
 8005d1c:	dd13      	ble.n	8005d46 <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005d1e:	4b44      	ldr	r3, [pc, #272]	; (8005e30 <calWallConrol+0x1428>)
 8005d20:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d2a:	4b3f      	ldr	r3, [pc, #252]	; (8005e28 <calWallConrol+0x1420>)
 8005d2c:	edd3 7a00 	vldr	s15, [r3]
 8005d30:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d34:	eef0 7ae7 	vabs.f32	s15, s15
 8005d38:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005e34 <calWallConrol+0x142c>
 8005d3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d44:	dd06      	ble.n	8005d54 <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005d46:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <calWallConrol+0x1408>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	f023 0302 	bic.w	r3, r3, #2
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b2f      	ldr	r3, [pc, #188]	; (8005e10 <calWallConrol+0x1408>)
 8005d52:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <calWallConrol+0x140c>)
 8005d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d58:	2bdb      	cmp	r3, #219	; 0xdb
 8005d5a:	dd13      	ble.n	8005d84 <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005d5c:	4b34      	ldr	r3, [pc, #208]	; (8005e30 <calWallConrol+0x1428>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005d60:	ee07 3a90 	vmov	s15, r3
 8005d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d68:	4b30      	ldr	r3, [pc, #192]	; (8005e2c <calWallConrol+0x1424>)
 8005d6a:	edd3 7a00 	vldr	s15, [r3]
 8005d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d72:	eef0 7ae7 	vabs.f32	s15, s15
 8005d76:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005e34 <calWallConrol+0x142c>
 8005d7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d82:	dd06      	ble.n	8005d92 <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005d84:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <calWallConrol+0x1408>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	b2da      	uxtb	r2, r3
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <calWallConrol+0x1408>)
 8005d90:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005d92:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <calWallConrol+0x1408>)
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	f200 8155 	bhi.w	8006046 <calWallConrol+0x163e>
 8005d9c:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <calWallConrol+0x139c>)
 8005d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da2:	bf00      	nop
 8005da4:	08005db5 	.word	0x08005db5
 8005da8:	08005e49 	.word	0x08005e49
 8005dac:	08005ee9 	.word	0x08005ee9
 8005db0:	08005f87 	.word	0x08005f87
		case 0:			//両壁なし
			PID_wall += 0;
 8005db4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005db8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005e38 <calWallConrol+0x1430>
 8005dbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dc0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	f000 ffc3 	bl	8006d50 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005dca:	2000      	movs	r0, #0
 8005dcc:	f000 ffd2 	bl	8006d74 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005dd0:	4b10      	ldr	r3, [pc, #64]	; (8005e14 <calWallConrol+0x140c>)
 8005dd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd6:	ee07 3a90 	vmov	s15, r3
 8005dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <calWallConrol+0x1434>)
 8005de0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005de4:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <calWallConrol+0x140c>)
 8005de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de8:	ee07 3a90 	vmov	s15, r3
 8005dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <calWallConrol+0x1438>)
 8005df2:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005df6:	4b13      	ldr	r3, [pc, #76]	; (8005e44 <calWallConrol+0x143c>)
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005dfe:	4b11      	ldr	r3, [pc, #68]	; (8005e44 <calWallConrol+0x143c>)
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <calWallConrol+0x143c>)
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	605a      	str	r2, [r3, #4]
			break;
 8005e0e:	e11a      	b.n	8006046 <calWallConrol+0x163e>
 8005e10:	20000594 	.word	0x20000594
 8005e14:	200002b8 	.word	0x200002b8
 8005e18:	200005dc 	.word	0x200005dc
 8005e1c:	200005e0 	.word	0x200005e0
 8005e20:	20000668 	.word	0x20000668
 8005e24:	20000698 	.word	0x20000698
 8005e28:	200006d0 	.word	0x200006d0
 8005e2c:	200006d4 	.word	0x200006d4
 8005e30:	20000448 	.word	0x20000448
 8005e34:	42a00000 	.word	0x42a00000
 8005e38:	00000000 	.word	0x00000000
 8005e3c:	200005a4 	.word	0x200005a4
 8005e40:	200005a8 	.word	0x200005a8
 8005e44:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f000 ff81 	bl	8006d50 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f000 ff90 	bl	8006d74 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005e54:	4b87      	ldr	r3, [pc, #540]	; (8006074 <calWallConrol+0x166c>)
 8005e56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e62:	4b85      	ldr	r3, [pc, #532]	; (8006078 <calWallConrol+0x1670>)
 8005e64:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005e68:	4a84      	ldr	r2, [pc, #528]	; (800607c <calWallConrol+0x1674>)
 8005e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e6c:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005e6e:	4b81      	ldr	r3, [pc, #516]	; (8006074 <calWallConrol+0x166c>)
 8005e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e72:	ee07 3a90 	vmov	s15, r3
 8005e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e7a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e82:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005e86:	4b7b      	ldr	r3, [pc, #492]	; (8006074 <calWallConrol+0x166c>)
 8005e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8a:	ee07 3a90 	vmov	s15, r3
 8005e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8005e96:	4b7a      	ldr	r3, [pc, #488]	; (8006080 <calWallConrol+0x1678>)
 8005e98:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005e9c:	4b78      	ldr	r3, [pc, #480]	; (8006080 <calWallConrol+0x1678>)
 8005e9e:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005ea2:	4b77      	ldr	r3, [pc, #476]	; (8006080 <calWallConrol+0x1678>)
 8005ea4:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005eac:	4b74      	ldr	r3, [pc, #464]	; (8006080 <calWallConrol+0x1678>)
 8005eae:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005eb2:	4b73      	ldr	r3, [pc, #460]	; (8006080 <calWallConrol+0x1678>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a72      	ldr	r2, [pc, #456]	; (8006080 <calWallConrol+0x1678>)
 8005eb8:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005eba:	4b71      	ldr	r3, [pc, #452]	; (8006080 <calWallConrol+0x1678>)
 8005ebc:	ed93 7a00 	vldr	s14, [r3]
 8005ec0:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005ec8:	4b6d      	ldr	r3, [pc, #436]	; (8006080 <calWallConrol+0x1678>)
 8005eca:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ece:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005eda:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ee2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ee6:	e0ae      	b.n	8006046 <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8005ee8:	2001      	movs	r0, #1
 8005eea:	f000 ff31 	bl	8006d50 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f000 ff40 	bl	8006d74 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005ef4:	4a60      	ldr	r2, [pc, #384]	; (8006078 <calWallConrol+0x1670>)
 8005ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005efa:	4b5e      	ldr	r3, [pc, #376]	; (8006074 <calWallConrol+0x166c>)
 8005efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f06:	4b5d      	ldr	r3, [pc, #372]	; (800607c <calWallConrol+0x1674>)
 8005f08:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f0c:	4b59      	ldr	r3, [pc, #356]	; (8006074 <calWallConrol+0x166c>)
 8005f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f1a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f1e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005f22:	4b54      	ldr	r3, [pc, #336]	; (8006074 <calWallConrol+0x166c>)
 8005f24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f28:	ee07 3a90 	vmov	s15, r3
 8005f2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f34:	4b52      	ldr	r3, [pc, #328]	; (8006080 <calWallConrol+0x1678>)
 8005f36:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005f3a:	4b51      	ldr	r3, [pc, #324]	; (8006080 <calWallConrol+0x1678>)
 8005f3c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005f40:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <calWallConrol+0x1678>)
 8005f42:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f46:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005f4a:	4b4d      	ldr	r3, [pc, #308]	; (8006080 <calWallConrol+0x1678>)
 8005f4c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005f50:	4b4b      	ldr	r3, [pc, #300]	; (8006080 <calWallConrol+0x1678>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a4a      	ldr	r2, [pc, #296]	; (8006080 <calWallConrol+0x1678>)
 8005f56:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f58:	4b49      	ldr	r3, [pc, #292]	; (8006080 <calWallConrol+0x1678>)
 8005f5a:	ed93 7a00 	vldr	s14, [r3]
 8005f5e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f62:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005f66:	4b46      	ldr	r3, [pc, #280]	; (8006080 <calWallConrol+0x1678>)
 8005f68:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f6c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f74:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f78:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005f7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f80:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005f84:	e05f      	b.n	8006046 <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8005f86:	2001      	movs	r0, #1
 8005f88:	f000 fee2 	bl	8006d50 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	f000 fef1 	bl	8006d74 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005f92:	4a39      	ldr	r2, [pc, #228]	; (8006078 <calWallConrol+0x1670>)
 8005f94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f96:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005f98:	4a38      	ldr	r2, [pc, #224]	; (800607c <calWallConrol+0x1674>)
 8005f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f9c:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005f9e:	4b35      	ldr	r3, [pc, #212]	; (8006074 <calWallConrol+0x166c>)
 8005fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005faa:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005fb2:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <calWallConrol+0x166c>)
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fc6:	4b2b      	ldr	r3, [pc, #172]	; (8006074 <calWallConrol+0x166c>)
 8005fc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fd4:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fd8:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <calWallConrol+0x166c>)
 8005fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fea:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fee:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005ff2:	4b23      	ldr	r3, [pc, #140]	; (8006080 <calWallConrol+0x1678>)
 8005ff4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005ff8:	4b21      	ldr	r3, [pc, #132]	; (8006080 <calWallConrol+0x1678>)
 8005ffa:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005ffe:	4b20      	ldr	r3, [pc, #128]	; (8006080 <calWallConrol+0x1678>)
 8006000:	edd3 7a01 	vldr	s15, [r3, #4]
 8006004:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006008:	4b1d      	ldr	r3, [pc, #116]	; (8006080 <calWallConrol+0x1678>)
 800600a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800600e:	4b1c      	ldr	r3, [pc, #112]	; (8006080 <calWallConrol+0x1678>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1b      	ldr	r2, [pc, #108]	; (8006080 <calWallConrol+0x1678>)
 8006014:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006016:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <calWallConrol+0x1678>)
 8006018:	ed93 7a00 	vldr	s14, [r3]
 800601c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006020:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006024:	4b16      	ldr	r3, [pc, #88]	; (8006080 <calWallConrol+0x1678>)
 8006026:	edd3 6a02 	vldr	s13, [r3, #8]
 800602a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800602e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006032:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006036:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800603a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800603e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006042:	e000      	b.n	8006046 <calWallConrol+0x163e>
			break;
 8006044:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006046:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800604a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006084 <calWallConrol+0x167c>
 800604e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006052:	4b0d      	ldr	r3, [pc, #52]	; (8006088 <calWallConrol+0x1680>)
 8006054:	edd3 7a00 	vldr	s15, [r3]
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006062:	ee07 3a90 	vmov	s15, r3
}
 8006066:	eeb0 0a67 	vmov.f32	s0, s15
 800606a:	37a8      	adds	r7, #168	; 0xa8
 800606c:	46bd      	mov	sp, r7
 800606e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006072:	bf00      	nop
 8006074:	200002b8 	.word	0x200002b8
 8006078:	200005a4 	.word	0x200005a4
 800607c:	200005a8 	.word	0x200005a8
 8006080:	20000584 	.word	0x20000584
 8006084:	44d1e000 	.word	0x44d1e000
 8006088:	200004d4 	.word	0x200004d4
 800608c:	00000000 	.word	0x00000000

08006090 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006090:	b5b0      	push	{r4, r5, r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006096:	4ba2      	ldr	r3, [pc, #648]	; (8006320 <interrupt_WallCut+0x290>)
 8006098:	edd3 7a00 	vldr	s15, [r3]
 800609c:	eef0 7ae7 	vabs.f32	s15, s15
 80060a0:	ee17 0a90 	vmov	r0, s15
 80060a4:	f7fa fa78 	bl	8000598 <__aeabi_f2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	a198      	add	r1, pc, #608	; (adr r1, 8006310 <interrupt_WallCut+0x280>)
 80060ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060b2:	f7fa fbf3 	bl	800089c <__aeabi_ddiv>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	ec43 2b17 	vmov	d7, r2, r3
 80060be:	eeb0 0a47 	vmov.f32	s0, s14
 80060c2:	eef0 0a67 	vmov.f32	s1, s15
 80060c6:	f01c ff4b 	bl	8022f60 <ceil>
 80060ca:	ec53 2b10 	vmov	r2, r3, d0
 80060ce:	4610      	mov	r0, r2
 80060d0:	4619      	mov	r1, r3
 80060d2:	f7fa fd69 	bl	8000ba8 <__aeabi_d2iz>
 80060d6:	4603      	mov	r3, r0
 80060d8:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b0a      	cmp	r3, #10
 80060de:	dd01      	ble.n	80060e4 <interrupt_WallCut+0x54>
 80060e0:	230b      	movs	r3, #11
 80060e2:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b04      	cmp	r3, #4
 80060e8:	dc01      	bgt.n	80060ee <interrupt_WallCut+0x5e>
 80060ea:	2304      	movs	r3, #4
 80060ec:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 80060ee:	2300      	movs	r3, #0
 80060f0:	613b      	str	r3, [r7, #16]
 80060f2:	e019      	b.n	8006128 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 80060f4:	498b      	ldr	r1, [pc, #556]	; (8006324 <interrupt_WallCut+0x294>)
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	4613      	mov	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4413      	add	r3, r2
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	440b      	add	r3, r1
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	4887      	ldr	r0, [pc, #540]	; (8006324 <interrupt_WallCut+0x294>)
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4613      	mov	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4413      	add	r3, r2
 8006114:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006118:	1aca      	subs	r2, r1, r3
 800611a:	4983      	ldr	r1, [pc, #524]	; (8006328 <interrupt_WallCut+0x298>)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	2b04      	cmp	r3, #4
 800612c:	dde2      	ble.n	80060f4 <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800612e:	4b7f      	ldr	r3, [pc, #508]	; (800632c <interrupt_WallCut+0x29c>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	f040 8555 	bne.w	8006be2 <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006138:	4b7a      	ldr	r3, [pc, #488]	; (8006324 <interrupt_WallCut+0x294>)
 800613a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800613e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006142:	dd03      	ble.n	800614c <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 8006144:	4b7a      	ldr	r3, [pc, #488]	; (8006330 <interrupt_WallCut+0x2a0>)
 8006146:	2201      	movs	r2, #1
 8006148:	701a      	strb	r2, [r3, #0]
 800614a:	e002      	b.n	8006152 <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 800614c:	4b78      	ldr	r3, [pc, #480]	; (8006330 <interrupt_WallCut+0x2a0>)
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006152:	4b74      	ldr	r3, [pc, #464]	; (8006324 <interrupt_WallCut+0x294>)
 8006154:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006158:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800615c:	dd03      	ble.n	8006166 <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 800615e:	4b75      	ldr	r3, [pc, #468]	; (8006334 <interrupt_WallCut+0x2a4>)
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e002      	b.n	800616c <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 8006166:	4b73      	ldr	r3, [pc, #460]	; (8006334 <interrupt_WallCut+0x2a4>)
 8006168:	2200      	movs	r2, #0
 800616a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 800616c:	4b6d      	ldr	r3, [pc, #436]	; (8006324 <interrupt_WallCut+0x294>)
 800616e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006172:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006176:	dd03      	ble.n	8006180 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 8006178:	4b6f      	ldr	r3, [pc, #444]	; (8006338 <interrupt_WallCut+0x2a8>)
 800617a:	2201      	movs	r2, #1
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e002      	b.n	8006186 <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 8006180:	4b6d      	ldr	r3, [pc, #436]	; (8006338 <interrupt_WallCut+0x2a8>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006186:	4b67      	ldr	r3, [pc, #412]	; (8006324 <interrupt_WallCut+0x294>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800618e:	da30      	bge.n	80061f2 <interrupt_WallCut+0x162>
			NoWallCountL90++;
 8006190:	4b6a      	ldr	r3, [pc, #424]	; (800633c <interrupt_WallCut+0x2ac>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3301      	adds	r3, #1
 8006196:	4a69      	ldr	r2, [pc, #420]	; (800633c <interrupt_WallCut+0x2ac>)
 8006198:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800619a:	4b69      	ldr	r3, [pc, #420]	; (8006340 <interrupt_WallCut+0x2b0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fa f9fa 	bl	8000598 <__aeabi_f2d>
 80061a4:	4604      	mov	r4, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	4b66      	ldr	r3, [pc, #408]	; (8006344 <interrupt_WallCut+0x2b4>)
 80061aa:	ed93 7a00 	vldr	s14, [r3]
 80061ae:	4b66      	ldr	r3, [pc, #408]	; (8006348 <interrupt_WallCut+0x2b8>)
 80061b0:	edd3 7a00 	vldr	s15, [r3]
 80061b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061c0:	ee16 0a90 	vmov	r0, s13
 80061c4:	f7fa f9e8 	bl	8000598 <__aeabi_f2d>
 80061c8:	a353      	add	r3, pc, #332	; (adr r3, 8006318 <interrupt_WallCut+0x288>)
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f7fa fa3b 	bl	8000648 <__aeabi_dmul>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4620      	mov	r0, r4
 80061d8:	4629      	mov	r1, r5
 80061da:	f7fa f87f 	bl	80002dc <__adddf3>
 80061de:	4602      	mov	r2, r0
 80061e0:	460b      	mov	r3, r1
 80061e2:	4610      	mov	r0, r2
 80061e4:	4619      	mov	r1, r3
 80061e6:	f7fa fd07 	bl	8000bf8 <__aeabi_d2f>
 80061ea:	4603      	mov	r3, r0
 80061ec:	4a54      	ldr	r2, [pc, #336]	; (8006340 <interrupt_WallCut+0x2b0>)
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e006      	b.n	8006200 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80061f2:	4b52      	ldr	r3, [pc, #328]	; (800633c <interrupt_WallCut+0x2ac>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80061f8:	4b51      	ldr	r3, [pc, #324]	; (8006340 <interrupt_WallCut+0x2b0>)
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006200:	4b48      	ldr	r3, [pc, #288]	; (8006324 <interrupt_WallCut+0x294>)
 8006202:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006206:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800620a:	da30      	bge.n	800626e <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 800620c:	4b4f      	ldr	r3, [pc, #316]	; (800634c <interrupt_WallCut+0x2bc>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3301      	adds	r3, #1
 8006212:	4a4e      	ldr	r2, [pc, #312]	; (800634c <interrupt_WallCut+0x2bc>)
 8006214:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006216:	4b4e      	ldr	r3, [pc, #312]	; (8006350 <interrupt_WallCut+0x2c0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4618      	mov	r0, r3
 800621c:	f7fa f9bc 	bl	8000598 <__aeabi_f2d>
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	4b47      	ldr	r3, [pc, #284]	; (8006344 <interrupt_WallCut+0x2b4>)
 8006226:	ed93 7a00 	vldr	s14, [r3]
 800622a:	4b47      	ldr	r3, [pc, #284]	; (8006348 <interrupt_WallCut+0x2b8>)
 800622c:	edd3 7a00 	vldr	s15, [r3]
 8006230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006234:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006238:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800623c:	ee16 0a90 	vmov	r0, s13
 8006240:	f7fa f9aa 	bl	8000598 <__aeabi_f2d>
 8006244:	a334      	add	r3, pc, #208	; (adr r3, 8006318 <interrupt_WallCut+0x288>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f9fd 	bl	8000648 <__aeabi_dmul>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4620      	mov	r0, r4
 8006254:	4629      	mov	r1, r5
 8006256:	f7fa f841 	bl	80002dc <__adddf3>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f7fa fcc9 	bl	8000bf8 <__aeabi_d2f>
 8006266:	4603      	mov	r3, r0
 8006268:	4a39      	ldr	r2, [pc, #228]	; (8006350 <interrupt_WallCut+0x2c0>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	e006      	b.n	800627c <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 800626e:	4b37      	ldr	r3, [pc, #220]	; (800634c <interrupt_WallCut+0x2bc>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006274:	4b36      	ldr	r3, [pc, #216]	; (8006350 <interrupt_WallCut+0x2c0>)
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800627c:	4b2a      	ldr	r3, [pc, #168]	; (8006328 <interrupt_WallCut+0x298>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006284:	da03      	bge.n	800628e <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006286:	4b27      	ldr	r3, [pc, #156]	; (8006324 <interrupt_WallCut+0x294>)
 8006288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628a:	2bc8      	cmp	r3, #200	; 0xc8
 800628c:	dd37      	ble.n	80062fe <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 800628e:	4b31      	ldr	r3, [pc, #196]	; (8006354 <interrupt_WallCut+0x2c4>)
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006296:	4b30      	ldr	r3, [pc, #192]	; (8006358 <interrupt_WallCut+0x2c8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3301      	adds	r3, #1
 800629c:	4a2e      	ldr	r2, [pc, #184]	; (8006358 <interrupt_WallCut+0x2c8>)
 800629e:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 80062a0:	4b2e      	ldr	r3, [pc, #184]	; (800635c <interrupt_WallCut+0x2cc>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80062a6:	4b2e      	ldr	r3, [pc, #184]	; (8006360 <interrupt_WallCut+0x2d0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fa f974 	bl	8000598 <__aeabi_f2d>
 80062b0:	4604      	mov	r4, r0
 80062b2:	460d      	mov	r5, r1
 80062b4:	4b23      	ldr	r3, [pc, #140]	; (8006344 <interrupt_WallCut+0x2b4>)
 80062b6:	ed93 7a00 	vldr	s14, [r3]
 80062ba:	4b23      	ldr	r3, [pc, #140]	; (8006348 <interrupt_WallCut+0x2b8>)
 80062bc:	edd3 7a00 	vldr	s15, [r3]
 80062c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062cc:	ee16 0a90 	vmov	r0, s13
 80062d0:	f7fa f962 	bl	8000598 <__aeabi_f2d>
 80062d4:	a310      	add	r3, pc, #64	; (adr r3, 8006318 <interrupt_WallCut+0x288>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7fa f9b5 	bl	8000648 <__aeabi_dmul>
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	4620      	mov	r0, r4
 80062e4:	4629      	mov	r1, r5
 80062e6:	f7f9 fff9 	bl	80002dc <__adddf3>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	f7fa fc81 	bl	8000bf8 <__aeabi_d2f>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4a19      	ldr	r2, [pc, #100]	; (8006360 <interrupt_WallCut+0x2d0>)
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	e09f      	b.n	800643e <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80062fe:	4b17      	ldr	r3, [pc, #92]	; (800635c <interrupt_WallCut+0x2cc>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d16b      	bne.n	80063de <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
 800630a:	e04b      	b.n	80063a4 <interrupt_WallCut+0x314>
 800630c:	f3af 8000 	nop.w
 8006310:	00000000 	.word	0x00000000
 8006314:	40ab5800 	.word	0x40ab5800
 8006318:	d2f1a9fc 	.word	0xd2f1a9fc
 800631c:	3f50624d 	.word	0x3f50624d
 8006320:	200004d8 	.word	0x200004d8
 8006324:	200002b8 	.word	0x200002b8
 8006328:	2000045c 	.word	0x2000045c
 800632c:	20000592 	.word	0x20000592
 8006330:	200005f2 	.word	0x200005f2
 8006334:	200005f3 	.word	0x200005f3
 8006338:	200005f4 	.word	0x200005f4
 800633c:	200005b8 	.word	0x200005b8
 8006340:	200005d0 	.word	0x200005d0
 8006344:	20000258 	.word	0x20000258
 8006348:	2000025c 	.word	0x2000025c
 800634c:	200005b4 	.word	0x200005b4
 8006350:	200005cc 	.word	0x200005cc
 8006354:	200005f8 	.word	0x200005f8
 8006358:	200005c0 	.word	0x200005c0
 800635c:	200005ec 	.word	0x200005ec
 8006360:	200005d8 	.word	0x200005d8
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006364:	4a7c      	ldr	r2, [pc, #496]	; (8006558 <interrupt_WallCut+0x4c8>)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3314      	adds	r3, #20
 800636a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636e:	ee07 3a90 	vmov	s15, r3
 8006372:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006376:	4b79      	ldr	r3, [pc, #484]	; (800655c <interrupt_WallCut+0x4cc>)
 8006378:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 800637c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	dd0b      	ble.n	800639e <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006386:	4a74      	ldr	r2, [pc, #464]	; (8006558 <interrupt_WallCut+0x4c8>)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3314      	adds	r3, #20
 800638c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006398:	4b70      	ldr	r3, [pc, #448]	; (800655c <interrupt_WallCut+0x4cc>)
 800639a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3301      	adds	r3, #1
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2b13      	cmp	r3, #19
 80063a8:	dddc      	ble.n	8006364 <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 80063aa:	4b6d      	ldr	r3, [pc, #436]	; (8006560 <interrupt_WallCut+0x4d0>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 80063b0:	4b6c      	ldr	r3, [pc, #432]	; (8006564 <interrupt_WallCut+0x4d4>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 80063b6:	4b69      	ldr	r3, [pc, #420]	; (800655c <interrupt_WallCut+0x4cc>)
 80063b8:	edd3 7a00 	vldr	s15, [r3]
 80063bc:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006568 <interrupt_WallCut+0x4d8>
 80063c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063c4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800656c <interrupt_WallCut+0x4dc>
 80063c8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80063cc:	4b63      	ldr	r3, [pc, #396]	; (800655c <interrupt_WallCut+0x4cc>)
 80063ce:	ed93 7a00 	vldr	s14, [r3]
 80063d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80063d6:	4b66      	ldr	r3, [pc, #408]	; (8006570 <interrupt_WallCut+0x4e0>)
 80063d8:	edc3 7a00 	vstr	s15, [r3]
 80063dc:	e02f      	b.n	800643e <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 80063de:	4b60      	ldr	r3, [pc, #384]	; (8006560 <interrupt_WallCut+0x4d0>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	4a5e      	ldr	r2, [pc, #376]	; (8006560 <interrupt_WallCut+0x4d0>)
 80063e6:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80063e8:	4b61      	ldr	r3, [pc, #388]	; (8006570 <interrupt_WallCut+0x4e0>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fa f8d3 	bl	8000598 <__aeabi_f2d>
 80063f2:	4604      	mov	r4, r0
 80063f4:	460d      	mov	r5, r1
 80063f6:	4b5f      	ldr	r3, [pc, #380]	; (8006574 <interrupt_WallCut+0x4e4>)
 80063f8:	ed93 7a00 	vldr	s14, [r3]
 80063fc:	4b5e      	ldr	r3, [pc, #376]	; (8006578 <interrupt_WallCut+0x4e8>)
 80063fe:	edd3 7a00 	vldr	s15, [r3]
 8006402:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006406:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800640a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800640e:	ee16 0a90 	vmov	r0, s13
 8006412:	f7fa f8c1 	bl	8000598 <__aeabi_f2d>
 8006416:	a34e      	add	r3, pc, #312	; (adr r3, 8006550 <interrupt_WallCut+0x4c0>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa f914 	bl	8000648 <__aeabi_dmul>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006424:	4620      	mov	r0, r4
 8006426:	4629      	mov	r1, r5
 8006428:	f7f9 ff58 	bl	80002dc <__adddf3>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4610      	mov	r0, r2
 8006432:	4619      	mov	r1, r3
 8006434:	f7fa fbe0 	bl	8000bf8 <__aeabi_d2f>
 8006438:	4603      	mov	r3, r0
 800643a:	4a4d      	ldr	r2, [pc, #308]	; (8006570 <interrupt_WallCut+0x4e0>)
 800643c:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 800643e:	4b4f      	ldr	r3, [pc, #316]	; (800657c <interrupt_WallCut+0x4ec>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8006446:	da05      	bge.n	8006454 <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006448:	4b43      	ldr	r3, [pc, #268]	; (8006558 <interrupt_WallCut+0x4c8>)
 800644a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800644e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8006452:	dd37      	ble.n	80064c4 <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 8006454:	4b4a      	ldr	r3, [pc, #296]	; (8006580 <interrupt_WallCut+0x4f0>)
 8006456:	f04f 0200 	mov.w	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 800645c:	4b49      	ldr	r3, [pc, #292]	; (8006584 <interrupt_WallCut+0x4f4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	4a48      	ldr	r2, [pc, #288]	; (8006584 <interrupt_WallCut+0x4f4>)
 8006464:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 8006466:	4b48      	ldr	r3, [pc, #288]	; (8006588 <interrupt_WallCut+0x4f8>)
 8006468:	2200      	movs	r2, #0
 800646a:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800646c:	4b47      	ldr	r3, [pc, #284]	; (800658c <interrupt_WallCut+0x4fc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4618      	mov	r0, r3
 8006472:	f7fa f891 	bl	8000598 <__aeabi_f2d>
 8006476:	4604      	mov	r4, r0
 8006478:	460d      	mov	r5, r1
 800647a:	4b3e      	ldr	r3, [pc, #248]	; (8006574 <interrupt_WallCut+0x4e4>)
 800647c:	ed93 7a00 	vldr	s14, [r3]
 8006480:	4b3d      	ldr	r3, [pc, #244]	; (8006578 <interrupt_WallCut+0x4e8>)
 8006482:	edd3 7a00 	vldr	s15, [r3]
 8006486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800648a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800648e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006492:	ee16 0a90 	vmov	r0, s13
 8006496:	f7fa f87f 	bl	8000598 <__aeabi_f2d>
 800649a:	a32d      	add	r3, pc, #180	; (adr r3, 8006550 <interrupt_WallCut+0x4c0>)
 800649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a0:	f7fa f8d2 	bl	8000648 <__aeabi_dmul>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4620      	mov	r0, r4
 80064aa:	4629      	mov	r1, r5
 80064ac:	f7f9 ff16 	bl	80002dc <__adddf3>
 80064b0:	4602      	mov	r2, r0
 80064b2:	460b      	mov	r3, r1
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	f7fa fb9e 	bl	8000bf8 <__aeabi_d2f>
 80064bc:	4603      	mov	r3, r0
 80064be:	4a33      	ldr	r2, [pc, #204]	; (800658c <interrupt_WallCut+0x4fc>)
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	e097      	b.n	80065f4 <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 80064c4:	4b30      	ldr	r3, [pc, #192]	; (8006588 <interrupt_WallCut+0x4f8>)
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d163      	bne.n	8006594 <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	e01f      	b.n	8006512 <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80064d2:	4a21      	ldr	r2, [pc, #132]	; (8006558 <interrupt_WallCut+0x4c8>)
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	333c      	adds	r3, #60	; 0x3c
 80064d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064e4:	4b26      	ldr	r3, [pc, #152]	; (8006580 <interrupt_WallCut+0x4f0>)
 80064e6:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80064ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f2:	dd0b      	ble.n	800650c <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <interrupt_WallCut+0x4c8>)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	333c      	adds	r3, #60	; 0x3c
 80064fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 8006506:	4b1e      	ldr	r3, [pc, #120]	; (8006580 <interrupt_WallCut+0x4f0>)
 8006508:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	3301      	adds	r3, #1
 8006510:	60bb      	str	r3, [r7, #8]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b13      	cmp	r3, #19
 8006516:	dddc      	ble.n	80064d2 <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 8006518:	4b1a      	ldr	r3, [pc, #104]	; (8006584 <interrupt_WallCut+0x4f4>)
 800651a:	2200      	movs	r2, #0
 800651c:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 800651e:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <interrupt_WallCut+0x4f8>)
 8006520:	2201      	movs	r2, #1
 8006522:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 8006524:	4b16      	ldr	r3, [pc, #88]	; (8006580 <interrupt_WallCut+0x4f0>)
 8006526:	edd3 7a00 	vldr	s15, [r3]
 800652a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006590 <interrupt_WallCut+0x500>
 800652e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006532:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800656c <interrupt_WallCut+0x4dc>
 8006536:	ee67 6a87 	vmul.f32	s13, s15, s14
 800653a:	4b11      	ldr	r3, [pc, #68]	; (8006580 <interrupt_WallCut+0x4f0>)
 800653c:	ed93 7a00 	vldr	s14, [r3]
 8006540:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 8006544:	4b11      	ldr	r3, [pc, #68]	; (800658c <interrupt_WallCut+0x4fc>)
 8006546:	edc3 7a00 	vstr	s15, [r3]
 800654a:	e053      	b.n	80065f4 <interrupt_WallCut+0x564>
 800654c:	f3af 8000 	nop.w
 8006550:	d2f1a9fc 	.word	0xd2f1a9fc
 8006554:	3f50624d 	.word	0x3f50624d
 8006558:	200002b8 	.word	0x200002b8
 800655c:	200005f8 	.word	0x200005f8
 8006560:	200005c0 	.word	0x200005c0
 8006564:	200005ec 	.word	0x200005ec
 8006568:	43f68000 	.word	0x43f68000
 800656c:	00000000 	.word	0x00000000
 8006570:	200005d8 	.word	0x200005d8
 8006574:	20000258 	.word	0x20000258
 8006578:	2000025c 	.word	0x2000025c
 800657c:	2000045c 	.word	0x2000045c
 8006580:	200005fc 	.word	0x200005fc
 8006584:	200005bc 	.word	0x200005bc
 8006588:	200005ed 	.word	0x200005ed
 800658c:	200005d4 	.word	0x200005d4
 8006590:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 8006594:	4b94      	ldr	r3, [pc, #592]	; (80067e8 <interrupt_WallCut+0x758>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	4a93      	ldr	r2, [pc, #588]	; (80067e8 <interrupt_WallCut+0x758>)
 800659c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800659e:	4b93      	ldr	r3, [pc, #588]	; (80067ec <interrupt_WallCut+0x75c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7f9 fff8 	bl	8000598 <__aeabi_f2d>
 80065a8:	4604      	mov	r4, r0
 80065aa:	460d      	mov	r5, r1
 80065ac:	4b90      	ldr	r3, [pc, #576]	; (80067f0 <interrupt_WallCut+0x760>)
 80065ae:	ed93 7a00 	vldr	s14, [r3]
 80065b2:	4b90      	ldr	r3, [pc, #576]	; (80067f4 <interrupt_WallCut+0x764>)
 80065b4:	edd3 7a00 	vldr	s15, [r3]
 80065b8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80065bc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80065c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065c4:	ee16 0a90 	vmov	r0, s13
 80065c8:	f7f9 ffe6 	bl	8000598 <__aeabi_f2d>
 80065cc:	a384      	add	r3, pc, #528	; (adr r3, 80067e0 <interrupt_WallCut+0x750>)
 80065ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d2:	f7fa f839 	bl	8000648 <__aeabi_dmul>
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80065da:	4620      	mov	r0, r4
 80065dc:	4629      	mov	r1, r5
 80065de:	f7f9 fe7d 	bl	80002dc <__adddf3>
 80065e2:	4602      	mov	r2, r0
 80065e4:	460b      	mov	r3, r1
 80065e6:	4610      	mov	r0, r2
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7fa fb05 	bl	8000bf8 <__aeabi_d2f>
 80065ee:	4603      	mov	r3, r0
 80065f0:	4a7e      	ldr	r2, [pc, #504]	; (80067ec <interrupt_WallCut+0x75c>)
 80065f2:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80065f4:	4b80      	ldr	r3, [pc, #512]	; (80067f8 <interrupt_WallCut+0x768>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80065fc:	db5f      	blt.n	80066be <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80065fe:	4b7f      	ldr	r3, [pc, #508]	; (80067fc <interrupt_WallCut+0x76c>)
 8006600:	f04f 0200 	mov.w	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006606:	4b7e      	ldr	r3, [pc, #504]	; (8006800 <interrupt_WallCut+0x770>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3301      	adds	r3, #1
 800660c:	4a7c      	ldr	r2, [pc, #496]	; (8006800 <interrupt_WallCut+0x770>)
 800660e:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006610:	2000      	movs	r0, #0
 8006612:	f000 fccf 	bl	8006fb4 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006616:	4b7b      	ldr	r3, [pc, #492]	; (8006804 <interrupt_WallCut+0x774>)
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800661c:	4b7a      	ldr	r3, [pc, #488]	; (8006808 <interrupt_WallCut+0x778>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f7f9 ffb9 	bl	8000598 <__aeabi_f2d>
 8006626:	4604      	mov	r4, r0
 8006628:	460d      	mov	r5, r1
 800662a:	4b71      	ldr	r3, [pc, #452]	; (80067f0 <interrupt_WallCut+0x760>)
 800662c:	ed93 7a00 	vldr	s14, [r3]
 8006630:	4b70      	ldr	r3, [pc, #448]	; (80067f4 <interrupt_WallCut+0x764>)
 8006632:	edd3 7a00 	vldr	s15, [r3]
 8006636:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800663a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800663e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006642:	ee16 0a90 	vmov	r0, s13
 8006646:	f7f9 ffa7 	bl	8000598 <__aeabi_f2d>
 800664a:	a365      	add	r3, pc, #404	; (adr r3, 80067e0 <interrupt_WallCut+0x750>)
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f7f9 fffa 	bl	8000648 <__aeabi_dmul>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006658:	4620      	mov	r0, r4
 800665a:	4629      	mov	r1, r5
 800665c:	f7f9 fe3e 	bl	80002dc <__adddf3>
 8006660:	4602      	mov	r2, r0
 8006662:	460b      	mov	r3, r1
 8006664:	4610      	mov	r0, r2
 8006666:	4619      	mov	r1, r3
 8006668:	f7fa fac6 	bl	8000bf8 <__aeabi_d2f>
 800666c:	4603      	mov	r3, r0
 800666e:	4a66      	ldr	r2, [pc, #408]	; (8006808 <interrupt_WallCut+0x778>)
 8006670:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006672:	4b66      	ldr	r3, [pc, #408]	; (800680c <interrupt_WallCut+0x77c>)
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b01      	cmp	r3, #1
 8006678:	f040 812b 	bne.w	80068d2 <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800667c:	4b64      	ldr	r3, [pc, #400]	; (8006810 <interrupt_WallCut+0x780>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4618      	mov	r0, r3
 8006682:	f7f9 ff89 	bl	8000598 <__aeabi_f2d>
 8006686:	4604      	mov	r4, r0
 8006688:	460d      	mov	r5, r1
 800668a:	4b62      	ldr	r3, [pc, #392]	; (8006814 <interrupt_WallCut+0x784>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7f9 ff82 	bl	8000598 <__aeabi_f2d>
 8006694:	a352      	add	r3, pc, #328	; (adr r3, 80067e0 <interrupt_WallCut+0x750>)
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	f7f9 ffd5 	bl	8000648 <__aeabi_dmul>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7f9 fe19 	bl	80002dc <__adddf3>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4610      	mov	r0, r2
 80066b0:	4619      	mov	r1, r3
 80066b2:	f7fa faa1 	bl	8000bf8 <__aeabi_d2f>
 80066b6:	4603      	mov	r3, r0
 80066b8:	4a55      	ldr	r2, [pc, #340]	; (8006810 <interrupt_WallCut+0x780>)
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	e109      	b.n	80068d2 <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 80066be:	4b51      	ldr	r3, [pc, #324]	; (8006804 <interrupt_WallCut+0x774>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	f040 80ae 	bne.w	8006824 <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 80066c8:	2300      	movs	r3, #0
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	e01f      	b.n	800670e <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80066ce:	4a52      	ldr	r2, [pc, #328]	; (8006818 <interrupt_WallCut+0x788>)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	3314      	adds	r3, #20
 80066d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e0:	4b46      	ldr	r3, [pc, #280]	; (80067fc <interrupt_WallCut+0x76c>)
 80066e2:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80066e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ee:	dd0b      	ble.n	8006708 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80066f0:	4a49      	ldr	r2, [pc, #292]	; (8006818 <interrupt_WallCut+0x788>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	3314      	adds	r3, #20
 80066f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006702:	4b3e      	ldr	r3, [pc, #248]	; (80067fc <interrupt_WallCut+0x76c>)
 8006704:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	3301      	adds	r3, #1
 800670c:	607b      	str	r3, [r7, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b13      	cmp	r3, #19
 8006712:	dddc      	ble.n	80066ce <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 8006714:	4b3a      	ldr	r3, [pc, #232]	; (8006800 <interrupt_WallCut+0x770>)
 8006716:	2200      	movs	r2, #0
 8006718:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 800671a:	4b3a      	ldr	r3, [pc, #232]	; (8006804 <interrupt_WallCut+0x774>)
 800671c:	2201      	movs	r2, #1
 800671e:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006720:	2001      	movs	r0, #1
 8006722:	f000 fc47 	bl	8006fb4 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006726:	4b35      	ldr	r3, [pc, #212]	; (80067fc <interrupt_WallCut+0x76c>)
 8006728:	edd3 7a00 	vldr	s15, [r3]
 800672c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800681c <interrupt_WallCut+0x78c>
 8006730:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800673c:	db26      	blt.n	800678c <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800673e:	4b2f      	ldr	r3, [pc, #188]	; (80067fc <interrupt_WallCut+0x76c>)
 8006740:	edd3 7a00 	vldr	s15, [r3]
 8006744:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800681c <interrupt_WallCut+0x78c>
 8006748:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800674c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006820 <interrupt_WallCut+0x790>
 8006750:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006754:	4b29      	ldr	r3, [pc, #164]	; (80067fc <interrupt_WallCut+0x76c>)
 8006756:	ed93 7a00 	vldr	s14, [r3]
 800675a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 800675e:	4b2c      	ldr	r3, [pc, #176]	; (8006810 <interrupt_WallCut+0x780>)
 8006760:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006764:	4b25      	ldr	r3, [pc, #148]	; (80067fc <interrupt_WallCut+0x76c>)
 8006766:	edd3 7a00 	vldr	s15, [r3]
 800676a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800681c <interrupt_WallCut+0x78c>
 800676e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006772:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006820 <interrupt_WallCut+0x790>
 8006776:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800677a:	4b20      	ldr	r3, [pc, #128]	; (80067fc <interrupt_WallCut+0x76c>)
 800677c:	ed93 7a00 	vldr	s14, [r3]
 8006780:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006784:	4b20      	ldr	r3, [pc, #128]	; (8006808 <interrupt_WallCut+0x778>)
 8006786:	edc3 7a00 	vstr	s15, [r3]
 800678a:	e09f      	b.n	80068cc <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <interrupt_WallCut+0x76c>)
 800678e:	edd3 7a00 	vldr	s15, [r3]
 8006792:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800681c <interrupt_WallCut+0x78c>
 8006796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800679a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006820 <interrupt_WallCut+0x790>
 800679e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80067a2:	4b16      	ldr	r3, [pc, #88]	; (80067fc <interrupt_WallCut+0x76c>)
 80067a4:	ed93 7a00 	vldr	s14, [r3]
 80067a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80067ac:	4b18      	ldr	r3, [pc, #96]	; (8006810 <interrupt_WallCut+0x780>)
 80067ae:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80067b2:	4b12      	ldr	r3, [pc, #72]	; (80067fc <interrupt_WallCut+0x76c>)
 80067b4:	edd3 7a00 	vldr	s15, [r3]
 80067b8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800681c <interrupt_WallCut+0x78c>
 80067bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067c0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006820 <interrupt_WallCut+0x790>
 80067c4:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80067c8:	4b0c      	ldr	r3, [pc, #48]	; (80067fc <interrupt_WallCut+0x76c>)
 80067ca:	ed93 7a00 	vldr	s14, [r3]
 80067ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80067d2:	4b0d      	ldr	r3, [pc, #52]	; (8006808 <interrupt_WallCut+0x778>)
 80067d4:	edc3 7a00 	vstr	s15, [r3]
 80067d8:	e078      	b.n	80068cc <interrupt_WallCut+0x83c>
 80067da:	bf00      	nop
 80067dc:	f3af 8000 	nop.w
 80067e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80067e4:	3f50624d 	.word	0x3f50624d
 80067e8:	200005bc 	.word	0x200005bc
 80067ec:	200005d4 	.word	0x200005d4
 80067f0:	20000258 	.word	0x20000258
 80067f4:	2000025c 	.word	0x2000025c
 80067f8:	2000045c 	.word	0x2000045c
 80067fc:	20000600 	.word	0x20000600
 8006800:	200005c8 	.word	0x200005c8
 8006804:	200005ee 	.word	0x200005ee
 8006808:	200005e8 	.word	0x200005e8
 800680c:	200005f0 	.word	0x200005f0
 8006810:	200005e0 	.word	0x200005e0
 8006814:	200004d8 	.word	0x200004d8
 8006818:	200002b8 	.word	0x200002b8
 800681c:	455ac000 	.word	0x455ac000
 8006820:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8006824:	4bac      	ldr	r3, [pc, #688]	; (8006ad8 <interrupt_WallCut+0xa48>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	3301      	adds	r3, #1
 800682a:	4aab      	ldr	r2, [pc, #684]	; (8006ad8 <interrupt_WallCut+0xa48>)
 800682c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800682e:	4bab      	ldr	r3, [pc, #684]	; (8006adc <interrupt_WallCut+0xa4c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 feb0 	bl	8000598 <__aeabi_f2d>
 8006838:	4604      	mov	r4, r0
 800683a:	460d      	mov	r5, r1
 800683c:	4ba8      	ldr	r3, [pc, #672]	; (8006ae0 <interrupt_WallCut+0xa50>)
 800683e:	ed93 7a00 	vldr	s14, [r3]
 8006842:	4ba8      	ldr	r3, [pc, #672]	; (8006ae4 <interrupt_WallCut+0xa54>)
 8006844:	edd3 7a00 	vldr	s15, [r3]
 8006848:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800684c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006850:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006854:	ee16 0a90 	vmov	r0, s13
 8006858:	f7f9 fe9e 	bl	8000598 <__aeabi_f2d>
 800685c:	a39c      	add	r3, pc, #624	; (adr r3, 8006ad0 <interrupt_WallCut+0xa40>)
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f7f9 fef1 	bl	8000648 <__aeabi_dmul>
 8006866:	4602      	mov	r2, r0
 8006868:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800686a:	4620      	mov	r0, r4
 800686c:	4629      	mov	r1, r5
 800686e:	f7f9 fd35 	bl	80002dc <__adddf3>
 8006872:	4602      	mov	r2, r0
 8006874:	460b      	mov	r3, r1
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	f7fa f9bd 	bl	8000bf8 <__aeabi_d2f>
 800687e:	4603      	mov	r3, r0
 8006880:	4a96      	ldr	r2, [pc, #600]	; (8006adc <interrupt_WallCut+0xa4c>)
 8006882:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006884:	4b98      	ldr	r3, [pc, #608]	; (8006ae8 <interrupt_WallCut+0xa58>)
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d11f      	bne.n	80068cc <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800688c:	4b97      	ldr	r3, [pc, #604]	; (8006aec <interrupt_WallCut+0xa5c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f7f9 fe81 	bl	8000598 <__aeabi_f2d>
 8006896:	4604      	mov	r4, r0
 8006898:	460d      	mov	r5, r1
 800689a:	4b95      	ldr	r3, [pc, #596]	; (8006af0 <interrupt_WallCut+0xa60>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7f9 fe7a 	bl	8000598 <__aeabi_f2d>
 80068a4:	a38a      	add	r3, pc, #552	; (adr r3, 8006ad0 <interrupt_WallCut+0xa40>)
 80068a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068aa:	f7f9 fecd 	bl	8000648 <__aeabi_dmul>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	4620      	mov	r0, r4
 80068b4:	4629      	mov	r1, r5
 80068b6:	f7f9 fd11 	bl	80002dc <__adddf3>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	f7fa f999 	bl	8000bf8 <__aeabi_d2f>
 80068c6:	4603      	mov	r3, r0
 80068c8:	4a88      	ldr	r2, [pc, #544]	; (8006aec <interrupt_WallCut+0xa5c>)
 80068ca:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 80068cc:	4b86      	ldr	r3, [pc, #536]	; (8006ae8 <interrupt_WallCut+0xa58>)
 80068ce:	2201      	movs	r2, #1
 80068d0:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068d2:	4b88      	ldr	r3, [pc, #544]	; (8006af4 <interrupt_WallCut+0xa64>)
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80068da:	db6a      	blt.n	80069b2 <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 80068dc:	4b86      	ldr	r3, [pc, #536]	; (8006af8 <interrupt_WallCut+0xa68>)
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 80068e4:	4b85      	ldr	r3, [pc, #532]	; (8006afc <interrupt_WallCut+0xa6c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	4a84      	ldr	r2, [pc, #528]	; (8006afc <interrupt_WallCut+0xa6c>)
 80068ec:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80068ee:	2000      	movs	r0, #0
 80068f0:	f000 fb4e 	bl	8006f90 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80068f4:	4b82      	ldr	r3, [pc, #520]	; (8006b00 <interrupt_WallCut+0xa70>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80068fa:	4b82      	ldr	r3, [pc, #520]	; (8006b04 <interrupt_WallCut+0xa74>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4618      	mov	r0, r3
 8006900:	f7f9 fe4a 	bl	8000598 <__aeabi_f2d>
 8006904:	4604      	mov	r4, r0
 8006906:	460d      	mov	r5, r1
 8006908:	4b75      	ldr	r3, [pc, #468]	; (8006ae0 <interrupt_WallCut+0xa50>)
 800690a:	ed93 7a00 	vldr	s14, [r3]
 800690e:	4b75      	ldr	r3, [pc, #468]	; (8006ae4 <interrupt_WallCut+0xa54>)
 8006910:	edd3 7a00 	vldr	s15, [r3]
 8006914:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006918:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800691c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006920:	ee16 0a90 	vmov	r0, s13
 8006924:	f7f9 fe38 	bl	8000598 <__aeabi_f2d>
 8006928:	a369      	add	r3, pc, #420	; (adr r3, 8006ad0 <interrupt_WallCut+0xa40>)
 800692a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692e:	f7f9 fe8b 	bl	8000648 <__aeabi_dmul>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006936:	4620      	mov	r0, r4
 8006938:	4629      	mov	r1, r5
 800693a:	f7f9 fccf 	bl	80002dc <__adddf3>
 800693e:	4602      	mov	r2, r0
 8006940:	460b      	mov	r3, r1
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	f7fa f957 	bl	8000bf8 <__aeabi_d2f>
 800694a:	4603      	mov	r3, r0
 800694c:	4a6d      	ldr	r2, [pc, #436]	; (8006b04 <interrupt_WallCut+0xa74>)
 800694e:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006950:	4b6d      	ldr	r3, [pc, #436]	; (8006b08 <interrupt_WallCut+0xa78>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b01      	cmp	r3, #1
 8006956:	f040 81a4 	bne.w	8006ca2 <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800695a:	4b6c      	ldr	r3, [pc, #432]	; (8006b0c <interrupt_WallCut+0xa7c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f7f9 fe1a 	bl	8000598 <__aeabi_f2d>
 8006964:	4604      	mov	r4, r0
 8006966:	460d      	mov	r5, r1
 8006968:	4b5d      	ldr	r3, [pc, #372]	; (8006ae0 <interrupt_WallCut+0xa50>)
 800696a:	ed93 7a00 	vldr	s14, [r3]
 800696e:	4b5d      	ldr	r3, [pc, #372]	; (8006ae4 <interrupt_WallCut+0xa54>)
 8006970:	edd3 7a00 	vldr	s15, [r3]
 8006974:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006978:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800697c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006980:	ee16 0a90 	vmov	r0, s13
 8006984:	f7f9 fe08 	bl	8000598 <__aeabi_f2d>
 8006988:	a351      	add	r3, pc, #324	; (adr r3, 8006ad0 <interrupt_WallCut+0xa40>)
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7f9 fe5b 	bl	8000648 <__aeabi_dmul>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006996:	4620      	mov	r0, r4
 8006998:	4629      	mov	r1, r5
 800699a:	f7f9 fc9f 	bl	80002dc <__adddf3>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	4610      	mov	r0, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fa f927 	bl	8000bf8 <__aeabi_d2f>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4a57      	ldr	r2, [pc, #348]	; (8006b0c <interrupt_WallCut+0xa7c>)
 80069ae:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 80069b0:	e177      	b.n	8006ca2 <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 80069b2:	4b53      	ldr	r3, [pc, #332]	; (8006b00 <interrupt_WallCut+0xa70>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f040 80b0 	bne.w	8006b1c <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 80069bc:	2300      	movs	r3, #0
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	e01f      	b.n	8006a02 <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80069c2:	4a53      	ldr	r2, [pc, #332]	; (8006b10 <interrupt_WallCut+0xa80>)
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	333c      	adds	r3, #60	; 0x3c
 80069c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069cc:	ee07 3a90 	vmov	s15, r3
 80069d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069d4:	4b48      	ldr	r3, [pc, #288]	; (8006af8 <interrupt_WallCut+0xa68>)
 80069d6:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 80069da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069e2:	dd0b      	ble.n	80069fc <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80069e4:	4a4a      	ldr	r2, [pc, #296]	; (8006b10 <interrupt_WallCut+0xa80>)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	333c      	adds	r3, #60	; 0x3c
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 80069f6:	4b40      	ldr	r3, [pc, #256]	; (8006af8 <interrupt_WallCut+0xa68>)
 80069f8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	603b      	str	r3, [r7, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2b13      	cmp	r3, #19
 8006a06:	dddc      	ble.n	80069c2 <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 8006a08:	4b3c      	ldr	r3, [pc, #240]	; (8006afc <interrupt_WallCut+0xa6c>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006a0e:	4b3c      	ldr	r3, [pc, #240]	; (8006b00 <interrupt_WallCut+0xa70>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006a14:	2001      	movs	r0, #1
 8006a16:	f000 fabb 	bl	8006f90 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006a1a:	4b37      	ldr	r3, [pc, #220]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a1c:	edd3 7a00 	vldr	s15, [r3]
 8006a20:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006b14 <interrupt_WallCut+0xa84>
 8006a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a30:	db26      	blt.n	8006a80 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a32:	4b31      	ldr	r3, [pc, #196]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a34:	edd3 7a00 	vldr	s15, [r3]
 8006a38:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006b14 <interrupt_WallCut+0xa84>
 8006a3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a40:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006b18 <interrupt_WallCut+0xa88>
 8006a44:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a48:	4b2b      	ldr	r3, [pc, #172]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a4a:	ed93 7a00 	vldr	s14, [r3]
 8006a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006a52:	4b2e      	ldr	r3, [pc, #184]	; (8006b0c <interrupt_WallCut+0xa7c>)
 8006a54:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a58:	4b27      	ldr	r3, [pc, #156]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a5a:	edd3 7a00 	vldr	s15, [r3]
 8006a5e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006b14 <interrupt_WallCut+0xa84>
 8006a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a66:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006b18 <interrupt_WallCut+0xa88>
 8006a6a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a6e:	4b22      	ldr	r3, [pc, #136]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a70:	ed93 7a00 	vldr	s14, [r3]
 8006a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006a78:	4b22      	ldr	r3, [pc, #136]	; (8006b04 <interrupt_WallCut+0xa74>)
 8006a7a:	edc3 7a00 	vstr	s15, [r3]
 8006a7e:	e0ac      	b.n	8006bda <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a80:	4b1d      	ldr	r3, [pc, #116]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a82:	edd3 7a00 	vldr	s15, [r3]
 8006a86:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006b14 <interrupt_WallCut+0xa84>
 8006a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a8e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006b18 <interrupt_WallCut+0xa88>
 8006a92:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a96:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006a98:	ed93 7a00 	vldr	s14, [r3]
 8006a9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	; (8006b0c <interrupt_WallCut+0xa7c>)
 8006aa2:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006aa6:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006aa8:	edd3 7a00 	vldr	s15, [r3]
 8006aac:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006b14 <interrupt_WallCut+0xa84>
 8006ab0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ab4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006b18 <interrupt_WallCut+0xa88>
 8006ab8:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006abc:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <interrupt_WallCut+0xa68>)
 8006abe:	ed93 7a00 	vldr	s14, [r3]
 8006ac2:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006ac6:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <interrupt_WallCut+0xa74>)
 8006ac8:	edc3 7a00 	vstr	s15, [r3]
 8006acc:	e085      	b.n	8006bda <interrupt_WallCut+0xb4a>
 8006ace:	bf00      	nop
 8006ad0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ad4:	3f50624d 	.word	0x3f50624d
 8006ad8:	200005c8 	.word	0x200005c8
 8006adc:	200005e8 	.word	0x200005e8
 8006ae0:	20000258 	.word	0x20000258
 8006ae4:	2000025c 	.word	0x2000025c
 8006ae8:	200005f0 	.word	0x200005f0
 8006aec:	200005e0 	.word	0x200005e0
 8006af0:	200004d8 	.word	0x200004d8
 8006af4:	2000045c 	.word	0x2000045c
 8006af8:	20000604 	.word	0x20000604
 8006afc:	200005c4 	.word	0x200005c4
 8006b00:	200005ef 	.word	0x200005ef
 8006b04:	200005e4 	.word	0x200005e4
 8006b08:	200005f1 	.word	0x200005f1
 8006b0c:	200005dc 	.word	0x200005dc
 8006b10:	200002b8 	.word	0x200002b8
 8006b14:	455ac000 	.word	0x455ac000
 8006b18:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006b1c:	4b66      	ldr	r3, [pc, #408]	; (8006cb8 <interrupt_WallCut+0xc28>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	4a65      	ldr	r2, [pc, #404]	; (8006cb8 <interrupt_WallCut+0xc28>)
 8006b24:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b26:	4b65      	ldr	r3, [pc, #404]	; (8006cbc <interrupt_WallCut+0xc2c>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7f9 fd34 	bl	8000598 <__aeabi_f2d>
 8006b30:	4604      	mov	r4, r0
 8006b32:	460d      	mov	r5, r1
 8006b34:	4b62      	ldr	r3, [pc, #392]	; (8006cc0 <interrupt_WallCut+0xc30>)
 8006b36:	ed93 7a00 	vldr	s14, [r3]
 8006b3a:	4b62      	ldr	r3, [pc, #392]	; (8006cc4 <interrupt_WallCut+0xc34>)
 8006b3c:	edd3 7a00 	vldr	s15, [r3]
 8006b40:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006b44:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b4c:	ee16 0a90 	vmov	r0, s13
 8006b50:	f7f9 fd22 	bl	8000598 <__aeabi_f2d>
 8006b54:	a356      	add	r3, pc, #344	; (adr r3, 8006cb0 <interrupt_WallCut+0xc20>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f7f9 fd75 	bl	8000648 <__aeabi_dmul>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	f7f9 fbb9 	bl	80002dc <__adddf3>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4610      	mov	r0, r2
 8006b70:	4619      	mov	r1, r3
 8006b72:	f7fa f841 	bl	8000bf8 <__aeabi_d2f>
 8006b76:	4603      	mov	r3, r0
 8006b78:	4a50      	ldr	r2, [pc, #320]	; (8006cbc <interrupt_WallCut+0xc2c>)
 8006b7a:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006b7c:	4b52      	ldr	r3, [pc, #328]	; (8006cc8 <interrupt_WallCut+0xc38>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d12a      	bne.n	8006bda <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b84:	4b51      	ldr	r3, [pc, #324]	; (8006ccc <interrupt_WallCut+0xc3c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7f9 fd05 	bl	8000598 <__aeabi_f2d>
 8006b8e:	4604      	mov	r4, r0
 8006b90:	460d      	mov	r5, r1
 8006b92:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <interrupt_WallCut+0xc30>)
 8006b94:	ed93 7a00 	vldr	s14, [r3]
 8006b98:	4b4a      	ldr	r3, [pc, #296]	; (8006cc4 <interrupt_WallCut+0xc34>)
 8006b9a:	edd3 7a00 	vldr	s15, [r3]
 8006b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006ba2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ba6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006baa:	ee16 0a90 	vmov	r0, s13
 8006bae:	f7f9 fcf3 	bl	8000598 <__aeabi_f2d>
 8006bb2:	a33f      	add	r3, pc, #252	; (adr r3, 8006cb0 <interrupt_WallCut+0xc20>)
 8006bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bb8:	f7f9 fd46 	bl	8000648 <__aeabi_dmul>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	f7f9 fb8a 	bl	80002dc <__adddf3>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4610      	mov	r0, r2
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f7fa f812 	bl	8000bf8 <__aeabi_d2f>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4a3d      	ldr	r2, [pc, #244]	; (8006ccc <interrupt_WallCut+0xc3c>)
 8006bd8:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006bda:	4b3b      	ldr	r3, [pc, #236]	; (8006cc8 <interrupt_WallCut+0xc38>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	701a      	strb	r2, [r3, #0]
}
 8006be0:	e05f      	b.n	8006ca2 <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 8006be2:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <interrupt_WallCut+0xc40>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006be8:	4b3a      	ldr	r3, [pc, #232]	; (8006cd4 <interrupt_WallCut+0xc44>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006bee:	4b3a      	ldr	r3, [pc, #232]	; (8006cd8 <interrupt_WallCut+0xc48>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006bf4:	4b39      	ldr	r3, [pc, #228]	; (8006cdc <interrupt_WallCut+0xc4c>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006bfa:	4b39      	ldr	r3, [pc, #228]	; (8006ce0 <interrupt_WallCut+0xc50>)
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006c00:	4b2d      	ldr	r3, [pc, #180]	; (8006cb8 <interrupt_WallCut+0xc28>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006c06:	4b37      	ldr	r3, [pc, #220]	; (8006ce4 <interrupt_WallCut+0xc54>)
 8006c08:	f04f 0200 	mov.w	r2, #0
 8006c0c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006c0e:	4b36      	ldr	r3, [pc, #216]	; (8006ce8 <interrupt_WallCut+0xc58>)
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006c16:	4b35      	ldr	r3, [pc, #212]	; (8006cec <interrupt_WallCut+0xc5c>)
 8006c18:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006c1c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006c1e:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <interrupt_WallCut+0xc60>)
 8006c20:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006c24:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006c26:	4b33      	ldr	r3, [pc, #204]	; (8006cf4 <interrupt_WallCut+0xc64>)
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006c2e:	4b27      	ldr	r3, [pc, #156]	; (8006ccc <interrupt_WallCut+0xc3c>)
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006c36:	4b30      	ldr	r3, [pc, #192]	; (8006cf8 <interrupt_WallCut+0xc68>)
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <interrupt_WallCut+0xc2c>)
 8006c40:	f04f 0200 	mov.w	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006c46:	4b2d      	ldr	r3, [pc, #180]	; (8006cfc <interrupt_WallCut+0xc6c>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006c4c:	4b2c      	ldr	r3, [pc, #176]	; (8006d00 <interrupt_WallCut+0xc70>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006c52:	4b2c      	ldr	r3, [pc, #176]	; (8006d04 <interrupt_WallCut+0xc74>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006c58:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <interrupt_WallCut+0xc78>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006c5e:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <interrupt_WallCut+0xc7c>)
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006c64:	4b18      	ldr	r3, [pc, #96]	; (8006cc8 <interrupt_WallCut+0xc38>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <interrupt_WallCut+0xc80>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006c70:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <interrupt_WallCut+0xc84>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c76:	4b28      	ldr	r3, [pc, #160]	; (8006d18 <interrupt_WallCut+0xc88>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c7c:	4b26      	ldr	r3, [pc, #152]	; (8006d18 <interrupt_WallCut+0xc88>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006c82:	4b26      	ldr	r3, [pc, #152]	; (8006d1c <interrupt_WallCut+0xc8c>)
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006c8a:	4b25      	ldr	r3, [pc, #148]	; (8006d20 <interrupt_WallCut+0xc90>)
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006c92:	4b24      	ldr	r3, [pc, #144]	; (8006d24 <interrupt_WallCut+0xc94>)
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006c9a:	4b23      	ldr	r3, [pc, #140]	; (8006d28 <interrupt_WallCut+0xc98>)
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
}
 8006ca2:	bf00      	nop
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bdb0      	pop	{r4, r5, r7, pc}
 8006caa:	bf00      	nop
 8006cac:	f3af 8000 	nop.w
 8006cb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006cb4:	3f50624d 	.word	0x3f50624d
 8006cb8:	200005c4 	.word	0x200005c4
 8006cbc:	200005e4 	.word	0x200005e4
 8006cc0:	20000258 	.word	0x20000258
 8006cc4:	2000025c 	.word	0x2000025c
 8006cc8:	200005f1 	.word	0x200005f1
 8006ccc:	200005dc 	.word	0x200005dc
 8006cd0:	200005b8 	.word	0x200005b8
 8006cd4:	200005b4 	.word	0x200005b4
 8006cd8:	200005c0 	.word	0x200005c0
 8006cdc:	200005bc 	.word	0x200005bc
 8006ce0:	200005c8 	.word	0x200005c8
 8006ce4:	200005d0 	.word	0x200005d0
 8006ce8:	200005cc 	.word	0x200005cc
 8006cec:	200005d8 	.word	0x200005d8
 8006cf0:	200005d4 	.word	0x200005d4
 8006cf4:	200005e0 	.word	0x200005e0
 8006cf8:	200005e8 	.word	0x200005e8
 8006cfc:	200005ec 	.word	0x200005ec
 8006d00:	200005ed 	.word	0x200005ed
 8006d04:	200005ee 	.word	0x200005ee
 8006d08:	200005ef 	.word	0x200005ef
 8006d0c:	200005f0 	.word	0x200005f0
 8006d10:	200005f2 	.word	0x200005f2
 8006d14:	200005f3 	.word	0x200005f3
 8006d18:	200005f4 	.word	0x200005f4
 8006d1c:	200005f8 	.word	0x200005f8
 8006d20:	200005fc 	.word	0x200005fc
 8006d24:	20000600 	.word	0x20000600
 8006d28:	20000604 	.word	0x20000604

08006d2c <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	461a      	mov	r2, r3
 8006d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d42:	f015 f9ef 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006d46:	bf00      	nop
 8006d48:	3708      	adds	r7, #8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	2140      	movs	r1, #64	; 0x40
 8006d60:	4803      	ldr	r0, [pc, #12]	; (8006d70 <pl_yellow_LED_3+0x20>)
 8006d62:	f015 f9df 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	48000800 	.word	0x48000800

08006d74 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	461a      	mov	r2, r3
 8006d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d86:	4803      	ldr	r0, [pc, #12]	; (8006d94 <pl_yellow_LED_6+0x20>)
 8006d88:	f015 f9cc 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	48000400 	.word	0x48000400

08006d98 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006daa:	4803      	ldr	r0, [pc, #12]	; (8006db8 <pl_yellow_LED_8+0x20>)
 8006dac:	f015 f9ba 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	48000400 	.word	0x48000400

08006dbc <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dca:	f015 f9ab 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dd8:	f015 f9a4 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2140      	movs	r1, #64	; 0x40
 8006de0:	4811      	ldr	r0, [pc, #68]	; (8006e28 <pl_yellow_LED_off+0x6c>)
 8006de2:	f015 f99f 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006de6:	2200      	movs	r2, #0
 8006de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dec:	480f      	ldr	r0, [pc, #60]	; (8006e2c <pl_yellow_LED_off+0x70>)
 8006dee:	f015 f999 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006df2:	2200      	movs	r2, #0
 8006df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006df8:	480c      	ldr	r0, [pc, #48]	; (8006e2c <pl_yellow_LED_off+0x70>)
 8006dfa:	f015 f993 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e04:	4809      	ldr	r0, [pc, #36]	; (8006e2c <pl_yellow_LED_off+0x70>)
 8006e06:	f015 f98d 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e10:	4806      	ldr	r0, [pc, #24]	; (8006e2c <pl_yellow_LED_off+0x70>)
 8006e12:	f015 f987 	bl	801c124 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006e16:	2200      	movs	r2, #0
 8006e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e1c:	4803      	ldr	r0, [pc, #12]	; (8006e2c <pl_yellow_LED_off+0x70>)
 8006e1e:	f015 f981 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	48000800 	.word	0x48000800
 8006e2c:	48000400 	.word	0x48000400

08006e30 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	4603      	mov	r3, r0
 8006e38:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	f003 0308 	and.w	r3, r3, #8
 8006e58:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	f003 0310 	and.w	r3, r3, #16
 8006e60:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006e6a:	79fb      	ldrb	r3, [r7, #7]
 8006e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e70:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e78:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006e7a:	7bfb      	ldrb	r3, [r7, #15]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d007      	beq.n	8006e90 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006e80:	2201      	movs	r2, #1
 8006e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e8a:	f015 f94b 	bl	801c124 <HAL_GPIO_WritePin>
 8006e8e:	e006      	b.n	8006e9e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006e90:	2200      	movs	r2, #0
 8006e92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e9a:	f015 f943 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d007      	beq.n	8006eb4 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eae:	f015 f939 	bl	801c124 <HAL_GPIO_WritePin>
 8006eb2:	e006      	b.n	8006ec2 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ebe:	f015 f931 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006ec2:	7b7b      	ldrb	r3, [r7, #13]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006ec8:	2201      	movs	r2, #1
 8006eca:	2140      	movs	r1, #64	; 0x40
 8006ecc:	482e      	ldr	r0, [pc, #184]	; (8006f88 <pl_yellow_LED_count+0x158>)
 8006ece:	f015 f929 	bl	801c124 <HAL_GPIO_WritePin>
 8006ed2:	e004      	b.n	8006ede <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2140      	movs	r1, #64	; 0x40
 8006ed8:	482b      	ldr	r0, [pc, #172]	; (8006f88 <pl_yellow_LED_count+0x158>)
 8006eda:	f015 f923 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006ede:	7b3b      	ldrb	r3, [r7, #12]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d006      	beq.n	8006ef2 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eea:	4828      	ldr	r0, [pc, #160]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006eec:	f015 f91a 	bl	801c124 <HAL_GPIO_WritePin>
 8006ef0:	e005      	b.n	8006efe <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ef8:	4824      	ldr	r0, [pc, #144]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006efa:	f015 f913 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006f04:	2201      	movs	r2, #1
 8006f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f0a:	4820      	ldr	r0, [pc, #128]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f0c:	f015 f90a 	bl	801c124 <HAL_GPIO_WritePin>
 8006f10:	e005      	b.n	8006f1e <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006f12:	2200      	movs	r2, #0
 8006f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f18:	481c      	ldr	r0, [pc, #112]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f1a:	f015 f903 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006f1e:	7abb      	ldrb	r3, [r7, #10]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d006      	beq.n	8006f32 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006f24:	2201      	movs	r2, #1
 8006f26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f2a:	4818      	ldr	r0, [pc, #96]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f2c:	f015 f8fa 	bl	801c124 <HAL_GPIO_WritePin>
 8006f30:	e005      	b.n	8006f3e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006f32:	2200      	movs	r2, #0
 8006f34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f38:	4814      	ldr	r0, [pc, #80]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f3a:	f015 f8f3 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8006f3e:	7a7b      	ldrb	r3, [r7, #9]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d006      	beq.n	8006f52 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006f44:	2201      	movs	r2, #1
 8006f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f4a:	4810      	ldr	r0, [pc, #64]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f4c:	f015 f8ea 	bl	801c124 <HAL_GPIO_WritePin>
 8006f50:	e005      	b.n	8006f5e <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006f52:	2200      	movs	r2, #0
 8006f54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f58:	480c      	ldr	r0, [pc, #48]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f5a:	f015 f8e3 	bl	801c124 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8006f5e:	7a3b      	ldrb	r3, [r7, #8]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d006      	beq.n	8006f72 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006f64:	2201      	movs	r2, #1
 8006f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f6a:	4808      	ldr	r0, [pc, #32]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f6c:	f015 f8da 	bl	801c124 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8006f70:	e005      	b.n	8006f7e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006f72:	2200      	movs	r2, #0
 8006f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f78:	4804      	ldr	r0, [pc, #16]	; (8006f8c <pl_yellow_LED_count+0x15c>)
 8006f7a:	f015 f8d3 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	48000800 	.word	0x48000800
 8006f8c:	48000400 	.word	0x48000400

08006f90 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fa2:	4803      	ldr	r0, [pc, #12]	; (8006fb0 <pl_r_blue_LED+0x20>)
 8006fa4:	f015 f8be 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006fa8:	bf00      	nop
 8006faa:	3708      	adds	r7, #8
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	48000800 	.word	0x48000800

08006fb4 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	2104      	movs	r1, #4
 8006fc4:	4803      	ldr	r0, [pc, #12]	; (8006fd4 <pl_l_blue_LED+0x20>)
 8006fc6:	f015 f8ad 	bl	801c124 <HAL_GPIO_WritePin>
}
 8006fca:	bf00      	nop
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	48000400 	.word	0x48000400

08006fd8 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	460a      	mov	r2, r1
 8006fe2:	80fb      	strh	r3, [r7, #6]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2110      	movs	r1, #16
 8006fec:	4833      	ldr	r0, [pc, #204]	; (80070bc <encoder_read_byte_R+0xe4>)
 8006fee:	f015 f899 	bl	801c124 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8006ff2:	88fb      	ldrh	r3, [r7, #6]
 8006ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ff8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8006ffe:	2300      	movs	r3, #0
 8007000:	61bb      	str	r3, [r7, #24]
 8007002:	e00d      	b.n	8007020 <encoder_read_byte_R+0x48>
 8007004:	88fa      	ldrh	r2, [r7, #6]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	fa42 f303 	asr.w	r3, r2, r3
 800700c:	b29b      	uxth	r3, r3
 800700e:	f003 0301 	and.w	r3, r3, #1
 8007012:	b29a      	uxth	r2, r3
 8007014:	8bfb      	ldrh	r3, [r7, #30]
 8007016:	4413      	add	r3, r2
 8007018:	83fb      	strh	r3, [r7, #30]
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3301      	adds	r3, #1
 800701e:	61bb      	str	r3, [r7, #24]
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	2b0e      	cmp	r3, #14
 8007024:	ddee      	ble.n	8007004 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007026:	8bfb      	ldrh	r3, [r7, #30]
 8007028:	03db      	lsls	r3, r3, #15
 800702a:	b21a      	sxth	r2, r3
 800702c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007030:	4313      	orrs	r3, r2
 8007032:	b21b      	sxth	r3, r3
 8007034:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007036:	88fb      	ldrh	r3, [r7, #6]
 8007038:	0a1b      	lsrs	r3, r3, #8
 800703a:	b29b      	uxth	r3, r3
 800703c:	b2db      	uxtb	r3, r3
 800703e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007040:	88fb      	ldrh	r3, [r7, #6]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007046:	f107 0110 	add.w	r1, r7, #16
 800704a:	2364      	movs	r3, #100	; 0x64
 800704c:	2202      	movs	r2, #2
 800704e:	481c      	ldr	r0, [pc, #112]	; (80070c0 <encoder_read_byte_R+0xe8>)
 8007050:	f016 f94b 	bl	801d2ea <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007054:	2201      	movs	r2, #1
 8007056:	2110      	movs	r1, #16
 8007058:	4818      	ldr	r0, [pc, #96]	; (80070bc <encoder_read_byte_R+0xe4>)
 800705a:	f015 f863 	bl	801c124 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
 8007062:	e002      	b.n	800706a <encoder_read_byte_R+0x92>
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	3301      	adds	r3, #1
 8007068:	617b      	str	r3, [r7, #20]
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b95      	cmp	r3, #149	; 0x95
 800706e:	ddf9      	ble.n	8007064 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007070:	2200      	movs	r2, #0
 8007072:	2110      	movs	r1, #16
 8007074:	4811      	ldr	r0, [pc, #68]	; (80070bc <encoder_read_byte_R+0xe4>)
 8007076:	f015 f855 	bl	801c124 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800707a:	88bb      	ldrh	r3, [r7, #4]
 800707c:	0a1b      	lsrs	r3, r3, #8
 800707e:	b29b      	uxth	r3, r3
 8007080:	b2db      	uxtb	r3, r3
 8007082:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007084:	88bb      	ldrh	r3, [r7, #4]
 8007086:	b2db      	uxtb	r3, r3
 8007088:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800708a:	f107 010c 	add.w	r1, r7, #12
 800708e:	2364      	movs	r3, #100	; 0x64
 8007090:	2202      	movs	r2, #2
 8007092:	480b      	ldr	r0, [pc, #44]	; (80070c0 <encoder_read_byte_R+0xe8>)
 8007094:	f016 fa97 	bl	801d5c6 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007098:	7b3b      	ldrb	r3, [r7, #12]
 800709a:	021b      	lsls	r3, r3, #8
 800709c:	b21a      	sxth	r2, r3
 800709e:	7b7b      	ldrb	r3, [r7, #13]
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	4313      	orrs	r3, r2
 80070a4:	b21b      	sxth	r3, r3
 80070a6:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80070a8:	2201      	movs	r2, #1
 80070aa:	2110      	movs	r1, #16
 80070ac:	4803      	ldr	r0, [pc, #12]	; (80070bc <encoder_read_byte_R+0xe4>)
 80070ae:	f015 f839 	bl	801c124 <HAL_GPIO_WritePin>

	return data;
 80070b2:	88bb      	ldrh	r3, [r7, #4]

}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3720      	adds	r7, #32
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	48000400 	.word	0x48000400
 80070c0:	2000ee34 	.word	0x2000ee34

080070c4 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	460a      	mov	r2, r1
 80070ce:	80fb      	strh	r3, [r7, #6]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80070d4:	2200      	movs	r2, #0
 80070d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070de:	f015 f821 	bl	801c124 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070e8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80070ee:	2300      	movs	r3, #0
 80070f0:	61bb      	str	r3, [r7, #24]
 80070f2:	e00d      	b.n	8007110 <encoder_read_byte_L+0x4c>
 80070f4:	88fa      	ldrh	r2, [r7, #6]
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	fa42 f303 	asr.w	r3, r2, r3
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	b29a      	uxth	r2, r3
 8007104:	8bfb      	ldrh	r3, [r7, #30]
 8007106:	4413      	add	r3, r2
 8007108:	83fb      	strh	r3, [r7, #30]
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	3301      	adds	r3, #1
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	2b0e      	cmp	r3, #14
 8007114:	ddee      	ble.n	80070f4 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007116:	8bfb      	ldrh	r3, [r7, #30]
 8007118:	03db      	lsls	r3, r3, #15
 800711a:	b21a      	sxth	r2, r3
 800711c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007120:	4313      	orrs	r3, r2
 8007122:	b21b      	sxth	r3, r3
 8007124:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007126:	88fb      	ldrh	r3, [r7, #6]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	b29b      	uxth	r3, r3
 800712c:	b2db      	uxtb	r3, r3
 800712e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007130:	88fb      	ldrh	r3, [r7, #6]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007136:	f107 0110 	add.w	r1, r7, #16
 800713a:	2364      	movs	r3, #100	; 0x64
 800713c:	2202      	movs	r2, #2
 800713e:	481e      	ldr	r0, [pc, #120]	; (80071b8 <encoder_read_byte_L+0xf4>)
 8007140:	f016 f8d3 	bl	801d2ea <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007144:	2201      	movs	r2, #1
 8007146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800714a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800714e:	f014 ffe9 	bl	801c124 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	e002      	b.n	800715e <encoder_read_byte_L+0x9a>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	3301      	adds	r3, #1
 800715c:	617b      	str	r3, [r7, #20]
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	2b95      	cmp	r3, #149	; 0x95
 8007162:	ddf9      	ble.n	8007158 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007164:	2200      	movs	r2, #0
 8007166:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800716a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800716e:	f014 ffd9 	bl	801c124 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007172:	88bb      	ldrh	r3, [r7, #4]
 8007174:	0a1b      	lsrs	r3, r3, #8
 8007176:	b29b      	uxth	r3, r3
 8007178:	b2db      	uxtb	r3, r3
 800717a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800717c:	88bb      	ldrh	r3, [r7, #4]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007182:	f107 010c 	add.w	r1, r7, #12
 8007186:	2364      	movs	r3, #100	; 0x64
 8007188:	2202      	movs	r2, #2
 800718a:	480b      	ldr	r0, [pc, #44]	; (80071b8 <encoder_read_byte_L+0xf4>)
 800718c:	f016 fa1b 	bl	801d5c6 <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007190:	7b3b      	ldrb	r3, [r7, #12]
 8007192:	021b      	lsls	r3, r3, #8
 8007194:	b21a      	sxth	r2, r3
 8007196:	7b7b      	ldrb	r3, [r7, #13]
 8007198:	b21b      	sxth	r3, r3
 800719a:	4313      	orrs	r3, r2
 800719c:	b21b      	sxth	r3, r3
 800719e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80071a0:	2201      	movs	r2, #1
 80071a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071aa:	f014 ffbb 	bl	801c124 <HAL_GPIO_WritePin>

	return data;
 80071ae:	88bb      	ldrh	r3, [r7, #4]

}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3720      	adds	r7, #32
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	2000ee34 	.word	0x2000ee34

080071bc <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 80071bc:	b580      	push	{r7, lr}
 80071be:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071c0:	2100      	movs	r1, #0
 80071c2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071c6:	f7ff ff07 	bl	8006fd8 <encoder_read_byte_R>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071d0:	ee07 3a90 	vmov	s15, r3
 80071d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071d8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007220 <AS5047_DataUpdate+0x64>
 80071dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071e0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007224 <AS5047_DataUpdate+0x68>
 80071e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <AS5047_DataUpdate+0x6c>)
 80071ea:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071ee:	2100      	movs	r1, #0
 80071f0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071f4:	f7ff ff66 	bl	80070c4 <encoder_read_byte_L>
 80071f8:	4603      	mov	r3, r0
 80071fa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007206:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007220 <AS5047_DataUpdate+0x64>
 800720a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800720e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007224 <AS5047_DataUpdate+0x68>
 8007212:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007216:	4b05      	ldr	r3, [pc, #20]	; (800722c <AS5047_DataUpdate+0x70>)
 8007218:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 800721c:	bf00      	nop
 800721e:	bd80      	pop	{r7, pc}
 8007220:	43b40000 	.word	0x43b40000
 8007224:	46800000 	.word	0x46800000
 8007228:	200006d8 	.word	0x200006d8
 800722c:	200006dc 	.word	0x200006dc

08007230 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
		  record_out();
 8007234:	f000 f91a 	bl	800746c <record_out>
		  maze_display();
 8007238:	f00d fe20 	bl	8014e7c <maze_display>
		  flash_record_init();
 800723c:	f000 f9c2 	bl	80075c4 <flash_record_init>
		  record_in();
 8007240:	f000 f858 	bl	80072f4 <record_in>
}
 8007244:	bf00      	nop
 8007246:	bd80      	pop	{r7, pc}

08007248 <eraseFlash>:


void eraseFlash( void )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 8007252:	2301      	movs	r3, #1
 8007254:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007256:	23fe      	movs	r3, #254	; 0xfe
 8007258:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 800725a:	2301      	movs	r3, #1
 800725c:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007262:	1d3a      	adds	r2, r7, #4
 8007264:	f107 0308 	add.w	r3, r7, #8
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f014 fcb2 	bl	801bbd4 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007270:	bf00      	nop
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007278:	b5b0      	push	{r4, r5, r7, lr}
 800727a:	b086      	sub	sp, #24
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]
 8007284:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007286:	f014 fbb9 	bl	801b9fc <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d101      	bne.n	8007294 <writeFlash+0x1c>
 8007290:	f7ff ffda 	bl	8007248 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e00f      	b.n	80072ba <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	17da      	asrs	r2, r3, #31
 800729e:	461c      	mov	r4, r3
 80072a0:	4615      	mov	r5, r2
 80072a2:	4622      	mov	r2, r4
 80072a4:	462b      	mov	r3, r5
 80072a6:	6979      	ldr	r1, [r7, #20]
 80072a8:	2000      	movs	r0, #0
 80072aa:	f014 fb51 	bl	801b950 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	3320      	adds	r3, #32
 80072b2:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	3308      	adds	r3, #8
 80072b8:	617b      	str	r3, [r7, #20]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	4413      	add	r3, r2
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d3e9      	bcc.n	800729a <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 80072c6:	f014 fbbb 	bl	801ba40 <HAL_FLASH_Lock>

}
 80072ca:	bf00      	nop
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bdb0      	pop	{r4, r5, r7, pc}

080072d2 <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	4619      	mov	r1, r3
 80072e4:	68b8      	ldr	r0, [r7, #8]
 80072e6:	f019 f833 	bl	8020350 <memcpy>

}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
	...

080072f4 <record_in>:


void record_in(void) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
	int t = 0;
 80072fa:	2300      	movs	r3, #0
 80072fc:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80072fe:	4b58      	ldr	r3, [pc, #352]	; (8007460 <record_in+0x16c>)
 8007300:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 8007302:	e017      	b.n	8007334 <record_in+0x40>
		record.row[t] = wall.row[t];
 8007304:	4a57      	ldr	r2, [pc, #348]	; (8007464 <record_in+0x170>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800730c:	4a56      	ldr	r2, [pc, #344]	; (8007468 <record_in+0x174>)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 8007314:	4a53      	ldr	r2, [pc, #332]	; (8007464 <record_in+0x170>)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	330c      	adds	r3, #12
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	4413      	add	r3, r2
 800731e:	88d9      	ldrh	r1, [r3, #6]
 8007320:	4a51      	ldr	r2, [pc, #324]	; (8007468 <record_in+0x174>)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	330c      	adds	r3, #12
 8007326:	005b      	lsls	r3, r3, #1
 8007328:	4413      	add	r3, r2
 800732a:	460a      	mov	r2, r1
 800732c:	80da      	strh	r2, [r3, #6]
		t++;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	3301      	adds	r3, #1
 8007332:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b0e      	cmp	r3, #14
 8007338:	dde4      	ble.n	8007304 <record_in+0x10>
	}
	t = 0;
 800733a:	2300      	movs	r3, #0
 800733c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800733e:	e01c      	b.n	800737a <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 8007340:	4a48      	ldr	r2, [pc, #288]	; (8007464 <record_in+0x170>)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	331c      	adds	r3, #28
 8007346:	005b      	lsls	r3, r3, #1
 8007348:	4413      	add	r3, r2
 800734a:	8899      	ldrh	r1, [r3, #4]
 800734c:	4a46      	ldr	r2, [pc, #280]	; (8007468 <record_in+0x174>)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	331c      	adds	r3, #28
 8007352:	005b      	lsls	r3, r3, #1
 8007354:	4413      	add	r3, r2
 8007356:	460a      	mov	r2, r1
 8007358:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 800735a:	4a42      	ldr	r2, [pc, #264]	; (8007464 <record_in+0x170>)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	332c      	adds	r3, #44	; 0x2c
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	4413      	add	r3, r2
 8007364:	8859      	ldrh	r1, [r3, #2]
 8007366:	4a40      	ldr	r2, [pc, #256]	; (8007468 <record_in+0x174>)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	332c      	adds	r3, #44	; 0x2c
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	4413      	add	r3, r2
 8007370:	460a      	mov	r2, r1
 8007372:	805a      	strh	r2, [r3, #2]
		t++;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	3301      	adds	r3, #1
 8007378:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2b0e      	cmp	r3, #14
 800737e:	dddf      	ble.n	8007340 <record_in+0x4c>
	}
	t = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007384:	4b38      	ldr	r3, [pc, #224]	; (8007468 <record_in+0x174>)
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	4619      	mov	r1, r3
 800738a:	2301      	movs	r3, #1
 800738c:	2201      	movs	r2, #1
 800738e:	6838      	ldr	r0, [r7, #0]
 8007390:	f7ff ff72 	bl	8007278 <writeFlash>
	address+=16;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	3310      	adds	r3, #16
 8007398:	603b      	str	r3, [r7, #0]
	t=1;
 800739a:	2301      	movs	r3, #1
 800739c:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800739e:	e00f      	b.n	80073c0 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 80073a0:	4a31      	ldr	r2, [pc, #196]	; (8007468 <record_in+0x174>)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a8:	4619      	mov	r1, r3
 80073aa:	2300      	movs	r3, #0
 80073ac:	2201      	movs	r2, #1
 80073ae:	6838      	ldr	r0, [r7, #0]
 80073b0:	f7ff ff62 	bl	8007278 <writeFlash>
	address+=16;
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	3310      	adds	r3, #16
 80073b8:	603b      	str	r3, [r7, #0]
	t++;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3301      	adds	r3, #1
 80073be:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b0e      	cmp	r3, #14
 80073c4:	ddec      	ble.n	80073a0 <record_in+0xac>
	}

	t=0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073ca:	e011      	b.n	80073f0 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 80073cc:	4a26      	ldr	r2, [pc, #152]	; (8007468 <record_in+0x174>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	330c      	adds	r3, #12
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	88db      	ldrh	r3, [r3, #6]
 80073d8:	4619      	mov	r1, r3
 80073da:	2300      	movs	r3, #0
 80073dc:	2201      	movs	r2, #1
 80073de:	6838      	ldr	r0, [r7, #0]
 80073e0:	f7ff ff4a 	bl	8007278 <writeFlash>
	address+=16;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	3310      	adds	r3, #16
 80073e8:	603b      	str	r3, [r7, #0]
	t++;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	3301      	adds	r3, #1
 80073ee:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b0e      	cmp	r3, #14
 80073f4:	ddea      	ble.n	80073cc <record_in+0xd8>
	}

	t=0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073fa:	e011      	b.n	8007420 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80073fc:	4a1a      	ldr	r2, [pc, #104]	; (8007468 <record_in+0x174>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	331c      	adds	r3, #28
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	4413      	add	r3, r2
 8007406:	889b      	ldrh	r3, [r3, #4]
 8007408:	4619      	mov	r1, r3
 800740a:	2300      	movs	r3, #0
 800740c:	2201      	movs	r2, #1
 800740e:	6838      	ldr	r0, [r7, #0]
 8007410:	f7ff ff32 	bl	8007278 <writeFlash>
	address+=16;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	3310      	adds	r3, #16
 8007418:	603b      	str	r3, [r7, #0]
	t++;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3301      	adds	r3, #1
 800741e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b0e      	cmp	r3, #14
 8007424:	ddea      	ble.n	80073fc <record_in+0x108>
	}

	t=0;
 8007426:	2300      	movs	r3, #0
 8007428:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800742a:	e011      	b.n	8007450 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 800742c:	4a0e      	ldr	r2, [pc, #56]	; (8007468 <record_in+0x174>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	332c      	adds	r3, #44	; 0x2c
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	885b      	ldrh	r3, [r3, #2]
 8007438:	4619      	mov	r1, r3
 800743a:	2300      	movs	r3, #0
 800743c:	2201      	movs	r2, #1
 800743e:	6838      	ldr	r0, [r7, #0]
 8007440:	f7ff ff1a 	bl	8007278 <writeFlash>
	address+=16;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	3310      	adds	r3, #16
 8007448:	603b      	str	r3, [r7, #0]
	t++;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3301      	adds	r3, #1
 800744e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b0e      	cmp	r3, #14
 8007454:	ddea      	ble.n	800742c <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	0807f000 	.word	0x0807f000
 8007464:	20000c3c 	.word	0x20000c3c
 8007468:	20000cb4 	.word	0x20000cb4

0800746c <record_out>:


void record_out(void) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007476:	4b50      	ldr	r3, [pc, #320]	; (80075b8 <record_out+0x14c>)
 8007478:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 800747a:	e00e      	b.n	800749a <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4a4e      	ldr	r2, [pc, #312]	; (80075bc <record_out+0x150>)
 8007482:	4413      	add	r3, r2
 8007484:	2202      	movs	r2, #2
 8007486:	4619      	mov	r1, r3
 8007488:	6838      	ldr	r0, [r7, #0]
 800748a:	f7ff ff22 	bl	80072d2 <loadFlash>
	address+=16;
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	3310      	adds	r3, #16
 8007492:	603b      	str	r3, [r7, #0]
	t++;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	3301      	adds	r3, #1
 8007498:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b0e      	cmp	r3, #14
 800749e:	dded      	ble.n	800747c <record_out+0x10>
	}

	t=0;
 80074a0:	2300      	movs	r3, #0
 80074a2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074a4:	e010      	b.n	80074c8 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	330c      	adds	r3, #12
 80074aa:	005b      	lsls	r3, r3, #1
 80074ac:	4a43      	ldr	r2, [pc, #268]	; (80075bc <record_out+0x150>)
 80074ae:	4413      	add	r3, r2
 80074b0:	3306      	adds	r3, #6
 80074b2:	2202      	movs	r2, #2
 80074b4:	4619      	mov	r1, r3
 80074b6:	6838      	ldr	r0, [r7, #0]
 80074b8:	f7ff ff0b 	bl	80072d2 <loadFlash>
	address+=16;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	3310      	adds	r3, #16
 80074c0:	603b      	str	r3, [r7, #0]
	t++;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	3301      	adds	r3, #1
 80074c6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b0e      	cmp	r3, #14
 80074cc:	ddeb      	ble.n	80074a6 <record_out+0x3a>
	}

	t=0;
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074d2:	e010      	b.n	80074f6 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	331c      	adds	r3, #28
 80074d8:	005b      	lsls	r3, r3, #1
 80074da:	4a38      	ldr	r2, [pc, #224]	; (80075bc <record_out+0x150>)
 80074dc:	4413      	add	r3, r2
 80074de:	3304      	adds	r3, #4
 80074e0:	2202      	movs	r2, #2
 80074e2:	4619      	mov	r1, r3
 80074e4:	6838      	ldr	r0, [r7, #0]
 80074e6:	f7ff fef4 	bl	80072d2 <loadFlash>
		address+=16;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	3310      	adds	r3, #16
 80074ee:	603b      	str	r3, [r7, #0]
		t++;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3301      	adds	r3, #1
 80074f4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b0e      	cmp	r3, #14
 80074fa:	ddeb      	ble.n	80074d4 <record_out+0x68>
	}

	t=0;
 80074fc:	2300      	movs	r3, #0
 80074fe:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007500:	e010      	b.n	8007524 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	332c      	adds	r3, #44	; 0x2c
 8007506:	005b      	lsls	r3, r3, #1
 8007508:	4a2c      	ldr	r2, [pc, #176]	; (80075bc <record_out+0x150>)
 800750a:	4413      	add	r3, r2
 800750c:	3302      	adds	r3, #2
 800750e:	2202      	movs	r2, #2
 8007510:	4619      	mov	r1, r3
 8007512:	6838      	ldr	r0, [r7, #0]
 8007514:	f7ff fedd 	bl	80072d2 <loadFlash>
		address+=16;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	3310      	adds	r3, #16
 800751c:	603b      	str	r3, [r7, #0]
		t++;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	3301      	adds	r3, #1
 8007522:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b0e      	cmp	r3, #14
 8007528:	ddeb      	ble.n	8007502 <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800752e:	e017      	b.n	8007560 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007530:	4a22      	ldr	r2, [pc, #136]	; (80075bc <record_out+0x150>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007538:	4a21      	ldr	r2, [pc, #132]	; (80075c0 <record_out+0x154>)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8007540:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <record_out+0x150>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	330c      	adds	r3, #12
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	4413      	add	r3, r2
 800754a:	88d9      	ldrh	r1, [r3, #6]
 800754c:	4a1c      	ldr	r2, [pc, #112]	; (80075c0 <record_out+0x154>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	330c      	adds	r3, #12
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	4413      	add	r3, r2
 8007556:	460a      	mov	r2, r1
 8007558:	80da      	strh	r2, [r3, #6]
		t++;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3301      	adds	r3, #1
 800755e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2b0e      	cmp	r3, #14
 8007564:	dde4      	ble.n	8007530 <record_out+0xc4>
	}
	t = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800756a:	e01c      	b.n	80075a6 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 800756c:	4a13      	ldr	r2, [pc, #76]	; (80075bc <record_out+0x150>)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	331c      	adds	r3, #28
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	8899      	ldrh	r1, [r3, #4]
 8007578:	4a11      	ldr	r2, [pc, #68]	; (80075c0 <record_out+0x154>)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	331c      	adds	r3, #28
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	460a      	mov	r2, r1
 8007584:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 8007586:	4a0d      	ldr	r2, [pc, #52]	; (80075bc <record_out+0x150>)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	332c      	adds	r3, #44	; 0x2c
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	4413      	add	r3, r2
 8007590:	8859      	ldrh	r1, [r3, #2]
 8007592:	4a0b      	ldr	r2, [pc, #44]	; (80075c0 <record_out+0x154>)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	332c      	adds	r3, #44	; 0x2c
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	460a      	mov	r2, r1
 800759e:	805a      	strh	r2, [r3, #2]
		t++;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3301      	adds	r3, #1
 80075a4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b0e      	cmp	r3, #14
 80075aa:	dddf      	ble.n	800756c <record_out+0x100>
	}

	t = 0;
 80075ac:	2300      	movs	r3, #0
 80075ae:	607b      	str	r3, [r7, #4]

}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	0807f000 	.word	0x0807f000
 80075bc:	20000cb4 	.word	0x20000cb4
 80075c0:	20000c3c 	.word	0x20000c3c

080075c4 <flash_record_init>:

void flash_record_init(void){
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	int t = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075ce:	e013      	b.n	80075f8 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 80075d0:	4a1e      	ldr	r2, [pc, #120]	; (800764c <flash_record_init+0x88>)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80075d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	005b      	lsls	r3, r3, #1
 80075e2:	b299      	uxth	r1, r3
 80075e4:	4a19      	ldr	r2, [pc, #100]	; (800764c <flash_record_init+0x88>)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	330c      	adds	r3, #12
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	460a      	mov	r2, r1
 80075f0:	80da      	strh	r2, [r3, #6]
		t++;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3301      	adds	r3, #1
 80075f6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b0e      	cmp	r3, #14
 80075fc:	dde8      	ble.n	80075d0 <flash_record_init+0xc>
	}
	t = 0;
 80075fe:	2300      	movs	r3, #0
 8007600:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007602:	e018      	b.n	8007636 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	b29b      	uxth	r3, r3
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	b299      	uxth	r1, r3
 800760c:	4a0f      	ldr	r2, [pc, #60]	; (800764c <flash_record_init+0x88>)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	331c      	adds	r3, #28
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	4413      	add	r3, r2
 8007616:	460a      	mov	r2, r1
 8007618:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	b29b      	uxth	r3, r3
 800761e:	00db      	lsls	r3, r3, #3
 8007620:	b299      	uxth	r1, r3
 8007622:	4a0a      	ldr	r2, [pc, #40]	; (800764c <flash_record_init+0x88>)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	332c      	adds	r3, #44	; 0x2c
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	460a      	mov	r2, r1
 800762e:	805a      	strh	r2, [r3, #2]
		t++;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	3301      	adds	r3, #1
 8007634:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b0e      	cmp	r3, #14
 800763a:	dde3      	ble.n	8007604 <flash_record_init+0x40>
	}

}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	20000c3c 	.word	0x20000c3c

08007650 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	4603      	mov	r3, r0
 8007658:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800765a:	2200      	movs	r2, #0
 800765c:	2110      	movs	r1, #16
 800765e:	4810      	ldr	r0, [pc, #64]	; (80076a0 <gyro_read_byte+0x50>)
 8007660:	f014 fd60 	bl	801c124 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007664:	79fb      	ldrb	r3, [r7, #7]
 8007666:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800766a:	b2db      	uxtb	r3, r3
 800766c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800766e:	f107 010f 	add.w	r1, r7, #15
 8007672:	2364      	movs	r3, #100	; 0x64
 8007674:	2201      	movs	r2, #1
 8007676:	480b      	ldr	r0, [pc, #44]	; (80076a4 <gyro_read_byte+0x54>)
 8007678:	f015 fe37 	bl	801d2ea <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 800767c:	f107 010e 	add.w	r1, r7, #14
 8007680:	2364      	movs	r3, #100	; 0x64
 8007682:	2201      	movs	r2, #1
 8007684:	4807      	ldr	r0, [pc, #28]	; (80076a4 <gyro_read_byte+0x54>)
 8007686:	f015 ff9e 	bl	801d5c6 <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800768a:	2201      	movs	r2, #1
 800768c:	2110      	movs	r1, #16
 800768e:	4804      	ldr	r0, [pc, #16]	; (80076a0 <gyro_read_byte+0x50>)
 8007690:	f014 fd48 	bl	801c124 <HAL_GPIO_WritePin>

	return val;
 8007694:	7bbb      	ldrb	r3, [r7, #14]

}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	48000800 	.word	0x48000800
 80076a4:	2000edd0 	.word	0x2000edd0

080076a8 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	4603      	mov	r3, r0
 80076b0:	460a      	mov	r2, r1
 80076b2:	71fb      	strb	r3, [r7, #7]
 80076b4:	4613      	mov	r3, r2
 80076b6:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 80076b8:	79fb      	ldrb	r3, [r7, #7]
 80076ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80076c2:	2200      	movs	r2, #0
 80076c4:	2110      	movs	r1, #16
 80076c6:	480c      	ldr	r0, [pc, #48]	; (80076f8 <gyro_write_byte+0x50>)
 80076c8:	f014 fd2c 	bl	801c124 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80076cc:	f107 010f 	add.w	r1, r7, #15
 80076d0:	2364      	movs	r3, #100	; 0x64
 80076d2:	2201      	movs	r2, #1
 80076d4:	4809      	ldr	r0, [pc, #36]	; (80076fc <gyro_write_byte+0x54>)
 80076d6:	f015 fe08 	bl	801d2ea <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80076da:	1db9      	adds	r1, r7, #6
 80076dc:	2364      	movs	r3, #100	; 0x64
 80076de:	2201      	movs	r2, #1
 80076e0:	4806      	ldr	r0, [pc, #24]	; (80076fc <gyro_write_byte+0x54>)
 80076e2:	f015 fe02 	bl	801d2ea <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80076e6:	2201      	movs	r2, #1
 80076e8:	2110      	movs	r1, #16
 80076ea:	4803      	ldr	r0, [pc, #12]	; (80076f8 <gyro_write_byte+0x50>)
 80076ec:	f014 fd1a 	bl	801c124 <HAL_GPIO_WritePin>

}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	48000800 	.word	0x48000800
 80076fc:	2000edd0 	.word	0x2000edd0

08007700 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007706:	2300      	movs	r3, #0
 8007708:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 800770a:	2075      	movs	r0, #117	; 0x75
 800770c:	f7ff ffa0 	bl	8007650 <gyro_read_byte>
 8007710:	4603      	mov	r3, r0
 8007712:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	4619      	mov	r1, r3
 8007718:	481b      	ldr	r0, [pc, #108]	; (8007788 <pl_gyro_init+0x88>)
 800771a:	f019 fa99 	bl	8020c50 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	2b98      	cmp	r3, #152	; 0x98
 8007722:	d00e      	beq.n	8007742 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007724:	2064      	movs	r0, #100	; 0x64
 8007726:	f011 fb41 	bl	8018dac <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 800772a:	2075      	movs	r0, #117	; 0x75
 800772c:	f7ff ff90 	bl	8007650 <gyro_read_byte>
 8007730:	4603      	mov	r3, r0
 8007732:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b98      	cmp	r3, #152	; 0x98
 8007738:	d003      	beq.n	8007742 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 800773a:	4814      	ldr	r0, [pc, #80]	; (800778c <pl_gyro_init+0x8c>)
 800773c:	f019 fa88 	bl	8020c50 <iprintf>
 8007740:	e7fb      	b.n	800773a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007742:	2100      	movs	r1, #0
 8007744:	206b      	movs	r0, #107	; 0x6b
 8007746:	f7ff ffaf 	bl	80076a8 <gyro_write_byte>

	HAL_Delay(50);
 800774a:	2032      	movs	r0, #50	; 0x32
 800774c:	f011 fb2e 	bl	8018dac <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007750:	2100      	movs	r1, #0
 8007752:	206c      	movs	r0, #108	; 0x6c
 8007754:	f7ff ffa8 	bl	80076a8 <gyro_write_byte>

	HAL_Delay(50);
 8007758:	2032      	movs	r0, #50	; 0x32
 800775a:	f011 fb27 	bl	8018dac <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800775e:	2118      	movs	r1, #24
 8007760:	201b      	movs	r0, #27
 8007762:	f7ff ffa1 	bl	80076a8 <gyro_write_byte>

	HAL_Delay(50);
 8007766:	2032      	movs	r0, #50	; 0x32
 8007768:	f011 fb20 	bl	8018dac <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 800776c:	2118      	movs	r1, #24
 800776e:	201c      	movs	r0, #28
 8007770:	f7ff ff9a 	bl	80076a8 <gyro_write_byte>

	HAL_Delay(50);
 8007774:	2032      	movs	r0, #50	; 0x32
 8007776:	f011 fb19 	bl	8018dac <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <pl_gyro_init+0x90>)
 800777c:	2201      	movs	r2, #1
 800777e:	701a      	strb	r2, [r3, #0]

}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	080234f0 	.word	0x080234f0
 800778c:	08023504 	.word	0x08023504
 8007790:	200006e0 	.word	0x200006e0

08007794 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007794:	b590      	push	{r4, r7, lr}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	4603      	mov	r3, r0
 800779c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800779e:	79fb      	ldrb	r3, [r7, #7]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff ff55 	bl	8007650 <gyro_read_byte>
 80077a6:	4603      	mov	r3, r0
 80077a8:	021b      	lsls	r3, r3, #8
 80077aa:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	3301      	adds	r3, #1
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff ff4c 	bl	8007650 <gyro_read_byte>
 80077b8:	4603      	mov	r3, r0
 80077ba:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077bc:	4323      	orrs	r3, r4
 80077be:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 80077c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077c4:	ee07 3a90 	vmov	s15, r3
 80077c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077cc:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077e8 <ICM20602_GYRO_READ+0x54>
 80077d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077d4:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	ee07 3a90 	vmov	s15, r3

}
 80077de:	eeb0 0a67 	vmov.f32	s0, s15
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd90      	pop	{r4, r7, pc}
 80077e8:	41833333 	.word	0x41833333

080077ec <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80077ec:	b590      	push	{r4, r7, lr}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff ff29 	bl	8007650 <gyro_read_byte>
 80077fe:	4603      	mov	r3, r0
 8007800:	021b      	lsls	r3, r3, #8
 8007802:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007804:	79fb      	ldrb	r3, [r7, #7]
 8007806:	3301      	adds	r3, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	4618      	mov	r0, r3
 800780c:	f7ff ff20 	bl	8007650 <gyro_read_byte>
 8007810:	4603      	mov	r3, r0
 8007812:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007814:	4323      	orrs	r3, r4
 8007816:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007824:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007840 <ICM20602_ACCEL_READ+0x54>
 8007828:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800782c:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	ee07 3a90 	vmov	s15, r3

}
 8007836:	eeb0 0a67 	vmov.f32	s0, s15
 800783a:	3714      	adds	r7, #20
 800783c:	46bd      	mov	sp, r7
 800783e:	bd90      	pop	{r4, r7, pc}
 8007840:	45000000 	.word	0x45000000

08007844 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007844:	b580      	push	{r7, lr}
 8007846:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007848:	4b0e      	ldr	r3, [pc, #56]	; (8007884 <ICM20602_DataUpdate+0x40>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d117      	bne.n	8007880 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007850:	2045      	movs	r0, #69	; 0x45
 8007852:	f7ff ff9f 	bl	8007794 <ICM20602_GYRO_READ>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	4b0b      	ldr	r3, [pc, #44]	; (8007888 <ICM20602_DataUpdate+0x44>)
 800785c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007860:	2047      	movs	r0, #71	; 0x47
 8007862:	f7ff ff97 	bl	8007794 <ICM20602_GYRO_READ>
 8007866:	eef0 7a40 	vmov.f32	s15, s0
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <ICM20602_DataUpdate+0x44>)
 800786c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007870:	203b      	movs	r0, #59	; 0x3b
 8007872:	f7ff ffbb 	bl	80077ec <ICM20602_ACCEL_READ>
 8007876:	eef0 7a40 	vmov.f32	s15, s0
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <ICM20602_DataUpdate+0x44>)
 800787c:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007880:	bf00      	nop
 8007882:	bd80      	pop	{r7, pc}
 8007884:	200006e0 	.word	0x200006e0
 8007888:	200006e4 	.word	0x200006e4

0800788c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800788c:	b580      	push	{r7, lr}
 800788e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007890:	480f      	ldr	r0, [pc, #60]	; (80078d0 <pl_motor_init+0x44>)
 8007892:	f016 fbef 	bl	801e074 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007896:	480e      	ldr	r0, [pc, #56]	; (80078d0 <pl_motor_init+0x44>)
 8007898:	f010 f916 	bl	8017ac8 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800789c:	480d      	ldr	r0, [pc, #52]	; (80078d4 <pl_motor_init+0x48>)
 800789e:	f016 fbe9 	bl	801e074 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 80078a2:	480c      	ldr	r0, [pc, #48]	; (80078d4 <pl_motor_init+0x48>)
 80078a4:	f010 f910 	bl	8017ac8 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 80078a8:	2001      	movs	r0, #1
 80078aa:	f000 f81f 	bl	80078ec <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 80078ae:	4b08      	ldr	r3, [pc, #32]	; (80078d0 <pl_motor_init+0x44>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	225a      	movs	r2, #90	; 0x5a
 80078b4:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 80078b6:	2001      	movs	r0, #1
 80078b8:	f000 f840 	bl	800793c <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <pl_motor_init+0x44>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	225a      	movs	r2, #90	; 0x5a
 80078c2:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 80078c4:	4b03      	ldr	r3, [pc, #12]	; (80078d4 <pl_motor_init+0x48>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	221e      	movs	r2, #30
 80078ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078cc:	bf00      	nop
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	2000eee8 	.word	0x2000eee8
 80078d4:	2000ef34 	.word	0x2000ef34

080078d8 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d819      	bhi.n	800792e <pl_L_DriveMotor_mode+0x42>
 80078fa:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <pl_L_DriveMotor_mode+0x14>)
 80078fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007911 	.word	0x08007911
 8007908:	0800791f 	.word	0x0800791f
 800790c:	0800792d 	.word	0x0800792d
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007910:	2200      	movs	r2, #0
 8007912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007916:	4808      	ldr	r0, [pc, #32]	; (8007938 <pl_L_DriveMotor_mode+0x4c>)
 8007918:	f014 fc04 	bl	801c124 <HAL_GPIO_WritePin>
break;
 800791c:	e007      	b.n	800792e <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 800791e:	2201      	movs	r2, #1
 8007920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007924:	4804      	ldr	r0, [pc, #16]	; (8007938 <pl_L_DriveMotor_mode+0x4c>)
 8007926:	f014 fbfd 	bl	801c124 <HAL_GPIO_WritePin>
break;
 800792a:	e000      	b.n	800792e <pl_L_DriveMotor_mode+0x42>
break;
 800792c:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800792e:	bf00      	nop
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	48000800 	.word	0x48000800

0800793c <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b03      	cmp	r3, #3
 8007948:	d817      	bhi.n	800797a <pl_R_DriveMotor_mode+0x3e>
 800794a:	a201      	add	r2, pc, #4	; (adr r2, 8007950 <pl_R_DriveMotor_mode+0x14>)
 800794c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007950:	08007979 	.word	0x08007979
 8007954:	08007961 	.word	0x08007961
 8007958:	0800796d 	.word	0x0800796d
 800795c:	08007979 	.word	0x08007979
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007960:	2201      	movs	r2, #1
 8007962:	2180      	movs	r1, #128	; 0x80
 8007964:	4807      	ldr	r0, [pc, #28]	; (8007984 <pl_R_DriveMotor_mode+0x48>)
 8007966:	f014 fbdd 	bl	801c124 <HAL_GPIO_WritePin>
break;
 800796a:	e006      	b.n	800797a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 800796c:	2200      	movs	r2, #0
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	4804      	ldr	r0, [pc, #16]	; (8007984 <pl_R_DriveMotor_mode+0x48>)
 8007972:	f014 fbd7 	bl	801c124 <HAL_GPIO_WritePin>
break;
 8007976:	e000      	b.n	800797a <pl_R_DriveMotor_mode+0x3e>
break;
 8007978:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800797a:	bf00      	nop
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	48000400 	.word	0x48000400

08007988 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007988:	b580      	push	{r7, lr}
 800798a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800798c:	2108      	movs	r1, #8
 800798e:	4804      	ldr	r0, [pc, #16]	; (80079a0 <pl_DriveMotor_start+0x18>)
 8007990:	f016 fc38 	bl	801e204 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007994:	2100      	movs	r1, #0
 8007996:	4802      	ldr	r0, [pc, #8]	; (80079a0 <pl_DriveMotor_start+0x18>)
 8007998:	f016 fc34 	bl	801e204 <HAL_TIM_PWM_Start>
}
 800799c:	bf00      	nop
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	2000eee8 	.word	0x2000eee8

080079a4 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80079a8:	2108      	movs	r1, #8
 80079aa:	4804      	ldr	r0, [pc, #16]	; (80079bc <pl_DriveMotor_stop+0x18>)
 80079ac:	f016 fd36 	bl	801e41c <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80079b0:	2100      	movs	r1, #0
 80079b2:	4802      	ldr	r0, [pc, #8]	; (80079bc <pl_DriveMotor_stop+0x18>)
 80079b4:	f016 fd32 	bl	801e41c <HAL_TIM_PWM_Stop>
}
 80079b8:	bf00      	nop
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	2000eee8 	.word	0x2000eee8

080079c0 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <pl_DriveMotor_duty+0x28>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80079d2:	4b05      	ldr	r3, [pc, #20]	; (80079e8 <pl_DriveMotor_duty+0x28>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80079da:	bf00      	nop
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000eee8 	.word	0x2000eee8

080079ec <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 80079ec:	b580      	push	{r7, lr}
 80079ee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80079f0:	2100      	movs	r1, #0
 80079f2:	4802      	ldr	r0, [pc, #8]	; (80079fc <pl_FunMotor_start+0x10>)
 80079f4:	f016 fc06 	bl	801e204 <HAL_TIM_PWM_Start>
}
 80079f8:	bf00      	nop
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	2000ef34 	.word	0x2000ef34

08007a00 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007a00:	b580      	push	{r7, lr}
 8007a02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007a04:	2100      	movs	r1, #0
 8007a06:	4802      	ldr	r0, [pc, #8]	; (8007a10 <pl_FunMotor_stop+0x10>)
 8007a08:	f016 fd08 	bl	801e41c <HAL_TIM_PWM_Stop>
}
 8007a0c:	bf00      	nop
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	2000ef34 	.word	0x2000ef34

08007a14 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a22:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a58 <pl_FunMotor_duty+0x44>
 8007a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a2e:	ee17 3a90 	vmov	r3, s15
 8007a32:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007a34:	4b09      	ldr	r3, [pc, #36]	; (8007a5c <pl_FunMotor_duty+0x48>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2264      	movs	r2, #100	; 0x64
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <pl_FunMotor_duty+0x48>)
 8007a3e:	2264      	movs	r2, #100	; 0x64
 8007a40:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007a42:	4b06      	ldr	r3, [pc, #24]	; (8007a5c <pl_FunMotor_duty+0x48>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	42c80000 	.word	0x42c80000
 8007a5c:	2000ef34 	.word	0x2000ef34

08007a60 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007a60:	b580      	push	{r7, lr}
 8007a62:	af00      	add	r7, sp, #0
	AD_step=0;
 8007a64:	4b04      	ldr	r3, [pc, #16]	; (8007a78 <pl_sensor_init+0x18>)
 8007a66:	2200      	movs	r2, #0
 8007a68:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007a6a:	217f      	movs	r1, #127	; 0x7f
 8007a6c:	4803      	ldr	r0, [pc, #12]	; (8007a7c <pl_sensor_init+0x1c>)
 8007a6e:	f013 fa17 	bl	801aea0 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007a72:	bf00      	nop
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000708 	.word	0x20000708
 8007a7c:	20000734 	.word	0x20000734

08007a80 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007a86:	483c      	ldr	r0, [pc, #240]	; (8007b78 <pl_getbatt+0xf8>)
 8007a88:	f011 fdf8 	bl	801967c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007a8c:	2132      	movs	r1, #50	; 0x32
 8007a8e:	483a      	ldr	r0, [pc, #232]	; (8007b78 <pl_getbatt+0xf8>)
 8007a90:	f011 fef2 	bl	8019878 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007a94:	4838      	ldr	r0, [pc, #224]	; (8007b78 <pl_getbatt+0xf8>)
 8007a96:	f012 f90e 	bl	8019cb6 <HAL_ADC_GetValue>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a9e:	4836      	ldr	r0, [pc, #216]	; (8007b78 <pl_getbatt+0xf8>)
 8007aa0:	f011 feb6 	bl	8019810 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007aa4:	88fb      	ldrh	r3, [r7, #6]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	ee17 0a90 	vmov	r0, s15
 8007ab2:	f7f8 fd71 	bl	8000598 <__aeabi_f2d>
 8007ab6:	a326      	add	r3, pc, #152	; (adr r3, 8007b50 <pl_getbatt+0xd0>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fdc4 	bl	8000648 <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	a323      	add	r3, pc, #140	; (adr r3, 8007b58 <pl_getbatt+0xd8>)
 8007aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ace:	f7f8 fee5 	bl	800089c <__aeabi_ddiv>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	4619      	mov	r1, r3
 8007ada:	f04f 0200 	mov.w	r2, #0
 8007ade:	4b27      	ldr	r3, [pc, #156]	; (8007b7c <pl_getbatt+0xfc>)
 8007ae0:	f7f8 fdb2 	bl	8000648 <__aeabi_dmul>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4610      	mov	r0, r2
 8007aea:	4619      	mov	r1, r3
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	4b23      	ldr	r3, [pc, #140]	; (8007b80 <pl_getbatt+0x100>)
 8007af2:	f7f8 fed3 	bl	800089c <__aeabi_ddiv>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4610      	mov	r0, r2
 8007afc:	4619      	mov	r1, r3
 8007afe:	a318      	add	r3, pc, #96	; (adr r3, 8007b60 <pl_getbatt+0xe0>)
 8007b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b04:	f7f8 fda0 	bl	8000648 <__aeabi_dmul>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4619      	mov	r1, r3
 8007b10:	a315      	add	r3, pc, #84	; (adr r3, 8007b68 <pl_getbatt+0xe8>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fd97 	bl	8000648 <__aeabi_dmul>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	4610      	mov	r0, r2
 8007b20:	4619      	mov	r1, r3
 8007b22:	a313      	add	r3, pc, #76	; (adr r3, 8007b70 <pl_getbatt+0xf0>)
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	f7f8 feb8 	bl	800089c <__aeabi_ddiv>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4610      	mov	r0, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	f7f9 f860 	bl	8000bf8 <__aeabi_d2f>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	603b      	str	r3, [r7, #0]
return batt;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	ee07 3a90 	vmov	s15, r3
}
 8007b42:	eeb0 0a67 	vmov.f32	s0, s15
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	f3af 8000 	nop.w
 8007b50:	66666666 	.word	0x66666666
 8007b54:	400a6666 	.word	0x400a6666
 8007b58:	00000000 	.word	0x00000000
 8007b5c:	40affe00 	.word	0x40affe00
 8007b60:	66666666 	.word	0x66666666
 8007b64:	3ff26666 	.word	0x3ff26666
 8007b68:	9999999a 	.word	0x9999999a
 8007b6c:	400d9999 	.word	0x400d9999
 8007b70:	ae147ae1 	.word	0xae147ae1
 8007b74:	400ee147 	.word	0x400ee147
 8007b78:	20000734 	.word	0x20000734
 8007b7c:	40340000 	.word	0x40340000
 8007b80:	40240000 	.word	0x40240000
 8007b84:	00000000 	.word	0x00000000

08007b88 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007b8e:	4882      	ldr	r0, [pc, #520]	; (8007d98 <pl_callback_getSensor+0x210>)
 8007b90:	f012 f830 	bl	8019bf4 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007b94:	4b81      	ldr	r3, [pc, #516]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b04      	cmp	r3, #4
 8007b9a:	f200 80d9 	bhi.w	8007d50 <pl_callback_getSensor+0x1c8>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <pl_callback_getSensor+0x1c>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007bf1 	.word	0x08007bf1
 8007bac:	08007c51 	.word	0x08007c51
 8007bb0:	08007c91 	.word	0x08007c91
 8007bb4:	08007d51 	.word	0x08007d51
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007bb8:	2201      	movs	r2, #1
 8007bba:	2102      	movs	r1, #2
 8007bbc:	4878      	ldr	r0, [pc, #480]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007bbe:	f014 fab1 	bl	801c124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2110      	movs	r1, #16
 8007bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bca:	f014 faab 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bd4:	4873      	ldr	r0, [pc, #460]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007bd6:	f014 faa5 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007bde:	e002      	b.n	8007be6 <pl_callback_getSensor+0x5e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3301      	adds	r3, #1
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bec:	ddf8      	ble.n	8007be0 <pl_callback_getSensor+0x58>
		break;
 8007bee:	e0af      	b.n	8007d50 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007bf0:	4b6d      	ldr	r3, [pc, #436]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007bf2:	885a      	ldrh	r2, [r3, #2]
 8007bf4:	4b6d      	ldr	r3, [pc, #436]	; (8007dac <pl_callback_getSensor+0x224>)
 8007bf6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007bf8:	4b6b      	ldr	r3, [pc, #428]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007bfa:	889a      	ldrh	r2, [r3, #4]
 8007bfc:	4b6b      	ldr	r3, [pc, #428]	; (8007dac <pl_callback_getSensor+0x224>)
 8007bfe:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007c00:	4b69      	ldr	r3, [pc, #420]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c02:	88da      	ldrh	r2, [r3, #6]
 8007c04:	4b6a      	ldr	r3, [pc, #424]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c06:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007c08:	4b67      	ldr	r3, [pc, #412]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c0a:	891a      	ldrh	r2, [r3, #8]
 8007c0c:	4b68      	ldr	r3, [pc, #416]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c0e:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007c10:	4b65      	ldr	r3, [pc, #404]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c12:	895a      	ldrh	r2, [r3, #10]
 8007c14:	4b66      	ldr	r3, [pc, #408]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c16:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c18:	2200      	movs	r2, #0
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	4860      	ldr	r0, [pc, #384]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007c1e:	f014 fa81 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007c22:	2201      	movs	r2, #1
 8007c24:	2110      	movs	r1, #16
 8007c26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c2a:	f014 fa7b 	bl	801c124 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c34:	485b      	ldr	r0, [pc, #364]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007c36:	f014 fa75 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c3e:	e002      	b.n	8007c46 <pl_callback_getSensor+0xbe>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	3301      	adds	r3, #1
 8007c44:	607b      	str	r3, [r7, #4]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c4c:	ddf8      	ble.n	8007c40 <pl_callback_getSensor+0xb8>
		break;
 8007c4e:	e07f      	b.n	8007d50 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007c50:	4b55      	ldr	r3, [pc, #340]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c52:	88da      	ldrh	r2, [r3, #6]
 8007c54:	4b55      	ldr	r3, [pc, #340]	; (8007dac <pl_callback_getSensor+0x224>)
 8007c56:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	4850      	ldr	r0, [pc, #320]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007c5e:	f014 fa61 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c62:	2200      	movs	r2, #0
 8007c64:	2110      	movs	r1, #16
 8007c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c6a:	f014 fa5b 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c74:	484b      	ldr	r0, [pc, #300]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007c76:	f014 fa55 	bl	801c124 <HAL_GPIO_WritePin>
		j=0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c7e:	e002      	b.n	8007c86 <pl_callback_getSensor+0xfe>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3301      	adds	r3, #1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c8c:	ddf8      	ble.n	8007c80 <pl_callback_getSensor+0xf8>
		break;
 8007c8e:	e05f      	b.n	8007d50 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007c90:	4b45      	ldr	r3, [pc, #276]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c92:	885a      	ldrh	r2, [r3, #2]
 8007c94:	4b46      	ldr	r3, [pc, #280]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c96:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c98:	4b43      	ldr	r3, [pc, #268]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007c9a:	889a      	ldrh	r2, [r3, #4]
 8007c9c:	4b44      	ldr	r3, [pc, #272]	; (8007db0 <pl_callback_getSensor+0x228>)
 8007c9e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007ca0:	4b41      	ldr	r3, [pc, #260]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007ca2:	891a      	ldrh	r2, [r3, #8]
 8007ca4:	4b41      	ldr	r3, [pc, #260]	; (8007dac <pl_callback_getSensor+0x224>)
 8007ca6:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007ca8:	4b3f      	ldr	r3, [pc, #252]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007caa:	895a      	ldrh	r2, [r3, #10]
 8007cac:	4b3f      	ldr	r3, [pc, #252]	; (8007dac <pl_callback_getSensor+0x224>)
 8007cae:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2102      	movs	r1, #2
 8007cb4:	483a      	ldr	r0, [pc, #232]	; (8007da0 <pl_callback_getSensor+0x218>)
 8007cb6:	f014 fa35 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2110      	movs	r1, #16
 8007cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cc2:	f014 fa2f 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ccc:	4835      	ldr	r0, [pc, #212]	; (8007da4 <pl_callback_getSensor+0x21c>)
 8007cce:	f014 fa29 	bl	801c124 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007cd6:	e002      	b.n	8007cde <pl_callback_getSensor+0x156>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	607b      	str	r3, [r7, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b32      	cmp	r3, #50	; 0x32
 8007ce2:	ddf9      	ble.n	8007cd8 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007ce4:	4b30      	ldr	r3, [pc, #192]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007cea:	887b      	ldrh	r3, [r7, #2]
 8007cec:	ee07 3a90 	vmov	s15, r3
 8007cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf4:	ee17 0a90 	vmov	r0, s15
 8007cf8:	f7f8 fc4e 	bl	8000598 <__aeabi_f2d>
 8007cfc:	a320      	add	r3, pc, #128	; (adr r3, 8007d80 <pl_callback_getSensor+0x1f8>)
 8007cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d02:	f7f8 fca1 	bl	8000648 <__aeabi_dmul>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	a31e      	add	r3, pc, #120	; (adr r3, 8007d88 <pl_callback_getSensor+0x200>)
 8007d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d14:	f7f8 fdc2 	bl	800089c <__aeabi_ddiv>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	a31b      	add	r3, pc, #108	; (adr r3, 8007d90 <pl_callback_getSensor+0x208>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f7f8 fc8f 	bl	8000648 <__aeabi_dmul>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4610      	mov	r0, r2
 8007d30:	4619      	mov	r1, r3
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	4b1f      	ldr	r3, [pc, #124]	; (8007db4 <pl_callback_getSensor+0x22c>)
 8007d38:	f7f8 fdb0 	bl	800089c <__aeabi_ddiv>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	f7f8 ff58 	bl	8000bf8 <__aeabi_d2f>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	4a1b      	ldr	r2, [pc, #108]	; (8007db8 <pl_callback_getSensor+0x230>)
 8007d4c:	6013      	str	r3, [r2, #0]
		break;
 8007d4e:	bf00      	nop

		break;
	}


	AD_step++;
 8007d50:	4b12      	ldr	r3, [pc, #72]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	3301      	adds	r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	4b10      	ldr	r3, [pc, #64]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d5a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007d5c:	4b0f      	ldr	r3, [pc, #60]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d005      	beq.n	8007d70 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d64:	2206      	movs	r2, #6
 8007d66:	4910      	ldr	r1, [pc, #64]	; (8007da8 <pl_callback_getSensor+0x220>)
 8007d68:	480b      	ldr	r0, [pc, #44]	; (8007d98 <pl_callback_getSensor+0x210>)
 8007d6a:	f011 fe79 	bl	8019a60 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007d6e:	e002      	b.n	8007d76 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007d70:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <pl_callback_getSensor+0x214>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	701a      	strb	r2, [r3, #0]
}
 8007d76:	bf00      	nop
 8007d78:	3708      	adds	r7, #8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	66666666 	.word	0x66666666
 8007d84:	400a6666 	.word	0x400a6666
 8007d88:	00000000 	.word	0x00000000
 8007d8c:	40affe00 	.word	0x40affe00
 8007d90:	00000000 	.word	0x00000000
 8007d94:	4062c000 	.word	0x4062c000
 8007d98:	20000734 	.word	0x20000734
 8007d9c:	20000708 	.word	0x20000708
 8007da0:	48000400 	.word	0x48000400
 8007da4:	48000800 	.word	0x48000800
 8007da8:	200006fc 	.word	0x200006fc
 8007dac:	2000070c 	.word	0x2000070c
 8007db0:	20000718 	.word	0x20000718
 8007db4:	40490000 	.word	0x40490000
 8007db8:	20000724 	.word	0x20000724

08007dbc <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007dc0:	2206      	movs	r2, #6
 8007dc2:	4903      	ldr	r1, [pc, #12]	; (8007dd0 <pl_interupt_getSensor+0x14>)
 8007dc4:	4803      	ldr	r0, [pc, #12]	; (8007dd4 <pl_interupt_getSensor+0x18>)
 8007dc6:	f011 fe4b 	bl	8019a60 <HAL_ADC_Start_DMA>

}
 8007dca:	bf00      	nop
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	200006fc 	.word	0x200006fc
 8007dd4:	20000734 	.word	0x20000734

08007dd8 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
	count_mode=0;
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <pl_timer_init+0x1c>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <pl_timer_init+0x20>)
 8007de4:	f04f 0200 	mov.w	r2, #0
 8007de8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007dea:	4804      	ldr	r0, [pc, #16]	; (8007dfc <pl_timer_init+0x24>)
 8007dec:	f016 f942 	bl	801e074 <HAL_TIM_Base_Start_IT>
}
 8007df0:	bf00      	nop
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	20000730 	.word	0x20000730
 8007df8:	2000072c 	.word	0x2000072c
 8007dfc:	2000ee9c 	.word	0x2000ee9c

08007e00 <interrupt_timer>:

void interrupt_timer(void){
 8007e00:	b580      	push	{r7, lr}
 8007e02:	af00      	add	r7, sp, #0
	g_timCount++;
 8007e04:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <interrupt_timer+0x48>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	4a0f      	ldr	r2, [pc, #60]	; (8007e48 <interrupt_timer+0x48>)
 8007e0c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007e0e:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <interrupt_timer+0x4c>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d112      	bne.n	8007e3c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007e16:	4b0e      	ldr	r3, [pc, #56]	; (8007e50 <interrupt_timer+0x50>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7f8 fbbc 	bl	8000598 <__aeabi_f2d>
 8007e20:	a307      	add	r3, pc, #28	; (adr r3, 8007e40 <interrupt_timer+0x40>)
 8007e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e26:	f7f8 fa59 	bl	80002dc <__adddf3>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4610      	mov	r0, r2
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7f8 fee1 	bl	8000bf8 <__aeabi_d2f>
 8007e36:	4603      	mov	r3, r0
 8007e38:	4a05      	ldr	r2, [pc, #20]	; (8007e50 <interrupt_timer+0x50>)
 8007e3a:	6013      	str	r3, [r2, #0]
	}

}
 8007e3c:	bf00      	nop
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e44:	3f50624d 	.word	0x3f50624d
 8007e48:	20000728 	.word	0x20000728
 8007e4c:	20000730 	.word	0x20000730
 8007e50:	2000072c 	.word	0x2000072c

08007e54 <tic_timer>:

void tic_timer(void){
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
	count_mode=1;
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <tic_timer+0x1c>)
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <tic_timer+0x20>)
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
}
 8007e66:	bf00      	nop
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	20000730 	.word	0x20000730
 8007e74:	2000072c 	.word	0x2000072c

08007e78 <toc_timer>:

float toc_timer(void){
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007e7e:	4b0a      	ldr	r3, [pc, #40]	; (8007ea8 <toc_timer+0x30>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007e84:	4b09      	ldr	r3, [pc, #36]	; (8007eac <toc_timer+0x34>)
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e8a:	4b07      	ldr	r3, [pc, #28]	; (8007ea8 <toc_timer+0x30>)
 8007e8c:	f04f 0200 	mov.w	r2, #0
 8007e90:	601a      	str	r2, [r3, #0]
	return timer;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	ee07 3a90 	vmov	s15, r3
}
 8007e98:	eeb0 0a67 	vmov.f32	s0, s15
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	2000072c 	.word	0x2000072c
 8007eac:	20000730 	.word	0x20000730

08007eb0 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007eb0:	b5b0      	push	{r4, r5, r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007eb8:	4b1d      	ldr	r3, [pc, #116]	; (8007f30 <wait_ms+0x80>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	; (8007f34 <wait_ms+0x84>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007ec6:	bf00      	nop
 8007ec8:	4b19      	ldr	r3, [pc, #100]	; (8007f30 <wait_ms+0x80>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ed4:	ee17 0a90 	vmov	r0, s15
 8007ed8:	f7f8 fb5e 	bl	8000598 <__aeabi_f2d>
 8007edc:	a312      	add	r3, pc, #72	; (adr r3, 8007f28 <wait_ms+0x78>)
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f7f8 fbb1 	bl	8000648 <__aeabi_dmul>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4610      	mov	r0, r2
 8007eec:	4619      	mov	r1, r3
 8007eee:	a30e      	add	r3, pc, #56	; (adr r3, 8007f28 <wait_ms+0x78>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 fcd2 	bl	800089c <__aeabi_ddiv>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	4614      	mov	r4, r2
 8007efe:	461d      	mov	r5, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7f8 fb27 	bl	8000554 <__aeabi_ui2d>
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	4629      	mov	r1, r5
 8007f0e:	f7f8 fe0d 	bl	8000b2c <__aeabi_dcmplt>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1d7      	bne.n	8007ec8 <wait_ms+0x18>
        }

}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bdb0      	pop	{r4, r5, r7, pc}
 8007f22:	bf00      	nop
 8007f24:	f3af 8000 	nop.w
 8007f28:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f2c:	3f50624d 	.word	0x3f50624d
 8007f30:	20000728 	.word	0x20000728
 8007f34:	2000ee9c 	.word	0x2000ee9c

08007f38 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007f38:	b5b0      	push	{r4, r5, r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007f40:	4b1b      	ldr	r3, [pc, #108]	; (8007fb0 <wait_ms_NoReset+0x78>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007f46:	bf00      	nop
 8007f48:	4b19      	ldr	r3, [pc, #100]	; (8007fb0 <wait_ms_NoReset+0x78>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	ee07 3a90 	vmov	s15, r3
 8007f50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f54:	ee17 0a90 	vmov	r0, s15
 8007f58:	f7f8 fb1e 	bl	8000598 <__aeabi_f2d>
 8007f5c:	a312      	add	r3, pc, #72	; (adr r3, 8007fa8 <wait_ms_NoReset+0x70>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 fb71 	bl	8000648 <__aeabi_dmul>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	a30e      	add	r3, pc, #56	; (adr r3, 8007fa8 <wait_ms_NoReset+0x70>)
 8007f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f74:	f7f8 fc92 	bl	800089c <__aeabi_ddiv>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	4614      	mov	r4, r2
 8007f7e:	461d      	mov	r5, r3
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7f8 fae7 	bl	8000554 <__aeabi_ui2d>
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	4629      	mov	r1, r5
 8007f8e:	f7f8 fdcd 	bl	8000b2c <__aeabi_dcmplt>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d1d7      	bne.n	8007f48 <wait_ms_NoReset+0x10>
        }

}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	f3af 8000 	nop.w
 8007fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007fac:	3f50624d 	.word	0x3f50624d
 8007fb0:	20000728 	.word	0x20000728

08007fb4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b08c      	sub	sp, #48	; 0x30
 8007fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	605a      	str	r2, [r3, #4]
 8007fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007fc6:	1d3b      	adds	r3, r7, #4
 8007fc8:	2220      	movs	r2, #32
 8007fca:	2100      	movs	r1, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f018 f9cd 	bl	802036c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007fd2:	4b56      	ldr	r3, [pc, #344]	; (800812c <MX_ADC1_Init+0x178>)
 8007fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007fda:	4b54      	ldr	r3, [pc, #336]	; (800812c <MX_ADC1_Init+0x178>)
 8007fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007fe2:	4b52      	ldr	r3, [pc, #328]	; (800812c <MX_ADC1_Init+0x178>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007fe8:	4b50      	ldr	r3, [pc, #320]	; (800812c <MX_ADC1_Init+0x178>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007fee:	4b4f      	ldr	r3, [pc, #316]	; (800812c <MX_ADC1_Init+0x178>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007ff4:	4b4d      	ldr	r3, [pc, #308]	; (800812c <MX_ADC1_Init+0x178>)
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007ffa:	4b4c      	ldr	r3, [pc, #304]	; (800812c <MX_ADC1_Init+0x178>)
 8007ffc:	2208      	movs	r2, #8
 8007ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008000:	4b4a      	ldr	r3, [pc, #296]	; (800812c <MX_ADC1_Init+0x178>)
 8008002:	2200      	movs	r2, #0
 8008004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008006:	4b49      	ldr	r3, [pc, #292]	; (800812c <MX_ADC1_Init+0x178>)
 8008008:	2201      	movs	r2, #1
 800800a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 800800c:	4b47      	ldr	r3, [pc, #284]	; (800812c <MX_ADC1_Init+0x178>)
 800800e:	2206      	movs	r2, #6
 8008010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008012:	4b46      	ldr	r3, [pc, #280]	; (800812c <MX_ADC1_Init+0x178>)
 8008014:	2200      	movs	r2, #0
 8008016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800801a:	4b44      	ldr	r3, [pc, #272]	; (800812c <MX_ADC1_Init+0x178>)
 800801c:	2200      	movs	r2, #0
 800801e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008020:	4b42      	ldr	r3, [pc, #264]	; (800812c <MX_ADC1_Init+0x178>)
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008026:	4b41      	ldr	r3, [pc, #260]	; (800812c <MX_ADC1_Init+0x178>)
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800802e:	4b3f      	ldr	r3, [pc, #252]	; (800812c <MX_ADC1_Init+0x178>)
 8008030:	2200      	movs	r2, #0
 8008032:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008034:	4b3d      	ldr	r3, [pc, #244]	; (800812c <MX_ADC1_Init+0x178>)
 8008036:	2200      	movs	r2, #0
 8008038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800803c:	483b      	ldr	r0, [pc, #236]	; (800812c <MX_ADC1_Init+0x178>)
 800803e:	f011 f969 	bl	8019314 <HAL_ADC_Init>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d001      	beq.n	800804c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008048:	f001 fecb 	bl	8009de2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800804c:	2300      	movs	r3, #0
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008054:	4619      	mov	r1, r3
 8008056:	4835      	ldr	r0, [pc, #212]	; (800812c <MX_ADC1_Init+0x178>)
 8008058:	f012 ffb6 	bl	801afc8 <HAL_ADCEx_MultiModeConfigChannel>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008062:	f001 febe 	bl	8009de2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008066:	4b32      	ldr	r3, [pc, #200]	; (8008130 <MX_ADC1_Init+0x17c>)
 8008068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800806a:	2306      	movs	r3, #6
 800806c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800806e:	2301      	movs	r3, #1
 8008070:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008072:	237f      	movs	r3, #127	; 0x7f
 8008074:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008076:	2304      	movs	r3, #4
 8008078:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800807e:	1d3b      	adds	r3, r7, #4
 8008080:	4619      	mov	r1, r3
 8008082:	482a      	ldr	r0, [pc, #168]	; (800812c <MX_ADC1_Init+0x178>)
 8008084:	f012 f87c 	bl	801a180 <HAL_ADC_ConfigChannel>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800808e:	f001 fea8 	bl	8009de2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008092:	4b28      	ldr	r3, [pc, #160]	; (8008134 <MX_ADC1_Init+0x180>)
 8008094:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008096:	230c      	movs	r3, #12
 8008098:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800809a:	1d3b      	adds	r3, r7, #4
 800809c:	4619      	mov	r1, r3
 800809e:	4823      	ldr	r0, [pc, #140]	; (800812c <MX_ADC1_Init+0x178>)
 80080a0:	f012 f86e 	bl	801a180 <HAL_ADC_ConfigChannel>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80080aa:	f001 fe9a 	bl	8009de2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80080ae:	4b22      	ldr	r3, [pc, #136]	; (8008138 <MX_ADC1_Init+0x184>)
 80080b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80080b2:	2312      	movs	r3, #18
 80080b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080b6:	1d3b      	adds	r3, r7, #4
 80080b8:	4619      	mov	r1, r3
 80080ba:	481c      	ldr	r0, [pc, #112]	; (800812c <MX_ADC1_Init+0x178>)
 80080bc:	f012 f860 	bl	801a180 <HAL_ADC_ConfigChannel>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d001      	beq.n	80080ca <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80080c6:	f001 fe8c 	bl	8009de2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80080ca:	4b1c      	ldr	r3, [pc, #112]	; (800813c <MX_ADC1_Init+0x188>)
 80080cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80080ce:	2318      	movs	r3, #24
 80080d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080d2:	1d3b      	adds	r3, r7, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4815      	ldr	r0, [pc, #84]	; (800812c <MX_ADC1_Init+0x178>)
 80080d8:	f012 f852 	bl	801a180 <HAL_ADC_ConfigChannel>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80080e2:	f001 fe7e 	bl	8009de2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80080e6:	4b16      	ldr	r3, [pc, #88]	; (8008140 <MX_ADC1_Init+0x18c>)
 80080e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80080ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080f0:	1d3b      	adds	r3, r7, #4
 80080f2:	4619      	mov	r1, r3
 80080f4:	480d      	ldr	r0, [pc, #52]	; (800812c <MX_ADC1_Init+0x178>)
 80080f6:	f012 f843 	bl	801a180 <HAL_ADC_ConfigChannel>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d001      	beq.n	8008104 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008100:	f001 fe6f 	bl	8009de2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008104:	4b0f      	ldr	r3, [pc, #60]	; (8008144 <MX_ADC1_Init+0x190>)
 8008106:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008108:	f44f 7383 	mov.w	r3, #262	; 0x106
 800810c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800810e:	1d3b      	adds	r3, r7, #4
 8008110:	4619      	mov	r1, r3
 8008112:	4806      	ldr	r0, [pc, #24]	; (800812c <MX_ADC1_Init+0x178>)
 8008114:	f012 f834 	bl	801a180 <HAL_ADC_ConfigChannel>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800811e:	f001 fe60 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008122:	bf00      	nop
 8008124:	3730      	adds	r7, #48	; 0x30
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000734 	.word	0x20000734
 8008130:	2e300800 	.word	0x2e300800
 8008134:	3ef08000 	.word	0x3ef08000
 8008138:	10c00010 	.word	0x10c00010
 800813c:	0c900008 	.word	0x0c900008
 8008140:	08600004 	.word	0x08600004
 8008144:	04300002 	.word	0x04300002

08008148 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b09e      	sub	sp, #120	; 0x78
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008150:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	605a      	str	r2, [r3, #4]
 800815a:	609a      	str	r2, [r3, #8]
 800815c:	60da      	str	r2, [r3, #12]
 800815e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008160:	f107 0314 	add.w	r3, r7, #20
 8008164:	2250      	movs	r2, #80	; 0x50
 8008166:	2100      	movs	r1, #0
 8008168:	4618      	mov	r0, r3
 800816a:	f018 f8ff 	bl	802036c <memset>
  if(adcHandle->Instance==ADC1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008176:	f040 8082 	bne.w	800827e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800817a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800817e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008180:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008184:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008186:	f107 0314 	add.w	r3, r7, #20
 800818a:	4618      	mov	r0, r3
 800818c:	f014 fdc6 	bl	801cd1c <HAL_RCCEx_PeriphCLKConfig>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008196:	f001 fe24 	bl	8009de2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800819a:	4b3b      	ldr	r3, [pc, #236]	; (8008288 <HAL_ADC_MspInit+0x140>)
 800819c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819e:	4a3a      	ldr	r2, [pc, #232]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081a6:	4b38      	ldr	r3, [pc, #224]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081ae:	613b      	str	r3, [r7, #16]
 80081b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081b2:	4b35      	ldr	r3, [pc, #212]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b6:	4a34      	ldr	r2, [pc, #208]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081be:	4b32      	ldr	r3, [pc, #200]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	60fb      	str	r3, [r7, #12]
 80081c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ca:	4b2f      	ldr	r3, [pc, #188]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ce:	4a2e      	ldr	r2, [pc, #184]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081d0:	f043 0302 	orr.w	r3, r3, #2
 80081d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081d6:	4b2c      	ldr	r3, [pc, #176]	; (8008288 <HAL_ADC_MspInit+0x140>)
 80081d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081da:	f003 0302 	and.w	r3, r3, #2
 80081de:	60bb      	str	r3, [r7, #8]
 80081e0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 80081e2:	230f      	movs	r3, #15
 80081e4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081e6:	2303      	movs	r3, #3
 80081e8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081ee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081f2:	4619      	mov	r1, r3
 80081f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081f8:	f013 fe12 	bl	801be20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80081fc:	f241 0301 	movw	r3, #4097	; 0x1001
 8008200:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008202:	2303      	movs	r3, #3
 8008204:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	2300      	movs	r3, #0
 8008208:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800820a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800820e:	4619      	mov	r1, r3
 8008210:	481e      	ldr	r0, [pc, #120]	; (800828c <HAL_ADC_MspInit+0x144>)
 8008212:	f013 fe05 	bl	801be20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008216:	4b1e      	ldr	r3, [pc, #120]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008218:	4a1e      	ldr	r2, [pc, #120]	; (8008294 <HAL_ADC_MspInit+0x14c>)
 800821a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800821c:	4b1c      	ldr	r3, [pc, #112]	; (8008290 <HAL_ADC_MspInit+0x148>)
 800821e:	2205      	movs	r2, #5
 8008220:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008222:	4b1b      	ldr	r3, [pc, #108]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008224:	2200      	movs	r2, #0
 8008226:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008228:	4b19      	ldr	r3, [pc, #100]	; (8008290 <HAL_ADC_MspInit+0x148>)
 800822a:	2200      	movs	r2, #0
 800822c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800822e:	4b18      	ldr	r3, [pc, #96]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008230:	2280      	movs	r2, #128	; 0x80
 8008232:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008234:	4b16      	ldr	r3, [pc, #88]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008236:	f44f 7280 	mov.w	r2, #256	; 0x100
 800823a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800823c:	4b14      	ldr	r3, [pc, #80]	; (8008290 <HAL_ADC_MspInit+0x148>)
 800823e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008242:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008244:	4b12      	ldr	r3, [pc, #72]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008246:	2220      	movs	r2, #32
 8008248:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800824a:	4b11      	ldr	r3, [pc, #68]	; (8008290 <HAL_ADC_MspInit+0x148>)
 800824c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008250:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008252:	480f      	ldr	r0, [pc, #60]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008254:	f013 f8b0 	bl	801b3b8 <HAL_DMA_Init>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800825e:	f001 fdc0 	bl	8009de2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <HAL_ADC_MspInit+0x148>)
 8008266:	655a      	str	r2, [r3, #84]	; 0x54
 8008268:	4a09      	ldr	r2, [pc, #36]	; (8008290 <HAL_ADC_MspInit+0x148>)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800826e:	2200      	movs	r2, #0
 8008270:	2100      	movs	r1, #0
 8008272:	2012      	movs	r0, #18
 8008274:	f013 f86b 	bl	801b34e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008278:	2012      	movs	r0, #18
 800827a:	f013 f882 	bl	801b382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800827e:	bf00      	nop
 8008280:	3778      	adds	r7, #120	; 0x78
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	40021000 	.word	0x40021000
 800828c:	48000400 	.word	0x48000400
 8008290:	200007a0 	.word	0x200007a0
 8008294:	40020008 	.word	0x40020008

08008298 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 80082a0:	f7ff fc72 	bl	8007b88 <pl_callback_getSensor>
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 80082ac:	b084      	sub	sp, #16
 80082ae:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	f107 0420 	add.w	r4, r7, #32
 80082ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80082be:	edd7 7a08 	vldr	s15, [r7, #32]
 80082c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ca:	f2c0 819d 	blt.w	8008608 <cal_table+0x35c>
	switch (g_acc_flag) {
 80082ce:	4bcd      	ldr	r3, [pc, #820]	; (8008604 <cal_table+0x358>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b06      	cmp	r3, #6
 80082d6:	f200 833a 	bhi.w	800894e <cal_table+0x6a2>
 80082da:	a201      	add	r2, pc, #4	; (adr r2, 80082e0 <cal_table+0x34>)
 80082dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e0:	08008941 	.word	0x08008941
 80082e4:	080082fd 	.word	0x080082fd
 80082e8:	0800846f 	.word	0x0800846f
 80082ec:	0800858d 	.word	0x0800858d
 80082f0:	08008941 	.word	0x08008941
 80082f4:	080085b9 	.word	0x080085b9
 80082f8:	080085df 	.word	0x080085df
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80082fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fe:	ed93 7a00 	vldr	s14, [r3]
 8008302:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800830a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800830e:	db0a      	blt.n	8008326 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008318:	f04f 0200 	mov.w	r2, #0
 800831c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800831e:	4bb9      	ldr	r3, [pc, #740]	; (8008604 <cal_table+0x358>)
 8008320:	2202      	movs	r2, #2
 8008322:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008324:	e313      	b.n	800894e <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008326:	ed97 7a08 	vldr	s14, [r7, #32]
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	edd3 7a00 	vldr	s15, [r3]
 8008330:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008336:	edd3 7a00 	vldr	s15, [r3]
 800833a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800833e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008342:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008346:	ee66 7a27 	vmul.f32	s15, s12, s15
 800834a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800834e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008352:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008356:	ee66 7a27 	vmul.f32	s15, s12, s15
 800835a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800835e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008362:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008366:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800836a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800836e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008376:	d900      	bls.n	800837a <cal_table+0xce>
		break;
 8008378:	e2e9      	b.n	800894e <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	edd3 7a00 	vldr	s15, [r3]
 8008380:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008386:	edd3 7a00 	vldr	s15, [r3]
 800838a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800838e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008392:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800839a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800839e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80083a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80083a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80083aa:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80083ae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80083b2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083be:	edd7 7a08 	vldr	s15, [r7, #32]
 80083c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80083cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d0:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80083d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	4618      	mov	r0, r3
 80083da:	f7f8 f8dd 	bl	8000598 <__aeabi_f2d>
 80083de:	4604      	mov	r4, r0
 80083e0:	460d      	mov	r5, r1
 80083e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7f8 f8d7 	bl	8000598 <__aeabi_f2d>
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	f7f8 f929 	bl	8000648 <__aeabi_dmul>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4690      	mov	r8, r2
 80083fc:	4699      	mov	r9, r3
 80083fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8008402:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008406:	ee17 0a90 	vmov	r0, s15
 800840a:	f7f8 f8c5 	bl	8000598 <__aeabi_f2d>
 800840e:	4602      	mov	r2, r0
 8008410:	460b      	mov	r3, r1
 8008412:	4640      	mov	r0, r8
 8008414:	4649      	mov	r1, r9
 8008416:	f7f8 f917 	bl	8000648 <__aeabi_dmul>
 800841a:	4602      	mov	r2, r0
 800841c:	460b      	mov	r3, r1
 800841e:	4620      	mov	r0, r4
 8008420:	4629      	mov	r1, r5
 8008422:	f7f7 ff59 	bl	80002d8 <__aeabi_dsub>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4610      	mov	r0, r2
 800842c:	4619      	mov	r1, r3
 800842e:	f7f8 fbe3 	bl	8000bf8 <__aeabi_d2f>
 8008432:	4602      	mov	r2, r0
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843a:	ed93 7a00 	vldr	s14, [r3]
 800843e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008442:	edd7 7a01 	vldr	s15, [r7, #4]
 8008446:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800844a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800844e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008454:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008458:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800845c:	eef1 7a67 	vneg.f32	s15, s15
 8008460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008462:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8008466:	4b67      	ldr	r3, [pc, #412]	; (8008604 <cal_table+0x358>)
 8008468:	2203      	movs	r2, #3
 800846a:	701a      	strb	r2, [r3, #0]
		break;
 800846c:	e26f      	b.n	800894e <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800846e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008474:	edd3 7a02 	vldr	s15, [r3, #8]
 8008478:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800847c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008480:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008484:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008488:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800848c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008490:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008494:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008498:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800849c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80084a0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80084a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b0:	d900      	bls.n	80084b4 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80084b2:	e24c      	b.n	800894e <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80084ba:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80084be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80084c2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80084c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80084ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084ce:	ee66 7a27 	vmul.f32	s15, s12, s15
 80084d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084d6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80084da:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80084de:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084e2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084e6:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80084ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80084ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80084f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084fc:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	4618      	mov	r0, r3
 8008506:	f7f8 f847 	bl	8000598 <__aeabi_f2d>
 800850a:	4604      	mov	r4, r0
 800850c:	460d      	mov	r5, r1
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	4618      	mov	r0, r3
 8008512:	f7f8 f841 	bl	8000598 <__aeabi_f2d>
 8008516:	f04f 0200 	mov.w	r2, #0
 800851a:	f04f 0300 	mov.w	r3, #0
 800851e:	f7f8 f893 	bl	8000648 <__aeabi_dmul>
 8008522:	4602      	mov	r2, r0
 8008524:	460b      	mov	r3, r1
 8008526:	4690      	mov	r8, r2
 8008528:	4699      	mov	r9, r3
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7f8 f834 	bl	8000598 <__aeabi_f2d>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4640      	mov	r0, r8
 8008536:	4649      	mov	r1, r9
 8008538:	f7f8 f886 	bl	8000648 <__aeabi_dmul>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	4620      	mov	r0, r4
 8008542:	4629      	mov	r1, r5
 8008544:	f7f7 fec8 	bl	80002d8 <__aeabi_dsub>
 8008548:	4602      	mov	r2, r0
 800854a:	460b      	mov	r3, r1
 800854c:	4610      	mov	r0, r2
 800854e:	4619      	mov	r1, r3
 8008550:	f7f8 fb52 	bl	8000bf8 <__aeabi_d2f>
 8008554:	4602      	mov	r2, r0
 8008556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008558:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	ed93 7a00 	vldr	s14, [r3]
 8008560:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008564:	edd7 7a01 	vldr	s15, [r7, #4]
 8008568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800856c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008572:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8008576:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800857a:	eef1 7a67 	vneg.f32	s15, s15
 800857e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008580:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8008584:	4b1f      	ldr	r3, [pc, #124]	; (8008604 <cal_table+0x358>)
 8008586:	2203      	movs	r2, #3
 8008588:	701a      	strb	r2, [r3, #0]
		break;
 800858a:	e1e0      	b.n	800894e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858e:	ed93 7a00 	vldr	s14, [r3]
 8008592:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859e:	d900      	bls.n	80085a2 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085a0:	e1d5      	b.n	800894e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80085a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a6:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80085a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085b0:	4b14      	ldr	r3, [pc, #80]	; (8008604 <cal_table+0x358>)
 80085b2:	2204      	movs	r2, #4
 80085b4:	701a      	strb	r2, [r3, #0]
		break;
 80085b6:	e1ca      	b.n	800894e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80085b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80085be:	edd7 7a08 	vldr	s15, [r7, #32]
 80085c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ca:	da00      	bge.n	80085ce <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085cc:	e1bf      	b.n	800894e <cal_table+0x6a2>
			target->acceleration = 0;
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	f04f 0200 	mov.w	r2, #0
 80085d4:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085d6:	4b0b      	ldr	r3, [pc, #44]	; (8008604 <cal_table+0x358>)
 80085d8:	2204      	movs	r2, #4
 80085da:	701a      	strb	r2, [r3, #0]
		break;
 80085dc:	e1b7      	b.n	800894e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	ed93 7a02 	vldr	s14, [r3, #8]
 80085e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80085e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085f0:	da00      	bge.n	80085f4 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085f2:	e1ac      	b.n	800894e <cal_table+0x6a2>
			target->acceleration = 0;
 80085f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085fc:	4b01      	ldr	r3, [pc, #4]	; (8008604 <cal_table+0x358>)
 80085fe:	2204      	movs	r2, #4
 8008600:	701a      	strb	r2, [r3, #0]
		break;
 8008602:	e1a4      	b.n	800894e <cal_table+0x6a2>
 8008604:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 8008608:	4bce      	ldr	r3, [pc, #824]	; (8008944 <cal_table+0x698>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b06      	cmp	r3, #6
 8008610:	f200 819d 	bhi.w	800894e <cal_table+0x6a2>
 8008614:	a201      	add	r2, pc, #4	; (adr r2, 800861c <cal_table+0x370>)
 8008616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800861a:	bf00      	nop
 800861c:	0800894d 	.word	0x0800894d
 8008620:	08008639 	.word	0x08008639
 8008624:	080087ab 	.word	0x080087ab
 8008628:	080088c1 	.word	0x080088c1
 800862c:	080088ed 	.word	0x080088ed
 8008630:	080088f5 	.word	0x080088f5
 8008634:	0800891b 	.word	0x0800891b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863a:	ed93 7a00 	vldr	s14, [r3]
 800863e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864a:	d80a      	bhi.n	8008662 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 800864c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800864e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008650:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800865a:	4bba      	ldr	r3, [pc, #744]	; (8008944 <cal_table+0x698>)
 800865c:	2202      	movs	r2, #2
 800865e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008660:	e175      	b.n	800894e <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008662:	edd7 7a08 	vldr	s15, [r7, #32]
 8008666:	eeb1 7a67 	vneg.f32	s14, s15
 800866a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866c:	edd3 7a00 	vldr	s15, [r3]
 8008670:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008676:	edd3 7a00 	vldr	s15, [r3]
 800867a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800867e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008682:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008686:	ee66 7a27 	vmul.f32	s15, s12, s15
 800868a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800868e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008692:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008696:	ee66 7a27 	vmul.f32	s15, s12, s15
 800869a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800869e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80086a2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80086a6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80086aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80086ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086b6:	d900      	bls.n	80086ba <cal_table+0x40e>
		break;
 80086b8:	e149      	b.n	800894e <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 80086ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086bc:	edd3 7a00 	vldr	s15, [r3]
 80086c0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80086c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086c6:	edd3 7a00 	vldr	s15, [r3]
 80086ca:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80086ce:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80086d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086da:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80086de:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80086e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086ea:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80086ee:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80086f2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80086f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008702:	edd7 7a08 	vldr	s15, [r7, #32]
 8008706:	ee77 6a67 	vsub.f32	s13, s14, s15
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008714:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	4618      	mov	r0, r3
 800871e:	f7f7 ff3b 	bl	8000598 <__aeabi_f2d>
 8008722:	4604      	mov	r4, r0
 8008724:	460d      	mov	r5, r1
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	4618      	mov	r0, r3
 800872a:	f7f7 ff35 	bl	8000598 <__aeabi_f2d>
 800872e:	f04f 0200 	mov.w	r2, #0
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	f7f7 ff87 	bl	8000648 <__aeabi_dmul>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	4690      	mov	r8, r2
 8008740:	4699      	mov	r9, r3
 8008742:	edd7 7a01 	vldr	s15, [r7, #4]
 8008746:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800874a:	ee17 0a90 	vmov	r0, s15
 800874e:	f7f7 ff23 	bl	8000598 <__aeabi_f2d>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4640      	mov	r0, r8
 8008758:	4649      	mov	r1, r9
 800875a:	f7f7 ff75 	bl	8000648 <__aeabi_dmul>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4620      	mov	r0, r4
 8008764:	4629      	mov	r1, r5
 8008766:	f7f7 fdb9 	bl	80002dc <__adddf3>
 800876a:	4602      	mov	r2, r0
 800876c:	460b      	mov	r3, r1
 800876e:	4610      	mov	r0, r2
 8008770:	4619      	mov	r1, r3
 8008772:	f7f8 fa41 	bl	8000bf8 <__aeabi_d2f>
 8008776:	4602      	mov	r2, r0
 8008778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800877c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800877e:	ed93 7a00 	vldr	s14, [r3]
 8008782:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008786:	edd7 7a01 	vldr	s15, [r7, #4]
 800878a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800878e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 800879c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a0:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80087a2:	4b68      	ldr	r3, [pc, #416]	; (8008944 <cal_table+0x698>)
 80087a4:	2203      	movs	r2, #3
 80087a6:	701a      	strb	r2, [r3, #0]
		break;
 80087a8:	e0d1      	b.n	800894e <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80087aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80087b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80087b4:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80087b8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087bc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80087c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087d4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087d8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80087dc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087e0:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80087e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ec:	d900      	bls.n	80087f0 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80087ee:	e0ae      	b.n	800894e <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80087f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087fa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008802:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008806:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800880a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800880e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008812:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008816:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800881a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800881e:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008822:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008826:	edd7 7a08 	vldr	s15, [r7, #32]
 800882a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800882e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008830:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008838:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800883c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f7f7 fea9 	bl	8000598 <__aeabi_f2d>
 8008846:	4604      	mov	r4, r0
 8008848:	460d      	mov	r5, r1
 800884a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884c:	4618      	mov	r0, r3
 800884e:	f7f7 fea3 	bl	8000598 <__aeabi_f2d>
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	f04f 0300 	mov.w	r3, #0
 800885a:	f7f7 fef5 	bl	8000648 <__aeabi_dmul>
 800885e:	4602      	mov	r2, r0
 8008860:	460b      	mov	r3, r1
 8008862:	4690      	mov	r8, r2
 8008864:	4699      	mov	r9, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7f7 fe96 	bl	8000598 <__aeabi_f2d>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4640      	mov	r0, r8
 8008872:	4649      	mov	r1, r9
 8008874:	f7f7 fee8 	bl	8000648 <__aeabi_dmul>
 8008878:	4602      	mov	r2, r0
 800887a:	460b      	mov	r3, r1
 800887c:	4620      	mov	r0, r4
 800887e:	4629      	mov	r1, r5
 8008880:	f7f7 fd2c 	bl	80002dc <__adddf3>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4610      	mov	r0, r2
 800888a:	4619      	mov	r1, r3
 800888c:	f7f8 f9b4 	bl	8000bf8 <__aeabi_d2f>
 8008890:	4602      	mov	r2, r0
 8008892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008894:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008898:	ed93 7a00 	vldr	s14, [r3]
 800889c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80088a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80088ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ae:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 80088b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b6:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 80088b8:	4b22      	ldr	r3, [pc, #136]	; (8008944 <cal_table+0x698>)
 80088ba:	2203      	movs	r2, #3
 80088bc:	701a      	strb	r2, [r3, #0]
		break;
 80088be:	e046      	b.n	800894e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 80088c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c2:	ed93 7a00 	vldr	s14, [r3]
 80088c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088d2:	da00      	bge.n	80088d6 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088d4:	e03b      	b.n	800894e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80088d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80088dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088de:	f04f 0200 	mov.w	r2, #0
 80088e2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088e4:	4b17      	ldr	r3, [pc, #92]	; (8008944 <cal_table+0x698>)
 80088e6:	2204      	movs	r2, #4
 80088e8:	701a      	strb	r2, [r3, #0]
		break;
 80088ea:	e030      	b.n	800894e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 80088ec:	4b16      	ldr	r3, [pc, #88]	; (8008948 <cal_table+0x69c>)
 80088ee:	2201      	movs	r2, #1
 80088f0:	701a      	strb	r2, [r3, #0]
		break;
 80088f2:	e02c      	b.n	800894e <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80088f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80088fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80088fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008906:	d900      	bls.n	800890a <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008908:	e021      	b.n	800894e <cal_table+0x6a2>
			target->acceleration = 0;
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	f04f 0200 	mov.w	r2, #0
 8008910:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <cal_table+0x698>)
 8008914:	2204      	movs	r2, #4
 8008916:	701a      	strb	r2, [r3, #0]
		break;
 8008918:	e019      	b.n	800894e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 800891a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008920:	edd7 7a08 	vldr	s15, [r7, #32]
 8008924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800892c:	d900      	bls.n	8008930 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800892e:	e00e      	b.n	800894e <cal_table+0x6a2>
			target->acceleration = 0;
 8008930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008932:	f04f 0200 	mov.w	r2, #0
 8008936:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008938:	4b02      	ldr	r3, [pc, #8]	; (8008944 <cal_table+0x698>)
 800893a:	2204      	movs	r2, #4
 800893c:	701a      	strb	r2, [r3, #0]
		break;
 800893e:	e006      	b.n	800894e <cal_table+0x6a2>
		break;
 8008940:	bf00      	nop
 8008942:	e004      	b.n	800894e <cal_table+0x6a2>
 8008944:	20000804 	.word	0x20000804
 8008948:	20000805 	.word	0x20000805
		break;
 800894c:	bf00      	nop
	}

}

}
 800894e:	bf00      	nop
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008958:	b004      	add	sp, #16
 800895a:	4770      	bx	lr
 800895c:	0000      	movs	r0, r0
	...

08008960 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008964:	b08c      	sub	sp, #48	; 0x30
 8008966:	af00      	add	r7, sp, #0
 8008968:	eef0 6a40 	vmov.f32	s13, s0
 800896c:	eeb0 7a60 	vmov.f32	s14, s1
 8008970:	eef0 7a41 	vmov.f32	s15, s2
 8008974:	6138      	str	r0, [r7, #16]
 8008976:	edc7 6a05 	vstr	s13, [r7, #20]
 800897a:	ed87 7a06 	vstr	s14, [r7, #24]
 800897e:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008982:	4be7      	ldr	r3, [pc, #924]	; (8008d20 <cal_mollifier_table+0x3c0>)
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008986:	4be7      	ldr	r3, [pc, #924]	; (8008d24 <cal_mollifier_table+0x3c4>)
 8008988:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 800898a:	4be7      	ldr	r3, [pc, #924]	; (8008d28 <cal_mollifier_table+0x3c8>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4618      	mov	r0, r3
 8008990:	f7f7 fe02 	bl	8000598 <__aeabi_f2d>
 8008994:	a3da      	add	r3, pc, #872	; (adr r3, 8008d00 <cal_mollifier_table+0x3a0>)
 8008996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899a:	f7f7 fc9f 	bl	80002dc <__adddf3>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4610      	mov	r0, r2
 80089a4:	4619      	mov	r1, r3
 80089a6:	f7f8 f927 	bl	8000bf8 <__aeabi_d2f>
 80089aa:	4603      	mov	r3, r0
 80089ac:	4ade      	ldr	r2, [pc, #888]	; (8008d28 <cal_mollifier_table+0x3c8>)
 80089ae:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 80089b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80089b4:	eef0 7ae7 	vabs.f32	s15, s15
 80089b8:	ee17 0a90 	vmov	r0, s15
 80089bc:	f7f7 fdec 	bl	8000598 <__aeabi_f2d>
 80089c0:	4602      	mov	r2, r0
 80089c2:	460b      	mov	r3, r1
 80089c4:	f7f7 fc8a 	bl	80002dc <__adddf3>
 80089c8:	4602      	mov	r2, r0
 80089ca:	460b      	mov	r3, r1
 80089cc:	4610      	mov	r0, r2
 80089ce:	4619      	mov	r1, r3
 80089d0:	a3cd      	add	r3, pc, #820	; (adr r3, 8008d08 <cal_mollifier_table+0x3a8>)
 80089d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d6:	f7f7 ff61 	bl	800089c <__aeabi_ddiv>
 80089da:	4602      	mov	r2, r0
 80089dc:	460b      	mov	r3, r1
 80089de:	4610      	mov	r0, r2
 80089e0:	4619      	mov	r1, r3
 80089e2:	a3cb      	add	r3, pc, #812	; (adr r3, 8008d10 <cal_mollifier_table+0x3b0>)
 80089e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e8:	f7f7 fe2e 	bl	8000648 <__aeabi_dmul>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4614      	mov	r4, r2
 80089f2:	461d      	mov	r5, r3
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7f7 fdce 	bl	8000598 <__aeabi_f2d>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4620      	mov	r0, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	f7f7 ff4a 	bl	800089c <__aeabi_ddiv>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	f7f8 f8f2 	bl	8000bf8 <__aeabi_d2f>
 8008a14:	4603      	mov	r3, r0
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a1c:	eef1 7a67 	vneg.f32	s15, s15
 8008a20:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a28:	4bbf      	ldr	r3, [pc, #764]	; (8008d28 <cal_mollifier_table+0x3c8>)
 8008a2a:	edd3 7a00 	vldr	s15, [r3]
 8008a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a36:	f140 8698 	bpl.w	800976a <cal_mollifier_table+0xe0a>
 8008a3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a42:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a46:	4bb8      	ldr	r3, [pc, #736]	; (8008d28 <cal_mollifier_table+0x3c8>)
 8008a48:	edd3 7a00 	vldr	s15, [r3]
 8008a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	f340 8689 	ble.w	800976a <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008a5e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a72:	ee17 0a90 	vmov	r0, s15
 8008a76:	f7f7 fd8f 	bl	8000598 <__aeabi_f2d>
 8008a7a:	a3a3      	add	r3, pc, #652	; (adr r3, 8008d08 <cal_mollifier_table+0x3a8>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 ff0c 	bl	800089c <__aeabi_ddiv>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4614      	mov	r4, r2
 8008a8a:	461d      	mov	r5, r3
 8008a8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a90:	eeb1 7a67 	vneg.f32	s14, s15
 8008a94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a9c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008aa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008aa4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008aa8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008aac:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008ab0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008ab4:	4b9c      	ldr	r3, [pc, #624]	; (8008d28 <cal_mollifier_table+0x3c8>)
 8008ab6:	ed93 6a00 	vldr	s12, [r3]
 8008aba:	4b9b      	ldr	r3, [pc, #620]	; (8008d28 <cal_mollifier_table+0x3c8>)
 8008abc:	edd3 7a00 	vldr	s15, [r3]
 8008ac0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008ac4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008ac8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008acc:	ee16 0a90 	vmov	r0, s13
 8008ad0:	f7f7 fd62 	bl	8000598 <__aeabi_f2d>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	ec43 2b10 	vmov	d0, r2, r3
 8008adc:	f01a fac4 	bl	8023068 <exp>
 8008ae0:	ec53 2b10 	vmov	r2, r3, d0
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	f7f7 fdae 	bl	8000648 <__aeabi_dmul>
 8008aec:	4602      	mov	r2, r0
 8008aee:	460b      	mov	r3, r1
 8008af0:	4610      	mov	r0, r2
 8008af2:	4619      	mov	r1, r3
 8008af4:	f7f8 f880 	bl	8000bf8 <__aeabi_d2f>
 8008af8:	4602      	mov	r2, r0
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008afe:	4b8a      	ldr	r3, [pc, #552]	; (8008d28 <cal_mollifier_table+0x3c8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f7 fd48 	bl	8000598 <__aeabi_f2d>
 8008b08:	4604      	mov	r4, r0
 8008b0a:	460d      	mov	r5, r1
 8008b0c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b10:	eef1 7a67 	vneg.f32	s15, s15
 8008b14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b1c:	ee16 0a90 	vmov	r0, s13
 8008b20:	f7f7 fd3a 	bl	8000598 <__aeabi_f2d>
 8008b24:	a37c      	add	r3, pc, #496	; (adr r3, 8008d18 <cal_mollifier_table+0x3b8>)
 8008b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2a:	f7f7 feb7 	bl	800089c <__aeabi_ddiv>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4690      	mov	r8, r2
 8008b34:	4699      	mov	r9, r3
 8008b36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b38:	f7f7 fd2e 	bl	8000598 <__aeabi_f2d>
 8008b3c:	a370      	add	r3, pc, #448	; (adr r3, 8008d00 <cal_mollifier_table+0x3a0>)
 8008b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b42:	f7f7 fd81 	bl	8000648 <__aeabi_dmul>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	4649      	mov	r1, r9
 8008b4e:	f7f7 fbc5 	bl	80002dc <__adddf3>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	f000 8163 	beq.w	8008e2c <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008b66:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b6a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7a:	ee17 0a90 	vmov	r0, s15
 8008b7e:	f7f7 fd0b 	bl	8000598 <__aeabi_f2d>
 8008b82:	a361      	add	r3, pc, #388	; (adr r3, 8008d08 <cal_mollifier_table+0x3a8>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 fe88 	bl	800089c <__aeabi_ddiv>
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	460b      	mov	r3, r1
 8008b90:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008b94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b98:	eeb1 7a67 	vneg.f32	s14, s15
 8008b9c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ba4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ba8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bac:	ee16 0a90 	vmov	r0, s13
 8008bb0:	f7f7 fcf2 	bl	8000598 <__aeabi_f2d>
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	460d      	mov	r5, r1
 8008bb8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bbc:	eef1 7a67 	vneg.f32	s15, s15
 8008bc0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bc8:	ee16 0a90 	vmov	r0, s13
 8008bcc:	f7f7 fce4 	bl	8000598 <__aeabi_f2d>
 8008bd0:	a351      	add	r3, pc, #324	; (adr r3, 8008d18 <cal_mollifier_table+0x3b8>)
 8008bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd6:	f7f7 fe61 	bl	800089c <__aeabi_ddiv>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 fd31 	bl	8000648 <__aeabi_dmul>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4690      	mov	r8, r2
 8008bec:	4699      	mov	r9, r3
 8008bee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bf2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008bf6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008bfa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bfe:	ee16 0a90 	vmov	r0, s13
 8008c02:	f7f7 fcc9 	bl	8000598 <__aeabi_f2d>
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c0e:	eef1 7a67 	vneg.f32	s15, s15
 8008c12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c1a:	ee16 0a90 	vmov	r0, s13
 8008c1e:	f7f7 fcbb 	bl	8000598 <__aeabi_f2d>
 8008c22:	a33d      	add	r3, pc, #244	; (adr r3, 8008d18 <cal_mollifier_table+0x3b8>)
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	f7f7 fe38 	bl	800089c <__aeabi_ddiv>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	460b      	mov	r3, r1
 8008c30:	4692      	mov	sl, r2
 8008c32:	469b      	mov	fp, r3
 8008c34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c40:	ee16 0a90 	vmov	r0, s13
 8008c44:	f7f7 fca8 	bl	8000598 <__aeabi_f2d>
 8008c48:	a333      	add	r3, pc, #204	; (adr r3, 8008d18 <cal_mollifier_table+0x3b8>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fe25 	bl	800089c <__aeabi_ddiv>
 8008c52:	4602      	mov	r2, r0
 8008c54:	460b      	mov	r3, r1
 8008c56:	4650      	mov	r0, sl
 8008c58:	4659      	mov	r1, fp
 8008c5a:	f7f7 fcf5 	bl	8000648 <__aeabi_dmul>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4620      	mov	r0, r4
 8008c64:	4629      	mov	r1, r5
 8008c66:	f7f7 fb39 	bl	80002dc <__adddf3>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	4640      	mov	r0, r8
 8008c70:	4649      	mov	r1, r9
 8008c72:	f7f7 fe13 	bl	800089c <__aeabi_ddiv>
 8008c76:	4602      	mov	r2, r0
 8008c78:	460b      	mov	r3, r1
 8008c7a:	4690      	mov	r8, r2
 8008c7c:	4699      	mov	r9, r3
 8008c7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c86:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c8e:	ee16 0a90 	vmov	r0, s13
 8008c92:	f7f7 fc81 	bl	8000598 <__aeabi_f2d>
 8008c96:	4604      	mov	r4, r0
 8008c98:	460d      	mov	r5, r1
 8008c9a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c9e:	eef1 7a67 	vneg.f32	s15, s15
 8008ca2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ca6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008caa:	ee16 0a90 	vmov	r0, s13
 8008cae:	f7f7 fc73 	bl	8000598 <__aeabi_f2d>
 8008cb2:	a319      	add	r3, pc, #100	; (adr r3, 8008d18 <cal_mollifier_table+0x3b8>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fdf0 	bl	800089c <__aeabi_ddiv>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4692      	mov	sl, r2
 8008cc2:	469b      	mov	fp, r3
 8008cc4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cc8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008ccc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cd0:	ee16 0a90 	vmov	r0, s13
 8008cd4:	f7f7 fc60 	bl	8000598 <__aeabi_f2d>
 8008cd8:	a30f      	add	r3, pc, #60	; (adr r3, 8008d18 <cal_mollifier_table+0x3b8>)
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 fddd 	bl	800089c <__aeabi_ddiv>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	4650      	mov	r0, sl
 8008ce8:	4659      	mov	r1, fp
 8008cea:	f7f7 fcad 	bl	8000648 <__aeabi_dmul>
 8008cee:	4602      	mov	r2, r0
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4620      	mov	r0, r4
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	f7f7 faf1 	bl	80002dc <__adddf3>
 8008cfa:	4602      	mov	r2, r0
 8008cfc:	e016      	b.n	8008d2c <cal_mollifier_table+0x3cc>
 8008cfe:	bf00      	nop
 8008d00:	d2f1a9fc 	.word	0xd2f1a9fc
 8008d04:	3f50624d 	.word	0x3f50624d
 8008d08:	f9db22d1 	.word	0xf9db22d1
 8008d0c:	3fdc6a7e 	.word	0x3fdc6a7e
 8008d10:	362cef38 	.word	0x362cef38
 8008d14:	3fd78b56 	.word	0x3fd78b56
 8008d18:	04189375 	.word	0x04189375
 8008d1c:	3ff50e56 	.word	0x3ff50e56
 8008d20:	41700000 	.word	0x41700000
 8008d24:	c1700000 	.word	0xc1700000
 8008d28:	20000800 	.word	0x20000800
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	4640      	mov	r0, r8
 8008d30:	4649      	mov	r1, r9
 8008d32:	f7f7 fdb3 	bl	800089c <__aeabi_ddiv>
 8008d36:	4602      	mov	r2, r0
 8008d38:	460b      	mov	r3, r1
 8008d3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d3e:	f7f7 fc83 	bl	8000648 <__aeabi_dmul>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4692      	mov	sl, r2
 8008d48:	469b      	mov	fp, r3
 8008d4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d4e:	eeb1 7a67 	vneg.f32	s14, s15
 8008d52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d5a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d62:	ee16 0a90 	vmov	r0, s13
 8008d66:	f7f7 fc17 	bl	8000598 <__aeabi_f2d>
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	460d      	mov	r5, r1
 8008d6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d7e:	ee16 0a90 	vmov	r0, s13
 8008d82:	f7f7 fc09 	bl	8000598 <__aeabi_f2d>
 8008d86:	4680      	mov	r8, r0
 8008d88:	4689      	mov	r9, r1
 8008d8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d8e:	eef1 7a67 	vneg.f32	s15, s15
 8008d92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d9a:	ee16 0a90 	vmov	r0, s13
 8008d9e:	f7f7 fbfb 	bl	8000598 <__aeabi_f2d>
 8008da2:	a3e1      	add	r3, pc, #900	; (adr r3, 8009128 <cal_mollifier_table+0x7c8>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f7f7 fd78 	bl	800089c <__aeabi_ddiv>
 8008dac:	4602      	mov	r2, r0
 8008dae:	460b      	mov	r3, r1
 8008db0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008db4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008db8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008dc0:	ee16 0a90 	vmov	r0, s13
 8008dc4:	f7f7 fbe8 	bl	8000598 <__aeabi_f2d>
 8008dc8:	a3d7      	add	r3, pc, #860	; (adr r3, 8009128 <cal_mollifier_table+0x7c8>)
 8008dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dce:	f7f7 fd65 	bl	800089c <__aeabi_ddiv>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	460b      	mov	r3, r1
 8008dd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dda:	f7f7 fc35 	bl	8000648 <__aeabi_dmul>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	4640      	mov	r0, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	f7f7 fa79 	bl	80002dc <__adddf3>
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	4620      	mov	r0, r4
 8008df0:	4629      	mov	r1, r5
 8008df2:	f7f7 fd53 	bl	800089c <__aeabi_ddiv>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	ec43 2b17 	vmov	d7, r2, r3
 8008dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8008e02:	eef0 0a67 	vmov.f32	s1, s15
 8008e06:	f01a f92f 	bl	8023068 <exp>
 8008e0a:	ec53 2b10 	vmov	r2, r3, d0
 8008e0e:	4650      	mov	r0, sl
 8008e10:	4659      	mov	r1, fp
 8008e12:	f7f7 fc19 	bl	8000648 <__aeabi_dmul>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f7f7 feeb 	bl	8000bf8 <__aeabi_d2f>
 8008e22:	4602      	mov	r2, r0
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008e28:	f000 bcb4 	b.w	8009794 <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008e2c:	4bc0      	ldr	r3, [pc, #768]	; (8009130 <cal_mollifier_table+0x7d0>)
 8008e2e:	edd3 7a00 	vldr	s15, [r3]
 8008e32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e3a:	f140 817b 	bpl.w	8009134 <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008e3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e52:	ee17 0a90 	vmov	r0, s15
 8008e56:	f7f7 fb9f 	bl	8000598 <__aeabi_f2d>
 8008e5a:	a3af      	add	r3, pc, #700	; (adr r3, 8009118 <cal_mollifier_table+0x7b8>)
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	f7f7 fd1c 	bl	800089c <__aeabi_ddiv>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e70:	eeb1 7a67 	vneg.f32	s14, s15
 8008e74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e84:	ee16 0a90 	vmov	r0, s13
 8008e88:	f7f7 fb86 	bl	8000598 <__aeabi_f2d>
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	4ba7      	ldr	r3, [pc, #668]	; (8009130 <cal_mollifier_table+0x7d0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7f7 fb7f 	bl	8000598 <__aeabi_f2d>
 8008e9a:	4680      	mov	r8, r0
 8008e9c:	4689      	mov	r9, r1
 8008e9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ea0:	f7f7 fb7a 	bl	8000598 <__aeabi_f2d>
 8008ea4:	a39e      	add	r3, pc, #632	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 8008ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eaa:	f7f7 fbcd 	bl	8000648 <__aeabi_dmul>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	4649      	mov	r1, r9
 8008eb6:	f7f7 fa0f 	bl	80002d8 <__aeabi_dsub>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	f7f7 fbc1 	bl	8000648 <__aeabi_dmul>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	e9c7 2300 	strd	r2, r3, [r7]
 8008ece:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ed2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ed6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008eda:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ede:	ee16 0a90 	vmov	r0, s13
 8008ee2:	f7f7 fb59 	bl	8000598 <__aeabi_f2d>
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	4689      	mov	r9, r1
 8008eea:	4b91      	ldr	r3, [pc, #580]	; (8009130 <cal_mollifier_table+0x7d0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7f7 fb52 	bl	8000598 <__aeabi_f2d>
 8008ef4:	4604      	mov	r4, r0
 8008ef6:	460d      	mov	r5, r1
 8008ef8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008efa:	f7f7 fb4d 	bl	8000598 <__aeabi_f2d>
 8008efe:	a388      	add	r3, pc, #544	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f7f7 fba0 	bl	8000648 <__aeabi_dmul>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	4629      	mov	r1, r5
 8008f10:	f7f7 f9e2 	bl	80002d8 <__aeabi_dsub>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4692      	mov	sl, r2
 8008f1a:	469b      	mov	fp, r3
 8008f1c:	4b84      	ldr	r3, [pc, #528]	; (8009130 <cal_mollifier_table+0x7d0>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7f7 fb39 	bl	8000598 <__aeabi_f2d>
 8008f26:	4604      	mov	r4, r0
 8008f28:	460d      	mov	r5, r1
 8008f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f2c:	f7f7 fb34 	bl	8000598 <__aeabi_f2d>
 8008f30:	a37b      	add	r3, pc, #492	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f7f7 fb87 	bl	8000648 <__aeabi_dmul>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	4620      	mov	r0, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	f7f7 f9c9 	bl	80002d8 <__aeabi_dsub>
 8008f46:	4602      	mov	r2, r0
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4650      	mov	r0, sl
 8008f4c:	4659      	mov	r1, fp
 8008f4e:	f7f7 fb7b 	bl	8000648 <__aeabi_dmul>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4640      	mov	r0, r8
 8008f58:	4649      	mov	r1, r9
 8008f5a:	f7f7 f9bd 	bl	80002d8 <__aeabi_dsub>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f66:	f7f7 fc99 	bl	800089c <__aeabi_ddiv>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	e9c7 2300 	strd	r2, r3, [r7]
 8008f72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f76:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f7a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f7e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f82:	ee16 0a90 	vmov	r0, s13
 8008f86:	f7f7 fb07 	bl	8000598 <__aeabi_f2d>
 8008f8a:	4680      	mov	r8, r0
 8008f8c:	4689      	mov	r9, r1
 8008f8e:	4b68      	ldr	r3, [pc, #416]	; (8009130 <cal_mollifier_table+0x7d0>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f7 fb00 	bl	8000598 <__aeabi_f2d>
 8008f98:	4604      	mov	r4, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f9e:	f7f7 fafb 	bl	8000598 <__aeabi_f2d>
 8008fa2:	a35f      	add	r3, pc, #380	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f7f7 fb4e 	bl	8000648 <__aeabi_dmul>
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	4629      	mov	r1, r5
 8008fb4:	f7f7 f990 	bl	80002d8 <__aeabi_dsub>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4692      	mov	sl, r2
 8008fbe:	469b      	mov	fp, r3
 8008fc0:	4b5b      	ldr	r3, [pc, #364]	; (8009130 <cal_mollifier_table+0x7d0>)
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7f7 fae7 	bl	8000598 <__aeabi_f2d>
 8008fca:	4604      	mov	r4, r0
 8008fcc:	460d      	mov	r5, r1
 8008fce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fd0:	f7f7 fae2 	bl	8000598 <__aeabi_f2d>
 8008fd4:	a352      	add	r3, pc, #328	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f7f7 fb35 	bl	8000648 <__aeabi_dmul>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	4629      	mov	r1, r5
 8008fe6:	f7f7 f977 	bl	80002d8 <__aeabi_dsub>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4650      	mov	r0, sl
 8008ff0:	4659      	mov	r1, fp
 8008ff2:	f7f7 fb29 	bl	8000648 <__aeabi_dmul>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 f96b 	bl	80002d8 <__aeabi_dsub>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800900a:	f7f7 fc47 	bl	800089c <__aeabi_ddiv>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009016:	f7f7 fb17 	bl	8000648 <__aeabi_dmul>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009022:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009026:	eeb1 7a67 	vneg.f32	s14, s15
 800902a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800902e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009032:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009036:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800903a:	ee16 0a90 	vmov	r0, s13
 800903e:	f7f7 faab 	bl	8000598 <__aeabi_f2d>
 8009042:	4680      	mov	r8, r0
 8009044:	4689      	mov	r9, r1
 8009046:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800904a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800904e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009052:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009056:	ee16 0a90 	vmov	r0, s13
 800905a:	f7f7 fa9d 	bl	8000598 <__aeabi_f2d>
 800905e:	4682      	mov	sl, r0
 8009060:	468b      	mov	fp, r1
 8009062:	4b33      	ldr	r3, [pc, #204]	; (8009130 <cal_mollifier_table+0x7d0>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4618      	mov	r0, r3
 8009068:	f7f7 fa96 	bl	8000598 <__aeabi_f2d>
 800906c:	4604      	mov	r4, r0
 800906e:	460d      	mov	r5, r1
 8009070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009072:	f7f7 fa91 	bl	8000598 <__aeabi_f2d>
 8009076:	a32a      	add	r3, pc, #168	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 8009078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907c:	f7f7 fae4 	bl	8000648 <__aeabi_dmul>
 8009080:	4602      	mov	r2, r0
 8009082:	460b      	mov	r3, r1
 8009084:	4620      	mov	r0, r4
 8009086:	4629      	mov	r1, r5
 8009088:	f7f7 f926 	bl	80002d8 <__aeabi_dsub>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	e9c7 2300 	strd	r2, r3, [r7]
 8009094:	4b26      	ldr	r3, [pc, #152]	; (8009130 <cal_mollifier_table+0x7d0>)
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4618      	mov	r0, r3
 800909a:	f7f7 fa7d 	bl	8000598 <__aeabi_f2d>
 800909e:	4604      	mov	r4, r0
 80090a0:	460d      	mov	r5, r1
 80090a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80090a4:	f7f7 fa78 	bl	8000598 <__aeabi_f2d>
 80090a8:	a31d      	add	r3, pc, #116	; (adr r3, 8009120 <cal_mollifier_table+0x7c0>)
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f7f7 facb 	bl	8000648 <__aeabi_dmul>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4620      	mov	r0, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	f7f7 f90d 	bl	80002d8 <__aeabi_dsub>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090c6:	f7f7 fabf 	bl	8000648 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	4650      	mov	r0, sl
 80090d0:	4659      	mov	r1, fp
 80090d2:	f7f7 f901 	bl	80002d8 <__aeabi_dsub>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 fbdd 	bl	800089c <__aeabi_ddiv>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	ec43 2b17 	vmov	d7, r2, r3
 80090ea:	eeb0 0a47 	vmov.f32	s0, s14
 80090ee:	eef0 0a67 	vmov.f32	s1, s15
 80090f2:	f019 ffb9 	bl	8023068 <exp>
 80090f6:	ec53 2b10 	vmov	r2, r3, d0
 80090fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090fe:	f7f7 faa3 	bl	8000648 <__aeabi_dmul>
 8009102:	4602      	mov	r2, r0
 8009104:	460b      	mov	r3, r1
 8009106:	4610      	mov	r0, r2
 8009108:	4619      	mov	r1, r3
 800910a:	f7f7 fd75 	bl	8000bf8 <__aeabi_d2f>
 800910e:	4602      	mov	r2, r0
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009114:	e33e      	b.n	8009794 <cal_mollifier_table+0xe34>
 8009116:	bf00      	nop
 8009118:	f9db22d1 	.word	0xf9db22d1
 800911c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009120:	d2f1a9fc 	.word	0xd2f1a9fc
 8009124:	3f50624d 	.word	0x3f50624d
 8009128:	04189375 	.word	0x04189375
 800912c:	3ff50e56 	.word	0x3ff50e56
 8009130:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009134:	4bd4      	ldr	r3, [pc, #848]	; (8009488 <cal_mollifier_table+0xb28>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4618      	mov	r0, r3
 800913a:	f7f7 fa2d 	bl	8000598 <__aeabi_f2d>
 800913e:	4604      	mov	r4, r0
 8009140:	460d      	mov	r5, r1
 8009142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009146:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800914a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800914e:	ee16 0a90 	vmov	r0, s13
 8009152:	f7f7 fa21 	bl	8000598 <__aeabi_f2d>
 8009156:	a3c6      	add	r3, pc, #792	; (adr r3, 8009470 <cal_mollifier_table+0xb10>)
 8009158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915c:	f7f7 fb9e 	bl	800089c <__aeabi_ddiv>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4690      	mov	r8, r2
 8009166:	4699      	mov	r9, r3
 8009168:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916a:	f7f7 fa15 	bl	8000598 <__aeabi_f2d>
 800916e:	a3c2      	add	r3, pc, #776	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 8009170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009174:	f7f7 fa68 	bl	8000648 <__aeabi_dmul>
 8009178:	4602      	mov	r2, r0
 800917a:	460b      	mov	r3, r1
 800917c:	4640      	mov	r0, r8
 800917e:	4649      	mov	r1, r9
 8009180:	f7f7 f8ac 	bl	80002dc <__adddf3>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4620      	mov	r0, r4
 800918a:	4629      	mov	r1, r5
 800918c:	f7f7 fcce 	bl	8000b2c <__aeabi_dcmplt>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 817a 	beq.w	800948c <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009198:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800919c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80091a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ac:	ee17 0a90 	vmov	r0, s15
 80091b0:	f7f7 f9f2 	bl	8000598 <__aeabi_f2d>
 80091b4:	a3b2      	add	r3, pc, #712	; (adr r3, 8009480 <cal_mollifier_table+0xb20>)
 80091b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ba:	f7f7 fb6f 	bl	800089c <__aeabi_ddiv>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80091c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091ca:	eeb1 7a67 	vneg.f32	s14, s15
 80091ce:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091de:	ee16 0a90 	vmov	r0, s13
 80091e2:	f7f7 f9d9 	bl	8000598 <__aeabi_f2d>
 80091e6:	4604      	mov	r4, r0
 80091e8:	460d      	mov	r5, r1
 80091ea:	4ba7      	ldr	r3, [pc, #668]	; (8009488 <cal_mollifier_table+0xb28>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f7f7 f9d2 	bl	8000598 <__aeabi_f2d>
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091fa:	f7f7 f9cd 	bl	8000598 <__aeabi_f2d>
 80091fe:	a39e      	add	r3, pc, #632	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 fa20 	bl	8000648 <__aeabi_dmul>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	4640      	mov	r0, r8
 800920e:	4649      	mov	r1, r9
 8009210:	f7f7 f862 	bl	80002d8 <__aeabi_dsub>
 8009214:	4602      	mov	r2, r0
 8009216:	460b      	mov	r3, r1
 8009218:	4620      	mov	r0, r4
 800921a:	4629      	mov	r1, r5
 800921c:	f7f7 fa14 	bl	8000648 <__aeabi_dmul>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	e9c7 2300 	strd	r2, r3, [r7]
 8009228:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800922c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009230:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009234:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009238:	ee16 0a90 	vmov	r0, s13
 800923c:	f7f7 f9ac 	bl	8000598 <__aeabi_f2d>
 8009240:	4680      	mov	r8, r0
 8009242:	4689      	mov	r9, r1
 8009244:	4b90      	ldr	r3, [pc, #576]	; (8009488 <cal_mollifier_table+0xb28>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4618      	mov	r0, r3
 800924a:	f7f7 f9a5 	bl	8000598 <__aeabi_f2d>
 800924e:	4604      	mov	r4, r0
 8009250:	460d      	mov	r5, r1
 8009252:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009254:	f7f7 f9a0 	bl	8000598 <__aeabi_f2d>
 8009258:	a387      	add	r3, pc, #540	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	f7f7 f9f3 	bl	8000648 <__aeabi_dmul>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4620      	mov	r0, r4
 8009268:	4629      	mov	r1, r5
 800926a:	f7f7 f835 	bl	80002d8 <__aeabi_dsub>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	4692      	mov	sl, r2
 8009274:	469b      	mov	fp, r3
 8009276:	4b84      	ldr	r3, [pc, #528]	; (8009488 <cal_mollifier_table+0xb28>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4618      	mov	r0, r3
 800927c:	f7f7 f98c 	bl	8000598 <__aeabi_f2d>
 8009280:	4604      	mov	r4, r0
 8009282:	460d      	mov	r5, r1
 8009284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009286:	f7f7 f987 	bl	8000598 <__aeabi_f2d>
 800928a:	a37b      	add	r3, pc, #492	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f7f7 f9da 	bl	8000648 <__aeabi_dmul>
 8009294:	4602      	mov	r2, r0
 8009296:	460b      	mov	r3, r1
 8009298:	4620      	mov	r0, r4
 800929a:	4629      	mov	r1, r5
 800929c:	f7f7 f81c 	bl	80002d8 <__aeabi_dsub>
 80092a0:	4602      	mov	r2, r0
 80092a2:	460b      	mov	r3, r1
 80092a4:	4650      	mov	r0, sl
 80092a6:	4659      	mov	r1, fp
 80092a8:	f7f7 f9ce 	bl	8000648 <__aeabi_dmul>
 80092ac:	4602      	mov	r2, r0
 80092ae:	460b      	mov	r3, r1
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 f810 	bl	80002d8 <__aeabi_dsub>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092c0:	f7f7 faec 	bl	800089c <__aeabi_ddiv>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	e9c7 2300 	strd	r2, r3, [r7]
 80092cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092d4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092dc:	ee16 0a90 	vmov	r0, s13
 80092e0:	f7f7 f95a 	bl	8000598 <__aeabi_f2d>
 80092e4:	4680      	mov	r8, r0
 80092e6:	4689      	mov	r9, r1
 80092e8:	4b67      	ldr	r3, [pc, #412]	; (8009488 <cal_mollifier_table+0xb28>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7f7 f953 	bl	8000598 <__aeabi_f2d>
 80092f2:	4604      	mov	r4, r0
 80092f4:	460d      	mov	r5, r1
 80092f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092f8:	f7f7 f94e 	bl	8000598 <__aeabi_f2d>
 80092fc:	a35e      	add	r3, pc, #376	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	f7f7 f9a1 	bl	8000648 <__aeabi_dmul>
 8009306:	4602      	mov	r2, r0
 8009308:	460b      	mov	r3, r1
 800930a:	4620      	mov	r0, r4
 800930c:	4629      	mov	r1, r5
 800930e:	f7f6 ffe3 	bl	80002d8 <__aeabi_dsub>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4692      	mov	sl, r2
 8009318:	469b      	mov	fp, r3
 800931a:	4b5b      	ldr	r3, [pc, #364]	; (8009488 <cal_mollifier_table+0xb28>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f7f7 f93a 	bl	8000598 <__aeabi_f2d>
 8009324:	4604      	mov	r4, r0
 8009326:	460d      	mov	r5, r1
 8009328:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800932a:	f7f7 f935 	bl	8000598 <__aeabi_f2d>
 800932e:	a352      	add	r3, pc, #328	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 8009330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009334:	f7f7 f988 	bl	8000648 <__aeabi_dmul>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4620      	mov	r0, r4
 800933e:	4629      	mov	r1, r5
 8009340:	f7f6 ffca 	bl	80002d8 <__aeabi_dsub>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4650      	mov	r0, sl
 800934a:	4659      	mov	r1, fp
 800934c:	f7f7 f97c 	bl	8000648 <__aeabi_dmul>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f6 ffbe 	bl	80002d8 <__aeabi_dsub>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009364:	f7f7 fa9a 	bl	800089c <__aeabi_ddiv>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009370:	f7f7 f96a 	bl	8000648 <__aeabi_dmul>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800937c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009380:	eeb1 7a67 	vneg.f32	s14, s15
 8009384:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800938c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009390:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009394:	ee16 0a90 	vmov	r0, s13
 8009398:	f7f7 f8fe 	bl	8000598 <__aeabi_f2d>
 800939c:	4680      	mov	r8, r0
 800939e:	4689      	mov	r9, r1
 80093a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80093a4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093a8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80093ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093b0:	ee16 0a90 	vmov	r0, s13
 80093b4:	f7f7 f8f0 	bl	8000598 <__aeabi_f2d>
 80093b8:	4682      	mov	sl, r0
 80093ba:	468b      	mov	fp, r1
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <cal_mollifier_table+0xb28>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7f7 f8e9 	bl	8000598 <__aeabi_f2d>
 80093c6:	4604      	mov	r4, r0
 80093c8:	460d      	mov	r5, r1
 80093ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093cc:	f7f7 f8e4 	bl	8000598 <__aeabi_f2d>
 80093d0:	a329      	add	r3, pc, #164	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f7 f937 	bl	8000648 <__aeabi_dmul>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4620      	mov	r0, r4
 80093e0:	4629      	mov	r1, r5
 80093e2:	f7f6 ff79 	bl	80002d8 <__aeabi_dsub>
 80093e6:	4602      	mov	r2, r0
 80093e8:	460b      	mov	r3, r1
 80093ea:	e9c7 2300 	strd	r2, r3, [r7]
 80093ee:	4b26      	ldr	r3, [pc, #152]	; (8009488 <cal_mollifier_table+0xb28>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7f7 f8d0 	bl	8000598 <__aeabi_f2d>
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093fe:	f7f7 f8cb 	bl	8000598 <__aeabi_f2d>
 8009402:	a31d      	add	r3, pc, #116	; (adr r3, 8009478 <cal_mollifier_table+0xb18>)
 8009404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009408:	f7f7 f91e 	bl	8000648 <__aeabi_dmul>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f6 ff60 	bl	80002d8 <__aeabi_dsub>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009420:	f7f7 f912 	bl	8000648 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4650      	mov	r0, sl
 800942a:	4659      	mov	r1, fp
 800942c:	f7f6 ff54 	bl	80002d8 <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	4640      	mov	r0, r8
 8009436:	4649      	mov	r1, r9
 8009438:	f7f7 fa30 	bl	800089c <__aeabi_ddiv>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	ec43 2b17 	vmov	d7, r2, r3
 8009444:	eeb0 0a47 	vmov.f32	s0, s14
 8009448:	eef0 0a67 	vmov.f32	s1, s15
 800944c:	f019 fe0c 	bl	8023068 <exp>
 8009450:	ec53 2b10 	vmov	r2, r3, d0
 8009454:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009458:	f7f7 f8f6 	bl	8000648 <__aeabi_dmul>
 800945c:	4602      	mov	r2, r0
 800945e:	460b      	mov	r3, r1
 8009460:	4610      	mov	r0, r2
 8009462:	4619      	mov	r1, r3
 8009464:	f7f7 fbc8 	bl	8000bf8 <__aeabi_d2f>
 8009468:	4602      	mov	r2, r0
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800946e:	e191      	b.n	8009794 <cal_mollifier_table+0xe34>
 8009470:	04189375 	.word	0x04189375
 8009474:	3ff50e56 	.word	0x3ff50e56
 8009478:	d2f1a9fc 	.word	0xd2f1a9fc
 800947c:	3f50624d 	.word	0x3f50624d
 8009480:	f9db22d1 	.word	0xf9db22d1
 8009484:	3fdc6a7e 	.word	0x3fdc6a7e
 8009488:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009492:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009496:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800949a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800949e:	edd7 7a05 	vldr	s15, [r7, #20]
 80094a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094a6:	ee17 0a90 	vmov	r0, s15
 80094aa:	f7f7 f875 	bl	8000598 <__aeabi_f2d>
 80094ae:	a3c0      	add	r3, pc, #768	; (adr r3, 80097b0 <cal_mollifier_table+0xe50>)
 80094b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b4:	f7f7 f9f2 	bl	800089c <__aeabi_ddiv>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80094c0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094c4:	eeb1 7a67 	vneg.f32	s14, s15
 80094c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094d0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094d4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094d8:	ee16 0a90 	vmov	r0, s13
 80094dc:	f7f7 f85c 	bl	8000598 <__aeabi_f2d>
 80094e0:	4604      	mov	r4, r0
 80094e2:	460d      	mov	r5, r1
 80094e4:	4bb0      	ldr	r3, [pc, #704]	; (80097a8 <cal_mollifier_table+0xe48>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7f7 f855 	bl	8000598 <__aeabi_f2d>
 80094ee:	4680      	mov	r8, r0
 80094f0:	4689      	mov	r9, r1
 80094f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094f4:	f7f7 f850 	bl	8000598 <__aeabi_f2d>
 80094f8:	a3a9      	add	r3, pc, #676	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 80094fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094fe:	f7f7 f8a3 	bl	8000648 <__aeabi_dmul>
 8009502:	4602      	mov	r2, r0
 8009504:	460b      	mov	r3, r1
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 fee5 	bl	80002d8 <__aeabi_dsub>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	4620      	mov	r0, r4
 8009514:	4629      	mov	r1, r5
 8009516:	f7f7 f897 	bl	8000648 <__aeabi_dmul>
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	e9c7 2300 	strd	r2, r3, [r7]
 8009522:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009526:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800952a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800952e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009532:	ee16 0a90 	vmov	r0, s13
 8009536:	f7f7 f82f 	bl	8000598 <__aeabi_f2d>
 800953a:	4680      	mov	r8, r0
 800953c:	4689      	mov	r9, r1
 800953e:	4b9a      	ldr	r3, [pc, #616]	; (80097a8 <cal_mollifier_table+0xe48>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4618      	mov	r0, r3
 8009544:	f7f7 f828 	bl	8000598 <__aeabi_f2d>
 8009548:	4604      	mov	r4, r0
 800954a:	460d      	mov	r5, r1
 800954c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800954e:	f7f7 f823 	bl	8000598 <__aeabi_f2d>
 8009552:	a393      	add	r3, pc, #588	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 8009554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009558:	f7f7 f876 	bl	8000648 <__aeabi_dmul>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4620      	mov	r0, r4
 8009562:	4629      	mov	r1, r5
 8009564:	f7f6 feb8 	bl	80002d8 <__aeabi_dsub>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4692      	mov	sl, r2
 800956e:	469b      	mov	fp, r3
 8009570:	4b8d      	ldr	r3, [pc, #564]	; (80097a8 <cal_mollifier_table+0xe48>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4618      	mov	r0, r3
 8009576:	f7f7 f80f 	bl	8000598 <__aeabi_f2d>
 800957a:	4604      	mov	r4, r0
 800957c:	460d      	mov	r5, r1
 800957e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009580:	f7f7 f80a 	bl	8000598 <__aeabi_f2d>
 8009584:	a386      	add	r3, pc, #536	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 8009586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958a:	f7f7 f85d 	bl	8000648 <__aeabi_dmul>
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4620      	mov	r0, r4
 8009594:	4629      	mov	r1, r5
 8009596:	f7f6 fe9f 	bl	80002d8 <__aeabi_dsub>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4650      	mov	r0, sl
 80095a0:	4659      	mov	r1, fp
 80095a2:	f7f7 f851 	bl	8000648 <__aeabi_dmul>
 80095a6:	4602      	mov	r2, r0
 80095a8:	460b      	mov	r3, r1
 80095aa:	4640      	mov	r0, r8
 80095ac:	4649      	mov	r1, r9
 80095ae:	f7f6 fe93 	bl	80002d8 <__aeabi_dsub>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095ba:	f7f7 f96f 	bl	800089c <__aeabi_ddiv>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	e9c7 2300 	strd	r2, r3, [r7]
 80095c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095ce:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095d6:	ee16 0a90 	vmov	r0, s13
 80095da:	f7f6 ffdd 	bl	8000598 <__aeabi_f2d>
 80095de:	4680      	mov	r8, r0
 80095e0:	4689      	mov	r9, r1
 80095e2:	4b71      	ldr	r3, [pc, #452]	; (80097a8 <cal_mollifier_table+0xe48>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7f6 ffd6 	bl	8000598 <__aeabi_f2d>
 80095ec:	4604      	mov	r4, r0
 80095ee:	460d      	mov	r5, r1
 80095f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095f2:	f7f6 ffd1 	bl	8000598 <__aeabi_f2d>
 80095f6:	a36a      	add	r3, pc, #424	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 80095f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fc:	f7f7 f824 	bl	8000648 <__aeabi_dmul>
 8009600:	4602      	mov	r2, r0
 8009602:	460b      	mov	r3, r1
 8009604:	4620      	mov	r0, r4
 8009606:	4629      	mov	r1, r5
 8009608:	f7f6 fe66 	bl	80002d8 <__aeabi_dsub>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4692      	mov	sl, r2
 8009612:	469b      	mov	fp, r3
 8009614:	4b64      	ldr	r3, [pc, #400]	; (80097a8 <cal_mollifier_table+0xe48>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4618      	mov	r0, r3
 800961a:	f7f6 ffbd 	bl	8000598 <__aeabi_f2d>
 800961e:	4604      	mov	r4, r0
 8009620:	460d      	mov	r5, r1
 8009622:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009624:	f7f6 ffb8 	bl	8000598 <__aeabi_f2d>
 8009628:	a35d      	add	r3, pc, #372	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 800962a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962e:	f7f7 f80b 	bl	8000648 <__aeabi_dmul>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4620      	mov	r0, r4
 8009638:	4629      	mov	r1, r5
 800963a:	f7f6 fe4d 	bl	80002d8 <__aeabi_dsub>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4650      	mov	r0, sl
 8009644:	4659      	mov	r1, fp
 8009646:	f7f6 ffff 	bl	8000648 <__aeabi_dmul>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4640      	mov	r0, r8
 8009650:	4649      	mov	r1, r9
 8009652:	f7f6 fe41 	bl	80002d8 <__aeabi_dsub>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800965e:	f7f7 f91d 	bl	800089c <__aeabi_ddiv>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800966a:	f7f6 ffed 	bl	8000648 <__aeabi_dmul>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009676:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800967a:	eeb1 7a67 	vneg.f32	s14, s15
 800967e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800968a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800968e:	ee16 0a90 	vmov	r0, s13
 8009692:	f7f6 ff81 	bl	8000598 <__aeabi_f2d>
 8009696:	4680      	mov	r8, r0
 8009698:	4689      	mov	r9, r1
 800969a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800969e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80096a2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80096a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096aa:	ee16 0a90 	vmov	r0, s13
 80096ae:	f7f6 ff73 	bl	8000598 <__aeabi_f2d>
 80096b2:	4682      	mov	sl, r0
 80096b4:	468b      	mov	fp, r1
 80096b6:	4b3c      	ldr	r3, [pc, #240]	; (80097a8 <cal_mollifier_table+0xe48>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7f6 ff6c 	bl	8000598 <__aeabi_f2d>
 80096c0:	4604      	mov	r4, r0
 80096c2:	460d      	mov	r5, r1
 80096c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096c6:	f7f6 ff67 	bl	8000598 <__aeabi_f2d>
 80096ca:	a335      	add	r3, pc, #212	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 ffba 	bl	8000648 <__aeabi_dmul>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4620      	mov	r0, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	f7f6 fdfc 	bl	80002d8 <__aeabi_dsub>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	e9c7 2300 	strd	r2, r3, [r7]
 80096e8:	4b2f      	ldr	r3, [pc, #188]	; (80097a8 <cal_mollifier_table+0xe48>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7f6 ff53 	bl	8000598 <__aeabi_f2d>
 80096f2:	4604      	mov	r4, r0
 80096f4:	460d      	mov	r5, r1
 80096f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096f8:	f7f6 ff4e 	bl	8000598 <__aeabi_f2d>
 80096fc:	a328      	add	r3, pc, #160	; (adr r3, 80097a0 <cal_mollifier_table+0xe40>)
 80096fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009702:	f7f6 ffa1 	bl	8000648 <__aeabi_dmul>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4620      	mov	r0, r4
 800970c:	4629      	mov	r1, r5
 800970e:	f7f6 fde3 	bl	80002d8 <__aeabi_dsub>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800971a:	f7f6 ff95 	bl	8000648 <__aeabi_dmul>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	4650      	mov	r0, sl
 8009724:	4659      	mov	r1, fp
 8009726:	f7f6 fdd7 	bl	80002d8 <__aeabi_dsub>
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4640      	mov	r0, r8
 8009730:	4649      	mov	r1, r9
 8009732:	f7f7 f8b3 	bl	800089c <__aeabi_ddiv>
 8009736:	4602      	mov	r2, r0
 8009738:	460b      	mov	r3, r1
 800973a:	ec43 2b17 	vmov	d7, r2, r3
 800973e:	eeb0 0a47 	vmov.f32	s0, s14
 8009742:	eef0 0a67 	vmov.f32	s1, s15
 8009746:	f019 fc8f 	bl	8023068 <exp>
 800974a:	ec53 2b10 	vmov	r2, r3, d0
 800974e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009752:	f7f6 ff79 	bl	8000648 <__aeabi_dmul>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	4610      	mov	r0, r2
 800975c:	4619      	mov	r1, r3
 800975e:	f7f7 fa4b 	bl	8000bf8 <__aeabi_d2f>
 8009762:	4602      	mov	r2, r0
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009768:	e014      	b.n	8009794 <cal_mollifier_table+0xe34>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	ed93 7a00 	vldr	s14, [r3]
 800977e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <cal_mollifier_table+0xe4c>)
 800978e:	2204      	movs	r2, #4
 8009790:	701a      	strb	r2, [r3, #0]
		}

}
 8009792:	bf00      	nop
 8009794:	bf00      	nop
 8009796:	3730      	adds	r7, #48	; 0x30
 8009798:	46bd      	mov	sp, r7
 800979a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800979e:	bf00      	nop
 80097a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80097a4:	3f50624d 	.word	0x3f50624d
 80097a8:	20000800 	.word	0x20000800
 80097ac:	20000804 	.word	0x20000804
 80097b0:	f9db22d1 	.word	0xf9db22d1
 80097b4:	3fdc6a7e 	.word	0x3fdc6a7e

080097b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80097be:	4b12      	ldr	r3, [pc, #72]	; (8009808 <MX_DMA_Init+0x50>)
 80097c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097c2:	4a11      	ldr	r2, [pc, #68]	; (8009808 <MX_DMA_Init+0x50>)
 80097c4:	f043 0304 	orr.w	r3, r3, #4
 80097c8:	6493      	str	r3, [r2, #72]	; 0x48
 80097ca:	4b0f      	ldr	r3, [pc, #60]	; (8009808 <MX_DMA_Init+0x50>)
 80097cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ce:	f003 0304 	and.w	r3, r3, #4
 80097d2:	607b      	str	r3, [r7, #4]
 80097d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <MX_DMA_Init+0x50>)
 80097d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097da:	4a0b      	ldr	r2, [pc, #44]	; (8009808 <MX_DMA_Init+0x50>)
 80097dc:	f043 0301 	orr.w	r3, r3, #1
 80097e0:	6493      	str	r3, [r2, #72]	; 0x48
 80097e2:	4b09      	ldr	r3, [pc, #36]	; (8009808 <MX_DMA_Init+0x50>)
 80097e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80097ee:	2200      	movs	r2, #0
 80097f0:	2100      	movs	r1, #0
 80097f2:	200b      	movs	r0, #11
 80097f4:	f011 fdab 	bl	801b34e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80097f8:	200b      	movs	r0, #11
 80097fa:	f011 fdc2 	bl	801b382 <HAL_NVIC_EnableIRQ>

}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	40021000 	.word	0x40021000

0800980c <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
	error_mode=0;
 8009810:	4b11      	ldr	r3, [pc, #68]	; (8009858 <init_FailSafe+0x4c>)
 8009812:	2200      	movs	r2, #0
 8009814:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 8009816:	4b11      	ldr	r3, [pc, #68]	; (800985c <init_FailSafe+0x50>)
 8009818:	2200      	movs	r2, #0
 800981a:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800981c:	4b10      	ldr	r3, [pc, #64]	; (8009860 <init_FailSafe+0x54>)
 800981e:	2200      	movs	r2, #0
 8009820:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 8009822:	4b10      	ldr	r3, [pc, #64]	; (8009864 <init_FailSafe+0x58>)
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <init_FailSafe+0x5c>)
 800982a:	4a10      	ldr	r2, [pc, #64]	; (800986c <init_FailSafe+0x60>)
 800982c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800982e:	4b10      	ldr	r3, [pc, #64]	; (8009870 <init_FailSafe+0x64>)
 8009830:	4a10      	ldr	r2, [pc, #64]	; (8009874 <init_FailSafe+0x68>)
 8009832:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 8009834:	4b10      	ldr	r3, [pc, #64]	; (8009878 <init_FailSafe+0x6c>)
 8009836:	4a0d      	ldr	r2, [pc, #52]	; (800986c <init_FailSafe+0x60>)
 8009838:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800983a:	4b10      	ldr	r3, [pc, #64]	; (800987c <init_FailSafe+0x70>)
 800983c:	4a10      	ldr	r2, [pc, #64]	; (8009880 <init_FailSafe+0x74>)
 800983e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009840:	4b10      	ldr	r3, [pc, #64]	; (8009884 <init_FailSafe+0x78>)
 8009842:	4a11      	ldr	r2, [pc, #68]	; (8009888 <init_FailSafe+0x7c>)
 8009844:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 8009846:	4b11      	ldr	r3, [pc, #68]	; (800988c <init_FailSafe+0x80>)
 8009848:	4a0f      	ldr	r2, [pc, #60]	; (8009888 <init_FailSafe+0x7c>)
 800984a:	601a      	str	r2, [r3, #0]
}
 800984c:	bf00      	nop
 800984e:	46bd      	mov	sp, r7
 8009850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000807 	.word	0x20000807
 800985c:	20000806 	.word	0x20000806
 8009860:	20000808 	.word	0x20000808
 8009864:	20000824 	.word	0x20000824
 8009868:	2000080c 	.word	0x2000080c
 800986c:	44bb8000 	.word	0x44bb8000
 8009870:	20000810 	.word	0x20000810
 8009874:	44480000 	.word	0x44480000
 8009878:	20000814 	.word	0x20000814
 800987c:	20000818 	.word	0x20000818
 8009880:	455ac000 	.word	0x455ac000
 8009884:	2000081c 	.word	0x2000081c
 8009888:	44ed8000 	.word	0x44ed8000
 800988c:	20000820 	.word	0x20000820

08009890 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8009896:	4b6e      	ldr	r3, [pc, #440]	; (8009a50 <interrupt_FailSafe+0x1c0>)
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d109      	bne.n	80098b2 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800989e:	4b6d      	ldr	r3, [pc, #436]	; (8009a54 <interrupt_FailSafe+0x1c4>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 80098a4:	4b6c      	ldr	r3, [pc, #432]	; (8009a58 <interrupt_FailSafe+0x1c8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 80098aa:	4b6c      	ldr	r3, [pc, #432]	; (8009a5c <interrupt_FailSafe+0x1cc>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	607b      	str	r3, [r7, #4]
 80098b0:	e008      	b.n	80098c4 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 80098b2:	4b6b      	ldr	r3, [pc, #428]	; (8009a60 <interrupt_FailSafe+0x1d0>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 80098b8:	4b6a      	ldr	r3, [pc, #424]	; (8009a64 <interrupt_FailSafe+0x1d4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 80098be:	4b6a      	ldr	r3, [pc, #424]	; (8009a68 <interrupt_FailSafe+0x1d8>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 80098c4:	4b69      	ldr	r3, [pc, #420]	; (8009a6c <interrupt_FailSafe+0x1dc>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d062      	beq.n	8009992 <interrupt_FailSafe+0x102>
 80098cc:	4b67      	ldr	r3, [pc, #412]	; (8009a6c <interrupt_FailSafe+0x1dc>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d05e      	beq.n	8009992 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 80098d4:	4b66      	ldr	r3, [pc, #408]	; (8009a70 <interrupt_FailSafe+0x1e0>)
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d15a      	bne.n	8009992 <interrupt_FailSafe+0x102>
 80098dc:	4b65      	ldr	r3, [pc, #404]	; (8009a74 <interrupt_FailSafe+0x1e4>)
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d156      	bne.n	8009992 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 80098e4:	4b64      	ldr	r3, [pc, #400]	; (8009a78 <interrupt_FailSafe+0x1e8>)
 80098e6:	ed93 7a00 	vldr	s14, [r3]
 80098ea:	4b64      	ldr	r3, [pc, #400]	; (8009a7c <interrupt_FailSafe+0x1ec>)
 80098ec:	edd3 7a00 	vldr	s15, [r3]
 80098f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098f4:	eef0 7ae7 	vabs.f32	s15, s15
 80098f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80098fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009904:	d809      	bhi.n	800991a <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009906:	f7fe f87b 	bl	8007a00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800990a:	2001      	movs	r0, #1
 800990c:	f7fd fa90 	bl	8006e30 <pl_yellow_LED_count>
						error_mode = 1;
 8009910:	4b58      	ldr	r3, [pc, #352]	; (8009a74 <interrupt_FailSafe+0x1e4>)
 8009912:	2201      	movs	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009916:	f7fa fe4b 	bl	80045b0 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800991a:	4b59      	ldr	r3, [pc, #356]	; (8009a80 <interrupt_FailSafe+0x1f0>)
 800991c:	edd3 7a00 	vldr	s15, [r3]
 8009920:	ed97 7a01 	vldr	s14, [r7, #4]
 8009924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800992c:	d809      	bhi.n	8009942 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800992e:	f7fe f867 	bl	8007a00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8009932:	2002      	movs	r0, #2
 8009934:	f7fd fa7c 	bl	8006e30 <pl_yellow_LED_count>
						error_mode = 1;
 8009938:	4b4e      	ldr	r3, [pc, #312]	; (8009a74 <interrupt_FailSafe+0x1e4>)
 800993a:	2201      	movs	r2, #1
 800993c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800993e:	f7fa fe37 	bl	80045b0 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8009942:	4b50      	ldr	r3, [pc, #320]	; (8009a84 <interrupt_FailSafe+0x1f4>)
 8009944:	ed93 7a00 	vldr	s14, [r3]
 8009948:	4b4f      	ldr	r3, [pc, #316]	; (8009a88 <interrupt_FailSafe+0x1f8>)
 800994a:	edd3 6a00 	vldr	s13, [r3]
 800994e:	4b4f      	ldr	r3, [pc, #316]	; (8009a8c <interrupt_FailSafe+0x1fc>)
 8009950:	edd3 7a00 	vldr	s15, [r3]
 8009954:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009958:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800995c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009964:	eef0 7ae7 	vabs.f32	s15, s15
 8009968:	ed97 7a03 	vldr	s14, [r7, #12]
 800996c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009974:	d80d      	bhi.n	8009992 <interrupt_FailSafe+0x102>
 8009976:	4b3d      	ldr	r3, [pc, #244]	; (8009a6c <interrupt_FailSafe+0x1dc>)
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d109      	bne.n	8009992 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800997e:	f7fe f83f 	bl	8007a00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009982:	2004      	movs	r0, #4
 8009984:	f7fd fa54 	bl	8006e30 <pl_yellow_LED_count>
						error_mode = 1;
 8009988:	4b3a      	ldr	r3, [pc, #232]	; (8009a74 <interrupt_FailSafe+0x1e4>)
 800998a:	2201      	movs	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800998e:	f7fa fe0f 	bl	80045b0 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009992:	4b38      	ldr	r3, [pc, #224]	; (8009a74 <interrupt_FailSafe+0x1e4>)
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d153      	bne.n	8009a42 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800999a:	4b3d      	ldr	r3, [pc, #244]	; (8009a90 <interrupt_FailSafe+0x200>)
 800999c:	2200      	movs	r2, #0
 800999e:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 80099a0:	4b3c      	ldr	r3, [pc, #240]	; (8009a94 <interrupt_FailSafe+0x204>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	4a3b      	ldr	r2, [pc, #236]	; (8009a94 <interrupt_FailSafe+0x204>)
 80099a8:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 80099aa:	4b3a      	ldr	r3, [pc, #232]	; (8009a94 <interrupt_FailSafe+0x204>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099b2:	dc05      	bgt.n	80099c0 <interrupt_FailSafe+0x130>
			init_WallControl();
 80099b4:	f7fa ff56 	bl	8004864 <init_WallControl>
			modeacc=100;//エラー用
 80099b8:	4b2c      	ldr	r3, [pc, #176]	; (8009a6c <interrupt_FailSafe+0x1dc>)
 80099ba:	2264      	movs	r2, #100	; 0x64
 80099bc:	701a      	strb	r2, [r3, #0]
 80099be:	e009      	b.n	80099d4 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 80099c0:	2000      	movs	r0, #0
 80099c2:	f7fd ff89 	bl	80078d8 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 80099c6:	f7fd ffed 	bl	80079a4 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 80099ca:	f7fe f819 	bl	8007a00 <pl_FunMotor_stop>
			modeacc=0;
 80099ce:	4b27      	ldr	r3, [pc, #156]	; (8009a6c <interrupt_FailSafe+0x1dc>)
 80099d0:	2200      	movs	r2, #0
 80099d2:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 80099d4:	4b30      	ldr	r3, [pc, #192]	; (8009a98 <interrupt_FailSafe+0x208>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 80099dc:	4b2f      	ldr	r3, [pc, #188]	; (8009a9c <interrupt_FailSafe+0x20c>)
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 80099e4:	4b2e      	ldr	r3, [pc, #184]	; (8009aa0 <interrupt_FailSafe+0x210>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 80099ec:	4b2d      	ldr	r3, [pc, #180]	; (8009aa4 <interrupt_FailSafe+0x214>)
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 80099f4:	4b2c      	ldr	r3, [pc, #176]	; (8009aa8 <interrupt_FailSafe+0x218>)
 80099f6:	f04f 32ff 	mov.w	r2, #4294967295
 80099fa:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 80099fc:	4b2b      	ldr	r3, [pc, #172]	; (8009aac <interrupt_FailSafe+0x21c>)
 80099fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009a02:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 8009a04:	4b2a      	ldr	r3, [pc, #168]	; (8009ab0 <interrupt_FailSafe+0x220>)
 8009a06:	4a2b      	ldr	r2, [pc, #172]	; (8009ab4 <interrupt_FailSafe+0x224>)
 8009a08:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009a0a:	4b2b      	ldr	r3, [pc, #172]	; (8009ab8 <interrupt_FailSafe+0x228>)
 8009a0c:	4a29      	ldr	r2, [pc, #164]	; (8009ab4 <interrupt_FailSafe+0x224>)
 8009a0e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009a10:	4b2a      	ldr	r3, [pc, #168]	; (8009abc <interrupt_FailSafe+0x22c>)
 8009a12:	4a2b      	ldr	r2, [pc, #172]	; (8009ac0 <interrupt_FailSafe+0x230>)
 8009a14:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009a16:	4b2b      	ldr	r3, [pc, #172]	; (8009ac4 <interrupt_FailSafe+0x234>)
 8009a18:	4a29      	ldr	r2, [pc, #164]	; (8009ac0 <interrupt_FailSafe+0x230>)
 8009a1a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009a1c:	4b2a      	ldr	r3, [pc, #168]	; (8009ac8 <interrupt_FailSafe+0x238>)
 8009a1e:	4a2b      	ldr	r2, [pc, #172]	; (8009acc <interrupt_FailSafe+0x23c>)
 8009a20:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009a22:	4b2b      	ldr	r3, [pc, #172]	; (8009ad0 <interrupt_FailSafe+0x240>)
 8009a24:	4a29      	ldr	r2, [pc, #164]	; (8009acc <interrupt_FailSafe+0x23c>)
 8009a26:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009a28:	4b2a      	ldr	r3, [pc, #168]	; (8009ad4 <interrupt_FailSafe+0x244>)
 8009a2a:	4a28      	ldr	r2, [pc, #160]	; (8009acc <interrupt_FailSafe+0x23c>)
 8009a2c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009a2e:	4b2a      	ldr	r3, [pc, #168]	; (8009ad8 <interrupt_FailSafe+0x248>)
 8009a30:	4a26      	ldr	r2, [pc, #152]	; (8009acc <interrupt_FailSafe+0x23c>)
 8009a32:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009a34:	4b29      	ldr	r3, [pc, #164]	; (8009adc <interrupt_FailSafe+0x24c>)
 8009a36:	2204      	movs	r2, #4
 8009a38:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009a3a:	4b29      	ldr	r3, [pc, #164]	; (8009ae0 <interrupt_FailSafe+0x250>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009a40:	e002      	b.n	8009a48 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009a42:	4b14      	ldr	r3, [pc, #80]	; (8009a94 <interrupt_FailSafe+0x204>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	20000808 	.word	0x20000808
 8009a54:	2000080c 	.word	0x2000080c
 8009a58:	20000810 	.word	0x20000810
 8009a5c:	20000814 	.word	0x20000814
 8009a60:	20000818 	.word	0x20000818
 8009a64:	2000081c 	.word	0x2000081c
 8009a68:	20000820 	.word	0x20000820
 8009a6c:	20000528 	.word	0x20000528
 8009a70:	20000806 	.word	0x20000806
 8009a74:	20000807 	.word	0x20000807
 8009a78:	200004e4 	.word	0x200004e4
 8009a7c:	20000268 	.word	0x20000268
 8009a80:	20000274 	.word	0x20000274
 8009a84:	200004d8 	.word	0x200004d8
 8009a88:	2000025c 	.word	0x2000025c
 8009a8c:	20000258 	.word	0x20000258
 8009a90:	2000edc0 	.word	0x2000edc0
 8009a94:	20000824 	.word	0x20000824
 8009a98:	200005b8 	.word	0x200005b8
 8009a9c:	200005b4 	.word	0x200005b4
 8009aa0:	200005c0 	.word	0x200005c0
 8009aa4:	200005bc 	.word	0x200005bc
 8009aa8:	200005c8 	.word	0x200005c8
 8009aac:	200005c4 	.word	0x200005c4
 8009ab0:	200005d0 	.word	0x200005d0
 8009ab4:	42480000 	.word	0x42480000
 8009ab8:	200005cc 	.word	0x200005cc
 8009abc:	200005d8 	.word	0x200005d8
 8009ac0:	41a00000 	.word	0x41a00000
 8009ac4:	200005d4 	.word	0x200005d4
 8009ac8:	200005e0 	.word	0x200005e0
 8009acc:	420c0000 	.word	0x420c0000
 8009ad0:	200005dc 	.word	0x200005dc
 8009ad4:	200005e8 	.word	0x200005e8
 8009ad8:	200005e4 	.word	0x200005e4
 8009adc:	20000804 	.word	0x20000804
 8009ae0:	20000592 	.word	0x20000592

08009ae4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	; 0x28
 8009ae8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aea:	f107 0314 	add.w	r3, r7, #20
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	605a      	str	r2, [r3, #4]
 8009af4:	609a      	str	r2, [r3, #8]
 8009af6:	60da      	str	r2, [r3, #12]
 8009af8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009afa:	4b3a      	ldr	r3, [pc, #232]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	4a39      	ldr	r2, [pc, #228]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b00:	f043 0304 	orr.w	r3, r3, #4
 8009b04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b06:	4b37      	ldr	r3, [pc, #220]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009b12:	4b34      	ldr	r3, [pc, #208]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b16:	4a33      	ldr	r2, [pc, #204]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b18:	f043 0320 	orr.w	r3, r3, #32
 8009b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b1e:	4b31      	ldr	r3, [pc, #196]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b22:	f003 0320 	and.w	r3, r3, #32
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b2a:	4b2e      	ldr	r3, [pc, #184]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2e:	4a2d      	ldr	r2, [pc, #180]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b30:	f043 0301 	orr.w	r3, r3, #1
 8009b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b36:	4b2b      	ldr	r3, [pc, #172]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3a:	f003 0301 	and.w	r3, r3, #1
 8009b3e:	60bb      	str	r3, [r7, #8]
 8009b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b42:	4b28      	ldr	r3, [pc, #160]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b46:	4a27      	ldr	r2, [pc, #156]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b48:	f043 0302 	orr.w	r3, r3, #2
 8009b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b4e:	4b25      	ldr	r3, [pc, #148]	; (8009be4 <MX_GPIO_Init+0x100>)
 8009b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b52:	f003 0302 	and.w	r3, r3, #2
 8009b56:	607b      	str	r3, [r7, #4]
 8009b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009b60:	4821      	ldr	r0, [pc, #132]	; (8009be8 <MX_GPIO_Init+0x104>)
 8009b62:	f012 fadf 	bl	801c124 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009b66:	2200      	movs	r2, #0
 8009b68:	f648 1110 	movw	r1, #35088	; 0x8910
 8009b6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b70:	f012 fad8 	bl	801c124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b74:	2200      	movs	r2, #0
 8009b76:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009b7a:	481c      	ldr	r0, [pc, #112]	; (8009bec <MX_GPIO_Init+0x108>)
 8009b7c:	f012 fad2 	bl	801c124 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b80:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009b84:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b86:	2301      	movs	r3, #1
 8009b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b92:	f107 0314 	add.w	r3, r7, #20
 8009b96:	4619      	mov	r1, r3
 8009b98:	4813      	ldr	r0, [pc, #76]	; (8009be8 <MX_GPIO_Init+0x104>)
 8009b9a:	f012 f941 	bl	801be20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b9e:	f648 1310 	movw	r3, #35088	; 0x8910
 8009ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bac:	2300      	movs	r3, #0
 8009bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bb0:	f107 0314 	add.w	r3, r7, #20
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009bba:	f012 f931 	bl	801be20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009bbe:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009bc2:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bd0:	f107 0314 	add.w	r3, r7, #20
 8009bd4:	4619      	mov	r1, r3
 8009bd6:	4805      	ldr	r0, [pc, #20]	; (8009bec <MX_GPIO_Init+0x108>)
 8009bd8:	f012 f922 	bl	801be20 <HAL_GPIO_Init>

}
 8009bdc:	bf00      	nop
 8009bde:	3728      	adds	r7, #40	; 0x28
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	40021000 	.word	0x40021000
 8009be8:	48000800 	.word	0x48000800
 8009bec:	48000400 	.word	0x48000400

08009bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009bf0:	b590      	push	{r4, r7, lr}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009bf6:	f00f f861 	bl	8018cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009bfa:	f000 f8a7 	bl	8009d4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009bfe:	f7ff fddb 	bl	80097b8 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009c02:	f7ff ff6f 	bl	8009ae4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009c06:	f7fe f9d5 	bl	8007fb4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8009c0a:	f00d fb67 	bl	80172dc <MX_SPI1_Init>
  MX_TIM6_Init();
 8009c0e:	f00d fdd3 	bl	80177b8 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009c12:	f00d fe07 	bl	8017824 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009c16:	f00e ff83 	bl	8018b20 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009c1a:	f00d fb9d 	bl	8017358 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009c1e:	f00d fea1 	bl	8017964 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009c22:	f7fe f8d9 	bl	8007dd8 <pl_timer_init>
  pl_gyro_init();
 8009c26:	f7fd fd6b 	bl	8007700 <pl_gyro_init>
  pl_sensor_init();
 8009c2a:	f7fd ff19 	bl	8007a60 <pl_sensor_init>
  reset_distance();
 8009c2e:	f7f7 f9b5 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009c32:	f7f7 fd99 	bl	8001768 <reset_gyro>
  reset_speed();
 8009c36:	f7f7 f9ef 	bl	8001018 <reset_speed>
  record_reset();
 8009c3a:	f00d f8dd 	bl	8016df8 <record_reset>
  pl_motor_init();
 8009c3e:	f7fd fe25 	bl	800788c <pl_motor_init>
  PID_Init();
 8009c42:	f7fa fc79 	bl	8004538 <PID_Init>
  init_WallControl();
 8009c46:	f7fa fe0d 	bl	8004864 <init_WallControl>
  Control_mode_Init();
 8009c4a:	f7f8 f8d7 	bl	8001dfc <Control_mode_Init>
  init_FailSafe();
 8009c4e:	f7ff fddd 	bl	800980c <init_FailSafe>
  input_parameter();
 8009c52:	f00e f867 	bl	8017d24 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c5a:	4b37      	ldr	r3, [pc, #220]	; (8009d38 <main+0x148>)
 8009c5c:	881b      	ldrh	r3, [r3, #0]
 8009c5e:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c60:	4b35      	ldr	r3, [pc, #212]	; (8009d38 <main+0x148>)
 8009c62:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c64:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c66:	4b34      	ldr	r3, [pc, #208]	; (8009d38 <main+0x148>)
 8009c68:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c6a:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c6c:	4b32      	ldr	r3, [pc, #200]	; (8009d38 <main+0x148>)
 8009c6e:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c70:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c72:	4b31      	ldr	r3, [pc, #196]	; (8009d38 <main+0x148>)
 8009c74:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c76:	9301      	str	r3, [sp, #4]
 8009c78:	9200      	str	r2, [sp, #0]
 8009c7a:	4623      	mov	r3, r4
 8009c7c:	4602      	mov	r2, r0
 8009c7e:	482f      	ldr	r0, [pc, #188]	; (8009d3c <main+0x14c>)
 8009c80:	f016 ffe6 	bl	8020c50 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c84:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <main+0x150>)
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c8a:	4b2d      	ldr	r3, [pc, #180]	; (8009d40 <main+0x150>)
 8009c8c:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c8e:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c90:	4b2b      	ldr	r3, [pc, #172]	; (8009d40 <main+0x150>)
 8009c92:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c94:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c96:	4b2a      	ldr	r3, [pc, #168]	; (8009d40 <main+0x150>)
 8009c98:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c9a:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c9c:	4b28      	ldr	r3, [pc, #160]	; (8009d40 <main+0x150>)
 8009c9e:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009ca0:	9301      	str	r3, [sp, #4]
 8009ca2:	9200      	str	r2, [sp, #0]
 8009ca4:	4623      	mov	r3, r4
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	4826      	ldr	r0, [pc, #152]	; (8009d44 <main+0x154>)
 8009caa:	f016 ffd1 	bl	8020c50 <iprintf>
	battcheak();
 8009cae:	f7f7 ff67 	bl	8001b80 <battcheak>

//起動cheak
	int yellow_count=1;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	607b      	str	r3, [r7, #4]
 8009cba:	e00d      	b.n	8009cd8 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fd f8b5 	bl	8006e30 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009cc6:	2032      	movs	r0, #50	; 0x32
 8009cc8:	f00f f870 	bl	8018dac <HAL_Delay>
		yellow_count=yellow_count*2;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b07      	cmp	r3, #7
 8009cdc:	ddee      	ble.n	8009cbc <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009cde:	2300      	movs	r3, #0
 8009ce0:	603b      	str	r3, [r7, #0]
 8009ce2:	e00f      	b.n	8009d04 <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f7fd f8a1 	bl	8006e30 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009cee:	2032      	movs	r0, #50	; 0x32
 8009cf0:	f00f f85c 	bl	8018dac <HAL_Delay>
			yellow_count=yellow_count/2;
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	0fda      	lsrs	r2, r3, #31
 8009cf8:	4413      	add	r3, r2
 8009cfa:	105b      	asrs	r3, r3, #1
 8009cfc:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	3301      	adds	r3, #1
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b08      	cmp	r3, #8
 8009d08:	ddec      	ble.n	8009ce4 <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f00b faba 	bl	8015288 <mode_decision>
 8009d14:	4603      	mov	r3, r0
 8009d16:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009d18:	f7f7 f940 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009d1c:	f7f7 fd24 	bl	8001768 <reset_gyro>
	  		reset_speed();
 8009d20:	f7f7 f97a 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f00b fba7 	bl	801547c <mode_execution>

	  		error_mode = 0;
 8009d2e:	4b06      	ldr	r3, [pc, #24]	; (8009d48 <main+0x158>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009d34:	e7e9      	b.n	8009d0a <main+0x11a>
 8009d36:	bf00      	nop
 8009d38:	2000070c 	.word	0x2000070c
 8009d3c:	08023510 	.word	0x08023510
 8009d40:	20000718 	.word	0x20000718
 8009d44:	0802353c 	.word	0x0802353c
 8009d48:	20000807 	.word	0x20000807

08009d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b094      	sub	sp, #80	; 0x50
 8009d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d52:	f107 0318 	add.w	r3, r7, #24
 8009d56:	2238      	movs	r2, #56	; 0x38
 8009d58:	2100      	movs	r1, #0
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f016 fb06 	bl	802036c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d60:	1d3b      	adds	r3, r7, #4
 8009d62:	2200      	movs	r2, #0
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	605a      	str	r2, [r3, #4]
 8009d68:	609a      	str	r2, [r3, #8]
 8009d6a:	60da      	str	r2, [r3, #12]
 8009d6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009d6e:	2000      	movs	r0, #0
 8009d70:	f012 f9f0 	bl	801c154 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d7c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d82:	2303      	movs	r3, #3
 8009d84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009d86:	2304      	movs	r3, #4
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009d8a:	2355      	movs	r3, #85	; 0x55
 8009d8c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d8e:	2302      	movs	r3, #2
 8009d90:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009d92:	2302      	movs	r3, #2
 8009d94:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009d96:	2302      	movs	r3, #2
 8009d98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d9a:	f107 0318 	add.w	r3, r7, #24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f012 fa8c 	bl	801c2bc <HAL_RCC_OscConfig>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009daa:	f000 f81a 	bl	8009de2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009dae:	230f      	movs	r3, #15
 8009db0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009db2:	2303      	movs	r3, #3
 8009db4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009db6:	2300      	movs	r3, #0
 8009db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009dba:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009dbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009dc6:	1d3b      	adds	r3, r7, #4
 8009dc8:	2104      	movs	r1, #4
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f012 fd8e 	bl	801c8ec <HAL_RCC_ClockConfig>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d001      	beq.n	8009dda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009dd6:	f000 f804 	bl	8009de2 <Error_Handler>
  }
}
 8009dda:	bf00      	nop
 8009ddc:	3750      	adds	r7, #80	; 0x50
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009de2:	b480      	push	{r7}
 8009de4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009de6:	b672      	cpsid	i
}
 8009de8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009dea:	e7fe      	b.n	8009dea <Error_Handler+0x8>

08009dec <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	ed87 0a03 	vstr	s0, [r7, #12]
 8009df6:	edc7 0a02 	vstr	s1, [r7, #8]
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	71bb      	strb	r3, [r7, #6]
 8009e02:	4613      	mov	r3, r2
 8009e04:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00a      	beq.n	8009e22 <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009e0c:	f7fa f8f0 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e10:	2003      	movs	r0, #3
 8009e12:	f7fd fd93 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e16:	2003      	movs	r0, #3
 8009e18:	f7fd fd68 	bl	80078ec <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e1c:	2032      	movs	r0, #50	; 0x32
 8009e1e:	f7fe f88b 	bl	8007f38 <wait_ms_NoReset>
	}
	if(left_wall){
 8009e22:	79bb      	ldrb	r3, [r7, #6]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d02c      	beq.n	8009e82 <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e28:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e2c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e30:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8009f74 <backTurn_controlWall+0x188>
 8009e34:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8009f74 <backTurn_controlWall+0x188>
 8009e38:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009f78 <backTurn_controlWall+0x18c>
 8009e3c:	f7f9 fddc 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e40:	2003      	movs	r0, #3
 8009e42:	f7fd fd7b 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e46:	2003      	movs	r0, #3
 8009e48:	f7fd fd50 	bl	80078ec <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009e4c:	2032      	movs	r0, #50	; 0x32
 8009e4e:	f7fe f873 	bl	8007f38 <wait_ms_NoReset>
		no_frontwall_straight();
 8009e52:	f7fa f8cd 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e56:	2003      	movs	r0, #3
 8009e58:	f7fd fd70 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e5c:	2003      	movs	r0, #3
 8009e5e:	f7fd fd45 	bl	80078ec <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e62:	2032      	movs	r0, #50	; 0x32
 8009e64:	f7fe f868 	bl	8007f38 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e68:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e6c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e70:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009f74 <backTurn_controlWall+0x188>
 8009e74:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009f74 <backTurn_controlWall+0x188>
 8009e78:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009f78 <backTurn_controlWall+0x18c>
 8009e7c:	f7f9 fdbc 	bl	80039f8 <turning_table2>
 8009e80:	e06a      	b.n	8009f58 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009e82:	79bb      	ldrb	r3, [r7, #6]
 8009e84:	f083 0301 	eor.w	r3, r3, #1
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d037      	beq.n	8009efe <backTurn_controlWall+0x112>
 8009e8e:	797b      	ldrb	r3, [r7, #5]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d034      	beq.n	8009efe <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009e94:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e98:	eef1 7a67 	vneg.f32	s15, s15
 8009e9c:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ea0:	eef0 1a67 	vmov.f32	s3, s15
 8009ea4:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8009f74 <backTurn_controlWall+0x188>
 8009ea8:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009f74 <backTurn_controlWall+0x188>
 8009eac:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009f7c <backTurn_controlWall+0x190>
 8009eb0:	f7f9 fda2 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009eb4:	2003      	movs	r0, #3
 8009eb6:	f7fd fd41 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009eba:	2003      	movs	r0, #3
 8009ebc:	f7fd fd16 	bl	80078ec <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009ec0:	2032      	movs	r0, #50	; 0x32
 8009ec2:	f7fe f839 	bl	8007f38 <wait_ms_NoReset>
		no_frontwall_straight();
 8009ec6:	f7fa f893 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009eca:	2003      	movs	r0, #3
 8009ecc:	f7fd fd36 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ed0:	2003      	movs	r0, #3
 8009ed2:	f7fd fd0b 	bl	80078ec <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009ed6:	2032      	movs	r0, #50	; 0x32
 8009ed8:	f7fe f82e 	bl	8007f38 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009edc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ee0:	eef1 7a67 	vneg.f32	s15, s15
 8009ee4:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ee8:	eef0 1a67 	vmov.f32	s3, s15
 8009eec:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009f74 <backTurn_controlWall+0x188>
 8009ef0:	eddf 0a20 	vldr	s1, [pc, #128]	; 8009f74 <backTurn_controlWall+0x188>
 8009ef4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009f7c <backTurn_controlWall+0x190>
 8009ef8:	f7f9 fd7e 	bl	80039f8 <turning_table2>
 8009efc:	e02c      	b.n	8009f58 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009efe:	79bb      	ldrb	r3, [r7, #6]
 8009f00:	f083 0301 	eor.w	r3, r3, #1
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d026      	beq.n	8009f58 <backTurn_controlWall+0x16c>
 8009f0a:	797b      	ldrb	r3, [r7, #5]
 8009f0c:	f083 0301 	eor.w	r3, r3, #1
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d020      	beq.n	8009f58 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f16:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f1a:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f1e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8009f74 <backTurn_controlWall+0x188>
 8009f22:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009f74 <backTurn_controlWall+0x188>
 8009f26:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009f78 <backTurn_controlWall+0x18c>
 8009f2a:	f7f9 fd65 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f2e:	2003      	movs	r0, #3
 8009f30:	f7fd fd04 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f34:	2003      	movs	r0, #3
 8009f36:	f7fd fcd9 	bl	80078ec <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f3a:	2032      	movs	r0, #50	; 0x32
 8009f3c:	f7fd fffc 	bl	8007f38 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f40:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f44:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f48:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8009f74 <backTurn_controlWall+0x188>
 8009f4c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8009f74 <backTurn_controlWall+0x188>
 8009f50:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009f78 <backTurn_controlWall+0x18c>
 8009f54:	f7f9 fd50 	bl	80039f8 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f58:	2003      	movs	r0, #3
 8009f5a:	f7fd fcef 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f5e:	2003      	movs	r0, #3
 8009f60:	f7fd fcc4 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 8009f64:	2032      	movs	r0, #50	; 0x32
 8009f66:	f7fd ffe7 	bl	8007f38 <wait_ms_NoReset>

}
 8009f6a:	bf00      	nop
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	00000000 	.word	0x00000000
 8009f78:	42b40000 	.word	0x42b40000
 8009f7c:	c2b40000 	.word	0xc2b40000

08009f80 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009f80:	b084      	sub	sp, #16
 8009f82:	b5b0      	push	{r4, r5, r7, lr}
 8009f84:	ed2d 8b02 	vpush	{d8}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009f90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009f94:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009f98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	f040 80f5 	bne.w	800a18c <slalomR+0x20c>
		highspeed_mode = 0;
 8009fa2:	4be3      	ldr	r3, [pc, #908]	; (800a330 <slalomR+0x3b0>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009fb8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d11f      	bne.n	800a000 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fc0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009fc4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fc8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fcc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fd4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009fd8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fdc:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800a334 <slalomR+0x3b4>
 8009fe0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	eeb0 2a47 	vmov.f32	s4, s14
 8009fea:	eef0 1a46 	vmov.f32	s3, s12
 8009fee:	eeb0 1a66 	vmov.f32	s2, s13
 8009ff2:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800a338 <slalomR+0x3b8>
 8009ff6:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800a33c <slalomR+0x3bc>
 8009ffa:	f7f8 ffef 	bl	8002fdc <straight_table2>
 8009ffe:	e01e      	b.n	800a03e <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a000:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a004:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a008:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a00c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a010:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a014:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a018:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a01c:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800a334 <slalomR+0x3b4>
 800a020:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	eeb0 2a47 	vmov.f32	s4, s14
 800a02a:	eef0 1a46 	vmov.f32	s3, s12
 800a02e:	eeb0 1a66 	vmov.f32	s2, s13
 800a032:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800a338 <slalomR+0x3b8>
 800a036:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a340 <slalomR+0x3c0>
 800a03a:	f7f8 ffcf 	bl	8002fdc <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a03e:	2301      	movs	r3, #1
 800a040:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a042:	2300      	movs	r3, #0
 800a044:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a046:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d127      	bne.n	800a09e <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a04e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a052:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a056:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a05a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a05e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a062:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a066:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a06a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a06e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a072:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a076:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a07a:	eddf 4aae 	vldr	s9, [pc, #696]	; 800a334 <slalomR+0x3b4>
 800a07e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a082:	68f8      	ldr	r0, [r7, #12]
 800a084:	eeb0 2a47 	vmov.f32	s4, s14
 800a088:	eef0 1a45 	vmov.f32	s3, s10
 800a08c:	eeb0 1a65 	vmov.f32	s2, s11
 800a090:	eef0 0a46 	vmov.f32	s1, s12
 800a094:	eeb0 0a66 	vmov.f32	s0, s13
 800a098:	f7f8 ffa0 	bl	8002fdc <straight_table2>
 800a09c:	e022      	b.n	800a0e4 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a09e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a0a2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a0a6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a0aa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0ba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a0be:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0c2:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800a334 <slalomR+0x3b4>
 800a0c6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	eeb0 2a47 	vmov.f32	s4, s14
 800a0d0:	eef0 1a45 	vmov.f32	s3, s10
 800a0d4:	eeb0 1a65 	vmov.f32	s2, s11
 800a0d8:	eef0 0a46 	vmov.f32	s1, s12
 800a0dc:	eeb0 0a66 	vmov.f32	s0, s13
 800a0e0:	f7f8 ff7c 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a0e4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d10c      	bne.n	800a106 <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a0ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a0f4:	eeb0 1a47 	vmov.f32	s2, s14
 800a0f8:	eddf 0a92 	vldr	s1, [pc, #584]	; 800a344 <slalomR+0x3c4>
 800a0fc:	eeb0 0a67 	vmov.f32	s0, s15
 800a100:	f7f9 fee2 	bl	8003ec8 <mollifier_slalom_table>
 800a104:	e015      	b.n	800a132 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a106:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a10a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a10e:	eef1 7a67 	vneg.f32	s15, s15
 800a112:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a116:	eef0 2a66 	vmov.f32	s5, s13
 800a11a:	eeb0 2a67 	vmov.f32	s4, s15
 800a11e:	eddf 1a86 	vldr	s3, [pc, #536]	; 800a338 <slalomR+0x3b8>
 800a122:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800a338 <slalomR+0x3b8>
 800a126:	eddf 0a87 	vldr	s1, [pc, #540]	; 800a344 <slalomR+0x3c4>
 800a12a:	eeb0 0a47 	vmov.f32	s0, s14
 800a12e:	f7f9 fd7b 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a132:	2300      	movs	r3, #0
 800a134:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a136:	2300      	movs	r3, #0
 800a138:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a13a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a13e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a334 <slalomR+0x3b4>
 800a142:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a146:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a14a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a14e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a152:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a156:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a15a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a15e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a162:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800a334 <slalomR+0x3b4>
 800a166:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	eeb0 2a47 	vmov.f32	s4, s14
 800a170:	eef0 1a65 	vmov.f32	s3, s11
 800a174:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800a338 <slalomR+0x3b8>
 800a178:	eef0 0a46 	vmov.f32	s1, s12
 800a17c:	eeb0 0a66 	vmov.f32	s0, s13
 800a180:	f7f8 ff2c 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a184:	4b6a      	ldr	r3, [pc, #424]	; (800a330 <slalomR+0x3b0>)
 800a186:	2200      	movs	r2, #0
 800a188:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a18a:	e0c8      	b.n	800a31e <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a18c:	2300      	movs	r3, #0
 800a18e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a190:	2300      	movs	r3, #0
 800a192:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a194:	2301      	movs	r3, #1
 800a196:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a198:	2300      	movs	r3, #0
 800a19a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a19c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d127      	bne.n	800a1f4 <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1a8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a1ac:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1b4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1b8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1c8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1cc:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1d0:	eddf 4a58 	vldr	s9, [pc, #352]	; 800a334 <slalomR+0x3b4>
 800a1d4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	eeb0 2a47 	vmov.f32	s4, s14
 800a1de:	eef0 1a45 	vmov.f32	s3, s10
 800a1e2:	eeb0 1a65 	vmov.f32	s2, s11
 800a1e6:	eef0 0a46 	vmov.f32	s1, s12
 800a1ea:	eeb0 0a66 	vmov.f32	s0, s13
 800a1ee:	f7f8 fef5 	bl	8002fdc <straight_table2>
 800a1f2:	e022      	b.n	800a23a <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a1f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1fc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a200:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a204:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a208:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a20c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a210:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a214:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a218:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a334 <slalomR+0x3b4>
 800a21c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	eeb0 2a47 	vmov.f32	s4, s14
 800a226:	eef0 1a45 	vmov.f32	s3, s10
 800a22a:	eeb0 1a65 	vmov.f32	s2, s11
 800a22e:	eef0 0a46 	vmov.f32	s1, s12
 800a232:	eeb0 0a66 	vmov.f32	s0, s13
 800a236:	f7f8 fed1 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a23a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d10c      	bne.n	800a25c <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a242:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a246:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a24a:	eeb0 1a47 	vmov.f32	s2, s14
 800a24e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a344 <slalomR+0x3c4>
 800a252:	eeb0 0a67 	vmov.f32	s0, s15
 800a256:	f7f9 fe37 	bl	8003ec8 <mollifier_slalom_table>
 800a25a:	e015      	b.n	800a288 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a25c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a260:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a264:	eef1 7a67 	vneg.f32	s15, s15
 800a268:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a26c:	eef0 2a66 	vmov.f32	s5, s13
 800a270:	eeb0 2a67 	vmov.f32	s4, s15
 800a274:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a338 <slalomR+0x3b8>
 800a278:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a338 <slalomR+0x3b8>
 800a27c:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a344 <slalomR+0x3c4>
 800a280:	eeb0 0a47 	vmov.f32	s0, s14
 800a284:	f7f9 fcd0 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a288:	2300      	movs	r3, #0
 800a28a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a28c:	2300      	movs	r3, #0
 800a28e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a290:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a294:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a298:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a29c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2b0:	eef0 7ae7 	vabs.f32	s15, s15
 800a2b4:	ee17 0a90 	vmov	r0, s15
 800a2b8:	f7f6 f96e 	bl	8000598 <__aeabi_f2d>
 800a2bc:	f04f 0200 	mov.w	r2, #0
 800a2c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2c4:	f7f6 faea 	bl	800089c <__aeabi_ddiv>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4614      	mov	r4, r2
 800a2ce:	461d      	mov	r5, r3
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7f6 f960 	bl	8000598 <__aeabi_f2d>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	460b      	mov	r3, r1
 800a2dc:	4620      	mov	r0, r4
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f7f6 fadc 	bl	800089c <__aeabi_ddiv>
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	460b      	mov	r3, r1
 800a2e8:	4610      	mov	r0, r2
 800a2ea:	4619      	mov	r1, r3
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	4b15      	ldr	r3, [pc, #84]	; (800a348 <slalomR+0x3c8>)
 800a2f2:	f7f5 fff3 	bl	80002dc <__adddf3>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2fa:	4610      	mov	r0, r2
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	f7f6 fc7b 	bl	8000bf8 <__aeabi_d2f>
 800a302:	4603      	mov	r3, r0
 800a304:	68f8      	ldr	r0, [r7, #12]
 800a306:	ee02 3a10 	vmov	s4, r3
 800a30a:	edd7 1a01 	vldr	s3, [r7, #4]
 800a30e:	ed97 1a01 	vldr	s2, [r7, #4]
 800a312:	eef0 0a68 	vmov.f32	s1, s17
 800a316:	eeb0 0a48 	vmov.f32	s0, s16
 800a31a:	f7f8 fe5f 	bl	8002fdc <straight_table2>
}
 800a31e:	bf00      	nop
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	ecbd 8b02 	vpop	{d8}
 800a328:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a32c:	b004      	add	sp, #16
 800a32e:	4770      	bx	lr
 800a330:	20000808 	.word	0x20000808
 800a334:	42340000 	.word	0x42340000
 800a338:	00000000 	.word	0x00000000
 800a33c:	431b8000 	.word	0x431b8000
 800a340:	43138000 	.word	0x43138000
 800a344:	c2b40000 	.word	0xc2b40000
 800a348:	408f4000 	.word	0x408f4000

0800a34c <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a34c:	b084      	sub	sp, #16
 800a34e:	b5b0      	push	{r4, r5, r7, lr}
 800a350:	ed2d 8b02 	vpush	{d8}
 800a354:	b084      	sub	sp, #16
 800a356:	af00      	add	r7, sp, #0
 800a358:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a35c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a360:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a364:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a368:	2b01      	cmp	r3, #1
 800a36a:	f040 80f3 	bne.w	800a554 <slalomL+0x208>
		highspeed_mode = 0;
 800a36e:	4be1      	ldr	r3, [pc, #900]	; (800a6f4 <slalomL+0x3a8>)
 800a370:	2200      	movs	r2, #0
 800a372:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a374:	2301      	movs	r3, #1
 800a376:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a378:	2300      	movs	r3, #0
 800a37a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a380:	2300      	movs	r3, #0
 800a382:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a384:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d11f      	bne.n	800a3cc <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a38c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a390:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a394:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a39c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3a0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a3a4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3a8:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800a6f8 <slalomL+0x3ac>
 800a3ac:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3b0:	68f8      	ldr	r0, [r7, #12]
 800a3b2:	eeb0 2a47 	vmov.f32	s4, s14
 800a3b6:	eef0 1a46 	vmov.f32	s3, s12
 800a3ba:	eeb0 1a66 	vmov.f32	s2, s13
 800a3be:	eddf 0acf 	vldr	s1, [pc, #828]	; 800a6fc <slalomL+0x3b0>
 800a3c2:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800a700 <slalomL+0x3b4>
 800a3c6:	f7f8 fe09 	bl	8002fdc <straight_table2>
 800a3ca:	e01e      	b.n	800a40a <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3e0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a3e4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3e8:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800a6f8 <slalomL+0x3ac>
 800a3ec:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3f0:	68f8      	ldr	r0, [r7, #12]
 800a3f2:	eeb0 2a47 	vmov.f32	s4, s14
 800a3f6:	eef0 1a46 	vmov.f32	s3, s12
 800a3fa:	eeb0 1a66 	vmov.f32	s2, s13
 800a3fe:	eddf 0abf 	vldr	s1, [pc, #764]	; 800a6fc <slalomL+0x3b0>
 800a402:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a704 <slalomL+0x3b8>
 800a406:	f7f8 fde9 	bl	8002fdc <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a40a:	2300      	movs	r3, #0
 800a40c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a412:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a416:	2b00      	cmp	r3, #0
 800a418:	d127      	bne.n	800a46a <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a41a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a41e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a422:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a426:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a42a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a42e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a432:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a436:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a43a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a43e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a442:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a446:	eddf 4aac 	vldr	s9, [pc, #688]	; 800a6f8 <slalomL+0x3ac>
 800a44a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a44e:	68f8      	ldr	r0, [r7, #12]
 800a450:	eeb0 2a47 	vmov.f32	s4, s14
 800a454:	eef0 1a45 	vmov.f32	s3, s10
 800a458:	eeb0 1a65 	vmov.f32	s2, s11
 800a45c:	eef0 0a46 	vmov.f32	s1, s12
 800a460:	eeb0 0a66 	vmov.f32	s0, s13
 800a464:	f7f8 fdba 	bl	8002fdc <straight_table2>
 800a468:	e022      	b.n	800a4b0 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a46a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a46e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a472:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a476:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a47a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a47e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a482:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a486:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a48a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a48e:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800a6f8 <slalomL+0x3ac>
 800a492:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	eeb0 2a47 	vmov.f32	s4, s14
 800a49c:	eef0 1a45 	vmov.f32	s3, s10
 800a4a0:	eeb0 1a65 	vmov.f32	s2, s11
 800a4a4:	eef0 0a46 	vmov.f32	s1, s12
 800a4a8:	eeb0 0a66 	vmov.f32	s0, s13
 800a4ac:	f7f8 fd96 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a4b0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d10c      	bne.n	800a4d2 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a4b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4bc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4c0:	eeb0 1a47 	vmov.f32	s2, s14
 800a4c4:	eddf 0a90 	vldr	s1, [pc, #576]	; 800a708 <slalomL+0x3bc>
 800a4c8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4cc:	f7f9 fcfc 	bl	8003ec8 <mollifier_slalom_table>
 800a4d0:	e013      	b.n	800a4fa <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a4d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a4de:	eef0 2a66 	vmov.f32	s5, s13
 800a4e2:	eeb0 2a47 	vmov.f32	s4, s14
 800a4e6:	eddf 1a85 	vldr	s3, [pc, #532]	; 800a6fc <slalomL+0x3b0>
 800a4ea:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800a6fc <slalomL+0x3b0>
 800a4ee:	eddf 0a86 	vldr	s1, [pc, #536]	; 800a708 <slalomL+0x3bc>
 800a4f2:	eeb0 0a67 	vmov.f32	s0, s15
 800a4f6:	f7f9 fb97 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a502:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a506:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a6f8 <slalomL+0x3ac>
 800a50a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a50e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a512:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a516:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a51a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a51e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a522:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a526:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a52a:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800a6f8 <slalomL+0x3ac>
 800a52e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	eeb0 2a47 	vmov.f32	s4, s14
 800a538:	eef0 1a65 	vmov.f32	s3, s11
 800a53c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a6fc <slalomL+0x3b0>
 800a540:	eef0 0a46 	vmov.f32	s1, s12
 800a544:	eeb0 0a66 	vmov.f32	s0, s13
 800a548:	f7f8 fd48 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a54c:	4b69      	ldr	r3, [pc, #420]	; (800a6f4 <slalomL+0x3a8>)
 800a54e:	2200      	movs	r2, #0
 800a550:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a552:	e0c6      	b.n	800a6e2 <slalomL+0x396>
		wallmode.WallControlMode=0;
 800a554:	2300      	movs	r3, #0
 800a556:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a558:	2300      	movs	r3, #0
 800a55a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a55c:	2301      	movs	r3, #1
 800a55e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a560:	2300      	movs	r3, #0
 800a562:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a564:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d127      	bne.n	800a5bc <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a56c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a570:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a574:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a578:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a57c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a580:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a584:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a588:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a58c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a590:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a594:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a598:	eddf 4a57 	vldr	s9, [pc, #348]	; 800a6f8 <slalomL+0x3ac>
 800a59c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	eeb0 2a47 	vmov.f32	s4, s14
 800a5a6:	eef0 1a45 	vmov.f32	s3, s10
 800a5aa:	eeb0 1a65 	vmov.f32	s2, s11
 800a5ae:	eef0 0a46 	vmov.f32	s1, s12
 800a5b2:	eeb0 0a66 	vmov.f32	s0, s13
 800a5b6:	f7f8 fd11 	bl	8002fdc <straight_table2>
 800a5ba:	e022      	b.n	800a602 <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5bc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5c4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5c8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5d8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5dc:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5e0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a6f8 <slalomL+0x3ac>
 800a5e4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5e8:	68f8      	ldr	r0, [r7, #12]
 800a5ea:	eeb0 2a47 	vmov.f32	s4, s14
 800a5ee:	eef0 1a45 	vmov.f32	s3, s10
 800a5f2:	eeb0 1a65 	vmov.f32	s2, s11
 800a5f6:	eef0 0a46 	vmov.f32	s1, s12
 800a5fa:	eeb0 0a66 	vmov.f32	s0, s13
 800a5fe:	f7f8 fced 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a602:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a606:	2b01      	cmp	r3, #1
 800a608:	d10c      	bne.n	800a624 <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a60a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a60e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a612:	eeb0 1a47 	vmov.f32	s2, s14
 800a616:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a708 <slalomL+0x3bc>
 800a61a:	eeb0 0a67 	vmov.f32	s0, s15
 800a61e:	f7f9 fc53 	bl	8003ec8 <mollifier_slalom_table>
 800a622:	e013      	b.n	800a64c <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a624:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a628:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a62c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a630:	eef0 2a66 	vmov.f32	s5, s13
 800a634:	eeb0 2a47 	vmov.f32	s4, s14
 800a638:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a6fc <slalomL+0x3b0>
 800a63c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a6fc <slalomL+0x3b0>
 800a640:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a708 <slalomL+0x3bc>
 800a644:	eeb0 0a67 	vmov.f32	s0, s15
 800a648:	f7f9 faee 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a650:	2300      	movs	r3, #0
 800a652:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a654:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a658:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a65c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a660:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a664:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a668:	edd7 7a01 	vldr	s15, [r7, #4]
 800a66c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a670:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a674:	eef0 7ae7 	vabs.f32	s15, s15
 800a678:	ee17 0a90 	vmov	r0, s15
 800a67c:	f7f5 ff8c 	bl	8000598 <__aeabi_f2d>
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a688:	f7f6 f908 	bl	800089c <__aeabi_ddiv>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4614      	mov	r4, r2
 800a692:	461d      	mov	r5, r3
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	4618      	mov	r0, r3
 800a698:	f7f5 ff7e 	bl	8000598 <__aeabi_f2d>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f7f6 f8fa 	bl	800089c <__aeabi_ddiv>
 800a6a8:	4602      	mov	r2, r0
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	f04f 0200 	mov.w	r2, #0
 800a6b4:	4b15      	ldr	r3, [pc, #84]	; (800a70c <slalomL+0x3c0>)
 800a6b6:	f7f5 fe11 	bl	80002dc <__adddf3>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6be:	4610      	mov	r0, r2
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	f7f6 fa99 	bl	8000bf8 <__aeabi_d2f>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	ee02 3a10 	vmov	s4, r3
 800a6ce:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6d2:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6d6:	eef0 0a68 	vmov.f32	s1, s17
 800a6da:	eeb0 0a48 	vmov.f32	s0, s16
 800a6de:	f7f8 fc7d 	bl	8002fdc <straight_table2>
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	ecbd 8b02 	vpop	{d8}
 800a6ec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a6f0:	b004      	add	sp, #16
 800a6f2:	4770      	bx	lr
 800a6f4:	20000808 	.word	0x20000808
 800a6f8:	42340000 	.word	0x42340000
 800a6fc:	00000000 	.word	0x00000000
 800a700:	431b8000 	.word	0x431b8000
 800a704:	43138000 	.word	0x43138000
 800a708:	42b40000 	.word	0x42b40000
 800a70c:	408f4000 	.word	0x408f4000

0800a710 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a710:	b084      	sub	sp, #16
 800a712:	b5b0      	push	{r4, r5, r7, lr}
 800a714:	ed2d 8b02 	vpush	{d8}
 800a718:	b084      	sub	sp, #16
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a724:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a728:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	f040 80a5 	bne.w	800a87c <turn90R+0x16c>
		highspeed_mode = 1;
 800a732:	4ba5      	ldr	r3, [pc, #660]	; (800a9c8 <turn90R+0x2b8>)
 800a734:	2201      	movs	r2, #1
 800a736:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a738:	2301      	movs	r3, #1
 800a73a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a73c:	2300      	movs	r3, #0
 800a73e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a744:	2300      	movs	r3, #0
 800a746:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a748:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a74c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a750:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a75c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a760:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a764:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a9cc <turn90R+0x2bc>
 800a768:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	eeb0 2a47 	vmov.f32	s4, s14
 800a772:	eef0 1a46 	vmov.f32	s3, s12
 800a776:	eeb0 1a66 	vmov.f32	s2, s13
 800a77a:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a9d0 <turn90R+0x2c0>
 800a77e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a9d4 <turn90R+0x2c4>
 800a782:	f7f8 fc2b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800a786:	2300      	movs	r3, #0
 800a788:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a78a:	2302      	movs	r3, #2
 800a78c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a78e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a792:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a796:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a79a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a79e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7b2:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a9cc <turn90R+0x2bc>
 800a7b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7ba:	68f8      	ldr	r0, [r7, #12]
 800a7bc:	eeb0 2a47 	vmov.f32	s4, s14
 800a7c0:	eef0 1a45 	vmov.f32	s3, s10
 800a7c4:	eeb0 1a65 	vmov.f32	s2, s11
 800a7c8:	eef0 0a46 	vmov.f32	s1, s12
 800a7cc:	eeb0 0a66 	vmov.f32	s0, s13
 800a7d0:	f7f8 fc04 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a7d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d10c      	bne.n	800a7f6 <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a7dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7e4:	eeb0 1a47 	vmov.f32	s2, s14
 800a7e8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a9d8 <turn90R+0x2c8>
 800a7ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f0:	f7f9 fb6a 	bl	8003ec8 <mollifier_slalom_table>
 800a7f4:	e015      	b.n	800a822 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a7f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a7fe:	eef1 7a67 	vneg.f32	s15, s15
 800a802:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a806:	eef0 2a66 	vmov.f32	s5, s13
 800a80a:	eeb0 2a67 	vmov.f32	s4, s15
 800a80e:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a9d0 <turn90R+0x2c0>
 800a812:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a9d0 <turn90R+0x2c0>
 800a816:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a9d8 <turn90R+0x2c8>
 800a81a:	eeb0 0a47 	vmov.f32	s0, s14
 800a81e:	f7f9 fa03 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a822:	2300      	movs	r3, #0
 800a824:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a826:	2300      	movs	r3, #0
 800a828:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a82a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a82e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a9dc <turn90R+0x2cc>
 800a832:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a836:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a83a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a83e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a842:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a846:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a84a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a84e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a852:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a9cc <turn90R+0x2bc>
 800a856:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	eeb0 2a47 	vmov.f32	s4, s14
 800a860:	eef0 1a65 	vmov.f32	s3, s11
 800a864:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a9d0 <turn90R+0x2c0>
 800a868:	eef0 0a46 	vmov.f32	s1, s12
 800a86c:	eeb0 0a66 	vmov.f32	s0, s13
 800a870:	f7f8 fbb4 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a874:	4b54      	ldr	r3, [pc, #336]	; (800a9c8 <turn90R+0x2b8>)
 800a876:	2200      	movs	r2, #0
 800a878:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a87a:	e09c      	b.n	800a9b6 <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a87c:	2300      	movs	r3, #0
 800a87e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a880:	2300      	movs	r3, #0
 800a882:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a884:	2302      	movs	r3, #2
 800a886:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a888:	2300      	movs	r3, #0
 800a88a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a88c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a890:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a894:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a898:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a89c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8a8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a8ac:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8b0:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a9cc <turn90R+0x2bc>
 800a8b4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	eeb0 2a47 	vmov.f32	s4, s14
 800a8be:	eef0 1a45 	vmov.f32	s3, s10
 800a8c2:	eeb0 1a65 	vmov.f32	s2, s11
 800a8c6:	eef0 0a46 	vmov.f32	s1, s12
 800a8ca:	eeb0 0a66 	vmov.f32	s0, s13
 800a8ce:	f7f8 fb85 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a8d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8d6:	2b01      	cmp	r3, #1
 800a8d8:	d10c      	bne.n	800a8f4 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a8da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8e2:	eeb0 1a47 	vmov.f32	s2, s14
 800a8e6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a9d8 <turn90R+0x2c8>
 800a8ea:	eeb0 0a67 	vmov.f32	s0, s15
 800a8ee:	f7f9 faeb 	bl	8003ec8 <mollifier_slalom_table>
 800a8f2:	e015      	b.n	800a920 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a8f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a8fc:	eef1 7a67 	vneg.f32	s15, s15
 800a900:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a904:	eef0 2a66 	vmov.f32	s5, s13
 800a908:	eeb0 2a67 	vmov.f32	s4, s15
 800a90c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9d0 <turn90R+0x2c0>
 800a910:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9d0 <turn90R+0x2c0>
 800a914:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9d8 <turn90R+0x2c8>
 800a918:	eeb0 0a47 	vmov.f32	s0, s14
 800a91c:	f7f9 f984 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a920:	2301      	movs	r3, #1
 800a922:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a928:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a92c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a930:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a934:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a93c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a940:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a944:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a948:	eef0 7ae7 	vabs.f32	s15, s15
 800a94c:	ee17 0a90 	vmov	r0, s15
 800a950:	f7f5 fe22 	bl	8000598 <__aeabi_f2d>
 800a954:	f04f 0200 	mov.w	r2, #0
 800a958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a95c:	f7f5 ff9e 	bl	800089c <__aeabi_ddiv>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4614      	mov	r4, r2
 800a966:	461d      	mov	r5, r3
 800a968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7f5 fe14 	bl	8000598 <__aeabi_f2d>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f5 ff90 	bl	800089c <__aeabi_ddiv>
 800a97c:	4602      	mov	r2, r0
 800a97e:	460b      	mov	r3, r1
 800a980:	4610      	mov	r0, r2
 800a982:	4619      	mov	r1, r3
 800a984:	f04f 0200 	mov.w	r2, #0
 800a988:	4b15      	ldr	r3, [pc, #84]	; (800a9e0 <turn90R+0x2d0>)
 800a98a:	f7f5 fca7 	bl	80002dc <__adddf3>
 800a98e:	4602      	mov	r2, r0
 800a990:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a992:	4610      	mov	r0, r2
 800a994:	4619      	mov	r1, r3
 800a996:	f7f6 f92f 	bl	8000bf8 <__aeabi_d2f>
 800a99a:	4603      	mov	r3, r0
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	ee02 3a10 	vmov	s4, r3
 800a9a2:	edd7 1a01 	vldr	s3, [r7, #4]
 800a9a6:	ed97 1a01 	vldr	s2, [r7, #4]
 800a9aa:	eef0 0a68 	vmov.f32	s1, s17
 800a9ae:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b2:	f7f8 fb13 	bl	8002fdc <straight_table2>
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	ecbd 8b02 	vpop	{d8}
 800a9c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9c4:	b004      	add	sp, #16
 800a9c6:	4770      	bx	lr
 800a9c8:	20000808 	.word	0x20000808
 800a9cc:	42340000 	.word	0x42340000
 800a9d0:	00000000 	.word	0x00000000
 800a9d4:	42cd0000 	.word	0x42cd0000
 800a9d8:	c2b40000 	.word	0xc2b40000
 800a9dc:	42b40000 	.word	0x42b40000
 800a9e0:	408f4000 	.word	0x408f4000

0800a9e4 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	b5b0      	push	{r4, r5, r7, lr}
 800a9e8:	ed2d 8b02 	vpush	{d8}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9f8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a9fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	f040 80a3 	bne.w	800ab4c <turn90L+0x168>
		highspeed_mode = 1;
 800aa06:	4ba3      	ldr	r3, [pc, #652]	; (800ac94 <turn90L+0x2b0>)
 800aa08:	2201      	movs	r2, #1
 800aa0a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa1c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa20:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa24:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa28:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa30:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa34:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa38:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ac98 <turn90L+0x2b4>
 800aa3c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	eeb0 2a47 	vmov.f32	s4, s14
 800aa46:	eef0 1a46 	vmov.f32	s3, s12
 800aa4a:	eeb0 1a66 	vmov.f32	s2, s13
 800aa4e:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ac9c <turn90L+0x2b8>
 800aa52:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800aca0 <turn90L+0x2bc>
 800aa56:	f7f8 fac1 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa5e:	2302      	movs	r3, #2
 800aa60:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa62:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa66:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa6a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa6e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa7e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa82:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa86:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ac98 <turn90L+0x2b4>
 800aa8a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	eeb0 2a47 	vmov.f32	s4, s14
 800aa94:	eef0 1a45 	vmov.f32	s3, s10
 800aa98:	eeb0 1a65 	vmov.f32	s2, s11
 800aa9c:	eef0 0a46 	vmov.f32	s1, s12
 800aaa0:	eeb0 0a66 	vmov.f32	s0, s13
 800aaa4:	f7f8 fa9a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aaa8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d10c      	bne.n	800aaca <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aab0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aab4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aab8:	eeb0 1a47 	vmov.f32	s2, s14
 800aabc:	eddf 0a79 	vldr	s1, [pc, #484]	; 800aca4 <turn90L+0x2c0>
 800aac0:	eeb0 0a67 	vmov.f32	s0, s15
 800aac4:	f7f9 fa00 	bl	8003ec8 <mollifier_slalom_table>
 800aac8:	e013      	b.n	800aaf2 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aaca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aace:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aad2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aad6:	eef0 2a66 	vmov.f32	s5, s13
 800aada:	eeb0 2a47 	vmov.f32	s4, s14
 800aade:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ac9c <turn90L+0x2b8>
 800aae2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ac9c <turn90L+0x2b8>
 800aae6:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800aca4 <turn90L+0x2c0>
 800aaea:	eeb0 0a67 	vmov.f32	s0, s15
 800aaee:	f7f9 f89b 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aafa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aafe:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800aca4 <turn90L+0x2c0>
 800ab02:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab06:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab0a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab12:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab16:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab1a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab1e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab22:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ac98 <turn90L+0x2b4>
 800ab26:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	eeb0 2a47 	vmov.f32	s4, s14
 800ab30:	eef0 1a65 	vmov.f32	s3, s11
 800ab34:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ac9c <turn90L+0x2b8>
 800ab38:	eef0 0a46 	vmov.f32	s1, s12
 800ab3c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab40:	f7f8 fa4c 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ab44:	4b53      	ldr	r3, [pc, #332]	; (800ac94 <turn90L+0x2b0>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab4a:	e09a      	b.n	800ac82 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab54:	2302      	movs	r3, #2
 800ab56:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab5c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab64:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab68:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab78:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab7c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab80:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ac98 <turn90L+0x2b4>
 800ab84:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	eeb0 2a47 	vmov.f32	s4, s14
 800ab8e:	eef0 1a45 	vmov.f32	s3, s10
 800ab92:	eeb0 1a65 	vmov.f32	s2, s11
 800ab96:	eef0 0a46 	vmov.f32	s1, s12
 800ab9a:	eeb0 0a66 	vmov.f32	s0, s13
 800ab9e:	f7f8 fa1d 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aba2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d10c      	bne.n	800abc4 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800abaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abb2:	eeb0 1a47 	vmov.f32	s2, s14
 800abb6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800aca4 <turn90L+0x2c0>
 800abba:	eeb0 0a67 	vmov.f32	s0, s15
 800abbe:	f7f9 f983 	bl	8003ec8 <mollifier_slalom_table>
 800abc2:	e013      	b.n	800abec <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800abc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abc8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abcc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abd0:	eef0 2a66 	vmov.f32	s5, s13
 800abd4:	eeb0 2a47 	vmov.f32	s4, s14
 800abd8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac9c <turn90L+0x2b8>
 800abdc:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac9c <turn90L+0x2b8>
 800abe0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800aca4 <turn90L+0x2c0>
 800abe4:	eeb0 0a67 	vmov.f32	s0, s15
 800abe8:	f7f9 f81e 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800abec:	2301      	movs	r3, #1
 800abee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abf4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800abf8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800abfc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac08:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac14:	eef0 7ae7 	vabs.f32	s15, s15
 800ac18:	ee17 0a90 	vmov	r0, s15
 800ac1c:	f7f5 fcbc 	bl	8000598 <__aeabi_f2d>
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac28:	f7f5 fe38 	bl	800089c <__aeabi_ddiv>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4614      	mov	r4, r2
 800ac32:	461d      	mov	r5, r3
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7f5 fcae 	bl	8000598 <__aeabi_f2d>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	4620      	mov	r0, r4
 800ac42:	4629      	mov	r1, r5
 800ac44:	f7f5 fe2a 	bl	800089c <__aeabi_ddiv>
 800ac48:	4602      	mov	r2, r0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4619      	mov	r1, r3
 800ac50:	f04f 0200 	mov.w	r2, #0
 800ac54:	4b14      	ldr	r3, [pc, #80]	; (800aca8 <turn90L+0x2c4>)
 800ac56:	f7f5 fb41 	bl	80002dc <__adddf3>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac5e:	4610      	mov	r0, r2
 800ac60:	4619      	mov	r1, r3
 800ac62:	f7f5 ffc9 	bl	8000bf8 <__aeabi_d2f>
 800ac66:	4603      	mov	r3, r0
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	ee02 3a10 	vmov	s4, r3
 800ac6e:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac72:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac76:	eef0 0a68 	vmov.f32	s1, s17
 800ac7a:	eeb0 0a48 	vmov.f32	s0, s16
 800ac7e:	f7f8 f9ad 	bl	8002fdc <straight_table2>
}
 800ac82:	bf00      	nop
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	ecbd 8b02 	vpop	{d8}
 800ac8c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac90:	b004      	add	sp, #16
 800ac92:	4770      	bx	lr
 800ac94:	20000808 	.word	0x20000808
 800ac98:	42340000 	.word	0x42340000
 800ac9c:	00000000 	.word	0x00000000
 800aca0:	42cd0000 	.word	0x42cd0000
 800aca4:	42b40000 	.word	0x42b40000
 800aca8:	408f4000 	.word	0x408f4000

0800acac <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800acac:	b084      	sub	sp, #16
 800acae:	b5b0      	push	{r4, r5, r7, lr}
 800acb0:	ed2d 8b02 	vpush	{d8}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800acbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acc0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800acc4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800acc8:	2b01      	cmp	r3, #1
 800acca:	f040 80a5 	bne.w	800ae18 <turn180R+0x16c>
		highspeed_mode = 1;
 800acce:	4ba5      	ldr	r3, [pc, #660]	; (800af64 <turn180R+0x2b8>)
 800acd0:	2201      	movs	r2, #1
 800acd2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800acd4:	2301      	movs	r3, #1
 800acd6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acd8:	2300      	movs	r3, #0
 800acda:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800acdc:	2300      	movs	r3, #0
 800acde:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ace4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ace8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acf8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800acfc:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ad00:	eddf 5a99 	vldr	s11, [pc, #612]	; 800af68 <turn180R+0x2bc>
 800ad04:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ad08:	68f8      	ldr	r0, [r7, #12]
 800ad0a:	eeb0 2a47 	vmov.f32	s4, s14
 800ad0e:	eef0 1a46 	vmov.f32	s3, s12
 800ad12:	eeb0 1a66 	vmov.f32	s2, s13
 800ad16:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af6c <turn180R+0x2c0>
 800ad1a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800af70 <turn180R+0x2c4>
 800ad1e:	f7f8 f95d 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800ad22:	2300      	movs	r3, #0
 800ad24:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad26:	2302      	movs	r3, #2
 800ad28:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad2a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad2e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad32:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad36:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad46:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad4a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad4e:	eddf 4a86 	vldr	s9, [pc, #536]	; 800af68 <turn180R+0x2bc>
 800ad52:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad56:	68f8      	ldr	r0, [r7, #12]
 800ad58:	eeb0 2a47 	vmov.f32	s4, s14
 800ad5c:	eef0 1a45 	vmov.f32	s3, s10
 800ad60:	eeb0 1a65 	vmov.f32	s2, s11
 800ad64:	eef0 0a46 	vmov.f32	s1, s12
 800ad68:	eeb0 0a66 	vmov.f32	s0, s13
 800ad6c:	f7f8 f936 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ad70:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad74:	2b01      	cmp	r3, #1
 800ad76:	d10c      	bne.n	800ad92 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad78:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad7c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad80:	eeb0 1a47 	vmov.f32	s2, s14
 800ad84:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800af74 <turn180R+0x2c8>
 800ad88:	eeb0 0a67 	vmov.f32	s0, s15
 800ad8c:	f7f9 f89c 	bl	8003ec8 <mollifier_slalom_table>
 800ad90:	e015      	b.n	800adbe <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad96:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad9a:	eef1 7a67 	vneg.f32	s15, s15
 800ad9e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ada2:	eef0 2a66 	vmov.f32	s5, s13
 800ada6:	eeb0 2a67 	vmov.f32	s4, s15
 800adaa:	eddf 1a70 	vldr	s3, [pc, #448]	; 800af6c <turn180R+0x2c0>
 800adae:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800af6c <turn180R+0x2c0>
 800adb2:	eddf 0a70 	vldr	s1, [pc, #448]	; 800af74 <turn180R+0x2c8>
 800adb6:	eeb0 0a47 	vmov.f32	s0, s14
 800adba:	f7f8 ff35 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800adbe:	2300      	movs	r3, #0
 800adc0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800adca:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800af78 <turn180R+0x2cc>
 800adce:	ee77 6a87 	vadd.f32	s13, s15, s14
 800add2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800add6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ade2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ade6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800adea:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adee:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800af68 <turn180R+0x2bc>
 800adf2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	eeb0 2a47 	vmov.f32	s4, s14
 800adfc:	eef0 1a65 	vmov.f32	s3, s11
 800ae00:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800af6c <turn180R+0x2c0>
 800ae04:	eef0 0a46 	vmov.f32	s1, s12
 800ae08:	eeb0 0a66 	vmov.f32	s0, s13
 800ae0c:	f7f8 f8e6 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ae10:	4b54      	ldr	r3, [pc, #336]	; (800af64 <turn180R+0x2b8>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae16:	e09c      	b.n	800af52 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae18:	2300      	movs	r3, #0
 800ae1a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae20:	2302      	movs	r3, #2
 800ae22:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae30:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae34:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae44:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae48:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae4c:	eddf 4a46 	vldr	s9, [pc, #280]	; 800af68 <turn180R+0x2bc>
 800ae50:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	eeb0 2a47 	vmov.f32	s4, s14
 800ae5a:	eef0 1a45 	vmov.f32	s3, s10
 800ae5e:	eeb0 1a65 	vmov.f32	s2, s11
 800ae62:	eef0 0a46 	vmov.f32	s1, s12
 800ae66:	eeb0 0a66 	vmov.f32	s0, s13
 800ae6a:	f7f8 f8b7 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ae6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d10c      	bne.n	800ae90 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae7e:	eeb0 1a47 	vmov.f32	s2, s14
 800ae82:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800af74 <turn180R+0x2c8>
 800ae86:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8a:	f7f9 f81d 	bl	8003ec8 <mollifier_slalom_table>
 800ae8e:	e015      	b.n	800aebc <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ae90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae94:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ae98:	eef1 7a67 	vneg.f32	s15, s15
 800ae9c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aea0:	eef0 2a66 	vmov.f32	s5, s13
 800aea4:	eeb0 2a67 	vmov.f32	s4, s15
 800aea8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af6c <turn180R+0x2c0>
 800aeac:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af6c <turn180R+0x2c0>
 800aeb0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af74 <turn180R+0x2c8>
 800aeb4:	eeb0 0a47 	vmov.f32	s0, s14
 800aeb8:	f7f8 feb6 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aebc:	2301      	movs	r3, #1
 800aebe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aec4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aec8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aecc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aed0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aed4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aed8:	edd7 7a01 	vldr	s15, [r7, #4]
 800aedc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aee4:	eef0 7ae7 	vabs.f32	s15, s15
 800aee8:	ee17 0a90 	vmov	r0, s15
 800aeec:	f7f5 fb54 	bl	8000598 <__aeabi_f2d>
 800aef0:	f04f 0200 	mov.w	r2, #0
 800aef4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aef8:	f7f5 fcd0 	bl	800089c <__aeabi_ddiv>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4614      	mov	r4, r2
 800af02:	461d      	mov	r5, r3
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	4618      	mov	r0, r3
 800af08:	f7f5 fb46 	bl	8000598 <__aeabi_f2d>
 800af0c:	4602      	mov	r2, r0
 800af0e:	460b      	mov	r3, r1
 800af10:	4620      	mov	r0, r4
 800af12:	4629      	mov	r1, r5
 800af14:	f7f5 fcc2 	bl	800089c <__aeabi_ddiv>
 800af18:	4602      	mov	r2, r0
 800af1a:	460b      	mov	r3, r1
 800af1c:	4610      	mov	r0, r2
 800af1e:	4619      	mov	r1, r3
 800af20:	f04f 0200 	mov.w	r2, #0
 800af24:	4b15      	ldr	r3, [pc, #84]	; (800af7c <turn180R+0x2d0>)
 800af26:	f7f5 f9d9 	bl	80002dc <__adddf3>
 800af2a:	4602      	mov	r2, r0
 800af2c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af2e:	4610      	mov	r0, r2
 800af30:	4619      	mov	r1, r3
 800af32:	f7f5 fe61 	bl	8000bf8 <__aeabi_d2f>
 800af36:	4603      	mov	r3, r0
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	ee02 3a10 	vmov	s4, r3
 800af3e:	edd7 1a01 	vldr	s3, [r7, #4]
 800af42:	ed97 1a01 	vldr	s2, [r7, #4]
 800af46:	eef0 0a68 	vmov.f32	s1, s17
 800af4a:	eeb0 0a48 	vmov.f32	s0, s16
 800af4e:	f7f8 f845 	bl	8002fdc <straight_table2>
}
 800af52:	bf00      	nop
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	ecbd 8b02 	vpop	{d8}
 800af5c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af60:	b004      	add	sp, #16
 800af62:	4770      	bx	lr
 800af64:	20000808 	.word	0x20000808
 800af68:	42340000 	.word	0x42340000
 800af6c:	00000000 	.word	0x00000000
 800af70:	42cd0000 	.word	0x42cd0000
 800af74:	c3340000 	.word	0xc3340000
 800af78:	42b40000 	.word	0x42b40000
 800af7c:	408f4000 	.word	0x408f4000

0800af80 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af80:	b084      	sub	sp, #16
 800af82:	b5b0      	push	{r4, r5, r7, lr}
 800af84:	ed2d 8b02 	vpush	{d8}
 800af88:	b084      	sub	sp, #16
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af94:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	f040 80a3 	bne.w	800b0e8 <turn180L+0x168>
		highspeed_mode = 1;
 800afa2:	4ba3      	ldr	r3, [pc, #652]	; (800b230 <turn180L+0x2b0>)
 800afa4:	2201      	movs	r2, #1
 800afa6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800afa8:	2301      	movs	r3, #1
 800afaa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afac:	2300      	movs	r3, #0
 800afae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afb8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afbc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afcc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afd0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afd4:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b234 <turn180L+0x2b4>
 800afd8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	eeb0 2a47 	vmov.f32	s4, s14
 800afe2:	eef0 1a46 	vmov.f32	s3, s12
 800afe6:	eeb0 1a66 	vmov.f32	s2, s13
 800afea:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b238 <turn180L+0x2b8>
 800afee:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b23c <turn180L+0x2bc>
 800aff2:	f7f7 fff3 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800affa:	2302      	movs	r3, #2
 800affc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800affe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b002:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b006:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b00a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b00e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b012:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b016:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b01a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b01e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b022:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b234 <turn180L+0x2b4>
 800b026:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	eeb0 2a47 	vmov.f32	s4, s14
 800b030:	eef0 1a45 	vmov.f32	s3, s10
 800b034:	eeb0 1a65 	vmov.f32	s2, s11
 800b038:	eef0 0a46 	vmov.f32	s1, s12
 800b03c:	eeb0 0a66 	vmov.f32	s0, s13
 800b040:	f7f7 ffcc 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b044:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d10c      	bne.n	800b066 <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b04c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b050:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b054:	eeb0 1a47 	vmov.f32	s2, s14
 800b058:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b240 <turn180L+0x2c0>
 800b05c:	eeb0 0a67 	vmov.f32	s0, s15
 800b060:	f7f8 ff32 	bl	8003ec8 <mollifier_slalom_table>
 800b064:	e013      	b.n	800b08e <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b066:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b06a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b06e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b072:	eef0 2a66 	vmov.f32	s5, s13
 800b076:	eeb0 2a47 	vmov.f32	s4, s14
 800b07a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b238 <turn180L+0x2b8>
 800b07e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b238 <turn180L+0x2b8>
 800b082:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b240 <turn180L+0x2c0>
 800b086:	eeb0 0a67 	vmov.f32	s0, s15
 800b08a:	f7f8 fdcd 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b08e:	2300      	movs	r3, #0
 800b090:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b092:	2300      	movs	r3, #0
 800b094:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b096:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b09a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b244 <turn180L+0x2c4>
 800b09e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b0a2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0a6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b0ba:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0be:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b234 <turn180L+0x2b4>
 800b0c2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	eeb0 2a47 	vmov.f32	s4, s14
 800b0cc:	eef0 1a65 	vmov.f32	s3, s11
 800b0d0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b238 <turn180L+0x2b8>
 800b0d4:	eef0 0a46 	vmov.f32	s1, s12
 800b0d8:	eeb0 0a66 	vmov.f32	s0, s13
 800b0dc:	f7f7 ff7e 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b0e0:	4b53      	ldr	r3, [pc, #332]	; (800b230 <turn180L+0x2b0>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b0e6:	e09a      	b.n	800b21e <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b0f0:	2302      	movs	r3, #2
 800b0f2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0f8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0fc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b100:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b104:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b108:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b10c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b110:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b114:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b118:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b11c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b234 <turn180L+0x2b4>
 800b120:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	eeb0 2a47 	vmov.f32	s4, s14
 800b12a:	eef0 1a45 	vmov.f32	s3, s10
 800b12e:	eeb0 1a65 	vmov.f32	s2, s11
 800b132:	eef0 0a46 	vmov.f32	s1, s12
 800b136:	eeb0 0a66 	vmov.f32	s0, s13
 800b13a:	f7f7 ff4f 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b13e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b142:	2b01      	cmp	r3, #1
 800b144:	d10c      	bne.n	800b160 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b146:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b14a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b14e:	eeb0 1a47 	vmov.f32	s2, s14
 800b152:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b240 <turn180L+0x2c0>
 800b156:	eeb0 0a67 	vmov.f32	s0, s15
 800b15a:	f7f8 feb5 	bl	8003ec8 <mollifier_slalom_table>
 800b15e:	e013      	b.n	800b188 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b160:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b164:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b168:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b16c:	eef0 2a66 	vmov.f32	s5, s13
 800b170:	eeb0 2a47 	vmov.f32	s4, s14
 800b174:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b238 <turn180L+0x2b8>
 800b178:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b238 <turn180L+0x2b8>
 800b17c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b240 <turn180L+0x2c0>
 800b180:	eeb0 0a67 	vmov.f32	s0, s15
 800b184:	f7f8 fd50 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b188:	2301      	movs	r3, #1
 800b18a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b190:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b194:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b198:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b19c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1a4:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1b0:	eef0 7ae7 	vabs.f32	s15, s15
 800b1b4:	ee17 0a90 	vmov	r0, s15
 800b1b8:	f7f5 f9ee 	bl	8000598 <__aeabi_f2d>
 800b1bc:	f04f 0200 	mov.w	r2, #0
 800b1c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1c4:	f7f5 fb6a 	bl	800089c <__aeabi_ddiv>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4614      	mov	r4, r2
 800b1ce:	461d      	mov	r5, r3
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7f5 f9e0 	bl	8000598 <__aeabi_f2d>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4620      	mov	r0, r4
 800b1de:	4629      	mov	r1, r5
 800b1e0:	f7f5 fb5c 	bl	800089c <__aeabi_ddiv>
 800b1e4:	4602      	mov	r2, r0
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	f04f 0200 	mov.w	r2, #0
 800b1f0:	4b15      	ldr	r3, [pc, #84]	; (800b248 <turn180L+0x2c8>)
 800b1f2:	f7f5 f873 	bl	80002dc <__adddf3>
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	f7f5 fcfb 	bl	8000bf8 <__aeabi_d2f>
 800b202:	4603      	mov	r3, r0
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	ee02 3a10 	vmov	s4, r3
 800b20a:	edd7 1a01 	vldr	s3, [r7, #4]
 800b20e:	ed97 1a01 	vldr	s2, [r7, #4]
 800b212:	eef0 0a68 	vmov.f32	s1, s17
 800b216:	eeb0 0a48 	vmov.f32	s0, s16
 800b21a:	f7f7 fedf 	bl	8002fdc <straight_table2>
}
 800b21e:	bf00      	nop
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	ecbd 8b02 	vpop	{d8}
 800b228:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b22c:	b004      	add	sp, #16
 800b22e:	4770      	bx	lr
 800b230:	20000808 	.word	0x20000808
 800b234:	42340000 	.word	0x42340000
 800b238:	00000000 	.word	0x00000000
 800b23c:	42cd0000 	.word	0x42cd0000
 800b240:	43340000 	.word	0x43340000
 800b244:	42b40000 	.word	0x42b40000
 800b248:	408f4000 	.word	0x408f4000
 800b24c:	00000000 	.word	0x00000000

0800b250 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b250:	b084      	sub	sp, #16
 800b252:	b5b0      	push	{r4, r5, r7, lr}
 800b254:	ed2d 8b02 	vpush	{d8}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b264:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b268:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 80ae 	bne.w	800b3ce <turn45inR+0x17e>
		highspeed_mode = 1;
 800b272:	4bdd      	ldr	r3, [pc, #884]	; (800b5e8 <turn45inR+0x398>)
 800b274:	2201      	movs	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b278:	2301      	movs	r3, #1
 800b27a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b280:	2300      	movs	r3, #0
 800b282:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b284:	2300      	movs	r3, #0
 800b286:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b288:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b28c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b290:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b294:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b29c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b2a0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b2a4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b5ec <turn45inR+0x39c>
 800b2a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800b2b2:	eef0 1a46 	vmov.f32	s3, s12
 800b2b6:	eeb0 1a66 	vmov.f32	s2, s13
 800b2ba:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b5f8 <turn45inR+0x3a8>
 800b2be:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b5f0 <turn45inR+0x3a0>
 800b2c2:	f7f7 fe8b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2da:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2ea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2ee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2f2:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b5ec <turn45inR+0x39c>
 800b2f6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	eeb0 2a47 	vmov.f32	s4, s14
 800b300:	eef0 1a45 	vmov.f32	s3, s10
 800b304:	eeb0 1a65 	vmov.f32	s2, s11
 800b308:	eef0 0a46 	vmov.f32	s1, s12
 800b30c:	eeb0 0a66 	vmov.f32	s0, s13
 800b310:	f7f7 fe64 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b314:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d10c      	bne.n	800b336 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b31c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b320:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b324:	eeb0 1a47 	vmov.f32	s2, s14
 800b328:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b5fc <turn45inR+0x3ac>
 800b32c:	eeb0 0a67 	vmov.f32	s0, s15
 800b330:	f7f8 fdca 	bl	8003ec8 <mollifier_slalom_table>
 800b334:	e015      	b.n	800b362 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b336:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b33a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b33e:	eef1 7a67 	vneg.f32	s15, s15
 800b342:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b346:	eef0 2a66 	vmov.f32	s5, s13
 800b34a:	eeb0 2a67 	vmov.f32	s4, s15
 800b34e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b5f8 <turn45inR+0x3a8>
 800b352:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b5f8 <turn45inR+0x3a8>
 800b356:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b5fc <turn45inR+0x3ac>
 800b35a:	eeb0 0a47 	vmov.f32	s0, s14
 800b35e:	f7f8 fc63 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b362:	2300      	movs	r3, #0
 800b364:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f5 f913 	bl	8000598 <__aeabi_f2d>
 800b372:	a39b      	add	r3, pc, #620	; (adr r3, 800b5e0 <turn45inR+0x390>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f4 ffb0 	bl	80002dc <__adddf3>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4610      	mov	r0, r2
 800b382:	4619      	mov	r1, r3
 800b384:	f7f5 fc38 	bl	8000bf8 <__aeabi_d2f>
 800b388:	4603      	mov	r3, r0
 800b38a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b38e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b392:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b39a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b39e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b3a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b3a6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b5ec <turn45inR+0x39c>
 800b3aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	eeb0 2a47 	vmov.f32	s4, s14
 800b3b4:	eef0 1a46 	vmov.f32	s3, s12
 800b3b8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b5f8 <turn45inR+0x3a8>
 800b3bc:	eef0 0a66 	vmov.f32	s1, s13
 800b3c0:	ee00 3a10 	vmov	s0, r3
 800b3c4:	f7f7 fe0a 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b3c8:	4b87      	ldr	r3, [pc, #540]	; (800b5e8 <turn45inR+0x398>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b3ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f040 809d 	bne.w	800b512 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b400:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b404:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b408:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b40c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b5ec <turn45inR+0x39c>
 800b410:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	eeb0 2a47 	vmov.f32	s4, s14
 800b41a:	eef0 1a45 	vmov.f32	s3, s10
 800b41e:	eeb0 1a65 	vmov.f32	s2, s11
 800b422:	eef0 0a46 	vmov.f32	s1, s12
 800b426:	eeb0 0a66 	vmov.f32	s0, s13
 800b42a:	f7f7 fdd7 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b42e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b432:	2b01      	cmp	r3, #1
 800b434:	d10c      	bne.n	800b450 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b436:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b43a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b43e:	eeb0 1a47 	vmov.f32	s2, s14
 800b442:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b5fc <turn45inR+0x3ac>
 800b446:	eeb0 0a67 	vmov.f32	s0, s15
 800b44a:	f7f8 fd3d 	bl	8003ec8 <mollifier_slalom_table>
 800b44e:	e015      	b.n	800b47c <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b450:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b454:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b458:	eef1 7a67 	vneg.f32	s15, s15
 800b45c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b460:	eef0 2a66 	vmov.f32	s5, s13
 800b464:	eeb0 2a67 	vmov.f32	s4, s15
 800b468:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b5f8 <turn45inR+0x3a8>
 800b46c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b5f8 <turn45inR+0x3a8>
 800b470:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b5fc <turn45inR+0x3ac>
 800b474:	eeb0 0a47 	vmov.f32	s0, s14
 800b478:	f7f8 fbd6 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b484:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b488:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b48c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b498:	edd7 7a01 	vldr	s15, [r7, #4]
 800b49c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b4a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4a4:	eef0 7ae7 	vabs.f32	s15, s15
 800b4a8:	ee17 0a90 	vmov	r0, s15
 800b4ac:	f7f5 f874 	bl	8000598 <__aeabi_f2d>
 800b4b0:	f04f 0200 	mov.w	r2, #0
 800b4b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4b8:	f7f5 f9f0 	bl	800089c <__aeabi_ddiv>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	461d      	mov	r5, r3
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7f5 f866 	bl	8000598 <__aeabi_f2d>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	f7f5 f9e2 	bl	800089c <__aeabi_ddiv>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f04f 0200 	mov.w	r2, #0
 800b4e4:	4b43      	ldr	r3, [pc, #268]	; (800b5f4 <turn45inR+0x3a4>)
 800b4e6:	f7f4 fef9 	bl	80002dc <__adddf3>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f7f5 fb81 	bl	8000bf8 <__aeabi_d2f>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	ee02 3a10 	vmov	s4, r3
 800b4fe:	edd7 1a01 	vldr	s3, [r7, #4]
 800b502:	ed97 1a01 	vldr	s2, [r7, #4]
 800b506:	eef0 0a68 	vmov.f32	s1, s17
 800b50a:	eeb0 0a48 	vmov.f32	s0, s16
 800b50e:	f7f7 fd65 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b512:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b516:	2b01      	cmp	r3, #1
 800b518:	f240 80d0 	bls.w	800b6bc <turn45inR+0x46c>

		highspeed_mode = 1;
 800b51c:	4b32      	ldr	r3, [pc, #200]	; (800b5e8 <turn45inR+0x398>)
 800b51e:	2201      	movs	r2, #1
 800b520:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b522:	2301      	movs	r3, #1
 800b524:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b526:	2300      	movs	r3, #0
 800b528:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b52e:	2300      	movs	r3, #0
 800b530:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b532:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b536:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b53a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b53e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b542:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b546:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b54a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b54e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b5ec <turn45inR+0x39c>
 800b552:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	eeb0 2a47 	vmov.f32	s4, s14
 800b55c:	eef0 1a46 	vmov.f32	s3, s12
 800b560:	eeb0 1a66 	vmov.f32	s2, s13
 800b564:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b5f8 <turn45inR+0x3a8>
 800b568:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b5f0 <turn45inR+0x3a0>
 800b56c:	f7f7 fd36 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b570:	2300      	movs	r3, #0
 800b572:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b574:	2302      	movs	r3, #2
 800b576:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b578:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b57c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b580:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b584:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b588:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b590:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b594:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b598:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b59c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b5ec <turn45inR+0x39c>
 800b5a0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	eeb0 2a47 	vmov.f32	s4, s14
 800b5aa:	eef0 1a45 	vmov.f32	s3, s10
 800b5ae:	eeb0 1a65 	vmov.f32	s2, s11
 800b5b2:	eef0 0a46 	vmov.f32	s1, s12
 800b5b6:	eeb0 0a66 	vmov.f32	s0, s13
 800b5ba:	f7f7 fd0f 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b5be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d11c      	bne.n	800b600 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b5c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5ce:	eeb0 1a47 	vmov.f32	s2, s14
 800b5d2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b5fc <turn45inR+0x3ac>
 800b5d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b5da:	f7f8 fc75 	bl	8003ec8 <mollifier_slalom_table>
 800b5de:	e025      	b.n	800b62c <turn45inR+0x3dc>
 800b5e0:	c022ec18 	.word	0xc022ec18
 800b5e4:	405fd1de 	.word	0x405fd1de
 800b5e8:	20000808 	.word	0x20000808
 800b5ec:	42340000 	.word	0x42340000
 800b5f0:	42cd0000 	.word	0x42cd0000
 800b5f4:	408f4000 	.word	0x408f4000
 800b5f8:	00000000 	.word	0x00000000
 800b5fc:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b600:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b608:	eef1 7a67 	vneg.f32	s15, s15
 800b60c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b610:	eef0 2a66 	vmov.f32	s5, s13
 800b614:	eeb0 2a67 	vmov.f32	s4, s15
 800b618:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b5f8 <turn45inR+0x3a8>
 800b61c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b5f8 <turn45inR+0x3a8>
 800b620:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b5fc <turn45inR+0x3ac>
 800b624:	eeb0 0a47 	vmov.f32	s0, s14
 800b628:	f7f8 fafe 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b634:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b638:	3b02      	subs	r3, #2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f4 ff9a 	bl	8000574 <__aeabi_i2d>
 800b640:	a325      	add	r3, pc, #148	; (adr r3, 800b6d8 <turn45inR+0x488>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	f7f4 ffff 	bl	8000648 <__aeabi_dmul>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4614      	mov	r4, r2
 800b650:	461d      	mov	r5, r3
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	4618      	mov	r0, r3
 800b656:	f7f4 ff9f 	bl	8000598 <__aeabi_f2d>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f4 fe3b 	bl	80002dc <__adddf3>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4610      	mov	r0, r2
 800b66c:	4619      	mov	r1, r3
 800b66e:	f7f5 fac3 	bl	8000bf8 <__aeabi_d2f>
 800b672:	4603      	mov	r3, r0
 800b674:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b678:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b67c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b680:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b684:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b68c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b690:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b694:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b6d0 <turn45inR+0x480>
 800b698:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	eeb0 2a47 	vmov.f32	s4, s14
 800b6a2:	eef0 1a65 	vmov.f32	s3, s11
 800b6a6:	eeb0 1a46 	vmov.f32	s2, s12
 800b6aa:	eef0 0a66 	vmov.f32	s1, s13
 800b6ae:	ee00 3a10 	vmov	s0, r3
 800b6b2:	f7f7 fc93 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b6b6:	4b07      	ldr	r3, [pc, #28]	; (800b6d4 <turn45inR+0x484>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
	}

}
 800b6bc:	bf00      	nop
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	ecbd 8b02 	vpop	{d8}
 800b6c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6ca:	b004      	add	sp, #16
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	42340000 	.word	0x42340000
 800b6d4:	20000808 	.word	0x20000808
 800b6d8:	c022ec18 	.word	0xc022ec18
 800b6dc:	404fd1de 	.word	0x404fd1de

0800b6e0 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	b5b0      	push	{r4, r5, r7, lr}
 800b6e4:	ed2d 8b02 	vpush	{d8}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b6f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b6f4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b6f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	f040 80ac 	bne.w	800b85a <turn45inL+0x17a>
		highspeed_mode = 1;
 800b702:	4bdb      	ldr	r3, [pc, #876]	; (800ba70 <turn45inL+0x390>)
 800b704:	2201      	movs	r2, #1
 800b706:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b708:	2301      	movs	r3, #1
 800b70a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b718:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b71c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b720:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b72c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b730:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b734:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800ba80 <turn45inL+0x3a0>
 800b738:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	eeb0 2a47 	vmov.f32	s4, s14
 800b742:	eef0 1a46 	vmov.f32	s3, s12
 800b746:	eeb0 1a66 	vmov.f32	s2, s13
 800b74a:	eddf 0acc 	vldr	s1, [pc, #816]	; 800ba7c <turn45inL+0x39c>
 800b74e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800ba74 <turn45inL+0x394>
 800b752:	f7f7 fc43 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b756:	2300      	movs	r3, #0
 800b758:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b75a:	2302      	movs	r3, #2
 800b75c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b75e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b762:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b766:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b76a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b76e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b772:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b77a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b77e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b782:	eddf 4abf 	vldr	s9, [pc, #764]	; 800ba80 <turn45inL+0x3a0>
 800b786:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	eeb0 2a47 	vmov.f32	s4, s14
 800b790:	eef0 1a45 	vmov.f32	s3, s10
 800b794:	eeb0 1a65 	vmov.f32	s2, s11
 800b798:	eef0 0a46 	vmov.f32	s1, s12
 800b79c:	eeb0 0a66 	vmov.f32	s0, s13
 800b7a0:	f7f7 fc1c 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b7a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d10c      	bne.n	800b7c6 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b7ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7b4:	eeb0 1a47 	vmov.f32	s2, s14
 800b7b8:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ba80 <turn45inL+0x3a0>
 800b7bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c0:	f7f8 fb82 	bl	8003ec8 <mollifier_slalom_table>
 800b7c4:	e013      	b.n	800b7ee <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7d2:	eef0 2a66 	vmov.f32	s5, s13
 800b7d6:	eeb0 2a47 	vmov.f32	s4, s14
 800b7da:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800ba7c <turn45inL+0x39c>
 800b7de:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800ba7c <turn45inL+0x39c>
 800b7e2:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ba80 <turn45inL+0x3a0>
 800b7e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7ea:	f7f8 fa1d 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7f4 fecd 	bl	8000598 <__aeabi_f2d>
 800b7fe:	a39a      	add	r3, pc, #616	; (adr r3, 800ba68 <turn45inL+0x388>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fd6a 	bl	80002dc <__adddf3>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4610      	mov	r0, r2
 800b80e:	4619      	mov	r1, r3
 800b810:	f7f5 f9f2 	bl	8000bf8 <__aeabi_d2f>
 800b814:	4603      	mov	r3, r0
 800b816:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b81a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b81e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b822:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b82a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b82e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b832:	eddf 5a93 	vldr	s11, [pc, #588]	; 800ba80 <turn45inL+0x3a0>
 800b836:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	eeb0 2a47 	vmov.f32	s4, s14
 800b840:	eef0 1a46 	vmov.f32	s3, s12
 800b844:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800ba7c <turn45inL+0x39c>
 800b848:	eef0 0a66 	vmov.f32	s1, s13
 800b84c:	ee00 3a10 	vmov	s0, r3
 800b850:	f7f7 fbc4 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b854:	4b86      	ldr	r3, [pc, #536]	; (800ba70 <turn45inL+0x390>)
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b85a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f040 809b 	bne.w	800b99a <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b864:	2300      	movs	r3, #0
 800b866:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b868:	2300      	movs	r3, #0
 800b86a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b86c:	2302      	movs	r3, #2
 800b86e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b870:	2300      	movs	r3, #0
 800b872:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b874:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b878:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b87c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b880:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b884:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b888:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b88c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b890:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b894:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b898:	eddf 4a79 	vldr	s9, [pc, #484]	; 800ba80 <turn45inL+0x3a0>
 800b89c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	eeb0 2a47 	vmov.f32	s4, s14
 800b8a6:	eef0 1a45 	vmov.f32	s3, s10
 800b8aa:	eeb0 1a65 	vmov.f32	s2, s11
 800b8ae:	eef0 0a46 	vmov.f32	s1, s12
 800b8b2:	eeb0 0a66 	vmov.f32	s0, s13
 800b8b6:	f7f7 fb91 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b8ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d10c      	bne.n	800b8dc <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b8c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8ca:	eeb0 1a47 	vmov.f32	s2, s14
 800b8ce:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ba80 <turn45inL+0x3a0>
 800b8d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d6:	f7f8 faf7 	bl	8003ec8 <mollifier_slalom_table>
 800b8da:	e013      	b.n	800b904 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b8dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8e8:	eef0 2a66 	vmov.f32	s5, s13
 800b8ec:	eeb0 2a47 	vmov.f32	s4, s14
 800b8f0:	eddf 1a62 	vldr	s3, [pc, #392]	; 800ba7c <turn45inL+0x39c>
 800b8f4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ba7c <turn45inL+0x39c>
 800b8f8:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ba80 <turn45inL+0x3a0>
 800b8fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b900:	f7f8 f992 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b904:	2303      	movs	r3, #3
 800b906:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b90c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b910:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b914:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b920:	edd7 7a01 	vldr	s15, [r7, #4]
 800b924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b92c:	eef0 7ae7 	vabs.f32	s15, s15
 800b930:	ee17 0a90 	vmov	r0, s15
 800b934:	f7f4 fe30 	bl	8000598 <__aeabi_f2d>
 800b938:	f04f 0200 	mov.w	r2, #0
 800b93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b940:	f7f4 ffac 	bl	800089c <__aeabi_ddiv>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4614      	mov	r4, r2
 800b94a:	461d      	mov	r5, r3
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f4 fe22 	bl	8000598 <__aeabi_f2d>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 ff9e 	bl	800089c <__aeabi_ddiv>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4610      	mov	r0, r2
 800b966:	4619      	mov	r1, r3
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	4b42      	ldr	r3, [pc, #264]	; (800ba78 <turn45inL+0x398>)
 800b96e:	f7f4 fcb5 	bl	80002dc <__adddf3>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b976:	4610      	mov	r0, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f7f5 f93d 	bl	8000bf8 <__aeabi_d2f>
 800b97e:	4603      	mov	r3, r0
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	ee02 3a10 	vmov	s4, r3
 800b986:	edd7 1a01 	vldr	s3, [r7, #4]
 800b98a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b98e:	eef0 0a68 	vmov.f32	s1, s17
 800b992:	eeb0 0a48 	vmov.f32	s0, s16
 800b996:	f7f7 fb21 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b99a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	f240 80cc 	bls.w	800bb3c <turn45inL+0x45c>

		highspeed_mode = 1;
 800b9a4:	4b32      	ldr	r3, [pc, #200]	; (800ba70 <turn45inL+0x390>)
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9ba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9d6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ba80 <turn45inL+0x3a0>
 800b9da:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	eeb0 2a47 	vmov.f32	s4, s14
 800b9e4:	eef0 1a46 	vmov.f32	s3, s12
 800b9e8:	eeb0 1a66 	vmov.f32	s2, s13
 800b9ec:	eddf 0a23 	vldr	s1, [pc, #140]	; 800ba7c <turn45inL+0x39c>
 800b9f0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800ba74 <turn45inL+0x394>
 800b9f4:	f7f7 faf2 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba00:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba08:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba0c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba1c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba20:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba24:	eddf 4a16 	vldr	s9, [pc, #88]	; 800ba80 <turn45inL+0x3a0>
 800ba28:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	eeb0 2a47 	vmov.f32	s4, s14
 800ba32:	eef0 1a45 	vmov.f32	s3, s10
 800ba36:	eeb0 1a65 	vmov.f32	s2, s11
 800ba3a:	eef0 0a46 	vmov.f32	s1, s12
 800ba3e:	eeb0 0a66 	vmov.f32	s0, s13
 800ba42:	f7f7 facb 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ba46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d11a      	bne.n	800ba84 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba56:	eeb0 1a47 	vmov.f32	s2, s14
 800ba5a:	eddf 0a09 	vldr	s1, [pc, #36]	; 800ba80 <turn45inL+0x3a0>
 800ba5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba62:	f7f8 fa31 	bl	8003ec8 <mollifier_slalom_table>
 800ba66:	e021      	b.n	800baac <turn45inL+0x3cc>
 800ba68:	c022ec18 	.word	0xc022ec18
 800ba6c:	405fd1de 	.word	0x405fd1de
 800ba70:	20000808 	.word	0x20000808
 800ba74:	42cd0000 	.word	0x42cd0000
 800ba78:	408f4000 	.word	0x408f4000
 800ba7c:	00000000 	.word	0x00000000
 800ba80:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba8c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba90:	eef0 2a66 	vmov.f32	s5, s13
 800ba94:	eeb0 2a47 	vmov.f32	s4, s14
 800ba98:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ba7c <turn45inL+0x39c>
 800ba9c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ba7c <turn45inL+0x39c>
 800baa0:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ba80 <turn45inL+0x3a0>
 800baa4:	eeb0 0a67 	vmov.f32	s0, s15
 800baa8:	f7f8 f8be 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800baac:	2300      	movs	r3, #0
 800baae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bab4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bab8:	3b02      	subs	r3, #2
 800baba:	4618      	mov	r0, r3
 800babc:	f7f4 fd5a 	bl	8000574 <__aeabi_i2d>
 800bac0:	a325      	add	r3, pc, #148	; (adr r3, 800bb58 <turn45inL+0x478>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7f4 fdbf 	bl	8000648 <__aeabi_dmul>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4614      	mov	r4, r2
 800bad0:	461d      	mov	r5, r3
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f4 fd5f 	bl	8000598 <__aeabi_f2d>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4620      	mov	r0, r4
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7f4 fbfb 	bl	80002dc <__adddf3>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4610      	mov	r0, r2
 800baec:	4619      	mov	r1, r3
 800baee:	f7f5 f883 	bl	8000bf8 <__aeabi_d2f>
 800baf2:	4603      	mov	r3, r0
 800baf4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800baf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bafc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb0c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb10:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb14:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bb50 <turn45inL+0x470>
 800bb18:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb22:	eef0 1a65 	vmov.f32	s3, s11
 800bb26:	eeb0 1a46 	vmov.f32	s2, s12
 800bb2a:	eef0 0a66 	vmov.f32	s1, s13
 800bb2e:	ee00 3a10 	vmov	s0, r3
 800bb32:	f7f7 fa53 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bb36:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <turn45inL+0x474>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
	}

}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	ecbd 8b02 	vpop	{d8}
 800bb46:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bb4a:	b004      	add	sp, #16
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	42340000 	.word	0x42340000
 800bb54:	20000808 	.word	0x20000808
 800bb58:	c022ec18 	.word	0xc022ec18
 800bb5c:	404fd1de 	.word	0x404fd1de

0800bb60 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bb60:	b084      	sub	sp, #16
 800bb62:	b5b0      	push	{r4, r5, r7, lr}
 800bb64:	ed2d 8b02 	vpush	{d8}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb74:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bb78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	f040 80ae 	bne.w	800bcde <turn135inR+0x17e>
		highspeed_mode = 1;
 800bb82:	4bdd      	ldr	r3, [pc, #884]	; (800bef8 <turn135inR+0x398>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bba0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bbb0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbb4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800befc <turn135inR+0x39c>
 800bbb8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	eeb0 2a47 	vmov.f32	s4, s14
 800bbc2:	eef0 1a46 	vmov.f32	s3, s12
 800bbc6:	eeb0 1a66 	vmov.f32	s2, s13
 800bbca:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bf08 <turn135inR+0x3a8>
 800bbce:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bf00 <turn135inR+0x3a0>
 800bbd2:	f7f7 fa03 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbda:	2302      	movs	r3, #2
 800bbdc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbde:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbe2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbe6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbea:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbf2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbfa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbfe:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc02:	eddf 4abe 	vldr	s9, [pc, #760]	; 800befc <turn135inR+0x39c>
 800bc06:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	eeb0 2a47 	vmov.f32	s4, s14
 800bc10:	eef0 1a45 	vmov.f32	s3, s10
 800bc14:	eeb0 1a65 	vmov.f32	s2, s11
 800bc18:	eef0 0a46 	vmov.f32	s1, s12
 800bc1c:	eeb0 0a66 	vmov.f32	s0, s13
 800bc20:	f7f7 f9dc 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bc24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d10c      	bne.n	800bc46 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc34:	eeb0 1a47 	vmov.f32	s2, s14
 800bc38:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bf0c <turn135inR+0x3ac>
 800bc3c:	eeb0 0a67 	vmov.f32	s0, s15
 800bc40:	f7f8 f942 	bl	8003ec8 <mollifier_slalom_table>
 800bc44:	e015      	b.n	800bc72 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc4e:	eef1 7a67 	vneg.f32	s15, s15
 800bc52:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc56:	eef0 2a66 	vmov.f32	s5, s13
 800bc5a:	eeb0 2a67 	vmov.f32	s4, s15
 800bc5e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bf08 <turn135inR+0x3a8>
 800bc62:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bf08 <turn135inR+0x3a8>
 800bc66:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bf0c <turn135inR+0x3ac>
 800bc6a:	eeb0 0a47 	vmov.f32	s0, s14
 800bc6e:	f7f7 ffdb 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7f4 fc8b 	bl	8000598 <__aeabi_f2d>
 800bc82:	a39b      	add	r3, pc, #620	; (adr r3, 800bef0 <turn135inR+0x390>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fb28 	bl	80002dc <__adddf3>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4610      	mov	r0, r2
 800bc92:	4619      	mov	r1, r3
 800bc94:	f7f4 ffb0 	bl	8000bf8 <__aeabi_d2f>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bca2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcae:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bcb2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bcb6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800befc <turn135inR+0x39c>
 800bcba:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	eeb0 2a47 	vmov.f32	s4, s14
 800bcc4:	eef0 1a46 	vmov.f32	s3, s12
 800bcc8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bf08 <turn135inR+0x3a8>
 800bccc:	eef0 0a66 	vmov.f32	s1, s13
 800bcd0:	ee00 3a10 	vmov	s0, r3
 800bcd4:	f7f7 f982 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bcd8:	4b87      	ldr	r3, [pc, #540]	; (800bef8 <turn135inR+0x398>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bcde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 809d 	bne.w	800be22 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bce8:	2300      	movs	r3, #0
 800bcea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcf8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcfc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd00:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd04:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd14:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd18:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd1c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800befc <turn135inR+0x39c>
 800bd20:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	eeb0 2a47 	vmov.f32	s4, s14
 800bd2a:	eef0 1a45 	vmov.f32	s3, s10
 800bd2e:	eeb0 1a65 	vmov.f32	s2, s11
 800bd32:	eef0 0a46 	vmov.f32	s1, s12
 800bd36:	eeb0 0a66 	vmov.f32	s0, s13
 800bd3a:	f7f7 f94f 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bd3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d10c      	bne.n	800bd60 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd4e:	eeb0 1a47 	vmov.f32	s2, s14
 800bd52:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bf0c <turn135inR+0x3ac>
 800bd56:	eeb0 0a67 	vmov.f32	s0, s15
 800bd5a:	f7f8 f8b5 	bl	8003ec8 <mollifier_slalom_table>
 800bd5e:	e015      	b.n	800bd8c <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd68:	eef1 7a67 	vneg.f32	s15, s15
 800bd6c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd70:	eef0 2a66 	vmov.f32	s5, s13
 800bd74:	eeb0 2a67 	vmov.f32	s4, s15
 800bd78:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bf08 <turn135inR+0x3a8>
 800bd7c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bf08 <turn135inR+0x3a8>
 800bd80:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bf0c <turn135inR+0x3ac>
 800bd84:	eeb0 0a47 	vmov.f32	s0, s14
 800bd88:	f7f7 ff4e 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bd94:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bd98:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bd9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bda0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bda4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bdac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bdb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb4:	eef0 7ae7 	vabs.f32	s15, s15
 800bdb8:	ee17 0a90 	vmov	r0, s15
 800bdbc:	f7f4 fbec 	bl	8000598 <__aeabi_f2d>
 800bdc0:	f04f 0200 	mov.w	r2, #0
 800bdc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdc8:	f7f4 fd68 	bl	800089c <__aeabi_ddiv>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	461d      	mov	r5, r3
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f4 fbde 	bl	8000598 <__aeabi_f2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fd5a 	bl	800089c <__aeabi_ddiv>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4610      	mov	r0, r2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	4b43      	ldr	r3, [pc, #268]	; (800bf04 <turn135inR+0x3a4>)
 800bdf6:	f7f4 fa71 	bl	80002dc <__adddf3>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bdfe:	4610      	mov	r0, r2
 800be00:	4619      	mov	r1, r3
 800be02:	f7f4 fef9 	bl	8000bf8 <__aeabi_d2f>
 800be06:	4603      	mov	r3, r0
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	ee02 3a10 	vmov	s4, r3
 800be0e:	edd7 1a01 	vldr	s3, [r7, #4]
 800be12:	ed97 1a01 	vldr	s2, [r7, #4]
 800be16:	eef0 0a68 	vmov.f32	s1, s17
 800be1a:	eeb0 0a48 	vmov.f32	s0, s16
 800be1e:	f7f7 f8dd 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800be22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be26:	2b01      	cmp	r3, #1
 800be28:	f240 80d0 	bls.w	800bfcc <turn135inR+0x46c>

		highspeed_mode = 1;
 800be2c:	4b32      	ldr	r3, [pc, #200]	; (800bef8 <turn135inR+0x398>)
 800be2e:	2201      	movs	r2, #1
 800be30:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800be32:	2301      	movs	r3, #1
 800be34:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be36:	2300      	movs	r3, #0
 800be38:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be3e:	2300      	movs	r3, #0
 800be40:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be42:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be56:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be5a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be5e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800befc <turn135inR+0x39c>
 800be62:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	eeb0 2a47 	vmov.f32	s4, s14
 800be6c:	eef0 1a46 	vmov.f32	s3, s12
 800be70:	eeb0 1a66 	vmov.f32	s2, s13
 800be74:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bf08 <turn135inR+0x3a8>
 800be78:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bf00 <turn135inR+0x3a0>
 800be7c:	f7f7 f8ae 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800be80:	2300      	movs	r3, #0
 800be82:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be84:	2302      	movs	r3, #2
 800be86:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be88:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be8c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be90:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be94:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bea4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bea8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800beac:	eddf 4a13 	vldr	s9, [pc, #76]	; 800befc <turn135inR+0x39c>
 800beb0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	eeb0 2a47 	vmov.f32	s4, s14
 800beba:	eef0 1a45 	vmov.f32	s3, s10
 800bebe:	eeb0 1a65 	vmov.f32	s2, s11
 800bec2:	eef0 0a46 	vmov.f32	s1, s12
 800bec6:	eeb0 0a66 	vmov.f32	s0, s13
 800beca:	f7f7 f887 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bece:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d11c      	bne.n	800bf10 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bed6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800beda:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bede:	eeb0 1a47 	vmov.f32	s2, s14
 800bee2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bf0c <turn135inR+0x3ac>
 800bee6:	eeb0 0a67 	vmov.f32	s0, s15
 800beea:	f7f7 ffed 	bl	8003ec8 <mollifier_slalom_table>
 800beee:	e025      	b.n	800bf3c <turn135inR+0x3dc>
 800bef0:	c022ec18 	.word	0xc022ec18
 800bef4:	405fd1de 	.word	0x405fd1de
 800bef8:	20000808 	.word	0x20000808
 800befc:	42340000 	.word	0x42340000
 800bf00:	42cd0000 	.word	0x42cd0000
 800bf04:	408f4000 	.word	0x408f4000
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf18:	eef1 7a67 	vneg.f32	s15, s15
 800bf1c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf20:	eef0 2a66 	vmov.f32	s5, s13
 800bf24:	eeb0 2a67 	vmov.f32	s4, s15
 800bf28:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bf08 <turn135inR+0x3a8>
 800bf2c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bf08 <turn135inR+0x3a8>
 800bf30:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bf0c <turn135inR+0x3ac>
 800bf34:	eeb0 0a47 	vmov.f32	s0, s14
 800bf38:	f7f7 fe76 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf48:	3b02      	subs	r3, #2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7f4 fb12 	bl	8000574 <__aeabi_i2d>
 800bf50:	a325      	add	r3, pc, #148	; (adr r3, 800bfe8 <turn135inR+0x488>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f7f4 fb77 	bl	8000648 <__aeabi_dmul>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4614      	mov	r4, r2
 800bf60:	461d      	mov	r5, r3
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f4 fb17 	bl	8000598 <__aeabi_f2d>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7f4 f9b3 	bl	80002dc <__adddf3>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f7f4 fe3b 	bl	8000bf8 <__aeabi_d2f>
 800bf82:	4603      	mov	r3, r0
 800bf84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf88:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf8c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf9c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bfa0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfa4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bfe0 <turn135inR+0x480>
 800bfa8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	eeb0 2a47 	vmov.f32	s4, s14
 800bfb2:	eef0 1a65 	vmov.f32	s3, s11
 800bfb6:	eeb0 1a46 	vmov.f32	s2, s12
 800bfba:	eef0 0a66 	vmov.f32	s1, s13
 800bfbe:	ee00 3a10 	vmov	s0, r3
 800bfc2:	f7f7 f80b 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bfc6:	4b07      	ldr	r3, [pc, #28]	; (800bfe4 <turn135inR+0x484>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
	}

}
 800bfcc:	bf00      	nop
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	ecbd 8b02 	vpop	{d8}
 800bfd6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bfda:	b004      	add	sp, #16
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	42340000 	.word	0x42340000
 800bfe4:	20000808 	.word	0x20000808
 800bfe8:	c022ec18 	.word	0xc022ec18
 800bfec:	404fd1de 	.word	0x404fd1de

0800bff0 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bff0:	b084      	sub	sp, #16
 800bff2:	b5b0      	push	{r4, r5, r7, lr}
 800bff4:	ed2d 8b02 	vpush	{d8}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c004:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c008:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	f040 80ac 	bne.w	800c16a <turn135inL+0x17a>
		highspeed_mode = 1;
 800c012:	4bdb      	ldr	r3, [pc, #876]	; (800c380 <turn135inL+0x390>)
 800c014:	2201      	movs	r2, #1
 800c016:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c018:	2301      	movs	r3, #1
 800c01a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c024:	2300      	movs	r3, #0
 800c026:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c028:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c02c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c030:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c034:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c03c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c040:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c044:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c384 <turn135inL+0x394>
 800c048:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	eeb0 2a47 	vmov.f32	s4, s14
 800c052:	eef0 1a46 	vmov.f32	s3, s12
 800c056:	eeb0 1a66 	vmov.f32	s2, s13
 800c05a:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c390 <turn135inL+0x3a0>
 800c05e:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c388 <turn135inL+0x398>
 800c062:	f7f6 ffbb 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c066:	2300      	movs	r3, #0
 800c068:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c06a:	2302      	movs	r3, #2
 800c06c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c06e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c072:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c076:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c07a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c07e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c082:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c08a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c08e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c092:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c384 <turn135inL+0x394>
 800c096:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	eeb0 2a47 	vmov.f32	s4, s14
 800c0a0:	eef0 1a45 	vmov.f32	s3, s10
 800c0a4:	eeb0 1a65 	vmov.f32	s2, s11
 800c0a8:	eef0 0a46 	vmov.f32	s1, s12
 800c0ac:	eeb0 0a66 	vmov.f32	s0, s13
 800c0b0:	f7f6 ff94 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c0b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d10c      	bne.n	800c0d6 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c0bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0c4:	eeb0 1a47 	vmov.f32	s2, s14
 800c0c8:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c394 <turn135inL+0x3a4>
 800c0cc:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d0:	f7f7 fefa 	bl	8003ec8 <mollifier_slalom_table>
 800c0d4:	e013      	b.n	800c0fe <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0de:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0e2:	eef0 2a66 	vmov.f32	s5, s13
 800c0e6:	eeb0 2a47 	vmov.f32	s4, s14
 800c0ea:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c390 <turn135inL+0x3a0>
 800c0ee:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c390 <turn135inL+0x3a0>
 800c0f2:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c394 <turn135inL+0x3a4>
 800c0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800c0fa:	f7f7 fd95 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f4 fa45 	bl	8000598 <__aeabi_f2d>
 800c10e:	a39a      	add	r3, pc, #616	; (adr r3, 800c378 <turn135inL+0x388>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 f8e2 	bl	80002dc <__adddf3>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4610      	mov	r0, r2
 800c11e:	4619      	mov	r1, r3
 800c120:	f7f4 fd6a 	bl	8000bf8 <__aeabi_d2f>
 800c124:	4603      	mov	r3, r0
 800c126:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c12a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c12e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c132:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c13a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c13e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c142:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c384 <turn135inL+0x394>
 800c146:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	eeb0 2a47 	vmov.f32	s4, s14
 800c150:	eef0 1a46 	vmov.f32	s3, s12
 800c154:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c390 <turn135inL+0x3a0>
 800c158:	eef0 0a66 	vmov.f32	s1, s13
 800c15c:	ee00 3a10 	vmov	s0, r3
 800c160:	f7f6 ff3c 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c164:	4b86      	ldr	r3, [pc, #536]	; (800c380 <turn135inL+0x390>)
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c16a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f040 809b 	bne.w	800c2aa <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c174:	2300      	movs	r3, #0
 800c176:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c178:	2300      	movs	r3, #0
 800c17a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c17c:	2302      	movs	r3, #2
 800c17e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c180:	2300      	movs	r3, #0
 800c182:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c184:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c188:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c18c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c190:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c194:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1a0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1a4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1a8:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c384 <turn135inL+0x394>
 800c1ac:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	eeb0 2a47 	vmov.f32	s4, s14
 800c1b6:	eef0 1a45 	vmov.f32	s3, s10
 800c1ba:	eeb0 1a65 	vmov.f32	s2, s11
 800c1be:	eef0 0a46 	vmov.f32	s1, s12
 800c1c2:	eeb0 0a66 	vmov.f32	s0, s13
 800c1c6:	f7f6 ff09 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c1ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d10c      	bne.n	800c1ec <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c1d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1da:	eeb0 1a47 	vmov.f32	s2, s14
 800c1de:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c394 <turn135inL+0x3a4>
 800c1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1e6:	f7f7 fe6f 	bl	8003ec8 <mollifier_slalom_table>
 800c1ea:	e013      	b.n	800c214 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c1ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c1f8:	eef0 2a66 	vmov.f32	s5, s13
 800c1fc:	eeb0 2a47 	vmov.f32	s4, s14
 800c200:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c390 <turn135inL+0x3a0>
 800c204:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c390 <turn135inL+0x3a0>
 800c208:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c394 <turn135inL+0x3a4>
 800c20c:	eeb0 0a67 	vmov.f32	s0, s15
 800c210:	f7f7 fd0a 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c214:	2303      	movs	r3, #3
 800c216:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c21c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c220:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c224:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c22c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c230:	edd7 7a01 	vldr	s15, [r7, #4]
 800c234:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c23c:	eef0 7ae7 	vabs.f32	s15, s15
 800c240:	ee17 0a90 	vmov	r0, s15
 800c244:	f7f4 f9a8 	bl	8000598 <__aeabi_f2d>
 800c248:	f04f 0200 	mov.w	r2, #0
 800c24c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c250:	f7f4 fb24 	bl	800089c <__aeabi_ddiv>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4614      	mov	r4, r2
 800c25a:	461d      	mov	r5, r3
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f4 f99a 	bl	8000598 <__aeabi_f2d>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4620      	mov	r0, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 fb16 	bl	800089c <__aeabi_ddiv>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4610      	mov	r0, r2
 800c276:	4619      	mov	r1, r3
 800c278:	f04f 0200 	mov.w	r2, #0
 800c27c:	4b43      	ldr	r3, [pc, #268]	; (800c38c <turn135inL+0x39c>)
 800c27e:	f7f4 f82d 	bl	80002dc <__adddf3>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c286:	4610      	mov	r0, r2
 800c288:	4619      	mov	r1, r3
 800c28a:	f7f4 fcb5 	bl	8000bf8 <__aeabi_d2f>
 800c28e:	4603      	mov	r3, r0
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	ee02 3a10 	vmov	s4, r3
 800c296:	edd7 1a01 	vldr	s3, [r7, #4]
 800c29a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c29e:	eef0 0a68 	vmov.f32	s1, s17
 800c2a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c2a6:	f7f6 fe99 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800c2aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	f240 80ce 	bls.w	800c450 <turn135inL+0x460>

		highspeed_mode = 1;
 800c2b4:	4b32      	ldr	r3, [pc, #200]	; (800c380 <turn135inL+0x390>)
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2ca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2de:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c2e2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2e6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c384 <turn135inL+0x394>
 800c2ea:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	eeb0 2a47 	vmov.f32	s4, s14
 800c2f4:	eef0 1a46 	vmov.f32	s3, s12
 800c2f8:	eeb0 1a66 	vmov.f32	s2, s13
 800c2fc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c390 <turn135inL+0x3a0>
 800c300:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c388 <turn135inL+0x398>
 800c304:	f7f6 fe6a 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c308:	2300      	movs	r3, #0
 800c30a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c30c:	2302      	movs	r3, #2
 800c30e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c310:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c314:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c318:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c31c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c320:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c32c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c330:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c334:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c384 <turn135inL+0x394>
 800c338:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	eeb0 2a47 	vmov.f32	s4, s14
 800c342:	eef0 1a45 	vmov.f32	s3, s10
 800c346:	eeb0 1a65 	vmov.f32	s2, s11
 800c34a:	eef0 0a46 	vmov.f32	s1, s12
 800c34e:	eeb0 0a66 	vmov.f32	s0, s13
 800c352:	f7f6 fe43 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c356:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d11c      	bne.n	800c398 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c35e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c362:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c366:	eeb0 1a47 	vmov.f32	s2, s14
 800c36a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c394 <turn135inL+0x3a4>
 800c36e:	eeb0 0a67 	vmov.f32	s0, s15
 800c372:	f7f7 fda9 	bl	8003ec8 <mollifier_slalom_table>
 800c376:	e023      	b.n	800c3c0 <turn135inL+0x3d0>
 800c378:	c022ec18 	.word	0xc022ec18
 800c37c:	405fd1de 	.word	0x405fd1de
 800c380:	20000808 	.word	0x20000808
 800c384:	42340000 	.word	0x42340000
 800c388:	42cd0000 	.word	0x42cd0000
 800c38c:	408f4000 	.word	0x408f4000
 800c390:	00000000 	.word	0x00000000
 800c394:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c39c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3a4:	eef0 2a66 	vmov.f32	s5, s13
 800c3a8:	eeb0 2a47 	vmov.f32	s4, s14
 800c3ac:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c390 <turn135inL+0x3a0>
 800c3b0:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c390 <turn135inL+0x3a0>
 800c3b4:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c394 <turn135inL+0x3a4>
 800c3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c3bc:	f7f7 fc34 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3cc:	3b02      	subs	r3, #2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7f4 f8d0 	bl	8000574 <__aeabi_i2d>
 800c3d4:	a326      	add	r3, pc, #152	; (adr r3, 800c470 <turn135inL+0x480>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	f7f4 f935 	bl	8000648 <__aeabi_dmul>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	461d      	mov	r5, r3
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f4 f8d5 	bl	8000598 <__aeabi_f2d>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7f3 ff71 	bl	80002dc <__adddf3>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4610      	mov	r0, r2
 800c400:	4619      	mov	r1, r3
 800c402:	f7f4 fbf9 	bl	8000bf8 <__aeabi_d2f>
 800c406:	4603      	mov	r3, r0
 800c408:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c40c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c410:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c414:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c418:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c41c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c420:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c424:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c428:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c468 <turn135inL+0x478>
 800c42c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	eeb0 2a47 	vmov.f32	s4, s14
 800c436:	eef0 1a65 	vmov.f32	s3, s11
 800c43a:	eeb0 1a46 	vmov.f32	s2, s12
 800c43e:	eef0 0a66 	vmov.f32	s1, s13
 800c442:	ee00 3a10 	vmov	s0, r3
 800c446:	f7f6 fdc9 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c44a:	4b08      	ldr	r3, [pc, #32]	; (800c46c <turn135inL+0x47c>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	701a      	strb	r2, [r3, #0]
	}

}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	ecbd 8b02 	vpop	{d8}
 800c45a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c45e:	b004      	add	sp, #16
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	f3af 8000 	nop.w
 800c468:	42340000 	.word	0x42340000
 800c46c:	20000808 	.word	0x20000808
 800c470:	c022ec18 	.word	0xc022ec18
 800c474:	404fd1de 	.word	0x404fd1de

0800c478 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c478:	b084      	sub	sp, #16
 800c47a:	b5b0      	push	{r4, r5, r7, lr}
 800c47c:	ed2d 8b02 	vpush	{d8}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c48c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c490:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c494:	2b01      	cmp	r3, #1
 800c496:	f040 80a5 	bne.w	800c5e4 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c49a:	4be9      	ldr	r3, [pc, #932]	; (800c840 <turn45outR+0x3c8>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4b4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4c8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4cc:	eddf 5add 	vldr	s11, [pc, #884]	; 800c844 <turn45outR+0x3cc>
 800c4d0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	eeb0 2a47 	vmov.f32	s4, s14
 800c4da:	eef0 1a46 	vmov.f32	s3, s12
 800c4de:	eeb0 1a66 	vmov.f32	s2, s13
 800c4e2:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c848 <turn45outR+0x3d0>
 800c4e6:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c84c <turn45outR+0x3d4>
 800c4ea:	f7f6 fd77 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4fa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4fe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c502:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c506:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c50a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c50e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c512:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c516:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c51a:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c844 <turn45outR+0x3cc>
 800c51e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	eeb0 2a47 	vmov.f32	s4, s14
 800c528:	eef0 1a45 	vmov.f32	s3, s10
 800c52c:	eeb0 1a65 	vmov.f32	s2, s11
 800c530:	eef0 0a46 	vmov.f32	s1, s12
 800c534:	eeb0 0a66 	vmov.f32	s0, s13
 800c538:	f7f6 fd50 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c53c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c540:	2b01      	cmp	r3, #1
 800c542:	d10c      	bne.n	800c55e <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c544:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c548:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c54c:	eeb0 1a47 	vmov.f32	s2, s14
 800c550:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c850 <turn45outR+0x3d8>
 800c554:	eeb0 0a67 	vmov.f32	s0, s15
 800c558:	f7f7 fcb6 	bl	8003ec8 <mollifier_slalom_table>
 800c55c:	e015      	b.n	800c58a <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c55e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c562:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c566:	eef1 7a67 	vneg.f32	s15, s15
 800c56a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c56e:	eef0 2a66 	vmov.f32	s5, s13
 800c572:	eeb0 2a67 	vmov.f32	s4, s15
 800c576:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c848 <turn45outR+0x3d0>
 800c57a:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c848 <turn45outR+0x3d0>
 800c57e:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c850 <turn45outR+0x3d8>
 800c582:	eeb0 0a47 	vmov.f32	s0, s14
 800c586:	f7f7 fb4f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c58e:	2300      	movs	r3, #0
 800c590:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c592:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c596:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c854 <turn45outR+0x3dc>
 800c59a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c59e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5b2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5b6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5ba:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c844 <turn45outR+0x3cc>
 800c5be:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c5c8:	eef0 1a65 	vmov.f32	s3, s11
 800c5cc:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c848 <turn45outR+0x3d0>
 800c5d0:	eef0 0a46 	vmov.f32	s1, s12
 800c5d4:	eeb0 0a66 	vmov.f32	s0, s13
 800c5d8:	f7f6 fd00 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c5dc:	4b98      	ldr	r3, [pc, #608]	; (800c840 <turn45outR+0x3c8>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c5e2:	e123      	b.n	800c82c <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c5e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	f240 8082 	bls.w	800c6f2 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c5ee:	4b94      	ldr	r3, [pc, #592]	; (800c840 <turn45outR+0x3c8>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c600:	2300      	movs	r3, #0
 800c602:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c604:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c608:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c60c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c610:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c614:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c618:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c61c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c620:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c624:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c628:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c844 <turn45outR+0x3cc>
 800c62c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	eeb0 2a47 	vmov.f32	s4, s14
 800c636:	eef0 1a45 	vmov.f32	s3, s10
 800c63a:	eeb0 1a65 	vmov.f32	s2, s11
 800c63e:	eef0 0a46 	vmov.f32	s1, s12
 800c642:	eeb0 0a66 	vmov.f32	s0, s13
 800c646:	f7f6 fcc9 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c64a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d10c      	bne.n	800c66c <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c652:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c656:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c65a:	eeb0 1a47 	vmov.f32	s2, s14
 800c65e:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c850 <turn45outR+0x3d8>
 800c662:	eeb0 0a67 	vmov.f32	s0, s15
 800c666:	f7f7 fc2f 	bl	8003ec8 <mollifier_slalom_table>
 800c66a:	e015      	b.n	800c698 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c66c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c670:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c674:	eef1 7a67 	vneg.f32	s15, s15
 800c678:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c67c:	eef0 2a66 	vmov.f32	s5, s13
 800c680:	eeb0 2a67 	vmov.f32	s4, s15
 800c684:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c848 <turn45outR+0x3d0>
 800c688:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c848 <turn45outR+0x3d0>
 800c68c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c850 <turn45outR+0x3d8>
 800c690:	eeb0 0a47 	vmov.f32	s0, s14
 800c694:	f7f7 fac8 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800c698:	2300      	movs	r3, #0
 800c69a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6a4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c854 <turn45outR+0x3dc>
 800c6a8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6c4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6c8:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c844 <turn45outR+0x3cc>
 800c6cc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c6d6:	eef0 1a65 	vmov.f32	s3, s11
 800c6da:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c848 <turn45outR+0x3d0>
 800c6de:	eef0 0a46 	vmov.f32	s1, s12
 800c6e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c6e6:	f7f6 fc79 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c6ea:	4b55      	ldr	r3, [pc, #340]	; (800c840 <turn45outR+0x3c8>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	701a      	strb	r2, [r3, #0]
}
 800c6f0:	e09c      	b.n	800c82c <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c702:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c706:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c70a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c70e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c712:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c716:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c71a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c71e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c722:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c726:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c844 <turn45outR+0x3cc>
 800c72a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	eeb0 2a47 	vmov.f32	s4, s14
 800c734:	eef0 1a45 	vmov.f32	s3, s10
 800c738:	eeb0 1a65 	vmov.f32	s2, s11
 800c73c:	eef0 0a46 	vmov.f32	s1, s12
 800c740:	eeb0 0a66 	vmov.f32	s0, s13
 800c744:	f7f6 fc4a 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d10c      	bne.n	800c76a <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c754:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c758:	eeb0 1a47 	vmov.f32	s2, s14
 800c75c:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c850 <turn45outR+0x3d8>
 800c760:	eeb0 0a67 	vmov.f32	s0, s15
 800c764:	f7f7 fbb0 	bl	8003ec8 <mollifier_slalom_table>
 800c768:	e015      	b.n	800c796 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c76a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c76e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c772:	eef1 7a67 	vneg.f32	s15, s15
 800c776:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c77a:	eef0 2a66 	vmov.f32	s5, s13
 800c77e:	eeb0 2a67 	vmov.f32	s4, s15
 800c782:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c848 <turn45outR+0x3d0>
 800c786:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c848 <turn45outR+0x3d0>
 800c78a:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c850 <turn45outR+0x3d8>
 800c78e:	eeb0 0a47 	vmov.f32	s0, s14
 800c792:	f7f7 fa49 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c796:	2301      	movs	r3, #1
 800c798:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c79e:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c7a2:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c7a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7be:	eef0 7ae7 	vabs.f32	s15, s15
 800c7c2:	ee17 0a90 	vmov	r0, s15
 800c7c6:	f7f3 fee7 	bl	8000598 <__aeabi_f2d>
 800c7ca:	f04f 0200 	mov.w	r2, #0
 800c7ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7d2:	f7f4 f863 	bl	800089c <__aeabi_ddiv>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4614      	mov	r4, r2
 800c7dc:	461d      	mov	r5, r3
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f3 fed9 	bl	8000598 <__aeabi_f2d>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7f4 f855 	bl	800089c <__aeabi_ddiv>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	f04f 0200 	mov.w	r2, #0
 800c7fe:	4b16      	ldr	r3, [pc, #88]	; (800c858 <turn45outR+0x3e0>)
 800c800:	f7f3 fd6c 	bl	80002dc <__adddf3>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c808:	4610      	mov	r0, r2
 800c80a:	4619      	mov	r1, r3
 800c80c:	f7f4 f9f4 	bl	8000bf8 <__aeabi_d2f>
 800c810:	4603      	mov	r3, r0
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	ee02 3a10 	vmov	s4, r3
 800c818:	edd7 1a01 	vldr	s3, [r7, #4]
 800c81c:	ed97 1a01 	vldr	s2, [r7, #4]
 800c820:	eef0 0a68 	vmov.f32	s1, s17
 800c824:	eeb0 0a48 	vmov.f32	s0, s16
 800c828:	f7f6 fbd8 	bl	8002fdc <straight_table2>
}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	ecbd 8b02 	vpop	{d8}
 800c836:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c83a:	b004      	add	sp, #16
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	20000808 	.word	0x20000808
 800c844:	42340000 	.word	0x42340000
 800c848:	00000000 	.word	0x00000000
 800c84c:	42c4477b 	.word	0x42c4477b
 800c850:	c2340000 	.word	0xc2340000
 800c854:	42b40000 	.word	0x42b40000
 800c858:	408f4000 	.word	0x408f4000

0800c85c <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c85c:	b084      	sub	sp, #16
 800c85e:	b5b0      	push	{r4, r5, r7, lr}
 800c860:	ed2d 8b02 	vpush	{d8}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c86c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c870:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c874:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c878:	2b01      	cmp	r3, #1
 800c87a:	f040 80a3 	bne.w	800c9c4 <turn45outL+0x168>
			highspeed_mode = 1;
 800c87e:	4be5      	ldr	r3, [pc, #916]	; (800cc14 <turn45outL+0x3b8>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c884:	2300      	movs	r3, #0
 800c886:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c888:	2300      	movs	r3, #0
 800c88a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c890:	2300      	movs	r3, #0
 800c892:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c894:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c898:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c89c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c8ac:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8b0:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cc18 <turn45outL+0x3bc>
 800c8b4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	eeb0 2a47 	vmov.f32	s4, s14
 800c8be:	eef0 1a46 	vmov.f32	s3, s12
 800c8c2:	eeb0 1a66 	vmov.f32	s2, s13
 800c8c6:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cc1c <turn45outL+0x3c0>
 800c8ca:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cc20 <turn45outL+0x3c4>
 800c8ce:	f7f6 fb85 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8fe:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cc18 <turn45outL+0x3bc>
 800c902:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	eeb0 2a47 	vmov.f32	s4, s14
 800c90c:	eef0 1a45 	vmov.f32	s3, s10
 800c910:	eeb0 1a65 	vmov.f32	s2, s11
 800c914:	eef0 0a46 	vmov.f32	s1, s12
 800c918:	eeb0 0a66 	vmov.f32	s0, s13
 800c91c:	f7f6 fb5e 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800c920:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c924:	2b01      	cmp	r3, #1
 800c926:	d10c      	bne.n	800c942 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c92c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c930:	eeb0 1a47 	vmov.f32	s2, s14
 800c934:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cc18 <turn45outL+0x3bc>
 800c938:	eeb0 0a67 	vmov.f32	s0, s15
 800c93c:	f7f7 fac4 	bl	8003ec8 <mollifier_slalom_table>
 800c940:	e013      	b.n	800c96a <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c942:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c946:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c94a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c94e:	eef0 2a66 	vmov.f32	s5, s13
 800c952:	eeb0 2a47 	vmov.f32	s4, s14
 800c956:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cc1c <turn45outL+0x3c0>
 800c95a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cc1c <turn45outL+0x3c0>
 800c95e:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cc18 <turn45outL+0x3bc>
 800c962:	eeb0 0a67 	vmov.f32	s0, s15
 800c966:	f7f7 f95f 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c972:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c976:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cc24 <turn45outL+0x3c8>
 800c97a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c97e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c982:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c986:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c98a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c98e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c992:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c996:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c99a:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cc18 <turn45outL+0x3bc>
 800c99e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	eeb0 2a47 	vmov.f32	s4, s14
 800c9a8:	eef0 1a65 	vmov.f32	s3, s11
 800c9ac:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cc1c <turn45outL+0x3c0>
 800c9b0:	eef0 0a46 	vmov.f32	s1, s12
 800c9b4:	eeb0 0a66 	vmov.f32	s0, s13
 800c9b8:	f7f6 fb10 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800c9bc:	4b95      	ldr	r3, [pc, #596]	; (800cc14 <turn45outL+0x3b8>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c9c2:	e11e      	b.n	800cc02 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c9c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d97f      	bls.n	800cacc <turn45outL+0x270>
		highspeed_mode = 1;
 800c9cc:	4b91      	ldr	r3, [pc, #580]	; (800cc14 <turn45outL+0x3b8>)
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c9da:	2304      	movs	r3, #4
 800c9dc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9e2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9ea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9ee:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9fe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ca02:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca06:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cc18 <turn45outL+0x3bc>
 800ca0a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	eeb0 2a47 	vmov.f32	s4, s14
 800ca14:	eef0 1a45 	vmov.f32	s3, s10
 800ca18:	eeb0 1a65 	vmov.f32	s2, s11
 800ca1c:	eef0 0a46 	vmov.f32	s1, s12
 800ca20:	eeb0 0a66 	vmov.f32	s0, s13
 800ca24:	f7f6 fada 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ca28:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d10c      	bne.n	800ca4a <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ca30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca38:	eeb0 1a47 	vmov.f32	s2, s14
 800ca3c:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cc18 <turn45outL+0x3bc>
 800ca40:	eeb0 0a67 	vmov.f32	s0, s15
 800ca44:	f7f7 fa40 	bl	8003ec8 <mollifier_slalom_table>
 800ca48:	e013      	b.n	800ca72 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ca4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca4e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca52:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca56:	eef0 2a66 	vmov.f32	s5, s13
 800ca5a:	eeb0 2a47 	vmov.f32	s4, s14
 800ca5e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cc1c <turn45outL+0x3c0>
 800ca62:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cc1c <turn45outL+0x3c0>
 800ca66:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cc18 <turn45outL+0x3bc>
 800ca6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca6e:	f7f7 f8db 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca7e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cc24 <turn45outL+0x3c8>
 800ca82:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca8a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca9a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca9e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800caa2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cc18 <turn45outL+0x3bc>
 800caa6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	eeb0 2a47 	vmov.f32	s4, s14
 800cab0:	eef0 1a65 	vmov.f32	s3, s11
 800cab4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cc1c <turn45outL+0x3c0>
 800cab8:	eef0 0a46 	vmov.f32	s1, s12
 800cabc:	eeb0 0a66 	vmov.f32	s0, s13
 800cac0:	f7f6 fa8c 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800cac4:	4b53      	ldr	r3, [pc, #332]	; (800cc14 <turn45outL+0x3b8>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	701a      	strb	r2, [r3, #0]
}
 800caca:	e09a      	b.n	800cc02 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cacc:	2300      	movs	r3, #0
 800cace:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cad4:	2304      	movs	r3, #4
 800cad6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cad8:	2300      	movs	r3, #0
 800cada:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cadc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cae0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cae4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cae8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800caec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cafc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb00:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cc18 <turn45outL+0x3bc>
 800cb04:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	eeb0 2a47 	vmov.f32	s4, s14
 800cb0e:	eef0 1a45 	vmov.f32	s3, s10
 800cb12:	eeb0 1a65 	vmov.f32	s2, s11
 800cb16:	eef0 0a46 	vmov.f32	s1, s12
 800cb1a:	eeb0 0a66 	vmov.f32	s0, s13
 800cb1e:	f7f6 fa5d 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cb22:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d10c      	bne.n	800cb44 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb2e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb32:	eeb0 1a47 	vmov.f32	s2, s14
 800cb36:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cc18 <turn45outL+0x3bc>
 800cb3a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb3e:	f7f7 f9c3 	bl	8003ec8 <mollifier_slalom_table>
 800cb42:	e013      	b.n	800cb6c <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb4c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb50:	eef0 2a66 	vmov.f32	s5, s13
 800cb54:	eeb0 2a47 	vmov.f32	s4, s14
 800cb58:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cc1c <turn45outL+0x3c0>
 800cb5c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cc1c <turn45outL+0x3c0>
 800cb60:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cc18 <turn45outL+0x3bc>
 800cb64:	eeb0 0a67 	vmov.f32	s0, s15
 800cb68:	f7f7 f85e 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb74:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb78:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb88:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb94:	eef0 7ae7 	vabs.f32	s15, s15
 800cb98:	ee17 0a90 	vmov	r0, s15
 800cb9c:	f7f3 fcfc 	bl	8000598 <__aeabi_f2d>
 800cba0:	f04f 0200 	mov.w	r2, #0
 800cba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cba8:	f7f3 fe78 	bl	800089c <__aeabi_ddiv>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4614      	mov	r4, r2
 800cbb2:	461d      	mov	r5, r3
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f3 fcee 	bl	8000598 <__aeabi_f2d>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	f7f3 fe6a 	bl	800089c <__aeabi_ddiv>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f04f 0200 	mov.w	r2, #0
 800cbd4:	4b14      	ldr	r3, [pc, #80]	; (800cc28 <turn45outL+0x3cc>)
 800cbd6:	f7f3 fb81 	bl	80002dc <__adddf3>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbde:	4610      	mov	r0, r2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	f7f4 f809 	bl	8000bf8 <__aeabi_d2f>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	ee02 3a10 	vmov	s4, r3
 800cbee:	edd7 1a01 	vldr	s3, [r7, #4]
 800cbf2:	ed97 1a01 	vldr	s2, [r7, #4]
 800cbf6:	eef0 0a68 	vmov.f32	s1, s17
 800cbfa:	eeb0 0a48 	vmov.f32	s0, s16
 800cbfe:	f7f6 f9ed 	bl	8002fdc <straight_table2>
}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	ecbd 8b02 	vpop	{d8}
 800cc0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc10:	b004      	add	sp, #16
 800cc12:	4770      	bx	lr
 800cc14:	20000808 	.word	0x20000808
 800cc18:	42340000 	.word	0x42340000
 800cc1c:	00000000 	.word	0x00000000
 800cc20:	42c4477b 	.word	0x42c4477b
 800cc24:	42b40000 	.word	0x42b40000
 800cc28:	408f4000 	.word	0x408f4000

0800cc2c <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	b5b0      	push	{r4, r5, r7, lr}
 800cc30:	ed2d 8b02 	vpush	{d8}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc40:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	f040 80a5 	bne.w	800cd98 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cc4e:	4be9      	ldr	r3, [pc, #932]	; (800cff4 <turn135outR+0x3c8>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc64:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc68:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc78:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc7c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc80:	eddf 5add 	vldr	s11, [pc, #884]	; 800cff8 <turn135outR+0x3cc>
 800cc84:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	eeb0 2a47 	vmov.f32	s4, s14
 800cc8e:	eef0 1a46 	vmov.f32	s3, s12
 800cc92:	eeb0 1a66 	vmov.f32	s2, s13
 800cc96:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cffc <turn135outR+0x3d0>
 800cc9a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d000 <turn135outR+0x3d4>
 800cc9e:	f7f6 f99d 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cca6:	2303      	movs	r3, #3
 800cca8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccaa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ccae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ccb2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ccb6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccc6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ccca:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccce:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cff8 <turn135outR+0x3cc>
 800ccd2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	eeb0 2a47 	vmov.f32	s4, s14
 800ccdc:	eef0 1a45 	vmov.f32	s3, s10
 800cce0:	eeb0 1a65 	vmov.f32	s2, s11
 800cce4:	eef0 0a46 	vmov.f32	s1, s12
 800cce8:	eeb0 0a66 	vmov.f32	s0, s13
 800ccec:	f7f6 f976 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800ccf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d10c      	bne.n	800cd12 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ccf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccfc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd00:	eeb0 1a47 	vmov.f32	s2, s14
 800cd04:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d004 <turn135outR+0x3d8>
 800cd08:	eeb0 0a67 	vmov.f32	s0, s15
 800cd0c:	f7f7 f8dc 	bl	8003ec8 <mollifier_slalom_table>
 800cd10:	e015      	b.n	800cd3e <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cd12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cd1a:	eef1 7a67 	vneg.f32	s15, s15
 800cd1e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cd22:	eef0 2a66 	vmov.f32	s5, s13
 800cd26:	eeb0 2a67 	vmov.f32	s4, s15
 800cd2a:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cffc <turn135outR+0x3d0>
 800cd2e:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cffc <turn135outR+0x3d0>
 800cd32:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d004 <turn135outR+0x3d8>
 800cd36:	eeb0 0a47 	vmov.f32	s0, s14
 800cd3a:	f7f6 ff75 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd4a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d008 <turn135outR+0x3dc>
 800cd4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd52:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd56:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd66:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd6a:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd6e:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cff8 <turn135outR+0x3cc>
 800cd72:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	eeb0 2a47 	vmov.f32	s4, s14
 800cd7c:	eef0 1a65 	vmov.f32	s3, s11
 800cd80:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cffc <turn135outR+0x3d0>
 800cd84:	eef0 0a46 	vmov.f32	s1, s12
 800cd88:	eeb0 0a66 	vmov.f32	s0, s13
 800cd8c:	f7f6 f926 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800cd90:	4b98      	ldr	r3, [pc, #608]	; (800cff4 <turn135outR+0x3c8>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd96:	e123      	b.n	800cfe0 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cd98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	f240 8082 	bls.w	800cea6 <turn135outR+0x27a>
		highspeed_mode = 1;
 800cda2:	4b94      	ldr	r3, [pc, #592]	; (800cff4 <turn135outR+0x3c8>)
 800cda4:	2201      	movs	r2, #1
 800cda6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdb8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdbc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdc0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdc4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdc8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdcc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdd4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdd8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cddc:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cff8 <turn135outR+0x3cc>
 800cde0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	eeb0 2a47 	vmov.f32	s4, s14
 800cdea:	eef0 1a45 	vmov.f32	s3, s10
 800cdee:	eeb0 1a65 	vmov.f32	s2, s11
 800cdf2:	eef0 0a46 	vmov.f32	s1, s12
 800cdf6:	eeb0 0a66 	vmov.f32	s0, s13
 800cdfa:	f7f6 f8ef 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cdfe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d10c      	bne.n	800ce20 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ce06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce0e:	eeb0 1a47 	vmov.f32	s2, s14
 800ce12:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d004 <turn135outR+0x3d8>
 800ce16:	eeb0 0a67 	vmov.f32	s0, s15
 800ce1a:	f7f7 f855 	bl	8003ec8 <mollifier_slalom_table>
 800ce1e:	e015      	b.n	800ce4c <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ce20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ce28:	eef1 7a67 	vneg.f32	s15, s15
 800ce2c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce30:	eef0 2a66 	vmov.f32	s5, s13
 800ce34:	eeb0 2a67 	vmov.f32	s4, s15
 800ce38:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cffc <turn135outR+0x3d0>
 800ce3c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cffc <turn135outR+0x3d0>
 800ce40:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d004 <turn135outR+0x3d8>
 800ce44:	eeb0 0a47 	vmov.f32	s0, s14
 800ce48:	f7f6 feee 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce58:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d008 <turn135outR+0x3dc>
 800ce5c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce64:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce74:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce78:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce7c:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cff8 <turn135outR+0x3cc>
 800ce80:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	eeb0 2a47 	vmov.f32	s4, s14
 800ce8a:	eef0 1a65 	vmov.f32	s3, s11
 800ce8e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cffc <turn135outR+0x3d0>
 800ce92:	eef0 0a46 	vmov.f32	s1, s12
 800ce96:	eeb0 0a66 	vmov.f32	s0, s13
 800ce9a:	f7f6 f89f 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ce9e:	4b55      	ldr	r3, [pc, #340]	; (800cff4 <turn135outR+0x3c8>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]
}
 800cea4:	e09c      	b.n	800cfe0 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cea6:	2300      	movs	r3, #0
 800cea8:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceb6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ceba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cebe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cec2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ceca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cece:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ced2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ced6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceda:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cff8 <turn135outR+0x3cc>
 800cede:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	eeb0 2a47 	vmov.f32	s4, s14
 800cee8:	eef0 1a45 	vmov.f32	s3, s10
 800ceec:	eeb0 1a65 	vmov.f32	s2, s11
 800cef0:	eef0 0a46 	vmov.f32	s1, s12
 800cef4:	eeb0 0a66 	vmov.f32	s0, s13
 800cef8:	f7f6 f870 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cefc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d10c      	bne.n	800cf1e <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cf04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf0c:	eeb0 1a47 	vmov.f32	s2, s14
 800cf10:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d004 <turn135outR+0x3d8>
 800cf14:	eeb0 0a67 	vmov.f32	s0, s15
 800cf18:	f7f6 ffd6 	bl	8003ec8 <mollifier_slalom_table>
 800cf1c:	e015      	b.n	800cf4a <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf26:	eef1 7a67 	vneg.f32	s15, s15
 800cf2a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf2e:	eef0 2a66 	vmov.f32	s5, s13
 800cf32:	eeb0 2a67 	vmov.f32	s4, s15
 800cf36:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cffc <turn135outR+0x3d0>
 800cf3a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cffc <turn135outR+0x3d0>
 800cf3e:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d004 <turn135outR+0x3d8>
 800cf42:	eeb0 0a47 	vmov.f32	s0, s14
 800cf46:	f7f6 fe6f 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf52:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf56:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf66:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf72:	eef0 7ae7 	vabs.f32	s15, s15
 800cf76:	ee17 0a90 	vmov	r0, s15
 800cf7a:	f7f3 fb0d 	bl	8000598 <__aeabi_f2d>
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf86:	f7f3 fc89 	bl	800089c <__aeabi_ddiv>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4614      	mov	r4, r2
 800cf90:	461d      	mov	r5, r3
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f3 faff 	bl	8000598 <__aeabi_f2d>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fc7b 	bl	800089c <__aeabi_ddiv>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4610      	mov	r0, r2
 800cfac:	4619      	mov	r1, r3
 800cfae:	f04f 0200 	mov.w	r2, #0
 800cfb2:	4b16      	ldr	r3, [pc, #88]	; (800d00c <turn135outR+0x3e0>)
 800cfb4:	f7f3 f992 	bl	80002dc <__adddf3>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	f7f3 fe1a 	bl	8000bf8 <__aeabi_d2f>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	ee02 3a10 	vmov	s4, r3
 800cfcc:	edd7 1a01 	vldr	s3, [r7, #4]
 800cfd0:	ed97 1a01 	vldr	s2, [r7, #4]
 800cfd4:	eef0 0a68 	vmov.f32	s1, s17
 800cfd8:	eeb0 0a48 	vmov.f32	s0, s16
 800cfdc:	f7f5 fffe 	bl	8002fdc <straight_table2>
}
 800cfe0:	bf00      	nop
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	ecbd 8b02 	vpop	{d8}
 800cfea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cfee:	b004      	add	sp, #16
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20000808 	.word	0x20000808
 800cff8:	42340000 	.word	0x42340000
 800cffc:	00000000 	.word	0x00000000
 800d000:	42c4477b 	.word	0x42c4477b
 800d004:	c3070000 	.word	0xc3070000
 800d008:	42b40000 	.word	0x42b40000
 800d00c:	408f4000 	.word	0x408f4000

0800d010 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d010:	b084      	sub	sp, #16
 800d012:	b5b0      	push	{r4, r5, r7, lr}
 800d014:	ed2d 8b02 	vpush	{d8}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d024:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d028:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	f040 80a3 	bne.w	800d178 <turn135outL+0x168>
		highspeed_mode = 1;
 800d032:	4be5      	ldr	r3, [pc, #916]	; (800d3c8 <turn135outL+0x3b8>)
 800d034:	2201      	movs	r2, #1
 800d036:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d038:	2300      	movs	r3, #0
 800d03a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d044:	2300      	movs	r3, #0
 800d046:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d048:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d04c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d050:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d060:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d064:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d3cc <turn135outL+0x3bc>
 800d068:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	eeb0 2a47 	vmov.f32	s4, s14
 800d072:	eef0 1a46 	vmov.f32	s3, s12
 800d076:	eeb0 1a66 	vmov.f32	s2, s13
 800d07a:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d3d0 <turn135outL+0x3c0>
 800d07e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d3d4 <turn135outL+0x3c4>
 800d082:	f7f5 ffab 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800d086:	2300      	movs	r3, #0
 800d088:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d08a:	2304      	movs	r3, #4
 800d08c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d08e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d092:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d096:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d09a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d09e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d0ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0b2:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d3cc <turn135outL+0x3bc>
 800d0b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	eeb0 2a47 	vmov.f32	s4, s14
 800d0c0:	eef0 1a45 	vmov.f32	s3, s10
 800d0c4:	eeb0 1a65 	vmov.f32	s2, s11
 800d0c8:	eef0 0a46 	vmov.f32	s1, s12
 800d0cc:	eeb0 0a66 	vmov.f32	s0, s13
 800d0d0:	f7f5 ff84 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d0d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d10c      	bne.n	800d0f6 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d0dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0e4:	eeb0 1a47 	vmov.f32	s2, s14
 800d0e8:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d3d8 <turn135outL+0x3c8>
 800d0ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d0f0:	f7f6 feea 	bl	8003ec8 <mollifier_slalom_table>
 800d0f4:	e013      	b.n	800d11e <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d0f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0fe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d102:	eef0 2a66 	vmov.f32	s5, s13
 800d106:	eeb0 2a47 	vmov.f32	s4, s14
 800d10a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d3d0 <turn135outL+0x3c0>
 800d10e:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d3d0 <turn135outL+0x3c0>
 800d112:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d3d8 <turn135outL+0x3c8>
 800d116:	eeb0 0a67 	vmov.f32	s0, s15
 800d11a:	f7f6 fd85 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d11e:	2300      	movs	r3, #0
 800d120:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d122:	2300      	movs	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d126:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d12a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d3dc <turn135outL+0x3cc>
 800d12e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d132:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d136:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d13a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d13e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d142:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d146:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d14a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d14e:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d3cc <turn135outL+0x3bc>
 800d152:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	eeb0 2a47 	vmov.f32	s4, s14
 800d15c:	eef0 1a65 	vmov.f32	s3, s11
 800d160:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d3d0 <turn135outL+0x3c0>
 800d164:	eef0 0a46 	vmov.f32	s1, s12
 800d168:	eeb0 0a66 	vmov.f32	s0, s13
 800d16c:	f7f5 ff36 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d170:	4b95      	ldr	r3, [pc, #596]	; (800d3c8 <turn135outL+0x3b8>)
 800d172:	2200      	movs	r2, #0
 800d174:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d176:	e11e      	b.n	800d3b6 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d178:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d97f      	bls.n	800d280 <turn135outL+0x270>
		highspeed_mode = 1;
 800d180:	4b91      	ldr	r3, [pc, #580]	; (800d3c8 <turn135outL+0x3b8>)
 800d182:	2201      	movs	r2, #1
 800d184:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d186:	2300      	movs	r3, #0
 800d188:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d18e:	2304      	movs	r3, #4
 800d190:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d192:	2300      	movs	r3, #0
 800d194:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d196:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d19a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d19e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1a2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1ba:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d3cc <turn135outL+0x3bc>
 800d1be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	eeb0 2a47 	vmov.f32	s4, s14
 800d1c8:	eef0 1a45 	vmov.f32	s3, s10
 800d1cc:	eeb0 1a65 	vmov.f32	s2, s11
 800d1d0:	eef0 0a46 	vmov.f32	s1, s12
 800d1d4:	eeb0 0a66 	vmov.f32	s0, s13
 800d1d8:	f7f5 ff00 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d1dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d10c      	bne.n	800d1fe <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d1e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1ec:	eeb0 1a47 	vmov.f32	s2, s14
 800d1f0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d3d8 <turn135outL+0x3c8>
 800d1f4:	eeb0 0a67 	vmov.f32	s0, s15
 800d1f8:	f7f6 fe66 	bl	8003ec8 <mollifier_slalom_table>
 800d1fc:	e013      	b.n	800d226 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d1fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d202:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d206:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d20a:	eef0 2a66 	vmov.f32	s5, s13
 800d20e:	eeb0 2a47 	vmov.f32	s4, s14
 800d212:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d3d0 <turn135outL+0x3c0>
 800d216:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d3d0 <turn135outL+0x3c0>
 800d21a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d3d8 <turn135outL+0x3c8>
 800d21e:	eeb0 0a67 	vmov.f32	s0, s15
 800d222:	f7f6 fd01 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d226:	2300      	movs	r3, #0
 800d228:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d22e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d232:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3dc <turn135outL+0x3cc>
 800d236:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d23a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d23e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d242:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d246:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d24a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d24e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d252:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d256:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d3cc <turn135outL+0x3bc>
 800d25a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	eeb0 2a47 	vmov.f32	s4, s14
 800d264:	eef0 1a65 	vmov.f32	s3, s11
 800d268:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d3d0 <turn135outL+0x3c0>
 800d26c:	eef0 0a46 	vmov.f32	s1, s12
 800d270:	eeb0 0a66 	vmov.f32	s0, s13
 800d274:	f7f5 feb2 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d278:	4b53      	ldr	r3, [pc, #332]	; (800d3c8 <turn135outL+0x3b8>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	701a      	strb	r2, [r3, #0]
}
 800d27e:	e09a      	b.n	800d3b6 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d280:	2300      	movs	r3, #0
 800d282:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d284:	2300      	movs	r3, #0
 800d286:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d288:	2304      	movs	r3, #4
 800d28a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d290:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d294:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d298:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d29c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d2b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2b4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d3cc <turn135outL+0x3bc>
 800d2b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	eeb0 2a47 	vmov.f32	s4, s14
 800d2c2:	eef0 1a45 	vmov.f32	s3, s10
 800d2c6:	eeb0 1a65 	vmov.f32	s2, s11
 800d2ca:	eef0 0a46 	vmov.f32	s1, s12
 800d2ce:	eeb0 0a66 	vmov.f32	s0, s13
 800d2d2:	f7f5 fe83 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d2d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d10c      	bne.n	800d2f8 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d2de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2e6:	eeb0 1a47 	vmov.f32	s2, s14
 800d2ea:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d3d8 <turn135outL+0x3c8>
 800d2ee:	eeb0 0a67 	vmov.f32	s0, s15
 800d2f2:	f7f6 fde9 	bl	8003ec8 <mollifier_slalom_table>
 800d2f6:	e013      	b.n	800d320 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d2f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d300:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d304:	eef0 2a66 	vmov.f32	s5, s13
 800d308:	eeb0 2a47 	vmov.f32	s4, s14
 800d30c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d3d0 <turn135outL+0x3c0>
 800d310:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d3d0 <turn135outL+0x3c0>
 800d314:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d3d8 <turn135outL+0x3c8>
 800d318:	eeb0 0a67 	vmov.f32	s0, s15
 800d31c:	f7f6 fc84 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d320:	2301      	movs	r3, #1
 800d322:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d324:	2300      	movs	r3, #0
 800d326:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d328:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d32c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d330:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d334:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d340:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d344:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d348:	eef0 7ae7 	vabs.f32	s15, s15
 800d34c:	ee17 0a90 	vmov	r0, s15
 800d350:	f7f3 f922 	bl	8000598 <__aeabi_f2d>
 800d354:	f04f 0200 	mov.w	r2, #0
 800d358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d35c:	f7f3 fa9e 	bl	800089c <__aeabi_ddiv>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4614      	mov	r4, r2
 800d366:	461d      	mov	r5, r3
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7f3 f914 	bl	8000598 <__aeabi_f2d>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4620      	mov	r0, r4
 800d376:	4629      	mov	r1, r5
 800d378:	f7f3 fa90 	bl	800089c <__aeabi_ddiv>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4610      	mov	r0, r2
 800d382:	4619      	mov	r1, r3
 800d384:	f04f 0200 	mov.w	r2, #0
 800d388:	4b15      	ldr	r3, [pc, #84]	; (800d3e0 <turn135outL+0x3d0>)
 800d38a:	f7f2 ffa7 	bl	80002dc <__adddf3>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d392:	4610      	mov	r0, r2
 800d394:	4619      	mov	r1, r3
 800d396:	f7f3 fc2f 	bl	8000bf8 <__aeabi_d2f>
 800d39a:	4603      	mov	r3, r0
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	ee02 3a10 	vmov	s4, r3
 800d3a2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d3a6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d3aa:	eef0 0a68 	vmov.f32	s1, s17
 800d3ae:	eeb0 0a48 	vmov.f32	s0, s16
 800d3b2:	f7f5 fe13 	bl	8002fdc <straight_table2>
}
 800d3b6:	bf00      	nop
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	ecbd 8b02 	vpop	{d8}
 800d3c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d3c4:	b004      	add	sp, #16
 800d3c6:	4770      	bx	lr
 800d3c8:	20000808 	.word	0x20000808
 800d3cc:	42340000 	.word	0x42340000
 800d3d0:	00000000 	.word	0x00000000
 800d3d4:	42c4477b 	.word	0x42c4477b
 800d3d8:	43070000 	.word	0x43070000
 800d3dc:	42b40000 	.word	0x42b40000
 800d3e0:	408f4000 	.word	0x408f4000
 800d3e4:	00000000 	.word	0x00000000

0800d3e8 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	b5b0      	push	{r4, r5, r7, lr}
 800d3ec:	ed2d 8b02 	vpush	{d8}
 800d3f0:	b084      	sub	sp, #16
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d3f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d400:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d404:	2b01      	cmp	r3, #1
 800d406:	f040 80af 	bne.w	800d568 <V90R+0x180>
			highspeed_mode = 1;
 800d40a:	4bc1      	ldr	r3, [pc, #772]	; (800d710 <V90R+0x328>)
 800d40c:	2201      	movs	r2, #1
 800d40e:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d410:	2300      	movs	r3, #0
 800d412:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d414:	2300      	movs	r3, #0
 800d416:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d420:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d424:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d428:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d42c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d430:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d434:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d438:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d43c:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d714 <V90R+0x32c>
 800d440:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	eeb0 2a47 	vmov.f32	s4, s14
 800d44a:	eef0 1a46 	vmov.f32	s3, s12
 800d44e:	eeb0 1a66 	vmov.f32	s2, s13
 800d452:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d71c <V90R+0x334>
 800d456:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d718 <V90R+0x330>
 800d45a:	f7f5 fdbf 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800d45e:	2300      	movs	r3, #0
 800d460:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d462:	2303      	movs	r3, #3
 800d464:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d466:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d46a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d46e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d472:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d476:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d47a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d47e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d482:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d486:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d48a:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d714 <V90R+0x32c>
 800d48e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	eeb0 2a47 	vmov.f32	s4, s14
 800d498:	eef0 1a45 	vmov.f32	s3, s10
 800d49c:	eeb0 1a65 	vmov.f32	s2, s11
 800d4a0:	eef0 0a46 	vmov.f32	s1, s12
 800d4a4:	eeb0 0a66 	vmov.f32	s0, s13
 800d4a8:	f7f5 fd98 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800d4ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10c      	bne.n	800d4ce <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d4b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d4bc:	eeb0 1a47 	vmov.f32	s2, s14
 800d4c0:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d720 <V90R+0x338>
 800d4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800d4c8:	f7f6 fcfe 	bl	8003ec8 <mollifier_slalom_table>
 800d4cc:	e015      	b.n	800d4fa <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4d6:	eef1 7a67 	vneg.f32	s15, s15
 800d4da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4de:	eef0 2a66 	vmov.f32	s5, s13
 800d4e2:	eeb0 2a67 	vmov.f32	s4, s15
 800d4e6:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d71c <V90R+0x334>
 800d4ea:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d71c <V90R+0x334>
 800d4ee:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d720 <V90R+0x338>
 800d4f2:	eeb0 0a47 	vmov.f32	s0, s14
 800d4f6:	f7f6 fb97 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	4618      	mov	r0, r3
 800d506:	f7f3 f847 	bl	8000598 <__aeabi_f2d>
 800d50a:	a37f      	add	r3, pc, #508	; (adr r3, 800d708 <V90R+0x320>)
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f7f2 fee4 	bl	80002dc <__adddf3>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	4610      	mov	r0, r2
 800d51a:	4619      	mov	r1, r3
 800d51c:	f7f3 fb6c 	bl	8000bf8 <__aeabi_d2f>
 800d520:	4603      	mov	r3, r0
 800d522:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d526:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d52a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d52e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d536:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d53a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d53e:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d714 <V90R+0x32c>
 800d542:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	eeb0 2a47 	vmov.f32	s4, s14
 800d54c:	eef0 1a46 	vmov.f32	s3, s12
 800d550:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d71c <V90R+0x334>
 800d554:	eef0 0a66 	vmov.f32	s1, s13
 800d558:	ee00 3a10 	vmov	s0, r3
 800d55c:	f7f5 fd3e 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800d560:	4b6b      	ldr	r3, [pc, #428]	; (800d710 <V90R+0x328>)
 800d562:	2200      	movs	r2, #0
 800d564:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d566:	e13e      	b.n	800d7e6 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d568:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	f240 808c 	bls.w	800d68a <V90R+0x2a2>
		highspeed_mode = 1;
 800d572:	4b67      	ldr	r3, [pc, #412]	; (800d710 <V90R+0x328>)
 800d574:	2201      	movs	r2, #1
 800d576:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d578:	2300      	movs	r3, #0
 800d57a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d580:	2303      	movs	r3, #3
 800d582:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d584:	2300      	movs	r3, #0
 800d586:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d588:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d58c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d590:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d594:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d598:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d59c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5a4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5a8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5ac:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d714 <V90R+0x32c>
 800d5b0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	eeb0 2a47 	vmov.f32	s4, s14
 800d5ba:	eef0 1a45 	vmov.f32	s3, s10
 800d5be:	eeb0 1a65 	vmov.f32	s2, s11
 800d5c2:	eef0 0a46 	vmov.f32	s1, s12
 800d5c6:	eeb0 0a66 	vmov.f32	s0, s13
 800d5ca:	f7f5 fd07 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d5ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d10c      	bne.n	800d5f0 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5de:	eeb0 1a47 	vmov.f32	s2, s14
 800d5e2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d720 <V90R+0x338>
 800d5e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5ea:	f7f6 fc6d 	bl	8003ec8 <mollifier_slalom_table>
 800d5ee:	e015      	b.n	800d61c <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d5f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d5f8:	eef1 7a67 	vneg.f32	s15, s15
 800d5fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d600:	eef0 2a66 	vmov.f32	s5, s13
 800d604:	eeb0 2a67 	vmov.f32	s4, s15
 800d608:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d71c <V90R+0x334>
 800d60c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d71c <V90R+0x334>
 800d610:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d720 <V90R+0x338>
 800d614:	eeb0 0a47 	vmov.f32	s0, s14
 800d618:	f7f6 fb06 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d620:	2300      	movs	r3, #0
 800d622:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d626:	4618      	mov	r0, r3
 800d628:	f7f2 ffb6 	bl	8000598 <__aeabi_f2d>
 800d62c:	a336      	add	r3, pc, #216	; (adr r3, 800d708 <V90R+0x320>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f7f2 fe53 	bl	80002dc <__adddf3>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4610      	mov	r0, r2
 800d63c:	4619      	mov	r1, r3
 800d63e:	f7f3 fadb 	bl	8000bf8 <__aeabi_d2f>
 800d642:	4603      	mov	r3, r0
 800d644:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d648:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d64c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d650:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d654:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d658:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d65c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d660:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d714 <V90R+0x32c>
 800d664:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	eeb0 2a47 	vmov.f32	s4, s14
 800d66e:	eef0 1a46 	vmov.f32	s3, s12
 800d672:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d71c <V90R+0x334>
 800d676:	eef0 0a66 	vmov.f32	s1, s13
 800d67a:	ee00 3a10 	vmov	s0, r3
 800d67e:	f7f5 fcad 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d682:	4b23      	ldr	r3, [pc, #140]	; (800d710 <V90R+0x328>)
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
}
 800d688:	e0ad      	b.n	800d7e6 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d68a:	2300      	movs	r3, #0
 800d68c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d68e:	2300      	movs	r3, #0
 800d690:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d692:	2303      	movs	r3, #3
 800d694:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d696:	2300      	movs	r3, #0
 800d698:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d69a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d69e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d6a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d6a6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6b6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6ba:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6be:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d714 <V90R+0x32c>
 800d6c2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	eeb0 2a47 	vmov.f32	s4, s14
 800d6cc:	eef0 1a45 	vmov.f32	s3, s10
 800d6d0:	eeb0 1a65 	vmov.f32	s2, s11
 800d6d4:	eef0 0a46 	vmov.f32	s1, s12
 800d6d8:	eeb0 0a66 	vmov.f32	s0, s13
 800d6dc:	f7f5 fc7e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d6e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d11d      	bne.n	800d724 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d6e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6f0:	eeb0 1a47 	vmov.f32	s2, s14
 800d6f4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d720 <V90R+0x338>
 800d6f8:	eeb0 0a67 	vmov.f32	s0, s15
 800d6fc:	f7f6 fbe4 	bl	8003ec8 <mollifier_slalom_table>
 800d700:	e026      	b.n	800d750 <V90R+0x368>
 800d702:	bf00      	nop
 800d704:	f3af 8000 	nop.w
 800d708:	c022ec18 	.word	0xc022ec18
 800d70c:	405fd1de 	.word	0x405fd1de
 800d710:	20000808 	.word	0x20000808
 800d714:	42340000 	.word	0x42340000
 800d718:	42c4477b 	.word	0x42c4477b
 800d71c:	00000000 	.word	0x00000000
 800d720:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d724:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d728:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d72c:	eef1 7a67 	vneg.f32	s15, s15
 800d730:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d734:	eef0 2a66 	vmov.f32	s5, s13
 800d738:	eeb0 2a67 	vmov.f32	s4, s15
 800d73c:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d71c <V90R+0x334>
 800d740:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d71c <V90R+0x334>
 800d744:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d720 <V90R+0x338>
 800d748:	eeb0 0a47 	vmov.f32	s0, s14
 800d74c:	f7f6 fa6c 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d750:	2303      	movs	r3, #3
 800d752:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d754:	2300      	movs	r3, #0
 800d756:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d758:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d75c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d760:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d764:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d76c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d774:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d778:	eef0 7ae7 	vabs.f32	s15, s15
 800d77c:	ee17 0a90 	vmov	r0, s15
 800d780:	f7f2 ff0a 	bl	8000598 <__aeabi_f2d>
 800d784:	f04f 0200 	mov.w	r2, #0
 800d788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d78c:	f7f3 f886 	bl	800089c <__aeabi_ddiv>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4614      	mov	r4, r2
 800d796:	461d      	mov	r5, r3
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7f2 fefc 	bl	8000598 <__aeabi_f2d>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f3 f878 	bl	800089c <__aeabi_ddiv>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <V90R+0x410>)
 800d7ba:	f7f2 fd8f 	bl	80002dc <__adddf3>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f7f3 fa17 	bl	8000bf8 <__aeabi_d2f>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	ee02 3a10 	vmov	s4, r3
 800d7d2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d7d6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d7da:	eef0 0a68 	vmov.f32	s1, s17
 800d7de:	eeb0 0a48 	vmov.f32	s0, s16
 800d7e2:	f7f5 fbfb 	bl	8002fdc <straight_table2>
}
 800d7e6:	bf00      	nop
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	ecbd 8b02 	vpop	{d8}
 800d7f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d7f4:	b004      	add	sp, #16
 800d7f6:	4770      	bx	lr
 800d7f8:	408f4000 	.word	0x408f4000
 800d7fc:	00000000 	.word	0x00000000

0800d800 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d800:	b084      	sub	sp, #16
 800d802:	b5b0      	push	{r4, r5, r7, lr}
 800d804:	ed2d 8b02 	vpush	{d8}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d814:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d818:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	f040 80ad 	bne.w	800d97c <V90L+0x17c>
				highspeed_mode = 1;
 800d822:	4bbf      	ldr	r3, [pc, #764]	; (800db20 <V90L+0x320>)
 800d824:	2201      	movs	r2, #1
 800d826:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d828:	2300      	movs	r3, #0
 800d82a:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d834:	2300      	movs	r3, #0
 800d836:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d838:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d83c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d840:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d844:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d84c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d850:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d854:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800db24 <V90L+0x324>
 800d858:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	eeb0 2a47 	vmov.f32	s4, s14
 800d862:	eef0 1a46 	vmov.f32	s3, s12
 800d866:	eeb0 1a66 	vmov.f32	s2, s13
 800d86a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800db2c <V90L+0x32c>
 800d86e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800db28 <V90L+0x328>
 800d872:	f7f5 fbb3 	bl	8002fdc <straight_table2>
				wallmode.WallControlMode=0;
 800d876:	2300      	movs	r3, #0
 800d878:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d87a:	2304      	movs	r3, #4
 800d87c:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d87e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d882:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d886:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d88a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d88e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d89a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d89e:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8a2:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800db24 <V90L+0x324>
 800d8a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	eeb0 2a47 	vmov.f32	s4, s14
 800d8b0:	eef0 1a45 	vmov.f32	s3, s10
 800d8b4:	eeb0 1a65 	vmov.f32	s2, s11
 800d8b8:	eef0 0a46 	vmov.f32	s1, s12
 800d8bc:	eeb0 0a66 	vmov.f32	s0, s13
 800d8c0:	f7f5 fb8c 	bl	8002fdc <straight_table2>
				if(mollifier_mode == ON){
 800d8c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d10c      	bne.n	800d8e6 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8d4:	eeb0 1a47 	vmov.f32	s2, s14
 800d8d8:	eddf 0a95 	vldr	s1, [pc, #596]	; 800db30 <V90L+0x330>
 800d8dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d8e0:	f7f6 faf2 	bl	8003ec8 <mollifier_slalom_table>
 800d8e4:	e013      	b.n	800d90e <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8ee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8f2:	eef0 2a66 	vmov.f32	s5, s13
 800d8f6:	eeb0 2a47 	vmov.f32	s4, s14
 800d8fa:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800db2c <V90L+0x32c>
 800d8fe:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800db2c <V90L+0x32c>
 800d902:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800db30 <V90L+0x330>
 800d906:	eeb0 0a67 	vmov.f32	s0, s15
 800d90a:	f7f6 f98d 	bl	8003c28 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d90e:	2300      	movs	r3, #0
 800d910:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	4618      	mov	r0, r3
 800d91a:	f7f2 fe3d 	bl	8000598 <__aeabi_f2d>
 800d91e:	a37e      	add	r3, pc, #504	; (adr r3, 800db18 <V90L+0x318>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fcda 	bl	80002dc <__adddf3>
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	4610      	mov	r0, r2
 800d92e:	4619      	mov	r1, r3
 800d930:	f7f3 f962 	bl	8000bf8 <__aeabi_d2f>
 800d934:	4603      	mov	r3, r0
 800d936:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d93a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d93e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d942:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d94a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d94e:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d952:	eddf 5a74 	vldr	s11, [pc, #464]	; 800db24 <V90L+0x324>
 800d956:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	eeb0 2a47 	vmov.f32	s4, s14
 800d960:	eef0 1a46 	vmov.f32	s3, s12
 800d964:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800db2c <V90L+0x32c>
 800d968:	eef0 0a66 	vmov.f32	s1, s13
 800d96c:	ee00 3a10 	vmov	s0, r3
 800d970:	f7f5 fb34 	bl	8002fdc <straight_table2>
				highspeed_mode = 0;
 800d974:	4b6a      	ldr	r3, [pc, #424]	; (800db20 <V90L+0x320>)
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d97a:	e13a      	b.n	800dbf2 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d97c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d980:	2b01      	cmp	r3, #1
 800d982:	f240 808a 	bls.w	800da9a <V90L+0x29a>
		highspeed_mode = 1;
 800d986:	4b66      	ldr	r3, [pc, #408]	; (800db20 <V90L+0x320>)
 800d988:	2201      	movs	r2, #1
 800d98a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d990:	2300      	movs	r3, #0
 800d992:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d994:	2304      	movs	r3, #4
 800d996:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d998:	2300      	movs	r3, #0
 800d99a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d99c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d9a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d9a4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d9a8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9b8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9bc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9c0:	eddf 4a58 	vldr	s9, [pc, #352]	; 800db24 <V90L+0x324>
 800d9c4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	eeb0 2a47 	vmov.f32	s4, s14
 800d9ce:	eef0 1a45 	vmov.f32	s3, s10
 800d9d2:	eeb0 1a65 	vmov.f32	s2, s11
 800d9d6:	eef0 0a46 	vmov.f32	s1, s12
 800d9da:	eeb0 0a66 	vmov.f32	s0, s13
 800d9de:	f7f5 fafd 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d9e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d10c      	bne.n	800da04 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d9ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9f2:	eeb0 1a47 	vmov.f32	s2, s14
 800d9f6:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800db30 <V90L+0x330>
 800d9fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d9fe:	f7f6 fa63 	bl	8003ec8 <mollifier_slalom_table>
 800da02:	e013      	b.n	800da2c <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800da04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da10:	eef0 2a66 	vmov.f32	s5, s13
 800da14:	eeb0 2a47 	vmov.f32	s4, s14
 800da18:	eddf 1a44 	vldr	s3, [pc, #272]	; 800db2c <V90L+0x32c>
 800da1c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800db2c <V90L+0x32c>
 800da20:	eddf 0a43 	vldr	s1, [pc, #268]	; 800db30 <V90L+0x330>
 800da24:	eeb0 0a67 	vmov.f32	s0, s15
 800da28:	f7f6 f8fe 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da30:	2300      	movs	r3, #0
 800da32:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	4618      	mov	r0, r3
 800da38:	f7f2 fdae 	bl	8000598 <__aeabi_f2d>
 800da3c:	a336      	add	r3, pc, #216	; (adr r3, 800db18 <V90L+0x318>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	f7f2 fc4b 	bl	80002dc <__adddf3>
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	4610      	mov	r0, r2
 800da4c:	4619      	mov	r1, r3
 800da4e:	f7f3 f8d3 	bl	8000bf8 <__aeabi_d2f>
 800da52:	4603      	mov	r3, r0
 800da54:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da58:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da68:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800da6c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da70:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800db24 <V90L+0x324>
 800da74:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	eeb0 2a47 	vmov.f32	s4, s14
 800da7e:	eef0 1a46 	vmov.f32	s3, s12
 800da82:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800db2c <V90L+0x32c>
 800da86:	eef0 0a66 	vmov.f32	s1, s13
 800da8a:	ee00 3a10 	vmov	s0, r3
 800da8e:	f7f5 faa5 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <V90L+0x320>)
 800da94:	2200      	movs	r2, #0
 800da96:	701a      	strb	r2, [r3, #0]
}
 800da98:	e0ab      	b.n	800dbf2 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800da9a:	2300      	movs	r3, #0
 800da9c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800daa2:	2304      	movs	r3, #4
 800daa4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800daaa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800daae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dab2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dab6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800daba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dabe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dac6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800daca:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dace:	eddf 4a15 	vldr	s9, [pc, #84]	; 800db24 <V90L+0x324>
 800dad2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	eeb0 2a47 	vmov.f32	s4, s14
 800dadc:	eef0 1a45 	vmov.f32	s3, s10
 800dae0:	eeb0 1a65 	vmov.f32	s2, s11
 800dae4:	eef0 0a46 	vmov.f32	s1, s12
 800dae8:	eeb0 0a66 	vmov.f32	s0, s13
 800daec:	f7f5 fa76 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800daf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d11d      	bne.n	800db34 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800daf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dafc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db00:	eeb0 1a47 	vmov.f32	s2, s14
 800db04:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db30 <V90L+0x330>
 800db08:	eeb0 0a67 	vmov.f32	s0, s15
 800db0c:	f7f6 f9dc 	bl	8003ec8 <mollifier_slalom_table>
 800db10:	e024      	b.n	800db5c <V90L+0x35c>
 800db12:	bf00      	nop
 800db14:	f3af 8000 	nop.w
 800db18:	c022ec18 	.word	0xc022ec18
 800db1c:	405fd1de 	.word	0x405fd1de
 800db20:	20000808 	.word	0x20000808
 800db24:	42340000 	.word	0x42340000
 800db28:	42d4477b 	.word	0x42d4477b
 800db2c:	00000000 	.word	0x00000000
 800db30:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db40:	eef0 2a66 	vmov.f32	s5, s13
 800db44:	eeb0 2a47 	vmov.f32	s4, s14
 800db48:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800db2c <V90L+0x32c>
 800db4c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800db2c <V90L+0x32c>
 800db50:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800db30 <V90L+0x330>
 800db54:	eeb0 0a67 	vmov.f32	s0, s15
 800db58:	f7f6 f866 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db64:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800db68:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800db6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db78:	edd7 7a01 	vldr	s15, [r7, #4]
 800db7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db84:	eef0 7ae7 	vabs.f32	s15, s15
 800db88:	ee17 0a90 	vmov	r0, s15
 800db8c:	f7f2 fd04 	bl	8000598 <__aeabi_f2d>
 800db90:	f04f 0200 	mov.w	r2, #0
 800db94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db98:	f7f2 fe80 	bl	800089c <__aeabi_ddiv>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4614      	mov	r4, r2
 800dba2:	461d      	mov	r5, r3
 800dba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7f2 fcf6 	bl	8000598 <__aeabi_f2d>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	f7f2 fe72 	bl	800089c <__aeabi_ddiv>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	f04f 0200 	mov.w	r2, #0
 800dbc4:	4b0f      	ldr	r3, [pc, #60]	; (800dc04 <V90L+0x404>)
 800dbc6:	f7f2 fb89 	bl	80002dc <__adddf3>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dbce:	4610      	mov	r0, r2
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	f7f3 f811 	bl	8000bf8 <__aeabi_d2f>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	ee02 3a10 	vmov	s4, r3
 800dbde:	edd7 1a01 	vldr	s3, [r7, #4]
 800dbe2:	ed97 1a01 	vldr	s2, [r7, #4]
 800dbe6:	eef0 0a68 	vmov.f32	s1, s17
 800dbea:	eeb0 0a48 	vmov.f32	s0, s16
 800dbee:	f7f5 f9f5 	bl	8002fdc <straight_table2>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	ecbd 8b02 	vpop	{d8}
 800dbfc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dc00:	b004      	add	sp, #16
 800dc02:	4770      	bx	lr
 800dc04:	408f4000 	.word	0x408f4000

0800dc08 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dc08:	b084      	sub	sp, #16
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b086      	sub	sp, #24
 800dc0e:	af04      	add	r7, sp, #16
 800dc10:	f107 0c10 	add.w	ip, r7, #16
 800dc14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc18:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dc1c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d116      	bne.n	800dc52 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dc24:	2001      	movs	r0, #1
 800dc26:	f7f9 fe57 	bl	80078d8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc2a:	2003      	movs	r0, #3
 800dc2c:	f7f9 fe5e 	bl	80078ec <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dc30:	ed97 0a01 	vldr	s0, [r7, #4]
 800dc34:	f7f9 feee 	bl	8007a14 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dc38:	f7f9 fed8 	bl	80079ec <pl_FunMotor_start>
		HAL_Delay(600);
 800dc3c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dc40:	f00b f8b4 	bl	8018dac <HAL_Delay>
		reset_gyro();
 800dc44:	f7f3 fd90 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc48:	f7f3 f9e6 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc4c:	f7f6 fcb0 	bl	80045b0 <clear_Ierror>
 800dc50:	e00b      	b.n	800dc6a <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dc52:	2001      	movs	r0, #1
 800dc54:	f7f9 fe40 	bl	80078d8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc58:	2003      	movs	r0, #3
 800dc5a:	f7f9 fe47 	bl	80078ec <pl_L_DriveMotor_mode>
		reset_gyro();
 800dc5e:	f7f3 fd83 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc62:	f7f3 f9d9 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc66:	f7f6 fca3 	bl	80045b0 <clear_Ierror>

	}
	record_mode=2;
 800dc6a:	4ba8      	ldr	r3, [pc, #672]	; (800df0c <testturning+0x304>)
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dc70:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d110      	bne.n	800dc9a <testturning+0x92>
 800dc78:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc7c:	9303      	str	r3, [sp, #12]
 800dc7e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc82:	9302      	str	r3, [sp, #8]
 800dc84:	2301      	movs	r3, #1
 800dc86:	9301      	str	r3, [sp, #4]
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	f107 0318 	add.w	r3, r7, #24
 800dc90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc92:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800df10 <testturning+0x308>
 800dc96:	f7fc f973 	bl	8009f80 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dc9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d110      	bne.n	800dcc4 <testturning+0xbc>
 800dca2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dcac:	9302      	str	r3, [sp, #8]
 800dcae:	2301      	movs	r3, #1
 800dcb0:	9301      	str	r3, [sp, #4]
 800dcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcbc:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800df10 <testturning+0x308>
 800dcc0:	f7fc fb44 	bl	800a34c <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dcc4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d10d      	bne.n	800dce8 <testturning+0xe0>
 800dccc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcd0:	9302      	str	r3, [sp, #8]
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dce0:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800df10 <testturning+0x308>
 800dce4:	f7fc fd14 	bl	800a710 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dce8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d10d      	bne.n	800dd0c <testturning+0x104>
 800dcf0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcf4:	9302      	str	r3, [sp, #8]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dd02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd04:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800df10 <testturning+0x308>
 800dd08:	f7fc fe6c 	bl	800a9e4 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dd0c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d10d      	bne.n	800dd30 <testturning+0x128>
 800dd14:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd28:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800df10 <testturning+0x308>
 800dd2c:	f7fc ffbe 	bl	800acac <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dd30:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd34:	2b05      	cmp	r3, #5
 800dd36:	d10e      	bne.n	800dd56 <testturning+0x14e>
 800dd38:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd3c:	9302      	str	r3, [sp, #8]
 800dd3e:	2301      	movs	r3, #1
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd4e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800df10 <testturning+0x308>
 800dd52:	f7fd f915 	bl	800af80 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dd56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd5a:	2b06      	cmp	r3, #6
 800dd5c:	d10e      	bne.n	800dd7c <testturning+0x174>
 800dd5e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd62:	9302      	str	r3, [sp, #8]
 800dd64:	2301      	movs	r3, #1
 800dd66:	9301      	str	r3, [sp, #4]
 800dd68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dd72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd74:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800df10 <testturning+0x308>
 800dd78:	f7fd fa6a 	bl	800b250 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dd7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd80:	2b07      	cmp	r3, #7
 800dd82:	d10e      	bne.n	800dda2 <testturning+0x19a>
 800dd84:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd88:	9302      	str	r3, [sp, #8]
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	9301      	str	r3, [sp, #4]
 800dd8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd9a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800df10 <testturning+0x308>
 800dd9e:	f7fd fc9f 	bl	800b6e0 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dda2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dda6:	2b08      	cmp	r3, #8
 800dda8:	d10e      	bne.n	800ddc8 <testturning+0x1c0>
 800ddaa:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddae:	9302      	str	r3, [sp, #8]
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ddbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddc0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800df10 <testturning+0x308>
 800ddc4:	f7fd fecc 	bl	800bb60 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800ddc8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddcc:	2b09      	cmp	r3, #9
 800ddce:	d10e      	bne.n	800ddee <testturning+0x1e6>
 800ddd0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dde4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dde6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df10 <testturning+0x308>
 800ddea:	f7fe f901 	bl	800bff0 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800ddee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddf2:	2b0a      	cmp	r3, #10
 800ddf4:	d10e      	bne.n	800de14 <testturning+0x20c>
 800ddf6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800de0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de0c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800df10 <testturning+0x308>
 800de10:	f7fe fb32 	bl	800c478 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800de14:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de18:	2b0b      	cmp	r3, #11
 800de1a:	d10e      	bne.n	800de3a <testturning+0x232>
 800de1c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	2301      	movs	r3, #1
 800de24:	9301      	str	r3, [sp, #4]
 800de26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800de30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de32:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800df10 <testturning+0x308>
 800de36:	f7fe fd11 	bl	800c85c <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800de3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de3e:	2b0c      	cmp	r3, #12
 800de40:	d10e      	bne.n	800de60 <testturning+0x258>
 800de42:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	2301      	movs	r3, #1
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de58:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800df10 <testturning+0x308>
 800de5c:	f7fe fee6 	bl	800cc2c <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800de60:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de64:	2b0d      	cmp	r3, #13
 800de66:	d10e      	bne.n	800de86 <testturning+0x27e>
 800de68:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de6c:	9302      	str	r3, [sp, #8]
 800de6e:	2301      	movs	r3, #1
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800de7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de7e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800df10 <testturning+0x308>
 800de82:	f7ff f8c5 	bl	800d010 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800de86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de8a:	2b0e      	cmp	r3, #14
 800de8c:	d10e      	bne.n	800deac <testturning+0x2a4>
 800de8e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de92:	9302      	str	r3, [sp, #8]
 800de94:	2301      	movs	r3, #1
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dea4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800df10 <testturning+0x308>
 800dea8:	f7ff fa9e 	bl	800d3e8 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800deac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800deb0:	2b0f      	cmp	r3, #15
 800deb2:	d10e      	bne.n	800ded2 <testturning+0x2ca>
 800deb4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800deb8:	9302      	str	r3, [sp, #8]
 800deba:	2301      	movs	r3, #1
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deca:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800df10 <testturning+0x308>
 800dece:	f7ff fc97 	bl	800d800 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800ded2:	4b0e      	ldr	r3, [pc, #56]	; (800df0c <testturning+0x304>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ded8:	2003      	movs	r0, #3
 800deda:	f7f9 fd2f 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dede:	2003      	movs	r0, #3
 800dee0:	f7f9 fd04 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800dee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dee8:	f7fa f826 	bl	8007f38 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800deec:	f7f9 fd88 	bl	8007a00 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800def0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800def4:	f7fa f820 	bl	8007f38 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800def8:	2000      	movs	r0, #0
 800defa:	f7f9 fced 	bl	80078d8 <pl_DriveMotor_standby>

}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df08:	b004      	add	sp, #16
 800df0a:	4770      	bx	lr
 800df0c:	2000edc0 	.word	0x2000edc0
 800df10:	c2c80000 	.word	0xc2c80000

0800df14 <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	3b01      	subs	r3, #1
 800df24:	2b03      	cmp	r3, #3
 800df26:	d823      	bhi.n	800df70 <update_coordinate+0x5c>
 800df28:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <update_coordinate+0x1c>)
 800df2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2e:	bf00      	nop
 800df30:	0800df41 	.word	0x0800df41
 800df34:	0800df4d 	.word	0x0800df4d
 800df38:	0800df59 	.word	0x0800df59
 800df3c:	0800df65 	.word	0x0800df65
	case 1://北
		*y += 1;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	601a      	str	r2, [r3, #0]
		break;
 800df4a:	e011      	b.n	800df70 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	601a      	str	r2, [r3, #0]
		break;
 800df56:	e00b      	b.n	800df70 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1e5a      	subs	r2, r3, #1
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	601a      	str	r2, [r3, #0]
		break;
 800df62:	e005      	b.n	800df70 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	1e5a      	subs	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	601a      	str	r2, [r3, #0]
		break;
 800df6e:	bf00      	nop
	}



}
 800df70:	bf00      	nop
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800df7c:	b084      	sub	sp, #16
 800df7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df80:	b091      	sub	sp, #68	; 0x44
 800df82:	af04      	add	r7, sp, #16
 800df84:	ed87 0a03 	vstr	s0, [r7, #12]
 800df88:	edc7 0a02 	vstr	s1, [r7, #8]
 800df8c:	ed87 1a01 	vstr	s2, [r7, #4]
 800df90:	edc7 1a00 	vstr	s3, [r7]
 800df94:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800df98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800df9c:	4b7e      	ldr	r3, [pc, #504]	; (800e198 <AdatiWayReturn+0x21c>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	f7f9 fc98 	bl	80078d8 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800dfa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dfac:	f00a fefe 	bl	8018dac <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	623b      	str	r3, [r7, #32]
	int y=0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	char timer_end_mode=0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dfd2:	4b72      	ldr	r3, [pc, #456]	; (800e19c <AdatiWayReturn+0x220>)
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	2b86      	cmp	r3, #134	; 0x86
 800dfd8:	bfcc      	ite	gt
 800dfda:	2301      	movgt	r3, #1
 800dfdc:	2300      	movle	r3, #0
 800dfde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dfe2:	4b6e      	ldr	r3, [pc, #440]	; (800e19c <AdatiWayReturn+0x220>)
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfea:	4293      	cmp	r3, r2
 800dfec:	bfcc      	ite	gt
 800dfee:	2301      	movgt	r3, #1
 800dff0:	2300      	movle	r3, #0
 800dff2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dff6:	4b69      	ldr	r3, [pc, #420]	; (800e19c <AdatiWayReturn+0x220>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dffe:	4293      	cmp	r3, r2
 800e000:	bfcc      	ite	gt
 800e002:	2301      	movgt	r3, #1
 800e004:	2300      	movle	r3, #0
 800e006:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e00a:	6a38      	ldr	r0, [r7, #32]
 800e00c:	69f9      	ldr	r1, [r7, #28]
 800e00e:	69ba      	ldr	r2, [r7, #24]
 800e010:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e014:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e018:	9301      	str	r3, [sp, #4]
 800e01a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	4623      	mov	r3, r4
 800e022:	f002 fcdf 	bl	80109e4 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e026:	f006 f903 	bl	8014230 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e02a:	2064      	movs	r0, #100	; 0x64
 800e02c:	f00a febe 	bl	8018dac <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e030:	6978      	ldr	r0, [r7, #20]
 800e032:	ed97 2a01 	vldr	s4, [r7, #4]
 800e036:	edd7 1a03 	vldr	s3, [r7, #12]
 800e03a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e03e:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e1a0 <AdatiWayReturn+0x224>
 800e042:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e1a4 <AdatiWayReturn+0x228>
 800e046:	f7f4 ffc9 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e04a:	69ba      	ldr	r2, [r7, #24]
 800e04c:	f107 011c 	add.w	r1, r7, #28
 800e050:	f107 0320 	add.w	r3, r7, #32
 800e054:	4618      	mov	r0, r3
 800e056:	f7ff ff5d 	bl	800df14 <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e05a:	4b50      	ldr	r3, [pc, #320]	; (800e19c <AdatiWayReturn+0x220>)
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	2b86      	cmp	r3, #134	; 0x86
 800e060:	bfcc      	ite	gt
 800e062:	2301      	movgt	r3, #1
 800e064:	2300      	movle	r3, #0
 800e066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e06a:	4b4c      	ldr	r3, [pc, #304]	; (800e19c <AdatiWayReturn+0x220>)
 800e06c:	691b      	ldr	r3, [r3, #16]
 800e06e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e072:	4293      	cmp	r3, r2
 800e074:	bfcc      	ite	gt
 800e076:	2301      	movgt	r3, #1
 800e078:	2300      	movle	r3, #0
 800e07a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e07e:	4b47      	ldr	r3, [pc, #284]	; (800e19c <AdatiWayReturn+0x220>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e086:	4293      	cmp	r3, r2
 800e088:	bfcc      	ite	gt
 800e08a:	2301      	movgt	r3, #1
 800e08c:	2300      	movle	r3, #0
 800e08e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		mode.WallControlMode=1;
 800e092:	2301      	movs	r3, #1
 800e094:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e096:	2301      	movs	r3, #1
 800e098:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e09a:	2300      	movs	r3, #0
 800e09c:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e09e:	6978      	ldr	r0, [r7, #20]
 800e0a0:	ed97 2a01 	vldr	s4, [r7, #4]
 800e0a4:	edd7 1a03 	vldr	s3, [r7, #12]
 800e0a8:	ed97 1a03 	vldr	s2, [r7, #12]
 800e0ac:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0b0:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e0b4:	f7f4 ff92 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0b8:	6a38      	ldr	r0, [r7, #32]
 800e0ba:	69f9      	ldr	r1, [r7, #28]
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e0c6:	9301      	str	r3, [sp, #4]
 800e0c8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	4623      	mov	r3, r4
 800e0d0:	f002 fc88 	bl	80109e4 <update_wall>
		if(Dijkstra_mode==2){
 800e0d4:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d104      	bne.n	800e0e6 <AdatiWayReturn+0x16a>
					route_Dijkstra();
 800e0dc:	f005 f86e 	bl	80131bc <route_Dijkstra>
					create_StepCountMap_unknown();
 800e0e0:	f005 fd70 	bl	8013bc4 <create_StepCountMap_unknown>
 800e0e4:	e001      	b.n	800e0ea <AdatiWayReturn+0x16e>
				}else{
					create_StepCountMap_queue();
 800e0e6:	f006 f8a3 	bl	8014230 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e0ea:	6a3b      	ldr	r3, [r7, #32]
 800e0ec:	69fa      	ldr	r2, [r7, #28]
 800e0ee:	69b9      	ldr	r1, [r7, #24]
 800e0f0:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e0f4:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e0f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0fc:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e100:	9102      	str	r1, [sp, #8]
 800e102:	9201      	str	r2, [sp, #4]
 800e104:	9300      	str	r3, [sp, #0]
 800e106:	4633      	mov	r3, r6
 800e108:	462a      	mov	r2, r5
 800e10a:	4621      	mov	r1, r4
 800e10c:	f003 f9e4 	bl	80114d8 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e110:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <AdatiWayReturn+0x1a0>
 800e118:	23ff      	movs	r3, #255	; 0xff
 800e11a:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e11c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <AdatiWayReturn+0x1ac>
 800e124:	23ff      	movs	r3, #255	; 0xff
 800e126:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e128:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d001      	beq.n	800e134 <AdatiWayReturn+0x1b8>
 800e130:	23ff      	movs	r3, #255	; 0xff
 800e132:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e134:	6a38      	ldr	r0, [r7, #32]
 800e136:	69fc      	ldr	r4, [r7, #28]
 800e138:	69bd      	ldr	r5, [r7, #24]
 800e13a:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e13c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e13e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e140:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e142:	9102      	str	r1, [sp, #8]
 800e144:	9201      	str	r2, [sp, #4]
 800e146:	9300      	str	r3, [sp, #0]
 800e148:	4633      	mov	r3, r6
 800e14a:	462a      	mov	r2, r5
 800e14c:	4621      	mov	r1, r4
 800e14e:	f002 f9f5 	bl	801053c <decision_kitiku>
		mode.WallCutMode=1;
 800e152:	2301      	movs	r3, #1
 800e154:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e156:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e15a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e15e:	4619      	mov	r1, r3
 800e160:	6978      	ldr	r0, [r7, #20]
 800e162:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e166:	f7f5 fbe3 	bl	8003930 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e16a:	6a3b      	ldr	r3, [r7, #32]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d103      	bne.n	800e178 <AdatiWayReturn+0x1fc>
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 827e 	beq.w	800e674 <AdatiWayReturn+0x6f8>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	2b0b      	cmp	r3, #11
 800e17c:	d003      	beq.n	800e186 <AdatiWayReturn+0x20a>
 800e17e:	6a3b      	ldr	r3, [r7, #32]
 800e180:	2b0c      	cmp	r3, #12
 800e182:	f040 810c 	bne.w	800e39e <AdatiWayReturn+0x422>
 800e186:	69fb      	ldr	r3, [r7, #28]
 800e188:	2b0a      	cmp	r3, #10
 800e18a:	f000 809a 	beq.w	800e2c2 <AdatiWayReturn+0x346>
 800e18e:	69fb      	ldr	r3, [r7, #28]
 800e190:	2b0b      	cmp	r3, #11
 800e192:	f040 8104 	bne.w	800e39e <AdatiWayReturn+0x422>


			while (front_wall==0) {
 800e196:	e094      	b.n	800e2c2 <AdatiWayReturn+0x346>
 800e198:	20000834 	.word	0x20000834
 800e19c:	20000470 	.word	0x20000470
 800e1a0:	00000000 	.word	0x00000000
 800e1a4:	42830000 	.word	0x42830000
 800e1a8:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1b8:	6978      	ldr	r0, [r7, #20]
 800e1ba:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1be:	edd7 1a03 	vldr	s3, [r7, #12]
 800e1c2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1c6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1ca:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e1a8 <AdatiWayReturn+0x22c>
 800e1ce:	f7f4 ff05 	bl	8002fdc <straight_table2>

				update_coordinate(&x,&y,direction);
 800e1d2:	69ba      	ldr	r2, [r7, #24]
 800e1d4:	f107 011c 	add.w	r1, r7, #28
 800e1d8:	f107 0320 	add.w	r3, r7, #32
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7ff fe99 	bl	800df14 <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e1e2:	4b7f      	ldr	r3, [pc, #508]	; (800e3e0 <AdatiWayReturn+0x464>)
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	2b86      	cmp	r3, #134	; 0x86
 800e1e8:	bfcc      	ite	gt
 800e1ea:	2301      	movgt	r3, #1
 800e1ec:	2300      	movle	r3, #0
 800e1ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e1f2:	4b7b      	ldr	r3, [pc, #492]	; (800e3e0 <AdatiWayReturn+0x464>)
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	bfcc      	ite	gt
 800e1fe:	2301      	movgt	r3, #1
 800e200:	2300      	movle	r3, #0
 800e202:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e206:	4b76      	ldr	r3, [pc, #472]	; (800e3e0 <AdatiWayReturn+0x464>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e20e:	4293      	cmp	r3, r2
 800e210:	bfcc      	ite	gt
 800e212:	2301      	movgt	r3, #1
 800e214:	2300      	movle	r3, #0
 800e216:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

				mode.WallControlMode=1;
 800e21a:	2301      	movs	r3, #1
 800e21c:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e21e:	2301      	movs	r3, #1
 800e220:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e222:	2300      	movs	r3, #0
 800e224:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e226:	6978      	ldr	r0, [r7, #20]
 800e228:	ed97 2a01 	vldr	s4, [r7, #4]
 800e22c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e230:	ed97 1a03 	vldr	s2, [r7, #12]
 800e234:	edd7 0a03 	vldr	s1, [r7, #12]
 800e238:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e23c:	f7f4 fece 	bl	8002fdc <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e240:	6a38      	ldr	r0, [r7, #32]
 800e242:	69f9      	ldr	r1, [r7, #28]
 800e244:	69ba      	ldr	r2, [r7, #24]
 800e246:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e24a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	4623      	mov	r3, r4
 800e258:	f002 fbc4 	bl	80109e4 <update_wall>
				create_StepCountMap_queue();
 800e25c:	f005 ffe8 	bl	8014230 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	69fa      	ldr	r2, [r7, #28]
 800e264:	69b9      	ldr	r1, [r7, #24]
 800e266:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e26a:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e26e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e272:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e276:	9102      	str	r1, [sp, #8]
 800e278:	9201      	str	r2, [sp, #4]
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	4633      	mov	r3, r6
 800e27e:	462a      	mov	r2, r5
 800e280:	4621      	mov	r1, r4
 800e282:	f003 f929 	bl	80114d8 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d001      	beq.n	800e292 <AdatiWayReturn+0x316>
 800e28e:	23ff      	movs	r3, #255	; 0xff
 800e290:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e292:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e296:	2b00      	cmp	r3, #0
 800e298:	d001      	beq.n	800e29e <AdatiWayReturn+0x322>
 800e29a:	23ff      	movs	r3, #255	; 0xff
 800e29c:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e29e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d001      	beq.n	800e2aa <AdatiWayReturn+0x32e>
 800e2a6:	23ff      	movs	r3, #255	; 0xff
 800e2a8:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e2ae:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e2b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6978      	ldr	r0, [r7, #20]
 800e2ba:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2be:	f7f5 fb37 	bl	8003930 <End_straight>
			while (front_wall==0) {
 800e2c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2c6:	f083 0301 	eor.w	r3, r3, #1
 800e2ca:	b2db      	uxtb	r3, r3
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	f47f af6d 	bne.w	800e1ac <AdatiWayReturn+0x230>


			}
			mode.WallControlMode=0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2de:	6978      	ldr	r0, [r7, #20]
 800e2e0:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2e4:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2e8:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e40c <AdatiWayReturn+0x490>
 800e2ec:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2f0:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e3e4 <AdatiWayReturn+0x468>
 800e2f4:	f7f4 fe72 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e2f8:	2003      	movs	r0, #3
 800e2fa:	f7f9 fb1f 	bl	800793c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e2fe:	2003      	movs	r0, #3
 800e300:	f7f9 faf4 	bl	80078ec <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e304:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e308:	f7f9 fe16 	bl	8007f38 <wait_ms_NoReset>
			no_safty = 1;
 800e30c:	4b36      	ldr	r3, [pc, #216]	; (800e3e8 <AdatiWayReturn+0x46c>)
 800e30e:	2201      	movs	r2, #1
 800e310:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e312:	ed97 2a00 	vldr	s4, [r7]
 800e316:	edd7 1a02 	vldr	s3, [r7, #8]
 800e31a:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e40c <AdatiWayReturn+0x490>
 800e31e:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e40c <AdatiWayReturn+0x490>
 800e322:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e3ec <AdatiWayReturn+0x470>
 800e326:	f7f5 fb67 	bl	80039f8 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e32a:	2003      	movs	r0, #3
 800e32c:	f7f9 fb06 	bl	800793c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e330:	2003      	movs	r0, #3
 800e332:	f7f9 fadb 	bl	80078ec <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e33a:	f7f9 fdfd 	bl	8007f38 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e33e:	6978      	ldr	r0, [r7, #20]
 800e340:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e3f0 <AdatiWayReturn+0x474>
 800e344:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e3f4 <AdatiWayReturn+0x478>
 800e348:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e40c <AdatiWayReturn+0x490>
 800e34c:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e40c <AdatiWayReturn+0x490>
 800e350:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e3f8 <AdatiWayReturn+0x47c>
 800e354:	f7f4 fe42 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e358:	2003      	movs	r0, #3
 800e35a:	f7f9 faef 	bl	800793c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e35e:	2003      	movs	r0, #3
 800e360:	f7f9 fac4 	bl	80078ec <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e364:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e368:	f7f9 fde6 	bl	8007f38 <wait_ms_NoReset>
			no_safty = 0;
 800e36c:	4b1e      	ldr	r3, [pc, #120]	; (800e3e8 <AdatiWayReturn+0x46c>)
 800e36e:	2200      	movs	r2, #0
 800e370:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800e372:	f7f6 f91d 	bl	80045b0 <clear_Ierror>
			maze_mode = 0;
 800e376:	4b21      	ldr	r3, [pc, #132]	; (800e3fc <AdatiWayReturn+0x480>)
 800e378:	2200      	movs	r2, #0
 800e37a:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	3302      	adds	r3, #2
 800e380:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	2b04      	cmp	r3, #4
 800e386:	dd02      	ble.n	800e38e <AdatiWayReturn+0x412>
				direction = direction-4;
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	3b04      	subs	r3, #4
 800e38c:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e38e:	69bb      	ldr	r3, [r7, #24]
 800e390:	2b00      	cmp	r3, #0
 800e392:	f300 8171 	bgt.w	800e678 <AdatiWayReturn+0x6fc>
				direction = direction+4;
 800e396:	69bb      	ldr	r3, [r7, #24]
 800e398:	3304      	adds	r3, #4
 800e39a:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e39c:	e16c      	b.n	800e678 <AdatiWayReturn+0x6fc>
		}
		if(know_mode==0){
 800e39e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d102      	bne.n	800e3ac <AdatiWayReturn+0x430>
			kitikukan = 0;
 800e3a6:	4b16      	ldr	r3, [pc, #88]	; (800e400 <AdatiWayReturn+0x484>)
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e3ac:	4b14      	ldr	r3, [pc, #80]	; (800e400 <AdatiWayReturn+0x484>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f040 80f8 	bne.w	800e5a6 <AdatiWayReturn+0x62a>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e3b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3b8:	2bff      	cmp	r3, #255	; 0xff
 800e3ba:	d12b      	bne.n	800e414 <AdatiWayReturn+0x498>
 800e3bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3be:	2bff      	cmp	r3, #255	; 0xff
 800e3c0:	d128      	bne.n	800e414 <AdatiWayReturn+0x498>
 800e3c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3c4:	2bff      	cmp	r3, #255	; 0xff
 800e3c6:	d125      	bne.n	800e414 <AdatiWayReturn+0x498>
 800e3c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3ca:	2bff      	cmp	r3, #255	; 0xff
 800e3cc:	d122      	bne.n	800e414 <AdatiWayReturn+0x498>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e3ce:	4b0d      	ldr	r3, [pc, #52]	; (800e404 <AdatiWayReturn+0x488>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e3d4:	f7f9 fae6 	bl	80079a4 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e3d8:	2000      	movs	r0, #0
 800e3da:	f7f9 fa7d 	bl	80078d8 <pl_DriveMotor_standby>

				break;
 800e3de:	e14e      	b.n	800e67e <AdatiWayReturn+0x702>
 800e3e0:	20000470 	.word	0x20000470
 800e3e4:	42140000 	.word	0x42140000
 800e3e8:	20000806 	.word	0x20000806
 800e3ec:	43340000 	.word	0x43340000
 800e3f0:	447a0000 	.word	0x447a0000
 800e3f4:	c3160000 	.word	0xc3160000
 800e3f8:	c1f40000 	.word	0xc1f40000
 800e3fc:	20000834 	.word	0x20000834
 800e400:	20000838 	.word	0x20000838
 800e404:	20000807 	.word	0x20000807
 800e408:	42a40000 	.word	0x42a40000
 800e40c:	00000000 	.word	0x00000000
 800e410:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e414:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e418:	429a      	cmp	r2, r3
 800e41a:	d81a      	bhi.n	800e452 <AdatiWayReturn+0x4d6>
 800e41c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e41e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e420:	429a      	cmp	r2, r3
 800e422:	d816      	bhi.n	800e452 <AdatiWayReturn+0x4d6>
 800e424:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e428:	429a      	cmp	r2, r3
 800e42a:	d812      	bhi.n	800e452 <AdatiWayReturn+0x4d6>
				// 直進
				mode.WallControlMode=1;
 800e42c:	2301      	movs	r3, #1
 800e42e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e430:	2300      	movs	r3, #0
 800e432:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e434:	2300      	movs	r3, #0
 800e436:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e438:	6978      	ldr	r0, [r7, #20]
 800e43a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e43e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e442:	ed97 1a03 	vldr	s2, [r7, #12]
 800e446:	edd7 0a03 	vldr	s1, [r7, #12]
 800e44a:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e408 <AdatiWayReturn+0x48c>
 800e44e:	f7f4 fdc5 	bl	8002fdc <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e452:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e454:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e456:	429a      	cmp	r2, r3
 800e458:	d219      	bcs.n	800e48e <AdatiWayReturn+0x512>
 800e45a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e45c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45e:	429a      	cmp	r2, r3
 800e460:	d815      	bhi.n	800e48e <AdatiWayReturn+0x512>
 800e462:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e464:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e466:	429a      	cmp	r2, r3
 800e468:	d811      	bhi.n	800e48e <AdatiWayReturn+0x512>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e46a:	2300      	movs	r3, #0
 800e46c:	9303      	str	r3, [sp, #12]
 800e46e:	2300      	movs	r3, #0
 800e470:	9302      	str	r3, [sp, #8]
 800e472:	2300      	movs	r3, #0
 800e474:	9301      	str	r3, [sp, #4]
 800e476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e478:	9300      	str	r3, [sp, #0]
 800e47a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e47e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e480:	ed97 0a03 	vldr	s0, [r7, #12]
 800e484:	f7fb fd7c 	bl	8009f80 <slalomR>
				direction++;
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	3301      	adds	r3, #1
 800e48c:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e48e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e490:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e492:	429a      	cmp	r2, r3
 800e494:	d219      	bcs.n	800e4ca <AdatiWayReturn+0x54e>
 800e496:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e498:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d215      	bcs.n	800e4ca <AdatiWayReturn+0x54e>
 800e49e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e4a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d811      	bhi.n	800e4ca <AdatiWayReturn+0x54e>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	9303      	str	r3, [sp, #12]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9302      	str	r3, [sp, #8]
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4bc:	ed97 0a03 	vldr	s0, [r7, #12]
 800e4c0:	f7fb ff44 	bl	800a34c <slalomL>
				direction--;
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	3b01      	subs	r3, #1
 800e4c8:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e4ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	f080 80ac 	bcs.w	800e62c <AdatiWayReturn+0x6b0>
 800e4d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	f080 80a7 	bcs.w	800e62c <AdatiWayReturn+0x6b0>
					&& back_count < left_count){
 800e4de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	f080 80a2 	bcs.w	800e62c <AdatiWayReturn+0x6b0>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4f4:	6978      	ldr	r0, [r7, #20]
 800e4f6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4fa:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4fe:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e40c <AdatiWayReturn+0x490>
 800e502:	edd7 0a03 	vldr	s1, [r7, #12]
 800e506:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e410 <AdatiWayReturn+0x494>
 800e50a:	f7f4 fd67 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e50e:	2003      	movs	r0, #3
 800e510:	f7f9 fa14 	bl	800793c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e514:	2003      	movs	r0, #3
 800e516:	f7f9 f9e9 	bl	80078ec <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e51a:	2064      	movs	r0, #100	; 0x64
 800e51c:	f7f9 fd0c 	bl	8007f38 <wait_ms_NoReset>
				no_safty = 1;
 800e520:	4b8c      	ldr	r3, [pc, #560]	; (800e754 <AdatiWayReturn+0x7d8>)
 800e522:	2201      	movs	r2, #1
 800e524:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e526:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e52a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800e52e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e532:	4618      	mov	r0, r3
 800e534:	edd7 0a00 	vldr	s1, [r7]
 800e538:	ed97 0a02 	vldr	s0, [r7, #8]
 800e53c:	f7fb fc56 	bl	8009dec <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				wait_ms_NoReset(100);
 800e540:	2064      	movs	r0, #100	; 0x64
 800e542:	f7f9 fcf9 	bl	8007f38 <wait_ms_NoReset>
				no_safty = 0;
 800e546:	4b83      	ldr	r3, [pc, #524]	; (800e754 <AdatiWayReturn+0x7d8>)
 800e548:	2200      	movs	r2, #0
 800e54a:	701a      	strb	r2, [r3, #0]
				//clear_Ierror();
				mode.WallControlMode=0;
 800e54c:	2300      	movs	r3, #0
 800e54e:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e550:	6978      	ldr	r0, [r7, #20]
 800e552:	ed9f 2a81 	vldr	s4, [pc, #516]	; 800e758 <AdatiWayReturn+0x7dc>
 800e556:	eddf 1a81 	vldr	s3, [pc, #516]	; 800e75c <AdatiWayReturn+0x7e0>
 800e55a:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 800e784 <AdatiWayReturn+0x808>
 800e55e:	eddf 0a89 	vldr	s1, [pc, #548]	; 800e784 <AdatiWayReturn+0x808>
 800e562:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 800e760 <AdatiWayReturn+0x7e4>
 800e566:	f7f4 fd39 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e56a:	2003      	movs	r0, #3
 800e56c:	f7f9 f9e6 	bl	800793c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e570:	2003      	movs	r0, #3
 800e572:	f7f9 f9bb 	bl	80078ec <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e576:	2064      	movs	r0, #100	; 0x64
 800e578:	f7f9 fcde 	bl	8007f38 <wait_ms_NoReset>
				clear_Ierror();
 800e57c:	f7f6 f818 	bl	80045b0 <clear_Ierror>
				mode.WallControlMode=1;
 800e580:	2301      	movs	r3, #1
 800e582:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e584:	6978      	ldr	r0, [r7, #20]
 800e586:	ed97 2a01 	vldr	s4, [r7, #4]
 800e58a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e58e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e592:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800e784 <AdatiWayReturn+0x808>
 800e596:	ed9f 0a73 	vldr	s0, [pc, #460]	; 800e764 <AdatiWayReturn+0x7e8>
 800e59a:	f7f4 fd1f 	bl	8002fdc <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e59e:	69bb      	ldr	r3, [r7, #24]
 800e5a0:	3302      	adds	r3, #2
 800e5a2:	61bb      	str	r3, [r7, #24]
 800e5a4:	e042      	b.n	800e62c <AdatiWayReturn+0x6b0>

			}

		} else {
			mode.WallControlMode=1;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5b2:	6978      	ldr	r0, [r7, #20]
 800e5b4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5b8:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5bc:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5c0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5c4:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e788 <AdatiWayReturn+0x80c>
 800e5c8:	f7f4 fd08 	bl	8002fdc <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e5cc:	f107 0218 	add.w	r2, r7, #24
 800e5d0:	f107 011c 	add.w	r1, r7, #28
 800e5d4:	f107 0320 	add.w	r3, r7, #32
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f002 f821 	bl	8010620 <compress_kitiku>
			mode.WallCutMode=0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	2101      	movs	r1, #1
 800e5e6:	6978      	ldr	r0, [r7, #20]
 800e5e8:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800e788 <AdatiWayReturn+0x80c>
 800e5ec:	f7f5 f9a0 	bl	8003930 <End_straight>
			mode.WallControlMode=1;
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e5fc:	4b5a      	ldr	r3, [pc, #360]	; (800e768 <AdatiWayReturn+0x7ec>)
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	4613      	mov	r3, r2
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	4413      	add	r3, r2
 800e606:	011a      	lsls	r2, r3, #4
 800e608:	1ad3      	subs	r3, r2, r3
 800e60a:	ee07 3a90 	vmov	s15, r3
 800e60e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e612:	6978      	ldr	r0, [r7, #20]
 800e614:	ed97 2a01 	vldr	s4, [r7, #4]
 800e618:	eddf 1a54 	vldr	s3, [pc, #336]	; 800e76c <AdatiWayReturn+0x7f0>
 800e61c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e620:	edd7 0a03 	vldr	s1, [r7, #12]
 800e624:	eeb0 0a67 	vmov.f32	s0, s15
 800e628:	f7f4 fcd8 	bl	8002fdc <straight_table2>

		}

		if (direction >= 5) {
 800e62c:	69bb      	ldr	r3, [r7, #24]
 800e62e:	2b04      	cmp	r3, #4
 800e630:	dd02      	ble.n	800e638 <AdatiWayReturn+0x6bc>
			direction = direction-4;
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	3b04      	subs	r3, #4
 800e636:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e638:	69bb      	ldr	r3, [r7, #24]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	dc02      	bgt.n	800e644 <AdatiWayReturn+0x6c8>
			direction = direction+4;
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	3304      	adds	r3, #4
 800e642:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e644:	4b4a      	ldr	r3, [pc, #296]	; (800e770 <AdatiWayReturn+0x7f4>)
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d017      	beq.n	800e67c <AdatiWayReturn+0x700>
		if (g_timCount_sec>240){
 800e64c:	4b49      	ldr	r3, [pc, #292]	; (800e774 <AdatiWayReturn+0x7f8>)
 800e64e:	edd3 7a00 	vldr	s15, [r3]
 800e652:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800e778 <AdatiWayReturn+0x7fc>
 800e656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e65a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65e:	dd08      	ble.n	800e672 <AdatiWayReturn+0x6f6>
					// 秒数エンド
						timer_end_mode=1;
 800e660:	2301      	movs	r3, #1
 800e662:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
						pl_DriveMotor_stop();
 800e666:	f7f9 f99d 	bl	80079a4 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e66a:	2000      	movs	r0, #0
 800e66c:	f7f9 f934 	bl	80078d8 <pl_DriveMotor_standby>
						break;
 800e670:	e005      	b.n	800e67e <AdatiWayReturn+0x702>
		update_coordinate(&x,&y,direction);
 800e672:	e4ea      	b.n	800e04a <AdatiWayReturn+0xce>
		if (x == 0 && y == 0) {break;}
 800e674:	bf00      	nop
 800e676:	e002      	b.n	800e67e <AdatiWayReturn+0x702>
			break;
 800e678:	bf00      	nop
 800e67a:	e000      	b.n	800e67e <AdatiWayReturn+0x702>
		if(error_mode==1){break;}
 800e67c:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e67e:	4b3c      	ldr	r3, [pc, #240]	; (800e770 <AdatiWayReturn+0x7f4>)
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d101      	bne.n	800e68a <AdatiWayReturn+0x70e>
	record_in();
 800e686:	f7f8 fe35 	bl	80072f4 <record_in>
	}
	create_DijkstraMap();
 800e68a:	f003 f84d 	bl	8011728 <create_DijkstraMap>
	clear_Ierror();
 800e68e:	f7f5 ff8f 	bl	80045b0 <clear_Ierror>
	reset_gyro();
 800e692:	f7f3 f869 	bl	8001768 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e696:	4b39      	ldr	r3, [pc, #228]	; (800e77c <AdatiWayReturn+0x800>)
 800e698:	2201      	movs	r2, #1
 800e69a:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e69c:	6978      	ldr	r0, [r7, #20]
 800e69e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6a2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e6a6:	ed97 1a03 	vldr	s2, [r7, #12]
 800e6aa:	eddf 0a36 	vldr	s1, [pc, #216]	; 800e784 <AdatiWayReturn+0x808>
 800e6ae:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e764 <AdatiWayReturn+0x7e8>
 800e6b2:	f7f4 fc93 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e6b6:	69ba      	ldr	r2, [r7, #24]
 800e6b8:	f107 011c 	add.w	r1, r7, #28
 800e6bc:	f107 0320 	add.w	r3, r7, #32
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7ff fc27 	bl	800df14 <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e6c6:	4b2e      	ldr	r3, [pc, #184]	; (800e780 <AdatiWayReturn+0x804>)
 800e6c8:	689b      	ldr	r3, [r3, #8]
 800e6ca:	2b86      	cmp	r3, #134	; 0x86
 800e6cc:	bfcc      	ite	gt
 800e6ce:	2301      	movgt	r3, #1
 800e6d0:	2300      	movle	r3, #0
 800e6d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e6d6:	4b2a      	ldr	r3, [pc, #168]	; (800e780 <AdatiWayReturn+0x804>)
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6de:	4293      	cmp	r3, r2
 800e6e0:	bfcc      	ite	gt
 800e6e2:	2301      	movgt	r3, #1
 800e6e4:	2300      	movle	r3, #0
 800e6e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e6ea:	4b25      	ldr	r3, [pc, #148]	; (800e780 <AdatiWayReturn+0x804>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	bfcc      	ite	gt
 800e6f6:	2301      	movgt	r3, #1
 800e6f8:	2300      	movle	r3, #0
 800e6fa:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

		mode.WallControlMode=1;
 800e6fe:	2301      	movs	r3, #1
 800e700:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e702:	2301      	movs	r3, #1
 800e704:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e706:	2300      	movs	r3, #0
 800e708:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e70a:	6978      	ldr	r0, [r7, #20]
 800e70c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e710:	edd7 1a03 	vldr	s3, [r7, #12]
 800e714:	ed97 1a03 	vldr	s2, [r7, #12]
 800e718:	edd7 0a03 	vldr	s1, [r7, #12]
 800e71c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e720:	f7f4 fc5c 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e724:	6a38      	ldr	r0, [r7, #32]
 800e726:	69f9      	ldr	r1, [r7, #28]
 800e728:	69ba      	ldr	r2, [r7, #24]
 800e72a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e72e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e732:	9301      	str	r3, [sp, #4]
 800e734:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e738:	9300      	str	r3, [sp, #0]
 800e73a:	4623      	mov	r3, r4
 800e73c:	f002 f952 	bl	80109e4 <update_wall>
		if(Dijkstra_mode==1){
 800e740:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e744:	2b01      	cmp	r3, #1
 800e746:	d121      	bne.n	800e78c <AdatiWayReturn+0x810>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e748:	f004 fd38 	bl	80131bc <route_Dijkstra>
			create_StepCountMap_unknown();
 800e74c:	f005 fa3a 	bl	8013bc4 <create_StepCountMap_unknown>
 800e750:	e01e      	b.n	800e790 <AdatiWayReturn+0x814>
 800e752:	bf00      	nop
 800e754:	20000806 	.word	0x20000806
 800e758:	447a0000 	.word	0x447a0000
 800e75c:	c3160000 	.word	0xc3160000
 800e760:	c1a40000 	.word	0xc1a40000
 800e764:	42830000 	.word	0x42830000
 800e768:	2000082c 	.word	0x2000082c
 800e76c:	44610000 	.word	0x44610000
 800e770:	20000807 	.word	0x20000807
 800e774:	2000072c 	.word	0x2000072c
 800e778:	43700000 	.word	0x43700000
 800e77c:	20000834 	.word	0x20000834
 800e780:	20000470 	.word	0x20000470
 800e784:	00000000 	.word	0x00000000
 800e788:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e78c:	f006 f83a 	bl	8014804 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e790:	6a3b      	ldr	r3, [r7, #32]
 800e792:	69fa      	ldr	r2, [r7, #28]
 800e794:	69b9      	ldr	r1, [r7, #24]
 800e796:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e79a:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e79e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e7a2:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e7a6:	9102      	str	r1, [sp, #8]
 800e7a8:	9201      	str	r2, [sp, #4]
 800e7aa:	9300      	str	r3, [sp, #0]
 800e7ac:	4633      	mov	r3, r6
 800e7ae:	462a      	mov	r2, r5
 800e7b0:	4621      	mov	r1, r4
 800e7b2:	f002 fe91 	bl	80114d8 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e7b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d001      	beq.n	800e7c2 <AdatiWayReturn+0x846>
 800e7be:	23ff      	movs	r3, #255	; 0xff
 800e7c0:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e7c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d001      	beq.n	800e7ce <AdatiWayReturn+0x852>
 800e7ca:	23ff      	movs	r3, #255	; 0xff
 800e7cc:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e7ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d001      	beq.n	800e7da <AdatiWayReturn+0x85e>
 800e7d6:	23ff      	movs	r3, #255	; 0xff
 800e7d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e7da:	6a38      	ldr	r0, [r7, #32]
 800e7dc:	69fc      	ldr	r4, [r7, #28]
 800e7de:	69bd      	ldr	r5, [r7, #24]
 800e7e0:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e7e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7e6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7e8:	9102      	str	r1, [sp, #8]
 800e7ea:	9201      	str	r2, [sp, #4]
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	4633      	mov	r3, r6
 800e7f0:	462a      	mov	r2, r5
 800e7f2:	4621      	mov	r1, r4
 800e7f4:	f001 fea2 	bl	801053c <decision_kitiku>
		mode.WallCutMode=1;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e7fc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e800:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e804:	4619      	mov	r1, r3
 800e806:	6978      	ldr	r0, [r7, #20]
 800e808:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e80c:	f7f5 f890 	bl	8003930 <End_straight>


			if(x == 0 && y == 0) {
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d165      	bne.n	800e8e2 <AdatiWayReturn+0x966>
 800e816:	69fb      	ldr	r3, [r7, #28]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d162      	bne.n	800e8e2 <AdatiWayReturn+0x966>

				mode.WallControlMode=0;
 800e81c:	2300      	movs	r3, #0
 800e81e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e820:	2300      	movs	r3, #0
 800e822:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e824:	2300      	movs	r3, #0
 800e826:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e828:	6978      	ldr	r0, [r7, #20]
 800e82a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e82e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e832:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e784 <AdatiWayReturn+0x808>
 800e836:	edd7 0a03 	vldr	s1, [r7, #12]
 800e83a:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e788 <AdatiWayReturn+0x80c>
 800e83e:	f7f4 fbcd 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e842:	2003      	movs	r0, #3
 800e844:	f7f9 f87a 	bl	800793c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e848:	2003      	movs	r0, #3
 800e84a:	f7f9 f84f 	bl	80078ec <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e84e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e852:	f7f9 fb71 	bl	8007f38 <wait_ms_NoReset>
				no_safty = 1;
 800e856:	4bbb      	ldr	r3, [pc, #748]	; (800eb44 <AdatiWayReturn+0xbc8>)
 800e858:	2201      	movs	r2, #1
 800e85a:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e85c:	ed97 2a00 	vldr	s4, [r7]
 800e860:	edd7 1a02 	vldr	s3, [r7, #8]
 800e864:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e868:	eddf 0ab7 	vldr	s1, [pc, #732]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e86c:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800eb4c <AdatiWayReturn+0xbd0>
 800e870:	f7f5 f8c2 	bl	80039f8 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e874:	2003      	movs	r0, #3
 800e876:	f7f9 f861 	bl	800793c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e87a:	2003      	movs	r0, #3
 800e87c:	f7f9 f836 	bl	80078ec <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e884:	f7f9 fb58 	bl	8007f38 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e888:	6978      	ldr	r0, [r7, #20]
 800e88a:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 800eb50 <AdatiWayReturn+0xbd4>
 800e88e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800eb54 <AdatiWayReturn+0xbd8>
 800e892:	ed9f 1aad 	vldr	s2, [pc, #692]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e896:	eddf 0aac 	vldr	s1, [pc, #688]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e89a:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e89e:	f7f4 fb9d 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8a2:	2003      	movs	r0, #3
 800e8a4:	f7f9 f84a 	bl	800793c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8a8:	2003      	movs	r0, #3
 800e8aa:	f7f9 f81f 	bl	80078ec <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e8ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e8b2:	f7f9 fb41 	bl	8007f38 <wait_ms_NoReset>
				no_safty = 0;
 800e8b6:	4ba3      	ldr	r3, [pc, #652]	; (800eb44 <AdatiWayReturn+0xbc8>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e8bc:	f7f5 fe78 	bl	80045b0 <clear_Ierror>

				direction = direction + 2;
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	3302      	adds	r3, #2
 800e8c4:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	2b04      	cmp	r3, #4
 800e8ca:	dd02      	ble.n	800e8d2 <AdatiWayReturn+0x956>
					direction = direction-4;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	3b04      	subs	r3, #4
 800e8d0:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e8d2:	69bb      	ldr	r3, [r7, #24]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f300 8303 	bgt.w	800eee0 <AdatiWayReturn+0xf64>
					direction = direction+4;
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	3304      	adds	r3, #4
 800e8de:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e8e0:	e2fe      	b.n	800eee0 <AdatiWayReturn+0xf64>
			}


			if(Dijkstra_maker_flag==1){
 800e8e2:	4b9d      	ldr	r3, [pc, #628]	; (800eb58 <AdatiWayReturn+0xbdc>)
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	f040 8144 	bne.w	800eb74 <AdatiWayReturn+0xbf8>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8f8:	6978      	ldr	r0, [r7, #20]
 800e8fa:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8fe:	edd7 1a03 	vldr	s3, [r7, #12]
 800e902:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e906:	edd7 0a03 	vldr	s1, [r7, #12]
 800e90a:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800e90e:	f7f4 fb65 	bl	8002fdc <straight_table2>

				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e912:	2003      	movs	r0, #3
 800e914:	f7f9 f812 	bl	800793c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e918:	2003      	movs	r0, #3
 800e91a:	f7f8 ffe7 	bl	80078ec <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e91e:	2064      	movs	r0, #100	; 0x64
 800e920:	f7f9 fb0a 	bl	8007f38 <wait_ms_NoReset>
				create_DijkstraMap();
 800e924:	f002 ff00 	bl	8011728 <create_DijkstraMap>
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e928:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e92a:	2bff      	cmp	r3, #255	; 0xff
 800e92c:	d10c      	bne.n	800e948 <AdatiWayReturn+0x9cc>
 800e92e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e930:	2bff      	cmp	r3, #255	; 0xff
 800e932:	d109      	bne.n	800e948 <AdatiWayReturn+0x9cc>
 800e934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e936:	2bff      	cmp	r3, #255	; 0xff
 800e938:	d106      	bne.n	800e948 <AdatiWayReturn+0x9cc>
 800e93a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e93c:	2bff      	cmp	r3, #255	; 0xff
 800e93e:	d103      	bne.n	800e948 <AdatiWayReturn+0x9cc>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e940:	4b86      	ldr	r3, [pc, #536]	; (800eb5c <AdatiWayReturn+0xbe0>)
 800e942:	2201      	movs	r2, #1
 800e944:	701a      	strb	r2, [r3, #0]
									break;
 800e946:	e2ce      	b.n	800eee6 <AdatiWayReturn+0xf6a>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e948:	6a3b      	ldr	r3, [r7, #32]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	db08      	blt.n	800e960 <AdatiWayReturn+0x9e4>
 800e94e:	69fb      	ldr	r3, [r7, #28]
 800e950:	2b00      	cmp	r3, #0
 800e952:	db05      	blt.n	800e960 <AdatiWayReturn+0x9e4>
 800e954:	6a3b      	ldr	r3, [r7, #32]
 800e956:	2b0f      	cmp	r3, #15
 800e958:	dc02      	bgt.n	800e960 <AdatiWayReturn+0x9e4>
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	2b0f      	cmp	r3, #15
 800e95e:	dd03      	ble.n	800e968 <AdatiWayReturn+0x9ec>
												// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
													error_mode=1;
 800e960:	4b7e      	ldr	r3, [pc, #504]	; (800eb5c <AdatiWayReturn+0xbe0>)
 800e962:	2201      	movs	r2, #1
 800e964:	701a      	strb	r2, [r3, #0]
													break;
 800e966:	e2be      	b.n	800eee6 <AdatiWayReturn+0xf6a>
								}
								mode.WallControlMode=0;
 800e968:	2300      	movs	r3, #0
 800e96a:	753b      	strb	r3, [r7, #20]
								mode.WallCutMode=0;
 800e96c:	2300      	movs	r3, #0
 800e96e:	75fb      	strb	r3, [r7, #23]
								mode.calMazeMode=0;
 800e970:	2300      	movs	r3, #0
 800e972:	75bb      	strb	r3, [r7, #22]
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e974:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e976:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e978:	429a      	cmp	r2, r3
 800e97a:	d814      	bhi.n	800e9a6 <AdatiWayReturn+0xa2a>
 800e97c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e97e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e980:	429a      	cmp	r2, r3
 800e982:	d810      	bhi.n	800e9a6 <AdatiWayReturn+0xa2a>
 800e984:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e986:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e988:	429a      	cmp	r2, r3
 800e98a:	d80c      	bhi.n	800e9a6 <AdatiWayReturn+0xa2a>
									// 直進
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e98c:	6978      	ldr	r0, [r7, #20]
 800e98e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e992:	edd7 1a03 	vldr	s3, [r7, #12]
 800e996:	ed97 1a03 	vldr	s2, [r7, #12]
 800e99a:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e99e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800eb60 <AdatiWayReturn+0xbe4>
 800e9a2:	f7f4 fb1b 	bl	8002fdc <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e9a6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e9a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d230      	bcs.n	800ea10 <AdatiWayReturn+0xa94>
 800e9ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e9b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d82c      	bhi.n	800ea10 <AdatiWayReturn+0xa94>
 800e9b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e9b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d828      	bhi.n	800ea10 <AdatiWayReturn+0xa94>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e9be:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9c2:	eef1 7a67 	vneg.f32	s15, s15
 800e9c6:	ed97 2a00 	vldr	s4, [r7]
 800e9ca:	eef0 1a67 	vmov.f32	s3, s15
 800e9ce:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e9d2:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800eb48 <AdatiWayReturn+0xbcc>
 800e9d6:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800eb64 <AdatiWayReturn+0xbe8>
 800e9da:	f7f5 f80d 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9de:	2003      	movs	r0, #3
 800e9e0:	f7f8 ffac 	bl	800793c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9e4:	2003      	movs	r0, #3
 800e9e6:	f7f8 ff81 	bl	80078ec <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e9ea:	2064      	movs	r0, #100	; 0x64
 800e9ec:	f7f9 faa4 	bl	8007f38 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e9f0:	6978      	ldr	r0, [r7, #20]
 800e9f2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9f6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9fa:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9fe:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eb48 <AdatiWayReturn+0xbcc>
 800ea02:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800eb60 <AdatiWayReturn+0xbe4>
 800ea06:	f7f4 fae9 	bl	8002fdc <straight_table2>
									direction++;
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	3301      	adds	r3, #1
 800ea0e:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ea10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea12:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d22c      	bcs.n	800ea72 <AdatiWayReturn+0xaf6>
 800ea18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	d228      	bcs.n	800ea72 <AdatiWayReturn+0xaf6>
 800ea20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea24:	429a      	cmp	r2, r3
 800ea26:	d824      	bhi.n	800ea72 <AdatiWayReturn+0xaf6>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800ea28:	ed97 2a00 	vldr	s4, [r7]
 800ea2c:	edd7 1a02 	vldr	s3, [r7, #8]
 800ea30:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800eb48 <AdatiWayReturn+0xbcc>
 800ea34:	eddf 0a44 	vldr	s1, [pc, #272]	; 800eb48 <AdatiWayReturn+0xbcc>
 800ea38:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800eb68 <AdatiWayReturn+0xbec>
 800ea3c:	f7f4 ffdc 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea40:	2003      	movs	r0, #3
 800ea42:	f7f8 ff7b 	bl	800793c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea46:	2003      	movs	r0, #3
 800ea48:	f7f8 ff50 	bl	80078ec <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800ea4c:	2064      	movs	r0, #100	; 0x64
 800ea4e:	f7f9 fa73 	bl	8007f38 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea52:	6978      	ldr	r0, [r7, #20]
 800ea54:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea58:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea5c:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea60:	eddf 0a39 	vldr	s1, [pc, #228]	; 800eb48 <AdatiWayReturn+0xbcc>
 800ea64:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800eb60 <AdatiWayReturn+0xbe4>
 800ea68:	f7f4 fab8 	bl	8002fdc <straight_table2>
									direction--;
 800ea6c:	69bb      	ldr	r3, [r7, #24]
 800ea6e:	3b01      	subs	r3, #1
 800ea70:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800ea72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea76:	429a      	cmp	r2, r3
 800ea78:	f080 820d 	bcs.w	800ee96 <AdatiWayReturn+0xf1a>
 800ea7c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea7e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea80:	429a      	cmp	r2, r3
 800ea82:	f080 8208 	bcs.w	800ee96 <AdatiWayReturn+0xf1a>
										&& back_count < left_count){
 800ea86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	f080 8203 	bcs.w	800ee96 <AdatiWayReturn+0xf1a>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800ea90:	4b2c      	ldr	r3, [pc, #176]	; (800eb44 <AdatiWayReturn+0xbc8>)
 800ea92:	2201      	movs	r2, #1
 800ea94:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ea96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ea9a:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800ea9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	edd7 0a00 	vldr	s1, [r7]
 800eaa8:	ed97 0a02 	vldr	s0, [r7, #8]
 800eaac:	f7fb f99e 	bl	8009dec <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800eab0:	2064      	movs	r0, #100	; 0x64
 800eab2:	f7f9 fa41 	bl	8007f38 <wait_ms_NoReset>
									no_safty = 0;
 800eab6:	4b23      	ldr	r3, [pc, #140]	; (800eb44 <AdatiWayReturn+0xbc8>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800eac0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d027      	beq.n	800eb18 <AdatiWayReturn+0xb9c>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800eac8:	6978      	ldr	r0, [r7, #20]
 800eaca:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800eb50 <AdatiWayReturn+0xbd4>
 800eace:	eddf 1a21 	vldr	s3, [pc, #132]	; 800eb54 <AdatiWayReturn+0xbd8>
 800ead2:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800eb48 <AdatiWayReturn+0xbcc>
 800ead6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800eb48 <AdatiWayReturn+0xbcc>
 800eada:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800eb6c <AdatiWayReturn+0xbf0>
 800eade:	f7f4 fa7d 	bl	8002fdc <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eae2:	2003      	movs	r0, #3
 800eae4:	f7f8 ff2a 	bl	800793c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eae8:	2003      	movs	r0, #3
 800eaea:	f7f8 feff 	bl	80078ec <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800eaee:	2064      	movs	r0, #100	; 0x64
 800eaf0:	f7f9 fa22 	bl	8007f38 <wait_ms_NoReset>

									clear_Ierror();
 800eaf4:	f7f5 fd5c 	bl	80045b0 <clear_Ierror>
									mode.WallControlMode=1;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eafc:	6978      	ldr	r0, [r7, #20]
 800eafe:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb02:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb06:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb0a:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800eb48 <AdatiWayReturn+0xbcc>
 800eb0e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800eb70 <AdatiWayReturn+0xbf4>
 800eb12:	f7f4 fa63 	bl	8002fdc <straight_table2>
 800eb16:	e010      	b.n	800eb3a <AdatiWayReturn+0xbbe>
									}else{
										clear_Ierror();
 800eb18:	f7f5 fd4a 	bl	80045b0 <clear_Ierror>
										mode.WallControlMode=1;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	753b      	strb	r3, [r7, #20]
										straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT),0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb20:	6978      	ldr	r0, [r7, #20]
 800eb22:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb26:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb2a:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb2e:	eddf 0a06 	vldr	s1, [pc, #24]	; 800eb48 <AdatiWayReturn+0xbcc>
 800eb32:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800eb60 <AdatiWayReturn+0xbe4>
 800eb36:	f7f4 fa51 	bl	8002fdc <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800eb3a:	69bb      	ldr	r3, [r7, #24]
 800eb3c:	3302      	adds	r3, #2
 800eb3e:	61bb      	str	r3, [r7, #24]
 800eb40:	e1a9      	b.n	800ee96 <AdatiWayReturn+0xf1a>
 800eb42:	bf00      	nop
 800eb44:	20000806 	.word	0x20000806
 800eb48:	00000000 	.word	0x00000000
 800eb4c:	43340000 	.word	0x43340000
 800eb50:	447a0000 	.word	0x447a0000
 800eb54:	c3160000 	.word	0xc3160000
 800eb58:	20000d2c 	.word	0x20000d2c
 800eb5c:	20000807 	.word	0x20000807
 800eb60:	42540000 	.word	0x42540000
 800eb64:	c2b40000 	.word	0xc2b40000
 800eb68:	42b40000 	.word	0x42b40000
 800eb6c:	c1a40000 	.word	0xc1a40000
 800eb70:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800eb74:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d102      	bne.n	800eb82 <AdatiWayReturn+0xc06>
					kitikukan = 0;
 800eb7c:	4b97      	ldr	r3, [pc, #604]	; (800eddc <AdatiWayReturn+0xe60>)
 800eb7e:	2200      	movs	r2, #0
 800eb80:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800eb82:	4b96      	ldr	r3, [pc, #600]	; (800eddc <AdatiWayReturn+0xe60>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f040 8142 	bne.w	800ee10 <AdatiWayReturn+0xe94>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800eb8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb8e:	2bff      	cmp	r3, #255	; 0xff
 800eb90:	d10c      	bne.n	800ebac <AdatiWayReturn+0xc30>
 800eb92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb94:	2bff      	cmp	r3, #255	; 0xff
 800eb96:	d109      	bne.n	800ebac <AdatiWayReturn+0xc30>
 800eb98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb9a:	2bff      	cmp	r3, #255	; 0xff
 800eb9c:	d106      	bne.n	800ebac <AdatiWayReturn+0xc30>
 800eb9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eba0:	2bff      	cmp	r3, #255	; 0xff
 800eba2:	d103      	bne.n	800ebac <AdatiWayReturn+0xc30>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800eba4:	4b8e      	ldr	r3, [pc, #568]	; (800ede0 <AdatiWayReturn+0xe64>)
 800eba6:	2201      	movs	r2, #1
 800eba8:	701a      	strb	r2, [r3, #0]
					break;
 800ebaa:	e19c      	b.n	800eee6 <AdatiWayReturn+0xf6a>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800ebac:	6a3b      	ldr	r3, [r7, #32]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	db08      	blt.n	800ebc4 <AdatiWayReturn+0xc48>
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	db05      	blt.n	800ebc4 <AdatiWayReturn+0xc48>
 800ebb8:	6a3b      	ldr	r3, [r7, #32]
 800ebba:	2b0f      	cmp	r3, #15
 800ebbc:	dc02      	bgt.n	800ebc4 <AdatiWayReturn+0xc48>
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	2b0f      	cmp	r3, #15
 800ebc2:	dd03      	ble.n	800ebcc <AdatiWayReturn+0xc50>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800ebc4:	4b86      	ldr	r3, [pc, #536]	; (800ede0 <AdatiWayReturn+0xe64>)
 800ebc6:	2201      	movs	r2, #1
 800ebc8:	701a      	strb	r2, [r3, #0]
									break;
 800ebca:	e18c      	b.n	800eee6 <AdatiWayReturn+0xf6a>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ebcc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d81a      	bhi.n	800ec0a <AdatiWayReturn+0xc8e>
 800ebd4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d816      	bhi.n	800ec0a <AdatiWayReturn+0xc8e>
 800ebdc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebde:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d812      	bhi.n	800ec0a <AdatiWayReturn+0xc8e>
					// 直進
					mode.WallControlMode=1;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ebec:	2300      	movs	r3, #0
 800ebee:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebf0:	6978      	ldr	r0, [r7, #20]
 800ebf2:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebf6:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebfa:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebfe:	edd7 0a03 	vldr	s1, [r7, #12]
 800ec02:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800ede4 <AdatiWayReturn+0xe68>
 800ec06:	f7f4 f9e9 	bl	8002fdc <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ec0a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec0e:	429a      	cmp	r2, r3
 800ec10:	d22c      	bcs.n	800ec6c <AdatiWayReturn+0xcf0>
 800ec12:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d828      	bhi.n	800ec6c <AdatiWayReturn+0xcf0>
 800ec1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d824      	bhi.n	800ec6c <AdatiWayReturn+0xcf0>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec22:	6a3b      	ldr	r3, [r7, #32]
 800ec24:	2b0b      	cmp	r3, #11
 800ec26:	d002      	beq.n	800ec2e <AdatiWayReturn+0xcb2>
 800ec28:	6a3b      	ldr	r3, [r7, #32]
 800ec2a:	2b0c      	cmp	r3, #12
 800ec2c:	d109      	bne.n	800ec42 <AdatiWayReturn+0xcc6>
 800ec2e:	69fb      	ldr	r3, [r7, #28]
 800ec30:	2b0a      	cmp	r3, #10
 800ec32:	d002      	beq.n	800ec3a <AdatiWayReturn+0xcbe>
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	2b0b      	cmp	r3, #11
 800ec38:	d103      	bne.n	800ec42 <AdatiWayReturn+0xcc6>
						noGoalPillarMode=1;
 800ec3a:	4b6b      	ldr	r3, [pc, #428]	; (800ede8 <AdatiWayReturn+0xe6c>)
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	701a      	strb	r2, [r3, #0]
 800ec40:	e002      	b.n	800ec48 <AdatiWayReturn+0xccc>
					}else{
						noGoalPillarMode=0;
 800ec42:	4b69      	ldr	r3, [pc, #420]	; (800ede8 <AdatiWayReturn+0xe6c>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec48:	4b68      	ldr	r3, [pc, #416]	; (800edec <AdatiWayReturn+0xe70>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	9203      	str	r2, [sp, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	9202      	str	r2, [sp, #8]
 800ec52:	2200      	movs	r2, #0
 800ec54:	9201      	str	r2, [sp, #4]
 800ec56:	699a      	ldr	r2, [r3, #24]
 800ec58:	9200      	str	r2, [sp, #0]
 800ec5a:	3308      	adds	r3, #8
 800ec5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec5e:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec62:	f7fb f98d 	bl	8009f80 <slalomR>
					direction++;
 800ec66:	69bb      	ldr	r3, [r7, #24]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ec6c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d22c      	bcs.n	800ecce <AdatiWayReturn+0xd52>
 800ec74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d228      	bcs.n	800ecce <AdatiWayReturn+0xd52>
 800ec7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d824      	bhi.n	800ecce <AdatiWayReturn+0xd52>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec84:	6a3b      	ldr	r3, [r7, #32]
 800ec86:	2b0b      	cmp	r3, #11
 800ec88:	d002      	beq.n	800ec90 <AdatiWayReturn+0xd14>
 800ec8a:	6a3b      	ldr	r3, [r7, #32]
 800ec8c:	2b0c      	cmp	r3, #12
 800ec8e:	d109      	bne.n	800eca4 <AdatiWayReturn+0xd28>
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	2b0a      	cmp	r3, #10
 800ec94:	d002      	beq.n	800ec9c <AdatiWayReturn+0xd20>
 800ec96:	69fb      	ldr	r3, [r7, #28]
 800ec98:	2b0b      	cmp	r3, #11
 800ec9a:	d103      	bne.n	800eca4 <AdatiWayReturn+0xd28>
						noGoalPillarMode=1;
 800ec9c:	4b52      	ldr	r3, [pc, #328]	; (800ede8 <AdatiWayReturn+0xe6c>)
 800ec9e:	2201      	movs	r2, #1
 800eca0:	701a      	strb	r2, [r3, #0]
 800eca2:	e002      	b.n	800ecaa <AdatiWayReturn+0xd2e>
					}else{
						noGoalPillarMode=0;
 800eca4:	4b50      	ldr	r3, [pc, #320]	; (800ede8 <AdatiWayReturn+0xe6c>)
 800eca6:	2200      	movs	r2, #0
 800eca8:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ecaa:	4b50      	ldr	r3, [pc, #320]	; (800edec <AdatiWayReturn+0xe70>)
 800ecac:	2200      	movs	r2, #0
 800ecae:	9203      	str	r2, [sp, #12]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	9202      	str	r2, [sp, #8]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	9201      	str	r2, [sp, #4]
 800ecb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecba:	9200      	str	r2, [sp, #0]
 800ecbc:	331c      	adds	r3, #28
 800ecbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ecc0:	ed97 0a03 	vldr	s0, [r7, #12]
 800ecc4:	f7fb fb42 	bl	800a34c <slalomL>
					direction--;
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	3b01      	subs	r3, #1
 800eccc:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ecce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ecd2:	429a      	cmp	r2, r3
 800ecd4:	f080 80df 	bcs.w	800ee96 <AdatiWayReturn+0xf1a>
 800ecd8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecda:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	f080 80da 	bcs.w	800ee96 <AdatiWayReturn+0xf1a>
						&& back_count < left_count){
 800ece2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ece4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ece6:	429a      	cmp	r2, r3
 800ece8:	f080 80d5 	bcs.w	800ee96 <AdatiWayReturn+0xf1a>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ecec:	2301      	movs	r3, #1
 800ecee:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ecf8:	6978      	ldr	r0, [r7, #20]
 800ecfa:	ed97 2a01 	vldr	s4, [r7, #4]
 800ecfe:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed02:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800edf0 <AdatiWayReturn+0xe74>
 800ed06:	edd7 0a03 	vldr	s1, [r7, #12]
 800ed0a:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800ee0c <AdatiWayReturn+0xe90>
 800ed0e:	f7f4 f965 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed12:	2003      	movs	r0, #3
 800ed14:	f7f8 fe12 	bl	800793c <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed18:	2003      	movs	r0, #3
 800ed1a:	f7f8 fde7 	bl	80078ec <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed1e:	2064      	movs	r0, #100	; 0x64
 800ed20:	f7f9 f90a 	bl	8007f38 <wait_ms_NoReset>
					create_DijkstraMap();
 800ed24:	f002 fd00 	bl	8011728 <create_DijkstraMap>
					no_safty = 1;
 800ed28:	4b32      	ldr	r3, [pc, #200]	; (800edf4 <AdatiWayReturn+0xe78>)
 800ed2a:	2201      	movs	r2, #1
 800ed2c:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ed2e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ed32:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 800ed36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	edd7 0a00 	vldr	s1, [r7]
 800ed40:	ed97 0a02 	vldr	s0, [r7, #8]
 800ed44:	f7fb f852 	bl	8009dec <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800ed48:	2064      	movs	r0, #100	; 0x64
 800ed4a:	f7f9 f8f5 	bl	8007f38 <wait_ms_NoReset>
					no_safty = 0;
 800ed4e:	4b29      	ldr	r3, [pc, #164]	; (800edf4 <AdatiWayReturn+0xe78>)
 800ed50:	2200      	movs	r2, #0
 800ed52:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800ed54:	2300      	movs	r3, #0
 800ed56:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ed58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d027      	beq.n	800edb0 <AdatiWayReturn+0xe34>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ed60:	6978      	ldr	r0, [r7, #20]
 800ed62:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800edf8 <AdatiWayReturn+0xe7c>
 800ed66:	eddf 1a25 	vldr	s3, [pc, #148]	; 800edfc <AdatiWayReturn+0xe80>
 800ed6a:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800edf0 <AdatiWayReturn+0xe74>
 800ed6e:	eddf 0a20 	vldr	s1, [pc, #128]	; 800edf0 <AdatiWayReturn+0xe74>
 800ed72:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800ee00 <AdatiWayReturn+0xe84>
 800ed76:	f7f4 f931 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed7a:	2003      	movs	r0, #3
 800ed7c:	f7f8 fdde 	bl	800793c <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed80:	2003      	movs	r0, #3
 800ed82:	f7f8 fdb3 	bl	80078ec <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed86:	2064      	movs	r0, #100	; 0x64
 800ed88:	f7f9 f8d6 	bl	8007f38 <wait_ms_NoReset>

					clear_Ierror();
 800ed8c:	f7f5 fc10 	bl	80045b0 <clear_Ierror>
					mode.WallControlMode=1;
 800ed90:	2301      	movs	r3, #1
 800ed92:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed94:	6978      	ldr	r0, [r7, #20]
 800ed96:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed9a:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed9e:	ed97 1a03 	vldr	s2, [r7, #12]
 800eda2:	eddf 0a13 	vldr	s1, [pc, #76]	; 800edf0 <AdatiWayReturn+0xe74>
 800eda6:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800ee04 <AdatiWayReturn+0xe88>
 800edaa:	f7f4 f917 	bl	8002fdc <straight_table2>
 800edae:	e010      	b.n	800edd2 <AdatiWayReturn+0xe56>
					}else{
						clear_Ierror();
 800edb0:	f7f5 fbfe 	bl	80045b0 <clear_Ierror>
						mode.WallControlMode=1;
 800edb4:	2301      	movs	r3, #1
 800edb6:	753b      	strb	r3, [r7, #20]
						straight_table2(90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800edb8:	6978      	ldr	r0, [r7, #20]
 800edba:	ed97 2a01 	vldr	s4, [r7, #4]
 800edbe:	edd7 1a03 	vldr	s3, [r7, #12]
 800edc2:	ed97 1a03 	vldr	s2, [r7, #12]
 800edc6:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800edf0 <AdatiWayReturn+0xe74>
 800edca:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800ee08 <AdatiWayReturn+0xe8c>
 800edce:	f7f4 f905 	bl	8002fdc <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800edd2:	69bb      	ldr	r3, [r7, #24]
 800edd4:	3302      	adds	r3, #2
 800edd6:	61bb      	str	r3, [r7, #24]
 800edd8:	e05d      	b.n	800ee96 <AdatiWayReturn+0xf1a>
 800edda:	bf00      	nop
 800eddc:	20000838 	.word	0x20000838
 800ede0:	20000807 	.word	0x20000807
 800ede4:	42a40000 	.word	0x42a40000
 800ede8:	20000529 	.word	0x20000529
 800edec:	2000ef80 	.word	0x2000ef80
 800edf0:	00000000 	.word	0x00000000
 800edf4:	20000806 	.word	0x20000806
 800edf8:	447a0000 	.word	0x447a0000
 800edfc:	c3160000 	.word	0xc3160000
 800ee00:	c1a40000 	.word	0xc1a40000
 800ee04:	42830000 	.word	0x42830000
 800ee08:	42340000 	.word	0x42340000
 800ee0c:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800ee10:	2301      	movs	r3, #1
 800ee12:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800ee14:	2301      	movs	r3, #1
 800ee16:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ee1c:	6978      	ldr	r0, [r7, #20]
 800ee1e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee22:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee26:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee2a:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee2e:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800ee0c <AdatiWayReturn+0xe90>
 800ee32:	f7f4 f8d3 	bl	8002fdc <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ee36:	f107 0218 	add.w	r2, r7, #24
 800ee3a:	f107 011c 	add.w	r1, r7, #28
 800ee3e:	f107 0320 	add.w	r3, r7, #32
 800ee42:	4618      	mov	r0, r3
 800ee44:	f001 fbec 	bl	8010620 <compress_kitiku>
				mode.WallCutMode=0;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ee4c:	2201      	movs	r2, #1
 800ee4e:	2101      	movs	r1, #1
 800ee50:	6978      	ldr	r0, [r7, #20]
 800ee52:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800ee0c <AdatiWayReturn+0xe90>
 800ee56:	f7f4 fd6b 	bl	8003930 <End_straight>
				mode.WallControlMode=1;
 800ee5a:	2301      	movs	r3, #1
 800ee5c:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ee66:	4b35      	ldr	r3, [pc, #212]	; (800ef3c <AdatiWayReturn+0xfc0>)
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	4413      	add	r3, r2
 800ee70:	011a      	lsls	r2, r3, #4
 800ee72:	1ad3      	subs	r3, r2, r3
 800ee74:	ee07 3a90 	vmov	s15, r3
 800ee78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee7c:	6978      	ldr	r0, [r7, #20]
 800ee7e:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee82:	eddf 1a2f 	vldr	s3, [pc, #188]	; 800ef40 <AdatiWayReturn+0xfc4>
 800ee86:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee8a:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee8e:	eeb0 0a67 	vmov.f32	s0, s15
 800ee92:	f7f4 f8a3 	bl	8002fdc <straight_table2>

			}
			}

			if (direction >= 5) {
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	2b04      	cmp	r3, #4
 800ee9a:	dd02      	ble.n	800eea2 <AdatiWayReturn+0xf26>
				direction = direction-4;
 800ee9c:	69bb      	ldr	r3, [r7, #24]
 800ee9e:	3b04      	subs	r3, #4
 800eea0:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	dc02      	bgt.n	800eeae <AdatiWayReturn+0xf32>
				direction = direction+4;
 800eea8:	69bb      	ldr	r3, [r7, #24]
 800eeaa:	3304      	adds	r3, #4
 800eeac:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800eeae:	4b25      	ldr	r3, [pc, #148]	; (800ef44 <AdatiWayReturn+0xfc8>)
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	2b01      	cmp	r3, #1
 800eeb4:	d016      	beq.n	800eee4 <AdatiWayReturn+0xf68>
			if (g_timCount_sec>240){
 800eeb6:	4b24      	ldr	r3, [pc, #144]	; (800ef48 <AdatiWayReturn+0xfcc>)
 800eeb8:	edd3 7a00 	vldr	s15, [r3]
 800eebc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ef4c <AdatiWayReturn+0xfd0>
 800eec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec8:	dd08      	ble.n	800eedc <AdatiWayReturn+0xf60>
						// 秒数エンド
							timer_end_mode=1;
 800eeca:	2301      	movs	r3, #1
 800eecc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
							pl_DriveMotor_stop();
 800eed0:	f7f8 fd68 	bl	80079a4 <pl_DriveMotor_stop>
							pl_DriveMotor_standby(OFF);
 800eed4:	2000      	movs	r0, #0
 800eed6:	f7f8 fcff 	bl	80078d8 <pl_DriveMotor_standby>
							break;
 800eeda:	e004      	b.n	800eee6 <AdatiWayReturn+0xf6a>
		update_coordinate(&x,&y,direction);
 800eedc:	f7ff bbeb 	b.w	800e6b6 <AdatiWayReturn+0x73a>
				break;
 800eee0:	bf00      	nop
 800eee2:	e000      	b.n	800eee6 <AdatiWayReturn+0xf6a>
			if(error_mode==1){break;}
 800eee4:	bf00      	nop
						}
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800eee6:	2000      	movs	r0, #0
 800eee8:	f7f8 fcf6 	bl	80078d8 <pl_DriveMotor_standby>
	maze_mode = 0;
 800eeec:	4b18      	ldr	r3, [pc, #96]	; (800ef50 <AdatiWayReturn+0xfd4>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800eef2:	2064      	movs	r0, #100	; 0x64
 800eef4:	f009 ff5a 	bl	8018dac <HAL_Delay>
	maze_display();
 800eef8:	f005 ffc0 	bl	8014e7c <maze_display>
	create_StepCountMap_queue();
 800eefc:	f005 f998 	bl	8014230 <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800ef00:	4b14      	ldr	r3, [pc, #80]	; (800ef54 <AdatiWayReturn+0xfd8>)
 800ef02:	881b      	ldrh	r3, [r3, #0]
 800ef04:	2bff      	cmp	r3, #255	; 0xff
 800ef06:	d102      	bne.n	800ef0e <AdatiWayReturn+0xf92>
		error_mode = 1;
 800ef08:	4b0e      	ldr	r3, [pc, #56]	; (800ef44 <AdatiWayReturn+0xfc8>)
 800ef0a:	2201      	movs	r2, #1
 800ef0c:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ef0e:	4b0d      	ldr	r3, [pc, #52]	; (800ef44 <AdatiWayReturn+0xfc8>)
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d102      	bne.n	800ef1c <AdatiWayReturn+0xfa0>
		record_in();
 800ef16:	f7f8 f9ed 	bl	80072f4 <record_in>
		record_out();
	}else{
		record_in();
	}

}
 800ef1a:	e008      	b.n	800ef2e <AdatiWayReturn+0xfb2>
	} else if(timer_end_mode==0) {
 800ef1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d102      	bne.n	800ef2a <AdatiWayReturn+0xfae>
		record_out();
 800ef24:	f7f8 faa2 	bl	800746c <record_out>
}
 800ef28:	e001      	b.n	800ef2e <AdatiWayReturn+0xfb2>
		record_in();
 800ef2a:	f7f8 f9e3 	bl	80072f4 <record_in>
}
 800ef2e:	bf00      	nop
 800ef30:	3734      	adds	r7, #52	; 0x34
 800ef32:	46bd      	mov	sp, r7
 800ef34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ef38:	b004      	add	sp, #16
 800ef3a:	4770      	bx	lr
 800ef3c:	2000082c 	.word	0x2000082c
 800ef40:	447a0000 	.word	0x447a0000
 800ef44:	20000807 	.word	0x20000807
 800ef48:	2000072c 	.word	0x2000072c
 800ef4c:	43700000 	.word	0x43700000
 800ef50:	20000834 	.word	0x20000834
 800ef54:	20000d30 	.word	0x20000d30

0800ef58 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ef58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef5a:	b08b      	sub	sp, #44	; 0x2c
 800ef5c:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	607b      	str	r3, [r7, #4]
	int y = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ef66:	2301      	movs	r3, #1
 800ef68:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ef6a:	4b8b      	ldr	r3, [pc, #556]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ef70:	f002 fbda 	bl	8011728 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ef74:	f006 f8a0 	bl	80150b8 <maze_display_Dijkstra>
	pass[0] = 1;
 800ef78:	4b88      	ldr	r3, [pc, #544]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800ef7a:	2201      	movs	r2, #1
 800ef7c:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ef7e:	4639      	mov	r1, r7
 800ef80:	1d3b      	adds	r3, r7, #4
 800ef82:	697a      	ldr	r2, [r7, #20]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7fe ffc5 	bl	800df14 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2b0b      	cmp	r3, #11
 800ef8e:	d002      	beq.n	800ef96 <pass_maker_Dijkstra+0x3e>
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2b0c      	cmp	r3, #12
 800ef94:	d13a      	bne.n	800f00c <pass_maker_Dijkstra+0xb4>
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b0a      	cmp	r3, #10
 800ef9a:	d002      	beq.n	800efa2 <pass_maker_Dijkstra+0x4a>
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	2b0b      	cmp	r3, #11
 800efa0:	d134      	bne.n	800f00c <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800efa2:	4b7d      	ldr	r3, [pc, #500]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800efa4:	781b      	ldrb	r3, [r3, #0]
 800efa6:	461a      	mov	r2, r3
 800efa8:	4b7c      	ldr	r3, [pc, #496]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800efaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	da05      	bge.n	800efbe <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800efb2:	4b79      	ldr	r3, [pc, #484]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	3301      	adds	r3, #1
 800efb8:	b2da      	uxtb	r2, r3
 800efba:	4b77      	ldr	r3, [pc, #476]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800efbc:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800efbe:	4b76      	ldr	r3, [pc, #472]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	4b75      	ldr	r3, [pc, #468]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800efc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efca:	4a73      	ldr	r2, [pc, #460]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800efcc:	7812      	ldrb	r2, [r2, #0]
 800efce:	4611      	mov	r1, r2
 800efd0:	3301      	adds	r3, #1
 800efd2:	4a72      	ldr	r2, [pc, #456]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800efd4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800efd8:	697b      	ldr	r3, [r7, #20]
 800efda:	3302      	adds	r3, #2
 800efdc:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	2b05      	cmp	r3, #5
 800efe2:	d101      	bne.n	800efe8 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800efe4:	2301      	movs	r3, #1
 800efe6:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800efe8:	697b      	ldr	r3, [r7, #20]
 800efea:	2b06      	cmp	r3, #6
 800efec:	d101      	bne.n	800eff2 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800efee:	2302      	movs	r3, #2
 800eff0:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d101      	bne.n	800effc <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800eff8:	2304      	movs	r3, #4
 800effa:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f002:	f040 80c2 	bne.w	800f18a <pass_maker_Dijkstra+0x232>
						direction = 3;
 800f006:	2303      	movs	r3, #3
 800f008:	617b      	str	r3, [r7, #20]
					}
					break;
 800f00a:	e0be      	b.n	800f18a <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	f107 020b 	add.w	r2, r7, #11
 800f014:	f107 0309 	add.w	r3, r7, #9
 800f018:	9301      	str	r3, [sp, #4]
 800f01a:	f107 030a 	add.w	r3, r7, #10
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	4613      	mov	r3, r2
 800f022:	697a      	ldr	r2, [r7, #20]
 800f024:	f001 ff64 	bl	8010ef0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	f107 060c 	add.w	r6, r7, #12
 800f030:	f107 050e 	add.w	r5, r7, #14
 800f034:	f107 0410 	add.w	r4, r7, #16
 800f038:	f107 0012 	add.w	r0, r7, #18
 800f03c:	6979      	ldr	r1, [r7, #20]
 800f03e:	9102      	str	r1, [sp, #8]
 800f040:	9201      	str	r2, [sp, #4]
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	4633      	mov	r3, r6
 800f046:	462a      	mov	r2, r5
 800f048:	4621      	mov	r1, r4
 800f04a:	f002 fad3 	bl	80115f4 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f04e:	7afb      	ldrb	r3, [r7, #11]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <pass_maker_Dijkstra+0x102>
 800f054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f058:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f05a:	7abb      	ldrb	r3, [r7, #10]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <pass_maker_Dijkstra+0x10e>
 800f060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f064:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f066:	7a7b      	ldrb	r3, [r7, #9]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d002      	beq.n	800f072 <pass_maker_Dijkstra+0x11a>
 800f06c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f070:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f072:	8a7b      	ldrh	r3, [r7, #18]
 800f074:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f078:	4293      	cmp	r3, r2
 800f07a:	d10e      	bne.n	800f09a <pass_maker_Dijkstra+0x142>
 800f07c:	8a3b      	ldrh	r3, [r7, #16]
 800f07e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f082:	4293      	cmp	r3, r2
 800f084:	d109      	bne.n	800f09a <pass_maker_Dijkstra+0x142>
 800f086:	89bb      	ldrh	r3, [r7, #12]
 800f088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f08c:	4293      	cmp	r3, r2
 800f08e:	d104      	bne.n	800f09a <pass_maker_Dijkstra+0x142>
 800f090:	89fb      	ldrh	r3, [r7, #14]
 800f092:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f096:	4293      	cmp	r3, r2
 800f098:	d079      	beq.n	800f18e <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f09a:	8a7a      	ldrh	r2, [r7, #18]
 800f09c:	8a3b      	ldrh	r3, [r7, #16]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d822      	bhi.n	800f0e8 <pass_maker_Dijkstra+0x190>
 800f0a2:	8a7a      	ldrh	r2, [r7, #18]
 800f0a4:	89bb      	ldrh	r3, [r7, #12]
 800f0a6:	429a      	cmp	r2, r3
 800f0a8:	d81e      	bhi.n	800f0e8 <pass_maker_Dijkstra+0x190>
 800f0aa:	8a7a      	ldrh	r2, [r7, #18]
 800f0ac:	89fb      	ldrh	r3, [r7, #14]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d81a      	bhi.n	800f0e8 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f0b2:	4b39      	ldr	r3, [pc, #228]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	4b38      	ldr	r3, [pc, #224]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800f0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	da05      	bge.n	800f0ce <pass_maker_Dijkstra+0x176>
 800f0c2:	4b35      	ldr	r3, [pc, #212]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	b2da      	uxtb	r2, r3
 800f0ca:	4b33      	ldr	r3, [pc, #204]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f0cc:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f0ce:	4b32      	ldr	r3, [pc, #200]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	4b31      	ldr	r3, [pc, #196]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800f0d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0da:	4a2f      	ldr	r2, [pc, #188]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f0dc:	7812      	ldrb	r2, [r2, #0]
 800f0de:	4611      	mov	r1, r2
 800f0e0:	3302      	adds	r3, #2
 800f0e2:	4a2e      	ldr	r2, [pc, #184]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800f0e4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f0e8:	8a3a      	ldrh	r2, [r7, #16]
 800f0ea:	8a7b      	ldrh	r3, [r7, #18]
 800f0ec:	429a      	cmp	r2, r3
 800f0ee:	d218      	bcs.n	800f122 <pass_maker_Dijkstra+0x1ca>
 800f0f0:	8a3a      	ldrh	r2, [r7, #16]
 800f0f2:	89bb      	ldrh	r3, [r7, #12]
 800f0f4:	429a      	cmp	r2, r3
 800f0f6:	d814      	bhi.n	800f122 <pass_maker_Dijkstra+0x1ca>
 800f0f8:	8a3a      	ldrh	r2, [r7, #16]
 800f0fa:	89fb      	ldrh	r3, [r7, #14]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d810      	bhi.n	800f122 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f100:	4b25      	ldr	r3, [pc, #148]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	3301      	adds	r3, #1
 800f106:	b2da      	uxtb	r2, r3
 800f108:	4b23      	ldr	r3, [pc, #140]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f10a:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f10c:	4b22      	ldr	r3, [pc, #136]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	4619      	mov	r1, r3
 800f112:	4b22      	ldr	r3, [pc, #136]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800f114:	f06f 0201 	mvn.w	r2, #1
 800f118:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	3301      	adds	r3, #1
 800f120:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f122:	89ba      	ldrh	r2, [r7, #12]
 800f124:	8a7b      	ldrh	r3, [r7, #18]
 800f126:	429a      	cmp	r2, r3
 800f128:	d218      	bcs.n	800f15c <pass_maker_Dijkstra+0x204>
 800f12a:	89ba      	ldrh	r2, [r7, #12]
 800f12c:	8a3b      	ldrh	r3, [r7, #16]
 800f12e:	429a      	cmp	r2, r3
 800f130:	d214      	bcs.n	800f15c <pass_maker_Dijkstra+0x204>
 800f132:	89ba      	ldrh	r2, [r7, #12]
 800f134:	89fb      	ldrh	r3, [r7, #14]
 800f136:	429a      	cmp	r2, r3
 800f138:	d810      	bhi.n	800f15c <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f13a:	4b17      	ldr	r3, [pc, #92]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	3301      	adds	r3, #1
 800f140:	b2da      	uxtb	r2, r3
 800f142:	4b15      	ldr	r3, [pc, #84]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f144:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f146:	4b14      	ldr	r3, [pc, #80]	; (800f198 <pass_maker_Dijkstra+0x240>)
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	4619      	mov	r1, r3
 800f14c:	4b13      	ldr	r3, [pc, #76]	; (800f19c <pass_maker_Dijkstra+0x244>)
 800f14e:	f06f 0202 	mvn.w	r2, #2
 800f152:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f156:	697b      	ldr	r3, [r7, #20]
 800f158:	3b01      	subs	r3, #1
 800f15a:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	2b05      	cmp	r3, #5
 800f160:	d101      	bne.n	800f166 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f162:	2301      	movs	r3, #1
 800f164:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f166:	697b      	ldr	r3, [r7, #20]
 800f168:	2b06      	cmp	r3, #6
 800f16a:	d101      	bne.n	800f170 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f16c:	2302      	movs	r3, #2
 800f16e:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f170:	697b      	ldr	r3, [r7, #20]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d101      	bne.n	800f17a <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f176:	2304      	movs	r3, #4
 800f178:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f180:	f47f aefd 	bne.w	800ef7e <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f184:	2303      	movs	r3, #3
 800f186:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f188:	e6f9      	b.n	800ef7e <pass_maker_Dijkstra+0x26>
					break;
 800f18a:	bf00      	nop
 800f18c:	e000      	b.n	800f190 <pass_maker_Dijkstra+0x238>
			break;
 800f18e:	bf00      	nop
		}

	}
}
 800f190:	bf00      	nop
 800f192:	371c      	adds	r7, #28
 800f194:	46bd      	mov	sp, r7
 800f196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f198:	20000828 	.word	0x20000828
 800f19c:	2000083c 	.word	0x2000083c

0800f1a0 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f1a0:	b5b0      	push	{r4, r5, r7, lr}
 800f1a2:	b0e0      	sub	sp, #384	; 0x180
 800f1a4:	af50      	add	r7, sp, #320	; 0x140
 800f1a6:	ed87 0a05 	vstr	s0, [r7, #20]
 800f1aa:	edc7 0a04 	vstr	s1, [r7, #16]
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	4608      	mov	r0, r1
 800f1b2:	4611      	mov	r1, r2
 800f1b4:	461a      	mov	r2, r3
 800f1b6:	ed87 1a01 	vstr	s2, [r7, #4]
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	72fb      	strb	r3, [r7, #11]
 800f1be:	460b      	mov	r3, r1
 800f1c0:	72bb      	strb	r3, [r7, #10]
 800f1c2:	4613      	mov	r3, r2
 800f1c4:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f1c6:	f06f 0301 	mvn.w	r3, #1
 800f1ca:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f1cc:	2301      	movs	r3, #1
 800f1ce:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f1dc:	2300      	movs	r3, #0
 800f1de:	633b      	str	r3, [r7, #48]	; 0x30
 800f1e0:	e007      	b.n	800f1f2 <run_shortest+0x52>
 800f1e2:	4a07      	ldr	r2, [pc, #28]	; (800f200 <run_shortest+0x60>)
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	2100      	movs	r1, #0
 800f1e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	633b      	str	r3, [r7, #48]	; 0x30
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f4:	2bfe      	cmp	r3, #254	; 0xfe
 800f1f6:	ddf4      	ble.n	800f1e2 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1fc:	e077      	b.n	800f2ee <run_shortest+0x14e>
 800f1fe:	bf00      	nop
 800f200:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f204:	4aa9      	ldr	r2, [pc, #676]	; (800f4ac <run_shortest+0x30c>)
 800f206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f208:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f20c:	4aa8      	ldr	r2, [pc, #672]	; (800f4b0 <run_shortest+0x310>)
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f214:	4aa5      	ldr	r2, [pc, #660]	; (800f4ac <run_shortest+0x30c>)
 800f216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f218:	330c      	adds	r3, #12
 800f21a:	005b      	lsls	r3, r3, #1
 800f21c:	4413      	add	r3, r2
 800f21e:	88d9      	ldrh	r1, [r3, #6]
 800f220:	4aa3      	ldr	r2, [pc, #652]	; (800f4b0 <run_shortest+0x310>)
 800f222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f224:	330c      	adds	r3, #12
 800f226:	005b      	lsls	r3, r3, #1
 800f228:	4413      	add	r3, r2
 800f22a:	460a      	mov	r2, r1
 800f22c:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f22e:	4a9f      	ldr	r2, [pc, #636]	; (800f4ac <run_shortest+0x30c>)
 800f230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f232:	331c      	adds	r3, #28
 800f234:	005b      	lsls	r3, r3, #1
 800f236:	4413      	add	r3, r2
 800f238:	8899      	ldrh	r1, [r3, #4]
 800f23a:	4a9d      	ldr	r2, [pc, #628]	; (800f4b0 <run_shortest+0x310>)
 800f23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23e:	331c      	adds	r3, #28
 800f240:	005b      	lsls	r3, r3, #1
 800f242:	4413      	add	r3, r2
 800f244:	460a      	mov	r2, r1
 800f246:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f248:	4a98      	ldr	r2, [pc, #608]	; (800f4ac <run_shortest+0x30c>)
 800f24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24c:	332c      	adds	r3, #44	; 0x2c
 800f24e:	005b      	lsls	r3, r3, #1
 800f250:	4413      	add	r3, r2
 800f252:	8859      	ldrh	r1, [r3, #2]
 800f254:	4a96      	ldr	r2, [pc, #600]	; (800f4b0 <run_shortest+0x310>)
 800f256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f258:	332c      	adds	r3, #44	; 0x2c
 800f25a:	005b      	lsls	r3, r3, #1
 800f25c:	4413      	add	r3, r2
 800f25e:	460a      	mov	r2, r1
 800f260:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f262:	4a92      	ldr	r2, [pc, #584]	; (800f4ac <run_shortest+0x30c>)
 800f264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f266:	331c      	adds	r3, #28
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	889b      	ldrh	r3, [r3, #4]
 800f26e:	43db      	mvns	r3, r3
 800f270:	b299      	uxth	r1, r3
 800f272:	4a8e      	ldr	r2, [pc, #568]	; (800f4ac <run_shortest+0x30c>)
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	331c      	adds	r3, #28
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	4413      	add	r3, r2
 800f27c:	460a      	mov	r2, r1
 800f27e:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f280:	4a8a      	ldr	r2, [pc, #552]	; (800f4ac <run_shortest+0x30c>)
 800f282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f284:	332c      	adds	r3, #44	; 0x2c
 800f286:	005b      	lsls	r3, r3, #1
 800f288:	4413      	add	r3, r2
 800f28a:	885b      	ldrh	r3, [r3, #2]
 800f28c:	43db      	mvns	r3, r3
 800f28e:	b299      	uxth	r1, r3
 800f290:	4a86      	ldr	r2, [pc, #536]	; (800f4ac <run_shortest+0x30c>)
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	332c      	adds	r3, #44	; 0x2c
 800f296:	005b      	lsls	r3, r3, #1
 800f298:	4413      	add	r3, r2
 800f29a:	460a      	mov	r2, r1
 800f29c:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f29e:	4a83      	ldr	r2, [pc, #524]	; (800f4ac <run_shortest+0x30c>)
 800f2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f2a6:	4981      	ldr	r1, [pc, #516]	; (800f4ac <run_shortest+0x30c>)
 800f2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2aa:	331c      	adds	r3, #28
 800f2ac:	005b      	lsls	r3, r3, #1
 800f2ae:	440b      	add	r3, r1
 800f2b0:	889b      	ldrh	r3, [r3, #4]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	b299      	uxth	r1, r3
 800f2b6:	4a7d      	ldr	r2, [pc, #500]	; (800f4ac <run_shortest+0x30c>)
 800f2b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f2be:	4a7b      	ldr	r2, [pc, #492]	; (800f4ac <run_shortest+0x30c>)
 800f2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c2:	330c      	adds	r3, #12
 800f2c4:	005b      	lsls	r3, r3, #1
 800f2c6:	4413      	add	r3, r2
 800f2c8:	88da      	ldrh	r2, [r3, #6]
 800f2ca:	4978      	ldr	r1, [pc, #480]	; (800f4ac <run_shortest+0x30c>)
 800f2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ce:	332c      	adds	r3, #44	; 0x2c
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	440b      	add	r3, r1
 800f2d4:	885b      	ldrh	r3, [r3, #2]
 800f2d6:	4313      	orrs	r3, r2
 800f2d8:	b299      	uxth	r1, r3
 800f2da:	4a74      	ldr	r2, [pc, #464]	; (800f4ac <run_shortest+0x30c>)
 800f2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2de:	330c      	adds	r3, #12
 800f2e0:	005b      	lsls	r3, r3, #1
 800f2e2:	4413      	add	r3, r2
 800f2e4:	460a      	mov	r2, r1
 800f2e6:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f0:	2b0e      	cmp	r3, #14
 800f2f2:	dd87      	ble.n	800f204 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f2f4:	f7ff fe30 	bl	800ef58 <pass_maker_Dijkstra>

	pass_count = 1;
 800f2f8:	4b6e      	ldr	r3, [pc, #440]	; (800f4b4 <run_shortest+0x314>)
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f2fe:	7afb      	ldrb	r3, [r7, #11]
 800f300:	2b01      	cmp	r3, #1
 800f302:	f040 84b5 	bne.w	800fc70 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f306:	4b6b      	ldr	r3, [pc, #428]	; (800f4b4 <run_shortest+0x314>)
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	4b6a      	ldr	r3, [pc, #424]	; (800f4b8 <run_shortest+0x318>)
 800f30e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 813a 	beq.w	800f58c <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f318:	4b66      	ldr	r3, [pc, #408]	; (800f4b4 <run_shortest+0x314>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	461a      	mov	r2, r3
 800f31e:	4b66      	ldr	r3, [pc, #408]	; (800f4b8 <run_shortest+0x318>)
 800f320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f324:	f113 0f02 	cmn.w	r3, #2
 800f328:	d131      	bne.n	800f38e <run_shortest+0x1ee>
 800f32a:	4b62      	ldr	r3, [pc, #392]	; (800f4b4 <run_shortest+0x314>)
 800f32c:	781b      	ldrb	r3, [r3, #0]
 800f32e:	3b01      	subs	r3, #1
 800f330:	4a61      	ldr	r2, [pc, #388]	; (800f4b8 <run_shortest+0x318>)
 800f332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f336:	2b00      	cmp	r3, #0
 800f338:	dd29      	ble.n	800f38e <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f33a:	4b5e      	ldr	r3, [pc, #376]	; (800f4b4 <run_shortest+0x314>)
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	3301      	adds	r3, #1
 800f340:	4a5d      	ldr	r2, [pc, #372]	; (800f4b8 <run_shortest+0x318>)
 800f342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f346:	2b00      	cmp	r3, #0
 800f348:	dd21      	ble.n	800f38e <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f34a:	4b5a      	ldr	r3, [pc, #360]	; (800f4b4 <run_shortest+0x314>)
 800f34c:	781b      	ldrb	r3, [r3, #0]
 800f34e:	3b01      	subs	r3, #1
 800f350:	4a59      	ldr	r2, [pc, #356]	; (800f4b8 <run_shortest+0x318>)
 800f352:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f356:	4b57      	ldr	r3, [pc, #348]	; (800f4b4 <run_shortest+0x314>)
 800f358:	781b      	ldrb	r3, [r3, #0]
 800f35a:	3b01      	subs	r3, #1
 800f35c:	3a01      	subs	r2, #1
 800f35e:	4956      	ldr	r1, [pc, #344]	; (800f4b8 <run_shortest+0x318>)
 800f360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f364:	4b53      	ldr	r3, [pc, #332]	; (800f4b4 <run_shortest+0x314>)
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	3301      	adds	r3, #1
 800f36a:	4a53      	ldr	r2, [pc, #332]	; (800f4b8 <run_shortest+0x318>)
 800f36c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f370:	4b50      	ldr	r3, [pc, #320]	; (800f4b4 <run_shortest+0x314>)
 800f372:	781b      	ldrb	r3, [r3, #0]
 800f374:	3301      	adds	r3, #1
 800f376:	3a01      	subs	r2, #1
 800f378:	494f      	ldr	r1, [pc, #316]	; (800f4b8 <run_shortest+0x318>)
 800f37a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f37e:	4b4d      	ldr	r3, [pc, #308]	; (800f4b4 <run_shortest+0x314>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	4619      	mov	r1, r3
 800f384:	4b4c      	ldr	r3, [pc, #304]	; (800f4b8 <run_shortest+0x318>)
 800f386:	f06f 0203 	mvn.w	r2, #3
 800f38a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f38e:	4b49      	ldr	r3, [pc, #292]	; (800f4b4 <run_shortest+0x314>)
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	461a      	mov	r2, r3
 800f394:	4b48      	ldr	r3, [pc, #288]	; (800f4b8 <run_shortest+0x318>)
 800f396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f39a:	f113 0f03 	cmn.w	r3, #3
 800f39e:	d131      	bne.n	800f404 <run_shortest+0x264>
 800f3a0:	4b44      	ldr	r3, [pc, #272]	; (800f4b4 <run_shortest+0x314>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	4a44      	ldr	r2, [pc, #272]	; (800f4b8 <run_shortest+0x318>)
 800f3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	dd29      	ble.n	800f404 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f3b0:	4b40      	ldr	r3, [pc, #256]	; (800f4b4 <run_shortest+0x314>)
 800f3b2:	781b      	ldrb	r3, [r3, #0]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	4a40      	ldr	r2, [pc, #256]	; (800f4b8 <run_shortest+0x318>)
 800f3b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	dd21      	ble.n	800f404 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f3c0:	4b3c      	ldr	r3, [pc, #240]	; (800f4b4 <run_shortest+0x314>)
 800f3c2:	781b      	ldrb	r3, [r3, #0]
 800f3c4:	3b01      	subs	r3, #1
 800f3c6:	4a3c      	ldr	r2, [pc, #240]	; (800f4b8 <run_shortest+0x318>)
 800f3c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3cc:	4b39      	ldr	r3, [pc, #228]	; (800f4b4 <run_shortest+0x314>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	3b01      	subs	r3, #1
 800f3d2:	3a01      	subs	r2, #1
 800f3d4:	4938      	ldr	r1, [pc, #224]	; (800f4b8 <run_shortest+0x318>)
 800f3d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f3da:	4b36      	ldr	r3, [pc, #216]	; (800f4b4 <run_shortest+0x314>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	3301      	adds	r3, #1
 800f3e0:	4a35      	ldr	r2, [pc, #212]	; (800f4b8 <run_shortest+0x318>)
 800f3e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3e6:	4b33      	ldr	r3, [pc, #204]	; (800f4b4 <run_shortest+0x314>)
 800f3e8:	781b      	ldrb	r3, [r3, #0]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	3a01      	subs	r2, #1
 800f3ee:	4932      	ldr	r1, [pc, #200]	; (800f4b8 <run_shortest+0x318>)
 800f3f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f3f4:	4b2f      	ldr	r3, [pc, #188]	; (800f4b4 <run_shortest+0x314>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	4b2f      	ldr	r3, [pc, #188]	; (800f4b8 <run_shortest+0x318>)
 800f3fc:	f06f 0204 	mvn.w	r2, #4
 800f400:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f404:	4b2b      	ldr	r3, [pc, #172]	; (800f4b4 <run_shortest+0x314>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	3b01      	subs	r3, #1
 800f40a:	4a2b      	ldr	r2, [pc, #172]	; (800f4b8 <run_shortest+0x318>)
 800f40c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f410:	2b00      	cmp	r3, #0
 800f412:	dd43      	ble.n	800f49c <run_shortest+0x2fc>
 800f414:	4b27      	ldr	r3, [pc, #156]	; (800f4b4 <run_shortest+0x314>)
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	461a      	mov	r2, r3
 800f41a:	4b27      	ldr	r3, [pc, #156]	; (800f4b8 <run_shortest+0x318>)
 800f41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f420:	f113 0f02 	cmn.w	r3, #2
 800f424:	d13a      	bne.n	800f49c <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f426:	4b23      	ldr	r3, [pc, #140]	; (800f4b4 <run_shortest+0x314>)
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	3301      	adds	r3, #1
 800f42c:	4a22      	ldr	r2, [pc, #136]	; (800f4b8 <run_shortest+0x318>)
 800f42e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f432:	f113 0f02 	cmn.w	r3, #2
 800f436:	d131      	bne.n	800f49c <run_shortest+0x2fc>
 800f438:	4b1e      	ldr	r3, [pc, #120]	; (800f4b4 <run_shortest+0x314>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	3302      	adds	r3, #2
 800f43e:	4a1e      	ldr	r2, [pc, #120]	; (800f4b8 <run_shortest+0x318>)
 800f440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f444:	2b00      	cmp	r3, #0
 800f446:	dd29      	ble.n	800f49c <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f448:	4b1a      	ldr	r3, [pc, #104]	; (800f4b4 <run_shortest+0x314>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	4a1a      	ldr	r2, [pc, #104]	; (800f4b8 <run_shortest+0x318>)
 800f450:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f454:	4b17      	ldr	r3, [pc, #92]	; (800f4b4 <run_shortest+0x314>)
 800f456:	781b      	ldrb	r3, [r3, #0]
 800f458:	3b01      	subs	r3, #1
 800f45a:	3a01      	subs	r2, #1
 800f45c:	4916      	ldr	r1, [pc, #88]	; (800f4b8 <run_shortest+0x318>)
 800f45e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f462:	4b14      	ldr	r3, [pc, #80]	; (800f4b4 <run_shortest+0x314>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	4619      	mov	r1, r3
 800f468:	4b13      	ldr	r3, [pc, #76]	; (800f4b8 <run_shortest+0x318>)
 800f46a:	f06f 0205 	mvn.w	r2, #5
 800f46e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f472:	4b10      	ldr	r3, [pc, #64]	; (800f4b4 <run_shortest+0x314>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	3301      	adds	r3, #1
 800f478:	4a0f      	ldr	r2, [pc, #60]	; (800f4b8 <run_shortest+0x318>)
 800f47a:	f04f 31ff 	mov.w	r1, #4294967295
 800f47e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f482:	4b0c      	ldr	r3, [pc, #48]	; (800f4b4 <run_shortest+0x314>)
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	3302      	adds	r3, #2
 800f488:	4a0b      	ldr	r2, [pc, #44]	; (800f4b8 <run_shortest+0x318>)
 800f48a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f48e:	4b09      	ldr	r3, [pc, #36]	; (800f4b4 <run_shortest+0x314>)
 800f490:	781b      	ldrb	r3, [r3, #0]
 800f492:	3302      	adds	r3, #2
 800f494:	3a01      	subs	r2, #1
 800f496:	4908      	ldr	r1, [pc, #32]	; (800f4b8 <run_shortest+0x318>)
 800f498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f49c:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <run_shortest+0x314>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	4a05      	ldr	r2, [pc, #20]	; (800f4b8 <run_shortest+0x318>)
 800f4a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	e007      	b.n	800f4bc <run_shortest+0x31c>
 800f4ac:	20000c3c 	.word	0x20000c3c
 800f4b0:	20000cb4 	.word	0x20000cb4
 800f4b4:	20000828 	.word	0x20000828
 800f4b8:	2000083c 	.word	0x2000083c
 800f4bc:	dd43      	ble.n	800f546 <run_shortest+0x3a6>
 800f4be:	4b31      	ldr	r3, [pc, #196]	; (800f584 <run_shortest+0x3e4>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	4b30      	ldr	r3, [pc, #192]	; (800f588 <run_shortest+0x3e8>)
 800f4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ca:	f113 0f03 	cmn.w	r3, #3
 800f4ce:	d13a      	bne.n	800f546 <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f4d0:	4b2c      	ldr	r3, [pc, #176]	; (800f584 <run_shortest+0x3e4>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	4a2c      	ldr	r2, [pc, #176]	; (800f588 <run_shortest+0x3e8>)
 800f4d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4dc:	f113 0f03 	cmn.w	r3, #3
 800f4e0:	d131      	bne.n	800f546 <run_shortest+0x3a6>
 800f4e2:	4b28      	ldr	r3, [pc, #160]	; (800f584 <run_shortest+0x3e4>)
 800f4e4:	781b      	ldrb	r3, [r3, #0]
 800f4e6:	3302      	adds	r3, #2
 800f4e8:	4a27      	ldr	r2, [pc, #156]	; (800f588 <run_shortest+0x3e8>)
 800f4ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	dd29      	ble.n	800f546 <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f4f2:	4b24      	ldr	r3, [pc, #144]	; (800f584 <run_shortest+0x3e4>)
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	3b01      	subs	r3, #1
 800f4f8:	4a23      	ldr	r2, [pc, #140]	; (800f588 <run_shortest+0x3e8>)
 800f4fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4fe:	4b21      	ldr	r3, [pc, #132]	; (800f584 <run_shortest+0x3e4>)
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	3b01      	subs	r3, #1
 800f504:	3a01      	subs	r2, #1
 800f506:	4920      	ldr	r1, [pc, #128]	; (800f588 <run_shortest+0x3e8>)
 800f508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f50c:	4b1d      	ldr	r3, [pc, #116]	; (800f584 <run_shortest+0x3e4>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	4619      	mov	r1, r3
 800f512:	4b1d      	ldr	r3, [pc, #116]	; (800f588 <run_shortest+0x3e8>)
 800f514:	f06f 0206 	mvn.w	r2, #6
 800f518:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f51c:	4b19      	ldr	r3, [pc, #100]	; (800f584 <run_shortest+0x3e4>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	3301      	adds	r3, #1
 800f522:	4a19      	ldr	r2, [pc, #100]	; (800f588 <run_shortest+0x3e8>)
 800f524:	f04f 31ff 	mov.w	r1, #4294967295
 800f528:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f52c:	4b15      	ldr	r3, [pc, #84]	; (800f584 <run_shortest+0x3e4>)
 800f52e:	781b      	ldrb	r3, [r3, #0]
 800f530:	3302      	adds	r3, #2
 800f532:	4a15      	ldr	r2, [pc, #84]	; (800f588 <run_shortest+0x3e8>)
 800f534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f538:	4b12      	ldr	r3, [pc, #72]	; (800f584 <run_shortest+0x3e4>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	3302      	adds	r3, #2
 800f53e:	3a01      	subs	r2, #1
 800f540:	4911      	ldr	r1, [pc, #68]	; (800f588 <run_shortest+0x3e8>)
 800f542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f546:	4b0f      	ldr	r3, [pc, #60]	; (800f584 <run_shortest+0x3e4>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	461a      	mov	r2, r3
 800f54c:	4b0e      	ldr	r3, [pc, #56]	; (800f588 <run_shortest+0x3e8>)
 800f54e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f552:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f556:	4b0b      	ldr	r3, [pc, #44]	; (800f584 <run_shortest+0x3e4>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	3b01      	subs	r3, #1
 800f55c:	4a0a      	ldr	r2, [pc, #40]	; (800f588 <run_shortest+0x3e8>)
 800f55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d107      	bne.n	800f576 <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f566:	4b07      	ldr	r3, [pc, #28]	; (800f584 <run_shortest+0x3e4>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	3b01      	subs	r3, #1
 800f56c:	4a06      	ldr	r2, [pc, #24]	; (800f588 <run_shortest+0x3e8>)
 800f56e:	f04f 31ff 	mov.w	r1, #4294967295
 800f572:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f576:	4b03      	ldr	r3, [pc, #12]	; (800f584 <run_shortest+0x3e4>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	3301      	adds	r3, #1
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	4b01      	ldr	r3, [pc, #4]	; (800f584 <run_shortest+0x3e4>)
 800f580:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f582:	e6c0      	b.n	800f306 <run_shortest+0x166>
 800f584:	20000828 	.word	0x20000828
 800f588:	2000083c 	.word	0x2000083c
			break;
 800f58c:	bf00      	nop
	}

	pass_count = 1;
 800f58e:	4b8c      	ldr	r3, [pc, #560]	; (800f7c0 <run_shortest+0x620>)
 800f590:	2201      	movs	r2, #1
 800f592:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f594:	7a7b      	ldrb	r3, [r7, #9]
 800f596:	2b01      	cmp	r3, #1
 800f598:	f040 836a 	bne.w	800fc70 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f59c:	4b88      	ldr	r3, [pc, #544]	; (800f7c0 <run_shortest+0x620>)
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	4b88      	ldr	r3, [pc, #544]	; (800f7c4 <run_shortest+0x624>)
 800f5a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f000 81f1 	beq.w	800f990 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f5ae:	4b84      	ldr	r3, [pc, #528]	; (800f7c0 <run_shortest+0x620>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	3b01      	subs	r3, #1
 800f5b4:	4a83      	ldr	r2, [pc, #524]	; (800f7c4 <run_shortest+0x624>)
 800f5b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	f340 81dc 	ble.w	800f978 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f5c0:	4b7f      	ldr	r3, [pc, #508]	; (800f7c0 <run_shortest+0x620>)
 800f5c2:	781b      	ldrb	r3, [r3, #0]
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	4b7f      	ldr	r3, [pc, #508]	; (800f7c4 <run_shortest+0x624>)
 800f5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5cc:	f113 0f02 	cmn.w	r3, #2
 800f5d0:	d009      	beq.n	800f5e6 <run_shortest+0x446>
 800f5d2:	4b7b      	ldr	r3, [pc, #492]	; (800f7c0 <run_shortest+0x620>)
 800f5d4:	781b      	ldrb	r3, [r3, #0]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	4b7a      	ldr	r3, [pc, #488]	; (800f7c4 <run_shortest+0x624>)
 800f5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5de:	f113 0f03 	cmn.w	r3, #3
 800f5e2:	f040 81c9 	bne.w	800f978 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f5e6:	4b76      	ldr	r3, [pc, #472]	; (800f7c0 <run_shortest+0x620>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	4b75      	ldr	r3, [pc, #468]	; (800f7c4 <run_shortest+0x624>)
 800f5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5f2:	f113 0f02 	cmn.w	r3, #2
 800f5f6:	d12d      	bne.n	800f654 <run_shortest+0x4b4>
 800f5f8:	4b71      	ldr	r3, [pc, #452]	; (800f7c0 <run_shortest+0x620>)
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	4a71      	ldr	r2, [pc, #452]	; (800f7c4 <run_shortest+0x624>)
 800f600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f604:	f113 0f03 	cmn.w	r3, #3
 800f608:	d124      	bne.n	800f654 <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f60a:	4b6d      	ldr	r3, [pc, #436]	; (800f7c0 <run_shortest+0x620>)
 800f60c:	781b      	ldrb	r3, [r3, #0]
 800f60e:	3b01      	subs	r3, #1
 800f610:	4a6c      	ldr	r2, [pc, #432]	; (800f7c4 <run_shortest+0x624>)
 800f612:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f616:	4b6a      	ldr	r3, [pc, #424]	; (800f7c0 <run_shortest+0x620>)
 800f618:	781b      	ldrb	r3, [r3, #0]
 800f61a:	3b01      	subs	r3, #1
 800f61c:	3a01      	subs	r2, #1
 800f61e:	4969      	ldr	r1, [pc, #420]	; (800f7c4 <run_shortest+0x624>)
 800f620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f624:	4b66      	ldr	r3, [pc, #408]	; (800f7c0 <run_shortest+0x620>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	3b01      	subs	r3, #1
 800f62a:	4a66      	ldr	r2, [pc, #408]	; (800f7c4 <run_shortest+0x624>)
 800f62c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d107      	bne.n	800f644 <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f634:	4b62      	ldr	r3, [pc, #392]	; (800f7c0 <run_shortest+0x620>)
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	3b01      	subs	r3, #1
 800f63a:	4a62      	ldr	r2, [pc, #392]	; (800f7c4 <run_shortest+0x624>)
 800f63c:	f04f 31ff 	mov.w	r1, #4294967295
 800f640:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f644:	4b5e      	ldr	r3, [pc, #376]	; (800f7c0 <run_shortest+0x620>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	4619      	mov	r1, r3
 800f64a:	4b5e      	ldr	r3, [pc, #376]	; (800f7c4 <run_shortest+0x624>)
 800f64c:	f06f 0207 	mvn.w	r2, #7
 800f650:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f654:	4b5a      	ldr	r3, [pc, #360]	; (800f7c0 <run_shortest+0x620>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	461a      	mov	r2, r3
 800f65a:	4b5a      	ldr	r3, [pc, #360]	; (800f7c4 <run_shortest+0x624>)
 800f65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f660:	f113 0f03 	cmn.w	r3, #3
 800f664:	d12d      	bne.n	800f6c2 <run_shortest+0x522>
 800f666:	4b56      	ldr	r3, [pc, #344]	; (800f7c0 <run_shortest+0x620>)
 800f668:	781b      	ldrb	r3, [r3, #0]
 800f66a:	3301      	adds	r3, #1
 800f66c:	4a55      	ldr	r2, [pc, #340]	; (800f7c4 <run_shortest+0x624>)
 800f66e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f672:	f113 0f02 	cmn.w	r3, #2
 800f676:	d124      	bne.n	800f6c2 <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f678:	4b51      	ldr	r3, [pc, #324]	; (800f7c0 <run_shortest+0x620>)
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	3b01      	subs	r3, #1
 800f67e:	4a51      	ldr	r2, [pc, #324]	; (800f7c4 <run_shortest+0x624>)
 800f680:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f684:	4b4e      	ldr	r3, [pc, #312]	; (800f7c0 <run_shortest+0x620>)
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	3b01      	subs	r3, #1
 800f68a:	3a01      	subs	r2, #1
 800f68c:	494d      	ldr	r1, [pc, #308]	; (800f7c4 <run_shortest+0x624>)
 800f68e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f692:	4b4b      	ldr	r3, [pc, #300]	; (800f7c0 <run_shortest+0x620>)
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	3b01      	subs	r3, #1
 800f698:	4a4a      	ldr	r2, [pc, #296]	; (800f7c4 <run_shortest+0x624>)
 800f69a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d107      	bne.n	800f6b2 <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f6a2:	4b47      	ldr	r3, [pc, #284]	; (800f7c0 <run_shortest+0x620>)
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	4a46      	ldr	r2, [pc, #280]	; (800f7c4 <run_shortest+0x624>)
 800f6aa:	f04f 31ff 	mov.w	r1, #4294967295
 800f6ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f6b2:	4b43      	ldr	r3, [pc, #268]	; (800f7c0 <run_shortest+0x620>)
 800f6b4:	781b      	ldrb	r3, [r3, #0]
 800f6b6:	4619      	mov	r1, r3
 800f6b8:	4b42      	ldr	r3, [pc, #264]	; (800f7c4 <run_shortest+0x624>)
 800f6ba:	f06f 0208 	mvn.w	r2, #8
 800f6be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f6c2:	4b3f      	ldr	r3, [pc, #252]	; (800f7c0 <run_shortest+0x620>)
 800f6c4:	781b      	ldrb	r3, [r3, #0]
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	4b3e      	ldr	r3, [pc, #248]	; (800f7c4 <run_shortest+0x624>)
 800f6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6ce:	f113 0f02 	cmn.w	r3, #2
 800f6d2:	d135      	bne.n	800f740 <run_shortest+0x5a0>
 800f6d4:	4b3a      	ldr	r3, [pc, #232]	; (800f7c0 <run_shortest+0x620>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	4a3a      	ldr	r2, [pc, #232]	; (800f7c4 <run_shortest+0x624>)
 800f6dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6e0:	f113 0f02 	cmn.w	r3, #2
 800f6e4:	d12c      	bne.n	800f740 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f6e6:	4b36      	ldr	r3, [pc, #216]	; (800f7c0 <run_shortest+0x620>)
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	3b01      	subs	r3, #1
 800f6ec:	4a35      	ldr	r2, [pc, #212]	; (800f7c4 <run_shortest+0x624>)
 800f6ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f6f2:	4b33      	ldr	r3, [pc, #204]	; (800f7c0 <run_shortest+0x620>)
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	3b01      	subs	r3, #1
 800f6f8:	3a01      	subs	r2, #1
 800f6fa:	4932      	ldr	r1, [pc, #200]	; (800f7c4 <run_shortest+0x624>)
 800f6fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f700:	4b2f      	ldr	r3, [pc, #188]	; (800f7c0 <run_shortest+0x620>)
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	3b01      	subs	r3, #1
 800f706:	4a2f      	ldr	r2, [pc, #188]	; (800f7c4 <run_shortest+0x624>)
 800f708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d107      	bne.n	800f720 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f710:	4b2b      	ldr	r3, [pc, #172]	; (800f7c0 <run_shortest+0x620>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	3b01      	subs	r3, #1
 800f716:	4a2b      	ldr	r2, [pc, #172]	; (800f7c4 <run_shortest+0x624>)
 800f718:	f04f 31ff 	mov.w	r1, #4294967295
 800f71c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f720:	4b27      	ldr	r3, [pc, #156]	; (800f7c0 <run_shortest+0x620>)
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	4619      	mov	r1, r3
 800f726:	4b27      	ldr	r3, [pc, #156]	; (800f7c4 <run_shortest+0x624>)
 800f728:	f06f 0209 	mvn.w	r2, #9
 800f72c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f730:	4b23      	ldr	r3, [pc, #140]	; (800f7c0 <run_shortest+0x620>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	3301      	adds	r3, #1
 800f736:	4a23      	ldr	r2, [pc, #140]	; (800f7c4 <run_shortest+0x624>)
 800f738:	f04f 31ff 	mov.w	r1, #4294967295
 800f73c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f740:	4b1f      	ldr	r3, [pc, #124]	; (800f7c0 <run_shortest+0x620>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	461a      	mov	r2, r3
 800f746:	4b1f      	ldr	r3, [pc, #124]	; (800f7c4 <run_shortest+0x624>)
 800f748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f74c:	f113 0f03 	cmn.w	r3, #3
 800f750:	d140      	bne.n	800f7d4 <run_shortest+0x634>
 800f752:	4b1b      	ldr	r3, [pc, #108]	; (800f7c0 <run_shortest+0x620>)
 800f754:	781b      	ldrb	r3, [r3, #0]
 800f756:	3301      	adds	r3, #1
 800f758:	4a1a      	ldr	r2, [pc, #104]	; (800f7c4 <run_shortest+0x624>)
 800f75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f75e:	f113 0f03 	cmn.w	r3, #3
 800f762:	d137      	bne.n	800f7d4 <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f764:	4b16      	ldr	r3, [pc, #88]	; (800f7c0 <run_shortest+0x620>)
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	3b01      	subs	r3, #1
 800f76a:	4a16      	ldr	r2, [pc, #88]	; (800f7c4 <run_shortest+0x624>)
 800f76c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f770:	4b13      	ldr	r3, [pc, #76]	; (800f7c0 <run_shortest+0x620>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	3b01      	subs	r3, #1
 800f776:	3a01      	subs	r2, #1
 800f778:	4912      	ldr	r1, [pc, #72]	; (800f7c4 <run_shortest+0x624>)
 800f77a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f77e:	4b10      	ldr	r3, [pc, #64]	; (800f7c0 <run_shortest+0x620>)
 800f780:	781b      	ldrb	r3, [r3, #0]
 800f782:	3b01      	subs	r3, #1
 800f784:	4a0f      	ldr	r2, [pc, #60]	; (800f7c4 <run_shortest+0x624>)
 800f786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d107      	bne.n	800f79e <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f78e:	4b0c      	ldr	r3, [pc, #48]	; (800f7c0 <run_shortest+0x620>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	3b01      	subs	r3, #1
 800f794:	4a0b      	ldr	r2, [pc, #44]	; (800f7c4 <run_shortest+0x624>)
 800f796:	f04f 31ff 	mov.w	r1, #4294967295
 800f79a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f79e:	4b08      	ldr	r3, [pc, #32]	; (800f7c0 <run_shortest+0x620>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	4b07      	ldr	r3, [pc, #28]	; (800f7c4 <run_shortest+0x624>)
 800f7a6:	f06f 020a 	mvn.w	r2, #10
 800f7aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f7ae:	4b04      	ldr	r3, [pc, #16]	; (800f7c0 <run_shortest+0x620>)
 800f7b0:	781b      	ldrb	r3, [r3, #0]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	4a03      	ldr	r2, [pc, #12]	; (800f7c4 <run_shortest+0x624>)
 800f7b6:	f04f 31ff 	mov.w	r1, #4294967295
 800f7ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f7be:	e009      	b.n	800f7d4 <run_shortest+0x634>
 800f7c0:	20000828 	.word	0x20000828
 800f7c4:	2000083c 	.word	0x2000083c
						pass_count++;
 800f7c8:	4b6f      	ldr	r3, [pc, #444]	; (800f988 <run_shortest+0x7e8>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	b2da      	uxtb	r2, r3
 800f7d0:	4b6d      	ldr	r3, [pc, #436]	; (800f988 <run_shortest+0x7e8>)
 800f7d2:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f7d4:	4b6c      	ldr	r3, [pc, #432]	; (800f988 <run_shortest+0x7e8>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4b6c      	ldr	r3, [pc, #432]	; (800f98c <run_shortest+0x7ec>)
 800f7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	dbf1      	blt.n	800f7c8 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f7e4:	4b68      	ldr	r3, [pc, #416]	; (800f988 <run_shortest+0x7e8>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	4a68      	ldr	r2, [pc, #416]	; (800f98c <run_shortest+0x7ec>)
 800f7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7f0:	f113 0f02 	cmn.w	r3, #2
 800f7f4:	d15b      	bne.n	800f8ae <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f7f6:	4b64      	ldr	r3, [pc, #400]	; (800f988 <run_shortest+0x7e8>)
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	3b02      	subs	r3, #2
 800f7fc:	4a63      	ldr	r2, [pc, #396]	; (800f98c <run_shortest+0x7ec>)
 800f7fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f802:	f113 0f02 	cmn.w	r3, #2
 800f806:	d12d      	bne.n	800f864 <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f808:	4b5f      	ldr	r3, [pc, #380]	; (800f988 <run_shortest+0x7e8>)
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	4b5f      	ldr	r3, [pc, #380]	; (800f98c <run_shortest+0x7ec>)
 800f810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f814:	4a5c      	ldr	r2, [pc, #368]	; (800f988 <run_shortest+0x7e8>)
 800f816:	7812      	ldrb	r2, [r2, #0]
 800f818:	4611      	mov	r1, r2
 800f81a:	3b01      	subs	r3, #1
 800f81c:	4a5b      	ldr	r2, [pc, #364]	; (800f98c <run_shortest+0x7ec>)
 800f81e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f822:	4b59      	ldr	r3, [pc, #356]	; (800f988 <run_shortest+0x7e8>)
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	461a      	mov	r2, r3
 800f828:	4b58      	ldr	r3, [pc, #352]	; (800f98c <run_shortest+0x7ec>)
 800f82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d107      	bne.n	800f842 <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f832:	4b55      	ldr	r3, [pc, #340]	; (800f988 <run_shortest+0x7e8>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	4619      	mov	r1, r3
 800f838:	4b54      	ldr	r3, [pc, #336]	; (800f98c <run_shortest+0x7ec>)
 800f83a:	f04f 32ff 	mov.w	r2, #4294967295
 800f83e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f842:	4b51      	ldr	r3, [pc, #324]	; (800f988 <run_shortest+0x7e8>)
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	3b01      	subs	r3, #1
 800f848:	4a50      	ldr	r2, [pc, #320]	; (800f98c <run_shortest+0x7ec>)
 800f84a:	f06f 010d 	mvn.w	r1, #13
 800f84e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f852:	4b4d      	ldr	r3, [pc, #308]	; (800f988 <run_shortest+0x7e8>)
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	3b02      	subs	r3, #2
 800f858:	4a4c      	ldr	r2, [pc, #304]	; (800f98c <run_shortest+0x7ec>)
 800f85a:	f04f 31ff 	mov.w	r1, #4294967295
 800f85e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f862:	e024      	b.n	800f8ae <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f864:	4b48      	ldr	r3, [pc, #288]	; (800f988 <run_shortest+0x7e8>)
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	461a      	mov	r2, r3
 800f86a:	4b48      	ldr	r3, [pc, #288]	; (800f98c <run_shortest+0x7ec>)
 800f86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f870:	4a45      	ldr	r2, [pc, #276]	; (800f988 <run_shortest+0x7e8>)
 800f872:	7812      	ldrb	r2, [r2, #0]
 800f874:	4611      	mov	r1, r2
 800f876:	3b01      	subs	r3, #1
 800f878:	4a44      	ldr	r2, [pc, #272]	; (800f98c <run_shortest+0x7ec>)
 800f87a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f87e:	4b42      	ldr	r3, [pc, #264]	; (800f988 <run_shortest+0x7e8>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	461a      	mov	r2, r3
 800f884:	4b41      	ldr	r3, [pc, #260]	; (800f98c <run_shortest+0x7ec>)
 800f886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d107      	bne.n	800f89e <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f88e:	4b3e      	ldr	r3, [pc, #248]	; (800f988 <run_shortest+0x7e8>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	4619      	mov	r1, r3
 800f894:	4b3d      	ldr	r3, [pc, #244]	; (800f98c <run_shortest+0x7ec>)
 800f896:	f04f 32ff 	mov.w	r2, #4294967295
 800f89a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f89e:	4b3a      	ldr	r3, [pc, #232]	; (800f988 <run_shortest+0x7e8>)
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	3b01      	subs	r3, #1
 800f8a4:	4a39      	ldr	r2, [pc, #228]	; (800f98c <run_shortest+0x7ec>)
 800f8a6:	f06f 010b 	mvn.w	r1, #11
 800f8aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f8ae:	4b36      	ldr	r3, [pc, #216]	; (800f988 <run_shortest+0x7e8>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	3b01      	subs	r3, #1
 800f8b4:	4a35      	ldr	r2, [pc, #212]	; (800f98c <run_shortest+0x7ec>)
 800f8b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8ba:	f113 0f03 	cmn.w	r3, #3
 800f8be:	d15b      	bne.n	800f978 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f8c0:	4b31      	ldr	r3, [pc, #196]	; (800f988 <run_shortest+0x7e8>)
 800f8c2:	781b      	ldrb	r3, [r3, #0]
 800f8c4:	3b02      	subs	r3, #2
 800f8c6:	4a31      	ldr	r2, [pc, #196]	; (800f98c <run_shortest+0x7ec>)
 800f8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8cc:	f113 0f03 	cmn.w	r3, #3
 800f8d0:	d12d      	bne.n	800f92e <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f8d2:	4b2d      	ldr	r3, [pc, #180]	; (800f988 <run_shortest+0x7e8>)
 800f8d4:	781b      	ldrb	r3, [r3, #0]
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	4b2c      	ldr	r3, [pc, #176]	; (800f98c <run_shortest+0x7ec>)
 800f8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8de:	4a2a      	ldr	r2, [pc, #168]	; (800f988 <run_shortest+0x7e8>)
 800f8e0:	7812      	ldrb	r2, [r2, #0]
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	3b01      	subs	r3, #1
 800f8e6:	4a29      	ldr	r2, [pc, #164]	; (800f98c <run_shortest+0x7ec>)
 800f8e8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8ec:	4b26      	ldr	r3, [pc, #152]	; (800f988 <run_shortest+0x7e8>)
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4b26      	ldr	r3, [pc, #152]	; (800f98c <run_shortest+0x7ec>)
 800f8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d107      	bne.n	800f90c <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8fc:	4b22      	ldr	r3, [pc, #136]	; (800f988 <run_shortest+0x7e8>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	4619      	mov	r1, r3
 800f902:	4b22      	ldr	r3, [pc, #136]	; (800f98c <run_shortest+0x7ec>)
 800f904:	f04f 32ff 	mov.w	r2, #4294967295
 800f908:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f90c:	4b1e      	ldr	r3, [pc, #120]	; (800f988 <run_shortest+0x7e8>)
 800f90e:	781b      	ldrb	r3, [r3, #0]
 800f910:	3b01      	subs	r3, #1
 800f912:	4a1e      	ldr	r2, [pc, #120]	; (800f98c <run_shortest+0x7ec>)
 800f914:	f06f 010e 	mvn.w	r1, #14
 800f918:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f91c:	4b1a      	ldr	r3, [pc, #104]	; (800f988 <run_shortest+0x7e8>)
 800f91e:	781b      	ldrb	r3, [r3, #0]
 800f920:	3b02      	subs	r3, #2
 800f922:	4a1a      	ldr	r2, [pc, #104]	; (800f98c <run_shortest+0x7ec>)
 800f924:	f04f 31ff 	mov.w	r1, #4294967295
 800f928:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f92c:	e024      	b.n	800f978 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f92e:	4b16      	ldr	r3, [pc, #88]	; (800f988 <run_shortest+0x7e8>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	461a      	mov	r2, r3
 800f934:	4b15      	ldr	r3, [pc, #84]	; (800f98c <run_shortest+0x7ec>)
 800f936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f93a:	4a13      	ldr	r2, [pc, #76]	; (800f988 <run_shortest+0x7e8>)
 800f93c:	7812      	ldrb	r2, [r2, #0]
 800f93e:	4611      	mov	r1, r2
 800f940:	3b01      	subs	r3, #1
 800f942:	4a12      	ldr	r2, [pc, #72]	; (800f98c <run_shortest+0x7ec>)
 800f944:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f948:	4b0f      	ldr	r3, [pc, #60]	; (800f988 <run_shortest+0x7e8>)
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	461a      	mov	r2, r3
 800f94e:	4b0f      	ldr	r3, [pc, #60]	; (800f98c <run_shortest+0x7ec>)
 800f950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d107      	bne.n	800f968 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f958:	4b0b      	ldr	r3, [pc, #44]	; (800f988 <run_shortest+0x7e8>)
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	4619      	mov	r1, r3
 800f95e:	4b0b      	ldr	r3, [pc, #44]	; (800f98c <run_shortest+0x7ec>)
 800f960:	f04f 32ff 	mov.w	r2, #4294967295
 800f964:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f968:	4b07      	ldr	r3, [pc, #28]	; (800f988 <run_shortest+0x7e8>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	3b01      	subs	r3, #1
 800f96e:	4a07      	ldr	r2, [pc, #28]	; (800f98c <run_shortest+0x7ec>)
 800f970:	f06f 010c 	mvn.w	r1, #12
 800f974:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f978:	4b03      	ldr	r3, [pc, #12]	; (800f988 <run_shortest+0x7e8>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	3301      	adds	r3, #1
 800f97e:	b2da      	uxtb	r2, r3
 800f980:	4b01      	ldr	r3, [pc, #4]	; (800f988 <run_shortest+0x7e8>)
 800f982:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f984:	e60a      	b.n	800f59c <run_shortest+0x3fc>
 800f986:	bf00      	nop
 800f988:	20000828 	.word	0x20000828
 800f98c:	2000083c 	.word	0x2000083c
				break;
 800f990:	bf00      	nop
		}

		pass_count = 1;
 800f992:	4ba3      	ldr	r3, [pc, #652]	; (800fc20 <run_shortest+0xa80>)
 800f994:	2201      	movs	r2, #1
 800f996:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f998:	4ba1      	ldr	r3, [pc, #644]	; (800fc20 <run_shortest+0xa80>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	4ba1      	ldr	r3, [pc, #644]	; (800fc24 <run_shortest+0xa84>)
 800f9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	f000 813f 	beq.w	800fc28 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f9aa:	4b9d      	ldr	r3, [pc, #628]	; (800fc20 <run_shortest+0xa80>)
 800f9ac:	781b      	ldrb	r3, [r3, #0]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	4b9c      	ldr	r3, [pc, #624]	; (800fc24 <run_shortest+0xa84>)
 800f9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9b6:	f113 0f08 	cmn.w	r3, #8
 800f9ba:	d01b      	beq.n	800f9f4 <run_shortest+0x854>
 800f9bc:	4b98      	ldr	r3, [pc, #608]	; (800fc20 <run_shortest+0xa80>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	461a      	mov	r2, r3
 800f9c2:	4b98      	ldr	r3, [pc, #608]	; (800fc24 <run_shortest+0xa84>)
 800f9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9c8:	f113 0f09 	cmn.w	r3, #9
 800f9cc:	d012      	beq.n	800f9f4 <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f9ce:	4b94      	ldr	r3, [pc, #592]	; (800fc20 <run_shortest+0xa80>)
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	461a      	mov	r2, r3
 800f9d4:	4b93      	ldr	r3, [pc, #588]	; (800fc24 <run_shortest+0xa84>)
 800f9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9da:	f113 0f0a 	cmn.w	r3, #10
 800f9de:	d009      	beq.n	800f9f4 <run_shortest+0x854>
 800f9e0:	4b8f      	ldr	r3, [pc, #572]	; (800fc20 <run_shortest+0xa80>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	4b8f      	ldr	r3, [pc, #572]	; (800fc24 <run_shortest+0xa84>)
 800f9e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ec:	f113 0f0b 	cmn.w	r3, #11
 800f9f0:	f040 810f 	bne.w	800fc12 <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f9f4:	4b8a      	ldr	r3, [pc, #552]	; (800fc20 <run_shortest+0xa80>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	4b8a      	ldr	r3, [pc, #552]	; (800fc24 <run_shortest+0xa84>)
 800f9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa00:	f113 0f08 	cmn.w	r3, #8
 800fa04:	d008      	beq.n	800fa18 <run_shortest+0x878>
 800fa06:	4b86      	ldr	r3, [pc, #536]	; (800fc20 <run_shortest+0xa80>)
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	461a      	mov	r2, r3
 800fa0c:	4b85      	ldr	r3, [pc, #532]	; (800fc24 <run_shortest+0xa84>)
 800fa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa12:	f113 0f0a 	cmn.w	r3, #10
 800fa16:	d102      	bne.n	800fa1e <run_shortest+0x87e>
					slant_direction = -3;
 800fa18:	f06f 0302 	mvn.w	r3, #2
 800fa1c:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800fa1e:	4b80      	ldr	r3, [pc, #512]	; (800fc20 <run_shortest+0xa80>)
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	461a      	mov	r2, r3
 800fa24:	4b7f      	ldr	r3, [pc, #508]	; (800fc24 <run_shortest+0xa84>)
 800fa26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa2a:	f113 0f09 	cmn.w	r3, #9
 800fa2e:	d008      	beq.n	800fa42 <run_shortest+0x8a2>
 800fa30:	4b7b      	ldr	r3, [pc, #492]	; (800fc20 <run_shortest+0xa80>)
 800fa32:	781b      	ldrb	r3, [r3, #0]
 800fa34:	461a      	mov	r2, r3
 800fa36:	4b7b      	ldr	r3, [pc, #492]	; (800fc24 <run_shortest+0xa84>)
 800fa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa3c:	f113 0f0b 	cmn.w	r3, #11
 800fa40:	d102      	bne.n	800fa48 <run_shortest+0x8a8>
					slant_direction = -2;
 800fa42:	f06f 0301 	mvn.w	r3, #1
 800fa46:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800fa48:	4b75      	ldr	r3, [pc, #468]	; (800fc20 <run_shortest+0xa80>)
 800fa4a:	781b      	ldrb	r3, [r3, #0]
 800fa4c:	3301      	adds	r3, #1
 800fa4e:	b2da      	uxtb	r2, r3
 800fa50:	4b73      	ldr	r3, [pc, #460]	; (800fc20 <run_shortest+0xa80>)
 800fa52:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa54:	4b72      	ldr	r3, [pc, #456]	; (800fc20 <run_shortest+0xa80>)
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	4b72      	ldr	r3, [pc, #456]	; (800fc24 <run_shortest+0xa84>)
 800fa5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa64:	d105      	bne.n	800fa72 <run_shortest+0x8d2>
					pass_count++;
 800fa66:	4b6e      	ldr	r3, [pc, #440]	; (800fc20 <run_shortest+0xa80>)
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	4b6c      	ldr	r3, [pc, #432]	; (800fc20 <run_shortest+0xa80>)
 800fa70:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa72:	4b6b      	ldr	r3, [pc, #428]	; (800fc20 <run_shortest+0xa80>)
 800fa74:	781b      	ldrb	r3, [r3, #0]
 800fa76:	461a      	mov	r2, r3
 800fa78:	4b6a      	ldr	r3, [pc, #424]	; (800fc24 <run_shortest+0xa84>)
 800fa7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa82:	d105      	bne.n	800fa90 <run_shortest+0x8f0>
					pass_count++;
 800fa84:	4b66      	ldr	r3, [pc, #408]	; (800fc20 <run_shortest+0xa80>)
 800fa86:	781b      	ldrb	r3, [r3, #0]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	b2da      	uxtb	r2, r3
 800fa8c:	4b64      	ldr	r3, [pc, #400]	; (800fc20 <run_shortest+0xa80>)
 800fa8e:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fa90:	4b63      	ldr	r3, [pc, #396]	; (800fc20 <run_shortest+0xa80>)
 800fa92:	781b      	ldrb	r3, [r3, #0]
 800fa94:	461a      	mov	r2, r3
 800fa96:	4b63      	ldr	r3, [pc, #396]	; (800fc24 <run_shortest+0xa84>)
 800fa98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa9c:	f113 0f03 	cmn.w	r3, #3
 800faa0:	f2c0 80ad 	blt.w	800fbfe <run_shortest+0xa5e>
					slant_count = pass_count;
 800faa4:	4b5e      	ldr	r3, [pc, #376]	; (800fc20 <run_shortest+0xa80>)
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800faac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fab0:	4a5c      	ldr	r2, [pc, #368]	; (800fc24 <run_shortest+0xa84>)
 800fab2:	2133      	movs	r1, #51	; 0x33
 800fab4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fab8:	4b59      	ldr	r3, [pc, #356]	; (800fc20 <run_shortest+0xa80>)
 800faba:	781b      	ldrb	r3, [r3, #0]
 800fabc:	3301      	adds	r3, #1
 800fabe:	b2da      	uxtb	r2, r3
 800fac0:	4b57      	ldr	r3, [pc, #348]	; (800fc20 <run_shortest+0xa80>)
 800fac2:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fac4:	e09b      	b.n	800fbfe <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fac6:	4b56      	ldr	r3, [pc, #344]	; (800fc20 <run_shortest+0xa80>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	461a      	mov	r2, r3
 800facc:	4b55      	ldr	r3, [pc, #340]	; (800fc24 <run_shortest+0xa84>)
 800face:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad6:	d105      	bne.n	800fae4 <run_shortest+0x944>
						pass_count++;
 800fad8:	4b51      	ldr	r3, [pc, #324]	; (800fc20 <run_shortest+0xa80>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	3301      	adds	r3, #1
 800fade:	b2da      	uxtb	r2, r3
 800fae0:	4b4f      	ldr	r3, [pc, #316]	; (800fc20 <run_shortest+0xa80>)
 800fae2:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fae4:	4b4e      	ldr	r3, [pc, #312]	; (800fc20 <run_shortest+0xa80>)
 800fae6:	781b      	ldrb	r3, [r3, #0]
 800fae8:	461a      	mov	r2, r3
 800faea:	4b4e      	ldr	r3, [pc, #312]	; (800fc24 <run_shortest+0xa84>)
 800faec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faf0:	f113 0f0c 	cmn.w	r3, #12
 800faf4:	f000 808d 	beq.w	800fc12 <run_shortest+0xa72>
 800faf8:	4b49      	ldr	r3, [pc, #292]	; (800fc20 <run_shortest+0xa80>)
 800fafa:	781b      	ldrb	r3, [r3, #0]
 800fafc:	461a      	mov	r2, r3
 800fafe:	4b49      	ldr	r3, [pc, #292]	; (800fc24 <run_shortest+0xa84>)
 800fb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb04:	f113 0f0d 	cmn.w	r3, #13
 800fb08:	f000 8083 	beq.w	800fc12 <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fb0c:	4b44      	ldr	r3, [pc, #272]	; (800fc20 <run_shortest+0xa80>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	461a      	mov	r2, r3
 800fb12:	4b44      	ldr	r3, [pc, #272]	; (800fc24 <run_shortest+0xa84>)
 800fb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb18:	f113 0f0e 	cmn.w	r3, #14
 800fb1c:	d079      	beq.n	800fc12 <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800fb1e:	4b40      	ldr	r3, [pc, #256]	; (800fc20 <run_shortest+0xa80>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	461a      	mov	r2, r3
 800fb24:	4b3f      	ldr	r3, [pc, #252]	; (800fc24 <run_shortest+0xa84>)
 800fb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb2a:	f113 0f0f 	cmn.w	r3, #15
 800fb2e:	d070      	beq.n	800fc12 <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fb30:	4b3b      	ldr	r3, [pc, #236]	; (800fc20 <run_shortest+0xa80>)
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	4b3b      	ldr	r3, [pc, #236]	; (800fc24 <run_shortest+0xa84>)
 800fb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d127      	bne.n	800fb92 <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800fb42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb46:	4a37      	ldr	r2, [pc, #220]	; (800fc24 <run_shortest+0xa84>)
 800fb48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb4c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb50:	3a01      	subs	r2, #1
 800fb52:	4934      	ldr	r1, [pc, #208]	; (800fc24 <run_shortest+0xa84>)
 800fb54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fb58:	4b31      	ldr	r3, [pc, #196]	; (800fc20 <run_shortest+0xa80>)
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800fb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb62:	f113 0f02 	cmn.w	r3, #2
 800fb66:	d107      	bne.n	800fb78 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800fb68:	4b2d      	ldr	r3, [pc, #180]	; (800fc20 <run_shortest+0xa80>)
 800fb6a:	781b      	ldrb	r3, [r3, #0]
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4b2d      	ldr	r3, [pc, #180]	; (800fc24 <run_shortest+0xa84>)
 800fb70:	f06f 020f 	mvn.w	r2, #15
 800fb74:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800fb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7a:	f113 0f03 	cmn.w	r3, #3
 800fb7e:	d138      	bne.n	800fbf2 <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fb80:	4b27      	ldr	r3, [pc, #156]	; (800fc20 <run_shortest+0xa80>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	4619      	mov	r1, r3
 800fb86:	4b27      	ldr	r3, [pc, #156]	; (800fc24 <run_shortest+0xa84>)
 800fb88:	f06f 0210 	mvn.w	r2, #16
 800fb8c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb90:	e02f      	b.n	800fbf2 <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fb92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb96:	4a23      	ldr	r2, [pc, #140]	; (800fc24 <run_shortest+0xa84>)
 800fb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb9c:	2b31      	cmp	r3, #49	; 0x31
 800fb9e:	dd08      	ble.n	800fbb2 <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fba0:	4b1f      	ldr	r3, [pc, #124]	; (800fc20 <run_shortest+0xa80>)
 800fba2:	781b      	ldrb	r3, [r3, #0]
 800fba4:	4619      	mov	r1, r3
 800fba6:	4b1f      	ldr	r3, [pc, #124]	; (800fc24 <run_shortest+0xa84>)
 800fba8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbac:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fbb0:	e009      	b.n	800fbc6 <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fbb2:	4b1b      	ldr	r3, [pc, #108]	; (800fc20 <run_shortest+0xa80>)
 800fbb4:	781b      	ldrb	r3, [r3, #0]
 800fbb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fbba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbbe:	4a19      	ldr	r2, [pc, #100]	; (800fc24 <run_shortest+0xa84>)
 800fbc0:	2132      	movs	r1, #50	; 0x32
 800fbc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fbc6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbca:	4a16      	ldr	r2, [pc, #88]	; (800fc24 <run_shortest+0xa84>)
 800fbcc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fbd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbd4:	3201      	adds	r2, #1
 800fbd6:	4913      	ldr	r1, [pc, #76]	; (800fc24 <run_shortest+0xa84>)
 800fbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	f113 0f02 	cmn.w	r3, #2
 800fbe2:	d103      	bne.n	800fbec <run_shortest+0xa4c>
							slant_direction = -3;
 800fbe4:	f06f 0302 	mvn.w	r3, #2
 800fbe8:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbea:	e002      	b.n	800fbf2 <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fbec:	f06f 0301 	mvn.w	r3, #1
 800fbf0:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fbf2:	4b0b      	ldr	r3, [pc, #44]	; (800fc20 <run_shortest+0xa80>)
 800fbf4:	781b      	ldrb	r3, [r3, #0]
 800fbf6:	3301      	adds	r3, #1
 800fbf8:	b2da      	uxtb	r2, r3
 800fbfa:	4b09      	ldr	r3, [pc, #36]	; (800fc20 <run_shortest+0xa80>)
 800fbfc:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fbfe:	4b08      	ldr	r3, [pc, #32]	; (800fc20 <run_shortest+0xa80>)
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	4b07      	ldr	r3, [pc, #28]	; (800fc24 <run_shortest+0xa84>)
 800fc06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc0a:	f113 0f03 	cmn.w	r3, #3
 800fc0e:	f6bf af5a 	bge.w	800fac6 <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fc12:	4b03      	ldr	r3, [pc, #12]	; (800fc20 <run_shortest+0xa80>)
 800fc14:	781b      	ldrb	r3, [r3, #0]
 800fc16:	3301      	adds	r3, #1
 800fc18:	b2da      	uxtb	r2, r3
 800fc1a:	4b01      	ldr	r3, [pc, #4]	; (800fc20 <run_shortest+0xa80>)
 800fc1c:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fc1e:	e6bb      	b.n	800f998 <run_shortest+0x7f8>
 800fc20:	20000828 	.word	0x20000828
 800fc24:	2000083c 	.word	0x2000083c
				break;
 800fc28:	bf00      	nop
		}
		pass_count=0;
 800fc2a:	4bb3      	ldr	r3, [pc, #716]	; (800fef8 <run_shortest+0xd58>)
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fc30:	4bb1      	ldr	r3, [pc, #708]	; (800fef8 <run_shortest+0xd58>)
 800fc32:	781b      	ldrb	r3, [r3, #0]
 800fc34:	461a      	mov	r2, r3
 800fc36:	4bb1      	ldr	r3, [pc, #708]	; (800fefc <run_shortest+0xd5c>)
 800fc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc3c:	2b32      	cmp	r3, #50	; 0x32
 800fc3e:	d107      	bne.n	800fc50 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fc40:	4bad      	ldr	r3, [pc, #692]	; (800fef8 <run_shortest+0xd58>)
 800fc42:	781b      	ldrb	r3, [r3, #0]
 800fc44:	4619      	mov	r1, r3
 800fc46:	4bad      	ldr	r3, [pc, #692]	; (800fefc <run_shortest+0xd5c>)
 800fc48:	f04f 32ff 	mov.w	r2, #4294967295
 800fc4c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fc50:	4ba9      	ldr	r3, [pc, #676]	; (800fef8 <run_shortest+0xd58>)
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	461a      	mov	r2, r3
 800fc56:	4ba9      	ldr	r3, [pc, #676]	; (800fefc <run_shortest+0xd5c>)
 800fc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d006      	beq.n	800fc6e <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fc60:	4ba5      	ldr	r3, [pc, #660]	; (800fef8 <run_shortest+0xd58>)
 800fc62:	781b      	ldrb	r3, [r3, #0]
 800fc64:	3301      	adds	r3, #1
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	4ba3      	ldr	r3, [pc, #652]	; (800fef8 <run_shortest+0xd58>)
 800fc6a:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fc6c:	e7e0      	b.n	800fc30 <run_shortest+0xa90>
				break;
 800fc6e:	bf00      	nop
		}

	}
}
	int j = 0;
 800fc70:	2300      	movs	r3, #0
 800fc72:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc74:	e00b      	b.n	800fc8e <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fc76:	4aa1      	ldr	r2, [pc, #644]	; (800fefc <run_shortest+0xd5c>)
 800fc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc82:	489f      	ldr	r0, [pc, #636]	; (800ff00 <run_shortest+0xd60>)
 800fc84:	f010 ffe4 	bl	8020c50 <iprintf>
		j++;
 800fc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc8e:	4a9b      	ldr	r2, [pc, #620]	; (800fefc <run_shortest+0xd5c>)
 800fc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d1ed      	bne.n	800fc76 <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc9e:	e002      	b.n	800fca6 <run_shortest+0xb06>
		pass_count2++;
 800fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fca2:	3301      	adds	r3, #1
 800fca4:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fca6:	4a95      	ldr	r2, [pc, #596]	; (800fefc <run_shortest+0xd5c>)
 800fca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcb2:	d0f5      	beq.n	800fca0 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fcb4:	4a91      	ldr	r2, [pc, #580]	; (800fefc <run_shortest+0xd5c>)
 800fcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcbc:	934e      	str	r3, [sp, #312]	; 0x138
 800fcbe:	4668      	mov	r0, sp
 800fcc0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fcc4:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fcc8:	4619      	mov	r1, r3
 800fcca:	f010 fb41 	bl	8020350 <memcpy>
 800fcce:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fcd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcd4:	f007 ff86 	bl	8017be4 <get_center_velocity>
 800fcd8:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fcdc:	6a38      	ldr	r0, [r7, #32]
 800fcde:	f7f0 fc5b 	bl	8000598 <__aeabi_f2d>
 800fce2:	4602      	mov	r2, r0
 800fce4:	460b      	mov	r3, r1
 800fce6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fce8:	4886      	ldr	r0, [pc, #536]	; (800ff04 <run_shortest+0xd64>)
 800fcea:	f010 ffb1 	bl	8020c50 <iprintf>

	HAL_Delay(500);
 800fcee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fcf2:	f009 f85b 	bl	8018dac <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fcf6:	2001      	movs	r0, #1
 800fcf8:	f7f7 fdee 	bl	80078d8 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fcfc:	2003      	movs	r0, #3
 800fcfe:	f7f7 fe1d 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fd02:	2003      	movs	r0, #3
 800fd04:	f7f7 fdf2 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fd08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fd0c:	f7f8 f914 	bl	8007f38 <wait_ms_NoReset>
	no_safty = 1;
 800fd10:	4b7d      	ldr	r3, [pc, #500]	; (800ff08 <run_shortest+0xd68>)
 800fd12:	2201      	movs	r2, #1
 800fd14:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fd16:	4b7c      	ldr	r3, [pc, #496]	; (800ff08 <run_shortest+0xd68>)
 800fd18:	2200      	movs	r2, #0
 800fd1a:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fd1c:	f7f4 fc48 	bl	80045b0 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fd20:	7abb      	ldrb	r3, [r7, #10]
 800fd22:	2b01      	cmp	r3, #1
 800fd24:	d12d      	bne.n	800fd82 <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f7f0 fc36 	bl	8000598 <__aeabi_f2d>
 800fd2c:	a370      	add	r3, pc, #448	; (adr r3, 800fef0 <run_shortest+0xd50>)
 800fd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd32:	f7f0 fc89 	bl	8000648 <__aeabi_dmul>
 800fd36:	4602      	mov	r2, r0
 800fd38:	460b      	mov	r3, r1
 800fd3a:	4614      	mov	r4, r2
 800fd3c:	461d      	mov	r5, r3
 800fd3e:	4b73      	ldr	r3, [pc, #460]	; (800ff0c <run_shortest+0xd6c>)
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7f0 fc28 	bl	8000598 <__aeabi_f2d>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	4629      	mov	r1, r5
 800fd50:	f7f0 fda4 	bl	800089c <__aeabi_ddiv>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	4610      	mov	r0, r2
 800fd5a:	4619      	mov	r1, r3
 800fd5c:	f7f0 ff4c 	bl	8000bf8 <__aeabi_d2f>
 800fd60:	4603      	mov	r3, r0
 800fd62:	ee00 3a10 	vmov	s0, r3
 800fd66:	f7f7 fe55 	bl	8007a14 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fd6a:	f7f7 fe3f 	bl	80079ec <pl_FunMotor_start>
		HAL_Delay(600);
 800fd6e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fd72:	f009 f81b 	bl	8018dac <HAL_Delay>
		reset_gyro();
 800fd76:	f7f1 fcf7 	bl	8001768 <reset_gyro>
		reset_speed();
 800fd7a:	f7f1 f94d 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fd7e:	f7f4 fc17 	bl	80045b0 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fd82:	4b63      	ldr	r3, [pc, #396]	; (800ff10 <run_shortest+0xd70>)
 800fd84:	2201      	movs	r2, #1
 800fd86:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fd88:	4b62      	ldr	r3, [pc, #392]	; (800ff14 <run_shortest+0xd74>)
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fd8e:	4b62      	ldr	r3, [pc, #392]	; (800ff18 <run_shortest+0xd78>)
 800fd90:	2212      	movs	r2, #18
 800fd92:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fd94:	4b61      	ldr	r3, [pc, #388]	; (800ff1c <run_shortest+0xd7c>)
 800fd96:	2200      	movs	r2, #0
 800fd98:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fd9a:	4b57      	ldr	r3, [pc, #348]	; (800fef8 <run_shortest+0xd58>)
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fda0:	2301      	movs	r3, #1
 800fda2:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fda4:	2300      	movs	r3, #0
 800fda6:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fdac:	2300      	movs	r3, #0
 800fdae:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fdb4:	e002      	b.n	800fdbc <run_shortest+0xc1c>
		pass_count2++;
 800fdb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdb8:	3301      	adds	r3, #1
 800fdba:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fdbc:	4a4f      	ldr	r2, [pc, #316]	; (800fefc <run_shortest+0xd5c>)
 800fdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdc8:	d0f5      	beq.n	800fdb6 <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fdca:	4a4c      	ldr	r2, [pc, #304]	; (800fefc <run_shortest+0xd5c>)
 800fdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdd2:	934e      	str	r3, [sp, #312]	; 0x138
 800fdd4:	4668      	mov	r0, sp
 800fdd6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fdda:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fdde:	4619      	mov	r1, r3
 800fde0:	f010 fab6 	bl	8020350 <memcpy>
 800fde4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fde8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdea:	f007 fefb 	bl	8017be4 <get_center_velocity>
 800fdee:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fdf2:	edd7 7a08 	vldr	s15, [r7, #32]
 800fdf6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fdfa:	ee17 0a90 	vmov	r0, s15
 800fdfe:	f7f0 fbcb 	bl	8000598 <__aeabi_f2d>
 800fe02:	f04f 0200 	mov.w	r2, #0
 800fe06:	4b46      	ldr	r3, [pc, #280]	; (800ff20 <run_shortest+0xd80>)
 800fe08:	f7f0 fd48 	bl	800089c <__aeabi_ddiv>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	460b      	mov	r3, r1
 800fe10:	4610      	mov	r0, r2
 800fe12:	4619      	mov	r1, r3
 800fe14:	f04f 0200 	mov.w	r2, #0
 800fe18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe1c:	f7f0 fd3e 	bl	800089c <__aeabi_ddiv>
 800fe20:	4602      	mov	r2, r0
 800fe22:	460b      	mov	r3, r1
 800fe24:	4610      	mov	r0, r2
 800fe26:	4619      	mov	r1, r3
 800fe28:	f7f0 fee6 	bl	8000bf8 <__aeabi_d2f>
 800fe2c:	4603      	mov	r3, r0
 800fe2e:	69b8      	ldr	r0, [r7, #24]
 800fe30:	ee02 3a10 	vmov	s4, r3
 800fe34:	edd7 1a08 	vldr	s3, [r7, #32]
 800fe38:	ed97 1a08 	vldr	s2, [r7, #32]
 800fe3c:	eddf 0a39 	vldr	s1, [pc, #228]	; 800ff24 <run_shortest+0xd84>
 800fe40:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fe44:	f7f3 f8ca 	bl	8002fdc <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fe48:	4b2b      	ldr	r3, [pc, #172]	; (800fef8 <run_shortest+0xd58>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fe50:	e002      	b.n	800fe58 <run_shortest+0xcb8>
			pass_count2++;
 800fe52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe54:	3301      	adds	r3, #1
 800fe56:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fe58:	4a28      	ldr	r2, [pc, #160]	; (800fefc <run_shortest+0xd5c>)
 800fe5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe64:	d0f5      	beq.n	800fe52 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fe66:	4a25      	ldr	r2, [pc, #148]	; (800fefc <run_shortest+0xd5c>)
 800fe68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe6e:	934e      	str	r3, [sp, #312]	; 0x138
 800fe70:	4668      	mov	r0, sp
 800fe72:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe76:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fe7a:	4619      	mov	r1, r3
 800fe7c:	f010 fa68 	bl	8020350 <memcpy>
 800fe80:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe86:	f007 fead 	bl	8017be4 <get_center_velocity>
 800fe8a:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fe8e:	4b1a      	ldr	r3, [pc, #104]	; (800fef8 <run_shortest+0xd58>)
 800fe90:	781b      	ldrb	r3, [r3, #0]
 800fe92:	461a      	mov	r2, r3
 800fe94:	4b19      	ldr	r3, [pc, #100]	; (800fefc <run_shortest+0xd5c>)
 800fe96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe9e:	d106      	bne.n	800feae <run_shortest+0xd0e>
			pass_count++;
 800fea0:	4b15      	ldr	r3, [pc, #84]	; (800fef8 <run_shortest+0xd58>)
 800fea2:	781b      	ldrb	r3, [r3, #0]
 800fea4:	3301      	adds	r3, #1
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	4b13      	ldr	r3, [pc, #76]	; (800fef8 <run_shortest+0xd58>)
 800feaa:	701a      	strb	r2, [r3, #0]
 800feac:	e2a1      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800feae:	4b12      	ldr	r3, [pc, #72]	; (800fef8 <run_shortest+0xd58>)
 800feb0:	781b      	ldrb	r3, [r3, #0]
 800feb2:	461a      	mov	r2, r3
 800feb4:	4b11      	ldr	r3, [pc, #68]	; (800fefc <run_shortest+0xd5c>)
 800feb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feba:	f113 0f02 	cmn.w	r3, #2
 800febe:	d133      	bne.n	800ff28 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fec0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fec4:	9303      	str	r3, [sp, #12]
 800fec6:	2301      	movs	r3, #1
 800fec8:	9302      	str	r3, [sp, #8]
 800feca:	2300      	movs	r3, #0
 800fecc:	9301      	str	r3, [sp, #4]
 800fece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fed0:	9300      	str	r3, [sp, #0]
 800fed2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fed6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fed8:	ed97 0a08 	vldr	s0, [r7, #32]
 800fedc:	f7fa f850 	bl	8009f80 <slalomR>

			pass_count++;
 800fee0:	4b05      	ldr	r3, [pc, #20]	; (800fef8 <run_shortest+0xd58>)
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	3301      	adds	r3, #1
 800fee6:	b2da      	uxtb	r2, r3
 800fee8:	4b03      	ldr	r3, [pc, #12]	; (800fef8 <run_shortest+0xd58>)
 800feea:	701a      	strb	r2, [r3, #0]
 800feec:	e281      	b.n	80103f2 <run_shortest+0x1252>
 800feee:	bf00      	nop
 800fef0:	cccccccd 	.word	0xcccccccd
 800fef4:	4010cccc 	.word	0x4010cccc
 800fef8:	20000828 	.word	0x20000828
 800fefc:	2000083c 	.word	0x2000083c
 800ff00:	0802356c 	.word	0x0802356c
 800ff04:	08023584 	.word	0x08023584
 800ff08:	20000806 	.word	0x20000806
 800ff0c:	200004d4 	.word	0x200004d4
 800ff10:	20000834 	.word	0x20000834
 800ff14:	20000808 	.word	0x20000808
 800ff18:	2000edc0 	.word	0x2000edc0
 800ff1c:	20000830 	.word	0x20000830
 800ff20:	40290000 	.word	0x40290000
 800ff24:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800ff28:	4baa      	ldr	r3, [pc, #680]	; (80101d4 <run_shortest+0x1034>)
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	461a      	mov	r2, r3
 800ff2e:	4baa      	ldr	r3, [pc, #680]	; (80101d8 <run_shortest+0x1038>)
 800ff30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff34:	f113 0f03 	cmn.w	r3, #3
 800ff38:	d116      	bne.n	800ff68 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800ff3a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff3e:	9303      	str	r3, [sp, #12]
 800ff40:	2301      	movs	r3, #1
 800ff42:	9302      	str	r3, [sp, #8]
 800ff44:	2300      	movs	r3, #0
 800ff46:	9301      	str	r3, [sp, #4]
 800ff48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ff4a:	9300      	str	r3, [sp, #0]
 800ff4c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ff50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff52:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff56:	f7fa f9f9 	bl	800a34c <slalomL>

			pass_count++;
 800ff5a:	4b9e      	ldr	r3, [pc, #632]	; (80101d4 <run_shortest+0x1034>)
 800ff5c:	781b      	ldrb	r3, [r3, #0]
 800ff5e:	3301      	adds	r3, #1
 800ff60:	b2da      	uxtb	r2, r3
 800ff62:	4b9c      	ldr	r3, [pc, #624]	; (80101d4 <run_shortest+0x1034>)
 800ff64:	701a      	strb	r2, [r3, #0]
 800ff66:	e244      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800ff68:	4b9a      	ldr	r3, [pc, #616]	; (80101d4 <run_shortest+0x1034>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	4b9a      	ldr	r3, [pc, #616]	; (80101d8 <run_shortest+0x1038>)
 800ff70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff74:	f113 0f04 	cmn.w	r3, #4
 800ff78:	d115      	bne.n	800ffa6 <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800ff7a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff7e:	9302      	str	r3, [sp, #8]
 800ff80:	2300      	movs	r3, #0
 800ff82:	9301      	str	r3, [sp, #4]
 800ff84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff88:	9300      	str	r3, [sp, #0]
 800ff8a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ff8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff90:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff94:	f7fa fbbc 	bl	800a710 <turn90R>
			pass_count++;
 800ff98:	4b8e      	ldr	r3, [pc, #568]	; (80101d4 <run_shortest+0x1034>)
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	3301      	adds	r3, #1
 800ff9e:	b2da      	uxtb	r2, r3
 800ffa0:	4b8c      	ldr	r3, [pc, #560]	; (80101d4 <run_shortest+0x1034>)
 800ffa2:	701a      	strb	r2, [r3, #0]
 800ffa4:	e225      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800ffa6:	4b8b      	ldr	r3, [pc, #556]	; (80101d4 <run_shortest+0x1034>)
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	461a      	mov	r2, r3
 800ffac:	4b8a      	ldr	r3, [pc, #552]	; (80101d8 <run_shortest+0x1038>)
 800ffae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffb2:	f113 0f05 	cmn.w	r3, #5
 800ffb6:	d115      	bne.n	800ffe4 <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800ffb8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffbc:	9302      	str	r3, [sp, #8]
 800ffbe:	2300      	movs	r3, #0
 800ffc0:	9301      	str	r3, [sp, #4]
 800ffc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ffc6:	9300      	str	r3, [sp, #0]
 800ffc8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ffcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffce:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffd2:	f7fa fd07 	bl	800a9e4 <turn90L>
			pass_count++;
 800ffd6:	4b7f      	ldr	r3, [pc, #508]	; (80101d4 <run_shortest+0x1034>)
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	3301      	adds	r3, #1
 800ffdc:	b2da      	uxtb	r2, r3
 800ffde:	4b7d      	ldr	r3, [pc, #500]	; (80101d4 <run_shortest+0x1034>)
 800ffe0:	701a      	strb	r2, [r3, #0]
 800ffe2:	e206      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800ffe4:	4b7b      	ldr	r3, [pc, #492]	; (80101d4 <run_shortest+0x1034>)
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	461a      	mov	r2, r3
 800ffea:	4b7b      	ldr	r3, [pc, #492]	; (80101d8 <run_shortest+0x1038>)
 800ffec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff0:	f113 0f06 	cmn.w	r3, #6
 800fff4:	d115      	bne.n	8010022 <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800fff6:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fffa:	9302      	str	r3, [sp, #8]
 800fffc:	2300      	movs	r3, #0
 800fffe:	9301      	str	r3, [sp, #4]
 8010000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010004:	9300      	str	r3, [sp, #0]
 8010006:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801000a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801000c:	ed97 0a08 	vldr	s0, [r7, #32]
 8010010:	f7fa fe4c 	bl	800acac <turn180R>
			pass_count++;
 8010014:	4b6f      	ldr	r3, [pc, #444]	; (80101d4 <run_shortest+0x1034>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	3301      	adds	r3, #1
 801001a:	b2da      	uxtb	r2, r3
 801001c:	4b6d      	ldr	r3, [pc, #436]	; (80101d4 <run_shortest+0x1034>)
 801001e:	701a      	strb	r2, [r3, #0]
 8010020:	e1e7      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 8010022:	4b6c      	ldr	r3, [pc, #432]	; (80101d4 <run_shortest+0x1034>)
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	461a      	mov	r2, r3
 8010028:	4b6b      	ldr	r3, [pc, #428]	; (80101d8 <run_shortest+0x1038>)
 801002a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801002e:	f113 0f07 	cmn.w	r3, #7
 8010032:	d115      	bne.n	8010060 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 8010034:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010038:	9302      	str	r3, [sp, #8]
 801003a:	2300      	movs	r3, #0
 801003c:	9301      	str	r3, [sp, #4]
 801003e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010042:	9300      	str	r3, [sp, #0]
 8010044:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8010048:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801004a:	ed97 0a08 	vldr	s0, [r7, #32]
 801004e:	f7fa ff97 	bl	800af80 <turn180L>
			pass_count++;
 8010052:	4b60      	ldr	r3, [pc, #384]	; (80101d4 <run_shortest+0x1034>)
 8010054:	781b      	ldrb	r3, [r3, #0]
 8010056:	3301      	adds	r3, #1
 8010058:	b2da      	uxtb	r2, r3
 801005a:	4b5e      	ldr	r3, [pc, #376]	; (80101d4 <run_shortest+0x1034>)
 801005c:	701a      	strb	r2, [r3, #0]
 801005e:	e1c8      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 8010060:	4b5c      	ldr	r3, [pc, #368]	; (80101d4 <run_shortest+0x1034>)
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	461a      	mov	r2, r3
 8010066:	4b5c      	ldr	r3, [pc, #368]	; (80101d8 <run_shortest+0x1038>)
 8010068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801006c:	f113 0f08 	cmn.w	r3, #8
 8010070:	d115      	bne.n	801009e <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 8010072:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010076:	9302      	str	r3, [sp, #8]
 8010078:	2300      	movs	r3, #0
 801007a:	9301      	str	r3, [sp, #4]
 801007c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010080:	9300      	str	r3, [sp, #0]
 8010082:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010086:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010088:	ed97 0a08 	vldr	s0, [r7, #32]
 801008c:	f7fb f8e0 	bl	800b250 <turn45inR>
			pass_count++;
 8010090:	4b50      	ldr	r3, [pc, #320]	; (80101d4 <run_shortest+0x1034>)
 8010092:	781b      	ldrb	r3, [r3, #0]
 8010094:	3301      	adds	r3, #1
 8010096:	b2da      	uxtb	r2, r3
 8010098:	4b4e      	ldr	r3, [pc, #312]	; (80101d4 <run_shortest+0x1034>)
 801009a:	701a      	strb	r2, [r3, #0]
 801009c:	e1a9      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 801009e:	4b4d      	ldr	r3, [pc, #308]	; (80101d4 <run_shortest+0x1034>)
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	461a      	mov	r2, r3
 80100a4:	4b4c      	ldr	r3, [pc, #304]	; (80101d8 <run_shortest+0x1038>)
 80100a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100aa:	f113 0f09 	cmn.w	r3, #9
 80100ae:	d115      	bne.n	80100dc <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 80100b0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100b4:	9302      	str	r3, [sp, #8]
 80100b6:	2300      	movs	r3, #0
 80100b8:	9301      	str	r3, [sp, #4]
 80100ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80100be:	9300      	str	r3, [sp, #0]
 80100c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80100c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100c6:	ed97 0a08 	vldr	s0, [r7, #32]
 80100ca:	f7fb fb09 	bl	800b6e0 <turn45inL>
			pass_count++;
 80100ce:	4b41      	ldr	r3, [pc, #260]	; (80101d4 <run_shortest+0x1034>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	3301      	adds	r3, #1
 80100d4:	b2da      	uxtb	r2, r3
 80100d6:	4b3f      	ldr	r3, [pc, #252]	; (80101d4 <run_shortest+0x1034>)
 80100d8:	701a      	strb	r2, [r3, #0]
 80100da:	e18a      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 80100dc:	4b3d      	ldr	r3, [pc, #244]	; (80101d4 <run_shortest+0x1034>)
 80100de:	781b      	ldrb	r3, [r3, #0]
 80100e0:	461a      	mov	r2, r3
 80100e2:	4b3d      	ldr	r3, [pc, #244]	; (80101d8 <run_shortest+0x1038>)
 80100e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100e8:	f113 0f0a 	cmn.w	r3, #10
 80100ec:	d115      	bne.n	801011a <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 80100ee:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100f2:	9302      	str	r3, [sp, #8]
 80100f4:	2300      	movs	r3, #0
 80100f6:	9301      	str	r3, [sp, #4]
 80100f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80100fc:	9300      	str	r3, [sp, #0]
 80100fe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8010102:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010104:	ed97 0a08 	vldr	s0, [r7, #32]
 8010108:	f7fb fd2a 	bl	800bb60 <turn135inR>
			pass_count++;
 801010c:	4b31      	ldr	r3, [pc, #196]	; (80101d4 <run_shortest+0x1034>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	3301      	adds	r3, #1
 8010112:	b2da      	uxtb	r2, r3
 8010114:	4b2f      	ldr	r3, [pc, #188]	; (80101d4 <run_shortest+0x1034>)
 8010116:	701a      	strb	r2, [r3, #0]
 8010118:	e16b      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 801011a:	4b2e      	ldr	r3, [pc, #184]	; (80101d4 <run_shortest+0x1034>)
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	4b2d      	ldr	r3, [pc, #180]	; (80101d8 <run_shortest+0x1038>)
 8010122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010126:	f113 0f0b 	cmn.w	r3, #11
 801012a:	d115      	bne.n	8010158 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 801012c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010130:	9302      	str	r3, [sp, #8]
 8010132:	2300      	movs	r3, #0
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801013a:	9300      	str	r3, [sp, #0]
 801013c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010140:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010142:	ed97 0a08 	vldr	s0, [r7, #32]
 8010146:	f7fb ff53 	bl	800bff0 <turn135inL>
			pass_count++;
 801014a:	4b22      	ldr	r3, [pc, #136]	; (80101d4 <run_shortest+0x1034>)
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	3301      	adds	r3, #1
 8010150:	b2da      	uxtb	r2, r3
 8010152:	4b20      	ldr	r3, [pc, #128]	; (80101d4 <run_shortest+0x1034>)
 8010154:	701a      	strb	r2, [r3, #0]
 8010156:	e14c      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8010158:	4b1e      	ldr	r3, [pc, #120]	; (80101d4 <run_shortest+0x1034>)
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	461a      	mov	r2, r3
 801015e:	4b1e      	ldr	r3, [pc, #120]	; (80101d8 <run_shortest+0x1038>)
 8010160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010164:	f113 0f0c 	cmn.w	r3, #12
 8010168:	d115      	bne.n	8010196 <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 801016a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801016e:	9302      	str	r3, [sp, #8]
 8010170:	2300      	movs	r3, #0
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010178:	9300      	str	r3, [sp, #0]
 801017a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801017e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010180:	ed97 0a08 	vldr	s0, [r7, #32]
 8010184:	f7fc f978 	bl	800c478 <turn45outR>
			pass_count++;
 8010188:	4b12      	ldr	r3, [pc, #72]	; (80101d4 <run_shortest+0x1034>)
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	3301      	adds	r3, #1
 801018e:	b2da      	uxtb	r2, r3
 8010190:	4b10      	ldr	r3, [pc, #64]	; (80101d4 <run_shortest+0x1034>)
 8010192:	701a      	strb	r2, [r3, #0]
 8010194:	e12d      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010196:	4b0f      	ldr	r3, [pc, #60]	; (80101d4 <run_shortest+0x1034>)
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	461a      	mov	r2, r3
 801019c:	4b0e      	ldr	r3, [pc, #56]	; (80101d8 <run_shortest+0x1038>)
 801019e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a2:	f113 0f0d 	cmn.w	r3, #13
 80101a6:	d119      	bne.n	80101dc <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 80101a8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101ac:	9302      	str	r3, [sp, #8]
 80101ae:	2300      	movs	r3, #0
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80101b6:	9300      	str	r3, [sp, #0]
 80101b8:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80101bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101be:	ed97 0a08 	vldr	s0, [r7, #32]
 80101c2:	f7fc fb4b 	bl	800c85c <turn45outL>
			pass_count++;
 80101c6:	4b03      	ldr	r3, [pc, #12]	; (80101d4 <run_shortest+0x1034>)
 80101c8:	781b      	ldrb	r3, [r3, #0]
 80101ca:	3301      	adds	r3, #1
 80101cc:	b2da      	uxtb	r2, r3
 80101ce:	4b01      	ldr	r3, [pc, #4]	; (80101d4 <run_shortest+0x1034>)
 80101d0:	701a      	strb	r2, [r3, #0]
 80101d2:	e10e      	b.n	80103f2 <run_shortest+0x1252>
 80101d4:	20000828 	.word	0x20000828
 80101d8:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 80101dc:	4ba0      	ldr	r3, [pc, #640]	; (8010460 <run_shortest+0x12c0>)
 80101de:	781b      	ldrb	r3, [r3, #0]
 80101e0:	461a      	mov	r2, r3
 80101e2:	4ba0      	ldr	r3, [pc, #640]	; (8010464 <run_shortest+0x12c4>)
 80101e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e8:	f113 0f0e 	cmn.w	r3, #14
 80101ec:	d115      	bne.n	801021a <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 80101ee:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101f2:	9302      	str	r3, [sp, #8]
 80101f4:	2300      	movs	r3, #0
 80101f6:	9301      	str	r3, [sp, #4]
 80101f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80101fc:	9300      	str	r3, [sp, #0]
 80101fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8010202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010204:	ed97 0a08 	vldr	s0, [r7, #32]
 8010208:	f7fc fd10 	bl	800cc2c <turn135outR>
			pass_count++;
 801020c:	4b94      	ldr	r3, [pc, #592]	; (8010460 <run_shortest+0x12c0>)
 801020e:	781b      	ldrb	r3, [r3, #0]
 8010210:	3301      	adds	r3, #1
 8010212:	b2da      	uxtb	r2, r3
 8010214:	4b92      	ldr	r3, [pc, #584]	; (8010460 <run_shortest+0x12c0>)
 8010216:	701a      	strb	r2, [r3, #0]
 8010218:	e0eb      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 801021a:	4b91      	ldr	r3, [pc, #580]	; (8010460 <run_shortest+0x12c0>)
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	461a      	mov	r2, r3
 8010220:	4b90      	ldr	r3, [pc, #576]	; (8010464 <run_shortest+0x12c4>)
 8010222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010226:	f113 0f0f 	cmn.w	r3, #15
 801022a:	d115      	bne.n	8010258 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 801022c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010230:	9302      	str	r3, [sp, #8]
 8010232:	2300      	movs	r3, #0
 8010234:	9301      	str	r3, [sp, #4]
 8010236:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801023a:	9300      	str	r3, [sp, #0]
 801023c:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8010240:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010242:	ed97 0a08 	vldr	s0, [r7, #32]
 8010246:	f7fc fee3 	bl	800d010 <turn135outL>
			pass_count++;
 801024a:	4b85      	ldr	r3, [pc, #532]	; (8010460 <run_shortest+0x12c0>)
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	3301      	adds	r3, #1
 8010250:	b2da      	uxtb	r2, r3
 8010252:	4b83      	ldr	r3, [pc, #524]	; (8010460 <run_shortest+0x12c0>)
 8010254:	701a      	strb	r2, [r3, #0]
 8010256:	e0cc      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 8010258:	4b81      	ldr	r3, [pc, #516]	; (8010460 <run_shortest+0x12c0>)
 801025a:	781b      	ldrb	r3, [r3, #0]
 801025c:	461a      	mov	r2, r3
 801025e:	4b81      	ldr	r3, [pc, #516]	; (8010464 <run_shortest+0x12c4>)
 8010260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010264:	f113 0f10 	cmn.w	r3, #16
 8010268:	d115      	bne.n	8010296 <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 801026a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801026e:	9302      	str	r3, [sp, #8]
 8010270:	2300      	movs	r3, #0
 8010272:	9301      	str	r3, [sp, #4]
 8010274:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010278:	9300      	str	r3, [sp, #0]
 801027a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 801027e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010280:	ed97 0a08 	vldr	s0, [r7, #32]
 8010284:	f7fd f8b0 	bl	800d3e8 <V90R>
			pass_count++;
 8010288:	4b75      	ldr	r3, [pc, #468]	; (8010460 <run_shortest+0x12c0>)
 801028a:	781b      	ldrb	r3, [r3, #0]
 801028c:	3301      	adds	r3, #1
 801028e:	b2da      	uxtb	r2, r3
 8010290:	4b73      	ldr	r3, [pc, #460]	; (8010460 <run_shortest+0x12c0>)
 8010292:	701a      	strb	r2, [r3, #0]
 8010294:	e0ad      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010296:	4b72      	ldr	r3, [pc, #456]	; (8010460 <run_shortest+0x12c0>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	461a      	mov	r2, r3
 801029c:	4b71      	ldr	r3, [pc, #452]	; (8010464 <run_shortest+0x12c4>)
 801029e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a2:	f113 0f11 	cmn.w	r3, #17
 80102a6:	d115      	bne.n	80102d4 <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 80102a8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80102ac:	9302      	str	r3, [sp, #8]
 80102ae:	2300      	movs	r3, #0
 80102b0:	9301      	str	r3, [sp, #4]
 80102b2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 80102bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80102be:	ed97 0a08 	vldr	s0, [r7, #32]
 80102c2:	f7fd fa9d 	bl	800d800 <V90L>
			pass_count++;
 80102c6:	4b66      	ldr	r3, [pc, #408]	; (8010460 <run_shortest+0x12c0>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	3301      	adds	r3, #1
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	4b64      	ldr	r3, [pc, #400]	; (8010460 <run_shortest+0x12c0>)
 80102d0:	701a      	strb	r2, [r3, #0]
 80102d2:	e08e      	b.n	80103f2 <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 80102d4:	4b62      	ldr	r3, [pc, #392]	; (8010460 <run_shortest+0x12c0>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	461a      	mov	r2, r3
 80102da:	4b62      	ldr	r3, [pc, #392]	; (8010464 <run_shortest+0x12c4>)
 80102dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	f340 8086 	ble.w	80103f2 <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 80102e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102e8:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 80102ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102ec:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 80102ee:	4b5c      	ldr	r3, [pc, #368]	; (8010460 <run_shortest+0x12c0>)
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d013      	beq.n	801031e <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 80102f6:	4b5a      	ldr	r3, [pc, #360]	; (8010460 <run_shortest+0x12c0>)
 80102f8:	781b      	ldrb	r3, [r3, #0]
 80102fa:	3b01      	subs	r3, #1
 80102fc:	4a59      	ldr	r2, [pc, #356]	; (8010464 <run_shortest+0x12c4>)
 80102fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010302:	f113 0f02 	cmn.w	r3, #2
 8010306:	d008      	beq.n	801031a <run_shortest+0x117a>
 8010308:	4b55      	ldr	r3, [pc, #340]	; (8010460 <run_shortest+0x12c0>)
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	3b01      	subs	r3, #1
 801030e:	4a55      	ldr	r2, [pc, #340]	; (8010464 <run_shortest+0x12c4>)
 8010310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010314:	f113 0f03 	cmn.w	r3, #3
 8010318:	d101      	bne.n	801031e <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 801031a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801031c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 801031e:	4b50      	ldr	r3, [pc, #320]	; (8010460 <run_shortest+0x12c0>)
 8010320:	781b      	ldrb	r3, [r3, #0]
 8010322:	3301      	adds	r3, #1
 8010324:	4a4f      	ldr	r2, [pc, #316]	; (8010464 <run_shortest+0x12c4>)
 8010326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801032a:	f113 0f02 	cmn.w	r3, #2
 801032e:	d008      	beq.n	8010342 <run_shortest+0x11a2>
 8010330:	4b4b      	ldr	r3, [pc, #300]	; (8010460 <run_shortest+0x12c0>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	3301      	adds	r3, #1
 8010336:	4a4b      	ldr	r2, [pc, #300]	; (8010464 <run_shortest+0x12c4>)
 8010338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801033c:	f113 0f03 	cmn.w	r3, #3
 8010340:	d101      	bne.n	8010346 <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 8010342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010344:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 8010346:	4b46      	ldr	r3, [pc, #280]	; (8010460 <run_shortest+0x12c0>)
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	4b45      	ldr	r3, [pc, #276]	; (8010464 <run_shortest+0x12c4>)
 801034e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010352:	2b31      	cmp	r3, #49	; 0x31
 8010354:	dd27      	ble.n	80103a6 <run_shortest+0x1206>
				mode.WallControlMode=3;
 8010356:	2303      	movs	r3, #3
 8010358:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 801035a:	2300      	movs	r3, #0
 801035c:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 801035e:	4b40      	ldr	r3, [pc, #256]	; (8010460 <run_shortest+0x12c0>)
 8010360:	781b      	ldrb	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	4b3f      	ldr	r3, [pc, #252]	; (8010464 <run_shortest+0x12c4>)
 8010366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801036a:	3b32      	subs	r3, #50	; 0x32
 801036c:	4618      	mov	r0, r3
 801036e:	f7f0 f901 	bl	8000574 <__aeabi_i2d>
 8010372:	a339      	add	r3, pc, #228	; (adr r3, 8010458 <run_shortest+0x12b8>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	f7f0 f966 	bl	8000648 <__aeabi_dmul>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	4610      	mov	r0, r2
 8010382:	4619      	mov	r1, r3
 8010384:	f7f0 fc38 	bl	8000bf8 <__aeabi_d2f>
 8010388:	4603      	mov	r3, r0
 801038a:	69b8      	ldr	r0, [r7, #24]
 801038c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010390:	edd7 1a05 	vldr	s3, [r7, #20]
 8010394:	ed97 1a08 	vldr	s2, [r7, #32]
 8010398:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801039c:	ee00 3a10 	vmov	s0, r3
 80103a0:	f7f2 fe1c 	bl	8002fdc <straight_table2>
 80103a4:	e01f      	b.n	80103e6 <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 80103a6:	2301      	movs	r3, #1
 80103a8:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80103aa:	2300      	movs	r3, #0
 80103ac:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 80103ae:	4b2c      	ldr	r3, [pc, #176]	; (8010460 <run_shortest+0x12c0>)
 80103b0:	781b      	ldrb	r3, [r3, #0]
 80103b2:	461a      	mov	r2, r3
 80103b4:	4b2b      	ldr	r3, [pc, #172]	; (8010464 <run_shortest+0x12c4>)
 80103b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80103ba:	4613      	mov	r3, r2
 80103bc:	005b      	lsls	r3, r3, #1
 80103be:	4413      	add	r3, r2
 80103c0:	011a      	lsls	r2, r3, #4
 80103c2:	1ad3      	subs	r3, r2, r3
 80103c4:	ee07 3a90 	vmov	s15, r3
 80103c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103cc:	69b8      	ldr	r0, [r7, #24]
 80103ce:	ed97 2a04 	vldr	s4, [r7, #16]
 80103d2:	edd7 1a05 	vldr	s3, [r7, #20]
 80103d6:	ed97 1a08 	vldr	s2, [r7, #32]
 80103da:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80103de:	eeb0 0a67 	vmov.f32	s0, s15
 80103e2:	f7f2 fdfb 	bl	8002fdc <straight_table2>
			}

			pass_count++;
 80103e6:	4b1e      	ldr	r3, [pc, #120]	; (8010460 <run_shortest+0x12c0>)
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	3301      	adds	r3, #1
 80103ec:	b2da      	uxtb	r2, r3
 80103ee:	4b1c      	ldr	r3, [pc, #112]	; (8010460 <run_shortest+0x12c0>)
 80103f0:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 80103f2:	4b1b      	ldr	r3, [pc, #108]	; (8010460 <run_shortest+0x12c0>)
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	461a      	mov	r2, r3
 80103f8:	4b1a      	ldr	r3, [pc, #104]	; (8010464 <run_shortest+0x12c4>)
 80103fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d000      	beq.n	8010404 <run_shortest+0x1264>
		pass_count2=pass_count+1;
 8010402:	e521      	b.n	800fe48 <run_shortest+0xca8>
			break;
 8010404:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010406:	2301      	movs	r3, #1
 8010408:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 801040a:	2300      	movs	r3, #0
 801040c:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 801040e:	69b8      	ldr	r0, [r7, #24]
 8010410:	ed97 2a04 	vldr	s4, [r7, #16]
 8010414:	edd7 1a05 	vldr	s3, [r7, #20]
 8010418:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010468 <run_shortest+0x12c8>
 801041c:	edd7 0a08 	vldr	s1, [r7, #32]
 8010420:	ed9f 0a12 	vldr	s0, [pc, #72]	; 801046c <run_shortest+0x12cc>
 8010424:	f7f2 fdda 	bl	8002fdc <straight_table2>
		HAL_Delay(700);
 8010428:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 801042c:	f008 fcbe 	bl	8018dac <HAL_Delay>
		pl_FunMotor_stop();
 8010430:	f7f7 fae6 	bl	8007a00 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 8010434:	4b0e      	ldr	r3, [pc, #56]	; (8010470 <run_shortest+0x12d0>)
 8010436:	2200      	movs	r2, #0
 8010438:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 801043a:	4b0e      	ldr	r3, [pc, #56]	; (8010474 <run_shortest+0x12d4>)
 801043c:	2200      	movs	r2, #0
 801043e:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010440:	4b0d      	ldr	r3, [pc, #52]	; (8010478 <run_shortest+0x12d8>)
 8010442:	2200      	movs	r2, #0
 8010444:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8010446:	2000      	movs	r0, #0
 8010448:	f7f7 fa46 	bl	80078d8 <pl_DriveMotor_standby>
	t = 0;
 801044c:	4b0b      	ldr	r3, [pc, #44]	; (801047c <run_shortest+0x12dc>)
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 8010452:	e034      	b.n	80104be <run_shortest+0x131e>
 8010454:	f3af 8000 	nop.w
 8010458:	c022ec18 	.word	0xc022ec18
 801045c:	404fd1de 	.word	0x404fd1de
 8010460:	20000828 	.word	0x20000828
 8010464:	2000083c 	.word	0x2000083c
 8010468:	00000000 	.word	0x00000000
 801046c:	42b40000 	.word	0x42b40000
 8010470:	20000834 	.word	0x20000834
 8010474:	20000808 	.word	0x20000808
 8010478:	2000edc0 	.word	0x2000edc0
 801047c:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 8010480:	4b2b      	ldr	r3, [pc, #172]	; (8010530 <run_shortest+0x1390>)
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	4b2a      	ldr	r3, [pc, #168]	; (8010530 <run_shortest+0x1390>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	492a      	ldr	r1, [pc, #168]	; (8010534 <run_shortest+0x1394>)
 801048a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 801048e:	4a2a      	ldr	r2, [pc, #168]	; (8010538 <run_shortest+0x1398>)
 8010490:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8010494:	4b26      	ldr	r3, [pc, #152]	; (8010530 <run_shortest+0x1390>)
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	4a25      	ldr	r2, [pc, #148]	; (8010530 <run_shortest+0x1390>)
 801049a:	6812      	ldr	r2, [r2, #0]
 801049c:	4925      	ldr	r1, [pc, #148]	; (8010534 <run_shortest+0x1394>)
 801049e:	330c      	adds	r3, #12
 80104a0:	005b      	lsls	r3, r3, #1
 80104a2:	440b      	add	r3, r1
 80104a4:	88d8      	ldrh	r0, [r3, #6]
 80104a6:	4924      	ldr	r1, [pc, #144]	; (8010538 <run_shortest+0x1398>)
 80104a8:	f102 030c 	add.w	r3, r2, #12
 80104ac:	005b      	lsls	r3, r3, #1
 80104ae:	440b      	add	r3, r1
 80104b0:	4602      	mov	r2, r0
 80104b2:	80da      	strh	r2, [r3, #6]
		t++;
 80104b4:	4b1e      	ldr	r3, [pc, #120]	; (8010530 <run_shortest+0x1390>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	3301      	adds	r3, #1
 80104ba:	4a1d      	ldr	r2, [pc, #116]	; (8010530 <run_shortest+0x1390>)
 80104bc:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80104be:	4b1c      	ldr	r3, [pc, #112]	; (8010530 <run_shortest+0x1390>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	2b0e      	cmp	r3, #14
 80104c4:	dddc      	ble.n	8010480 <run_shortest+0x12e0>
	}
	t = 0;
 80104c6:	4b1a      	ldr	r3, [pc, #104]	; (8010530 <run_shortest+0x1390>)
 80104c8:	2200      	movs	r2, #0
 80104ca:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 80104cc:	e026      	b.n	801051c <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 80104ce:	4b18      	ldr	r3, [pc, #96]	; (8010530 <run_shortest+0x1390>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	4a19      	ldr	r2, [pc, #100]	; (8010538 <run_shortest+0x1398>)
 80104d4:	331c      	adds	r3, #28
 80104d6:	005b      	lsls	r3, r3, #1
 80104d8:	4413      	add	r3, r2
 80104da:	889a      	ldrh	r2, [r3, #4]
 80104dc:	4b14      	ldr	r3, [pc, #80]	; (8010530 <run_shortest+0x1390>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	43d2      	mvns	r2, r2
 80104e2:	b291      	uxth	r1, r2
 80104e4:	4a14      	ldr	r2, [pc, #80]	; (8010538 <run_shortest+0x1398>)
 80104e6:	331c      	adds	r3, #28
 80104e8:	005b      	lsls	r3, r3, #1
 80104ea:	4413      	add	r3, r2
 80104ec:	460a      	mov	r2, r1
 80104ee:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 80104f0:	4b0f      	ldr	r3, [pc, #60]	; (8010530 <run_shortest+0x1390>)
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	4a10      	ldr	r2, [pc, #64]	; (8010538 <run_shortest+0x1398>)
 80104f6:	332c      	adds	r3, #44	; 0x2c
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	4413      	add	r3, r2
 80104fc:	885a      	ldrh	r2, [r3, #2]
 80104fe:	4b0c      	ldr	r3, [pc, #48]	; (8010530 <run_shortest+0x1390>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	43d2      	mvns	r2, r2
 8010504:	b291      	uxth	r1, r2
 8010506:	4a0c      	ldr	r2, [pc, #48]	; (8010538 <run_shortest+0x1398>)
 8010508:	332c      	adds	r3, #44	; 0x2c
 801050a:	005b      	lsls	r3, r3, #1
 801050c:	4413      	add	r3, r2
 801050e:	460a      	mov	r2, r1
 8010510:	805a      	strh	r2, [r3, #2]
		t++;
 8010512:	4b07      	ldr	r3, [pc, #28]	; (8010530 <run_shortest+0x1390>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	3301      	adds	r3, #1
 8010518:	4a05      	ldr	r2, [pc, #20]	; (8010530 <run_shortest+0x1390>)
 801051a:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 801051c:	4b04      	ldr	r3, [pc, #16]	; (8010530 <run_shortest+0x1390>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	2b0e      	cmp	r3, #14
 8010522:	ddd4      	ble.n	80104ce <run_shortest+0x132e>
	}

}
 8010524:	bf00      	nop
 8010526:	bf00      	nop
 8010528:	3740      	adds	r7, #64	; 0x40
 801052a:	46bd      	mov	sp, r7
 801052c:	bdb0      	pop	{r4, r5, r7, pc}
 801052e:	bf00      	nop
 8010530:	20000c38 	.word	0x20000c38
 8010534:	20000cb4 	.word	0x20000cb4
 8010538:	20000c3c 	.word	0x20000c3c

0801053c <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 801053c:	b580      	push	{r7, lr}
 801053e:	b08a      	sub	sp, #40	; 0x28
 8010540:	af02      	add	r7, sp, #8
 8010542:	60f8      	str	r0, [r7, #12]
 8010544:	60b9      	str	r1, [r7, #8]
 8010546:	607a      	str	r2, [r7, #4]
 8010548:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 801054a:	2301      	movs	r3, #1
 801054c:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 801054e:	2301      	movs	r3, #1
 8010550:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010552:	2301      	movs	r3, #1
 8010554:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 801055e:	f107 0114 	add.w	r1, r7, #20
 8010562:	f107 0318 	add.w	r3, r7, #24
 8010566:	687a      	ldr	r2, [r7, #4]
 8010568:	4618      	mov	r0, r3
 801056a:	f7fd fcd3 	bl	800df14 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 801056e:	69b8      	ldr	r0, [r7, #24]
 8010570:	6979      	ldr	r1, [r7, #20]
 8010572:	f107 021e 	add.w	r2, r7, #30
 8010576:	f107 031c 	add.w	r3, r7, #28
 801057a:	9301      	str	r3, [sp, #4]
 801057c:	f107 031d 	add.w	r3, r7, #29
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	4613      	mov	r3, r2
 8010584:	687a      	ldr	r2, [r7, #4]
 8010586:	f000 fe27 	bl	80111d8 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 801058a:	7fbb      	ldrb	r3, [r7, #30]
 801058c:	2b00      	cmp	r3, #0
 801058e:	d007      	beq.n	80105a0 <decision_kitiku+0x64>
 8010590:	7f7b      	ldrb	r3, [r7, #29]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d004      	beq.n	80105a0 <decision_kitiku+0x64>
 8010596:	7f3b      	ldrb	r3, [r7, #28]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d001      	beq.n	80105a0 <decision_kitiku+0x64>
 801059c:	2301      	movs	r3, #1
 801059e:	e000      	b.n	80105a2 <decision_kitiku+0x66>
 80105a0:	2300      	movs	r3, #0
 80105a2:	77fb      	strb	r3, [r7, #31]
 80105a4:	7ffb      	ldrb	r3, [r7, #31]
 80105a6:	f003 0301 	and.w	r3, r3, #1
 80105aa:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 80105ac:	7ffb      	ldrb	r3, [r7, #31]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d02b      	beq.n	801060a <decision_kitiku+0xce>
 80105b2:	887a      	ldrh	r2, [r7, #2]
 80105b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d827      	bhi.n	801060a <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 80105ba:	887a      	ldrh	r2, [r7, #2]
 80105bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80105be:	429a      	cmp	r2, r3
 80105c0:	d823      	bhi.n	801060a <decision_kitiku+0xce>
 80105c2:	887a      	ldrh	r2, [r7, #2]
 80105c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d81f      	bhi.n	801060a <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d102      	bne.n	80105d6 <decision_kitiku+0x9a>
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	2b0d      	cmp	r3, #13
 80105d4:	dc11      	bgt.n	80105fa <decision_kitiku+0xbe>
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b02      	cmp	r3, #2
 80105da:	d102      	bne.n	80105e2 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2b0d      	cmp	r3, #13
 80105e0:	dc0b      	bgt.n	80105fa <decision_kitiku+0xbe>
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	2b03      	cmp	r3, #3
 80105e6:	d102      	bne.n	80105ee <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 80105e8:	68bb      	ldr	r3, [r7, #8]
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	dd05      	ble.n	80105fa <decision_kitiku+0xbe>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2b04      	cmp	r3, #4
 80105f2:	d106      	bne.n	8010602 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	dc03      	bgt.n	8010602 <decision_kitiku+0xc6>
			kitikukan = 0;
 80105fa:	4b08      	ldr	r3, [pc, #32]	; (801061c <decision_kitiku+0xe0>)
 80105fc:	2200      	movs	r2, #0
 80105fe:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010600:	e007      	b.n	8010612 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010602:	4b06      	ldr	r3, [pc, #24]	; (801061c <decision_kitiku+0xe0>)
 8010604:	2201      	movs	r2, #1
 8010606:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010608:	e003      	b.n	8010612 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 801060a:	4b04      	ldr	r3, [pc, #16]	; (801061c <decision_kitiku+0xe0>)
 801060c:	2200      	movs	r2, #0
 801060e:	601a      	str	r2, [r3, #0]
	}


}
 8010610:	bf00      	nop
 8010612:	bf00      	nop
 8010614:	3720      	adds	r7, #32
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	20000838 	.word	0x20000838

08010620 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 8010620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010622:	b099      	sub	sp, #100	; 0x64
 8010624:	af04      	add	r7, sp, #16
 8010626:	60f8      	str	r0, [r7, #12]
 8010628:	60b9      	str	r1, [r7, #8]
 801062a:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 801062c:	4b9f      	ldr	r3, [pc, #636]	; (80108ac <compress_kitiku+0x28c>)
 801062e:	2201      	movs	r2, #1
 8010630:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 8010632:	4b9f      	ldr	r3, [pc, #636]	; (80108b0 <compress_kitiku+0x290>)
 8010634:	2201      	movs	r2, #1
 8010636:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	637b      	str	r3, [r7, #52]	; 0x34
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	633b      	str	r3, [r7, #48]	; 0x30
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 801064a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801064e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010654:	4618      	mov	r0, r3
 8010656:	f7fd fc5d 	bl	800df14 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 801065a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801065e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010660:	62bb      	str	r3, [r7, #40]	; 0x28
 8010662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010664:	627b      	str	r3, [r7, #36]	; 0x24
 8010666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010668:	623b      	str	r3, [r7, #32]
 801066a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066c:	61fb      	str	r3, [r7, #28]
 801066e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010670:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 8010672:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801067a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801067c:	4618      	mov	r0, r3
 801067e:	f7fd fc49 	bl	800df14 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010686:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801068a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801068e:	9301      	str	r3, [sp, #4]
 8010690:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010694:	9300      	str	r3, [sp, #0]
 8010696:	4613      	mov	r3, r2
 8010698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801069a:	f000 fd9d 	bl	80111d8 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 801069e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d009      	beq.n	80106ba <compress_kitiku+0x9a>
 80106a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d005      	beq.n	80106ba <compress_kitiku+0x9a>
 80106ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <compress_kitiku+0x9a>
 80106b6:	2301      	movs	r3, #1
 80106b8:	e000      	b.n	80106bc <compress_kitiku+0x9c>
 80106ba:	2300      	movs	r3, #0
 80106bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80106c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80106c4:	f003 0301 	and.w	r3, r3, #1
 80106c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 80106cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ce:	2b04      	cmp	r3, #4
 80106d0:	d102      	bne.n	80106d8 <compress_kitiku+0xb8>
 80106d2:	2301      	movs	r3, #1
 80106d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80106d6:	e002      	b.n	80106de <compress_kitiku+0xbe>
 80106d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106da:	3301      	adds	r3, #1
 80106dc:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 80106de:	f107 0120 	add.w	r1, r7, #32
 80106e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80106e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fd fc13 	bl	800df14 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 80106ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80106f0:	6a39      	ldr	r1, [r7, #32]
 80106f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80106f6:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80106fa:	9301      	str	r3, [sp, #4]
 80106fc:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010700:	9300      	str	r3, [sp, #0]
 8010702:	4613      	mov	r3, r2
 8010704:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010706:	f000 fd67 	bl	80111d8 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 801070a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801070e:	2b00      	cmp	r3, #0
 8010710:	d009      	beq.n	8010726 <compress_kitiku+0x106>
 8010712:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010716:	2b00      	cmp	r3, #0
 8010718:	d005      	beq.n	8010726 <compress_kitiku+0x106>
 801071a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801071e:	2b00      	cmp	r3, #0
 8010720:	d001      	beq.n	8010726 <compress_kitiku+0x106>
 8010722:	2301      	movs	r3, #1
 8010724:	e000      	b.n	8010728 <compress_kitiku+0x108>
 8010726:	2300      	movs	r3, #0
 8010728:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 801072c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010730:	f003 0301 	and.w	r3, r3, #1
 8010734:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801073a:	2b01      	cmp	r3, #1
 801073c:	d102      	bne.n	8010744 <compress_kitiku+0x124>
 801073e:	2304      	movs	r3, #4
 8010740:	647b      	str	r3, [r7, #68]	; 0x44
 8010742:	e002      	b.n	801074a <compress_kitiku+0x12a>
 8010744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010746:	3b01      	subs	r3, #1
 8010748:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 801074a:	f107 0118 	add.w	r1, r7, #24
 801074e:	f107 031c 	add.w	r3, r7, #28
 8010752:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010754:	4618      	mov	r0, r3
 8010756:	f7fd fbdd 	bl	800df14 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 801075a:	69f8      	ldr	r0, [r7, #28]
 801075c:	69b9      	ldr	r1, [r7, #24]
 801075e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010762:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010766:	9301      	str	r3, [sp, #4]
 8010768:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801076c:	9300      	str	r3, [sp, #0]
 801076e:	4613      	mov	r3, r2
 8010770:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010772:	f000 fd31 	bl	80111d8 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010776:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801077a:	2b00      	cmp	r3, #0
 801077c:	d009      	beq.n	8010792 <compress_kitiku+0x172>
 801077e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010782:	2b00      	cmp	r3, #0
 8010784:	d005      	beq.n	8010792 <compress_kitiku+0x172>
 8010786:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801078a:	2b00      	cmp	r3, #0
 801078c:	d001      	beq.n	8010792 <compress_kitiku+0x172>
 801078e:	2301      	movs	r3, #1
 8010790:	e000      	b.n	8010794 <compress_kitiku+0x174>
 8010792:	2300      	movs	r3, #0
 8010794:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010798:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 801079c:	f003 0301 	and.w	r3, r3, #1
 80107a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 80107a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80107a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80107a8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80107ac:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80107b0:	9301      	str	r3, [sp, #4]
 80107b2:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80107b6:	9300      	str	r3, [sp, #0]
 80107b8:	4613      	mov	r3, r2
 80107ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80107bc:	f000 fb98 	bl	8010ef0 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 80107c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107c4:	f107 0610 	add.w	r6, r7, #16
 80107c8:	f107 0512 	add.w	r5, r7, #18
 80107cc:	f107 0414 	add.w	r4, r7, #20
 80107d0:	f107 0016 	add.w	r0, r7, #22
 80107d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80107d6:	9102      	str	r1, [sp, #8]
 80107d8:	9201      	str	r2, [sp, #4]
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	4633      	mov	r3, r6
 80107de:	462a      	mov	r2, r5
 80107e0:	4621      	mov	r1, r4
 80107e2:	f000 fe79 	bl	80114d8 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 80107e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d001      	beq.n	80107f2 <compress_kitiku+0x1d2>
 80107ee:	23ff      	movs	r3, #255	; 0xff
 80107f0:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 80107f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <compress_kitiku+0x1de>
 80107fa:	23ff      	movs	r3, #255	; 0xff
 80107fc:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 80107fe:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010802:	2b00      	cmp	r3, #0
 8010804:	d001      	beq.n	801080a <compress_kitiku+0x1ea>
 8010806:	23ff      	movs	r3, #255	; 0xff
 8010808:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 801080a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801080c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080e:	4929      	ldr	r1, [pc, #164]	; (80108b4 <compress_kitiku+0x294>)
 8010810:	0112      	lsls	r2, r2, #4
 8010812:	4413      	add	r3, r2
 8010814:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010818:	2b01      	cmp	r3, #1
 801081a:	f240 80a9 	bls.w	8010970 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 801081e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010820:	2b01      	cmp	r3, #1
 8010822:	d103      	bne.n	801082c <compress_kitiku+0x20c>
 8010824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010826:	2b0d      	cmp	r3, #13
 8010828:	f300 80a4 	bgt.w	8010974 <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 801082c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801082e:	2b02      	cmp	r3, #2
 8010830:	d103      	bne.n	801083a <compress_kitiku+0x21a>
 8010832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010834:	2b0d      	cmp	r3, #13
 8010836:	f300 809f 	bgt.w	8010978 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 801083a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801083c:	2b03      	cmp	r3, #3
 801083e:	d103      	bne.n	8010848 <compress_kitiku+0x228>
 8010840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010842:	2b01      	cmp	r3, #1
 8010844:	f340 809a 	ble.w	801097c <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 8010848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801084a:	2b04      	cmp	r3, #4
 801084c:	d103      	bne.n	8010856 <compress_kitiku+0x236>
 801084e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010850:	2b01      	cmp	r3, #1
 8010852:	f340 8095 	ble.w	8010980 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8010856:	8afb      	ldrh	r3, [r7, #22]
 8010858:	2bff      	cmp	r3, #255	; 0xff
 801085a:	d10c      	bne.n	8010876 <compress_kitiku+0x256>
 801085c:	8abb      	ldrh	r3, [r7, #20]
 801085e:	2bff      	cmp	r3, #255	; 0xff
 8010860:	d109      	bne.n	8010876 <compress_kitiku+0x256>
 8010862:	8a3b      	ldrh	r3, [r7, #16]
 8010864:	2bff      	cmp	r3, #255	; 0xff
 8010866:	d106      	bne.n	8010876 <compress_kitiku+0x256>
 8010868:	8a7b      	ldrh	r3, [r7, #18]
 801086a:	2bff      	cmp	r3, #255	; 0xff
 801086c:	d103      	bne.n	8010876 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 801086e:	4b12      	ldr	r3, [pc, #72]	; (80108b8 <compress_kitiku+0x298>)
 8010870:	2201      	movs	r2, #1
 8010872:	701a      	strb	r2, [r3, #0]
		break;
 8010874:	e087      	b.n	8010986 <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010876:	8afa      	ldrh	r2, [r7, #22]
 8010878:	8abb      	ldrh	r3, [r7, #20]
 801087a:	429a      	cmp	r2, r3
 801087c:	d81e      	bhi.n	80108bc <compress_kitiku+0x29c>
 801087e:	8afa      	ldrh	r2, [r7, #22]
 8010880:	8a3b      	ldrh	r3, [r7, #16]
 8010882:	429a      	cmp	r2, r3
 8010884:	d81a      	bhi.n	80108bc <compress_kitiku+0x29c>
 8010886:	8afa      	ldrh	r2, [r7, #22]
 8010888:	8a7b      	ldrh	r3, [r7, #18]
 801088a:	429a      	cmp	r2, r3
 801088c:	d816      	bhi.n	80108bc <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 801088e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010892:	2b00      	cmp	r3, #0
 8010894:	d005      	beq.n	80108a2 <compress_kitiku+0x282>
				kitiku_distance += 2;
 8010896:	4b05      	ldr	r3, [pc, #20]	; (80108ac <compress_kitiku+0x28c>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	3302      	adds	r3, #2
 801089c:	4a03      	ldr	r2, [pc, #12]	; (80108ac <compress_kitiku+0x28c>)
 801089e:	6013      	str	r3, [r2, #0]
 80108a0:	e00c      	b.n	80108bc <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 80108a2:	4b03      	ldr	r3, [pc, #12]	; (80108b0 <compress_kitiku+0x290>)
 80108a4:	2200      	movs	r2, #0
 80108a6:	701a      	strb	r2, [r3, #0]
				break;
 80108a8:	e06d      	b.n	8010986 <compress_kitiku+0x366>
 80108aa:	bf00      	nop
 80108ac:	2000082c 	.word	0x2000082c
 80108b0:	20000829 	.word	0x20000829
 80108b4:	20000d30 	.word	0x20000d30
 80108b8:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80108bc:	8aba      	ldrh	r2, [r7, #20]
 80108be:	8afb      	ldrh	r3, [r7, #22]
 80108c0:	429a      	cmp	r2, r3
 80108c2:	d213      	bcs.n	80108ec <compress_kitiku+0x2cc>
 80108c4:	8aba      	ldrh	r2, [r7, #20]
 80108c6:	8a3b      	ldrh	r3, [r7, #16]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d80f      	bhi.n	80108ec <compress_kitiku+0x2cc>
 80108cc:	8aba      	ldrh	r2, [r7, #20]
 80108ce:	8a7b      	ldrh	r3, [r7, #18]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d80b      	bhi.n	80108ec <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 80108d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d003      	beq.n	80108e4 <compress_kitiku+0x2c4>
				kitiku = 0;
 80108dc:	4b40      	ldr	r3, [pc, #256]	; (80109e0 <compress_kitiku+0x3c0>)
 80108de:	2200      	movs	r2, #0
 80108e0:	701a      	strb	r2, [r3, #0]
				break;
 80108e2:	e050      	b.n	8010986 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80108e4:	4b3e      	ldr	r3, [pc, #248]	; (80109e0 <compress_kitiku+0x3c0>)
 80108e6:	2200      	movs	r2, #0
 80108e8:	701a      	strb	r2, [r3, #0]
				break;
 80108ea:	e04c      	b.n	8010986 <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80108ec:	8a3a      	ldrh	r2, [r7, #16]
 80108ee:	8afb      	ldrh	r3, [r7, #22]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d213      	bcs.n	801091c <compress_kitiku+0x2fc>
 80108f4:	8a3a      	ldrh	r2, [r7, #16]
 80108f6:	8abb      	ldrh	r3, [r7, #20]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d20f      	bcs.n	801091c <compress_kitiku+0x2fc>
 80108fc:	8a3a      	ldrh	r2, [r7, #16]
 80108fe:	8a7b      	ldrh	r3, [r7, #18]
 8010900:	429a      	cmp	r2, r3
 8010902:	d80b      	bhi.n	801091c <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 8010904:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010908:	2b00      	cmp	r3, #0
 801090a:	d003      	beq.n	8010914 <compress_kitiku+0x2f4>
				kitiku = 0;
 801090c:	4b34      	ldr	r3, [pc, #208]	; (80109e0 <compress_kitiku+0x3c0>)
 801090e:	2200      	movs	r2, #0
 8010910:	701a      	strb	r2, [r3, #0]
				break;
 8010912:	e038      	b.n	8010986 <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 8010914:	4b32      	ldr	r3, [pc, #200]	; (80109e0 <compress_kitiku+0x3c0>)
 8010916:	2200      	movs	r2, #0
 8010918:	701a      	strb	r2, [r3, #0]
				break;
 801091a:	e034      	b.n	8010986 <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 801091c:	8a7a      	ldrh	r2, [r7, #18]
 801091e:	8afb      	ldrh	r3, [r7, #22]
 8010920:	429a      	cmp	r2, r3
 8010922:	d20b      	bcs.n	801093c <compress_kitiku+0x31c>
 8010924:	8a7a      	ldrh	r2, [r7, #18]
 8010926:	8abb      	ldrh	r3, [r7, #20]
 8010928:	429a      	cmp	r2, r3
 801092a:	d207      	bcs.n	801093c <compress_kitiku+0x31c>
								&& back_count < left_count){
 801092c:	8a7a      	ldrh	r2, [r7, #18]
 801092e:	8a3b      	ldrh	r3, [r7, #16]
 8010930:	429a      	cmp	r2, r3
 8010932:	d203      	bcs.n	801093c <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 8010934:	4b2a      	ldr	r3, [pc, #168]	; (80109e0 <compress_kitiku+0x3c0>)
 8010936:	2200      	movs	r2, #0
 8010938:	701a      	strb	r2, [r3, #0]
			break;
 801093a:	e024      	b.n	8010986 <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 801093c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801093e:	2b05      	cmp	r3, #5
 8010940:	d101      	bne.n	8010946 <compress_kitiku+0x326>
			direction_now = 1;
 8010942:	2301      	movs	r3, #1
 8010944:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 8010946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010948:	2b06      	cmp	r3, #6
 801094a:	d101      	bne.n	8010950 <compress_kitiku+0x330>
			direction_now = 2;
 801094c:	2302      	movs	r3, #2
 801094e:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 8010950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010952:	2b00      	cmp	r3, #0
 8010954:	d101      	bne.n	801095a <compress_kitiku+0x33a>
			direction_now = 4;
 8010956:	2304      	movs	r3, #4
 8010958:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 801095a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801095c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010960:	d101      	bne.n	8010966 <compress_kitiku+0x346>
			direction_now = 3;
 8010962:	2303      	movs	r3, #3
 8010964:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 8010966:	4b1e      	ldr	r3, [pc, #120]	; (80109e0 <compress_kitiku+0x3c0>)
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d00a      	beq.n	8010984 <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 801096e:	e66c      	b.n	801064a <compress_kitiku+0x2a>
			break;
 8010970:	bf00      	nop
 8010972:	e008      	b.n	8010986 <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 8010974:	bf00      	nop
 8010976:	e006      	b.n	8010986 <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 8010978:	bf00      	nop
 801097a:	e004      	b.n	8010986 <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 801097c:	bf00      	nop
 801097e:	e002      	b.n	8010986 <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010980:	bf00      	nop
 8010982:	e000      	b.n	8010986 <compress_kitiku+0x366>

			break;
 8010984:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 8010986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010988:	3302      	adds	r3, #2
 801098a:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 801098c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801098e:	2b05      	cmp	r3, #5
 8010990:	d101      	bne.n	8010996 <compress_kitiku+0x376>
				direction2 = 1;
 8010992:	2301      	movs	r3, #1
 8010994:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 8010996:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010998:	2b06      	cmp	r3, #6
 801099a:	d101      	bne.n	80109a0 <compress_kitiku+0x380>
				direction2 = 2;
 801099c:	2302      	movs	r3, #2
 801099e:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 80109a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d101      	bne.n	80109aa <compress_kitiku+0x38a>
				direction2 = 4;
 80109a6:	2304      	movs	r3, #4
 80109a8:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 80109aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109b0:	d101      	bne.n	80109b6 <compress_kitiku+0x396>
				direction2 = 3;
 80109b2:	2303      	movs	r3, #3
 80109b4:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 80109b6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80109ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80109be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7fd faa7 	bl	800df14 <update_coordinate>

	*x=x_now;
 80109c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	601a      	str	r2, [r3, #0]
	*y=y_now;
 80109cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ce:	68bb      	ldr	r3, [r7, #8]
 80109d0:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109d6:	601a      	str	r2, [r3, #0]

}
 80109d8:	bf00      	nop
 80109da:	3754      	adds	r7, #84	; 0x54
 80109dc:	46bd      	mov	sp, r7
 80109de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109e0:	20000829 	.word	0x20000829

080109e4 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	2b03      	cmp	r3, #3
 80109f8:	f200 8272 	bhi.w	8010ee0 <update_wall+0x4fc>
 80109fc:	a201      	add	r2, pc, #4	; (adr r2, 8010a04 <update_wall+0x20>)
 80109fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a02:	bf00      	nop
 8010a04:	08010a15 	.word	0x08010a15
 8010a08:	08010b3b 	.word	0x08010b3b
 8010a0c:	08010c71 	.word	0x08010c71
 8010a10:	08010d9f 	.word	0x08010d9f
	case 1:
		if (y <= 14) {
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	2b0e      	cmp	r3, #14
 8010a18:	dc2e      	bgt.n	8010a78 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010a1a:	4a94      	ldr	r2, [pc, #592]	; (8010c6c <update_wall+0x288>)
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	332c      	adds	r3, #44	; 0x2c
 8010a20:	005b      	lsls	r3, r3, #1
 8010a22:	4413      	add	r3, r2
 8010a24:	885b      	ldrh	r3, [r3, #2]
 8010a26:	b21a      	sxth	r2, r3
 8010a28:	2101      	movs	r1, #1
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a30:	b21b      	sxth	r3, r3
 8010a32:	4313      	orrs	r3, r2
 8010a34:	b21b      	sxth	r3, r3
 8010a36:	b299      	uxth	r1, r3
 8010a38:	4a8c      	ldr	r2, [pc, #560]	; (8010c6c <update_wall+0x288>)
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	332c      	adds	r3, #44	; 0x2c
 8010a3e:	005b      	lsls	r3, r3, #1
 8010a40:	4413      	add	r3, r2
 8010a42:	460a      	mov	r2, r1
 8010a44:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010a46:	78fb      	ldrb	r3, [r7, #3]
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	d015      	beq.n	8010a78 <update_wall+0x94>
 8010a4c:	4a87      	ldr	r2, [pc, #540]	; (8010c6c <update_wall+0x288>)
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	330c      	adds	r3, #12
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	4413      	add	r3, r2
 8010a56:	88db      	ldrh	r3, [r3, #6]
 8010a58:	b21a      	sxth	r2, r3
 8010a5a:	2101      	movs	r1, #1
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010a62:	b21b      	sxth	r3, r3
 8010a64:	4313      	orrs	r3, r2
 8010a66:	b21b      	sxth	r3, r3
 8010a68:	b299      	uxth	r1, r3
 8010a6a:	4a80      	ldr	r2, [pc, #512]	; (8010c6c <update_wall+0x288>)
 8010a6c:	68bb      	ldr	r3, [r7, #8]
 8010a6e:	330c      	adds	r3, #12
 8010a70:	005b      	lsls	r3, r3, #1
 8010a72:	4413      	add	r3, r2
 8010a74:	460a      	mov	r2, r1
 8010a76:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	dd2d      	ble.n	8010ada <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	3b01      	subs	r3, #1
 8010a82:	4a7a      	ldr	r2, [pc, #488]	; (8010c6c <update_wall+0x288>)
 8010a84:	331c      	adds	r3, #28
 8010a86:	005b      	lsls	r3, r3, #1
 8010a88:	4413      	add	r3, r2
 8010a8a:	889b      	ldrh	r3, [r3, #4]
 8010a8c:	b21a      	sxth	r2, r3
 8010a8e:	2101      	movs	r1, #1
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	fa01 f303 	lsl.w	r3, r1, r3
 8010a96:	b21b      	sxth	r3, r3
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	b21a      	sxth	r2, r3
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	3b01      	subs	r3, #1
 8010aa0:	b291      	uxth	r1, r2
 8010aa2:	4a72      	ldr	r2, [pc, #456]	; (8010c6c <update_wall+0x288>)
 8010aa4:	331c      	adds	r3, #28
 8010aa6:	005b      	lsls	r3, r3, #1
 8010aa8:	4413      	add	r3, r2
 8010aaa:	460a      	mov	r2, r1
 8010aac:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010aae:	7f3b      	ldrb	r3, [r7, #28]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d012      	beq.n	8010ada <update_wall+0xf6>
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	3b01      	subs	r3, #1
 8010ab8:	4a6c      	ldr	r2, [pc, #432]	; (8010c6c <update_wall+0x288>)
 8010aba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010abe:	b21a      	sxth	r2, r3
 8010ac0:	2101      	movs	r1, #1
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ac8:	b21b      	sxth	r3, r3
 8010aca:	4313      	orrs	r3, r2
 8010acc:	b21a      	sxth	r2, r3
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	3b01      	subs	r3, #1
 8010ad2:	b291      	uxth	r1, r2
 8010ad4:	4a65      	ldr	r2, [pc, #404]	; (8010c6c <update_wall+0x288>)
 8010ad6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2b0e      	cmp	r3, #14
 8010ade:	f300 81f8 	bgt.w	8010ed2 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010ae2:	4a62      	ldr	r2, [pc, #392]	; (8010c6c <update_wall+0x288>)
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	331c      	adds	r3, #28
 8010ae8:	005b      	lsls	r3, r3, #1
 8010aea:	4413      	add	r3, r2
 8010aec:	889b      	ldrh	r3, [r3, #4]
 8010aee:	b21a      	sxth	r2, r3
 8010af0:	2101      	movs	r1, #1
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	fa01 f303 	lsl.w	r3, r1, r3
 8010af8:	b21b      	sxth	r3, r3
 8010afa:	4313      	orrs	r3, r2
 8010afc:	b21b      	sxth	r3, r3
 8010afe:	b299      	uxth	r1, r3
 8010b00:	4a5a      	ldr	r2, [pc, #360]	; (8010c6c <update_wall+0x288>)
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	331c      	adds	r3, #28
 8010b06:	005b      	lsls	r3, r3, #1
 8010b08:	4413      	add	r3, r2
 8010b0a:	460a      	mov	r2, r1
 8010b0c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010b0e:	7e3b      	ldrb	r3, [r7, #24]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	f000 81de 	beq.w	8010ed2 <update_wall+0x4ee>
 8010b16:	4a55      	ldr	r2, [pc, #340]	; (8010c6c <update_wall+0x288>)
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b1e:	b21a      	sxth	r2, r3
 8010b20:	2101      	movs	r1, #1
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	fa01 f303 	lsl.w	r3, r1, r3
 8010b28:	b21b      	sxth	r3, r3
 8010b2a:	4313      	orrs	r3, r2
 8010b2c:	b21b      	sxth	r3, r3
 8010b2e:	b299      	uxth	r1, r3
 8010b30:	4a4e      	ldr	r2, [pc, #312]	; (8010c6c <update_wall+0x288>)
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010b38:	e1cb      	b.n	8010ed2 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2b0e      	cmp	r3, #14
 8010b3e:	dc29      	bgt.n	8010b94 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010b40:	4a4a      	ldr	r2, [pc, #296]	; (8010c6c <update_wall+0x288>)
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	331c      	adds	r3, #28
 8010b46:	005b      	lsls	r3, r3, #1
 8010b48:	4413      	add	r3, r2
 8010b4a:	889b      	ldrh	r3, [r3, #4]
 8010b4c:	b21a      	sxth	r2, r3
 8010b4e:	2101      	movs	r1, #1
 8010b50:	68bb      	ldr	r3, [r7, #8]
 8010b52:	fa01 f303 	lsl.w	r3, r1, r3
 8010b56:	b21b      	sxth	r3, r3
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	b21b      	sxth	r3, r3
 8010b5c:	b299      	uxth	r1, r3
 8010b5e:	4a43      	ldr	r2, [pc, #268]	; (8010c6c <update_wall+0x288>)
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	331c      	adds	r3, #28
 8010b64:	005b      	lsls	r3, r3, #1
 8010b66:	4413      	add	r3, r2
 8010b68:	460a      	mov	r2, r1
 8010b6a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010b6c:	78fb      	ldrb	r3, [r7, #3]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d010      	beq.n	8010b94 <update_wall+0x1b0>
 8010b72:	4a3e      	ldr	r2, [pc, #248]	; (8010c6c <update_wall+0x288>)
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b7a:	b21a      	sxth	r2, r3
 8010b7c:	2101      	movs	r1, #1
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	fa01 f303 	lsl.w	r3, r1, r3
 8010b84:	b21b      	sxth	r3, r3
 8010b86:	4313      	orrs	r3, r2
 8010b88:	b21b      	sxth	r3, r3
 8010b8a:	b299      	uxth	r1, r3
 8010b8c:	4a37      	ldr	r2, [pc, #220]	; (8010c6c <update_wall+0x288>)
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2b0e      	cmp	r3, #14
 8010b98:	dc2e      	bgt.n	8010bf8 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b9a:	4a34      	ldr	r2, [pc, #208]	; (8010c6c <update_wall+0x288>)
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	332c      	adds	r3, #44	; 0x2c
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	4413      	add	r3, r2
 8010ba4:	885b      	ldrh	r3, [r3, #2]
 8010ba6:	b21a      	sxth	r2, r3
 8010ba8:	2101      	movs	r1, #1
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	fa01 f303 	lsl.w	r3, r1, r3
 8010bb0:	b21b      	sxth	r3, r3
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	b21b      	sxth	r3, r3
 8010bb6:	b299      	uxth	r1, r3
 8010bb8:	4a2c      	ldr	r2, [pc, #176]	; (8010c6c <update_wall+0x288>)
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	332c      	adds	r3, #44	; 0x2c
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	4413      	add	r3, r2
 8010bc2:	460a      	mov	r2, r1
 8010bc4:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010bc6:	7f3b      	ldrb	r3, [r7, #28]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d015      	beq.n	8010bf8 <update_wall+0x214>
 8010bcc:	4a27      	ldr	r2, [pc, #156]	; (8010c6c <update_wall+0x288>)
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	330c      	adds	r3, #12
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	4413      	add	r3, r2
 8010bd6:	88db      	ldrh	r3, [r3, #6]
 8010bd8:	b21a      	sxth	r2, r3
 8010bda:	2101      	movs	r1, #1
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	fa01 f303 	lsl.w	r3, r1, r3
 8010be2:	b21b      	sxth	r3, r3
 8010be4:	4313      	orrs	r3, r2
 8010be6:	b21b      	sxth	r3, r3
 8010be8:	b299      	uxth	r1, r3
 8010bea:	4a20      	ldr	r2, [pc, #128]	; (8010c6c <update_wall+0x288>)
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	330c      	adds	r3, #12
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	460a      	mov	r2, r1
 8010bf6:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f340 816b 	ble.w	8010ed6 <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	3b01      	subs	r3, #1
 8010c04:	4a19      	ldr	r2, [pc, #100]	; (8010c6c <update_wall+0x288>)
 8010c06:	332c      	adds	r3, #44	; 0x2c
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	885b      	ldrh	r3, [r3, #2]
 8010c0e:	b21a      	sxth	r2, r3
 8010c10:	2101      	movs	r1, #1
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	fa01 f303 	lsl.w	r3, r1, r3
 8010c18:	b21b      	sxth	r3, r3
 8010c1a:	4313      	orrs	r3, r2
 8010c1c:	b21a      	sxth	r2, r3
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	b291      	uxth	r1, r2
 8010c24:	4a11      	ldr	r2, [pc, #68]	; (8010c6c <update_wall+0x288>)
 8010c26:	332c      	adds	r3, #44	; 0x2c
 8010c28:	005b      	lsls	r3, r3, #1
 8010c2a:	4413      	add	r3, r2
 8010c2c:	460a      	mov	r2, r1
 8010c2e:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c30:	7e3b      	ldrb	r3, [r7, #24]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	f000 814f 	beq.w	8010ed6 <update_wall+0x4f2>
 8010c38:	68bb      	ldr	r3, [r7, #8]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	4a0b      	ldr	r2, [pc, #44]	; (8010c6c <update_wall+0x288>)
 8010c3e:	330c      	adds	r3, #12
 8010c40:	005b      	lsls	r3, r3, #1
 8010c42:	4413      	add	r3, r2
 8010c44:	88db      	ldrh	r3, [r3, #6]
 8010c46:	b21a      	sxth	r2, r3
 8010c48:	2101      	movs	r1, #1
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c50:	b21b      	sxth	r3, r3
 8010c52:	4313      	orrs	r3, r2
 8010c54:	b21a      	sxth	r2, r3
 8010c56:	68bb      	ldr	r3, [r7, #8]
 8010c58:	3b01      	subs	r3, #1
 8010c5a:	b291      	uxth	r1, r2
 8010c5c:	4a03      	ldr	r2, [pc, #12]	; (8010c6c <update_wall+0x288>)
 8010c5e:	330c      	adds	r3, #12
 8010c60:	005b      	lsls	r3, r3, #1
 8010c62:	4413      	add	r3, r2
 8010c64:	460a      	mov	r2, r1
 8010c66:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010c68:	e135      	b.n	8010ed6 <update_wall+0x4f2>
 8010c6a:	bf00      	nop
 8010c6c:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010c70:	68bb      	ldr	r3, [r7, #8]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	dd32      	ble.n	8010cdc <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c76:	68bb      	ldr	r3, [r7, #8]
 8010c78:	3b01      	subs	r3, #1
 8010c7a:	4a9c      	ldr	r2, [pc, #624]	; (8010eec <update_wall+0x508>)
 8010c7c:	332c      	adds	r3, #44	; 0x2c
 8010c7e:	005b      	lsls	r3, r3, #1
 8010c80:	4413      	add	r3, r2
 8010c82:	885b      	ldrh	r3, [r3, #2]
 8010c84:	b21a      	sxth	r2, r3
 8010c86:	2101      	movs	r1, #1
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c8e:	b21b      	sxth	r3, r3
 8010c90:	4313      	orrs	r3, r2
 8010c92:	b21a      	sxth	r2, r3
 8010c94:	68bb      	ldr	r3, [r7, #8]
 8010c96:	3b01      	subs	r3, #1
 8010c98:	b291      	uxth	r1, r2
 8010c9a:	4a94      	ldr	r2, [pc, #592]	; (8010eec <update_wall+0x508>)
 8010c9c:	332c      	adds	r3, #44	; 0x2c
 8010c9e:	005b      	lsls	r3, r3, #1
 8010ca0:	4413      	add	r3, r2
 8010ca2:	460a      	mov	r2, r1
 8010ca4:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010ca6:	78fb      	ldrb	r3, [r7, #3]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d017      	beq.n	8010cdc <update_wall+0x2f8>
 8010cac:	68bb      	ldr	r3, [r7, #8]
 8010cae:	3b01      	subs	r3, #1
 8010cb0:	4a8e      	ldr	r2, [pc, #568]	; (8010eec <update_wall+0x508>)
 8010cb2:	330c      	adds	r3, #12
 8010cb4:	005b      	lsls	r3, r3, #1
 8010cb6:	4413      	add	r3, r2
 8010cb8:	88db      	ldrh	r3, [r3, #6]
 8010cba:	b21a      	sxth	r2, r3
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8010cc4:	b21b      	sxth	r3, r3
 8010cc6:	4313      	orrs	r3, r2
 8010cc8:	b21a      	sxth	r2, r3
 8010cca:	68bb      	ldr	r3, [r7, #8]
 8010ccc:	3b01      	subs	r3, #1
 8010cce:	b291      	uxth	r1, r2
 8010cd0:	4a86      	ldr	r2, [pc, #536]	; (8010eec <update_wall+0x508>)
 8010cd2:	330c      	adds	r3, #12
 8010cd4:	005b      	lsls	r3, r3, #1
 8010cd6:	4413      	add	r3, r2
 8010cd8:	460a      	mov	r2, r1
 8010cda:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	2b0e      	cmp	r3, #14
 8010ce0:	dc29      	bgt.n	8010d36 <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010ce2:	4a82      	ldr	r2, [pc, #520]	; (8010eec <update_wall+0x508>)
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	331c      	adds	r3, #28
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	4413      	add	r3, r2
 8010cec:	889b      	ldrh	r3, [r3, #4]
 8010cee:	b21a      	sxth	r2, r3
 8010cf0:	2101      	movs	r1, #1
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8010cf8:	b21b      	sxth	r3, r3
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	b21b      	sxth	r3, r3
 8010cfe:	b299      	uxth	r1, r3
 8010d00:	4a7a      	ldr	r2, [pc, #488]	; (8010eec <update_wall+0x508>)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	331c      	adds	r3, #28
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	4413      	add	r3, r2
 8010d0a:	460a      	mov	r2, r1
 8010d0c:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010d0e:	7f3b      	ldrb	r3, [r7, #28]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d010      	beq.n	8010d36 <update_wall+0x352>
 8010d14:	4a75      	ldr	r2, [pc, #468]	; (8010eec <update_wall+0x508>)
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d1c:	b21a      	sxth	r2, r3
 8010d1e:	2101      	movs	r1, #1
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	fa01 f303 	lsl.w	r3, r1, r3
 8010d26:	b21b      	sxth	r3, r3
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	b21b      	sxth	r3, r3
 8010d2c:	b299      	uxth	r1, r3
 8010d2e:	4a6f      	ldr	r2, [pc, #444]	; (8010eec <update_wall+0x508>)
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	f340 80ce 	ble.w	8010eda <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	4a6a      	ldr	r2, [pc, #424]	; (8010eec <update_wall+0x508>)
 8010d44:	331c      	adds	r3, #28
 8010d46:	005b      	lsls	r3, r3, #1
 8010d48:	4413      	add	r3, r2
 8010d4a:	889b      	ldrh	r3, [r3, #4]
 8010d4c:	b21a      	sxth	r2, r3
 8010d4e:	2101      	movs	r1, #1
 8010d50:	68bb      	ldr	r3, [r7, #8]
 8010d52:	fa01 f303 	lsl.w	r3, r1, r3
 8010d56:	b21b      	sxth	r3, r3
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	b21a      	sxth	r2, r3
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	3b01      	subs	r3, #1
 8010d60:	b291      	uxth	r1, r2
 8010d62:	4a62      	ldr	r2, [pc, #392]	; (8010eec <update_wall+0x508>)
 8010d64:	331c      	adds	r3, #28
 8010d66:	005b      	lsls	r3, r3, #1
 8010d68:	4413      	add	r3, r2
 8010d6a:	460a      	mov	r2, r1
 8010d6c:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d6e:	7e3b      	ldrb	r3, [r7, #24]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	f000 80b2 	beq.w	8010eda <update_wall+0x4f6>
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	4a5c      	ldr	r2, [pc, #368]	; (8010eec <update_wall+0x508>)
 8010d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d80:	b21a      	sxth	r2, r3
 8010d82:	2101      	movs	r1, #1
 8010d84:	68bb      	ldr	r3, [r7, #8]
 8010d86:	fa01 f303 	lsl.w	r3, r1, r3
 8010d8a:	b21b      	sxth	r3, r3
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	b21a      	sxth	r2, r3
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	3b01      	subs	r3, #1
 8010d94:	b291      	uxth	r1, r2
 8010d96:	4a55      	ldr	r2, [pc, #340]	; (8010eec <update_wall+0x508>)
 8010d98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010d9c:	e09d      	b.n	8010eda <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	dd2d      	ble.n	8010e00 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010da4:	68fb      	ldr	r3, [r7, #12]
 8010da6:	3b01      	subs	r3, #1
 8010da8:	4a50      	ldr	r2, [pc, #320]	; (8010eec <update_wall+0x508>)
 8010daa:	331c      	adds	r3, #28
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	4413      	add	r3, r2
 8010db0:	889b      	ldrh	r3, [r3, #4]
 8010db2:	b21a      	sxth	r2, r3
 8010db4:	2101      	movs	r1, #1
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	fa01 f303 	lsl.w	r3, r1, r3
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	4313      	orrs	r3, r2
 8010dc0:	b21a      	sxth	r2, r3
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	3b01      	subs	r3, #1
 8010dc6:	b291      	uxth	r1, r2
 8010dc8:	4a48      	ldr	r2, [pc, #288]	; (8010eec <update_wall+0x508>)
 8010dca:	331c      	adds	r3, #28
 8010dcc:	005b      	lsls	r3, r3, #1
 8010dce:	4413      	add	r3, r2
 8010dd0:	460a      	mov	r2, r1
 8010dd2:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010dd4:	78fb      	ldrb	r3, [r7, #3]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d012      	beq.n	8010e00 <update_wall+0x41c>
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	3b01      	subs	r3, #1
 8010dde:	4a43      	ldr	r2, [pc, #268]	; (8010eec <update_wall+0x508>)
 8010de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010de4:	b21a      	sxth	r2, r3
 8010de6:	2101      	movs	r1, #1
 8010de8:	68bb      	ldr	r3, [r7, #8]
 8010dea:	fa01 f303 	lsl.w	r3, r1, r3
 8010dee:	b21b      	sxth	r3, r3
 8010df0:	4313      	orrs	r3, r2
 8010df2:	b21a      	sxth	r2, r3
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	3b01      	subs	r3, #1
 8010df8:	b291      	uxth	r1, r2
 8010dfa:	4a3c      	ldr	r2, [pc, #240]	; (8010eec <update_wall+0x508>)
 8010dfc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010e00:	68bb      	ldr	r3, [r7, #8]
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	dd32      	ble.n	8010e6c <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010e06:	68bb      	ldr	r3, [r7, #8]
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	4a38      	ldr	r2, [pc, #224]	; (8010eec <update_wall+0x508>)
 8010e0c:	332c      	adds	r3, #44	; 0x2c
 8010e0e:	005b      	lsls	r3, r3, #1
 8010e10:	4413      	add	r3, r2
 8010e12:	885b      	ldrh	r3, [r3, #2]
 8010e14:	b21a      	sxth	r2, r3
 8010e16:	2101      	movs	r1, #1
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010e1e:	b21b      	sxth	r3, r3
 8010e20:	4313      	orrs	r3, r2
 8010e22:	b21a      	sxth	r2, r3
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	3b01      	subs	r3, #1
 8010e28:	b291      	uxth	r1, r2
 8010e2a:	4a30      	ldr	r2, [pc, #192]	; (8010eec <update_wall+0x508>)
 8010e2c:	332c      	adds	r3, #44	; 0x2c
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	4413      	add	r3, r2
 8010e32:	460a      	mov	r2, r1
 8010e34:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010e36:	7f3b      	ldrb	r3, [r7, #28]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d017      	beq.n	8010e6c <update_wall+0x488>
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	4a2a      	ldr	r2, [pc, #168]	; (8010eec <update_wall+0x508>)
 8010e42:	330c      	adds	r3, #12
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	4413      	add	r3, r2
 8010e48:	88db      	ldrh	r3, [r3, #6]
 8010e4a:	b21a      	sxth	r2, r3
 8010e4c:	2101      	movs	r1, #1
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	fa01 f303 	lsl.w	r3, r1, r3
 8010e54:	b21b      	sxth	r3, r3
 8010e56:	4313      	orrs	r3, r2
 8010e58:	b21a      	sxth	r2, r3
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	3b01      	subs	r3, #1
 8010e5e:	b291      	uxth	r1, r2
 8010e60:	4a22      	ldr	r2, [pc, #136]	; (8010eec <update_wall+0x508>)
 8010e62:	330c      	adds	r3, #12
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	4413      	add	r3, r2
 8010e68:	460a      	mov	r2, r1
 8010e6a:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	2b0e      	cmp	r3, #14
 8010e70:	dc35      	bgt.n	8010ede <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010e72:	4a1e      	ldr	r2, [pc, #120]	; (8010eec <update_wall+0x508>)
 8010e74:	68bb      	ldr	r3, [r7, #8]
 8010e76:	332c      	adds	r3, #44	; 0x2c
 8010e78:	005b      	lsls	r3, r3, #1
 8010e7a:	4413      	add	r3, r2
 8010e7c:	885b      	ldrh	r3, [r3, #2]
 8010e7e:	b21a      	sxth	r2, r3
 8010e80:	2101      	movs	r1, #1
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	fa01 f303 	lsl.w	r3, r1, r3
 8010e88:	b21b      	sxth	r3, r3
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	b21b      	sxth	r3, r3
 8010e8e:	b299      	uxth	r1, r3
 8010e90:	4a16      	ldr	r2, [pc, #88]	; (8010eec <update_wall+0x508>)
 8010e92:	68bb      	ldr	r3, [r7, #8]
 8010e94:	332c      	adds	r3, #44	; 0x2c
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	4413      	add	r3, r2
 8010e9a:	460a      	mov	r2, r1
 8010e9c:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010e9e:	7e3b      	ldrb	r3, [r7, #24]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d01c      	beq.n	8010ede <update_wall+0x4fa>
 8010ea4:	4a11      	ldr	r2, [pc, #68]	; (8010eec <update_wall+0x508>)
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	330c      	adds	r3, #12
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	4413      	add	r3, r2
 8010eae:	88db      	ldrh	r3, [r3, #6]
 8010eb0:	b21a      	sxth	r2, r3
 8010eb2:	2101      	movs	r1, #1
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8010eba:	b21b      	sxth	r3, r3
 8010ebc:	4313      	orrs	r3, r2
 8010ebe:	b21b      	sxth	r3, r3
 8010ec0:	b299      	uxth	r1, r3
 8010ec2:	4a0a      	ldr	r2, [pc, #40]	; (8010eec <update_wall+0x508>)
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	330c      	adds	r3, #12
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	4413      	add	r3, r2
 8010ecc:	460a      	mov	r2, r1
 8010ece:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010ed0:	e005      	b.n	8010ede <update_wall+0x4fa>
		break;
 8010ed2:	bf00      	nop
 8010ed4:	e004      	b.n	8010ee0 <update_wall+0x4fc>
		break;
 8010ed6:	bf00      	nop
 8010ed8:	e002      	b.n	8010ee0 <update_wall+0x4fc>
		break;
 8010eda:	bf00      	nop
 8010edc:	e000      	b.n	8010ee0 <update_wall+0x4fc>
		break;
 8010ede:	bf00      	nop

	}


}
 8010ee0:	bf00      	nop
 8010ee2:	3714      	adds	r7, #20
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr
 8010eec:	20000c3c 	.word	0x20000c3c

08010ef0 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010ef0:	b480      	push	{r7}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	60f8      	str	r0, [r7, #12]
 8010ef8:	60b9      	str	r1, [r7, #8]
 8010efa:	607a      	str	r2, [r7, #4]
 8010efc:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010efe:	683b      	ldr	r3, [r7, #0]
 8010f00:	2201      	movs	r2, #1
 8010f02:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010f04:	69bb      	ldr	r3, [r7, #24]
 8010f06:	2201      	movs	r2, #1
 8010f08:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010f0a:	69fb      	ldr	r3, [r7, #28]
 8010f0c:	2201      	movs	r2, #1
 8010f0e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	3b01      	subs	r3, #1
 8010f14:	2b03      	cmp	r3, #3
 8010f16:	f200 8156 	bhi.w	80111c6 <get_wall+0x2d6>
 8010f1a:	a201      	add	r2, pc, #4	; (adr r2, 8010f20 <get_wall+0x30>)
 8010f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f20:	08010f31 	.word	0x08010f31
 8010f24:	08010fd1 	.word	0x08010fd1
 8010f28:	08011075 	.word	0x08011075
 8010f2c:	08011115 	.word	0x08011115
	case 1:
		if (y <= 14) {
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	2b0e      	cmp	r3, #14
 8010f34:	dc17      	bgt.n	8010f66 <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010f36:	4aa7      	ldr	r2, [pc, #668]	; (80111d4 <get_wall+0x2e4>)
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	330c      	adds	r3, #12
 8010f3c:	005b      	lsls	r3, r3, #1
 8010f3e:	4413      	add	r3, r2
 8010f40:	88db      	ldrh	r3, [r3, #6]
 8010f42:	4619      	mov	r1, r3
 8010f44:	2201      	movs	r2, #1
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4c:	ea01 0203 	and.w	r2, r1, r3
 8010f50:	2101      	movs	r1, #1
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	fa01 f303 	lsl.w	r3, r1, r3
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	bf0c      	ite	eq
 8010f5c:	2301      	moveq	r3, #1
 8010f5e:	2300      	movne	r3, #0
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	683b      	ldr	r3, [r7, #0]
 8010f64:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dd16      	ble.n	8010f9a <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	3b01      	subs	r3, #1
 8010f70:	4a98      	ldr	r2, [pc, #608]	; (80111d4 <get_wall+0x2e4>)
 8010f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f76:	4619      	mov	r1, r3
 8010f78:	2201      	movs	r2, #1
 8010f7a:	68bb      	ldr	r3, [r7, #8]
 8010f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f80:	ea01 0203 	and.w	r2, r1, r3
 8010f84:	2101      	movs	r1, #1
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	fa01 f303 	lsl.w	r3, r1, r3
 8010f8c:	429a      	cmp	r2, r3
 8010f8e:	bf0c      	ite	eq
 8010f90:	2301      	moveq	r3, #1
 8010f92:	2300      	movne	r3, #0
 8010f94:	b2da      	uxtb	r2, r3
 8010f96:	69fb      	ldr	r3, [r7, #28]
 8010f98:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2b0e      	cmp	r3, #14
 8010f9e:	f300 810b 	bgt.w	80111b8 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010fa2:	4a8c      	ldr	r2, [pc, #560]	; (80111d4 <get_wall+0x2e4>)
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010faa:	4619      	mov	r1, r3
 8010fac:	2201      	movs	r2, #1
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8010fb4:	ea01 0203 	and.w	r2, r1, r3
 8010fb8:	2101      	movs	r1, #1
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	bf0c      	ite	eq
 8010fc4:	2301      	moveq	r3, #1
 8010fc6:	2300      	movne	r3, #0
 8010fc8:	b2da      	uxtb	r2, r3
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010fce:	e0f3      	b.n	80111b8 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	2b0e      	cmp	r3, #14
 8010fd4:	dc15      	bgt.n	8011002 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010fd6:	4a7f      	ldr	r2, [pc, #508]	; (80111d4 <get_wall+0x2e4>)
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fde:	4619      	mov	r1, r3
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8010fe8:	ea01 0203 	and.w	r2, r1, r3
 8010fec:	2101      	movs	r1, #1
 8010fee:	68bb      	ldr	r3, [r7, #8]
 8010ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	bf0c      	ite	eq
 8010ff8:	2301      	moveq	r3, #1
 8010ffa:	2300      	movne	r3, #0
 8010ffc:	b2da      	uxtb	r2, r3
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011002:	68bb      	ldr	r3, [r7, #8]
 8011004:	2b0e      	cmp	r3, #14
 8011006:	dc17      	bgt.n	8011038 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011008:	4a72      	ldr	r2, [pc, #456]	; (80111d4 <get_wall+0x2e4>)
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	330c      	adds	r3, #12
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	88db      	ldrh	r3, [r3, #6]
 8011014:	4619      	mov	r1, r3
 8011016:	2201      	movs	r2, #1
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	fa02 f303 	lsl.w	r3, r2, r3
 801101e:	ea01 0203 	and.w	r2, r1, r3
 8011022:	2101      	movs	r1, #1
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	fa01 f303 	lsl.w	r3, r1, r3
 801102a:	429a      	cmp	r2, r3
 801102c:	bf0c      	ite	eq
 801102e:	2301      	moveq	r3, #1
 8011030:	2300      	movne	r3, #0
 8011032:	b2da      	uxtb	r2, r3
 8011034:	69fb      	ldr	r3, [r7, #28]
 8011036:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	2b00      	cmp	r3, #0
 801103c:	f340 80be 	ble.w	80111bc <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	3b01      	subs	r3, #1
 8011044:	4a63      	ldr	r2, [pc, #396]	; (80111d4 <get_wall+0x2e4>)
 8011046:	330c      	adds	r3, #12
 8011048:	005b      	lsls	r3, r3, #1
 801104a:	4413      	add	r3, r2
 801104c:	88db      	ldrh	r3, [r3, #6]
 801104e:	4619      	mov	r1, r3
 8011050:	2201      	movs	r2, #1
 8011052:	68fb      	ldr	r3, [r7, #12]
 8011054:	fa02 f303 	lsl.w	r3, r2, r3
 8011058:	ea01 0203 	and.w	r2, r1, r3
 801105c:	2101      	movs	r1, #1
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	fa01 f303 	lsl.w	r3, r1, r3
 8011064:	429a      	cmp	r2, r3
 8011066:	bf0c      	ite	eq
 8011068:	2301      	moveq	r3, #1
 801106a:	2300      	movne	r3, #0
 801106c:	b2da      	uxtb	r2, r3
 801106e:	69bb      	ldr	r3, [r7, #24]
 8011070:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011072:	e0a3      	b.n	80111bc <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	2b00      	cmp	r3, #0
 8011078:	dd18      	ble.n	80110ac <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	3b01      	subs	r3, #1
 801107e:	4a55      	ldr	r2, [pc, #340]	; (80111d4 <get_wall+0x2e4>)
 8011080:	330c      	adds	r3, #12
 8011082:	005b      	lsls	r3, r3, #1
 8011084:	4413      	add	r3, r2
 8011086:	88db      	ldrh	r3, [r3, #6]
 8011088:	4619      	mov	r1, r3
 801108a:	2201      	movs	r2, #1
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	fa02 f303 	lsl.w	r3, r2, r3
 8011092:	ea01 0203 	and.w	r2, r1, r3
 8011096:	2101      	movs	r1, #1
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	fa01 f303 	lsl.w	r3, r1, r3
 801109e:	429a      	cmp	r2, r3
 80110a0:	bf0c      	ite	eq
 80110a2:	2301      	moveq	r3, #1
 80110a4:	2300      	movne	r3, #0
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	2b0e      	cmp	r3, #14
 80110b0:	dc15      	bgt.n	80110de <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 80110b2:	4a48      	ldr	r2, [pc, #288]	; (80111d4 <get_wall+0x2e4>)
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110ba:	4619      	mov	r1, r3
 80110bc:	2201      	movs	r2, #1
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	fa02 f303 	lsl.w	r3, r2, r3
 80110c4:	ea01 0203 	and.w	r2, r1, r3
 80110c8:	2101      	movs	r1, #1
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	fa01 f303 	lsl.w	r3, r1, r3
 80110d0:	429a      	cmp	r2, r3
 80110d2:	bf0c      	ite	eq
 80110d4:	2301      	moveq	r3, #1
 80110d6:	2300      	movne	r3, #0
 80110d8:	b2da      	uxtb	r2, r3
 80110da:	69fb      	ldr	r3, [r7, #28]
 80110dc:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	dd6d      	ble.n	80111c0 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	3b01      	subs	r3, #1
 80110e8:	4a3a      	ldr	r2, [pc, #232]	; (80111d4 <get_wall+0x2e4>)
 80110ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110ee:	4619      	mov	r1, r3
 80110f0:	2201      	movs	r2, #1
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	fa02 f303 	lsl.w	r3, r2, r3
 80110f8:	ea01 0203 	and.w	r2, r1, r3
 80110fc:	2101      	movs	r1, #1
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	fa01 f303 	lsl.w	r3, r1, r3
 8011104:	429a      	cmp	r2, r3
 8011106:	bf0c      	ite	eq
 8011108:	2301      	moveq	r3, #1
 801110a:	2300      	movne	r3, #0
 801110c:	b2da      	uxtb	r2, r3
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011112:	e055      	b.n	80111c0 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	dd16      	ble.n	8011148 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	3b01      	subs	r3, #1
 801111e:	4a2d      	ldr	r2, [pc, #180]	; (80111d4 <get_wall+0x2e4>)
 8011120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011124:	4619      	mov	r1, r3
 8011126:	2201      	movs	r2, #1
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	fa02 f303 	lsl.w	r3, r2, r3
 801112e:	ea01 0203 	and.w	r2, r1, r3
 8011132:	2101      	movs	r1, #1
 8011134:	68bb      	ldr	r3, [r7, #8]
 8011136:	fa01 f303 	lsl.w	r3, r1, r3
 801113a:	429a      	cmp	r2, r3
 801113c:	bf0c      	ite	eq
 801113e:	2301      	moveq	r3, #1
 8011140:	2300      	movne	r3, #0
 8011142:	b2da      	uxtb	r2, r3
 8011144:	683b      	ldr	r3, [r7, #0]
 8011146:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2b00      	cmp	r3, #0
 801114c:	dd18      	ble.n	8011180 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	3b01      	subs	r3, #1
 8011152:	4a20      	ldr	r2, [pc, #128]	; (80111d4 <get_wall+0x2e4>)
 8011154:	330c      	adds	r3, #12
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	4413      	add	r3, r2
 801115a:	88db      	ldrh	r3, [r3, #6]
 801115c:	4619      	mov	r1, r3
 801115e:	2201      	movs	r2, #1
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	fa02 f303 	lsl.w	r3, r2, r3
 8011166:	ea01 0203 	and.w	r2, r1, r3
 801116a:	2101      	movs	r1, #1
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	fa01 f303 	lsl.w	r3, r1, r3
 8011172:	429a      	cmp	r2, r3
 8011174:	bf0c      	ite	eq
 8011176:	2301      	moveq	r3, #1
 8011178:	2300      	movne	r3, #0
 801117a:	b2da      	uxtb	r2, r3
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2b0e      	cmp	r3, #14
 8011184:	dc1e      	bgt.n	80111c4 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8011186:	4a13      	ldr	r2, [pc, #76]	; (80111d4 <get_wall+0x2e4>)
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	330c      	adds	r3, #12
 801118c:	005b      	lsls	r3, r3, #1
 801118e:	4413      	add	r3, r2
 8011190:	88db      	ldrh	r3, [r3, #6]
 8011192:	4619      	mov	r1, r3
 8011194:	2201      	movs	r2, #1
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	fa02 f303 	lsl.w	r3, r2, r3
 801119c:	ea01 0203 	and.w	r2, r1, r3
 80111a0:	2101      	movs	r1, #1
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	fa01 f303 	lsl.w	r3, r1, r3
 80111a8:	429a      	cmp	r2, r3
 80111aa:	bf0c      	ite	eq
 80111ac:	2301      	moveq	r3, #1
 80111ae:	2300      	movne	r3, #0
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	69bb      	ldr	r3, [r7, #24]
 80111b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80111b6:	e005      	b.n	80111c4 <get_wall+0x2d4>
		break;
 80111b8:	bf00      	nop
 80111ba:	e004      	b.n	80111c6 <get_wall+0x2d6>
		break;
 80111bc:	bf00      	nop
 80111be:	e002      	b.n	80111c6 <get_wall+0x2d6>
		break;
 80111c0:	bf00      	nop
 80111c2:	e000      	b.n	80111c6 <get_wall+0x2d6>
		break;
 80111c4:	bf00      	nop
	}

}
 80111c6:	bf00      	nop
 80111c8:	3714      	adds	r7, #20
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop
 80111d4:	20000c3c 	.word	0x20000c3c

080111d8 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 80111d8:	b480      	push	{r7}
 80111da:	b085      	sub	sp, #20
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	607a      	str	r2, [r7, #4]
 80111e4:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	2201      	movs	r2, #1
 80111ea:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 80111ec:	69bb      	ldr	r3, [r7, #24]
 80111ee:	2201      	movs	r2, #1
 80111f0:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 80111f2:	69fb      	ldr	r3, [r7, #28]
 80111f4:	2201      	movs	r2, #1
 80111f6:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	3b01      	subs	r3, #1
 80111fc:	2b03      	cmp	r3, #3
 80111fe:	f200 8162 	bhi.w	80114c6 <get_wall_look+0x2ee>
 8011202:	a201      	add	r2, pc, #4	; (adr r2, 8011208 <get_wall_look+0x30>)
 8011204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011208:	08011219 	.word	0x08011219
 801120c:	080112c1 	.word	0x080112c1
 8011210:	08011369 	.word	0x08011369
 8011214:	08011411 	.word	0x08011411
	case 1:
		if (y <= 14) {
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	2b0e      	cmp	r3, #14
 801121c:	dc17      	bgt.n	801124e <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801121e:	4aad      	ldr	r2, [pc, #692]	; (80114d4 <get_wall_look+0x2fc>)
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	332c      	adds	r3, #44	; 0x2c
 8011224:	005b      	lsls	r3, r3, #1
 8011226:	4413      	add	r3, r2
 8011228:	885b      	ldrh	r3, [r3, #2]
 801122a:	4619      	mov	r1, r3
 801122c:	2201      	movs	r2, #1
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	fa02 f303 	lsl.w	r3, r2, r3
 8011234:	ea01 0203 	and.w	r2, r1, r3
 8011238:	2101      	movs	r1, #1
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	fa01 f303 	lsl.w	r3, r1, r3
 8011240:	429a      	cmp	r2, r3
 8011242:	bf0c      	ite	eq
 8011244:	2301      	moveq	r3, #1
 8011246:	2300      	movne	r3, #0
 8011248:	b2da      	uxtb	r2, r3
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2b00      	cmp	r3, #0
 8011252:	dd18      	ble.n	8011286 <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	3b01      	subs	r3, #1
 8011258:	4a9e      	ldr	r2, [pc, #632]	; (80114d4 <get_wall_look+0x2fc>)
 801125a:	331c      	adds	r3, #28
 801125c:	005b      	lsls	r3, r3, #1
 801125e:	4413      	add	r3, r2
 8011260:	889b      	ldrh	r3, [r3, #4]
 8011262:	4619      	mov	r1, r3
 8011264:	2201      	movs	r2, #1
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	fa02 f303 	lsl.w	r3, r2, r3
 801126c:	ea01 0203 	and.w	r2, r1, r3
 8011270:	2101      	movs	r1, #1
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	fa01 f303 	lsl.w	r3, r1, r3
 8011278:	429a      	cmp	r2, r3
 801127a:	bf0c      	ite	eq
 801127c:	2301      	moveq	r3, #1
 801127e:	2300      	movne	r3, #0
 8011280:	b2da      	uxtb	r2, r3
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	2b0e      	cmp	r3, #14
 801128a:	f300 8115 	bgt.w	80114b8 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801128e:	4a91      	ldr	r2, [pc, #580]	; (80114d4 <get_wall_look+0x2fc>)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	331c      	adds	r3, #28
 8011294:	005b      	lsls	r3, r3, #1
 8011296:	4413      	add	r3, r2
 8011298:	889b      	ldrh	r3, [r3, #4]
 801129a:	4619      	mov	r1, r3
 801129c:	2201      	movs	r2, #1
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	fa02 f303 	lsl.w	r3, r2, r3
 80112a4:	ea01 0203 	and.w	r2, r1, r3
 80112a8:	2101      	movs	r1, #1
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	fa01 f303 	lsl.w	r3, r1, r3
 80112b0:	429a      	cmp	r2, r3
 80112b2:	bf0c      	ite	eq
 80112b4:	2301      	moveq	r3, #1
 80112b6:	2300      	movne	r3, #0
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80112be:	e0fb      	b.n	80114b8 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	2b0e      	cmp	r3, #14
 80112c4:	dc17      	bgt.n	80112f6 <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80112c6:	4a83      	ldr	r2, [pc, #524]	; (80114d4 <get_wall_look+0x2fc>)
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	331c      	adds	r3, #28
 80112cc:	005b      	lsls	r3, r3, #1
 80112ce:	4413      	add	r3, r2
 80112d0:	889b      	ldrh	r3, [r3, #4]
 80112d2:	4619      	mov	r1, r3
 80112d4:	2201      	movs	r2, #1
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	fa02 f303 	lsl.w	r3, r2, r3
 80112dc:	ea01 0203 	and.w	r2, r1, r3
 80112e0:	2101      	movs	r1, #1
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	fa01 f303 	lsl.w	r3, r1, r3
 80112e8:	429a      	cmp	r2, r3
 80112ea:	bf0c      	ite	eq
 80112ec:	2301      	moveq	r3, #1
 80112ee:	2300      	movne	r3, #0
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	2b0e      	cmp	r3, #14
 80112fa:	dc17      	bgt.n	801132c <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80112fc:	4a75      	ldr	r2, [pc, #468]	; (80114d4 <get_wall_look+0x2fc>)
 80112fe:	68bb      	ldr	r3, [r7, #8]
 8011300:	332c      	adds	r3, #44	; 0x2c
 8011302:	005b      	lsls	r3, r3, #1
 8011304:	4413      	add	r3, r2
 8011306:	885b      	ldrh	r3, [r3, #2]
 8011308:	4619      	mov	r1, r3
 801130a:	2201      	movs	r2, #1
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	fa02 f303 	lsl.w	r3, r2, r3
 8011312:	ea01 0203 	and.w	r2, r1, r3
 8011316:	2101      	movs	r1, #1
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	fa01 f303 	lsl.w	r3, r1, r3
 801131e:	429a      	cmp	r2, r3
 8011320:	bf0c      	ite	eq
 8011322:	2301      	moveq	r3, #1
 8011324:	2300      	movne	r3, #0
 8011326:	b2da      	uxtb	r2, r3
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	2b00      	cmp	r3, #0
 8011330:	f340 80c4 	ble.w	80114bc <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	3b01      	subs	r3, #1
 8011338:	4a66      	ldr	r2, [pc, #408]	; (80114d4 <get_wall_look+0x2fc>)
 801133a:	332c      	adds	r3, #44	; 0x2c
 801133c:	005b      	lsls	r3, r3, #1
 801133e:	4413      	add	r3, r2
 8011340:	885b      	ldrh	r3, [r3, #2]
 8011342:	4619      	mov	r1, r3
 8011344:	2201      	movs	r2, #1
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	fa02 f303 	lsl.w	r3, r2, r3
 801134c:	ea01 0203 	and.w	r2, r1, r3
 8011350:	2101      	movs	r1, #1
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	fa01 f303 	lsl.w	r3, r1, r3
 8011358:	429a      	cmp	r2, r3
 801135a:	bf0c      	ite	eq
 801135c:	2301      	moveq	r3, #1
 801135e:	2300      	movne	r3, #0
 8011360:	b2da      	uxtb	r2, r3
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011366:	e0a9      	b.n	80114bc <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	2b00      	cmp	r3, #0
 801136c:	dd18      	ble.n	80113a0 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	3b01      	subs	r3, #1
 8011372:	4a58      	ldr	r2, [pc, #352]	; (80114d4 <get_wall_look+0x2fc>)
 8011374:	332c      	adds	r3, #44	; 0x2c
 8011376:	005b      	lsls	r3, r3, #1
 8011378:	4413      	add	r3, r2
 801137a:	885b      	ldrh	r3, [r3, #2]
 801137c:	4619      	mov	r1, r3
 801137e:	2201      	movs	r2, #1
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	fa02 f303 	lsl.w	r3, r2, r3
 8011386:	ea01 0203 	and.w	r2, r1, r3
 801138a:	2101      	movs	r1, #1
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	fa01 f303 	lsl.w	r3, r1, r3
 8011392:	429a      	cmp	r2, r3
 8011394:	bf0c      	ite	eq
 8011396:	2301      	moveq	r3, #1
 8011398:	2300      	movne	r3, #0
 801139a:	b2da      	uxtb	r2, r3
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	2b0e      	cmp	r3, #14
 80113a4:	dc17      	bgt.n	80113d6 <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80113a6:	4a4b      	ldr	r2, [pc, #300]	; (80114d4 <get_wall_look+0x2fc>)
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	331c      	adds	r3, #28
 80113ac:	005b      	lsls	r3, r3, #1
 80113ae:	4413      	add	r3, r2
 80113b0:	889b      	ldrh	r3, [r3, #4]
 80113b2:	4619      	mov	r1, r3
 80113b4:	2201      	movs	r2, #1
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	fa02 f303 	lsl.w	r3, r2, r3
 80113bc:	ea01 0203 	and.w	r2, r1, r3
 80113c0:	2101      	movs	r1, #1
 80113c2:	68bb      	ldr	r3, [r7, #8]
 80113c4:	fa01 f303 	lsl.w	r3, r1, r3
 80113c8:	429a      	cmp	r2, r3
 80113ca:	bf0c      	ite	eq
 80113cc:	2301      	moveq	r3, #1
 80113ce:	2300      	movne	r3, #0
 80113d0:	b2da      	uxtb	r2, r3
 80113d2:	69fb      	ldr	r3, [r7, #28]
 80113d4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	dd71      	ble.n	80114c0 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	3b01      	subs	r3, #1
 80113e0:	4a3c      	ldr	r2, [pc, #240]	; (80114d4 <get_wall_look+0x2fc>)
 80113e2:	331c      	adds	r3, #28
 80113e4:	005b      	lsls	r3, r3, #1
 80113e6:	4413      	add	r3, r2
 80113e8:	889b      	ldrh	r3, [r3, #4]
 80113ea:	4619      	mov	r1, r3
 80113ec:	2201      	movs	r2, #1
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	fa02 f303 	lsl.w	r3, r2, r3
 80113f4:	ea01 0203 	and.w	r2, r1, r3
 80113f8:	2101      	movs	r1, #1
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011400:	429a      	cmp	r2, r3
 8011402:	bf0c      	ite	eq
 8011404:	2301      	moveq	r3, #1
 8011406:	2300      	movne	r3, #0
 8011408:	b2da      	uxtb	r2, r3
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801140e:	e057      	b.n	80114c0 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2b00      	cmp	r3, #0
 8011414:	dd18      	ble.n	8011448 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	3b01      	subs	r3, #1
 801141a:	4a2e      	ldr	r2, [pc, #184]	; (80114d4 <get_wall_look+0x2fc>)
 801141c:	331c      	adds	r3, #28
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	4413      	add	r3, r2
 8011422:	889b      	ldrh	r3, [r3, #4]
 8011424:	4619      	mov	r1, r3
 8011426:	2201      	movs	r2, #1
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	fa02 f303 	lsl.w	r3, r2, r3
 801142e:	ea01 0203 	and.w	r2, r1, r3
 8011432:	2101      	movs	r1, #1
 8011434:	68bb      	ldr	r3, [r7, #8]
 8011436:	fa01 f303 	lsl.w	r3, r1, r3
 801143a:	429a      	cmp	r2, r3
 801143c:	bf0c      	ite	eq
 801143e:	2301      	moveq	r3, #1
 8011440:	2300      	movne	r3, #0
 8011442:	b2da      	uxtb	r2, r3
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	2b00      	cmp	r3, #0
 801144c:	dd18      	ble.n	8011480 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	3b01      	subs	r3, #1
 8011452:	4a20      	ldr	r2, [pc, #128]	; (80114d4 <get_wall_look+0x2fc>)
 8011454:	332c      	adds	r3, #44	; 0x2c
 8011456:	005b      	lsls	r3, r3, #1
 8011458:	4413      	add	r3, r2
 801145a:	885b      	ldrh	r3, [r3, #2]
 801145c:	4619      	mov	r1, r3
 801145e:	2201      	movs	r2, #1
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	fa02 f303 	lsl.w	r3, r2, r3
 8011466:	ea01 0203 	and.w	r2, r1, r3
 801146a:	2101      	movs	r1, #1
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	fa01 f303 	lsl.w	r3, r1, r3
 8011472:	429a      	cmp	r2, r3
 8011474:	bf0c      	ite	eq
 8011476:	2301      	moveq	r3, #1
 8011478:	2300      	movne	r3, #0
 801147a:	b2da      	uxtb	r2, r3
 801147c:	69fb      	ldr	r3, [r7, #28]
 801147e:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b0e      	cmp	r3, #14
 8011484:	dc1e      	bgt.n	80114c4 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011486:	4a13      	ldr	r2, [pc, #76]	; (80114d4 <get_wall_look+0x2fc>)
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	332c      	adds	r3, #44	; 0x2c
 801148c:	005b      	lsls	r3, r3, #1
 801148e:	4413      	add	r3, r2
 8011490:	885b      	ldrh	r3, [r3, #2]
 8011492:	4619      	mov	r1, r3
 8011494:	2201      	movs	r2, #1
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	fa02 f303 	lsl.w	r3, r2, r3
 801149c:	ea01 0203 	and.w	r2, r1, r3
 80114a0:	2101      	movs	r1, #1
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	fa01 f303 	lsl.w	r3, r1, r3
 80114a8:	429a      	cmp	r2, r3
 80114aa:	bf0c      	ite	eq
 80114ac:	2301      	moveq	r3, #1
 80114ae:	2300      	movne	r3, #0
 80114b0:	b2da      	uxtb	r2, r3
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80114b6:	e005      	b.n	80114c4 <get_wall_look+0x2ec>
		break;
 80114b8:	bf00      	nop
 80114ba:	e004      	b.n	80114c6 <get_wall_look+0x2ee>
		break;
 80114bc:	bf00      	nop
 80114be:	e002      	b.n	80114c6 <get_wall_look+0x2ee>
		break;
 80114c0:	bf00      	nop
 80114c2:	e000      	b.n	80114c6 <get_wall_look+0x2ee>
		break;
 80114c4:	bf00      	nop
	}

}
 80114c6:	bf00      	nop
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	20000c3c 	.word	0x20000c3c

080114d8 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80114d8:	b480      	push	{r7}
 80114da:	b087      	sub	sp, #28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	607a      	str	r2, [r7, #4]
 80114e4:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 80114e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e8:	2b0e      	cmp	r3, #14
 80114ea:	dd02      	ble.n	80114f2 <search_AroundWalkCount+0x1a>
 80114ec:	23ff      	movs	r3, #255	; 0xff
 80114ee:	82fb      	strh	r3, [r7, #22]
 80114f0:	e008      	b.n	8011504 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 80114f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114f4:	3301      	adds	r3, #1
 80114f6:	493e      	ldr	r1, [pc, #248]	; (80115f0 <search_AroundWalkCount+0x118>)
 80114f8:	6a3a      	ldr	r2, [r7, #32]
 80114fa:	0112      	lsls	r2, r2, #4
 80114fc:	4413      	add	r3, r2
 80114fe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011502:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011504:	6a3b      	ldr	r3, [r7, #32]
 8011506:	2b0e      	cmp	r3, #14
 8011508:	dd02      	ble.n	8011510 <search_AroundWalkCount+0x38>
 801150a:	23ff      	movs	r3, #255	; 0xff
 801150c:	82bb      	strh	r3, [r7, #20]
 801150e:	e008      	b.n	8011522 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 8011510:	6a3b      	ldr	r3, [r7, #32]
 8011512:	3301      	adds	r3, #1
 8011514:	4936      	ldr	r1, [pc, #216]	; (80115f0 <search_AroundWalkCount+0x118>)
 8011516:	011a      	lsls	r2, r3, #4
 8011518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151a:	4413      	add	r3, r2
 801151c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011520:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 8011522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011524:	2b00      	cmp	r3, #0
 8011526:	dc02      	bgt.n	801152e <search_AroundWalkCount+0x56>
 8011528:	23ff      	movs	r3, #255	; 0xff
 801152a:	827b      	strh	r3, [r7, #18]
 801152c:	e008      	b.n	8011540 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 801152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011530:	3b01      	subs	r3, #1
 8011532:	492f      	ldr	r1, [pc, #188]	; (80115f0 <search_AroundWalkCount+0x118>)
 8011534:	6a3a      	ldr	r2, [r7, #32]
 8011536:	0112      	lsls	r2, r2, #4
 8011538:	4413      	add	r3, r2
 801153a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801153e:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011540:	6a3b      	ldr	r3, [r7, #32]
 8011542:	2b00      	cmp	r3, #0
 8011544:	dc02      	bgt.n	801154c <search_AroundWalkCount+0x74>
 8011546:	23ff      	movs	r3, #255	; 0xff
 8011548:	823b      	strh	r3, [r7, #16]
 801154a:	e008      	b.n	801155e <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 801154c:	6a3b      	ldr	r3, [r7, #32]
 801154e:	3b01      	subs	r3, #1
 8011550:	4927      	ldr	r1, [pc, #156]	; (80115f0 <search_AroundWalkCount+0x118>)
 8011552:	011a      	lsls	r2, r3, #4
 8011554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011556:	4413      	add	r3, r2
 8011558:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801155c:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801155e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011560:	3b01      	subs	r3, #1
 8011562:	2b03      	cmp	r3, #3
 8011564:	d83e      	bhi.n	80115e4 <search_AroundWalkCount+0x10c>
 8011566:	a201      	add	r2, pc, #4	; (adr r2, 801156c <search_AroundWalkCount+0x94>)
 8011568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801156c:	0801157d 	.word	0x0801157d
 8011570:	08011597 	.word	0x08011597
 8011574:	080115b1 	.word	0x080115b1
 8011578:	080115cb 	.word	0x080115cb
	case 1:
		*front_count = north_count;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	8afa      	ldrh	r2, [r7, #22]
 8011580:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011582:	68bb      	ldr	r3, [r7, #8]
 8011584:	8aba      	ldrh	r2, [r7, #20]
 8011586:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	8a7a      	ldrh	r2, [r7, #18]
 801158c:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801158e:	683b      	ldr	r3, [r7, #0]
 8011590:	8a3a      	ldrh	r2, [r7, #16]
 8011592:	801a      	strh	r2, [r3, #0]
		break;
 8011594:	e026      	b.n	80115e4 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	8aba      	ldrh	r2, [r7, #20]
 801159a:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 801159c:	68bb      	ldr	r3, [r7, #8]
 801159e:	8a7a      	ldrh	r2, [r7, #18]
 80115a0:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	8a3a      	ldrh	r2, [r7, #16]
 80115a6:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80115a8:	683b      	ldr	r3, [r7, #0]
 80115aa:	8afa      	ldrh	r2, [r7, #22]
 80115ac:	801a      	strh	r2, [r3, #0]
		break;
 80115ae:	e019      	b.n	80115e4 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	8a7a      	ldrh	r2, [r7, #18]
 80115b4:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	8a3a      	ldrh	r2, [r7, #16]
 80115ba:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	8afa      	ldrh	r2, [r7, #22]
 80115c0:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	8aba      	ldrh	r2, [r7, #20]
 80115c6:	801a      	strh	r2, [r3, #0]
		break;
 80115c8:	e00c      	b.n	80115e4 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	8a3a      	ldrh	r2, [r7, #16]
 80115ce:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80115d0:	68bb      	ldr	r3, [r7, #8]
 80115d2:	8afa      	ldrh	r2, [r7, #22]
 80115d4:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	8aba      	ldrh	r2, [r7, #20]
 80115da:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80115dc:	683b      	ldr	r3, [r7, #0]
 80115de:	8a7a      	ldrh	r2, [r7, #18]
 80115e0:	801a      	strh	r2, [r3, #0]
		break;
 80115e2:	bf00      	nop

	}


}
 80115e4:	bf00      	nop
 80115e6:	371c      	adds	r7, #28
 80115e8:	46bd      	mov	sp, r7
 80115ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ee:	4770      	bx	lr
 80115f0:	20000d30 	.word	0x20000d30

080115f4 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80115f4:	b480      	push	{r7}
 80115f6:	b087      	sub	sp, #28
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
 8011600:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 8011602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011604:	2b0e      	cmp	r3, #14
 8011606:	dd03      	ble.n	8011610 <search_AroundDijkstraCount+0x1c>
 8011608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801160c:	82fb      	strh	r3, [r7, #22]
 801160e:	e00a      	b.n	8011626 <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011610:	4944      	ldr	r1, [pc, #272]	; (8011724 <search_AroundDijkstraCount+0x130>)
 8011612:	6a3a      	ldr	r2, [r7, #32]
 8011614:	4613      	mov	r3, r2
 8011616:	011b      	lsls	r3, r3, #4
 8011618:	1a9b      	subs	r3, r3, r2
 801161a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801161c:	4413      	add	r3, r2
 801161e:	33f0      	adds	r3, #240	; 0xf0
 8011620:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011624:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 8011626:	6a3b      	ldr	r3, [r7, #32]
 8011628:	2b0e      	cmp	r3, #14
 801162a:	dd03      	ble.n	8011634 <search_AroundDijkstraCount+0x40>
 801162c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011630:	82bb      	strh	r3, [r7, #20]
 8011632:	e009      	b.n	8011648 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 8011634:	493b      	ldr	r1, [pc, #236]	; (8011724 <search_AroundDijkstraCount+0x130>)
 8011636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011638:	4613      	mov	r3, r2
 801163a:	011b      	lsls	r3, r3, #4
 801163c:	1a9b      	subs	r3, r3, r2
 801163e:	6a3a      	ldr	r2, [r7, #32]
 8011640:	4413      	add	r3, r2
 8011642:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011646:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164a:	2b00      	cmp	r3, #0
 801164c:	dc03      	bgt.n	8011656 <search_AroundDijkstraCount+0x62>
 801164e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011652:	827b      	strh	r3, [r7, #18]
 8011654:	e00b      	b.n	801166e <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 8011656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011658:	1e59      	subs	r1, r3, #1
 801165a:	4832      	ldr	r0, [pc, #200]	; (8011724 <search_AroundDijkstraCount+0x130>)
 801165c:	6a3a      	ldr	r2, [r7, #32]
 801165e:	4613      	mov	r3, r2
 8011660:	011b      	lsls	r3, r3, #4
 8011662:	1a9b      	subs	r3, r3, r2
 8011664:	440b      	add	r3, r1
 8011666:	33f0      	adds	r3, #240	; 0xf0
 8011668:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801166c:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 801166e:	6a3b      	ldr	r3, [r7, #32]
 8011670:	2b00      	cmp	r3, #0
 8011672:	dc03      	bgt.n	801167c <search_AroundDijkstraCount+0x88>
 8011674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011678:	823b      	strh	r3, [r7, #16]
 801167a:	e00a      	b.n	8011692 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 801167c:	6a3b      	ldr	r3, [r7, #32]
 801167e:	1e59      	subs	r1, r3, #1
 8011680:	4828      	ldr	r0, [pc, #160]	; (8011724 <search_AroundDijkstraCount+0x130>)
 8011682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011684:	4613      	mov	r3, r2
 8011686:	011b      	lsls	r3, r3, #4
 8011688:	1a9b      	subs	r3, r3, r2
 801168a:	440b      	add	r3, r1
 801168c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011690:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011694:	3b01      	subs	r3, #1
 8011696:	2b03      	cmp	r3, #3
 8011698:	d83e      	bhi.n	8011718 <search_AroundDijkstraCount+0x124>
 801169a:	a201      	add	r2, pc, #4	; (adr r2, 80116a0 <search_AroundDijkstraCount+0xac>)
 801169c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116a0:	080116b1 	.word	0x080116b1
 80116a4:	080116cb 	.word	0x080116cb
 80116a8:	080116e5 	.word	0x080116e5
 80116ac:	080116ff 	.word	0x080116ff
	case 1:
		*front_count = north_count;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	8afa      	ldrh	r2, [r7, #22]
 80116b4:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	8aba      	ldrh	r2, [r7, #20]
 80116ba:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	8a7a      	ldrh	r2, [r7, #18]
 80116c0:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80116c2:	683b      	ldr	r3, [r7, #0]
 80116c4:	8a3a      	ldrh	r2, [r7, #16]
 80116c6:	801a      	strh	r2, [r3, #0]
		break;
 80116c8:	e026      	b.n	8011718 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	8aba      	ldrh	r2, [r7, #20]
 80116ce:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	8a7a      	ldrh	r2, [r7, #18]
 80116d4:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	8a3a      	ldrh	r2, [r7, #16]
 80116da:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	8afa      	ldrh	r2, [r7, #22]
 80116e0:	801a      	strh	r2, [r3, #0]
		break;
 80116e2:	e019      	b.n	8011718 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	8a7a      	ldrh	r2, [r7, #18]
 80116e8:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	8a3a      	ldrh	r2, [r7, #16]
 80116ee:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	8afa      	ldrh	r2, [r7, #22]
 80116f4:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	8aba      	ldrh	r2, [r7, #20]
 80116fa:	801a      	strh	r2, [r3, #0]
		break;
 80116fc:	e00c      	b.n	8011718 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	8a3a      	ldrh	r2, [r7, #16]
 8011702:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011704:	68bb      	ldr	r3, [r7, #8]
 8011706:	8afa      	ldrh	r2, [r7, #22]
 8011708:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	8aba      	ldrh	r2, [r7, #20]
 801170e:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011710:	683b      	ldr	r3, [r7, #0]
 8011712:	8a7a      	ldrh	r2, [r7, #18]
 8011714:	801a      	strh	r2, [r3, #0]
		break;
 8011716:	bf00      	nop

	}


}
 8011718:	bf00      	nop
 801171a:	371c      	adds	r7, #28
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr
 8011724:	20000f30 	.word	0x20000f30

08011728 <create_DijkstraMap>:




void create_DijkstraMap(void){
 8011728:	b590      	push	{r4, r7, lr}
 801172a:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 801172e:	b081      	sub	sp, #4
 8011730:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 8011732:	23b4      	movs	r3, #180	; 0xb4
 8011734:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011738:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801173c:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 801173e:	237f      	movs	r3, #127	; 0x7f
 8011740:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011744:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011748:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 801174a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801174e:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011752:	4a1d      	ldr	r2, [pc, #116]	; (80117c8 <create_DijkstraMap+0xa0>)
 8011754:	ca07      	ldmia	r2, {r0, r1, r2}
 8011756:	c303      	stmia	r3!, {r0, r1}
 8011758:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 801175a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801175e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011762:	4a1a      	ldr	r2, [pc, #104]	; (80117cc <create_DijkstraMap+0xa4>)
 8011764:	ca07      	ldmia	r2, {r0, r1, r2}
 8011766:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 801176a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801176e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011772:	4618      	mov	r0, r3
 8011774:	f003 fb1e 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_y);
 8011778:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801177c:	f103 0320 	add.w	r3, r3, #32
 8011780:	3b0c      	subs	r3, #12
 8011782:	4618      	mov	r0, r3
 8011784:	f003 fb16 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011788:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801178c:	3b14      	subs	r3, #20
 801178e:	4618      	mov	r0, r3
 8011790:	f003 fb10 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_direction);
 8011794:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011798:	3b3c      	subs	r3, #60	; 0x3c
 801179a:	4618      	mov	r0, r3
 801179c:	f003 fb0a 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_cost);
 80117a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80117a4:	3b64      	subs	r3, #100	; 0x64
 80117a6:	4618      	mov	r0, r3
 80117a8:	f003 fb04 	bl	8014db4 <initStack_walk>
	for(int i=0;i<=15;i++){
 80117ac:	2300      	movs	r3, #0
 80117ae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117b2:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	e04e      	b.n	8011858 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 80117ba:	2300      	movs	r3, #0
 80117bc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117c0:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117c4:	6013      	str	r3, [r2, #0]
 80117c6:	e035      	b.n	8011834 <create_DijkstraMap+0x10c>
 80117c8:	0802358c 	.word	0x0802358c
 80117cc:	08023598 	.word	0x08023598
			Dijkstra.column_count[i][j]=65535;
 80117d0:	49c7      	ldr	r1, [pc, #796]	; (8011af0 <create_DijkstraMap+0x3c8>)
 80117d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117d6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117da:	681a      	ldr	r2, [r3, #0]
 80117dc:	4613      	mov	r3, r2
 80117de:	011b      	lsls	r3, r3, #4
 80117e0:	1a9b      	subs	r3, r3, r2
 80117e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117e6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117ea:	6812      	ldr	r2, [r2, #0]
 80117ec:	4413      	add	r3, r2
 80117ee:	33f0      	adds	r3, #240	; 0xf0
 80117f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 80117f8:	49bd      	ldr	r1, [pc, #756]	; (8011af0 <create_DijkstraMap+0x3c8>)
 80117fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117fe:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011802:	681a      	ldr	r2, [r3, #0]
 8011804:	4613      	mov	r3, r2
 8011806:	011b      	lsls	r3, r3, #4
 8011808:	1a9b      	subs	r3, r3, r2
 801180a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801180e:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011812:	6812      	ldr	r2, [r2, #0]
 8011814:	4413      	add	r3, r2
 8011816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801181a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801181e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011822:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	3301      	adds	r3, #1
 801182a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801182e:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011838:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	2b0e      	cmp	r3, #14
 8011840:	ddc6      	ble.n	80117d0 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 8011842:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011846:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	3301      	adds	r3, #1
 801184e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011852:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8011856:	6013      	str	r3, [r2, #0]
 8011858:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801185c:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b0f      	cmp	r3, #15
 8011864:	dda9      	ble.n	80117ba <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 8011866:	4ba2      	ldr	r3, [pc, #648]	; (8011af0 <create_DijkstraMap+0x3c8>)
 8011868:	2200      	movs	r2, #0
 801186a:	f8a3 233e 	strh.w	r2, [r3, #830]	; 0x33e
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 801186e:	4ba0      	ldr	r3, [pc, #640]	; (8011af0 <create_DijkstraMap+0x3c8>)
 8011870:	2200      	movs	r2, #0
 8011872:	f8a3 235c 	strh.w	r2, [r3, #860]	; 0x35c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 8011876:	4b9e      	ldr	r3, [pc, #632]	; (8011af0 <create_DijkstraMap+0x3c8>)
 8011878:	2200      	movs	r2, #0
 801187a:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 801187e:	4b9c      	ldr	r3, [pc, #624]	; (8011af0 <create_DijkstraMap+0x3c8>)
 8011880:	2200      	movs	r2, #0
 8011882:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011886:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801188a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801188e:	210b      	movs	r1, #11
 8011890:	4618      	mov	r0, r3
 8011892:	f003 fa9f 	bl	8014dd4 <pushStack_walk>
 8011896:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801189a:	f103 0320 	add.w	r3, r3, #32
 801189e:	3b0c      	subs	r3, #12
 80118a0:	210a      	movs	r1, #10
 80118a2:	4618      	mov	r0, r3
 80118a4:	f003 fa96 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118a8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80118ac:	3b14      	subs	r3, #20
 80118ae:	2100      	movs	r1, #0
 80118b0:	4618      	mov	r0, r3
 80118b2:	f003 fa8f 	bl	8014dd4 <pushStack_walk>
 80118b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80118ba:	3b3c      	subs	r3, #60	; 0x3c
 80118bc:	2108      	movs	r1, #8
 80118be:	4618      	mov	r0, r3
 80118c0:	f003 fa88 	bl	8014dd4 <pushStack_walk>
 80118c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80118c8:	3b64      	subs	r3, #100	; 0x64
 80118ca:	2100      	movs	r1, #0
 80118cc:	4618      	mov	r0, r3
 80118ce:	f003 fa81 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 80118d2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118d6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118da:	210c      	movs	r1, #12
 80118dc:	4618      	mov	r0, r3
 80118de:	f003 fa79 	bl	8014dd4 <pushStack_walk>
 80118e2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80118e6:	f103 0320 	add.w	r3, r3, #32
 80118ea:	3b0c      	subs	r3, #12
 80118ec:	210a      	movs	r1, #10
 80118ee:	4618      	mov	r0, r3
 80118f0:	f003 fa70 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80118f8:	3b14      	subs	r3, #20
 80118fa:	2100      	movs	r1, #0
 80118fc:	4618      	mov	r0, r3
 80118fe:	f003 fa69 	bl	8014dd4 <pushStack_walk>
 8011902:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011906:	3b3c      	subs	r3, #60	; 0x3c
 8011908:	2108      	movs	r1, #8
 801190a:	4618      	mov	r0, r3
 801190c:	f003 fa62 	bl	8014dd4 <pushStack_walk>
 8011910:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011914:	3b64      	subs	r3, #100	; 0x64
 8011916:	2100      	movs	r1, #0
 8011918:	4618      	mov	r0, r3
 801191a:	f003 fa5b 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801191e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011922:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011926:	210b      	movs	r1, #11
 8011928:	4618      	mov	r0, r3
 801192a:	f003 fa53 	bl	8014dd4 <pushStack_walk>
 801192e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011932:	f103 0320 	add.w	r3, r3, #32
 8011936:	3b0c      	subs	r3, #12
 8011938:	210a      	movs	r1, #10
 801193a:	4618      	mov	r0, r3
 801193c:	f003 fa4a 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011940:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011944:	3b14      	subs	r3, #20
 8011946:	2101      	movs	r1, #1
 8011948:	4618      	mov	r0, r3
 801194a:	f003 fa43 	bl	8014dd4 <pushStack_walk>
 801194e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011952:	3b3c      	subs	r3, #60	; 0x3c
 8011954:	2108      	movs	r1, #8
 8011956:	4618      	mov	r0, r3
 8011958:	f003 fa3c 	bl	8014dd4 <pushStack_walk>
 801195c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011960:	3b64      	subs	r3, #100	; 0x64
 8011962:	2100      	movs	r1, #0
 8011964:	4618      	mov	r0, r3
 8011966:	f003 fa35 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 801196a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801196e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011972:	210b      	movs	r1, #11
 8011974:	4618      	mov	r0, r3
 8011976:	f003 fa2d 	bl	8014dd4 <pushStack_walk>
 801197a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801197e:	f103 0320 	add.w	r3, r3, #32
 8011982:	3b0c      	subs	r3, #12
 8011984:	210b      	movs	r1, #11
 8011986:	4618      	mov	r0, r3
 8011988:	f003 fa24 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801198c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011990:	3b14      	subs	r3, #20
 8011992:	2101      	movs	r1, #1
 8011994:	4618      	mov	r0, r3
 8011996:	f003 fa1d 	bl	8014dd4 <pushStack_walk>
 801199a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801199e:	3b3c      	subs	r3, #60	; 0x3c
 80119a0:	2108      	movs	r1, #8
 80119a2:	4618      	mov	r0, r3
 80119a4:	f003 fa16 	bl	8014dd4 <pushStack_walk>
 80119a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119ac:	3b64      	subs	r3, #100	; 0x64
 80119ae:	2100      	movs	r1, #0
 80119b0:	4618      	mov	r0, r3
 80119b2:	f003 fa0f 	bl	8014dd4 <pushStack_walk>



	unsigned short count_number = 1;
 80119b6:	2301      	movs	r3, #1
 80119b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119bc:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80119c0:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80119c2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80119c6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80119ca:	4618      	mov	r0, r3
 80119cc:	f003 fa2c 	bl	8014e28 <popStack_walk>
 80119d0:	4603      	mov	r3, r0
 80119d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119d6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80119da:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80119dc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80119e0:	f103 0320 	add.w	r3, r3, #32
 80119e4:	3b0c      	subs	r3, #12
 80119e6:	4618      	mov	r0, r3
 80119e8:	f003 fa1e 	bl	8014e28 <popStack_walk>
 80119ec:	4603      	mov	r3, r0
 80119ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119f2:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80119f6:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 80119f8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80119fc:	3b14      	subs	r3, #20
 80119fe:	4618      	mov	r0, r3
 8011a00:	f003 fa12 	bl	8014e28 <popStack_walk>
 8011a04:	4603      	mov	r3, r0
 8011a06:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a0a:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8011a0e:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011a10:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011a14:	3b3c      	subs	r3, #60	; 0x3c
 8011a16:	4618      	mov	r0, r3
 8011a18:	f003 fa06 	bl	8014e28 <popStack_walk>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a22:	f102 0266 	add.w	r2, r2, #102	; 0x66
 8011a26:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8011a28:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011a2c:	3b64      	subs	r3, #100	; 0x64
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f003 f9fa 	bl	8014e28 <popStack_walk>
 8011a34:	4603      	mov	r3, r0
 8011a36:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a3a:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8011a3e:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8011a40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a44:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a48:	881b      	ldrh	r3, [r3, #0]
 8011a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a4e:	4293      	cmp	r3, r2
 8011a50:	f001 83a9 	beq.w	80131a6 <create_DijkstraMap+0x1a7e>
 8011a54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a58:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a5c:	881b      	ldrh	r3, [r3, #0]
 8011a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a62:	4293      	cmp	r3, r2
 8011a64:	f001 839f 	beq.w	80131a6 <create_DijkstraMap+0x1a7e>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011a68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a6c:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8011a70:	881b      	ldrh	r3, [r3, #0]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	f040 85c5 	bne.w	8012602 <create_DijkstraMap+0xeda>
			if(Ycoordinate <= 13){
 8011a78:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a7c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a80:	881b      	ldrh	r3, [r3, #0]
 8011a82:	2b0d      	cmp	r3, #13
 8011a84:	f200 80f2 	bhi.w	8011c6c <create_DijkstraMap+0x544>
				if(Direction==SLANT_NORTH){
 8011a88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a8c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011a90:	881b      	ldrh	r3, [r3, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d12e      	bne.n	8011af4 <create_DijkstraMap+0x3cc>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011a96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a9a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011aa8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011aac:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011aae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ab2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011aba:	2b04      	cmp	r3, #4
 8011abc:	dd05      	ble.n	8011aca <create_DijkstraMap+0x3a2>
 8011abe:	2304      	movs	r3, #4
 8011ac0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ac4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011ac8:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011aca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ace:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ad6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011ada:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011ade:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011ae2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ae6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011aea:	8013      	strh	r3, [r2, #0]
 8011aec:	e012      	b.n	8011b14 <create_DijkstraMap+0x3ec>
 8011aee:	bf00      	nop
 8011af0:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011af4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011af8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011afc:	881b      	ldrh	r3, [r3, #0]
 8011afe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b02:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011b06:	8013      	strh	r3, [r2, #0]
 8011b08:	2300      	movs	r3, #0
 8011b0a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b0e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b12:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011b14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b18:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b1c:	881b      	ldrh	r3, [r3, #0]
 8011b1e:	3301      	adds	r3, #1
 8011b20:	4a70      	ldr	r2, [pc, #448]	; (8011ce4 <create_DijkstraMap+0x5bc>)
 8011b22:	330c      	adds	r3, #12
 8011b24:	005b      	lsls	r3, r3, #1
 8011b26:	4413      	add	r3, r2
 8011b28:	88db      	ldrh	r3, [r3, #6]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b30:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b34:	881b      	ldrh	r3, [r3, #0]
 8011b36:	fa42 f303 	asr.w	r3, r2, r3
 8011b3a:	f003 0301 	and.w	r3, r3, #1
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f040 8094 	bne.w	8011c6c <create_DijkstraMap+0x544>
 8011b44:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b48:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b4c:	881a      	ldrh	r2, [r3, #0]
 8011b4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b52:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b56:	881b      	ldrh	r3, [r3, #0]
 8011b58:	1c59      	adds	r1, r3, #1
 8011b5a:	4863      	ldr	r0, [pc, #396]	; (8011ce8 <create_DijkstraMap+0x5c0>)
 8011b5c:	4613      	mov	r3, r2
 8011b5e:	011b      	lsls	r3, r3, #4
 8011b60:	1a9b      	subs	r3, r3, r2
 8011b62:	440b      	add	r3, r1
 8011b64:	33f0      	adds	r3, #240	; 0xf0
 8011b66:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b6a:	461c      	mov	r4, r3
 8011b6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b70:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b74:	881a      	ldrh	r2, [r3, #0]
 8011b76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b7a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b7e:	8819      	ldrh	r1, [r3, #0]
 8011b80:	4859      	ldr	r0, [pc, #356]	; (8011ce8 <create_DijkstraMap+0x5c0>)
 8011b82:	4613      	mov	r3, r2
 8011b84:	011b      	lsls	r3, r3, #4
 8011b86:	1a9b      	subs	r3, r3, r2
 8011b88:	440b      	add	r3, r1
 8011b8a:	33f0      	adds	r3, #240	; 0xf0
 8011b8c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b90:	461a      	mov	r2, r3
 8011b92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b96:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b9e:	4413      	add	r3, r2
 8011ba0:	429c      	cmp	r4, r3
 8011ba2:	dd63      	ble.n	8011c6c <create_DijkstraMap+0x544>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011ba4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ba8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011bac:	881a      	ldrh	r2, [r3, #0]
 8011bae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bb2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bb6:	8819      	ldrh	r1, [r3, #0]
 8011bb8:	484b      	ldr	r0, [pc, #300]	; (8011ce8 <create_DijkstraMap+0x5c0>)
 8011bba:	4613      	mov	r3, r2
 8011bbc:	011b      	lsls	r3, r3, #4
 8011bbe:	1a9b      	subs	r3, r3, r2
 8011bc0:	440b      	add	r3, r1
 8011bc2:	33f0      	adds	r3, #240	; 0xf0
 8011bc4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011bc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bcc:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011bd0:	881b      	ldrh	r3, [r3, #0]
 8011bd2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011bd6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011bda:	8812      	ldrh	r2, [r2, #0]
 8011bdc:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011be0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011be4:	8809      	ldrh	r1, [r1, #0]
 8011be6:	3101      	adds	r1, #1
 8011be8:	4403      	add	r3, r0
 8011bea:	b29c      	uxth	r4, r3
 8011bec:	483e      	ldr	r0, [pc, #248]	; (8011ce8 <create_DijkstraMap+0x5c0>)
 8011bee:	4613      	mov	r3, r2
 8011bf0:	011b      	lsls	r3, r3, #4
 8011bf2:	1a9b      	subs	r3, r3, r2
 8011bf4:	440b      	add	r3, r1
 8011bf6:	33f0      	adds	r3, #240	; 0xf0
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011bfe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c02:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c06:	881a      	ldrh	r2, [r3, #0]
 8011c08:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011c0c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011c10:	4611      	mov	r1, r2
 8011c12:	4618      	mov	r0, r3
 8011c14:	f003 f8de 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011c18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c1c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c20:	881b      	ldrh	r3, [r3, #0]
 8011c22:	3301      	adds	r3, #1
 8011c24:	b29a      	uxth	r2, r3
 8011c26:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011c2a:	f103 0320 	add.w	r3, r3, #32
 8011c2e:	3b0c      	subs	r3, #12
 8011c30:	4611      	mov	r1, r2
 8011c32:	4618      	mov	r0, r3
 8011c34:	f003 f8ce 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011c38:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011c3c:	3b14      	subs	r3, #20
 8011c3e:	2100      	movs	r1, #0
 8011c40:	4618      	mov	r0, r3
 8011c42:	f003 f8c7 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011c46:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011c4a:	3b3c      	subs	r3, #60	; 0x3c
 8011c4c:	2100      	movs	r1, #0
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f003 f8c0 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011c54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c58:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c5c:	881a      	ldrh	r2, [r3, #0]
 8011c5e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011c62:	3b64      	subs	r3, #100	; 0x64
 8011c64:	4611      	mov	r1, r2
 8011c66:	4618      	mov	r0, r3
 8011c68:	f003 f8b4 	bl	8014dd4 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011c6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c70:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c74:	881b      	ldrh	r3, [r3, #0]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	f000 80f4 	beq.w	8011e64 <create_DijkstraMap+0x73c>
				if(Direction==SLANT_SOUTH){
 8011c7c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c80:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011c84:	881b      	ldrh	r3, [r3, #0]
 8011c86:	2b04      	cmp	r3, #4
 8011c88:	d130      	bne.n	8011cec <create_DijkstraMap+0x5c4>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011c8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c8e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011c92:	881b      	ldrh	r3, [r3, #0]
 8011c94:	3301      	adds	r3, #1
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c9c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011ca0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011ca2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ca6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cae:	2b04      	cmp	r3, #4
 8011cb0:	dd05      	ble.n	8011cbe <create_DijkstraMap+0x596>
 8011cb2:	2304      	movs	r3, #4
 8011cb4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011cb8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011cbc:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011cbe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cc2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011cc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011cca:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011cce:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011cd2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011cd6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011cda:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011cde:	8013      	strh	r3, [r2, #0]
 8011ce0:	e014      	b.n	8011d0c <create_DijkstraMap+0x5e4>
 8011ce2:	bf00      	nop
 8011ce4:	20000c3c 	.word	0x20000c3c
 8011ce8:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011cec:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011cf0:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011cf4:	881b      	ldrh	r3, [r3, #0]
 8011cf6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011cfa:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011cfe:	8013      	strh	r3, [r2, #0]
 8011d00:	2300      	movs	r3, #0
 8011d02:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d06:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d0a:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011d0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d10:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	3b01      	subs	r3, #1
 8011d18:	4a70      	ldr	r2, [pc, #448]	; (8011edc <create_DijkstraMap+0x7b4>)
 8011d1a:	330c      	adds	r3, #12
 8011d1c:	005b      	lsls	r3, r3, #1
 8011d1e:	4413      	add	r3, r2
 8011d20:	88db      	ldrh	r3, [r3, #6]
 8011d22:	461a      	mov	r2, r3
 8011d24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d28:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d2c:	881b      	ldrh	r3, [r3, #0]
 8011d2e:	fa42 f303 	asr.w	r3, r2, r3
 8011d32:	f003 0301 	and.w	r3, r3, #1
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f040 8094 	bne.w	8011e64 <create_DijkstraMap+0x73c>
 8011d3c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d40:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d44:	881a      	ldrh	r2, [r3, #0]
 8011d46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d4a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d4e:	881b      	ldrh	r3, [r3, #0]
 8011d50:	1e59      	subs	r1, r3, #1
 8011d52:	4863      	ldr	r0, [pc, #396]	; (8011ee0 <create_DijkstraMap+0x7b8>)
 8011d54:	4613      	mov	r3, r2
 8011d56:	011b      	lsls	r3, r3, #4
 8011d58:	1a9b      	subs	r3, r3, r2
 8011d5a:	440b      	add	r3, r1
 8011d5c:	33f0      	adds	r3, #240	; 0xf0
 8011d5e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d62:	461c      	mov	r4, r3
 8011d64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d68:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d6c:	881a      	ldrh	r2, [r3, #0]
 8011d6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d72:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d76:	8819      	ldrh	r1, [r3, #0]
 8011d78:	4859      	ldr	r0, [pc, #356]	; (8011ee0 <create_DijkstraMap+0x7b8>)
 8011d7a:	4613      	mov	r3, r2
 8011d7c:	011b      	lsls	r3, r3, #4
 8011d7e:	1a9b      	subs	r3, r3, r2
 8011d80:	440b      	add	r3, r1
 8011d82:	33f0      	adds	r3, #240	; 0xf0
 8011d84:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d88:	461a      	mov	r2, r3
 8011d8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d8e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d96:	4413      	add	r3, r2
 8011d98:	429c      	cmp	r4, r3
 8011d9a:	dd63      	ble.n	8011e64 <create_DijkstraMap+0x73c>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011d9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011da0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011da4:	881a      	ldrh	r2, [r3, #0]
 8011da6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011daa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dae:	8819      	ldrh	r1, [r3, #0]
 8011db0:	484b      	ldr	r0, [pc, #300]	; (8011ee0 <create_DijkstraMap+0x7b8>)
 8011db2:	4613      	mov	r3, r2
 8011db4:	011b      	lsls	r3, r3, #4
 8011db6:	1a9b      	subs	r3, r3, r2
 8011db8:	440b      	add	r3, r1
 8011dba:	33f0      	adds	r3, #240	; 0xf0
 8011dbc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011dc0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dc4:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011dc8:	881b      	ldrh	r3, [r3, #0]
 8011dca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011dce:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011dd2:	8812      	ldrh	r2, [r2, #0]
 8011dd4:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011dd8:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011ddc:	8809      	ldrh	r1, [r1, #0]
 8011dde:	3901      	subs	r1, #1
 8011de0:	4403      	add	r3, r0
 8011de2:	b29c      	uxth	r4, r3
 8011de4:	483e      	ldr	r0, [pc, #248]	; (8011ee0 <create_DijkstraMap+0x7b8>)
 8011de6:	4613      	mov	r3, r2
 8011de8:	011b      	lsls	r3, r3, #4
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	440b      	add	r3, r1
 8011dee:	33f0      	adds	r3, #240	; 0xf0
 8011df0:	4622      	mov	r2, r4
 8011df2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011df6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dfa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011dfe:	881a      	ldrh	r2, [r3, #0]
 8011e00:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011e04:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011e08:	4611      	mov	r1, r2
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	f002 ffe2 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011e10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e14:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	3b01      	subs	r3, #1
 8011e1c:	b29a      	uxth	r2, r3
 8011e1e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011e22:	f103 0320 	add.w	r3, r3, #32
 8011e26:	3b0c      	subs	r3, #12
 8011e28:	4611      	mov	r1, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f002 ffd2 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011e30:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011e34:	3b14      	subs	r3, #20
 8011e36:	2100      	movs	r1, #0
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f002 ffcb 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011e3e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011e42:	3b3c      	subs	r3, #60	; 0x3c
 8011e44:	2104      	movs	r1, #4
 8011e46:	4618      	mov	r0, r3
 8011e48:	f002 ffc4 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011e4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e50:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e54:	881a      	ldrh	r2, [r3, #0]
 8011e56:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011e5a:	3b64      	subs	r3, #100	; 0x64
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f002 ffb8 	bl	8014dd4 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011e64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e68:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e6c:	881b      	ldrh	r3, [r3, #0]
 8011e6e:	2b0e      	cmp	r3, #14
 8011e70:	f200 81da 	bhi.w	8012228 <create_DijkstraMap+0xb00>
				if(Direction==SLANT_SOUTH_EAST){
 8011e74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e78:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	2b03      	cmp	r3, #3
 8011e80:	d130      	bne.n	8011ee4 <create_DijkstraMap+0x7bc>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011e82:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e86:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011e8a:	881b      	ldrh	r3, [r3, #0]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	b29b      	uxth	r3, r3
 8011e90:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e94:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e98:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011e9a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e9e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ea6:	2b05      	cmp	r3, #5
 8011ea8:	dd05      	ble.n	8011eb6 <create_DijkstraMap+0x78e>
 8011eaa:	2305      	movs	r3, #5
 8011eac:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011eb0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011eb4:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011eb6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011eba:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011ebe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ec2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011ec6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011eca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011ece:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ed2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011ed6:	8013      	strh	r3, [r2, #0]
 8011ed8:	e014      	b.n	8011f04 <create_DijkstraMap+0x7dc>
 8011eda:	bf00      	nop
 8011edc:	20000c3c 	.word	0x20000c3c
 8011ee0:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011ee4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011ee8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ef2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011ef6:	8013      	strh	r3, [r2, #0]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011efe:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f02:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011f04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f08:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f0c:	881b      	ldrh	r3, [r3, #0]
 8011f0e:	4a68      	ldr	r2, [pc, #416]	; (80120b0 <create_DijkstraMap+0x988>)
 8011f10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011f14:	461a      	mov	r2, r3
 8011f16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f1a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f1e:	881b      	ldrh	r3, [r3, #0]
 8011f20:	fa42 f303 	asr.w	r3, r2, r3
 8011f24:	f003 0301 	and.w	r3, r3, #1
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	f040 808e 	bne.w	801204a <create_DijkstraMap+0x922>
 8011f2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f32:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f36:	881a      	ldrh	r2, [r3, #0]
 8011f38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f3c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f40:	8819      	ldrh	r1, [r3, #0]
 8011f42:	485c      	ldr	r0, [pc, #368]	; (80120b4 <create_DijkstraMap+0x98c>)
 8011f44:	4613      	mov	r3, r2
 8011f46:	011b      	lsls	r3, r3, #4
 8011f48:	1a9b      	subs	r3, r3, r2
 8011f4a:	440b      	add	r3, r1
 8011f4c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f50:	461c      	mov	r4, r3
 8011f52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f56:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f5a:	881a      	ldrh	r2, [r3, #0]
 8011f5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f60:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f64:	8819      	ldrh	r1, [r3, #0]
 8011f66:	4853      	ldr	r0, [pc, #332]	; (80120b4 <create_DijkstraMap+0x98c>)
 8011f68:	4613      	mov	r3, r2
 8011f6a:	011b      	lsls	r3, r3, #4
 8011f6c:	1a9b      	subs	r3, r3, r2
 8011f6e:	440b      	add	r3, r1
 8011f70:	33f0      	adds	r3, #240	; 0xf0
 8011f72:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f76:	461a      	mov	r2, r3
 8011f78:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f7c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f84:	4413      	add	r3, r2
 8011f86:	429c      	cmp	r4, r3
 8011f88:	dd5f      	ble.n	801204a <create_DijkstraMap+0x922>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011f8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f8e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f92:	881a      	ldrh	r2, [r3, #0]
 8011f94:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f98:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f9c:	8819      	ldrh	r1, [r3, #0]
 8011f9e:	4845      	ldr	r0, [pc, #276]	; (80120b4 <create_DijkstraMap+0x98c>)
 8011fa0:	4613      	mov	r3, r2
 8011fa2:	011b      	lsls	r3, r3, #4
 8011fa4:	1a9b      	subs	r3, r3, r2
 8011fa6:	440b      	add	r3, r1
 8011fa8:	33f0      	adds	r3, #240	; 0xf0
 8011faa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011fae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fb2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011fb6:	881b      	ldrh	r3, [r3, #0]
 8011fb8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011fbc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011fc0:	8812      	ldrh	r2, [r2, #0]
 8011fc2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011fc6:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011fca:	8809      	ldrh	r1, [r1, #0]
 8011fcc:	4403      	add	r3, r0
 8011fce:	b29c      	uxth	r4, r3
 8011fd0:	4838      	ldr	r0, [pc, #224]	; (80120b4 <create_DijkstraMap+0x98c>)
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	011b      	lsls	r3, r3, #4
 8011fd6:	1a9b      	subs	r3, r3, r2
 8011fd8:	440b      	add	r3, r1
 8011fda:	4622      	mov	r2, r4
 8011fdc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011fe0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fe4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011fe8:	881a      	ldrh	r2, [r3, #0]
 8011fea:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011fee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011ff2:	4611      	mov	r1, r2
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f002 feed 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011ffa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ffe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012002:	881a      	ldrh	r2, [r3, #0]
 8012004:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012008:	f103 0320 	add.w	r3, r3, #32
 801200c:	3b0c      	subs	r3, #12
 801200e:	4611      	mov	r1, r2
 8012010:	4618      	mov	r0, r3
 8012012:	f002 fedf 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012016:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801201a:	3b14      	subs	r3, #20
 801201c:	2101      	movs	r1, #1
 801201e:	4618      	mov	r0, r3
 8012020:	f002 fed8 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012024:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012028:	3b3c      	subs	r3, #60	; 0x3c
 801202a:	2103      	movs	r1, #3
 801202c:	4618      	mov	r0, r3
 801202e:	f002 fed1 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012032:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012036:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801203a:	881a      	ldrh	r2, [r3, #0]
 801203c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012040:	3b64      	subs	r3, #100	; 0x64
 8012042:	4611      	mov	r1, r2
 8012044:	4618      	mov	r0, r3
 8012046:	f002 fec5 	bl	8014dd4 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 801204a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801204e:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012052:	881b      	ldrh	r3, [r3, #0]
 8012054:	2b01      	cmp	r3, #1
 8012056:	d12f      	bne.n	80120b8 <create_DijkstraMap+0x990>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012058:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801205c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012060:	881b      	ldrh	r3, [r3, #0]
 8012062:	3301      	adds	r3, #1
 8012064:	b29b      	uxth	r3, r3
 8012066:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801206a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801206e:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012070:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012074:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012078:	f9b3 3000 	ldrsh.w	r3, [r3]
 801207c:	2b05      	cmp	r3, #5
 801207e:	dd05      	ble.n	801208c <create_DijkstraMap+0x964>
 8012080:	2305      	movs	r3, #5
 8012082:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012086:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801208a:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 801208c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012090:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012094:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012098:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801209c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80120a0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80120a4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120a8:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80120ac:	8013      	strh	r3, [r2, #0]
 80120ae:	e013      	b.n	80120d8 <create_DijkstraMap+0x9b0>
 80120b0:	20000c3c 	.word	0x20000c3c
 80120b4:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80120b8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80120bc:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80120c0:	881b      	ldrh	r3, [r3, #0]
 80120c2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120c6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80120ca:	8013      	strh	r3, [r2, #0]
 80120cc:	2300      	movs	r3, #0
 80120ce:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80120d2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80120d6:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80120d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120dc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120e0:	881b      	ldrh	r3, [r3, #0]
 80120e2:	4a6f      	ldr	r2, [pc, #444]	; (80122a0 <create_DijkstraMap+0xb78>)
 80120e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80120e8:	461a      	mov	r2, r3
 80120ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120ee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120f2:	881b      	ldrh	r3, [r3, #0]
 80120f4:	3301      	adds	r3, #1
 80120f6:	fa42 f303 	asr.w	r3, r2, r3
 80120fa:	f003 0301 	and.w	r3, r3, #1
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f040 8092 	bne.w	8012228 <create_DijkstraMap+0xb00>
 8012104:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012108:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801210c:	881b      	ldrh	r3, [r3, #0]
 801210e:	1c5a      	adds	r2, r3, #1
 8012110:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012114:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012118:	8819      	ldrh	r1, [r3, #0]
 801211a:	4862      	ldr	r0, [pc, #392]	; (80122a4 <create_DijkstraMap+0xb7c>)
 801211c:	4613      	mov	r3, r2
 801211e:	011b      	lsls	r3, r3, #4
 8012120:	1a9b      	subs	r3, r3, r2
 8012122:	440b      	add	r3, r1
 8012124:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012128:	461c      	mov	r4, r3
 801212a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801212e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012132:	881a      	ldrh	r2, [r3, #0]
 8012134:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012138:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801213c:	8819      	ldrh	r1, [r3, #0]
 801213e:	4859      	ldr	r0, [pc, #356]	; (80122a4 <create_DijkstraMap+0xb7c>)
 8012140:	4613      	mov	r3, r2
 8012142:	011b      	lsls	r3, r3, #4
 8012144:	1a9b      	subs	r3, r3, r2
 8012146:	440b      	add	r3, r1
 8012148:	33f0      	adds	r3, #240	; 0xf0
 801214a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801214e:	461a      	mov	r2, r3
 8012150:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012154:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012158:	f9b3 3000 	ldrsh.w	r3, [r3]
 801215c:	4413      	add	r3, r2
 801215e:	429c      	cmp	r4, r3
 8012160:	dd62      	ble.n	8012228 <create_DijkstraMap+0xb00>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012162:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012166:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801216a:	881a      	ldrh	r2, [r3, #0]
 801216c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012170:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012174:	8819      	ldrh	r1, [r3, #0]
 8012176:	484b      	ldr	r0, [pc, #300]	; (80122a4 <create_DijkstraMap+0xb7c>)
 8012178:	4613      	mov	r3, r2
 801217a:	011b      	lsls	r3, r3, #4
 801217c:	1a9b      	subs	r3, r3, r2
 801217e:	440b      	add	r3, r1
 8012180:	33f0      	adds	r3, #240	; 0xf0
 8012182:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012186:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801218a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012194:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012198:	8812      	ldrh	r2, [r2, #0]
 801219a:	3201      	adds	r2, #1
 801219c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80121a0:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80121a4:	8809      	ldrh	r1, [r1, #0]
 80121a6:	4403      	add	r3, r0
 80121a8:	b29c      	uxth	r4, r3
 80121aa:	483e      	ldr	r0, [pc, #248]	; (80122a4 <create_DijkstraMap+0xb7c>)
 80121ac:	4613      	mov	r3, r2
 80121ae:	011b      	lsls	r3, r3, #4
 80121b0:	1a9b      	subs	r3, r3, r2
 80121b2:	440b      	add	r3, r1
 80121b4:	4622      	mov	r2, r4
 80121b6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80121ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121be:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121c2:	881a      	ldrh	r2, [r3, #0]
 80121c4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80121c8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80121cc:	4611      	mov	r1, r2
 80121ce:	4618      	mov	r0, r3
 80121d0:	f002 fe00 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80121d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121d8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121dc:	881b      	ldrh	r3, [r3, #0]
 80121de:	3301      	adds	r3, #1
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80121e6:	f103 0320 	add.w	r3, r3, #32
 80121ea:	3b0c      	subs	r3, #12
 80121ec:	4611      	mov	r1, r2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f002 fdf0 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80121f4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80121f8:	3b14      	subs	r3, #20
 80121fa:	2101      	movs	r1, #1
 80121fc:	4618      	mov	r0, r3
 80121fe:	f002 fde9 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012202:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012206:	3b3c      	subs	r3, #60	; 0x3c
 8012208:	2101      	movs	r1, #1
 801220a:	4618      	mov	r0, r3
 801220c:	f002 fde2 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012210:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012214:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012218:	881a      	ldrh	r2, [r3, #0]
 801221a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801221e:	3b64      	subs	r3, #100	; 0x64
 8012220:	4611      	mov	r1, r2
 8012222:	4618      	mov	r0, r3
 8012224:	f002 fdd6 	bl	8014dd4 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8012228:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801222c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012230:	881b      	ldrh	r3, [r3, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	f000 81e5 	beq.w	8012602 <create_DijkstraMap+0xeda>
				if(Direction==SLANT_SOUTH_WEST){
 8012238:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801223c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	2b05      	cmp	r3, #5
 8012244:	d130      	bne.n	80122a8 <create_DijkstraMap+0xb80>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012246:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801224a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801224e:	881b      	ldrh	r3, [r3, #0]
 8012250:	3301      	adds	r3, #1
 8012252:	b29b      	uxth	r3, r3
 8012254:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012258:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801225c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801225e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012262:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012266:	f9b3 3000 	ldrsh.w	r3, [r3]
 801226a:	2b05      	cmp	r3, #5
 801226c:	dd05      	ble.n	801227a <create_DijkstraMap+0xb52>
 801226e:	2305      	movs	r3, #5
 8012270:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012274:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012278:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 801227a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801227e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012282:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012286:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801228a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801228e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012292:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012296:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801229a:	8013      	strh	r3, [r2, #0]
 801229c:	e014      	b.n	80122c8 <create_DijkstraMap+0xba0>
 801229e:	bf00      	nop
 80122a0:	20000c3c 	.word	0x20000c3c
 80122a4:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80122a8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80122ac:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122b6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80122ba:	8013      	strh	r3, [r2, #0]
 80122bc:	2300      	movs	r3, #0
 80122be:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122c2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80122c6:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80122c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122cc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122d0:	881b      	ldrh	r3, [r3, #0]
 80122d2:	3b01      	subs	r3, #1
 80122d4:	4a6a      	ldr	r2, [pc, #424]	; (8012480 <create_DijkstraMap+0xd58>)
 80122d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122da:	461a      	mov	r2, r3
 80122dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122e4:	881b      	ldrh	r3, [r3, #0]
 80122e6:	fa42 f303 	asr.w	r3, r2, r3
 80122ea:	f003 0301 	and.w	r3, r3, #1
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f040 8092 	bne.w	8012418 <create_DijkstraMap+0xcf0>
 80122f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122f8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122fc:	881a      	ldrh	r2, [r3, #0]
 80122fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012302:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012306:	881b      	ldrh	r3, [r3, #0]
 8012308:	1e59      	subs	r1, r3, #1
 801230a:	485e      	ldr	r0, [pc, #376]	; (8012484 <create_DijkstraMap+0xd5c>)
 801230c:	4613      	mov	r3, r2
 801230e:	011b      	lsls	r3, r3, #4
 8012310:	1a9b      	subs	r3, r3, r2
 8012312:	440b      	add	r3, r1
 8012314:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012318:	461c      	mov	r4, r3
 801231a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801231e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012322:	881a      	ldrh	r2, [r3, #0]
 8012324:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012328:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801232c:	8819      	ldrh	r1, [r3, #0]
 801232e:	4855      	ldr	r0, [pc, #340]	; (8012484 <create_DijkstraMap+0xd5c>)
 8012330:	4613      	mov	r3, r2
 8012332:	011b      	lsls	r3, r3, #4
 8012334:	1a9b      	subs	r3, r3, r2
 8012336:	440b      	add	r3, r1
 8012338:	33f0      	adds	r3, #240	; 0xf0
 801233a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801233e:	461a      	mov	r2, r3
 8012340:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012344:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012348:	f9b3 3000 	ldrsh.w	r3, [r3]
 801234c:	4413      	add	r3, r2
 801234e:	429c      	cmp	r4, r3
 8012350:	dd62      	ble.n	8012418 <create_DijkstraMap+0xcf0>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012352:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012356:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801235a:	881a      	ldrh	r2, [r3, #0]
 801235c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012360:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012364:	8819      	ldrh	r1, [r3, #0]
 8012366:	4847      	ldr	r0, [pc, #284]	; (8012484 <create_DijkstraMap+0xd5c>)
 8012368:	4613      	mov	r3, r2
 801236a:	011b      	lsls	r3, r3, #4
 801236c:	1a9b      	subs	r3, r3, r2
 801236e:	440b      	add	r3, r1
 8012370:	33f0      	adds	r3, #240	; 0xf0
 8012372:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012376:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801237a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012384:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012388:	8812      	ldrh	r2, [r2, #0]
 801238a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801238e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012392:	8809      	ldrh	r1, [r1, #0]
 8012394:	3901      	subs	r1, #1
 8012396:	4403      	add	r3, r0
 8012398:	b29c      	uxth	r4, r3
 801239a:	483a      	ldr	r0, [pc, #232]	; (8012484 <create_DijkstraMap+0xd5c>)
 801239c:	4613      	mov	r3, r2
 801239e:	011b      	lsls	r3, r3, #4
 80123a0:	1a9b      	subs	r3, r3, r2
 80123a2:	440b      	add	r3, r1
 80123a4:	4622      	mov	r2, r4
 80123a6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80123aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123b2:	881b      	ldrh	r3, [r3, #0]
 80123b4:	3b01      	subs	r3, #1
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80123bc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80123c0:	4611      	mov	r1, r2
 80123c2:	4618      	mov	r0, r3
 80123c4:	f002 fd06 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 80123c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123cc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123d0:	881a      	ldrh	r2, [r3, #0]
 80123d2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80123d6:	f103 0320 	add.w	r3, r3, #32
 80123da:	3b0c      	subs	r3, #12
 80123dc:	4611      	mov	r1, r2
 80123de:	4618      	mov	r0, r3
 80123e0:	f002 fcf8 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80123e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80123e8:	3b14      	subs	r3, #20
 80123ea:	2101      	movs	r1, #1
 80123ec:	4618      	mov	r0, r3
 80123ee:	f002 fcf1 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 80123f2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80123f6:	3b3c      	subs	r3, #60	; 0x3c
 80123f8:	2105      	movs	r1, #5
 80123fa:	4618      	mov	r0, r3
 80123fc:	f002 fcea 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012400:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012404:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012408:	881a      	ldrh	r2, [r3, #0]
 801240a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801240e:	3b64      	subs	r3, #100	; 0x64
 8012410:	4611      	mov	r1, r2
 8012412:	4618      	mov	r0, r3
 8012414:	f002 fcde 	bl	8014dd4 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8012418:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801241c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012420:	881b      	ldrh	r3, [r3, #0]
 8012422:	2b07      	cmp	r3, #7
 8012424:	d130      	bne.n	8012488 <create_DijkstraMap+0xd60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012426:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801242a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801242e:	881b      	ldrh	r3, [r3, #0]
 8012430:	3301      	adds	r3, #1
 8012432:	b29b      	uxth	r3, r3
 8012434:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012438:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801243c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801243e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012442:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012446:	f9b3 3000 	ldrsh.w	r3, [r3]
 801244a:	2b05      	cmp	r3, #5
 801244c:	dd05      	ble.n	801245a <create_DijkstraMap+0xd32>
 801244e:	2305      	movs	r3, #5
 8012450:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012454:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012458:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 801245a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801245e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012462:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012466:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801246a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801246e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012472:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012476:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801247a:	8013      	strh	r3, [r2, #0]
 801247c:	e014      	b.n	80124a8 <create_DijkstraMap+0xd80>
 801247e:	bf00      	nop
 8012480:	20000c3c 	.word	0x20000c3c
 8012484:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012488:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801248c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012490:	881b      	ldrh	r3, [r3, #0]
 8012492:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012496:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801249a:	8013      	strh	r3, [r2, #0]
 801249c:	2300      	movs	r3, #0
 801249e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124a2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124a6:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80124a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124ac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	3b01      	subs	r3, #1
 80124b4:	4a74      	ldr	r2, [pc, #464]	; (8012688 <create_DijkstraMap+0xf60>)
 80124b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80124ba:	461a      	mov	r2, r3
 80124bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124c0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124c4:	881b      	ldrh	r3, [r3, #0]
 80124c6:	3301      	adds	r3, #1
 80124c8:	fa42 f303 	asr.w	r3, r2, r3
 80124cc:	f003 0301 	and.w	r3, r3, #1
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	f040 8096 	bne.w	8012602 <create_DijkstraMap+0xeda>
 80124d6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124da:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124de:	881b      	ldrh	r3, [r3, #0]
 80124e0:	1c5a      	adds	r2, r3, #1
 80124e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124e6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124ea:	881b      	ldrh	r3, [r3, #0]
 80124ec:	1e59      	subs	r1, r3, #1
 80124ee:	4867      	ldr	r0, [pc, #412]	; (801268c <create_DijkstraMap+0xf64>)
 80124f0:	4613      	mov	r3, r2
 80124f2:	011b      	lsls	r3, r3, #4
 80124f4:	1a9b      	subs	r3, r3, r2
 80124f6:	440b      	add	r3, r1
 80124f8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80124fc:	461c      	mov	r4, r3
 80124fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012502:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012506:	881a      	ldrh	r2, [r3, #0]
 8012508:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801250c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012510:	8819      	ldrh	r1, [r3, #0]
 8012512:	485e      	ldr	r0, [pc, #376]	; (801268c <create_DijkstraMap+0xf64>)
 8012514:	4613      	mov	r3, r2
 8012516:	011b      	lsls	r3, r3, #4
 8012518:	1a9b      	subs	r3, r3, r2
 801251a:	440b      	add	r3, r1
 801251c:	33f0      	adds	r3, #240	; 0xf0
 801251e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012522:	461a      	mov	r2, r3
 8012524:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012528:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801252c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012530:	4413      	add	r3, r2
 8012532:	429c      	cmp	r4, r3
 8012534:	dd65      	ble.n	8012602 <create_DijkstraMap+0xeda>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012536:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801253a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801253e:	881a      	ldrh	r2, [r3, #0]
 8012540:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012544:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012548:	8819      	ldrh	r1, [r3, #0]
 801254a:	4850      	ldr	r0, [pc, #320]	; (801268c <create_DijkstraMap+0xf64>)
 801254c:	4613      	mov	r3, r2
 801254e:	011b      	lsls	r3, r3, #4
 8012550:	1a9b      	subs	r3, r3, r2
 8012552:	440b      	add	r3, r1
 8012554:	33f0      	adds	r3, #240	; 0xf0
 8012556:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801255a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801255e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012568:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801256c:	8812      	ldrh	r2, [r2, #0]
 801256e:	3201      	adds	r2, #1
 8012570:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012574:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012578:	8809      	ldrh	r1, [r1, #0]
 801257a:	3901      	subs	r1, #1
 801257c:	4403      	add	r3, r0
 801257e:	b29c      	uxth	r4, r3
 8012580:	4842      	ldr	r0, [pc, #264]	; (801268c <create_DijkstraMap+0xf64>)
 8012582:	4613      	mov	r3, r2
 8012584:	011b      	lsls	r3, r3, #4
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	440b      	add	r3, r1
 801258a:	4622      	mov	r2, r4
 801258c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012590:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012594:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012598:	881b      	ldrh	r3, [r3, #0]
 801259a:	3b01      	subs	r3, #1
 801259c:	b29a      	uxth	r2, r3
 801259e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80125a2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80125a6:	4611      	mov	r1, r2
 80125a8:	4618      	mov	r0, r3
 80125aa:	f002 fc13 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80125ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125b6:	881b      	ldrh	r3, [r3, #0]
 80125b8:	3301      	adds	r3, #1
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80125c0:	f103 0320 	add.w	r3, r3, #32
 80125c4:	3b0c      	subs	r3, #12
 80125c6:	4611      	mov	r1, r2
 80125c8:	4618      	mov	r0, r3
 80125ca:	f002 fc03 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80125ce:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80125d2:	3b14      	subs	r3, #20
 80125d4:	2101      	movs	r1, #1
 80125d6:	4618      	mov	r0, r3
 80125d8:	f002 fbfc 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80125dc:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80125e0:	3b3c      	subs	r3, #60	; 0x3c
 80125e2:	2107      	movs	r1, #7
 80125e4:	4618      	mov	r0, r3
 80125e6:	f002 fbf5 	bl	8014dd4 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80125ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125ee:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80125f2:	881a      	ldrh	r2, [r3, #0]
 80125f4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80125f8:	3b64      	subs	r3, #100	; 0x64
 80125fa:	4611      	mov	r1, r2
 80125fc:	4618      	mov	r0, r3
 80125fe:	f002 fbe9 	bl	8014dd4 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 8012602:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012606:	f103 0368 	add.w	r3, r3, #104	; 0x68
 801260a:	881b      	ldrh	r3, [r3, #0]
 801260c:	2b01      	cmp	r3, #1
 801260e:	f040 85bd 	bne.w	801318c <create_DijkstraMap+0x1a64>
					if(Xcoordinate <= 13){
 8012612:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012616:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801261a:	881b      	ldrh	r3, [r3, #0]
 801261c:	2b0d      	cmp	r3, #13
 801261e:	f200 80ed 	bhi.w	80127fc <create_DijkstraMap+0x10d4>
						if(Direction==SLANT_EAST){
 8012622:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012626:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801262a:	881b      	ldrh	r3, [r3, #0]
 801262c:	2b02      	cmp	r3, #2
 801262e:	d12f      	bne.n	8012690 <create_DijkstraMap+0xf68>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012630:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012634:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	3301      	adds	r3, #1
 801263c:	b29b      	uxth	r3, r3
 801263e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012642:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012646:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012648:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801264c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012654:	2b04      	cmp	r3, #4
 8012656:	dd05      	ble.n	8012664 <create_DijkstraMap+0xf3c>
 8012658:	2304      	movs	r3, #4
 801265a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801265e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012662:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012664:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012668:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801266c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012670:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012674:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012678:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801267c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012680:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012684:	8013      	strh	r3, [r2, #0]
 8012686:	e013      	b.n	80126b0 <create_DijkstraMap+0xf88>
 8012688:	20000c3c 	.word	0x20000c3c
 801268c:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012690:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012694:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012698:	881b      	ldrh	r3, [r3, #0]
 801269a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801269e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80126a2:	8013      	strh	r3, [r2, #0]
 80126a4:	2300      	movs	r3, #0
 80126a6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126aa:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126ae:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80126b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	3301      	adds	r3, #1
 80126bc:	4a6d      	ldr	r2, [pc, #436]	; (8012874 <create_DijkstraMap+0x114c>)
 80126be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126c2:	461a      	mov	r2, r3
 80126c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126c8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126cc:	881b      	ldrh	r3, [r3, #0]
 80126ce:	fa42 f303 	asr.w	r3, r2, r3
 80126d2:	f003 0301 	and.w	r3, r3, #1
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f040 8090 	bne.w	80127fc <create_DijkstraMap+0x10d4>
 80126dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126e4:	881a      	ldrh	r2, [r3, #0]
 80126e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ea:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126ee:	881b      	ldrh	r3, [r3, #0]
 80126f0:	1c59      	adds	r1, r3, #1
 80126f2:	4861      	ldr	r0, [pc, #388]	; (8012878 <create_DijkstraMap+0x1150>)
 80126f4:	4613      	mov	r3, r2
 80126f6:	011b      	lsls	r3, r3, #4
 80126f8:	1a9b      	subs	r3, r3, r2
 80126fa:	440b      	add	r3, r1
 80126fc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012700:	461c      	mov	r4, r3
 8012702:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012706:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801270a:	881a      	ldrh	r2, [r3, #0]
 801270c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012710:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012714:	8819      	ldrh	r1, [r3, #0]
 8012716:	4858      	ldr	r0, [pc, #352]	; (8012878 <create_DijkstraMap+0x1150>)
 8012718:	4613      	mov	r3, r2
 801271a:	011b      	lsls	r3, r3, #4
 801271c:	1a9b      	subs	r3, r3, r2
 801271e:	440b      	add	r3, r1
 8012720:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012724:	461a      	mov	r2, r3
 8012726:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801272a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801272e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012732:	4413      	add	r3, r2
 8012734:	429c      	cmp	r4, r3
 8012736:	dd61      	ble.n	80127fc <create_DijkstraMap+0x10d4>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012738:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801273c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012740:	881a      	ldrh	r2, [r3, #0]
 8012742:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012746:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801274a:	8819      	ldrh	r1, [r3, #0]
 801274c:	484a      	ldr	r0, [pc, #296]	; (8012878 <create_DijkstraMap+0x1150>)
 801274e:	4613      	mov	r3, r2
 8012750:	011b      	lsls	r3, r3, #4
 8012752:	1a9b      	subs	r3, r3, r2
 8012754:	440b      	add	r3, r1
 8012756:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801275a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801275e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012762:	881b      	ldrh	r3, [r3, #0]
 8012764:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012768:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801276c:	8812      	ldrh	r2, [r2, #0]
 801276e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012772:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012776:	8809      	ldrh	r1, [r1, #0]
 8012778:	3101      	adds	r1, #1
 801277a:	4403      	add	r3, r0
 801277c:	b29c      	uxth	r4, r3
 801277e:	483e      	ldr	r0, [pc, #248]	; (8012878 <create_DijkstraMap+0x1150>)
 8012780:	4613      	mov	r3, r2
 8012782:	011b      	lsls	r3, r3, #4
 8012784:	1a9b      	subs	r3, r3, r2
 8012786:	440b      	add	r3, r1
 8012788:	4622      	mov	r2, r4
 801278a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801278e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012792:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012796:	881b      	ldrh	r3, [r3, #0]
 8012798:	3301      	adds	r3, #1
 801279a:	b29a      	uxth	r2, r3
 801279c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80127a0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80127a4:	4611      	mov	r1, r2
 80127a6:	4618      	mov	r0, r3
 80127a8:	f002 fb14 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80127ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127b4:	881a      	ldrh	r2, [r3, #0]
 80127b6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80127ba:	f103 0320 	add.w	r3, r3, #32
 80127be:	3b0c      	subs	r3, #12
 80127c0:	4611      	mov	r1, r2
 80127c2:	4618      	mov	r0, r3
 80127c4:	f002 fb06 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80127c8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80127cc:	3b14      	subs	r3, #20
 80127ce:	2101      	movs	r1, #1
 80127d0:	4618      	mov	r0, r3
 80127d2:	f002 faff 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 80127d6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80127da:	3b3c      	subs	r3, #60	; 0x3c
 80127dc:	2102      	movs	r1, #2
 80127de:	4618      	mov	r0, r3
 80127e0:	f002 faf8 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80127e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127e8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80127ec:	881a      	ldrh	r2, [r3, #0]
 80127ee:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80127f2:	3b64      	subs	r3, #100	; 0x64
 80127f4:	4611      	mov	r1, r2
 80127f6:	4618      	mov	r0, r3
 80127f8:	f002 faec 	bl	8014dd4 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80127fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012800:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	2b00      	cmp	r3, #0
 8012808:	f000 80ee 	beq.w	80129e8 <create_DijkstraMap+0x12c0>
						if(Direction==SLANT_WEST){
 801280c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012810:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012814:	881b      	ldrh	r3, [r3, #0]
 8012816:	2b06      	cmp	r3, #6
 8012818:	d130      	bne.n	801287c <create_DijkstraMap+0x1154>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801281a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801281e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012822:	881b      	ldrh	r3, [r3, #0]
 8012824:	3301      	adds	r3, #1
 8012826:	b29b      	uxth	r3, r3
 8012828:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801282c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012830:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012832:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012836:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801283a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801283e:	2b04      	cmp	r3, #4
 8012840:	dd05      	ble.n	801284e <create_DijkstraMap+0x1126>
 8012842:	2304      	movs	r3, #4
 8012844:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012848:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801284c:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 801284e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012852:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012856:	f9b3 2000 	ldrsh.w	r2, [r3]
 801285a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801285e:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012862:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012866:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801286a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801286e:	8013      	strh	r3, [r2, #0]
 8012870:	e014      	b.n	801289c <create_DijkstraMap+0x1174>
 8012872:	bf00      	nop
 8012874:	20000c3c 	.word	0x20000c3c
 8012878:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 801287c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012880:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801288a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801288e:	8013      	strh	r3, [r2, #0]
 8012890:	2300      	movs	r3, #0
 8012892:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012896:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801289a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 801289c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128a0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128a4:	881b      	ldrh	r3, [r3, #0]
 80128a6:	3b01      	subs	r3, #1
 80128a8:	4a6d      	ldr	r2, [pc, #436]	; (8012a60 <create_DijkstraMap+0x1338>)
 80128aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80128ae:	461a      	mov	r2, r3
 80128b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128b4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128b8:	881b      	ldrh	r3, [r3, #0]
 80128ba:	fa42 f303 	asr.w	r3, r2, r3
 80128be:	f003 0301 	and.w	r3, r3, #1
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	f040 8090 	bne.w	80129e8 <create_DijkstraMap+0x12c0>
 80128c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128cc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128d0:	881a      	ldrh	r2, [r3, #0]
 80128d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128d6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128da:	881b      	ldrh	r3, [r3, #0]
 80128dc:	1e59      	subs	r1, r3, #1
 80128de:	4861      	ldr	r0, [pc, #388]	; (8012a64 <create_DijkstraMap+0x133c>)
 80128e0:	4613      	mov	r3, r2
 80128e2:	011b      	lsls	r3, r3, #4
 80128e4:	1a9b      	subs	r3, r3, r2
 80128e6:	440b      	add	r3, r1
 80128e8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80128ec:	461c      	mov	r4, r3
 80128ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128f2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128f6:	881a      	ldrh	r2, [r3, #0]
 80128f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128fc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012900:	8819      	ldrh	r1, [r3, #0]
 8012902:	4858      	ldr	r0, [pc, #352]	; (8012a64 <create_DijkstraMap+0x133c>)
 8012904:	4613      	mov	r3, r2
 8012906:	011b      	lsls	r3, r3, #4
 8012908:	1a9b      	subs	r3, r3, r2
 801290a:	440b      	add	r3, r1
 801290c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012910:	461a      	mov	r2, r3
 8012912:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012916:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801291a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801291e:	4413      	add	r3, r2
 8012920:	429c      	cmp	r4, r3
 8012922:	dd61      	ble.n	80129e8 <create_DijkstraMap+0x12c0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012924:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012928:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801292c:	881a      	ldrh	r2, [r3, #0]
 801292e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012932:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012936:	8819      	ldrh	r1, [r3, #0]
 8012938:	484a      	ldr	r0, [pc, #296]	; (8012a64 <create_DijkstraMap+0x133c>)
 801293a:	4613      	mov	r3, r2
 801293c:	011b      	lsls	r3, r3, #4
 801293e:	1a9b      	subs	r3, r3, r2
 8012940:	440b      	add	r3, r1
 8012942:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012946:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801294a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801294e:	881b      	ldrh	r3, [r3, #0]
 8012950:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012954:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012958:	8812      	ldrh	r2, [r2, #0]
 801295a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801295e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012962:	8809      	ldrh	r1, [r1, #0]
 8012964:	3901      	subs	r1, #1
 8012966:	4403      	add	r3, r0
 8012968:	b29c      	uxth	r4, r3
 801296a:	483e      	ldr	r0, [pc, #248]	; (8012a64 <create_DijkstraMap+0x133c>)
 801296c:	4613      	mov	r3, r2
 801296e:	011b      	lsls	r3, r3, #4
 8012970:	1a9b      	subs	r3, r3, r2
 8012972:	440b      	add	r3, r1
 8012974:	4622      	mov	r2, r4
 8012976:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 801297a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801297e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012982:	881b      	ldrh	r3, [r3, #0]
 8012984:	3b01      	subs	r3, #1
 8012986:	b29a      	uxth	r2, r3
 8012988:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801298c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012990:	4611      	mov	r1, r2
 8012992:	4618      	mov	r0, r3
 8012994:	f002 fa1e 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012998:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801299c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129a0:	881a      	ldrh	r2, [r3, #0]
 80129a2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80129a6:	f103 0320 	add.w	r3, r3, #32
 80129aa:	3b0c      	subs	r3, #12
 80129ac:	4611      	mov	r1, r2
 80129ae:	4618      	mov	r0, r3
 80129b0:	f002 fa10 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80129b4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80129b8:	3b14      	subs	r3, #20
 80129ba:	2101      	movs	r1, #1
 80129bc:	4618      	mov	r0, r3
 80129be:	f002 fa09 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80129c2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80129c6:	3b3c      	subs	r3, #60	; 0x3c
 80129c8:	2106      	movs	r1, #6
 80129ca:	4618      	mov	r0, r3
 80129cc:	f002 fa02 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80129d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129d4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129d8:	881a      	ldrh	r2, [r3, #0]
 80129da:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80129de:	3b64      	subs	r3, #100	; 0x64
 80129e0:	4611      	mov	r1, r2
 80129e2:	4618      	mov	r0, r3
 80129e4:	f002 f9f6 	bl	8014dd4 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80129e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ec:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129f0:	881b      	ldrh	r3, [r3, #0]
 80129f2:	2b0e      	cmp	r3, #14
 80129f4:	f200 81de 	bhi.w	8012db4 <create_DijkstraMap+0x168c>
						if(Direction==SLANT_NORTH_WEST){
 80129f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129fc:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	2b07      	cmp	r3, #7
 8012a04:	d130      	bne.n	8012a68 <create_DijkstraMap+0x1340>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a0a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	3301      	adds	r3, #1
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a18:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a1c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012a1e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a22:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a2a:	2b05      	cmp	r3, #5
 8012a2c:	dd05      	ble.n	8012a3a <create_DijkstraMap+0x1312>
 8012a2e:	2305      	movs	r3, #5
 8012a30:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a34:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a38:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012a3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a3e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012a46:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a4a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a4e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012a52:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a56:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a5a:	8013      	strh	r3, [r2, #0]
 8012a5c:	e014      	b.n	8012a88 <create_DijkstraMap+0x1360>
 8012a5e:	bf00      	nop
 8012a60:	20000c3c 	.word	0x20000c3c
 8012a64:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012a68:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a6c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a76:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a7a:	8013      	strh	r3, [r2, #0]
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a82:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a86:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012a88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a8c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a90:	881b      	ldrh	r3, [r3, #0]
 8012a92:	4a69      	ldr	r2, [pc, #420]	; (8012c38 <create_DijkstraMap+0x1510>)
 8012a94:	330c      	adds	r3, #12
 8012a96:	005b      	lsls	r3, r3, #1
 8012a98:	4413      	add	r3, r2
 8012a9a:	88db      	ldrh	r3, [r3, #6]
 8012a9c:	461a      	mov	r2, r3
 8012a9e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aa2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012aa6:	881b      	ldrh	r3, [r3, #0]
 8012aa8:	fa42 f303 	asr.w	r3, r2, r3
 8012aac:	f003 0301 	and.w	r3, r3, #1
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	f040 808e 	bne.w	8012bd2 <create_DijkstraMap+0x14aa>
 8012ab6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012abe:	881a      	ldrh	r2, [r3, #0]
 8012ac0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ac8:	8819      	ldrh	r1, [r3, #0]
 8012aca:	485c      	ldr	r0, [pc, #368]	; (8012c3c <create_DijkstraMap+0x1514>)
 8012acc:	4613      	mov	r3, r2
 8012ace:	011b      	lsls	r3, r3, #4
 8012ad0:	1a9b      	subs	r3, r3, r2
 8012ad2:	440b      	add	r3, r1
 8012ad4:	33f0      	adds	r3, #240	; 0xf0
 8012ad6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ada:	461c      	mov	r4, r3
 8012adc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ae0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ae4:	881a      	ldrh	r2, [r3, #0]
 8012ae6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aea:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012aee:	8819      	ldrh	r1, [r3, #0]
 8012af0:	4852      	ldr	r0, [pc, #328]	; (8012c3c <create_DijkstraMap+0x1514>)
 8012af2:	4613      	mov	r3, r2
 8012af4:	011b      	lsls	r3, r3, #4
 8012af6:	1a9b      	subs	r3, r3, r2
 8012af8:	440b      	add	r3, r1
 8012afa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012afe:	461a      	mov	r2, r3
 8012b00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b04:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b0c:	4413      	add	r3, r2
 8012b0e:	429c      	cmp	r4, r3
 8012b10:	dd5f      	ble.n	8012bd2 <create_DijkstraMap+0x14aa>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012b12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b16:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b1a:	881a      	ldrh	r2, [r3, #0]
 8012b1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b20:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b24:	8819      	ldrh	r1, [r3, #0]
 8012b26:	4845      	ldr	r0, [pc, #276]	; (8012c3c <create_DijkstraMap+0x1514>)
 8012b28:	4613      	mov	r3, r2
 8012b2a:	011b      	lsls	r3, r3, #4
 8012b2c:	1a9b      	subs	r3, r3, r2
 8012b2e:	440b      	add	r3, r1
 8012b30:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012b34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b38:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b3c:	881b      	ldrh	r3, [r3, #0]
 8012b3e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b42:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012b46:	8812      	ldrh	r2, [r2, #0]
 8012b48:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012b4c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012b50:	8809      	ldrh	r1, [r1, #0]
 8012b52:	4403      	add	r3, r0
 8012b54:	b29c      	uxth	r4, r3
 8012b56:	4839      	ldr	r0, [pc, #228]	; (8012c3c <create_DijkstraMap+0x1514>)
 8012b58:	4613      	mov	r3, r2
 8012b5a:	011b      	lsls	r3, r3, #4
 8012b5c:	1a9b      	subs	r3, r3, r2
 8012b5e:	440b      	add	r3, r1
 8012b60:	33f0      	adds	r3, #240	; 0xf0
 8012b62:	4622      	mov	r2, r4
 8012b64:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012b68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b6c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b70:	881a      	ldrh	r2, [r3, #0]
 8012b72:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012b76:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012b7a:	4611      	mov	r1, r2
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f002 f929 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012b82:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b86:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b8a:	881a      	ldrh	r2, [r3, #0]
 8012b8c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012b90:	f103 0320 	add.w	r3, r3, #32
 8012b94:	3b0c      	subs	r3, #12
 8012b96:	4611      	mov	r1, r2
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f002 f91b 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012b9e:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012ba2:	3b14      	subs	r3, #20
 8012ba4:	2100      	movs	r1, #0
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f002 f914 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012bac:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012bb0:	3b3c      	subs	r3, #60	; 0x3c
 8012bb2:	2107      	movs	r1, #7
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f002 f90d 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012bba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bbe:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012bc2:	881a      	ldrh	r2, [r3, #0]
 8012bc4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012bc8:	3b64      	subs	r3, #100	; 0x64
 8012bca:	4611      	mov	r1, r2
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f002 f901 	bl	8014dd4 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012bd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bd6:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012bda:	881b      	ldrh	r3, [r3, #0]
 8012bdc:	2b01      	cmp	r3, #1
 8012bde:	d12f      	bne.n	8012c40 <create_DijkstraMap+0x1518>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012be0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012be4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	3301      	adds	r3, #1
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bf2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012bf6:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012bf8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bfc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c04:	2b05      	cmp	r3, #5
 8012c06:	dd05      	ble.n	8012c14 <create_DijkstraMap+0x14ec>
 8012c08:	2305      	movs	r3, #5
 8012c0a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c0e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c12:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012c14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c18:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c1c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c20:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c24:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012c28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012c2c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c30:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012c34:	8013      	strh	r3, [r2, #0]
 8012c36:	e013      	b.n	8012c60 <create_DijkstraMap+0x1538>
 8012c38:	20000c3c 	.word	0x20000c3c
 8012c3c:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012c40:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c44:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012c48:	881b      	ldrh	r3, [r3, #0]
 8012c4a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c4e:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012c52:	8013      	strh	r3, [r2, #0]
 8012c54:	2300      	movs	r3, #0
 8012c56:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c5a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c5e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012c60:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c64:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c68:	881b      	ldrh	r3, [r3, #0]
 8012c6a:	4a70      	ldr	r2, [pc, #448]	; (8012e2c <create_DijkstraMap+0x1704>)
 8012c6c:	330c      	adds	r3, #12
 8012c6e:	005b      	lsls	r3, r3, #1
 8012c70:	4413      	add	r3, r2
 8012c72:	88db      	ldrh	r3, [r3, #6]
 8012c74:	461a      	mov	r2, r3
 8012c76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c7a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c7e:	881b      	ldrh	r3, [r3, #0]
 8012c80:	3301      	adds	r3, #1
 8012c82:	fa42 f303 	asr.w	r3, r2, r3
 8012c86:	f003 0301 	and.w	r3, r3, #1
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	f040 8092 	bne.w	8012db4 <create_DijkstraMap+0x168c>
 8012c90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c94:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	1c5a      	adds	r2, r3, #1
 8012c9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ca0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ca4:	8819      	ldrh	r1, [r3, #0]
 8012ca6:	4862      	ldr	r0, [pc, #392]	; (8012e30 <create_DijkstraMap+0x1708>)
 8012ca8:	4613      	mov	r3, r2
 8012caa:	011b      	lsls	r3, r3, #4
 8012cac:	1a9b      	subs	r3, r3, r2
 8012cae:	440b      	add	r3, r1
 8012cb0:	33f0      	adds	r3, #240	; 0xf0
 8012cb2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012cb6:	461c      	mov	r4, r3
 8012cb8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cbc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012cc0:	881a      	ldrh	r2, [r3, #0]
 8012cc2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cc6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cca:	8819      	ldrh	r1, [r3, #0]
 8012ccc:	4858      	ldr	r0, [pc, #352]	; (8012e30 <create_DijkstraMap+0x1708>)
 8012cce:	4613      	mov	r3, r2
 8012cd0:	011b      	lsls	r3, r3, #4
 8012cd2:	1a9b      	subs	r3, r3, r2
 8012cd4:	440b      	add	r3, r1
 8012cd6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012cda:	461a      	mov	r2, r3
 8012cdc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ce0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ce8:	4413      	add	r3, r2
 8012cea:	429c      	cmp	r4, r3
 8012cec:	dd62      	ble.n	8012db4 <create_DijkstraMap+0x168c>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012cee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012cf6:	881a      	ldrh	r2, [r3, #0]
 8012cf8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cfc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d00:	8819      	ldrh	r1, [r3, #0]
 8012d02:	484b      	ldr	r0, [pc, #300]	; (8012e30 <create_DijkstraMap+0x1708>)
 8012d04:	4613      	mov	r3, r2
 8012d06:	011b      	lsls	r3, r3, #4
 8012d08:	1a9b      	subs	r3, r3, r2
 8012d0a:	440b      	add	r3, r1
 8012d0c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012d10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d14:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d18:	881b      	ldrh	r3, [r3, #0]
 8012d1a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d1e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012d22:	8812      	ldrh	r2, [r2, #0]
 8012d24:	3201      	adds	r2, #1
 8012d26:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012d2a:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012d2e:	8809      	ldrh	r1, [r1, #0]
 8012d30:	4403      	add	r3, r0
 8012d32:	b29c      	uxth	r4, r3
 8012d34:	483e      	ldr	r0, [pc, #248]	; (8012e30 <create_DijkstraMap+0x1708>)
 8012d36:	4613      	mov	r3, r2
 8012d38:	011b      	lsls	r3, r3, #4
 8012d3a:	1a9b      	subs	r3, r3, r2
 8012d3c:	440b      	add	r3, r1
 8012d3e:	33f0      	adds	r3, #240	; 0xf0
 8012d40:	4622      	mov	r2, r4
 8012d42:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012d46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d4a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	3301      	adds	r3, #1
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012d58:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012d5c:	4611      	mov	r1, r2
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f002 f838 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012d64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d68:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d6c:	881a      	ldrh	r2, [r3, #0]
 8012d6e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012d72:	f103 0320 	add.w	r3, r3, #32
 8012d76:	3b0c      	subs	r3, #12
 8012d78:	4611      	mov	r1, r2
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	f002 f82a 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012d80:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012d84:	3b14      	subs	r3, #20
 8012d86:	2100      	movs	r1, #0
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f002 f823 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012d8e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012d92:	3b3c      	subs	r3, #60	; 0x3c
 8012d94:	2101      	movs	r1, #1
 8012d96:	4618      	mov	r0, r3
 8012d98:	f002 f81c 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012d9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012da0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012da4:	881a      	ldrh	r2, [r3, #0]
 8012da6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012daa:	3b64      	subs	r3, #100	; 0x64
 8012dac:	4611      	mov	r1, r2
 8012dae:	4618      	mov	r0, r3
 8012db0:	f002 f810 	bl	8014dd4 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012db4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012db8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012dbc:	881b      	ldrh	r3, [r3, #0]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	f000 81e4 	beq.w	801318c <create_DijkstraMap+0x1a64>
						if(Direction==SLANT_SOUTH_WEST){
 8012dc4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dc8:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012dcc:	881b      	ldrh	r3, [r3, #0]
 8012dce:	2b05      	cmp	r3, #5
 8012dd0:	d130      	bne.n	8012e34 <create_DijkstraMap+0x170c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012dd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dd6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012dda:	881b      	ldrh	r3, [r3, #0]
 8012ddc:	3301      	adds	r3, #1
 8012dde:	b29b      	uxth	r3, r3
 8012de0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012de4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012de8:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012dea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dee:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012df6:	2b05      	cmp	r3, #5
 8012df8:	dd05      	ble.n	8012e06 <create_DijkstraMap+0x16de>
 8012dfa:	2305      	movs	r3, #5
 8012dfc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e00:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e04:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012e06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e0a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e0e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e12:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e16:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012e1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012e1e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e22:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012e26:	8013      	strh	r3, [r2, #0]
 8012e28:	e014      	b.n	8012e54 <create_DijkstraMap+0x172c>
 8012e2a:	bf00      	nop
 8012e2c:	20000c3c 	.word	0x20000c3c
 8012e30:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012e34:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e38:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012e3c:	881b      	ldrh	r3, [r3, #0]
 8012e3e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e42:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012e46:	8013      	strh	r3, [r2, #0]
 8012e48:	2300      	movs	r3, #0
 8012e4a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e4e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e52:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012e54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e58:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e5c:	881b      	ldrh	r3, [r3, #0]
 8012e5e:	3b01      	subs	r3, #1
 8012e60:	4ad4      	ldr	r2, [pc, #848]	; (80131b4 <create_DijkstraMap+0x1a8c>)
 8012e62:	330c      	adds	r3, #12
 8012e64:	005b      	lsls	r3, r3, #1
 8012e66:	4413      	add	r3, r2
 8012e68:	88db      	ldrh	r3, [r3, #6]
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e70:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	fa42 f303 	asr.w	r3, r2, r3
 8012e7a:	f003 0301 	and.w	r3, r3, #1
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	f040 8092 	bne.w	8012fa8 <create_DijkstraMap+0x1880>
 8012e84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e88:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e8c:	881a      	ldrh	r2, [r3, #0]
 8012e8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e92:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e96:	881b      	ldrh	r3, [r3, #0]
 8012e98:	1e59      	subs	r1, r3, #1
 8012e9a:	48c7      	ldr	r0, [pc, #796]	; (80131b8 <create_DijkstraMap+0x1a90>)
 8012e9c:	4613      	mov	r3, r2
 8012e9e:	011b      	lsls	r3, r3, #4
 8012ea0:	1a9b      	subs	r3, r3, r2
 8012ea2:	440b      	add	r3, r1
 8012ea4:	33f0      	adds	r3, #240	; 0xf0
 8012ea6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012eaa:	461c      	mov	r4, r3
 8012eac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eb0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012eb4:	881a      	ldrh	r2, [r3, #0]
 8012eb6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ebe:	8819      	ldrh	r1, [r3, #0]
 8012ec0:	48bd      	ldr	r0, [pc, #756]	; (80131b8 <create_DijkstraMap+0x1a90>)
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	011b      	lsls	r3, r3, #4
 8012ec6:	1a9b      	subs	r3, r3, r2
 8012ec8:	440b      	add	r3, r1
 8012eca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ece:	461a      	mov	r2, r3
 8012ed0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ed4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012edc:	4413      	add	r3, r2
 8012ede:	429c      	cmp	r4, r3
 8012ee0:	dd62      	ble.n	8012fa8 <create_DijkstraMap+0x1880>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012ee2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ee6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012eea:	881a      	ldrh	r2, [r3, #0]
 8012eec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ef0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ef4:	8819      	ldrh	r1, [r3, #0]
 8012ef6:	48b0      	ldr	r0, [pc, #704]	; (80131b8 <create_DijkstraMap+0x1a90>)
 8012ef8:	4613      	mov	r3, r2
 8012efa:	011b      	lsls	r3, r3, #4
 8012efc:	1a9b      	subs	r3, r3, r2
 8012efe:	440b      	add	r3, r1
 8012f00:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012f04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f08:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012f0c:	881b      	ldrh	r3, [r3, #0]
 8012f0e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f12:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012f16:	8812      	ldrh	r2, [r2, #0]
 8012f18:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012f1c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012f20:	8809      	ldrh	r1, [r1, #0]
 8012f22:	3901      	subs	r1, #1
 8012f24:	4403      	add	r3, r0
 8012f26:	b29c      	uxth	r4, r3
 8012f28:	48a3      	ldr	r0, [pc, #652]	; (80131b8 <create_DijkstraMap+0x1a90>)
 8012f2a:	4613      	mov	r3, r2
 8012f2c:	011b      	lsls	r3, r3, #4
 8012f2e:	1a9b      	subs	r3, r3, r2
 8012f30:	440b      	add	r3, r1
 8012f32:	33f0      	adds	r3, #240	; 0xf0
 8012f34:	4622      	mov	r2, r4
 8012f36:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012f3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f3e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f42:	881a      	ldrh	r2, [r3, #0]
 8012f44:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012f48:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012f4c:	4611      	mov	r1, r2
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f001 ff40 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012f54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f58:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f5c:	881b      	ldrh	r3, [r3, #0]
 8012f5e:	3b01      	subs	r3, #1
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012f66:	f103 0320 	add.w	r3, r3, #32
 8012f6a:	3b0c      	subs	r3, #12
 8012f6c:	4611      	mov	r1, r2
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f001 ff30 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012f74:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012f78:	3b14      	subs	r3, #20
 8012f7a:	2100      	movs	r1, #0
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f001 ff29 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012f82:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012f86:	3b3c      	subs	r3, #60	; 0x3c
 8012f88:	2105      	movs	r1, #5
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f001 ff22 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012f90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f94:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f98:	881a      	ldrh	r2, [r3, #0]
 8012f9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f9e:	3b64      	subs	r3, #100	; 0x64
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f001 ff16 	bl	8014dd4 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012fa8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fac:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012fb0:	881b      	ldrh	r3, [r3, #0]
 8012fb2:	2b03      	cmp	r3, #3
 8012fb4:	d12b      	bne.n	801300e <create_DijkstraMap+0x18e6>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012fb6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fba:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fc8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012fcc:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012fce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fd2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fda:	2b05      	cmp	r3, #5
 8012fdc:	dd05      	ble.n	8012fea <create_DijkstraMap+0x18c2>
 8012fde:	2305      	movs	r3, #5
 8012fe0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fe4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012fe8:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012fea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fee:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ff2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ff6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ffa:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012ffe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013002:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013006:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801300a:	8013      	strh	r3, [r2, #0]
 801300c:	e00f      	b.n	801302e <create_DijkstraMap+0x1906>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801300e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013012:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013016:	881b      	ldrh	r3, [r3, #0]
 8013018:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801301c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8013020:	8013      	strh	r3, [r2, #0]
 8013022:	2300      	movs	r3, #0
 8013024:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013028:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801302c:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 801302e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013032:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013036:	881b      	ldrh	r3, [r3, #0]
 8013038:	3b01      	subs	r3, #1
 801303a:	4a5e      	ldr	r2, [pc, #376]	; (80131b4 <create_DijkstraMap+0x1a8c>)
 801303c:	330c      	adds	r3, #12
 801303e:	005b      	lsls	r3, r3, #1
 8013040:	4413      	add	r3, r2
 8013042:	88db      	ldrh	r3, [r3, #6]
 8013044:	461a      	mov	r2, r3
 8013046:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801304a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801304e:	881b      	ldrh	r3, [r3, #0]
 8013050:	3301      	adds	r3, #1
 8013052:	fa42 f303 	asr.w	r3, r2, r3
 8013056:	f003 0301 	and.w	r3, r3, #1
 801305a:	2b00      	cmp	r3, #0
 801305c:	f040 8096 	bne.w	801318c <create_DijkstraMap+0x1a64>
 8013060:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013064:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	1c5a      	adds	r2, r3, #1
 801306c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013070:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013074:	881b      	ldrh	r3, [r3, #0]
 8013076:	1e59      	subs	r1, r3, #1
 8013078:	484f      	ldr	r0, [pc, #316]	; (80131b8 <create_DijkstraMap+0x1a90>)
 801307a:	4613      	mov	r3, r2
 801307c:	011b      	lsls	r3, r3, #4
 801307e:	1a9b      	subs	r3, r3, r2
 8013080:	440b      	add	r3, r1
 8013082:	33f0      	adds	r3, #240	; 0xf0
 8013084:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013088:	461c      	mov	r4, r3
 801308a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801308e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013092:	881a      	ldrh	r2, [r3, #0]
 8013094:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013098:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801309c:	8819      	ldrh	r1, [r3, #0]
 801309e:	4846      	ldr	r0, [pc, #280]	; (80131b8 <create_DijkstraMap+0x1a90>)
 80130a0:	4613      	mov	r3, r2
 80130a2:	011b      	lsls	r3, r3, #4
 80130a4:	1a9b      	subs	r3, r3, r2
 80130a6:	440b      	add	r3, r1
 80130a8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80130ac:	461a      	mov	r2, r3
 80130ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130b2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80130b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80130ba:	4413      	add	r3, r2
 80130bc:	429c      	cmp	r4, r3
 80130be:	dd65      	ble.n	801318c <create_DijkstraMap+0x1a64>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80130c0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130c4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80130c8:	881a      	ldrh	r2, [r3, #0]
 80130ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130ce:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130d2:	8819      	ldrh	r1, [r3, #0]
 80130d4:	4838      	ldr	r0, [pc, #224]	; (80131b8 <create_DijkstraMap+0x1a90>)
 80130d6:	4613      	mov	r3, r2
 80130d8:	011b      	lsls	r3, r3, #4
 80130da:	1a9b      	subs	r3, r3, r2
 80130dc:	440b      	add	r3, r1
 80130de:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80130e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130e6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80130ea:	881b      	ldrh	r3, [r3, #0]
 80130ec:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130f0:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80130f4:	8812      	ldrh	r2, [r2, #0]
 80130f6:	3201      	adds	r2, #1
 80130f8:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80130fc:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013100:	8809      	ldrh	r1, [r1, #0]
 8013102:	3901      	subs	r1, #1
 8013104:	4403      	add	r3, r0
 8013106:	b29c      	uxth	r4, r3
 8013108:	482b      	ldr	r0, [pc, #172]	; (80131b8 <create_DijkstraMap+0x1a90>)
 801310a:	4613      	mov	r3, r2
 801310c:	011b      	lsls	r3, r3, #4
 801310e:	1a9b      	subs	r3, r3, r2
 8013110:	440b      	add	r3, r1
 8013112:	33f0      	adds	r3, #240	; 0xf0
 8013114:	4622      	mov	r2, r4
 8013116:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 801311a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801311e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013122:	881b      	ldrh	r3, [r3, #0]
 8013124:	3301      	adds	r3, #1
 8013126:	b29a      	uxth	r2, r3
 8013128:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801312c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f001 fe4e 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8013138:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801313c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	3b01      	subs	r3, #1
 8013144:	b29a      	uxth	r2, r3
 8013146:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801314a:	f103 0320 	add.w	r3, r3, #32
 801314e:	3b0c      	subs	r3, #12
 8013150:	4611      	mov	r1, r2
 8013152:	4618      	mov	r0, r3
 8013154:	f001 fe3e 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8013158:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801315c:	3b14      	subs	r3, #20
 801315e:	2100      	movs	r1, #0
 8013160:	4618      	mov	r0, r3
 8013162:	f001 fe37 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8013166:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801316a:	3b3c      	subs	r3, #60	; 0x3c
 801316c:	2103      	movs	r1, #3
 801316e:	4618      	mov	r0, r3
 8013170:	f001 fe30 	bl	8014dd4 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013174:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013178:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801317c:	881a      	ldrh	r2, [r3, #0]
 801317e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013182:	3b64      	subs	r3, #100	; 0x64
 8013184:	4611      	mov	r1, r2
 8013186:	4618      	mov	r0, r3
 8013188:	f001 fe24 	bl	8014dd4 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 801318c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013190:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8013194:	881b      	ldrh	r3, [r3, #0]
 8013196:	3301      	adds	r3, #1
 8013198:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801319c:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80131a0:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 80131a2:	f7fe bc0e 	b.w	80119c2 <create_DijkstraMap+0x29a>

		}



}
 80131a6:	bf00      	nop
 80131a8:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 80131ac:	3704      	adds	r7, #4
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd90      	pop	{r4, r7, pc}
 80131b2:	bf00      	nop
 80131b4:	20000c3c 	.word	0x20000c3c
 80131b8:	20000f30 	.word	0x20000f30

080131bc <route_Dijkstra>:





void route_Dijkstra(void){
 80131bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131be:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 80131c2:	b089      	sub	sp, #36	; 0x24
 80131c4:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 80131c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131ca:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80131ce:	4618      	mov	r0, r3
 80131d0:	f001 fdf0 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_y);
 80131d4:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80131d8:	f103 0310 	add.w	r3, r3, #16
 80131dc:	3b1c      	subs	r3, #28
 80131de:	4618      	mov	r0, r3
 80131e0:	f001 fde8 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_matrix);
 80131e4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131e8:	f103 0310 	add.w	r3, r3, #16
 80131ec:	3b04      	subs	r3, #4
 80131ee:	4618      	mov	r0, r3
 80131f0:	f001 fde0 	bl	8014db4 <initStack_walk>
	initStack_walk(&g_Goal_x);
 80131f4:	48ce      	ldr	r0, [pc, #824]	; (8013530 <route_Dijkstra+0x374>)
 80131f6:	f001 fddd 	bl	8014db4 <initStack_walk>
	initStack_walk(&g_Goal_y);
 80131fa:	48ce      	ldr	r0, [pc, #824]	; (8013534 <route_Dijkstra+0x378>)
 80131fc:	f001 fdda 	bl	8014db4 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013200:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013204:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013208:	2100      	movs	r1, #0
 801320a:	4618      	mov	r0, r3
 801320c:	f001 fde2 	bl	8014dd4 <pushStack_walk>
 8013210:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013214:	f103 0310 	add.w	r3, r3, #16
 8013218:	3b1c      	subs	r3, #28
 801321a:	2100      	movs	r1, #0
 801321c:	4618      	mov	r0, r3
 801321e:	f001 fdd9 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8013222:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013226:	f103 0310 	add.w	r3, r3, #16
 801322a:	3b04      	subs	r3, #4
 801322c:	2100      	movs	r1, #0
 801322e:	4618      	mov	r0, r3
 8013230:	f001 fdd0 	bl	8014dd4 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8013234:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013238:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801323c:	2200      	movs	r2, #0
 801323e:	601a      	str	r2, [r3, #0]
	int y = 0;
 8013240:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013244:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013248:	2200      	movs	r2, #0
 801324a:	601a      	str	r2, [r3, #0]
	int direction = 1;
 801324c:	2301      	movs	r3, #1
 801324e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013252:	f102 020c 	add.w	r2, r2, #12
 8013256:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8013258:	f107 0110 	add.w	r1, r7, #16
 801325c:	3910      	subs	r1, #16
 801325e:	f107 0310 	add.w	r3, r7, #16
 8013262:	3b0c      	subs	r3, #12
 8013264:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013268:	f102 020c 	add.w	r2, r2, #12
 801326c:	6812      	ldr	r2, [r2, #0]
 801326e:	4618      	mov	r0, r3
 8013270:	f7fa fe50 	bl	800df14 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8013274:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013278:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	2b0b      	cmp	r3, #11
 8013280:	d006      	beq.n	8013290 <route_Dijkstra+0xd4>
 8013282:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013286:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	2b0c      	cmp	r3, #12
 801328e:	d10f      	bne.n	80132b0 <route_Dijkstra+0xf4>
 8013290:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013294:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2b0a      	cmp	r3, #10
 801329c:	f000 837b 	beq.w	8013996 <route_Dijkstra+0x7da>
 80132a0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132a4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	2b0b      	cmp	r3, #11
 80132ac:	f000 8373 	beq.w	8013996 <route_Dijkstra+0x7da>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 80132b0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132b4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132b8:	6818      	ldr	r0, [r3, #0]
 80132ba:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132be:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80132c2:	6819      	ldr	r1, [r3, #0]
 80132c4:	f107 0210 	add.w	r2, r7, #16
 80132c8:	3a05      	subs	r2, #5
 80132ca:	f107 0310 	add.w	r3, r7, #16
 80132ce:	3b07      	subs	r3, #7
 80132d0:	9301      	str	r3, [sp, #4]
 80132d2:	f107 0310 	add.w	r3, r7, #16
 80132d6:	3b06      	subs	r3, #6
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	4613      	mov	r3, r2
 80132dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80132e0:	f102 020c 	add.w	r2, r2, #12
 80132e4:	6812      	ldr	r2, [r2, #0]
 80132e6:	f7fd fe03 	bl	8010ef0 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 80132ea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132ee:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132f2:	6819      	ldr	r1, [r3, #0]
 80132f4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132f8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80132fc:	681c      	ldr	r4, [r3, #0]
 80132fe:	f107 0310 	add.w	r3, r7, #16
 8013302:	3b04      	subs	r3, #4
 8013304:	f107 0210 	add.w	r2, r7, #16
 8013308:	3a02      	subs	r2, #2
 801330a:	f107 0610 	add.w	r6, r7, #16
 801330e:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8013312:	387e      	subs	r0, #126	; 0x7e
 8013314:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8013318:	f105 050c 	add.w	r5, r5, #12
 801331c:	682d      	ldr	r5, [r5, #0]
 801331e:	9502      	str	r5, [sp, #8]
 8013320:	9401      	str	r4, [sp, #4]
 8013322:	9100      	str	r1, [sp, #0]
 8013324:	4631      	mov	r1, r6
 8013326:	f7fe f965 	bl	80115f4 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 801332a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801332e:	f6a3 6305 	subw	r3, r3, #3589	; 0xe05
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d006      	beq.n	8013346 <route_Dijkstra+0x18a>
 8013338:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801333c:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013344:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013346:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801334a:	f6a3 6306 	subw	r3, r3, #3590	; 0xe06
 801334e:	781b      	ldrb	r3, [r3, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d006      	beq.n	8013362 <route_Dijkstra+0x1a6>
 8013354:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013358:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801335c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013360:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013362:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013366:	f6a3 6307 	subw	r3, r3, #3591	; 0xe07
 801336a:	781b      	ldrb	r3, [r3, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d006      	beq.n	801337e <route_Dijkstra+0x1c2>
 8013370:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013374:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801337c:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 801337e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013382:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013386:	881b      	ldrh	r3, [r3, #0]
 8013388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801338c:	4293      	cmp	r3, r2
 801338e:	d11b      	bne.n	80133c8 <route_Dijkstra+0x20c>
 8013390:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013394:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801339e:	4293      	cmp	r3, r2
 80133a0:	d112      	bne.n	80133c8 <route_Dijkstra+0x20c>
 80133a2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133a6:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80133aa:	881b      	ldrh	r3, [r3, #0]
 80133ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d109      	bne.n	80133c8 <route_Dijkstra+0x20c>
 80133b4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133b8:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80133bc:	881b      	ldrh	r3, [r3, #0]
 80133be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133c2:	4293      	cmp	r3, r2
 80133c4:	f000 82e6 	beq.w	8013994 <route_Dijkstra+0x7d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80133c8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133cc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80133d0:	881a      	ldrh	r2, [r3, #0]
 80133d2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133d6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	429a      	cmp	r2, r3
 80133de:	f200 80d4 	bhi.w	801358a <route_Dijkstra+0x3ce>
 80133e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133e6:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80133ea:	881a      	ldrh	r2, [r3, #0]
 80133ec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133f0:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80133f4:	881b      	ldrh	r3, [r3, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	f200 80c7 	bhi.w	801358a <route_Dijkstra+0x3ce>
 80133fc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013400:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013404:	881a      	ldrh	r2, [r3, #0]
 8013406:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801340a:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 801340e:	881b      	ldrh	r3, [r3, #0]
 8013410:	429a      	cmp	r2, r3
 8013412:	f200 80ba 	bhi.w	801358a <route_Dijkstra+0x3ce>
			// 直進
			switch (direction) {		//
 8013416:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801341a:	f103 030c 	add.w	r3, r3, #12
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	3b01      	subs	r3, #1
 8013422:	2b03      	cmp	r3, #3
 8013424:	f200 80b2 	bhi.w	801358c <route_Dijkstra+0x3d0>
 8013428:	a201      	add	r2, pc, #4	; (adr r2, 8013430 <route_Dijkstra+0x274>)
 801342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801342e:	bf00      	nop
 8013430:	08013441 	.word	0x08013441
 8013434:	0801348f 	.word	0x0801348f
 8013438:	080134dd 	.word	0x080134dd
 801343c:	08013539 	.word	0x08013539
			case 1:
				pushStack_walk(&stack_x,x);
 8013440:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013444:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	b29a      	uxth	r2, r3
 801344c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013450:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013454:	4611      	mov	r1, r2
 8013456:	4618      	mov	r0, r3
 8013458:	f001 fcbc 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801345c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013460:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	b29a      	uxth	r2, r3
 8013468:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801346c:	f103 0310 	add.w	r3, r3, #16
 8013470:	3b1c      	subs	r3, #28
 8013472:	4611      	mov	r1, r2
 8013474:	4618      	mov	r0, r3
 8013476:	f001 fcad 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801347a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801347e:	f103 0310 	add.w	r3, r3, #16
 8013482:	3b04      	subs	r3, #4
 8013484:	2100      	movs	r1, #0
 8013486:	4618      	mov	r0, r3
 8013488:	f001 fca4 	bl	8014dd4 <pushStack_walk>
				break;
 801348c:	e07e      	b.n	801358c <route_Dijkstra+0x3d0>
			case 2:
				pushStack_walk(&stack_x,x);
 801348e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013492:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	b29a      	uxth	r2, r3
 801349a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801349e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134a2:	4611      	mov	r1, r2
 80134a4:	4618      	mov	r0, r3
 80134a6:	f001 fc95 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134aa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134ae:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	b29a      	uxth	r2, r3
 80134b6:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80134ba:	f103 0310 	add.w	r3, r3, #16
 80134be:	3b1c      	subs	r3, #28
 80134c0:	4611      	mov	r1, r2
 80134c2:	4618      	mov	r0, r3
 80134c4:	f001 fc86 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134c8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134cc:	f103 0310 	add.w	r3, r3, #16
 80134d0:	3b04      	subs	r3, #4
 80134d2:	2101      	movs	r1, #1
 80134d4:	4618      	mov	r0, r3
 80134d6:	f001 fc7d 	bl	8014dd4 <pushStack_walk>
				break;
 80134da:	e057      	b.n	801358c <route_Dijkstra+0x3d0>
			case 3:
				pushStack_walk(&stack_x,x);
 80134dc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134e0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	b29a      	uxth	r2, r3
 80134e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134ec:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134f0:	4611      	mov	r1, r2
 80134f2:	4618      	mov	r0, r3
 80134f4:	f001 fc6e 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80134f8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134fc:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013500:	681b      	ldr	r3, [r3, #0]
 8013502:	b29b      	uxth	r3, r3
 8013504:	3b01      	subs	r3, #1
 8013506:	b29a      	uxth	r2, r3
 8013508:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801350c:	f103 0310 	add.w	r3, r3, #16
 8013510:	3b1c      	subs	r3, #28
 8013512:	4611      	mov	r1, r2
 8013514:	4618      	mov	r0, r3
 8013516:	f001 fc5d 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801351a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801351e:	f103 0310 	add.w	r3, r3, #16
 8013522:	3b04      	subs	r3, #4
 8013524:	2100      	movs	r1, #0
 8013526:	4618      	mov	r0, r3
 8013528:	f001 fc54 	bl	8014dd4 <pushStack_walk>
				break;
 801352c:	e02e      	b.n	801358c <route_Dijkstra+0x3d0>
 801352e:	bf00      	nop
 8013530:	200012f0 	.word	0x200012f0
 8013534:	20002298 	.word	0x20002298
			case 4:
				pushStack_walk(&stack_x,x-1);
 8013538:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801353c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	b29b      	uxth	r3, r3
 8013544:	3b01      	subs	r3, #1
 8013546:	b29a      	uxth	r2, r3
 8013548:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801354c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013550:	4611      	mov	r1, r2
 8013552:	4618      	mov	r0, r3
 8013554:	f001 fc3e 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013558:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801355c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	b29a      	uxth	r2, r3
 8013564:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013568:	f103 0310 	add.w	r3, r3, #16
 801356c:	3b1c      	subs	r3, #28
 801356e:	4611      	mov	r1, r2
 8013570:	4618      	mov	r0, r3
 8013572:	f001 fc2f 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013576:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801357a:	f103 0310 	add.w	r3, r3, #16
 801357e:	3b04      	subs	r3, #4
 8013580:	2101      	movs	r1, #1
 8013582:	4618      	mov	r0, r3
 8013584:	f001 fc26 	bl	8014dd4 <pushStack_walk>
				break;
 8013588:	e000      	b.n	801358c <route_Dijkstra+0x3d0>
			}

		}
 801358a:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801358c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013590:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013594:	881a      	ldrh	r2, [r3, #0]
 8013596:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801359a:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	f080 80da 	bcs.w	801375a <route_Dijkstra+0x59e>
 80135a6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135aa:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80135ae:	881a      	ldrh	r2, [r3, #0]
 80135b0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135b4:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80135b8:	881b      	ldrh	r3, [r3, #0]
 80135ba:	429a      	cmp	r2, r3
 80135bc:	f200 80cd 	bhi.w	801375a <route_Dijkstra+0x59e>
 80135c0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135c4:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80135c8:	881a      	ldrh	r2, [r3, #0]
 80135ca:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135ce:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80135d2:	881b      	ldrh	r3, [r3, #0]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	f200 80c0 	bhi.w	801375a <route_Dijkstra+0x59e>
			// 右旋回
			switch (direction) {		//
 80135da:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135de:	f103 030c 	add.w	r3, r3, #12
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	3b01      	subs	r3, #1
 80135e6:	2b03      	cmp	r3, #3
 80135e8:	f200 80ac 	bhi.w	8013744 <route_Dijkstra+0x588>
 80135ec:	a201      	add	r2, pc, #4	; (adr r2, 80135f4 <route_Dijkstra+0x438>)
 80135ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135f2:	bf00      	nop
 80135f4:	08013605 	.word	0x08013605
 80135f8:	08013653 	.word	0x08013653
 80135fc:	080136a5 	.word	0x080136a5
 8013600:	080136f7 	.word	0x080136f7
			case 1:
				pushStack_walk(&stack_x,x);
 8013604:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013608:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	b29a      	uxth	r2, r3
 8013610:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013614:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013618:	4611      	mov	r1, r2
 801361a:	4618      	mov	r0, r3
 801361c:	f001 fbda 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013620:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013624:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013628:	681b      	ldr	r3, [r3, #0]
 801362a:	b29a      	uxth	r2, r3
 801362c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013630:	f103 0310 	add.w	r3, r3, #16
 8013634:	3b1c      	subs	r3, #28
 8013636:	4611      	mov	r1, r2
 8013638:	4618      	mov	r0, r3
 801363a:	f001 fbcb 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801363e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013642:	f103 0310 	add.w	r3, r3, #16
 8013646:	3b04      	subs	r3, #4
 8013648:	2101      	movs	r1, #1
 801364a:	4618      	mov	r0, r3
 801364c:	f001 fbc2 	bl	8014dd4 <pushStack_walk>
				break;
 8013650:	e078      	b.n	8013744 <route_Dijkstra+0x588>
			case 2:
				pushStack_walk(&stack_x,x);
 8013652:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013656:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	b29a      	uxth	r2, r3
 801365e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013662:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013666:	4611      	mov	r1, r2
 8013668:	4618      	mov	r0, r3
 801366a:	f001 fbb3 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801366e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013672:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	b29b      	uxth	r3, r3
 801367a:	3b01      	subs	r3, #1
 801367c:	b29a      	uxth	r2, r3
 801367e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013682:	f103 0310 	add.w	r3, r3, #16
 8013686:	3b1c      	subs	r3, #28
 8013688:	4611      	mov	r1, r2
 801368a:	4618      	mov	r0, r3
 801368c:	f001 fba2 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013690:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013694:	f103 0310 	add.w	r3, r3, #16
 8013698:	3b04      	subs	r3, #4
 801369a:	2100      	movs	r1, #0
 801369c:	4618      	mov	r0, r3
 801369e:	f001 fb99 	bl	8014dd4 <pushStack_walk>
				break;
 80136a2:	e04f      	b.n	8013744 <route_Dijkstra+0x588>
			case 3:
				pushStack_walk(&stack_x,x-1);
 80136a4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136a8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	3b01      	subs	r3, #1
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136b8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80136bc:	4611      	mov	r1, r2
 80136be:	4618      	mov	r0, r3
 80136c0:	f001 fb88 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136c4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136c8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	b29a      	uxth	r2, r3
 80136d0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80136d4:	f103 0310 	add.w	r3, r3, #16
 80136d8:	3b1c      	subs	r3, #28
 80136da:	4611      	mov	r1, r2
 80136dc:	4618      	mov	r0, r3
 80136de:	f001 fb79 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80136e2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80136e6:	f103 0310 	add.w	r3, r3, #16
 80136ea:	3b04      	subs	r3, #4
 80136ec:	2101      	movs	r1, #1
 80136ee:	4618      	mov	r0, r3
 80136f0:	f001 fb70 	bl	8014dd4 <pushStack_walk>
				break;
 80136f4:	e026      	b.n	8013744 <route_Dijkstra+0x588>
			case 4:
				pushStack_walk(&stack_x,x);
 80136f6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136fa:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	b29a      	uxth	r2, r3
 8013702:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013706:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801370a:	4611      	mov	r1, r2
 801370c:	4618      	mov	r0, r3
 801370e:	f001 fb61 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013712:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013716:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	b29a      	uxth	r2, r3
 801371e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013722:	f103 0310 	add.w	r3, r3, #16
 8013726:	3b1c      	subs	r3, #28
 8013728:	4611      	mov	r1, r2
 801372a:	4618      	mov	r0, r3
 801372c:	f001 fb52 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013730:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013734:	f103 0310 	add.w	r3, r3, #16
 8013738:	3b04      	subs	r3, #4
 801373a:	2100      	movs	r1, #0
 801373c:	4618      	mov	r0, r3
 801373e:	f001 fb49 	bl	8014dd4 <pushStack_walk>
				break;
 8013742:	bf00      	nop
			}
			direction++;
 8013744:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013748:	f103 030c 	add.w	r3, r3, #12
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	3301      	adds	r3, #1
 8013750:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013754:	f102 020c 	add.w	r2, r2, #12
 8013758:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801375a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801375e:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013762:	881a      	ldrh	r2, [r3, #0]
 8013764:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013768:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801376c:	881b      	ldrh	r3, [r3, #0]
 801376e:	429a      	cmp	r2, r3
 8013770:	f080 80d9 	bcs.w	8013926 <route_Dijkstra+0x76a>
 8013774:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013778:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801377c:	881a      	ldrh	r2, [r3, #0]
 801377e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013782:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013786:	881b      	ldrh	r3, [r3, #0]
 8013788:	429a      	cmp	r2, r3
 801378a:	f080 80cc 	bcs.w	8013926 <route_Dijkstra+0x76a>
 801378e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013792:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013796:	881a      	ldrh	r2, [r3, #0]
 8013798:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801379c:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80137a0:	881b      	ldrh	r3, [r3, #0]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	f200 80bf 	bhi.w	8013926 <route_Dijkstra+0x76a>
			// 左旋回
			switch (direction) {		//
 80137a8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80137ac:	f103 030c 	add.w	r3, r3, #12
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	3b01      	subs	r3, #1
 80137b4:	2b03      	cmp	r3, #3
 80137b6:	f200 80ab 	bhi.w	8013910 <route_Dijkstra+0x754>
 80137ba:	a201      	add	r2, pc, #4	; (adr r2, 80137c0 <route_Dijkstra+0x604>)
 80137bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80137c0:	080137d1 	.word	0x080137d1
 80137c4:	08013823 	.word	0x08013823
 80137c8:	08013871 	.word	0x08013871
 80137cc:	080138bf 	.word	0x080138bf
			case 1:
				pushStack_walk(&stack_x,x-1);
 80137d0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137d4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	b29b      	uxth	r3, r3
 80137dc:	3b01      	subs	r3, #1
 80137de:	b29a      	uxth	r2, r3
 80137e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137e4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80137e8:	4611      	mov	r1, r2
 80137ea:	4618      	mov	r0, r3
 80137ec:	f001 faf2 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80137f0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137f4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	b29a      	uxth	r2, r3
 80137fc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013800:	f103 0310 	add.w	r3, r3, #16
 8013804:	3b1c      	subs	r3, #28
 8013806:	4611      	mov	r1, r2
 8013808:	4618      	mov	r0, r3
 801380a:	f001 fae3 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801380e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013812:	f103 0310 	add.w	r3, r3, #16
 8013816:	3b04      	subs	r3, #4
 8013818:	2101      	movs	r1, #1
 801381a:	4618      	mov	r0, r3
 801381c:	f001 fada 	bl	8014dd4 <pushStack_walk>
				break;
 8013820:	e076      	b.n	8013910 <route_Dijkstra+0x754>
			case 2:
				pushStack_walk(&stack_x,x);
 8013822:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013826:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	b29a      	uxth	r2, r3
 801382e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013832:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013836:	4611      	mov	r1, r2
 8013838:	4618      	mov	r0, r3
 801383a:	f001 facb 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801383e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013842:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	b29a      	uxth	r2, r3
 801384a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801384e:	f103 0310 	add.w	r3, r3, #16
 8013852:	3b1c      	subs	r3, #28
 8013854:	4611      	mov	r1, r2
 8013856:	4618      	mov	r0, r3
 8013858:	f001 fabc 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801385c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013860:	f103 0310 	add.w	r3, r3, #16
 8013864:	3b04      	subs	r3, #4
 8013866:	2100      	movs	r1, #0
 8013868:	4618      	mov	r0, r3
 801386a:	f001 fab3 	bl	8014dd4 <pushStack_walk>
				break;
 801386e:	e04f      	b.n	8013910 <route_Dijkstra+0x754>
			case 3:
				pushStack_walk(&stack_x,x);
 8013870:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013874:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	b29a      	uxth	r2, r3
 801387c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013880:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013884:	4611      	mov	r1, r2
 8013886:	4618      	mov	r0, r3
 8013888:	f001 faa4 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801388c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013890:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	b29a      	uxth	r2, r3
 8013898:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801389c:	f103 0310 	add.w	r3, r3, #16
 80138a0:	3b1c      	subs	r3, #28
 80138a2:	4611      	mov	r1, r2
 80138a4:	4618      	mov	r0, r3
 80138a6:	f001 fa95 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80138aa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80138ae:	f103 0310 	add.w	r3, r3, #16
 80138b2:	3b04      	subs	r3, #4
 80138b4:	2101      	movs	r1, #1
 80138b6:	4618      	mov	r0, r3
 80138b8:	f001 fa8c 	bl	8014dd4 <pushStack_walk>
				break;
 80138bc:	e028      	b.n	8013910 <route_Dijkstra+0x754>
			case 4:
				pushStack_walk(&stack_x,x);
 80138be:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80138c2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	b29a      	uxth	r2, r3
 80138ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138ce:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80138d2:	4611      	mov	r1, r2
 80138d4:	4618      	mov	r0, r3
 80138d6:	f001 fa7d 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80138da:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80138de:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	3b01      	subs	r3, #1
 80138e8:	b29a      	uxth	r2, r3
 80138ea:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80138ee:	f103 0310 	add.w	r3, r3, #16
 80138f2:	3b1c      	subs	r3, #28
 80138f4:	4611      	mov	r1, r2
 80138f6:	4618      	mov	r0, r3
 80138f8:	f001 fa6c 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80138fc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013900:	f103 0310 	add.w	r3, r3, #16
 8013904:	3b04      	subs	r3, #4
 8013906:	2100      	movs	r1, #0
 8013908:	4618      	mov	r0, r3
 801390a:	f001 fa63 	bl	8014dd4 <pushStack_walk>
				break;
 801390e:	bf00      	nop
			}
			direction--;
 8013910:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013914:	f103 030c 	add.w	r3, r3, #12
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	3b01      	subs	r3, #1
 801391c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013920:	f102 020c 	add.w	r2, r2, #12
 8013924:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 8013926:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801392a:	f103 030c 	add.w	r3, r3, #12
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	2b05      	cmp	r3, #5
 8013932:	d105      	bne.n	8013940 <route_Dijkstra+0x784>
			direction = 1;
 8013934:	2301      	movs	r3, #1
 8013936:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801393a:	f102 020c 	add.w	r2, r2, #12
 801393e:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 8013940:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013944:	f103 030c 	add.w	r3, r3, #12
 8013948:	681b      	ldr	r3, [r3, #0]
 801394a:	2b06      	cmp	r3, #6
 801394c:	d105      	bne.n	801395a <route_Dijkstra+0x79e>
			direction = 2;
 801394e:	2302      	movs	r3, #2
 8013950:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013954:	f102 020c 	add.w	r2, r2, #12
 8013958:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 801395a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801395e:	f103 030c 	add.w	r3, r3, #12
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d105      	bne.n	8013974 <route_Dijkstra+0x7b8>
			direction = 4;
 8013968:	2304      	movs	r3, #4
 801396a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801396e:	f102 020c 	add.w	r2, r2, #12
 8013972:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013974:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013978:	f103 030c 	add.w	r3, r3, #12
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013982:	f47f ac69 	bne.w	8013258 <route_Dijkstra+0x9c>
			direction = 3;
 8013986:	2303      	movs	r3, #3
 8013988:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801398c:	f102 020c 	add.w	r2, r2, #12
 8013990:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 8013992:	e461      	b.n	8013258 <route_Dijkstra+0x9c>
			break;
 8013994:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8013996:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801399a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801399e:	4618      	mov	r0, r3
 80139a0:	f001 fa42 	bl	8014e28 <popStack_walk>
 80139a4:	4603      	mov	r3, r0
 80139a6:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80139aa:	f102 020a 	add.w	r2, r2, #10
 80139ae:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 80139b0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80139b4:	f103 0310 	add.w	r3, r3, #16
 80139b8:	3b1c      	subs	r3, #28
 80139ba:	4618      	mov	r0, r3
 80139bc:	f001 fa34 	bl	8014e28 <popStack_walk>
 80139c0:	4603      	mov	r3, r0
 80139c2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80139c6:	f102 0208 	add.w	r2, r2, #8
 80139ca:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 80139cc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80139d0:	f103 0310 	add.w	r3, r3, #16
 80139d4:	3b04      	subs	r3, #4
 80139d6:	4618      	mov	r0, r3
 80139d8:	f001 fa26 	bl	8014e28 <popStack_walk>
 80139dc:	4603      	mov	r3, r0
 80139de:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80139e2:	f102 0206 	add.w	r2, r2, #6
 80139e6:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80139e8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139ec:	f103 030a 	add.w	r3, r3, #10
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139f6:	4293      	cmp	r3, r2
 80139f8:	f000 80d5 	beq.w	8013ba6 <route_Dijkstra+0x9ea>
 80139fc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a00:	f103 0308 	add.w	r3, r3, #8
 8013a04:	881b      	ldrh	r3, [r3, #0]
 8013a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a0a:	4293      	cmp	r3, r2
 8013a0c:	f000 80cb 	beq.w	8013ba6 <route_Dijkstra+0x9ea>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8013a10:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a14:	f103 0306 	add.w	r3, r3, #6
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d15c      	bne.n	8013ad8 <route_Dijkstra+0x91c>
 8013a1e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a22:	f103 0308 	add.w	r3, r3, #8
 8013a26:	881b      	ldrh	r3, [r3, #0]
 8013a28:	4a62      	ldr	r2, [pc, #392]	; (8013bb4 <route_Dijkstra+0x9f8>)
 8013a2a:	332c      	adds	r3, #44	; 0x2c
 8013a2c:	005b      	lsls	r3, r3, #1
 8013a2e:	4413      	add	r3, r2
 8013a30:	885b      	ldrh	r3, [r3, #2]
 8013a32:	461a      	mov	r2, r3
 8013a34:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a38:	f103 030a 	add.w	r3, r3, #10
 8013a3c:	881b      	ldrh	r3, [r3, #0]
 8013a3e:	fa42 f303 	asr.w	r3, r2, r3
 8013a42:	f003 0301 	and.w	r3, r3, #1
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d146      	bne.n	8013ad8 <route_Dijkstra+0x91c>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8013a4a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a4e:	f103 030a 	add.w	r3, r3, #10
 8013a52:	881a      	ldrh	r2, [r3, #0]
 8013a54:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a58:	f103 0308 	add.w	r3, r3, #8
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	4956      	ldr	r1, [pc, #344]	; (8013bb8 <route_Dijkstra+0x9fc>)
 8013a60:	0112      	lsls	r2, r2, #4
 8013a62:	4413      	add	r3, r2
 8013a64:	2200      	movs	r2, #0
 8013a66:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 8013a6a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a6e:	f103 030a 	add.w	r3, r3, #10
 8013a72:	881a      	ldrh	r2, [r3, #0]
 8013a74:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a78:	f103 0308 	add.w	r3, r3, #8
 8013a7c:	881b      	ldrh	r3, [r3, #0]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	494d      	ldr	r1, [pc, #308]	; (8013bb8 <route_Dijkstra+0x9fc>)
 8013a82:	0112      	lsls	r2, r2, #4
 8013a84:	4413      	add	r3, r2
 8013a86:	2200      	movs	r2, #0
 8013a88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a8c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a90:	f103 030a 	add.w	r3, r3, #10
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	4619      	mov	r1, r3
 8013a98:	4848      	ldr	r0, [pc, #288]	; (8013bbc <route_Dijkstra+0xa00>)
 8013a9a:	f001 f99b 	bl	8014dd4 <pushStack_walk>
 8013a9e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013aa2:	f103 0308 	add.w	r3, r3, #8
 8013aa6:	881b      	ldrh	r3, [r3, #0]
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	4845      	ldr	r0, [pc, #276]	; (8013bc0 <route_Dijkstra+0xa04>)
 8013aac:	f001 f992 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013ab0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ab4:	f103 030a 	add.w	r3, r3, #10
 8013ab8:	881b      	ldrh	r3, [r3, #0]
 8013aba:	4619      	mov	r1, r3
 8013abc:	483f      	ldr	r0, [pc, #252]	; (8013bbc <route_Dijkstra+0xa00>)
 8013abe:	f001 f989 	bl	8014dd4 <pushStack_walk>
 8013ac2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ac6:	f103 0308 	add.w	r3, r3, #8
 8013aca:	881b      	ldrh	r3, [r3, #0]
 8013acc:	3301      	adds	r3, #1
 8013ace:	b29b      	uxth	r3, r3
 8013ad0:	4619      	mov	r1, r3
 8013ad2:	483b      	ldr	r0, [pc, #236]	; (8013bc0 <route_Dijkstra+0xa04>)
 8013ad4:	f001 f97e 	bl	8014dd4 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013ad8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013adc:	f103 0306 	add.w	r3, r3, #6
 8013ae0:	881b      	ldrh	r3, [r3, #0]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	f47f af57 	bne.w	8013996 <route_Dijkstra+0x7da>
 8013ae8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013aec:	f103 030a 	add.w	r3, r3, #10
 8013af0:	881b      	ldrh	r3, [r3, #0]
 8013af2:	4a30      	ldr	r2, [pc, #192]	; (8013bb4 <route_Dijkstra+0x9f8>)
 8013af4:	331c      	adds	r3, #28
 8013af6:	005b      	lsls	r3, r3, #1
 8013af8:	4413      	add	r3, r2
 8013afa:	889b      	ldrh	r3, [r3, #4]
 8013afc:	461a      	mov	r2, r3
 8013afe:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b02:	f103 0308 	add.w	r3, r3, #8
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	fa42 f303 	asr.w	r3, r2, r3
 8013b0c:	f003 0301 	and.w	r3, r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f47f af40 	bne.w	8013996 <route_Dijkstra+0x7da>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8013b16:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b1a:	f103 030a 	add.w	r3, r3, #10
 8013b1e:	881a      	ldrh	r2, [r3, #0]
 8013b20:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b24:	f103 0308 	add.w	r3, r3, #8
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	4923      	ldr	r1, [pc, #140]	; (8013bb8 <route_Dijkstra+0x9fc>)
 8013b2c:	0112      	lsls	r2, r2, #4
 8013b2e:	4413      	add	r3, r2
 8013b30:	2200      	movs	r2, #0
 8013b32:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8013b36:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b3a:	f103 030a 	add.w	r3, r3, #10
 8013b3e:	881b      	ldrh	r3, [r3, #0]
 8013b40:	1c5a      	adds	r2, r3, #1
 8013b42:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b46:	f103 0308 	add.w	r3, r3, #8
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	491a      	ldr	r1, [pc, #104]	; (8013bb8 <route_Dijkstra+0x9fc>)
 8013b4e:	0112      	lsls	r2, r2, #4
 8013b50:	4413      	add	r3, r2
 8013b52:	2200      	movs	r2, #0
 8013b54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b58:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b5c:	f103 030a 	add.w	r3, r3, #10
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	4619      	mov	r1, r3
 8013b64:	4815      	ldr	r0, [pc, #84]	; (8013bbc <route_Dijkstra+0xa00>)
 8013b66:	f001 f935 	bl	8014dd4 <pushStack_walk>
 8013b6a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b6e:	f103 0308 	add.w	r3, r3, #8
 8013b72:	881b      	ldrh	r3, [r3, #0]
 8013b74:	4619      	mov	r1, r3
 8013b76:	4812      	ldr	r0, [pc, #72]	; (8013bc0 <route_Dijkstra+0xa04>)
 8013b78:	f001 f92c 	bl	8014dd4 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b7c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b80:	f103 030a 	add.w	r3, r3, #10
 8013b84:	881b      	ldrh	r3, [r3, #0]
 8013b86:	3301      	adds	r3, #1
 8013b88:	b29b      	uxth	r3, r3
 8013b8a:	4619      	mov	r1, r3
 8013b8c:	480b      	ldr	r0, [pc, #44]	; (8013bbc <route_Dijkstra+0xa00>)
 8013b8e:	f001 f921 	bl	8014dd4 <pushStack_walk>
 8013b92:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b96:	f103 0308 	add.w	r3, r3, #8
 8013b9a:	881b      	ldrh	r3, [r3, #0]
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	4808      	ldr	r0, [pc, #32]	; (8013bc0 <route_Dijkstra+0xa04>)
 8013ba0:	f001 f918 	bl	8014dd4 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013ba4:	e6f7      	b.n	8013996 <route_Dijkstra+0x7da>
			}
	}


}
 8013ba6:	bf00      	nop
 8013ba8:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8013bac:	3714      	adds	r7, #20
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	20000c3c 	.word	0x20000c3c
 8013bb8:	20000d30 	.word	0x20000d30
 8013bbc:	200012f0 	.word	0x200012f0
 8013bc0:	20002298 	.word	0x20002298

08013bc4 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bd4:	f102 0207 	add.w	r2, r2, #7
 8013bd8:	7013      	strb	r3, [r2, #0]
 8013bda:	e033      	b.n	8013c44 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013be2:	f102 0206 	add.w	r2, r2, #6
 8013be6:	7013      	strb	r3, [r2, #0]
 8013be8:	e01a      	b.n	8013c20 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 8013bea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bee:	f103 0307 	add.w	r3, r3, #7
 8013bf2:	781a      	ldrb	r2, [r3, #0]
 8013bf4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bf8:	f103 0306 	add.w	r3, r3, #6
 8013bfc:	781b      	ldrb	r3, [r3, #0]
 8013bfe:	4966      	ldr	r1, [pc, #408]	; (8013d98 <create_StepCountMap_unknown+0x1d4>)
 8013c00:	0112      	lsls	r2, r2, #4
 8013c02:	4413      	add	r3, r2
 8013c04:	22ff      	movs	r2, #255	; 0xff
 8013c06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013c0a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c0e:	f103 0306 	add.w	r3, r3, #6
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	3301      	adds	r3, #1
 8013c16:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013c1a:	f102 0206 	add.w	r2, r2, #6
 8013c1e:	7013      	strb	r3, [r2, #0]
 8013c20:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c24:	f103 0306 	add.w	r3, r3, #6
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	2b0f      	cmp	r3, #15
 8013c2c:	d9dd      	bls.n	8013bea <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013c2e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c32:	f103 0307 	add.w	r3, r3, #7
 8013c36:	781b      	ldrb	r3, [r3, #0]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013c3e:	f102 0207 	add.w	r2, r2, #7
 8013c42:	7013      	strb	r3, [r2, #0]
 8013c44:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c48:	f103 0307 	add.w	r3, r3, #7
 8013c4c:	781b      	ldrb	r3, [r3, #0]
 8013c4e:	2b0f      	cmp	r3, #15
 8013c50:	d9c4      	bls.n	8013bdc <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 8013c52:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c56:	4618      	mov	r0, r3
 8013c58:	f001 f8ac 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_y);
 8013c5c:	f107 0308 	add.w	r3, r7, #8
 8013c60:	3b04      	subs	r3, #4
 8013c62:	4618      	mov	r0, r3
 8013c64:	f001 f8a6 	bl	8014db4 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013c68:	484c      	ldr	r0, [pc, #304]	; (8013d9c <create_StepCountMap_unknown+0x1d8>)
 8013c6a:	f001 f8dd 	bl	8014e28 <popStack_walk>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c74:	f102 021a 	add.w	r2, r2, #26
 8013c78:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 8013c7a:	4849      	ldr	r0, [pc, #292]	; (8013da0 <create_StepCountMap_unknown+0x1dc>)
 8013c7c:	f001 f8d4 	bl	8014e28 <popStack_walk>
 8013c80:	4603      	mov	r3, r0
 8013c82:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c86:	f102 0218 	add.w	r2, r2, #24
 8013c8a:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013c8c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c90:	f103 031a 	add.w	r3, r3, #26
 8013c94:	881b      	ldrh	r3, [r3, #0]
 8013c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d030      	beq.n	8013d00 <create_StepCountMap_unknown+0x13c>
 8013c9e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ca2:	f103 0318 	add.w	r3, r3, #24
 8013ca6:	881b      	ldrh	r3, [r3, #0]
 8013ca8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cac:	4293      	cmp	r3, r2
 8013cae:	d027      	beq.n	8013d00 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8013cb0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cb4:	f103 031a 	add.w	r3, r3, #26
 8013cb8:	881a      	ldrh	r2, [r3, #0]
 8013cba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cbe:	f103 0318 	add.w	r3, r3, #24
 8013cc2:	881b      	ldrh	r3, [r3, #0]
 8013cc4:	4934      	ldr	r1, [pc, #208]	; (8013d98 <create_StepCountMap_unknown+0x1d4>)
 8013cc6:	0112      	lsls	r2, r2, #4
 8013cc8:	4413      	add	r3, r2
 8013cca:	2200      	movs	r2, #0
 8013ccc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013cd0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cd4:	f103 031a 	add.w	r3, r3, #26
 8013cd8:	881a      	ldrh	r2, [r3, #0]
 8013cda:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013cde:	4611      	mov	r1, r2
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	f001 f877 	bl	8014dd4 <pushStack_walk>
 8013ce6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cea:	f103 0318 	add.w	r3, r3, #24
 8013cee:	881a      	ldrh	r2, [r3, #0]
 8013cf0:	f107 0308 	add.w	r3, r7, #8
 8013cf4:	3b04      	subs	r3, #4
 8013cf6:	4611      	mov	r1, r2
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f001 f86b 	bl	8014dd4 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013cfe:	e7b3      	b.n	8013c68 <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013d00:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013d04:	f103 0308 	add.w	r3, r3, #8
 8013d08:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013d0c:	685a      	ldr	r2, [r3, #4]
 8013d0e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013d12:	f103 0308 	add.w	r3, r3, #8
 8013d16:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d11b      	bne.n	8013d58 <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013d20:	4b1d      	ldr	r3, [pc, #116]	; (8013d98 <create_StepCountMap_unknown+0x1d4>)
 8013d22:	2200      	movs	r2, #0
 8013d24:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013d26:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013d2a:	2100      	movs	r1, #0
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f001 f851 	bl	8014dd4 <pushStack_walk>
 8013d32:	f107 0308 	add.w	r3, r7, #8
 8013d36:	3b04      	subs	r3, #4
 8013d38:	2100      	movs	r1, #0
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f001 f84a 	bl	8014dd4 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013d40:	4b18      	ldr	r3, [pc, #96]	; (8013da4 <create_StepCountMap_unknown+0x1e0>)
 8013d42:	781b      	ldrb	r3, [r3, #0]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d003      	beq.n	8013d50 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8013d48:	4b16      	ldr	r3, [pc, #88]	; (8013da4 <create_StepCountMap_unknown+0x1e0>)
 8013d4a:	2202      	movs	r2, #2
 8013d4c:	701a      	strb	r2, [r3, #0]
 8013d4e:	e006      	b.n	8013d5e <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 8013d50:	4b14      	ldr	r3, [pc, #80]	; (8013da4 <create_StepCountMap_unknown+0x1e0>)
 8013d52:	2201      	movs	r2, #1
 8013d54:	701a      	strb	r2, [r3, #0]
 8013d56:	e002      	b.n	8013d5e <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 8013d58:	4b12      	ldr	r3, [pc, #72]	; (8013da4 <create_StepCountMap_unknown+0x1e0>)
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013d5e:	2301      	movs	r3, #1
 8013d60:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d64:	f102 0204 	add.w	r2, r2, #4
 8013d68:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013d6a:	2301      	movs	r3, #1
 8013d6c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d70:	f102 0202 	add.w	r2, r2, #2
 8013d74:	8013      	strh	r3, [r2, #0]
 8013d76:	2301      	movs	r3, #1
 8013d78:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d7c:	8013      	strh	r3, [r2, #0]
 8013d7e:	2301      	movs	r3, #1
 8013d80:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d84:	f102 021e 	add.w	r2, r2, #30
 8013d88:	8013      	strh	r3, [r2, #0]
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d90:	f102 021c 	add.w	r2, r2, #28
 8013d94:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013d96:	e23b      	b.n	8014210 <create_StepCountMap_unknown+0x64c>
 8013d98:	20000d30 	.word	0x20000d30
 8013d9c:	200012f0 	.word	0x200012f0
 8013da0:	20002298 	.word	0x20002298
 8013da4:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013da8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013dac:	4618      	mov	r0, r3
 8013dae:	f001 f83b 	bl	8014e28 <popStack_walk>
 8013db2:	4603      	mov	r3, r0
 8013db4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013db8:	f102 0216 	add.w	r2, r2, #22
 8013dbc:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013dbe:	f107 0308 	add.w	r3, r7, #8
 8013dc2:	3b04      	subs	r3, #4
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f001 f82f 	bl	8014e28 <popStack_walk>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013dd0:	f102 0214 	add.w	r2, r2, #20
 8013dd4:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013dd6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dda:	f103 0316 	add.w	r3, r3, #22
 8013dde:	881b      	ldrh	r3, [r3, #0]
 8013de0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013de4:	4293      	cmp	r3, r2
 8013de6:	f000 821b 	beq.w	8014220 <create_StepCountMap_unknown+0x65c>
 8013dea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dee:	f103 0314 	add.w	r3, r3, #20
 8013df2:	881b      	ldrh	r3, [r3, #0]
 8013df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	f000 8211 	beq.w	8014220 <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013dfe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e02:	f103 0314 	add.w	r3, r3, #20
 8013e06:	881b      	ldrh	r3, [r3, #0]
 8013e08:	2b0e      	cmp	r3, #14
 8013e0a:	d81a      	bhi.n	8013e42 <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013e0c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e10:	f103 0314 	add.w	r3, r3, #20
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	4ac4      	ldr	r2, [pc, #784]	; (8014128 <create_StepCountMap_unknown+0x564>)
 8013e18:	330c      	adds	r3, #12
 8013e1a:	005b      	lsls	r3, r3, #1
 8013e1c:	4413      	add	r3, r2
 8013e1e:	88db      	ldrh	r3, [r3, #6]
 8013e20:	b21a      	sxth	r2, r3
 8013e22:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e26:	f103 0316 	add.w	r3, r3, #22
 8013e2a:	881b      	ldrh	r3, [r3, #0]
 8013e2c:	2101      	movs	r1, #1
 8013e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8013e32:	b21b      	sxth	r3, r3
 8013e34:	4013      	ands	r3, r2
 8013e36:	b21b      	sxth	r3, r3
 8013e38:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013e3c:	f102 0202 	add.w	r2, r2, #2
 8013e40:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013e42:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e46:	f103 0314 	add.w	r3, r3, #20
 8013e4a:	881b      	ldrh	r3, [r3, #0]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d019      	beq.n	8013e84 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013e50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e54:	f103 0314 	add.w	r3, r3, #20
 8013e58:	881b      	ldrh	r3, [r3, #0]
 8013e5a:	3b01      	subs	r3, #1
 8013e5c:	4ab2      	ldr	r2, [pc, #712]	; (8014128 <create_StepCountMap_unknown+0x564>)
 8013e5e:	330c      	adds	r3, #12
 8013e60:	005b      	lsls	r3, r3, #1
 8013e62:	4413      	add	r3, r2
 8013e64:	88db      	ldrh	r3, [r3, #6]
 8013e66:	b21a      	sxth	r2, r3
 8013e68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e6c:	f103 0316 	add.w	r3, r3, #22
 8013e70:	881b      	ldrh	r3, [r3, #0]
 8013e72:	2101      	movs	r1, #1
 8013e74:	fa01 f303 	lsl.w	r3, r1, r3
 8013e78:	b21b      	sxth	r3, r3
 8013e7a:	4013      	ands	r3, r2
 8013e7c:	b21b      	sxth	r3, r3
 8013e7e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013e82:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013e84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e88:	f103 0316 	add.w	r3, r3, #22
 8013e8c:	881b      	ldrh	r3, [r3, #0]
 8013e8e:	2b0e      	cmp	r3, #14
 8013e90:	d818      	bhi.n	8013ec4 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013e92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e96:	f103 0316 	add.w	r3, r3, #22
 8013e9a:	881b      	ldrh	r3, [r3, #0]
 8013e9c:	4aa2      	ldr	r2, [pc, #648]	; (8014128 <create_StepCountMap_unknown+0x564>)
 8013e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ea2:	b21a      	sxth	r2, r3
 8013ea4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ea8:	f103 0314 	add.w	r3, r3, #20
 8013eac:	881b      	ldrh	r3, [r3, #0]
 8013eae:	2101      	movs	r1, #1
 8013eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8013eb4:	b21b      	sxth	r3, r3
 8013eb6:	4013      	ands	r3, r2
 8013eb8:	b21b      	sxth	r3, r3
 8013eba:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013ebe:	f102 021e 	add.w	r2, r2, #30
 8013ec2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013ec4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ec8:	f103 0316 	add.w	r3, r3, #22
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d019      	beq.n	8013f06 <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013ed2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ed6:	f103 0316 	add.w	r3, r3, #22
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	3b01      	subs	r3, #1
 8013ede:	4a92      	ldr	r2, [pc, #584]	; (8014128 <create_StepCountMap_unknown+0x564>)
 8013ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ee4:	b21a      	sxth	r2, r3
 8013ee6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eea:	f103 0314 	add.w	r3, r3, #20
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	2101      	movs	r1, #1
 8013ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8013ef6:	b21b      	sxth	r3, r3
 8013ef8:	4013      	ands	r3, r2
 8013efa:	b21b      	sxth	r3, r3
 8013efc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013f00:	f102 021c 	add.w	r2, r2, #28
 8013f04:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013f06:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f0a:	f103 0316 	add.w	r3, r3, #22
 8013f0e:	881a      	ldrh	r2, [r3, #0]
 8013f10:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f14:	f103 0314 	add.w	r3, r3, #20
 8013f18:	881b      	ldrh	r3, [r3, #0]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	4983      	ldr	r1, [pc, #524]	; (801412c <create_StepCountMap_unknown+0x568>)
 8013f1e:	0112      	lsls	r2, r2, #4
 8013f20:	4413      	add	r3, r2
 8013f22:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f26:	2bff      	cmp	r3, #255	; 0xff
 8013f28:	d148      	bne.n	8013fbc <create_StepCountMap_unknown+0x3f8>
 8013f2a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f2e:	f103 0314 	add.w	r3, r3, #20
 8013f32:	881b      	ldrh	r3, [r3, #0]
 8013f34:	2b0f      	cmp	r3, #15
 8013f36:	d041      	beq.n	8013fbc <create_StepCountMap_unknown+0x3f8>
 8013f38:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013f3c:	f103 0302 	add.w	r3, r3, #2
 8013f40:	881b      	ldrh	r3, [r3, #0]
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d13a      	bne.n	8013fbc <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013f46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f4a:	f103 0316 	add.w	r3, r3, #22
 8013f4e:	881a      	ldrh	r2, [r3, #0]
 8013f50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f54:	f103 0314 	add.w	r3, r3, #20
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	4974      	ldr	r1, [pc, #464]	; (801412c <create_StepCountMap_unknown+0x568>)
 8013f5c:	0112      	lsls	r2, r2, #4
 8013f5e:	4413      	add	r3, r2
 8013f60:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013f64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f68:	f103 0316 	add.w	r3, r3, #22
 8013f6c:	881a      	ldrh	r2, [r3, #0]
 8013f6e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f72:	f103 0314 	add.w	r3, r3, #20
 8013f76:	881b      	ldrh	r3, [r3, #0]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	3101      	adds	r1, #1
 8013f7c:	b288      	uxth	r0, r1
 8013f7e:	496b      	ldr	r1, [pc, #428]	; (801412c <create_StepCountMap_unknown+0x568>)
 8013f80:	0112      	lsls	r2, r2, #4
 8013f82:	4413      	add	r3, r2
 8013f84:	4602      	mov	r2, r0
 8013f86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013f8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f8e:	f103 0316 	add.w	r3, r3, #22
 8013f92:	881a      	ldrh	r2, [r3, #0]
 8013f94:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013f98:	4611      	mov	r1, r2
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 ff1a 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013fa0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fa4:	f103 0314 	add.w	r3, r3, #20
 8013fa8:	881b      	ldrh	r3, [r3, #0]
 8013faa:	3301      	adds	r3, #1
 8013fac:	b29a      	uxth	r2, r3
 8013fae:	f107 0308 	add.w	r3, r7, #8
 8013fb2:	3b04      	subs	r3, #4
 8013fb4:	4611      	mov	r1, r2
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f000 ff0c 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013fbc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fc0:	f103 0316 	add.w	r3, r3, #22
 8013fc4:	881a      	ldrh	r2, [r3, #0]
 8013fc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fca:	f103 0314 	add.w	r3, r3, #20
 8013fce:	881b      	ldrh	r3, [r3, #0]
 8013fd0:	3b01      	subs	r3, #1
 8013fd2:	4956      	ldr	r1, [pc, #344]	; (801412c <create_StepCountMap_unknown+0x568>)
 8013fd4:	0112      	lsls	r2, r2, #4
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013fdc:	2bff      	cmp	r3, #255	; 0xff
 8013fde:	d146      	bne.n	801406e <create_StepCountMap_unknown+0x4aa>
 8013fe0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fe4:	f103 0314 	add.w	r3, r3, #20
 8013fe8:	881b      	ldrh	r3, [r3, #0]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d03f      	beq.n	801406e <create_StepCountMap_unknown+0x4aa>
 8013fee:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013ff2:	881b      	ldrh	r3, [r3, #0]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d13a      	bne.n	801406e <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013ff8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ffc:	f103 0316 	add.w	r3, r3, #22
 8014000:	881a      	ldrh	r2, [r3, #0]
 8014002:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014006:	f103 0314 	add.w	r3, r3, #20
 801400a:	881b      	ldrh	r3, [r3, #0]
 801400c:	4947      	ldr	r1, [pc, #284]	; (801412c <create_StepCountMap_unknown+0x568>)
 801400e:	0112      	lsls	r2, r2, #4
 8014010:	4413      	add	r3, r2
 8014012:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014016:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801401a:	f103 0316 	add.w	r3, r3, #22
 801401e:	881a      	ldrh	r2, [r3, #0]
 8014020:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014024:	f103 0314 	add.w	r3, r3, #20
 8014028:	881b      	ldrh	r3, [r3, #0]
 801402a:	3b01      	subs	r3, #1
 801402c:	3101      	adds	r1, #1
 801402e:	b288      	uxth	r0, r1
 8014030:	493e      	ldr	r1, [pc, #248]	; (801412c <create_StepCountMap_unknown+0x568>)
 8014032:	0112      	lsls	r2, r2, #4
 8014034:	4413      	add	r3, r2
 8014036:	4602      	mov	r2, r0
 8014038:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801403c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014040:	f103 0316 	add.w	r3, r3, #22
 8014044:	881a      	ldrh	r2, [r3, #0]
 8014046:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801404a:	4611      	mov	r1, r2
 801404c:	4618      	mov	r0, r3
 801404e:	f000 fec1 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014052:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014056:	f103 0314 	add.w	r3, r3, #20
 801405a:	881b      	ldrh	r3, [r3, #0]
 801405c:	3b01      	subs	r3, #1
 801405e:	b29a      	uxth	r2, r3
 8014060:	f107 0308 	add.w	r3, r7, #8
 8014064:	3b04      	subs	r3, #4
 8014066:	4611      	mov	r1, r2
 8014068:	4618      	mov	r0, r3
 801406a:	f000 feb3 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 801406e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014072:	f103 0316 	add.w	r3, r3, #22
 8014076:	881b      	ldrh	r3, [r3, #0]
 8014078:	1c5a      	adds	r2, r3, #1
 801407a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801407e:	f103 0314 	add.w	r3, r3, #20
 8014082:	881b      	ldrh	r3, [r3, #0]
 8014084:	4929      	ldr	r1, [pc, #164]	; (801412c <create_StepCountMap_unknown+0x568>)
 8014086:	0112      	lsls	r2, r2, #4
 8014088:	4413      	add	r3, r2
 801408a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801408e:	2bff      	cmp	r3, #255	; 0xff
 8014090:	d14e      	bne.n	8014130 <create_StepCountMap_unknown+0x56c>
 8014092:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014096:	f103 0316 	add.w	r3, r3, #22
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	2b0f      	cmp	r3, #15
 801409e:	d047      	beq.n	8014130 <create_StepCountMap_unknown+0x56c>
 80140a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140a4:	f103 031e 	add.w	r3, r3, #30
 80140a8:	881b      	ldrh	r3, [r3, #0]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d140      	bne.n	8014130 <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80140ae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140b2:	f103 0316 	add.w	r3, r3, #22
 80140b6:	881a      	ldrh	r2, [r3, #0]
 80140b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140bc:	f103 0314 	add.w	r3, r3, #20
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	491a      	ldr	r1, [pc, #104]	; (801412c <create_StepCountMap_unknown+0x568>)
 80140c4:	0112      	lsls	r2, r2, #4
 80140c6:	4413      	add	r3, r2
 80140c8:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80140cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140d0:	f103 0316 	add.w	r3, r3, #22
 80140d4:	881b      	ldrh	r3, [r3, #0]
 80140d6:	1c5a      	adds	r2, r3, #1
 80140d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140dc:	f103 0314 	add.w	r3, r3, #20
 80140e0:	881b      	ldrh	r3, [r3, #0]
 80140e2:	3101      	adds	r1, #1
 80140e4:	b288      	uxth	r0, r1
 80140e6:	4911      	ldr	r1, [pc, #68]	; (801412c <create_StepCountMap_unknown+0x568>)
 80140e8:	0112      	lsls	r2, r2, #4
 80140ea:	4413      	add	r3, r2
 80140ec:	4602      	mov	r2, r0
 80140ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80140f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140f6:	f103 0316 	add.w	r3, r3, #22
 80140fa:	881b      	ldrh	r3, [r3, #0]
 80140fc:	3301      	adds	r3, #1
 80140fe:	b29a      	uxth	r2, r3
 8014100:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014104:	4611      	mov	r1, r2
 8014106:	4618      	mov	r0, r3
 8014108:	f000 fe64 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 801410c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014110:	f103 0314 	add.w	r3, r3, #20
 8014114:	881a      	ldrh	r2, [r3, #0]
 8014116:	f107 0308 	add.w	r3, r7, #8
 801411a:	3b04      	subs	r3, #4
 801411c:	4611      	mov	r1, r2
 801411e:	4618      	mov	r0, r3
 8014120:	f000 fe58 	bl	8014dd4 <pushStack_walk>
 8014124:	e004      	b.n	8014130 <create_StepCountMap_unknown+0x56c>
 8014126:	bf00      	nop
 8014128:	20000c3c 	.word	0x20000c3c
 801412c:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014130:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014134:	f103 0316 	add.w	r3, r3, #22
 8014138:	881b      	ldrh	r3, [r3, #0]
 801413a:	1e5a      	subs	r2, r3, #1
 801413c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014140:	f103 0314 	add.w	r3, r3, #20
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	4939      	ldr	r1, [pc, #228]	; (801422c <create_StepCountMap_unknown+0x668>)
 8014148:	0112      	lsls	r2, r2, #4
 801414a:	4413      	add	r3, r2
 801414c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014150:	2bff      	cmp	r3, #255	; 0xff
 8014152:	d148      	bne.n	80141e6 <create_StepCountMap_unknown+0x622>
 8014154:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014158:	f103 0316 	add.w	r3, r3, #22
 801415c:	881b      	ldrh	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d041      	beq.n	80141e6 <create_StepCountMap_unknown+0x622>
 8014162:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014166:	f103 031c 	add.w	r3, r3, #28
 801416a:	881b      	ldrh	r3, [r3, #0]
 801416c:	2b00      	cmp	r3, #0
 801416e:	d13a      	bne.n	80141e6 <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014170:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014174:	f103 0316 	add.w	r3, r3, #22
 8014178:	881a      	ldrh	r2, [r3, #0]
 801417a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801417e:	f103 0314 	add.w	r3, r3, #20
 8014182:	881b      	ldrh	r3, [r3, #0]
 8014184:	4929      	ldr	r1, [pc, #164]	; (801422c <create_StepCountMap_unknown+0x668>)
 8014186:	0112      	lsls	r2, r2, #4
 8014188:	4413      	add	r3, r2
 801418a:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801418e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014192:	f103 0316 	add.w	r3, r3, #22
 8014196:	881b      	ldrh	r3, [r3, #0]
 8014198:	1e5a      	subs	r2, r3, #1
 801419a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801419e:	f103 0314 	add.w	r3, r3, #20
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	3101      	adds	r1, #1
 80141a6:	b288      	uxth	r0, r1
 80141a8:	4920      	ldr	r1, [pc, #128]	; (801422c <create_StepCountMap_unknown+0x668>)
 80141aa:	0112      	lsls	r2, r2, #4
 80141ac:	4413      	add	r3, r2
 80141ae:	4602      	mov	r2, r0
 80141b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80141b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141b8:	f103 0316 	add.w	r3, r3, #22
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	3b01      	subs	r3, #1
 80141c0:	b29a      	uxth	r2, r3
 80141c2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80141c6:	4611      	mov	r1, r2
 80141c8:	4618      	mov	r0, r3
 80141ca:	f000 fe03 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80141ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141d2:	f103 0314 	add.w	r3, r3, #20
 80141d6:	881a      	ldrh	r2, [r3, #0]
 80141d8:	f107 0308 	add.w	r3, r7, #8
 80141dc:	3b04      	subs	r3, #4
 80141de:	4611      	mov	r1, r2
 80141e0:	4618      	mov	r0, r3
 80141e2:	f000 fdf7 	bl	8014dd4 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80141e6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141ea:	f103 0316 	add.w	r3, r3, #22
 80141ee:	881a      	ldrh	r2, [r3, #0]
 80141f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141f4:	f103 0314 	add.w	r3, r3, #20
 80141f8:	881b      	ldrh	r3, [r3, #0]
 80141fa:	490c      	ldr	r1, [pc, #48]	; (801422c <create_StepCountMap_unknown+0x668>)
 80141fc:	0112      	lsls	r2, r2, #4
 80141fe:	4413      	add	r3, r2
 8014200:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014204:	3301      	adds	r3, #1
 8014206:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801420a:	f102 0204 	add.w	r2, r2, #4
 801420e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014210:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014214:	f103 0304 	add.w	r3, r3, #4
 8014218:	881b      	ldrh	r3, [r3, #0]
 801421a:	2bfe      	cmp	r3, #254	; 0xfe
 801421c:	f67f adc4 	bls.w	8013da8 <create_StepCountMap_unknown+0x1e4>

		}

}
 8014220:	bf00      	nop
 8014222:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014226:	3708      	adds	r7, #8
 8014228:	46bd      	mov	sp, r7
 801422a:	bd80      	pop	{r7, pc}
 801422c:	20000d30 	.word	0x20000d30

08014230 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8014230:	b580      	push	{r7, lr}
 8014232:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8014236:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014238:	2300      	movs	r3, #0
 801423a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801423e:	f102 021f 	add.w	r2, r2, #31
 8014242:	7013      	strb	r3, [r2, #0]
 8014244:	e033      	b.n	80142ae <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014246:	2300      	movs	r3, #0
 8014248:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801424c:	f102 021e 	add.w	r2, r2, #30
 8014250:	7013      	strb	r3, [r2, #0]
 8014252:	e01a      	b.n	801428a <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 8014254:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014258:	f103 031f 	add.w	r3, r3, #31
 801425c:	781a      	ldrb	r2, [r3, #0]
 801425e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014262:	f103 031e 	add.w	r3, r3, #30
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	4946      	ldr	r1, [pc, #280]	; (8014384 <create_StepCountMap_queue+0x154>)
 801426a:	0112      	lsls	r2, r2, #4
 801426c:	4413      	add	r3, r2
 801426e:	22ff      	movs	r2, #255	; 0xff
 8014270:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014274:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014278:	f103 031e 	add.w	r3, r3, #30
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	3301      	adds	r3, #1
 8014280:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014284:	f102 021e 	add.w	r2, r2, #30
 8014288:	7013      	strb	r3, [r2, #0]
 801428a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801428e:	f103 031e 	add.w	r3, r3, #30
 8014292:	781b      	ldrb	r3, [r3, #0]
 8014294:	2b0f      	cmp	r3, #15
 8014296:	d9dd      	bls.n	8014254 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014298:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801429c:	f103 031f 	add.w	r3, r3, #31
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	3301      	adds	r3, #1
 80142a4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142a8:	f102 021f 	add.w	r2, r2, #31
 80142ac:	7013      	strb	r3, [r2, #0]
 80142ae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80142b2:	f103 031f 	add.w	r3, r3, #31
 80142b6:	781b      	ldrb	r3, [r3, #0]
 80142b8:	2b0f      	cmp	r3, #15
 80142ba:	d9c4      	bls.n	8014246 <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 80142bc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142c0:	4618      	mov	r0, r3
 80142c2:	f000 fd77 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_y);
 80142c6:	463b      	mov	r3, r7
 80142c8:	4618      	mov	r0, r3
 80142ca:	f000 fd73 	bl	8014db4 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 80142ce:	4b2d      	ldr	r3, [pc, #180]	; (8014384 <create_StepCountMap_queue+0x154>)
 80142d0:	2200      	movs	r2, #0
 80142d2:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 80142d6:	4b2b      	ldr	r3, [pc, #172]	; (8014384 <create_StepCountMap_queue+0x154>)
 80142d8:	2200      	movs	r2, #0
 80142da:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 80142de:	4b29      	ldr	r3, [pc, #164]	; (8014384 <create_StepCountMap_queue+0x154>)
 80142e0:	2200      	movs	r2, #0
 80142e2:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 80142e6:	4b27      	ldr	r3, [pc, #156]	; (8014384 <create_StepCountMap_queue+0x154>)
 80142e8:	2200      	movs	r2, #0
 80142ea:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80142ee:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142f2:	210b      	movs	r1, #11
 80142f4:	4618      	mov	r0, r3
 80142f6:	f000 fd6d 	bl	8014dd4 <pushStack_walk>
 80142fa:	463b      	mov	r3, r7
 80142fc:	210a      	movs	r1, #10
 80142fe:	4618      	mov	r0, r3
 8014300:	f000 fd68 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8014304:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014308:	210c      	movs	r1, #12
 801430a:	4618      	mov	r0, r3
 801430c:	f000 fd62 	bl	8014dd4 <pushStack_walk>
 8014310:	463b      	mov	r3, r7
 8014312:	210a      	movs	r1, #10
 8014314:	4618      	mov	r0, r3
 8014316:	f000 fd5d 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 801431a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801431e:	210b      	movs	r1, #11
 8014320:	4618      	mov	r0, r3
 8014322:	f000 fd57 	bl	8014dd4 <pushStack_walk>
 8014326:	463b      	mov	r3, r7
 8014328:	210b      	movs	r1, #11
 801432a:	4618      	mov	r0, r3
 801432c:	f000 fd52 	bl	8014dd4 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014330:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014334:	210c      	movs	r1, #12
 8014336:	4618      	mov	r0, r3
 8014338:	f000 fd4c 	bl	8014dd4 <pushStack_walk>
 801433c:	463b      	mov	r3, r7
 801433e:	210b      	movs	r1, #11
 8014340:	4618      	mov	r0, r3
 8014342:	f000 fd47 	bl	8014dd4 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8014346:	2301      	movs	r3, #1
 8014348:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801434c:	f102 021c 	add.w	r2, r2, #28
 8014350:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014352:	2301      	movs	r3, #1
 8014354:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014358:	f102 021a 	add.w	r2, r2, #26
 801435c:	8013      	strh	r3, [r2, #0]
 801435e:	2301      	movs	r3, #1
 8014360:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014364:	f102 0218 	add.w	r2, r2, #24
 8014368:	8013      	strh	r3, [r2, #0]
 801436a:	2301      	movs	r3, #1
 801436c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014370:	f102 0216 	add.w	r2, r2, #22
 8014374:	8013      	strh	r3, [r2, #0]
 8014376:	2301      	movs	r3, #1
 8014378:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801437c:	f102 0214 	add.w	r2, r2, #20
 8014380:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014382:	e22f      	b.n	80147e4 <create_StepCountMap_queue+0x5b4>
 8014384:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014388:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801438c:	4618      	mov	r0, r3
 801438e:	f000 fd4b 	bl	8014e28 <popStack_walk>
 8014392:	4603      	mov	r3, r0
 8014394:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014398:	f102 0212 	add.w	r2, r2, #18
 801439c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801439e:	463b      	mov	r3, r7
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 fd41 	bl	8014e28 <popStack_walk>
 80143a6:	4603      	mov	r3, r0
 80143a8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143ac:	f102 0210 	add.w	r2, r2, #16
 80143b0:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80143b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143b6:	f103 0312 	add.w	r3, r3, #18
 80143ba:	881b      	ldrh	r3, [r3, #0]
 80143bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143c0:	4293      	cmp	r3, r2
 80143c2:	f000 8217 	beq.w	80147f4 <create_StepCountMap_queue+0x5c4>
 80143c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143ca:	f103 0310 	add.w	r3, r3, #16
 80143ce:	881b      	ldrh	r3, [r3, #0]
 80143d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143d4:	4293      	cmp	r3, r2
 80143d6:	f000 820d 	beq.w	80147f4 <create_StepCountMap_queue+0x5c4>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 80143da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143de:	f103 0310 	add.w	r3, r3, #16
 80143e2:	881b      	ldrh	r3, [r3, #0]
 80143e4:	2b0e      	cmp	r3, #14
 80143e6:	d81a      	bhi.n	801441e <create_StepCountMap_queue+0x1ee>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 80143e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143ec:	f103 0310 	add.w	r3, r3, #16
 80143f0:	881b      	ldrh	r3, [r3, #0]
 80143f2:	4aca      	ldr	r2, [pc, #808]	; (801471c <create_StepCountMap_queue+0x4ec>)
 80143f4:	330c      	adds	r3, #12
 80143f6:	005b      	lsls	r3, r3, #1
 80143f8:	4413      	add	r3, r2
 80143fa:	88db      	ldrh	r3, [r3, #6]
 80143fc:	b21a      	sxth	r2, r3
 80143fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014402:	f103 0312 	add.w	r3, r3, #18
 8014406:	881b      	ldrh	r3, [r3, #0]
 8014408:	2101      	movs	r1, #1
 801440a:	fa01 f303 	lsl.w	r3, r1, r3
 801440e:	b21b      	sxth	r3, r3
 8014410:	4013      	ands	r3, r2
 8014412:	b21b      	sxth	r3, r3
 8014414:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014418:	f102 021a 	add.w	r2, r2, #26
 801441c:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 801441e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014422:	f103 0310 	add.w	r3, r3, #16
 8014426:	881b      	ldrh	r3, [r3, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d01b      	beq.n	8014464 <create_StepCountMap_queue+0x234>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801442c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014430:	f103 0310 	add.w	r3, r3, #16
 8014434:	881b      	ldrh	r3, [r3, #0]
 8014436:	3b01      	subs	r3, #1
 8014438:	4ab8      	ldr	r2, [pc, #736]	; (801471c <create_StepCountMap_queue+0x4ec>)
 801443a:	330c      	adds	r3, #12
 801443c:	005b      	lsls	r3, r3, #1
 801443e:	4413      	add	r3, r2
 8014440:	88db      	ldrh	r3, [r3, #6]
 8014442:	b21a      	sxth	r2, r3
 8014444:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014448:	f103 0312 	add.w	r3, r3, #18
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	2101      	movs	r1, #1
 8014450:	fa01 f303 	lsl.w	r3, r1, r3
 8014454:	b21b      	sxth	r3, r3
 8014456:	4013      	ands	r3, r2
 8014458:	b21b      	sxth	r3, r3
 801445a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801445e:	f102 0218 	add.w	r2, r2, #24
 8014462:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014464:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014468:	f103 0312 	add.w	r3, r3, #18
 801446c:	881b      	ldrh	r3, [r3, #0]
 801446e:	2b0e      	cmp	r3, #14
 8014470:	d818      	bhi.n	80144a4 <create_StepCountMap_queue+0x274>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8014472:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014476:	f103 0312 	add.w	r3, r3, #18
 801447a:	881b      	ldrh	r3, [r3, #0]
 801447c:	4aa7      	ldr	r2, [pc, #668]	; (801471c <create_StepCountMap_queue+0x4ec>)
 801447e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014482:	b21a      	sxth	r2, r3
 8014484:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014488:	f103 0310 	add.w	r3, r3, #16
 801448c:	881b      	ldrh	r3, [r3, #0]
 801448e:	2101      	movs	r1, #1
 8014490:	fa01 f303 	lsl.w	r3, r1, r3
 8014494:	b21b      	sxth	r3, r3
 8014496:	4013      	ands	r3, r2
 8014498:	b21b      	sxth	r3, r3
 801449a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801449e:	f102 0216 	add.w	r2, r2, #22
 80144a2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80144a4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144a8:	f103 0312 	add.w	r3, r3, #18
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d019      	beq.n	80144e6 <create_StepCountMap_queue+0x2b6>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80144b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144b6:	f103 0312 	add.w	r3, r3, #18
 80144ba:	881b      	ldrh	r3, [r3, #0]
 80144bc:	3b01      	subs	r3, #1
 80144be:	4a97      	ldr	r2, [pc, #604]	; (801471c <create_StepCountMap_queue+0x4ec>)
 80144c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144c4:	b21a      	sxth	r2, r3
 80144c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ca:	f103 0310 	add.w	r3, r3, #16
 80144ce:	881b      	ldrh	r3, [r3, #0]
 80144d0:	2101      	movs	r1, #1
 80144d2:	fa01 f303 	lsl.w	r3, r1, r3
 80144d6:	b21b      	sxth	r3, r3
 80144d8:	4013      	ands	r3, r2
 80144da:	b21b      	sxth	r3, r3
 80144dc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80144e0:	f102 0214 	add.w	r2, r2, #20
 80144e4:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 80144e6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ea:	f103 0312 	add.w	r3, r3, #18
 80144ee:	881a      	ldrh	r2, [r3, #0]
 80144f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144f4:	f103 0310 	add.w	r3, r3, #16
 80144f8:	881b      	ldrh	r3, [r3, #0]
 80144fa:	3301      	adds	r3, #1
 80144fc:	4988      	ldr	r1, [pc, #544]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 80144fe:	0112      	lsls	r2, r2, #4
 8014500:	4413      	add	r3, r2
 8014502:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014506:	2bff      	cmp	r3, #255	; 0xff
 8014508:	d146      	bne.n	8014598 <create_StepCountMap_queue+0x368>
 801450a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801450e:	f103 0310 	add.w	r3, r3, #16
 8014512:	881b      	ldrh	r3, [r3, #0]
 8014514:	2b0f      	cmp	r3, #15
 8014516:	d03f      	beq.n	8014598 <create_StepCountMap_queue+0x368>
 8014518:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801451c:	f103 031a 	add.w	r3, r3, #26
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d138      	bne.n	8014598 <create_StepCountMap_queue+0x368>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014526:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801452a:	f103 0312 	add.w	r3, r3, #18
 801452e:	881a      	ldrh	r2, [r3, #0]
 8014530:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014534:	f103 0310 	add.w	r3, r3, #16
 8014538:	881b      	ldrh	r3, [r3, #0]
 801453a:	4979      	ldr	r1, [pc, #484]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 801453c:	0112      	lsls	r2, r2, #4
 801453e:	4413      	add	r3, r2
 8014540:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014544:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014548:	f103 0312 	add.w	r3, r3, #18
 801454c:	881a      	ldrh	r2, [r3, #0]
 801454e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014552:	f103 0310 	add.w	r3, r3, #16
 8014556:	881b      	ldrh	r3, [r3, #0]
 8014558:	3301      	adds	r3, #1
 801455a:	3101      	adds	r1, #1
 801455c:	b288      	uxth	r0, r1
 801455e:	4970      	ldr	r1, [pc, #448]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 8014560:	0112      	lsls	r2, r2, #4
 8014562:	4413      	add	r3, r2
 8014564:	4602      	mov	r2, r0
 8014566:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801456a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801456e:	f103 0312 	add.w	r3, r3, #18
 8014572:	881a      	ldrh	r2, [r3, #0]
 8014574:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014578:	4611      	mov	r1, r2
 801457a:	4618      	mov	r0, r3
 801457c:	f000 fc2a 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014580:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014584:	f103 0310 	add.w	r3, r3, #16
 8014588:	881b      	ldrh	r3, [r3, #0]
 801458a:	3301      	adds	r3, #1
 801458c:	b29a      	uxth	r2, r3
 801458e:	463b      	mov	r3, r7
 8014590:	4611      	mov	r1, r2
 8014592:	4618      	mov	r0, r3
 8014594:	f000 fc1e 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014598:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801459c:	f103 0312 	add.w	r3, r3, #18
 80145a0:	881a      	ldrh	r2, [r3, #0]
 80145a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a6:	f103 0310 	add.w	r3, r3, #16
 80145aa:	881b      	ldrh	r3, [r3, #0]
 80145ac:	3b01      	subs	r3, #1
 80145ae:	495c      	ldr	r1, [pc, #368]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 80145b0:	0112      	lsls	r2, r2, #4
 80145b2:	4413      	add	r3, r2
 80145b4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145b8:	2bff      	cmp	r3, #255	; 0xff
 80145ba:	d146      	bne.n	801464a <create_StepCountMap_queue+0x41a>
 80145bc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c0:	f103 0310 	add.w	r3, r3, #16
 80145c4:	881b      	ldrh	r3, [r3, #0]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d03f      	beq.n	801464a <create_StepCountMap_queue+0x41a>
 80145ca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ce:	f103 0318 	add.w	r3, r3, #24
 80145d2:	881b      	ldrh	r3, [r3, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d138      	bne.n	801464a <create_StepCountMap_queue+0x41a>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80145d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145dc:	f103 0312 	add.w	r3, r3, #18
 80145e0:	881a      	ldrh	r2, [r3, #0]
 80145e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145e6:	f103 0310 	add.w	r3, r3, #16
 80145ea:	881b      	ldrh	r3, [r3, #0]
 80145ec:	494c      	ldr	r1, [pc, #304]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 80145ee:	0112      	lsls	r2, r2, #4
 80145f0:	4413      	add	r3, r2
 80145f2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80145f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145fa:	f103 0312 	add.w	r3, r3, #18
 80145fe:	881a      	ldrh	r2, [r3, #0]
 8014600:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014604:	f103 0310 	add.w	r3, r3, #16
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	3b01      	subs	r3, #1
 801460c:	3101      	adds	r1, #1
 801460e:	b288      	uxth	r0, r1
 8014610:	4943      	ldr	r1, [pc, #268]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 8014612:	0112      	lsls	r2, r2, #4
 8014614:	4413      	add	r3, r2
 8014616:	4602      	mov	r2, r0
 8014618:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801461c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014620:	f103 0312 	add.w	r3, r3, #18
 8014624:	881a      	ldrh	r2, [r3, #0]
 8014626:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801462a:	4611      	mov	r1, r2
 801462c:	4618      	mov	r0, r3
 801462e:	f000 fbd1 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014632:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014636:	f103 0310 	add.w	r3, r3, #16
 801463a:	881b      	ldrh	r3, [r3, #0]
 801463c:	3b01      	subs	r3, #1
 801463e:	b29a      	uxth	r2, r3
 8014640:	463b      	mov	r3, r7
 8014642:	4611      	mov	r1, r2
 8014644:	4618      	mov	r0, r3
 8014646:	f000 fbc5 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 801464a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801464e:	f103 0312 	add.w	r3, r3, #18
 8014652:	881b      	ldrh	r3, [r3, #0]
 8014654:	1c5a      	adds	r2, r3, #1
 8014656:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801465a:	f103 0310 	add.w	r3, r3, #16
 801465e:	881b      	ldrh	r3, [r3, #0]
 8014660:	492f      	ldr	r1, [pc, #188]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 8014662:	0112      	lsls	r2, r2, #4
 8014664:	4413      	add	r3, r2
 8014666:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801466a:	2bff      	cmp	r3, #255	; 0xff
 801466c:	d146      	bne.n	80146fc <create_StepCountMap_queue+0x4cc>
 801466e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014672:	f103 0312 	add.w	r3, r3, #18
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	2b0f      	cmp	r3, #15
 801467a:	d03f      	beq.n	80146fc <create_StepCountMap_queue+0x4cc>
 801467c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014680:	f103 0316 	add.w	r3, r3, #22
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d138      	bne.n	80146fc <create_StepCountMap_queue+0x4cc>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801468a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801468e:	f103 0312 	add.w	r3, r3, #18
 8014692:	881a      	ldrh	r2, [r3, #0]
 8014694:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014698:	f103 0310 	add.w	r3, r3, #16
 801469c:	881b      	ldrh	r3, [r3, #0]
 801469e:	4920      	ldr	r1, [pc, #128]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 80146a0:	0112      	lsls	r2, r2, #4
 80146a2:	4413      	add	r3, r2
 80146a4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80146a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ac:	f103 0312 	add.w	r3, r3, #18
 80146b0:	881b      	ldrh	r3, [r3, #0]
 80146b2:	1c5a      	adds	r2, r3, #1
 80146b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146b8:	f103 0310 	add.w	r3, r3, #16
 80146bc:	881b      	ldrh	r3, [r3, #0]
 80146be:	3101      	adds	r1, #1
 80146c0:	b288      	uxth	r0, r1
 80146c2:	4917      	ldr	r1, [pc, #92]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 80146c4:	0112      	lsls	r2, r2, #4
 80146c6:	4413      	add	r3, r2
 80146c8:	4602      	mov	r2, r0
 80146ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80146ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146d2:	f103 0312 	add.w	r3, r3, #18
 80146d6:	881b      	ldrh	r3, [r3, #0]
 80146d8:	3301      	adds	r3, #1
 80146da:	b29a      	uxth	r2, r3
 80146dc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80146e0:	4611      	mov	r1, r2
 80146e2:	4618      	mov	r0, r3
 80146e4:	f000 fb76 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80146e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ec:	f103 0310 	add.w	r3, r3, #16
 80146f0:	881a      	ldrh	r2, [r3, #0]
 80146f2:	463b      	mov	r3, r7
 80146f4:	4611      	mov	r1, r2
 80146f6:	4618      	mov	r0, r3
 80146f8:	f000 fb6c 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80146fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014700:	f103 0312 	add.w	r3, r3, #18
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	1e5a      	subs	r2, r3, #1
 8014708:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801470c:	f103 0310 	add.w	r3, r3, #16
 8014710:	881b      	ldrh	r3, [r3, #0]
 8014712:	4903      	ldr	r1, [pc, #12]	; (8014720 <create_StepCountMap_queue+0x4f0>)
 8014714:	0112      	lsls	r2, r2, #4
 8014716:	4413      	add	r3, r2
 8014718:	e004      	b.n	8014724 <create_StepCountMap_queue+0x4f4>
 801471a:	bf00      	nop
 801471c:	20000c3c 	.word	0x20000c3c
 8014720:	20000d30 	.word	0x20000d30
 8014724:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014728:	2bff      	cmp	r3, #255	; 0xff
 801472a:	d146      	bne.n	80147ba <create_StepCountMap_queue+0x58a>
 801472c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014730:	f103 0312 	add.w	r3, r3, #18
 8014734:	881b      	ldrh	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d03f      	beq.n	80147ba <create_StepCountMap_queue+0x58a>
 801473a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801473e:	f103 0314 	add.w	r3, r3, #20
 8014742:	881b      	ldrh	r3, [r3, #0]
 8014744:	2b00      	cmp	r3, #0
 8014746:	d138      	bne.n	80147ba <create_StepCountMap_queue+0x58a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014748:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801474c:	f103 0312 	add.w	r3, r3, #18
 8014750:	881a      	ldrh	r2, [r3, #0]
 8014752:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014756:	f103 0310 	add.w	r3, r3, #16
 801475a:	881b      	ldrh	r3, [r3, #0]
 801475c:	4928      	ldr	r1, [pc, #160]	; (8014800 <create_StepCountMap_queue+0x5d0>)
 801475e:	0112      	lsls	r2, r2, #4
 8014760:	4413      	add	r3, r2
 8014762:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014766:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801476a:	f103 0312 	add.w	r3, r3, #18
 801476e:	881b      	ldrh	r3, [r3, #0]
 8014770:	1e5a      	subs	r2, r3, #1
 8014772:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014776:	f103 0310 	add.w	r3, r3, #16
 801477a:	881b      	ldrh	r3, [r3, #0]
 801477c:	3101      	adds	r1, #1
 801477e:	b288      	uxth	r0, r1
 8014780:	491f      	ldr	r1, [pc, #124]	; (8014800 <create_StepCountMap_queue+0x5d0>)
 8014782:	0112      	lsls	r2, r2, #4
 8014784:	4413      	add	r3, r2
 8014786:	4602      	mov	r2, r0
 8014788:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801478c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014790:	f103 0312 	add.w	r3, r3, #18
 8014794:	881b      	ldrh	r3, [r3, #0]
 8014796:	3b01      	subs	r3, #1
 8014798:	b29a      	uxth	r2, r3
 801479a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801479e:	4611      	mov	r1, r2
 80147a0:	4618      	mov	r0, r3
 80147a2:	f000 fb17 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80147a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147aa:	f103 0310 	add.w	r3, r3, #16
 80147ae:	881a      	ldrh	r2, [r3, #0]
 80147b0:	463b      	mov	r3, r7
 80147b2:	4611      	mov	r1, r2
 80147b4:	4618      	mov	r0, r3
 80147b6:	f000 fb0d 	bl	8014dd4 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80147ba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147be:	f103 0312 	add.w	r3, r3, #18
 80147c2:	881a      	ldrh	r2, [r3, #0]
 80147c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147c8:	f103 0310 	add.w	r3, r3, #16
 80147cc:	881b      	ldrh	r3, [r3, #0]
 80147ce:	490c      	ldr	r1, [pc, #48]	; (8014800 <create_StepCountMap_queue+0x5d0>)
 80147d0:	0112      	lsls	r2, r2, #4
 80147d2:	4413      	add	r3, r2
 80147d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80147d8:	3301      	adds	r3, #1
 80147da:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80147de:	f102 021c 	add.w	r2, r2, #28
 80147e2:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80147e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147e8:	f103 031c 	add.w	r3, r3, #28
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	2bfe      	cmp	r3, #254	; 0xfe
 80147f0:	f67f adca 	bls.w	8014388 <create_StepCountMap_queue+0x158>

		}

}
 80147f4:	bf00      	nop
 80147f6:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	20000d30 	.word	0x20000d30

08014804 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014804:	b580      	push	{r7, lr}
 8014806:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801480a:	b082      	sub	sp, #8
 801480c:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801480e:	2300      	movs	r3, #0
 8014810:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014814:	f102 0207 	add.w	r2, r2, #7
 8014818:	7013      	strb	r3, [r2, #0]
 801481a:	e033      	b.n	8014884 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 801481c:	2300      	movs	r3, #0
 801481e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014822:	f102 0206 	add.w	r2, r2, #6
 8014826:	7013      	strb	r3, [r2, #0]
 8014828:	e01a      	b.n	8014860 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 801482a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801482e:	f103 0307 	add.w	r3, r3, #7
 8014832:	781a      	ldrb	r2, [r3, #0]
 8014834:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014838:	f103 0306 	add.w	r3, r3, #6
 801483c:	781b      	ldrb	r3, [r3, #0]
 801483e:	4931      	ldr	r1, [pc, #196]	; (8014904 <create_StepCountMapBack_queue+0x100>)
 8014840:	0112      	lsls	r2, r2, #4
 8014842:	4413      	add	r3, r2
 8014844:	22ff      	movs	r2, #255	; 0xff
 8014846:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 801484a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801484e:	f103 0306 	add.w	r3, r3, #6
 8014852:	781b      	ldrb	r3, [r3, #0]
 8014854:	3301      	adds	r3, #1
 8014856:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801485a:	f102 0206 	add.w	r2, r2, #6
 801485e:	7013      	strb	r3, [r2, #0]
 8014860:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014864:	f103 0306 	add.w	r3, r3, #6
 8014868:	781b      	ldrb	r3, [r3, #0]
 801486a:	2b0f      	cmp	r3, #15
 801486c:	d9dd      	bls.n	801482a <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 801486e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014872:	f103 0307 	add.w	r3, r3, #7
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	3301      	adds	r3, #1
 801487a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801487e:	f102 0207 	add.w	r2, r2, #7
 8014882:	7013      	strb	r3, [r2, #0]
 8014884:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014888:	f103 0307 	add.w	r3, r3, #7
 801488c:	781b      	ldrb	r3, [r3, #0]
 801488e:	2b0f      	cmp	r3, #15
 8014890:	d9c4      	bls.n	801481c <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 8014892:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014896:	4618      	mov	r0, r3
 8014898:	f000 fa8c 	bl	8014db4 <initStack_walk>
	initStack_walk(&stack_y);
 801489c:	f107 0308 	add.w	r3, r7, #8
 80148a0:	3b04      	subs	r3, #4
 80148a2:	4618      	mov	r0, r3
 80148a4:	f000 fa86 	bl	8014db4 <initStack_walk>


	walk_count[0][0] = 0;
 80148a8:	4b16      	ldr	r3, [pc, #88]	; (8014904 <create_StepCountMapBack_queue+0x100>)
 80148aa:	2200      	movs	r2, #0
 80148ac:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80148ae:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80148b2:	2100      	movs	r1, #0
 80148b4:	4618      	mov	r0, r3
 80148b6:	f000 fa8d 	bl	8014dd4 <pushStack_walk>
 80148ba:	f107 0308 	add.w	r3, r7, #8
 80148be:	3b04      	subs	r3, #4
 80148c0:	2100      	movs	r1, #0
 80148c2:	4618      	mov	r0, r3
 80148c4:	f000 fa86 	bl	8014dd4 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 80148c8:	2301      	movs	r3, #1
 80148ca:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80148ce:	f102 0204 	add.w	r2, r2, #4
 80148d2:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80148d4:	2301      	movs	r3, #1
 80148d6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80148da:	f102 0202 	add.w	r2, r2, #2
 80148de:	8013      	strh	r3, [r2, #0]
 80148e0:	2301      	movs	r3, #1
 80148e2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80148e6:	8013      	strh	r3, [r2, #0]
 80148e8:	2301      	movs	r3, #1
 80148ea:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148ee:	f102 021e 	add.w	r2, r2, #30
 80148f2:	8013      	strh	r3, [r2, #0]
 80148f4:	2301      	movs	r3, #1
 80148f6:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148fa:	f102 021c 	add.w	r2, r2, #28
 80148fe:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014900:	e248      	b.n	8014d94 <create_StepCountMapBack_queue+0x590>
 8014902:	bf00      	nop
 8014904:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014908:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801490c:	4618      	mov	r0, r3
 801490e:	f000 fa8b 	bl	8014e28 <popStack_walk>
 8014912:	4603      	mov	r3, r0
 8014914:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014918:	f102 021a 	add.w	r2, r2, #26
 801491c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801491e:	f107 0308 	add.w	r3, r7, #8
 8014922:	3b04      	subs	r3, #4
 8014924:	4618      	mov	r0, r3
 8014926:	f000 fa7f 	bl	8014e28 <popStack_walk>
 801492a:	4603      	mov	r3, r0
 801492c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014930:	f102 0218 	add.w	r2, r2, #24
 8014934:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014936:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801493a:	f103 031a 	add.w	r3, r3, #26
 801493e:	881b      	ldrh	r3, [r3, #0]
 8014940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014944:	4293      	cmp	r3, r2
 8014946:	f000 822d 	beq.w	8014da4 <create_StepCountMapBack_queue+0x5a0>
 801494a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801494e:	f103 0318 	add.w	r3, r3, #24
 8014952:	881b      	ldrh	r3, [r3, #0]
 8014954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014958:	4293      	cmp	r3, r2
 801495a:	f000 8223 	beq.w	8014da4 <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 801495e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014962:	f103 031a 	add.w	r3, r3, #26
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	011b      	lsls	r3, r3, #4
 801496a:	b29a      	uxth	r2, r3
 801496c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014970:	f103 0318 	add.w	r3, r3, #24
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	4413      	add	r3, r2
 8014978:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801497c:	f102 0216 	add.w	r2, r2, #22
 8014980:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 8014982:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014986:	f103 0318 	add.w	r3, r3, #24
 801498a:	881b      	ldrh	r3, [r3, #0]
 801498c:	2b0e      	cmp	r3, #14
 801498e:	d81a      	bhi.n	80149c6 <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014990:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014994:	f103 0318 	add.w	r3, r3, #24
 8014998:	881b      	ldrh	r3, [r3, #0]
 801499a:	4ac4      	ldr	r2, [pc, #784]	; (8014cac <create_StepCountMapBack_queue+0x4a8>)
 801499c:	330c      	adds	r3, #12
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	4413      	add	r3, r2
 80149a2:	88db      	ldrh	r3, [r3, #6]
 80149a4:	b21a      	sxth	r2, r3
 80149a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149aa:	f103 031a 	add.w	r3, r3, #26
 80149ae:	881b      	ldrh	r3, [r3, #0]
 80149b0:	2101      	movs	r1, #1
 80149b2:	fa01 f303 	lsl.w	r3, r1, r3
 80149b6:	b21b      	sxth	r3, r3
 80149b8:	4013      	ands	r3, r2
 80149ba:	b21b      	sxth	r3, r3
 80149bc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80149c0:	f102 0202 	add.w	r2, r2, #2
 80149c4:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80149c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ca:	f103 0318 	add.w	r3, r3, #24
 80149ce:	881b      	ldrh	r3, [r3, #0]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d019      	beq.n	8014a08 <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80149d4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149d8:	f103 0318 	add.w	r3, r3, #24
 80149dc:	881b      	ldrh	r3, [r3, #0]
 80149de:	3b01      	subs	r3, #1
 80149e0:	4ab2      	ldr	r2, [pc, #712]	; (8014cac <create_StepCountMapBack_queue+0x4a8>)
 80149e2:	330c      	adds	r3, #12
 80149e4:	005b      	lsls	r3, r3, #1
 80149e6:	4413      	add	r3, r2
 80149e8:	88db      	ldrh	r3, [r3, #6]
 80149ea:	b21a      	sxth	r2, r3
 80149ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149f0:	f103 031a 	add.w	r3, r3, #26
 80149f4:	881b      	ldrh	r3, [r3, #0]
 80149f6:	2101      	movs	r1, #1
 80149f8:	fa01 f303 	lsl.w	r3, r1, r3
 80149fc:	b21b      	sxth	r3, r3
 80149fe:	4013      	ands	r3, r2
 8014a00:	b21b      	sxth	r3, r3
 8014a02:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014a06:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014a08:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a0c:	f103 031a 	add.w	r3, r3, #26
 8014a10:	881b      	ldrh	r3, [r3, #0]
 8014a12:	2b0e      	cmp	r3, #14
 8014a14:	d818      	bhi.n	8014a48 <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8014a16:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a1a:	f103 031a 	add.w	r3, r3, #26
 8014a1e:	881b      	ldrh	r3, [r3, #0]
 8014a20:	4aa2      	ldr	r2, [pc, #648]	; (8014cac <create_StepCountMapBack_queue+0x4a8>)
 8014a22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a26:	b21a      	sxth	r2, r3
 8014a28:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a2c:	f103 0318 	add.w	r3, r3, #24
 8014a30:	881b      	ldrh	r3, [r3, #0]
 8014a32:	2101      	movs	r1, #1
 8014a34:	fa01 f303 	lsl.w	r3, r1, r3
 8014a38:	b21b      	sxth	r3, r3
 8014a3a:	4013      	ands	r3, r2
 8014a3c:	b21b      	sxth	r3, r3
 8014a3e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a42:	f102 021e 	add.w	r2, r2, #30
 8014a46:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014a48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a4c:	f103 031a 	add.w	r3, r3, #26
 8014a50:	881b      	ldrh	r3, [r3, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d019      	beq.n	8014a8a <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8014a56:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a5a:	f103 031a 	add.w	r3, r3, #26
 8014a5e:	881b      	ldrh	r3, [r3, #0]
 8014a60:	3b01      	subs	r3, #1
 8014a62:	4a92      	ldr	r2, [pc, #584]	; (8014cac <create_StepCountMapBack_queue+0x4a8>)
 8014a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a68:	b21a      	sxth	r2, r3
 8014a6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a6e:	f103 0318 	add.w	r3, r3, #24
 8014a72:	881b      	ldrh	r3, [r3, #0]
 8014a74:	2101      	movs	r1, #1
 8014a76:	fa01 f303 	lsl.w	r3, r1, r3
 8014a7a:	b21b      	sxth	r3, r3
 8014a7c:	4013      	ands	r3, r2
 8014a7e:	b21b      	sxth	r3, r3
 8014a80:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a84:	f102 021c 	add.w	r2, r2, #28
 8014a88:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014a8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a8e:	f103 031a 	add.w	r3, r3, #26
 8014a92:	881a      	ldrh	r2, [r3, #0]
 8014a94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a98:	f103 0318 	add.w	r3, r3, #24
 8014a9c:	881b      	ldrh	r3, [r3, #0]
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	4983      	ldr	r1, [pc, #524]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014aa2:	0112      	lsls	r2, r2, #4
 8014aa4:	4413      	add	r3, r2
 8014aa6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014aaa:	2bff      	cmp	r3, #255	; 0xff
 8014aac:	d148      	bne.n	8014b40 <create_StepCountMapBack_queue+0x33c>
 8014aae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ab2:	f103 0318 	add.w	r3, r3, #24
 8014ab6:	881b      	ldrh	r3, [r3, #0]
 8014ab8:	2b0f      	cmp	r3, #15
 8014aba:	d041      	beq.n	8014b40 <create_StepCountMapBack_queue+0x33c>
 8014abc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014ac0:	f103 0302 	add.w	r3, r3, #2
 8014ac4:	881b      	ldrh	r3, [r3, #0]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d13a      	bne.n	8014b40 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014aca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ace:	f103 031a 	add.w	r3, r3, #26
 8014ad2:	881a      	ldrh	r2, [r3, #0]
 8014ad4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ad8:	f103 0318 	add.w	r3, r3, #24
 8014adc:	881b      	ldrh	r3, [r3, #0]
 8014ade:	4974      	ldr	r1, [pc, #464]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014ae0:	0112      	lsls	r2, r2, #4
 8014ae2:	4413      	add	r3, r2
 8014ae4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014ae8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014aec:	f103 031a 	add.w	r3, r3, #26
 8014af0:	881a      	ldrh	r2, [r3, #0]
 8014af2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014af6:	f103 0318 	add.w	r3, r3, #24
 8014afa:	881b      	ldrh	r3, [r3, #0]
 8014afc:	3301      	adds	r3, #1
 8014afe:	3101      	adds	r1, #1
 8014b00:	b288      	uxth	r0, r1
 8014b02:	496b      	ldr	r1, [pc, #428]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014b04:	0112      	lsls	r2, r2, #4
 8014b06:	4413      	add	r3, r2
 8014b08:	4602      	mov	r2, r0
 8014b0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014b0e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b12:	f103 031a 	add.w	r3, r3, #26
 8014b16:	881a      	ldrh	r2, [r3, #0]
 8014b18:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f000 f958 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014b24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b28:	f103 0318 	add.w	r3, r3, #24
 8014b2c:	881b      	ldrh	r3, [r3, #0]
 8014b2e:	3301      	adds	r3, #1
 8014b30:	b29a      	uxth	r2, r3
 8014b32:	f107 0308 	add.w	r3, r7, #8
 8014b36:	3b04      	subs	r3, #4
 8014b38:	4611      	mov	r1, r2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f000 f94a 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014b40:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b44:	f103 031a 	add.w	r3, r3, #26
 8014b48:	881a      	ldrh	r2, [r3, #0]
 8014b4a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b4e:	f103 0318 	add.w	r3, r3, #24
 8014b52:	881b      	ldrh	r3, [r3, #0]
 8014b54:	3b01      	subs	r3, #1
 8014b56:	4956      	ldr	r1, [pc, #344]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014b58:	0112      	lsls	r2, r2, #4
 8014b5a:	4413      	add	r3, r2
 8014b5c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b60:	2bff      	cmp	r3, #255	; 0xff
 8014b62:	d146      	bne.n	8014bf2 <create_StepCountMapBack_queue+0x3ee>
 8014b64:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b68:	f103 0318 	add.w	r3, r3, #24
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d03f      	beq.n	8014bf2 <create_StepCountMapBack_queue+0x3ee>
 8014b72:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014b76:	881b      	ldrh	r3, [r3, #0]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d13a      	bne.n	8014bf2 <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014b7c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b80:	f103 031a 	add.w	r3, r3, #26
 8014b84:	881a      	ldrh	r2, [r3, #0]
 8014b86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b8a:	f103 0318 	add.w	r3, r3, #24
 8014b8e:	881b      	ldrh	r3, [r3, #0]
 8014b90:	4947      	ldr	r1, [pc, #284]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014b92:	0112      	lsls	r2, r2, #4
 8014b94:	4413      	add	r3, r2
 8014b96:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014b9a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b9e:	f103 031a 	add.w	r3, r3, #26
 8014ba2:	881a      	ldrh	r2, [r3, #0]
 8014ba4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ba8:	f103 0318 	add.w	r3, r3, #24
 8014bac:	881b      	ldrh	r3, [r3, #0]
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	3101      	adds	r1, #1
 8014bb2:	b288      	uxth	r0, r1
 8014bb4:	493e      	ldr	r1, [pc, #248]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014bb6:	0112      	lsls	r2, r2, #4
 8014bb8:	4413      	add	r3, r2
 8014bba:	4602      	mov	r2, r0
 8014bbc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014bc0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bc4:	f103 031a 	add.w	r3, r3, #26
 8014bc8:	881a      	ldrh	r2, [r3, #0]
 8014bca:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014bce:	4611      	mov	r1, r2
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f000 f8ff 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014bd6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bda:	f103 0318 	add.w	r3, r3, #24
 8014bde:	881b      	ldrh	r3, [r3, #0]
 8014be0:	3b01      	subs	r3, #1
 8014be2:	b29a      	uxth	r2, r3
 8014be4:	f107 0308 	add.w	r3, r7, #8
 8014be8:	3b04      	subs	r3, #4
 8014bea:	4611      	mov	r1, r2
 8014bec:	4618      	mov	r0, r3
 8014bee:	f000 f8f1 	bl	8014dd4 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014bf2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bf6:	f103 031a 	add.w	r3, r3, #26
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	1c5a      	adds	r2, r3, #1
 8014bfe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c02:	f103 0318 	add.w	r3, r3, #24
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	4929      	ldr	r1, [pc, #164]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014c0a:	0112      	lsls	r2, r2, #4
 8014c0c:	4413      	add	r3, r2
 8014c0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c12:	2bff      	cmp	r3, #255	; 0xff
 8014c14:	d14e      	bne.n	8014cb4 <create_StepCountMapBack_queue+0x4b0>
 8014c16:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c1a:	f103 031a 	add.w	r3, r3, #26
 8014c1e:	881b      	ldrh	r3, [r3, #0]
 8014c20:	2b0f      	cmp	r3, #15
 8014c22:	d047      	beq.n	8014cb4 <create_StepCountMapBack_queue+0x4b0>
 8014c24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c28:	f103 031e 	add.w	r3, r3, #30
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d140      	bne.n	8014cb4 <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014c32:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c36:	f103 031a 	add.w	r3, r3, #26
 8014c3a:	881a      	ldrh	r2, [r3, #0]
 8014c3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c40:	f103 0318 	add.w	r3, r3, #24
 8014c44:	881b      	ldrh	r3, [r3, #0]
 8014c46:	491a      	ldr	r1, [pc, #104]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014c48:	0112      	lsls	r2, r2, #4
 8014c4a:	4413      	add	r3, r2
 8014c4c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014c50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c54:	f103 031a 	add.w	r3, r3, #26
 8014c58:	881b      	ldrh	r3, [r3, #0]
 8014c5a:	1c5a      	adds	r2, r3, #1
 8014c5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c60:	f103 0318 	add.w	r3, r3, #24
 8014c64:	881b      	ldrh	r3, [r3, #0]
 8014c66:	3101      	adds	r1, #1
 8014c68:	b288      	uxth	r0, r1
 8014c6a:	4911      	ldr	r1, [pc, #68]	; (8014cb0 <create_StepCountMapBack_queue+0x4ac>)
 8014c6c:	0112      	lsls	r2, r2, #4
 8014c6e:	4413      	add	r3, r2
 8014c70:	4602      	mov	r2, r0
 8014c72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014c76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c7a:	f103 031a 	add.w	r3, r3, #26
 8014c7e:	881b      	ldrh	r3, [r3, #0]
 8014c80:	3301      	adds	r3, #1
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014c88:	4611      	mov	r1, r2
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f000 f8a2 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014c90:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c94:	f103 0318 	add.w	r3, r3, #24
 8014c98:	881a      	ldrh	r2, [r3, #0]
 8014c9a:	f107 0308 	add.w	r3, r7, #8
 8014c9e:	3b04      	subs	r3, #4
 8014ca0:	4611      	mov	r1, r2
 8014ca2:	4618      	mov	r0, r3
 8014ca4:	f000 f896 	bl	8014dd4 <pushStack_walk>
 8014ca8:	e004      	b.n	8014cb4 <create_StepCountMapBack_queue+0x4b0>
 8014caa:	bf00      	nop
 8014cac:	20000c3c 	.word	0x20000c3c
 8014cb0:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014cb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cb8:	f103 031a 	add.w	r3, r3, #26
 8014cbc:	881b      	ldrh	r3, [r3, #0]
 8014cbe:	1e5a      	subs	r2, r3, #1
 8014cc0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cc4:	f103 0318 	add.w	r3, r3, #24
 8014cc8:	881b      	ldrh	r3, [r3, #0]
 8014cca:	4939      	ldr	r1, [pc, #228]	; (8014db0 <create_StepCountMapBack_queue+0x5ac>)
 8014ccc:	0112      	lsls	r2, r2, #4
 8014cce:	4413      	add	r3, r2
 8014cd0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014cd4:	2bff      	cmp	r3, #255	; 0xff
 8014cd6:	d148      	bne.n	8014d6a <create_StepCountMapBack_queue+0x566>
 8014cd8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cdc:	f103 031a 	add.w	r3, r3, #26
 8014ce0:	881b      	ldrh	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d041      	beq.n	8014d6a <create_StepCountMapBack_queue+0x566>
 8014ce6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cea:	f103 031c 	add.w	r3, r3, #28
 8014cee:	881b      	ldrh	r3, [r3, #0]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d13a      	bne.n	8014d6a <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014cf4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cf8:	f103 031a 	add.w	r3, r3, #26
 8014cfc:	881a      	ldrh	r2, [r3, #0]
 8014cfe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d02:	f103 0318 	add.w	r3, r3, #24
 8014d06:	881b      	ldrh	r3, [r3, #0]
 8014d08:	4929      	ldr	r1, [pc, #164]	; (8014db0 <create_StepCountMapBack_queue+0x5ac>)
 8014d0a:	0112      	lsls	r2, r2, #4
 8014d0c:	4413      	add	r3, r2
 8014d0e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014d12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d16:	f103 031a 	add.w	r3, r3, #26
 8014d1a:	881b      	ldrh	r3, [r3, #0]
 8014d1c:	1e5a      	subs	r2, r3, #1
 8014d1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d22:	f103 0318 	add.w	r3, r3, #24
 8014d26:	881b      	ldrh	r3, [r3, #0]
 8014d28:	3101      	adds	r1, #1
 8014d2a:	b288      	uxth	r0, r1
 8014d2c:	4920      	ldr	r1, [pc, #128]	; (8014db0 <create_StepCountMapBack_queue+0x5ac>)
 8014d2e:	0112      	lsls	r2, r2, #4
 8014d30:	4413      	add	r3, r2
 8014d32:	4602      	mov	r2, r0
 8014d34:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014d38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d3c:	f103 031a 	add.w	r3, r3, #26
 8014d40:	881b      	ldrh	r3, [r3, #0]
 8014d42:	3b01      	subs	r3, #1
 8014d44:	b29a      	uxth	r2, r3
 8014d46:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014d4a:	4611      	mov	r1, r2
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 f841 	bl	8014dd4 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014d52:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d56:	f103 0318 	add.w	r3, r3, #24
 8014d5a:	881a      	ldrh	r2, [r3, #0]
 8014d5c:	f107 0308 	add.w	r3, r7, #8
 8014d60:	3b04      	subs	r3, #4
 8014d62:	4611      	mov	r1, r2
 8014d64:	4618      	mov	r0, r3
 8014d66:	f000 f835 	bl	8014dd4 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014d6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d6e:	f103 031a 	add.w	r3, r3, #26
 8014d72:	881a      	ldrh	r2, [r3, #0]
 8014d74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d78:	f103 0318 	add.w	r3, r3, #24
 8014d7c:	881b      	ldrh	r3, [r3, #0]
 8014d7e:	490c      	ldr	r1, [pc, #48]	; (8014db0 <create_StepCountMapBack_queue+0x5ac>)
 8014d80:	0112      	lsls	r2, r2, #4
 8014d82:	4413      	add	r3, r2
 8014d84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014d8e:	f102 0204 	add.w	r2, r2, #4
 8014d92:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014d94:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014d98:	f103 0304 	add.w	r3, r3, #4
 8014d9c:	881b      	ldrh	r3, [r3, #0]
 8014d9e:	2bfe      	cmp	r3, #254	; 0xfe
 8014da0:	f67f adb2 	bls.w	8014908 <create_StepCountMapBack_queue+0x104>

		}

}
 8014da4:	bf00      	nop
 8014da6:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014daa:	3708      	adds	r7, #8
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}
 8014db0:	20000d30 	.word	0x20000d30

08014db4 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014db4:	b480      	push	{r7}
 8014db6:	b083      	sub	sp, #12
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	605a      	str	r2, [r3, #4]
}
 8014dc8:	bf00      	nop
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr

08014dd4 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	685a      	ldr	r2, [r3, #4]
 8014de4:	8879      	ldrh	r1, [r7, #2]
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	3202      	adds	r2, #2
 8014dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	1c5a      	adds	r2, r3, #1
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014e00:	d102      	bne.n	8014e08 <pushStack_walk+0x34>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2200      	movs	r2, #0
 8014e06:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	685a      	ldr	r2, [r3, #4]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	681b      	ldr	r3, [r3, #0]
 8014e10:	429a      	cmp	r2, r3
 8014e12:	d103      	bne.n	8014e1c <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014e14:	4803      	ldr	r0, [pc, #12]	; (8014e24 <pushStack_walk+0x50>)
 8014e16:	f00b ffb7 	bl	8020d88 <puts>
        return;
 8014e1a:	bf00      	nop
    }
}
 8014e1c:	3708      	adds	r7, #8
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
 8014e22:	bf00      	nop
 8014e24:	080235a4 	.word	0x080235a4

08014e28 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014e30:	2300      	movs	r3, #0
 8014e32:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	685a      	ldr	r2, [r3, #4]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	681b      	ldr	r3, [r3, #0]
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	d102      	bne.n	8014e46 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e44:	e014      	b.n	8014e70 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	3202      	adds	r2, #2
 8014e4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e52:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	1c5a      	adds	r2, r3, #1
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014e66:	d102      	bne.n	8014e6e <popStack_walk+0x46>
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014e6e:	89fb      	ldrh	r3, [r7, #14]
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3714      	adds	r7, #20
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0

	int tt = 14;
 8014e82:	230e      	movs	r3, #14
 8014e84:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014e86:	2300      	movs	r3, #0
 8014e88:	603b      	str	r3, [r7, #0]

	printf(
 8014e8a:	4881      	ldr	r0, [pc, #516]	; (8015090 <maze_display+0x214>)
 8014e8c:	f00b ff7c 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014e90:	230e      	movs	r3, #14
 8014e92:	607b      	str	r3, [r7, #4]
 8014e94:	e06e      	b.n	8014f74 <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	3301      	adds	r3, #1
 8014e9a:	4a7e      	ldr	r2, [pc, #504]	; (8015094 <maze_display+0x218>)
 8014e9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ea0:	4619      	mov	r1, r3
 8014ea2:	487d      	ldr	r0, [pc, #500]	; (8015098 <maze_display+0x21c>)
 8014ea4:	f00b fed4 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	603b      	str	r3, [r7, #0]
 8014eac:	e030      	b.n	8014f10 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014eae:	4a7b      	ldr	r2, [pc, #492]	; (801509c <maze_display+0x220>)
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014eb6:	4619      	mov	r1, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	3301      	adds	r3, #1
 8014ebc:	2201      	movs	r2, #1
 8014ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8014ec2:	ea01 0203 	and.w	r2, r1, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	3301      	adds	r3, #1
 8014eca:	2101      	movs	r1, #1
 8014ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d10d      	bne.n	8014ef0 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	1c5a      	adds	r2, r3, #1
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	3301      	adds	r3, #1
 8014edc:	496d      	ldr	r1, [pc, #436]	; (8015094 <maze_display+0x218>)
 8014ede:	0112      	lsls	r2, r2, #4
 8014ee0:	4413      	add	r3, r2
 8014ee2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014ee6:	4619      	mov	r1, r3
 8014ee8:	486b      	ldr	r0, [pc, #428]	; (8015098 <maze_display+0x21c>)
 8014eea:	f00b feb1 	bl	8020c50 <iprintf>
 8014eee:	e00c      	b.n	8014f0a <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	1c5a      	adds	r2, r3, #1
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	3301      	adds	r3, #1
 8014ef8:	4966      	ldr	r1, [pc, #408]	; (8015094 <maze_display+0x218>)
 8014efa:	0112      	lsls	r2, r2, #4
 8014efc:	4413      	add	r3, r2
 8014efe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f02:	4619      	mov	r1, r3
 8014f04:	4866      	ldr	r0, [pc, #408]	; (80150a0 <maze_display+0x224>)
 8014f06:	f00b fea3 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	603b      	str	r3, [r7, #0]
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	2b0e      	cmp	r3, #14
 8014f14:	ddcb      	ble.n	8014eae <maze_display+0x32>
			}
		}
		printf("|\n");
 8014f16:	4863      	ldr	r0, [pc, #396]	; (80150a4 <maze_display+0x228>)
 8014f18:	f00b ff36 	bl	8020d88 <puts>
		if (tt <= -1) {
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	db2d      	blt.n	8014f7e <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014f22:	2300      	movs	r3, #0
 8014f24:	603b      	str	r3, [r7, #0]
 8014f26:	e01c      	b.n	8014f62 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014f28:	4a5c      	ldr	r2, [pc, #368]	; (801509c <maze_display+0x220>)
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	330c      	adds	r3, #12
 8014f2e:	005b      	lsls	r3, r3, #1
 8014f30:	4413      	add	r3, r2
 8014f32:	88db      	ldrh	r3, [r3, #6]
 8014f34:	4619      	mov	r1, r3
 8014f36:	2201      	movs	r2, #1
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8014f3e:	ea01 0203 	and.w	r2, r1, r3
 8014f42:	2101      	movs	r1, #1
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	fa01 f303 	lsl.w	r3, r1, r3
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d103      	bne.n	8014f56 <maze_display+0xda>
				printf("+-----");
 8014f4e:	4856      	ldr	r0, [pc, #344]	; (80150a8 <maze_display+0x22c>)
 8014f50:	f00b fe7e 	bl	8020c50 <iprintf>
 8014f54:	e002      	b.n	8014f5c <maze_display+0xe0>
			}else{
				printf("+     ");
 8014f56:	4855      	ldr	r0, [pc, #340]	; (80150ac <maze_display+0x230>)
 8014f58:	f00b fe7a 	bl	8020c50 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	603b      	str	r3, [r7, #0]
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	2b0f      	cmp	r3, #15
 8014f66:	dddf      	ble.n	8014f28 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014f68:	4851      	ldr	r0, [pc, #324]	; (80150b0 <maze_display+0x234>)
 8014f6a:	f00b ff0d 	bl	8020d88 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	3b01      	subs	r3, #1
 8014f72:	607b      	str	r3, [r7, #4]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f7a:	da8c      	bge.n	8014e96 <maze_display+0x1a>
 8014f7c:	e000      	b.n	8014f80 <maze_display+0x104>
			break;
 8014f7e:	bf00      	nop

	}

	printf(
 8014f80:	484c      	ldr	r0, [pc, #304]	; (80150b4 <maze_display+0x238>)
 8014f82:	f00b ff01 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014f86:	4842      	ldr	r0, [pc, #264]	; (8015090 <maze_display+0x214>)
 8014f88:	f00b fefe 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014f8c:	230e      	movs	r3, #14
 8014f8e:	607b      	str	r3, [r7, #4]
 8014f90:	e070      	b.n	8015074 <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	3301      	adds	r3, #1
 8014f96:	4a3f      	ldr	r2, [pc, #252]	; (8015094 <maze_display+0x218>)
 8014f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	483e      	ldr	r0, [pc, #248]	; (8015098 <maze_display+0x21c>)
 8014fa0:	f00b fe56 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014fa4:	2300      	movs	r3, #0
 8014fa6:	603b      	str	r3, [r7, #0]
 8014fa8:	e032      	b.n	8015010 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014faa:	4a3c      	ldr	r2, [pc, #240]	; (801509c <maze_display+0x220>)
 8014fac:	683b      	ldr	r3, [r7, #0]
 8014fae:	331c      	adds	r3, #28
 8014fb0:	005b      	lsls	r3, r3, #1
 8014fb2:	4413      	add	r3, r2
 8014fb4:	889b      	ldrh	r3, [r3, #4]
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	2201      	movs	r2, #1
 8014fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8014fc2:	ea01 0203 	and.w	r2, r1, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	3301      	adds	r3, #1
 8014fca:	2101      	movs	r1, #1
 8014fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d10d      	bne.n	8014ff0 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	1c5a      	adds	r2, r3, #1
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	3301      	adds	r3, #1
 8014fdc:	492d      	ldr	r1, [pc, #180]	; (8015094 <maze_display+0x218>)
 8014fde:	0112      	lsls	r2, r2, #4
 8014fe0:	4413      	add	r3, r2
 8014fe2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014fe6:	4619      	mov	r1, r3
 8014fe8:	482b      	ldr	r0, [pc, #172]	; (8015098 <maze_display+0x21c>)
 8014fea:	f00b fe31 	bl	8020c50 <iprintf>
 8014fee:	e00c      	b.n	801500a <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	1c5a      	adds	r2, r3, #1
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	4926      	ldr	r1, [pc, #152]	; (8015094 <maze_display+0x218>)
 8014ffa:	0112      	lsls	r2, r2, #4
 8014ffc:	4413      	add	r3, r2
 8014ffe:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015002:	4619      	mov	r1, r3
 8015004:	4826      	ldr	r0, [pc, #152]	; (80150a0 <maze_display+0x224>)
 8015006:	f00b fe23 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801500a:	683b      	ldr	r3, [r7, #0]
 801500c:	3301      	adds	r3, #1
 801500e:	603b      	str	r3, [r7, #0]
 8015010:	683b      	ldr	r3, [r7, #0]
 8015012:	2b0e      	cmp	r3, #14
 8015014:	ddc9      	ble.n	8014faa <maze_display+0x12e>
			}
		}
		printf("|\n");
 8015016:	4823      	ldr	r0, [pc, #140]	; (80150a4 <maze_display+0x228>)
 8015018:	f00b feb6 	bl	8020d88 <puts>
		if (tt <= -1) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	2b00      	cmp	r3, #0
 8015020:	db2d      	blt.n	801507e <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015022:	2300      	movs	r3, #0
 8015024:	603b      	str	r3, [r7, #0]
 8015026:	e01c      	b.n	8015062 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8015028:	4a1c      	ldr	r2, [pc, #112]	; (801509c <maze_display+0x220>)
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	332c      	adds	r3, #44	; 0x2c
 801502e:	005b      	lsls	r3, r3, #1
 8015030:	4413      	add	r3, r2
 8015032:	885b      	ldrh	r3, [r3, #2]
 8015034:	4619      	mov	r1, r3
 8015036:	2201      	movs	r2, #1
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	fa02 f303 	lsl.w	r3, r2, r3
 801503e:	ea01 0203 	and.w	r2, r1, r3
 8015042:	2101      	movs	r1, #1
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	fa01 f303 	lsl.w	r3, r1, r3
 801504a:	429a      	cmp	r2, r3
 801504c:	d103      	bne.n	8015056 <maze_display+0x1da>
				printf("+-----");
 801504e:	4816      	ldr	r0, [pc, #88]	; (80150a8 <maze_display+0x22c>)
 8015050:	f00b fdfe 	bl	8020c50 <iprintf>
 8015054:	e002      	b.n	801505c <maze_display+0x1e0>
			}else{
				printf("+     ");
 8015056:	4815      	ldr	r0, [pc, #84]	; (80150ac <maze_display+0x230>)
 8015058:	f00b fdfa 	bl	8020c50 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	3301      	adds	r3, #1
 8015060:	603b      	str	r3, [r7, #0]
 8015062:	683b      	ldr	r3, [r7, #0]
 8015064:	2b0f      	cmp	r3, #15
 8015066:	dddf      	ble.n	8015028 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8015068:	4811      	ldr	r0, [pc, #68]	; (80150b0 <maze_display+0x234>)
 801506a:	f00b fe8d 	bl	8020d88 <puts>
	for (tt = 14;tt >= -1;tt--){
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	3b01      	subs	r3, #1
 8015072:	607b      	str	r3, [r7, #4]
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f1b3 3fff 	cmp.w	r3, #4294967295
 801507a:	da8a      	bge.n	8014f92 <maze_display+0x116>
 801507c:	e000      	b.n	8015080 <maze_display+0x204>
			break;
 801507e:	bf00      	nop
	}

	printf(
 8015080:	480c      	ldr	r0, [pc, #48]	; (80150b4 <maze_display+0x238>)
 8015082:	f00b fe81 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8015086:	bf00      	nop
 8015088:	3708      	adds	r7, #8
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	080235b0 	.word	0x080235b0
 8015094:	20000d30 	.word	0x20000d30
 8015098:	08023614 	.word	0x08023614
 801509c:	20000c3c 	.word	0x20000c3c
 80150a0:	0802361c 	.word	0x0802361c
 80150a4:	08023624 	.word	0x08023624
 80150a8:	08023628 	.word	0x08023628
 80150ac:	08023630 	.word	0x08023630
 80150b0:	08023638 	.word	0x08023638
 80150b4:	0802363c 	.word	0x0802363c

080150b8 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0

	int tt = 14;
 80150be:	230e      	movs	r3, #14
 80150c0:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	603b      	str	r3, [r7, #0]

	printf(
 80150c6:	4865      	ldr	r0, [pc, #404]	; (801525c <maze_display_Dijkstra+0x1a4>)
 80150c8:	f00b fe5e 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80150cc:	230e      	movs	r3, #14
 80150ce:	607b      	str	r3, [r7, #4]
 80150d0:	e06a      	b.n	80151a8 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 80150d2:	4863      	ldr	r0, [pc, #396]	; (8015260 <maze_display_Dijkstra+0x1a8>)
 80150d4:	f00b fdbc 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80150d8:	2300      	movs	r3, #0
 80150da:	603b      	str	r3, [r7, #0]
 80150dc:	e027      	b.n	801512e <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80150de:	4a61      	ldr	r2, [pc, #388]	; (8015264 <maze_display_Dijkstra+0x1ac>)
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150e6:	4619      	mov	r1, r3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	3301      	adds	r3, #1
 80150ec:	2201      	movs	r2, #1
 80150ee:	fa02 f303 	lsl.w	r3, r2, r3
 80150f2:	ea01 0203 	and.w	r2, r1, r3
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	3301      	adds	r3, #1
 80150fa:	2101      	movs	r1, #1
 80150fc:	fa01 f303 	lsl.w	r3, r1, r3
 8015100:	429a      	cmp	r2, r3
 8015102:	d103      	bne.n	801510c <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8015104:	4858      	ldr	r0, [pc, #352]	; (8015268 <maze_display_Dijkstra+0x1b0>)
 8015106:	f00b fda3 	bl	8020c50 <iprintf>
 801510a:	e00d      	b.n	8015128 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	1c5a      	adds	r2, r3, #1
 8015110:	4956      	ldr	r1, [pc, #344]	; (801526c <maze_display_Dijkstra+0x1b4>)
 8015112:	4613      	mov	r3, r2
 8015114:	011b      	lsls	r3, r3, #4
 8015116:	1a9b      	subs	r3, r3, r2
 8015118:	683a      	ldr	r2, [r7, #0]
 801511a:	4413      	add	r3, r2
 801511c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015120:	4619      	mov	r1, r3
 8015122:	4853      	ldr	r0, [pc, #332]	; (8015270 <maze_display_Dijkstra+0x1b8>)
 8015124:	f00b fd94 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015128:	683b      	ldr	r3, [r7, #0]
 801512a:	3301      	adds	r3, #1
 801512c:	603b      	str	r3, [r7, #0]
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	2b0e      	cmp	r3, #14
 8015132:	ddd4      	ble.n	80150de <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8015134:	484f      	ldr	r0, [pc, #316]	; (8015274 <maze_display_Dijkstra+0x1bc>)
 8015136:	f00b fe27 	bl	8020d88 <puts>
		if (tt <= -1) {
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	2b00      	cmp	r3, #0
 801513e:	db38      	blt.n	80151b2 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015140:	2300      	movs	r3, #0
 8015142:	603b      	str	r3, [r7, #0]
 8015144:	e027      	b.n	8015196 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8015146:	4a47      	ldr	r2, [pc, #284]	; (8015264 <maze_display_Dijkstra+0x1ac>)
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	330c      	adds	r3, #12
 801514c:	005b      	lsls	r3, r3, #1
 801514e:	4413      	add	r3, r2
 8015150:	88db      	ldrh	r3, [r3, #6]
 8015152:	4619      	mov	r1, r3
 8015154:	2201      	movs	r2, #1
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	fa02 f303 	lsl.w	r3, r2, r3
 801515c:	ea01 0203 	and.w	r2, r1, r3
 8015160:	2101      	movs	r1, #1
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	fa01 f303 	lsl.w	r3, r1, r3
 8015168:	429a      	cmp	r2, r3
 801516a:	d103      	bne.n	8015174 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 801516c:	4842      	ldr	r0, [pc, #264]	; (8015278 <maze_display_Dijkstra+0x1c0>)
 801516e:	f00b fd6f 	bl	8020c50 <iprintf>
 8015172:	e00d      	b.n	8015190 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8015174:	493d      	ldr	r1, [pc, #244]	; (801526c <maze_display_Dijkstra+0x1b4>)
 8015176:	683a      	ldr	r2, [r7, #0]
 8015178:	4613      	mov	r3, r2
 801517a:	011b      	lsls	r3, r3, #4
 801517c:	1a9b      	subs	r3, r3, r2
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	4413      	add	r3, r2
 8015182:	33f0      	adds	r3, #240	; 0xf0
 8015184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015188:	4619      	mov	r1, r3
 801518a:	483c      	ldr	r0, [pc, #240]	; (801527c <maze_display_Dijkstra+0x1c4>)
 801518c:	f00b fd60 	bl	8020c50 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	3301      	adds	r3, #1
 8015194:	603b      	str	r3, [r7, #0]
 8015196:	683b      	ldr	r3, [r7, #0]
 8015198:	2b0f      	cmp	r3, #15
 801519a:	ddd4      	ble.n	8015146 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 801519c:	4838      	ldr	r0, [pc, #224]	; (8015280 <maze_display_Dijkstra+0x1c8>)
 801519e:	f00b fdf3 	bl	8020d88 <puts>
	for (tt = 14;tt >= -1;tt--){
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	3b01      	subs	r3, #1
 80151a6:	607b      	str	r3, [r7, #4]
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151ae:	da90      	bge.n	80150d2 <maze_display_Dijkstra+0x1a>
 80151b0:	e000      	b.n	80151b4 <maze_display_Dijkstra+0xfc>
			break;
 80151b2:	bf00      	nop

	}

	printf(
 80151b4:	4833      	ldr	r0, [pc, #204]	; (8015284 <maze_display_Dijkstra+0x1cc>)
 80151b6:	f00b fde7 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80151ba:	4828      	ldr	r0, [pc, #160]	; (801525c <maze_display_Dijkstra+0x1a4>)
 80151bc:	f00b fde4 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80151c0:	230e      	movs	r3, #14
 80151c2:	607b      	str	r3, [r7, #4]
 80151c4:	e03c      	b.n	8015240 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 80151c6:	4826      	ldr	r0, [pc, #152]	; (8015260 <maze_display_Dijkstra+0x1a8>)
 80151c8:	f00b fd42 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80151cc:	2300      	movs	r3, #0
 80151ce:	603b      	str	r3, [r7, #0]
 80151d0:	e010      	b.n	80151f4 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	1c5a      	adds	r2, r3, #1
 80151d6:	4925      	ldr	r1, [pc, #148]	; (801526c <maze_display_Dijkstra+0x1b4>)
 80151d8:	4613      	mov	r3, r2
 80151da:	011b      	lsls	r3, r3, #4
 80151dc:	1a9b      	subs	r3, r3, r2
 80151de:	683a      	ldr	r2, [r7, #0]
 80151e0:	4413      	add	r3, r2
 80151e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80151e6:	4619      	mov	r1, r3
 80151e8:	4821      	ldr	r0, [pc, #132]	; (8015270 <maze_display_Dijkstra+0x1b8>)
 80151ea:	f00b fd31 	bl	8020c50 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80151ee:	683b      	ldr	r3, [r7, #0]
 80151f0:	3301      	adds	r3, #1
 80151f2:	603b      	str	r3, [r7, #0]
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	2b0e      	cmp	r3, #14
 80151f8:	ddeb      	ble.n	80151d2 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 80151fa:	481e      	ldr	r0, [pc, #120]	; (8015274 <maze_display_Dijkstra+0x1bc>)
 80151fc:	f00b fdc4 	bl	8020d88 <puts>
		if (tt <= -1) {
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	2b00      	cmp	r3, #0
 8015204:	db21      	blt.n	801524a <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015206:	2300      	movs	r3, #0
 8015208:	603b      	str	r3, [r7, #0]
 801520a:	e010      	b.n	801522e <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 801520c:	4917      	ldr	r1, [pc, #92]	; (801526c <maze_display_Dijkstra+0x1b4>)
 801520e:	683a      	ldr	r2, [r7, #0]
 8015210:	4613      	mov	r3, r2
 8015212:	011b      	lsls	r3, r3, #4
 8015214:	1a9b      	subs	r3, r3, r2
 8015216:	687a      	ldr	r2, [r7, #4]
 8015218:	4413      	add	r3, r2
 801521a:	33f0      	adds	r3, #240	; 0xf0
 801521c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015220:	4619      	mov	r1, r3
 8015222:	4816      	ldr	r0, [pc, #88]	; (801527c <maze_display_Dijkstra+0x1c4>)
 8015224:	f00b fd14 	bl	8020c50 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015228:	683b      	ldr	r3, [r7, #0]
 801522a:	3301      	adds	r3, #1
 801522c:	603b      	str	r3, [r7, #0]
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	2b0f      	cmp	r3, #15
 8015232:	ddeb      	ble.n	801520c <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8015234:	4812      	ldr	r0, [pc, #72]	; (8015280 <maze_display_Dijkstra+0x1c8>)
 8015236:	f00b fda7 	bl	8020d88 <puts>
	for (tt = 14;tt >= -1;tt--){
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	3b01      	subs	r3, #1
 801523e:	607b      	str	r3, [r7, #4]
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015246:	dabe      	bge.n	80151c6 <maze_display_Dijkstra+0x10e>
 8015248:	e000      	b.n	801524c <maze_display_Dijkstra+0x194>
			break;
 801524a:	bf00      	nop

	}

	printf(
 801524c:	480d      	ldr	r0, [pc, #52]	; (8015284 <maze_display_Dijkstra+0x1cc>)
 801524e:	f00b fd9b 	bl	8020d88 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8015252:	bf00      	nop
 8015254:	3708      	adds	r7, #8
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	080235b0 	.word	0x080235b0
 8015260:	080236a0 	.word	0x080236a0
 8015264:	20000c3c 	.word	0x20000c3c
 8015268:	080236a8 	.word	0x080236a8
 801526c:	20000f30 	.word	0x20000f30
 8015270:	080236b0 	.word	0x080236b0
 8015274:	080236b8 	.word	0x080236b8
 8015278:	08023628 	.word	0x08023628
 801527c:	080236c0 	.word	0x080236c0
 8015280:	08023638 	.word	0x08023638
 8015284:	0802363c 	.word	0x0802363c

08015288 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8015288:	b580      	push	{r7, lr}
 801528a:	b084      	sub	sp, #16
 801528c:	af00      	add	r7, sp, #0
 801528e:	4603      	mov	r3, r0
 8015290:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015292:	2300      	movs	r3, #0
 8015294:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015296:	2300      	movs	r3, #0
 8015298:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 801529a:	2300      	movs	r3, #0
 801529c:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 801529e:	4b71      	ldr	r3, [pc, #452]	; (8015464 <mode_decision+0x1dc>)
 80152a0:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 80152a2:	79fb      	ldrb	r3, [r7, #7]
 80152a4:	f003 030f 	and.w	r3, r3, #15
 80152a8:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80152aa:	79fb      	ldrb	r3, [r7, #7]
 80152ac:	091b      	lsrs	r3, r3, #4
 80152ae:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80152b0:	7bbb      	ldrb	r3, [r7, #14]
 80152b2:	011b      	lsls	r3, r3, #4
 80152b4:	b2da      	uxtb	r2, r3
 80152b6:	7bfb      	ldrb	r3, [r7, #15]
 80152b8:	4413      	add	r3, r2
 80152ba:	b2db      	uxtb	r3, r3
 80152bc:	4618      	mov	r0, r3
 80152be:	f7f1 fdb7 	bl	8006e30 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 80152c2:	e07f      	b.n	80153c4 <mode_decision+0x13c>
				HAL_Delay(1);
 80152c4:	2001      	movs	r0, #1
 80152c6:	f003 fd71 	bl	8018dac <HAL_Delay>
				if (E_distanceR >= dis8) {
 80152ca:	4b67      	ldr	r3, [pc, #412]	; (8015468 <mode_decision+0x1e0>)
 80152cc:	edd3 7a00 	vldr	s15, [r3]
 80152d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80152d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152dc:	d813      	bhi.n	8015306 <mode_decision+0x7e>
					if (main_modeR == 15) {
 80152de:	7bfb      	ldrb	r3, [r7, #15]
 80152e0:	2b0f      	cmp	r3, #15
 80152e2:	d102      	bne.n	80152ea <mode_decision+0x62>
						main_modeR = 0;
 80152e4:	2300      	movs	r3, #0
 80152e6:	73fb      	strb	r3, [r7, #15]
 80152e8:	e002      	b.n	80152f0 <mode_decision+0x68>
					} else {
						main_modeR++;
 80152ea:	7bfb      	ldrb	r3, [r7, #15]
 80152ec:	3301      	adds	r3, #1
 80152ee:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80152f0:	f7eb fe54 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80152f4:	7bbb      	ldrb	r3, [r7, #14]
 80152f6:	011b      	lsls	r3, r3, #4
 80152f8:	b2da      	uxtb	r2, r3
 80152fa:	7bfb      	ldrb	r3, [r7, #15]
 80152fc:	4413      	add	r3, r2
 80152fe:	b2db      	uxtb	r3, r3
 8015300:	4618      	mov	r0, r3
 8015302:	f7f1 fd95 	bl	8006e30 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8015306:	edd7 7a02 	vldr	s15, [r7, #8]
 801530a:	eeb1 7a67 	vneg.f32	s14, s15
 801530e:	4b56      	ldr	r3, [pc, #344]	; (8015468 <mode_decision+0x1e0>)
 8015310:	edd3 7a00 	vldr	s15, [r3]
 8015314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531c:	db13      	blt.n	8015346 <mode_decision+0xbe>
					if (main_modeR == 0) {
 801531e:	7bfb      	ldrb	r3, [r7, #15]
 8015320:	2b00      	cmp	r3, #0
 8015322:	d102      	bne.n	801532a <mode_decision+0xa2>
						main_modeR = 15;
 8015324:	230f      	movs	r3, #15
 8015326:	73fb      	strb	r3, [r7, #15]
 8015328:	e002      	b.n	8015330 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 801532a:	7bfb      	ldrb	r3, [r7, #15]
 801532c:	3b01      	subs	r3, #1
 801532e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015330:	f7eb fe34 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015334:	7bbb      	ldrb	r3, [r7, #14]
 8015336:	011b      	lsls	r3, r3, #4
 8015338:	b2da      	uxtb	r2, r3
 801533a:	7bfb      	ldrb	r3, [r7, #15]
 801533c:	4413      	add	r3, r2
 801533e:	b2db      	uxtb	r3, r3
 8015340:	4618      	mov	r0, r3
 8015342:	f7f1 fd75 	bl	8006e30 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8015346:	4b49      	ldr	r3, [pc, #292]	; (801546c <mode_decision+0x1e4>)
 8015348:	edd3 7a00 	vldr	s15, [r3]
 801534c:	ed97 7a02 	vldr	s14, [r7, #8]
 8015350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015358:	d813      	bhi.n	8015382 <mode_decision+0xfa>
					if (main_modeL == 15) {
 801535a:	7bbb      	ldrb	r3, [r7, #14]
 801535c:	2b0f      	cmp	r3, #15
 801535e:	d102      	bne.n	8015366 <mode_decision+0xde>
						main_modeL = 0;
 8015360:	2300      	movs	r3, #0
 8015362:	73bb      	strb	r3, [r7, #14]
 8015364:	e002      	b.n	801536c <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8015366:	7bbb      	ldrb	r3, [r7, #14]
 8015368:	3301      	adds	r3, #1
 801536a:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801536c:	f7eb fe16 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015370:	7bbb      	ldrb	r3, [r7, #14]
 8015372:	011b      	lsls	r3, r3, #4
 8015374:	b2da      	uxtb	r2, r3
 8015376:	7bfb      	ldrb	r3, [r7, #15]
 8015378:	4413      	add	r3, r2
 801537a:	b2db      	uxtb	r3, r3
 801537c:	4618      	mov	r0, r3
 801537e:	f7f1 fd57 	bl	8006e30 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8015382:	edd7 7a02 	vldr	s15, [r7, #8]
 8015386:	eeb1 7a67 	vneg.f32	s14, s15
 801538a:	4b38      	ldr	r3, [pc, #224]	; (801546c <mode_decision+0x1e4>)
 801538c:	edd3 7a00 	vldr	s15, [r3]
 8015390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015398:	da00      	bge.n	801539c <mode_decision+0x114>
 801539a:	e013      	b.n	80153c4 <mode_decision+0x13c>
					if (main_modeL == 0) {
 801539c:	7bbb      	ldrb	r3, [r7, #14]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d102      	bne.n	80153a8 <mode_decision+0x120>
						main_modeL = 15;
 80153a2:	230f      	movs	r3, #15
 80153a4:	73bb      	strb	r3, [r7, #14]
 80153a6:	e002      	b.n	80153ae <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 80153a8:	7bbb      	ldrb	r3, [r7, #14]
 80153aa:	3b01      	subs	r3, #1
 80153ac:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 80153ae:	f7eb fdf5 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80153b2:	7bbb      	ldrb	r3, [r7, #14]
 80153b4:	011b      	lsls	r3, r3, #4
 80153b6:	b2da      	uxtb	r2, r3
 80153b8:	7bfb      	ldrb	r3, [r7, #15]
 80153ba:	4413      	add	r3, r2
 80153bc:	b2db      	uxtb	r3, r3
 80153be:	4618      	mov	r0, r3
 80153c0:	f7f1 fd36 	bl	8006e30 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 80153c4:	4b2a      	ldr	r3, [pc, #168]	; (8015470 <mode_decision+0x1e8>)
 80153c6:	edd3 7a00 	vldr	s15, [r3]
 80153ca:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8015474 <mode_decision+0x1ec>
 80153ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80153d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d6:	f67f af75 	bls.w	80152c4 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 80153da:	f7f1 fcef 	bl	8006dbc <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 80153de:	2001      	movs	r0, #1
 80153e0:	f7f1 fdd6 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80153e4:	2001      	movs	r0, #1
 80153e6:	f7f1 fde5 	bl	8006fb4 <pl_l_blue_LED>
			HAL_Delay(1000);
 80153ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80153ee:	f003 fcdd 	bl	8018dac <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80153f2:	e011      	b.n	8015418 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 80153f4:	4b1e      	ldr	r3, [pc, #120]	; (8015470 <mode_decision+0x1e8>)
 80153f6:	edd3 7a00 	vldr	s15, [r3]
 80153fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8015474 <mode_decision+0x1ec>
 80153fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015406:	db04      	blt.n	8015412 <mode_decision+0x18a>
					main_modeL = 0;
 8015408:	2300      	movs	r3, #0
 801540a:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 801540c:	2300      	movs	r3, #0
 801540e:	73fb      	strb	r3, [r7, #15]
					break;
 8015410:	e013      	b.n	801543a <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8015412:	2001      	movs	r0, #1
 8015414:	f003 fcca 	bl	8018dac <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015418:	4b17      	ldr	r3, [pc, #92]	; (8015478 <mode_decision+0x1f0>)
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015420:	dde8      	ble.n	80153f4 <mode_decision+0x16c>
 8015422:	4b15      	ldr	r3, [pc, #84]	; (8015478 <mode_decision+0x1f0>)
 8015424:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015428:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801542c:	dde2      	ble.n	80153f4 <mode_decision+0x16c>
 801542e:	4b12      	ldr	r3, [pc, #72]	; (8015478 <mode_decision+0x1f0>)
 8015430:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015434:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015438:	dddc      	ble.n	80153f4 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 801543a:	2000      	movs	r0, #0
 801543c:	f7f1 fda8 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015440:	2000      	movs	r0, #0
 8015442:	f7f1 fdb7 	bl	8006fb4 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8015446:	f7f1 fcb9 	bl	8006dbc <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 801544a:	7bbb      	ldrb	r3, [r7, #14]
 801544c:	011b      	lsls	r3, r3, #4
 801544e:	b25a      	sxtb	r2, r3
 8015450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015454:	4313      	orrs	r3, r2
 8015456:	b25b      	sxtb	r3, r3
 8015458:	737b      	strb	r3, [r7, #13]

return main_mode;
 801545a:	7b7b      	ldrb	r3, [r7, #13]
}
 801545c:	4618      	mov	r0, r3
 801545e:	3710      	adds	r7, #16
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	41200000 	.word	0x41200000
 8015468:	20000224 	.word	0x20000224
 801546c:	20000220 	.word	0x20000220
 8015470:	20000270 	.word	0x20000270
 8015474:	43c80000 	.word	0x43c80000
 8015478:	200002b8 	.word	0x200002b8

0801547c <mode_execution>:


void mode_execution(unsigned char now_mode){
 801547c:	b590      	push	{r4, r7, lr}
 801547e:	b0d7      	sub	sp, #348	; 0x15c
 8015480:	af52      	add	r7, sp, #328	; 0x148
 8015482:	4603      	mov	r3, r0
 8015484:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015486:	2300      	movs	r3, #0
 8015488:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 801548a:	2300      	movs	r3, #0
 801548c:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 801548e:	79fb      	ldrb	r3, [r7, #7]
 8015490:	f003 030f 	and.w	r3, r3, #15
 8015494:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015496:	79fb      	ldrb	r3, [r7, #7]
 8015498:	091b      	lsrs	r3, r3, #4
 801549a:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 801549c:	7bbb      	ldrb	r3, [r7, #14]
 801549e:	2b0f      	cmp	r3, #15
 80154a0:	f200 809e 	bhi.w	80155e0 <mode_execution+0x164>
 80154a4:	a201      	add	r2, pc, #4	; (adr r2, 80154ac <mode_execution+0x30>)
 80154a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154aa:	bf00      	nop
 80154ac:	080154ed 	.word	0x080154ed
 80154b0:	080154f7 	.word	0x080154f7
 80154b4:	080155df 	.word	0x080155df
 80154b8:	08015501 	.word	0x08015501
 80154bc:	0801550b 	.word	0x0801550b
 80154c0:	08015515 	.word	0x08015515
 80154c4:	08015545 	.word	0x08015545
 80154c8:	0801554f 	.word	0x0801554f
 80154cc:	0801557f 	.word	0x0801557f
 80154d0:	080155af 	.word	0x080155af
 80154d4:	080155df 	.word	0x080155df
 80154d8:	080155df 	.word	0x080155df
 80154dc:	080155df 	.word	0x080155df
 80154e0:	080155df 	.word	0x080155df
 80154e4:	080155df 	.word	0x080155df
 80154e8:	080155df 	.word	0x080155df
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 80154ec:	7bfb      	ldrb	r3, [r7, #15]
 80154ee:	4618      	mov	r0, r3
 80154f0:	f000 f886 	bl	8015600 <mode_PLtest>
	break;
 80154f4:	e074      	b.n	80155e0 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 80154f6:	7bfb      	ldrb	r3, [r7, #15]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f000 fa41 	bl	8015980 <mode_Running>
	break;
 80154fe:	e06f      	b.n	80155e0 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015500:	7bfb      	ldrb	r3, [r7, #15]
 8015502:	4618      	mov	r0, r3
 8015504:	f000 fc6a 	bl	8015ddc <mode_Tuning0>
	break;
 8015508:	e06a      	b.n	80155e0 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 801550a:	7bfb      	ldrb	r3, [r7, #15]
 801550c:	4618      	mov	r0, r3
 801550e:	f000 ffa7 	bl	8016460 <mode_WallSensorTuning>
	break;
 8015512:	e065      	b.n	80155e0 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8015514:	7bfb      	ldrb	r3, [r7, #15]
 8015516:	4c34      	ldr	r4, [pc, #208]	; (80155e8 <mode_execution+0x16c>)
 8015518:	2201      	movs	r2, #1
 801551a:	9251      	str	r2, [sp, #324]	; 0x144
 801551c:	2200      	movs	r2, #0
 801551e:	9250      	str	r2, [sp, #320]	; 0x140
 8015520:	2201      	movs	r2, #1
 8015522:	924f      	str	r2, [sp, #316]	; 0x13c
 8015524:	934e      	str	r3, [sp, #312]	; 0x138
 8015526:	4668      	mov	r0, sp
 8015528:	f104 0310 	add.w	r3, r4, #16
 801552c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015530:	4619      	mov	r1, r3
 8015532:	f00a ff0d 	bl	8020350 <memcpy>
 8015536:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801553a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80155ec <mode_execution+0x170>
 801553e:	f7f8 fb63 	bl	800dc08 <testturning>
	break;
 8015542:	e04d      	b.n	80155e0 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8015544:	7bfb      	ldrb	r3, [r7, #15]
 8015546:	4618      	mov	r0, r3
 8015548:	f001 f9c2 	bl	80168d0 <mode_WallSensorTuning_fast>
	break;
 801554c:	e048      	b.n	80155e0 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 801554e:	7bfb      	ldrb	r3, [r7, #15]
 8015550:	4c27      	ldr	r4, [pc, #156]	; (80155f0 <mode_execution+0x174>)
 8015552:	2201      	movs	r2, #1
 8015554:	9251      	str	r2, [sp, #324]	; 0x144
 8015556:	2201      	movs	r2, #1
 8015558:	9250      	str	r2, [sp, #320]	; 0x140
 801555a:	2201      	movs	r2, #1
 801555c:	924f      	str	r2, [sp, #316]	; 0x13c
 801555e:	934e      	str	r3, [sp, #312]	; 0x138
 8015560:	4668      	mov	r0, sp
 8015562:	f104 0310 	add.w	r3, r4, #16
 8015566:	f44f 729c 	mov.w	r2, #312	; 0x138
 801556a:	4619      	mov	r1, r3
 801556c:	f00a fef0 	bl	8020350 <memcpy>
 8015570:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015574:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 80155f4 <mode_execution+0x178>
 8015578:	f7f8 fb46 	bl	800dc08 <testturning>
	break;
 801557c:	e030      	b.n	80155e0 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 801557e:	7bfb      	ldrb	r3, [r7, #15]
 8015580:	4c1d      	ldr	r4, [pc, #116]	; (80155f8 <mode_execution+0x17c>)
 8015582:	2201      	movs	r2, #1
 8015584:	9251      	str	r2, [sp, #324]	; 0x144
 8015586:	2201      	movs	r2, #1
 8015588:	9250      	str	r2, [sp, #320]	; 0x140
 801558a:	2201      	movs	r2, #1
 801558c:	924f      	str	r2, [sp, #316]	; 0x13c
 801558e:	934e      	str	r3, [sp, #312]	; 0x138
 8015590:	4668      	mov	r0, sp
 8015592:	f104 0310 	add.w	r3, r4, #16
 8015596:	f44f 729c 	mov.w	r2, #312	; 0x138
 801559a:	4619      	mov	r1, r3
 801559c:	f00a fed8 	bl	8020350 <memcpy>
 80155a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80155a4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 80155f4 <mode_execution+0x178>
 80155a8:	f7f8 fb2e 	bl	800dc08 <testturning>
	break;
 80155ac:	e018      	b.n	80155e0 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80155ae:	7bfb      	ldrb	r3, [r7, #15]
 80155b0:	4c12      	ldr	r4, [pc, #72]	; (80155fc <mode_execution+0x180>)
 80155b2:	2201      	movs	r2, #1
 80155b4:	9251      	str	r2, [sp, #324]	; 0x144
 80155b6:	2201      	movs	r2, #1
 80155b8:	9250      	str	r2, [sp, #320]	; 0x140
 80155ba:	2201      	movs	r2, #1
 80155bc:	924f      	str	r2, [sp, #316]	; 0x13c
 80155be:	934e      	str	r3, [sp, #312]	; 0x138
 80155c0:	4668      	mov	r0, sp
 80155c2:	f104 0310 	add.w	r3, r4, #16
 80155c6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80155ca:	4619      	mov	r1, r3
 80155cc:	f00a fec0 	bl	8020350 <memcpy>
 80155d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80155d4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80155f4 <mode_execution+0x178>
 80155d8:	f7f8 fb16 	bl	800dc08 <testturning>
	break;
 80155dc:	e000      	b.n	80155e0 <mode_execution+0x164>
	break;
 80155de:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 80155e0:	bf00      	nop
 80155e2:	3714      	adds	r7, #20
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd90      	pop	{r4, r7, pc}
 80155e8:	2000f358 	.word	0x2000f358
 80155ec:	3f028f5c 	.word	0x3f028f5c
 80155f0:	2000f4a0 	.word	0x2000f4a0
 80155f4:	3f7d70a4 	.word	0x3f7d70a4
 80155f8:	2000f5e8 	.word	0x2000f5e8
 80155fc:	2000f730 	.word	0x2000f730

08015600 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015604:	b092      	sub	sp, #72	; 0x48
 8015606:	af0a      	add	r7, sp, #40	; 0x28
 8015608:	4603      	mov	r3, r0
 801560a:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 801560c:	2300      	movs	r3, #0
 801560e:	61fb      	str	r3, [r7, #28]
 8015610:	2300      	movs	r3, #0
 8015612:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015614:	7dfb      	ldrb	r3, [r7, #23]
 8015616:	2b0f      	cmp	r3, #15
 8015618:	f200 819f 	bhi.w	801595a <mode_PLtest+0x35a>
 801561c:	a201      	add	r2, pc, #4	; (adr r2, 8015624 <mode_PLtest+0x24>)
 801561e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015622:	bf00      	nop
 8015624:	08015959 	.word	0x08015959
 8015628:	08015665 	.word	0x08015665
 801562c:	08015697 	.word	0x08015697
 8015630:	08015713 	.word	0x08015713
 8015634:	08015777 	.word	0x08015777
 8015638:	080157f7 	.word	0x080157f7
 801563c:	080157fd 	.word	0x080157fd
 8015640:	0801595b 	.word	0x0801595b
 8015644:	0801595b 	.word	0x0801595b
 8015648:	08015883 	.word	0x08015883
 801564c:	080158eb 	.word	0x080158eb
 8015650:	0801595b 	.word	0x0801595b
 8015654:	0801595b 	.word	0x0801595b
 8015658:	0801595b 	.word	0x0801595b
 801565c:	0801595b 	.word	0x0801595b
 8015660:	08015953 	.word	0x08015953
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015664:	4bbf      	ldr	r3, [pc, #764]	; (8015964 <mode_PLtest+0x364>)
 8015666:	6819      	ldr	r1, [r3, #0]
 8015668:	4bbe      	ldr	r3, [pc, #760]	; (8015964 <mode_PLtest+0x364>)
 801566a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801566c:	4bbd      	ldr	r3, [pc, #756]	; (8015964 <mode_PLtest+0x364>)
 801566e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8015672:	4bbc      	ldr	r3, [pc, #752]	; (8015964 <mode_PLtest+0x364>)
 8015674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015678:	4aba      	ldr	r2, [pc, #744]	; (8015964 <mode_PLtest+0x364>)
 801567a:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 801567e:	9201      	str	r2, [sp, #4]
 8015680:	9300      	str	r3, [sp, #0]
 8015682:	4623      	mov	r3, r4
 8015684:	4602      	mov	r2, r0
 8015686:	48b8      	ldr	r0, [pc, #736]	; (8015968 <mode_PLtest+0x368>)
 8015688:	f00b fae2 	bl	8020c50 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 801568c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015690:	f7f2 fc0e 	bl	8007eb0 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015694:	e7e6      	b.n	8015664 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8015696:	2001      	movs	r0, #1
 8015698:	f7f1 fc7a 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 801569c:	2001      	movs	r0, #1
 801569e:	f7f1 fc89 	bl	8006fb4 <pl_l_blue_LED>
		record_mode = 1;
 80156a2:	4bb2      	ldr	r3, [pc, #712]	; (801596c <mode_PLtest+0x36c>)
 80156a4:	2201      	movs	r2, #1
 80156a6:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 80156a8:	f44f 7161 	mov.w	r1, #900	; 0x384
 80156ac:	f44f 7061 	mov.w	r0, #900	; 0x384
 80156b0:	f7f2 f986 	bl	80079c0 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80156b4:	2001      	movs	r0, #1
 80156b6:	f7f2 f941 	bl	800793c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80156ba:	2001      	movs	r0, #1
 80156bc:	f7f2 f916 	bl	80078ec <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 80156c0:	f7f2 f962 	bl	8007988 <pl_DriveMotor_start>
		wait_ms(2500);
 80156c4:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80156c8:	f7f2 fbf2 	bl	8007eb0 <wait_ms>
		pl_DriveMotor_stop();
 80156cc:	f7f2 f96a 	bl	80079a4 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80156d0:	2000      	movs	r0, #0
 80156d2:	f7f1 fc5d 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80156d6:	2000      	movs	r0, #0
 80156d8:	f7f1 fc6c 	bl	8006fb4 <pl_l_blue_LED>
		record_mode = 0;
 80156dc:	4ba3      	ldr	r3, [pc, #652]	; (801596c <mode_PLtest+0x36c>)
 80156de:	2200      	movs	r2, #0
 80156e0:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156e2:	e002      	b.n	80156ea <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80156e4:	2001      	movs	r0, #1
 80156e6:	f7f2 fbe3 	bl	8007eb0 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156ea:	4b9e      	ldr	r3, [pc, #632]	; (8015964 <mode_PLtest+0x364>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156f2:	ddf7      	ble.n	80156e4 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 80156f4:	4b9b      	ldr	r3, [pc, #620]	; (8015964 <mode_PLtest+0x364>)
 80156f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80156fa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156fe:	ddf1      	ble.n	80156e4 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015700:	4b98      	ldr	r3, [pc, #608]	; (8015964 <mode_PLtest+0x364>)
 8015702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015706:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801570a:	ddeb      	ble.n	80156e4 <mode_PLtest+0xe4>
		}
		record_print();
 801570c:	f001 fbd0 	bl	8016eb0 <record_print>
		break;
 8015710:	e123      	b.n	801595a <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8015712:	f7ec f829 	bl	8001768 <reset_gyro>
		reset_speed();
 8015716:	f7eb fc7f 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 801571a:	2001      	movs	r0, #1
 801571c:	f7f1 fc38 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015720:	2001      	movs	r0, #1
 8015722:	f7f1 fc47 	bl	8006fb4 <pl_l_blue_LED>
		record_mode = 2;
 8015726:	4b91      	ldr	r3, [pc, #580]	; (801596c <mode_PLtest+0x36c>)
 8015728:	2202      	movs	r2, #2
 801572a:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 801572c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015730:	f7f2 fbbe 	bl	8007eb0 <wait_ms>
		pl_r_blue_LED(OFF);
 8015734:	2000      	movs	r0, #0
 8015736:	f7f1 fc2b 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801573a:	2000      	movs	r0, #0
 801573c:	f7f1 fc3a 	bl	8006fb4 <pl_l_blue_LED>
		record_mode = 0;
 8015740:	4b8a      	ldr	r3, [pc, #552]	; (801596c <mode_PLtest+0x36c>)
 8015742:	2200      	movs	r2, #0
 8015744:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015746:	e002      	b.n	801574e <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015748:	2001      	movs	r0, #1
 801574a:	f7f2 fbb1 	bl	8007eb0 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801574e:	4b85      	ldr	r3, [pc, #532]	; (8015964 <mode_PLtest+0x364>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015756:	ddf7      	ble.n	8015748 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015758:	4b82      	ldr	r3, [pc, #520]	; (8015964 <mode_PLtest+0x364>)
 801575a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801575e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015762:	ddf1      	ble.n	8015748 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015764:	4b7f      	ldr	r3, [pc, #508]	; (8015964 <mode_PLtest+0x364>)
 8015766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801576a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801576e:	ddeb      	ble.n	8015748 <mode_PLtest+0x148>
		}
		record_print();
 8015770:	f001 fb9e 	bl	8016eb0 <record_print>
		break;
 8015774:	e0f1      	b.n	801595a <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015776:	4b7e      	ldr	r3, [pc, #504]	; (8015970 <mode_PLtest+0x370>)
 8015778:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801577a:	4618      	mov	r0, r3
 801577c:	f7ea ff0c 	bl	8000598 <__aeabi_f2d>
 8015780:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015784:	4b7a      	ldr	r3, [pc, #488]	; (8015970 <mode_PLtest+0x370>)
 8015786:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015788:	4618      	mov	r0, r3
 801578a:	f7ea ff05 	bl	8000598 <__aeabi_f2d>
 801578e:	4604      	mov	r4, r0
 8015790:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015792:	4b77      	ldr	r3, [pc, #476]	; (8015970 <mode_PLtest+0x370>)
 8015794:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015796:	4618      	mov	r0, r3
 8015798:	f7ea fefe 	bl	8000598 <__aeabi_f2d>
 801579c:	4680      	mov	r8, r0
 801579e:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80157a0:	4b73      	ldr	r3, [pc, #460]	; (8015970 <mode_PLtest+0x370>)
 80157a2:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7ea fef7 	bl	8000598 <__aeabi_f2d>
 80157aa:	4682      	mov	sl, r0
 80157ac:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80157ae:	4b70      	ldr	r3, [pc, #448]	; (8015970 <mode_PLtest+0x370>)
 80157b0:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7ea fef0 	bl	8000598 <__aeabi_f2d>
 80157b8:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80157bc:	4b6c      	ldr	r3, [pc, #432]	; (8015970 <mode_PLtest+0x370>)
 80157be:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80157c0:	4618      	mov	r0, r3
 80157c2:	f7ea fee9 	bl	8000598 <__aeabi_f2d>
 80157c6:	4602      	mov	r2, r0
 80157c8:	460b      	mov	r3, r1
 80157ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80157ce:	ed97 7b00 	vldr	d7, [r7]
 80157d2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80157d6:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80157da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80157de:	e9cd 4500 	strd	r4, r5, [sp]
 80157e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80157e6:	4863      	ldr	r0, [pc, #396]	; (8015974 <mode_PLtest+0x374>)
 80157e8:	f00b fa32 	bl	8020c50 <iprintf>
			wait_ms(500);
 80157ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80157f0:	f7f2 fb5e 	bl	8007eb0 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80157f4:	e7bf      	b.n	8015776 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 80157f6:	f7f1 fd1b 	bl	8007230 <test_flash>
		break;
 80157fa:	e0ae      	b.n	801595a <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 80157fc:	4b5b      	ldr	r3, [pc, #364]	; (801596c <mode_PLtest+0x36c>)
 80157fe:	2206      	movs	r2, #6
 8015800:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8015802:	2001      	movs	r0, #1
 8015804:	f7f1 fbc4 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015808:	2001      	movs	r0, #1
 801580a:	f7f1 fbd3 	bl	8006fb4 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 801580e:	f107 0218 	add.w	r2, r7, #24
 8015812:	f107 031c 	add.w	r3, r7, #28
 8015816:	4611      	mov	r1, r2
 8015818:	4618      	mov	r0, r3
 801581a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801581e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015822:	f7ec fb07 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	69ba      	ldr	r2, [r7, #24]
 801582a:	4611      	mov	r1, r2
 801582c:	4618      	mov	r0, r3
 801582e:	f7f2 f8c7 	bl	80079c0 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8015832:	f7f2 f8a9 	bl	8007988 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015836:	e00a      	b.n	801584e <mode_PLtest+0x24e>
			wait_ms(1);
 8015838:	2001      	movs	r0, #1
 801583a:	f7f2 fb39 	bl	8007eb0 <wait_ms>
			if(record_rupe_flag==1){
 801583e:	4b4e      	ldr	r3, [pc, #312]	; (8015978 <mode_PLtest+0x378>)
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	2b01      	cmp	r3, #1
 8015844:	d103      	bne.n	801584e <mode_PLtest+0x24e>
				record_mode=0;
 8015846:	4b49      	ldr	r3, [pc, #292]	; (801596c <mode_PLtest+0x36c>)
 8015848:	2200      	movs	r2, #0
 801584a:	701a      	strb	r2, [r3, #0]
				break;
 801584c:	e010      	b.n	8015870 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801584e:	4b45      	ldr	r3, [pc, #276]	; (8015964 <mode_PLtest+0x364>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015856:	ddef      	ble.n	8015838 <mode_PLtest+0x238>
 8015858:	4b42      	ldr	r3, [pc, #264]	; (8015964 <mode_PLtest+0x364>)
 801585a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801585e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015862:	dde9      	ble.n	8015838 <mode_PLtest+0x238>
 8015864:	4b3f      	ldr	r3, [pc, #252]	; (8015964 <mode_PLtest+0x364>)
 8015866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801586a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801586e:	dde3      	ble.n	8015838 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8015870:	f7f2 f898 	bl	80079a4 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015874:	2000      	movs	r0, #0
 8015876:	f7f1 fb8b 	bl	8006f90 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801587a:	2000      	movs	r0, #0
 801587c:	f7f1 fb9a 	bl	8006fb4 <pl_l_blue_LED>

		break;
 8015880:	e06b      	b.n	801595a <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8015882:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015886:	f7f2 f8c5 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801588a:	f7f2 f8af 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(2000);
 801588e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015892:	f003 fa8b 	bl	8018dac <HAL_Delay>
			reset_gyro();
 8015896:	f7eb ff67 	bl	8001768 <reset_gyro>
			reset_speed();
 801589a:	f7eb fbbd 	bl	8001018 <reset_speed>
			clear_Ierror();
 801589e:	f7ee fe87 	bl	80045b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 80158a2:	2001      	movs	r0, #1
 80158a4:	f7f1 fb74 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80158a8:	2001      	movs	r0, #1
 80158aa:	f7f1 fb83 	bl	8006fb4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158ae:	e002      	b.n	80158b6 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 80158b0:	2001      	movs	r0, #1
 80158b2:	f003 fa7b 	bl	8018dac <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158b6:	4b2b      	ldr	r3, [pc, #172]	; (8015964 <mode_PLtest+0x364>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158be:	ddf7      	ble.n	80158b0 <mode_PLtest+0x2b0>
 80158c0:	4b28      	ldr	r3, [pc, #160]	; (8015964 <mode_PLtest+0x364>)
 80158c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158c6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158ca:	ddf1      	ble.n	80158b0 <mode_PLtest+0x2b0>
 80158cc:	4b25      	ldr	r3, [pc, #148]	; (8015964 <mode_PLtest+0x364>)
 80158ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80158d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158d6:	ddeb      	ble.n	80158b0 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 80158d8:	2000      	movs	r0, #0
 80158da:	f7f1 fb59 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80158de:	2000      	movs	r0, #0
 80158e0:	f7f1 fb68 	bl	8006fb4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80158e4:	f7f2 f88c 	bl	8007a00 <pl_FunMotor_stop>
		break;
 80158e8:	e037      	b.n	801595a <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 80158ea:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801597c <mode_PLtest+0x37c>
 80158ee:	f7f2 f891 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80158f2:	f7f2 f87b 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(2000);
 80158f6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80158fa:	f003 fa57 	bl	8018dac <HAL_Delay>
			reset_gyro();
 80158fe:	f7eb ff33 	bl	8001768 <reset_gyro>
			reset_speed();
 8015902:	f7eb fb89 	bl	8001018 <reset_speed>
			clear_Ierror();
 8015906:	f7ee fe53 	bl	80045b0 <clear_Ierror>
			pl_r_blue_LED(ON);
 801590a:	2001      	movs	r0, #1
 801590c:	f7f1 fb40 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015910:	2001      	movs	r0, #1
 8015912:	f7f1 fb4f 	bl	8006fb4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015916:	e002      	b.n	801591e <mode_PLtest+0x31e>
				HAL_Delay(1);
 8015918:	2001      	movs	r0, #1
 801591a:	f003 fa47 	bl	8018dac <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801591e:	4b11      	ldr	r3, [pc, #68]	; (8015964 <mode_PLtest+0x364>)
 8015920:	681b      	ldr	r3, [r3, #0]
 8015922:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015926:	ddf7      	ble.n	8015918 <mode_PLtest+0x318>
 8015928:	4b0e      	ldr	r3, [pc, #56]	; (8015964 <mode_PLtest+0x364>)
 801592a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801592e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015932:	ddf1      	ble.n	8015918 <mode_PLtest+0x318>
 8015934:	4b0b      	ldr	r3, [pc, #44]	; (8015964 <mode_PLtest+0x364>)
 8015936:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801593a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801593e:	ddeb      	ble.n	8015918 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8015940:	2000      	movs	r0, #0
 8015942:	f7f1 fb25 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015946:	2000      	movs	r0, #0
 8015948:	f7f1 fb34 	bl	8006fb4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 801594c:	f7f2 f858 	bl	8007a00 <pl_FunMotor_stop>
		break;
 8015950:	e003      	b.n	801595a <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 8015952:	f001 faad 	bl	8016eb0 <record_print>
		break;
 8015956:	e000      	b.n	801595a <mode_PLtest+0x35a>
		break;
 8015958:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 801595a:	bf00      	nop
 801595c:	3720      	adds	r7, #32
 801595e:	46bd      	mov	sp, r7
 8015960:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015964:	200002b8 	.word	0x200002b8
 8015968:	080236c8 	.word	0x080236c8
 801596c:	2000edc0 	.word	0x2000edc0
 8015970:	200006e4 	.word	0x200006e4
 8015974:	080236f4 	.word	0x080236f4
 8015978:	2000edcc 	.word	0x2000edcc
 801597c:	3f7d70a4 	.word	0x3f7d70a4

08015980 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8015980:	b5b0      	push	{r4, r5, r7, lr}
 8015982:	b0da      	sub	sp, #360	; 0x168
 8015984:	af54      	add	r7, sp, #336	; 0x150
 8015986:	4603      	mov	r3, r0
 8015988:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801598a:	2003      	movs	r0, #3
 801598c:	f7f1 ffae 	bl	80078ec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015990:	2003      	movs	r0, #3
 8015992:	f7f1 ffd3 	bl	800793c <pl_R_DriveMotor_mode>
	reset_gyro();
 8015996:	f7eb fee7 	bl	8001768 <reset_gyro>
	reset_speed();
 801599a:	f7eb fb3d 	bl	8001018 <reset_speed>
	reset_distance();
 801599e:	f7eb fafd 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80159a2:	f7ee fe05 	bl	80045b0 <clear_Ierror>
	switch (main_modeR) {
 80159a6:	79fb      	ldrb	r3, [r7, #7]
 80159a8:	2b0f      	cmp	r3, #15
 80159aa:	f200 81e3 	bhi.w	8015d74 <mode_Running+0x3f4>
 80159ae:	a201      	add	r2, pc, #4	; (adr r2, 80159b4 <mode_Running+0x34>)
 80159b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159b4:	080159f5 	.word	0x080159f5
 80159b8:	08015aa5 	.word	0x08015aa5
 80159bc:	08015add 	.word	0x08015add
 80159c0:	08015ae3 	.word	0x08015ae3
 80159c4:	08015b1b 	.word	0x08015b1b
 80159c8:	08015b4d 	.word	0x08015b4d
 80159cc:	08015b7f 	.word	0x08015b7f
 80159d0:	08015bb1 	.word	0x08015bb1
 80159d4:	08015be3 	.word	0x08015be3
 80159d8:	08015c15 	.word	0x08015c15
 80159dc:	08015c47 	.word	0x08015c47
 80159e0:	08015c79 	.word	0x08015c79
 80159e4:	08015cab 	.word	0x08015cab
 80159e8:	08015cdd 	.word	0x08015cdd
 80159ec:	08015d0f 	.word	0x08015d0f
 80159f0:	08015d41 	.word	0x08015d41
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 80159f4:	f7fe fc1c 	bl	8014230 <create_StepCountMap_queue>
			maze_display();
 80159f8:	f7ff fa40 	bl	8014e7c <maze_display>

			create_DijkstraMap();
 80159fc:	f7fb fe94 	bl	8011728 <create_DijkstraMap>
			maze_display_Dijkstra();
 8015a00:	f7ff fb5a 	bl	80150b8 <maze_display_Dijkstra>

			route_Dijkstra();
 8015a04:	f7fd fbda 	bl	80131bc <route_Dijkstra>
			create_StepCountMap_unknown();
 8015a08:	f7fe f8dc 	bl	8013bc4 <create_StepCountMap_unknown>
			maze_display();
 8015a0c:	f7ff fa36 	bl	8014e7c <maze_display>

			tic_timer();
 8015a10:	f7f2 fa20 	bl	8007e54 <tic_timer>
			for(int j=0;j<5000;j++){
 8015a14:	2300      	movs	r3, #0
 8015a16:	617b      	str	r3, [r7, #20]
 8015a18:	e004      	b.n	8015a24 <mode_Running+0xa4>
			create_StepCountMap_queue();
 8015a1a:	f7fe fc09 	bl	8014230 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	3301      	adds	r3, #1
 8015a22:	617b      	str	r3, [r7, #20]
 8015a24:	697b      	ldr	r3, [r7, #20]
 8015a26:	f241 3287 	movw	r2, #4999	; 0x1387
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	ddf5      	ble.n	8015a1a <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 8015a2e:	f7f2 fa23 	bl	8007e78 <toc_timer>
 8015a32:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 8015a36:	f7ff fa21 	bl	8014e7c <maze_display>
			printf("tim2=%f\n", tim2);
 8015a3a:	68f8      	ldr	r0, [r7, #12]
 8015a3c:	f7ea fdac 	bl	8000598 <__aeabi_f2d>
 8015a40:	4602      	mov	r2, r0
 8015a42:	460b      	mov	r3, r1
 8015a44:	48cd      	ldr	r0, [pc, #820]	; (8015d7c <mode_Running+0x3fc>)
 8015a46:	f00b f903 	bl	8020c50 <iprintf>
			tic_timer();
 8015a4a:	f7f2 fa03 	bl	8007e54 <tic_timer>
			create_DijkstraMap();
 8015a4e:	f7fb fe6b 	bl	8011728 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 8015a52:	2300      	movs	r3, #0
 8015a54:	613b      	str	r3, [r7, #16]
 8015a56:	e006      	b.n	8015a66 <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8015a58:	f7fd fbb0 	bl	80131bc <route_Dijkstra>
			create_StepCountMap_unknown();
 8015a5c:	f7fe f8b2 	bl	8013bc4 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	3301      	adds	r3, #1
 8015a64:	613b      	str	r3, [r7, #16]
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	f241 3287 	movw	r2, #4999	; 0x1387
 8015a6c:	4293      	cmp	r3, r2
 8015a6e:	ddf3      	ble.n	8015a58 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 8015a70:	f7f2 fa02 	bl	8007e78 <toc_timer>
 8015a74:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8015a78:	f7ff fa00 	bl	8014e7c <maze_display>
			maze_display_Dijkstra();
 8015a7c:	f7ff fb1c 	bl	80150b8 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8015a80:	68b8      	ldr	r0, [r7, #8]
 8015a82:	f7ea fd89 	bl	8000598 <__aeabi_f2d>
 8015a86:	4604      	mov	r4, r0
 8015a88:	460d      	mov	r5, r1
 8015a8a:	68f8      	ldr	r0, [r7, #12]
 8015a8c:	f7ea fd84 	bl	8000598 <__aeabi_f2d>
 8015a90:	4602      	mov	r2, r0
 8015a92:	460b      	mov	r3, r1
 8015a94:	e9cd 2300 	strd	r2, r3, [sp]
 8015a98:	4622      	mov	r2, r4
 8015a9a:	462b      	mov	r3, r5
 8015a9c:	48b8      	ldr	r0, [pc, #736]	; (8015d80 <mode_Running+0x400>)
 8015a9e:	f00b f8d7 	bl	8020c50 <iprintf>
		break;
 8015aa2:	e167      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0001://足立法(遅い)
			tic_timer();
 8015aa4:	f7f2 f9d6 	bl	8007e54 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015aa8:	4cb6      	ldr	r4, [pc, #728]	; (8015d84 <mode_Running+0x404>)
 8015aaa:	2300      	movs	r3, #0
 8015aac:	934f      	str	r3, [sp, #316]	; 0x13c
 8015aae:	2301      	movs	r3, #1
 8015ab0:	934e      	str	r3, [sp, #312]	; 0x138
 8015ab2:	4668      	mov	r0, sp
 8015ab4:	f104 0310 	add.w	r3, r4, #16
 8015ab8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015abc:	4619      	mov	r1, r3
 8015abe:	f00a fc47 	bl	8020350 <memcpy>
 8015ac2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015ac6:	eddf 1ab0 	vldr	s3, [pc, #704]	; 8015d88 <mode_Running+0x408>
 8015aca:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8015d8c <mode_Running+0x40c>
 8015ace:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8015d90 <mode_Running+0x410>
 8015ad2:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8015d94 <mode_Running+0x414>
 8015ad6:	f7f8 fa51 	bl	800df7c <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015ada:	e14b      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0010://Flashから
			record_out();
 8015adc:	f7f1 fcc6 	bl	800746c <record_out>
		break;
 8015ae0:	e148      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0011://ゴミ
			tic_timer();
 8015ae2:	f7f2 f9b7 	bl	8007e54 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015ae6:	4ca7      	ldr	r4, [pc, #668]	; (8015d84 <mode_Running+0x404>)
 8015ae8:	2301      	movs	r3, #1
 8015aea:	934f      	str	r3, [sp, #316]	; 0x13c
 8015aec:	2301      	movs	r3, #1
 8015aee:	934e      	str	r3, [sp, #312]	; 0x138
 8015af0:	4668      	mov	r0, sp
 8015af2:	f104 0310 	add.w	r3, r4, #16
 8015af6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015afa:	4619      	mov	r1, r3
 8015afc:	f00a fc28 	bl	8020350 <memcpy>
 8015b00:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015b04:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8015d88 <mode_Running+0x408>
 8015b08:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8015d8c <mode_Running+0x40c>
 8015b0c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8015d90 <mode_Running+0x410>
 8015b10:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015d94 <mode_Running+0x414>
 8015b14:	f7f8 fa32 	bl	800df7c <AdatiWayReturn>
		break;
 8015b18:	e12c      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0100://ゴミ
			record_out();
 8015b1a:	f7f1 fca7 	bl	800746c <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8015b1e:	2300      	movs	r3, #0
 8015b20:	9352      	str	r3, [sp, #328]	; 0x148
 8015b22:	4a9d      	ldr	r2, [pc, #628]	; (8015d98 <mode_Running+0x418>)
 8015b24:	466b      	mov	r3, sp
 8015b26:	4611      	mov	r1, r2
 8015b28:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f00a fc0f 	bl	8020350 <memcpy>
 8015b32:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 8015d9c <mode_Running+0x41c>
 8015b36:	2300      	movs	r3, #0
 8015b38:	2200      	movs	r2, #0
 8015b3a:	2100      	movs	r1, #0
 8015b3c:	2000      	movs	r0, #0
 8015b3e:	eddf 0a92 	vldr	s1, [pc, #584]	; 8015d88 <mode_Running+0x408>
 8015b42:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015da0 <mode_Running+0x420>
 8015b46:	f7f9 fb2b 	bl	800f1a0 <run_shortest>
		break;
 8015b4a:	e113      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0101://
			record_out();
 8015b4c:	f7f1 fc8e 	bl	800746c <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8015b50:	2301      	movs	r3, #1
 8015b52:	9352      	str	r3, [sp, #328]	; 0x148
 8015b54:	4a93      	ldr	r2, [pc, #588]	; (8015da4 <mode_Running+0x424>)
 8015b56:	466b      	mov	r3, sp
 8015b58:	4611      	mov	r1, r2
 8015b5a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f00a fbf6 	bl	8020350 <memcpy>
 8015b64:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 8015d9c <mode_Running+0x41c>
 8015b68:	2300      	movs	r3, #0
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	2000      	movs	r0, #0
 8015b70:	eddf 0a85 	vldr	s1, [pc, #532]	; 8015d88 <mode_Running+0x408>
 8015b74:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8015da0 <mode_Running+0x420>
 8015b78:	f7f9 fb12 	bl	800f1a0 <run_shortest>
		break;
 8015b7c:	e0fa      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8015b7e:	f7f1 fc75 	bl	800746c <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 8015b82:	2301      	movs	r3, #1
 8015b84:	9352      	str	r3, [sp, #328]	; 0x148
 8015b86:	4a87      	ldr	r2, [pc, #540]	; (8015da4 <mode_Running+0x424>)
 8015b88:	466b      	mov	r3, sp
 8015b8a:	4611      	mov	r1, r2
 8015b8c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b90:	4618      	mov	r0, r3
 8015b92:	f00a fbdd 	bl	8020350 <memcpy>
 8015b96:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8015d9c <mode_Running+0x41c>
 8015b9a:	2301      	movs	r3, #1
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	2101      	movs	r1, #1
 8015ba0:	2000      	movs	r0, #0
 8015ba2:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015d88 <mode_Running+0x408>
 8015ba6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8015da0 <mode_Running+0x420>
 8015baa:	f7f9 faf9 	bl	800f1a0 <run_shortest>
		break;
 8015bae:	e0e1      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8015bb0:	f7f1 fc5c 	bl	800746c <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015bb4:	2301      	movs	r3, #1
 8015bb6:	9352      	str	r3, [sp, #328]	; 0x148
 8015bb8:	4a7b      	ldr	r2, [pc, #492]	; (8015da8 <mode_Running+0x428>)
 8015bba:	466b      	mov	r3, sp
 8015bbc:	4611      	mov	r1, r2
 8015bbe:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f00a fbc4 	bl	8020350 <memcpy>
 8015bc8:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8015dac <mode_Running+0x42c>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	2201      	movs	r2, #1
 8015bd0:	2101      	movs	r1, #1
 8015bd2:	2000      	movs	r0, #0
 8015bd4:	eddf 0a76 	vldr	s1, [pc, #472]	; 8015db0 <mode_Running+0x430>
 8015bd8:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015d88 <mode_Running+0x408>
 8015bdc:	f7f9 fae0 	bl	800f1a0 <run_shortest>
		break;
 8015be0:	e0c8      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1000://
			record_out();
 8015be2:	f7f1 fc43 	bl	800746c <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015be6:	2301      	movs	r3, #1
 8015be8:	9352      	str	r3, [sp, #328]	; 0x148
 8015bea:	4a6f      	ldr	r2, [pc, #444]	; (8015da8 <mode_Running+0x428>)
 8015bec:	466b      	mov	r3, sp
 8015bee:	4611      	mov	r1, r2
 8015bf0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f00a fbab 	bl	8020350 <memcpy>
 8015bfa:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 8015dac <mode_Running+0x42c>
 8015bfe:	2301      	movs	r3, #1
 8015c00:	2201      	movs	r2, #1
 8015c02:	2101      	movs	r1, #1
 8015c04:	2000      	movs	r0, #0
 8015c06:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8015db4 <mode_Running+0x434>
 8015c0a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015db8 <mode_Running+0x438>
 8015c0e:	f7f9 fac7 	bl	800f1a0 <run_shortest>
		break;
 8015c12:	e0af      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1001:
			record_out();
 8015c14:	f7f1 fc2a 	bl	800746c <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015c18:	2301      	movs	r3, #1
 8015c1a:	9352      	str	r3, [sp, #328]	; 0x148
 8015c1c:	4a67      	ldr	r2, [pc, #412]	; (8015dbc <mode_Running+0x43c>)
 8015c1e:	466b      	mov	r3, sp
 8015c20:	4611      	mov	r1, r2
 8015c22:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c26:	4618      	mov	r0, r3
 8015c28:	f00a fb92 	bl	8020350 <memcpy>
 8015c2c:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8015dac <mode_Running+0x42c>
 8015c30:	2301      	movs	r3, #1
 8015c32:	2201      	movs	r2, #1
 8015c34:	2101      	movs	r1, #1
 8015c36:	2000      	movs	r0, #0
 8015c38:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8015db0 <mode_Running+0x430>
 8015c3c:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015d88 <mode_Running+0x408>
 8015c40:	f7f9 faae 	bl	800f1a0 <run_shortest>
		break;
 8015c44:	e096      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1010:
			record_out();
 8015c46:	f7f1 fc11 	bl	800746c <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	9352      	str	r3, [sp, #328]	; 0x148
 8015c4e:	4a5b      	ldr	r2, [pc, #364]	; (8015dbc <mode_Running+0x43c>)
 8015c50:	466b      	mov	r3, sp
 8015c52:	4611      	mov	r1, r2
 8015c54:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c58:	4618      	mov	r0, r3
 8015c5a:	f00a fb79 	bl	8020350 <memcpy>
 8015c5e:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8015dac <mode_Running+0x42c>
 8015c62:	2301      	movs	r3, #1
 8015c64:	2201      	movs	r2, #1
 8015c66:	2101      	movs	r1, #1
 8015c68:	2000      	movs	r0, #0
 8015c6a:	eddf 0a52 	vldr	s1, [pc, #328]	; 8015db4 <mode_Running+0x434>
 8015c6e:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015db8 <mode_Running+0x438>
 8015c72:	f7f9 fa95 	bl	800f1a0 <run_shortest>
		break;
 8015c76:	e07d      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1011:
			record_out();
 8015c78:	f7f1 fbf8 	bl	800746c <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	9352      	str	r3, [sp, #328]	; 0x148
 8015c80:	4a49      	ldr	r2, [pc, #292]	; (8015da8 <mode_Running+0x428>)
 8015c82:	466b      	mov	r3, sp
 8015c84:	4611      	mov	r1, r2
 8015c86:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f00a fb60 	bl	8020350 <memcpy>
 8015c90:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8015dac <mode_Running+0x42c>
 8015c94:	2301      	movs	r3, #1
 8015c96:	2201      	movs	r2, #1
 8015c98:	2101      	movs	r1, #1
 8015c9a:	2000      	movs	r0, #0
 8015c9c:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015dc0 <mode_Running+0x440>
 8015ca0:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015dc4 <mode_Running+0x444>
 8015ca4:	f7f9 fa7c 	bl	800f1a0 <run_shortest>
		break;
 8015ca8:	e064      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1100:
			record_out();
 8015caa:	f7f1 fbdf 	bl	800746c <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015cae:	2301      	movs	r3, #1
 8015cb0:	9352      	str	r3, [sp, #328]	; 0x148
 8015cb2:	4a42      	ldr	r2, [pc, #264]	; (8015dbc <mode_Running+0x43c>)
 8015cb4:	466b      	mov	r3, sp
 8015cb6:	4611      	mov	r1, r2
 8015cb8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	f00a fb47 	bl	8020350 <memcpy>
 8015cc2:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8015dac <mode_Running+0x42c>
 8015cc6:	2301      	movs	r3, #1
 8015cc8:	2201      	movs	r2, #1
 8015cca:	2101      	movs	r1, #1
 8015ccc:	2000      	movs	r0, #0
 8015cce:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015dc0 <mode_Running+0x440>
 8015cd2:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8015dc4 <mode_Running+0x444>
 8015cd6:	f7f9 fa63 	bl	800f1a0 <run_shortest>
		break;
 8015cda:	e04b      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1101:
			record_out();
 8015cdc:	f7f1 fbc6 	bl	800746c <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015ce0:	2301      	movs	r3, #1
 8015ce2:	9352      	str	r3, [sp, #328]	; 0x148
 8015ce4:	4a38      	ldr	r2, [pc, #224]	; (8015dc8 <mode_Running+0x448>)
 8015ce6:	466b      	mov	r3, sp
 8015ce8:	4611      	mov	r1, r2
 8015cea:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015cee:	4618      	mov	r0, r3
 8015cf0:	f00a fb2e 	bl	8020350 <memcpy>
 8015cf4:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8015dac <mode_Running+0x42c>
 8015cf8:	2301      	movs	r3, #1
 8015cfa:	2201      	movs	r2, #1
 8015cfc:	2101      	movs	r1, #1
 8015cfe:	2000      	movs	r0, #0
 8015d00:	eddf 0a32 	vldr	s1, [pc, #200]	; 8015dcc <mode_Running+0x44c>
 8015d04:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8015dd0 <mode_Running+0x450>
 8015d08:	f7f9 fa4a 	bl	800f1a0 <run_shortest>
		break;
 8015d0c:	e032      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1110:
			record_out();
 8015d0e:	f7f1 fbad 	bl	800746c <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015d12:	2301      	movs	r3, #1
 8015d14:	9352      	str	r3, [sp, #328]	; 0x148
 8015d16:	4a2c      	ldr	r2, [pc, #176]	; (8015dc8 <mode_Running+0x448>)
 8015d18:	466b      	mov	r3, sp
 8015d1a:	4611      	mov	r1, r2
 8015d1c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015d20:	4618      	mov	r0, r3
 8015d22:	f00a fb15 	bl	8020350 <memcpy>
 8015d26:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8015dac <mode_Running+0x42c>
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	2101      	movs	r1, #1
 8015d30:	2000      	movs	r0, #0
 8015d32:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015dc0 <mode_Running+0x440>
 8015d36:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015dc4 <mode_Running+0x444>
 8015d3a:	f7f9 fa31 	bl	800f1a0 <run_shortest>
		break;
 8015d3e:	e019      	b.n	8015d74 <mode_Running+0x3f4>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015d40:	4c24      	ldr	r4, [pc, #144]	; (8015dd4 <mode_Running+0x454>)
 8015d42:	2300      	movs	r3, #0
 8015d44:	934f      	str	r3, [sp, #316]	; 0x13c
 8015d46:	2301      	movs	r3, #1
 8015d48:	934e      	str	r3, [sp, #312]	; 0x138
 8015d4a:	4668      	mov	r0, sp
 8015d4c:	f104 0310 	add.w	r3, r4, #16
 8015d50:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015d54:	4619      	mov	r1, r3
 8015d56:	f00a fafb 	bl	8020350 <memcpy>
 8015d5a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d5e:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015d88 <mode_Running+0x408>
 8015d62:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015d8c <mode_Running+0x40c>
 8015d66:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015d90 <mode_Running+0x410>
 8015d6a:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8015dd8 <mode_Running+0x458>
 8015d6e:	f7f8 f905 	bl	800df7c <AdatiWayReturn>
		break;
 8015d72:	bf00      	nop
	}


}
 8015d74:	bf00      	nop
 8015d76:	3718      	adds	r7, #24
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8015d7c:	08023740 	.word	0x08023740
 8015d80:	0802374c 	.word	0x0802374c
 8015d84:	2000ef80 	.word	0x2000ef80
 8015d88:	453b8000 	.word	0x453b8000
 8015d8c:	44fa0000 	.word	0x44fa0000
 8015d90:	43c80000 	.word	0x43c80000
 8015d94:	43960000 	.word	0x43960000
 8015d98:	2000f210 	.word	0x2000f210
 8015d9c:	3e99999a 	.word	0x3e99999a
 8015da0:	447a0000 	.word	0x447a0000
 8015da4:	2000f358 	.word	0x2000f358
 8015da8:	2000f4a0 	.word	0x2000f4a0
 8015dac:	3f7d70a4 	.word	0x3f7d70a4
 8015db0:	461c4000 	.word	0x461c4000
 8015db4:	464b2000 	.word	0x464b2000
 8015db8:	45480000 	.word	0x45480000
 8015dbc:	2000f5e8 	.word	0x2000f5e8
 8015dc0:	4684d000 	.word	0x4684d000
 8015dc4:	457a0000 	.word	0x457a0000
 8015dc8:	2000f730 	.word	0x2000f730
 8015dcc:	462be000 	.word	0x462be000
 8015dd0:	4541c000 	.word	0x4541c000
 8015dd4:	2000f0c8 	.word	0x2000f0c8
 8015dd8:	437a0000 	.word	0x437a0000

08015ddc <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015ddc:	b590      	push	{r4, r7, lr}
 8015dde:	b0db      	sub	sp, #364	; 0x16c
 8015de0:	af52      	add	r7, sp, #328	; 0x148
 8015de2:	4603      	mov	r3, r0
 8015de4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015de6:	2300      	movs	r3, #0
 8015de8:	613b      	str	r3, [r7, #16]
 8015dea:	2300      	movs	r3, #0
 8015dec:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8015dee:	2300      	movs	r3, #0
 8015df0:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015df2:	2300      	movs	r3, #0
 8015df4:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015df6:	2300      	movs	r3, #0
 8015df8:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015dfe:	2003      	movs	r0, #3
 8015e00:	f7f1 fd74 	bl	80078ec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015e04:	2003      	movs	r0, #3
 8015e06:	f7f1 fd99 	bl	800793c <pl_R_DriveMotor_mode>
	reset_gyro();
 8015e0a:	f7eb fcad 	bl	8001768 <reset_gyro>
	reset_speed();
 8015e0e:	f7eb f903 	bl	8001018 <reset_speed>
	reset_distance();
 8015e12:	f7eb f8c3 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015e16:	f7ee fbcb 	bl	80045b0 <clear_Ierror>

	switch (main_modeR) {
 8015e1a:	79fb      	ldrb	r3, [r7, #7]
 8015e1c:	2b0f      	cmp	r3, #15
 8015e1e:	f200 82c9 	bhi.w	80163b4 <mode_Tuning0+0x5d8>
 8015e22:	a201      	add	r2, pc, #4	; (adr r2, 8015e28 <mode_Tuning0+0x4c>)
 8015e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e28:	08015e69 	.word	0x08015e69
 8015e2c:	08015ef3 	.word	0x08015ef3
 8015e30:	08015f19 	.word	0x08015f19
 8015e34:	08015f3f 	.word	0x08015f3f
 8015e38:	08015f6f 	.word	0x08015f6f
 8015e3c:	08015f9f 	.word	0x08015f9f
 8015e40:	08015fc5 	.word	0x08015fc5
 8015e44:	08015feb 	.word	0x08015feb
 8015e48:	08016011 	.word	0x08016011
 8015e4c:	08016035 	.word	0x08016035
 8015e50:	080160b7 	.word	0x080160b7
 8015e54:	0801613d 	.word	0x0801613d
 8015e58:	08016163 	.word	0x08016163
 8015e5c:	080161fd 	.word	0x080161fd
 8015e60:	08016315 	.word	0x08016315
 8015e64:	08016365 	.word	0x08016365
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015e68:	4bca      	ldr	r3, [pc, #808]	; (8016194 <mode_Tuning0+0x3b8>)
 8015e6a:	2203      	movs	r2, #3
 8015e6c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015e72:	6978      	ldr	r0, [r7, #20]
 8015e74:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 8016198 <mode_Tuning0+0x3bc>
 8015e78:	eddf 1ac8 	vldr	s3, [pc, #800]	; 801619c <mode_Tuning0+0x3c0>
 8015e7c:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 80161a0 <mode_Tuning0+0x3c4>
 8015e80:	eddf 0ac7 	vldr	s1, [pc, #796]	; 80161a0 <mode_Tuning0+0x3c4>
 8015e84:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 80161a4 <mode_Tuning0+0x3c8>
 8015e88:	f7ed f8a8 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015e8c:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 80161a8 <mode_Tuning0+0x3cc>
 8015e90:	eddf 1ac6 	vldr	s3, [pc, #792]	; 80161ac <mode_Tuning0+0x3d0>
 8015e94:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 80161a0 <mode_Tuning0+0x3c4>
 8015e98:	eddf 0ac1 	vldr	s1, [pc, #772]	; 80161a0 <mode_Tuning0+0x3c4>
 8015e9c:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 80161b0 <mode_Tuning0+0x3d4>
 8015ea0:	f7ed fdaa 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015ea4:	6978      	ldr	r0, [r7, #20]
 8015ea6:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 80161b4 <mode_Tuning0+0x3d8>
 8015eaa:	eddf 1ac3 	vldr	s3, [pc, #780]	; 80161b8 <mode_Tuning0+0x3dc>
 8015eae:	ed9f 1abc 	vldr	s2, [pc, #752]	; 80161a0 <mode_Tuning0+0x3c4>
 8015eb2:	eddf 0abb 	vldr	s1, [pc, #748]	; 80161a0 <mode_Tuning0+0x3c4>
 8015eb6:	ed9f 0abb 	vldr	s0, [pc, #748]	; 80161a4 <mode_Tuning0+0x3c8>
 8015eba:	f7ed f88f 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015ebe:	ed9f 2aba 	vldr	s4, [pc, #744]	; 80161a8 <mode_Tuning0+0x3cc>
 8015ec2:	eddf 1aba 	vldr	s3, [pc, #744]	; 80161ac <mode_Tuning0+0x3d0>
 8015ec6:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 80161a0 <mode_Tuning0+0x3c4>
 8015eca:	eddf 0ab5 	vldr	s1, [pc, #724]	; 80161a0 <mode_Tuning0+0x3c4>
 8015ece:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 80161b0 <mode_Tuning0+0x3d4>
 8015ed2:	f7ed fd91 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015ed6:	6978      	ldr	r0, [r7, #20]
 8015ed8:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 80161bc <mode_Tuning0+0x3e0>
 8015edc:	eddf 1ab8 	vldr	s3, [pc, #736]	; 80161c0 <mode_Tuning0+0x3e4>
 8015ee0:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 80161a0 <mode_Tuning0+0x3c4>
 8015ee4:	eddf 0aae 	vldr	s1, [pc, #696]	; 80161a0 <mode_Tuning0+0x3c4>
 8015ee8:	ed9f 0aae 	vldr	s0, [pc, #696]	; 80161a4 <mode_Tuning0+0x3c8>
 8015eec:	f7ed f876 	bl	8002fdc <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015ef0:	e260      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015ef2:	4ba8      	ldr	r3, [pc, #672]	; (8016194 <mode_Tuning0+0x3b8>)
 8015ef4:	2205      	movs	r2, #5
 8015ef6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ef8:	2300      	movs	r3, #0
 8015efa:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 8015efc:	6978      	ldr	r0, [r7, #20]
 8015efe:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80161c4 <mode_Tuning0+0x3e8>
 8015f02:	eddf 1ab1 	vldr	s3, [pc, #708]	; 80161c8 <mode_Tuning0+0x3ec>
 8015f06:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80161a0 <mode_Tuning0+0x3c4>
 8015f0a:	eddf 0aa5 	vldr	s1, [pc, #660]	; 80161a0 <mode_Tuning0+0x3c4>
 8015f0e:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80161cc <mode_Tuning0+0x3f0>
 8015f12:	f7ed f863 	bl	8002fdc <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015f16:	e24d      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 2://壁制御
			record_mode=6;
 8015f18:	4b9e      	ldr	r3, [pc, #632]	; (8016194 <mode_Tuning0+0x3b8>)
 8015f1a:	2206      	movs	r2, #6
 8015f1c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015f1e:	2301      	movs	r3, #1
 8015f20:	753b      	strb	r3, [r7, #20]
			straight_table2(90*15, 0, 0, 300, 6000,mode);
 8015f22:	6978      	ldr	r0, [r7, #20]
 8015f24:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 80161d0 <mode_Tuning0+0x3f4>
 8015f28:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80161d4 <mode_Tuning0+0x3f8>
 8015f2c:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 80161a0 <mode_Tuning0+0x3c4>
 8015f30:	eddf 0a9b 	vldr	s1, [pc, #620]	; 80161a0 <mode_Tuning0+0x3c4>
 8015f34:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80161d8 <mode_Tuning0+0x3fc>
 8015f38:	f7ed f850 	bl	8002fdc <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015f3c:	e23a      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015f3e:	4ca7      	ldr	r4, [pc, #668]	; (80161dc <mode_Tuning0+0x400>)
 8015f40:	2300      	movs	r3, #0
 8015f42:	9351      	str	r3, [sp, #324]	; 0x144
 8015f44:	2300      	movs	r3, #0
 8015f46:	9350      	str	r3, [sp, #320]	; 0x140
 8015f48:	2300      	movs	r3, #0
 8015f4a:	934f      	str	r3, [sp, #316]	; 0x13c
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	934e      	str	r3, [sp, #312]	; 0x138
 8015f50:	4668      	mov	r0, sp
 8015f52:	f104 0310 	add.w	r3, r4, #16
 8015f56:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015f5a:	4619      	mov	r1, r3
 8015f5c:	f00a f9f8 	bl	8020350 <memcpy>
 8015f60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f64:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80161a0 <mode_Tuning0+0x3c4>
 8015f68:	f7f7 fe4e 	bl	800dc08 <testturning>
		break;
 8015f6c:	e222      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015f6e:	4c9b      	ldr	r4, [pc, #620]	; (80161dc <mode_Tuning0+0x400>)
 8015f70:	2300      	movs	r3, #0
 8015f72:	9351      	str	r3, [sp, #324]	; 0x144
 8015f74:	2300      	movs	r3, #0
 8015f76:	9350      	str	r3, [sp, #320]	; 0x140
 8015f78:	2300      	movs	r3, #0
 8015f7a:	934f      	str	r3, [sp, #316]	; 0x13c
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	934e      	str	r3, [sp, #312]	; 0x138
 8015f80:	4668      	mov	r0, sp
 8015f82:	f104 0310 	add.w	r3, r4, #16
 8015f86:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015f8a:	4619      	mov	r1, r3
 8015f8c:	f00a f9e0 	bl	8020350 <memcpy>
 8015f90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015f94:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80161a0 <mode_Tuning0+0x3c4>
 8015f98:	f7f7 fe36 	bl	800dc08 <testturning>
		break;
 8015f9c:	e20a      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 5://直進(制御なし)
			record_mode=7;
 8015f9e:	4b7d      	ldr	r3, [pc, #500]	; (8016194 <mode_Tuning0+0x3b8>)
 8015fa0:	2207      	movs	r2, #7
 8015fa2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015fa8:	6978      	ldr	r0, [r7, #20]
 8015faa:	ed9f 2a89 	vldr	s4, [pc, #548]	; 80161d0 <mode_Tuning0+0x3f4>
 8015fae:	eddf 1a89 	vldr	s3, [pc, #548]	; 80161d4 <mode_Tuning0+0x3f8>
 8015fb2:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 80161a0 <mode_Tuning0+0x3c4>
 8015fb6:	eddf 0a7a 	vldr	s1, [pc, #488]	; 80161a0 <mode_Tuning0+0x3c4>
 8015fba:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80161b0 <mode_Tuning0+0x3d4>
 8015fbe:	f7ed f80d 	bl	8002fdc <straight_table2>
		break;
 8015fc2:	e1f7      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015fc4:	4b73      	ldr	r3, [pc, #460]	; (8016194 <mode_Tuning0+0x3b8>)
 8015fc6:	2207      	movs	r2, #7
 8015fc8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015fce:	6978      	ldr	r0, [r7, #20]
 8015fd0:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 80161d0 <mode_Tuning0+0x3f4>
 8015fd4:	eddf 1a82 	vldr	s3, [pc, #520]	; 80161e0 <mode_Tuning0+0x404>
 8015fd8:	ed9f 1a71 	vldr	s2, [pc, #452]	; 80161a0 <mode_Tuning0+0x3c4>
 8015fdc:	eddf 0a70 	vldr	s1, [pc, #448]	; 80161a0 <mode_Tuning0+0x3c4>
 8015fe0:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80161e4 <mode_Tuning0+0x408>
 8015fe4:	f7ec fffa 	bl	8002fdc <straight_table2>
		break;
 8015fe8:	e1e4      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015fea:	4b6a      	ldr	r3, [pc, #424]	; (8016194 <mode_Tuning0+0x3b8>)
 8015fec:	2207      	movs	r2, #7
 8015fee:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015ff0:	2303      	movs	r3, #3
 8015ff2:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015ff4:	6978      	ldr	r0, [r7, #20]
 8015ff6:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80161d0 <mode_Tuning0+0x3f4>
 8015ffa:	eddf 1a6f 	vldr	s3, [pc, #444]	; 80161b8 <mode_Tuning0+0x3dc>
 8015ffe:	ed9f 1a68 	vldr	s2, [pc, #416]	; 80161a0 <mode_Tuning0+0x3c4>
 8016002:	eddf 0a67 	vldr	s1, [pc, #412]	; 80161a0 <mode_Tuning0+0x3c4>
 8016006:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80161e4 <mode_Tuning0+0x408>
 801600a:	f7ec ffe7 	bl	8002fdc <straight_table2>
		break;
 801600e:	e1d1      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 8://宴会芸
			record_mode=2;
 8016010:	4b60      	ldr	r3, [pc, #384]	; (8016194 <mode_Tuning0+0x3b8>)
 8016012:	2202      	movs	r2, #2
 8016014:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016016:	2001      	movs	r0, #1
 8016018:	f7f0 ffba 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801601c:	2001      	movs	r0, #1
 801601e:	f7f0 ffc9 	bl	8006fb4 <pl_l_blue_LED>
			no_angle();
 8016022:	f7ed fefd 	bl	8003e20 <no_angle>
			pl_r_blue_LED(OFF);
 8016026:	2000      	movs	r0, #0
 8016028:	f7f0 ffb2 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801602c:	2000      	movs	r0, #0
 801602e:	f7f0 ffc1 	bl	8006fb4 <pl_l_blue_LED>
		break;
 8016032:	e1bf      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 9://システム同定enc
			record_mode=6;
 8016034:	4b57      	ldr	r3, [pc, #348]	; (8016194 <mode_Tuning0+0x3b8>)
 8016036:	2206      	movs	r2, #6
 8016038:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 801603a:	2001      	movs	r0, #1
 801603c:	f7f0 ffa8 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016040:	2001      	movs	r0, #1
 8016042:	f7f0 ffb7 	bl	8006fb4 <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8016046:	f107 020c 	add.w	r2, r7, #12
 801604a:	f107 0310 	add.w	r3, r7, #16
 801604e:	4611      	mov	r1, r2
 8016050:	4618      	mov	r0, r3
 8016052:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016056:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801605a:	f7eb feeb 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	68fa      	ldr	r2, [r7, #12]
 8016062:	4611      	mov	r1, r2
 8016064:	4618      	mov	r0, r3
 8016066:	f7f1 fcab 	bl	80079c0 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 801606a:	f7f1 fc8d 	bl	8007988 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801606e:	e006      	b.n	801607e <mode_Tuning0+0x2a2>
				wait_ms(1);
 8016070:	2001      	movs	r0, #1
 8016072:	f7f1 ff1d 	bl	8007eb0 <wait_ms>
				if(record_rupe_flag==1){
 8016076:	4b5c      	ldr	r3, [pc, #368]	; (80161e8 <mode_Tuning0+0x40c>)
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	2b01      	cmp	r3, #1
 801607c:	d011      	beq.n	80160a2 <mode_Tuning0+0x2c6>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801607e:	4b5b      	ldr	r3, [pc, #364]	; (80161ec <mode_Tuning0+0x410>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016086:	ddf3      	ble.n	8016070 <mode_Tuning0+0x294>
 8016088:	4b58      	ldr	r3, [pc, #352]	; (80161ec <mode_Tuning0+0x410>)
 801608a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801608e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016092:	dded      	ble.n	8016070 <mode_Tuning0+0x294>
 8016094:	4b55      	ldr	r3, [pc, #340]	; (80161ec <mode_Tuning0+0x410>)
 8016096:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801609a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801609e:	dde7      	ble.n	8016070 <mode_Tuning0+0x294>
 80160a0:	e000      	b.n	80160a4 <mode_Tuning0+0x2c8>
					break;
 80160a2:	bf00      	nop
				}
			}
			pl_DriveMotor_stop();
 80160a4:	f7f1 fc7e 	bl	80079a4 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80160a8:	2000      	movs	r0, #0
 80160aa:	f7f0 ff71 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80160ae:	2000      	movs	r0, #0
 80160b0:	f7f0 ff80 	bl	8006fb4 <pl_l_blue_LED>
		break;
 80160b4:	e17e      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 10://システム同定gyro
			record_mode=6;
 80160b6:	4b37      	ldr	r3, [pc, #220]	; (8016194 <mode_Tuning0+0x3b8>)
 80160b8:	2206      	movs	r2, #6
 80160ba:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80160bc:	2001      	movs	r0, #1
 80160be:	f7f0 ff67 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80160c2:	2001      	movs	r0, #1
 80160c4:	f7f0 ff76 	bl	8006fb4 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 80160c8:	f107 020c 	add.w	r2, r7, #12
 80160cc:	f107 0310 	add.w	r3, r7, #16
 80160d0:	4611      	mov	r1, r2
 80160d2:	4618      	mov	r0, r3
 80160d4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80160d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80160dc:	f7eb feaa 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 80160e0:	693b      	ldr	r3, [r7, #16]
 80160e2:	68fa      	ldr	r2, [r7, #12]
 80160e4:	4611      	mov	r1, r2
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7f1 fc6a 	bl	80079c0 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 80160ec:	f7f1 fc4c 	bl	8007988 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80160f0:	e00a      	b.n	8016108 <mode_Tuning0+0x32c>
				wait_ms(1);
 80160f2:	2001      	movs	r0, #1
 80160f4:	f7f1 fedc 	bl	8007eb0 <wait_ms>
				if(record_rupe_flag==1){
 80160f8:	4b3b      	ldr	r3, [pc, #236]	; (80161e8 <mode_Tuning0+0x40c>)
 80160fa:	781b      	ldrb	r3, [r3, #0]
 80160fc:	2b01      	cmp	r3, #1
 80160fe:	d103      	bne.n	8016108 <mode_Tuning0+0x32c>
					record_mode=0;
 8016100:	4b24      	ldr	r3, [pc, #144]	; (8016194 <mode_Tuning0+0x3b8>)
 8016102:	2200      	movs	r2, #0
 8016104:	701a      	strb	r2, [r3, #0]
					break;
 8016106:	e010      	b.n	801612a <mode_Tuning0+0x34e>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016108:	4b38      	ldr	r3, [pc, #224]	; (80161ec <mode_Tuning0+0x410>)
 801610a:	681b      	ldr	r3, [r3, #0]
 801610c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016110:	ddef      	ble.n	80160f2 <mode_Tuning0+0x316>
 8016112:	4b36      	ldr	r3, [pc, #216]	; (80161ec <mode_Tuning0+0x410>)
 8016114:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016118:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801611c:	dde9      	ble.n	80160f2 <mode_Tuning0+0x316>
 801611e:	4b33      	ldr	r3, [pc, #204]	; (80161ec <mode_Tuning0+0x410>)
 8016120:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016124:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016128:	dde3      	ble.n	80160f2 <mode_Tuning0+0x316>
				}
			}
			pl_DriveMotor_stop();
 801612a:	f7f1 fc3b 	bl	80079a4 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 801612e:	2000      	movs	r0, #0
 8016130:	f7f0 ff2e 	bl	8006f90 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016134:	2000      	movs	r0, #0
 8016136:	f7f0 ff3d 	bl	8006fb4 <pl_l_blue_LED>
		break;
 801613a:	e13b      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 11:
		record_mode=1;
 801613c:	4b15      	ldr	r3, [pc, #84]	; (8016194 <mode_Tuning0+0x3b8>)
 801613e:	2201      	movs	r2, #1
 8016140:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8016142:	2300      	movs	r3, #0
 8016144:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8016146:	6978      	ldr	r0, [r7, #20]
 8016148:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80161d0 <mode_Tuning0+0x3f4>
 801614c:	eddf 1a21 	vldr	s3, [pc, #132]	; 80161d4 <mode_Tuning0+0x3f8>
 8016150:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80161a0 <mode_Tuning0+0x3c4>
 8016154:	eddf 0a12 	vldr	s1, [pc, #72]	; 80161a0 <mode_Tuning0+0x3c4>
 8016158:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80161f0 <mode_Tuning0+0x414>
 801615c:	f7ec ff3e 	bl	8002fdc <straight_table2>
		break;
 8016160:	e128      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 12:
		record_mode=2;
 8016162:	4b0c      	ldr	r3, [pc, #48]	; (8016194 <mode_Tuning0+0x3b8>)
 8016164:	2202      	movs	r2, #2
 8016166:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8016168:	2300      	movs	r3, #0
 801616a:	61fb      	str	r3, [r7, #28]
 801616c:	e00e      	b.n	801618c <mode_Tuning0+0x3b0>
		turning_table2(90, 0, 0, 400, 3000);
 801616e:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80161f4 <mode_Tuning0+0x418>
 8016172:	eddf 1a0e 	vldr	s3, [pc, #56]	; 80161ac <mode_Tuning0+0x3d0>
 8016176:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80161a0 <mode_Tuning0+0x3c4>
 801617a:	eddf 0a09 	vldr	s1, [pc, #36]	; 80161a0 <mode_Tuning0+0x3c4>
 801617e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80161f8 <mode_Tuning0+0x41c>
 8016182:	f7ed fc39 	bl	80039f8 <turning_table2>
		for(int i=0;i<40;i++){
 8016186:	69fb      	ldr	r3, [r7, #28]
 8016188:	3301      	adds	r3, #1
 801618a:	61fb      	str	r3, [r7, #28]
 801618c:	69fb      	ldr	r3, [r7, #28]
 801618e:	2b27      	cmp	r3, #39	; 0x27
 8016190:	dded      	ble.n	801616e <mode_Tuning0+0x392>
		}
		break;
 8016192:	e10f      	b.n	80163b4 <mode_Tuning0+0x5d8>
 8016194:	2000edc0 	.word	0x2000edc0
 8016198:	464b2000 	.word	0x464b2000
 801619c:	44c80000 	.word	0x44c80000
 80161a0:	00000000 	.word	0x00000000
 80161a4:	44070000 	.word	0x44070000
 80161a8:	457a0000 	.word	0x457a0000
 80161ac:	43c80000 	.word	0x43c80000
 80161b0:	43340000 	.word	0x43340000
 80161b4:	466a6000 	.word	0x466a6000
 80161b8:	44fa0000 	.word	0x44fa0000
 80161bc:	469c4000 	.word	0x469c4000
 80161c0:	45160000 	.word	0x45160000
 80161c4:	447a0000 	.word	0x447a0000
 80161c8:	c3160000 	.word	0xc3160000
 80161cc:	c1a40000 	.word	0xc1a40000
 80161d0:	45bb8000 	.word	0x45bb8000
 80161d4:	43960000 	.word	0x43960000
 80161d8:	44a8c000 	.word	0x44a8c000
 80161dc:	2000ef80 	.word	0x2000ef80
 80161e0:	43fa0000 	.word	0x43fa0000
 80161e4:	443eeb39 	.word	0x443eeb39
 80161e8:	2000edcc 	.word	0x2000edcc
 80161ec:	200002b8 	.word	0x200002b8
 80161f0:	420a0000 	.word	0x420a0000
 80161f4:	453b8000 	.word	0x453b8000
 80161f8:	42b40000 	.word	0x42b40000
		case 13:
			record_mode=2;
 80161fc:	4b8a      	ldr	r3, [pc, #552]	; (8016428 <mode_Tuning0+0x64c>)
 80161fe:	2202      	movs	r2, #2
 8016200:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016202:	2301      	movs	r3, #1
 8016204:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016206:	4b89      	ldr	r3, [pc, #548]	; (801642c <mode_Tuning0+0x650>)
 8016208:	edd3 6a02 	vldr	s13, [r3, #8]
 801620c:	4b87      	ldr	r3, [pc, #540]	; (801642c <mode_Tuning0+0x650>)
 801620e:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016212:	4b86      	ldr	r3, [pc, #536]	; (801642c <mode_Tuning0+0x650>)
 8016214:	ed93 7a02 	vldr	s14, [r3, #8]
 8016218:	4b84      	ldr	r3, [pc, #528]	; (801642c <mode_Tuning0+0x650>)
 801621a:	edd3 7a02 	vldr	s15, [r3, #8]
 801621e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016222:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016226:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 801622a:	eddf 5a81 	vldr	s11, [pc, #516]	; 8016430 <mode_Tuning0+0x654>
 801622e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016232:	6978      	ldr	r0, [r7, #20]
 8016234:	eeb0 2a47 	vmov.f32	s4, s14
 8016238:	eef0 1a46 	vmov.f32	s3, s12
 801623c:	eeb0 1a66 	vmov.f32	s2, s13
 8016240:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8016434 <mode_Tuning0+0x658>
 8016244:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8016438 <mode_Tuning0+0x65c>
 8016248:	f7ec fec8 	bl	8002fdc <straight_table2>
			for(int i=0;i<40;i++){
 801624c:	2300      	movs	r3, #0
 801624e:	61bb      	str	r3, [r7, #24]
 8016250:	e037      	b.n	80162c2 <mode_Tuning0+0x4e6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016252:	4b76      	ldr	r3, [pc, #472]	; (801642c <mode_Tuning0+0x650>)
 8016254:	edd3 6a02 	vldr	s13, [r3, #8]
 8016258:	4b74      	ldr	r3, [pc, #464]	; (801642c <mode_Tuning0+0x650>)
 801625a:	ed93 6a02 	vldr	s12, [r3, #8]
 801625e:	4b73      	ldr	r3, [pc, #460]	; (801642c <mode_Tuning0+0x650>)
 8016260:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016264:	4b71      	ldr	r3, [pc, #452]	; (801642c <mode_Tuning0+0x650>)
 8016266:	ed93 7a02 	vldr	s14, [r3, #8]
 801626a:	4b70      	ldr	r3, [pc, #448]	; (801642c <mode_Tuning0+0x650>)
 801626c:	edd3 7a02 	vldr	s15, [r3, #8]
 8016270:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016274:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016278:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 801627c:	ed9f 5a6c 	vldr	s10, [pc, #432]	; 8016430 <mode_Tuning0+0x654>
 8016280:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8016284:	6978      	ldr	r0, [r7, #20]
 8016286:	eeb0 2a47 	vmov.f32	s4, s14
 801628a:	eef0 1a65 	vmov.f32	s3, s11
 801628e:	eeb0 1a46 	vmov.f32	s2, s12
 8016292:	eef0 0a66 	vmov.f32	s1, s13
 8016296:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801629a:	f7ec fe9f 	bl	8002fdc <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 801629e:	4b63      	ldr	r3, [pc, #396]	; (801642c <mode_Tuning0+0x650>)
 80162a0:	2200      	movs	r2, #0
 80162a2:	9203      	str	r2, [sp, #12]
 80162a4:	2200      	movs	r2, #0
 80162a6:	9202      	str	r2, [sp, #8]
 80162a8:	2200      	movs	r2, #0
 80162aa:	9201      	str	r2, [sp, #4]
 80162ac:	699a      	ldr	r2, [r3, #24]
 80162ae:	9200      	str	r2, [sp, #0]
 80162b0:	3308      	adds	r3, #8
 80162b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80162b4:	ed9f 0a61 	vldr	s0, [pc, #388]	; 801643c <mode_Tuning0+0x660>
 80162b8:	f7f3 fe62 	bl	8009f80 <slalomR>
			for(int i=0;i<40;i++){
 80162bc:	69bb      	ldr	r3, [r7, #24]
 80162be:	3301      	adds	r3, #1
 80162c0:	61bb      	str	r3, [r7, #24]
 80162c2:	69bb      	ldr	r3, [r7, #24]
 80162c4:	2b27      	cmp	r3, #39	; 0x27
 80162c6:	ddc4      	ble.n	8016252 <mode_Tuning0+0x476>
			}
			mode.WallControlMode=0;
 80162c8:	2300      	movs	r3, #0
 80162ca:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80162cc:	4b57      	ldr	r3, [pc, #348]	; (801642c <mode_Tuning0+0x650>)
 80162ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80162d2:	4b56      	ldr	r3, [pc, #344]	; (801642c <mode_Tuning0+0x650>)
 80162d4:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80162d8:	4b54      	ldr	r3, [pc, #336]	; (801642c <mode_Tuning0+0x650>)
 80162da:	ed93 7a02 	vldr	s14, [r3, #8]
 80162de:	4b53      	ldr	r3, [pc, #332]	; (801642c <mode_Tuning0+0x650>)
 80162e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80162e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80162e8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80162ec:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80162f0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8016430 <mode_Tuning0+0x654>
 80162f4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80162f8:	6978      	ldr	r0, [r7, #20]
 80162fa:	eeb0 2a47 	vmov.f32	s4, s14
 80162fe:	eef0 1a46 	vmov.f32	s3, s12
 8016302:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8016434 <mode_Tuning0+0x658>
 8016306:	eef0 0a66 	vmov.f32	s1, s13
 801630a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016430 <mode_Tuning0+0x654>
 801630e:	f7ec fe65 	bl	8002fdc <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8016312:	e04f      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8016314:	4b4a      	ldr	r3, [pc, #296]	; (8016440 <mode_Tuning0+0x664>)
 8016316:	2201      	movs	r2, #1
 8016318:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 801631a:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8016444 <mode_Tuning0+0x668>
 801631e:	f7f1 fb79 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016322:	f7f1 fb63 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(600);
 8016326:	f44f 7016 	mov.w	r0, #600	; 0x258
 801632a:	f002 fd3f 	bl	8018dac <HAL_Delay>
			reset_gyro();
 801632e:	f7eb fa1b 	bl	8001768 <reset_gyro>
			reset_speed();
 8016332:	f7ea fe71 	bl	8001018 <reset_speed>
			reset_distance();
 8016336:	f7ea fe31 	bl	8000f9c <reset_distance>
			clear_Ierror();
 801633a:	f7ee f939 	bl	80045b0 <clear_Ierror>
			record_mode=3;
 801633e:	4b3a      	ldr	r3, [pc, #232]	; (8016428 <mode_Tuning0+0x64c>)
 8016340:	2203      	movs	r2, #3
 8016342:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016344:	2301      	movs	r3, #1
 8016346:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8016348:	6978      	ldr	r0, [r7, #20]
 801634a:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8016448 <mode_Tuning0+0x66c>
 801634e:	eddf 1a3f 	vldr	s3, [pc, #252]	; 801644c <mode_Tuning0+0x670>
 8016352:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8016434 <mode_Tuning0+0x658>
 8016356:	eddf 0a37 	vldr	s1, [pc, #220]	; 8016434 <mode_Tuning0+0x658>
 801635a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8016450 <mode_Tuning0+0x674>
 801635e:	f7ec fe3d 	bl	8002fdc <straight_table2>
		break;
 8016362:	e027      	b.n	80163b4 <mode_Tuning0+0x5d8>
		case 15:
			highspeed_mode = 1;
 8016364:	4b36      	ldr	r3, [pc, #216]	; (8016440 <mode_Tuning0+0x664>)
 8016366:	2201      	movs	r2, #1
 8016368:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 801636a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8016444 <mode_Tuning0+0x668>
 801636e:	f7f1 fb51 	bl	8007a14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016372:	f7f1 fb3b 	bl	80079ec <pl_FunMotor_start>
			HAL_Delay(600);
 8016376:	f44f 7016 	mov.w	r0, #600	; 0x258
 801637a:	f002 fd17 	bl	8018dac <HAL_Delay>
			reset_gyro();
 801637e:	f7eb f9f3 	bl	8001768 <reset_gyro>
			reset_speed();
 8016382:	f7ea fe49 	bl	8001018 <reset_speed>
			reset_distance();
 8016386:	f7ea fe09 	bl	8000f9c <reset_distance>
			clear_Ierror();
 801638a:	f7ee f911 	bl	80045b0 <clear_Ierror>
			record_mode=3;
 801638e:	4b26      	ldr	r3, [pc, #152]	; (8016428 <mode_Tuning0+0x64c>)
 8016390:	2203      	movs	r2, #3
 8016392:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8016394:	2303      	movs	r3, #3
 8016396:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016398:	6978      	ldr	r0, [r7, #20]
 801639a:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 8016454 <mode_Tuning0+0x678>
 801639e:	eddf 1a2b 	vldr	s3, [pc, #172]	; 801644c <mode_Tuning0+0x670>
 80163a2:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016434 <mode_Tuning0+0x658>
 80163a6:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016434 <mode_Tuning0+0x658>
 80163aa:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016458 <mode_Tuning0+0x67c>
 80163ae:	f7ec fe15 	bl	8002fdc <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 80163b2:	bf00      	nop
	}
	record_mode=0;
 80163b4:	4b1c      	ldr	r3, [pc, #112]	; (8016428 <mode_Tuning0+0x64c>)
 80163b6:	2200      	movs	r2, #0
 80163b8:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80163ba:	2003      	movs	r0, #3
 80163bc:	f7f1 fabe 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80163c0:	2003      	movs	r0, #3
 80163c2:	f7f1 fa93 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80163c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80163ca:	f7f1 fdb5 	bl	8007f38 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80163ce:	f7f1 fb17 	bl	8007a00 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 80163d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80163d6:	f7f1 fdaf 	bl	8007f38 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80163da:	2000      	movs	r0, #0
 80163dc:	f7f1 fa7c 	bl	80078d8 <pl_DriveMotor_standby>
	record_mode=0;
 80163e0:	4b11      	ldr	r3, [pc, #68]	; (8016428 <mode_Tuning0+0x64c>)
 80163e2:	2200      	movs	r2, #0
 80163e4:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80163e6:	e002      	b.n	80163ee <mode_Tuning0+0x612>
		HAL_Delay(1);
 80163e8:	2001      	movs	r0, #1
 80163ea:	f002 fcdf 	bl	8018dac <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80163ee:	4b1b      	ldr	r3, [pc, #108]	; (801645c <mode_Tuning0+0x680>)
 80163f0:	681b      	ldr	r3, [r3, #0]
 80163f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80163f6:	ddf7      	ble.n	80163e8 <mode_Tuning0+0x60c>
 80163f8:	4b18      	ldr	r3, [pc, #96]	; (801645c <mode_Tuning0+0x680>)
 80163fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80163fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016402:	ddf1      	ble.n	80163e8 <mode_Tuning0+0x60c>
 8016404:	4b15      	ldr	r3, [pc, #84]	; (801645c <mode_Tuning0+0x680>)
 8016406:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801640a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801640e:	ddeb      	ble.n	80163e8 <mode_Tuning0+0x60c>
	}
	pl_r_blue_LED(ON);
 8016410:	2001      	movs	r0, #1
 8016412:	f7f0 fdbd 	bl	8006f90 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016416:	2001      	movs	r0, #1
 8016418:	f7f0 fdcc 	bl	8006fb4 <pl_l_blue_LED>
	record_print();
 801641c:	f000 fd48 	bl	8016eb0 <record_print>



}
 8016420:	bf00      	nop
 8016422:	3724      	adds	r7, #36	; 0x24
 8016424:	46bd      	mov	sp, r7
 8016426:	bd90      	pop	{r4, r7, pc}
 8016428:	2000edc0 	.word	0x2000edc0
 801642c:	2000ef80 	.word	0x2000ef80
 8016430:	42340000 	.word	0x42340000
 8016434:	00000000 	.word	0x00000000
 8016438:	431b8000 	.word	0x431b8000
 801643c:	43960000 	.word	0x43960000
 8016440:	20000808 	.word	0x20000808
 8016444:	3f7d70a4 	.word	0x3f7d70a4
 8016448:	4684d000 	.word	0x4684d000
 801644c:	457a0000 	.word	0x457a0000
 8016450:	44340000 	.word	0x44340000
 8016454:	469c4000 	.word	0x469c4000
 8016458:	446ea607 	.word	0x446ea607
 801645c:	200002b8 	.word	0x200002b8

08016460 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	4603      	mov	r3, r0
 8016468:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 801646a:	2300      	movs	r3, #0
 801646c:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 801646e:	2300      	movs	r3, #0
 8016470:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8016472:	2300      	movs	r3, #0
 8016474:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8016476:	2300      	movs	r3, #0
 8016478:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 801647a:	2001      	movs	r0, #1
 801647c:	f7f1 fa2c 	bl	80078d8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016480:	2003      	movs	r0, #3
 8016482:	f7f1 fa33 	bl	80078ec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016486:	2003      	movs	r0, #3
 8016488:	f7f1 fa58 	bl	800793c <pl_R_DriveMotor_mode>
	reset_gyro();
 801648c:	f7eb f96c 	bl	8001768 <reset_gyro>
	reset_speed();
 8016490:	f7ea fdc2 	bl	8001018 <reset_speed>
	clear_Ierror();
 8016494:	f7ee f88c 	bl	80045b0 <clear_Ierror>

	switch (main_modeR) {
 8016498:	79fb      	ldrb	r3, [r7, #7]
 801649a:	2b0f      	cmp	r3, #15
 801649c:	f200 81b0 	bhi.w	8016800 <mode_WallSensorTuning+0x3a0>
 80164a0:	a201      	add	r2, pc, #4	; (adr r2, 80164a8 <mode_WallSensorTuning+0x48>)
 80164a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164a6:	bf00      	nop
 80164a8:	080164e9 	.word	0x080164e9
 80164ac:	0801650f 	.word	0x0801650f
 80164b0:	08016527 	.word	0x08016527
 80164b4:	0801659d 	.word	0x0801659d
 80164b8:	08016613 	.word	0x08016613
 80164bc:	08016689 	.word	0x08016689
 80164c0:	080166f9 	.word	0x080166f9
 80164c4:	0801671f 	.word	0x0801671f
 80164c8:	08016745 	.word	0x08016745
 80164cc:	0801676b 	.word	0x0801676b
 80164d0:	08016801 	.word	0x08016801
 80164d4:	08016801 	.word	0x08016801
 80164d8:	08016801 	.word	0x08016801
 80164dc:	08016801 	.word	0x08016801
 80164e0:	08016801 	.word	0x08016801
 80164e4:	08016791 	.word	0x08016791
		case 0://横壁追従制御
			record_mode=16;
 80164e8:	4bd2      	ldr	r3, [pc, #840]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 80164ea:	2210      	movs	r2, #16
 80164ec:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80164ee:	2301      	movs	r3, #1
 80164f0:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 80164f2:	68b8      	ldr	r0, [r7, #8]
 80164f4:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016838 <mode_WallSensorTuning+0x3d8>
 80164f8:	eddf 1ad0 	vldr	s3, [pc, #832]	; 801683c <mode_WallSensorTuning+0x3dc>
 80164fc:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016500:	eddf 0acf 	vldr	s1, [pc, #828]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016504:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8016844 <mode_WallSensorTuning+0x3e4>
 8016508:	f7ec fd68 	bl	8002fdc <straight_table2>
		break;
 801650c:	e178      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 801650e:	2300      	movs	r3, #0
 8016510:	60fb      	str	r3, [r7, #12]
 8016512:	e004      	b.n	801651e <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8016514:	f7ed fd6c 	bl	8003ff0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	3301      	adds	r3, #1
 801651c:	60fb      	str	r3, [r7, #12]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2b14      	cmp	r3, #20
 8016522:	ddf7      	ble.n	8016514 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016524:	e16c      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016526:	4bc3      	ldr	r3, [pc, #780]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 8016528:	2207      	movs	r2, #7
 801652a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801652c:	2300      	movs	r3, #0
 801652e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016530:	2300      	movs	r3, #0
 8016532:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016534:	2300      	movs	r3, #0
 8016536:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016538:	2300      	movs	r3, #0
 801653a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 801653c:	68b8      	ldr	r0, [r7, #8]
 801653e:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016542:	eddf 1ac2 	vldr	s3, [pc, #776]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016546:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 801684c <mode_WallSensorTuning+0x3ec>
 801654a:	eddf 0abd 	vldr	s1, [pc, #756]	; 8016840 <mode_WallSensorTuning+0x3e0>
 801654e:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8016850 <mode_WallSensorTuning+0x3f0>
 8016552:	f7ec fd43 	bl	8002fdc <straight_table2>
			mode.WallCutMode=1;
 8016556:	2301      	movs	r3, #1
 8016558:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801655a:	2300      	movs	r3, #0
 801655c:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801655e:	68b8      	ldr	r0, [r7, #8]
 8016560:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016564:	eddf 1ab9 	vldr	s3, [pc, #740]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016568:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 801684c <mode_WallSensorTuning+0x3ec>
 801656c:	eddf 0ab7 	vldr	s1, [pc, #732]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016570:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016854 <mode_WallSensorTuning+0x3f4>
 8016574:	f7ec fd32 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016578:	2300      	movs	r3, #0
 801657a:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801657c:	2300      	movs	r3, #0
 801657e:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016580:	68b8      	ldr	r0, [r7, #8]
 8016582:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016586:	eddf 1ab1 	vldr	s3, [pc, #708]	; 801684c <mode_WallSensorTuning+0x3ec>
 801658a:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8016840 <mode_WallSensorTuning+0x3e0>
 801658e:	eddf 0aaf 	vldr	s1, [pc, #700]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016592:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016858 <mode_WallSensorTuning+0x3f8>
 8016596:	f7ec fd21 	bl	8002fdc <straight_table2>
		break;
 801659a:	e131      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 801659c:	4ba5      	ldr	r3, [pc, #660]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 801659e:	2208      	movs	r2, #8
 80165a0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80165a2:	2300      	movs	r3, #0
 80165a4:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80165a6:	2300      	movs	r3, #0
 80165a8:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80165aa:	2300      	movs	r3, #0
 80165ac:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80165ae:	2300      	movs	r3, #0
 80165b0:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 80165b2:	68b8      	ldr	r0, [r7, #8]
 80165b4:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8016848 <mode_WallSensorTuning+0x3e8>
 80165b8:	eddf 1aa4 	vldr	s3, [pc, #656]	; 801684c <mode_WallSensorTuning+0x3ec>
 80165bc:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 801684c <mode_WallSensorTuning+0x3ec>
 80165c0:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8016840 <mode_WallSensorTuning+0x3e0>
 80165c4:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 801685c <mode_WallSensorTuning+0x3fc>
 80165c8:	f7ec fd08 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80165cc:	2302      	movs	r3, #2
 80165ce:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80165d0:	2300      	movs	r3, #0
 80165d2:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80165d4:	68b8      	ldr	r0, [r7, #8]
 80165d6:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8016848 <mode_WallSensorTuning+0x3e8>
 80165da:	eddf 1a9c 	vldr	s3, [pc, #624]	; 801684c <mode_WallSensorTuning+0x3ec>
 80165de:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 801684c <mode_WallSensorTuning+0x3ec>
 80165e2:	eddf 0a9a 	vldr	s1, [pc, #616]	; 801684c <mode_WallSensorTuning+0x3ec>
 80165e6:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016854 <mode_WallSensorTuning+0x3f4>
 80165ea:	f7ec fcf7 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80165ee:	2300      	movs	r3, #0
 80165f0:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80165f2:	2300      	movs	r3, #0
 80165f4:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 80165f6:	68b8      	ldr	r0, [r7, #8]
 80165f8:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8016848 <mode_WallSensorTuning+0x3e8>
 80165fc:	eddf 1a93 	vldr	s3, [pc, #588]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016600:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016604:	eddf 0a91 	vldr	s1, [pc, #580]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016608:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016858 <mode_WallSensorTuning+0x3f8>
 801660c:	f7ec fce6 	bl	8002fdc <straight_table2>
		break;
 8016610:	e0f6      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8016612:	4b88      	ldr	r3, [pc, #544]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 8016614:	2208      	movs	r2, #8
 8016616:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016618:	2300      	movs	r3, #0
 801661a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801661c:	2300      	movs	r3, #0
 801661e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016620:	2300      	movs	r3, #0
 8016622:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016624:	2300      	movs	r3, #0
 8016626:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016628:	68b8      	ldr	r0, [r7, #8]
 801662a:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8016848 <mode_WallSensorTuning+0x3e8>
 801662e:	eddf 1a87 	vldr	s3, [pc, #540]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016632:	ed9f 1a86 	vldr	s2, [pc, #536]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016636:	eddf 0a82 	vldr	s1, [pc, #520]	; 8016840 <mode_WallSensorTuning+0x3e0>
 801663a:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8016860 <mode_WallSensorTuning+0x400>
 801663e:	f7ec fccd 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 8016642:	2303      	movs	r3, #3
 8016644:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016646:	2300      	movs	r3, #0
 8016648:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 801664a:	68b8      	ldr	r0, [r7, #8]
 801664c:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016650:	eddf 1a7e 	vldr	s3, [pc, #504]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016654:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016658:	eddf 0a7c 	vldr	s1, [pc, #496]	; 801684c <mode_WallSensorTuning+0x3ec>
 801665c:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8016864 <mode_WallSensorTuning+0x404>
 8016660:	f7ec fcbc 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016664:	2300      	movs	r3, #0
 8016666:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016668:	2300      	movs	r3, #0
 801666a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 801666c:	68b8      	ldr	r0, [r7, #8]
 801666e:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016672:	eddf 1a76 	vldr	s3, [pc, #472]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016676:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8016840 <mode_WallSensorTuning+0x3e0>
 801667a:	eddf 0a74 	vldr	s1, [pc, #464]	; 801684c <mode_WallSensorTuning+0x3ec>
 801667e:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8016868 <mode_WallSensorTuning+0x408>
 8016682:	f7ec fcab 	bl	8002fdc <straight_table2>
		break;
 8016686:	e0bb      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016688:	2300      	movs	r3, #0
 801668a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801668c:	2300      	movs	r3, #0
 801668e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016690:	2300      	movs	r3, #0
 8016692:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016694:	2300      	movs	r3, #0
 8016696:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016698:	68b8      	ldr	r0, [r7, #8]
 801669a:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016848 <mode_WallSensorTuning+0x3e8>
 801669e:	eddf 1a6b 	vldr	s3, [pc, #428]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166a2:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166a6:	eddf 0a66 	vldr	s1, [pc, #408]	; 8016840 <mode_WallSensorTuning+0x3e0>
 80166aa:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8016860 <mode_WallSensorTuning+0x400>
 80166ae:	f7ec fc95 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 80166b2:	2304      	movs	r3, #4
 80166b4:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80166b6:	2300      	movs	r3, #0
 80166b8:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80166ba:	68b8      	ldr	r0, [r7, #8]
 80166bc:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016848 <mode_WallSensorTuning+0x3e8>
 80166c0:	eddf 1a62 	vldr	s3, [pc, #392]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166c4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166c8:	eddf 0a60 	vldr	s1, [pc, #384]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166cc:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8016864 <mode_WallSensorTuning+0x404>
 80166d0:	f7ec fc84 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80166d4:	2300      	movs	r3, #0
 80166d6:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80166d8:	2300      	movs	r3, #0
 80166da:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80166dc:	68b8      	ldr	r0, [r7, #8]
 80166de:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016848 <mode_WallSensorTuning+0x3e8>
 80166e2:	eddf 1a5a 	vldr	s3, [pc, #360]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166e6:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8016840 <mode_WallSensorTuning+0x3e0>
 80166ea:	eddf 0a58 	vldr	s1, [pc, #352]	; 801684c <mode_WallSensorTuning+0x3ec>
 80166ee:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8016868 <mode_WallSensorTuning+0x408>
 80166f2:	f7ec fc73 	bl	8002fdc <straight_table2>
		break;
 80166f6:	e083      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 80166f8:	4b4e      	ldr	r3, [pc, #312]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 80166fa:	2209      	movs	r2, #9
 80166fc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80166fe:	2300      	movs	r3, #0
 8016700:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016702:	68b8      	ldr	r0, [r7, #8]
 8016704:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016708:	eddf 1a50 	vldr	s3, [pc, #320]	; 801684c <mode_WallSensorTuning+0x3ec>
 801670c:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016710:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016714:	ed9f 0a55 	vldr	s0, [pc, #340]	; 801686c <mode_WallSensorTuning+0x40c>
 8016718:	f7ec fc60 	bl	8002fdc <straight_table2>
		break;
 801671c:	e070      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 801671e:	4b45      	ldr	r3, [pc, #276]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 8016720:	220a      	movs	r2, #10
 8016722:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016724:	2300      	movs	r3, #0
 8016726:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016728:	68b8      	ldr	r0, [r7, #8]
 801672a:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8016848 <mode_WallSensorTuning+0x3e8>
 801672e:	eddf 1a47 	vldr	s3, [pc, #284]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016732:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016736:	eddf 0a42 	vldr	s1, [pc, #264]	; 8016840 <mode_WallSensorTuning+0x3e0>
 801673a:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 801686c <mode_WallSensorTuning+0x40c>
 801673e:	f7ec fc4d 	bl	8002fdc <straight_table2>

		break;
 8016742:	e05d      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016744:	4b3b      	ldr	r3, [pc, #236]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 8016746:	2207      	movs	r2, #7
 8016748:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801674a:	2303      	movs	r3, #3
 801674c:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801674e:	68b8      	ldr	r0, [r7, #8]
 8016750:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8016848 <mode_WallSensorTuning+0x3e8>
 8016754:	eddf 1a3d 	vldr	s3, [pc, #244]	; 801684c <mode_WallSensorTuning+0x3ec>
 8016758:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016840 <mode_WallSensorTuning+0x3e0>
 801675c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016760:	ed9f 0a42 	vldr	s0, [pc, #264]	; 801686c <mode_WallSensorTuning+0x40c>
 8016764:	f7ec fc3a 	bl	8002fdc <straight_table2>
		break;
 8016768:	e04a      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 801676a:	4b32      	ldr	r3, [pc, #200]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 801676c:	2208      	movs	r2, #8
 801676e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016770:	2303      	movs	r3, #3
 8016772:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8016774:	68b8      	ldr	r0, [r7, #8]
 8016776:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8016870 <mode_WallSensorTuning+0x410>
 801677a:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016874 <mode_WallSensorTuning+0x414>
 801677e:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016782:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8016840 <mode_WallSensorTuning+0x3e0>
 8016786:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016878 <mode_WallSensorTuning+0x418>
 801678a:	f7ec fc27 	bl	8002fdc <straight_table2>
		break;
 801678e:	e037      	b.n	8016800 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8016790:	2305      	movs	r3, #5
 8016792:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016794:	2300      	movs	r3, #0
 8016796:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016798:	2300      	movs	r3, #0
 801679a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801679c:	2300      	movs	r3, #0
 801679e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 80167a0:	68b8      	ldr	r0, [r7, #8]
 80167a2:	ed9f 2a36 	vldr	s4, [pc, #216]	; 801687c <mode_WallSensorTuning+0x41c>
 80167a6:	eddf 1a25 	vldr	s3, [pc, #148]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167aa:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167ae:	eddf 0a24 	vldr	s1, [pc, #144]	; 8016840 <mode_WallSensorTuning+0x3e0>
 80167b2:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016880 <mode_WallSensorTuning+0x420>
 80167b6:	f7ec fc11 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80167ba:	2302      	movs	r3, #2
 80167bc:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80167be:	2300      	movs	r3, #0
 80167c0:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 80167c2:	68b8      	ldr	r0, [r7, #8]
 80167c4:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 801687c <mode_WallSensorTuning+0x41c>
 80167c8:	eddf 1a1c 	vldr	s3, [pc, #112]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167cc:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167d0:	eddf 0a1a 	vldr	s1, [pc, #104]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167d4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016884 <mode_WallSensorTuning+0x424>
 80167d8:	f7ec fc00 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80167dc:	2300      	movs	r3, #0
 80167de:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80167e0:	2300      	movs	r3, #0
 80167e2:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 80167e4:	68b8      	ldr	r0, [r7, #8]
 80167e6:	ed9f 2a25 	vldr	s4, [pc, #148]	; 801687c <mode_WallSensorTuning+0x41c>
 80167ea:	eddf 1a14 	vldr	s3, [pc, #80]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167ee:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8016840 <mode_WallSensorTuning+0x3e0>
 80167f2:	eddf 0a12 	vldr	s1, [pc, #72]	; 801683c <mode_WallSensorTuning+0x3dc>
 80167f6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016888 <mode_WallSensorTuning+0x428>
 80167fa:	f7ec fbef 	bl	8002fdc <straight_table2>
		break;
 80167fe:	bf00      	nop
	}
	record_mode=0;
 8016800:	4b0c      	ldr	r3, [pc, #48]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 8016802:	2200      	movs	r2, #0
 8016804:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016806:	2003      	movs	r0, #3
 8016808:	f7f1 f898 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801680c:	2003      	movs	r0, #3
 801680e:	f7f1 f86d 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016812:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016816:	f7f1 fb8f 	bl	8007f38 <wait_ms_NoReset>
	pl_FunMotor_stop();
 801681a:	f7f1 f8f1 	bl	8007a00 <pl_FunMotor_stop>
	record_mode=0;
 801681e:	4b05      	ldr	r3, [pc, #20]	; (8016834 <mode_WallSensorTuning+0x3d4>)
 8016820:	2200      	movs	r2, #0
 8016822:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016824:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016828:	f7f1 fb86 	bl	8007f38 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801682c:	2000      	movs	r0, #0
 801682e:	f7f1 f853 	bl	80078d8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016832:	e02e      	b.n	8016892 <mode_WallSensorTuning+0x432>
 8016834:	2000edc0 	.word	0x2000edc0
 8016838:	459c4000 	.word	0x459c4000
 801683c:	43fa0000 	.word	0x43fa0000
 8016840:	00000000 	.word	0x00000000
 8016844:	44b40000 	.word	0x44b40000
 8016848:	453b8000 	.word	0x453b8000
 801684c:	43960000 	.word	0x43960000
 8016850:	431b8000 	.word	0x431b8000
 8016854:	41b40000 	.word	0x41b40000
 8016858:	42870000 	.word	0x42870000
 801685c:	42cd0000 	.word	0x42cd0000
 8016860:	4329c77b 	.word	0x4329c77b
 8016864:	41fe8ef6 	.word	0x41fe8ef6
 8016868:	42beeb39 	.word	0x42beeb39
 801686c:	43beeb39 	.word	0x43beeb39
 8016870:	461c4000 	.word	0x461c4000
 8016874:	442f0000 	.word	0x442f0000
 8016878:	4484977b 	.word	0x4484977b
 801687c:	44bb8000 	.word	0x44bb8000
 8016880:	43488000 	.word	0x43488000
 8016884:	42340000 	.word	0x42340000
 8016888:	43070000 	.word	0x43070000
		HAL_Delay(1);
 801688c:	2001      	movs	r0, #1
 801688e:	f002 fa8d 	bl	8018dac <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016892:	4b0e      	ldr	r3, [pc, #56]	; (80168cc <mode_WallSensorTuning+0x46c>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801689a:	ddf7      	ble.n	801688c <mode_WallSensorTuning+0x42c>
 801689c:	4b0b      	ldr	r3, [pc, #44]	; (80168cc <mode_WallSensorTuning+0x46c>)
 801689e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80168a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80168a6:	ddf1      	ble.n	801688c <mode_WallSensorTuning+0x42c>
 80168a8:	4b08      	ldr	r3, [pc, #32]	; (80168cc <mode_WallSensorTuning+0x46c>)
 80168aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80168ae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80168b2:	ddeb      	ble.n	801688c <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 80168b4:	2001      	movs	r0, #1
 80168b6:	f7f0 fb6b 	bl	8006f90 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80168ba:	2001      	movs	r0, #1
 80168bc:	f7f0 fb7a 	bl	8006fb4 <pl_l_blue_LED>
	record_print();
 80168c0:	f000 faf6 	bl	8016eb0 <record_print>



}
 80168c4:	bf00      	nop
 80168c6:	3710      	adds	r7, #16
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd80      	pop	{r7, pc}
 80168cc:	200002b8 	.word	0x200002b8

080168d0 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b084      	sub	sp, #16
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80168da:	2300      	movs	r3, #0
 80168dc:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 80168de:	2300      	movs	r3, #0
 80168e0:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 80168e2:	2300      	movs	r3, #0
 80168e4:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 80168e6:	2300      	movs	r3, #0
 80168e8:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80168ea:	2001      	movs	r0, #1
 80168ec:	f7f0 fff4 	bl	80078d8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80168f0:	2003      	movs	r0, #3
 80168f2:	f7f0 fffb 	bl	80078ec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80168f6:	2003      	movs	r0, #3
 80168f8:	f7f1 f820 	bl	800793c <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 80168fc:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8016c8c <mode_WallSensorTuning_fast+0x3bc>
 8016900:	f7f1 f888 	bl	8007a14 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8016904:	f7f1 f872 	bl	80079ec <pl_FunMotor_start>
	HAL_Delay(600);
 8016908:	f44f 7016 	mov.w	r0, #600	; 0x258
 801690c:	f002 fa4e 	bl	8018dac <HAL_Delay>
	reset_gyro();
 8016910:	f7ea ff2a 	bl	8001768 <reset_gyro>
	reset_speed();
 8016914:	f7ea fb80 	bl	8001018 <reset_speed>
	clear_Ierror();
 8016918:	f7ed fe4a 	bl	80045b0 <clear_Ierror>
	angle=0;
 801691c:	4bdc      	ldr	r3, [pc, #880]	; (8016c90 <mode_WallSensorTuning_fast+0x3c0>)
 801691e:	f04f 0200 	mov.w	r2, #0
 8016922:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8016924:	79fb      	ldrb	r3, [r7, #7]
 8016926:	2b0f      	cmp	r3, #15
 8016928:	f200 821b 	bhi.w	8016d62 <mode_WallSensorTuning_fast+0x492>
 801692c:	a201      	add	r2, pc, #4	; (adr r2, 8016934 <mode_WallSensorTuning_fast+0x64>)
 801692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016932:	bf00      	nop
 8016934:	08016975 	.word	0x08016975
 8016938:	080169a7 	.word	0x080169a7
 801693c:	08016a1d 	.word	0x08016a1d
 8016940:	08016a93 	.word	0x08016a93
 8016944:	08016b09 	.word	0x08016b09
 8016948:	08016b7f 	.word	0x08016b7f
 801694c:	08016bf5 	.word	0x08016bf5
 8016950:	08016c1b 	.word	0x08016c1b
 8016954:	08016c41 	.word	0x08016c41
 8016958:	08016c67 	.word	0x08016c67
 801695c:	08016cf1 	.word	0x08016cf1
 8016960:	08016d17 	.word	0x08016d17
 8016964:	08016d3d 	.word	0x08016d3d
 8016968:	08016d63 	.word	0x08016d63
 801696c:	08016d63 	.word	0x08016d63
 8016970:	08016d63 	.word	0x08016d63
		case 0://横壁追従制御
			record_mode=15;
 8016974:	4bc7      	ldr	r3, [pc, #796]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016976:	220f      	movs	r2, #15
 8016978:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801697a:	2301      	movs	r3, #1
 801697c:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 801697e:	4bc6      	ldr	r3, [pc, #792]	; (8016c98 <mode_WallSensorTuning_fast+0x3c8>)
 8016980:	2201      	movs	r2, #1
 8016982:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8016984:	68f8      	ldr	r0, [r7, #12]
 8016986:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 8016c9c <mode_WallSensorTuning_fast+0x3cc>
 801698a:	eddf 1ac5 	vldr	s3, [pc, #788]	; 8016ca0 <mode_WallSensorTuning_fast+0x3d0>
 801698e:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016992:	eddf 0ac4 	vldr	s1, [pc, #784]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016996:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 8016ca8 <mode_WallSensorTuning_fast+0x3d8>
 801699a:	f7ec fb1f 	bl	8002fdc <straight_table2>
			highspeed_mode=0;
 801699e:	4bbe      	ldr	r3, [pc, #760]	; (8016c98 <mode_WallSensorTuning_fast+0x3c8>)
 80169a0:	2200      	movs	r2, #0
 80169a2:	701a      	strb	r2, [r3, #0]
		break;
 80169a4:	e1dd      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 80169a6:	4bbb      	ldr	r3, [pc, #748]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 80169a8:	2208      	movs	r2, #8
 80169aa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80169ac:	2301      	movs	r3, #1
 80169ae:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80169b0:	2300      	movs	r3, #0
 80169b2:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80169b4:	2300      	movs	r3, #0
 80169b6:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80169b8:	2300      	movs	r3, #0
 80169ba:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 80169bc:	68f8      	ldr	r0, [r7, #12]
 80169be:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 80169c2:	eddf 1abb 	vldr	s3, [pc, #748]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 80169c6:	ed9f 1aba 	vldr	s2, [pc, #744]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 80169ca:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 80169ce:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8016cb4 <mode_WallSensorTuning_fast+0x3e4>
 80169d2:	f7ec fb03 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80169d6:	2302      	movs	r3, #2
 80169d8:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80169da:	2300      	movs	r3, #0
 80169dc:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 80169de:	68f8      	ldr	r0, [r7, #12]
 80169e0:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 80169e4:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 80169e8:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 80169ec:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 80169f0:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016cb8 <mode_WallSensorTuning_fast+0x3e8>
 80169f4:	f7ec faf2 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 80169f8:	2301      	movs	r3, #1
 80169fa:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80169fc:	2300      	movs	r3, #0
 80169fe:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 8016a00:	68f8      	ldr	r0, [r7, #12]
 8016a02:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016a06:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016a0a:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016a0e:	eddf 0aa8 	vldr	s1, [pc, #672]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016a12:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8016cbc <mode_WallSensorTuning_fast+0x3ec>
 8016a16:	f7ec fae1 	bl	8002fdc <straight_table2>
		break;
 8016a1a:	e1a2      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 8016a1c:	4b9d      	ldr	r3, [pc, #628]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016a1e:	2208      	movs	r2, #8
 8016a20:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016a22:	2301      	movs	r3, #1
 8016a24:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016a26:	2300      	movs	r3, #0
 8016a28:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 8016a32:	68f8      	ldr	r0, [r7, #12]
 8016a34:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016a38:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a3c:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a40:	eddf 0a98 	vldr	s1, [pc, #608]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016a44:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016cb4 <mode_WallSensorTuning_fast+0x3e4>
 8016a48:	f7ec fac8 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016a4c:	2302      	movs	r3, #2
 8016a4e:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016a50:	2300      	movs	r3, #0
 8016a52:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 8016a54:	68f8      	ldr	r0, [r7, #12]
 8016a56:	ed9f 2a95 	vldr	s4, [pc, #596]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016a5a:	eddf 1a99 	vldr	s3, [pc, #612]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a5e:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a62:	eddf 0a97 	vldr	s1, [pc, #604]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a66:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8016cb8 <mode_WallSensorTuning_fast+0x3e8>
 8016a6a:	f7ec fab7 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016a6e:	2301      	movs	r3, #1
 8016a70:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016a72:	2300      	movs	r3, #0
 8016a74:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 8016a76:	68f8      	ldr	r0, [r7, #12]
 8016a78:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016a7c:	eddf 1a90 	vldr	s3, [pc, #576]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a80:	ed9f 1a88 	vldr	s2, [pc, #544]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016a84:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8016cc0 <mode_WallSensorTuning_fast+0x3f0>
 8016a88:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8016cbc <mode_WallSensorTuning_fast+0x3ec>
 8016a8c:	f7ec faa6 	bl	8002fdc <straight_table2>
		break;
 8016a90:	e167      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8016a92:	4b80      	ldr	r3, [pc, #512]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016a94:	2208      	movs	r2, #8
 8016a96:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016a98:	2301      	movs	r3, #1
 8016a9a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016aa0:	2300      	movs	r3, #0
 8016aa2:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 8016aa8:	68f8      	ldr	r0, [r7, #12]
 8016aaa:	ed9f 2a86 	vldr	s4, [pc, #536]	; 8016cc4 <mode_WallSensorTuning_fast+0x3f4>
 8016aae:	eddf 1a86 	vldr	s3, [pc, #536]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016ab2:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016ab6:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016aba:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016cb4 <mode_WallSensorTuning_fast+0x3e4>
 8016abe:	f7ec fa8d 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016ac2:	2302      	movs	r3, #2
 8016ac4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 8016aca:	68f8      	ldr	r0, [r7, #12]
 8016acc:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8016cc4 <mode_WallSensorTuning_fast+0x3f4>
 8016ad0:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016ad4:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016ad8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016adc:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8016cb8 <mode_WallSensorTuning_fast+0x3e8>
 8016ae0:	f7ec fa7c 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 8016ae4:	2301      	movs	r3, #1
 8016ae6:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016ae8:	2300      	movs	r3, #0
 8016aea:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 8016aec:	68f8      	ldr	r0, [r7, #12]
 8016aee:	ed9f 2a75 	vldr	s4, [pc, #468]	; 8016cc4 <mode_WallSensorTuning_fast+0x3f4>
 8016af2:	eddf 1a75 	vldr	s3, [pc, #468]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016af6:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016afa:	eddf 0a73 	vldr	s1, [pc, #460]	; 8016cc8 <mode_WallSensorTuning_fast+0x3f8>
 8016afe:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8016cbc <mode_WallSensorTuning_fast+0x3ec>
 8016b02:	f7ec fa6b 	bl	8002fdc <straight_table2>
		break;
 8016b06:	e12c      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8016b08:	4b62      	ldr	r3, [pc, #392]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016b0a:	2208      	movs	r2, #8
 8016b0c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016b0e:	2300      	movs	r3, #0
 8016b10:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016b12:	2300      	movs	r3, #0
 8016b14:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016b16:	2300      	movs	r3, #0
 8016b18:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016b1e:	68f8      	ldr	r0, [r7, #12]
 8016b20:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016b24:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b28:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b2c:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016b30:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8016ccc <mode_WallSensorTuning_fast+0x3fc>
 8016b34:	f7ec fa52 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 8016b38:	2303      	movs	r3, #3
 8016b3a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016b40:	68f8      	ldr	r0, [r7, #12]
 8016b42:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016b46:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b4a:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b4e:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b52:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8016cd0 <mode_WallSensorTuning_fast+0x400>
 8016b56:	f7ec fa41 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016b5e:	2300      	movs	r3, #0
 8016b60:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016b62:	68f8      	ldr	r0, [r7, #12]
 8016b64:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016b68:	eddf 1a51 	vldr	s3, [pc, #324]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b6c:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016b70:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b74:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8016cd4 <mode_WallSensorTuning_fast+0x404>
 8016b78:	f7ec fa30 	bl	8002fdc <straight_table2>
		break;
 8016b7c:	e0f1      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8016b7e:	4b45      	ldr	r3, [pc, #276]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016b80:	2208      	movs	r2, #8
 8016b82:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016b84:	2300      	movs	r3, #0
 8016b86:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016b88:	2300      	movs	r3, #0
 8016b8a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016b90:	2300      	movs	r3, #0
 8016b92:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016b9a:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016b9e:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016ba2:	eddf 0a40 	vldr	s1, [pc, #256]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016ba6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8016ccc <mode_WallSensorTuning_fast+0x3fc>
 8016baa:	f7ec fa17 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 8016bae:	2304      	movs	r3, #4
 8016bb0:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016bb2:	2300      	movs	r3, #0
 8016bb4:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016bbc:	eddf 1a3c 	vldr	s3, [pc, #240]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016bc0:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016bc4:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016bc8:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8016cd0 <mode_WallSensorTuning_fast+0x400>
 8016bcc:	f7ec fa06 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016bd4:	2300      	movs	r3, #0
 8016bd6:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8016cac <mode_WallSensorTuning_fast+0x3dc>
 8016bde:	eddf 1a34 	vldr	s3, [pc, #208]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016be2:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016be6:	eddf 0a32 	vldr	s1, [pc, #200]	; 8016cb0 <mode_WallSensorTuning_fast+0x3e0>
 8016bea:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8016cd4 <mode_WallSensorTuning_fast+0x404>
 8016bee:	f7ec f9f5 	bl	8002fdc <straight_table2>
		break;
 8016bf2:	e0b6      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 8016bf4:	4b27      	ldr	r3, [pc, #156]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016bf6:	2207      	movs	r2, #7
 8016bf8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016bfe:	68f8      	ldr	r0, [r7, #12]
 8016c00:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8016cd8 <mode_WallSensorTuning_fast+0x408>
 8016c04:	eddf 1a35 	vldr	s3, [pc, #212]	; 8016cdc <mode_WallSensorTuning_fast+0x40c>
 8016c08:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c0c:	eddf 0a25 	vldr	s1, [pc, #148]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c10:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8016ce0 <mode_WallSensorTuning_fast+0x410>
 8016c14:	f7ec f9e2 	bl	8002fdc <straight_table2>
		break;
 8016c18:	e0a3      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8016c1a:	4b1e      	ldr	r3, [pc, #120]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016c1c:	2209      	movs	r2, #9
 8016c1e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016c20:	2300      	movs	r3, #0
 8016c22:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016c24:	68f8      	ldr	r0, [r7, #12]
 8016c26:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8016cd8 <mode_WallSensorTuning_fast+0x408>
 8016c2a:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8016cdc <mode_WallSensorTuning_fast+0x40c>
 8016c2e:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c32:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c36:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8016ce0 <mode_WallSensorTuning_fast+0x410>
 8016c3a:	f7ec f9cf 	bl	8002fdc <straight_table2>

		break;
 8016c3e:	e090      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016c40:	4b14      	ldr	r3, [pc, #80]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016c42:	2207      	movs	r2, #7
 8016c44:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016c46:	2303      	movs	r3, #3
 8016c48:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016c4a:	68f8      	ldr	r0, [r7, #12]
 8016c4c:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8016cd8 <mode_WallSensorTuning_fast+0x408>
 8016c50:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016ce4 <mode_WallSensorTuning_fast+0x414>
 8016c54:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c58:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c5c:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8016ce8 <mode_WallSensorTuning_fast+0x418>
 8016c60:	f7ec f9bc 	bl	8002fdc <straight_table2>
		break;
 8016c64:	e07d      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 8016c66:	4b0b      	ldr	r3, [pc, #44]	; (8016c94 <mode_WallSensorTuning_fast+0x3c4>)
 8016c68:	2208      	movs	r2, #8
 8016c6a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016c6c:	2303      	movs	r3, #3
 8016c6e:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016c70:	68f8      	ldr	r0, [r7, #12]
 8016c72:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8016cd8 <mode_WallSensorTuning_fast+0x408>
 8016c76:	eddf 1a1b 	vldr	s3, [pc, #108]	; 8016ce4 <mode_WallSensorTuning_fast+0x414>
 8016c7a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c7e:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016ca4 <mode_WallSensorTuning_fast+0x3d4>
 8016c82:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8016cec <mode_WallSensorTuning_fast+0x41c>
 8016c86:	f7ec f9a9 	bl	8002fdc <straight_table2>
		break;
 8016c8a:	e06a      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
 8016c8c:	3f7d70a4 	.word	0x3f7d70a4
 8016c90:	20000264 	.word	0x20000264
 8016c94:	2000edc0 	.word	0x2000edc0
 8016c98:	20000808 	.word	0x20000808
 8016c9c:	46bb8000 	.word	0x46bb8000
 8016ca0:	459c4000 	.word	0x459c4000
 8016ca4:	00000000 	.word	0x00000000
 8016ca8:	44e39000 	.word	0x44e39000
 8016cac:	461c4000 	.word	0x461c4000
 8016cb0:	447a0000 	.word	0x447a0000
 8016cb4:	42cd0000 	.word	0x42cd0000
 8016cb8:	41b40000 	.word	0x41b40000
 8016cbc:	42e10000 	.word	0x42e10000
 8016cc0:	44960000 	.word	0x44960000
 8016cc4:	464b2000 	.word	0x464b2000
 8016cc8:	44bb8000 	.word	0x44bb8000
 8016ccc:	4321c77b 	.word	0x4321c77b
 8016cd0:	41fe8ef6 	.word	0x41fe8ef6
 8016cd4:	42beeb39 	.word	0x42beeb39
 8016cd8:	469c4000 	.word	0x469c4000
 8016cdc:	44fa0000 	.word	0x44fa0000
 8016ce0:	445ebd17 	.word	0x445ebd17
 8016ce4:	455ac000 	.word	0x455ac000
 8016ce8:	443eeb39 	.word	0x443eeb39
 8016cec:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 8016cf0:	4b39      	ldr	r3, [pc, #228]	; (8016dd8 <mode_WallSensorTuning_fast+0x508>)
 8016cf2:	220a      	movs	r2, #10
 8016cf4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016cf6:	2303      	movs	r3, #3
 8016cf8:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016cfa:	68f8      	ldr	r0, [r7, #12]
 8016cfc:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8016ddc <mode_WallSensorTuning_fast+0x50c>
 8016d00:	eddf 1a37 	vldr	s3, [pc, #220]	; 8016de0 <mode_WallSensorTuning_fast+0x510>
 8016d04:	ed9f 1a37 	vldr	s2, [pc, #220]	; 8016de4 <mode_WallSensorTuning_fast+0x514>
 8016d08:	eddf 0a36 	vldr	s1, [pc, #216]	; 8016de4 <mode_WallSensorTuning_fast+0x514>
 8016d0c:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8016de8 <mode_WallSensorTuning_fast+0x518>
 8016d10:	f7ec f964 	bl	8002fdc <straight_table2>
		break;
 8016d14:	e025      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 8016d16:	4b30      	ldr	r3, [pc, #192]	; (8016dd8 <mode_WallSensorTuning_fast+0x508>)
 8016d18:	220b      	movs	r2, #11
 8016d1a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016d1c:	2303      	movs	r3, #3
 8016d1e:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016d20:	68f8      	ldr	r0, [r7, #12]
 8016d22:	ed9f 2a32 	vldr	s4, [pc, #200]	; 8016dec <mode_WallSensorTuning_fast+0x51c>
 8016d26:	eddf 1a32 	vldr	s3, [pc, #200]	; 8016df0 <mode_WallSensorTuning_fast+0x520>
 8016d2a:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8016de4 <mode_WallSensorTuning_fast+0x514>
 8016d2e:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8016de4 <mode_WallSensorTuning_fast+0x514>
 8016d32:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8016de8 <mode_WallSensorTuning_fast+0x518>
 8016d36:	f7ec f951 	bl	8002fdc <straight_table2>
		break;
 8016d3a:	e012      	b.n	8016d62 <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8016d3c:	4b26      	ldr	r3, [pc, #152]	; (8016dd8 <mode_WallSensorTuning_fast+0x508>)
 8016d3e:	220c      	movs	r2, #12
 8016d40:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016d42:	2303      	movs	r3, #3
 8016d44:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016d46:	68f8      	ldr	r0, [r7, #12]
 8016d48:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8016dec <mode_WallSensorTuning_fast+0x51c>
 8016d4c:	eddf 1a28 	vldr	s3, [pc, #160]	; 8016df0 <mode_WallSensorTuning_fast+0x520>
 8016d50:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016de4 <mode_WallSensorTuning_fast+0x514>
 8016d54:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016de4 <mode_WallSensorTuning_fast+0x514>
 8016d58:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016de8 <mode_WallSensorTuning_fast+0x518>
 8016d5c:	f7ec f93e 	bl	8002fdc <straight_table2>
		break;
 8016d60:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8016d62:	4b1d      	ldr	r3, [pc, #116]	; (8016dd8 <mode_WallSensorTuning_fast+0x508>)
 8016d64:	2200      	movs	r2, #0
 8016d66:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016d68:	2003      	movs	r0, #3
 8016d6a:	f7f0 fde7 	bl	800793c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016d6e:	2003      	movs	r0, #3
 8016d70:	f7f0 fdbc 	bl	80078ec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016d78:	f7f1 f8de 	bl	8007f38 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016d7c:	f7f0 fe40 	bl	8007a00 <pl_FunMotor_stop>
	record_mode=0;
 8016d80:	4b15      	ldr	r3, [pc, #84]	; (8016dd8 <mode_WallSensorTuning_fast+0x508>)
 8016d82:	2200      	movs	r2, #0
 8016d84:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016d86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016d8a:	f7f1 f8d5 	bl	8007f38 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016d8e:	2000      	movs	r0, #0
 8016d90:	f7f0 fda2 	bl	80078d8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016d94:	e002      	b.n	8016d9c <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 8016d96:	2001      	movs	r0, #1
 8016d98:	f002 f808 	bl	8018dac <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016d9c:	4b15      	ldr	r3, [pc, #84]	; (8016df4 <mode_WallSensorTuning_fast+0x524>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016da4:	ddf7      	ble.n	8016d96 <mode_WallSensorTuning_fast+0x4c6>
 8016da6:	4b13      	ldr	r3, [pc, #76]	; (8016df4 <mode_WallSensorTuning_fast+0x524>)
 8016da8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016dac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016db0:	ddf1      	ble.n	8016d96 <mode_WallSensorTuning_fast+0x4c6>
 8016db2:	4b10      	ldr	r3, [pc, #64]	; (8016df4 <mode_WallSensorTuning_fast+0x524>)
 8016db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016db8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016dbc:	ddeb      	ble.n	8016d96 <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 8016dbe:	2001      	movs	r0, #1
 8016dc0:	f7f0 f8e6 	bl	8006f90 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016dc4:	2001      	movs	r0, #1
 8016dc6:	f7f0 f8f5 	bl	8006fb4 <pl_l_blue_LED>
	record_print();
 8016dca:	f000 f871 	bl	8016eb0 <record_print>



}
 8016dce:	bf00      	nop
 8016dd0:	3710      	adds	r7, #16
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	2000edc0 	.word	0x2000edc0
 8016ddc:	469c4000 	.word	0x469c4000
 8016de0:	455ac000 	.word	0x455ac000
 8016de4:	00000000 	.word	0x00000000
 8016de8:	443eeb39 	.word	0x443eeb39
 8016dec:	466a6000 	.word	0x466a6000
 8016df0:	453b8000 	.word	0x453b8000
 8016df4:	200002b8 	.word	0x200002b8

08016df8 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016df8:	b480      	push	{r7}
 8016dfa:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016dfc:	4b06      	ldr	r3, [pc, #24]	; (8016e18 <record_reset+0x20>)
 8016dfe:	2200      	movs	r2, #0
 8016e00:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8016e02:	4b06      	ldr	r3, [pc, #24]	; (8016e1c <record_reset+0x24>)
 8016e04:	2200      	movs	r2, #0
 8016e06:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016e08:	4b05      	ldr	r3, [pc, #20]	; (8016e20 <record_reset+0x28>)
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	701a      	strb	r2, [r3, #0]
}
 8016e0e:	bf00      	nop
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr
 8016e18:	2000edc0 	.word	0x2000edc0
 8016e1c:	2000edc4 	.word	0x2000edc4
 8016e20:	2000edcc 	.word	0x2000edcc

08016e24 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016e24:	b490      	push	{r4, r7}
 8016e26:	b084      	sub	sp, #16
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016e2e:	2300      	movs	r3, #0
 8016e30:	60fb      	str	r3, [r7, #12]
 8016e32:	e013      	b.n	8016e5c <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	009b      	lsls	r3, r3, #2
 8016e38:	687a      	ldr	r2, [r7, #4]
 8016e3a:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016e3c:	4b18      	ldr	r3, [pc, #96]	; (8016ea0 <record_data+0x7c>)
 8016e3e:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016e40:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016e42:	4818      	ldr	r0, [pc, #96]	; (8016ea4 <record_data+0x80>)
 8016e44:	68f9      	ldr	r1, [r7, #12]
 8016e46:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016e4a:	fb04 f101 	mul.w	r1, r4, r1
 8016e4e:	440b      	add	r3, r1
 8016e50:	009b      	lsls	r3, r3, #2
 8016e52:	4403      	add	r3, r0
 8016e54:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016e56:	68fb      	ldr	r3, [r7, #12]
 8016e58:	3301      	adds	r3, #1
 8016e5a:	60fb      	str	r3, [r7, #12]
 8016e5c:	68fa      	ldr	r2, [r7, #12]
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	dbe7      	blt.n	8016e34 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016e64:	4b10      	ldr	r3, [pc, #64]	; (8016ea8 <record_data+0x84>)
 8016e66:	781b      	ldrb	r3, [r3, #0]
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d103      	bne.n	8016e74 <record_data+0x50>
		record_end_point = record_time;
 8016e6c:	4b0c      	ldr	r3, [pc, #48]	; (8016ea0 <record_data+0x7c>)
 8016e6e:	681b      	ldr	r3, [r3, #0]
 8016e70:	4a0e      	ldr	r2, [pc, #56]	; (8016eac <record_data+0x88>)
 8016e72:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016e74:	4b0a      	ldr	r3, [pc, #40]	; (8016ea0 <record_data+0x7c>)
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	3301      	adds	r3, #1
 8016e7a:	4a09      	ldr	r2, [pc, #36]	; (8016ea0 <record_data+0x7c>)
 8016e7c:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016e7e:	4b08      	ldr	r3, [pc, #32]	; (8016ea0 <record_data+0x7c>)
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016e86:	4293      	cmp	r3, r2
 8016e88:	dd05      	ble.n	8016e96 <record_data+0x72>
		record_time = 0;
 8016e8a:	4b05      	ldr	r3, [pc, #20]	; (8016ea0 <record_data+0x7c>)
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016e90:	4b05      	ldr	r3, [pc, #20]	; (8016ea8 <record_data+0x84>)
 8016e92:	2201      	movs	r2, #1
 8016e94:	701a      	strb	r2, [r3, #0]
	}

}
 8016e96:	bf00      	nop
 8016e98:	3710      	adds	r7, #16
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bc90      	pop	{r4, r7}
 8016e9e:	4770      	bx	lr
 8016ea0:	2000edc4 	.word	0x2000edc4
 8016ea4:	20003240 	.word	0x20003240
 8016ea8:	2000edcc 	.word	0x2000edcc
 8016eac:	2000edc8 	.word	0x2000edc8

08016eb0 <record_print>:

void record_print(void) {
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b084      	sub	sp, #16
 8016eb4:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016eb6:	4b3a      	ldr	r3, [pc, #232]	; (8016fa0 <record_print+0xf0>)
 8016eb8:	781b      	ldrb	r3, [r3, #0]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d12e      	bne.n	8016f1c <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	60fb      	str	r3, [r7, #12]
 8016ec2:	e025      	b.n	8016f10 <record_print+0x60>

			printf("%d", a);
 8016ec4:	68f9      	ldr	r1, [r7, #12]
 8016ec6:	4837      	ldr	r0, [pc, #220]	; (8016fa4 <record_print+0xf4>)
 8016ec8:	f009 fec2 	bl	8020c50 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016ecc:	2300      	movs	r3, #0
 8016ece:	607b      	str	r3, [r7, #4]
 8016ed0:	e015      	b.n	8016efe <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016ed2:	4935      	ldr	r1, [pc, #212]	; (8016fa8 <record_print+0xf8>)
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016eda:	fb03 f202 	mul.w	r2, r3, r2
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	4413      	add	r3, r2
 8016ee2:	009b      	lsls	r3, r3, #2
 8016ee4:	440b      	add	r3, r1
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f7e9 fb55 	bl	8000598 <__aeabi_f2d>
 8016eee:	4602      	mov	r2, r0
 8016ef0:	460b      	mov	r3, r1
 8016ef2:	482e      	ldr	r0, [pc, #184]	; (8016fac <record_print+0xfc>)
 8016ef4:	f009 feac 	bl	8020c50 <iprintf>
					record_count++) {
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	3301      	adds	r3, #1
 8016efc:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2b03      	cmp	r3, #3
 8016f02:	dde6      	ble.n	8016ed2 <record_print+0x22>
			}
			printf("\n");
 8016f04:	200a      	movs	r0, #10
 8016f06:	f009 febb 	bl	8020c80 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	60fb      	str	r3, [r7, #12]
 8016f10:	4b27      	ldr	r3, [pc, #156]	; (8016fb0 <record_print+0x100>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	68fa      	ldr	r2, [r7, #12]
 8016f16:	429a      	cmp	r2, r3
 8016f18:	dbd4      	blt.n	8016ec4 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016f1a:	e03c      	b.n	8016f96 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	60fb      	str	r3, [r7, #12]
 8016f20:	e034      	b.n	8016f8c <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016f22:	4b24      	ldr	r3, [pc, #144]	; (8016fb4 <record_print+0x104>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	3301      	adds	r3, #1
 8016f28:	68fa      	ldr	r2, [r7, #12]
 8016f2a:	4413      	add	r3, r2
 8016f2c:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016f2e:	68bb      	ldr	r3, [r7, #8]
 8016f30:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016f34:	4293      	cmp	r3, r2
 8016f36:	dd03      	ble.n	8016f40 <record_print+0x90>
				time_index -= max_record_time;
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016f3e:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016f40:	68f9      	ldr	r1, [r7, #12]
 8016f42:	4818      	ldr	r0, [pc, #96]	; (8016fa4 <record_print+0xf4>)
 8016f44:	f009 fe84 	bl	8020c50 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016f48:	2300      	movs	r3, #0
 8016f4a:	603b      	str	r3, [r7, #0]
 8016f4c:	e015      	b.n	8016f7a <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016f4e:	4916      	ldr	r1, [pc, #88]	; (8016fa8 <record_print+0xf8>)
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016f56:	fb03 f202 	mul.w	r2, r3, r2
 8016f5a:	68bb      	ldr	r3, [r7, #8]
 8016f5c:	4413      	add	r3, r2
 8016f5e:	009b      	lsls	r3, r3, #2
 8016f60:	440b      	add	r3, r1
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	4618      	mov	r0, r3
 8016f66:	f7e9 fb17 	bl	8000598 <__aeabi_f2d>
 8016f6a:	4602      	mov	r2, r0
 8016f6c:	460b      	mov	r3, r1
 8016f6e:	480f      	ldr	r0, [pc, #60]	; (8016fac <record_print+0xfc>)
 8016f70:	f009 fe6e 	bl	8020c50 <iprintf>
					record_count++) {
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	3301      	adds	r3, #1
 8016f78:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	2b03      	cmp	r3, #3
 8016f7e:	dde6      	ble.n	8016f4e <record_print+0x9e>
			printf("\n");
 8016f80:	200a      	movs	r0, #10
 8016f82:	f009 fe7d 	bl	8020c80 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	3301      	adds	r3, #1
 8016f8a:	60fb      	str	r3, [r7, #12]
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016f92:	4293      	cmp	r3, r2
 8016f94:	ddc5      	ble.n	8016f22 <record_print+0x72>
}
 8016f96:	bf00      	nop
 8016f98:	3710      	adds	r7, #16
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	2000edcc 	.word	0x2000edcc
 8016fa4:	08023760 	.word	0x08023760
 8016fa8:	20003240 	.word	0x20003240
 8016fac:	08023764 	.word	0x08023764
 8016fb0:	2000edc4 	.word	0x2000edc4
 8016fb4:	2000edc8 	.word	0x2000edc8

08016fb8 <interrupt_record>:

void interrupt_record(void) {
 8016fb8:	b580      	push	{r7, lr}
 8016fba:	b084      	sub	sp, #16
 8016fbc:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016fbe:	4baf      	ldr	r3, [pc, #700]	; (801727c <interrupt_record+0x2c4>)
 8016fc0:	781b      	ldrb	r3, [r3, #0]
 8016fc2:	2b01      	cmp	r3, #1
 8016fc4:	d110      	bne.n	8016fe8 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016fc6:	4bae      	ldr	r3, [pc, #696]	; (8017280 <interrupt_record+0x2c8>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016fcc:	4bad      	ldr	r3, [pc, #692]	; (8017284 <interrupt_record+0x2cc>)
 8016fce:	681b      	ldr	r3, [r3, #0]
 8016fd0:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016fd2:	4bad      	ldr	r3, [pc, #692]	; (8017288 <interrupt_record+0x2d0>)
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016fd8:	4bac      	ldr	r3, [pc, #688]	; (801728c <interrupt_record+0x2d4>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016fde:	463b      	mov	r3, r7
 8016fe0:	2104      	movs	r1, #4
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	f7ff ff1e 	bl	8016e24 <record_data>
		}
	if (record_mode == 2) {
 8016fe8:	4ba4      	ldr	r3, [pc, #656]	; (801727c <interrupt_record+0x2c4>)
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	d11b      	bne.n	8017028 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016ff0:	4ba7      	ldr	r3, [pc, #668]	; (8017290 <interrupt_record+0x2d8>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016ff6:	4ba7      	ldr	r3, [pc, #668]	; (8017294 <interrupt_record+0x2dc>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016ffc:	4ba6      	ldr	r3, [pc, #664]	; (8017298 <interrupt_record+0x2e0>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8017002:	4ba6      	ldr	r3, [pc, #664]	; (801729c <interrupt_record+0x2e4>)
 8017004:	ed93 7a00 	vldr	s14, [r3]
 8017008:	4ba5      	ldr	r3, [pc, #660]	; (80172a0 <interrupt_record+0x2e8>)
 801700a:	edd3 7a00 	vldr	s15, [r3]
 801700e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017012:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801701a:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 801701e:	463b      	mov	r3, r7
 8017020:	2104      	movs	r1, #4
 8017022:	4618      	mov	r0, r3
 8017024:	f7ff fefe 	bl	8016e24 <record_data>
		}
	if (record_mode == 3) {
 8017028:	4b94      	ldr	r3, [pc, #592]	; (801727c <interrupt_record+0x2c4>)
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	2b03      	cmp	r3, #3
 801702e:	d126      	bne.n	801707e <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8017030:	4b99      	ldr	r3, [pc, #612]	; (8017298 <interrupt_record+0x2e0>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8017036:	4b98      	ldr	r3, [pc, #608]	; (8017298 <interrupt_record+0x2e0>)
 8017038:	689b      	ldr	r3, [r3, #8]
 801703a:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 801703c:	4b97      	ldr	r3, [pc, #604]	; (801729c <interrupt_record+0x2e4>)
 801703e:	ed93 7a00 	vldr	s14, [r3]
 8017042:	4b97      	ldr	r3, [pc, #604]	; (80172a0 <interrupt_record+0x2e8>)
 8017044:	edd3 7a00 	vldr	s15, [r3]
 8017048:	ee37 7a27 	vadd.f32	s14, s14, s15
 801704c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017054:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8017058:	4b92      	ldr	r3, [pc, #584]	; (80172a4 <interrupt_record+0x2ec>)
 801705a:	ed93 7a00 	vldr	s14, [r3]
 801705e:	4b92      	ldr	r3, [pc, #584]	; (80172a8 <interrupt_record+0x2f0>)
 8017060:	edd3 7a00 	vldr	s15, [r3]
 8017064:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017068:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801706c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017070:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017074:	463b      	mov	r3, r7
 8017076:	2104      	movs	r1, #4
 8017078:	4618      	mov	r0, r3
 801707a:	f7ff fed3 	bl	8016e24 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 801707e:	4b7f      	ldr	r3, [pc, #508]	; (801727c <interrupt_record+0x2c4>)
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	2b04      	cmp	r3, #4
 8017084:	d126      	bne.n	80170d4 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8017086:	4b84      	ldr	r3, [pc, #528]	; (8017298 <interrupt_record+0x2e0>)
 8017088:	689b      	ldr	r3, [r3, #8]
 801708a:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 801708c:	4b7e      	ldr	r3, [pc, #504]	; (8017288 <interrupt_record+0x2d0>)
 801708e:	ed93 7a00 	vldr	s14, [r3]
 8017092:	4b7e      	ldr	r3, [pc, #504]	; (801728c <interrupt_record+0x2d4>)
 8017094:	edd3 7a00 	vldr	s15, [r3]
 8017098:	ee37 7a27 	vadd.f32	s14, s14, s15
 801709c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80170a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80170a4:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 80170a8:	4b80      	ldr	r3, [pc, #512]	; (80172ac <interrupt_record+0x2f4>)
 80170aa:	681b      	ldr	r3, [r3, #0]
 80170ac:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80170ae:	4b7d      	ldr	r3, [pc, #500]	; (80172a4 <interrupt_record+0x2ec>)
 80170b0:	ed93 7a00 	vldr	s14, [r3]
 80170b4:	4b7c      	ldr	r3, [pc, #496]	; (80172a8 <interrupt_record+0x2f0>)
 80170b6:	edd3 7a00 	vldr	s15, [r3]
 80170ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80170be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80170c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80170c6:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80170ca:	463b      	mov	r3, r7
 80170cc:	2104      	movs	r1, #4
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7ff fea8 	bl	8016e24 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80170d4:	4b69      	ldr	r3, [pc, #420]	; (801727c <interrupt_record+0x2c4>)
 80170d6:	781b      	ldrb	r3, [r3, #0]
 80170d8:	2b05      	cmp	r3, #5
 80170da:	d110      	bne.n	80170fe <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 80170dc:	4b6e      	ldr	r3, [pc, #440]	; (8017298 <interrupt_record+0x2e0>)
 80170de:	689b      	ldr	r3, [r3, #8]
 80170e0:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 80170e2:	4b69      	ldr	r3, [pc, #420]	; (8017288 <interrupt_record+0x2d0>)
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 80170e8:	4b68      	ldr	r3, [pc, #416]	; (801728c <interrupt_record+0x2d4>)
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 80170ee:	4b6f      	ldr	r3, [pc, #444]	; (80172ac <interrupt_record+0x2f4>)
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80170f4:	463b      	mov	r3, r7
 80170f6:	2104      	movs	r1, #4
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7ff fe93 	bl	8016e24 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 80170fe:	4b5f      	ldr	r3, [pc, #380]	; (801727c <interrupt_record+0x2c4>)
 8017100:	781b      	ldrb	r3, [r3, #0]
 8017102:	2b05      	cmp	r3, #5
 8017104:	d110      	bne.n	8017128 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8017106:	4b6a      	ldr	r3, [pc, #424]	; (80172b0 <interrupt_record+0x2f8>)
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801710c:	4b5e      	ldr	r3, [pc, #376]	; (8017288 <interrupt_record+0x2d0>)
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8017112:	4b5e      	ldr	r3, [pc, #376]	; (801728c <interrupt_record+0x2d4>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8017118:	4b64      	ldr	r3, [pc, #400]	; (80172ac <interrupt_record+0x2f4>)
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801711e:	463b      	mov	r3, r7
 8017120:	2104      	movs	r1, #4
 8017122:	4618      	mov	r0, r3
 8017124:	f7ff fe7e 	bl	8016e24 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8017128:	4b54      	ldr	r3, [pc, #336]	; (801727c <interrupt_record+0x2c4>)
 801712a:	781b      	ldrb	r3, [r3, #0]
 801712c:	2b06      	cmp	r3, #6
 801712e:	d110      	bne.n	8017152 <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8017130:	4b59      	ldr	r3, [pc, #356]	; (8017298 <interrupt_record+0x2e0>)
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8017136:	4b5f      	ldr	r3, [pc, #380]	; (80172b4 <interrupt_record+0x2fc>)
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 801713c:	4b5e      	ldr	r3, [pc, #376]	; (80172b8 <interrupt_record+0x300>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8017142:	4b5e      	ldr	r3, [pc, #376]	; (80172bc <interrupt_record+0x304>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017148:	463b      	mov	r3, r7
 801714a:	2104      	movs	r1, #4
 801714c:	4618      	mov	r0, r3
 801714e:	f7ff fe69 	bl	8016e24 <record_data>
			}
	if (record_mode == 7) {
 8017152:	4b4a      	ldr	r3, [pc, #296]	; (801727c <interrupt_record+0x2c4>)
 8017154:	781b      	ldrb	r3, [r3, #0]
 8017156:	2b07      	cmp	r3, #7
 8017158:	d125      	bne.n	80171a6 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801715a:	4b59      	ldr	r3, [pc, #356]	; (80172c0 <interrupt_record+0x308>)
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	ee07 3a90 	vmov	s15, r3
 8017162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017166:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 801716a:	4b56      	ldr	r3, [pc, #344]	; (80172c4 <interrupt_record+0x30c>)
 801716c:	681b      	ldr	r3, [r3, #0]
 801716e:	ee07 3a90 	vmov	s15, r3
 8017172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017176:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 801717a:	4b51      	ldr	r3, [pc, #324]	; (80172c0 <interrupt_record+0x308>)
 801717c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017180:	ee07 3a90 	vmov	s15, r3
 8017184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017188:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 801718c:	4b4d      	ldr	r3, [pc, #308]	; (80172c4 <interrupt_record+0x30c>)
 801718e:	691b      	ldr	r3, [r3, #16]
 8017190:	ee07 3a90 	vmov	s15, r3
 8017194:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017198:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 801719c:	463b      	mov	r3, r7
 801719e:	2104      	movs	r1, #4
 80171a0:	4618      	mov	r0, r3
 80171a2:	f7ff fe3f 	bl	8016e24 <record_data>
		}
	if (record_mode == 8) {
 80171a6:	4b35      	ldr	r3, [pc, #212]	; (801727c <interrupt_record+0x2c4>)
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	2b08      	cmp	r3, #8
 80171ac:	d125      	bne.n	80171fa <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80171ae:	4b44      	ldr	r3, [pc, #272]	; (80172c0 <interrupt_record+0x308>)
 80171b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80171b2:	ee07 3a90 	vmov	s15, r3
 80171b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171ba:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 80171be:	4b42      	ldr	r3, [pc, #264]	; (80172c8 <interrupt_record+0x310>)
 80171c0:	685b      	ldr	r3, [r3, #4]
 80171c2:	ee07 3a90 	vmov	s15, r3
 80171c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171ca:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80171ce:	4b3c      	ldr	r3, [pc, #240]	; (80172c0 <interrupt_record+0x308>)
 80171d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80171d4:	ee07 3a90 	vmov	s15, r3
 80171d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171dc:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 80171e0:	4b39      	ldr	r3, [pc, #228]	; (80172c8 <interrupt_record+0x310>)
 80171e2:	68db      	ldr	r3, [r3, #12]
 80171e4:	ee07 3a90 	vmov	s15, r3
 80171e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171ec:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80171f0:	463b      	mov	r3, r7
 80171f2:	2104      	movs	r1, #4
 80171f4:	4618      	mov	r0, r3
 80171f6:	f7ff fe15 	bl	8016e24 <record_data>
		}
	if (record_mode == 9) { //90
 80171fa:	4b20      	ldr	r3, [pc, #128]	; (801727c <interrupt_record+0x2c4>)
 80171fc:	781b      	ldrb	r3, [r3, #0]
 80171fe:	2b09      	cmp	r3, #9
 8017200:	d11b      	bne.n	801723a <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017202:	4b2f      	ldr	r3, [pc, #188]	; (80172c0 <interrupt_record+0x308>)
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	ee07 3a90 	vmov	s15, r3
 801720a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801720e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8017212:	4b2b      	ldr	r3, [pc, #172]	; (80172c0 <interrupt_record+0x308>)
 8017214:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017218:	ee07 3a90 	vmov	s15, r3
 801721c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017220:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017224:	4b29      	ldr	r3, [pc, #164]	; (80172cc <interrupt_record+0x314>)
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 801722a:	4b29      	ldr	r3, [pc, #164]	; (80172d0 <interrupt_record+0x318>)
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017230:	463b      	mov	r3, r7
 8017232:	2104      	movs	r1, #4
 8017234:	4618      	mov	r0, r3
 8017236:	f7ff fdf5 	bl	8016e24 <record_data>
		}
	if (record_mode == 10) { //90
 801723a:	4b10      	ldr	r3, [pc, #64]	; (801727c <interrupt_record+0x2c4>)
 801723c:	781b      	ldrb	r3, [r3, #0]
 801723e:	2b0a      	cmp	r3, #10
 8017240:	d148      	bne.n	80172d4 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017242:	4b1f      	ldr	r3, [pc, #124]	; (80172c0 <interrupt_record+0x308>)
 8017244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017246:	ee07 3a90 	vmov	s15, r3
 801724a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801724e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017252:	4b1b      	ldr	r3, [pc, #108]	; (80172c0 <interrupt_record+0x308>)
 8017254:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017258:	ee07 3a90 	vmov	s15, r3
 801725c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017260:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017264:	4b19      	ldr	r3, [pc, #100]	; (80172cc <interrupt_record+0x314>)
 8017266:	681b      	ldr	r3, [r3, #0]
 8017268:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 801726a:	4b19      	ldr	r3, [pc, #100]	; (80172d0 <interrupt_record+0x318>)
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017270:	463b      	mov	r3, r7
 8017272:	2104      	movs	r1, #4
 8017274:	4618      	mov	r0, r3
 8017276:	f7ff fdd5 	bl	8016e24 <record_data>
 801727a:	e02b      	b.n	80172d4 <interrupt_record+0x31c>
 801727c:	2000edc0 	.word	0x2000edc0
 8017280:	2000022c 	.word	0x2000022c
 8017284:	20000228 	.word	0x20000228
 8017288:	20000224 	.word	0x20000224
 801728c:	20000220 	.word	0x20000220
 8017290:	200004e4 	.word	0x200004e4
 8017294:	20000268 	.word	0x20000268
 8017298:	200004d8 	.word	0x200004d8
 801729c:	2000025c 	.word	0x2000025c
 80172a0:	20000258 	.word	0x20000258
 80172a4:	20000254 	.word	0x20000254
 80172a8:	20000250 	.word	0x20000250
 80172ac:	2000027c 	.word	0x2000027c
 80172b0:	2000052c 	.word	0x2000052c
 80172b4:	20000238 	.word	0x20000238
 80172b8:	2000023c 	.word	0x2000023c
 80172bc:	20000278 	.word	0x20000278
 80172c0:	200002b8 	.word	0x200002b8
 80172c4:	20000448 	.word	0x20000448
 80172c8:	2000045c 	.word	0x2000045c
 80172cc:	200005e0 	.word	0x200005e0
 80172d0:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 80172d4:	bf00      	nop
 80172d6:	3710      	adds	r7, #16
 80172d8:	46bd      	mov	sp, r7
 80172da:	bd80      	pop	{r7, pc}

080172dc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80172e0:	4b1b      	ldr	r3, [pc, #108]	; (8017350 <MX_SPI1_Init+0x74>)
 80172e2:	4a1c      	ldr	r2, [pc, #112]	; (8017354 <MX_SPI1_Init+0x78>)
 80172e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80172e6:	4b1a      	ldr	r3, [pc, #104]	; (8017350 <MX_SPI1_Init+0x74>)
 80172e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80172ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80172ee:	4b18      	ldr	r3, [pc, #96]	; (8017350 <MX_SPI1_Init+0x74>)
 80172f0:	2200      	movs	r2, #0
 80172f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80172f4:	4b16      	ldr	r3, [pc, #88]	; (8017350 <MX_SPI1_Init+0x74>)
 80172f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80172fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80172fc:	4b14      	ldr	r3, [pc, #80]	; (8017350 <MX_SPI1_Init+0x74>)
 80172fe:	2200      	movs	r2, #0
 8017300:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017302:	4b13      	ldr	r3, [pc, #76]	; (8017350 <MX_SPI1_Init+0x74>)
 8017304:	2200      	movs	r2, #0
 8017306:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017308:	4b11      	ldr	r3, [pc, #68]	; (8017350 <MX_SPI1_Init+0x74>)
 801730a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801730e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017310:	4b0f      	ldr	r3, [pc, #60]	; (8017350 <MX_SPI1_Init+0x74>)
 8017312:	2210      	movs	r2, #16
 8017314:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017316:	4b0e      	ldr	r3, [pc, #56]	; (8017350 <MX_SPI1_Init+0x74>)
 8017318:	2200      	movs	r2, #0
 801731a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801731c:	4b0c      	ldr	r3, [pc, #48]	; (8017350 <MX_SPI1_Init+0x74>)
 801731e:	2200      	movs	r2, #0
 8017320:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017322:	4b0b      	ldr	r3, [pc, #44]	; (8017350 <MX_SPI1_Init+0x74>)
 8017324:	2200      	movs	r2, #0
 8017326:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017328:	4b09      	ldr	r3, [pc, #36]	; (8017350 <MX_SPI1_Init+0x74>)
 801732a:	2207      	movs	r2, #7
 801732c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801732e:	4b08      	ldr	r3, [pc, #32]	; (8017350 <MX_SPI1_Init+0x74>)
 8017330:	2200      	movs	r2, #0
 8017332:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017334:	4b06      	ldr	r3, [pc, #24]	; (8017350 <MX_SPI1_Init+0x74>)
 8017336:	2208      	movs	r2, #8
 8017338:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801733a:	4805      	ldr	r0, [pc, #20]	; (8017350 <MX_SPI1_Init+0x74>)
 801733c:	f005 ff2a 	bl	801d194 <HAL_SPI_Init>
 8017340:	4603      	mov	r3, r0
 8017342:	2b00      	cmp	r3, #0
 8017344:	d001      	beq.n	801734a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017346:	f7f2 fd4c 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801734a:	bf00      	nop
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	2000edd0 	.word	0x2000edd0
 8017354:	40013000 	.word	0x40013000

08017358 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 801735c:	4b1b      	ldr	r3, [pc, #108]	; (80173cc <MX_SPI3_Init+0x74>)
 801735e:	4a1c      	ldr	r2, [pc, #112]	; (80173d0 <MX_SPI3_Init+0x78>)
 8017360:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017362:	4b1a      	ldr	r3, [pc, #104]	; (80173cc <MX_SPI3_Init+0x74>)
 8017364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017368:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801736a:	4b18      	ldr	r3, [pc, #96]	; (80173cc <MX_SPI3_Init+0x74>)
 801736c:	2200      	movs	r2, #0
 801736e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017370:	4b16      	ldr	r3, [pc, #88]	; (80173cc <MX_SPI3_Init+0x74>)
 8017372:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017376:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017378:	4b14      	ldr	r3, [pc, #80]	; (80173cc <MX_SPI3_Init+0x74>)
 801737a:	2200      	movs	r2, #0
 801737c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801737e:	4b13      	ldr	r3, [pc, #76]	; (80173cc <MX_SPI3_Init+0x74>)
 8017380:	2201      	movs	r2, #1
 8017382:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017384:	4b11      	ldr	r3, [pc, #68]	; (80173cc <MX_SPI3_Init+0x74>)
 8017386:	f44f 7200 	mov.w	r2, #512	; 0x200
 801738a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801738c:	4b0f      	ldr	r3, [pc, #60]	; (80173cc <MX_SPI3_Init+0x74>)
 801738e:	2208      	movs	r2, #8
 8017390:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017392:	4b0e      	ldr	r3, [pc, #56]	; (80173cc <MX_SPI3_Init+0x74>)
 8017394:	2200      	movs	r2, #0
 8017396:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017398:	4b0c      	ldr	r3, [pc, #48]	; (80173cc <MX_SPI3_Init+0x74>)
 801739a:	2200      	movs	r2, #0
 801739c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801739e:	4b0b      	ldr	r3, [pc, #44]	; (80173cc <MX_SPI3_Init+0x74>)
 80173a0:	2200      	movs	r2, #0
 80173a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80173a4:	4b09      	ldr	r3, [pc, #36]	; (80173cc <MX_SPI3_Init+0x74>)
 80173a6:	2207      	movs	r2, #7
 80173a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80173aa:	4b08      	ldr	r3, [pc, #32]	; (80173cc <MX_SPI3_Init+0x74>)
 80173ac:	2200      	movs	r2, #0
 80173ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80173b0:	4b06      	ldr	r3, [pc, #24]	; (80173cc <MX_SPI3_Init+0x74>)
 80173b2:	2200      	movs	r2, #0
 80173b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80173b6:	4805      	ldr	r0, [pc, #20]	; (80173cc <MX_SPI3_Init+0x74>)
 80173b8:	f005 feec 	bl	801d194 <HAL_SPI_Init>
 80173bc:	4603      	mov	r3, r0
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d001      	beq.n	80173c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80173c2:	f7f2 fd0e 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80173c6:	bf00      	nop
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	2000ee34 	.word	0x2000ee34
 80173d0:	40003c00 	.word	0x40003c00

080173d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b08c      	sub	sp, #48	; 0x30
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80173dc:	f107 031c 	add.w	r3, r7, #28
 80173e0:	2200      	movs	r2, #0
 80173e2:	601a      	str	r2, [r3, #0]
 80173e4:	605a      	str	r2, [r3, #4]
 80173e6:	609a      	str	r2, [r3, #8]
 80173e8:	60da      	str	r2, [r3, #12]
 80173ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	4a3d      	ldr	r2, [pc, #244]	; (80174e8 <HAL_SPI_MspInit+0x114>)
 80173f2:	4293      	cmp	r3, r2
 80173f4:	d129      	bne.n	801744a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80173f6:	4b3d      	ldr	r3, [pc, #244]	; (80174ec <HAL_SPI_MspInit+0x118>)
 80173f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80173fa:	4a3c      	ldr	r2, [pc, #240]	; (80174ec <HAL_SPI_MspInit+0x118>)
 80173fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017400:	6613      	str	r3, [r2, #96]	; 0x60
 8017402:	4b3a      	ldr	r3, [pc, #232]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017406:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801740a:	61bb      	str	r3, [r7, #24]
 801740c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801740e:	4b37      	ldr	r3, [pc, #220]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017412:	4a36      	ldr	r2, [pc, #216]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017414:	f043 0301 	orr.w	r3, r3, #1
 8017418:	64d3      	str	r3, [r2, #76]	; 0x4c
 801741a:	4b34      	ldr	r3, [pc, #208]	; (80174ec <HAL_SPI_MspInit+0x118>)
 801741c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801741e:	f003 0301 	and.w	r3, r3, #1
 8017422:	617b      	str	r3, [r7, #20]
 8017424:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8017426:	23e0      	movs	r3, #224	; 0xe0
 8017428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801742a:	2302      	movs	r3, #2
 801742c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801742e:	2300      	movs	r3, #0
 8017430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017432:	2300      	movs	r3, #0
 8017434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017436:	2305      	movs	r3, #5
 8017438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801743a:	f107 031c 	add.w	r3, r7, #28
 801743e:	4619      	mov	r1, r3
 8017440:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017444:	f004 fcec 	bl	801be20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8017448:	e049      	b.n	80174de <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	4a28      	ldr	r2, [pc, #160]	; (80174f0 <HAL_SPI_MspInit+0x11c>)
 8017450:	4293      	cmp	r3, r2
 8017452:	d144      	bne.n	80174de <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017454:	4b25      	ldr	r3, [pc, #148]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017458:	4a24      	ldr	r2, [pc, #144]	; (80174ec <HAL_SPI_MspInit+0x118>)
 801745a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801745e:	6593      	str	r3, [r2, #88]	; 0x58
 8017460:	4b22      	ldr	r3, [pc, #136]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017468:	613b      	str	r3, [r7, #16]
 801746a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801746c:	4b1f      	ldr	r3, [pc, #124]	; (80174ec <HAL_SPI_MspInit+0x118>)
 801746e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017470:	4a1e      	ldr	r2, [pc, #120]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017472:	f043 0304 	orr.w	r3, r3, #4
 8017476:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017478:	4b1c      	ldr	r3, [pc, #112]	; (80174ec <HAL_SPI_MspInit+0x118>)
 801747a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801747c:	f003 0304 	and.w	r3, r3, #4
 8017480:	60fb      	str	r3, [r7, #12]
 8017482:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017484:	4b19      	ldr	r3, [pc, #100]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017488:	4a18      	ldr	r2, [pc, #96]	; (80174ec <HAL_SPI_MspInit+0x118>)
 801748a:	f043 0302 	orr.w	r3, r3, #2
 801748e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017490:	4b16      	ldr	r3, [pc, #88]	; (80174ec <HAL_SPI_MspInit+0x118>)
 8017492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017494:	f003 0302 	and.w	r3, r3, #2
 8017498:	60bb      	str	r3, [r7, #8]
 801749a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801749c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80174a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80174a2:	2302      	movs	r3, #2
 80174a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174a6:	2300      	movs	r3, #0
 80174a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80174aa:	2300      	movs	r3, #0
 80174ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80174ae:	2306      	movs	r3, #6
 80174b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80174b2:	f107 031c 	add.w	r3, r7, #28
 80174b6:	4619      	mov	r1, r3
 80174b8:	480e      	ldr	r0, [pc, #56]	; (80174f4 <HAL_SPI_MspInit+0x120>)
 80174ba:	f004 fcb1 	bl	801be20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80174be:	2320      	movs	r3, #32
 80174c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80174c2:	2302      	movs	r3, #2
 80174c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80174c6:	2300      	movs	r3, #0
 80174c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80174ca:	2300      	movs	r3, #0
 80174cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80174ce:	2306      	movs	r3, #6
 80174d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80174d2:	f107 031c 	add.w	r3, r7, #28
 80174d6:	4619      	mov	r1, r3
 80174d8:	4807      	ldr	r0, [pc, #28]	; (80174f8 <HAL_SPI_MspInit+0x124>)
 80174da:	f004 fca1 	bl	801be20 <HAL_GPIO_Init>
}
 80174de:	bf00      	nop
 80174e0:	3730      	adds	r7, #48	; 0x30
 80174e2:	46bd      	mov	sp, r7
 80174e4:	bd80      	pop	{r7, pc}
 80174e6:	bf00      	nop
 80174e8:	40013000 	.word	0x40013000
 80174ec:	40021000 	.word	0x40021000
 80174f0:	40003c00 	.word	0x40003c00
 80174f4:	48000800 	.word	0x48000800
 80174f8:	48000400 	.word	0x48000400

080174fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b082      	sub	sp, #8
 8017500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017502:	4b0f      	ldr	r3, [pc, #60]	; (8017540 <HAL_MspInit+0x44>)
 8017504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017506:	4a0e      	ldr	r2, [pc, #56]	; (8017540 <HAL_MspInit+0x44>)
 8017508:	f043 0301 	orr.w	r3, r3, #1
 801750c:	6613      	str	r3, [r2, #96]	; 0x60
 801750e:	4b0c      	ldr	r3, [pc, #48]	; (8017540 <HAL_MspInit+0x44>)
 8017510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017512:	f003 0301 	and.w	r3, r3, #1
 8017516:	607b      	str	r3, [r7, #4]
 8017518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801751a:	4b09      	ldr	r3, [pc, #36]	; (8017540 <HAL_MspInit+0x44>)
 801751c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801751e:	4a08      	ldr	r2, [pc, #32]	; (8017540 <HAL_MspInit+0x44>)
 8017520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017524:	6593      	str	r3, [r2, #88]	; 0x58
 8017526:	4b06      	ldr	r3, [pc, #24]	; (8017540 <HAL_MspInit+0x44>)
 8017528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801752a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801752e:	603b      	str	r3, [r7, #0]
 8017530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8017532:	f004 feb3 	bl	801c29c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017536:	bf00      	nop
 8017538:	3708      	adds	r7, #8
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}
 801753e:	bf00      	nop
 8017540:	40021000 	.word	0x40021000

08017544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017544:	b480      	push	{r7}
 8017546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017548:	e7fe      	b.n	8017548 <NMI_Handler+0x4>

0801754a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801754a:	b480      	push	{r7}
 801754c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801754e:	e7fe      	b.n	801754e <HardFault_Handler+0x4>

08017550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017550:	b480      	push	{r7}
 8017552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017554:	e7fe      	b.n	8017554 <MemManage_Handler+0x4>

08017556 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017556:	b480      	push	{r7}
 8017558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801755a:	e7fe      	b.n	801755a <BusFault_Handler+0x4>

0801755c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801755c:	b480      	push	{r7}
 801755e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017560:	e7fe      	b.n	8017560 <UsageFault_Handler+0x4>

08017562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017562:	b480      	push	{r7}
 8017564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017566:	bf00      	nop
 8017568:	46bd      	mov	sp, r7
 801756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756e:	4770      	bx	lr

08017570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017570:	b480      	push	{r7}
 8017572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017574:	bf00      	nop
 8017576:	46bd      	mov	sp, r7
 8017578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757c:	4770      	bx	lr

0801757e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801757e:	b480      	push	{r7}
 8017580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017582:	bf00      	nop
 8017584:	46bd      	mov	sp, r7
 8017586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801758a:	4770      	bx	lr

0801758c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017590:	f001 fbee 	bl	8018d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017594:	bf00      	nop
 8017596:	bd80      	pop	{r7, pc}

08017598 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 801759c:	4802      	ldr	r0, [pc, #8]	; (80175a8 <DMA1_Channel1_IRQHandler+0x10>)
 801759e:	f004 f887 	bl	801b6b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80175a2:	bf00      	nop
 80175a4:	bd80      	pop	{r7, pc}
 80175a6:	bf00      	nop
 80175a8:	200007a0 	.word	0x200007a0

080175ac <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80175b0:	4802      	ldr	r0, [pc, #8]	; (80175bc <ADC1_2_IRQHandler+0x10>)
 80175b2:	f002 fb8d 	bl	8019cd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 80175b6:	bf00      	nop
 80175b8:	bd80      	pop	{r7, pc}
 80175ba:	bf00      	nop
 80175bc:	20000734 	.word	0x20000734

080175c0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80175c4:	480d      	ldr	r0, [pc, #52]	; (80175fc <TIM6_DAC_IRQHandler+0x3c>)
 80175c6:	f006 ffc5 	bl	801e554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 80175ca:	f7f0 fc19 	bl	8007e00 <interrupt_timer>
  interupt_calSensor();
 80175ce:	f7ea fb51 	bl	8001c74 <interupt_calSensor>
  ICM20602_DataUpdate();
 80175d2:	f7f0 f937 	bl	8007844 <ICM20602_DataUpdate>
  interrupt_calGyro();
 80175d6:	f7ea f95b 	bl	8001890 <interrupt_calGyro>
  AS5047_DataUpdate();
 80175da:	f7ef fdef 	bl	80071bc <AS5047_DataUpdate>
  interupt_calEncoder();
 80175de:	f7e9 fd4f 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 80175e2:	f7e9 ff5d 	bl	80014a0 <interupt_calFusion>
  interrupt_WallCut();
 80175e6:	f7ee fd53 	bl	8006090 <interrupt_WallCut>
  interupt_DriveMotor();
 80175ea:	f7ea fcb5 	bl	8001f58 <interupt_DriveMotor>

  interrupt_FailSafe();
 80175ee:	f7f2 f94f 	bl	8009890 <interrupt_FailSafe>
  interrupt_record();
 80175f2:	f7ff fce1 	bl	8016fb8 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80175f6:	bf00      	nop
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	2000ee9c 	.word	0x2000ee9c

08017600 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017600:	b480      	push	{r7}
 8017602:	af00      	add	r7, sp, #0
	return 1;
 8017604:	2301      	movs	r3, #1
}
 8017606:	4618      	mov	r0, r3
 8017608:	46bd      	mov	sp, r7
 801760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801760e:	4770      	bx	lr

08017610 <_kill>:

int _kill(int pid, int sig)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
 8017618:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801761a:	f008 fe6f 	bl	80202fc <__errno>
 801761e:	4603      	mov	r3, r0
 8017620:	2216      	movs	r2, #22
 8017622:	601a      	str	r2, [r3, #0]
	return -1;
 8017624:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017628:	4618      	mov	r0, r3
 801762a:	3708      	adds	r7, #8
 801762c:	46bd      	mov	sp, r7
 801762e:	bd80      	pop	{r7, pc}

08017630 <_exit>:

void _exit (int status)
{
 8017630:	b580      	push	{r7, lr}
 8017632:	b082      	sub	sp, #8
 8017634:	af00      	add	r7, sp, #0
 8017636:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017638:	f04f 31ff 	mov.w	r1, #4294967295
 801763c:	6878      	ldr	r0, [r7, #4]
 801763e:	f7ff ffe7 	bl	8017610 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017642:	e7fe      	b.n	8017642 <_exit+0x12>

08017644 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b086      	sub	sp, #24
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017650:	2300      	movs	r3, #0
 8017652:	617b      	str	r3, [r7, #20]
 8017654:	e00a      	b.n	801766c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017656:	f3af 8000 	nop.w
 801765a:	4601      	mov	r1, r0
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	1c5a      	adds	r2, r3, #1
 8017660:	60ba      	str	r2, [r7, #8]
 8017662:	b2ca      	uxtb	r2, r1
 8017664:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017666:	697b      	ldr	r3, [r7, #20]
 8017668:	3301      	adds	r3, #1
 801766a:	617b      	str	r3, [r7, #20]
 801766c:	697a      	ldr	r2, [r7, #20]
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	429a      	cmp	r2, r3
 8017672:	dbf0      	blt.n	8017656 <_read+0x12>
	}

return len;
 8017674:	687b      	ldr	r3, [r7, #4]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3718      	adds	r7, #24
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
	...

08017680 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b086      	sub	sp, #24
 8017684:	af00      	add	r7, sp, #0
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801768c:	2300      	movs	r3, #0
 801768e:	617b      	str	r3, [r7, #20]
 8017690:	e00a      	b.n	80176a8 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8017692:	68b9      	ldr	r1, [r7, #8]
 8017694:	1c4b      	adds	r3, r1, #1
 8017696:	60bb      	str	r3, [r7, #8]
 8017698:	2301      	movs	r3, #1
 801769a:	2201      	movs	r2, #1
 801769c:	4807      	ldr	r0, [pc, #28]	; (80176bc <_write+0x3c>)
 801769e:	f007 ffe3 	bl	801f668 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80176a2:	697b      	ldr	r3, [r7, #20]
 80176a4:	3301      	adds	r3, #1
 80176a6:	617b      	str	r3, [r7, #20]
 80176a8:	697a      	ldr	r2, [r7, #20]
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	429a      	cmp	r2, r3
 80176ae:	dbf0      	blt.n	8017692 <_write+0x12>
	}
	return len;
 80176b0:	687b      	ldr	r3, [r7, #4]
}
 80176b2:	4618      	mov	r0, r3
 80176b4:	3718      	adds	r7, #24
 80176b6:	46bd      	mov	sp, r7
 80176b8:	bd80      	pop	{r7, pc}
 80176ba:	bf00      	nop
 80176bc:	2000f878 	.word	0x2000f878

080176c0 <_close>:

int _close(int file)
{
 80176c0:	b480      	push	{r7}
 80176c2:	b083      	sub	sp, #12
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	6078      	str	r0, [r7, #4]
	return -1;
 80176c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	370c      	adds	r7, #12
 80176d0:	46bd      	mov	sp, r7
 80176d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176d6:	4770      	bx	lr

080176d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80176d8:	b480      	push	{r7}
 80176da:	b083      	sub	sp, #12
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80176e8:	605a      	str	r2, [r3, #4]
	return 0;
 80176ea:	2300      	movs	r3, #0
}
 80176ec:	4618      	mov	r0, r3
 80176ee:	370c      	adds	r7, #12
 80176f0:	46bd      	mov	sp, r7
 80176f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176f6:	4770      	bx	lr

080176f8 <_isatty>:

int _isatty(int file)
{
 80176f8:	b480      	push	{r7}
 80176fa:	b083      	sub	sp, #12
 80176fc:	af00      	add	r7, sp, #0
 80176fe:	6078      	str	r0, [r7, #4]
	return 1;
 8017700:	2301      	movs	r3, #1
}
 8017702:	4618      	mov	r0, r3
 8017704:	370c      	adds	r7, #12
 8017706:	46bd      	mov	sp, r7
 8017708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801770c:	4770      	bx	lr

0801770e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801770e:	b480      	push	{r7}
 8017710:	b085      	sub	sp, #20
 8017712:	af00      	add	r7, sp, #0
 8017714:	60f8      	str	r0, [r7, #12]
 8017716:	60b9      	str	r1, [r7, #8]
 8017718:	607a      	str	r2, [r7, #4]
	return 0;
 801771a:	2300      	movs	r3, #0
}
 801771c:	4618      	mov	r0, r3
 801771e:	3714      	adds	r7, #20
 8017720:	46bd      	mov	sp, r7
 8017722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017726:	4770      	bx	lr

08017728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b086      	sub	sp, #24
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017730:	4a14      	ldr	r2, [pc, #80]	; (8017784 <_sbrk+0x5c>)
 8017732:	4b15      	ldr	r3, [pc, #84]	; (8017788 <_sbrk+0x60>)
 8017734:	1ad3      	subs	r3, r2, r3
 8017736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017738:	697b      	ldr	r3, [r7, #20]
 801773a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801773c:	4b13      	ldr	r3, [pc, #76]	; (801778c <_sbrk+0x64>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d102      	bne.n	801774a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017744:	4b11      	ldr	r3, [pc, #68]	; (801778c <_sbrk+0x64>)
 8017746:	4a12      	ldr	r2, [pc, #72]	; (8017790 <_sbrk+0x68>)
 8017748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801774a:	4b10      	ldr	r3, [pc, #64]	; (801778c <_sbrk+0x64>)
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	4413      	add	r3, r2
 8017752:	693a      	ldr	r2, [r7, #16]
 8017754:	429a      	cmp	r2, r3
 8017756:	d207      	bcs.n	8017768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8017758:	f008 fdd0 	bl	80202fc <__errno>
 801775c:	4603      	mov	r3, r0
 801775e:	220c      	movs	r2, #12
 8017760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017762:	f04f 33ff 	mov.w	r3, #4294967295
 8017766:	e009      	b.n	801777c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8017768:	4b08      	ldr	r3, [pc, #32]	; (801778c <_sbrk+0x64>)
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801776e:	4b07      	ldr	r3, [pc, #28]	; (801778c <_sbrk+0x64>)
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	4413      	add	r3, r2
 8017776:	4a05      	ldr	r2, [pc, #20]	; (801778c <_sbrk+0x64>)
 8017778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801777a:	68fb      	ldr	r3, [r7, #12]
}
 801777c:	4618      	mov	r0, r3
 801777e:	3718      	adds	r7, #24
 8017780:	46bd      	mov	sp, r7
 8017782:	bd80      	pop	{r7, pc}
 8017784:	2001c000 	.word	0x2001c000
 8017788:	00000400 	.word	0x00000400
 801778c:	2000ee98 	.word	0x2000ee98
 8017790:	2000f920 	.word	0x2000f920

08017794 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8017794:	b480      	push	{r7}
 8017796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8017798:	4b06      	ldr	r3, [pc, #24]	; (80177b4 <SystemInit+0x20>)
 801779a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801779e:	4a05      	ldr	r2, [pc, #20]	; (80177b4 <SystemInit+0x20>)
 80177a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80177a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80177a8:	bf00      	nop
 80177aa:	46bd      	mov	sp, r7
 80177ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b0:	4770      	bx	lr
 80177b2:	bf00      	nop
 80177b4:	e000ed00 	.word	0xe000ed00

080177b8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b084      	sub	sp, #16
 80177bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80177be:	1d3b      	adds	r3, r7, #4
 80177c0:	2200      	movs	r2, #0
 80177c2:	601a      	str	r2, [r3, #0]
 80177c4:	605a      	str	r2, [r3, #4]
 80177c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80177c8:	4b14      	ldr	r3, [pc, #80]	; (801781c <MX_TIM6_Init+0x64>)
 80177ca:	4a15      	ldr	r2, [pc, #84]	; (8017820 <MX_TIM6_Init+0x68>)
 80177cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 80177ce:	4b13      	ldr	r3, [pc, #76]	; (801781c <MX_TIM6_Init+0x64>)
 80177d0:	2254      	movs	r2, #84	; 0x54
 80177d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80177d4:	4b11      	ldr	r3, [pc, #68]	; (801781c <MX_TIM6_Init+0x64>)
 80177d6:	2200      	movs	r2, #0
 80177d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80177da:	4b10      	ldr	r3, [pc, #64]	; (801781c <MX_TIM6_Init+0x64>)
 80177dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80177e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80177e2:	4b0e      	ldr	r3, [pc, #56]	; (801781c <MX_TIM6_Init+0x64>)
 80177e4:	2200      	movs	r2, #0
 80177e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80177e8:	480c      	ldr	r0, [pc, #48]	; (801781c <MX_TIM6_Init+0x64>)
 80177ea:	f006 fbeb 	bl	801dfc4 <HAL_TIM_Base_Init>
 80177ee:	4603      	mov	r3, r0
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d001      	beq.n	80177f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80177f4:	f7f2 faf5 	bl	8009de2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80177f8:	2300      	movs	r3, #0
 80177fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80177fc:	2300      	movs	r3, #0
 80177fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8017800:	1d3b      	adds	r3, r7, #4
 8017802:	4619      	mov	r1, r3
 8017804:	4805      	ldr	r0, [pc, #20]	; (801781c <MX_TIM6_Init+0x64>)
 8017806:	f007 fd59 	bl	801f2bc <HAL_TIMEx_MasterConfigSynchronization>
 801780a:	4603      	mov	r3, r0
 801780c:	2b00      	cmp	r3, #0
 801780e:	d001      	beq.n	8017814 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8017810:	f7f2 fae7 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8017814:	bf00      	nop
 8017816:	3710      	adds	r7, #16
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}
 801781c:	2000ee9c 	.word	0x2000ee9c
 8017820:	40001000 	.word	0x40001000

08017824 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8017824:	b580      	push	{r7, lr}
 8017826:	b098      	sub	sp, #96	; 0x60
 8017828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801782a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801782e:	2200      	movs	r2, #0
 8017830:	601a      	str	r2, [r3, #0]
 8017832:	605a      	str	r2, [r3, #4]
 8017834:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801783a:	2200      	movs	r2, #0
 801783c:	601a      	str	r2, [r3, #0]
 801783e:	605a      	str	r2, [r3, #4]
 8017840:	609a      	str	r2, [r3, #8]
 8017842:	60da      	str	r2, [r3, #12]
 8017844:	611a      	str	r2, [r3, #16]
 8017846:	615a      	str	r2, [r3, #20]
 8017848:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801784a:	1d3b      	adds	r3, r7, #4
 801784c:	2234      	movs	r2, #52	; 0x34
 801784e:	2100      	movs	r1, #0
 8017850:	4618      	mov	r0, r3
 8017852:	f008 fd8b 	bl	802036c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8017856:	4b41      	ldr	r3, [pc, #260]	; (801795c <MX_TIM8_Init+0x138>)
 8017858:	4a41      	ldr	r2, [pc, #260]	; (8017960 <MX_TIM8_Init+0x13c>)
 801785a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 801785c:	4b3f      	ldr	r3, [pc, #252]	; (801795c <MX_TIM8_Init+0x138>)
 801785e:	2201      	movs	r2, #1
 8017860:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017862:	4b3e      	ldr	r3, [pc, #248]	; (801795c <MX_TIM8_Init+0x138>)
 8017864:	2200      	movs	r2, #0
 8017866:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8017868:	4b3c      	ldr	r3, [pc, #240]	; (801795c <MX_TIM8_Init+0x138>)
 801786a:	f240 628f 	movw	r2, #1679	; 0x68f
 801786e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017870:	4b3a      	ldr	r3, [pc, #232]	; (801795c <MX_TIM8_Init+0x138>)
 8017872:	2200      	movs	r2, #0
 8017874:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8017876:	4b39      	ldr	r3, [pc, #228]	; (801795c <MX_TIM8_Init+0x138>)
 8017878:	2200      	movs	r2, #0
 801787a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801787c:	4b37      	ldr	r3, [pc, #220]	; (801795c <MX_TIM8_Init+0x138>)
 801787e:	2200      	movs	r2, #0
 8017880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8017882:	4836      	ldr	r0, [pc, #216]	; (801795c <MX_TIM8_Init+0x138>)
 8017884:	f006 fc66 	bl	801e154 <HAL_TIM_PWM_Init>
 8017888:	4603      	mov	r3, r0
 801788a:	2b00      	cmp	r3, #0
 801788c:	d001      	beq.n	8017892 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 801788e:	f7f2 faa8 	bl	8009de2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017892:	2300      	movs	r3, #0
 8017894:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8017896:	2300      	movs	r3, #0
 8017898:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801789a:	2300      	movs	r3, #0
 801789c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801789e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80178a2:	4619      	mov	r1, r3
 80178a4:	482d      	ldr	r0, [pc, #180]	; (801795c <MX_TIM8_Init+0x138>)
 80178a6:	f007 fd09 	bl	801f2bc <HAL_TIMEx_MasterConfigSynchronization>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d001      	beq.n	80178b4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80178b0:	f7f2 fa97 	bl	8009de2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80178b4:	2360      	movs	r3, #96	; 0x60
 80178b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 80178b8:	f240 13a3 	movw	r3, #419	; 0x1a3
 80178bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80178be:	2300      	movs	r3, #0
 80178c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80178c2:	2300      	movs	r3, #0
 80178c4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80178c6:	2300      	movs	r3, #0
 80178c8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80178ca:	2300      	movs	r3, #0
 80178cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80178ce:	2300      	movs	r3, #0
 80178d0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80178d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80178d6:	2200      	movs	r2, #0
 80178d8:	4619      	mov	r1, r3
 80178da:	4820      	ldr	r0, [pc, #128]	; (801795c <MX_TIM8_Init+0x138>)
 80178dc:	f006 ffba 	bl	801e854 <HAL_TIM_PWM_ConfigChannel>
 80178e0:	4603      	mov	r3, r0
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d001      	beq.n	80178ea <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80178e6:	f7f2 fa7c 	bl	8009de2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80178ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80178ee:	2208      	movs	r2, #8
 80178f0:	4619      	mov	r1, r3
 80178f2:	481a      	ldr	r0, [pc, #104]	; (801795c <MX_TIM8_Init+0x138>)
 80178f4:	f006 ffae 	bl	801e854 <HAL_TIM_PWM_ConfigChannel>
 80178f8:	4603      	mov	r3, r0
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d001      	beq.n	8017902 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80178fe:	f7f2 fa70 	bl	8009de2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017902:	2300      	movs	r3, #0
 8017904:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017906:	2300      	movs	r3, #0
 8017908:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801790a:	2300      	movs	r3, #0
 801790c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801790e:	2300      	movs	r3, #0
 8017910:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017912:	2300      	movs	r3, #0
 8017914:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801791a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801791c:	2300      	movs	r3, #0
 801791e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8017920:	2300      	movs	r3, #0
 8017922:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8017924:	2300      	movs	r3, #0
 8017926:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8017928:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801792c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 801792e:	2300      	movs	r3, #0
 8017930:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8017932:	2300      	movs	r3, #0
 8017934:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017936:	2300      	movs	r3, #0
 8017938:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801793a:	1d3b      	adds	r3, r7, #4
 801793c:	4619      	mov	r1, r3
 801793e:	4807      	ldr	r0, [pc, #28]	; (801795c <MX_TIM8_Init+0x138>)
 8017940:	f007 fd4a 	bl	801f3d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8017944:	4603      	mov	r3, r0
 8017946:	2b00      	cmp	r3, #0
 8017948:	d001      	beq.n	801794e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801794a:	f7f2 fa4a 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801794e:	4803      	ldr	r0, [pc, #12]	; (801795c <MX_TIM8_Init+0x138>)
 8017950:	f000 f8da 	bl	8017b08 <HAL_TIM_MspPostInit>

}
 8017954:	bf00      	nop
 8017956:	3760      	adds	r7, #96	; 0x60
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}
 801795c:	2000eee8 	.word	0x2000eee8
 8017960:	40013400 	.word	0x40013400

08017964 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b094      	sub	sp, #80	; 0x50
 8017968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801796a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801796e:	2200      	movs	r2, #0
 8017970:	601a      	str	r2, [r3, #0]
 8017972:	605a      	str	r2, [r3, #4]
 8017974:	609a      	str	r2, [r3, #8]
 8017976:	60da      	str	r2, [r3, #12]
 8017978:	611a      	str	r2, [r3, #16]
 801797a:	615a      	str	r2, [r3, #20]
 801797c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801797e:	463b      	mov	r3, r7
 8017980:	2234      	movs	r2, #52	; 0x34
 8017982:	2100      	movs	r1, #0
 8017984:	4618      	mov	r0, r3
 8017986:	f008 fcf1 	bl	802036c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 801798a:	4b30      	ldr	r3, [pc, #192]	; (8017a4c <MX_TIM16_Init+0xe8>)
 801798c:	4a30      	ldr	r2, [pc, #192]	; (8017a50 <MX_TIM16_Init+0xec>)
 801798e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8017990:	4b2e      	ldr	r3, [pc, #184]	; (8017a4c <MX_TIM16_Init+0xe8>)
 8017992:	2201      	movs	r2, #1
 8017994:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017996:	4b2d      	ldr	r3, [pc, #180]	; (8017a4c <MX_TIM16_Init+0xe8>)
 8017998:	2200      	movs	r2, #0
 801799a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 801799c:	4b2b      	ldr	r3, [pc, #172]	; (8017a4c <MX_TIM16_Init+0xe8>)
 801799e:	2264      	movs	r2, #100	; 0x64
 80179a0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80179a2:	4b2a      	ldr	r3, [pc, #168]	; (8017a4c <MX_TIM16_Init+0xe8>)
 80179a4:	2200      	movs	r2, #0
 80179a6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80179a8:	4b28      	ldr	r3, [pc, #160]	; (8017a4c <MX_TIM16_Init+0xe8>)
 80179aa:	2200      	movs	r2, #0
 80179ac:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80179ae:	4b27      	ldr	r3, [pc, #156]	; (8017a4c <MX_TIM16_Init+0xe8>)
 80179b0:	2200      	movs	r2, #0
 80179b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80179b4:	4825      	ldr	r0, [pc, #148]	; (8017a4c <MX_TIM16_Init+0xe8>)
 80179b6:	f006 fb05 	bl	801dfc4 <HAL_TIM_Base_Init>
 80179ba:	4603      	mov	r3, r0
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d001      	beq.n	80179c4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 80179c0:	f7f2 fa0f 	bl	8009de2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80179c4:	4821      	ldr	r0, [pc, #132]	; (8017a4c <MX_TIM16_Init+0xe8>)
 80179c6:	f006 fbc5 	bl	801e154 <HAL_TIM_PWM_Init>
 80179ca:	4603      	mov	r3, r0
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	d001      	beq.n	80179d4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 80179d0:	f7f2 fa07 	bl	8009de2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80179d4:	2360      	movs	r3, #96	; 0x60
 80179d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 80179d8:	231e      	movs	r3, #30
 80179da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80179dc:	2300      	movs	r3, #0
 80179de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80179e0:	2300      	movs	r3, #0
 80179e2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80179e4:	2300      	movs	r3, #0
 80179e6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80179e8:	2300      	movs	r3, #0
 80179ea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80179ec:	2300      	movs	r3, #0
 80179ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80179f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80179f4:	2200      	movs	r2, #0
 80179f6:	4619      	mov	r1, r3
 80179f8:	4814      	ldr	r0, [pc, #80]	; (8017a4c <MX_TIM16_Init+0xe8>)
 80179fa:	f006 ff2b 	bl	801e854 <HAL_TIM_PWM_ConfigChannel>
 80179fe:	4603      	mov	r3, r0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d001      	beq.n	8017a08 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8017a04:	f7f2 f9ed 	bl	8009de2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017a08:	2300      	movs	r3, #0
 8017a0a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017a10:	2300      	movs	r3, #0
 8017a12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017a14:	2300      	movs	r3, #0
 8017a16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017a18:	2300      	movs	r3, #0
 8017a1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017a1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017a20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8017a22:	2300      	movs	r3, #0
 8017a24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017a26:	2300      	movs	r3, #0
 8017a28:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8017a2a:	463b      	mov	r3, r7
 8017a2c:	4619      	mov	r1, r3
 8017a2e:	4807      	ldr	r0, [pc, #28]	; (8017a4c <MX_TIM16_Init+0xe8>)
 8017a30:	f007 fcd2 	bl	801f3d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8017a34:	4603      	mov	r3, r0
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d001      	beq.n	8017a3e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8017a3a:	f7f2 f9d2 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8017a3e:	4803      	ldr	r0, [pc, #12]	; (8017a4c <MX_TIM16_Init+0xe8>)
 8017a40:	f000 f862 	bl	8017b08 <HAL_TIM_MspPostInit>

}
 8017a44:	bf00      	nop
 8017a46:	3750      	adds	r7, #80	; 0x50
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}
 8017a4c:	2000ef34 	.word	0x2000ef34
 8017a50:	40014400 	.word	0x40014400

08017a54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8017a54:	b580      	push	{r7, lr}
 8017a56:	b084      	sub	sp, #16
 8017a58:	af00      	add	r7, sp, #0
 8017a5a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	4a16      	ldr	r2, [pc, #88]	; (8017abc <HAL_TIM_Base_MspInit+0x68>)
 8017a62:	4293      	cmp	r3, r2
 8017a64:	d114      	bne.n	8017a90 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8017a66:	4b16      	ldr	r3, [pc, #88]	; (8017ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8017a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a6a:	4a15      	ldr	r2, [pc, #84]	; (8017ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8017a6c:	f043 0310 	orr.w	r3, r3, #16
 8017a70:	6593      	str	r3, [r2, #88]	; 0x58
 8017a72:	4b13      	ldr	r3, [pc, #76]	; (8017ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8017a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a76:	f003 0310 	and.w	r3, r3, #16
 8017a7a:	60fb      	str	r3, [r7, #12]
 8017a7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8017a7e:	2200      	movs	r2, #0
 8017a80:	2103      	movs	r1, #3
 8017a82:	2036      	movs	r0, #54	; 0x36
 8017a84:	f003 fc63 	bl	801b34e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8017a88:	2036      	movs	r0, #54	; 0x36
 8017a8a:	f003 fc7a 	bl	801b382 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8017a8e:	e010      	b.n	8017ab2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	4a0b      	ldr	r2, [pc, #44]	; (8017ac4 <HAL_TIM_Base_MspInit+0x70>)
 8017a96:	4293      	cmp	r3, r2
 8017a98:	d10b      	bne.n	8017ab2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8017a9a:	4b09      	ldr	r3, [pc, #36]	; (8017ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8017a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017a9e:	4a08      	ldr	r2, [pc, #32]	; (8017ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8017aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017aa4:	6613      	str	r3, [r2, #96]	; 0x60
 8017aa6:	4b06      	ldr	r3, [pc, #24]	; (8017ac0 <HAL_TIM_Base_MspInit+0x6c>)
 8017aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017aae:	60bb      	str	r3, [r7, #8]
 8017ab0:	68bb      	ldr	r3, [r7, #8]
}
 8017ab2:	bf00      	nop
 8017ab4:	3710      	adds	r7, #16
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}
 8017aba:	bf00      	nop
 8017abc:	40001000 	.word	0x40001000
 8017ac0:	40021000 	.word	0x40021000
 8017ac4:	40014400 	.word	0x40014400

08017ac8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8017ac8:	b480      	push	{r7}
 8017aca:	b085      	sub	sp, #20
 8017acc:	af00      	add	r7, sp, #0
 8017ace:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	4a0a      	ldr	r2, [pc, #40]	; (8017b00 <HAL_TIM_PWM_MspInit+0x38>)
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	d10b      	bne.n	8017af2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8017ada:	4b0a      	ldr	r3, [pc, #40]	; (8017b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8017adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017ade:	4a09      	ldr	r2, [pc, #36]	; (8017b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8017ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8017ae6:	4b07      	ldr	r3, [pc, #28]	; (8017b04 <HAL_TIM_PWM_MspInit+0x3c>)
 8017ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017aea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017aee:	60fb      	str	r3, [r7, #12]
 8017af0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8017af2:	bf00      	nop
 8017af4:	3714      	adds	r7, #20
 8017af6:	46bd      	mov	sp, r7
 8017af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	40013400 	.word	0x40013400
 8017b04:	40021000 	.word	0x40021000

08017b08 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b08a      	sub	sp, #40	; 0x28
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017b10:	f107 0314 	add.w	r3, r7, #20
 8017b14:	2200      	movs	r2, #0
 8017b16:	601a      	str	r2, [r3, #0]
 8017b18:	605a      	str	r2, [r3, #4]
 8017b1a:	609a      	str	r2, [r3, #8]
 8017b1c:	60da      	str	r2, [r3, #12]
 8017b1e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	681b      	ldr	r3, [r3, #0]
 8017b24:	4a2b      	ldr	r2, [pc, #172]	; (8017bd4 <HAL_TIM_MspPostInit+0xcc>)
 8017b26:	4293      	cmp	r3, r2
 8017b28:	d12d      	bne.n	8017b86 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017b2a:	4b2b      	ldr	r3, [pc, #172]	; (8017bd8 <HAL_TIM_MspPostInit+0xd0>)
 8017b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b2e:	4a2a      	ldr	r2, [pc, #168]	; (8017bd8 <HAL_TIM_MspPostInit+0xd0>)
 8017b30:	f043 0302 	orr.w	r3, r3, #2
 8017b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b36:	4b28      	ldr	r3, [pc, #160]	; (8017bd8 <HAL_TIM_MspPostInit+0xd0>)
 8017b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b3a:	f003 0302 	and.w	r3, r3, #2
 8017b3e:	613b      	str	r3, [r7, #16]
 8017b40:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8017b42:	2340      	movs	r3, #64	; 0x40
 8017b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b46:	2302      	movs	r3, #2
 8017b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b4e:	2300      	movs	r3, #0
 8017b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8017b52:	2305      	movs	r3, #5
 8017b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017b56:	f107 0314 	add.w	r3, r7, #20
 8017b5a:	4619      	mov	r1, r3
 8017b5c:	481f      	ldr	r0, [pc, #124]	; (8017bdc <HAL_TIM_MspPostInit+0xd4>)
 8017b5e:	f004 f95f 	bl	801be20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8017b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017b68:	2302      	movs	r3, #2
 8017b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017b70:	2300      	movs	r3, #0
 8017b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8017b74:	230a      	movs	r3, #10
 8017b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8017b78:	f107 0314 	add.w	r3, r7, #20
 8017b7c:	4619      	mov	r1, r3
 8017b7e:	4817      	ldr	r0, [pc, #92]	; (8017bdc <HAL_TIM_MspPostInit+0xd4>)
 8017b80:	f004 f94e 	bl	801be20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8017b84:	e022      	b.n	8017bcc <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	4a15      	ldr	r2, [pc, #84]	; (8017be0 <HAL_TIM_MspPostInit+0xd8>)
 8017b8c:	4293      	cmp	r3, r2
 8017b8e:	d11d      	bne.n	8017bcc <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017b90:	4b11      	ldr	r3, [pc, #68]	; (8017bd8 <HAL_TIM_MspPostInit+0xd0>)
 8017b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b94:	4a10      	ldr	r2, [pc, #64]	; (8017bd8 <HAL_TIM_MspPostInit+0xd0>)
 8017b96:	f043 0301 	orr.w	r3, r3, #1
 8017b9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017b9c:	4b0e      	ldr	r3, [pc, #56]	; (8017bd8 <HAL_TIM_MspPostInit+0xd0>)
 8017b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ba0:	f003 0301 	and.w	r3, r3, #1
 8017ba4:	60fb      	str	r3, [r7, #12]
 8017ba6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8017ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017bae:	2302      	movs	r3, #2
 8017bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8017bba:	2301      	movs	r3, #1
 8017bbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8017bbe:	f107 0314 	add.w	r3, r7, #20
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017bc8:	f004 f92a 	bl	801be20 <HAL_GPIO_Init>
}
 8017bcc:	bf00      	nop
 8017bce:	3728      	adds	r7, #40	; 0x28
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}
 8017bd4:	40013400 	.word	0x40013400
 8017bd8:	40021000 	.word	0x40021000
 8017bdc:	48000400 	.word	0x48000400
 8017be0:	40014400 	.word	0x40014400

08017be4 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8017be4:	b084      	sub	sp, #16
 8017be6:	b480      	push	{r7}
 8017be8:	b083      	sub	sp, #12
 8017bea:	af00      	add	r7, sp, #0
 8017bec:	f107 0c10 	add.w	ip, r7, #16
 8017bf0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8017bf4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017bf8:	f113 0f02 	cmn.w	r3, #2
 8017bfc:	d102      	bne.n	8017c04 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8017bfe:	69bb      	ldr	r3, [r7, #24]
 8017c00:	607b      	str	r3, [r7, #4]
 8017c02:	e083      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8017c04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c08:	f113 0f03 	cmn.w	r3, #3
 8017c0c:	d102      	bne.n	8017c14 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8017c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c10:	607b      	str	r3, [r7, #4]
 8017c12:	e07b      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8017c14:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c18:	f113 0f04 	cmn.w	r3, #4
 8017c1c:	d102      	bne.n	8017c24 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8017c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017c20:	607b      	str	r3, [r7, #4]
 8017c22:	e073      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8017c24:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c28:	f113 0f05 	cmn.w	r3, #5
 8017c2c:	d102      	bne.n	8017c34 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8017c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017c30:	607b      	str	r3, [r7, #4]
 8017c32:	e06b      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017c34:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c38:	f113 0f06 	cmn.w	r3, #6
 8017c3c:	d102      	bne.n	8017c44 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8017c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017c40:	607b      	str	r3, [r7, #4]
 8017c42:	e063      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017c44:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c48:	f113 0f07 	cmn.w	r3, #7
 8017c4c:	d102      	bne.n	8017c54 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8017c4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017c50:	607b      	str	r3, [r7, #4]
 8017c52:	e05b      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017c54:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c58:	f113 0f08 	cmn.w	r3, #8
 8017c5c:	d103      	bne.n	8017c66 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8017c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017c62:	607b      	str	r3, [r7, #4]
 8017c64:	e052      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017c66:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c6a:	f113 0f09 	cmn.w	r3, #9
 8017c6e:	d103      	bne.n	8017c78 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017c74:	607b      	str	r3, [r7, #4]
 8017c76:	e049      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017c78:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c7c:	f113 0f0a 	cmn.w	r3, #10
 8017c80:	d103      	bne.n	8017c8a <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017c86:	607b      	str	r3, [r7, #4]
 8017c88:	e040      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8017c8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017c8e:	f113 0f0b 	cmn.w	r3, #11
 8017c92:	d103      	bne.n	8017c9c <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017c94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017c98:	607b      	str	r3, [r7, #4]
 8017c9a:	e037      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017c9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ca0:	f113 0f0c 	cmn.w	r3, #12
 8017ca4:	d103      	bne.n	8017cae <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8017ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017caa:	607b      	str	r3, [r7, #4]
 8017cac:	e02e      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017cae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017cb2:	f113 0f0d 	cmn.w	r3, #13
 8017cb6:	d103      	bne.n	8017cc0 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017cbc:	607b      	str	r3, [r7, #4]
 8017cbe:	e025      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017cc0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017cc4:	f113 0f0e 	cmn.w	r3, #14
 8017cc8:	d103      	bne.n	8017cd2 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8017cca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017cce:	607b      	str	r3, [r7, #4]
 8017cd0:	e01c      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8017cd2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017cd6:	f113 0f0f 	cmn.w	r3, #15
 8017cda:	d103      	bne.n	8017ce4 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8017cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017ce0:	607b      	str	r3, [r7, #4]
 8017ce2:	e013      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8017ce4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ce8:	f113 0f10 	cmn.w	r3, #16
 8017cec:	d103      	bne.n	8017cf6 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017cee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017cf2:	607b      	str	r3, [r7, #4]
 8017cf4:	e00a      	b.n	8017d0c <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8017cf6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017cfa:	f113 0f11 	cmn.w	r3, #17
 8017cfe:	d103      	bne.n	8017d08 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017d00:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017d04:	607b      	str	r3, [r7, #4]
 8017d06:	e001      	b.n	8017d0c <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8017d08:	697b      	ldr	r3, [r7, #20]
 8017d0a:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	ee07 3a90 	vmov	s15, r3
}
 8017d12:	eeb0 0a67 	vmov.f32	s0, s15
 8017d16:	370c      	adds	r7, #12
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	b004      	add	sp, #16
 8017d20:	4770      	bx	lr
	...

08017d24 <input_parameter>:

void input_parameter(void) {
 8017d24:	b480      	push	{r7}
 8017d26:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8017d28:	4b8f      	ldr	r3, [pc, #572]	; (8017f68 <input_parameter+0x244>)
 8017d2a:	4a90      	ldr	r2, [pc, #576]	; (8017f6c <input_parameter+0x248>)
 8017d2c:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8017d2e:	4b8e      	ldr	r3, [pc, #568]	; (8017f68 <input_parameter+0x244>)
 8017d30:	4a8e      	ldr	r2, [pc, #568]	; (8017f6c <input_parameter+0x248>)
 8017d32:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017d34:	4b8c      	ldr	r3, [pc, #560]	; (8017f68 <input_parameter+0x244>)
 8017d36:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8017d38:	4a8b      	ldr	r2, [pc, #556]	; (8017f68 <input_parameter+0x244>)
 8017d3a:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8017d3c:	4b8a      	ldr	r3, [pc, #552]	; (8017f68 <input_parameter+0x244>)
 8017d3e:	4a8c      	ldr	r2, [pc, #560]	; (8017f70 <input_parameter+0x24c>)
 8017d40:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8017d42:	4b89      	ldr	r3, [pc, #548]	; (8017f68 <input_parameter+0x244>)
 8017d44:	4a8b      	ldr	r2, [pc, #556]	; (8017f74 <input_parameter+0x250>)
 8017d46:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 8017d48:	4b87      	ldr	r3, [pc, #540]	; (8017f68 <input_parameter+0x244>)
 8017d4a:	4a8b      	ldr	r2, [pc, #556]	; (8017f78 <input_parameter+0x254>)
 8017d4c:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017d4e:	4b86      	ldr	r3, [pc, #536]	; (8017f68 <input_parameter+0x244>)
 8017d50:	4a8a      	ldr	r2, [pc, #552]	; (8017f7c <input_parameter+0x258>)
 8017d52:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017d54:	4b84      	ldr	r3, [pc, #528]	; (8017f68 <input_parameter+0x244>)
 8017d56:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017d58:	4a83      	ldr	r2, [pc, #524]	; (8017f68 <input_parameter+0x244>)
 8017d5a:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8017d5c:	4b82      	ldr	r3, [pc, #520]	; (8017f68 <input_parameter+0x244>)
 8017d5e:	4a84      	ldr	r2, [pc, #528]	; (8017f70 <input_parameter+0x24c>)
 8017d60:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8017d62:	4b81      	ldr	r3, [pc, #516]	; (8017f68 <input_parameter+0x244>)
 8017d64:	4a83      	ldr	r2, [pc, #524]	; (8017f74 <input_parameter+0x250>)
 8017d66:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 8017d68:	4b7f      	ldr	r3, [pc, #508]	; (8017f68 <input_parameter+0x244>)
 8017d6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017d6e:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017d70:	4b7d      	ldr	r3, [pc, #500]	; (8017f68 <input_parameter+0x244>)
 8017d72:	4a83      	ldr	r2, [pc, #524]	; (8017f80 <input_parameter+0x25c>)
 8017d74:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8017d76:	4b83      	ldr	r3, [pc, #524]	; (8017f84 <input_parameter+0x260>)
 8017d78:	4a83      	ldr	r2, [pc, #524]	; (8017f88 <input_parameter+0x264>)
 8017d7a:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017d7c:	4b81      	ldr	r3, [pc, #516]	; (8017f84 <input_parameter+0x260>)
 8017d7e:	4a82      	ldr	r2, [pc, #520]	; (8017f88 <input_parameter+0x264>)
 8017d80:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017d82:	4b80      	ldr	r3, [pc, #512]	; (8017f84 <input_parameter+0x260>)
 8017d84:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017d86:	4a7f      	ldr	r2, [pc, #508]	; (8017f84 <input_parameter+0x260>)
 8017d88:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017d8a:	4b7e      	ldr	r3, [pc, #504]	; (8017f84 <input_parameter+0x260>)
 8017d8c:	4a7f      	ldr	r2, [pc, #508]	; (8017f8c <input_parameter+0x268>)
 8017d8e:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017d90:	4b7c      	ldr	r3, [pc, #496]	; (8017f84 <input_parameter+0x260>)
 8017d92:	4a7f      	ldr	r2, [pc, #508]	; (8017f90 <input_parameter+0x26c>)
 8017d94:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017d96:	4b7b      	ldr	r3, [pc, #492]	; (8017f84 <input_parameter+0x260>)
 8017d98:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017d9c:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017d9e:	4b79      	ldr	r3, [pc, #484]	; (8017f84 <input_parameter+0x260>)
 8017da0:	4a76      	ldr	r2, [pc, #472]	; (8017f7c <input_parameter+0x258>)
 8017da2:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017da4:	4b77      	ldr	r3, [pc, #476]	; (8017f84 <input_parameter+0x260>)
 8017da6:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017da8:	4a76      	ldr	r2, [pc, #472]	; (8017f84 <input_parameter+0x260>)
 8017daa:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017dac:	4b75      	ldr	r3, [pc, #468]	; (8017f84 <input_parameter+0x260>)
 8017dae:	4a79      	ldr	r2, [pc, #484]	; (8017f94 <input_parameter+0x270>)
 8017db0:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017db2:	4b74      	ldr	r3, [pc, #464]	; (8017f84 <input_parameter+0x260>)
 8017db4:	4a76      	ldr	r2, [pc, #472]	; (8017f90 <input_parameter+0x26c>)
 8017db6:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017db8:	4b72      	ldr	r3, [pc, #456]	; (8017f84 <input_parameter+0x260>)
 8017dba:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017dbe:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017dc0:	4b70      	ldr	r3, [pc, #448]	; (8017f84 <input_parameter+0x260>)
 8017dc2:	4a6f      	ldr	r2, [pc, #444]	; (8017f80 <input_parameter+0x25c>)
 8017dc4:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017dc6:	4b68      	ldr	r3, [pc, #416]	; (8017f68 <input_parameter+0x244>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017dca:	4a73      	ldr	r2, [pc, #460]	; (8017f98 <input_parameter+0x274>)
 8017dcc:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017dce:	4b66      	ldr	r3, [pc, #408]	; (8017f68 <input_parameter+0x244>)
 8017dd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8017dd4:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017f9c <input_parameter+0x278>
 8017dd8:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017ddc:	4b6e      	ldr	r3, [pc, #440]	; (8017f98 <input_parameter+0x274>)
 8017dde:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017de2:	4b61      	ldr	r3, [pc, #388]	; (8017f68 <input_parameter+0x244>)
 8017de4:	689b      	ldr	r3, [r3, #8]
 8017de6:	4a6c      	ldr	r2, [pc, #432]	; (8017f98 <input_parameter+0x274>)
 8017de8:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017dea:	4b5f      	ldr	r3, [pc, #380]	; (8017f68 <input_parameter+0x244>)
 8017dec:	695b      	ldr	r3, [r3, #20]
 8017dee:	4a6a      	ldr	r2, [pc, #424]	; (8017f98 <input_parameter+0x274>)
 8017df0:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017df2:	4b5d      	ldr	r3, [pc, #372]	; (8017f68 <input_parameter+0x244>)
 8017df4:	699b      	ldr	r3, [r3, #24]
 8017df6:	4a68      	ldr	r2, [pc, #416]	; (8017f98 <input_parameter+0x274>)
 8017df8:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017dfa:	4b5b      	ldr	r3, [pc, #364]	; (8017f68 <input_parameter+0x244>)
 8017dfc:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017e00:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017e04:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017e08:	4b63      	ldr	r3, [pc, #396]	; (8017f98 <input_parameter+0x274>)
 8017e0a:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017e0e:	4b56      	ldr	r3, [pc, #344]	; (8017f68 <input_parameter+0x244>)
 8017e10:	691b      	ldr	r3, [r3, #16]
 8017e12:	4a61      	ldr	r2, [pc, #388]	; (8017f98 <input_parameter+0x274>)
 8017e14:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017e16:	4b54      	ldr	r3, [pc, #336]	; (8017f68 <input_parameter+0x244>)
 8017e18:	69db      	ldr	r3, [r3, #28]
 8017e1a:	4a5f      	ldr	r2, [pc, #380]	; (8017f98 <input_parameter+0x274>)
 8017e1c:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017e1e:	4b52      	ldr	r3, [pc, #328]	; (8017f68 <input_parameter+0x244>)
 8017e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017e22:	4a5d      	ldr	r2, [pc, #372]	; (8017f98 <input_parameter+0x274>)
 8017e24:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8017e26:	4b50      	ldr	r3, [pc, #320]	; (8017f68 <input_parameter+0x244>)
 8017e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e2a:	4a5b      	ldr	r2, [pc, #364]	; (8017f98 <input_parameter+0x274>)
 8017e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017e2e:	4b4e      	ldr	r3, [pc, #312]	; (8017f68 <input_parameter+0x244>)
 8017e30:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8017e34:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017e38:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017e3c:	4b56      	ldr	r3, [pc, #344]	; (8017f98 <input_parameter+0x274>)
 8017e3e:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017e42:	4b49      	ldr	r3, [pc, #292]	; (8017f68 <input_parameter+0x244>)
 8017e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017e46:	4a54      	ldr	r2, [pc, #336]	; (8017f98 <input_parameter+0x274>)
 8017e48:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017e4a:	4b53      	ldr	r3, [pc, #332]	; (8017f98 <input_parameter+0x274>)
 8017e4c:	685b      	ldr	r3, [r3, #4]
 8017e4e:	4a52      	ldr	r2, [pc, #328]	; (8017f98 <input_parameter+0x274>)
 8017e50:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017e52:	4b51      	ldr	r3, [pc, #324]	; (8017f98 <input_parameter+0x274>)
 8017e54:	4a52      	ldr	r2, [pc, #328]	; (8017fa0 <input_parameter+0x27c>)
 8017e56:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8017e58:	4b4f      	ldr	r3, [pc, #316]	; (8017f98 <input_parameter+0x274>)
 8017e5a:	4a52      	ldr	r2, [pc, #328]	; (8017fa4 <input_parameter+0x280>)
 8017e5c:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017e5e:	4b4e      	ldr	r3, [pc, #312]	; (8017f98 <input_parameter+0x274>)
 8017e60:	4a51      	ldr	r2, [pc, #324]	; (8017fa8 <input_parameter+0x284>)
 8017e62:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8017e64:	4b4c      	ldr	r3, [pc, #304]	; (8017f98 <input_parameter+0x274>)
 8017e66:	4a51      	ldr	r2, [pc, #324]	; (8017fac <input_parameter+0x288>)
 8017e68:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017e6a:	4b4b      	ldr	r3, [pc, #300]	; (8017f98 <input_parameter+0x274>)
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	4a4a      	ldr	r2, [pc, #296]	; (8017f98 <input_parameter+0x274>)
 8017e70:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017e72:	4b49      	ldr	r3, [pc, #292]	; (8017f98 <input_parameter+0x274>)
 8017e74:	4a4a      	ldr	r2, [pc, #296]	; (8017fa0 <input_parameter+0x27c>)
 8017e76:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017e78:	4b47      	ldr	r3, [pc, #284]	; (8017f98 <input_parameter+0x274>)
 8017e7a:	4a4a      	ldr	r2, [pc, #296]	; (8017fa4 <input_parameter+0x280>)
 8017e7c:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017e7e:	4b46      	ldr	r3, [pc, #280]	; (8017f98 <input_parameter+0x274>)
 8017e80:	4a4b      	ldr	r2, [pc, #300]	; (8017fb0 <input_parameter+0x28c>)
 8017e82:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017e84:	4b44      	ldr	r3, [pc, #272]	; (8017f98 <input_parameter+0x274>)
 8017e86:	4a4b      	ldr	r2, [pc, #300]	; (8017fb4 <input_parameter+0x290>)
 8017e88:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017e8a:	4b43      	ldr	r3, [pc, #268]	; (8017f98 <input_parameter+0x274>)
 8017e8c:	685b      	ldr	r3, [r3, #4]
 8017e8e:	4a42      	ldr	r2, [pc, #264]	; (8017f98 <input_parameter+0x274>)
 8017e90:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017e92:	4b41      	ldr	r3, [pc, #260]	; (8017f98 <input_parameter+0x274>)
 8017e94:	4a48      	ldr	r2, [pc, #288]	; (8017fb8 <input_parameter+0x294>)
 8017e96:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017e98:	4b3f      	ldr	r3, [pc, #252]	; (8017f98 <input_parameter+0x274>)
 8017e9a:	4a48      	ldr	r2, [pc, #288]	; (8017fbc <input_parameter+0x298>)
 8017e9c:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017e9e:	4b3e      	ldr	r3, [pc, #248]	; (8017f98 <input_parameter+0x274>)
 8017ea0:	4a47      	ldr	r2, [pc, #284]	; (8017fc0 <input_parameter+0x29c>)
 8017ea2:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017ea4:	4b3c      	ldr	r3, [pc, #240]	; (8017f98 <input_parameter+0x274>)
 8017ea6:	4a47      	ldr	r2, [pc, #284]	; (8017fc4 <input_parameter+0x2a0>)
 8017ea8:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017eaa:	4b3b      	ldr	r3, [pc, #236]	; (8017f98 <input_parameter+0x274>)
 8017eac:	685b      	ldr	r3, [r3, #4]
 8017eae:	4a3a      	ldr	r2, [pc, #232]	; (8017f98 <input_parameter+0x274>)
 8017eb0:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017eb2:	4b39      	ldr	r3, [pc, #228]	; (8017f98 <input_parameter+0x274>)
 8017eb4:	4a44      	ldr	r2, [pc, #272]	; (8017fc8 <input_parameter+0x2a4>)
 8017eb6:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017eb8:	4b37      	ldr	r3, [pc, #220]	; (8017f98 <input_parameter+0x274>)
 8017eba:	4a40      	ldr	r2, [pc, #256]	; (8017fbc <input_parameter+0x298>)
 8017ebc:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017ebe:	4b36      	ldr	r3, [pc, #216]	; (8017f98 <input_parameter+0x274>)
 8017ec0:	4a42      	ldr	r2, [pc, #264]	; (8017fcc <input_parameter+0x2a8>)
 8017ec2:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017ec4:	4b34      	ldr	r3, [pc, #208]	; (8017f98 <input_parameter+0x274>)
 8017ec6:	4a42      	ldr	r2, [pc, #264]	; (8017fd0 <input_parameter+0x2ac>)
 8017ec8:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017eca:	4b33      	ldr	r3, [pc, #204]	; (8017f98 <input_parameter+0x274>)
 8017ecc:	685b      	ldr	r3, [r3, #4]
 8017ece:	4a32      	ldr	r2, [pc, #200]	; (8017f98 <input_parameter+0x274>)
 8017ed0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017ed4:	4b30      	ldr	r3, [pc, #192]	; (8017f98 <input_parameter+0x274>)
 8017ed6:	4a32      	ldr	r2, [pc, #200]	; (8017fa0 <input_parameter+0x27c>)
 8017ed8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017edc:	4b2e      	ldr	r3, [pc, #184]	; (8017f98 <input_parameter+0x274>)
 8017ede:	4a31      	ldr	r2, [pc, #196]	; (8017fa4 <input_parameter+0x280>)
 8017ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017ee4:	4b2c      	ldr	r3, [pc, #176]	; (8017f98 <input_parameter+0x274>)
 8017ee6:	4a3b      	ldr	r2, [pc, #236]	; (8017fd4 <input_parameter+0x2b0>)
 8017ee8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017eec:	4b2a      	ldr	r3, [pc, #168]	; (8017f98 <input_parameter+0x274>)
 8017eee:	4a3a      	ldr	r2, [pc, #232]	; (8017fd8 <input_parameter+0x2b4>)
 8017ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017ef4:	4b28      	ldr	r3, [pc, #160]	; (8017f98 <input_parameter+0x274>)
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	4a27      	ldr	r2, [pc, #156]	; (8017f98 <input_parameter+0x274>)
 8017efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017efe:	4b26      	ldr	r3, [pc, #152]	; (8017f98 <input_parameter+0x274>)
 8017f00:	4a27      	ldr	r2, [pc, #156]	; (8017fa0 <input_parameter+0x27c>)
 8017f02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017f06:	4b24      	ldr	r3, [pc, #144]	; (8017f98 <input_parameter+0x274>)
 8017f08:	4a26      	ldr	r2, [pc, #152]	; (8017fa4 <input_parameter+0x280>)
 8017f0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017f0e:	4b22      	ldr	r3, [pc, #136]	; (8017f98 <input_parameter+0x274>)
 8017f10:	4a32      	ldr	r2, [pc, #200]	; (8017fdc <input_parameter+0x2b8>)
 8017f12:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017f16:	4b20      	ldr	r3, [pc, #128]	; (8017f98 <input_parameter+0x274>)
 8017f18:	4a31      	ldr	r2, [pc, #196]	; (8017fe0 <input_parameter+0x2bc>)
 8017f1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017f1e:	4b1e      	ldr	r3, [pc, #120]	; (8017f98 <input_parameter+0x274>)
 8017f20:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017f22:	4a1d      	ldr	r2, [pc, #116]	; (8017f98 <input_parameter+0x274>)
 8017f24:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017f28:	4b1b      	ldr	r3, [pc, #108]	; (8017f98 <input_parameter+0x274>)
 8017f2a:	4a2e      	ldr	r2, [pc, #184]	; (8017fe4 <input_parameter+0x2c0>)
 8017f2c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017f30:	4b19      	ldr	r3, [pc, #100]	; (8017f98 <input_parameter+0x274>)
 8017f32:	4a22      	ldr	r2, [pc, #136]	; (8017fbc <input_parameter+0x298>)
 8017f34:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017f38:	4b17      	ldr	r3, [pc, #92]	; (8017f98 <input_parameter+0x274>)
 8017f3a:	4a2b      	ldr	r2, [pc, #172]	; (8017fe8 <input_parameter+0x2c4>)
 8017f3c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017f40:	4b15      	ldr	r3, [pc, #84]	; (8017f98 <input_parameter+0x274>)
 8017f42:	4a2a      	ldr	r2, [pc, #168]	; (8017fec <input_parameter+0x2c8>)
 8017f44:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017f48:	4b13      	ldr	r3, [pc, #76]	; (8017f98 <input_parameter+0x274>)
 8017f4a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017f4c:	4a12      	ldr	r2, [pc, #72]	; (8017f98 <input_parameter+0x274>)
 8017f4e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017f52:	4b11      	ldr	r3, [pc, #68]	; (8017f98 <input_parameter+0x274>)
 8017f54:	4a23      	ldr	r2, [pc, #140]	; (8017fe4 <input_parameter+0x2c0>)
 8017f56:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017f5a:	4b0f      	ldr	r3, [pc, #60]	; (8017f98 <input_parameter+0x274>)
 8017f5c:	4a17      	ldr	r2, [pc, #92]	; (8017fbc <input_parameter+0x298>)
 8017f5e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017f62:	4b0d      	ldr	r3, [pc, #52]	; (8017f98 <input_parameter+0x274>)
 8017f64:	e044      	b.n	8017ff0 <input_parameter+0x2cc>
 8017f66:	bf00      	nop
 8017f68:	2000ef80 	.word	0x2000ef80
 8017f6c:	43960000 	.word	0x43960000
 8017f70:	44750000 	.word	0x44750000
 8017f74:	464b2000 	.word	0x464b2000
 8017f78:	40400000 	.word	0x40400000
 8017f7c:	41a00000 	.word	0x41a00000
 8017f80:	41980000 	.word	0x41980000
 8017f84:	2000f0c8 	.word	0x2000f0c8
 8017f88:	437a0000 	.word	0x437a0000
 8017f8c:	444f8000 	.word	0x444f8000
 8017f90:	460ca000 	.word	0x460ca000
 8017f94:	44368000 	.word	0x44368000
 8017f98:	2000f210 	.word	0x2000f210
 8017f9c:	43480000 	.word	0x43480000
 8017fa0:	44160000 	.word	0x44160000
 8017fa4:	461c4000 	.word	0x461c4000
 8017fa8:	42980000 	.word	0x42980000
 8017fac:	42d60000 	.word	0x42d60000
 8017fb0:	429a0000 	.word	0x429a0000
 8017fb4:	42ce0000 	.word	0x42ce0000
 8017fb8:	43d70000 	.word	0x43d70000
 8017fbc:	45fa0000 	.word	0x45fa0000
 8017fc0:	42820000 	.word	0x42820000
 8017fc4:	42a00000 	.word	0x42a00000
 8017fc8:	43e10000 	.word	0x43e10000
 8017fcc:	42700000 	.word	0x42700000
 8017fd0:	428e0000 	.word	0x428e0000
 8017fd4:	41d80000 	.word	0x41d80000
 8017fd8:	42b20000 	.word	0x42b20000
 8017fdc:	42040000 	.word	0x42040000
 8017fe0:	42b40000 	.word	0x42b40000
 8017fe4:	44188000 	.word	0x44188000
 8017fe8:	42860000 	.word	0x42860000
 8017fec:	42920000 	.word	0x42920000
 8017ff0:	4a99      	ldr	r2, [pc, #612]	; (8018258 <input_parameter+0x534>)
 8017ff2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017ff6:	4b99      	ldr	r3, [pc, #612]	; (801825c <input_parameter+0x538>)
 8017ff8:	4a99      	ldr	r2, [pc, #612]	; (8018260 <input_parameter+0x53c>)
 8017ffa:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ffe:	4b97      	ldr	r3, [pc, #604]	; (801825c <input_parameter+0x538>)
 8018000:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8018002:	4a96      	ldr	r2, [pc, #600]	; (801825c <input_parameter+0x538>)
 8018004:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8018008:	4b94      	ldr	r3, [pc, #592]	; (801825c <input_parameter+0x538>)
 801800a:	4a96      	ldr	r2, [pc, #600]	; (8018264 <input_parameter+0x540>)
 801800c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8018010:	4b92      	ldr	r3, [pc, #584]	; (801825c <input_parameter+0x538>)
 8018012:	4a95      	ldr	r2, [pc, #596]	; (8018268 <input_parameter+0x544>)
 8018014:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8018018:	4b90      	ldr	r3, [pc, #576]	; (801825c <input_parameter+0x538>)
 801801a:	4a94      	ldr	r2, [pc, #592]	; (801826c <input_parameter+0x548>)
 801801c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8018020:	4b8e      	ldr	r3, [pc, #568]	; (801825c <input_parameter+0x538>)
 8018022:	4a92      	ldr	r2, [pc, #584]	; (801826c <input_parameter+0x548>)
 8018024:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018028:	4b8c      	ldr	r3, [pc, #560]	; (801825c <input_parameter+0x538>)
 801802a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 801802c:	4a8b      	ldr	r2, [pc, #556]	; (801825c <input_parameter+0x538>)
 801802e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8018032:	4b8a      	ldr	r3, [pc, #552]	; (801825c <input_parameter+0x538>)
 8018034:	4a8b      	ldr	r2, [pc, #556]	; (8018264 <input_parameter+0x540>)
 8018036:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 801803a:	4b88      	ldr	r3, [pc, #544]	; (801825c <input_parameter+0x538>)
 801803c:	4a8a      	ldr	r2, [pc, #552]	; (8018268 <input_parameter+0x544>)
 801803e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8018042:	4b86      	ldr	r3, [pc, #536]	; (801825c <input_parameter+0x538>)
 8018044:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8018048:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 801804c:	4b83      	ldr	r3, [pc, #524]	; (801825c <input_parameter+0x538>)
 801804e:	4a88      	ldr	r2, [pc, #544]	; (8018270 <input_parameter+0x54c>)
 8018050:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018054:	4b81      	ldr	r3, [pc, #516]	; (801825c <input_parameter+0x538>)
 8018056:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8018058:	4a80      	ldr	r2, [pc, #512]	; (801825c <input_parameter+0x538>)
 801805a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 801805e:	4b7f      	ldr	r3, [pc, #508]	; (801825c <input_parameter+0x538>)
 8018060:	4a84      	ldr	r2, [pc, #528]	; (8018274 <input_parameter+0x550>)
 8018062:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8018066:	4b7d      	ldr	r3, [pc, #500]	; (801825c <input_parameter+0x538>)
 8018068:	4a83      	ldr	r2, [pc, #524]	; (8018278 <input_parameter+0x554>)
 801806a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 801806e:	4b7b      	ldr	r3, [pc, #492]	; (801825c <input_parameter+0x538>)
 8018070:	4a82      	ldr	r2, [pc, #520]	; (801827c <input_parameter+0x558>)
 8018072:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8018076:	4b79      	ldr	r3, [pc, #484]	; (801825c <input_parameter+0x538>)
 8018078:	4a81      	ldr	r2, [pc, #516]	; (8018280 <input_parameter+0x55c>)
 801807a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801807e:	4b77      	ldr	r3, [pc, #476]	; (801825c <input_parameter+0x538>)
 8018080:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8018082:	4a76      	ldr	r2, [pc, #472]	; (801825c <input_parameter+0x538>)
 8018084:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8018088:	4b74      	ldr	r3, [pc, #464]	; (801825c <input_parameter+0x538>)
 801808a:	4a7a      	ldr	r2, [pc, #488]	; (8018274 <input_parameter+0x550>)
 801808c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8018090:	4b72      	ldr	r3, [pc, #456]	; (801825c <input_parameter+0x538>)
 8018092:	4a79      	ldr	r2, [pc, #484]	; (8018278 <input_parameter+0x554>)
 8018094:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8018098:	4b70      	ldr	r3, [pc, #448]	; (801825c <input_parameter+0x538>)
 801809a:	4a78      	ldr	r2, [pc, #480]	; (801827c <input_parameter+0x558>)
 801809c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 80180a0:	4b6e      	ldr	r3, [pc, #440]	; (801825c <input_parameter+0x538>)
 80180a2:	4a78      	ldr	r2, [pc, #480]	; (8018284 <input_parameter+0x560>)
 80180a4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 80180a8:	4b6c      	ldr	r3, [pc, #432]	; (801825c <input_parameter+0x538>)
 80180aa:	685b      	ldr	r3, [r3, #4]
 80180ac:	4a6b      	ldr	r2, [pc, #428]	; (801825c <input_parameter+0x538>)
 80180ae:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 80180b2:	4b6a      	ldr	r3, [pc, #424]	; (801825c <input_parameter+0x538>)
 80180b4:	4a74      	ldr	r2, [pc, #464]	; (8018288 <input_parameter+0x564>)
 80180b6:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 80180ba:	4b68      	ldr	r3, [pc, #416]	; (801825c <input_parameter+0x538>)
 80180bc:	4a73      	ldr	r2, [pc, #460]	; (801828c <input_parameter+0x568>)
 80180be:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 80180c2:	4b66      	ldr	r3, [pc, #408]	; (801825c <input_parameter+0x538>)
 80180c4:	4a72      	ldr	r2, [pc, #456]	; (8018290 <input_parameter+0x56c>)
 80180c6:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 80180ca:	4b64      	ldr	r3, [pc, #400]	; (801825c <input_parameter+0x538>)
 80180cc:	4a71      	ldr	r2, [pc, #452]	; (8018294 <input_parameter+0x570>)
 80180ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80180d2:	4b62      	ldr	r3, [pc, #392]	; (801825c <input_parameter+0x538>)
 80180d4:	685b      	ldr	r3, [r3, #4]
 80180d6:	4a61      	ldr	r2, [pc, #388]	; (801825c <input_parameter+0x538>)
 80180d8:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 80180dc:	4b5f      	ldr	r3, [pc, #380]	; (801825c <input_parameter+0x538>)
 80180de:	4a6a      	ldr	r2, [pc, #424]	; (8018288 <input_parameter+0x564>)
 80180e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 80180e4:	4b5d      	ldr	r3, [pc, #372]	; (801825c <input_parameter+0x538>)
 80180e6:	4a69      	ldr	r2, [pc, #420]	; (801828c <input_parameter+0x568>)
 80180e8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 80180ec:	4b5b      	ldr	r3, [pc, #364]	; (801825c <input_parameter+0x538>)
 80180ee:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80180f2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 80180f6:	4b59      	ldr	r3, [pc, #356]	; (801825c <input_parameter+0x538>)
 80180f8:	4a67      	ldr	r2, [pc, #412]	; (8018298 <input_parameter+0x574>)
 80180fa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 80180fe:	4b67      	ldr	r3, [pc, #412]	; (801829c <input_parameter+0x578>)
 8018100:	4a58      	ldr	r2, [pc, #352]	; (8018264 <input_parameter+0x540>)
 8018102:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8018104:	4b65      	ldr	r3, [pc, #404]	; (801829c <input_parameter+0x578>)
 8018106:	4a57      	ldr	r2, [pc, #348]	; (8018264 <input_parameter+0x540>)
 8018108:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 801810a:	4b64      	ldr	r3, [pc, #400]	; (801829c <input_parameter+0x578>)
 801810c:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 801810e:	4a63      	ldr	r2, [pc, #396]	; (801829c <input_parameter+0x578>)
 8018110:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8018112:	4b62      	ldr	r3, [pc, #392]	; (801829c <input_parameter+0x578>)
 8018114:	4a62      	ldr	r2, [pc, #392]	; (80182a0 <input_parameter+0x57c>)
 8018116:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8018118:	4b60      	ldr	r3, [pc, #384]	; (801829c <input_parameter+0x578>)
 801811a:	4a62      	ldr	r2, [pc, #392]	; (80182a4 <input_parameter+0x580>)
 801811c:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 801811e:	4b5f      	ldr	r3, [pc, #380]	; (801829c <input_parameter+0x578>)
 8018120:	4a61      	ldr	r2, [pc, #388]	; (80182a8 <input_parameter+0x584>)
 8018122:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8018124:	4b5d      	ldr	r3, [pc, #372]	; (801829c <input_parameter+0x578>)
 8018126:	4a61      	ldr	r2, [pc, #388]	; (80182ac <input_parameter+0x588>)
 8018128:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 801812a:	4b5c      	ldr	r3, [pc, #368]	; (801829c <input_parameter+0x578>)
 801812c:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 801812e:	4a5b      	ldr	r2, [pc, #364]	; (801829c <input_parameter+0x578>)
 8018130:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8018132:	4b5a      	ldr	r3, [pc, #360]	; (801829c <input_parameter+0x578>)
 8018134:	4a5a      	ldr	r2, [pc, #360]	; (80182a0 <input_parameter+0x57c>)
 8018136:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8018138:	4b58      	ldr	r3, [pc, #352]	; (801829c <input_parameter+0x578>)
 801813a:	4a5a      	ldr	r2, [pc, #360]	; (80182a4 <input_parameter+0x580>)
 801813c:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 801813e:	4b57      	ldr	r3, [pc, #348]	; (801829c <input_parameter+0x578>)
 8018140:	4a59      	ldr	r2, [pc, #356]	; (80182a8 <input_parameter+0x584>)
 8018142:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8018144:	4b55      	ldr	r3, [pc, #340]	; (801829c <input_parameter+0x578>)
 8018146:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801814a:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 801814c:	4b53      	ldr	r3, [pc, #332]	; (801829c <input_parameter+0x578>)
 801814e:	4a45      	ldr	r2, [pc, #276]	; (8018264 <input_parameter+0x540>)
 8018150:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8018152:	4b52      	ldr	r3, [pc, #328]	; (801829c <input_parameter+0x578>)
 8018154:	4a56      	ldr	r2, [pc, #344]	; (80182b0 <input_parameter+0x58c>)
 8018156:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8018158:	4b50      	ldr	r3, [pc, #320]	; (801829c <input_parameter+0x578>)
 801815a:	4a56      	ldr	r2, [pc, #344]	; (80182b4 <input_parameter+0x590>)
 801815c:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 801815e:	4b4f      	ldr	r3, [pc, #316]	; (801829c <input_parameter+0x578>)
 8018160:	4a55      	ldr	r2, [pc, #340]	; (80182b8 <input_parameter+0x594>)
 8018162:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8018164:	4b4d      	ldr	r3, [pc, #308]	; (801829c <input_parameter+0x578>)
 8018166:	4a54      	ldr	r2, [pc, #336]	; (80182b8 <input_parameter+0x594>)
 8018168:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 801816a:	4b4c      	ldr	r3, [pc, #304]	; (801829c <input_parameter+0x578>)
 801816c:	4a3d      	ldr	r2, [pc, #244]	; (8018264 <input_parameter+0x540>)
 801816e:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8018170:	4b4a      	ldr	r3, [pc, #296]	; (801829c <input_parameter+0x578>)
 8018172:	4a4f      	ldr	r2, [pc, #316]	; (80182b0 <input_parameter+0x58c>)
 8018174:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8018176:	4b49      	ldr	r3, [pc, #292]	; (801829c <input_parameter+0x578>)
 8018178:	4a4e      	ldr	r2, [pc, #312]	; (80182b4 <input_parameter+0x590>)
 801817a:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 801817c:	4b47      	ldr	r3, [pc, #284]	; (801829c <input_parameter+0x578>)
 801817e:	4a4e      	ldr	r2, [pc, #312]	; (80182b8 <input_parameter+0x594>)
 8018180:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018182:	4b46      	ldr	r3, [pc, #280]	; (801829c <input_parameter+0x578>)
 8018184:	4a42      	ldr	r2, [pc, #264]	; (8018290 <input_parameter+0x56c>)
 8018186:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8018188:	4b44      	ldr	r3, [pc, #272]	; (801829c <input_parameter+0x578>)
 801818a:	4a36      	ldr	r2, [pc, #216]	; (8018264 <input_parameter+0x540>)
 801818c:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 801818e:	4b43      	ldr	r3, [pc, #268]	; (801829c <input_parameter+0x578>)
 8018190:	4a4a      	ldr	r2, [pc, #296]	; (80182bc <input_parameter+0x598>)
 8018192:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8018194:	4b41      	ldr	r3, [pc, #260]	; (801829c <input_parameter+0x578>)
 8018196:	4a4a      	ldr	r2, [pc, #296]	; (80182c0 <input_parameter+0x59c>)
 8018198:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 801819a:	4b40      	ldr	r3, [pc, #256]	; (801829c <input_parameter+0x578>)
 801819c:	4a49      	ldr	r2, [pc, #292]	; (80182c4 <input_parameter+0x5a0>)
 801819e:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 80181a0:	4b3e      	ldr	r3, [pc, #248]	; (801829c <input_parameter+0x578>)
 80181a2:	4a49      	ldr	r2, [pc, #292]	; (80182c8 <input_parameter+0x5a4>)
 80181a4:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 80181a6:	4b3d      	ldr	r3, [pc, #244]	; (801829c <input_parameter+0x578>)
 80181a8:	4a2e      	ldr	r2, [pc, #184]	; (8018264 <input_parameter+0x540>)
 80181aa:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 80181ac:	4b3b      	ldr	r3, [pc, #236]	; (801829c <input_parameter+0x578>)
 80181ae:	4a47      	ldr	r2, [pc, #284]	; (80182cc <input_parameter+0x5a8>)
 80181b0:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 80181b2:	4b3a      	ldr	r3, [pc, #232]	; (801829c <input_parameter+0x578>)
 80181b4:	4a42      	ldr	r2, [pc, #264]	; (80182c0 <input_parameter+0x59c>)
 80181b6:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 80181b8:	4b38      	ldr	r3, [pc, #224]	; (801829c <input_parameter+0x578>)
 80181ba:	4a42      	ldr	r2, [pc, #264]	; (80182c4 <input_parameter+0x5a0>)
 80181bc:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 80181be:	4b37      	ldr	r3, [pc, #220]	; (801829c <input_parameter+0x578>)
 80181c0:	4a43      	ldr	r2, [pc, #268]	; (80182d0 <input_parameter+0x5ac>)
 80181c2:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 80181c4:	4b35      	ldr	r3, [pc, #212]	; (801829c <input_parameter+0x578>)
 80181c6:	4a27      	ldr	r2, [pc, #156]	; (8018264 <input_parameter+0x540>)
 80181c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 80181cc:	4b33      	ldr	r3, [pc, #204]	; (801829c <input_parameter+0x578>)
 80181ce:	4a41      	ldr	r2, [pc, #260]	; (80182d4 <input_parameter+0x5b0>)
 80181d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 80181d4:	4b31      	ldr	r3, [pc, #196]	; (801829c <input_parameter+0x578>)
 80181d6:	4a40      	ldr	r2, [pc, #256]	; (80182d8 <input_parameter+0x5b4>)
 80181d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 80181dc:	4b2f      	ldr	r3, [pc, #188]	; (801829c <input_parameter+0x578>)
 80181de:	4a3f      	ldr	r2, [pc, #252]	; (80182dc <input_parameter+0x5b8>)
 80181e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 80181e4:	4b2d      	ldr	r3, [pc, #180]	; (801829c <input_parameter+0x578>)
 80181e6:	4a3e      	ldr	r2, [pc, #248]	; (80182e0 <input_parameter+0x5bc>)
 80181e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 80181ec:	4b2b      	ldr	r3, [pc, #172]	; (801829c <input_parameter+0x578>)
 80181ee:	4a1d      	ldr	r2, [pc, #116]	; (8018264 <input_parameter+0x540>)
 80181f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 80181f4:	4b29      	ldr	r3, [pc, #164]	; (801829c <input_parameter+0x578>)
 80181f6:	4a3b      	ldr	r2, [pc, #236]	; (80182e4 <input_parameter+0x5c0>)
 80181f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 80181fc:	4b27      	ldr	r3, [pc, #156]	; (801829c <input_parameter+0x578>)
 80181fe:	4a36      	ldr	r2, [pc, #216]	; (80182d8 <input_parameter+0x5b4>)
 8018200:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018204:	4b25      	ldr	r3, [pc, #148]	; (801829c <input_parameter+0x578>)
 8018206:	4a38      	ldr	r2, [pc, #224]	; (80182e8 <input_parameter+0x5c4>)
 8018208:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 801820c:	4b23      	ldr	r3, [pc, #140]	; (801829c <input_parameter+0x578>)
 801820e:	4a37      	ldr	r2, [pc, #220]	; (80182ec <input_parameter+0x5c8>)
 8018210:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8018214:	4b21      	ldr	r3, [pc, #132]	; (801829c <input_parameter+0x578>)
 8018216:	4a13      	ldr	r2, [pc, #76]	; (8018264 <input_parameter+0x540>)
 8018218:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 801821c:	4b1f      	ldr	r3, [pc, #124]	; (801829c <input_parameter+0x578>)
 801821e:	4a34      	ldr	r2, [pc, #208]	; (80182f0 <input_parameter+0x5cc>)
 8018220:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8018224:	4b1d      	ldr	r3, [pc, #116]	; (801829c <input_parameter+0x578>)
 8018226:	4a26      	ldr	r2, [pc, #152]	; (80182c0 <input_parameter+0x59c>)
 8018228:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 801822c:	4b1b      	ldr	r3, [pc, #108]	; (801829c <input_parameter+0x578>)
 801822e:	4a31      	ldr	r2, [pc, #196]	; (80182f4 <input_parameter+0x5d0>)
 8018230:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018234:	4b19      	ldr	r3, [pc, #100]	; (801829c <input_parameter+0x578>)
 8018236:	4a2d      	ldr	r2, [pc, #180]	; (80182ec <input_parameter+0x5c8>)
 8018238:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 801823c:	4b17      	ldr	r3, [pc, #92]	; (801829c <input_parameter+0x578>)
 801823e:	4a09      	ldr	r2, [pc, #36]	; (8018264 <input_parameter+0x540>)
 8018240:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8018244:	4b15      	ldr	r3, [pc, #84]	; (801829c <input_parameter+0x578>)
 8018246:	4a2c      	ldr	r2, [pc, #176]	; (80182f8 <input_parameter+0x5d4>)
 8018248:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 801824c:	4b13      	ldr	r3, [pc, #76]	; (801829c <input_parameter+0x578>)
 801824e:	4a1c      	ldr	r2, [pc, #112]	; (80182c0 <input_parameter+0x59c>)
 8018250:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8018254:	e052      	b.n	80182fc <input_parameter+0x5d8>
 8018256:	bf00      	nop
 8018258:	42860000 	.word	0x42860000
 801825c:	2000f210 	.word	0x2000f210
 8018260:	42920000 	.word	0x42920000
 8018264:	44160000 	.word	0x44160000
 8018268:	461c4000 	.word	0x461c4000
 801826c:	42640000 	.word	0x42640000
 8018270:	42500000 	.word	0x42500000
 8018274:	44250000 	.word	0x44250000
 8018278:	45fa0000 	.word	0x45fa0000
 801827c:	425c0000 	.word	0x425c0000
 8018280:	42c80000 	.word	0x42c80000
 8018284:	42ce0000 	.word	0x42ce0000
 8018288:	442f0000 	.word	0x442f0000
 801828c:	462be000 	.word	0x462be000
 8018290:	420c0000 	.word	0x420c0000
 8018294:	42600000 	.word	0x42600000
 8018298:	42700000 	.word	0x42700000
 801829c:	2000f358 	.word	0x2000f358
 80182a0:	44898000 	.word	0x44898000
 80182a4:	476a6000 	.word	0x476a6000
 80182a8:	40a00000 	.word	0x40a00000
 80182ac:	41e00000 	.word	0x41e00000
 80182b0:	446d8000 	.word	0x446d8000
 80182b4:	466a6000 	.word	0x466a6000
 80182b8:	41f80000 	.word	0x41f80000
 80182bc:	44520000 	.word	0x44520000
 80182c0:	465ac000 	.word	0x465ac000
 80182c4:	40e00000 	.word	0x40e00000
 80182c8:	41a00000 	.word	0x41a00000
 80182cc:	444d0000 	.word	0x444d0000
 80182d0:	41900000 	.word	0x41900000
 80182d4:	444f8000 	.word	0x444f8000
 80182d8:	463b8000 	.word	0x463b8000
 80182dc:	41500000 	.word	0x41500000
 80182e0:	42180000 	.word	0x42180000
 80182e4:	44608000 	.word	0x44608000
 80182e8:	41400000 	.word	0x41400000
 80182ec:	42100000 	.word	0x42100000
 80182f0:	446b0000 	.word	0x446b0000
 80182f4:	41180000 	.word	0x41180000
 80182f8:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 80182fc:	4b9d      	ldr	r3, [pc, #628]	; (8018574 <input_parameter+0x850>)
 80182fe:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018302:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018306:	4b9b      	ldr	r3, [pc, #620]	; (8018574 <input_parameter+0x850>)
 8018308:	4a9b      	ldr	r2, [pc, #620]	; (8018578 <input_parameter+0x854>)
 801830a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 801830e:	4b99      	ldr	r3, [pc, #612]	; (8018574 <input_parameter+0x850>)
 8018310:	4a9a      	ldr	r2, [pc, #616]	; (801857c <input_parameter+0x858>)
 8018312:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8018316:	4b97      	ldr	r3, [pc, #604]	; (8018574 <input_parameter+0x850>)
 8018318:	4a99      	ldr	r2, [pc, #612]	; (8018580 <input_parameter+0x85c>)
 801831a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 801831e:	4b95      	ldr	r3, [pc, #596]	; (8018574 <input_parameter+0x850>)
 8018320:	4a98      	ldr	r2, [pc, #608]	; (8018584 <input_parameter+0x860>)
 8018322:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8018326:	4b93      	ldr	r3, [pc, #588]	; (8018574 <input_parameter+0x850>)
 8018328:	4a97      	ldr	r2, [pc, #604]	; (8018588 <input_parameter+0x864>)
 801832a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 801832e:	4b91      	ldr	r3, [pc, #580]	; (8018574 <input_parameter+0x850>)
 8018330:	4a96      	ldr	r2, [pc, #600]	; (801858c <input_parameter+0x868>)
 8018332:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8018336:	4b8f      	ldr	r3, [pc, #572]	; (8018574 <input_parameter+0x850>)
 8018338:	4a90      	ldr	r2, [pc, #576]	; (801857c <input_parameter+0x858>)
 801833a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 801833e:	4b8d      	ldr	r3, [pc, #564]	; (8018574 <input_parameter+0x850>)
 8018340:	4a93      	ldr	r2, [pc, #588]	; (8018590 <input_parameter+0x86c>)
 8018342:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8018346:	4b8b      	ldr	r3, [pc, #556]	; (8018574 <input_parameter+0x850>)
 8018348:	4a8e      	ldr	r2, [pc, #568]	; (8018584 <input_parameter+0x860>)
 801834a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 801834e:	4b89      	ldr	r3, [pc, #548]	; (8018574 <input_parameter+0x850>)
 8018350:	4a90      	ldr	r2, [pc, #576]	; (8018594 <input_parameter+0x870>)
 8018352:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018356:	4b87      	ldr	r3, [pc, #540]	; (8018574 <input_parameter+0x850>)
 8018358:	4a8f      	ldr	r2, [pc, #572]	; (8018598 <input_parameter+0x874>)
 801835a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 801835e:	4b85      	ldr	r3, [pc, #532]	; (8018574 <input_parameter+0x850>)
 8018360:	4a86      	ldr	r2, [pc, #536]	; (801857c <input_parameter+0x858>)
 8018362:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8018366:	4b83      	ldr	r3, [pc, #524]	; (8018574 <input_parameter+0x850>)
 8018368:	4a8c      	ldr	r2, [pc, #560]	; (801859c <input_parameter+0x878>)
 801836a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 801836e:	4b81      	ldr	r3, [pc, #516]	; (8018574 <input_parameter+0x850>)
 8018370:	4a8b      	ldr	r2, [pc, #556]	; (80185a0 <input_parameter+0x87c>)
 8018372:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8018376:	4b7f      	ldr	r3, [pc, #508]	; (8018574 <input_parameter+0x850>)
 8018378:	4a8a      	ldr	r2, [pc, #552]	; (80185a4 <input_parameter+0x880>)
 801837a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 801837e:	4b7d      	ldr	r3, [pc, #500]	; (8018574 <input_parameter+0x850>)
 8018380:	4a82      	ldr	r2, [pc, #520]	; (801858c <input_parameter+0x868>)
 8018382:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8018386:	4b7b      	ldr	r3, [pc, #492]	; (8018574 <input_parameter+0x850>)
 8018388:	4a7c      	ldr	r2, [pc, #496]	; (801857c <input_parameter+0x858>)
 801838a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 801838e:	4b79      	ldr	r3, [pc, #484]	; (8018574 <input_parameter+0x850>)
 8018390:	4a85      	ldr	r2, [pc, #532]	; (80185a8 <input_parameter+0x884>)
 8018392:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8018396:	4b77      	ldr	r3, [pc, #476]	; (8018574 <input_parameter+0x850>)
 8018398:	4a84      	ldr	r2, [pc, #528]	; (80185ac <input_parameter+0x888>)
 801839a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 801839e:	4b75      	ldr	r3, [pc, #468]	; (8018574 <input_parameter+0x850>)
 80183a0:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80183a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 80183a8:	4b72      	ldr	r3, [pc, #456]	; (8018574 <input_parameter+0x850>)
 80183aa:	4a81      	ldr	r2, [pc, #516]	; (80185b0 <input_parameter+0x88c>)
 80183ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 80183b0:	4b70      	ldr	r3, [pc, #448]	; (8018574 <input_parameter+0x850>)
 80183b2:	4a72      	ldr	r2, [pc, #456]	; (801857c <input_parameter+0x858>)
 80183b4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 80183b8:	4b6e      	ldr	r3, [pc, #440]	; (8018574 <input_parameter+0x850>)
 80183ba:	4a7e      	ldr	r2, [pc, #504]	; (80185b4 <input_parameter+0x890>)
 80183bc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 80183c0:	4b6c      	ldr	r3, [pc, #432]	; (8018574 <input_parameter+0x850>)
 80183c2:	4a77      	ldr	r2, [pc, #476]	; (80185a0 <input_parameter+0x87c>)
 80183c4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 80183c8:	4b6a      	ldr	r3, [pc, #424]	; (8018574 <input_parameter+0x850>)
 80183ca:	4a7b      	ldr	r2, [pc, #492]	; (80185b8 <input_parameter+0x894>)
 80183cc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 80183d0:	4b68      	ldr	r3, [pc, #416]	; (8018574 <input_parameter+0x850>)
 80183d2:	4a7a      	ldr	r2, [pc, #488]	; (80185bc <input_parameter+0x898>)
 80183d4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 80183d8:	4b66      	ldr	r3, [pc, #408]	; (8018574 <input_parameter+0x850>)
 80183da:	4a68      	ldr	r2, [pc, #416]	; (801857c <input_parameter+0x858>)
 80183dc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 80183e0:	4b64      	ldr	r3, [pc, #400]	; (8018574 <input_parameter+0x850>)
 80183e2:	4a77      	ldr	r2, [pc, #476]	; (80185c0 <input_parameter+0x89c>)
 80183e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 80183e8:	4b62      	ldr	r3, [pc, #392]	; (8018574 <input_parameter+0x850>)
 80183ea:	4a76      	ldr	r2, [pc, #472]	; (80185c4 <input_parameter+0x8a0>)
 80183ec:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 80183f0:	4b60      	ldr	r3, [pc, #384]	; (8018574 <input_parameter+0x850>)
 80183f2:	4a75      	ldr	r2, [pc, #468]	; (80185c8 <input_parameter+0x8a4>)
 80183f4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 80183f8:	4b5e      	ldr	r3, [pc, #376]	; (8018574 <input_parameter+0x850>)
 80183fa:	4a70      	ldr	r2, [pc, #448]	; (80185bc <input_parameter+0x898>)
 80183fc:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018400:	4b72      	ldr	r3, [pc, #456]	; (80185cc <input_parameter+0x8a8>)
 8018402:	4a73      	ldr	r2, [pc, #460]	; (80185d0 <input_parameter+0x8ac>)
 8018404:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8018406:	4b71      	ldr	r3, [pc, #452]	; (80185cc <input_parameter+0x8a8>)
 8018408:	4a71      	ldr	r2, [pc, #452]	; (80185d0 <input_parameter+0x8ac>)
 801840a:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 801840c:	4b6f      	ldr	r3, [pc, #444]	; (80185cc <input_parameter+0x8a8>)
 801840e:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018410:	4a6e      	ldr	r2, [pc, #440]	; (80185cc <input_parameter+0x8a8>)
 8018412:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8018414:	4b6d      	ldr	r3, [pc, #436]	; (80185cc <input_parameter+0x8a8>)
 8018416:	4a6f      	ldr	r2, [pc, #444]	; (80185d4 <input_parameter+0x8b0>)
 8018418:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 801841a:	4b6c      	ldr	r3, [pc, #432]	; (80185cc <input_parameter+0x8a8>)
 801841c:	4a61      	ldr	r2, [pc, #388]	; (80185a4 <input_parameter+0x880>)
 801841e:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8018420:	4b6a      	ldr	r3, [pc, #424]	; (80185cc <input_parameter+0x8a8>)
 8018422:	4a6d      	ldr	r2, [pc, #436]	; (80185d8 <input_parameter+0x8b4>)
 8018424:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018426:	4b69      	ldr	r3, [pc, #420]	; (80185cc <input_parameter+0x8a8>)
 8018428:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 801842a:	4a68      	ldr	r2, [pc, #416]	; (80185cc <input_parameter+0x8a8>)
 801842c:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 801842e:	4b67      	ldr	r3, [pc, #412]	; (80185cc <input_parameter+0x8a8>)
 8018430:	4a68      	ldr	r2, [pc, #416]	; (80185d4 <input_parameter+0x8b0>)
 8018432:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8018434:	4b65      	ldr	r3, [pc, #404]	; (80185cc <input_parameter+0x8a8>)
 8018436:	4a5b      	ldr	r2, [pc, #364]	; (80185a4 <input_parameter+0x880>)
 8018438:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 801843a:	4b64      	ldr	r3, [pc, #400]	; (80185cc <input_parameter+0x8a8>)
 801843c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018440:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8018442:	4b62      	ldr	r3, [pc, #392]	; (80185cc <input_parameter+0x8a8>)
 8018444:	4a62      	ldr	r2, [pc, #392]	; (80185d0 <input_parameter+0x8ac>)
 8018446:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8018448:	4b60      	ldr	r3, [pc, #384]	; (80185cc <input_parameter+0x8a8>)
 801844a:	4a64      	ldr	r2, [pc, #400]	; (80185dc <input_parameter+0x8b8>)
 801844c:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 801844e:	4b5f      	ldr	r3, [pc, #380]	; (80185cc <input_parameter+0x8a8>)
 8018450:	4a63      	ldr	r2, [pc, #396]	; (80185e0 <input_parameter+0x8bc>)
 8018452:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8018454:	4b5d      	ldr	r3, [pc, #372]	; (80185cc <input_parameter+0x8a8>)
 8018456:	4a63      	ldr	r2, [pc, #396]	; (80185e4 <input_parameter+0x8c0>)
 8018458:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 801845a:	4b5c      	ldr	r3, [pc, #368]	; (80185cc <input_parameter+0x8a8>)
 801845c:	4a5c      	ldr	r2, [pc, #368]	; (80185d0 <input_parameter+0x8ac>)
 801845e:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018460:	4b5a      	ldr	r3, [pc, #360]	; (80185cc <input_parameter+0x8a8>)
 8018462:	4a5e      	ldr	r2, [pc, #376]	; (80185dc <input_parameter+0x8b8>)
 8018464:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 8018466:	4b59      	ldr	r3, [pc, #356]	; (80185cc <input_parameter+0x8a8>)
 8018468:	4a5d      	ldr	r2, [pc, #372]	; (80185e0 <input_parameter+0x8bc>)
 801846a:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 801846c:	4b57      	ldr	r3, [pc, #348]	; (80185cc <input_parameter+0x8a8>)
 801846e:	4a5e      	ldr	r2, [pc, #376]	; (80185e8 <input_parameter+0x8c4>)
 8018470:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8018472:	4b56      	ldr	r3, [pc, #344]	; (80185cc <input_parameter+0x8a8>)
 8018474:	4a56      	ldr	r2, [pc, #344]	; (80185d0 <input_parameter+0x8ac>)
 8018476:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018478:	4b54      	ldr	r3, [pc, #336]	; (80185cc <input_parameter+0x8a8>)
 801847a:	4a5c      	ldr	r2, [pc, #368]	; (80185ec <input_parameter+0x8c8>)
 801847c:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 801847e:	4b53      	ldr	r3, [pc, #332]	; (80185cc <input_parameter+0x8a8>)
 8018480:	4a4d      	ldr	r2, [pc, #308]	; (80185b8 <input_parameter+0x894>)
 8018482:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 8018484:	4b51      	ldr	r3, [pc, #324]	; (80185cc <input_parameter+0x8a8>)
 8018486:	4a4d      	ldr	r2, [pc, #308]	; (80185bc <input_parameter+0x898>)
 8018488:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 801848a:	4b50      	ldr	r3, [pc, #320]	; (80185cc <input_parameter+0x8a8>)
 801848c:	4a50      	ldr	r2, [pc, #320]	; (80185d0 <input_parameter+0x8ac>)
 801848e:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018490:	4b4e      	ldr	r3, [pc, #312]	; (80185cc <input_parameter+0x8a8>)
 8018492:	4a56      	ldr	r2, [pc, #344]	; (80185ec <input_parameter+0x8c8>)
 8018494:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 8018496:	4b4d      	ldr	r3, [pc, #308]	; (80185cc <input_parameter+0x8a8>)
 8018498:	4a47      	ldr	r2, [pc, #284]	; (80185b8 <input_parameter+0x894>)
 801849a:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 801849c:	4b4b      	ldr	r3, [pc, #300]	; (80185cc <input_parameter+0x8a8>)
 801849e:	4a54      	ldr	r2, [pc, #336]	; (80185f0 <input_parameter+0x8cc>)
 80184a0:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 80184a2:	4b4a      	ldr	r3, [pc, #296]	; (80185cc <input_parameter+0x8a8>)
 80184a4:	4a4a      	ldr	r2, [pc, #296]	; (80185d0 <input_parameter+0x8ac>)
 80184a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 80184aa:	4b48      	ldr	r3, [pc, #288]	; (80185cc <input_parameter+0x8a8>)
 80184ac:	4a51      	ldr	r2, [pc, #324]	; (80185f4 <input_parameter+0x8d0>)
 80184ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 80184b2:	4b46      	ldr	r3, [pc, #280]	; (80185cc <input_parameter+0x8a8>)
 80184b4:	4a4e      	ldr	r2, [pc, #312]	; (80185f0 <input_parameter+0x8cc>)
 80184b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 80184ba:	4b44      	ldr	r3, [pc, #272]	; (80185cc <input_parameter+0x8a8>)
 80184bc:	4a4e      	ldr	r2, [pc, #312]	; (80185f8 <input_parameter+0x8d4>)
 80184be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 80184c2:	4b42      	ldr	r3, [pc, #264]	; (80185cc <input_parameter+0x8a8>)
 80184c4:	4a42      	ldr	r2, [pc, #264]	; (80185d0 <input_parameter+0x8ac>)
 80184c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 80184ca:	4b40      	ldr	r3, [pc, #256]	; (80185cc <input_parameter+0x8a8>)
 80184cc:	4a49      	ldr	r2, [pc, #292]	; (80185f4 <input_parameter+0x8d0>)
 80184ce:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 80184d2:	4b3e      	ldr	r3, [pc, #248]	; (80185cc <input_parameter+0x8a8>)
 80184d4:	4a38      	ldr	r2, [pc, #224]	; (80185b8 <input_parameter+0x894>)
 80184d6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 80184da:	4b3c      	ldr	r3, [pc, #240]	; (80185cc <input_parameter+0x8a8>)
 80184dc:	4a34      	ldr	r2, [pc, #208]	; (80185b0 <input_parameter+0x88c>)
 80184de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 80184e2:	4b3a      	ldr	r3, [pc, #232]	; (80185cc <input_parameter+0x8a8>)
 80184e4:	4a3a      	ldr	r2, [pc, #232]	; (80185d0 <input_parameter+0x8ac>)
 80184e6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 80184ea:	4b38      	ldr	r3, [pc, #224]	; (80185cc <input_parameter+0x8a8>)
 80184ec:	4a43      	ldr	r2, [pc, #268]	; (80185fc <input_parameter+0x8d8>)
 80184ee:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 80184f2:	4b36      	ldr	r3, [pc, #216]	; (80185cc <input_parameter+0x8a8>)
 80184f4:	4a30      	ldr	r2, [pc, #192]	; (80185b8 <input_parameter+0x894>)
 80184f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 80184fa:	4b34      	ldr	r3, [pc, #208]	; (80185cc <input_parameter+0x8a8>)
 80184fc:	4a40      	ldr	r2, [pc, #256]	; (8018600 <input_parameter+0x8dc>)
 80184fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018502:	4b32      	ldr	r3, [pc, #200]	; (80185cc <input_parameter+0x8a8>)
 8018504:	4a32      	ldr	r2, [pc, #200]	; (80185d0 <input_parameter+0x8ac>)
 8018506:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 801850a:	4b30      	ldr	r3, [pc, #192]	; (80185cc <input_parameter+0x8a8>)
 801850c:	4a3d      	ldr	r2, [pc, #244]	; (8018604 <input_parameter+0x8e0>)
 801850e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 8018512:	4b2e      	ldr	r3, [pc, #184]	; (80185cc <input_parameter+0x8a8>)
 8018514:	4a3c      	ldr	r2, [pc, #240]	; (8018608 <input_parameter+0x8e4>)
 8018516:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 801851a:	4b2c      	ldr	r3, [pc, #176]	; (80185cc <input_parameter+0x8a8>)
 801851c:	4a3b      	ldr	r2, [pc, #236]	; (801860c <input_parameter+0x8e8>)
 801851e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 8018522:	4b2a      	ldr	r3, [pc, #168]	; (80185cc <input_parameter+0x8a8>)
 8018524:	4a2a      	ldr	r2, [pc, #168]	; (80185d0 <input_parameter+0x8ac>)
 8018526:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 801852a:	4b28      	ldr	r3, [pc, #160]	; (80185cc <input_parameter+0x8a8>)
 801852c:	4a31      	ldr	r2, [pc, #196]	; (80185f4 <input_parameter+0x8d0>)
 801852e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 8018532:	4b26      	ldr	r3, [pc, #152]	; (80185cc <input_parameter+0x8a8>)
 8018534:	4a30      	ldr	r2, [pc, #192]	; (80185f8 <input_parameter+0x8d4>)
 8018536:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 801853a:	4b24      	ldr	r3, [pc, #144]	; (80185cc <input_parameter+0x8a8>)
 801853c:	4a13      	ldr	r2, [pc, #76]	; (801858c <input_parameter+0x868>)
 801853e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 8018542:	4b22      	ldr	r3, [pc, #136]	; (80185cc <input_parameter+0x8a8>)
 8018544:	4a22      	ldr	r2, [pc, #136]	; (80185d0 <input_parameter+0x8ac>)
 8018546:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 801854a:	4b20      	ldr	r3, [pc, #128]	; (80185cc <input_parameter+0x8a8>)
 801854c:	4a29      	ldr	r2, [pc, #164]	; (80185f4 <input_parameter+0x8d0>)
 801854e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 8018552:	4b1e      	ldr	r3, [pc, #120]	; (80185cc <input_parameter+0x8a8>)
 8018554:	4a2e      	ldr	r2, [pc, #184]	; (8018610 <input_parameter+0x8ec>)
 8018556:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 801855a:	4b1c      	ldr	r3, [pc, #112]	; (80185cc <input_parameter+0x8a8>)
 801855c:	4a0e      	ldr	r2, [pc, #56]	; (8018598 <input_parameter+0x874>)
 801855e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 8018562:	4b1a      	ldr	r3, [pc, #104]	; (80185cc <input_parameter+0x8a8>)
 8018564:	4a1a      	ldr	r2, [pc, #104]	; (80185d0 <input_parameter+0x8ac>)
 8018566:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 801856a:	4b18      	ldr	r3, [pc, #96]	; (80185cc <input_parameter+0x8a8>)
 801856c:	4a29      	ldr	r2, [pc, #164]	; (8018614 <input_parameter+0x8f0>)
 801856e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8018572:	e051      	b.n	8018618 <input_parameter+0x8f4>
 8018574:	2000f358 	.word	0x2000f358
 8018578:	42080000 	.word	0x42080000
 801857c:	44160000 	.word	0x44160000
 8018580:	44340000 	.word	0x44340000
 8018584:	463b8000 	.word	0x463b8000
 8018588:	422c0000 	.word	0x422c0000
 801858c:	41b00000 	.word	0x41b00000
 8018590:	443b8000 	.word	0x443b8000
 8018594:	42200000 	.word	0x42200000
 8018598:	41c00000 	.word	0x41c00000
 801859c:	44660000 	.word	0x44660000
 80185a0:	466a6000 	.word	0x466a6000
 80185a4:	40a00000 	.word	0x40a00000
 80185a8:	445e8000 	.word	0x445e8000
 80185ac:	465ac000 	.word	0x465ac000
 80185b0:	42100000 	.word	0x42100000
 80185b4:	446b0000 	.word	0x446b0000
 80185b8:	41880000 	.word	0x41880000
 80185bc:	41a00000 	.word	0x41a00000
 80185c0:	44700000 	.word	0x44700000
 80185c4:	467a0000 	.word	0x467a0000
 80185c8:	41200000 	.word	0x41200000
 80185cc:	2000f4a0 	.word	0x2000f4a0
 80185d0:	447a0000 	.word	0x447a0000
 80185d4:	44898000 	.word	0x44898000
 80185d8:	41e00000 	.word	0x41e00000
 80185dc:	44b54000 	.word	0x44b54000
 80185e0:	41e80000 	.word	0x41e80000
 80185e4:	41f80000 	.word	0x41f80000
 80185e8:	420c0000 	.word	0x420c0000
 80185ec:	44af0000 	.word	0x44af0000
 80185f0:	41900000 	.word	0x41900000
 80185f4:	44a28000 	.word	0x44a28000
 80185f8:	42180000 	.word	0x42180000
 80185fc:	44c6c000 	.word	0x44c6c000
 8018600:	41700000 	.word	0x41700000
 8018604:	44c30000 	.word	0x44c30000
 8018608:	41600000 	.word	0x41600000
 801860c:	41400000 	.word	0x41400000
 8018610:	41f00000 	.word	0x41f00000
 8018614:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 8018618:	4b9e      	ldr	r3, [pc, #632]	; (8018894 <input_parameter+0xb70>)
 801861a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801861e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018622:	4b9c      	ldr	r3, [pc, #624]	; (8018894 <input_parameter+0xb70>)
 8018624:	4a9c      	ldr	r2, [pc, #624]	; (8018898 <input_parameter+0xb74>)
 8018626:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 801862a:	4b9a      	ldr	r3, [pc, #616]	; (8018894 <input_parameter+0xb70>)
 801862c:	4a9b      	ldr	r2, [pc, #620]	; (801889c <input_parameter+0xb78>)
 801862e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 8018632:	4b98      	ldr	r3, [pc, #608]	; (8018894 <input_parameter+0xb70>)
 8018634:	4a9a      	ldr	r2, [pc, #616]	; (80188a0 <input_parameter+0xb7c>)
 8018636:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 801863a:	4b96      	ldr	r3, [pc, #600]	; (8018894 <input_parameter+0xb70>)
 801863c:	4a99      	ldr	r2, [pc, #612]	; (80188a4 <input_parameter+0xb80>)
 801863e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018642:	4b94      	ldr	r3, [pc, #592]	; (8018894 <input_parameter+0xb70>)
 8018644:	4a98      	ldr	r2, [pc, #608]	; (80188a8 <input_parameter+0xb84>)
 8018646:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 801864a:	4b92      	ldr	r3, [pc, #584]	; (8018894 <input_parameter+0xb70>)
 801864c:	4a93      	ldr	r2, [pc, #588]	; (801889c <input_parameter+0xb78>)
 801864e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 8018652:	4b90      	ldr	r3, [pc, #576]	; (8018894 <input_parameter+0xb70>)
 8018654:	4a95      	ldr	r2, [pc, #596]	; (80188ac <input_parameter+0xb88>)
 8018656:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 801865a:	4b8e      	ldr	r3, [pc, #568]	; (8018894 <input_parameter+0xb70>)
 801865c:	4a94      	ldr	r2, [pc, #592]	; (80188b0 <input_parameter+0xb8c>)
 801865e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 25;
 8018662:	4b8c      	ldr	r3, [pc, #560]	; (8018894 <input_parameter+0xb70>)
 8018664:	4a93      	ldr	r2, [pc, #588]	; (80188b4 <input_parameter+0xb90>)
 8018666:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 801866a:	4b8a      	ldr	r3, [pc, #552]	; (8018894 <input_parameter+0xb70>)
 801866c:	4a8b      	ldr	r2, [pc, #556]	; (801889c <input_parameter+0xb78>)
 801866e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 8018672:	4b88      	ldr	r3, [pc, #544]	; (8018894 <input_parameter+0xb70>)
 8018674:	4a8d      	ldr	r2, [pc, #564]	; (80188ac <input_parameter+0xb88>)
 8018676:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 801867a:	4b86      	ldr	r3, [pc, #536]	; (8018894 <input_parameter+0xb70>)
 801867c:	4a8e      	ldr	r2, [pc, #568]	; (80188b8 <input_parameter+0xb94>)
 801867e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 25;
 8018682:	4b84      	ldr	r3, [pc, #528]	; (8018894 <input_parameter+0xb70>)
 8018684:	4a8b      	ldr	r2, [pc, #556]	; (80188b4 <input_parameter+0xb90>)
 8018686:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 801868a:	4b8c      	ldr	r3, [pc, #560]	; (80188bc <input_parameter+0xb98>)
 801868c:	4a8c      	ldr	r2, [pc, #560]	; (80188c0 <input_parameter+0xb9c>)
 801868e:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018690:	4b8a      	ldr	r3, [pc, #552]	; (80188bc <input_parameter+0xb98>)
 8018692:	4a8b      	ldr	r2, [pc, #556]	; (80188c0 <input_parameter+0xb9c>)
 8018694:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018696:	4b89      	ldr	r3, [pc, #548]	; (80188bc <input_parameter+0xb98>)
 8018698:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 801869a:	4a88      	ldr	r2, [pc, #544]	; (80188bc <input_parameter+0xb98>)
 801869c:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 801869e:	4b87      	ldr	r3, [pc, #540]	; (80188bc <input_parameter+0xb98>)
 80186a0:	4a88      	ldr	r2, [pc, #544]	; (80188c4 <input_parameter+0xba0>)
 80186a2:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 80186a4:	4b85      	ldr	r3, [pc, #532]	; (80188bc <input_parameter+0xb98>)
 80186a6:	4a88      	ldr	r2, [pc, #544]	; (80188c8 <input_parameter+0xba4>)
 80186a8:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 80186aa:	4b84      	ldr	r3, [pc, #528]	; (80188bc <input_parameter+0xb98>)
 80186ac:	4a87      	ldr	r2, [pc, #540]	; (80188cc <input_parameter+0xba8>)
 80186ae:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 80186b0:	4b82      	ldr	r3, [pc, #520]	; (80188bc <input_parameter+0xb98>)
 80186b2:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 80186b4:	4a81      	ldr	r2, [pc, #516]	; (80188bc <input_parameter+0xb98>)
 80186b6:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 80186b8:	4b80      	ldr	r3, [pc, #512]	; (80188bc <input_parameter+0xb98>)
 80186ba:	4a82      	ldr	r2, [pc, #520]	; (80188c4 <input_parameter+0xba0>)
 80186bc:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 80186be:	4b7f      	ldr	r3, [pc, #508]	; (80188bc <input_parameter+0xb98>)
 80186c0:	4a81      	ldr	r2, [pc, #516]	; (80188c8 <input_parameter+0xba4>)
 80186c2:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 80186c4:	4b7d      	ldr	r3, [pc, #500]	; (80188bc <input_parameter+0xb98>)
 80186c6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80186ca:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 80186cc:	4b7b      	ldr	r3, [pc, #492]	; (80188bc <input_parameter+0xb98>)
 80186ce:	4a7c      	ldr	r2, [pc, #496]	; (80188c0 <input_parameter+0xb9c>)
 80186d0:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 80186d2:	4b7a      	ldr	r3, [pc, #488]	; (80188bc <input_parameter+0xb98>)
 80186d4:	4a7e      	ldr	r2, [pc, #504]	; (80188d0 <input_parameter+0xbac>)
 80186d6:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 80186d8:	4b78      	ldr	r3, [pc, #480]	; (80188bc <input_parameter+0xb98>)
 80186da:	4a7e      	ldr	r2, [pc, #504]	; (80188d4 <input_parameter+0xbb0>)
 80186dc:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 80186de:	4b77      	ldr	r3, [pc, #476]	; (80188bc <input_parameter+0xb98>)
 80186e0:	4a7d      	ldr	r2, [pc, #500]	; (80188d8 <input_parameter+0xbb4>)
 80186e2:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 80186e4:	4b75      	ldr	r3, [pc, #468]	; (80188bc <input_parameter+0xb98>)
 80186e6:	4a76      	ldr	r2, [pc, #472]	; (80188c0 <input_parameter+0xb9c>)
 80186e8:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 80186ea:	4b74      	ldr	r3, [pc, #464]	; (80188bc <input_parameter+0xb98>)
 80186ec:	4a78      	ldr	r2, [pc, #480]	; (80188d0 <input_parameter+0xbac>)
 80186ee:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 80186f0:	4b72      	ldr	r3, [pc, #456]	; (80188bc <input_parameter+0xb98>)
 80186f2:	4a79      	ldr	r2, [pc, #484]	; (80188d8 <input_parameter+0xbb4>)
 80186f4:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 80186f6:	4b71      	ldr	r3, [pc, #452]	; (80188bc <input_parameter+0xb98>)
 80186f8:	4a6e      	ldr	r2, [pc, #440]	; (80188b4 <input_parameter+0xb90>)
 80186fa:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 80186fc:	4b6f      	ldr	r3, [pc, #444]	; (80188bc <input_parameter+0xb98>)
 80186fe:	4a70      	ldr	r2, [pc, #448]	; (80188c0 <input_parameter+0xb9c>)
 8018700:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 8018702:	4b6e      	ldr	r3, [pc, #440]	; (80188bc <input_parameter+0xb98>)
 8018704:	4a75      	ldr	r2, [pc, #468]	; (80188dc <input_parameter+0xbb8>)
 8018706:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 8018708:	4b6c      	ldr	r3, [pc, #432]	; (80188bc <input_parameter+0xb98>)
 801870a:	4a75      	ldr	r2, [pc, #468]	; (80188e0 <input_parameter+0xbbc>)
 801870c:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 801870e:	4b6b      	ldr	r3, [pc, #428]	; (80188bc <input_parameter+0xb98>)
 8018710:	4a71      	ldr	r2, [pc, #452]	; (80188d8 <input_parameter+0xbb4>)
 8018712:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 8018714:	4b69      	ldr	r3, [pc, #420]	; (80188bc <input_parameter+0xb98>)
 8018716:	4a6a      	ldr	r2, [pc, #424]	; (80188c0 <input_parameter+0xb9c>)
 8018718:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 801871a:	4b68      	ldr	r3, [pc, #416]	; (80188bc <input_parameter+0xb98>)
 801871c:	4a6f      	ldr	r2, [pc, #444]	; (80188dc <input_parameter+0xbb8>)
 801871e:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 8018720:	4b66      	ldr	r3, [pc, #408]	; (80188bc <input_parameter+0xb98>)
 8018722:	4a70      	ldr	r2, [pc, #448]	; (80188e4 <input_parameter+0xbc0>)
 8018724:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 8018726:	4b65      	ldr	r3, [pc, #404]	; (80188bc <input_parameter+0xb98>)
 8018728:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801872c:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 801872e:	4b63      	ldr	r3, [pc, #396]	; (80188bc <input_parameter+0xb98>)
 8018730:	4a63      	ldr	r2, [pc, #396]	; (80188c0 <input_parameter+0xb9c>)
 8018732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 8018736:	4b61      	ldr	r3, [pc, #388]	; (80188bc <input_parameter+0xb98>)
 8018738:	4a6b      	ldr	r2, [pc, #428]	; (80188e8 <input_parameter+0xbc4>)
 801873a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 801873e:	4b5f      	ldr	r3, [pc, #380]	; (80188bc <input_parameter+0xb98>)
 8018740:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 8018748:	4b5c      	ldr	r3, [pc, #368]	; (80188bc <input_parameter+0xb98>)
 801874a:	4a68      	ldr	r2, [pc, #416]	; (80188ec <input_parameter+0xbc8>)
 801874c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 8018750:	4b5a      	ldr	r3, [pc, #360]	; (80188bc <input_parameter+0xb98>)
 8018752:	4a5b      	ldr	r2, [pc, #364]	; (80188c0 <input_parameter+0xb9c>)
 8018754:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 8018758:	4b58      	ldr	r3, [pc, #352]	; (80188bc <input_parameter+0xb98>)
 801875a:	4a63      	ldr	r2, [pc, #396]	; (80188e8 <input_parameter+0xbc4>)
 801875c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 8018760:	4b56      	ldr	r3, [pc, #344]	; (80188bc <input_parameter+0xb98>)
 8018762:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018766:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 801876a:	4b54      	ldr	r3, [pc, #336]	; (80188bc <input_parameter+0xb98>)
 801876c:	4a5f      	ldr	r2, [pc, #380]	; (80188ec <input_parameter+0xbc8>)
 801876e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 8018772:	4b52      	ldr	r3, [pc, #328]	; (80188bc <input_parameter+0xb98>)
 8018774:	4a52      	ldr	r2, [pc, #328]	; (80188c0 <input_parameter+0xb9c>)
 8018776:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 801877a:	4b50      	ldr	r3, [pc, #320]	; (80188bc <input_parameter+0xb98>)
 801877c:	4a5c      	ldr	r2, [pc, #368]	; (80188f0 <input_parameter+0xbcc>)
 801877e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 8018782:	4b4e      	ldr	r3, [pc, #312]	; (80188bc <input_parameter+0xb98>)
 8018784:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018788:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 801878c:	4b4b      	ldr	r3, [pc, #300]	; (80188bc <input_parameter+0xb98>)
 801878e:	4a42      	ldr	r2, [pc, #264]	; (8018898 <input_parameter+0xb74>)
 8018790:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 8018794:	4b49      	ldr	r3, [pc, #292]	; (80188bc <input_parameter+0xb98>)
 8018796:	4a4a      	ldr	r2, [pc, #296]	; (80188c0 <input_parameter+0xb9c>)
 8018798:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 801879c:	4b47      	ldr	r3, [pc, #284]	; (80188bc <input_parameter+0xb98>)
 801879e:	4a54      	ldr	r2, [pc, #336]	; (80188f0 <input_parameter+0xbcc>)
 80187a0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 80187a4:	4b45      	ldr	r3, [pc, #276]	; (80188bc <input_parameter+0xb98>)
 80187a6:	4a4f      	ldr	r2, [pc, #316]	; (80188e4 <input_parameter+0xbc0>)
 80187a8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 80187ac:	4b43      	ldr	r3, [pc, #268]	; (80188bc <input_parameter+0xb98>)
 80187ae:	4a4a      	ldr	r2, [pc, #296]	; (80188d8 <input_parameter+0xbb4>)
 80187b0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 80187b4:	4b41      	ldr	r3, [pc, #260]	; (80188bc <input_parameter+0xb98>)
 80187b6:	4a42      	ldr	r2, [pc, #264]	; (80188c0 <input_parameter+0xb9c>)
 80187b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 80187bc:	4b3f      	ldr	r3, [pc, #252]	; (80188bc <input_parameter+0xb98>)
 80187be:	4a4d      	ldr	r2, [pc, #308]	; (80188f4 <input_parameter+0xbd0>)
 80187c0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 80187c4:	4b3d      	ldr	r3, [pc, #244]	; (80188bc <input_parameter+0xb98>)
 80187c6:	4a4c      	ldr	r2, [pc, #304]	; (80188f8 <input_parameter+0xbd4>)
 80187c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 80187cc:	4b3b      	ldr	r3, [pc, #236]	; (80188bc <input_parameter+0xb98>)
 80187ce:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80187d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 80187d6:	4b39      	ldr	r3, [pc, #228]	; (80188bc <input_parameter+0xb98>)
 80187d8:	4a39      	ldr	r2, [pc, #228]	; (80188c0 <input_parameter+0xb9c>)
 80187da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 80187de:	4b37      	ldr	r3, [pc, #220]	; (80188bc <input_parameter+0xb98>)
 80187e0:	4a44      	ldr	r2, [pc, #272]	; (80188f4 <input_parameter+0xbd0>)
 80187e2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 80187e6:	4b35      	ldr	r3, [pc, #212]	; (80188bc <input_parameter+0xb98>)
 80187e8:	4a44      	ldr	r2, [pc, #272]	; (80188fc <input_parameter+0xbd8>)
 80187ea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 80187ee:	4b33      	ldr	r3, [pc, #204]	; (80188bc <input_parameter+0xb98>)
 80187f0:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80187f4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 80187f8:	4b30      	ldr	r3, [pc, #192]	; (80188bc <input_parameter+0xb98>)
 80187fa:	4a31      	ldr	r2, [pc, #196]	; (80188c0 <input_parameter+0xb9c>)
 80187fc:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 8018800:	4b2e      	ldr	r3, [pc, #184]	; (80188bc <input_parameter+0xb98>)
 8018802:	4a3b      	ldr	r2, [pc, #236]	; (80188f0 <input_parameter+0xbcc>)
 8018804:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 8018808:	4b2c      	ldr	r3, [pc, #176]	; (80188bc <input_parameter+0xb98>)
 801880a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 801880e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 8018812:	4b2a      	ldr	r3, [pc, #168]	; (80188bc <input_parameter+0xb98>)
 8018814:	4a24      	ldr	r2, [pc, #144]	; (80188a8 <input_parameter+0xb84>)
 8018816:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 801881a:	4b28      	ldr	r3, [pc, #160]	; (80188bc <input_parameter+0xb98>)
 801881c:	4a28      	ldr	r2, [pc, #160]	; (80188c0 <input_parameter+0xb9c>)
 801881e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 8018822:	4b26      	ldr	r3, [pc, #152]	; (80188bc <input_parameter+0xb98>)
 8018824:	4a32      	ldr	r2, [pc, #200]	; (80188f0 <input_parameter+0xbcc>)
 8018826:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 801882a:	4b24      	ldr	r3, [pc, #144]	; (80188bc <input_parameter+0xb98>)
 801882c:	4a1d      	ldr	r2, [pc, #116]	; (80188a4 <input_parameter+0xb80>)
 801882e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018832:	4b22      	ldr	r3, [pc, #136]	; (80188bc <input_parameter+0xb98>)
 8018834:	4a1c      	ldr	r2, [pc, #112]	; (80188a8 <input_parameter+0xb84>)
 8018836:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 801883a:	4b20      	ldr	r3, [pc, #128]	; (80188bc <input_parameter+0xb98>)
 801883c:	4a20      	ldr	r2, [pc, #128]	; (80188c0 <input_parameter+0xb9c>)
 801883e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 8018842:	4b1e      	ldr	r3, [pc, #120]	; (80188bc <input_parameter+0xb98>)
 8018844:	4a2e      	ldr	r2, [pc, #184]	; (8018900 <input_parameter+0xbdc>)
 8018846:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 801884a:	4b1c      	ldr	r3, [pc, #112]	; (80188bc <input_parameter+0xb98>)
 801884c:	4a1a      	ldr	r2, [pc, #104]	; (80188b8 <input_parameter+0xb94>)
 801884e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 20;
 8018852:	4b1a      	ldr	r3, [pc, #104]	; (80188bc <input_parameter+0xb98>)
 8018854:	4a20      	ldr	r2, [pc, #128]	; (80188d8 <input_parameter+0xbb4>)
 8018856:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 801885a:	4b18      	ldr	r3, [pc, #96]	; (80188bc <input_parameter+0xb98>)
 801885c:	4a18      	ldr	r2, [pc, #96]	; (80188c0 <input_parameter+0xb9c>)
 801885e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 8018862:	4b16      	ldr	r3, [pc, #88]	; (80188bc <input_parameter+0xb98>)
 8018864:	4a26      	ldr	r2, [pc, #152]	; (8018900 <input_parameter+0xbdc>)
 8018866:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 801886a:	4b14      	ldr	r3, [pc, #80]	; (80188bc <input_parameter+0xb98>)
 801886c:	4a25      	ldr	r2, [pc, #148]	; (8018904 <input_parameter+0xbe0>)
 801886e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 20;
 8018872:	4b12      	ldr	r3, [pc, #72]	; (80188bc <input_parameter+0xb98>)
 8018874:	4a18      	ldr	r2, [pc, #96]	; (80188d8 <input_parameter+0xbb4>)
 8018876:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 801887a:	4b23      	ldr	r3, [pc, #140]	; (8018908 <input_parameter+0xbe4>)
 801887c:	4a23      	ldr	r2, [pc, #140]	; (801890c <input_parameter+0xbe8>)
 801887e:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 8018880:	4b21      	ldr	r3, [pc, #132]	; (8018908 <input_parameter+0xbe4>)
 8018882:	4a22      	ldr	r2, [pc, #136]	; (801890c <input_parameter+0xbe8>)
 8018884:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 8018886:	4b20      	ldr	r3, [pc, #128]	; (8018908 <input_parameter+0xbe4>)
 8018888:	4a20      	ldr	r2, [pc, #128]	; (801890c <input_parameter+0xbe8>)
 801888a:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 801888c:	4b1e      	ldr	r3, [pc, #120]	; (8018908 <input_parameter+0xbe4>)
 801888e:	4a20      	ldr	r2, [pc, #128]	; (8018910 <input_parameter+0xbec>)
 8018890:	63da      	str	r2, [r3, #60]	; 0x3c
 8018892:	e03f      	b.n	8018914 <input_parameter+0xbf0>
 8018894:	2000f4a0 	.word	0x2000f4a0
 8018898:	41b00000 	.word	0x41b00000
 801889c:	447a0000 	.word	0x447a0000
 80188a0:	44cf8000 	.word	0x44cf8000
 80188a4:	41200000 	.word	0x41200000
 80188a8:	41f00000 	.word	0x41f00000
 80188ac:	44dac000 	.word	0x44dac000
 80188b0:	41840000 	.word	0x41840000
 80188b4:	41c80000 	.word	0x41c80000
 80188b8:	41600000 	.word	0x41600000
 80188bc:	2000f5e8 	.word	0x2000f5e8
 80188c0:	44960000 	.word	0x44960000
 80188c4:	44898000 	.word	0x44898000
 80188c8:	40a00000 	.word	0x40a00000
 80188cc:	41e00000 	.word	0x41e00000
 80188d0:	44bcc000 	.word	0x44bcc000
 80188d4:	41a80000 	.word	0x41a80000
 80188d8:	41a00000 	.word	0x41a00000
 80188dc:	44ce4000 	.word	0x44ce4000
 80188e0:	41880000 	.word	0x41880000
 80188e4:	41700000 	.word	0x41700000
 80188e8:	44c1c000 	.word	0x44c1c000
 80188ec:	421c0000 	.word	0x421c0000
 80188f0:	44e74000 	.word	0x44e74000
 80188f4:	44af0000 	.word	0x44af0000
 80188f8:	42040000 	.word	0x42040000
 80188fc:	41c00000 	.word	0x41c00000
 8018900:	44f3c000 	.word	0x44f3c000
 8018904:	41080000 	.word	0x41080000
 8018908:	2000f730 	.word	0x2000f730
 801890c:	44bb8000 	.word	0x44bb8000
 8018910:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 8018914:	4b67      	ldr	r3, [pc, #412]	; (8018ab4 <input_parameter+0xd90>)
 8018916:	4a68      	ldr	r2, [pc, #416]	; (8018ab8 <input_parameter+0xd94>)
 8018918:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 801891a:	4b66      	ldr	r3, [pc, #408]	; (8018ab4 <input_parameter+0xd90>)
 801891c:	4a67      	ldr	r2, [pc, #412]	; (8018abc <input_parameter+0xd98>)
 801891e:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 8018920:	4b64      	ldr	r3, [pc, #400]	; (8018ab4 <input_parameter+0xd90>)
 8018922:	4a67      	ldr	r2, [pc, #412]	; (8018ac0 <input_parameter+0xd9c>)
 8018924:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 8018926:	4b63      	ldr	r3, [pc, #396]	; (8018ab4 <input_parameter+0xd90>)
 8018928:	4a66      	ldr	r2, [pc, #408]	; (8018ac4 <input_parameter+0xda0>)
 801892a:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 801892c:	4b61      	ldr	r3, [pc, #388]	; (8018ab4 <input_parameter+0xd90>)
 801892e:	4a66      	ldr	r2, [pc, #408]	; (8018ac8 <input_parameter+0xda4>)
 8018930:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018932:	4b60      	ldr	r3, [pc, #384]	; (8018ab4 <input_parameter+0xd90>)
 8018934:	4a65      	ldr	r2, [pc, #404]	; (8018acc <input_parameter+0xda8>)
 8018936:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 8018938:	4b5e      	ldr	r3, [pc, #376]	; (8018ab4 <input_parameter+0xd90>)
 801893a:	4a61      	ldr	r2, [pc, #388]	; (8018ac0 <input_parameter+0xd9c>)
 801893c:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 801893e:	4b5d      	ldr	r3, [pc, #372]	; (8018ab4 <input_parameter+0xd90>)
 8018940:	4a63      	ldr	r2, [pc, #396]	; (8018ad0 <input_parameter+0xdac>)
 8018942:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 8018944:	4b5b      	ldr	r3, [pc, #364]	; (8018ab4 <input_parameter+0xd90>)
 8018946:	4a63      	ldr	r2, [pc, #396]	; (8018ad4 <input_parameter+0xdb0>)
 8018948:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 801894a:	4b5a      	ldr	r3, [pc, #360]	; (8018ab4 <input_parameter+0xd90>)
 801894c:	4a62      	ldr	r2, [pc, #392]	; (8018ad8 <input_parameter+0xdb4>)
 801894e:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 8018950:	4b58      	ldr	r3, [pc, #352]	; (8018ab4 <input_parameter+0xd90>)
 8018952:	4a5b      	ldr	r2, [pc, #364]	; (8018ac0 <input_parameter+0xd9c>)
 8018954:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 8018956:	4b57      	ldr	r3, [pc, #348]	; (8018ab4 <input_parameter+0xd90>)
 8018958:	4a5d      	ldr	r2, [pc, #372]	; (8018ad0 <input_parameter+0xdac>)
 801895a:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 801895c:	4b55      	ldr	r3, [pc, #340]	; (8018ab4 <input_parameter+0xd90>)
 801895e:	4a5d      	ldr	r2, [pc, #372]	; (8018ad4 <input_parameter+0xdb0>)
 8018960:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018962:	4b54      	ldr	r3, [pc, #336]	; (8018ab4 <input_parameter+0xd90>)
 8018964:	4a5d      	ldr	r2, [pc, #372]	; (8018adc <input_parameter+0xdb8>)
 8018966:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 8018968:	4b52      	ldr	r3, [pc, #328]	; (8018ab4 <input_parameter+0xd90>)
 801896a:	4a55      	ldr	r2, [pc, #340]	; (8018ac0 <input_parameter+0xd9c>)
 801896c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 8018970:	4b50      	ldr	r3, [pc, #320]	; (8018ab4 <input_parameter+0xd90>)
 8018972:	4a5b      	ldr	r2, [pc, #364]	; (8018ae0 <input_parameter+0xdbc>)
 8018974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 8018978:	4b4e      	ldr	r3, [pc, #312]	; (8018ab4 <input_parameter+0xd90>)
 801897a:	4a5a      	ldr	r2, [pc, #360]	; (8018ae4 <input_parameter+0xdc0>)
 801897c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018980:	4b4c      	ldr	r3, [pc, #304]	; (8018ab4 <input_parameter+0xd90>)
 8018982:	4a59      	ldr	r2, [pc, #356]	; (8018ae8 <input_parameter+0xdc4>)
 8018984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 8018988:	4b4a      	ldr	r3, [pc, #296]	; (8018ab4 <input_parameter+0xd90>)
 801898a:	4a4d      	ldr	r2, [pc, #308]	; (8018ac0 <input_parameter+0xd9c>)
 801898c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 8018990:	4b48      	ldr	r3, [pc, #288]	; (8018ab4 <input_parameter+0xd90>)
 8018992:	4a53      	ldr	r2, [pc, #332]	; (8018ae0 <input_parameter+0xdbc>)
 8018994:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018998:	4b46      	ldr	r3, [pc, #280]	; (8018ab4 <input_parameter+0xd90>)
 801899a:	4a52      	ldr	r2, [pc, #328]	; (8018ae4 <input_parameter+0xdc0>)
 801899c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 80189a0:	4b44      	ldr	r3, [pc, #272]	; (8018ab4 <input_parameter+0xd90>)
 80189a2:	4a52      	ldr	r2, [pc, #328]	; (8018aec <input_parameter+0xdc8>)
 80189a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 80189a8:	4b42      	ldr	r3, [pc, #264]	; (8018ab4 <input_parameter+0xd90>)
 80189aa:	4a45      	ldr	r2, [pc, #276]	; (8018ac0 <input_parameter+0xd9c>)
 80189ac:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 80189b0:	4b40      	ldr	r3, [pc, #256]	; (8018ab4 <input_parameter+0xd90>)
 80189b2:	4a4f      	ldr	r2, [pc, #316]	; (8018af0 <input_parameter+0xdcc>)
 80189b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 80189b8:	4b3e      	ldr	r3, [pc, #248]	; (8018ab4 <input_parameter+0xd90>)
 80189ba:	4a4e      	ldr	r2, [pc, #312]	; (8018af4 <input_parameter+0xdd0>)
 80189bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80189c0:	4b3c      	ldr	r3, [pc, #240]	; (8018ab4 <input_parameter+0xd90>)
 80189c2:	4a4a      	ldr	r2, [pc, #296]	; (8018aec <input_parameter+0xdc8>)
 80189c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 80189c8:	4b3a      	ldr	r3, [pc, #232]	; (8018ab4 <input_parameter+0xd90>)
 80189ca:	4a3d      	ldr	r2, [pc, #244]	; (8018ac0 <input_parameter+0xd9c>)
 80189cc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 80189d0:	4b38      	ldr	r3, [pc, #224]	; (8018ab4 <input_parameter+0xd90>)
 80189d2:	4a47      	ldr	r2, [pc, #284]	; (8018af0 <input_parameter+0xdcc>)
 80189d4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 80189d8:	4b36      	ldr	r3, [pc, #216]	; (8018ab4 <input_parameter+0xd90>)
 80189da:	4a46      	ldr	r2, [pc, #280]	; (8018af4 <input_parameter+0xdd0>)
 80189dc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 80189e0:	4b34      	ldr	r3, [pc, #208]	; (8018ab4 <input_parameter+0xd90>)
 80189e2:	4a45      	ldr	r2, [pc, #276]	; (8018af8 <input_parameter+0xdd4>)
 80189e4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 80189e8:	4b32      	ldr	r3, [pc, #200]	; (8018ab4 <input_parameter+0xd90>)
 80189ea:	4a35      	ldr	r2, [pc, #212]	; (8018ac0 <input_parameter+0xd9c>)
 80189ec:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 80189f0:	4b30      	ldr	r3, [pc, #192]	; (8018ab4 <input_parameter+0xd90>)
 80189f2:	4a42      	ldr	r2, [pc, #264]	; (8018afc <input_parameter+0xdd8>)
 80189f4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 80189f8:	4b2e      	ldr	r3, [pc, #184]	; (8018ab4 <input_parameter+0xd90>)
 80189fa:	4a41      	ldr	r2, [pc, #260]	; (8018b00 <input_parameter+0xddc>)
 80189fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018a00:	4b2c      	ldr	r3, [pc, #176]	; (8018ab4 <input_parameter+0xd90>)
 8018a02:	4a40      	ldr	r2, [pc, #256]	; (8018b04 <input_parameter+0xde0>)
 8018a04:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 8018a08:	4b2a      	ldr	r3, [pc, #168]	; (8018ab4 <input_parameter+0xd90>)
 8018a0a:	4a2d      	ldr	r2, [pc, #180]	; (8018ac0 <input_parameter+0xd9c>)
 8018a0c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 8018a10:	4b28      	ldr	r3, [pc, #160]	; (8018ab4 <input_parameter+0xd90>)
 8018a12:	4a3a      	ldr	r2, [pc, #232]	; (8018afc <input_parameter+0xdd8>)
 8018a14:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 8018a18:	4b26      	ldr	r3, [pc, #152]	; (8018ab4 <input_parameter+0xd90>)
 8018a1a:	4a30      	ldr	r2, [pc, #192]	; (8018adc <input_parameter+0xdb8>)
 8018a1c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018a20:	4b24      	ldr	r3, [pc, #144]	; (8018ab4 <input_parameter+0xd90>)
 8018a22:	4a39      	ldr	r2, [pc, #228]	; (8018b08 <input_parameter+0xde4>)
 8018a24:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 8018a28:	4b22      	ldr	r3, [pc, #136]	; (8018ab4 <input_parameter+0xd90>)
 8018a2a:	4a25      	ldr	r2, [pc, #148]	; (8018ac0 <input_parameter+0xd9c>)
 8018a2c:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 8018a30:	4b20      	ldr	r3, [pc, #128]	; (8018ab4 <input_parameter+0xd90>)
 8018a32:	4a36      	ldr	r2, [pc, #216]	; (8018b0c <input_parameter+0xde8>)
 8018a34:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 8018a38:	4b1e      	ldr	r3, [pc, #120]	; (8018ab4 <input_parameter+0xd90>)
 8018a3a:	4a35      	ldr	r2, [pc, #212]	; (8018b10 <input_parameter+0xdec>)
 8018a3c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018a40:	4b1c      	ldr	r3, [pc, #112]	; (8018ab4 <input_parameter+0xd90>)
 8018a42:	4a30      	ldr	r2, [pc, #192]	; (8018b04 <input_parameter+0xde0>)
 8018a44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 8018a48:	4b1a      	ldr	r3, [pc, #104]	; (8018ab4 <input_parameter+0xd90>)
 8018a4a:	4a1d      	ldr	r2, [pc, #116]	; (8018ac0 <input_parameter+0xd9c>)
 8018a4c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 8018a50:	4b18      	ldr	r3, [pc, #96]	; (8018ab4 <input_parameter+0xd90>)
 8018a52:	4a2e      	ldr	r2, [pc, #184]	; (8018b0c <input_parameter+0xde8>)
 8018a54:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 8018a58:	4b16      	ldr	r3, [pc, #88]	; (8018ab4 <input_parameter+0xd90>)
 8018a5a:	4a2d      	ldr	r2, [pc, #180]	; (8018b10 <input_parameter+0xdec>)
 8018a5c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018a60:	4b14      	ldr	r3, [pc, #80]	; (8018ab4 <input_parameter+0xd90>)
 8018a62:	4a2c      	ldr	r2, [pc, #176]	; (8018b14 <input_parameter+0xdf0>)
 8018a64:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 8018a68:	4b12      	ldr	r3, [pc, #72]	; (8018ab4 <input_parameter+0xd90>)
 8018a6a:	4a15      	ldr	r2, [pc, #84]	; (8018ac0 <input_parameter+0xd9c>)
 8018a6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 8018a70:	4b10      	ldr	r3, [pc, #64]	; (8018ab4 <input_parameter+0xd90>)
 8018a72:	4a29      	ldr	r2, [pc, #164]	; (8018b18 <input_parameter+0xdf4>)
 8018a74:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 8018a78:	4b0e      	ldr	r3, [pc, #56]	; (8018ab4 <input_parameter+0xd90>)
 8018a7a:	4a28      	ldr	r2, [pc, #160]	; (8018b1c <input_parameter+0xdf8>)
 8018a7c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 8018a80:	4b0c      	ldr	r3, [pc, #48]	; (8018ab4 <input_parameter+0xd90>)
 8018a82:	4a15      	ldr	r2, [pc, #84]	; (8018ad8 <input_parameter+0xdb4>)
 8018a84:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 8018a88:	4b0a      	ldr	r3, [pc, #40]	; (8018ab4 <input_parameter+0xd90>)
 8018a8a:	4a0d      	ldr	r2, [pc, #52]	; (8018ac0 <input_parameter+0xd9c>)
 8018a8c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 8018a90:	4b08      	ldr	r3, [pc, #32]	; (8018ab4 <input_parameter+0xd90>)
 8018a92:	4a21      	ldr	r2, [pc, #132]	; (8018b18 <input_parameter+0xdf4>)
 8018a94:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 8018a98:	4b06      	ldr	r3, [pc, #24]	; (8018ab4 <input_parameter+0xd90>)
 8018a9a:	4a20      	ldr	r2, [pc, #128]	; (8018b1c <input_parameter+0xdf8>)
 8018a9c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 8018aa0:	4b04      	ldr	r3, [pc, #16]	; (8018ab4 <input_parameter+0xd90>)
 8018aa2:	4a0d      	ldr	r2, [pc, #52]	; (8018ad8 <input_parameter+0xdb4>)
 8018aa4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 8018aa8:	bf00      	nop
 8018aaa:	46bd      	mov	sp, r7
 8018aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab0:	4770      	bx	lr
 8018ab2:	bf00      	nop
 8018ab4:	2000f730 	.word	0x2000f730
 8018ab8:	41880000 	.word	0x41880000
 8018abc:	41f80000 	.word	0x41f80000
 8018ac0:	44bb8000 	.word	0x44bb8000
 8018ac4:	44e4c000 	.word	0x44e4c000
 8018ac8:	41700000 	.word	0x41700000
 8018acc:	420c0000 	.word	0x420c0000
 8018ad0:	44fa0000 	.word	0x44fa0000
 8018ad4:	41200000 	.word	0x41200000
 8018ad8:	41a00000 	.word	0x41a00000
 8018adc:	41900000 	.word	0x41900000
 8018ae0:	44e74000 	.word	0x44e74000
 8018ae4:	41400000 	.word	0x41400000
 8018ae8:	42180000 	.word	0x42180000
 8018aec:	42100000 	.word	0x42100000
 8018af0:	45034000 	.word	0x45034000
 8018af4:	41500000 	.word	0x41500000
 8018af8:	42080000 	.word	0x42080000
 8018afc:	44e10000 	.word	0x44e10000
 8018b00:	41a80000 	.word	0x41a80000
 8018b04:	41b00000 	.word	0x41b00000
 8018b08:	41c00000 	.word	0x41c00000
 8018b0c:	45098000 	.word	0x45098000
 8018b10:	40e00000 	.word	0x40e00000
 8018b14:	41f00000 	.word	0x41f00000
 8018b18:	45066000 	.word	0x45066000
 8018b1c:	40400000 	.word	0x40400000

08018b20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018b24:	4b22      	ldr	r3, [pc, #136]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b26:	4a23      	ldr	r2, [pc, #140]	; (8018bb4 <MX_USART1_UART_Init+0x94>)
 8018b28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018b2a:	4b21      	ldr	r3, [pc, #132]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018b30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8018b32:	4b1f      	ldr	r3, [pc, #124]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b34:	2200      	movs	r2, #0
 8018b36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018b38:	4b1d      	ldr	r3, [pc, #116]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8018b3e:	4b1c      	ldr	r3, [pc, #112]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b40:	2200      	movs	r2, #0
 8018b42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018b44:	4b1a      	ldr	r3, [pc, #104]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b46:	220c      	movs	r2, #12
 8018b48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018b4a:	4b19      	ldr	r3, [pc, #100]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018b50:	4b17      	ldr	r3, [pc, #92]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b52:	2200      	movs	r2, #0
 8018b54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018b56:	4b16      	ldr	r3, [pc, #88]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b58:	2200      	movs	r2, #0
 8018b5a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8018b5c:	4b14      	ldr	r3, [pc, #80]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b5e:	2200      	movs	r2, #0
 8018b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018b62:	4b13      	ldr	r3, [pc, #76]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b64:	2200      	movs	r2, #0
 8018b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8018b68:	4811      	ldr	r0, [pc, #68]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b6a:	f006 fd2d 	bl	801f5c8 <HAL_UART_Init>
 8018b6e:	4603      	mov	r3, r0
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d001      	beq.n	8018b78 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8018b74:	f7f1 f935 	bl	8009de2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018b78:	2100      	movs	r1, #0
 8018b7a:	480d      	ldr	r0, [pc, #52]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b7c:	f007 faf4 	bl	8020168 <HAL_UARTEx_SetTxFifoThreshold>
 8018b80:	4603      	mov	r3, r0
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d001      	beq.n	8018b8a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8018b86:	f7f1 f92c 	bl	8009de2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8018b8a:	2100      	movs	r1, #0
 8018b8c:	4808      	ldr	r0, [pc, #32]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b8e:	f007 fb29 	bl	80201e4 <HAL_UARTEx_SetRxFifoThreshold>
 8018b92:	4603      	mov	r3, r0
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d001      	beq.n	8018b9c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8018b98:	f7f1 f923 	bl	8009de2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8018b9c:	4804      	ldr	r0, [pc, #16]	; (8018bb0 <MX_USART1_UART_Init+0x90>)
 8018b9e:	f007 faaa 	bl	80200f6 <HAL_UARTEx_DisableFifoMode>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d001      	beq.n	8018bac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8018ba8:	f7f1 f91b 	bl	8009de2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8018bac:	bf00      	nop
 8018bae:	bd80      	pop	{r7, pc}
 8018bb0:	2000f878 	.word	0x2000f878
 8018bb4:	40013800 	.word	0x40013800

08018bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b09e      	sub	sp, #120	; 0x78
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018bc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	601a      	str	r2, [r3, #0]
 8018bc8:	605a      	str	r2, [r3, #4]
 8018bca:	609a      	str	r2, [r3, #8]
 8018bcc:	60da      	str	r2, [r3, #12]
 8018bce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018bd0:	f107 0314 	add.w	r3, r7, #20
 8018bd4:	2250      	movs	r2, #80	; 0x50
 8018bd6:	2100      	movs	r1, #0
 8018bd8:	4618      	mov	r0, r3
 8018bda:	f007 fbc7 	bl	802036c <memset>
  if(uartHandle->Instance==USART1)
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	4a1f      	ldr	r2, [pc, #124]	; (8018c60 <HAL_UART_MspInit+0xa8>)
 8018be4:	4293      	cmp	r3, r2
 8018be6:	d137      	bne.n	8018c58 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018be8:	2301      	movs	r3, #1
 8018bea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018bec:	2300      	movs	r3, #0
 8018bee:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018bf0:	f107 0314 	add.w	r3, r7, #20
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	f004 f891 	bl	801cd1c <HAL_RCCEx_PeriphCLKConfig>
 8018bfa:	4603      	mov	r3, r0
 8018bfc:	2b00      	cmp	r3, #0
 8018bfe:	d001      	beq.n	8018c04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018c00:	f7f1 f8ef 	bl	8009de2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018c04:	4b17      	ldr	r3, [pc, #92]	; (8018c64 <HAL_UART_MspInit+0xac>)
 8018c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c08:	4a16      	ldr	r2, [pc, #88]	; (8018c64 <HAL_UART_MspInit+0xac>)
 8018c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018c0e:	6613      	str	r3, [r2, #96]	; 0x60
 8018c10:	4b14      	ldr	r3, [pc, #80]	; (8018c64 <HAL_UART_MspInit+0xac>)
 8018c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018c18:	613b      	str	r3, [r7, #16]
 8018c1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018c1c:	4b11      	ldr	r3, [pc, #68]	; (8018c64 <HAL_UART_MspInit+0xac>)
 8018c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c20:	4a10      	ldr	r2, [pc, #64]	; (8018c64 <HAL_UART_MspInit+0xac>)
 8018c22:	f043 0301 	orr.w	r3, r3, #1
 8018c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018c28:	4b0e      	ldr	r3, [pc, #56]	; (8018c64 <HAL_UART_MspInit+0xac>)
 8018c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018c2c:	f003 0301 	and.w	r3, r3, #1
 8018c30:	60fb      	str	r3, [r7, #12]
 8018c32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8018c34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018c38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018c3a:	2302      	movs	r3, #2
 8018c3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c3e:	2300      	movs	r3, #0
 8018c40:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018c42:	2300      	movs	r3, #0
 8018c44:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018c46:	2307      	movs	r3, #7
 8018c48:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018c4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018c4e:	4619      	mov	r1, r3
 8018c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018c54:	f003 f8e4 	bl	801be20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018c58:	bf00      	nop
 8018c5a:	3778      	adds	r7, #120	; 0x78
 8018c5c:	46bd      	mov	sp, r7
 8018c5e:	bd80      	pop	{r7, pc}
 8018c60:	40013800 	.word	0x40013800
 8018c64:	40021000 	.word	0x40021000

08018c68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8018c68:	480d      	ldr	r0, [pc, #52]	; (8018ca0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8018c6a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8018c6c:	480d      	ldr	r0, [pc, #52]	; (8018ca4 <LoopForever+0x6>)
  ldr r1, =_edata
 8018c6e:	490e      	ldr	r1, [pc, #56]	; (8018ca8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8018c70:	4a0e      	ldr	r2, [pc, #56]	; (8018cac <LoopForever+0xe>)
  movs r3, #0
 8018c72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8018c74:	e002      	b.n	8018c7c <LoopCopyDataInit>

08018c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018c7a:	3304      	adds	r3, #4

08018c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018c80:	d3f9      	bcc.n	8018c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018c82:	4a0b      	ldr	r2, [pc, #44]	; (8018cb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8018c84:	4c0b      	ldr	r4, [pc, #44]	; (8018cb4 <LoopForever+0x16>)
  movs r3, #0
 8018c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018c88:	e001      	b.n	8018c8e <LoopFillZerobss>

08018c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018c8c:	3204      	adds	r2, #4

08018c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018c90:	d3fb      	bcc.n	8018c8a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8018c92:	f7fe fd7f 	bl	8017794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018c96:	f007 fb37 	bl	8020308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018c9a:	f7f0 ffa9 	bl	8009bf0 <main>

08018c9e <LoopForever>:

LoopForever:
    b LoopForever
 8018c9e:	e7fe      	b.n	8018c9e <LoopForever>
  ldr   r0, =_estack
 8018ca0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8018ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018ca8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8018cac:	08023bc8 	.word	0x08023bc8
  ldr r2, =_sbss
 8018cb0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8018cb4:	2000f91c 	.word	0x2000f91c

08018cb8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018cb8:	e7fe      	b.n	8018cb8 <ADC3_IRQHandler>
	...

08018cbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018cc2:	2300      	movs	r3, #0
 8018cc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018cc6:	4b0c      	ldr	r3, [pc, #48]	; (8018cf8 <HAL_Init+0x3c>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	4a0b      	ldr	r2, [pc, #44]	; (8018cf8 <HAL_Init+0x3c>)
 8018ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018cd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018cd2:	2003      	movs	r0, #3
 8018cd4:	f002 fb30 	bl	801b338 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018cd8:	2000      	movs	r0, #0
 8018cda:	f000 f80f 	bl	8018cfc <HAL_InitTick>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	d002      	beq.n	8018cea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018ce4:	2301      	movs	r3, #1
 8018ce6:	71fb      	strb	r3, [r7, #7]
 8018ce8:	e001      	b.n	8018cee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018cea:	f7fe fc07 	bl	80174fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018cee:	79fb      	ldrb	r3, [r7, #7]

}
 8018cf0:	4618      	mov	r0, r3
 8018cf2:	3708      	adds	r7, #8
 8018cf4:	46bd      	mov	sp, r7
 8018cf6:	bd80      	pop	{r7, pc}
 8018cf8:	40022000 	.word	0x40022000

08018cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b084      	sub	sp, #16
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018d04:	2300      	movs	r3, #0
 8018d06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8018d08:	4b16      	ldr	r3, [pc, #88]	; (8018d64 <HAL_InitTick+0x68>)
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d022      	beq.n	8018d56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8018d10:	4b15      	ldr	r3, [pc, #84]	; (8018d68 <HAL_InitTick+0x6c>)
 8018d12:	681a      	ldr	r2, [r3, #0]
 8018d14:	4b13      	ldr	r3, [pc, #76]	; (8018d64 <HAL_InitTick+0x68>)
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8018d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d24:	4618      	mov	r0, r3
 8018d26:	f002 fb3a 	bl	801b39e <HAL_SYSTICK_Config>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d10f      	bne.n	8018d50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2b0f      	cmp	r3, #15
 8018d34:	d809      	bhi.n	8018d4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018d36:	2200      	movs	r2, #0
 8018d38:	6879      	ldr	r1, [r7, #4]
 8018d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8018d3e:	f002 fb06 	bl	801b34e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8018d42:	4a0a      	ldr	r2, [pc, #40]	; (8018d6c <HAL_InitTick+0x70>)
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	6013      	str	r3, [r2, #0]
 8018d48:	e007      	b.n	8018d5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8018d4a:	2301      	movs	r3, #1
 8018d4c:	73fb      	strb	r3, [r7, #15]
 8018d4e:	e004      	b.n	8018d5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8018d50:	2301      	movs	r3, #1
 8018d52:	73fb      	strb	r3, [r7, #15]
 8018d54:	e001      	b.n	8018d5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8018d56:	2301      	movs	r3, #1
 8018d58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8018d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8018d5c:	4618      	mov	r0, r3
 8018d5e:	3710      	adds	r7, #16
 8018d60:	46bd      	mov	sp, r7
 8018d62:	bd80      	pop	{r7, pc}
 8018d64:	20000008 	.word	0x20000008
 8018d68:	20000000 	.word	0x20000000
 8018d6c:	20000004 	.word	0x20000004

08018d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018d70:	b480      	push	{r7}
 8018d72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018d74:	4b05      	ldr	r3, [pc, #20]	; (8018d8c <HAL_IncTick+0x1c>)
 8018d76:	681a      	ldr	r2, [r3, #0]
 8018d78:	4b05      	ldr	r3, [pc, #20]	; (8018d90 <HAL_IncTick+0x20>)
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	4413      	add	r3, r2
 8018d7e:	4a03      	ldr	r2, [pc, #12]	; (8018d8c <HAL_IncTick+0x1c>)
 8018d80:	6013      	str	r3, [r2, #0]
}
 8018d82:	bf00      	nop
 8018d84:	46bd      	mov	sp, r7
 8018d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d8a:	4770      	bx	lr
 8018d8c:	2000f908 	.word	0x2000f908
 8018d90:	20000008 	.word	0x20000008

08018d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018d94:	b480      	push	{r7}
 8018d96:	af00      	add	r7, sp, #0
  return uwTick;
 8018d98:	4b03      	ldr	r3, [pc, #12]	; (8018da8 <HAL_GetTick+0x14>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
}
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr
 8018da6:	bf00      	nop
 8018da8:	2000f908 	.word	0x2000f908

08018dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018dac:	b580      	push	{r7, lr}
 8018dae:	b084      	sub	sp, #16
 8018db0:	af00      	add	r7, sp, #0
 8018db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018db4:	f7ff ffee 	bl	8018d94 <HAL_GetTick>
 8018db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dc4:	d004      	beq.n	8018dd0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8018dc6:	4b09      	ldr	r3, [pc, #36]	; (8018dec <HAL_Delay+0x40>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	68fa      	ldr	r2, [r7, #12]
 8018dcc:	4413      	add	r3, r2
 8018dce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018dd0:	bf00      	nop
 8018dd2:	f7ff ffdf 	bl	8018d94 <HAL_GetTick>
 8018dd6:	4602      	mov	r2, r0
 8018dd8:	68bb      	ldr	r3, [r7, #8]
 8018dda:	1ad3      	subs	r3, r2, r3
 8018ddc:	68fa      	ldr	r2, [r7, #12]
 8018dde:	429a      	cmp	r2, r3
 8018de0:	d8f7      	bhi.n	8018dd2 <HAL_Delay+0x26>
  {
  }
}
 8018de2:	bf00      	nop
 8018de4:	bf00      	nop
 8018de6:	3710      	adds	r7, #16
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	20000008 	.word	0x20000008

08018df0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018df0:	b480      	push	{r7}
 8018df2:	b083      	sub	sp, #12
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	689b      	ldr	r3, [r3, #8]
 8018dfe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	431a      	orrs	r2, r3
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	609a      	str	r2, [r3, #8]
}
 8018e0a:	bf00      	nop
 8018e0c:	370c      	adds	r7, #12
 8018e0e:	46bd      	mov	sp, r7
 8018e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e14:	4770      	bx	lr

08018e16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018e16:	b480      	push	{r7}
 8018e18:	b083      	sub	sp, #12
 8018e1a:	af00      	add	r7, sp, #0
 8018e1c:	6078      	str	r0, [r7, #4]
 8018e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	689b      	ldr	r3, [r3, #8]
 8018e24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	431a      	orrs	r2, r3
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	609a      	str	r2, [r3, #8]
}
 8018e30:	bf00      	nop
 8018e32:	370c      	adds	r7, #12
 8018e34:	46bd      	mov	sp, r7
 8018e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e3a:	4770      	bx	lr

08018e3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018e3c:	b480      	push	{r7}
 8018e3e:	b083      	sub	sp, #12
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	689b      	ldr	r3, [r3, #8]
 8018e48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8018e4c:	4618      	mov	r0, r3
 8018e4e:	370c      	adds	r7, #12
 8018e50:	46bd      	mov	sp, r7
 8018e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e56:	4770      	bx	lr

08018e58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8018e58:	b480      	push	{r7}
 8018e5a:	b087      	sub	sp, #28
 8018e5c:	af00      	add	r7, sp, #0
 8018e5e:	60f8      	str	r0, [r7, #12]
 8018e60:	60b9      	str	r1, [r7, #8]
 8018e62:	607a      	str	r2, [r7, #4]
 8018e64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018e66:	68fb      	ldr	r3, [r7, #12]
 8018e68:	3360      	adds	r3, #96	; 0x60
 8018e6a:	461a      	mov	r2, r3
 8018e6c:	68bb      	ldr	r3, [r7, #8]
 8018e6e:	009b      	lsls	r3, r3, #2
 8018e70:	4413      	add	r3, r2
 8018e72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e74:	697b      	ldr	r3, [r7, #20]
 8018e76:	681a      	ldr	r2, [r3, #0]
 8018e78:	4b08      	ldr	r3, [pc, #32]	; (8018e9c <LL_ADC_SetOffset+0x44>)
 8018e7a:	4013      	ands	r3, r2
 8018e7c:	687a      	ldr	r2, [r7, #4]
 8018e7e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018e82:	683a      	ldr	r2, [r7, #0]
 8018e84:	430a      	orrs	r2, r1
 8018e86:	4313      	orrs	r3, r2
 8018e88:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018e8c:	697b      	ldr	r3, [r7, #20]
 8018e8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018e90:	bf00      	nop
 8018e92:	371c      	adds	r7, #28
 8018e94:	46bd      	mov	sp, r7
 8018e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9a:	4770      	bx	lr
 8018e9c:	03fff000 	.word	0x03fff000

08018ea0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018ea0:	b480      	push	{r7}
 8018ea2:	b085      	sub	sp, #20
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	6078      	str	r0, [r7, #4]
 8018ea8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	3360      	adds	r3, #96	; 0x60
 8018eae:	461a      	mov	r2, r3
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	009b      	lsls	r3, r3, #2
 8018eb4:	4413      	add	r3, r2
 8018eb6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	3714      	adds	r7, #20
 8018ec4:	46bd      	mov	sp, r7
 8018ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eca:	4770      	bx	lr

08018ecc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018ecc:	b480      	push	{r7}
 8018ece:	b087      	sub	sp, #28
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	60f8      	str	r0, [r7, #12]
 8018ed4:	60b9      	str	r1, [r7, #8]
 8018ed6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	3360      	adds	r3, #96	; 0x60
 8018edc:	461a      	mov	r2, r3
 8018ede:	68bb      	ldr	r3, [r7, #8]
 8018ee0:	009b      	lsls	r3, r3, #2
 8018ee2:	4413      	add	r3, r2
 8018ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	431a      	orrs	r2, r3
 8018ef2:	697b      	ldr	r3, [r7, #20]
 8018ef4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018ef6:	bf00      	nop
 8018ef8:	371c      	adds	r7, #28
 8018efa:	46bd      	mov	sp, r7
 8018efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f00:	4770      	bx	lr

08018f02 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8018f02:	b480      	push	{r7}
 8018f04:	b087      	sub	sp, #28
 8018f06:	af00      	add	r7, sp, #0
 8018f08:	60f8      	str	r0, [r7, #12]
 8018f0a:	60b9      	str	r1, [r7, #8]
 8018f0c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018f0e:	68fb      	ldr	r3, [r7, #12]
 8018f10:	3360      	adds	r3, #96	; 0x60
 8018f12:	461a      	mov	r2, r3
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	009b      	lsls	r3, r3, #2
 8018f18:	4413      	add	r3, r2
 8018f1a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	431a      	orrs	r2, r3
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8018f2c:	bf00      	nop
 8018f2e:	371c      	adds	r7, #28
 8018f30:	46bd      	mov	sp, r7
 8018f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f36:	4770      	bx	lr

08018f38 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8018f38:	b480      	push	{r7}
 8018f3a:	b087      	sub	sp, #28
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	60f8      	str	r0, [r7, #12]
 8018f40:	60b9      	str	r1, [r7, #8]
 8018f42:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	3360      	adds	r3, #96	; 0x60
 8018f48:	461a      	mov	r2, r3
 8018f4a:	68bb      	ldr	r3, [r7, #8]
 8018f4c:	009b      	lsls	r3, r3, #2
 8018f4e:	4413      	add	r3, r2
 8018f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	431a      	orrs	r2, r3
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8018f62:	bf00      	nop
 8018f64:	371c      	adds	r7, #28
 8018f66:	46bd      	mov	sp, r7
 8018f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6c:	4770      	bx	lr

08018f6e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018f6e:	b480      	push	{r7}
 8018f70:	b083      	sub	sp, #12
 8018f72:	af00      	add	r7, sp, #0
 8018f74:	6078      	str	r0, [r7, #4]
 8018f76:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	695b      	ldr	r3, [r3, #20]
 8018f7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018f80:	683b      	ldr	r3, [r7, #0]
 8018f82:	431a      	orrs	r2, r3
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	615a      	str	r2, [r3, #20]
}
 8018f88:	bf00      	nop
 8018f8a:	370c      	adds	r7, #12
 8018f8c:	46bd      	mov	sp, r7
 8018f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f92:	4770      	bx	lr

08018f94 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018f94:	b480      	push	{r7}
 8018f96:	b083      	sub	sp, #12
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	68db      	ldr	r3, [r3, #12]
 8018fa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d101      	bne.n	8018fac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018fa8:	2301      	movs	r3, #1
 8018faa:	e000      	b.n	8018fae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018fac:	2300      	movs	r3, #0
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	370c      	adds	r7, #12
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb8:	4770      	bx	lr

08018fba <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018fba:	b480      	push	{r7}
 8018fbc:	b087      	sub	sp, #28
 8018fbe:	af00      	add	r7, sp, #0
 8018fc0:	60f8      	str	r0, [r7, #12]
 8018fc2:	60b9      	str	r1, [r7, #8]
 8018fc4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	3330      	adds	r3, #48	; 0x30
 8018fca:	461a      	mov	r2, r3
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	0a1b      	lsrs	r3, r3, #8
 8018fd0:	009b      	lsls	r3, r3, #2
 8018fd2:	f003 030c 	and.w	r3, r3, #12
 8018fd6:	4413      	add	r3, r2
 8018fd8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	681a      	ldr	r2, [r3, #0]
 8018fde:	68bb      	ldr	r3, [r7, #8]
 8018fe0:	f003 031f 	and.w	r3, r3, #31
 8018fe4:	211f      	movs	r1, #31
 8018fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8018fea:	43db      	mvns	r3, r3
 8018fec:	401a      	ands	r2, r3
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	0e9b      	lsrs	r3, r3, #26
 8018ff2:	f003 011f 	and.w	r1, r3, #31
 8018ff6:	68bb      	ldr	r3, [r7, #8]
 8018ff8:	f003 031f 	and.w	r3, r3, #31
 8018ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8019000:	431a      	orrs	r2, r3
 8019002:	697b      	ldr	r3, [r7, #20]
 8019004:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8019006:	bf00      	nop
 8019008:	371c      	adds	r7, #28
 801900a:	46bd      	mov	sp, r7
 801900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019010:	4770      	bx	lr

08019012 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8019012:	b480      	push	{r7}
 8019014:	b083      	sub	sp, #12
 8019016:	af00      	add	r7, sp, #0
 8019018:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801901e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8019022:	2b00      	cmp	r3, #0
 8019024:	d101      	bne.n	801902a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8019026:	2301      	movs	r3, #1
 8019028:	e000      	b.n	801902c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 801902a:	2300      	movs	r3, #0
}
 801902c:	4618      	mov	r0, r3
 801902e:	370c      	adds	r7, #12
 8019030:	46bd      	mov	sp, r7
 8019032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019036:	4770      	bx	lr

08019038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8019038:	b480      	push	{r7}
 801903a:	b087      	sub	sp, #28
 801903c:	af00      	add	r7, sp, #0
 801903e:	60f8      	str	r0, [r7, #12]
 8019040:	60b9      	str	r1, [r7, #8]
 8019042:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8019044:	68fb      	ldr	r3, [r7, #12]
 8019046:	3314      	adds	r3, #20
 8019048:	461a      	mov	r2, r3
 801904a:	68bb      	ldr	r3, [r7, #8]
 801904c:	0e5b      	lsrs	r3, r3, #25
 801904e:	009b      	lsls	r3, r3, #2
 8019050:	f003 0304 	and.w	r3, r3, #4
 8019054:	4413      	add	r3, r2
 8019056:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019058:	697b      	ldr	r3, [r7, #20]
 801905a:	681a      	ldr	r2, [r3, #0]
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	0d1b      	lsrs	r3, r3, #20
 8019060:	f003 031f 	and.w	r3, r3, #31
 8019064:	2107      	movs	r1, #7
 8019066:	fa01 f303 	lsl.w	r3, r1, r3
 801906a:	43db      	mvns	r3, r3
 801906c:	401a      	ands	r2, r3
 801906e:	68bb      	ldr	r3, [r7, #8]
 8019070:	0d1b      	lsrs	r3, r3, #20
 8019072:	f003 031f 	and.w	r3, r3, #31
 8019076:	6879      	ldr	r1, [r7, #4]
 8019078:	fa01 f303 	lsl.w	r3, r1, r3
 801907c:	431a      	orrs	r2, r3
 801907e:	697b      	ldr	r3, [r7, #20]
 8019080:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8019082:	bf00      	nop
 8019084:	371c      	adds	r7, #28
 8019086:	46bd      	mov	sp, r7
 8019088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801908c:	4770      	bx	lr
	...

08019090 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8019090:	b480      	push	{r7}
 8019092:	b085      	sub	sp, #20
 8019094:	af00      	add	r7, sp, #0
 8019096:	60f8      	str	r0, [r7, #12]
 8019098:	60b9      	str	r1, [r7, #8]
 801909a:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	4a0f      	ldr	r2, [pc, #60]	; (80190dc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80190a0:	4293      	cmp	r3, r2
 80190a2:	d10a      	bne.n	80190ba <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80190aa:	68bb      	ldr	r3, [r7, #8]
 80190ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190b0:	431a      	orrs	r2, r3
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80190b8:	e00a      	b.n	80190d0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190c6:	43db      	mvns	r3, r3
 80190c8:	401a      	ands	r2, r3
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80190d0:	bf00      	nop
 80190d2:	3714      	adds	r7, #20
 80190d4:	46bd      	mov	sp, r7
 80190d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190da:	4770      	bx	lr
 80190dc:	407f0000 	.word	0x407f0000

080190e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80190e0:	b480      	push	{r7}
 80190e2:	b083      	sub	sp, #12
 80190e4:	af00      	add	r7, sp, #0
 80190e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80190e8:	687b      	ldr	r3, [r7, #4]
 80190ea:	689b      	ldr	r3, [r3, #8]
 80190ec:	f003 031f 	and.w	r3, r3, #31
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	370c      	adds	r7, #12
 80190f4:	46bd      	mov	sp, r7
 80190f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fa:	4770      	bx	lr

080190fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80190fc:	b480      	push	{r7}
 80190fe:	b083      	sub	sp, #12
 8019100:	af00      	add	r7, sp, #0
 8019102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	689b      	ldr	r3, [r3, #8]
 8019108:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 801910c:	4618      	mov	r0, r3
 801910e:	370c      	adds	r7, #12
 8019110:	46bd      	mov	sp, r7
 8019112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019116:	4770      	bx	lr

08019118 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8019118:	b480      	push	{r7}
 801911a:	b083      	sub	sp, #12
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	689b      	ldr	r3, [r3, #8]
 8019124:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8019128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801912c:	687a      	ldr	r2, [r7, #4]
 801912e:	6093      	str	r3, [r2, #8]
}
 8019130:	bf00      	nop
 8019132:	370c      	adds	r7, #12
 8019134:	46bd      	mov	sp, r7
 8019136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913a:	4770      	bx	lr

0801913c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 801913c:	b480      	push	{r7}
 801913e:	b083      	sub	sp, #12
 8019140:	af00      	add	r7, sp, #0
 8019142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	689b      	ldr	r3, [r3, #8]
 8019148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801914c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019150:	d101      	bne.n	8019156 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8019152:	2301      	movs	r3, #1
 8019154:	e000      	b.n	8019158 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8019156:	2300      	movs	r3, #0
}
 8019158:	4618      	mov	r0, r3
 801915a:	370c      	adds	r7, #12
 801915c:	46bd      	mov	sp, r7
 801915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019162:	4770      	bx	lr

08019164 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	689b      	ldr	r3, [r3, #8]
 8019170:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8019174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8019180:	bf00      	nop
 8019182:	370c      	adds	r7, #12
 8019184:	46bd      	mov	sp, r7
 8019186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801918a:	4770      	bx	lr

0801918c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 801918c:	b480      	push	{r7}
 801918e:	b083      	sub	sp, #12
 8019190:	af00      	add	r7, sp, #0
 8019192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	689b      	ldr	r3, [r3, #8]
 8019198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801919c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80191a0:	d101      	bne.n	80191a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80191a2:	2301      	movs	r3, #1
 80191a4:	e000      	b.n	80191a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80191a6:	2300      	movs	r3, #0
}
 80191a8:	4618      	mov	r0, r3
 80191aa:	370c      	adds	r7, #12
 80191ac:	46bd      	mov	sp, r7
 80191ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b2:	4770      	bx	lr

080191b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80191b4:	b480      	push	{r7}
 80191b6:	b083      	sub	sp, #12
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	689b      	ldr	r3, [r3, #8]
 80191c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80191c8:	f043 0201 	orr.w	r2, r3, #1
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80191d0:	bf00      	nop
 80191d2:	370c      	adds	r7, #12
 80191d4:	46bd      	mov	sp, r7
 80191d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191da:	4770      	bx	lr

080191dc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80191dc:	b480      	push	{r7}
 80191de:	b083      	sub	sp, #12
 80191e0:	af00      	add	r7, sp, #0
 80191e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	689b      	ldr	r3, [r3, #8]
 80191e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80191ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80191f0:	f043 0202 	orr.w	r2, r3, #2
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80191f8:	bf00      	nop
 80191fa:	370c      	adds	r7, #12
 80191fc:	46bd      	mov	sp, r7
 80191fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019202:	4770      	bx	lr

08019204 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8019204:	b480      	push	{r7}
 8019206:	b083      	sub	sp, #12
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	689b      	ldr	r3, [r3, #8]
 8019210:	f003 0301 	and.w	r3, r3, #1
 8019214:	2b01      	cmp	r3, #1
 8019216:	d101      	bne.n	801921c <LL_ADC_IsEnabled+0x18>
 8019218:	2301      	movs	r3, #1
 801921a:	e000      	b.n	801921e <LL_ADC_IsEnabled+0x1a>
 801921c:	2300      	movs	r3, #0
}
 801921e:	4618      	mov	r0, r3
 8019220:	370c      	adds	r7, #12
 8019222:	46bd      	mov	sp, r7
 8019224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019228:	4770      	bx	lr

0801922a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 801922a:	b480      	push	{r7}
 801922c:	b083      	sub	sp, #12
 801922e:	af00      	add	r7, sp, #0
 8019230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	689b      	ldr	r3, [r3, #8]
 8019236:	f003 0302 	and.w	r3, r3, #2
 801923a:	2b02      	cmp	r3, #2
 801923c:	d101      	bne.n	8019242 <LL_ADC_IsDisableOngoing+0x18>
 801923e:	2301      	movs	r3, #1
 8019240:	e000      	b.n	8019244 <LL_ADC_IsDisableOngoing+0x1a>
 8019242:	2300      	movs	r3, #0
}
 8019244:	4618      	mov	r0, r3
 8019246:	370c      	adds	r7, #12
 8019248:	46bd      	mov	sp, r7
 801924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801924e:	4770      	bx	lr

08019250 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8019250:	b480      	push	{r7}
 8019252:	b083      	sub	sp, #12
 8019254:	af00      	add	r7, sp, #0
 8019256:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019258:	687b      	ldr	r3, [r7, #4]
 801925a:	689b      	ldr	r3, [r3, #8]
 801925c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019260:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019264:	f043 0204 	orr.w	r2, r3, #4
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801926c:	bf00      	nop
 801926e:	370c      	adds	r7, #12
 8019270:	46bd      	mov	sp, r7
 8019272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019276:	4770      	bx	lr

08019278 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8019278:	b480      	push	{r7}
 801927a:	b083      	sub	sp, #12
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	689b      	ldr	r3, [r3, #8]
 8019284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801928c:	f043 0210 	orr.w	r2, r3, #16
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8019294:	bf00      	nop
 8019296:	370c      	adds	r7, #12
 8019298:	46bd      	mov	sp, r7
 801929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801929e:	4770      	bx	lr

080192a0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80192a0:	b480      	push	{r7}
 80192a2:	b083      	sub	sp, #12
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	689b      	ldr	r3, [r3, #8]
 80192ac:	f003 0304 	and.w	r3, r3, #4
 80192b0:	2b04      	cmp	r3, #4
 80192b2:	d101      	bne.n	80192b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80192b4:	2301      	movs	r3, #1
 80192b6:	e000      	b.n	80192ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80192b8:	2300      	movs	r3, #0
}
 80192ba:	4618      	mov	r0, r3
 80192bc:	370c      	adds	r7, #12
 80192be:	46bd      	mov	sp, r7
 80192c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c4:	4770      	bx	lr

080192c6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80192c6:	b480      	push	{r7}
 80192c8:	b083      	sub	sp, #12
 80192ca:	af00      	add	r7, sp, #0
 80192cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	689b      	ldr	r3, [r3, #8]
 80192d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80192d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80192da:	f043 0220 	orr.w	r2, r3, #32
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80192e2:	bf00      	nop
 80192e4:	370c      	adds	r7, #12
 80192e6:	46bd      	mov	sp, r7
 80192e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ec:	4770      	bx	lr

080192ee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80192ee:	b480      	push	{r7}
 80192f0:	b083      	sub	sp, #12
 80192f2:	af00      	add	r7, sp, #0
 80192f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	689b      	ldr	r3, [r3, #8]
 80192fa:	f003 0308 	and.w	r3, r3, #8
 80192fe:	2b08      	cmp	r3, #8
 8019300:	d101      	bne.n	8019306 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8019302:	2301      	movs	r3, #1
 8019304:	e000      	b.n	8019308 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019306:	2300      	movs	r3, #0
}
 8019308:	4618      	mov	r0, r3
 801930a:	370c      	adds	r7, #12
 801930c:	46bd      	mov	sp, r7
 801930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019312:	4770      	bx	lr

08019314 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019314:	b590      	push	{r4, r7, lr}
 8019316:	b089      	sub	sp, #36	; 0x24
 8019318:	af00      	add	r7, sp, #0
 801931a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801931c:	2300      	movs	r3, #0
 801931e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019320:	2300      	movs	r3, #0
 8019322:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	2b00      	cmp	r3, #0
 8019328:	d101      	bne.n	801932e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 801932a:	2301      	movs	r3, #1
 801932c:	e1a1      	b.n	8019672 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	695b      	ldr	r3, [r3, #20]
 8019332:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019338:	2b00      	cmp	r3, #0
 801933a:	d109      	bne.n	8019350 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801933c:	6878      	ldr	r0, [r7, #4]
 801933e:	f7ee ff03 	bl	8008148 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	2200      	movs	r2, #0
 8019346:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2200      	movs	r2, #0
 801934c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	4618      	mov	r0, r3
 8019356:	f7ff fef1 	bl	801913c <LL_ADC_IsDeepPowerDownEnabled>
 801935a:	4603      	mov	r3, r0
 801935c:	2b00      	cmp	r3, #0
 801935e:	d004      	beq.n	801936a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8019360:	687b      	ldr	r3, [r7, #4]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	4618      	mov	r0, r3
 8019366:	f7ff fed7 	bl	8019118 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	4618      	mov	r0, r3
 8019370:	f7ff ff0c 	bl	801918c <LL_ADC_IsInternalRegulatorEnabled>
 8019374:	4603      	mov	r3, r0
 8019376:	2b00      	cmp	r3, #0
 8019378:	d115      	bne.n	80193a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	4618      	mov	r0, r3
 8019380:	f7ff fef0 	bl	8019164 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019384:	4b9a      	ldr	r3, [pc, #616]	; (80195f0 <HAL_ADC_Init+0x2dc>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	099b      	lsrs	r3, r3, #6
 801938a:	4a9a      	ldr	r2, [pc, #616]	; (80195f4 <HAL_ADC_Init+0x2e0>)
 801938c:	fba2 2303 	umull	r2, r3, r2, r3
 8019390:	099b      	lsrs	r3, r3, #6
 8019392:	3301      	adds	r3, #1
 8019394:	005b      	lsls	r3, r3, #1
 8019396:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019398:	e002      	b.n	80193a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 801939a:	68bb      	ldr	r3, [r7, #8]
 801939c:	3b01      	subs	r3, #1
 801939e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80193a0:	68bb      	ldr	r3, [r7, #8]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d1f9      	bne.n	801939a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7ff feee 	bl	801918c <LL_ADC_IsInternalRegulatorEnabled>
 80193b0:	4603      	mov	r3, r0
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d10d      	bne.n	80193d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193ba:	f043 0210 	orr.w	r2, r3, #16
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80193c6:	f043 0201 	orr.w	r2, r3, #1
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80193ce:	2301      	movs	r3, #1
 80193d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	4618      	mov	r0, r3
 80193d8:	f7ff ff62 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 80193dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193e2:	f003 0310 	and.w	r3, r3, #16
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	f040 813a 	bne.w	8019660 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80193ec:	697b      	ldr	r3, [r7, #20]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	f040 8136 	bne.w	8019660 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80193fc:	f043 0202 	orr.w	r2, r3, #2
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	681b      	ldr	r3, [r3, #0]
 8019408:	4618      	mov	r0, r3
 801940a:	f7ff fefb 	bl	8019204 <LL_ADC_IsEnabled>
 801940e:	4603      	mov	r3, r0
 8019410:	2b00      	cmp	r3, #0
 8019412:	d137      	bne.n	8019484 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801941c:	d004      	beq.n	8019428 <HAL_ADC_Init+0x114>
 801941e:	687b      	ldr	r3, [r7, #4]
 8019420:	681b      	ldr	r3, [r3, #0]
 8019422:	4a75      	ldr	r2, [pc, #468]	; (80195f8 <HAL_ADC_Init+0x2e4>)
 8019424:	4293      	cmp	r3, r2
 8019426:	d10f      	bne.n	8019448 <HAL_ADC_Init+0x134>
 8019428:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801942c:	f7ff feea 	bl	8019204 <LL_ADC_IsEnabled>
 8019430:	4604      	mov	r4, r0
 8019432:	4871      	ldr	r0, [pc, #452]	; (80195f8 <HAL_ADC_Init+0x2e4>)
 8019434:	f7ff fee6 	bl	8019204 <LL_ADC_IsEnabled>
 8019438:	4603      	mov	r3, r0
 801943a:	4323      	orrs	r3, r4
 801943c:	2b00      	cmp	r3, #0
 801943e:	bf0c      	ite	eq
 8019440:	2301      	moveq	r3, #1
 8019442:	2300      	movne	r3, #0
 8019444:	b2db      	uxtb	r3, r3
 8019446:	e008      	b.n	801945a <HAL_ADC_Init+0x146>
 8019448:	486c      	ldr	r0, [pc, #432]	; (80195fc <HAL_ADC_Init+0x2e8>)
 801944a:	f7ff fedb 	bl	8019204 <LL_ADC_IsEnabled>
 801944e:	4603      	mov	r3, r0
 8019450:	2b00      	cmp	r3, #0
 8019452:	bf0c      	ite	eq
 8019454:	2301      	moveq	r3, #1
 8019456:	2300      	movne	r3, #0
 8019458:	b2db      	uxtb	r3, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	d012      	beq.n	8019484 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	681b      	ldr	r3, [r3, #0]
 8019462:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019466:	d004      	beq.n	8019472 <HAL_ADC_Init+0x15e>
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	4a62      	ldr	r2, [pc, #392]	; (80195f8 <HAL_ADC_Init+0x2e4>)
 801946e:	4293      	cmp	r3, r2
 8019470:	d101      	bne.n	8019476 <HAL_ADC_Init+0x162>
 8019472:	4a63      	ldr	r2, [pc, #396]	; (8019600 <HAL_ADC_Init+0x2ec>)
 8019474:	e000      	b.n	8019478 <HAL_ADC_Init+0x164>
 8019476:	4a63      	ldr	r2, [pc, #396]	; (8019604 <HAL_ADC_Init+0x2f0>)
 8019478:	687b      	ldr	r3, [r7, #4]
 801947a:	685b      	ldr	r3, [r3, #4]
 801947c:	4619      	mov	r1, r3
 801947e:	4610      	mov	r0, r2
 8019480:	f7ff fcb6 	bl	8018df0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	7f5b      	ldrb	r3, [r3, #29]
 8019488:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801948e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019494:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801949a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80194a2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80194a4:	4313      	orrs	r3, r2
 80194a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80194ae:	2b01      	cmp	r3, #1
 80194b0:	d106      	bne.n	80194c0 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194b6:	3b01      	subs	r3, #1
 80194b8:	045b      	lsls	r3, r3, #17
 80194ba:	69ba      	ldr	r2, [r7, #24]
 80194bc:	4313      	orrs	r3, r2
 80194be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194c4:	2b00      	cmp	r3, #0
 80194c6:	d009      	beq.n	80194dc <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194cc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194d4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80194d6:	69ba      	ldr	r2, [r7, #24]
 80194d8:	4313      	orrs	r3, r2
 80194da:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	68da      	ldr	r2, [r3, #12]
 80194e2:	4b49      	ldr	r3, [pc, #292]	; (8019608 <HAL_ADC_Init+0x2f4>)
 80194e4:	4013      	ands	r3, r2
 80194e6:	687a      	ldr	r2, [r7, #4]
 80194e8:	6812      	ldr	r2, [r2, #0]
 80194ea:	69b9      	ldr	r1, [r7, #24]
 80194ec:	430b      	orrs	r3, r1
 80194ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	691b      	ldr	r3, [r3, #16]
 80194f6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	430a      	orrs	r2, r1
 8019504:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	681b      	ldr	r3, [r3, #0]
 801950a:	4618      	mov	r0, r3
 801950c:	f7ff fec8 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 8019510:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	681b      	ldr	r3, [r3, #0]
 8019516:	4618      	mov	r0, r3
 8019518:	f7ff fee9 	bl	80192ee <LL_ADC_INJ_IsConversionOngoing>
 801951c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801951e:	693b      	ldr	r3, [r7, #16]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d17b      	bne.n	801961c <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019524:	68fb      	ldr	r3, [r7, #12]
 8019526:	2b00      	cmp	r3, #0
 8019528:	d178      	bne.n	801961c <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 801952e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019536:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019538:	4313      	orrs	r3, r2
 801953a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	68db      	ldr	r3, [r3, #12]
 8019542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019546:	f023 0302 	bic.w	r3, r3, #2
 801954a:	687a      	ldr	r2, [r7, #4]
 801954c:	6812      	ldr	r2, [r2, #0]
 801954e:	69b9      	ldr	r1, [r7, #24]
 8019550:	430b      	orrs	r3, r1
 8019552:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8019554:	687b      	ldr	r3, [r7, #4]
 8019556:	691b      	ldr	r3, [r3, #16]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d017      	beq.n	801958c <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	691a      	ldr	r2, [r3, #16]
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801956a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	681b      	ldr	r3, [r3, #0]
 8019570:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019574:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801957c:	687a      	ldr	r2, [r7, #4]
 801957e:	6911      	ldr	r1, [r2, #16]
 8019580:	687a      	ldr	r2, [r7, #4]
 8019582:	6812      	ldr	r2, [r2, #0]
 8019584:	430b      	orrs	r3, r1
 8019586:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 801958a:	e013      	b.n	80195b4 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	691a      	ldr	r2, [r3, #16]
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801959a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80195a4:	687a      	ldr	r2, [r7, #4]
 80195a6:	6812      	ldr	r2, [r2, #0]
 80195a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80195ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80195b0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80195ba:	2b01      	cmp	r3, #1
 80195bc:	d126      	bne.n	801960c <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	691b      	ldr	r3, [r3, #16]
 80195c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80195c8:	f023 0304 	bic.w	r3, r3, #4
 80195cc:	687a      	ldr	r2, [r7, #4]
 80195ce:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80195d0:	687a      	ldr	r2, [r7, #4]
 80195d2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80195d4:	4311      	orrs	r1, r2
 80195d6:	687a      	ldr	r2, [r7, #4]
 80195d8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80195da:	4311      	orrs	r1, r2
 80195dc:	687a      	ldr	r2, [r7, #4]
 80195de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80195e0:	430a      	orrs	r2, r1
 80195e2:	431a      	orrs	r2, r3
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f042 0201 	orr.w	r2, r2, #1
 80195ec:	611a      	str	r2, [r3, #16]
 80195ee:	e015      	b.n	801961c <HAL_ADC_Init+0x308>
 80195f0:	20000000 	.word	0x20000000
 80195f4:	053e2d63 	.word	0x053e2d63
 80195f8:	50000100 	.word	0x50000100
 80195fc:	50000400 	.word	0x50000400
 8019600:	50000300 	.word	0x50000300
 8019604:	50000700 	.word	0x50000700
 8019608:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 801960c:	687b      	ldr	r3, [r7, #4]
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	691a      	ldr	r2, [r3, #16]
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	f022 0201 	bic.w	r2, r2, #1
 801961a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	695b      	ldr	r3, [r3, #20]
 8019620:	2b01      	cmp	r3, #1
 8019622:	d10c      	bne.n	801963e <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801962a:	f023 010f 	bic.w	r1, r3, #15
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6a1b      	ldr	r3, [r3, #32]
 8019632:	1e5a      	subs	r2, r3, #1
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	430a      	orrs	r2, r1
 801963a:	631a      	str	r2, [r3, #48]	; 0x30
 801963c:	e007      	b.n	801964e <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	f022 020f 	bic.w	r2, r2, #15
 801964c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019652:	f023 0303 	bic.w	r3, r3, #3
 8019656:	f043 0201 	orr.w	r2, r3, #1
 801965a:	687b      	ldr	r3, [r7, #4]
 801965c:	65da      	str	r2, [r3, #92]	; 0x5c
 801965e:	e007      	b.n	8019670 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019664:	f043 0210 	orr.w	r2, r3, #16
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801966c:	2301      	movs	r3, #1
 801966e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8019670:	7ffb      	ldrb	r3, [r7, #31]
}
 8019672:	4618      	mov	r0, r3
 8019674:	3724      	adds	r7, #36	; 0x24
 8019676:	46bd      	mov	sp, r7
 8019678:	bd90      	pop	{r4, r7, pc}
 801967a:	bf00      	nop

0801967c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 801967c:	b580      	push	{r7, lr}
 801967e:	b086      	sub	sp, #24
 8019680:	af00      	add	r7, sp, #0
 8019682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801968c:	d004      	beq.n	8019698 <HAL_ADC_Start+0x1c>
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	4a5c      	ldr	r2, [pc, #368]	; (8019804 <HAL_ADC_Start+0x188>)
 8019694:	4293      	cmp	r3, r2
 8019696:	d101      	bne.n	801969c <HAL_ADC_Start+0x20>
 8019698:	4b5b      	ldr	r3, [pc, #364]	; (8019808 <HAL_ADC_Start+0x18c>)
 801969a:	e000      	b.n	801969e <HAL_ADC_Start+0x22>
 801969c:	4b5b      	ldr	r3, [pc, #364]	; (801980c <HAL_ADC_Start+0x190>)
 801969e:	4618      	mov	r0, r3
 80196a0:	f7ff fd1e 	bl	80190e0 <LL_ADC_GetMultimode>
 80196a4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	681b      	ldr	r3, [r3, #0]
 80196aa:	4618      	mov	r0, r3
 80196ac:	f7ff fdf8 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 80196b0:	4603      	mov	r3, r0
 80196b2:	2b00      	cmp	r3, #0
 80196b4:	f040 809f 	bne.w	80197f6 <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80196be:	2b01      	cmp	r3, #1
 80196c0:	d101      	bne.n	80196c6 <HAL_ADC_Start+0x4a>
 80196c2:	2302      	movs	r3, #2
 80196c4:	e09a      	b.n	80197fc <HAL_ADC_Start+0x180>
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	2201      	movs	r2, #1
 80196ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80196ce:	6878      	ldr	r0, [r7, #4]
 80196d0:	f001 fa3e 	bl	801ab50 <ADC_Enable>
 80196d4:	4603      	mov	r3, r0
 80196d6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80196d8:	7dfb      	ldrb	r3, [r7, #23]
 80196da:	2b00      	cmp	r3, #0
 80196dc:	f040 8086 	bne.w	80197ec <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80196e8:	f023 0301 	bic.w	r3, r3, #1
 80196ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80196f4:	687b      	ldr	r3, [r7, #4]
 80196f6:	681b      	ldr	r3, [r3, #0]
 80196f8:	4a42      	ldr	r2, [pc, #264]	; (8019804 <HAL_ADC_Start+0x188>)
 80196fa:	4293      	cmp	r3, r2
 80196fc:	d002      	beq.n	8019704 <HAL_ADC_Start+0x88>
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	681b      	ldr	r3, [r3, #0]
 8019702:	e001      	b.n	8019708 <HAL_ADC_Start+0x8c>
 8019704:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019708:	687a      	ldr	r2, [r7, #4]
 801970a:	6812      	ldr	r2, [r2, #0]
 801970c:	4293      	cmp	r3, r2
 801970e:	d002      	beq.n	8019716 <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019710:	693b      	ldr	r3, [r7, #16]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d105      	bne.n	8019722 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019716:	687b      	ldr	r3, [r7, #4]
 8019718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801971a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801972a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801972e:	d106      	bne.n	801973e <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019734:	f023 0206 	bic.w	r2, r3, #6
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	661a      	str	r2, [r3, #96]	; 0x60
 801973c:	e002      	b.n	8019744 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	2200      	movs	r2, #0
 8019742:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	221c      	movs	r2, #28
 801974a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	2200      	movs	r2, #0
 8019750:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	4a2a      	ldr	r2, [pc, #168]	; (8019804 <HAL_ADC_Start+0x188>)
 801975a:	4293      	cmp	r3, r2
 801975c:	d002      	beq.n	8019764 <HAL_ADC_Start+0xe8>
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	e001      	b.n	8019768 <HAL_ADC_Start+0xec>
 8019764:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019768:	687a      	ldr	r2, [r7, #4]
 801976a:	6812      	ldr	r2, [r2, #0]
 801976c:	4293      	cmp	r3, r2
 801976e:	d008      	beq.n	8019782 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019770:	693b      	ldr	r3, [r7, #16]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d005      	beq.n	8019782 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019776:	693b      	ldr	r3, [r7, #16]
 8019778:	2b05      	cmp	r3, #5
 801977a:	d002      	beq.n	8019782 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801977c:	693b      	ldr	r3, [r7, #16]
 801977e:	2b09      	cmp	r3, #9
 8019780:	d114      	bne.n	80197ac <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	68db      	ldr	r3, [r3, #12]
 8019788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801978c:	2b00      	cmp	r3, #0
 801978e:	d007      	beq.n	80197a0 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019798:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	4618      	mov	r0, r3
 80197a6:	f7ff fd53 	bl	8019250 <LL_ADC_REG_StartConversion>
 80197aa:	e026      	b.n	80197fa <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4a11      	ldr	r2, [pc, #68]	; (8019804 <HAL_ADC_Start+0x188>)
 80197be:	4293      	cmp	r3, r2
 80197c0:	d002      	beq.n	80197c8 <HAL_ADC_Start+0x14c>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	e001      	b.n	80197cc <HAL_ADC_Start+0x150>
 80197c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80197cc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	68db      	ldr	r3, [r3, #12]
 80197d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d00f      	beq.n	80197fa <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197de:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80197e2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80197ea:	e006      	b.n	80197fa <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	2200      	movs	r2, #0
 80197f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80197f4:	e001      	b.n	80197fa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80197f6:	2302      	movs	r3, #2
 80197f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80197fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80197fc:	4618      	mov	r0, r3
 80197fe:	3718      	adds	r7, #24
 8019800:	46bd      	mov	sp, r7
 8019802:	bd80      	pop	{r7, pc}
 8019804:	50000100 	.word	0x50000100
 8019808:	50000300 	.word	0x50000300
 801980c:	50000700 	.word	0x50000700

08019810 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8019810:	b580      	push	{r7, lr}
 8019812:	b084      	sub	sp, #16
 8019814:	af00      	add	r7, sp, #0
 8019816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801981e:	2b01      	cmp	r3, #1
 8019820:	d101      	bne.n	8019826 <HAL_ADC_Stop+0x16>
 8019822:	2302      	movs	r3, #2
 8019824:	e023      	b.n	801986e <HAL_ADC_Stop+0x5e>
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	2201      	movs	r2, #1
 801982a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801982e:	2103      	movs	r1, #3
 8019830:	6878      	ldr	r0, [r7, #4]
 8019832:	f001 f8d1 	bl	801a9d8 <ADC_ConversionStop>
 8019836:	4603      	mov	r3, r0
 8019838:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801983a:	7bfb      	ldrb	r3, [r7, #15]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d111      	bne.n	8019864 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f001 f9e7 	bl	801ac14 <ADC_Disable>
 8019846:	4603      	mov	r3, r0
 8019848:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801984a:	7bfb      	ldrb	r3, [r7, #15]
 801984c:	2b00      	cmp	r3, #0
 801984e:	d109      	bne.n	8019864 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019854:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019858:	f023 0301 	bic.w	r3, r3, #1
 801985c:	f043 0201 	orr.w	r2, r3, #1
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	2200      	movs	r2, #0
 8019868:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801986c:	7bfb      	ldrb	r3, [r7, #15]
}
 801986e:	4618      	mov	r0, r3
 8019870:	3710      	adds	r7, #16
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
	...

08019878 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b088      	sub	sp, #32
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801988a:	d004      	beq.n	8019896 <HAL_ADC_PollForConversion+0x1e>
 801988c:	687b      	ldr	r3, [r7, #4]
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	4a70      	ldr	r2, [pc, #448]	; (8019a54 <HAL_ADC_PollForConversion+0x1dc>)
 8019892:	4293      	cmp	r3, r2
 8019894:	d101      	bne.n	801989a <HAL_ADC_PollForConversion+0x22>
 8019896:	4b70      	ldr	r3, [pc, #448]	; (8019a58 <HAL_ADC_PollForConversion+0x1e0>)
 8019898:	e000      	b.n	801989c <HAL_ADC_PollForConversion+0x24>
 801989a:	4b70      	ldr	r3, [pc, #448]	; (8019a5c <HAL_ADC_PollForConversion+0x1e4>)
 801989c:	4618      	mov	r0, r3
 801989e:	f7ff fc1f 	bl	80190e0 <LL_ADC_GetMultimode>
 80198a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80198a4:	687b      	ldr	r3, [r7, #4]
 80198a6:	699b      	ldr	r3, [r3, #24]
 80198a8:	2b08      	cmp	r3, #8
 80198aa:	d102      	bne.n	80198b2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80198ac:	2308      	movs	r3, #8
 80198ae:	61fb      	str	r3, [r7, #28]
 80198b0:	e037      	b.n	8019922 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80198b2:	697b      	ldr	r3, [r7, #20]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d005      	beq.n	80198c4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	2b05      	cmp	r3, #5
 80198bc:	d002      	beq.n	80198c4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	2b09      	cmp	r3, #9
 80198c2:	d111      	bne.n	80198e8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	68db      	ldr	r3, [r3, #12]
 80198ca:	f003 0301 	and.w	r3, r3, #1
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d007      	beq.n	80198e2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198d6:	f043 0220 	orr.w	r2, r3, #32
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80198de:	2301      	movs	r3, #1
 80198e0:	e0b3      	b.n	8019a4a <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80198e2:	2304      	movs	r3, #4
 80198e4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80198e6:	e01c      	b.n	8019922 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80198f0:	d004      	beq.n	80198fc <HAL_ADC_PollForConversion+0x84>
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	4a57      	ldr	r2, [pc, #348]	; (8019a54 <HAL_ADC_PollForConversion+0x1dc>)
 80198f8:	4293      	cmp	r3, r2
 80198fa:	d101      	bne.n	8019900 <HAL_ADC_PollForConversion+0x88>
 80198fc:	4b56      	ldr	r3, [pc, #344]	; (8019a58 <HAL_ADC_PollForConversion+0x1e0>)
 80198fe:	e000      	b.n	8019902 <HAL_ADC_PollForConversion+0x8a>
 8019900:	4b56      	ldr	r3, [pc, #344]	; (8019a5c <HAL_ADC_PollForConversion+0x1e4>)
 8019902:	4618      	mov	r0, r3
 8019904:	f7ff fbfa 	bl	80190fc <LL_ADC_GetMultiDMATransfer>
 8019908:	4603      	mov	r3, r0
 801990a:	2b00      	cmp	r3, #0
 801990c:	d007      	beq.n	801991e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019912:	f043 0220 	orr.w	r2, r3, #32
 8019916:	687b      	ldr	r3, [r7, #4]
 8019918:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801991a:	2301      	movs	r3, #1
 801991c:	e095      	b.n	8019a4a <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801991e:	2304      	movs	r3, #4
 8019920:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8019922:	f7ff fa37 	bl	8018d94 <HAL_GetTick>
 8019926:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019928:	e021      	b.n	801996e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801992a:	683b      	ldr	r3, [r7, #0]
 801992c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019930:	d01d      	beq.n	801996e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8019932:	f7ff fa2f 	bl	8018d94 <HAL_GetTick>
 8019936:	4602      	mov	r2, r0
 8019938:	693b      	ldr	r3, [r7, #16]
 801993a:	1ad3      	subs	r3, r2, r3
 801993c:	683a      	ldr	r2, [r7, #0]
 801993e:	429a      	cmp	r2, r3
 8019940:	d302      	bcc.n	8019948 <HAL_ADC_PollForConversion+0xd0>
 8019942:	683b      	ldr	r3, [r7, #0]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d112      	bne.n	801996e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	681a      	ldr	r2, [r3, #0]
 801994e:	69fb      	ldr	r3, [r7, #28]
 8019950:	4013      	ands	r3, r2
 8019952:	2b00      	cmp	r3, #0
 8019954:	d10b      	bne.n	801996e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801995a:	f043 0204 	orr.w	r2, r3, #4
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	2200      	movs	r2, #0
 8019966:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801996a:	2303      	movs	r3, #3
 801996c:	e06d      	b.n	8019a4a <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	681b      	ldr	r3, [r3, #0]
 8019972:	681a      	ldr	r2, [r3, #0]
 8019974:	69fb      	ldr	r3, [r7, #28]
 8019976:	4013      	ands	r3, r2
 8019978:	2b00      	cmp	r3, #0
 801997a:	d0d6      	beq.n	801992a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019980:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019988:	687b      	ldr	r3, [r7, #4]
 801998a:	681b      	ldr	r3, [r3, #0]
 801998c:	4618      	mov	r0, r3
 801998e:	f7ff fb01 	bl	8018f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019992:	4603      	mov	r3, r0
 8019994:	2b00      	cmp	r3, #0
 8019996:	d01c      	beq.n	80199d2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8019998:	687b      	ldr	r3, [r7, #4]
 801999a:	7f5b      	ldrb	r3, [r3, #29]
 801999c:	2b00      	cmp	r3, #0
 801999e:	d118      	bne.n	80199d2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	f003 0308 	and.w	r3, r3, #8
 80199aa:	2b08      	cmp	r3, #8
 80199ac:	d111      	bne.n	80199d2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d105      	bne.n	80199d2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199ca:	f043 0201 	orr.w	r2, r3, #1
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	681b      	ldr	r3, [r3, #0]
 80199d6:	4a1f      	ldr	r2, [pc, #124]	; (8019a54 <HAL_ADC_PollForConversion+0x1dc>)
 80199d8:	4293      	cmp	r3, r2
 80199da:	d002      	beq.n	80199e2 <HAL_ADC_PollForConversion+0x16a>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	e001      	b.n	80199e6 <HAL_ADC_PollForConversion+0x16e>
 80199e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80199e6:	687a      	ldr	r2, [r7, #4]
 80199e8:	6812      	ldr	r2, [r2, #0]
 80199ea:	4293      	cmp	r3, r2
 80199ec:	d008      	beq.n	8019a00 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80199ee:	697b      	ldr	r3, [r7, #20]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d005      	beq.n	8019a00 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80199f4:	697b      	ldr	r3, [r7, #20]
 80199f6:	2b05      	cmp	r3, #5
 80199f8:	d002      	beq.n	8019a00 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80199fa:	697b      	ldr	r3, [r7, #20]
 80199fc:	2b09      	cmp	r3, #9
 80199fe:	d104      	bne.n	8019a0a <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	68db      	ldr	r3, [r3, #12]
 8019a06:	61bb      	str	r3, [r7, #24]
 8019a08:	e00d      	b.n	8019a26 <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	4a11      	ldr	r2, [pc, #68]	; (8019a54 <HAL_ADC_PollForConversion+0x1dc>)
 8019a10:	4293      	cmp	r3, r2
 8019a12:	d002      	beq.n	8019a1a <HAL_ADC_PollForConversion+0x1a2>
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	e001      	b.n	8019a1e <HAL_ADC_PollForConversion+0x1a6>
 8019a1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019a1e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	68db      	ldr	r3, [r3, #12]
 8019a24:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8019a26:	69fb      	ldr	r3, [r7, #28]
 8019a28:	2b08      	cmp	r3, #8
 8019a2a:	d104      	bne.n	8019a36 <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	2208      	movs	r2, #8
 8019a32:	601a      	str	r2, [r3, #0]
 8019a34:	e008      	b.n	8019a48 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8019a36:	69bb      	ldr	r3, [r7, #24]
 8019a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d103      	bne.n	8019a48 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	220c      	movs	r2, #12
 8019a46:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8019a48:	2300      	movs	r3, #0
}
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	3720      	adds	r7, #32
 8019a4e:	46bd      	mov	sp, r7
 8019a50:	bd80      	pop	{r7, pc}
 8019a52:	bf00      	nop
 8019a54:	50000100 	.word	0x50000100
 8019a58:	50000300 	.word	0x50000300
 8019a5c:	50000700 	.word	0x50000700

08019a60 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8019a60:	b580      	push	{r7, lr}
 8019a62:	b086      	sub	sp, #24
 8019a64:	af00      	add	r7, sp, #0
 8019a66:	60f8      	str	r0, [r7, #12]
 8019a68:	60b9      	str	r1, [r7, #8]
 8019a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019a74:	d004      	beq.n	8019a80 <HAL_ADC_Start_DMA+0x20>
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	4a57      	ldr	r2, [pc, #348]	; (8019bd8 <HAL_ADC_Start_DMA+0x178>)
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d101      	bne.n	8019a84 <HAL_ADC_Start_DMA+0x24>
 8019a80:	4b56      	ldr	r3, [pc, #344]	; (8019bdc <HAL_ADC_Start_DMA+0x17c>)
 8019a82:	e000      	b.n	8019a86 <HAL_ADC_Start_DMA+0x26>
 8019a84:	4b56      	ldr	r3, [pc, #344]	; (8019be0 <HAL_ADC_Start_DMA+0x180>)
 8019a86:	4618      	mov	r0, r3
 8019a88:	f7ff fb2a 	bl	80190e0 <LL_ADC_GetMultimode>
 8019a8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	4618      	mov	r0, r3
 8019a94:	f7ff fc04 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 8019a98:	4603      	mov	r3, r0
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	f040 8094 	bne.w	8019bc8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019aa6:	2b01      	cmp	r3, #1
 8019aa8:	d101      	bne.n	8019aae <HAL_ADC_Start_DMA+0x4e>
 8019aaa:	2302      	movs	r3, #2
 8019aac:	e08f      	b.n	8019bce <HAL_ADC_Start_DMA+0x16e>
 8019aae:	68fb      	ldr	r3, [r7, #12]
 8019ab0:	2201      	movs	r2, #1
 8019ab2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	4a4a      	ldr	r2, [pc, #296]	; (8019be4 <HAL_ADC_Start_DMA+0x184>)
 8019abc:	4293      	cmp	r3, r2
 8019abe:	d008      	beq.n	8019ad2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019ac0:	693b      	ldr	r3, [r7, #16]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d005      	beq.n	8019ad2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019ac6:	693b      	ldr	r3, [r7, #16]
 8019ac8:	2b05      	cmp	r3, #5
 8019aca:	d002      	beq.n	8019ad2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019acc:	693b      	ldr	r3, [r7, #16]
 8019ace:	2b09      	cmp	r3, #9
 8019ad0:	d173      	bne.n	8019bba <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8019ad2:	68f8      	ldr	r0, [r7, #12]
 8019ad4:	f001 f83c 	bl	801ab50 <ADC_Enable>
 8019ad8:	4603      	mov	r3, r0
 8019ada:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019adc:	7dfb      	ldrb	r3, [r7, #23]
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d166      	bne.n	8019bb0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ae6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019aea:	f023 0301 	bic.w	r3, r3, #1
 8019aee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019af2:	68fb      	ldr	r3, [r7, #12]
 8019af4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	4a37      	ldr	r2, [pc, #220]	; (8019bd8 <HAL_ADC_Start_DMA+0x178>)
 8019afc:	4293      	cmp	r3, r2
 8019afe:	d002      	beq.n	8019b06 <HAL_ADC_Start_DMA+0xa6>
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	e001      	b.n	8019b0a <HAL_ADC_Start_DMA+0xaa>
 8019b06:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019b0a:	68fa      	ldr	r2, [r7, #12]
 8019b0c:	6812      	ldr	r2, [r2, #0]
 8019b0e:	4293      	cmp	r3, r2
 8019b10:	d002      	beq.n	8019b18 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019b12:	693b      	ldr	r3, [r7, #16]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d105      	bne.n	8019b24 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019b18:	68fb      	ldr	r3, [r7, #12]
 8019b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	d006      	beq.n	8019b3e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b34:	f023 0206 	bic.w	r2, r3, #6
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	661a      	str	r2, [r3, #96]	; 0x60
 8019b3c:	e002      	b.n	8019b44 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	2200      	movs	r2, #0
 8019b42:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b48:	4a27      	ldr	r2, [pc, #156]	; (8019be8 <HAL_ADC_Start_DMA+0x188>)
 8019b4a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8019b4c:	68fb      	ldr	r3, [r7, #12]
 8019b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b50:	4a26      	ldr	r2, [pc, #152]	; (8019bec <HAL_ADC_Start_DMA+0x18c>)
 8019b52:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8019b54:	68fb      	ldr	r3, [r7, #12]
 8019b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b58:	4a25      	ldr	r2, [pc, #148]	; (8019bf0 <HAL_ADC_Start_DMA+0x190>)
 8019b5a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8019b5c:	68fb      	ldr	r3, [r7, #12]
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	221c      	movs	r2, #28
 8019b62:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8019b64:	68fb      	ldr	r3, [r7, #12]
 8019b66:	2200      	movs	r2, #0
 8019b68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	685a      	ldr	r2, [r3, #4]
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	f042 0210 	orr.w	r2, r2, #16
 8019b7a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	681b      	ldr	r3, [r3, #0]
 8019b80:	68da      	ldr	r2, [r3, #12]
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	f042 0201 	orr.w	r2, r2, #1
 8019b8a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8019b8c:	68fb      	ldr	r3, [r7, #12]
 8019b8e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8019b90:	68fb      	ldr	r3, [r7, #12]
 8019b92:	681b      	ldr	r3, [r3, #0]
 8019b94:	3340      	adds	r3, #64	; 0x40
 8019b96:	4619      	mov	r1, r3
 8019b98:	68ba      	ldr	r2, [r7, #8]
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	f001 fcb4 	bl	801b508 <HAL_DMA_Start_IT>
 8019ba0:	4603      	mov	r3, r0
 8019ba2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	4618      	mov	r0, r3
 8019baa:	f7ff fb51 	bl	8019250 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8019bae:	e00d      	b.n	8019bcc <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019bb0:	68fb      	ldr	r3, [r7, #12]
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8019bb8:	e008      	b.n	8019bcc <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8019bba:	2301      	movs	r3, #1
 8019bbc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019bc6:	e001      	b.n	8019bcc <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019bc8:	2302      	movs	r3, #2
 8019bca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3718      	adds	r7, #24
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd80      	pop	{r7, pc}
 8019bd6:	bf00      	nop
 8019bd8:	50000100 	.word	0x50000100
 8019bdc:	50000300 	.word	0x50000300
 8019be0:	50000700 	.word	0x50000700
 8019be4:	50000400 	.word	0x50000400
 8019be8:	0801acd3 	.word	0x0801acd3
 8019bec:	0801adab 	.word	0x0801adab
 8019bf0:	0801adc7 	.word	0x0801adc7

08019bf4 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b084      	sub	sp, #16
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d101      	bne.n	8019c0a <HAL_ADC_Stop_DMA+0x16>
 8019c06:	2302      	movs	r3, #2
 8019c08:	e051      	b.n	8019cae <HAL_ADC_Stop_DMA+0xba>
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019c12:	2103      	movs	r1, #3
 8019c14:	6878      	ldr	r0, [r7, #4]
 8019c16:	f000 fedf 	bl	801a9d8 <ADC_ConversionStop>
 8019c1a:	4603      	mov	r3, r0
 8019c1c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8019c1e:	7bfb      	ldrb	r3, [r7, #15]
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d13f      	bne.n	8019ca4 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	68da      	ldr	r2, [r3, #12]
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	f022 0201 	bic.w	r2, r2, #1
 8019c32:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019c3c:	b2db      	uxtb	r3, r3
 8019c3e:	2b02      	cmp	r3, #2
 8019c40:	d10f      	bne.n	8019c62 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019c46:	4618      	mov	r0, r3
 8019c48:	f001 fcd9 	bl	801b5fe <HAL_DMA_Abort>
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8019c50:	7bfb      	ldrb	r3, [r7, #15]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d005      	beq.n	8019c62 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	685a      	ldr	r2, [r3, #4]
 8019c68:	687b      	ldr	r3, [r7, #4]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	f022 0210 	bic.w	r2, r2, #16
 8019c70:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8019c72:	7bfb      	ldrb	r3, [r7, #15]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d105      	bne.n	8019c84 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8019c78:	6878      	ldr	r0, [r7, #4]
 8019c7a:	f000 ffcb 	bl	801ac14 <ADC_Disable>
 8019c7e:	4603      	mov	r3, r0
 8019c80:	73fb      	strb	r3, [r7, #15]
 8019c82:	e002      	b.n	8019c8a <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8019c84:	6878      	ldr	r0, [r7, #4]
 8019c86:	f000 ffc5 	bl	801ac14 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8019c8a:	7bfb      	ldrb	r3, [r7, #15]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d109      	bne.n	8019ca4 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c94:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019c98:	f023 0301 	bic.w	r3, r3, #1
 8019c9c:	f043 0201 	orr.w	r2, r3, #1
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	2200      	movs	r2, #0
 8019ca8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cae:	4618      	mov	r0, r3
 8019cb0:	3710      	adds	r7, #16
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}

08019cb6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8019cb6:	b480      	push	{r7}
 8019cb8:	b083      	sub	sp, #12
 8019cba:	af00      	add	r7, sp, #0
 8019cbc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	681b      	ldr	r3, [r3, #0]
 8019cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8019cc4:	4618      	mov	r0, r3
 8019cc6:	370c      	adds	r7, #12
 8019cc8:	46bd      	mov	sp, r7
 8019cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cce:	4770      	bx	lr

08019cd0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8019cd0:	b580      	push	{r7, lr}
 8019cd2:	b08a      	sub	sp, #40	; 0x28
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8019cd8:	2300      	movs	r3, #0
 8019cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	681b      	ldr	r3, [r3, #0]
 8019ce2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019cf4:	d004      	beq.n	8019d00 <HAL_ADC_IRQHandler+0x30>
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	4a87      	ldr	r2, [pc, #540]	; (8019f18 <HAL_ADC_IRQHandler+0x248>)
 8019cfc:	4293      	cmp	r3, r2
 8019cfe:	d101      	bne.n	8019d04 <HAL_ADC_IRQHandler+0x34>
 8019d00:	4b86      	ldr	r3, [pc, #536]	; (8019f1c <HAL_ADC_IRQHandler+0x24c>)
 8019d02:	e000      	b.n	8019d06 <HAL_ADC_IRQHandler+0x36>
 8019d04:	4b86      	ldr	r3, [pc, #536]	; (8019f20 <HAL_ADC_IRQHandler+0x250>)
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7ff f9ea 	bl	80190e0 <LL_ADC_GetMultimode>
 8019d0c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8019d0e:	69fb      	ldr	r3, [r7, #28]
 8019d10:	f003 0302 	and.w	r3, r3, #2
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	d017      	beq.n	8019d48 <HAL_ADC_IRQHandler+0x78>
 8019d18:	69bb      	ldr	r3, [r7, #24]
 8019d1a:	f003 0302 	and.w	r3, r3, #2
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d012      	beq.n	8019d48 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d26:	f003 0310 	and.w	r3, r3, #16
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	d105      	bne.n	8019d3a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d32:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8019d3a:	6878      	ldr	r0, [r7, #4]
 8019d3c:	f001 f93a 	bl	801afb4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	681b      	ldr	r3, [r3, #0]
 8019d44:	2202      	movs	r2, #2
 8019d46:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019d48:	69fb      	ldr	r3, [r7, #28]
 8019d4a:	f003 0304 	and.w	r3, r3, #4
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d004      	beq.n	8019d5c <HAL_ADC_IRQHandler+0x8c>
 8019d52:	69bb      	ldr	r3, [r7, #24]
 8019d54:	f003 0304 	and.w	r3, r3, #4
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d10a      	bne.n	8019d72 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019d5c:	69fb      	ldr	r3, [r7, #28]
 8019d5e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	f000 8085 	beq.w	8019e72 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019d68:	69bb      	ldr	r3, [r7, #24]
 8019d6a:	f003 0308 	and.w	r3, r3, #8
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d07f      	beq.n	8019e72 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d76:	f003 0310 	and.w	r3, r3, #16
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d105      	bne.n	8019d8a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019d82:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	4618      	mov	r0, r3
 8019d90:	f7ff f900 	bl	8018f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019d94:	4603      	mov	r3, r0
 8019d96:	2b00      	cmp	r3, #0
 8019d98:	d064      	beq.n	8019e64 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019d9a:	687b      	ldr	r3, [r7, #4]
 8019d9c:	681b      	ldr	r3, [r3, #0]
 8019d9e:	4a5e      	ldr	r2, [pc, #376]	; (8019f18 <HAL_ADC_IRQHandler+0x248>)
 8019da0:	4293      	cmp	r3, r2
 8019da2:	d002      	beq.n	8019daa <HAL_ADC_IRQHandler+0xda>
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	681b      	ldr	r3, [r3, #0]
 8019da8:	e001      	b.n	8019dae <HAL_ADC_IRQHandler+0xde>
 8019daa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019dae:	687a      	ldr	r2, [r7, #4]
 8019db0:	6812      	ldr	r2, [r2, #0]
 8019db2:	4293      	cmp	r3, r2
 8019db4:	d008      	beq.n	8019dc8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019db6:	697b      	ldr	r3, [r7, #20]
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d005      	beq.n	8019dc8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019dbc:	697b      	ldr	r3, [r7, #20]
 8019dbe:	2b05      	cmp	r3, #5
 8019dc0:	d002      	beq.n	8019dc8 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019dc2:	697b      	ldr	r3, [r7, #20]
 8019dc4:	2b09      	cmp	r3, #9
 8019dc6:	d104      	bne.n	8019dd2 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	68db      	ldr	r3, [r3, #12]
 8019dce:	623b      	str	r3, [r7, #32]
 8019dd0:	e00d      	b.n	8019dee <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	4a50      	ldr	r2, [pc, #320]	; (8019f18 <HAL_ADC_IRQHandler+0x248>)
 8019dd8:	4293      	cmp	r3, r2
 8019dda:	d002      	beq.n	8019de2 <HAL_ADC_IRQHandler+0x112>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	681b      	ldr	r3, [r3, #0]
 8019de0:	e001      	b.n	8019de6 <HAL_ADC_IRQHandler+0x116>
 8019de2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019de6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	68db      	ldr	r3, [r3, #12]
 8019dec:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019dee:	6a3b      	ldr	r3, [r7, #32]
 8019df0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d135      	bne.n	8019e64 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	681b      	ldr	r3, [r3, #0]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	f003 0308 	and.w	r3, r3, #8
 8019e02:	2b08      	cmp	r3, #8
 8019e04:	d12e      	bne.n	8019e64 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7ff fa48 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 8019e10:	4603      	mov	r3, r0
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d11a      	bne.n	8019e4c <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8019e16:	687b      	ldr	r3, [r7, #4]
 8019e18:	681b      	ldr	r3, [r3, #0]
 8019e1a:	685a      	ldr	r2, [r3, #4]
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	f022 020c 	bic.w	r2, r2, #12
 8019e24:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019e3a:	2b00      	cmp	r3, #0
 8019e3c:	d112      	bne.n	8019e64 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e42:	f043 0201 	orr.w	r2, r3, #1
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	65da      	str	r2, [r3, #92]	; 0x5c
 8019e4a:	e00b      	b.n	8019e64 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e50:	f043 0210 	orr.w	r2, r3, #16
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019e5c:	f043 0201 	orr.w	r2, r3, #1
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019e64:	6878      	ldr	r0, [r7, #4]
 8019e66:	f7ee fa17 	bl	8008298 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	220c      	movs	r2, #12
 8019e70:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019e72:	69fb      	ldr	r3, [r7, #28]
 8019e74:	f003 0320 	and.w	r3, r3, #32
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d004      	beq.n	8019e86 <HAL_ADC_IRQHandler+0x1b6>
 8019e7c:	69bb      	ldr	r3, [r7, #24]
 8019e7e:	f003 0320 	and.w	r3, r3, #32
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d10b      	bne.n	8019e9e <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019e86:	69fb      	ldr	r3, [r7, #28]
 8019e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019e8c:	2b00      	cmp	r3, #0
 8019e8e:	f000 80a1 	beq.w	8019fd4 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019e92:	69bb      	ldr	r3, [r7, #24]
 8019e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	f000 809b 	beq.w	8019fd4 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ea2:	f003 0310 	and.w	r3, r3, #16
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d105      	bne.n	8019eb6 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019eae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	4618      	mov	r0, r3
 8019ebc:	f7ff f8a9 	bl	8019012 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019ec0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	4618      	mov	r0, r3
 8019ec8:	f7ff f864 	bl	8018f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019ecc:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	681b      	ldr	r3, [r3, #0]
 8019ed2:	4a11      	ldr	r2, [pc, #68]	; (8019f18 <HAL_ADC_IRQHandler+0x248>)
 8019ed4:	4293      	cmp	r3, r2
 8019ed6:	d002      	beq.n	8019ede <HAL_ADC_IRQHandler+0x20e>
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	681b      	ldr	r3, [r3, #0]
 8019edc:	e001      	b.n	8019ee2 <HAL_ADC_IRQHandler+0x212>
 8019ede:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019ee2:	687a      	ldr	r2, [r7, #4]
 8019ee4:	6812      	ldr	r2, [r2, #0]
 8019ee6:	4293      	cmp	r3, r2
 8019ee8:	d008      	beq.n	8019efc <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019eea:	697b      	ldr	r3, [r7, #20]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d005      	beq.n	8019efc <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	2b06      	cmp	r3, #6
 8019ef4:	d002      	beq.n	8019efc <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	2b07      	cmp	r3, #7
 8019efa:	d104      	bne.n	8019f06 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019efc:	687b      	ldr	r3, [r7, #4]
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	68db      	ldr	r3, [r3, #12]
 8019f02:	623b      	str	r3, [r7, #32]
 8019f04:	e014      	b.n	8019f30 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	4a03      	ldr	r2, [pc, #12]	; (8019f18 <HAL_ADC_IRQHandler+0x248>)
 8019f0c:	4293      	cmp	r3, r2
 8019f0e:	d009      	beq.n	8019f24 <HAL_ADC_IRQHandler+0x254>
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	e008      	b.n	8019f28 <HAL_ADC_IRQHandler+0x258>
 8019f16:	bf00      	nop
 8019f18:	50000100 	.word	0x50000100
 8019f1c:	50000300 	.word	0x50000300
 8019f20:	50000700 	.word	0x50000700
 8019f24:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019f28:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019f2a:	693b      	ldr	r3, [r7, #16]
 8019f2c:	68db      	ldr	r3, [r3, #12]
 8019f2e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d047      	beq.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8019f36:	6a3b      	ldr	r3, [r7, #32]
 8019f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d007      	beq.n	8019f50 <HAL_ADC_IRQHandler+0x280>
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d03f      	beq.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8019f46:	6a3b      	ldr	r3, [r7, #32]
 8019f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d13a      	bne.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8019f50:	687b      	ldr	r3, [r7, #4]
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019f5a:	2b40      	cmp	r3, #64	; 0x40
 8019f5c:	d133      	bne.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8019f5e:	6a3b      	ldr	r3, [r7, #32]
 8019f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019f64:	2b00      	cmp	r3, #0
 8019f66:	d12e      	bne.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	4618      	mov	r0, r3
 8019f6e:	f7ff f9be 	bl	80192ee <LL_ADC_INJ_IsConversionOngoing>
 8019f72:	4603      	mov	r3, r0
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	d11a      	bne.n	8019fae <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	685a      	ldr	r2, [r3, #4]
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019f86:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d112      	bne.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fa4:	f043 0201 	orr.w	r2, r3, #1
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	65da      	str	r2, [r3, #92]	; 0x5c
 8019fac:	e00b      	b.n	8019fc6 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fb2:	f043 0210 	orr.w	r2, r3, #16
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019fbe:	f043 0201 	orr.w	r2, r3, #1
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019fc6:	6878      	ldr	r0, [r7, #4]
 8019fc8:	f000 ffcc 	bl	801af64 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	2260      	movs	r2, #96	; 0x60
 8019fd2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019fd4:	69fb      	ldr	r3, [r7, #28]
 8019fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d011      	beq.n	801a002 <HAL_ADC_IRQHandler+0x332>
 8019fde:	69bb      	ldr	r3, [r7, #24]
 8019fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fe4:	2b00      	cmp	r3, #0
 8019fe6:	d00c      	beq.n	801a002 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019ff4:	6878      	ldr	r0, [r7, #4]
 8019ff6:	f000 f8af 	bl	801a158 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	2280      	movs	r2, #128	; 0x80
 801a000:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801a002:	69fb      	ldr	r3, [r7, #28]
 801a004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a008:	2b00      	cmp	r3, #0
 801a00a:	d012      	beq.n	801a032 <HAL_ADC_IRQHandler+0x362>
 801a00c:	69bb      	ldr	r3, [r7, #24]
 801a00e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a012:	2b00      	cmp	r3, #0
 801a014:	d00d      	beq.n	801a032 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a01a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 801a022:	6878      	ldr	r0, [r7, #4]
 801a024:	f000 ffb2 	bl	801af8c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a030:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801a032:	69fb      	ldr	r3, [r7, #28]
 801a034:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d012      	beq.n	801a062 <HAL_ADC_IRQHandler+0x392>
 801a03c:	69bb      	ldr	r3, [r7, #24]
 801a03e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a042:	2b00      	cmp	r3, #0
 801a044:	d00d      	beq.n	801a062 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a04a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801a052:	6878      	ldr	r0, [r7, #4]
 801a054:	f000 ffa4 	bl	801afa0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a060:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801a062:	69fb      	ldr	r3, [r7, #28]
 801a064:	f003 0310 	and.w	r3, r3, #16
 801a068:	2b00      	cmp	r3, #0
 801a06a:	d043      	beq.n	801a0f4 <HAL_ADC_IRQHandler+0x424>
 801a06c:	69bb      	ldr	r3, [r7, #24]
 801a06e:	f003 0310 	and.w	r3, r3, #16
 801a072:	2b00      	cmp	r3, #0
 801a074:	d03e      	beq.n	801a0f4 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801a076:	687b      	ldr	r3, [r7, #4]
 801a078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d102      	bne.n	801a084 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801a07e:	2301      	movs	r3, #1
 801a080:	627b      	str	r3, [r7, #36]	; 0x24
 801a082:	e021      	b.n	801a0c8 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801a084:	697b      	ldr	r3, [r7, #20]
 801a086:	2b00      	cmp	r3, #0
 801a088:	d015      	beq.n	801a0b6 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a092:	d004      	beq.n	801a09e <HAL_ADC_IRQHandler+0x3ce>
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	4a27      	ldr	r2, [pc, #156]	; (801a138 <HAL_ADC_IRQHandler+0x468>)
 801a09a:	4293      	cmp	r3, r2
 801a09c:	d101      	bne.n	801a0a2 <HAL_ADC_IRQHandler+0x3d2>
 801a09e:	4b27      	ldr	r3, [pc, #156]	; (801a13c <HAL_ADC_IRQHandler+0x46c>)
 801a0a0:	e000      	b.n	801a0a4 <HAL_ADC_IRQHandler+0x3d4>
 801a0a2:	4b27      	ldr	r3, [pc, #156]	; (801a140 <HAL_ADC_IRQHandler+0x470>)
 801a0a4:	4618      	mov	r0, r3
 801a0a6:	f7ff f829 	bl	80190fc <LL_ADC_GetMultiDMATransfer>
 801a0aa:	4603      	mov	r3, r0
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d00b      	beq.n	801a0c8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a0b0:	2301      	movs	r3, #1
 801a0b2:	627b      	str	r3, [r7, #36]	; 0x24
 801a0b4:	e008      	b.n	801a0c8 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	68db      	ldr	r3, [r3, #12]
 801a0bc:	f003 0301 	and.w	r3, r3, #1
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d001      	beq.n	801a0c8 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a0c4:	2301      	movs	r3, #1
 801a0c6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0ca:	2b01      	cmp	r3, #1
 801a0cc:	d10e      	bne.n	801a0ec <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0d2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a0de:	f043 0202 	orr.w	r2, r3, #2
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801a0e6:	6878      	ldr	r0, [r7, #4]
 801a0e8:	f000 f840 	bl	801a16c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	2210      	movs	r2, #16
 801a0f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801a0f4:	69fb      	ldr	r3, [r7, #28]
 801a0f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d018      	beq.n	801a130 <HAL_ADC_IRQHandler+0x460>
 801a0fe:	69bb      	ldr	r3, [r7, #24]
 801a100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a104:	2b00      	cmp	r3, #0
 801a106:	d013      	beq.n	801a130 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a10c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a118:	f043 0208 	orr.w	r2, r3, #8
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a128:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801a12a:	6878      	ldr	r0, [r7, #4]
 801a12c:	f000 ff24 	bl	801af78 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801a130:	bf00      	nop
 801a132:	3728      	adds	r7, #40	; 0x28
 801a134:	46bd      	mov	sp, r7
 801a136:	bd80      	pop	{r7, pc}
 801a138:	50000100 	.word	0x50000100
 801a13c:	50000300 	.word	0x50000300
 801a140:	50000700 	.word	0x50000700

0801a144 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801a144:	b480      	push	{r7}
 801a146:	b083      	sub	sp, #12
 801a148:	af00      	add	r7, sp, #0
 801a14a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801a14c:	bf00      	nop
 801a14e:	370c      	adds	r7, #12
 801a150:	46bd      	mov	sp, r7
 801a152:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a156:	4770      	bx	lr

0801a158 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801a158:	b480      	push	{r7}
 801a15a:	b083      	sub	sp, #12
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801a160:	bf00      	nop
 801a162:	370c      	adds	r7, #12
 801a164:	46bd      	mov	sp, r7
 801a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a16a:	4770      	bx	lr

0801a16c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801a16c:	b480      	push	{r7}
 801a16e:	b083      	sub	sp, #12
 801a170:	af00      	add	r7, sp, #0
 801a172:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801a174:	bf00      	nop
 801a176:	370c      	adds	r7, #12
 801a178:	46bd      	mov	sp, r7
 801a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a17e:	4770      	bx	lr

0801a180 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b0b6      	sub	sp, #216	; 0xd8
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
 801a188:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801a18a:	2300      	movs	r3, #0
 801a18c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801a190:	2300      	movs	r3, #0
 801a192:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a19a:	2b01      	cmp	r3, #1
 801a19c:	d102      	bne.n	801a1a4 <HAL_ADC_ConfigChannel+0x24>
 801a19e:	2302      	movs	r3, #2
 801a1a0:	f000 bc04 	b.w	801a9ac <HAL_ADC_ConfigChannel+0x82c>
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	2201      	movs	r2, #1
 801a1a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	4618      	mov	r0, r3
 801a1b2:	f7ff f875 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 801a1b6:	4603      	mov	r3, r0
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	f040 83e8 	bne.w	801a98e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	6818      	ldr	r0, [r3, #0]
 801a1c2:	683b      	ldr	r3, [r7, #0]
 801a1c4:	6859      	ldr	r1, [r3, #4]
 801a1c6:	683b      	ldr	r3, [r7, #0]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	461a      	mov	r2, r3
 801a1cc:	f7fe fef5 	bl	8018fba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	4618      	mov	r0, r3
 801a1d6:	f7ff f863 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 801a1da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f7ff f883 	bl	80192ee <LL_ADC_INJ_IsConversionOngoing>
 801a1e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801a1ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	f040 81d9 	bne.w	801a5a8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801a1f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	f040 81d4 	bne.w	801a5a8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801a200:	683b      	ldr	r3, [r7, #0]
 801a202:	689b      	ldr	r3, [r3, #8]
 801a204:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a208:	d10f      	bne.n	801a22a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	6818      	ldr	r0, [r3, #0]
 801a20e:	683b      	ldr	r3, [r7, #0]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	2200      	movs	r2, #0
 801a214:	4619      	mov	r1, r3
 801a216:	f7fe ff0f 	bl	8019038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a222:	4618      	mov	r0, r3
 801a224:	f7fe fea3 	bl	8018f6e <LL_ADC_SetSamplingTimeCommonConfig>
 801a228:	e00e      	b.n	801a248 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	6818      	ldr	r0, [r3, #0]
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	6819      	ldr	r1, [r3, #0]
 801a232:	683b      	ldr	r3, [r7, #0]
 801a234:	689b      	ldr	r3, [r3, #8]
 801a236:	461a      	mov	r2, r3
 801a238:	f7fe fefe 	bl	8019038 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	2100      	movs	r1, #0
 801a242:	4618      	mov	r0, r3
 801a244:	f7fe fe93 	bl	8018f6e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	695a      	ldr	r2, [r3, #20]
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	68db      	ldr	r3, [r3, #12]
 801a252:	08db      	lsrs	r3, r3, #3
 801a254:	f003 0303 	and.w	r3, r3, #3
 801a258:	005b      	lsls	r3, r3, #1
 801a25a:	fa02 f303 	lsl.w	r3, r2, r3
 801a25e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801a262:	683b      	ldr	r3, [r7, #0]
 801a264:	691b      	ldr	r3, [r3, #16]
 801a266:	2b04      	cmp	r3, #4
 801a268:	d022      	beq.n	801a2b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	6818      	ldr	r0, [r3, #0]
 801a26e:	683b      	ldr	r3, [r7, #0]
 801a270:	6919      	ldr	r1, [r3, #16]
 801a272:	683b      	ldr	r3, [r7, #0]
 801a274:	681a      	ldr	r2, [r3, #0]
 801a276:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a27a:	f7fe fded 	bl	8018e58 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	6818      	ldr	r0, [r3, #0]
 801a282:	683b      	ldr	r3, [r7, #0]
 801a284:	6919      	ldr	r1, [r3, #16]
 801a286:	683b      	ldr	r3, [r7, #0]
 801a288:	699b      	ldr	r3, [r3, #24]
 801a28a:	461a      	mov	r2, r3
 801a28c:	f7fe fe39 	bl	8018f02 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	6818      	ldr	r0, [r3, #0]
 801a294:	683b      	ldr	r3, [r7, #0]
 801a296:	6919      	ldr	r1, [r3, #16]
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	7f1b      	ldrb	r3, [r3, #28]
 801a29c:	2b01      	cmp	r3, #1
 801a29e:	d102      	bne.n	801a2a6 <HAL_ADC_ConfigChannel+0x126>
 801a2a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a2a4:	e000      	b.n	801a2a8 <HAL_ADC_ConfigChannel+0x128>
 801a2a6:	2300      	movs	r3, #0
 801a2a8:	461a      	mov	r2, r3
 801a2aa:	f7fe fe45 	bl	8018f38 <LL_ADC_SetOffsetSaturation>
 801a2ae:	e17b      	b.n	801a5a8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	2100      	movs	r1, #0
 801a2b6:	4618      	mov	r0, r3
 801a2b8:	f7fe fdf2 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a2c2:	2b00      	cmp	r3, #0
 801a2c4:	d10a      	bne.n	801a2dc <HAL_ADC_ConfigChannel+0x15c>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	2100      	movs	r1, #0
 801a2cc:	4618      	mov	r0, r3
 801a2ce:	f7fe fde7 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a2d2:	4603      	mov	r3, r0
 801a2d4:	0e9b      	lsrs	r3, r3, #26
 801a2d6:	f003 021f 	and.w	r2, r3, #31
 801a2da:	e01e      	b.n	801a31a <HAL_ADC_ConfigChannel+0x19a>
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	2100      	movs	r1, #0
 801a2e2:	4618      	mov	r0, r3
 801a2e4:	f7fe fddc 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a2ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a2f2:	fa93 f3a3 	rbit	r3, r3
 801a2f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801a2fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a2fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801a302:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a306:	2b00      	cmp	r3, #0
 801a308:	d101      	bne.n	801a30e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801a30a:	2320      	movs	r3, #32
 801a30c:	e004      	b.n	801a318 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801a30e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a312:	fab3 f383 	clz	r3, r3
 801a316:	b2db      	uxtb	r3, r3
 801a318:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a322:	2b00      	cmp	r3, #0
 801a324:	d105      	bne.n	801a332 <HAL_ADC_ConfigChannel+0x1b2>
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	0e9b      	lsrs	r3, r3, #26
 801a32c:	f003 031f 	and.w	r3, r3, #31
 801a330:	e018      	b.n	801a364 <HAL_ADC_ConfigChannel+0x1e4>
 801a332:	683b      	ldr	r3, [r7, #0]
 801a334:	681b      	ldr	r3, [r3, #0]
 801a336:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a33a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a33e:	fa93 f3a3 	rbit	r3, r3
 801a342:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801a346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a34a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801a34e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a352:	2b00      	cmp	r3, #0
 801a354:	d101      	bne.n	801a35a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801a356:	2320      	movs	r3, #32
 801a358:	e004      	b.n	801a364 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801a35a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a35e:	fab3 f383 	clz	r3, r3
 801a362:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a364:	429a      	cmp	r2, r3
 801a366:	d106      	bne.n	801a376 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2200      	movs	r2, #0
 801a36e:	2100      	movs	r1, #0
 801a370:	4618      	mov	r0, r3
 801a372:	f7fe fdab 	bl	8018ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	2101      	movs	r1, #1
 801a37c:	4618      	mov	r0, r3
 801a37e:	f7fe fd8f 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a382:	4603      	mov	r3, r0
 801a384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d10a      	bne.n	801a3a2 <HAL_ADC_ConfigChannel+0x222>
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	681b      	ldr	r3, [r3, #0]
 801a390:	2101      	movs	r1, #1
 801a392:	4618      	mov	r0, r3
 801a394:	f7fe fd84 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a398:	4603      	mov	r3, r0
 801a39a:	0e9b      	lsrs	r3, r3, #26
 801a39c:	f003 021f 	and.w	r2, r3, #31
 801a3a0:	e01e      	b.n	801a3e0 <HAL_ADC_ConfigChannel+0x260>
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	2101      	movs	r1, #1
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	f7fe fd79 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a3b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a3b8:	fa93 f3a3 	rbit	r3, r3
 801a3bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801a3c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a3c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801a3c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d101      	bne.n	801a3d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801a3d0:	2320      	movs	r3, #32
 801a3d2:	e004      	b.n	801a3de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801a3d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a3d8:	fab3 f383 	clz	r3, r3
 801a3dc:	b2db      	uxtb	r3, r3
 801a3de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a3e0:	683b      	ldr	r3, [r7, #0]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d105      	bne.n	801a3f8 <HAL_ADC_ConfigChannel+0x278>
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	0e9b      	lsrs	r3, r3, #26
 801a3f2:	f003 031f 	and.w	r3, r3, #31
 801a3f6:	e018      	b.n	801a42a <HAL_ADC_ConfigChannel+0x2aa>
 801a3f8:	683b      	ldr	r3, [r7, #0]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a404:	fa93 f3a3 	rbit	r3, r3
 801a408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801a40c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801a414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d101      	bne.n	801a420 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801a41c:	2320      	movs	r3, #32
 801a41e:	e004      	b.n	801a42a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801a420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a424:	fab3 f383 	clz	r3, r3
 801a428:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d106      	bne.n	801a43c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	2200      	movs	r2, #0
 801a434:	2101      	movs	r1, #1
 801a436:	4618      	mov	r0, r3
 801a438:	f7fe fd48 	bl	8018ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	2102      	movs	r1, #2
 801a442:	4618      	mov	r0, r3
 801a444:	f7fe fd2c 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a448:	4603      	mov	r3, r0
 801a44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d10a      	bne.n	801a468 <HAL_ADC_ConfigChannel+0x2e8>
 801a452:	687b      	ldr	r3, [r7, #4]
 801a454:	681b      	ldr	r3, [r3, #0]
 801a456:	2102      	movs	r1, #2
 801a458:	4618      	mov	r0, r3
 801a45a:	f7fe fd21 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a45e:	4603      	mov	r3, r0
 801a460:	0e9b      	lsrs	r3, r3, #26
 801a462:	f003 021f 	and.w	r2, r3, #31
 801a466:	e01e      	b.n	801a4a6 <HAL_ADC_ConfigChannel+0x326>
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	2102      	movs	r1, #2
 801a46e:	4618      	mov	r0, r3
 801a470:	f7fe fd16 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a474:	4603      	mov	r3, r0
 801a476:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a47e:	fa93 f3a3 	rbit	r3, r3
 801a482:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801a486:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a48a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801a48e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a492:	2b00      	cmp	r3, #0
 801a494:	d101      	bne.n	801a49a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801a496:	2320      	movs	r3, #32
 801a498:	e004      	b.n	801a4a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801a49a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a49e:	fab3 f383 	clz	r3, r3
 801a4a2:	b2db      	uxtb	r3, r3
 801a4a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d105      	bne.n	801a4be <HAL_ADC_ConfigChannel+0x33e>
 801a4b2:	683b      	ldr	r3, [r7, #0]
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	0e9b      	lsrs	r3, r3, #26
 801a4b8:	f003 031f 	and.w	r3, r3, #31
 801a4bc:	e016      	b.n	801a4ec <HAL_ADC_ConfigChannel+0x36c>
 801a4be:	683b      	ldr	r3, [r7, #0]
 801a4c0:	681b      	ldr	r3, [r3, #0]
 801a4c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a4ca:	fa93 f3a3 	rbit	r3, r3
 801a4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801a4d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a4d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801a4d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	d101      	bne.n	801a4e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801a4de:	2320      	movs	r3, #32
 801a4e0:	e004      	b.n	801a4ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801a4e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a4e6:	fab3 f383 	clz	r3, r3
 801a4ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a4ec:	429a      	cmp	r2, r3
 801a4ee:	d106      	bne.n	801a4fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	2102      	movs	r1, #2
 801a4f8:	4618      	mov	r0, r3
 801a4fa:	f7fe fce7 	bl	8018ecc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	2103      	movs	r1, #3
 801a504:	4618      	mov	r0, r3
 801a506:	f7fe fccb 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a50a:	4603      	mov	r3, r0
 801a50c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a510:	2b00      	cmp	r3, #0
 801a512:	d10a      	bne.n	801a52a <HAL_ADC_ConfigChannel+0x3aa>
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	681b      	ldr	r3, [r3, #0]
 801a518:	2103      	movs	r1, #3
 801a51a:	4618      	mov	r0, r3
 801a51c:	f7fe fcc0 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a520:	4603      	mov	r3, r0
 801a522:	0e9b      	lsrs	r3, r3, #26
 801a524:	f003 021f 	and.w	r2, r3, #31
 801a528:	e017      	b.n	801a55a <HAL_ADC_ConfigChannel+0x3da>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	2103      	movs	r1, #3
 801a530:	4618      	mov	r0, r3
 801a532:	f7fe fcb5 	bl	8018ea0 <LL_ADC_GetOffsetChannel>
 801a536:	4603      	mov	r3, r0
 801a538:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a53a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a53c:	fa93 f3a3 	rbit	r3, r3
 801a540:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801a542:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a544:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801a546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d101      	bne.n	801a550 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801a54c:	2320      	movs	r3, #32
 801a54e:	e003      	b.n	801a558 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801a550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a552:	fab3 f383 	clz	r3, r3
 801a556:	b2db      	uxtb	r3, r3
 801a558:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a55a:	683b      	ldr	r3, [r7, #0]
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a562:	2b00      	cmp	r3, #0
 801a564:	d105      	bne.n	801a572 <HAL_ADC_ConfigChannel+0x3f2>
 801a566:	683b      	ldr	r3, [r7, #0]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	0e9b      	lsrs	r3, r3, #26
 801a56c:	f003 031f 	and.w	r3, r3, #31
 801a570:	e011      	b.n	801a596 <HAL_ADC_ConfigChannel+0x416>
 801a572:	683b      	ldr	r3, [r7, #0]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a578:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a57a:	fa93 f3a3 	rbit	r3, r3
 801a57e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801a580:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a582:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a586:	2b00      	cmp	r3, #0
 801a588:	d101      	bne.n	801a58e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a58a:	2320      	movs	r3, #32
 801a58c:	e003      	b.n	801a596 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a58e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a590:	fab3 f383 	clz	r3, r3
 801a594:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a596:	429a      	cmp	r2, r3
 801a598:	d106      	bne.n	801a5a8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	681b      	ldr	r3, [r3, #0]
 801a59e:	2200      	movs	r2, #0
 801a5a0:	2103      	movs	r1, #3
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	f7fe fc92 	bl	8018ecc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	4618      	mov	r0, r3
 801a5ae:	f7fe fe29 	bl	8019204 <LL_ADC_IsEnabled>
 801a5b2:	4603      	mov	r3, r0
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	f040 813d 	bne.w	801a834 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	6818      	ldr	r0, [r3, #0]
 801a5be:	683b      	ldr	r3, [r7, #0]
 801a5c0:	6819      	ldr	r1, [r3, #0]
 801a5c2:	683b      	ldr	r3, [r7, #0]
 801a5c4:	68db      	ldr	r3, [r3, #12]
 801a5c6:	461a      	mov	r2, r3
 801a5c8:	f7fe fd62 	bl	8019090 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	68db      	ldr	r3, [r3, #12]
 801a5d0:	4aa2      	ldr	r2, [pc, #648]	; (801a85c <HAL_ADC_ConfigChannel+0x6dc>)
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	f040 812e 	bne.w	801a834 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a5dc:	683b      	ldr	r3, [r7, #0]
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d10b      	bne.n	801a600 <HAL_ADC_ConfigChannel+0x480>
 801a5e8:	683b      	ldr	r3, [r7, #0]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	0e9b      	lsrs	r3, r3, #26
 801a5ee:	3301      	adds	r3, #1
 801a5f0:	f003 031f 	and.w	r3, r3, #31
 801a5f4:	2b09      	cmp	r3, #9
 801a5f6:	bf94      	ite	ls
 801a5f8:	2301      	movls	r3, #1
 801a5fa:	2300      	movhi	r3, #0
 801a5fc:	b2db      	uxtb	r3, r3
 801a5fe:	e019      	b.n	801a634 <HAL_ADC_ConfigChannel+0x4b4>
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a608:	fa93 f3a3 	rbit	r3, r3
 801a60c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a610:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a614:	2b00      	cmp	r3, #0
 801a616:	d101      	bne.n	801a61c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a618:	2320      	movs	r3, #32
 801a61a:	e003      	b.n	801a624 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a61c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a61e:	fab3 f383 	clz	r3, r3
 801a622:	b2db      	uxtb	r3, r3
 801a624:	3301      	adds	r3, #1
 801a626:	f003 031f 	and.w	r3, r3, #31
 801a62a:	2b09      	cmp	r3, #9
 801a62c:	bf94      	ite	ls
 801a62e:	2301      	movls	r3, #1
 801a630:	2300      	movhi	r3, #0
 801a632:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a634:	2b00      	cmp	r3, #0
 801a636:	d079      	beq.n	801a72c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a638:	683b      	ldr	r3, [r7, #0]
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a640:	2b00      	cmp	r3, #0
 801a642:	d107      	bne.n	801a654 <HAL_ADC_ConfigChannel+0x4d4>
 801a644:	683b      	ldr	r3, [r7, #0]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	0e9b      	lsrs	r3, r3, #26
 801a64a:	3301      	adds	r3, #1
 801a64c:	069b      	lsls	r3, r3, #26
 801a64e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a652:	e015      	b.n	801a680 <HAL_ADC_ConfigChannel+0x500>
 801a654:	683b      	ldr	r3, [r7, #0]
 801a656:	681b      	ldr	r3, [r3, #0]
 801a658:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a65a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a65c:	fa93 f3a3 	rbit	r3, r3
 801a660:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a664:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a668:	2b00      	cmp	r3, #0
 801a66a:	d101      	bne.n	801a670 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a66c:	2320      	movs	r3, #32
 801a66e:	e003      	b.n	801a678 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a672:	fab3 f383 	clz	r3, r3
 801a676:	b2db      	uxtb	r3, r3
 801a678:	3301      	adds	r3, #1
 801a67a:	069b      	lsls	r3, r3, #26
 801a67c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a680:	683b      	ldr	r3, [r7, #0]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a688:	2b00      	cmp	r3, #0
 801a68a:	d109      	bne.n	801a6a0 <HAL_ADC_ConfigChannel+0x520>
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	0e9b      	lsrs	r3, r3, #26
 801a692:	3301      	adds	r3, #1
 801a694:	f003 031f 	and.w	r3, r3, #31
 801a698:	2101      	movs	r1, #1
 801a69a:	fa01 f303 	lsl.w	r3, r1, r3
 801a69e:	e017      	b.n	801a6d0 <HAL_ADC_ConfigChannel+0x550>
 801a6a0:	683b      	ldr	r3, [r7, #0]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a6a8:	fa93 f3a3 	rbit	r3, r3
 801a6ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a6b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	d101      	bne.n	801a6bc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a6b8:	2320      	movs	r3, #32
 801a6ba:	e003      	b.n	801a6c4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a6be:	fab3 f383 	clz	r3, r3
 801a6c2:	b2db      	uxtb	r3, r3
 801a6c4:	3301      	adds	r3, #1
 801a6c6:	f003 031f 	and.w	r3, r3, #31
 801a6ca:	2101      	movs	r1, #1
 801a6cc:	fa01 f303 	lsl.w	r3, r1, r3
 801a6d0:	ea42 0103 	orr.w	r1, r2, r3
 801a6d4:	683b      	ldr	r3, [r7, #0]
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d10a      	bne.n	801a6f6 <HAL_ADC_ConfigChannel+0x576>
 801a6e0:	683b      	ldr	r3, [r7, #0]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	0e9b      	lsrs	r3, r3, #26
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	f003 021f 	and.w	r2, r3, #31
 801a6ec:	4613      	mov	r3, r2
 801a6ee:	005b      	lsls	r3, r3, #1
 801a6f0:	4413      	add	r3, r2
 801a6f2:	051b      	lsls	r3, r3, #20
 801a6f4:	e018      	b.n	801a728 <HAL_ADC_ConfigChannel+0x5a8>
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a6fe:	fa93 f3a3 	rbit	r3, r3
 801a702:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a706:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d101      	bne.n	801a712 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a70e:	2320      	movs	r3, #32
 801a710:	e003      	b.n	801a71a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a714:	fab3 f383 	clz	r3, r3
 801a718:	b2db      	uxtb	r3, r3
 801a71a:	3301      	adds	r3, #1
 801a71c:	f003 021f 	and.w	r2, r3, #31
 801a720:	4613      	mov	r3, r2
 801a722:	005b      	lsls	r3, r3, #1
 801a724:	4413      	add	r3, r2
 801a726:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a728:	430b      	orrs	r3, r1
 801a72a:	e07e      	b.n	801a82a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a72c:	683b      	ldr	r3, [r7, #0]
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a734:	2b00      	cmp	r3, #0
 801a736:	d107      	bne.n	801a748 <HAL_ADC_ConfigChannel+0x5c8>
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	0e9b      	lsrs	r3, r3, #26
 801a73e:	3301      	adds	r3, #1
 801a740:	069b      	lsls	r3, r3, #26
 801a742:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a746:	e015      	b.n	801a774 <HAL_ADC_ConfigChannel+0x5f4>
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a750:	fa93 f3a3 	rbit	r3, r3
 801a754:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a758:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	d101      	bne.n	801a764 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a760:	2320      	movs	r3, #32
 801a762:	e003      	b.n	801a76c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a766:	fab3 f383 	clz	r3, r3
 801a76a:	b2db      	uxtb	r3, r3
 801a76c:	3301      	adds	r3, #1
 801a76e:	069b      	lsls	r3, r3, #26
 801a770:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a774:	683b      	ldr	r3, [r7, #0]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a77c:	2b00      	cmp	r3, #0
 801a77e:	d109      	bne.n	801a794 <HAL_ADC_ConfigChannel+0x614>
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	0e9b      	lsrs	r3, r3, #26
 801a786:	3301      	adds	r3, #1
 801a788:	f003 031f 	and.w	r3, r3, #31
 801a78c:	2101      	movs	r1, #1
 801a78e:	fa01 f303 	lsl.w	r3, r1, r3
 801a792:	e017      	b.n	801a7c4 <HAL_ADC_ConfigChannel+0x644>
 801a794:	683b      	ldr	r3, [r7, #0]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a79a:	6a3b      	ldr	r3, [r7, #32]
 801a79c:	fa93 f3a3 	rbit	r3, r3
 801a7a0:	61fb      	str	r3, [r7, #28]
  return result;
 801a7a2:	69fb      	ldr	r3, [r7, #28]
 801a7a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	d101      	bne.n	801a7b0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a7ac:	2320      	movs	r3, #32
 801a7ae:	e003      	b.n	801a7b8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7b2:	fab3 f383 	clz	r3, r3
 801a7b6:	b2db      	uxtb	r3, r3
 801a7b8:	3301      	adds	r3, #1
 801a7ba:	f003 031f 	and.w	r3, r3, #31
 801a7be:	2101      	movs	r1, #1
 801a7c0:	fa01 f303 	lsl.w	r3, r1, r3
 801a7c4:	ea42 0103 	orr.w	r1, r2, r3
 801a7c8:	683b      	ldr	r3, [r7, #0]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d10d      	bne.n	801a7f0 <HAL_ADC_ConfigChannel+0x670>
 801a7d4:	683b      	ldr	r3, [r7, #0]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	0e9b      	lsrs	r3, r3, #26
 801a7da:	3301      	adds	r3, #1
 801a7dc:	f003 021f 	and.w	r2, r3, #31
 801a7e0:	4613      	mov	r3, r2
 801a7e2:	005b      	lsls	r3, r3, #1
 801a7e4:	4413      	add	r3, r2
 801a7e6:	3b1e      	subs	r3, #30
 801a7e8:	051b      	lsls	r3, r3, #20
 801a7ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a7ee:	e01b      	b.n	801a828 <HAL_ADC_ConfigChannel+0x6a8>
 801a7f0:	683b      	ldr	r3, [r7, #0]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a7f6:	697b      	ldr	r3, [r7, #20]
 801a7f8:	fa93 f3a3 	rbit	r3, r3
 801a7fc:	613b      	str	r3, [r7, #16]
  return result;
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a802:	69bb      	ldr	r3, [r7, #24]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d101      	bne.n	801a80c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a808:	2320      	movs	r3, #32
 801a80a:	e003      	b.n	801a814 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a80c:	69bb      	ldr	r3, [r7, #24]
 801a80e:	fab3 f383 	clz	r3, r3
 801a812:	b2db      	uxtb	r3, r3
 801a814:	3301      	adds	r3, #1
 801a816:	f003 021f 	and.w	r2, r3, #31
 801a81a:	4613      	mov	r3, r2
 801a81c:	005b      	lsls	r3, r3, #1
 801a81e:	4413      	add	r3, r2
 801a820:	3b1e      	subs	r3, #30
 801a822:	051b      	lsls	r3, r3, #20
 801a824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a828:	430b      	orrs	r3, r1
 801a82a:	683a      	ldr	r2, [r7, #0]
 801a82c:	6892      	ldr	r2, [r2, #8]
 801a82e:	4619      	mov	r1, r3
 801a830:	f7fe fc02 	bl	8019038 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a834:	683b      	ldr	r3, [r7, #0]
 801a836:	681a      	ldr	r2, [r3, #0]
 801a838:	4b09      	ldr	r3, [pc, #36]	; (801a860 <HAL_ADC_ConfigChannel+0x6e0>)
 801a83a:	4013      	ands	r3, r2
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	f000 80af 	beq.w	801a9a0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a84a:	d004      	beq.n	801a856 <HAL_ADC_ConfigChannel+0x6d6>
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	4a04      	ldr	r2, [pc, #16]	; (801a864 <HAL_ADC_ConfigChannel+0x6e4>)
 801a852:	4293      	cmp	r3, r2
 801a854:	d10a      	bne.n	801a86c <HAL_ADC_ConfigChannel+0x6ec>
 801a856:	4b04      	ldr	r3, [pc, #16]	; (801a868 <HAL_ADC_ConfigChannel+0x6e8>)
 801a858:	e009      	b.n	801a86e <HAL_ADC_ConfigChannel+0x6ee>
 801a85a:	bf00      	nop
 801a85c:	407f0000 	.word	0x407f0000
 801a860:	80080000 	.word	0x80080000
 801a864:	50000100 	.word	0x50000100
 801a868:	50000300 	.word	0x50000300
 801a86c:	4b51      	ldr	r3, [pc, #324]	; (801a9b4 <HAL_ADC_ConfigChannel+0x834>)
 801a86e:	4618      	mov	r0, r3
 801a870:	f7fe fae4 	bl	8018e3c <LL_ADC_GetCommonPathInternalCh>
 801a874:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a878:	683b      	ldr	r3, [r7, #0]
 801a87a:	681b      	ldr	r3, [r3, #0]
 801a87c:	4a4e      	ldr	r2, [pc, #312]	; (801a9b8 <HAL_ADC_ConfigChannel+0x838>)
 801a87e:	4293      	cmp	r3, r2
 801a880:	d004      	beq.n	801a88c <HAL_ADC_ConfigChannel+0x70c>
 801a882:	683b      	ldr	r3, [r7, #0]
 801a884:	681b      	ldr	r3, [r3, #0]
 801a886:	4a4d      	ldr	r2, [pc, #308]	; (801a9bc <HAL_ADC_ConfigChannel+0x83c>)
 801a888:	4293      	cmp	r3, r2
 801a88a:	d134      	bne.n	801a8f6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a88c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a894:	2b00      	cmp	r3, #0
 801a896:	d12e      	bne.n	801a8f6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8a0:	d17e      	bne.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a8aa:	d004      	beq.n	801a8b6 <HAL_ADC_ConfigChannel+0x736>
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681b      	ldr	r3, [r3, #0]
 801a8b0:	4a43      	ldr	r2, [pc, #268]	; (801a9c0 <HAL_ADC_ConfigChannel+0x840>)
 801a8b2:	4293      	cmp	r3, r2
 801a8b4:	d101      	bne.n	801a8ba <HAL_ADC_ConfigChannel+0x73a>
 801a8b6:	4a43      	ldr	r2, [pc, #268]	; (801a9c4 <HAL_ADC_ConfigChannel+0x844>)
 801a8b8:	e000      	b.n	801a8bc <HAL_ADC_ConfigChannel+0x73c>
 801a8ba:	4a3e      	ldr	r2, [pc, #248]	; (801a9b4 <HAL_ADC_ConfigChannel+0x834>)
 801a8bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a8c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a8c4:	4619      	mov	r1, r3
 801a8c6:	4610      	mov	r0, r2
 801a8c8:	f7fe faa5 	bl	8018e16 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a8cc:	4b3e      	ldr	r3, [pc, #248]	; (801a9c8 <HAL_ADC_ConfigChannel+0x848>)
 801a8ce:	681b      	ldr	r3, [r3, #0]
 801a8d0:	099b      	lsrs	r3, r3, #6
 801a8d2:	4a3e      	ldr	r2, [pc, #248]	; (801a9cc <HAL_ADC_ConfigChannel+0x84c>)
 801a8d4:	fba2 2303 	umull	r2, r3, r2, r3
 801a8d8:	099b      	lsrs	r3, r3, #6
 801a8da:	1c5a      	adds	r2, r3, #1
 801a8dc:	4613      	mov	r3, r2
 801a8de:	005b      	lsls	r3, r3, #1
 801a8e0:	4413      	add	r3, r2
 801a8e2:	009b      	lsls	r3, r3, #2
 801a8e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a8e6:	e002      	b.n	801a8ee <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	3b01      	subs	r3, #1
 801a8ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a8ee:	68fb      	ldr	r3, [r7, #12]
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d1f9      	bne.n	801a8e8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a8f4:	e054      	b.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a8f6:	683b      	ldr	r3, [r7, #0]
 801a8f8:	681b      	ldr	r3, [r3, #0]
 801a8fa:	4a35      	ldr	r2, [pc, #212]	; (801a9d0 <HAL_ADC_ConfigChannel+0x850>)
 801a8fc:	4293      	cmp	r3, r2
 801a8fe:	d120      	bne.n	801a942 <HAL_ADC_ConfigChannel+0x7c2>
 801a900:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a908:	2b00      	cmp	r3, #0
 801a90a:	d11a      	bne.n	801a942 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a914:	d144      	bne.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	681b      	ldr	r3, [r3, #0]
 801a91a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a91e:	d004      	beq.n	801a92a <HAL_ADC_ConfigChannel+0x7aa>
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	4a26      	ldr	r2, [pc, #152]	; (801a9c0 <HAL_ADC_ConfigChannel+0x840>)
 801a926:	4293      	cmp	r3, r2
 801a928:	d101      	bne.n	801a92e <HAL_ADC_ConfigChannel+0x7ae>
 801a92a:	4a26      	ldr	r2, [pc, #152]	; (801a9c4 <HAL_ADC_ConfigChannel+0x844>)
 801a92c:	e000      	b.n	801a930 <HAL_ADC_ConfigChannel+0x7b0>
 801a92e:	4a21      	ldr	r2, [pc, #132]	; (801a9b4 <HAL_ADC_ConfigChannel+0x834>)
 801a930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a934:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a938:	4619      	mov	r1, r3
 801a93a:	4610      	mov	r0, r2
 801a93c:	f7fe fa6b 	bl	8018e16 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a940:	e02e      	b.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a942:	683b      	ldr	r3, [r7, #0]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	4a23      	ldr	r2, [pc, #140]	; (801a9d4 <HAL_ADC_ConfigChannel+0x854>)
 801a948:	4293      	cmp	r3, r2
 801a94a:	d129      	bne.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a94c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a954:	2b00      	cmp	r3, #0
 801a956:	d123      	bne.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	4a18      	ldr	r2, [pc, #96]	; (801a9c0 <HAL_ADC_ConfigChannel+0x840>)
 801a95e:	4293      	cmp	r3, r2
 801a960:	d01e      	beq.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a96a:	d004      	beq.n	801a976 <HAL_ADC_ConfigChannel+0x7f6>
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	4a13      	ldr	r2, [pc, #76]	; (801a9c0 <HAL_ADC_ConfigChannel+0x840>)
 801a972:	4293      	cmp	r3, r2
 801a974:	d101      	bne.n	801a97a <HAL_ADC_ConfigChannel+0x7fa>
 801a976:	4a13      	ldr	r2, [pc, #76]	; (801a9c4 <HAL_ADC_ConfigChannel+0x844>)
 801a978:	e000      	b.n	801a97c <HAL_ADC_ConfigChannel+0x7fc>
 801a97a:	4a0e      	ldr	r2, [pc, #56]	; (801a9b4 <HAL_ADC_ConfigChannel+0x834>)
 801a97c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a980:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a984:	4619      	mov	r1, r3
 801a986:	4610      	mov	r0, r2
 801a988:	f7fe fa45 	bl	8018e16 <LL_ADC_SetCommonPathInternalCh>
 801a98c:	e008      	b.n	801a9a0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a992:	f043 0220 	orr.w	r2, r3, #32
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a99a:	2301      	movs	r3, #1
 801a99c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a9a8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a9ac:	4618      	mov	r0, r3
 801a9ae:	37d8      	adds	r7, #216	; 0xd8
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	bd80      	pop	{r7, pc}
 801a9b4:	50000700 	.word	0x50000700
 801a9b8:	c3210000 	.word	0xc3210000
 801a9bc:	90c00010 	.word	0x90c00010
 801a9c0:	50000100 	.word	0x50000100
 801a9c4:	50000300 	.word	0x50000300
 801a9c8:	20000000 	.word	0x20000000
 801a9cc:	053e2d63 	.word	0x053e2d63
 801a9d0:	c7520000 	.word	0xc7520000
 801a9d4:	cb840000 	.word	0xcb840000

0801a9d8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b088      	sub	sp, #32
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	f7fe fc56 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 801a9f4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f7fe fc77 	bl	80192ee <LL_ADC_INJ_IsConversionOngoing>
 801aa00:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801aa02:	693b      	ldr	r3, [r7, #16]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d103      	bne.n	801aa10 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	f000 8098 	beq.w	801ab40 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	68db      	ldr	r3, [r3, #12]
 801aa16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d02a      	beq.n	801aa74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	7f5b      	ldrb	r3, [r3, #29]
 801aa22:	2b01      	cmp	r3, #1
 801aa24:	d126      	bne.n	801aa74 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	7f1b      	ldrb	r3, [r3, #28]
 801aa2a:	2b01      	cmp	r3, #1
 801aa2c:	d122      	bne.n	801aa74 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801aa2e:	2301      	movs	r3, #1
 801aa30:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801aa32:	e014      	b.n	801aa5e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801aa34:	69fb      	ldr	r3, [r7, #28]
 801aa36:	4a45      	ldr	r2, [pc, #276]	; (801ab4c <ADC_ConversionStop+0x174>)
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	d90d      	bls.n	801aa58 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa40:	f043 0210 	orr.w	r2, r3, #16
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa4c:	f043 0201 	orr.w	r2, r3, #1
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801aa54:	2301      	movs	r3, #1
 801aa56:	e074      	b.n	801ab42 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801aa58:	69fb      	ldr	r3, [r7, #28]
 801aa5a:	3301      	adds	r3, #1
 801aa5c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801aa5e:	687b      	ldr	r3, [r7, #4]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa68:	2b40      	cmp	r3, #64	; 0x40
 801aa6a:	d1e3      	bne.n	801aa34 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	2240      	movs	r2, #64	; 0x40
 801aa72:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801aa74:	69bb      	ldr	r3, [r7, #24]
 801aa76:	2b02      	cmp	r3, #2
 801aa78:	d014      	beq.n	801aaa4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	681b      	ldr	r3, [r3, #0]
 801aa7e:	4618      	mov	r0, r3
 801aa80:	f7fe fc0e 	bl	80192a0 <LL_ADC_REG_IsConversionOngoing>
 801aa84:	4603      	mov	r3, r0
 801aa86:	2b00      	cmp	r3, #0
 801aa88:	d00c      	beq.n	801aaa4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7fe fbcb 	bl	801922a <LL_ADC_IsDisableOngoing>
 801aa94:	4603      	mov	r3, r0
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d104      	bne.n	801aaa4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f7fe fbea 	bl	8019278 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801aaa4:	69bb      	ldr	r3, [r7, #24]
 801aaa6:	2b01      	cmp	r3, #1
 801aaa8:	d014      	beq.n	801aad4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7fe fc1d 	bl	80192ee <LL_ADC_INJ_IsConversionOngoing>
 801aab4:	4603      	mov	r3, r0
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d00c      	beq.n	801aad4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	681b      	ldr	r3, [r3, #0]
 801aabe:	4618      	mov	r0, r3
 801aac0:	f7fe fbb3 	bl	801922a <LL_ADC_IsDisableOngoing>
 801aac4:	4603      	mov	r3, r0
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d104      	bne.n	801aad4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801aaca:	687b      	ldr	r3, [r7, #4]
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	4618      	mov	r0, r3
 801aad0:	f7fe fbf9 	bl	80192c6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801aad4:	69bb      	ldr	r3, [r7, #24]
 801aad6:	2b02      	cmp	r3, #2
 801aad8:	d005      	beq.n	801aae6 <ADC_ConversionStop+0x10e>
 801aada:	69bb      	ldr	r3, [r7, #24]
 801aadc:	2b03      	cmp	r3, #3
 801aade:	d105      	bne.n	801aaec <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801aae0:	230c      	movs	r3, #12
 801aae2:	617b      	str	r3, [r7, #20]
        break;
 801aae4:	e005      	b.n	801aaf2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801aae6:	2308      	movs	r3, #8
 801aae8:	617b      	str	r3, [r7, #20]
        break;
 801aaea:	e002      	b.n	801aaf2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801aaec:	2304      	movs	r3, #4
 801aaee:	617b      	str	r3, [r7, #20]
        break;
 801aaf0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801aaf2:	f7fe f94f 	bl	8018d94 <HAL_GetTick>
 801aaf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801aaf8:	e01b      	b.n	801ab32 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801aafa:	f7fe f94b 	bl	8018d94 <HAL_GetTick>
 801aafe:	4602      	mov	r2, r0
 801ab00:	68bb      	ldr	r3, [r7, #8]
 801ab02:	1ad3      	subs	r3, r2, r3
 801ab04:	2b05      	cmp	r3, #5
 801ab06:	d914      	bls.n	801ab32 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	689a      	ldr	r2, [r3, #8]
 801ab0e:	697b      	ldr	r3, [r7, #20]
 801ab10:	4013      	ands	r3, r2
 801ab12:	2b00      	cmp	r3, #0
 801ab14:	d00d      	beq.n	801ab32 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab1a:	f043 0210 	orr.w	r2, r3, #16
 801ab1e:	687b      	ldr	r3, [r7, #4]
 801ab20:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab26:	f043 0201 	orr.w	r2, r3, #1
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801ab2e:	2301      	movs	r3, #1
 801ab30:	e007      	b.n	801ab42 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	689a      	ldr	r2, [r3, #8]
 801ab38:	697b      	ldr	r3, [r7, #20]
 801ab3a:	4013      	ands	r3, r2
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d1dc      	bne.n	801aafa <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801ab40:	2300      	movs	r3, #0
}
 801ab42:	4618      	mov	r0, r3
 801ab44:	3720      	adds	r7, #32
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop
 801ab4c:	a33fffff 	.word	0xa33fffff

0801ab50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801ab50:	b580      	push	{r7, lr}
 801ab52:	b084      	sub	sp, #16
 801ab54:	af00      	add	r7, sp, #0
 801ab56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	4618      	mov	r0, r3
 801ab5e:	f7fe fb51 	bl	8019204 <LL_ADC_IsEnabled>
 801ab62:	4603      	mov	r3, r0
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d14d      	bne.n	801ac04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	689a      	ldr	r2, [r3, #8]
 801ab6e:	4b28      	ldr	r3, [pc, #160]	; (801ac10 <ADC_Enable+0xc0>)
 801ab70:	4013      	ands	r3, r2
 801ab72:	2b00      	cmp	r3, #0
 801ab74:	d00d      	beq.n	801ab92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab7a:	f043 0210 	orr.w	r2, r3, #16
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ab86:	f043 0201 	orr.w	r2, r3, #1
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801ab8e:	2301      	movs	r3, #1
 801ab90:	e039      	b.n	801ac06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	4618      	mov	r0, r3
 801ab98:	f7fe fb0c 	bl	80191b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801ab9c:	f7fe f8fa 	bl	8018d94 <HAL_GetTick>
 801aba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801aba2:	e028      	b.n	801abf6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	4618      	mov	r0, r3
 801abaa:	f7fe fb2b 	bl	8019204 <LL_ADC_IsEnabled>
 801abae:	4603      	mov	r3, r0
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d104      	bne.n	801abbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	4618      	mov	r0, r3
 801abba:	f7fe fafb 	bl	80191b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801abbe:	f7fe f8e9 	bl	8018d94 <HAL_GetTick>
 801abc2:	4602      	mov	r2, r0
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	1ad3      	subs	r3, r2, r3
 801abc8:	2b02      	cmp	r3, #2
 801abca:	d914      	bls.n	801abf6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	f003 0301 	and.w	r3, r3, #1
 801abd6:	2b01      	cmp	r3, #1
 801abd8:	d00d      	beq.n	801abf6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abde:	f043 0210 	orr.w	r2, r3, #16
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801abea:	f043 0201 	orr.w	r2, r3, #1
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801abf2:	2301      	movs	r3, #1
 801abf4:	e007      	b.n	801ac06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	f003 0301 	and.w	r3, r3, #1
 801ac00:	2b01      	cmp	r3, #1
 801ac02:	d1cf      	bne.n	801aba4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801ac04:	2300      	movs	r3, #0
}
 801ac06:	4618      	mov	r0, r3
 801ac08:	3710      	adds	r7, #16
 801ac0a:	46bd      	mov	sp, r7
 801ac0c:	bd80      	pop	{r7, pc}
 801ac0e:	bf00      	nop
 801ac10:	8000003f 	.word	0x8000003f

0801ac14 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801ac14:	b580      	push	{r7, lr}
 801ac16:	b084      	sub	sp, #16
 801ac18:	af00      	add	r7, sp, #0
 801ac1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	4618      	mov	r0, r3
 801ac22:	f7fe fb02 	bl	801922a <LL_ADC_IsDisableOngoing>
 801ac26:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	f7fe fae9 	bl	8019204 <LL_ADC_IsEnabled>
 801ac32:	4603      	mov	r3, r0
 801ac34:	2b00      	cmp	r3, #0
 801ac36:	d047      	beq.n	801acc8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d144      	bne.n	801acc8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801ac3e:	687b      	ldr	r3, [r7, #4]
 801ac40:	681b      	ldr	r3, [r3, #0]
 801ac42:	689b      	ldr	r3, [r3, #8]
 801ac44:	f003 030d 	and.w	r3, r3, #13
 801ac48:	2b01      	cmp	r3, #1
 801ac4a:	d10c      	bne.n	801ac66 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	4618      	mov	r0, r3
 801ac52:	f7fe fac3 	bl	80191dc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	2203      	movs	r2, #3
 801ac5c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801ac5e:	f7fe f899 	bl	8018d94 <HAL_GetTick>
 801ac62:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac64:	e029      	b.n	801acba <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac6a:	f043 0210 	orr.w	r2, r3, #16
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac76:	f043 0201 	orr.w	r2, r3, #1
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801ac7e:	2301      	movs	r3, #1
 801ac80:	e023      	b.n	801acca <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801ac82:	f7fe f887 	bl	8018d94 <HAL_GetTick>
 801ac86:	4602      	mov	r2, r0
 801ac88:	68bb      	ldr	r3, [r7, #8]
 801ac8a:	1ad3      	subs	r3, r2, r3
 801ac8c:	2b02      	cmp	r3, #2
 801ac8e:	d914      	bls.n	801acba <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	689b      	ldr	r3, [r3, #8]
 801ac96:	f003 0301 	and.w	r3, r3, #1
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d00d      	beq.n	801acba <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aca2:	f043 0210 	orr.w	r2, r3, #16
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801acae:	f043 0201 	orr.w	r2, r3, #1
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801acb6:	2301      	movs	r3, #1
 801acb8:	e007      	b.n	801acca <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	689b      	ldr	r3, [r3, #8]
 801acc0:	f003 0301 	and.w	r3, r3, #1
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d1dc      	bne.n	801ac82 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801acc8:	2300      	movs	r3, #0
}
 801acca:	4618      	mov	r0, r3
 801accc:	3710      	adds	r7, #16
 801acce:	46bd      	mov	sp, r7
 801acd0:	bd80      	pop	{r7, pc}

0801acd2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801acd2:	b580      	push	{r7, lr}
 801acd4:	b084      	sub	sp, #16
 801acd6:	af00      	add	r7, sp, #0
 801acd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801acde:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801ace0:	68fb      	ldr	r3, [r7, #12]
 801ace2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ace4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d14b      	bne.n	801ad84 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801acf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	f003 0308 	and.w	r3, r3, #8
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d021      	beq.n	801ad4a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	4618      	mov	r0, r3
 801ad0c:	f7fe f942 	bl	8018f94 <LL_ADC_REG_IsTriggerSourceSWStart>
 801ad10:	4603      	mov	r3, r0
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d032      	beq.n	801ad7c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	68db      	ldr	r3, [r3, #12]
 801ad1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ad20:	2b00      	cmp	r3, #0
 801ad22:	d12b      	bne.n	801ad7c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801ad30:	68fb      	ldr	r3, [r7, #12]
 801ad32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ad38:	2b00      	cmp	r3, #0
 801ad3a:	d11f      	bne.n	801ad7c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad40:	f043 0201 	orr.w	r2, r3, #1
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	65da      	str	r2, [r3, #92]	; 0x5c
 801ad48:	e018      	b.n	801ad7c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	68db      	ldr	r3, [r3, #12]
 801ad50:	f003 0302 	and.w	r3, r3, #2
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d111      	bne.n	801ad7c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ad60:	68fb      	ldr	r3, [r7, #12]
 801ad62:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801ad64:	68fb      	ldr	r3, [r7, #12]
 801ad66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d105      	bne.n	801ad7c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad74:	f043 0201 	orr.w	r2, r3, #1
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801ad7c:	68f8      	ldr	r0, [r7, #12]
 801ad7e:	f7ed fa8b 	bl	8008298 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801ad82:	e00e      	b.n	801ada2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801ad84:	68fb      	ldr	r3, [r7, #12]
 801ad86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad88:	f003 0310 	and.w	r3, r3, #16
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d003      	beq.n	801ad98 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801ad90:	68f8      	ldr	r0, [r7, #12]
 801ad92:	f7ff f9eb 	bl	801a16c <HAL_ADC_ErrorCallback>
}
 801ad96:	e004      	b.n	801ada2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801ad98:	68fb      	ldr	r3, [r7, #12]
 801ad9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ad9e:	6878      	ldr	r0, [r7, #4]
 801ada0:	4798      	blx	r3
}
 801ada2:	bf00      	nop
 801ada4:	3710      	adds	r7, #16
 801ada6:	46bd      	mov	sp, r7
 801ada8:	bd80      	pop	{r7, pc}

0801adaa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801adaa:	b580      	push	{r7, lr}
 801adac:	b084      	sub	sp, #16
 801adae:	af00      	add	r7, sp, #0
 801adb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801adb6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801adb8:	68f8      	ldr	r0, [r7, #12]
 801adba:	f7ff f9c3 	bl	801a144 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801adbe:	bf00      	nop
 801adc0:	3710      	adds	r7, #16
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}

0801adc6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801adc6:	b580      	push	{r7, lr}
 801adc8:	b084      	sub	sp, #16
 801adca:	af00      	add	r7, sp, #0
 801adcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801add2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801add8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801addc:	68fb      	ldr	r3, [r7, #12]
 801adde:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801ade0:	68fb      	ldr	r3, [r7, #12]
 801ade2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ade4:	f043 0204 	orr.w	r2, r3, #4
 801ade8:	68fb      	ldr	r3, [r7, #12]
 801adea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801adec:	68f8      	ldr	r0, [r7, #12]
 801adee:	f7ff f9bd 	bl	801a16c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801adf2:	bf00      	nop
 801adf4:	3710      	adds	r7, #16
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}

0801adfa <LL_ADC_IsEnabled>:
{
 801adfa:	b480      	push	{r7}
 801adfc:	b083      	sub	sp, #12
 801adfe:	af00      	add	r7, sp, #0
 801ae00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	689b      	ldr	r3, [r3, #8]
 801ae06:	f003 0301 	and.w	r3, r3, #1
 801ae0a:	2b01      	cmp	r3, #1
 801ae0c:	d101      	bne.n	801ae12 <LL_ADC_IsEnabled+0x18>
 801ae0e:	2301      	movs	r3, #1
 801ae10:	e000      	b.n	801ae14 <LL_ADC_IsEnabled+0x1a>
 801ae12:	2300      	movs	r3, #0
}
 801ae14:	4618      	mov	r0, r3
 801ae16:	370c      	adds	r7, #12
 801ae18:	46bd      	mov	sp, r7
 801ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae1e:	4770      	bx	lr

0801ae20 <LL_ADC_StartCalibration>:
{
 801ae20:	b480      	push	{r7}
 801ae22:	b083      	sub	sp, #12
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	6078      	str	r0, [r7, #4]
 801ae28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801ae2a:	687b      	ldr	r3, [r7, #4]
 801ae2c:	689b      	ldr	r3, [r3, #8]
 801ae2e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ae32:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ae36:	683a      	ldr	r2, [r7, #0]
 801ae38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801ae3c:	4313      	orrs	r3, r2
 801ae3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ae42:	687b      	ldr	r3, [r7, #4]
 801ae44:	609a      	str	r2, [r3, #8]
}
 801ae46:	bf00      	nop
 801ae48:	370c      	adds	r7, #12
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae50:	4770      	bx	lr

0801ae52 <LL_ADC_IsCalibrationOnGoing>:
{
 801ae52:	b480      	push	{r7}
 801ae54:	b083      	sub	sp, #12
 801ae56:	af00      	add	r7, sp, #0
 801ae58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	689b      	ldr	r3, [r3, #8]
 801ae5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ae62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ae66:	d101      	bne.n	801ae6c <LL_ADC_IsCalibrationOnGoing+0x1a>
 801ae68:	2301      	movs	r3, #1
 801ae6a:	e000      	b.n	801ae6e <LL_ADC_IsCalibrationOnGoing+0x1c>
 801ae6c:	2300      	movs	r3, #0
}
 801ae6e:	4618      	mov	r0, r3
 801ae70:	370c      	adds	r7, #12
 801ae72:	46bd      	mov	sp, r7
 801ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae78:	4770      	bx	lr

0801ae7a <LL_ADC_REG_IsConversionOngoing>:
{
 801ae7a:	b480      	push	{r7}
 801ae7c:	b083      	sub	sp, #12
 801ae7e:	af00      	add	r7, sp, #0
 801ae80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	689b      	ldr	r3, [r3, #8]
 801ae86:	f003 0304 	and.w	r3, r3, #4
 801ae8a:	2b04      	cmp	r3, #4
 801ae8c:	d101      	bne.n	801ae92 <LL_ADC_REG_IsConversionOngoing+0x18>
 801ae8e:	2301      	movs	r3, #1
 801ae90:	e000      	b.n	801ae94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801ae92:	2300      	movs	r3, #0
}
 801ae94:	4618      	mov	r0, r3
 801ae96:	370c      	adds	r7, #12
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae9e:	4770      	bx	lr

0801aea0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b084      	sub	sp, #16
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	6078      	str	r0, [r7, #4]
 801aea8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801aeaa:	2300      	movs	r3, #0
 801aeac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aeb4:	2b01      	cmp	r3, #1
 801aeb6:	d101      	bne.n	801aebc <HAL_ADCEx_Calibration_Start+0x1c>
 801aeb8:	2302      	movs	r3, #2
 801aeba:	e04d      	b.n	801af58 <HAL_ADCEx_Calibration_Start+0xb8>
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	2201      	movs	r2, #1
 801aec0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801aec4:	6878      	ldr	r0, [r7, #4]
 801aec6:	f7ff fea5 	bl	801ac14 <ADC_Disable>
 801aeca:	4603      	mov	r3, r0
 801aecc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801aece:	7bfb      	ldrb	r3, [r7, #15]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d136      	bne.n	801af42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aed8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801aedc:	f023 0302 	bic.w	r3, r3, #2
 801aee0:	f043 0202 	orr.w	r2, r3, #2
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	6839      	ldr	r1, [r7, #0]
 801aeee:	4618      	mov	r0, r3
 801aef0:	f7ff ff96 	bl	801ae20 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801aef4:	e014      	b.n	801af20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801aef6:	68bb      	ldr	r3, [r7, #8]
 801aef8:	3301      	adds	r3, #1
 801aefa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801aefc:	68bb      	ldr	r3, [r7, #8]
 801aefe:	4a18      	ldr	r2, [pc, #96]	; (801af60 <HAL_ADCEx_Calibration_Start+0xc0>)
 801af00:	4293      	cmp	r3, r2
 801af02:	d90d      	bls.n	801af20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801af08:	f023 0312 	bic.w	r3, r3, #18
 801af0c:	f043 0210 	orr.w	r2, r3, #16
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	2200      	movs	r2, #0
 801af18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801af1c:	2301      	movs	r3, #1
 801af1e:	e01b      	b.n	801af58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	4618      	mov	r0, r3
 801af26:	f7ff ff94 	bl	801ae52 <LL_ADC_IsCalibrationOnGoing>
 801af2a:	4603      	mov	r3, r0
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d1e2      	bne.n	801aef6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801af34:	f023 0303 	bic.w	r3, r3, #3
 801af38:	f043 0201 	orr.w	r2, r3, #1
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	65da      	str	r2, [r3, #92]	; 0x5c
 801af40:	e005      	b.n	801af4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801af46:	f043 0210 	orr.w	r2, r3, #16
 801af4a:	687b      	ldr	r3, [r7, #4]
 801af4c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2200      	movs	r2, #0
 801af52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801af56:	7bfb      	ldrb	r3, [r7, #15]
}
 801af58:	4618      	mov	r0, r3
 801af5a:	3710      	adds	r7, #16
 801af5c:	46bd      	mov	sp, r7
 801af5e:	bd80      	pop	{r7, pc}
 801af60:	0004de01 	.word	0x0004de01

0801af64 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801af64:	b480      	push	{r7}
 801af66:	b083      	sub	sp, #12
 801af68:	af00      	add	r7, sp, #0
 801af6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801af6c:	bf00      	nop
 801af6e:	370c      	adds	r7, #12
 801af70:	46bd      	mov	sp, r7
 801af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af76:	4770      	bx	lr

0801af78 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801af78:	b480      	push	{r7}
 801af7a:	b083      	sub	sp, #12
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801af80:	bf00      	nop
 801af82:	370c      	adds	r7, #12
 801af84:	46bd      	mov	sp, r7
 801af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af8a:	4770      	bx	lr

0801af8c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801af8c:	b480      	push	{r7}
 801af8e:	b083      	sub	sp, #12
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801af94:	bf00      	nop
 801af96:	370c      	adds	r7, #12
 801af98:	46bd      	mov	sp, r7
 801af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af9e:	4770      	bx	lr

0801afa0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801afa0:	b480      	push	{r7}
 801afa2:	b083      	sub	sp, #12
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801afa8:	bf00      	nop
 801afaa:	370c      	adds	r7, #12
 801afac:	46bd      	mov	sp, r7
 801afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afb2:	4770      	bx	lr

0801afb4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801afb4:	b480      	push	{r7}
 801afb6:	b083      	sub	sp, #12
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801afbc:	bf00      	nop
 801afbe:	370c      	adds	r7, #12
 801afc0:	46bd      	mov	sp, r7
 801afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afc6:	4770      	bx	lr

0801afc8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801afc8:	b590      	push	{r4, r7, lr}
 801afca:	b0a1      	sub	sp, #132	; 0x84
 801afcc:	af00      	add	r7, sp, #0
 801afce:	6078      	str	r0, [r7, #4]
 801afd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801afd2:	2300      	movs	r3, #0
 801afd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801afde:	2b01      	cmp	r3, #1
 801afe0:	d101      	bne.n	801afe6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801afe2:	2302      	movs	r3, #2
 801afe4:	e0cb      	b.n	801b17e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	2201      	movs	r2, #1
 801afea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801afee:	2300      	movs	r3, #0
 801aff0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801aff2:	2300      	movs	r3, #0
 801aff4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801affe:	d102      	bne.n	801b006 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801b000:	4b61      	ldr	r3, [pc, #388]	; (801b188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b002:	60bb      	str	r3, [r7, #8]
 801b004:	e001      	b.n	801b00a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801b006:	2300      	movs	r3, #0
 801b008:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801b00a:	68bb      	ldr	r3, [r7, #8]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d10b      	bne.n	801b028 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b014:	f043 0220 	orr.w	r2, r3, #32
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2200      	movs	r2, #0
 801b020:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801b024:	2301      	movs	r3, #1
 801b026:	e0aa      	b.n	801b17e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	4618      	mov	r0, r3
 801b02c:	f7ff ff25 	bl	801ae7a <LL_ADC_REG_IsConversionOngoing>
 801b030:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	4618      	mov	r0, r3
 801b038:	f7ff ff1f 	bl	801ae7a <LL_ADC_REG_IsConversionOngoing>
 801b03c:	4603      	mov	r3, r0
 801b03e:	2b00      	cmp	r3, #0
 801b040:	f040 808c 	bne.w	801b15c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801b044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b046:	2b00      	cmp	r3, #0
 801b048:	f040 8088 	bne.w	801b15c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b054:	d004      	beq.n	801b060 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	4a4b      	ldr	r2, [pc, #300]	; (801b188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b05c:	4293      	cmp	r3, r2
 801b05e:	d101      	bne.n	801b064 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801b060:	4b4a      	ldr	r3, [pc, #296]	; (801b18c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801b062:	e000      	b.n	801b066 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801b064:	4b4a      	ldr	r3, [pc, #296]	; (801b190 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801b066:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b068:	683b      	ldr	r3, [r7, #0]
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d041      	beq.n	801b0f4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801b070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b072:	689b      	ldr	r3, [r3, #8]
 801b074:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b078:	683b      	ldr	r3, [r7, #0]
 801b07a:	6859      	ldr	r1, [r3, #4]
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b082:	035b      	lsls	r3, r3, #13
 801b084:	430b      	orrs	r3, r1
 801b086:	431a      	orrs	r2, r3
 801b088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b08a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b094:	d004      	beq.n	801b0a0 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4a3b      	ldr	r2, [pc, #236]	; (801b188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b09c:	4293      	cmp	r3, r2
 801b09e:	d10f      	bne.n	801b0c0 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801b0a0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b0a4:	f7ff fea9 	bl	801adfa <LL_ADC_IsEnabled>
 801b0a8:	4604      	mov	r4, r0
 801b0aa:	4837      	ldr	r0, [pc, #220]	; (801b188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b0ac:	f7ff fea5 	bl	801adfa <LL_ADC_IsEnabled>
 801b0b0:	4603      	mov	r3, r0
 801b0b2:	4323      	orrs	r3, r4
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	bf0c      	ite	eq
 801b0b8:	2301      	moveq	r3, #1
 801b0ba:	2300      	movne	r3, #0
 801b0bc:	b2db      	uxtb	r3, r3
 801b0be:	e008      	b.n	801b0d2 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801b0c0:	4834      	ldr	r0, [pc, #208]	; (801b194 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b0c2:	f7ff fe9a 	bl	801adfa <LL_ADC_IsEnabled>
 801b0c6:	4603      	mov	r3, r0
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	bf0c      	ite	eq
 801b0cc:	2301      	moveq	r3, #1
 801b0ce:	2300      	movne	r3, #0
 801b0d0:	b2db      	uxtb	r3, r3
 801b0d2:	2b00      	cmp	r3, #0
 801b0d4:	d04c      	beq.n	801b170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801b0d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0d8:	689b      	ldr	r3, [r3, #8]
 801b0da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b0de:	f023 030f 	bic.w	r3, r3, #15
 801b0e2:	683a      	ldr	r2, [r7, #0]
 801b0e4:	6811      	ldr	r1, [r2, #0]
 801b0e6:	683a      	ldr	r2, [r7, #0]
 801b0e8:	6892      	ldr	r2, [r2, #8]
 801b0ea:	430a      	orrs	r2, r1
 801b0ec:	431a      	orrs	r2, r3
 801b0ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0f0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b0f2:	e03d      	b.n	801b170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801b0f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0f6:	689b      	ldr	r3, [r3, #8]
 801b0f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b0fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b0fe:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b108:	d004      	beq.n	801b114 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	4a1e      	ldr	r2, [pc, #120]	; (801b188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b110:	4293      	cmp	r3, r2
 801b112:	d10f      	bne.n	801b134 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801b114:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b118:	f7ff fe6f 	bl	801adfa <LL_ADC_IsEnabled>
 801b11c:	4604      	mov	r4, r0
 801b11e:	481a      	ldr	r0, [pc, #104]	; (801b188 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b120:	f7ff fe6b 	bl	801adfa <LL_ADC_IsEnabled>
 801b124:	4603      	mov	r3, r0
 801b126:	4323      	orrs	r3, r4
 801b128:	2b00      	cmp	r3, #0
 801b12a:	bf0c      	ite	eq
 801b12c:	2301      	moveq	r3, #1
 801b12e:	2300      	movne	r3, #0
 801b130:	b2db      	uxtb	r3, r3
 801b132:	e008      	b.n	801b146 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801b134:	4817      	ldr	r0, [pc, #92]	; (801b194 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b136:	f7ff fe60 	bl	801adfa <LL_ADC_IsEnabled>
 801b13a:	4603      	mov	r3, r0
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	bf0c      	ite	eq
 801b140:	2301      	moveq	r3, #1
 801b142:	2300      	movne	r3, #0
 801b144:	b2db      	uxtb	r3, r3
 801b146:	2b00      	cmp	r3, #0
 801b148:	d012      	beq.n	801b170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801b14a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b14c:	689b      	ldr	r3, [r3, #8]
 801b14e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b152:	f023 030f 	bic.w	r3, r3, #15
 801b156:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801b158:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b15a:	e009      	b.n	801b170 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b160:	f043 0220 	orr.w	r2, r3, #32
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b168:	2301      	movs	r3, #1
 801b16a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801b16e:	e000      	b.n	801b172 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	2200      	movs	r2, #0
 801b176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b17a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801b17e:	4618      	mov	r0, r3
 801b180:	3784      	adds	r7, #132	; 0x84
 801b182:	46bd      	mov	sp, r7
 801b184:	bd90      	pop	{r4, r7, pc}
 801b186:	bf00      	nop
 801b188:	50000100 	.word	0x50000100
 801b18c:	50000300 	.word	0x50000300
 801b190:	50000700 	.word	0x50000700
 801b194:	50000400 	.word	0x50000400

0801b198 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b198:	b480      	push	{r7}
 801b19a:	b085      	sub	sp, #20
 801b19c:	af00      	add	r7, sp, #0
 801b19e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	f003 0307 	and.w	r3, r3, #7
 801b1a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801b1a8:	4b0c      	ldr	r3, [pc, #48]	; (801b1dc <__NVIC_SetPriorityGrouping+0x44>)
 801b1aa:	68db      	ldr	r3, [r3, #12]
 801b1ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801b1ae:	68ba      	ldr	r2, [r7, #8]
 801b1b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801b1b4:	4013      	ands	r3, r2
 801b1b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801b1b8:	68fb      	ldr	r3, [r7, #12]
 801b1ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801b1bc:	68bb      	ldr	r3, [r7, #8]
 801b1be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801b1c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801b1c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b1c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b1ca:	4a04      	ldr	r2, [pc, #16]	; (801b1dc <__NVIC_SetPriorityGrouping+0x44>)
 801b1cc:	68bb      	ldr	r3, [r7, #8]
 801b1ce:	60d3      	str	r3, [r2, #12]
}
 801b1d0:	bf00      	nop
 801b1d2:	3714      	adds	r7, #20
 801b1d4:	46bd      	mov	sp, r7
 801b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1da:	4770      	bx	lr
 801b1dc:	e000ed00 	.word	0xe000ed00

0801b1e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b1e0:	b480      	push	{r7}
 801b1e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b1e4:	4b04      	ldr	r3, [pc, #16]	; (801b1f8 <__NVIC_GetPriorityGrouping+0x18>)
 801b1e6:	68db      	ldr	r3, [r3, #12]
 801b1e8:	0a1b      	lsrs	r3, r3, #8
 801b1ea:	f003 0307 	and.w	r3, r3, #7
}
 801b1ee:	4618      	mov	r0, r3
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1f6:	4770      	bx	lr
 801b1f8:	e000ed00 	.word	0xe000ed00

0801b1fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b1fc:	b480      	push	{r7}
 801b1fe:	b083      	sub	sp, #12
 801b200:	af00      	add	r7, sp, #0
 801b202:	4603      	mov	r3, r0
 801b204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	db0b      	blt.n	801b226 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b20e:	79fb      	ldrb	r3, [r7, #7]
 801b210:	f003 021f 	and.w	r2, r3, #31
 801b214:	4907      	ldr	r1, [pc, #28]	; (801b234 <__NVIC_EnableIRQ+0x38>)
 801b216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b21a:	095b      	lsrs	r3, r3, #5
 801b21c:	2001      	movs	r0, #1
 801b21e:	fa00 f202 	lsl.w	r2, r0, r2
 801b222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b226:	bf00      	nop
 801b228:	370c      	adds	r7, #12
 801b22a:	46bd      	mov	sp, r7
 801b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	e000e100 	.word	0xe000e100

0801b238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b238:	b480      	push	{r7}
 801b23a:	b083      	sub	sp, #12
 801b23c:	af00      	add	r7, sp, #0
 801b23e:	4603      	mov	r3, r0
 801b240:	6039      	str	r1, [r7, #0]
 801b242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b248:	2b00      	cmp	r3, #0
 801b24a:	db0a      	blt.n	801b262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b24c:	683b      	ldr	r3, [r7, #0]
 801b24e:	b2da      	uxtb	r2, r3
 801b250:	490c      	ldr	r1, [pc, #48]	; (801b284 <__NVIC_SetPriority+0x4c>)
 801b252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b256:	0112      	lsls	r2, r2, #4
 801b258:	b2d2      	uxtb	r2, r2
 801b25a:	440b      	add	r3, r1
 801b25c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b260:	e00a      	b.n	801b278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	b2da      	uxtb	r2, r3
 801b266:	4908      	ldr	r1, [pc, #32]	; (801b288 <__NVIC_SetPriority+0x50>)
 801b268:	79fb      	ldrb	r3, [r7, #7]
 801b26a:	f003 030f 	and.w	r3, r3, #15
 801b26e:	3b04      	subs	r3, #4
 801b270:	0112      	lsls	r2, r2, #4
 801b272:	b2d2      	uxtb	r2, r2
 801b274:	440b      	add	r3, r1
 801b276:	761a      	strb	r2, [r3, #24]
}
 801b278:	bf00      	nop
 801b27a:	370c      	adds	r7, #12
 801b27c:	46bd      	mov	sp, r7
 801b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b282:	4770      	bx	lr
 801b284:	e000e100 	.word	0xe000e100
 801b288:	e000ed00 	.word	0xe000ed00

0801b28c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b28c:	b480      	push	{r7}
 801b28e:	b089      	sub	sp, #36	; 0x24
 801b290:	af00      	add	r7, sp, #0
 801b292:	60f8      	str	r0, [r7, #12]
 801b294:	60b9      	str	r1, [r7, #8]
 801b296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	f003 0307 	and.w	r3, r3, #7
 801b29e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b2a0:	69fb      	ldr	r3, [r7, #28]
 801b2a2:	f1c3 0307 	rsb	r3, r3, #7
 801b2a6:	2b04      	cmp	r3, #4
 801b2a8:	bf28      	it	cs
 801b2aa:	2304      	movcs	r3, #4
 801b2ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b2ae:	69fb      	ldr	r3, [r7, #28]
 801b2b0:	3304      	adds	r3, #4
 801b2b2:	2b06      	cmp	r3, #6
 801b2b4:	d902      	bls.n	801b2bc <NVIC_EncodePriority+0x30>
 801b2b6:	69fb      	ldr	r3, [r7, #28]
 801b2b8:	3b03      	subs	r3, #3
 801b2ba:	e000      	b.n	801b2be <NVIC_EncodePriority+0x32>
 801b2bc:	2300      	movs	r3, #0
 801b2be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b2c0:	f04f 32ff 	mov.w	r2, #4294967295
 801b2c4:	69bb      	ldr	r3, [r7, #24]
 801b2c6:	fa02 f303 	lsl.w	r3, r2, r3
 801b2ca:	43da      	mvns	r2, r3
 801b2cc:	68bb      	ldr	r3, [r7, #8]
 801b2ce:	401a      	ands	r2, r3
 801b2d0:	697b      	ldr	r3, [r7, #20]
 801b2d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b2d4:	f04f 31ff 	mov.w	r1, #4294967295
 801b2d8:	697b      	ldr	r3, [r7, #20]
 801b2da:	fa01 f303 	lsl.w	r3, r1, r3
 801b2de:	43d9      	mvns	r1, r3
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b2e4:	4313      	orrs	r3, r2
         );
}
 801b2e6:	4618      	mov	r0, r3
 801b2e8:	3724      	adds	r7, #36	; 0x24
 801b2ea:	46bd      	mov	sp, r7
 801b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f0:	4770      	bx	lr
	...

0801b2f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	3b01      	subs	r3, #1
 801b300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b304:	d301      	bcc.n	801b30a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b306:	2301      	movs	r3, #1
 801b308:	e00f      	b.n	801b32a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b30a:	4a0a      	ldr	r2, [pc, #40]	; (801b334 <SysTick_Config+0x40>)
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	3b01      	subs	r3, #1
 801b310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b312:	210f      	movs	r1, #15
 801b314:	f04f 30ff 	mov.w	r0, #4294967295
 801b318:	f7ff ff8e 	bl	801b238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b31c:	4b05      	ldr	r3, [pc, #20]	; (801b334 <SysTick_Config+0x40>)
 801b31e:	2200      	movs	r2, #0
 801b320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b322:	4b04      	ldr	r3, [pc, #16]	; (801b334 <SysTick_Config+0x40>)
 801b324:	2207      	movs	r2, #7
 801b326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b328:	2300      	movs	r3, #0
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3708      	adds	r7, #8
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	e000e010 	.word	0xe000e010

0801b338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b082      	sub	sp, #8
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b340:	6878      	ldr	r0, [r7, #4]
 801b342:	f7ff ff29 	bl	801b198 <__NVIC_SetPriorityGrouping>
}
 801b346:	bf00      	nop
 801b348:	3708      	adds	r7, #8
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bd80      	pop	{r7, pc}

0801b34e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b34e:	b580      	push	{r7, lr}
 801b350:	b086      	sub	sp, #24
 801b352:	af00      	add	r7, sp, #0
 801b354:	4603      	mov	r3, r0
 801b356:	60b9      	str	r1, [r7, #8]
 801b358:	607a      	str	r2, [r7, #4]
 801b35a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b35c:	f7ff ff40 	bl	801b1e0 <__NVIC_GetPriorityGrouping>
 801b360:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b362:	687a      	ldr	r2, [r7, #4]
 801b364:	68b9      	ldr	r1, [r7, #8]
 801b366:	6978      	ldr	r0, [r7, #20]
 801b368:	f7ff ff90 	bl	801b28c <NVIC_EncodePriority>
 801b36c:	4602      	mov	r2, r0
 801b36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b372:	4611      	mov	r1, r2
 801b374:	4618      	mov	r0, r3
 801b376:	f7ff ff5f 	bl	801b238 <__NVIC_SetPriority>
}
 801b37a:	bf00      	nop
 801b37c:	3718      	adds	r7, #24
 801b37e:	46bd      	mov	sp, r7
 801b380:	bd80      	pop	{r7, pc}

0801b382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b382:	b580      	push	{r7, lr}
 801b384:	b082      	sub	sp, #8
 801b386:	af00      	add	r7, sp, #0
 801b388:	4603      	mov	r3, r0
 801b38a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b38c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b390:	4618      	mov	r0, r3
 801b392:	f7ff ff33 	bl	801b1fc <__NVIC_EnableIRQ>
}
 801b396:	bf00      	nop
 801b398:	3708      	adds	r7, #8
 801b39a:	46bd      	mov	sp, r7
 801b39c:	bd80      	pop	{r7, pc}

0801b39e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b39e:	b580      	push	{r7, lr}
 801b3a0:	b082      	sub	sp, #8
 801b3a2:	af00      	add	r7, sp, #0
 801b3a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b3a6:	6878      	ldr	r0, [r7, #4]
 801b3a8:	f7ff ffa4 	bl	801b2f4 <SysTick_Config>
 801b3ac:	4603      	mov	r3, r0
}
 801b3ae:	4618      	mov	r0, r3
 801b3b0:	3708      	adds	r7, #8
 801b3b2:	46bd      	mov	sp, r7
 801b3b4:	bd80      	pop	{r7, pc}
	...

0801b3b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b084      	sub	sp, #16
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d101      	bne.n	801b3ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801b3c6:	2301      	movs	r3, #1
 801b3c8:	e08d      	b.n	801b4e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b3ca:	687b      	ldr	r3, [r7, #4]
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	461a      	mov	r2, r3
 801b3d0:	4b47      	ldr	r3, [pc, #284]	; (801b4f0 <HAL_DMA_Init+0x138>)
 801b3d2:	429a      	cmp	r2, r3
 801b3d4:	d80f      	bhi.n	801b3f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	461a      	mov	r2, r3
 801b3dc:	4b45      	ldr	r3, [pc, #276]	; (801b4f4 <HAL_DMA_Init+0x13c>)
 801b3de:	4413      	add	r3, r2
 801b3e0:	4a45      	ldr	r2, [pc, #276]	; (801b4f8 <HAL_DMA_Init+0x140>)
 801b3e2:	fba2 2303 	umull	r2, r3, r2, r3
 801b3e6:	091b      	lsrs	r3, r3, #4
 801b3e8:	009a      	lsls	r2, r3, #2
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	4a42      	ldr	r2, [pc, #264]	; (801b4fc <HAL_DMA_Init+0x144>)
 801b3f2:	641a      	str	r2, [r3, #64]	; 0x40
 801b3f4:	e00e      	b.n	801b414 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	461a      	mov	r2, r3
 801b3fc:	4b40      	ldr	r3, [pc, #256]	; (801b500 <HAL_DMA_Init+0x148>)
 801b3fe:	4413      	add	r3, r2
 801b400:	4a3d      	ldr	r2, [pc, #244]	; (801b4f8 <HAL_DMA_Init+0x140>)
 801b402:	fba2 2303 	umull	r2, r3, r2, r3
 801b406:	091b      	lsrs	r3, r3, #4
 801b408:	009a      	lsls	r2, r3, #2
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	4a3c      	ldr	r2, [pc, #240]	; (801b504 <HAL_DMA_Init+0x14c>)
 801b412:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b414:	687b      	ldr	r3, [r7, #4]
 801b416:	2202      	movs	r2, #2
 801b418:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801b424:	68fb      	ldr	r3, [r7, #12]
 801b426:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801b42a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b42e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801b438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	691b      	ldr	r3, [r3, #16]
 801b43e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b440:	687b      	ldr	r3, [r7, #4]
 801b442:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	699b      	ldr	r3, [r3, #24]
 801b44a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	6a1b      	ldr	r3, [r3, #32]
 801b456:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801b458:	68fa      	ldr	r2, [r7, #12]
 801b45a:	4313      	orrs	r3, r2
 801b45c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801b45e:	687b      	ldr	r3, [r7, #4]
 801b460:	681b      	ldr	r3, [r3, #0]
 801b462:	68fa      	ldr	r2, [r7, #12]
 801b464:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b466:	6878      	ldr	r0, [r7, #4]
 801b468:	f000 fa10 	bl	801b88c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	689b      	ldr	r3, [r3, #8]
 801b470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b474:	d102      	bne.n	801b47c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	2200      	movs	r2, #0
 801b47a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	685a      	ldr	r2, [r3, #4]
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b484:	b2d2      	uxtb	r2, r2
 801b486:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b488:	687b      	ldr	r3, [r7, #4]
 801b48a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b48c:	687a      	ldr	r2, [r7, #4]
 801b48e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b490:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	685b      	ldr	r3, [r3, #4]
 801b496:	2b00      	cmp	r3, #0
 801b498:	d010      	beq.n	801b4bc <HAL_DMA_Init+0x104>
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	2b04      	cmp	r3, #4
 801b4a0:	d80c      	bhi.n	801b4bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b4a2:	6878      	ldr	r0, [r7, #4]
 801b4a4:	f000 fa30 	bl	801b908 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4ac:	2200      	movs	r2, #0
 801b4ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b4b4:	687a      	ldr	r2, [r7, #4]
 801b4b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b4b8:	605a      	str	r2, [r3, #4]
 801b4ba:	e008      	b.n	801b4ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	2200      	movs	r2, #0
 801b4c0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801b4c2:	687b      	ldr	r3, [r7, #4]
 801b4c4:	2200      	movs	r2, #0
 801b4c6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	2201      	movs	r2, #1
 801b4d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	2200      	movs	r2, #0
 801b4e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b4e4:	2300      	movs	r3, #0
}
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	3710      	adds	r7, #16
 801b4ea:	46bd      	mov	sp, r7
 801b4ec:	bd80      	pop	{r7, pc}
 801b4ee:	bf00      	nop
 801b4f0:	40020407 	.word	0x40020407
 801b4f4:	bffdfff8 	.word	0xbffdfff8
 801b4f8:	cccccccd 	.word	0xcccccccd
 801b4fc:	40020000 	.word	0x40020000
 801b500:	bffdfbf8 	.word	0xbffdfbf8
 801b504:	40020400 	.word	0x40020400

0801b508 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801b508:	b580      	push	{r7, lr}
 801b50a:	b086      	sub	sp, #24
 801b50c:	af00      	add	r7, sp, #0
 801b50e:	60f8      	str	r0, [r7, #12]
 801b510:	60b9      	str	r1, [r7, #8]
 801b512:	607a      	str	r2, [r7, #4]
 801b514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b516:	2300      	movs	r3, #0
 801b518:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801b51a:	68fb      	ldr	r3, [r7, #12]
 801b51c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b520:	2b01      	cmp	r3, #1
 801b522:	d101      	bne.n	801b528 <HAL_DMA_Start_IT+0x20>
 801b524:	2302      	movs	r3, #2
 801b526:	e066      	b.n	801b5f6 <HAL_DMA_Start_IT+0xee>
 801b528:	68fb      	ldr	r3, [r7, #12]
 801b52a:	2201      	movs	r2, #1
 801b52c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801b530:	68fb      	ldr	r3, [r7, #12]
 801b532:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b536:	b2db      	uxtb	r3, r3
 801b538:	2b01      	cmp	r3, #1
 801b53a:	d155      	bne.n	801b5e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	2202      	movs	r2, #2
 801b540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b544:	68fb      	ldr	r3, [r7, #12]
 801b546:	2200      	movs	r2, #0
 801b548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801b54a:	68fb      	ldr	r3, [r7, #12]
 801b54c:	681b      	ldr	r3, [r3, #0]
 801b54e:	681a      	ldr	r2, [r3, #0]
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	f022 0201 	bic.w	r2, r2, #1
 801b558:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b55a:	683b      	ldr	r3, [r7, #0]
 801b55c:	687a      	ldr	r2, [r7, #4]
 801b55e:	68b9      	ldr	r1, [r7, #8]
 801b560:	68f8      	ldr	r0, [r7, #12]
 801b562:	f000 f954 	bl	801b80e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801b566:	68fb      	ldr	r3, [r7, #12]
 801b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d008      	beq.n	801b580 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	681a      	ldr	r2, [r3, #0]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	f042 020e 	orr.w	r2, r2, #14
 801b57c:	601a      	str	r2, [r3, #0]
 801b57e:	e00f      	b.n	801b5a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b580:	68fb      	ldr	r3, [r7, #12]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	681a      	ldr	r2, [r3, #0]
 801b586:	68fb      	ldr	r3, [r7, #12]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	f022 0204 	bic.w	r2, r2, #4
 801b58e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b590:	68fb      	ldr	r3, [r7, #12]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	681a      	ldr	r2, [r3, #0]
 801b596:	68fb      	ldr	r3, [r7, #12]
 801b598:	681b      	ldr	r3, [r3, #0]
 801b59a:	f042 020a 	orr.w	r2, r2, #10
 801b59e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b5a0:	68fb      	ldr	r3, [r7, #12]
 801b5a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5a4:	681b      	ldr	r3, [r3, #0]
 801b5a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b5aa:	2b00      	cmp	r3, #0
 801b5ac:	d007      	beq.n	801b5be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5b2:	681a      	ldr	r2, [r3, #0]
 801b5b4:	68fb      	ldr	r3, [r7, #12]
 801b5b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b5b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b5bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b5be:	68fb      	ldr	r3, [r7, #12]
 801b5c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5c2:	2b00      	cmp	r3, #0
 801b5c4:	d007      	beq.n	801b5d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b5c6:	68fb      	ldr	r3, [r7, #12]
 801b5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5ca:	681a      	ldr	r2, [r3, #0]
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b5d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b5d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b5d6:	68fb      	ldr	r3, [r7, #12]
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	681a      	ldr	r2, [r3, #0]
 801b5dc:	68fb      	ldr	r3, [r7, #12]
 801b5de:	681b      	ldr	r3, [r3, #0]
 801b5e0:	f042 0201 	orr.w	r2, r2, #1
 801b5e4:	601a      	str	r2, [r3, #0]
 801b5e6:	e005      	b.n	801b5f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b5f0:	2302      	movs	r3, #2
 801b5f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 801b5f6:	4618      	mov	r0, r3
 801b5f8:	3718      	adds	r7, #24
 801b5fa:	46bd      	mov	sp, r7
 801b5fc:	bd80      	pop	{r7, pc}

0801b5fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b5fe:	b480      	push	{r7}
 801b600:	b085      	sub	sp, #20
 801b602:	af00      	add	r7, sp, #0
 801b604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b606:	2300      	movs	r3, #0
 801b608:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b610:	b2db      	uxtb	r3, r3
 801b612:	2b02      	cmp	r3, #2
 801b614:	d005      	beq.n	801b622 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2204      	movs	r2, #4
 801b61a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b61c:	2301      	movs	r3, #1
 801b61e:	73fb      	strb	r3, [r7, #15]
 801b620:	e037      	b.n	801b692 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	681b      	ldr	r3, [r3, #0]
 801b626:	681a      	ldr	r2, [r3, #0]
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	f022 020e 	bic.w	r2, r2, #14
 801b630:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b63c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b640:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	681a      	ldr	r2, [r3, #0]
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	f022 0201 	bic.w	r2, r2, #1
 801b650:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b656:	f003 021f 	and.w	r2, r3, #31
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b65e:	2101      	movs	r1, #1
 801b660:	fa01 f202 	lsl.w	r2, r1, r2
 801b664:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b66a:	687a      	ldr	r2, [r7, #4]
 801b66c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b66e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b674:	2b00      	cmp	r3, #0
 801b676:	d00c      	beq.n	801b692 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b67c:	681a      	ldr	r2, [r3, #0]
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b686:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b68c:	687a      	ldr	r2, [r7, #4]
 801b68e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b690:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	2201      	movs	r2, #1
 801b696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	2200      	movs	r2, #0
 801b69e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b6a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801b6a4:	4618      	mov	r0, r3
 801b6a6:	3714      	adds	r7, #20
 801b6a8:	46bd      	mov	sp, r7
 801b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ae:	4770      	bx	lr

0801b6b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b6b0:	b580      	push	{r7, lr}
 801b6b2:	b084      	sub	sp, #16
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6cc:	f003 031f 	and.w	r3, r3, #31
 801b6d0:	2204      	movs	r2, #4
 801b6d2:	409a      	lsls	r2, r3
 801b6d4:	68fb      	ldr	r3, [r7, #12]
 801b6d6:	4013      	ands	r3, r2
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d026      	beq.n	801b72a <HAL_DMA_IRQHandler+0x7a>
 801b6dc:	68bb      	ldr	r3, [r7, #8]
 801b6de:	f003 0304 	and.w	r3, r3, #4
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	d021      	beq.n	801b72a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	681b      	ldr	r3, [r3, #0]
 801b6ec:	f003 0320 	and.w	r3, r3, #32
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d107      	bne.n	801b704 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b6f4:	687b      	ldr	r3, [r7, #4]
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	681a      	ldr	r2, [r3, #0]
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	f022 0204 	bic.w	r2, r2, #4
 801b702:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b708:	f003 021f 	and.w	r2, r3, #31
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b710:	2104      	movs	r1, #4
 801b712:	fa01 f202 	lsl.w	r2, r1, r2
 801b716:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b718:	687b      	ldr	r3, [r7, #4]
 801b71a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	d071      	beq.n	801b804 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b720:	687b      	ldr	r3, [r7, #4]
 801b722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b724:	6878      	ldr	r0, [r7, #4]
 801b726:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b728:	e06c      	b.n	801b804 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b72e:	f003 031f 	and.w	r3, r3, #31
 801b732:	2202      	movs	r2, #2
 801b734:	409a      	lsls	r2, r3
 801b736:	68fb      	ldr	r3, [r7, #12]
 801b738:	4013      	ands	r3, r2
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	d02e      	beq.n	801b79c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b73e:	68bb      	ldr	r3, [r7, #8]
 801b740:	f003 0302 	and.w	r3, r3, #2
 801b744:	2b00      	cmp	r3, #0
 801b746:	d029      	beq.n	801b79c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	681b      	ldr	r3, [r3, #0]
 801b74e:	f003 0320 	and.w	r3, r3, #32
 801b752:	2b00      	cmp	r3, #0
 801b754:	d10b      	bne.n	801b76e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	681a      	ldr	r2, [r3, #0]
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	f022 020a 	bic.w	r2, r2, #10
 801b764:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	2201      	movs	r2, #1
 801b76a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b76e:	687b      	ldr	r3, [r7, #4]
 801b770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b772:	f003 021f 	and.w	r2, r3, #31
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b77a:	2102      	movs	r1, #2
 801b77c:	fa01 f202 	lsl.w	r2, r1, r2
 801b780:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	2200      	movs	r2, #0
 801b786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d038      	beq.n	801b804 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b796:	6878      	ldr	r0, [r7, #4]
 801b798:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b79a:	e033      	b.n	801b804 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b79c:	687b      	ldr	r3, [r7, #4]
 801b79e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7a0:	f003 031f 	and.w	r3, r3, #31
 801b7a4:	2208      	movs	r2, #8
 801b7a6:	409a      	lsls	r2, r3
 801b7a8:	68fb      	ldr	r3, [r7, #12]
 801b7aa:	4013      	ands	r3, r2
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d02a      	beq.n	801b806 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b7b0:	68bb      	ldr	r3, [r7, #8]
 801b7b2:	f003 0308 	and.w	r3, r3, #8
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	d025      	beq.n	801b806 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	681a      	ldr	r2, [r3, #0]
 801b7c0:	687b      	ldr	r3, [r7, #4]
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	f022 020e 	bic.w	r2, r2, #14
 801b7c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b7ce:	f003 021f 	and.w	r2, r3, #31
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b7d6:	2101      	movs	r1, #1
 801b7d8:	fa01 f202 	lsl.w	r2, r1, r2
 801b7dc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b7de:	687b      	ldr	r3, [r7, #4]
 801b7e0:	2201      	movs	r2, #1
 801b7e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	2201      	movs	r2, #1
 801b7e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	2200      	movs	r2, #0
 801b7f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b7f8:	2b00      	cmp	r3, #0
 801b7fa:	d004      	beq.n	801b806 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b800:	6878      	ldr	r0, [r7, #4]
 801b802:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b804:	bf00      	nop
 801b806:	bf00      	nop
}
 801b808:	3710      	adds	r7, #16
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd80      	pop	{r7, pc}

0801b80e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b80e:	b480      	push	{r7}
 801b810:	b085      	sub	sp, #20
 801b812:	af00      	add	r7, sp, #0
 801b814:	60f8      	str	r0, [r7, #12]
 801b816:	60b9      	str	r1, [r7, #8]
 801b818:	607a      	str	r2, [r7, #4]
 801b81a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b81c:	68fb      	ldr	r3, [r7, #12]
 801b81e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b820:	68fa      	ldr	r2, [r7, #12]
 801b822:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b824:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b826:	68fb      	ldr	r3, [r7, #12]
 801b828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d004      	beq.n	801b838 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b832:	68fa      	ldr	r2, [r7, #12]
 801b834:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b836:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b83c:	f003 021f 	and.w	r2, r3, #31
 801b840:	68fb      	ldr	r3, [r7, #12]
 801b842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b844:	2101      	movs	r1, #1
 801b846:	fa01 f202 	lsl.w	r2, r1, r2
 801b84a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b84c:	68fb      	ldr	r3, [r7, #12]
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	683a      	ldr	r2, [r7, #0]
 801b852:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b854:	68fb      	ldr	r3, [r7, #12]
 801b856:	689b      	ldr	r3, [r3, #8]
 801b858:	2b10      	cmp	r3, #16
 801b85a:	d108      	bne.n	801b86e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b85c:	68fb      	ldr	r3, [r7, #12]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	687a      	ldr	r2, [r7, #4]
 801b862:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b864:	68fb      	ldr	r3, [r7, #12]
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	68ba      	ldr	r2, [r7, #8]
 801b86a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b86c:	e007      	b.n	801b87e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	68ba      	ldr	r2, [r7, #8]
 801b874:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b876:	68fb      	ldr	r3, [r7, #12]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	687a      	ldr	r2, [r7, #4]
 801b87c:	60da      	str	r2, [r3, #12]
}
 801b87e:	bf00      	nop
 801b880:	3714      	adds	r7, #20
 801b882:	46bd      	mov	sp, r7
 801b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b888:	4770      	bx	lr
	...

0801b88c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b88c:	b480      	push	{r7}
 801b88e:	b087      	sub	sp, #28
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	461a      	mov	r2, r3
 801b89a:	4b16      	ldr	r3, [pc, #88]	; (801b8f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b89c:	429a      	cmp	r2, r3
 801b89e:	d802      	bhi.n	801b8a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b8a0:	4b15      	ldr	r3, [pc, #84]	; (801b8f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b8a2:	617b      	str	r3, [r7, #20]
 801b8a4:	e001      	b.n	801b8aa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b8a6:	4b15      	ldr	r3, [pc, #84]	; (801b8fc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b8a8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b8aa:	697b      	ldr	r3, [r7, #20]
 801b8ac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	b2db      	uxtb	r3, r3
 801b8b4:	3b08      	subs	r3, #8
 801b8b6:	4a12      	ldr	r2, [pc, #72]	; (801b900 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b8b8:	fba2 2303 	umull	r2, r3, r2, r3
 801b8bc:	091b      	lsrs	r3, r3, #4
 801b8be:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b8c4:	089b      	lsrs	r3, r3, #2
 801b8c6:	009a      	lsls	r2, r3, #2
 801b8c8:	693b      	ldr	r3, [r7, #16]
 801b8ca:	4413      	add	r3, r2
 801b8cc:	461a      	mov	r2, r3
 801b8ce:	687b      	ldr	r3, [r7, #4]
 801b8d0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b8d2:	687b      	ldr	r3, [r7, #4]
 801b8d4:	4a0b      	ldr	r2, [pc, #44]	; (801b904 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b8d6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b8d8:	68fb      	ldr	r3, [r7, #12]
 801b8da:	f003 031f 	and.w	r3, r3, #31
 801b8de:	2201      	movs	r2, #1
 801b8e0:	409a      	lsls	r2, r3
 801b8e2:	687b      	ldr	r3, [r7, #4]
 801b8e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b8e6:	bf00      	nop
 801b8e8:	371c      	adds	r7, #28
 801b8ea:	46bd      	mov	sp, r7
 801b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8f0:	4770      	bx	lr
 801b8f2:	bf00      	nop
 801b8f4:	40020407 	.word	0x40020407
 801b8f8:	40020800 	.word	0x40020800
 801b8fc:	40020820 	.word	0x40020820
 801b900:	cccccccd 	.word	0xcccccccd
 801b904:	40020880 	.word	0x40020880

0801b908 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b908:	b480      	push	{r7}
 801b90a:	b085      	sub	sp, #20
 801b90c:	af00      	add	r7, sp, #0
 801b90e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	685b      	ldr	r3, [r3, #4]
 801b914:	b2db      	uxtb	r3, r3
 801b916:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b918:	68fa      	ldr	r2, [r7, #12]
 801b91a:	4b0b      	ldr	r3, [pc, #44]	; (801b948 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b91c:	4413      	add	r3, r2
 801b91e:	009b      	lsls	r3, r3, #2
 801b920:	461a      	mov	r2, r3
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	4a08      	ldr	r2, [pc, #32]	; (801b94c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b92a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	3b01      	subs	r3, #1
 801b930:	f003 031f 	and.w	r3, r3, #31
 801b934:	2201      	movs	r2, #1
 801b936:	409a      	lsls	r2, r3
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b93c:	bf00      	nop
 801b93e:	3714      	adds	r7, #20
 801b940:	46bd      	mov	sp, r7
 801b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b946:	4770      	bx	lr
 801b948:	1000823f 	.word	0x1000823f
 801b94c:	40020940 	.word	0x40020940

0801b950 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b950:	b580      	push	{r7, lr}
 801b952:	b086      	sub	sp, #24
 801b954:	af00      	add	r7, sp, #0
 801b956:	60f8      	str	r0, [r7, #12]
 801b958:	60b9      	str	r1, [r7, #8]
 801b95a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b95e:	2300      	movs	r3, #0
 801b960:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b962:	4b24      	ldr	r3, [pc, #144]	; (801b9f4 <HAL_FLASH_Program+0xa4>)
 801b964:	781b      	ldrb	r3, [r3, #0]
 801b966:	2b01      	cmp	r3, #1
 801b968:	d101      	bne.n	801b96e <HAL_FLASH_Program+0x1e>
 801b96a:	2302      	movs	r3, #2
 801b96c:	e03e      	b.n	801b9ec <HAL_FLASH_Program+0x9c>
 801b96e:	4b21      	ldr	r3, [pc, #132]	; (801b9f4 <HAL_FLASH_Program+0xa4>)
 801b970:	2201      	movs	r2, #1
 801b972:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b978:	f000 f87c 	bl	801ba74 <FLASH_WaitForLastOperation>
 801b97c:	4603      	mov	r3, r0
 801b97e:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b980:	7dfb      	ldrb	r3, [r7, #23]
 801b982:	2b00      	cmp	r3, #0
 801b984:	d12e      	bne.n	801b9e4 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b986:	4b1b      	ldr	r3, [pc, #108]	; (801b9f4 <HAL_FLASH_Program+0xa4>)
 801b988:	2200      	movs	r2, #0
 801b98a:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b98c:	68fb      	ldr	r3, [r7, #12]
 801b98e:	2b00      	cmp	r3, #0
 801b990:	d107      	bne.n	801b9a2 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b992:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b996:	68b8      	ldr	r0, [r7, #8]
 801b998:	f000 f8c0 	bl	801bb1c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b99c:	2301      	movs	r3, #1
 801b99e:	613b      	str	r3, [r7, #16]
 801b9a0:	e010      	b.n	801b9c4 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	2b01      	cmp	r3, #1
 801b9a6:	d002      	beq.n	801b9ae <HAL_FLASH_Program+0x5e>
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	2b02      	cmp	r3, #2
 801b9ac:	d10a      	bne.n	801b9c4 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b9ae:	683b      	ldr	r3, [r7, #0]
 801b9b0:	4619      	mov	r1, r3
 801b9b2:	68b8      	ldr	r0, [r7, #8]
 801b9b4:	f000 f8d8 	bl	801bb68 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b9b8:	68fb      	ldr	r3, [r7, #12]
 801b9ba:	2b02      	cmp	r3, #2
 801b9bc:	d102      	bne.n	801b9c4 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b9be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b9c2:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b9c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b9c8:	f000 f854 	bl	801ba74 <FLASH_WaitForLastOperation>
 801b9cc:	4603      	mov	r3, r0
 801b9ce:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b9d0:	693b      	ldr	r3, [r7, #16]
 801b9d2:	2b00      	cmp	r3, #0
 801b9d4:	d006      	beq.n	801b9e4 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b9d6:	4b08      	ldr	r3, [pc, #32]	; (801b9f8 <HAL_FLASH_Program+0xa8>)
 801b9d8:	695a      	ldr	r2, [r3, #20]
 801b9da:	693b      	ldr	r3, [r7, #16]
 801b9dc:	43db      	mvns	r3, r3
 801b9de:	4906      	ldr	r1, [pc, #24]	; (801b9f8 <HAL_FLASH_Program+0xa8>)
 801b9e0:	4013      	ands	r3, r2
 801b9e2:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b9e4:	4b03      	ldr	r3, [pc, #12]	; (801b9f4 <HAL_FLASH_Program+0xa4>)
 801b9e6:	2200      	movs	r2, #0
 801b9e8:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b9ea:	7dfb      	ldrb	r3, [r7, #23]
}
 801b9ec:	4618      	mov	r0, r3
 801b9ee:	3718      	adds	r7, #24
 801b9f0:	46bd      	mov	sp, r7
 801b9f2:	bd80      	pop	{r7, pc}
 801b9f4:	2000000c 	.word	0x2000000c
 801b9f8:	40022000 	.word	0x40022000

0801b9fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b9fc:	b480      	push	{r7}
 801b9fe:	b083      	sub	sp, #12
 801ba00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801ba02:	2300      	movs	r3, #0
 801ba04:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801ba06:	4b0b      	ldr	r3, [pc, #44]	; (801ba34 <HAL_FLASH_Unlock+0x38>)
 801ba08:	695b      	ldr	r3, [r3, #20]
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	da0b      	bge.n	801ba26 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801ba0e:	4b09      	ldr	r3, [pc, #36]	; (801ba34 <HAL_FLASH_Unlock+0x38>)
 801ba10:	4a09      	ldr	r2, [pc, #36]	; (801ba38 <HAL_FLASH_Unlock+0x3c>)
 801ba12:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801ba14:	4b07      	ldr	r3, [pc, #28]	; (801ba34 <HAL_FLASH_Unlock+0x38>)
 801ba16:	4a09      	ldr	r2, [pc, #36]	; (801ba3c <HAL_FLASH_Unlock+0x40>)
 801ba18:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801ba1a:	4b06      	ldr	r3, [pc, #24]	; (801ba34 <HAL_FLASH_Unlock+0x38>)
 801ba1c:	695b      	ldr	r3, [r3, #20]
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	da01      	bge.n	801ba26 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801ba22:	2301      	movs	r3, #1
 801ba24:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801ba26:	79fb      	ldrb	r3, [r7, #7]
}
 801ba28:	4618      	mov	r0, r3
 801ba2a:	370c      	adds	r7, #12
 801ba2c:	46bd      	mov	sp, r7
 801ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba32:	4770      	bx	lr
 801ba34:	40022000 	.word	0x40022000
 801ba38:	45670123 	.word	0x45670123
 801ba3c:	cdef89ab 	.word	0xcdef89ab

0801ba40 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801ba40:	b480      	push	{r7}
 801ba42:	b083      	sub	sp, #12
 801ba44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801ba46:	2301      	movs	r3, #1
 801ba48:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801ba4a:	4b09      	ldr	r3, [pc, #36]	; (801ba70 <HAL_FLASH_Lock+0x30>)
 801ba4c:	695b      	ldr	r3, [r3, #20]
 801ba4e:	4a08      	ldr	r2, [pc, #32]	; (801ba70 <HAL_FLASH_Lock+0x30>)
 801ba50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801ba54:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801ba56:	4b06      	ldr	r3, [pc, #24]	; (801ba70 <HAL_FLASH_Lock+0x30>)
 801ba58:	695b      	ldr	r3, [r3, #20]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	da01      	bge.n	801ba62 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801ba5e:	2300      	movs	r3, #0
 801ba60:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801ba62:	79fb      	ldrb	r3, [r7, #7]
}
 801ba64:	4618      	mov	r0, r3
 801ba66:	370c      	adds	r7, #12
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba6e:	4770      	bx	lr
 801ba70:	40022000 	.word	0x40022000

0801ba74 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801ba74:	b580      	push	{r7, lr}
 801ba76:	b084      	sub	sp, #16
 801ba78:	af00      	add	r7, sp, #0
 801ba7a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801ba7c:	f7fd f98a 	bl	8018d94 <HAL_GetTick>
 801ba80:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801ba82:	e009      	b.n	801ba98 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801ba84:	f7fd f986 	bl	8018d94 <HAL_GetTick>
 801ba88:	4602      	mov	r2, r0
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	1ad3      	subs	r3, r2, r3
 801ba8e:	687a      	ldr	r2, [r7, #4]
 801ba90:	429a      	cmp	r2, r3
 801ba92:	d201      	bcs.n	801ba98 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801ba94:	2303      	movs	r3, #3
 801ba96:	e038      	b.n	801bb0a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801ba98:	4b1e      	ldr	r3, [pc, #120]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801ba9a:	691b      	ldr	r3, [r3, #16]
 801ba9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801baa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801baa4:	d0ee      	beq.n	801ba84 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801baa6:	4b1b      	ldr	r3, [pc, #108]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801baa8:	691a      	ldr	r2, [r3, #16]
 801baaa:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801baae:	4013      	ands	r3, r2
 801bab0:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801bab2:	68bb      	ldr	r3, [r7, #8]
 801bab4:	2b00      	cmp	r3, #0
 801bab6:	d01e      	beq.n	801baf6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801bab8:	4b17      	ldr	r3, [pc, #92]	; (801bb18 <FLASH_WaitForLastOperation+0xa4>)
 801baba:	685a      	ldr	r2, [r3, #4]
 801babc:	68bb      	ldr	r3, [r7, #8]
 801babe:	4313      	orrs	r3, r2
 801bac0:	4a15      	ldr	r2, [pc, #84]	; (801bb18 <FLASH_WaitForLastOperation+0xa4>)
 801bac2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801bac4:	68bb      	ldr	r3, [r7, #8]
 801bac6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801baca:	2b00      	cmp	r3, #0
 801bacc:	d007      	beq.n	801bade <FLASH_WaitForLastOperation+0x6a>
 801bace:	4b11      	ldr	r3, [pc, #68]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801bad0:	699a      	ldr	r2, [r3, #24]
 801bad2:	68bb      	ldr	r3, [r7, #8]
 801bad4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801bad8:	490e      	ldr	r1, [pc, #56]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801bada:	4313      	orrs	r3, r2
 801badc:	618b      	str	r3, [r1, #24]
 801bade:	68bb      	ldr	r3, [r7, #8]
 801bae0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801bae4:	2b00      	cmp	r3, #0
 801bae6:	d004      	beq.n	801baf2 <FLASH_WaitForLastOperation+0x7e>
 801bae8:	4a0a      	ldr	r2, [pc, #40]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801baea:	68bb      	ldr	r3, [r7, #8]
 801baec:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801baf0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801baf2:	2301      	movs	r3, #1
 801baf4:	e009      	b.n	801bb0a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801baf6:	4b07      	ldr	r3, [pc, #28]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801baf8:	691b      	ldr	r3, [r3, #16]
 801bafa:	f003 0301 	and.w	r3, r3, #1
 801bafe:	2b01      	cmp	r3, #1
 801bb00:	d102      	bne.n	801bb08 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801bb02:	4b04      	ldr	r3, [pc, #16]	; (801bb14 <FLASH_WaitForLastOperation+0xa0>)
 801bb04:	2201      	movs	r2, #1
 801bb06:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801bb08:	2300      	movs	r3, #0
}
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	3710      	adds	r7, #16
 801bb0e:	46bd      	mov	sp, r7
 801bb10:	bd80      	pop	{r7, pc}
 801bb12:	bf00      	nop
 801bb14:	40022000 	.word	0x40022000
 801bb18:	2000000c 	.word	0x2000000c

0801bb1c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801bb1c:	b480      	push	{r7}
 801bb1e:	b085      	sub	sp, #20
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	60f8      	str	r0, [r7, #12]
 801bb24:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801bb28:	4b0e      	ldr	r3, [pc, #56]	; (801bb64 <FLASH_Program_DoubleWord+0x48>)
 801bb2a:	695b      	ldr	r3, [r3, #20]
 801bb2c:	4a0d      	ldr	r2, [pc, #52]	; (801bb64 <FLASH_Program_DoubleWord+0x48>)
 801bb2e:	f043 0301 	orr.w	r3, r3, #1
 801bb32:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	683a      	ldr	r2, [r7, #0]
 801bb38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801bb3a:	f3bf 8f6f 	isb	sy
}
 801bb3e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801bb40:	e9d7 0100 	ldrd	r0, r1, [r7]
 801bb44:	f04f 0200 	mov.w	r2, #0
 801bb48:	f04f 0300 	mov.w	r3, #0
 801bb4c:	000a      	movs	r2, r1
 801bb4e:	2300      	movs	r3, #0
 801bb50:	68f9      	ldr	r1, [r7, #12]
 801bb52:	3104      	adds	r1, #4
 801bb54:	4613      	mov	r3, r2
 801bb56:	600b      	str	r3, [r1, #0]
}
 801bb58:	bf00      	nop
 801bb5a:	3714      	adds	r7, #20
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb62:	4770      	bx	lr
 801bb64:	40022000 	.word	0x40022000

0801bb68 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801bb68:	b480      	push	{r7}
 801bb6a:	b089      	sub	sp, #36	; 0x24
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
 801bb70:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801bb72:	2340      	movs	r3, #64	; 0x40
 801bb74:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801bb7a:	683b      	ldr	r3, [r7, #0]
 801bb7c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801bb7e:	4b14      	ldr	r3, [pc, #80]	; (801bbd0 <FLASH_Program_Fast+0x68>)
 801bb80:	695b      	ldr	r3, [r3, #20]
 801bb82:	4a13      	ldr	r2, [pc, #76]	; (801bbd0 <FLASH_Program_Fast+0x68>)
 801bb84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bb88:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801bb8a:	f3ef 8310 	mrs	r3, PRIMASK
 801bb8e:	60fb      	str	r3, [r7, #12]
  return(result);
 801bb90:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801bb92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801bb94:	b672      	cpsid	i
}
 801bb96:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	681a      	ldr	r2, [r3, #0]
 801bb9c:	69bb      	ldr	r3, [r7, #24]
 801bb9e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801bba0:	69bb      	ldr	r3, [r7, #24]
 801bba2:	3304      	adds	r3, #4
 801bba4:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801bba6:	697b      	ldr	r3, [r7, #20]
 801bba8:	3304      	adds	r3, #4
 801bbaa:	617b      	str	r3, [r7, #20]
    row_index--;
 801bbac:	7ffb      	ldrb	r3, [r7, #31]
 801bbae:	3b01      	subs	r3, #1
 801bbb0:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801bbb2:	7ffb      	ldrb	r3, [r7, #31]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d1ef      	bne.n	801bb98 <FLASH_Program_Fast+0x30>
 801bbb8:	693b      	ldr	r3, [r7, #16]
 801bbba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801bbbc:	68bb      	ldr	r3, [r7, #8]
 801bbbe:	f383 8810 	msr	PRIMASK, r3
}
 801bbc2:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801bbc4:	bf00      	nop
 801bbc6:	3724      	adds	r7, #36	; 0x24
 801bbc8:	46bd      	mov	sp, r7
 801bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbce:	4770      	bx	lr
 801bbd0:	40022000 	.word	0x40022000

0801bbd4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801bbd4:	b580      	push	{r7, lr}
 801bbd6:	b084      	sub	sp, #16
 801bbd8:	af00      	add	r7, sp, #0
 801bbda:	6078      	str	r0, [r7, #4]
 801bbdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801bbde:	4b48      	ldr	r3, [pc, #288]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bbe0:	781b      	ldrb	r3, [r3, #0]
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	d101      	bne.n	801bbea <HAL_FLASHEx_Erase+0x16>
 801bbe6:	2302      	movs	r3, #2
 801bbe8:	e085      	b.n	801bcf6 <HAL_FLASHEx_Erase+0x122>
 801bbea:	4b45      	ldr	r3, [pc, #276]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bbec:	2201      	movs	r2, #1
 801bbee:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bbf0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bbf4:	f7ff ff3e 	bl	801ba74 <FLASH_WaitForLastOperation>
 801bbf8:	4603      	mov	r3, r0
 801bbfa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801bbfc:	7bfb      	ldrb	r3, [r7, #15]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d175      	bne.n	801bcee <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801bc02:	4b3f      	ldr	r3, [pc, #252]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bc04:	2200      	movs	r2, #0
 801bc06:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801bc08:	4b3e      	ldr	r3, [pc, #248]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	d013      	beq.n	801bc3c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801bc14:	4b3b      	ldr	r3, [pc, #236]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bc1c:	2b00      	cmp	r3, #0
 801bc1e:	d009      	beq.n	801bc34 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801bc20:	4b38      	ldr	r3, [pc, #224]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	4a37      	ldr	r2, [pc, #220]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bc2a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801bc2c:	4b34      	ldr	r3, [pc, #208]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bc2e:	2203      	movs	r2, #3
 801bc30:	771a      	strb	r2, [r3, #28]
 801bc32:	e016      	b.n	801bc62 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801bc34:	4b32      	ldr	r3, [pc, #200]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bc36:	2201      	movs	r2, #1
 801bc38:	771a      	strb	r2, [r3, #28]
 801bc3a:	e012      	b.n	801bc62 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801bc3c:	4b31      	ldr	r3, [pc, #196]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	d009      	beq.n	801bc5c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801bc48:	4b2e      	ldr	r3, [pc, #184]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc4a:	681b      	ldr	r3, [r3, #0]
 801bc4c:	4a2d      	ldr	r2, [pc, #180]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801bc52:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801bc54:	4b2a      	ldr	r3, [pc, #168]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bc56:	2202      	movs	r2, #2
 801bc58:	771a      	strb	r2, [r3, #28]
 801bc5a:	e002      	b.n	801bc62 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bc5c:	4b28      	ldr	r3, [pc, #160]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bc5e:	2200      	movs	r2, #0
 801bc60:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801bc62:	687b      	ldr	r3, [r7, #4]
 801bc64:	681b      	ldr	r3, [r3, #0]
 801bc66:	2b01      	cmp	r3, #1
 801bc68:	d111      	bne.n	801bc8e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801bc6a:	687b      	ldr	r3, [r7, #4]
 801bc6c:	685b      	ldr	r3, [r3, #4]
 801bc6e:	4618      	mov	r0, r3
 801bc70:	f000 f84a 	bl	801bd08 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bc74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bc78:	f7ff fefc 	bl	801ba74 <FLASH_WaitForLastOperation>
 801bc7c:	4603      	mov	r3, r0
 801bc7e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801bc80:	4b20      	ldr	r3, [pc, #128]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc82:	695b      	ldr	r3, [r3, #20]
 801bc84:	4a1f      	ldr	r2, [pc, #124]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bc86:	f023 0304 	bic.w	r3, r3, #4
 801bc8a:	6153      	str	r3, [r2, #20]
 801bc8c:	e02d      	b.n	801bcea <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801bc8e:	683b      	ldr	r3, [r7, #0]
 801bc90:	f04f 32ff 	mov.w	r2, #4294967295
 801bc94:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	689b      	ldr	r3, [r3, #8]
 801bc9a:	60bb      	str	r3, [r7, #8]
 801bc9c:	e01d      	b.n	801bcda <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801bc9e:	687b      	ldr	r3, [r7, #4]
 801bca0:	685b      	ldr	r3, [r3, #4]
 801bca2:	4619      	mov	r1, r3
 801bca4:	68b8      	ldr	r0, [r7, #8]
 801bca6:	f000 f84d 	bl	801bd44 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bcaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bcae:	f7ff fee1 	bl	801ba74 <FLASH_WaitForLastOperation>
 801bcb2:	4603      	mov	r3, r0
 801bcb4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801bcb6:	4b13      	ldr	r3, [pc, #76]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bcb8:	695b      	ldr	r3, [r3, #20]
 801bcba:	4a12      	ldr	r2, [pc, #72]	; (801bd04 <HAL_FLASHEx_Erase+0x130>)
 801bcbc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801bcc0:	f023 0302 	bic.w	r3, r3, #2
 801bcc4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801bcc6:	7bfb      	ldrb	r3, [r7, #15]
 801bcc8:	2b00      	cmp	r3, #0
 801bcca:	d003      	beq.n	801bcd4 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801bccc:	683b      	ldr	r3, [r7, #0]
 801bcce:	68ba      	ldr	r2, [r7, #8]
 801bcd0:	601a      	str	r2, [r3, #0]
          break;
 801bcd2:	e00a      	b.n	801bcea <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bcd4:	68bb      	ldr	r3, [r7, #8]
 801bcd6:	3301      	adds	r3, #1
 801bcd8:	60bb      	str	r3, [r7, #8]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	689a      	ldr	r2, [r3, #8]
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	68db      	ldr	r3, [r3, #12]
 801bce2:	4413      	add	r3, r2
 801bce4:	68ba      	ldr	r2, [r7, #8]
 801bce6:	429a      	cmp	r2, r3
 801bce8:	d3d9      	bcc.n	801bc9e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801bcea:	f000 f84f 	bl	801bd8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801bcee:	4b04      	ldr	r3, [pc, #16]	; (801bd00 <HAL_FLASHEx_Erase+0x12c>)
 801bcf0:	2200      	movs	r2, #0
 801bcf2:	701a      	strb	r2, [r3, #0]

  return status;
 801bcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	3710      	adds	r7, #16
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	bd80      	pop	{r7, pc}
 801bcfe:	bf00      	nop
 801bd00:	2000000c 	.word	0x2000000c
 801bd04:	40022000 	.word	0x40022000

0801bd08 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801bd08:	b480      	push	{r7}
 801bd0a:	b083      	sub	sp, #12
 801bd0c:	af00      	add	r7, sp, #0
 801bd0e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	f003 0301 	and.w	r3, r3, #1
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d005      	beq.n	801bd26 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801bd1a:	4b09      	ldr	r3, [pc, #36]	; (801bd40 <FLASH_MassErase+0x38>)
 801bd1c:	695b      	ldr	r3, [r3, #20]
 801bd1e:	4a08      	ldr	r2, [pc, #32]	; (801bd40 <FLASH_MassErase+0x38>)
 801bd20:	f043 0304 	orr.w	r3, r3, #4
 801bd24:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bd26:	4b06      	ldr	r3, [pc, #24]	; (801bd40 <FLASH_MassErase+0x38>)
 801bd28:	695b      	ldr	r3, [r3, #20]
 801bd2a:	4a05      	ldr	r2, [pc, #20]	; (801bd40 <FLASH_MassErase+0x38>)
 801bd2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bd30:	6153      	str	r3, [r2, #20]
}
 801bd32:	bf00      	nop
 801bd34:	370c      	adds	r7, #12
 801bd36:	46bd      	mov	sp, r7
 801bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd3c:	4770      	bx	lr
 801bd3e:	bf00      	nop
 801bd40:	40022000 	.word	0x40022000

0801bd44 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801bd44:	b480      	push	{r7}
 801bd46:	b083      	sub	sp, #12
 801bd48:	af00      	add	r7, sp, #0
 801bd4a:	6078      	str	r0, [r7, #4]
 801bd4c:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801bd4e:	4b0e      	ldr	r3, [pc, #56]	; (801bd88 <FLASH_PageErase+0x44>)
 801bd50:	695b      	ldr	r3, [r3, #20]
 801bd52:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	00db      	lsls	r3, r3, #3
 801bd5a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801bd5e:	490a      	ldr	r1, [pc, #40]	; (801bd88 <FLASH_PageErase+0x44>)
 801bd60:	4313      	orrs	r3, r2
 801bd62:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801bd64:	4b08      	ldr	r3, [pc, #32]	; (801bd88 <FLASH_PageErase+0x44>)
 801bd66:	695b      	ldr	r3, [r3, #20]
 801bd68:	4a07      	ldr	r2, [pc, #28]	; (801bd88 <FLASH_PageErase+0x44>)
 801bd6a:	f043 0302 	orr.w	r3, r3, #2
 801bd6e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bd70:	4b05      	ldr	r3, [pc, #20]	; (801bd88 <FLASH_PageErase+0x44>)
 801bd72:	695b      	ldr	r3, [r3, #20]
 801bd74:	4a04      	ldr	r2, [pc, #16]	; (801bd88 <FLASH_PageErase+0x44>)
 801bd76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bd7a:	6153      	str	r3, [r2, #20]
}
 801bd7c:	bf00      	nop
 801bd7e:	370c      	adds	r7, #12
 801bd80:	46bd      	mov	sp, r7
 801bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd86:	4770      	bx	lr
 801bd88:	40022000 	.word	0x40022000

0801bd8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801bd8c:	b480      	push	{r7}
 801bd8e:	b083      	sub	sp, #12
 801bd90:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bd92:	4b21      	ldr	r3, [pc, #132]	; (801be18 <FLASH_FlushCaches+0x8c>)
 801bd94:	7f1b      	ldrb	r3, [r3, #28]
 801bd96:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bd98:	79fb      	ldrb	r3, [r7, #7]
 801bd9a:	2b01      	cmp	r3, #1
 801bd9c:	d002      	beq.n	801bda4 <FLASH_FlushCaches+0x18>
 801bd9e:	79fb      	ldrb	r3, [r7, #7]
 801bda0:	2b03      	cmp	r3, #3
 801bda2:	d117      	bne.n	801bdd4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801bda4:	4b1d      	ldr	r3, [pc, #116]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	4a1c      	ldr	r2, [pc, #112]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdaa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bdae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bdb0:	4b1a      	ldr	r3, [pc, #104]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	4a19      	ldr	r2, [pc, #100]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bdba:	6013      	str	r3, [r2, #0]
 801bdbc:	4b17      	ldr	r3, [pc, #92]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdbe:	681b      	ldr	r3, [r3, #0]
 801bdc0:	4a16      	ldr	r2, [pc, #88]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bdc6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bdc8:	4b14      	ldr	r3, [pc, #80]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdca:	681b      	ldr	r3, [r3, #0]
 801bdcc:	4a13      	ldr	r2, [pc, #76]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bdd2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801bdd4:	79fb      	ldrb	r3, [r7, #7]
 801bdd6:	2b02      	cmp	r3, #2
 801bdd8:	d002      	beq.n	801bde0 <FLASH_FlushCaches+0x54>
 801bdda:	79fb      	ldrb	r3, [r7, #7]
 801bddc:	2b03      	cmp	r3, #3
 801bdde:	d111      	bne.n	801be04 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bde0:	4b0e      	ldr	r3, [pc, #56]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	4a0d      	ldr	r2, [pc, #52]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bde6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bdea:	6013      	str	r3, [r2, #0]
 801bdec:	4b0b      	ldr	r3, [pc, #44]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdee:	681b      	ldr	r3, [r3, #0]
 801bdf0:	4a0a      	ldr	r2, [pc, #40]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bdf6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bdf8:	4b08      	ldr	r3, [pc, #32]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	4a07      	ldr	r2, [pc, #28]	; (801be1c <FLASH_FlushCaches+0x90>)
 801bdfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801be02:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801be04:	4b04      	ldr	r3, [pc, #16]	; (801be18 <FLASH_FlushCaches+0x8c>)
 801be06:	2200      	movs	r2, #0
 801be08:	771a      	strb	r2, [r3, #28]
}
 801be0a:	bf00      	nop
 801be0c:	370c      	adds	r7, #12
 801be0e:	46bd      	mov	sp, r7
 801be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be14:	4770      	bx	lr
 801be16:	bf00      	nop
 801be18:	2000000c 	.word	0x2000000c
 801be1c:	40022000 	.word	0x40022000

0801be20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801be20:	b480      	push	{r7}
 801be22:	b087      	sub	sp, #28
 801be24:	af00      	add	r7, sp, #0
 801be26:	6078      	str	r0, [r7, #4]
 801be28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801be2a:	2300      	movs	r3, #0
 801be2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801be2e:	e15a      	b.n	801c0e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801be30:	683b      	ldr	r3, [r7, #0]
 801be32:	681a      	ldr	r2, [r3, #0]
 801be34:	2101      	movs	r1, #1
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	fa01 f303 	lsl.w	r3, r1, r3
 801be3c:	4013      	ands	r3, r2
 801be3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801be40:	68fb      	ldr	r3, [r7, #12]
 801be42:	2b00      	cmp	r3, #0
 801be44:	f000 814c 	beq.w	801c0e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801be48:	683b      	ldr	r3, [r7, #0]
 801be4a:	685b      	ldr	r3, [r3, #4]
 801be4c:	f003 0303 	and.w	r3, r3, #3
 801be50:	2b01      	cmp	r3, #1
 801be52:	d005      	beq.n	801be60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801be54:	683b      	ldr	r3, [r7, #0]
 801be56:	685b      	ldr	r3, [r3, #4]
 801be58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801be5c:	2b02      	cmp	r3, #2
 801be5e:	d130      	bne.n	801bec2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	689b      	ldr	r3, [r3, #8]
 801be64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801be66:	697b      	ldr	r3, [r7, #20]
 801be68:	005b      	lsls	r3, r3, #1
 801be6a:	2203      	movs	r2, #3
 801be6c:	fa02 f303 	lsl.w	r3, r2, r3
 801be70:	43db      	mvns	r3, r3
 801be72:	693a      	ldr	r2, [r7, #16]
 801be74:	4013      	ands	r3, r2
 801be76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801be78:	683b      	ldr	r3, [r7, #0]
 801be7a:	68da      	ldr	r2, [r3, #12]
 801be7c:	697b      	ldr	r3, [r7, #20]
 801be7e:	005b      	lsls	r3, r3, #1
 801be80:	fa02 f303 	lsl.w	r3, r2, r3
 801be84:	693a      	ldr	r2, [r7, #16]
 801be86:	4313      	orrs	r3, r2
 801be88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	693a      	ldr	r2, [r7, #16]
 801be8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	685b      	ldr	r3, [r3, #4]
 801be94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801be96:	2201      	movs	r2, #1
 801be98:	697b      	ldr	r3, [r7, #20]
 801be9a:	fa02 f303 	lsl.w	r3, r2, r3
 801be9e:	43db      	mvns	r3, r3
 801bea0:	693a      	ldr	r2, [r7, #16]
 801bea2:	4013      	ands	r3, r2
 801bea4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bea6:	683b      	ldr	r3, [r7, #0]
 801bea8:	685b      	ldr	r3, [r3, #4]
 801beaa:	091b      	lsrs	r3, r3, #4
 801beac:	f003 0201 	and.w	r2, r3, #1
 801beb0:	697b      	ldr	r3, [r7, #20]
 801beb2:	fa02 f303 	lsl.w	r3, r2, r3
 801beb6:	693a      	ldr	r2, [r7, #16]
 801beb8:	4313      	orrs	r3, r2
 801beba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	693a      	ldr	r2, [r7, #16]
 801bec0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bec2:	683b      	ldr	r3, [r7, #0]
 801bec4:	685b      	ldr	r3, [r3, #4]
 801bec6:	f003 0303 	and.w	r3, r3, #3
 801beca:	2b03      	cmp	r3, #3
 801becc:	d017      	beq.n	801befe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	68db      	ldr	r3, [r3, #12]
 801bed2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bed4:	697b      	ldr	r3, [r7, #20]
 801bed6:	005b      	lsls	r3, r3, #1
 801bed8:	2203      	movs	r2, #3
 801beda:	fa02 f303 	lsl.w	r3, r2, r3
 801bede:	43db      	mvns	r3, r3
 801bee0:	693a      	ldr	r2, [r7, #16]
 801bee2:	4013      	ands	r3, r2
 801bee4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bee6:	683b      	ldr	r3, [r7, #0]
 801bee8:	689a      	ldr	r2, [r3, #8]
 801beea:	697b      	ldr	r3, [r7, #20]
 801beec:	005b      	lsls	r3, r3, #1
 801beee:	fa02 f303 	lsl.w	r3, r2, r3
 801bef2:	693a      	ldr	r2, [r7, #16]
 801bef4:	4313      	orrs	r3, r2
 801bef6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	693a      	ldr	r2, [r7, #16]
 801befc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	685b      	ldr	r3, [r3, #4]
 801bf02:	f003 0303 	and.w	r3, r3, #3
 801bf06:	2b02      	cmp	r3, #2
 801bf08:	d123      	bne.n	801bf52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bf0a:	697b      	ldr	r3, [r7, #20]
 801bf0c:	08da      	lsrs	r2, r3, #3
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	3208      	adds	r2, #8
 801bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bf16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bf18:	697b      	ldr	r3, [r7, #20]
 801bf1a:	f003 0307 	and.w	r3, r3, #7
 801bf1e:	009b      	lsls	r3, r3, #2
 801bf20:	220f      	movs	r2, #15
 801bf22:	fa02 f303 	lsl.w	r3, r2, r3
 801bf26:	43db      	mvns	r3, r3
 801bf28:	693a      	ldr	r2, [r7, #16]
 801bf2a:	4013      	ands	r3, r2
 801bf2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bf2e:	683b      	ldr	r3, [r7, #0]
 801bf30:	691a      	ldr	r2, [r3, #16]
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	f003 0307 	and.w	r3, r3, #7
 801bf38:	009b      	lsls	r3, r3, #2
 801bf3a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf3e:	693a      	ldr	r2, [r7, #16]
 801bf40:	4313      	orrs	r3, r2
 801bf42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801bf44:	697b      	ldr	r3, [r7, #20]
 801bf46:	08da      	lsrs	r2, r3, #3
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	3208      	adds	r2, #8
 801bf4c:	6939      	ldr	r1, [r7, #16]
 801bf4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	681b      	ldr	r3, [r3, #0]
 801bf56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bf58:	697b      	ldr	r3, [r7, #20]
 801bf5a:	005b      	lsls	r3, r3, #1
 801bf5c:	2203      	movs	r2, #3
 801bf5e:	fa02 f303 	lsl.w	r3, r2, r3
 801bf62:	43db      	mvns	r3, r3
 801bf64:	693a      	ldr	r2, [r7, #16]
 801bf66:	4013      	ands	r3, r2
 801bf68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bf6a:	683b      	ldr	r3, [r7, #0]
 801bf6c:	685b      	ldr	r3, [r3, #4]
 801bf6e:	f003 0203 	and.w	r2, r3, #3
 801bf72:	697b      	ldr	r3, [r7, #20]
 801bf74:	005b      	lsls	r3, r3, #1
 801bf76:	fa02 f303 	lsl.w	r3, r2, r3
 801bf7a:	693a      	ldr	r2, [r7, #16]
 801bf7c:	4313      	orrs	r3, r2
 801bf7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	693a      	ldr	r2, [r7, #16]
 801bf84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bf86:	683b      	ldr	r3, [r7, #0]
 801bf88:	685b      	ldr	r3, [r3, #4]
 801bf8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	f000 80a6 	beq.w	801c0e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bf94:	4b5b      	ldr	r3, [pc, #364]	; (801c104 <HAL_GPIO_Init+0x2e4>)
 801bf96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bf98:	4a5a      	ldr	r2, [pc, #360]	; (801c104 <HAL_GPIO_Init+0x2e4>)
 801bf9a:	f043 0301 	orr.w	r3, r3, #1
 801bf9e:	6613      	str	r3, [r2, #96]	; 0x60
 801bfa0:	4b58      	ldr	r3, [pc, #352]	; (801c104 <HAL_GPIO_Init+0x2e4>)
 801bfa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bfa4:	f003 0301 	and.w	r3, r3, #1
 801bfa8:	60bb      	str	r3, [r7, #8]
 801bfaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bfac:	4a56      	ldr	r2, [pc, #344]	; (801c108 <HAL_GPIO_Init+0x2e8>)
 801bfae:	697b      	ldr	r3, [r7, #20]
 801bfb0:	089b      	lsrs	r3, r3, #2
 801bfb2:	3302      	adds	r3, #2
 801bfb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bfb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bfba:	697b      	ldr	r3, [r7, #20]
 801bfbc:	f003 0303 	and.w	r3, r3, #3
 801bfc0:	009b      	lsls	r3, r3, #2
 801bfc2:	220f      	movs	r2, #15
 801bfc4:	fa02 f303 	lsl.w	r3, r2, r3
 801bfc8:	43db      	mvns	r3, r3
 801bfca:	693a      	ldr	r2, [r7, #16]
 801bfcc:	4013      	ands	r3, r2
 801bfce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bfd6:	d01f      	beq.n	801c018 <HAL_GPIO_Init+0x1f8>
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	4a4c      	ldr	r2, [pc, #304]	; (801c10c <HAL_GPIO_Init+0x2ec>)
 801bfdc:	4293      	cmp	r3, r2
 801bfde:	d019      	beq.n	801c014 <HAL_GPIO_Init+0x1f4>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	4a4b      	ldr	r2, [pc, #300]	; (801c110 <HAL_GPIO_Init+0x2f0>)
 801bfe4:	4293      	cmp	r3, r2
 801bfe6:	d013      	beq.n	801c010 <HAL_GPIO_Init+0x1f0>
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	4a4a      	ldr	r2, [pc, #296]	; (801c114 <HAL_GPIO_Init+0x2f4>)
 801bfec:	4293      	cmp	r3, r2
 801bfee:	d00d      	beq.n	801c00c <HAL_GPIO_Init+0x1ec>
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	4a49      	ldr	r2, [pc, #292]	; (801c118 <HAL_GPIO_Init+0x2f8>)
 801bff4:	4293      	cmp	r3, r2
 801bff6:	d007      	beq.n	801c008 <HAL_GPIO_Init+0x1e8>
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	4a48      	ldr	r2, [pc, #288]	; (801c11c <HAL_GPIO_Init+0x2fc>)
 801bffc:	4293      	cmp	r3, r2
 801bffe:	d101      	bne.n	801c004 <HAL_GPIO_Init+0x1e4>
 801c000:	2305      	movs	r3, #5
 801c002:	e00a      	b.n	801c01a <HAL_GPIO_Init+0x1fa>
 801c004:	2306      	movs	r3, #6
 801c006:	e008      	b.n	801c01a <HAL_GPIO_Init+0x1fa>
 801c008:	2304      	movs	r3, #4
 801c00a:	e006      	b.n	801c01a <HAL_GPIO_Init+0x1fa>
 801c00c:	2303      	movs	r3, #3
 801c00e:	e004      	b.n	801c01a <HAL_GPIO_Init+0x1fa>
 801c010:	2302      	movs	r3, #2
 801c012:	e002      	b.n	801c01a <HAL_GPIO_Init+0x1fa>
 801c014:	2301      	movs	r3, #1
 801c016:	e000      	b.n	801c01a <HAL_GPIO_Init+0x1fa>
 801c018:	2300      	movs	r3, #0
 801c01a:	697a      	ldr	r2, [r7, #20]
 801c01c:	f002 0203 	and.w	r2, r2, #3
 801c020:	0092      	lsls	r2, r2, #2
 801c022:	4093      	lsls	r3, r2
 801c024:	693a      	ldr	r2, [r7, #16]
 801c026:	4313      	orrs	r3, r2
 801c028:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c02a:	4937      	ldr	r1, [pc, #220]	; (801c108 <HAL_GPIO_Init+0x2e8>)
 801c02c:	697b      	ldr	r3, [r7, #20]
 801c02e:	089b      	lsrs	r3, r3, #2
 801c030:	3302      	adds	r3, #2
 801c032:	693a      	ldr	r2, [r7, #16]
 801c034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c038:	4b39      	ldr	r3, [pc, #228]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c03a:	689b      	ldr	r3, [r3, #8]
 801c03c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c03e:	68fb      	ldr	r3, [r7, #12]
 801c040:	43db      	mvns	r3, r3
 801c042:	693a      	ldr	r2, [r7, #16]
 801c044:	4013      	ands	r3, r2
 801c046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c048:	683b      	ldr	r3, [r7, #0]
 801c04a:	685b      	ldr	r3, [r3, #4]
 801c04c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c050:	2b00      	cmp	r3, #0
 801c052:	d003      	beq.n	801c05c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801c054:	693a      	ldr	r2, [r7, #16]
 801c056:	68fb      	ldr	r3, [r7, #12]
 801c058:	4313      	orrs	r3, r2
 801c05a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c05c:	4a30      	ldr	r2, [pc, #192]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c05e:	693b      	ldr	r3, [r7, #16]
 801c060:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c062:	4b2f      	ldr	r3, [pc, #188]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c064:	68db      	ldr	r3, [r3, #12]
 801c066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c068:	68fb      	ldr	r3, [r7, #12]
 801c06a:	43db      	mvns	r3, r3
 801c06c:	693a      	ldr	r2, [r7, #16]
 801c06e:	4013      	ands	r3, r2
 801c070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	685b      	ldr	r3, [r3, #4]
 801c076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d003      	beq.n	801c086 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801c07e:	693a      	ldr	r2, [r7, #16]
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	4313      	orrs	r3, r2
 801c084:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c086:	4a26      	ldr	r2, [pc, #152]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c088:	693b      	ldr	r3, [r7, #16]
 801c08a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801c08c:	4b24      	ldr	r3, [pc, #144]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c08e:	685b      	ldr	r3, [r3, #4]
 801c090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	43db      	mvns	r3, r3
 801c096:	693a      	ldr	r2, [r7, #16]
 801c098:	4013      	ands	r3, r2
 801c09a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c09c:	683b      	ldr	r3, [r7, #0]
 801c09e:	685b      	ldr	r3, [r3, #4]
 801c0a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c0a4:	2b00      	cmp	r3, #0
 801c0a6:	d003      	beq.n	801c0b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801c0a8:	693a      	ldr	r2, [r7, #16]
 801c0aa:	68fb      	ldr	r3, [r7, #12]
 801c0ac:	4313      	orrs	r3, r2
 801c0ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c0b0:	4a1b      	ldr	r2, [pc, #108]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c0b2:	693b      	ldr	r3, [r7, #16]
 801c0b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801c0b6:	4b1a      	ldr	r3, [pc, #104]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c0b8:	681b      	ldr	r3, [r3, #0]
 801c0ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c0bc:	68fb      	ldr	r3, [r7, #12]
 801c0be:	43db      	mvns	r3, r3
 801c0c0:	693a      	ldr	r2, [r7, #16]
 801c0c2:	4013      	ands	r3, r2
 801c0c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c0c6:	683b      	ldr	r3, [r7, #0]
 801c0c8:	685b      	ldr	r3, [r3, #4]
 801c0ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d003      	beq.n	801c0da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801c0d2:	693a      	ldr	r2, [r7, #16]
 801c0d4:	68fb      	ldr	r3, [r7, #12]
 801c0d6:	4313      	orrs	r3, r2
 801c0d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c0da:	4a11      	ldr	r2, [pc, #68]	; (801c120 <HAL_GPIO_Init+0x300>)
 801c0dc:	693b      	ldr	r3, [r7, #16]
 801c0de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c0e0:	697b      	ldr	r3, [r7, #20]
 801c0e2:	3301      	adds	r3, #1
 801c0e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c0e6:	683b      	ldr	r3, [r7, #0]
 801c0e8:	681a      	ldr	r2, [r3, #0]
 801c0ea:	697b      	ldr	r3, [r7, #20]
 801c0ec:	fa22 f303 	lsr.w	r3, r2, r3
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	f47f ae9d 	bne.w	801be30 <HAL_GPIO_Init+0x10>
  }
}
 801c0f6:	bf00      	nop
 801c0f8:	bf00      	nop
 801c0fa:	371c      	adds	r7, #28
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c102:	4770      	bx	lr
 801c104:	40021000 	.word	0x40021000
 801c108:	40010000 	.word	0x40010000
 801c10c:	48000400 	.word	0x48000400
 801c110:	48000800 	.word	0x48000800
 801c114:	48000c00 	.word	0x48000c00
 801c118:	48001000 	.word	0x48001000
 801c11c:	48001400 	.word	0x48001400
 801c120:	40010400 	.word	0x40010400

0801c124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c124:	b480      	push	{r7}
 801c126:	b083      	sub	sp, #12
 801c128:	af00      	add	r7, sp, #0
 801c12a:	6078      	str	r0, [r7, #4]
 801c12c:	460b      	mov	r3, r1
 801c12e:	807b      	strh	r3, [r7, #2]
 801c130:	4613      	mov	r3, r2
 801c132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c134:	787b      	ldrb	r3, [r7, #1]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d003      	beq.n	801c142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801c13a:	887a      	ldrh	r2, [r7, #2]
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801c140:	e002      	b.n	801c148 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801c142:	887a      	ldrh	r2, [r7, #2]
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	629a      	str	r2, [r3, #40]	; 0x28
}
 801c148:	bf00      	nop
 801c14a:	370c      	adds	r7, #12
 801c14c:	46bd      	mov	sp, r7
 801c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c152:	4770      	bx	lr

0801c154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801c154:	b480      	push	{r7}
 801c156:	b085      	sub	sp, #20
 801c158:	af00      	add	r7, sp, #0
 801c15a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	2b00      	cmp	r3, #0
 801c160:	d141      	bne.n	801c1e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c162:	4b4b      	ldr	r3, [pc, #300]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c164:	681b      	ldr	r3, [r3, #0]
 801c166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c16a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c16e:	d131      	bne.n	801c1d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c170:	4b47      	ldr	r3, [pc, #284]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c176:	4a46      	ldr	r2, [pc, #280]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c17c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c180:	4b43      	ldr	r3, [pc, #268]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c188:	4a41      	ldr	r2, [pc, #260]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c18a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c18e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c190:	4b40      	ldr	r3, [pc, #256]	; (801c294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	2232      	movs	r2, #50	; 0x32
 801c196:	fb02 f303 	mul.w	r3, r2, r3
 801c19a:	4a3f      	ldr	r2, [pc, #252]	; (801c298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c19c:	fba2 2303 	umull	r2, r3, r2, r3
 801c1a0:	0c9b      	lsrs	r3, r3, #18
 801c1a2:	3301      	adds	r3, #1
 801c1a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c1a6:	e002      	b.n	801c1ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	3b01      	subs	r3, #1
 801c1ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c1ae:	4b38      	ldr	r3, [pc, #224]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1b0:	695b      	ldr	r3, [r3, #20]
 801c1b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1ba:	d102      	bne.n	801c1c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d1f2      	bne.n	801c1a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c1c2:	4b33      	ldr	r3, [pc, #204]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1c4:	695b      	ldr	r3, [r3, #20]
 801c1c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c1ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1ce:	d158      	bne.n	801c282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c1d0:	2303      	movs	r3, #3
 801c1d2:	e057      	b.n	801c284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c1d4:	4b2e      	ldr	r3, [pc, #184]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c1da:	4a2d      	ldr	r2, [pc, #180]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c1e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c1e4:	e04d      	b.n	801c282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c1ec:	d141      	bne.n	801c272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c1ee:	4b28      	ldr	r3, [pc, #160]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c1f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1fa:	d131      	bne.n	801c260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c1fc:	4b24      	ldr	r3, [pc, #144]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c1fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c202:	4a23      	ldr	r2, [pc, #140]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c20c:	4b20      	ldr	r3, [pc, #128]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c20e:	681b      	ldr	r3, [r3, #0]
 801c210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c214:	4a1e      	ldr	r2, [pc, #120]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c21a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c21c:	4b1d      	ldr	r3, [pc, #116]	; (801c294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	2232      	movs	r2, #50	; 0x32
 801c222:	fb02 f303 	mul.w	r3, r2, r3
 801c226:	4a1c      	ldr	r2, [pc, #112]	; (801c298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c228:	fba2 2303 	umull	r2, r3, r2, r3
 801c22c:	0c9b      	lsrs	r3, r3, #18
 801c22e:	3301      	adds	r3, #1
 801c230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c232:	e002      	b.n	801c23a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	3b01      	subs	r3, #1
 801c238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c23a:	4b15      	ldr	r3, [pc, #84]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c23c:	695b      	ldr	r3, [r3, #20]
 801c23e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c246:	d102      	bne.n	801c24e <HAL_PWREx_ControlVoltageScaling+0xfa>
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d1f2      	bne.n	801c234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c24e:	4b10      	ldr	r3, [pc, #64]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c250:	695b      	ldr	r3, [r3, #20]
 801c252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c25a:	d112      	bne.n	801c282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c25c:	2303      	movs	r3, #3
 801c25e:	e011      	b.n	801c284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c260:	4b0b      	ldr	r3, [pc, #44]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c266:	4a0a      	ldr	r2, [pc, #40]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c26c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c270:	e007      	b.n	801c282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801c272:	4b07      	ldr	r3, [pc, #28]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c274:	681b      	ldr	r3, [r3, #0]
 801c276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c27a:	4a05      	ldr	r2, [pc, #20]	; (801c290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c27c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801c282:	2300      	movs	r3, #0
}
 801c284:	4618      	mov	r0, r3
 801c286:	3714      	adds	r7, #20
 801c288:	46bd      	mov	sp, r7
 801c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c28e:	4770      	bx	lr
 801c290:	40007000 	.word	0x40007000
 801c294:	20000000 	.word	0x20000000
 801c298:	431bde83 	.word	0x431bde83

0801c29c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801c29c:	b480      	push	{r7}
 801c29e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801c2a0:	4b05      	ldr	r3, [pc, #20]	; (801c2b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c2a2:	689b      	ldr	r3, [r3, #8]
 801c2a4:	4a04      	ldr	r2, [pc, #16]	; (801c2b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c2a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c2aa:	6093      	str	r3, [r2, #8]
}
 801c2ac:	bf00      	nop
 801c2ae:	46bd      	mov	sp, r7
 801c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b4:	4770      	bx	lr
 801c2b6:	bf00      	nop
 801c2b8:	40007000 	.word	0x40007000

0801c2bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b088      	sub	sp, #32
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d101      	bne.n	801c2ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c2ca:	2301      	movs	r3, #1
 801c2cc:	e306      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	681b      	ldr	r3, [r3, #0]
 801c2d2:	f003 0301 	and.w	r3, r3, #1
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d075      	beq.n	801c3c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c2da:	4b97      	ldr	r3, [pc, #604]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c2dc:	689b      	ldr	r3, [r3, #8]
 801c2de:	f003 030c 	and.w	r3, r3, #12
 801c2e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c2e4:	4b94      	ldr	r3, [pc, #592]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c2e6:	68db      	ldr	r3, [r3, #12]
 801c2e8:	f003 0303 	and.w	r3, r3, #3
 801c2ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801c2ee:	69bb      	ldr	r3, [r7, #24]
 801c2f0:	2b0c      	cmp	r3, #12
 801c2f2:	d102      	bne.n	801c2fa <HAL_RCC_OscConfig+0x3e>
 801c2f4:	697b      	ldr	r3, [r7, #20]
 801c2f6:	2b03      	cmp	r3, #3
 801c2f8:	d002      	beq.n	801c300 <HAL_RCC_OscConfig+0x44>
 801c2fa:	69bb      	ldr	r3, [r7, #24]
 801c2fc:	2b08      	cmp	r3, #8
 801c2fe:	d10b      	bne.n	801c318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c300:	4b8d      	ldr	r3, [pc, #564]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d05b      	beq.n	801c3c4 <HAL_RCC_OscConfig+0x108>
 801c30c:	687b      	ldr	r3, [r7, #4]
 801c30e:	685b      	ldr	r3, [r3, #4]
 801c310:	2b00      	cmp	r3, #0
 801c312:	d157      	bne.n	801c3c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801c314:	2301      	movs	r3, #1
 801c316:	e2e1      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	685b      	ldr	r3, [r3, #4]
 801c31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c320:	d106      	bne.n	801c330 <HAL_RCC_OscConfig+0x74>
 801c322:	4b85      	ldr	r3, [pc, #532]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	4a84      	ldr	r2, [pc, #528]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c32c:	6013      	str	r3, [r2, #0]
 801c32e:	e01d      	b.n	801c36c <HAL_RCC_OscConfig+0xb0>
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	685b      	ldr	r3, [r3, #4]
 801c334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c338:	d10c      	bne.n	801c354 <HAL_RCC_OscConfig+0x98>
 801c33a:	4b7f      	ldr	r3, [pc, #508]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	4a7e      	ldr	r2, [pc, #504]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c344:	6013      	str	r3, [r2, #0]
 801c346:	4b7c      	ldr	r3, [pc, #496]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	4a7b      	ldr	r2, [pc, #492]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c34c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c350:	6013      	str	r3, [r2, #0]
 801c352:	e00b      	b.n	801c36c <HAL_RCC_OscConfig+0xb0>
 801c354:	4b78      	ldr	r3, [pc, #480]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c356:	681b      	ldr	r3, [r3, #0]
 801c358:	4a77      	ldr	r2, [pc, #476]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c35a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c35e:	6013      	str	r3, [r2, #0]
 801c360:	4b75      	ldr	r3, [pc, #468]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	4a74      	ldr	r2, [pc, #464]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c36a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	685b      	ldr	r3, [r3, #4]
 801c370:	2b00      	cmp	r3, #0
 801c372:	d013      	beq.n	801c39c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c374:	f7fc fd0e 	bl	8018d94 <HAL_GetTick>
 801c378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c37a:	e008      	b.n	801c38e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c37c:	f7fc fd0a 	bl	8018d94 <HAL_GetTick>
 801c380:	4602      	mov	r2, r0
 801c382:	693b      	ldr	r3, [r7, #16]
 801c384:	1ad3      	subs	r3, r2, r3
 801c386:	2b64      	cmp	r3, #100	; 0x64
 801c388:	d901      	bls.n	801c38e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801c38a:	2303      	movs	r3, #3
 801c38c:	e2a6      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c38e:	4b6a      	ldr	r3, [pc, #424]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c390:	681b      	ldr	r3, [r3, #0]
 801c392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c396:	2b00      	cmp	r3, #0
 801c398:	d0f0      	beq.n	801c37c <HAL_RCC_OscConfig+0xc0>
 801c39a:	e014      	b.n	801c3c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c39c:	f7fc fcfa 	bl	8018d94 <HAL_GetTick>
 801c3a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c3a2:	e008      	b.n	801c3b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c3a4:	f7fc fcf6 	bl	8018d94 <HAL_GetTick>
 801c3a8:	4602      	mov	r2, r0
 801c3aa:	693b      	ldr	r3, [r7, #16]
 801c3ac:	1ad3      	subs	r3, r2, r3
 801c3ae:	2b64      	cmp	r3, #100	; 0x64
 801c3b0:	d901      	bls.n	801c3b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c3b2:	2303      	movs	r3, #3
 801c3b4:	e292      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c3b6:	4b60      	ldr	r3, [pc, #384]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c3b8:	681b      	ldr	r3, [r3, #0]
 801c3ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d1f0      	bne.n	801c3a4 <HAL_RCC_OscConfig+0xe8>
 801c3c2:	e000      	b.n	801c3c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c3c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c3c6:	687b      	ldr	r3, [r7, #4]
 801c3c8:	681b      	ldr	r3, [r3, #0]
 801c3ca:	f003 0302 	and.w	r3, r3, #2
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d075      	beq.n	801c4be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c3d2:	4b59      	ldr	r3, [pc, #356]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c3d4:	689b      	ldr	r3, [r3, #8]
 801c3d6:	f003 030c 	and.w	r3, r3, #12
 801c3da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c3dc:	4b56      	ldr	r3, [pc, #344]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c3de:	68db      	ldr	r3, [r3, #12]
 801c3e0:	f003 0303 	and.w	r3, r3, #3
 801c3e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801c3e6:	69bb      	ldr	r3, [r7, #24]
 801c3e8:	2b0c      	cmp	r3, #12
 801c3ea:	d102      	bne.n	801c3f2 <HAL_RCC_OscConfig+0x136>
 801c3ec:	697b      	ldr	r3, [r7, #20]
 801c3ee:	2b02      	cmp	r3, #2
 801c3f0:	d002      	beq.n	801c3f8 <HAL_RCC_OscConfig+0x13c>
 801c3f2:	69bb      	ldr	r3, [r7, #24]
 801c3f4:	2b04      	cmp	r3, #4
 801c3f6:	d11f      	bne.n	801c438 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c3f8:	4b4f      	ldr	r3, [pc, #316]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c3fa:	681b      	ldr	r3, [r3, #0]
 801c3fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c400:	2b00      	cmp	r3, #0
 801c402:	d005      	beq.n	801c410 <HAL_RCC_OscConfig+0x154>
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	68db      	ldr	r3, [r3, #12]
 801c408:	2b00      	cmp	r3, #0
 801c40a:	d101      	bne.n	801c410 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801c40c:	2301      	movs	r3, #1
 801c40e:	e265      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c410:	4b49      	ldr	r3, [pc, #292]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c412:	685b      	ldr	r3, [r3, #4]
 801c414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	691b      	ldr	r3, [r3, #16]
 801c41c:	061b      	lsls	r3, r3, #24
 801c41e:	4946      	ldr	r1, [pc, #280]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c420:	4313      	orrs	r3, r2
 801c422:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801c424:	4b45      	ldr	r3, [pc, #276]	; (801c53c <HAL_RCC_OscConfig+0x280>)
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	4618      	mov	r0, r3
 801c42a:	f7fc fc67 	bl	8018cfc <HAL_InitTick>
 801c42e:	4603      	mov	r3, r0
 801c430:	2b00      	cmp	r3, #0
 801c432:	d043      	beq.n	801c4bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801c434:	2301      	movs	r3, #1
 801c436:	e251      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	68db      	ldr	r3, [r3, #12]
 801c43c:	2b00      	cmp	r3, #0
 801c43e:	d023      	beq.n	801c488 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c440:	4b3d      	ldr	r3, [pc, #244]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c442:	681b      	ldr	r3, [r3, #0]
 801c444:	4a3c      	ldr	r2, [pc, #240]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c44a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c44c:	f7fc fca2 	bl	8018d94 <HAL_GetTick>
 801c450:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c452:	e008      	b.n	801c466 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c454:	f7fc fc9e 	bl	8018d94 <HAL_GetTick>
 801c458:	4602      	mov	r2, r0
 801c45a:	693b      	ldr	r3, [r7, #16]
 801c45c:	1ad3      	subs	r3, r2, r3
 801c45e:	2b02      	cmp	r3, #2
 801c460:	d901      	bls.n	801c466 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c462:	2303      	movs	r3, #3
 801c464:	e23a      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c466:	4b34      	ldr	r3, [pc, #208]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d0f0      	beq.n	801c454 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c472:	4b31      	ldr	r3, [pc, #196]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c474:	685b      	ldr	r3, [r3, #4]
 801c476:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c47a:	687b      	ldr	r3, [r7, #4]
 801c47c:	691b      	ldr	r3, [r3, #16]
 801c47e:	061b      	lsls	r3, r3, #24
 801c480:	492d      	ldr	r1, [pc, #180]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c482:	4313      	orrs	r3, r2
 801c484:	604b      	str	r3, [r1, #4]
 801c486:	e01a      	b.n	801c4be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c488:	4b2b      	ldr	r3, [pc, #172]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	4a2a      	ldr	r2, [pc, #168]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c48e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c494:	f7fc fc7e 	bl	8018d94 <HAL_GetTick>
 801c498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c49a:	e008      	b.n	801c4ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c49c:	f7fc fc7a 	bl	8018d94 <HAL_GetTick>
 801c4a0:	4602      	mov	r2, r0
 801c4a2:	693b      	ldr	r3, [r7, #16]
 801c4a4:	1ad3      	subs	r3, r2, r3
 801c4a6:	2b02      	cmp	r3, #2
 801c4a8:	d901      	bls.n	801c4ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801c4aa:	2303      	movs	r3, #3
 801c4ac:	e216      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c4ae:	4b22      	ldr	r3, [pc, #136]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c4b0:	681b      	ldr	r3, [r3, #0]
 801c4b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c4b6:	2b00      	cmp	r3, #0
 801c4b8:	d1f0      	bne.n	801c49c <HAL_RCC_OscConfig+0x1e0>
 801c4ba:	e000      	b.n	801c4be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c4bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	681b      	ldr	r3, [r3, #0]
 801c4c2:	f003 0308 	and.w	r3, r3, #8
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d041      	beq.n	801c54e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	695b      	ldr	r3, [r3, #20]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d01c      	beq.n	801c50c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c4d2:	4b19      	ldr	r3, [pc, #100]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c4d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c4d8:	4a17      	ldr	r2, [pc, #92]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c4da:	f043 0301 	orr.w	r3, r3, #1
 801c4de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4e2:	f7fc fc57 	bl	8018d94 <HAL_GetTick>
 801c4e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c4e8:	e008      	b.n	801c4fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c4ea:	f7fc fc53 	bl	8018d94 <HAL_GetTick>
 801c4ee:	4602      	mov	r2, r0
 801c4f0:	693b      	ldr	r3, [r7, #16]
 801c4f2:	1ad3      	subs	r3, r2, r3
 801c4f4:	2b02      	cmp	r3, #2
 801c4f6:	d901      	bls.n	801c4fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801c4f8:	2303      	movs	r3, #3
 801c4fa:	e1ef      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c4fc:	4b0e      	ldr	r3, [pc, #56]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c4fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c502:	f003 0302 	and.w	r3, r3, #2
 801c506:	2b00      	cmp	r3, #0
 801c508:	d0ef      	beq.n	801c4ea <HAL_RCC_OscConfig+0x22e>
 801c50a:	e020      	b.n	801c54e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c50c:	4b0a      	ldr	r3, [pc, #40]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c50e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c512:	4a09      	ldr	r2, [pc, #36]	; (801c538 <HAL_RCC_OscConfig+0x27c>)
 801c514:	f023 0301 	bic.w	r3, r3, #1
 801c518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c51c:	f7fc fc3a 	bl	8018d94 <HAL_GetTick>
 801c520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c522:	e00d      	b.n	801c540 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c524:	f7fc fc36 	bl	8018d94 <HAL_GetTick>
 801c528:	4602      	mov	r2, r0
 801c52a:	693b      	ldr	r3, [r7, #16]
 801c52c:	1ad3      	subs	r3, r2, r3
 801c52e:	2b02      	cmp	r3, #2
 801c530:	d906      	bls.n	801c540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c532:	2303      	movs	r3, #3
 801c534:	e1d2      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
 801c536:	bf00      	nop
 801c538:	40021000 	.word	0x40021000
 801c53c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c540:	4b8c      	ldr	r3, [pc, #560]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c546:	f003 0302 	and.w	r3, r3, #2
 801c54a:	2b00      	cmp	r3, #0
 801c54c:	d1ea      	bne.n	801c524 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	681b      	ldr	r3, [r3, #0]
 801c552:	f003 0304 	and.w	r3, r3, #4
 801c556:	2b00      	cmp	r3, #0
 801c558:	f000 80a6 	beq.w	801c6a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c55c:	2300      	movs	r3, #0
 801c55e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801c560:	4b84      	ldr	r3, [pc, #528]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c568:	2b00      	cmp	r3, #0
 801c56a:	d101      	bne.n	801c570 <HAL_RCC_OscConfig+0x2b4>
 801c56c:	2301      	movs	r3, #1
 801c56e:	e000      	b.n	801c572 <HAL_RCC_OscConfig+0x2b6>
 801c570:	2300      	movs	r3, #0
 801c572:	2b00      	cmp	r3, #0
 801c574:	d00d      	beq.n	801c592 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c576:	4b7f      	ldr	r3, [pc, #508]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c57a:	4a7e      	ldr	r2, [pc, #504]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c57c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c580:	6593      	str	r3, [r2, #88]	; 0x58
 801c582:	4b7c      	ldr	r3, [pc, #496]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c58a:	60fb      	str	r3, [r7, #12]
 801c58c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c58e:	2301      	movs	r3, #1
 801c590:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c592:	4b79      	ldr	r3, [pc, #484]	; (801c778 <HAL_RCC_OscConfig+0x4bc>)
 801c594:	681b      	ldr	r3, [r3, #0]
 801c596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c59a:	2b00      	cmp	r3, #0
 801c59c:	d118      	bne.n	801c5d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c59e:	4b76      	ldr	r3, [pc, #472]	; (801c778 <HAL_RCC_OscConfig+0x4bc>)
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	4a75      	ldr	r2, [pc, #468]	; (801c778 <HAL_RCC_OscConfig+0x4bc>)
 801c5a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c5a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c5aa:	f7fc fbf3 	bl	8018d94 <HAL_GetTick>
 801c5ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c5b0:	e008      	b.n	801c5c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c5b2:	f7fc fbef 	bl	8018d94 <HAL_GetTick>
 801c5b6:	4602      	mov	r2, r0
 801c5b8:	693b      	ldr	r3, [r7, #16]
 801c5ba:	1ad3      	subs	r3, r2, r3
 801c5bc:	2b02      	cmp	r3, #2
 801c5be:	d901      	bls.n	801c5c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c5c0:	2303      	movs	r3, #3
 801c5c2:	e18b      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c5c4:	4b6c      	ldr	r3, [pc, #432]	; (801c778 <HAL_RCC_OscConfig+0x4bc>)
 801c5c6:	681b      	ldr	r3, [r3, #0]
 801c5c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c5cc:	2b00      	cmp	r3, #0
 801c5ce:	d0f0      	beq.n	801c5b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	689b      	ldr	r3, [r3, #8]
 801c5d4:	2b01      	cmp	r3, #1
 801c5d6:	d108      	bne.n	801c5ea <HAL_RCC_OscConfig+0x32e>
 801c5d8:	4b66      	ldr	r3, [pc, #408]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c5da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5de:	4a65      	ldr	r2, [pc, #404]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c5e0:	f043 0301 	orr.w	r3, r3, #1
 801c5e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c5e8:	e024      	b.n	801c634 <HAL_RCC_OscConfig+0x378>
 801c5ea:	687b      	ldr	r3, [r7, #4]
 801c5ec:	689b      	ldr	r3, [r3, #8]
 801c5ee:	2b05      	cmp	r3, #5
 801c5f0:	d110      	bne.n	801c614 <HAL_RCC_OscConfig+0x358>
 801c5f2:	4b60      	ldr	r3, [pc, #384]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c5f8:	4a5e      	ldr	r2, [pc, #376]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c5fa:	f043 0304 	orr.w	r3, r3, #4
 801c5fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c602:	4b5c      	ldr	r3, [pc, #368]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c608:	4a5a      	ldr	r2, [pc, #360]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c60a:	f043 0301 	orr.w	r3, r3, #1
 801c60e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c612:	e00f      	b.n	801c634 <HAL_RCC_OscConfig+0x378>
 801c614:	4b57      	ldr	r3, [pc, #348]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c61a:	4a56      	ldr	r2, [pc, #344]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c61c:	f023 0301 	bic.w	r3, r3, #1
 801c620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c624:	4b53      	ldr	r3, [pc, #332]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c62a:	4a52      	ldr	r2, [pc, #328]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c62c:	f023 0304 	bic.w	r3, r3, #4
 801c630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	689b      	ldr	r3, [r3, #8]
 801c638:	2b00      	cmp	r3, #0
 801c63a:	d016      	beq.n	801c66a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c63c:	f7fc fbaa 	bl	8018d94 <HAL_GetTick>
 801c640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c642:	e00a      	b.n	801c65a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c644:	f7fc fba6 	bl	8018d94 <HAL_GetTick>
 801c648:	4602      	mov	r2, r0
 801c64a:	693b      	ldr	r3, [r7, #16]
 801c64c:	1ad3      	subs	r3, r2, r3
 801c64e:	f241 3288 	movw	r2, #5000	; 0x1388
 801c652:	4293      	cmp	r3, r2
 801c654:	d901      	bls.n	801c65a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c656:	2303      	movs	r3, #3
 801c658:	e140      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c65a:	4b46      	ldr	r3, [pc, #280]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c65c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c660:	f003 0302 	and.w	r3, r3, #2
 801c664:	2b00      	cmp	r3, #0
 801c666:	d0ed      	beq.n	801c644 <HAL_RCC_OscConfig+0x388>
 801c668:	e015      	b.n	801c696 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c66a:	f7fc fb93 	bl	8018d94 <HAL_GetTick>
 801c66e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c670:	e00a      	b.n	801c688 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c672:	f7fc fb8f 	bl	8018d94 <HAL_GetTick>
 801c676:	4602      	mov	r2, r0
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	1ad3      	subs	r3, r2, r3
 801c67c:	f241 3288 	movw	r2, #5000	; 0x1388
 801c680:	4293      	cmp	r3, r2
 801c682:	d901      	bls.n	801c688 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c684:	2303      	movs	r3, #3
 801c686:	e129      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c688:	4b3a      	ldr	r3, [pc, #232]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c68e:	f003 0302 	and.w	r3, r3, #2
 801c692:	2b00      	cmp	r3, #0
 801c694:	d1ed      	bne.n	801c672 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c696:	7ffb      	ldrb	r3, [r7, #31]
 801c698:	2b01      	cmp	r3, #1
 801c69a:	d105      	bne.n	801c6a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c69c:	4b35      	ldr	r3, [pc, #212]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c69e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c6a0:	4a34      	ldr	r2, [pc, #208]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c6a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c6a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	f003 0320 	and.w	r3, r3, #32
 801c6b0:	2b00      	cmp	r3, #0
 801c6b2:	d03c      	beq.n	801c72e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	699b      	ldr	r3, [r3, #24]
 801c6b8:	2b00      	cmp	r3, #0
 801c6ba:	d01c      	beq.n	801c6f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c6bc:	4b2d      	ldr	r3, [pc, #180]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c6be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c6c2:	4a2c      	ldr	r2, [pc, #176]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c6c4:	f043 0301 	orr.w	r3, r3, #1
 801c6c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c6cc:	f7fc fb62 	bl	8018d94 <HAL_GetTick>
 801c6d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c6d2:	e008      	b.n	801c6e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c6d4:	f7fc fb5e 	bl	8018d94 <HAL_GetTick>
 801c6d8:	4602      	mov	r2, r0
 801c6da:	693b      	ldr	r3, [r7, #16]
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	2b02      	cmp	r3, #2
 801c6e0:	d901      	bls.n	801c6e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c6e2:	2303      	movs	r3, #3
 801c6e4:	e0fa      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c6e6:	4b23      	ldr	r3, [pc, #140]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c6e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c6ec:	f003 0302 	and.w	r3, r3, #2
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	d0ef      	beq.n	801c6d4 <HAL_RCC_OscConfig+0x418>
 801c6f4:	e01b      	b.n	801c72e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c6f6:	4b1f      	ldr	r3, [pc, #124]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c6f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c6fc:	4a1d      	ldr	r2, [pc, #116]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c6fe:	f023 0301 	bic.w	r3, r3, #1
 801c702:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c706:	f7fc fb45 	bl	8018d94 <HAL_GetTick>
 801c70a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c70c:	e008      	b.n	801c720 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c70e:	f7fc fb41 	bl	8018d94 <HAL_GetTick>
 801c712:	4602      	mov	r2, r0
 801c714:	693b      	ldr	r3, [r7, #16]
 801c716:	1ad3      	subs	r3, r2, r3
 801c718:	2b02      	cmp	r3, #2
 801c71a:	d901      	bls.n	801c720 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c71c:	2303      	movs	r3, #3
 801c71e:	e0dd      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c720:	4b14      	ldr	r3, [pc, #80]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c726:	f003 0302 	and.w	r3, r3, #2
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d1ef      	bne.n	801c70e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	69db      	ldr	r3, [r3, #28]
 801c732:	2b00      	cmp	r3, #0
 801c734:	f000 80d1 	beq.w	801c8da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c738:	4b0e      	ldr	r3, [pc, #56]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c73a:	689b      	ldr	r3, [r3, #8]
 801c73c:	f003 030c 	and.w	r3, r3, #12
 801c740:	2b0c      	cmp	r3, #12
 801c742:	f000 808b 	beq.w	801c85c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c746:	687b      	ldr	r3, [r7, #4]
 801c748:	69db      	ldr	r3, [r3, #28]
 801c74a:	2b02      	cmp	r3, #2
 801c74c:	d15e      	bne.n	801c80c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c74e:	4b09      	ldr	r3, [pc, #36]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	4a08      	ldr	r2, [pc, #32]	; (801c774 <HAL_RCC_OscConfig+0x4b8>)
 801c754:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c75a:	f7fc fb1b 	bl	8018d94 <HAL_GetTick>
 801c75e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c760:	e00c      	b.n	801c77c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c762:	f7fc fb17 	bl	8018d94 <HAL_GetTick>
 801c766:	4602      	mov	r2, r0
 801c768:	693b      	ldr	r3, [r7, #16]
 801c76a:	1ad3      	subs	r3, r2, r3
 801c76c:	2b02      	cmp	r3, #2
 801c76e:	d905      	bls.n	801c77c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c770:	2303      	movs	r3, #3
 801c772:	e0b3      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
 801c774:	40021000 	.word	0x40021000
 801c778:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c77c:	4b59      	ldr	r3, [pc, #356]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c77e:	681b      	ldr	r3, [r3, #0]
 801c780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c784:	2b00      	cmp	r3, #0
 801c786:	d1ec      	bne.n	801c762 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c788:	4b56      	ldr	r3, [pc, #344]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c78a:	68da      	ldr	r2, [r3, #12]
 801c78c:	4b56      	ldr	r3, [pc, #344]	; (801c8e8 <HAL_RCC_OscConfig+0x62c>)
 801c78e:	4013      	ands	r3, r2
 801c790:	687a      	ldr	r2, [r7, #4]
 801c792:	6a11      	ldr	r1, [r2, #32]
 801c794:	687a      	ldr	r2, [r7, #4]
 801c796:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c798:	3a01      	subs	r2, #1
 801c79a:	0112      	lsls	r2, r2, #4
 801c79c:	4311      	orrs	r1, r2
 801c79e:	687a      	ldr	r2, [r7, #4]
 801c7a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c7a2:	0212      	lsls	r2, r2, #8
 801c7a4:	4311      	orrs	r1, r2
 801c7a6:	687a      	ldr	r2, [r7, #4]
 801c7a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c7aa:	0852      	lsrs	r2, r2, #1
 801c7ac:	3a01      	subs	r2, #1
 801c7ae:	0552      	lsls	r2, r2, #21
 801c7b0:	4311      	orrs	r1, r2
 801c7b2:	687a      	ldr	r2, [r7, #4]
 801c7b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c7b6:	0852      	lsrs	r2, r2, #1
 801c7b8:	3a01      	subs	r2, #1
 801c7ba:	0652      	lsls	r2, r2, #25
 801c7bc:	4311      	orrs	r1, r2
 801c7be:	687a      	ldr	r2, [r7, #4]
 801c7c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c7c2:	06d2      	lsls	r2, r2, #27
 801c7c4:	430a      	orrs	r2, r1
 801c7c6:	4947      	ldr	r1, [pc, #284]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c7c8:	4313      	orrs	r3, r2
 801c7ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c7cc:	4b45      	ldr	r3, [pc, #276]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c7ce:	681b      	ldr	r3, [r3, #0]
 801c7d0:	4a44      	ldr	r2, [pc, #272]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c7d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c7d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c7d8:	4b42      	ldr	r3, [pc, #264]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c7da:	68db      	ldr	r3, [r3, #12]
 801c7dc:	4a41      	ldr	r2, [pc, #260]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c7de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c7e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7e4:	f7fc fad6 	bl	8018d94 <HAL_GetTick>
 801c7e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c7ea:	e008      	b.n	801c7fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c7ec:	f7fc fad2 	bl	8018d94 <HAL_GetTick>
 801c7f0:	4602      	mov	r2, r0
 801c7f2:	693b      	ldr	r3, [r7, #16]
 801c7f4:	1ad3      	subs	r3, r2, r3
 801c7f6:	2b02      	cmp	r3, #2
 801c7f8:	d901      	bls.n	801c7fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c7fa:	2303      	movs	r3, #3
 801c7fc:	e06e      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c7fe:	4b39      	ldr	r3, [pc, #228]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c800:	681b      	ldr	r3, [r3, #0]
 801c802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c806:	2b00      	cmp	r3, #0
 801c808:	d0f0      	beq.n	801c7ec <HAL_RCC_OscConfig+0x530>
 801c80a:	e066      	b.n	801c8da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c80c:	4b35      	ldr	r3, [pc, #212]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	4a34      	ldr	r2, [pc, #208]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c816:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c818:	4b32      	ldr	r3, [pc, #200]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c81a:	68db      	ldr	r3, [r3, #12]
 801c81c:	4a31      	ldr	r2, [pc, #196]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c81e:	f023 0303 	bic.w	r3, r3, #3
 801c822:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c824:	4b2f      	ldr	r3, [pc, #188]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c826:	68db      	ldr	r3, [r3, #12]
 801c828:	4a2e      	ldr	r2, [pc, #184]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c82a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c82e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c832:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c834:	f7fc faae 	bl	8018d94 <HAL_GetTick>
 801c838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c83a:	e008      	b.n	801c84e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c83c:	f7fc faaa 	bl	8018d94 <HAL_GetTick>
 801c840:	4602      	mov	r2, r0
 801c842:	693b      	ldr	r3, [r7, #16]
 801c844:	1ad3      	subs	r3, r2, r3
 801c846:	2b02      	cmp	r3, #2
 801c848:	d901      	bls.n	801c84e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c84a:	2303      	movs	r3, #3
 801c84c:	e046      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c84e:	4b25      	ldr	r3, [pc, #148]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c856:	2b00      	cmp	r3, #0
 801c858:	d1f0      	bne.n	801c83c <HAL_RCC_OscConfig+0x580>
 801c85a:	e03e      	b.n	801c8da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	69db      	ldr	r3, [r3, #28]
 801c860:	2b01      	cmp	r3, #1
 801c862:	d101      	bne.n	801c868 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c864:	2301      	movs	r3, #1
 801c866:	e039      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c868:	4b1e      	ldr	r3, [pc, #120]	; (801c8e4 <HAL_RCC_OscConfig+0x628>)
 801c86a:	68db      	ldr	r3, [r3, #12]
 801c86c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c86e:	697b      	ldr	r3, [r7, #20]
 801c870:	f003 0203 	and.w	r2, r3, #3
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	6a1b      	ldr	r3, [r3, #32]
 801c878:	429a      	cmp	r2, r3
 801c87a:	d12c      	bne.n	801c8d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c87c:	697b      	ldr	r3, [r7, #20]
 801c87e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c882:	687b      	ldr	r3, [r7, #4]
 801c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c886:	3b01      	subs	r3, #1
 801c888:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c88a:	429a      	cmp	r2, r3
 801c88c:	d123      	bne.n	801c8d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c88e:	697b      	ldr	r3, [r7, #20]
 801c890:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c898:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c89a:	429a      	cmp	r2, r3
 801c89c:	d11b      	bne.n	801c8d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c89e:	697b      	ldr	r3, [r7, #20]
 801c8a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c8a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d113      	bne.n	801c8d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c8ae:	697b      	ldr	r3, [r7, #20]
 801c8b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c8b8:	085b      	lsrs	r3, r3, #1
 801c8ba:	3b01      	subs	r3, #1
 801c8bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c8be:	429a      	cmp	r2, r3
 801c8c0:	d109      	bne.n	801c8d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c8c2:	697b      	ldr	r3, [r7, #20]
 801c8c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c8cc:	085b      	lsrs	r3, r3, #1
 801c8ce:	3b01      	subs	r3, #1
 801c8d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d001      	beq.n	801c8da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c8d6:	2301      	movs	r3, #1
 801c8d8:	e000      	b.n	801c8dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c8da:	2300      	movs	r3, #0
}
 801c8dc:	4618      	mov	r0, r3
 801c8de:	3720      	adds	r7, #32
 801c8e0:	46bd      	mov	sp, r7
 801c8e2:	bd80      	pop	{r7, pc}
 801c8e4:	40021000 	.word	0x40021000
 801c8e8:	019f800c 	.word	0x019f800c

0801c8ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b086      	sub	sp, #24
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
 801c8f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c8f6:	2300      	movs	r3, #0
 801c8f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d101      	bne.n	801c904 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c900:	2301      	movs	r3, #1
 801c902:	e11e      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c904:	4b91      	ldr	r3, [pc, #580]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801c906:	681b      	ldr	r3, [r3, #0]
 801c908:	f003 030f 	and.w	r3, r3, #15
 801c90c:	683a      	ldr	r2, [r7, #0]
 801c90e:	429a      	cmp	r2, r3
 801c910:	d910      	bls.n	801c934 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c912:	4b8e      	ldr	r3, [pc, #568]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	f023 020f 	bic.w	r2, r3, #15
 801c91a:	498c      	ldr	r1, [pc, #560]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801c91c:	683b      	ldr	r3, [r7, #0]
 801c91e:	4313      	orrs	r3, r2
 801c920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c922:	4b8a      	ldr	r3, [pc, #552]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801c924:	681b      	ldr	r3, [r3, #0]
 801c926:	f003 030f 	and.w	r3, r3, #15
 801c92a:	683a      	ldr	r2, [r7, #0]
 801c92c:	429a      	cmp	r2, r3
 801c92e:	d001      	beq.n	801c934 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c930:	2301      	movs	r3, #1
 801c932:	e106      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	f003 0301 	and.w	r3, r3, #1
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d073      	beq.n	801ca28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c940:	687b      	ldr	r3, [r7, #4]
 801c942:	685b      	ldr	r3, [r3, #4]
 801c944:	2b03      	cmp	r3, #3
 801c946:	d129      	bne.n	801c99c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c948:	4b81      	ldr	r3, [pc, #516]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c950:	2b00      	cmp	r3, #0
 801c952:	d101      	bne.n	801c958 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c954:	2301      	movs	r3, #1
 801c956:	e0f4      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c958:	f000 f99c 	bl	801cc94 <RCC_GetSysClockFreqFromPLLSource>
 801c95c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c95e:	693b      	ldr	r3, [r7, #16]
 801c960:	4a7c      	ldr	r2, [pc, #496]	; (801cb54 <HAL_RCC_ClockConfig+0x268>)
 801c962:	4293      	cmp	r3, r2
 801c964:	d93f      	bls.n	801c9e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c966:	4b7a      	ldr	r3, [pc, #488]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c968:	689b      	ldr	r3, [r3, #8]
 801c96a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d009      	beq.n	801c986 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c972:	687b      	ldr	r3, [r7, #4]
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d033      	beq.n	801c9e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c97e:	687b      	ldr	r3, [r7, #4]
 801c980:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c982:	2b00      	cmp	r3, #0
 801c984:	d12f      	bne.n	801c9e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c986:	4b72      	ldr	r3, [pc, #456]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c988:	689b      	ldr	r3, [r3, #8]
 801c98a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c98e:	4a70      	ldr	r2, [pc, #448]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c990:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c994:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c996:	2380      	movs	r3, #128	; 0x80
 801c998:	617b      	str	r3, [r7, #20]
 801c99a:	e024      	b.n	801c9e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	685b      	ldr	r3, [r3, #4]
 801c9a0:	2b02      	cmp	r3, #2
 801c9a2:	d107      	bne.n	801c9b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c9a4:	4b6a      	ldr	r3, [pc, #424]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c9a6:	681b      	ldr	r3, [r3, #0]
 801c9a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d109      	bne.n	801c9c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c9b0:	2301      	movs	r3, #1
 801c9b2:	e0c6      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c9b4:	4b66      	ldr	r3, [pc, #408]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c9b6:	681b      	ldr	r3, [r3, #0]
 801c9b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d101      	bne.n	801c9c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c9c0:	2301      	movs	r3, #1
 801c9c2:	e0be      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c9c4:	f000 f8ce 	bl	801cb64 <HAL_RCC_GetSysClockFreq>
 801c9c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c9ca:	693b      	ldr	r3, [r7, #16]
 801c9cc:	4a61      	ldr	r2, [pc, #388]	; (801cb54 <HAL_RCC_ClockConfig+0x268>)
 801c9ce:	4293      	cmp	r3, r2
 801c9d0:	d909      	bls.n	801c9e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c9d2:	4b5f      	ldr	r3, [pc, #380]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c9d4:	689b      	ldr	r3, [r3, #8]
 801c9d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c9da:	4a5d      	ldr	r2, [pc, #372]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c9dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c9e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c9e2:	2380      	movs	r3, #128	; 0x80
 801c9e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c9e6:	4b5a      	ldr	r3, [pc, #360]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c9e8:	689b      	ldr	r3, [r3, #8]
 801c9ea:	f023 0203 	bic.w	r2, r3, #3
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	685b      	ldr	r3, [r3, #4]
 801c9f2:	4957      	ldr	r1, [pc, #348]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801c9f4:	4313      	orrs	r3, r2
 801c9f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c9f8:	f7fc f9cc 	bl	8018d94 <HAL_GetTick>
 801c9fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c9fe:	e00a      	b.n	801ca16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ca00:	f7fc f9c8 	bl	8018d94 <HAL_GetTick>
 801ca04:	4602      	mov	r2, r0
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	1ad3      	subs	r3, r2, r3
 801ca0a:	f241 3288 	movw	r2, #5000	; 0x1388
 801ca0e:	4293      	cmp	r3, r2
 801ca10:	d901      	bls.n	801ca16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801ca12:	2303      	movs	r3, #3
 801ca14:	e095      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ca16:	4b4e      	ldr	r3, [pc, #312]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca18:	689b      	ldr	r3, [r3, #8]
 801ca1a:	f003 020c 	and.w	r2, r3, #12
 801ca1e:	687b      	ldr	r3, [r7, #4]
 801ca20:	685b      	ldr	r3, [r3, #4]
 801ca22:	009b      	lsls	r3, r3, #2
 801ca24:	429a      	cmp	r2, r3
 801ca26:	d1eb      	bne.n	801ca00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	681b      	ldr	r3, [r3, #0]
 801ca2c:	f003 0302 	and.w	r3, r3, #2
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d023      	beq.n	801ca7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	f003 0304 	and.w	r3, r3, #4
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d005      	beq.n	801ca4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801ca40:	4b43      	ldr	r3, [pc, #268]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca42:	689b      	ldr	r3, [r3, #8]
 801ca44:	4a42      	ldr	r2, [pc, #264]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801ca4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	681b      	ldr	r3, [r3, #0]
 801ca50:	f003 0308 	and.w	r3, r3, #8
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d007      	beq.n	801ca68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801ca58:	4b3d      	ldr	r3, [pc, #244]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca5a:	689b      	ldr	r3, [r3, #8]
 801ca5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ca60:	4a3b      	ldr	r2, [pc, #236]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801ca66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ca68:	4b39      	ldr	r3, [pc, #228]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca6a:	689b      	ldr	r3, [r3, #8]
 801ca6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	689b      	ldr	r3, [r3, #8]
 801ca74:	4936      	ldr	r1, [pc, #216]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca76:	4313      	orrs	r3, r2
 801ca78:	608b      	str	r3, [r1, #8]
 801ca7a:	e008      	b.n	801ca8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801ca7c:	697b      	ldr	r3, [r7, #20]
 801ca7e:	2b80      	cmp	r3, #128	; 0x80
 801ca80:	d105      	bne.n	801ca8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801ca82:	4b33      	ldr	r3, [pc, #204]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca84:	689b      	ldr	r3, [r3, #8]
 801ca86:	4a32      	ldr	r2, [pc, #200]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801ca88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ca8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801ca8e:	4b2f      	ldr	r3, [pc, #188]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801ca90:	681b      	ldr	r3, [r3, #0]
 801ca92:	f003 030f 	and.w	r3, r3, #15
 801ca96:	683a      	ldr	r2, [r7, #0]
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d21d      	bcs.n	801cad8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ca9c:	4b2b      	ldr	r3, [pc, #172]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	f023 020f 	bic.w	r2, r3, #15
 801caa4:	4929      	ldr	r1, [pc, #164]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801caa6:	683b      	ldr	r3, [r7, #0]
 801caa8:	4313      	orrs	r3, r2
 801caaa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801caac:	f7fc f972 	bl	8018d94 <HAL_GetTick>
 801cab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cab2:	e00a      	b.n	801caca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801cab4:	f7fc f96e 	bl	8018d94 <HAL_GetTick>
 801cab8:	4602      	mov	r2, r0
 801caba:	68fb      	ldr	r3, [r7, #12]
 801cabc:	1ad3      	subs	r3, r2, r3
 801cabe:	f241 3288 	movw	r2, #5000	; 0x1388
 801cac2:	4293      	cmp	r3, r2
 801cac4:	d901      	bls.n	801caca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801cac6:	2303      	movs	r3, #3
 801cac8:	e03b      	b.n	801cb42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801caca:	4b20      	ldr	r3, [pc, #128]	; (801cb4c <HAL_RCC_ClockConfig+0x260>)
 801cacc:	681b      	ldr	r3, [r3, #0]
 801cace:	f003 030f 	and.w	r3, r3, #15
 801cad2:	683a      	ldr	r2, [r7, #0]
 801cad4:	429a      	cmp	r2, r3
 801cad6:	d1ed      	bne.n	801cab4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	681b      	ldr	r3, [r3, #0]
 801cadc:	f003 0304 	and.w	r3, r3, #4
 801cae0:	2b00      	cmp	r3, #0
 801cae2:	d008      	beq.n	801caf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801cae4:	4b1a      	ldr	r3, [pc, #104]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801cae6:	689b      	ldr	r3, [r3, #8]
 801cae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	68db      	ldr	r3, [r3, #12]
 801caf0:	4917      	ldr	r1, [pc, #92]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801caf2:	4313      	orrs	r3, r2
 801caf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	681b      	ldr	r3, [r3, #0]
 801cafa:	f003 0308 	and.w	r3, r3, #8
 801cafe:	2b00      	cmp	r3, #0
 801cb00:	d009      	beq.n	801cb16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801cb02:	4b13      	ldr	r3, [pc, #76]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801cb04:	689b      	ldr	r3, [r3, #8]
 801cb06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	691b      	ldr	r3, [r3, #16]
 801cb0e:	00db      	lsls	r3, r3, #3
 801cb10:	490f      	ldr	r1, [pc, #60]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801cb12:	4313      	orrs	r3, r2
 801cb14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801cb16:	f000 f825 	bl	801cb64 <HAL_RCC_GetSysClockFreq>
 801cb1a:	4602      	mov	r2, r0
 801cb1c:	4b0c      	ldr	r3, [pc, #48]	; (801cb50 <HAL_RCC_ClockConfig+0x264>)
 801cb1e:	689b      	ldr	r3, [r3, #8]
 801cb20:	091b      	lsrs	r3, r3, #4
 801cb22:	f003 030f 	and.w	r3, r3, #15
 801cb26:	490c      	ldr	r1, [pc, #48]	; (801cb58 <HAL_RCC_ClockConfig+0x26c>)
 801cb28:	5ccb      	ldrb	r3, [r1, r3]
 801cb2a:	f003 031f 	and.w	r3, r3, #31
 801cb2e:	fa22 f303 	lsr.w	r3, r2, r3
 801cb32:	4a0a      	ldr	r2, [pc, #40]	; (801cb5c <HAL_RCC_ClockConfig+0x270>)
 801cb34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801cb36:	4b0a      	ldr	r3, [pc, #40]	; (801cb60 <HAL_RCC_ClockConfig+0x274>)
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	f7fc f8de 	bl	8018cfc <HAL_InitTick>
 801cb40:	4603      	mov	r3, r0
}
 801cb42:	4618      	mov	r0, r3
 801cb44:	3718      	adds	r7, #24
 801cb46:	46bd      	mov	sp, r7
 801cb48:	bd80      	pop	{r7, pc}
 801cb4a:	bf00      	nop
 801cb4c:	40022000 	.word	0x40022000
 801cb50:	40021000 	.word	0x40021000
 801cb54:	04c4b400 	.word	0x04c4b400
 801cb58:	08023768 	.word	0x08023768
 801cb5c:	20000000 	.word	0x20000000
 801cb60:	20000004 	.word	0x20000004

0801cb64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cb64:	b480      	push	{r7}
 801cb66:	b087      	sub	sp, #28
 801cb68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801cb6a:	4b2c      	ldr	r3, [pc, #176]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb6c:	689b      	ldr	r3, [r3, #8]
 801cb6e:	f003 030c 	and.w	r3, r3, #12
 801cb72:	2b04      	cmp	r3, #4
 801cb74:	d102      	bne.n	801cb7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801cb76:	4b2a      	ldr	r3, [pc, #168]	; (801cc20 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb78:	613b      	str	r3, [r7, #16]
 801cb7a:	e047      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801cb7c:	4b27      	ldr	r3, [pc, #156]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb7e:	689b      	ldr	r3, [r3, #8]
 801cb80:	f003 030c 	and.w	r3, r3, #12
 801cb84:	2b08      	cmp	r3, #8
 801cb86:	d102      	bne.n	801cb8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801cb88:	4b25      	ldr	r3, [pc, #148]	; (801cc20 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cb8a:	613b      	str	r3, [r7, #16]
 801cb8c:	e03e      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801cb8e:	4b23      	ldr	r3, [pc, #140]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb90:	689b      	ldr	r3, [r3, #8]
 801cb92:	f003 030c 	and.w	r3, r3, #12
 801cb96:	2b0c      	cmp	r3, #12
 801cb98:	d136      	bne.n	801cc08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cb9a:	4b20      	ldr	r3, [pc, #128]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cb9c:	68db      	ldr	r3, [r3, #12]
 801cb9e:	f003 0303 	and.w	r3, r3, #3
 801cba2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cba4:	4b1d      	ldr	r3, [pc, #116]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cba6:	68db      	ldr	r3, [r3, #12]
 801cba8:	091b      	lsrs	r3, r3, #4
 801cbaa:	f003 030f 	and.w	r3, r3, #15
 801cbae:	3301      	adds	r3, #1
 801cbb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801cbb2:	68fb      	ldr	r3, [r7, #12]
 801cbb4:	2b03      	cmp	r3, #3
 801cbb6:	d10c      	bne.n	801cbd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cbb8:	4a19      	ldr	r2, [pc, #100]	; (801cc20 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cbba:	68bb      	ldr	r3, [r7, #8]
 801cbbc:	fbb2 f3f3 	udiv	r3, r2, r3
 801cbc0:	4a16      	ldr	r2, [pc, #88]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cbc2:	68d2      	ldr	r2, [r2, #12]
 801cbc4:	0a12      	lsrs	r2, r2, #8
 801cbc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cbca:	fb02 f303 	mul.w	r3, r2, r3
 801cbce:	617b      	str	r3, [r7, #20]
      break;
 801cbd0:	e00c      	b.n	801cbec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cbd2:	4a13      	ldr	r2, [pc, #76]	; (801cc20 <HAL_RCC_GetSysClockFreq+0xbc>)
 801cbd4:	68bb      	ldr	r3, [r7, #8]
 801cbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 801cbda:	4a10      	ldr	r2, [pc, #64]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cbdc:	68d2      	ldr	r2, [r2, #12]
 801cbde:	0a12      	lsrs	r2, r2, #8
 801cbe0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cbe4:	fb02 f303 	mul.w	r3, r2, r3
 801cbe8:	617b      	str	r3, [r7, #20]
      break;
 801cbea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cbec:	4b0b      	ldr	r3, [pc, #44]	; (801cc1c <HAL_RCC_GetSysClockFreq+0xb8>)
 801cbee:	68db      	ldr	r3, [r3, #12]
 801cbf0:	0e5b      	lsrs	r3, r3, #25
 801cbf2:	f003 0303 	and.w	r3, r3, #3
 801cbf6:	3301      	adds	r3, #1
 801cbf8:	005b      	lsls	r3, r3, #1
 801cbfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801cbfc:	697a      	ldr	r2, [r7, #20]
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	fbb2 f3f3 	udiv	r3, r2, r3
 801cc04:	613b      	str	r3, [r7, #16]
 801cc06:	e001      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801cc08:	2300      	movs	r3, #0
 801cc0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801cc0c:	693b      	ldr	r3, [r7, #16]
}
 801cc0e:	4618      	mov	r0, r3
 801cc10:	371c      	adds	r7, #28
 801cc12:	46bd      	mov	sp, r7
 801cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc18:	4770      	bx	lr
 801cc1a:	bf00      	nop
 801cc1c:	40021000 	.word	0x40021000
 801cc20:	00f42400 	.word	0x00f42400

0801cc24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cc24:	b480      	push	{r7}
 801cc26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cc28:	4b03      	ldr	r3, [pc, #12]	; (801cc38 <HAL_RCC_GetHCLKFreq+0x14>)
 801cc2a:	681b      	ldr	r3, [r3, #0]
}
 801cc2c:	4618      	mov	r0, r3
 801cc2e:	46bd      	mov	sp, r7
 801cc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc34:	4770      	bx	lr
 801cc36:	bf00      	nop
 801cc38:	20000000 	.word	0x20000000

0801cc3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801cc40:	f7ff fff0 	bl	801cc24 <HAL_RCC_GetHCLKFreq>
 801cc44:	4602      	mov	r2, r0
 801cc46:	4b06      	ldr	r3, [pc, #24]	; (801cc60 <HAL_RCC_GetPCLK1Freq+0x24>)
 801cc48:	689b      	ldr	r3, [r3, #8]
 801cc4a:	0a1b      	lsrs	r3, r3, #8
 801cc4c:	f003 0307 	and.w	r3, r3, #7
 801cc50:	4904      	ldr	r1, [pc, #16]	; (801cc64 <HAL_RCC_GetPCLK1Freq+0x28>)
 801cc52:	5ccb      	ldrb	r3, [r1, r3]
 801cc54:	f003 031f 	and.w	r3, r3, #31
 801cc58:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	bd80      	pop	{r7, pc}
 801cc60:	40021000 	.word	0x40021000
 801cc64:	08023778 	.word	0x08023778

0801cc68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cc68:	b580      	push	{r7, lr}
 801cc6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801cc6c:	f7ff ffda 	bl	801cc24 <HAL_RCC_GetHCLKFreq>
 801cc70:	4602      	mov	r2, r0
 801cc72:	4b06      	ldr	r3, [pc, #24]	; (801cc8c <HAL_RCC_GetPCLK2Freq+0x24>)
 801cc74:	689b      	ldr	r3, [r3, #8]
 801cc76:	0adb      	lsrs	r3, r3, #11
 801cc78:	f003 0307 	and.w	r3, r3, #7
 801cc7c:	4904      	ldr	r1, [pc, #16]	; (801cc90 <HAL_RCC_GetPCLK2Freq+0x28>)
 801cc7e:	5ccb      	ldrb	r3, [r1, r3]
 801cc80:	f003 031f 	and.w	r3, r3, #31
 801cc84:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cc88:	4618      	mov	r0, r3
 801cc8a:	bd80      	pop	{r7, pc}
 801cc8c:	40021000 	.word	0x40021000
 801cc90:	08023778 	.word	0x08023778

0801cc94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801cc94:	b480      	push	{r7}
 801cc96:	b087      	sub	sp, #28
 801cc98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cc9a:	4b1e      	ldr	r3, [pc, #120]	; (801cd14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cc9c:	68db      	ldr	r3, [r3, #12]
 801cc9e:	f003 0303 	and.w	r3, r3, #3
 801cca2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cca4:	4b1b      	ldr	r3, [pc, #108]	; (801cd14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cca6:	68db      	ldr	r3, [r3, #12]
 801cca8:	091b      	lsrs	r3, r3, #4
 801ccaa:	f003 030f 	and.w	r3, r3, #15
 801ccae:	3301      	adds	r3, #1
 801ccb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801ccb2:	693b      	ldr	r3, [r7, #16]
 801ccb4:	2b03      	cmp	r3, #3
 801ccb6:	d10c      	bne.n	801ccd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801ccb8:	4a17      	ldr	r2, [pc, #92]	; (801cd18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801ccba:	68fb      	ldr	r3, [r7, #12]
 801ccbc:	fbb2 f3f3 	udiv	r3, r2, r3
 801ccc0:	4a14      	ldr	r2, [pc, #80]	; (801cd14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801ccc2:	68d2      	ldr	r2, [r2, #12]
 801ccc4:	0a12      	lsrs	r2, r2, #8
 801ccc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ccca:	fb02 f303 	mul.w	r3, r2, r3
 801ccce:	617b      	str	r3, [r7, #20]
    break;
 801ccd0:	e00c      	b.n	801ccec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801ccd2:	4a11      	ldr	r2, [pc, #68]	; (801cd18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801ccd4:	68fb      	ldr	r3, [r7, #12]
 801ccd6:	fbb2 f3f3 	udiv	r3, r2, r3
 801ccda:	4a0e      	ldr	r2, [pc, #56]	; (801cd14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801ccdc:	68d2      	ldr	r2, [r2, #12]
 801ccde:	0a12      	lsrs	r2, r2, #8
 801cce0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cce4:	fb02 f303 	mul.w	r3, r2, r3
 801cce8:	617b      	str	r3, [r7, #20]
    break;
 801ccea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801ccec:	4b09      	ldr	r3, [pc, #36]	; (801cd14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801ccee:	68db      	ldr	r3, [r3, #12]
 801ccf0:	0e5b      	lsrs	r3, r3, #25
 801ccf2:	f003 0303 	and.w	r3, r3, #3
 801ccf6:	3301      	adds	r3, #1
 801ccf8:	005b      	lsls	r3, r3, #1
 801ccfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801ccfc:	697a      	ldr	r2, [r7, #20]
 801ccfe:	68bb      	ldr	r3, [r7, #8]
 801cd00:	fbb2 f3f3 	udiv	r3, r2, r3
 801cd04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801cd06:	687b      	ldr	r3, [r7, #4]
}
 801cd08:	4618      	mov	r0, r3
 801cd0a:	371c      	adds	r7, #28
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd12:	4770      	bx	lr
 801cd14:	40021000 	.word	0x40021000
 801cd18:	00f42400 	.word	0x00f42400

0801cd1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cd1c:	b580      	push	{r7, lr}
 801cd1e:	b086      	sub	sp, #24
 801cd20:	af00      	add	r7, sp, #0
 801cd22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cd24:	2300      	movs	r3, #0
 801cd26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cd28:	2300      	movs	r3, #0
 801cd2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cd2c:	687b      	ldr	r3, [r7, #4]
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	f000 8098 	beq.w	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801cd3a:	2300      	movs	r3, #0
 801cd3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801cd3e:	4b43      	ldr	r3, [pc, #268]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d10d      	bne.n	801cd66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801cd4a:	4b40      	ldr	r3, [pc, #256]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd4e:	4a3f      	ldr	r2, [pc, #252]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cd54:	6593      	str	r3, [r2, #88]	; 0x58
 801cd56:	4b3d      	ldr	r3, [pc, #244]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cd58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cd5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cd5e:	60bb      	str	r3, [r7, #8]
 801cd60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801cd62:	2301      	movs	r3, #1
 801cd64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cd66:	4b3a      	ldr	r3, [pc, #232]	; (801ce50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	4a39      	ldr	r2, [pc, #228]	; (801ce50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cd70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cd72:	f7fc f80f 	bl	8018d94 <HAL_GetTick>
 801cd76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cd78:	e009      	b.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cd7a:	f7fc f80b 	bl	8018d94 <HAL_GetTick>
 801cd7e:	4602      	mov	r2, r0
 801cd80:	68fb      	ldr	r3, [r7, #12]
 801cd82:	1ad3      	subs	r3, r2, r3
 801cd84:	2b02      	cmp	r3, #2
 801cd86:	d902      	bls.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801cd88:	2303      	movs	r3, #3
 801cd8a:	74fb      	strb	r3, [r7, #19]
        break;
 801cd8c:	e005      	b.n	801cd9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cd8e:	4b30      	ldr	r3, [pc, #192]	; (801ce50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d0ef      	beq.n	801cd7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801cd9a:	7cfb      	ldrb	r3, [r7, #19]
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d159      	bne.n	801ce54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cda0:	4b2a      	ldr	r3, [pc, #168]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cda6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cdaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cdac:	697b      	ldr	r3, [r7, #20]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d01e      	beq.n	801cdf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cdb6:	697a      	ldr	r2, [r7, #20]
 801cdb8:	429a      	cmp	r2, r3
 801cdba:	d019      	beq.n	801cdf0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cdbc:	4b23      	ldr	r3, [pc, #140]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cdc6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cdc8:	4b20      	ldr	r3, [pc, #128]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdce:	4a1f      	ldr	r2, [pc, #124]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cdd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cdd8:	4b1c      	ldr	r3, [pc, #112]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdde:	4a1b      	ldr	r2, [pc, #108]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cde0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cde4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801cde8:	4a18      	ldr	r2, [pc, #96]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cdea:	697b      	ldr	r3, [r7, #20]
 801cdec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cdf0:	697b      	ldr	r3, [r7, #20]
 801cdf2:	f003 0301 	and.w	r3, r3, #1
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d016      	beq.n	801ce28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cdfa:	f7fb ffcb 	bl	8018d94 <HAL_GetTick>
 801cdfe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ce00:	e00b      	b.n	801ce1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ce02:	f7fb ffc7 	bl	8018d94 <HAL_GetTick>
 801ce06:	4602      	mov	r2, r0
 801ce08:	68fb      	ldr	r3, [r7, #12]
 801ce0a:	1ad3      	subs	r3, r2, r3
 801ce0c:	f241 3288 	movw	r2, #5000	; 0x1388
 801ce10:	4293      	cmp	r3, r2
 801ce12:	d902      	bls.n	801ce1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801ce14:	2303      	movs	r3, #3
 801ce16:	74fb      	strb	r3, [r7, #19]
            break;
 801ce18:	e006      	b.n	801ce28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801ce1a:	4b0c      	ldr	r3, [pc, #48]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ce1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce20:	f003 0302 	and.w	r3, r3, #2
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d0ec      	beq.n	801ce02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801ce28:	7cfb      	ldrb	r3, [r7, #19]
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d10b      	bne.n	801ce46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ce2e:	4b07      	ldr	r3, [pc, #28]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ce30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ce3c:	4903      	ldr	r1, [pc, #12]	; (801ce4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801ce3e:	4313      	orrs	r3, r2
 801ce40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801ce44:	e008      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801ce46:	7cfb      	ldrb	r3, [r7, #19]
 801ce48:	74bb      	strb	r3, [r7, #18]
 801ce4a:	e005      	b.n	801ce58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801ce4c:	40021000 	.word	0x40021000
 801ce50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce54:	7cfb      	ldrb	r3, [r7, #19]
 801ce56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801ce58:	7c7b      	ldrb	r3, [r7, #17]
 801ce5a:	2b01      	cmp	r3, #1
 801ce5c:	d105      	bne.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ce5e:	4ba7      	ldr	r3, [pc, #668]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce62:	4aa6      	ldr	r2, [pc, #664]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ce68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801ce6a:	687b      	ldr	r3, [r7, #4]
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	f003 0301 	and.w	r3, r3, #1
 801ce72:	2b00      	cmp	r3, #0
 801ce74:	d00a      	beq.n	801ce8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801ce76:	4ba1      	ldr	r3, [pc, #644]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce7c:	f023 0203 	bic.w	r2, r3, #3
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	685b      	ldr	r3, [r3, #4]
 801ce84:	499d      	ldr	r1, [pc, #628]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce86:	4313      	orrs	r3, r2
 801ce88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	681b      	ldr	r3, [r3, #0]
 801ce90:	f003 0302 	and.w	r3, r3, #2
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d00a      	beq.n	801ceae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ce98:	4b98      	ldr	r3, [pc, #608]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce9e:	f023 020c 	bic.w	r2, r3, #12
 801cea2:	687b      	ldr	r3, [r7, #4]
 801cea4:	689b      	ldr	r3, [r3, #8]
 801cea6:	4995      	ldr	r1, [pc, #596]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cea8:	4313      	orrs	r3, r2
 801ceaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	f003 0304 	and.w	r3, r3, #4
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d00a      	beq.n	801ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801ceba:	4b90      	ldr	r3, [pc, #576]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cec0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	68db      	ldr	r3, [r3, #12]
 801cec8:	498c      	ldr	r1, [pc, #560]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceca:	4313      	orrs	r3, r2
 801cecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	681b      	ldr	r3, [r3, #0]
 801ced4:	f003 0308 	and.w	r3, r3, #8
 801ced8:	2b00      	cmp	r3, #0
 801ceda:	d00a      	beq.n	801cef2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801cedc:	4b87      	ldr	r3, [pc, #540]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cee2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	691b      	ldr	r3, [r3, #16]
 801ceea:	4984      	ldr	r1, [pc, #528]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceec:	4313      	orrs	r3, r2
 801ceee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	681b      	ldr	r3, [r3, #0]
 801cef6:	f003 0310 	and.w	r3, r3, #16
 801cefa:	2b00      	cmp	r3, #0
 801cefc:	d00a      	beq.n	801cf14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cefe:	4b7f      	ldr	r3, [pc, #508]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	695b      	ldr	r3, [r3, #20]
 801cf0c:	497b      	ldr	r1, [pc, #492]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf0e:	4313      	orrs	r3, r2
 801cf10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	f003 0320 	and.w	r3, r3, #32
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d00a      	beq.n	801cf36 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cf20:	4b76      	ldr	r3, [pc, #472]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	699b      	ldr	r3, [r3, #24]
 801cf2e:	4973      	ldr	r1, [pc, #460]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf30:	4313      	orrs	r3, r2
 801cf32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d00a      	beq.n	801cf58 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cf42:	4b6e      	ldr	r3, [pc, #440]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	69db      	ldr	r3, [r3, #28]
 801cf50:	496a      	ldr	r1, [pc, #424]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf52:	4313      	orrs	r3, r2
 801cf54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cf60:	2b00      	cmp	r3, #0
 801cf62:	d00a      	beq.n	801cf7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cf64:	4b65      	ldr	r3, [pc, #404]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	6a1b      	ldr	r3, [r3, #32]
 801cf72:	4962      	ldr	r1, [pc, #392]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf74:	4313      	orrs	r3, r2
 801cf76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	681b      	ldr	r3, [r3, #0]
 801cf7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cf82:	2b00      	cmp	r3, #0
 801cf84:	d00a      	beq.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cf86:	4b5d      	ldr	r3, [pc, #372]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cf90:	687b      	ldr	r3, [r7, #4]
 801cf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf94:	4959      	ldr	r1, [pc, #356]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf96:	4313      	orrs	r3, r2
 801cf98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cf9c:	687b      	ldr	r3, [r7, #4]
 801cf9e:	681b      	ldr	r3, [r3, #0]
 801cfa0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cfa4:	2b00      	cmp	r3, #0
 801cfa6:	d00a      	beq.n	801cfbe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cfa8:	4b54      	ldr	r3, [pc, #336]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cfb6:	4951      	ldr	r1, [pc, #324]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfb8:	4313      	orrs	r3, r2
 801cfba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d015      	beq.n	801cff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cfca:	4b4c      	ldr	r3, [pc, #304]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cfd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfd8:	4948      	ldr	r1, [pc, #288]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfda:	4313      	orrs	r3, r2
 801cfdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801cfe0:	687b      	ldr	r3, [r7, #4]
 801cfe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cfe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cfe8:	d105      	bne.n	801cff6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cfea:	4b44      	ldr	r3, [pc, #272]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cfec:	68db      	ldr	r3, [r3, #12]
 801cfee:	4a43      	ldr	r2, [pc, #268]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cff4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	681b      	ldr	r3, [r3, #0]
 801cffa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cffe:	2b00      	cmp	r3, #0
 801d000:	d015      	beq.n	801d02e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d002:	4b3e      	ldr	r3, [pc, #248]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d010:	493a      	ldr	r1, [pc, #232]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d012:	4313      	orrs	r3, r2
 801d014:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801d018:	687b      	ldr	r3, [r7, #4]
 801d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d01c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d020:	d105      	bne.n	801d02e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d022:	4b36      	ldr	r3, [pc, #216]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d024:	68db      	ldr	r3, [r3, #12]
 801d026:	4a35      	ldr	r2, [pc, #212]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d028:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d02c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d036:	2b00      	cmp	r3, #0
 801d038:	d015      	beq.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d03a:	4b30      	ldr	r3, [pc, #192]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d040:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d044:	687b      	ldr	r3, [r7, #4]
 801d046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d048:	492c      	ldr	r1, [pc, #176]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d04a:	4313      	orrs	r3, r2
 801d04c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d058:	d105      	bne.n	801d066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d05a:	4b28      	ldr	r3, [pc, #160]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d05c:	68db      	ldr	r3, [r3, #12]
 801d05e:	4a27      	ldr	r2, [pc, #156]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d060:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d064:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d015      	beq.n	801d09e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d072:	4b22      	ldr	r3, [pc, #136]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d078:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d080:	491e      	ldr	r1, [pc, #120]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d082:	4313      	orrs	r3, r2
 801d084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d08c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d090:	d105      	bne.n	801d09e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d092:	4b1a      	ldr	r3, [pc, #104]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d094:	68db      	ldr	r3, [r3, #12]
 801d096:	4a19      	ldr	r2, [pc, #100]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d09c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	681b      	ldr	r3, [r3, #0]
 801d0a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	d015      	beq.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d0aa:	4b14      	ldr	r3, [pc, #80]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d0ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0b0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d0b8:	4910      	ldr	r1, [pc, #64]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d0ba:	4313      	orrs	r3, r2
 801d0bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d0c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d0c8:	d105      	bne.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d0ca:	4b0c      	ldr	r3, [pc, #48]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d0cc:	68db      	ldr	r3, [r3, #12]
 801d0ce:	4a0b      	ldr	r2, [pc, #44]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d0d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d0d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d018      	beq.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801d0e2:	4b06      	ldr	r3, [pc, #24]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d0e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d0ec:	687b      	ldr	r3, [r7, #4]
 801d0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0f0:	4902      	ldr	r1, [pc, #8]	; (801d0fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d0f2:	4313      	orrs	r3, r2
 801d0f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	e001      	b.n	801d100 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801d0fc:	40021000 	.word	0x40021000
 801d100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d106:	d105      	bne.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d108:	4b21      	ldr	r3, [pc, #132]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d10a:	68db      	ldr	r3, [r3, #12]
 801d10c:	4a20      	ldr	r2, [pc, #128]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d10e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d112:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801d114:	687b      	ldr	r3, [r7, #4]
 801d116:	681b      	ldr	r3, [r3, #0]
 801d118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d015      	beq.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801d120:	4b1b      	ldr	r3, [pc, #108]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d126:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801d12a:	687b      	ldr	r3, [r7, #4]
 801d12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d12e:	4918      	ldr	r1, [pc, #96]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d130:	4313      	orrs	r3, r2
 801d132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d13a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d13e:	d105      	bne.n	801d14c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d140:	4b13      	ldr	r3, [pc, #76]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d142:	68db      	ldr	r3, [r3, #12]
 801d144:	4a12      	ldr	r2, [pc, #72]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d14a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d154:	2b00      	cmp	r3, #0
 801d156:	d015      	beq.n	801d184 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d158:	4b0d      	ldr	r3, [pc, #52]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d15a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d15e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d162:	687b      	ldr	r3, [r7, #4]
 801d164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d166:	490a      	ldr	r1, [pc, #40]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d168:	4313      	orrs	r3, r2
 801d16a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d176:	d105      	bne.n	801d184 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d178:	4b05      	ldr	r3, [pc, #20]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d17a:	68db      	ldr	r3, [r3, #12]
 801d17c:	4a04      	ldr	r2, [pc, #16]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d17e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d182:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801d184:	7cbb      	ldrb	r3, [r7, #18]
}
 801d186:	4618      	mov	r0, r3
 801d188:	3718      	adds	r7, #24
 801d18a:	46bd      	mov	sp, r7
 801d18c:	bd80      	pop	{r7, pc}
 801d18e:	bf00      	nop
 801d190:	40021000 	.word	0x40021000

0801d194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d194:	b580      	push	{r7, lr}
 801d196:	b084      	sub	sp, #16
 801d198:	af00      	add	r7, sp, #0
 801d19a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d19c:	687b      	ldr	r3, [r7, #4]
 801d19e:	2b00      	cmp	r3, #0
 801d1a0:	d101      	bne.n	801d1a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d1a2:	2301      	movs	r3, #1
 801d1a4:	e09d      	b.n	801d2e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d108      	bne.n	801d1c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d1ae:	687b      	ldr	r3, [r7, #4]
 801d1b0:	685b      	ldr	r3, [r3, #4]
 801d1b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d1b6:	d009      	beq.n	801d1cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	2200      	movs	r2, #0
 801d1bc:	61da      	str	r2, [r3, #28]
 801d1be:	e005      	b.n	801d1cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	2200      	movs	r2, #0
 801d1c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	2200      	movs	r2, #0
 801d1d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d1d2:	687b      	ldr	r3, [r7, #4]
 801d1d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d1d8:	b2db      	uxtb	r3, r3
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d106      	bne.n	801d1ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	2200      	movs	r2, #0
 801d1e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d1e6:	6878      	ldr	r0, [r7, #4]
 801d1e8:	f7fa f8f4 	bl	80173d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d1ec:	687b      	ldr	r3, [r7, #4]
 801d1ee:	2202      	movs	r2, #2
 801d1f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	681a      	ldr	r2, [r3, #0]
 801d1fa:	687b      	ldr	r3, [r7, #4]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d202:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	68db      	ldr	r3, [r3, #12]
 801d208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d20c:	d902      	bls.n	801d214 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d20e:	2300      	movs	r3, #0
 801d210:	60fb      	str	r3, [r7, #12]
 801d212:	e002      	b.n	801d21a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d218:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d21a:	687b      	ldr	r3, [r7, #4]
 801d21c:	68db      	ldr	r3, [r3, #12]
 801d21e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801d222:	d007      	beq.n	801d234 <HAL_SPI_Init+0xa0>
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	68db      	ldr	r3, [r3, #12]
 801d228:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d22c:	d002      	beq.n	801d234 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d22e:	687b      	ldr	r3, [r7, #4]
 801d230:	2200      	movs	r2, #0
 801d232:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	685b      	ldr	r3, [r3, #4]
 801d238:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	689b      	ldr	r3, [r3, #8]
 801d240:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801d244:	431a      	orrs	r2, r3
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	691b      	ldr	r3, [r3, #16]
 801d24a:	f003 0302 	and.w	r3, r3, #2
 801d24e:	431a      	orrs	r2, r3
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	695b      	ldr	r3, [r3, #20]
 801d254:	f003 0301 	and.w	r3, r3, #1
 801d258:	431a      	orrs	r2, r3
 801d25a:	687b      	ldr	r3, [r7, #4]
 801d25c:	699b      	ldr	r3, [r3, #24]
 801d25e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d262:	431a      	orrs	r2, r3
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	69db      	ldr	r3, [r3, #28]
 801d268:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801d26c:	431a      	orrs	r2, r3
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	6a1b      	ldr	r3, [r3, #32]
 801d272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d276:	ea42 0103 	orr.w	r1, r2, r3
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d27e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	430a      	orrs	r2, r1
 801d288:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801d28a:	687b      	ldr	r3, [r7, #4]
 801d28c:	699b      	ldr	r3, [r3, #24]
 801d28e:	0c1b      	lsrs	r3, r3, #16
 801d290:	f003 0204 	and.w	r2, r3, #4
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d298:	f003 0310 	and.w	r3, r3, #16
 801d29c:	431a      	orrs	r2, r3
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d2a2:	f003 0308 	and.w	r3, r3, #8
 801d2a6:	431a      	orrs	r2, r3
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	68db      	ldr	r3, [r3, #12]
 801d2ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d2b0:	ea42 0103 	orr.w	r1, r2, r3
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	681b      	ldr	r3, [r3, #0]
 801d2be:	430a      	orrs	r2, r1
 801d2c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	69da      	ldr	r2, [r3, #28]
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	681b      	ldr	r3, [r3, #0]
 801d2cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d2d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	2200      	movs	r2, #0
 801d2d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	2201      	movs	r2, #1
 801d2dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801d2e0:	2300      	movs	r3, #0
}
 801d2e2:	4618      	mov	r0, r3
 801d2e4:	3710      	adds	r7, #16
 801d2e6:	46bd      	mov	sp, r7
 801d2e8:	bd80      	pop	{r7, pc}

0801d2ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d2ea:	b580      	push	{r7, lr}
 801d2ec:	b088      	sub	sp, #32
 801d2ee:	af00      	add	r7, sp, #0
 801d2f0:	60f8      	str	r0, [r7, #12]
 801d2f2:	60b9      	str	r1, [r7, #8]
 801d2f4:	603b      	str	r3, [r7, #0]
 801d2f6:	4613      	mov	r3, r2
 801d2f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d2fe:	68fb      	ldr	r3, [r7, #12]
 801d300:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d304:	2b01      	cmp	r3, #1
 801d306:	d101      	bne.n	801d30c <HAL_SPI_Transmit+0x22>
 801d308:	2302      	movs	r3, #2
 801d30a:	e158      	b.n	801d5be <HAL_SPI_Transmit+0x2d4>
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	2201      	movs	r2, #1
 801d310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d314:	f7fb fd3e 	bl	8018d94 <HAL_GetTick>
 801d318:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801d31a:	88fb      	ldrh	r3, [r7, #6]
 801d31c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d31e:	68fb      	ldr	r3, [r7, #12]
 801d320:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d324:	b2db      	uxtb	r3, r3
 801d326:	2b01      	cmp	r3, #1
 801d328:	d002      	beq.n	801d330 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801d32a:	2302      	movs	r3, #2
 801d32c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d32e:	e13d      	b.n	801d5ac <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801d330:	68bb      	ldr	r3, [r7, #8]
 801d332:	2b00      	cmp	r3, #0
 801d334:	d002      	beq.n	801d33c <HAL_SPI_Transmit+0x52>
 801d336:	88fb      	ldrh	r3, [r7, #6]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d102      	bne.n	801d342 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801d33c:	2301      	movs	r3, #1
 801d33e:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d340:	e134      	b.n	801d5ac <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d342:	68fb      	ldr	r3, [r7, #12]
 801d344:	2203      	movs	r2, #3
 801d346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	2200      	movs	r2, #0
 801d34e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801d350:	68fb      	ldr	r3, [r7, #12]
 801d352:	68ba      	ldr	r2, [r7, #8]
 801d354:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801d356:	68fb      	ldr	r3, [r7, #12]
 801d358:	88fa      	ldrh	r2, [r7, #6]
 801d35a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	88fa      	ldrh	r2, [r7, #6]
 801d360:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	2200      	movs	r2, #0
 801d366:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801d368:	68fb      	ldr	r3, [r7, #12]
 801d36a:	2200      	movs	r2, #0
 801d36c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801d370:	68fb      	ldr	r3, [r7, #12]
 801d372:	2200      	movs	r2, #0
 801d374:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801d378:	68fb      	ldr	r3, [r7, #12]
 801d37a:	2200      	movs	r2, #0
 801d37c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	2200      	movs	r2, #0
 801d382:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d384:	68fb      	ldr	r3, [r7, #12]
 801d386:	689b      	ldr	r3, [r3, #8]
 801d388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d38c:	d10f      	bne.n	801d3ae <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d38e:	68fb      	ldr	r3, [r7, #12]
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	681a      	ldr	r2, [r3, #0]
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d39c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801d39e:	68fb      	ldr	r3, [r7, #12]
 801d3a0:	681b      	ldr	r3, [r3, #0]
 801d3a2:	681a      	ldr	r2, [r3, #0]
 801d3a4:	68fb      	ldr	r3, [r7, #12]
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d3ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d3ae:	68fb      	ldr	r3, [r7, #12]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d3b8:	2b40      	cmp	r3, #64	; 0x40
 801d3ba:	d007      	beq.n	801d3cc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d3bc:	68fb      	ldr	r3, [r7, #12]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	681a      	ldr	r2, [r3, #0]
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d3ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	68db      	ldr	r3, [r3, #12]
 801d3d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d3d4:	d94b      	bls.n	801d46e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d3d6:	68fb      	ldr	r3, [r7, #12]
 801d3d8:	685b      	ldr	r3, [r3, #4]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d002      	beq.n	801d3e4 <HAL_SPI_Transmit+0xfa>
 801d3de:	8afb      	ldrh	r3, [r7, #22]
 801d3e0:	2b01      	cmp	r3, #1
 801d3e2:	d13e      	bne.n	801d462 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3e8:	881a      	ldrh	r2, [r3, #0]
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d3f4:	1c9a      	adds	r2, r3, #2
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d3fa:	68fb      	ldr	r3, [r7, #12]
 801d3fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d3fe:	b29b      	uxth	r3, r3
 801d400:	3b01      	subs	r3, #1
 801d402:	b29a      	uxth	r2, r3
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801d408:	e02b      	b.n	801d462 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d40a:	68fb      	ldr	r3, [r7, #12]
 801d40c:	681b      	ldr	r3, [r3, #0]
 801d40e:	689b      	ldr	r3, [r3, #8]
 801d410:	f003 0302 	and.w	r3, r3, #2
 801d414:	2b02      	cmp	r3, #2
 801d416:	d112      	bne.n	801d43e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d418:	68fb      	ldr	r3, [r7, #12]
 801d41a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d41c:	881a      	ldrh	r2, [r3, #0]
 801d41e:	68fb      	ldr	r3, [r7, #12]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d428:	1c9a      	adds	r2, r3, #2
 801d42a:	68fb      	ldr	r3, [r7, #12]
 801d42c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d432:	b29b      	uxth	r3, r3
 801d434:	3b01      	subs	r3, #1
 801d436:	b29a      	uxth	r2, r3
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d43c:	e011      	b.n	801d462 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d43e:	f7fb fca9 	bl	8018d94 <HAL_GetTick>
 801d442:	4602      	mov	r2, r0
 801d444:	69bb      	ldr	r3, [r7, #24]
 801d446:	1ad3      	subs	r3, r2, r3
 801d448:	683a      	ldr	r2, [r7, #0]
 801d44a:	429a      	cmp	r2, r3
 801d44c:	d803      	bhi.n	801d456 <HAL_SPI_Transmit+0x16c>
 801d44e:	683b      	ldr	r3, [r7, #0]
 801d450:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d454:	d102      	bne.n	801d45c <HAL_SPI_Transmit+0x172>
 801d456:	683b      	ldr	r3, [r7, #0]
 801d458:	2b00      	cmp	r3, #0
 801d45a:	d102      	bne.n	801d462 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801d45c:	2303      	movs	r3, #3
 801d45e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d460:	e0a4      	b.n	801d5ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d466:	b29b      	uxth	r3, r3
 801d468:	2b00      	cmp	r3, #0
 801d46a:	d1ce      	bne.n	801d40a <HAL_SPI_Transmit+0x120>
 801d46c:	e07c      	b.n	801d568 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	685b      	ldr	r3, [r3, #4]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d002      	beq.n	801d47c <HAL_SPI_Transmit+0x192>
 801d476:	8afb      	ldrh	r3, [r7, #22]
 801d478:	2b01      	cmp	r3, #1
 801d47a:	d170      	bne.n	801d55e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d47c:	68fb      	ldr	r3, [r7, #12]
 801d47e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d480:	b29b      	uxth	r3, r3
 801d482:	2b01      	cmp	r3, #1
 801d484:	d912      	bls.n	801d4ac <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d486:	68fb      	ldr	r3, [r7, #12]
 801d488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d48a:	881a      	ldrh	r2, [r3, #0]
 801d48c:	68fb      	ldr	r3, [r7, #12]
 801d48e:	681b      	ldr	r3, [r3, #0]
 801d490:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d492:	68fb      	ldr	r3, [r7, #12]
 801d494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d496:	1c9a      	adds	r2, r3, #2
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d49c:	68fb      	ldr	r3, [r7, #12]
 801d49e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	3b02      	subs	r3, #2
 801d4a4:	b29a      	uxth	r2, r3
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d4aa:	e058      	b.n	801d55e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	330c      	adds	r3, #12
 801d4b6:	7812      	ldrb	r2, [r2, #0]
 801d4b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d4ba:	68fb      	ldr	r3, [r7, #12]
 801d4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4be:	1c5a      	adds	r2, r3, #1
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4c8:	b29b      	uxth	r3, r3
 801d4ca:	3b01      	subs	r3, #1
 801d4cc:	b29a      	uxth	r2, r3
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d4d2:	e044      	b.n	801d55e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	689b      	ldr	r3, [r3, #8]
 801d4da:	f003 0302 	and.w	r3, r3, #2
 801d4de:	2b02      	cmp	r3, #2
 801d4e0:	d12b      	bne.n	801d53a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d4e2:	68fb      	ldr	r3, [r7, #12]
 801d4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d4e6:	b29b      	uxth	r3, r3
 801d4e8:	2b01      	cmp	r3, #1
 801d4ea:	d912      	bls.n	801d512 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4f0:	881a      	ldrh	r2, [r3, #0]
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d4f8:	68fb      	ldr	r3, [r7, #12]
 801d4fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4fc:	1c9a      	adds	r2, r3, #2
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d502:	68fb      	ldr	r3, [r7, #12]
 801d504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d506:	b29b      	uxth	r3, r3
 801d508:	3b02      	subs	r3, #2
 801d50a:	b29a      	uxth	r2, r3
 801d50c:	68fb      	ldr	r3, [r7, #12]
 801d50e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d510:	e025      	b.n	801d55e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d512:	68fb      	ldr	r3, [r7, #12]
 801d514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d516:	68fb      	ldr	r3, [r7, #12]
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	330c      	adds	r3, #12
 801d51c:	7812      	ldrb	r2, [r2, #0]
 801d51e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d524:	1c5a      	adds	r2, r3, #1
 801d526:	68fb      	ldr	r3, [r7, #12]
 801d528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d52a:	68fb      	ldr	r3, [r7, #12]
 801d52c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d52e:	b29b      	uxth	r3, r3
 801d530:	3b01      	subs	r3, #1
 801d532:	b29a      	uxth	r2, r3
 801d534:	68fb      	ldr	r3, [r7, #12]
 801d536:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d538:	e011      	b.n	801d55e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d53a:	f7fb fc2b 	bl	8018d94 <HAL_GetTick>
 801d53e:	4602      	mov	r2, r0
 801d540:	69bb      	ldr	r3, [r7, #24]
 801d542:	1ad3      	subs	r3, r2, r3
 801d544:	683a      	ldr	r2, [r7, #0]
 801d546:	429a      	cmp	r2, r3
 801d548:	d803      	bhi.n	801d552 <HAL_SPI_Transmit+0x268>
 801d54a:	683b      	ldr	r3, [r7, #0]
 801d54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d550:	d102      	bne.n	801d558 <HAL_SPI_Transmit+0x26e>
 801d552:	683b      	ldr	r3, [r7, #0]
 801d554:	2b00      	cmp	r3, #0
 801d556:	d102      	bne.n	801d55e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d558:	2303      	movs	r3, #3
 801d55a:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d55c:	e026      	b.n	801d5ac <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d562:	b29b      	uxth	r3, r3
 801d564:	2b00      	cmp	r3, #0
 801d566:	d1b5      	bne.n	801d4d4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d568:	69ba      	ldr	r2, [r7, #24]
 801d56a:	6839      	ldr	r1, [r7, #0]
 801d56c:	68f8      	ldr	r0, [r7, #12]
 801d56e:	f000 fce3 	bl	801df38 <SPI_EndRxTxTransaction>
 801d572:	4603      	mov	r3, r0
 801d574:	2b00      	cmp	r3, #0
 801d576:	d002      	beq.n	801d57e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d578:	68fb      	ldr	r3, [r7, #12]
 801d57a:	2220      	movs	r2, #32
 801d57c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	689b      	ldr	r3, [r3, #8]
 801d582:	2b00      	cmp	r3, #0
 801d584:	d10a      	bne.n	801d59c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d586:	2300      	movs	r3, #0
 801d588:	613b      	str	r3, [r7, #16]
 801d58a:	68fb      	ldr	r3, [r7, #12]
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	68db      	ldr	r3, [r3, #12]
 801d590:	613b      	str	r3, [r7, #16]
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	681b      	ldr	r3, [r3, #0]
 801d596:	689b      	ldr	r3, [r3, #8]
 801d598:	613b      	str	r3, [r7, #16]
 801d59a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d59c:	68fb      	ldr	r3, [r7, #12]
 801d59e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d002      	beq.n	801d5aa <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d5a4:	2301      	movs	r3, #1
 801d5a6:	77fb      	strb	r3, [r7, #31]
 801d5a8:	e000      	b.n	801d5ac <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d5aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d5ac:	68fb      	ldr	r3, [r7, #12]
 801d5ae:	2201      	movs	r2, #1
 801d5b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	2200      	movs	r2, #0
 801d5b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d5bc:	7ffb      	ldrb	r3, [r7, #31]
}
 801d5be:	4618      	mov	r0, r3
 801d5c0:	3720      	adds	r7, #32
 801d5c2:	46bd      	mov	sp, r7
 801d5c4:	bd80      	pop	{r7, pc}

0801d5c6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d5c6:	b580      	push	{r7, lr}
 801d5c8:	b088      	sub	sp, #32
 801d5ca:	af02      	add	r7, sp, #8
 801d5cc:	60f8      	str	r0, [r7, #12]
 801d5ce:	60b9      	str	r1, [r7, #8]
 801d5d0:	603b      	str	r3, [r7, #0]
 801d5d2:	4613      	mov	r3, r2
 801d5d4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	685b      	ldr	r3, [r3, #4]
 801d5de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d5e2:	d112      	bne.n	801d60a <HAL_SPI_Receive+0x44>
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	689b      	ldr	r3, [r3, #8]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	d10e      	bne.n	801d60a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d5ec:	68fb      	ldr	r3, [r7, #12]
 801d5ee:	2204      	movs	r2, #4
 801d5f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d5f4:	88fa      	ldrh	r2, [r7, #6]
 801d5f6:	683b      	ldr	r3, [r7, #0]
 801d5f8:	9300      	str	r3, [sp, #0]
 801d5fa:	4613      	mov	r3, r2
 801d5fc:	68ba      	ldr	r2, [r7, #8]
 801d5fe:	68b9      	ldr	r1, [r7, #8]
 801d600:	68f8      	ldr	r0, [r7, #12]
 801d602:	f000 f910 	bl	801d826 <HAL_SPI_TransmitReceive>
 801d606:	4603      	mov	r3, r0
 801d608:	e109      	b.n	801d81e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d610:	2b01      	cmp	r3, #1
 801d612:	d101      	bne.n	801d618 <HAL_SPI_Receive+0x52>
 801d614:	2302      	movs	r3, #2
 801d616:	e102      	b.n	801d81e <HAL_SPI_Receive+0x258>
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	2201      	movs	r2, #1
 801d61c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d620:	f7fb fbb8 	bl	8018d94 <HAL_GetTick>
 801d624:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d62c:	b2db      	uxtb	r3, r3
 801d62e:	2b01      	cmp	r3, #1
 801d630:	d002      	beq.n	801d638 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d632:	2302      	movs	r3, #2
 801d634:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d636:	e0e9      	b.n	801d80c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d638:	68bb      	ldr	r3, [r7, #8]
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d002      	beq.n	801d644 <HAL_SPI_Receive+0x7e>
 801d63e:	88fb      	ldrh	r3, [r7, #6]
 801d640:	2b00      	cmp	r3, #0
 801d642:	d102      	bne.n	801d64a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d644:	2301      	movs	r3, #1
 801d646:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d648:	e0e0      	b.n	801d80c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	2204      	movs	r2, #4
 801d64e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d652:	68fb      	ldr	r3, [r7, #12]
 801d654:	2200      	movs	r2, #0
 801d656:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d658:	68fb      	ldr	r3, [r7, #12]
 801d65a:	68ba      	ldr	r2, [r7, #8]
 801d65c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d65e:	68fb      	ldr	r3, [r7, #12]
 801d660:	88fa      	ldrh	r2, [r7, #6]
 801d662:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	88fa      	ldrh	r2, [r7, #6]
 801d66a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d66e:	68fb      	ldr	r3, [r7, #12]
 801d670:	2200      	movs	r2, #0
 801d672:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d674:	68fb      	ldr	r3, [r7, #12]
 801d676:	2200      	movs	r2, #0
 801d678:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	2200      	movs	r2, #0
 801d67e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d680:	68fb      	ldr	r3, [r7, #12]
 801d682:	2200      	movs	r2, #0
 801d684:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d686:	68fb      	ldr	r3, [r7, #12]
 801d688:	2200      	movs	r2, #0
 801d68a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d68c:	68fb      	ldr	r3, [r7, #12]
 801d68e:	68db      	ldr	r3, [r3, #12]
 801d690:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d694:	d908      	bls.n	801d6a8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d696:	68fb      	ldr	r3, [r7, #12]
 801d698:	681b      	ldr	r3, [r3, #0]
 801d69a:	685a      	ldr	r2, [r3, #4]
 801d69c:	68fb      	ldr	r3, [r7, #12]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d6a4:	605a      	str	r2, [r3, #4]
 801d6a6:	e007      	b.n	801d6b8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d6a8:	68fb      	ldr	r3, [r7, #12]
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	685a      	ldr	r2, [r3, #4]
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	681b      	ldr	r3, [r3, #0]
 801d6b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d6b6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d6b8:	68fb      	ldr	r3, [r7, #12]
 801d6ba:	689b      	ldr	r3, [r3, #8]
 801d6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d6c0:	d10f      	bne.n	801d6e2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	681b      	ldr	r3, [r3, #0]
 801d6c6:	681a      	ldr	r2, [r3, #0]
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d6d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d6d2:	68fb      	ldr	r3, [r7, #12]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	681a      	ldr	r2, [r3, #0]
 801d6d8:	68fb      	ldr	r3, [r7, #12]
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d6e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d6e2:	68fb      	ldr	r3, [r7, #12]
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d6ec:	2b40      	cmp	r3, #64	; 0x40
 801d6ee:	d007      	beq.n	801d700 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d6f0:	68fb      	ldr	r3, [r7, #12]
 801d6f2:	681b      	ldr	r3, [r3, #0]
 801d6f4:	681a      	ldr	r2, [r3, #0]
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d6fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	68db      	ldr	r3, [r3, #12]
 801d704:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d708:	d867      	bhi.n	801d7da <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d70a:	e030      	b.n	801d76e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d70c:	68fb      	ldr	r3, [r7, #12]
 801d70e:	681b      	ldr	r3, [r3, #0]
 801d710:	689b      	ldr	r3, [r3, #8]
 801d712:	f003 0301 	and.w	r3, r3, #1
 801d716:	2b01      	cmp	r3, #1
 801d718:	d117      	bne.n	801d74a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d71a:	68fb      	ldr	r3, [r7, #12]
 801d71c:	681b      	ldr	r3, [r3, #0]
 801d71e:	f103 020c 	add.w	r2, r3, #12
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d726:	7812      	ldrb	r2, [r2, #0]
 801d728:	b2d2      	uxtb	r2, r2
 801d72a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d72c:	68fb      	ldr	r3, [r7, #12]
 801d72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d730:	1c5a      	adds	r2, r3, #1
 801d732:	68fb      	ldr	r3, [r7, #12]
 801d734:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d736:	68fb      	ldr	r3, [r7, #12]
 801d738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d73c:	b29b      	uxth	r3, r3
 801d73e:	3b01      	subs	r3, #1
 801d740:	b29a      	uxth	r2, r3
 801d742:	68fb      	ldr	r3, [r7, #12]
 801d744:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d748:	e011      	b.n	801d76e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d74a:	f7fb fb23 	bl	8018d94 <HAL_GetTick>
 801d74e:	4602      	mov	r2, r0
 801d750:	693b      	ldr	r3, [r7, #16]
 801d752:	1ad3      	subs	r3, r2, r3
 801d754:	683a      	ldr	r2, [r7, #0]
 801d756:	429a      	cmp	r2, r3
 801d758:	d803      	bhi.n	801d762 <HAL_SPI_Receive+0x19c>
 801d75a:	683b      	ldr	r3, [r7, #0]
 801d75c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d760:	d102      	bne.n	801d768 <HAL_SPI_Receive+0x1a2>
 801d762:	683b      	ldr	r3, [r7, #0]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d102      	bne.n	801d76e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d768:	2303      	movs	r3, #3
 801d76a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d76c:	e04e      	b.n	801d80c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d774:	b29b      	uxth	r3, r3
 801d776:	2b00      	cmp	r3, #0
 801d778:	d1c8      	bne.n	801d70c <HAL_SPI_Receive+0x146>
 801d77a:	e034      	b.n	801d7e6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d77c:	68fb      	ldr	r3, [r7, #12]
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	689b      	ldr	r3, [r3, #8]
 801d782:	f003 0301 	and.w	r3, r3, #1
 801d786:	2b01      	cmp	r3, #1
 801d788:	d115      	bne.n	801d7b6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d78a:	68fb      	ldr	r3, [r7, #12]
 801d78c:	681b      	ldr	r3, [r3, #0]
 801d78e:	68da      	ldr	r2, [r3, #12]
 801d790:	68fb      	ldr	r3, [r7, #12]
 801d792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d794:	b292      	uxth	r2, r2
 801d796:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d798:	68fb      	ldr	r3, [r7, #12]
 801d79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d79c:	1c9a      	adds	r2, r3, #2
 801d79e:	68fb      	ldr	r3, [r7, #12]
 801d7a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d7a8:	b29b      	uxth	r3, r3
 801d7aa:	3b01      	subs	r3, #1
 801d7ac:	b29a      	uxth	r2, r3
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d7b4:	e011      	b.n	801d7da <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d7b6:	f7fb faed 	bl	8018d94 <HAL_GetTick>
 801d7ba:	4602      	mov	r2, r0
 801d7bc:	693b      	ldr	r3, [r7, #16]
 801d7be:	1ad3      	subs	r3, r2, r3
 801d7c0:	683a      	ldr	r2, [r7, #0]
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d803      	bhi.n	801d7ce <HAL_SPI_Receive+0x208>
 801d7c6:	683b      	ldr	r3, [r7, #0]
 801d7c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d7cc:	d102      	bne.n	801d7d4 <HAL_SPI_Receive+0x20e>
 801d7ce:	683b      	ldr	r3, [r7, #0]
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d102      	bne.n	801d7da <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d7d4:	2303      	movs	r3, #3
 801d7d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d7d8:	e018      	b.n	801d80c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d7e0:	b29b      	uxth	r3, r3
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d1ca      	bne.n	801d77c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d7e6:	693a      	ldr	r2, [r7, #16]
 801d7e8:	6839      	ldr	r1, [r7, #0]
 801d7ea:	68f8      	ldr	r0, [r7, #12]
 801d7ec:	f000 fb4c 	bl	801de88 <SPI_EndRxTransaction>
 801d7f0:	4603      	mov	r3, r0
 801d7f2:	2b00      	cmp	r3, #0
 801d7f4:	d002      	beq.n	801d7fc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	2220      	movs	r2, #32
 801d7fa:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d7fc:	68fb      	ldr	r3, [r7, #12]
 801d7fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d800:	2b00      	cmp	r3, #0
 801d802:	d002      	beq.n	801d80a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d804:	2301      	movs	r3, #1
 801d806:	75fb      	strb	r3, [r7, #23]
 801d808:	e000      	b.n	801d80c <HAL_SPI_Receive+0x246>
  }

error :
 801d80a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	2201      	movs	r2, #1
 801d810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d814:	68fb      	ldr	r3, [r7, #12]
 801d816:	2200      	movs	r2, #0
 801d818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d81c:	7dfb      	ldrb	r3, [r7, #23]
}
 801d81e:	4618      	mov	r0, r3
 801d820:	3718      	adds	r7, #24
 801d822:	46bd      	mov	sp, r7
 801d824:	bd80      	pop	{r7, pc}

0801d826 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d826:	b580      	push	{r7, lr}
 801d828:	b08a      	sub	sp, #40	; 0x28
 801d82a:	af00      	add	r7, sp, #0
 801d82c:	60f8      	str	r0, [r7, #12]
 801d82e:	60b9      	str	r1, [r7, #8]
 801d830:	607a      	str	r2, [r7, #4]
 801d832:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d834:	2301      	movs	r3, #1
 801d836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d838:	2300      	movs	r3, #0
 801d83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d83e:	68fb      	ldr	r3, [r7, #12]
 801d840:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d844:	2b01      	cmp	r3, #1
 801d846:	d101      	bne.n	801d84c <HAL_SPI_TransmitReceive+0x26>
 801d848:	2302      	movs	r3, #2
 801d84a:	e1fb      	b.n	801dc44 <HAL_SPI_TransmitReceive+0x41e>
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	2201      	movs	r2, #1
 801d850:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d854:	f7fb fa9e 	bl	8018d94 <HAL_GetTick>
 801d858:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d860:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d862:	68fb      	ldr	r3, [r7, #12]
 801d864:	685b      	ldr	r3, [r3, #4]
 801d866:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d868:	887b      	ldrh	r3, [r7, #2]
 801d86a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d86c:	887b      	ldrh	r3, [r7, #2]
 801d86e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d870:	7efb      	ldrb	r3, [r7, #27]
 801d872:	2b01      	cmp	r3, #1
 801d874:	d00e      	beq.n	801d894 <HAL_SPI_TransmitReceive+0x6e>
 801d876:	697b      	ldr	r3, [r7, #20]
 801d878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d87c:	d106      	bne.n	801d88c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	689b      	ldr	r3, [r3, #8]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d102      	bne.n	801d88c <HAL_SPI_TransmitReceive+0x66>
 801d886:	7efb      	ldrb	r3, [r7, #27]
 801d888:	2b04      	cmp	r3, #4
 801d88a:	d003      	beq.n	801d894 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d88c:	2302      	movs	r3, #2
 801d88e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d892:	e1cd      	b.n	801dc30 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d894:	68bb      	ldr	r3, [r7, #8]
 801d896:	2b00      	cmp	r3, #0
 801d898:	d005      	beq.n	801d8a6 <HAL_SPI_TransmitReceive+0x80>
 801d89a:	687b      	ldr	r3, [r7, #4]
 801d89c:	2b00      	cmp	r3, #0
 801d89e:	d002      	beq.n	801d8a6 <HAL_SPI_TransmitReceive+0x80>
 801d8a0:	887b      	ldrh	r3, [r7, #2]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d103      	bne.n	801d8ae <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d8a6:	2301      	movs	r3, #1
 801d8a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d8ac:	e1c0      	b.n	801dc30 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d8ae:	68fb      	ldr	r3, [r7, #12]
 801d8b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d8b4:	b2db      	uxtb	r3, r3
 801d8b6:	2b04      	cmp	r3, #4
 801d8b8:	d003      	beq.n	801d8c2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d8ba:	68fb      	ldr	r3, [r7, #12]
 801d8bc:	2205      	movs	r2, #5
 801d8be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	687a      	ldr	r2, [r7, #4]
 801d8cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	887a      	ldrh	r2, [r7, #2]
 801d8d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	887a      	ldrh	r2, [r7, #2]
 801d8da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	68ba      	ldr	r2, [r7, #8]
 801d8e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d8e4:	68fb      	ldr	r3, [r7, #12]
 801d8e6:	887a      	ldrh	r2, [r7, #2]
 801d8e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	887a      	ldrh	r2, [r7, #2]
 801d8ee:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	2200      	movs	r2, #0
 801d8f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d8f6:	68fb      	ldr	r3, [r7, #12]
 801d8f8:	2200      	movs	r2, #0
 801d8fa:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d8fc:	68fb      	ldr	r3, [r7, #12]
 801d8fe:	68db      	ldr	r3, [r3, #12]
 801d900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d904:	d802      	bhi.n	801d90c <HAL_SPI_TransmitReceive+0xe6>
 801d906:	8a3b      	ldrh	r3, [r7, #16]
 801d908:	2b01      	cmp	r3, #1
 801d90a:	d908      	bls.n	801d91e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d90c:	68fb      	ldr	r3, [r7, #12]
 801d90e:	681b      	ldr	r3, [r3, #0]
 801d910:	685a      	ldr	r2, [r3, #4]
 801d912:	68fb      	ldr	r3, [r7, #12]
 801d914:	681b      	ldr	r3, [r3, #0]
 801d916:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d91a:	605a      	str	r2, [r3, #4]
 801d91c:	e007      	b.n	801d92e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	685a      	ldr	r2, [r3, #4]
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d92c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	681b      	ldr	r3, [r3, #0]
 801d934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d938:	2b40      	cmp	r3, #64	; 0x40
 801d93a:	d007      	beq.n	801d94c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d93c:	68fb      	ldr	r3, [r7, #12]
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	681a      	ldr	r2, [r3, #0]
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d94a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	68db      	ldr	r3, [r3, #12]
 801d950:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d954:	d97c      	bls.n	801da50 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	685b      	ldr	r3, [r3, #4]
 801d95a:	2b00      	cmp	r3, #0
 801d95c:	d002      	beq.n	801d964 <HAL_SPI_TransmitReceive+0x13e>
 801d95e:	8a7b      	ldrh	r3, [r7, #18]
 801d960:	2b01      	cmp	r3, #1
 801d962:	d169      	bne.n	801da38 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d968:	881a      	ldrh	r2, [r3, #0]
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d974:	1c9a      	adds	r2, r3, #2
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d97e:	b29b      	uxth	r3, r3
 801d980:	3b01      	subs	r3, #1
 801d982:	b29a      	uxth	r2, r3
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d988:	e056      	b.n	801da38 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d98a:	68fb      	ldr	r3, [r7, #12]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	689b      	ldr	r3, [r3, #8]
 801d990:	f003 0302 	and.w	r3, r3, #2
 801d994:	2b02      	cmp	r3, #2
 801d996:	d11b      	bne.n	801d9d0 <HAL_SPI_TransmitReceive+0x1aa>
 801d998:	68fb      	ldr	r3, [r7, #12]
 801d99a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d99c:	b29b      	uxth	r3, r3
 801d99e:	2b00      	cmp	r3, #0
 801d9a0:	d016      	beq.n	801d9d0 <HAL_SPI_TransmitReceive+0x1aa>
 801d9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d9a4:	2b01      	cmp	r3, #1
 801d9a6:	d113      	bne.n	801d9d0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9ac:	881a      	ldrh	r2, [r3, #0]
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d9b8:	1c9a      	adds	r2, r3, #2
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d9c2:	b29b      	uxth	r3, r3
 801d9c4:	3b01      	subs	r3, #1
 801d9c6:	b29a      	uxth	r2, r3
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d9cc:	2300      	movs	r3, #0
 801d9ce:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	681b      	ldr	r3, [r3, #0]
 801d9d4:	689b      	ldr	r3, [r3, #8]
 801d9d6:	f003 0301 	and.w	r3, r3, #1
 801d9da:	2b01      	cmp	r3, #1
 801d9dc:	d11c      	bne.n	801da18 <HAL_SPI_TransmitReceive+0x1f2>
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9e4:	b29b      	uxth	r3, r3
 801d9e6:	2b00      	cmp	r3, #0
 801d9e8:	d016      	beq.n	801da18 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d9ea:	68fb      	ldr	r3, [r7, #12]
 801d9ec:	681b      	ldr	r3, [r3, #0]
 801d9ee:	68da      	ldr	r2, [r3, #12]
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9f4:	b292      	uxth	r2, r2
 801d9f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d9f8:	68fb      	ldr	r3, [r7, #12]
 801d9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9fc:	1c9a      	adds	r2, r3, #2
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801da02:	68fb      	ldr	r3, [r7, #12]
 801da04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801da08:	b29b      	uxth	r3, r3
 801da0a:	3b01      	subs	r3, #1
 801da0c:	b29a      	uxth	r2, r3
 801da0e:	68fb      	ldr	r3, [r7, #12]
 801da10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801da14:	2301      	movs	r3, #1
 801da16:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801da18:	f7fb f9bc 	bl	8018d94 <HAL_GetTick>
 801da1c:	4602      	mov	r2, r0
 801da1e:	69fb      	ldr	r3, [r7, #28]
 801da20:	1ad3      	subs	r3, r2, r3
 801da22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801da24:	429a      	cmp	r2, r3
 801da26:	d807      	bhi.n	801da38 <HAL_SPI_TransmitReceive+0x212>
 801da28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da2e:	d003      	beq.n	801da38 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801da30:	2303      	movs	r3, #3
 801da32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801da36:	e0fb      	b.n	801dc30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da3c:	b29b      	uxth	r3, r3
 801da3e:	2b00      	cmp	r3, #0
 801da40:	d1a3      	bne.n	801d98a <HAL_SPI_TransmitReceive+0x164>
 801da42:	68fb      	ldr	r3, [r7, #12]
 801da44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801da48:	b29b      	uxth	r3, r3
 801da4a:	2b00      	cmp	r3, #0
 801da4c:	d19d      	bne.n	801d98a <HAL_SPI_TransmitReceive+0x164>
 801da4e:	e0df      	b.n	801dc10 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801da50:	68fb      	ldr	r3, [r7, #12]
 801da52:	685b      	ldr	r3, [r3, #4]
 801da54:	2b00      	cmp	r3, #0
 801da56:	d003      	beq.n	801da60 <HAL_SPI_TransmitReceive+0x23a>
 801da58:	8a7b      	ldrh	r3, [r7, #18]
 801da5a:	2b01      	cmp	r3, #1
 801da5c:	f040 80cb 	bne.w	801dbf6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da64:	b29b      	uxth	r3, r3
 801da66:	2b01      	cmp	r3, #1
 801da68:	d912      	bls.n	801da90 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801da6a:	68fb      	ldr	r3, [r7, #12]
 801da6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da6e:	881a      	ldrh	r2, [r3, #0]
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	681b      	ldr	r3, [r3, #0]
 801da74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da7a:	1c9a      	adds	r2, r3, #2
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da84:	b29b      	uxth	r3, r3
 801da86:	3b02      	subs	r3, #2
 801da88:	b29a      	uxth	r2, r3
 801da8a:	68fb      	ldr	r3, [r7, #12]
 801da8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801da8e:	e0b2      	b.n	801dbf6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801da90:	68fb      	ldr	r3, [r7, #12]
 801da92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801da94:	68fb      	ldr	r3, [r7, #12]
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	330c      	adds	r3, #12
 801da9a:	7812      	ldrb	r2, [r2, #0]
 801da9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801da9e:	68fb      	ldr	r3, [r7, #12]
 801daa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daa2:	1c5a      	adds	r2, r3, #1
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801daa8:	68fb      	ldr	r3, [r7, #12]
 801daaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801daac:	b29b      	uxth	r3, r3
 801daae:	3b01      	subs	r3, #1
 801dab0:	b29a      	uxth	r2, r3
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dab6:	e09e      	b.n	801dbf6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801dab8:	68fb      	ldr	r3, [r7, #12]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	689b      	ldr	r3, [r3, #8]
 801dabe:	f003 0302 	and.w	r3, r3, #2
 801dac2:	2b02      	cmp	r3, #2
 801dac4:	d134      	bne.n	801db30 <HAL_SPI_TransmitReceive+0x30a>
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801daca:	b29b      	uxth	r3, r3
 801dacc:	2b00      	cmp	r3, #0
 801dace:	d02f      	beq.n	801db30 <HAL_SPI_TransmitReceive+0x30a>
 801dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dad2:	2b01      	cmp	r3, #1
 801dad4:	d12c      	bne.n	801db30 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801dad6:	68fb      	ldr	r3, [r7, #12]
 801dad8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dada:	b29b      	uxth	r3, r3
 801dadc:	2b01      	cmp	r3, #1
 801dade:	d912      	bls.n	801db06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dae4:	881a      	ldrh	r2, [r3, #0]
 801dae6:	68fb      	ldr	r3, [r7, #12]
 801dae8:	681b      	ldr	r3, [r3, #0]
 801daea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801daec:	68fb      	ldr	r3, [r7, #12]
 801daee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801daf0:	1c9a      	adds	r2, r3, #2
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dafa:	b29b      	uxth	r3, r3
 801dafc:	3b02      	subs	r3, #2
 801dafe:	b29a      	uxth	r2, r3
 801db00:	68fb      	ldr	r3, [r7, #12]
 801db02:	87da      	strh	r2, [r3, #62]	; 0x3e
 801db04:	e012      	b.n	801db2c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	330c      	adds	r3, #12
 801db10:	7812      	ldrb	r2, [r2, #0]
 801db12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801db14:	68fb      	ldr	r3, [r7, #12]
 801db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db18:	1c5a      	adds	r2, r3, #1
 801db1a:	68fb      	ldr	r3, [r7, #12]
 801db1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801db22:	b29b      	uxth	r3, r3
 801db24:	3b01      	subs	r3, #1
 801db26:	b29a      	uxth	r2, r3
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801db2c:	2300      	movs	r3, #0
 801db2e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801db30:	68fb      	ldr	r3, [r7, #12]
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	689b      	ldr	r3, [r3, #8]
 801db36:	f003 0301 	and.w	r3, r3, #1
 801db3a:	2b01      	cmp	r3, #1
 801db3c:	d148      	bne.n	801dbd0 <HAL_SPI_TransmitReceive+0x3aa>
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db44:	b29b      	uxth	r3, r3
 801db46:	2b00      	cmp	r3, #0
 801db48:	d042      	beq.n	801dbd0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db50:	b29b      	uxth	r3, r3
 801db52:	2b01      	cmp	r3, #1
 801db54:	d923      	bls.n	801db9e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	68da      	ldr	r2, [r3, #12]
 801db5c:	68fb      	ldr	r3, [r7, #12]
 801db5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db60:	b292      	uxth	r2, r2
 801db62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801db64:	68fb      	ldr	r3, [r7, #12]
 801db66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801db68:	1c9a      	adds	r2, r3, #2
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801db6e:	68fb      	ldr	r3, [r7, #12]
 801db70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db74:	b29b      	uxth	r3, r3
 801db76:	3b02      	subs	r3, #2
 801db78:	b29a      	uxth	r2, r3
 801db7a:	68fb      	ldr	r3, [r7, #12]
 801db7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801db80:	68fb      	ldr	r3, [r7, #12]
 801db82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801db86:	b29b      	uxth	r3, r3
 801db88:	2b01      	cmp	r3, #1
 801db8a:	d81f      	bhi.n	801dbcc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801db8c:	68fb      	ldr	r3, [r7, #12]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	685a      	ldr	r2, [r3, #4]
 801db92:	68fb      	ldr	r3, [r7, #12]
 801db94:	681b      	ldr	r3, [r3, #0]
 801db96:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801db9a:	605a      	str	r2, [r3, #4]
 801db9c:	e016      	b.n	801dbcc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	f103 020c 	add.w	r2, r3, #12
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dbaa:	7812      	ldrb	r2, [r2, #0]
 801dbac:	b2d2      	uxtb	r2, r2
 801dbae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dbb4:	1c5a      	adds	r2, r3, #1
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801dbba:	68fb      	ldr	r3, [r7, #12]
 801dbbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dbc0:	b29b      	uxth	r3, r3
 801dbc2:	3b01      	subs	r3, #1
 801dbc4:	b29a      	uxth	r2, r3
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801dbcc:	2301      	movs	r3, #1
 801dbce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801dbd0:	f7fb f8e0 	bl	8018d94 <HAL_GetTick>
 801dbd4:	4602      	mov	r2, r0
 801dbd6:	69fb      	ldr	r3, [r7, #28]
 801dbd8:	1ad3      	subs	r3, r2, r3
 801dbda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dbdc:	429a      	cmp	r2, r3
 801dbde:	d803      	bhi.n	801dbe8 <HAL_SPI_TransmitReceive+0x3c2>
 801dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dbe6:	d102      	bne.n	801dbee <HAL_SPI_TransmitReceive+0x3c8>
 801dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbea:	2b00      	cmp	r3, #0
 801dbec:	d103      	bne.n	801dbf6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801dbee:	2303      	movs	r3, #3
 801dbf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801dbf4:	e01c      	b.n	801dc30 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dbfa:	b29b      	uxth	r3, r3
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	f47f af5b 	bne.w	801dab8 <HAL_SPI_TransmitReceive+0x292>
 801dc02:	68fb      	ldr	r3, [r7, #12]
 801dc04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dc08:	b29b      	uxth	r3, r3
 801dc0a:	2b00      	cmp	r3, #0
 801dc0c:	f47f af54 	bne.w	801dab8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801dc10:	69fa      	ldr	r2, [r7, #28]
 801dc12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801dc14:	68f8      	ldr	r0, [r7, #12]
 801dc16:	f000 f98f 	bl	801df38 <SPI_EndRxTxTransaction>
 801dc1a:	4603      	mov	r3, r0
 801dc1c:	2b00      	cmp	r3, #0
 801dc1e:	d006      	beq.n	801dc2e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801dc20:	2301      	movs	r3, #1
 801dc22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	2220      	movs	r2, #32
 801dc2a:	661a      	str	r2, [r3, #96]	; 0x60
 801dc2c:	e000      	b.n	801dc30 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801dc2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801dc30:	68fb      	ldr	r3, [r7, #12]
 801dc32:	2201      	movs	r2, #1
 801dc34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801dc40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801dc44:	4618      	mov	r0, r3
 801dc46:	3728      	adds	r7, #40	; 0x28
 801dc48:	46bd      	mov	sp, r7
 801dc4a:	bd80      	pop	{r7, pc}

0801dc4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dc4c:	b580      	push	{r7, lr}
 801dc4e:	b088      	sub	sp, #32
 801dc50:	af00      	add	r7, sp, #0
 801dc52:	60f8      	str	r0, [r7, #12]
 801dc54:	60b9      	str	r1, [r7, #8]
 801dc56:	603b      	str	r3, [r7, #0]
 801dc58:	4613      	mov	r3, r2
 801dc5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801dc5c:	f7fb f89a 	bl	8018d94 <HAL_GetTick>
 801dc60:	4602      	mov	r2, r0
 801dc62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc64:	1a9b      	subs	r3, r3, r2
 801dc66:	683a      	ldr	r2, [r7, #0]
 801dc68:	4413      	add	r3, r2
 801dc6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801dc6c:	f7fb f892 	bl	8018d94 <HAL_GetTick>
 801dc70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801dc72:	4b39      	ldr	r3, [pc, #228]	; (801dd58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	015b      	lsls	r3, r3, #5
 801dc78:	0d1b      	lsrs	r3, r3, #20
 801dc7a:	69fa      	ldr	r2, [r7, #28]
 801dc7c:	fb02 f303 	mul.w	r3, r2, r3
 801dc80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dc82:	e054      	b.n	801dd2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801dc84:	683b      	ldr	r3, [r7, #0]
 801dc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc8a:	d050      	beq.n	801dd2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dc8c:	f7fb f882 	bl	8018d94 <HAL_GetTick>
 801dc90:	4602      	mov	r2, r0
 801dc92:	69bb      	ldr	r3, [r7, #24]
 801dc94:	1ad3      	subs	r3, r2, r3
 801dc96:	69fa      	ldr	r2, [r7, #28]
 801dc98:	429a      	cmp	r2, r3
 801dc9a:	d902      	bls.n	801dca2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801dc9c:	69fb      	ldr	r3, [r7, #28]
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d13d      	bne.n	801dd1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	681b      	ldr	r3, [r3, #0]
 801dca6:	685a      	ldr	r2, [r3, #4]
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	681b      	ldr	r3, [r3, #0]
 801dcac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dcb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	685b      	ldr	r3, [r3, #4]
 801dcb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dcba:	d111      	bne.n	801dce0 <SPI_WaitFlagStateUntilTimeout+0x94>
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	689b      	ldr	r3, [r3, #8]
 801dcc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dcc4:	d004      	beq.n	801dcd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	689b      	ldr	r3, [r3, #8]
 801dcca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dcce:	d107      	bne.n	801dce0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	681a      	ldr	r2, [r3, #0]
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dcde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dce8:	d10f      	bne.n	801dd0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	681a      	ldr	r2, [r3, #0]
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801dcf8:	601a      	str	r2, [r3, #0]
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	681a      	ldr	r2, [r3, #0]
 801dd00:	68fb      	ldr	r3, [r7, #12]
 801dd02:	681b      	ldr	r3, [r3, #0]
 801dd04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801dd08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801dd0a:	68fb      	ldr	r3, [r7, #12]
 801dd0c:	2201      	movs	r2, #1
 801dd0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	2200      	movs	r2, #0
 801dd16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801dd1a:	2303      	movs	r3, #3
 801dd1c:	e017      	b.n	801dd4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801dd1e:	697b      	ldr	r3, [r7, #20]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d101      	bne.n	801dd28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801dd24:	2300      	movs	r3, #0
 801dd26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801dd28:	697b      	ldr	r3, [r7, #20]
 801dd2a:	3b01      	subs	r3, #1
 801dd2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	681b      	ldr	r3, [r3, #0]
 801dd32:	689a      	ldr	r2, [r3, #8]
 801dd34:	68bb      	ldr	r3, [r7, #8]
 801dd36:	4013      	ands	r3, r2
 801dd38:	68ba      	ldr	r2, [r7, #8]
 801dd3a:	429a      	cmp	r2, r3
 801dd3c:	bf0c      	ite	eq
 801dd3e:	2301      	moveq	r3, #1
 801dd40:	2300      	movne	r3, #0
 801dd42:	b2db      	uxtb	r3, r3
 801dd44:	461a      	mov	r2, r3
 801dd46:	79fb      	ldrb	r3, [r7, #7]
 801dd48:	429a      	cmp	r2, r3
 801dd4a:	d19b      	bne.n	801dc84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801dd4c:	2300      	movs	r3, #0
}
 801dd4e:	4618      	mov	r0, r3
 801dd50:	3720      	adds	r7, #32
 801dd52:	46bd      	mov	sp, r7
 801dd54:	bd80      	pop	{r7, pc}
 801dd56:	bf00      	nop
 801dd58:	20000000 	.word	0x20000000

0801dd5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dd5c:	b580      	push	{r7, lr}
 801dd5e:	b08a      	sub	sp, #40	; 0x28
 801dd60:	af00      	add	r7, sp, #0
 801dd62:	60f8      	str	r0, [r7, #12]
 801dd64:	60b9      	str	r1, [r7, #8]
 801dd66:	607a      	str	r2, [r7, #4]
 801dd68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801dd6a:	2300      	movs	r3, #0
 801dd6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801dd6e:	f7fb f811 	bl	8018d94 <HAL_GetTick>
 801dd72:	4602      	mov	r2, r0
 801dd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd76:	1a9b      	subs	r3, r3, r2
 801dd78:	683a      	ldr	r2, [r7, #0]
 801dd7a:	4413      	add	r3, r2
 801dd7c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801dd7e:	f7fb f809 	bl	8018d94 <HAL_GetTick>
 801dd82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	681b      	ldr	r3, [r3, #0]
 801dd88:	330c      	adds	r3, #12
 801dd8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801dd8c:	4b3d      	ldr	r3, [pc, #244]	; (801de84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801dd8e:	681a      	ldr	r2, [r3, #0]
 801dd90:	4613      	mov	r3, r2
 801dd92:	009b      	lsls	r3, r3, #2
 801dd94:	4413      	add	r3, r2
 801dd96:	00da      	lsls	r2, r3, #3
 801dd98:	1ad3      	subs	r3, r2, r3
 801dd9a:	0d1b      	lsrs	r3, r3, #20
 801dd9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dd9e:	fb02 f303 	mul.w	r3, r2, r3
 801dda2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801dda4:	e060      	b.n	801de68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801dda6:	68bb      	ldr	r3, [r7, #8]
 801dda8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801ddac:	d107      	bne.n	801ddbe <SPI_WaitFifoStateUntilTimeout+0x62>
 801ddae:	687b      	ldr	r3, [r7, #4]
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	d104      	bne.n	801ddbe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801ddb4:	69fb      	ldr	r3, [r7, #28]
 801ddb6:	781b      	ldrb	r3, [r3, #0]
 801ddb8:	b2db      	uxtb	r3, r3
 801ddba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801ddbc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801ddbe:	683b      	ldr	r3, [r7, #0]
 801ddc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ddc4:	d050      	beq.n	801de68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ddc6:	f7fa ffe5 	bl	8018d94 <HAL_GetTick>
 801ddca:	4602      	mov	r2, r0
 801ddcc:	6a3b      	ldr	r3, [r7, #32]
 801ddce:	1ad3      	subs	r3, r2, r3
 801ddd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ddd2:	429a      	cmp	r2, r3
 801ddd4:	d902      	bls.n	801dddc <SPI_WaitFifoStateUntilTimeout+0x80>
 801ddd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d13d      	bne.n	801de58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	681b      	ldr	r3, [r3, #0]
 801dde0:	685a      	ldr	r2, [r3, #4]
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ddea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ddec:	68fb      	ldr	r3, [r7, #12]
 801ddee:	685b      	ldr	r3, [r3, #4]
 801ddf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ddf4:	d111      	bne.n	801de1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ddf6:	68fb      	ldr	r3, [r7, #12]
 801ddf8:	689b      	ldr	r3, [r3, #8]
 801ddfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ddfe:	d004      	beq.n	801de0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801de00:	68fb      	ldr	r3, [r7, #12]
 801de02:	689b      	ldr	r3, [r3, #8]
 801de04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801de08:	d107      	bne.n	801de1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801de0a:	68fb      	ldr	r3, [r7, #12]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	681a      	ldr	r2, [r3, #0]
 801de10:	68fb      	ldr	r3, [r7, #12]
 801de12:	681b      	ldr	r3, [r3, #0]
 801de14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801de18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801de1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801de22:	d10f      	bne.n	801de44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801de24:	68fb      	ldr	r3, [r7, #12]
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	681a      	ldr	r2, [r3, #0]
 801de2a:	68fb      	ldr	r3, [r7, #12]
 801de2c:	681b      	ldr	r3, [r3, #0]
 801de2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801de32:	601a      	str	r2, [r3, #0]
 801de34:	68fb      	ldr	r3, [r7, #12]
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	681a      	ldr	r2, [r3, #0]
 801de3a:	68fb      	ldr	r3, [r7, #12]
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801de42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	2201      	movs	r2, #1
 801de48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801de4c:	68fb      	ldr	r3, [r7, #12]
 801de4e:	2200      	movs	r2, #0
 801de50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801de54:	2303      	movs	r3, #3
 801de56:	e010      	b.n	801de7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801de58:	69bb      	ldr	r3, [r7, #24]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d101      	bne.n	801de62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801de5e:	2300      	movs	r3, #0
 801de60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801de62:	69bb      	ldr	r3, [r7, #24]
 801de64:	3b01      	subs	r3, #1
 801de66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	689a      	ldr	r2, [r3, #8]
 801de6e:	68bb      	ldr	r3, [r7, #8]
 801de70:	4013      	ands	r3, r2
 801de72:	687a      	ldr	r2, [r7, #4]
 801de74:	429a      	cmp	r2, r3
 801de76:	d196      	bne.n	801dda6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801de78:	2300      	movs	r3, #0
}
 801de7a:	4618      	mov	r0, r3
 801de7c:	3728      	adds	r7, #40	; 0x28
 801de7e:	46bd      	mov	sp, r7
 801de80:	bd80      	pop	{r7, pc}
 801de82:	bf00      	nop
 801de84:	20000000 	.word	0x20000000

0801de88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801de88:	b580      	push	{r7, lr}
 801de8a:	b086      	sub	sp, #24
 801de8c:	af02      	add	r7, sp, #8
 801de8e:	60f8      	str	r0, [r7, #12]
 801de90:	60b9      	str	r1, [r7, #8]
 801de92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801de94:	68fb      	ldr	r3, [r7, #12]
 801de96:	685b      	ldr	r3, [r3, #4]
 801de98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801de9c:	d111      	bne.n	801dec2 <SPI_EndRxTransaction+0x3a>
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	689b      	ldr	r3, [r3, #8]
 801dea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dea6:	d004      	beq.n	801deb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	689b      	ldr	r3, [r3, #8]
 801deac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801deb0:	d107      	bne.n	801dec2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	681a      	ldr	r2, [r3, #0]
 801deb8:	68fb      	ldr	r3, [r7, #12]
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dec0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	9300      	str	r3, [sp, #0]
 801dec6:	68bb      	ldr	r3, [r7, #8]
 801dec8:	2200      	movs	r2, #0
 801deca:	2180      	movs	r1, #128	; 0x80
 801decc:	68f8      	ldr	r0, [r7, #12]
 801dece:	f7ff febd 	bl	801dc4c <SPI_WaitFlagStateUntilTimeout>
 801ded2:	4603      	mov	r3, r0
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d007      	beq.n	801dee8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dedc:	f043 0220 	orr.w	r2, r3, #32
 801dee0:	68fb      	ldr	r3, [r7, #12]
 801dee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dee4:	2303      	movs	r3, #3
 801dee6:	e023      	b.n	801df30 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	685b      	ldr	r3, [r3, #4]
 801deec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801def0:	d11d      	bne.n	801df2e <SPI_EndRxTransaction+0xa6>
 801def2:	68fb      	ldr	r3, [r7, #12]
 801def4:	689b      	ldr	r3, [r3, #8]
 801def6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801defa:	d004      	beq.n	801df06 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	689b      	ldr	r3, [r3, #8]
 801df00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801df04:	d113      	bne.n	801df2e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801df06:	687b      	ldr	r3, [r7, #4]
 801df08:	9300      	str	r3, [sp, #0]
 801df0a:	68bb      	ldr	r3, [r7, #8]
 801df0c:	2200      	movs	r2, #0
 801df0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801df12:	68f8      	ldr	r0, [r7, #12]
 801df14:	f7ff ff22 	bl	801dd5c <SPI_WaitFifoStateUntilTimeout>
 801df18:	4603      	mov	r3, r0
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d007      	beq.n	801df2e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df1e:	68fb      	ldr	r3, [r7, #12]
 801df20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df22:	f043 0220 	orr.w	r2, r3, #32
 801df26:	68fb      	ldr	r3, [r7, #12]
 801df28:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801df2a:	2303      	movs	r3, #3
 801df2c:	e000      	b.n	801df30 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801df2e:	2300      	movs	r3, #0
}
 801df30:	4618      	mov	r0, r3
 801df32:	3710      	adds	r7, #16
 801df34:	46bd      	mov	sp, r7
 801df36:	bd80      	pop	{r7, pc}

0801df38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801df38:	b580      	push	{r7, lr}
 801df3a:	b086      	sub	sp, #24
 801df3c:	af02      	add	r7, sp, #8
 801df3e:	60f8      	str	r0, [r7, #12]
 801df40:	60b9      	str	r1, [r7, #8]
 801df42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	9300      	str	r3, [sp, #0]
 801df48:	68bb      	ldr	r3, [r7, #8]
 801df4a:	2200      	movs	r2, #0
 801df4c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801df50:	68f8      	ldr	r0, [r7, #12]
 801df52:	f7ff ff03 	bl	801dd5c <SPI_WaitFifoStateUntilTimeout>
 801df56:	4603      	mov	r3, r0
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d007      	beq.n	801df6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df5c:	68fb      	ldr	r3, [r7, #12]
 801df5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df60:	f043 0220 	orr.w	r2, r3, #32
 801df64:	68fb      	ldr	r3, [r7, #12]
 801df66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801df68:	2303      	movs	r3, #3
 801df6a:	e027      	b.n	801dfbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801df6c:	687b      	ldr	r3, [r7, #4]
 801df6e:	9300      	str	r3, [sp, #0]
 801df70:	68bb      	ldr	r3, [r7, #8]
 801df72:	2200      	movs	r2, #0
 801df74:	2180      	movs	r1, #128	; 0x80
 801df76:	68f8      	ldr	r0, [r7, #12]
 801df78:	f7ff fe68 	bl	801dc4c <SPI_WaitFlagStateUntilTimeout>
 801df7c:	4603      	mov	r3, r0
 801df7e:	2b00      	cmp	r3, #0
 801df80:	d007      	beq.n	801df92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801df82:	68fb      	ldr	r3, [r7, #12]
 801df84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801df86:	f043 0220 	orr.w	r2, r3, #32
 801df8a:	68fb      	ldr	r3, [r7, #12]
 801df8c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801df8e:	2303      	movs	r3, #3
 801df90:	e014      	b.n	801dfbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801df92:	687b      	ldr	r3, [r7, #4]
 801df94:	9300      	str	r3, [sp, #0]
 801df96:	68bb      	ldr	r3, [r7, #8]
 801df98:	2200      	movs	r2, #0
 801df9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801df9e:	68f8      	ldr	r0, [r7, #12]
 801dfa0:	f7ff fedc 	bl	801dd5c <SPI_WaitFifoStateUntilTimeout>
 801dfa4:	4603      	mov	r3, r0
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d007      	beq.n	801dfba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dfaa:	68fb      	ldr	r3, [r7, #12]
 801dfac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dfae:	f043 0220 	orr.w	r2, r3, #32
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dfb6:	2303      	movs	r3, #3
 801dfb8:	e000      	b.n	801dfbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801dfba:	2300      	movs	r3, #0
}
 801dfbc:	4618      	mov	r0, r3
 801dfbe:	3710      	adds	r7, #16
 801dfc0:	46bd      	mov	sp, r7
 801dfc2:	bd80      	pop	{r7, pc}

0801dfc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b082      	sub	sp, #8
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d101      	bne.n	801dfd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801dfd2:	2301      	movs	r3, #1
 801dfd4:	e049      	b.n	801e06a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dfdc:	b2db      	uxtb	r3, r3
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d106      	bne.n	801dff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801dfe2:	687b      	ldr	r3, [r7, #4]
 801dfe4:	2200      	movs	r2, #0
 801dfe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801dfea:	6878      	ldr	r0, [r7, #4]
 801dfec:	f7f9 fd32 	bl	8017a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	2202      	movs	r2, #2
 801dff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	681a      	ldr	r2, [r3, #0]
 801dffc:	687b      	ldr	r3, [r7, #4]
 801dffe:	3304      	adds	r3, #4
 801e000:	4619      	mov	r1, r3
 801e002:	4610      	mov	r0, r2
 801e004:	f000 fd6c 	bl	801eae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	2201      	movs	r2, #1
 801e00c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	2201      	movs	r2, #1
 801e014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	2201      	movs	r2, #1
 801e01c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	2201      	movs	r2, #1
 801e024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2201      	movs	r2, #1
 801e02c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e030:	687b      	ldr	r3, [r7, #4]
 801e032:	2201      	movs	r2, #1
 801e034:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e038:	687b      	ldr	r3, [r7, #4]
 801e03a:	2201      	movs	r2, #1
 801e03c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	2201      	movs	r2, #1
 801e044:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e048:	687b      	ldr	r3, [r7, #4]
 801e04a:	2201      	movs	r2, #1
 801e04c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e050:	687b      	ldr	r3, [r7, #4]
 801e052:	2201      	movs	r2, #1
 801e054:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e058:	687b      	ldr	r3, [r7, #4]
 801e05a:	2201      	movs	r2, #1
 801e05c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	2201      	movs	r2, #1
 801e064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e068:	2300      	movs	r3, #0
}
 801e06a:	4618      	mov	r0, r3
 801e06c:	3708      	adds	r7, #8
 801e06e:	46bd      	mov	sp, r7
 801e070:	bd80      	pop	{r7, pc}
	...

0801e074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e074:	b480      	push	{r7}
 801e076:	b085      	sub	sp, #20
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e07c:	687b      	ldr	r3, [r7, #4]
 801e07e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e082:	b2db      	uxtb	r3, r3
 801e084:	2b01      	cmp	r3, #1
 801e086:	d001      	beq.n	801e08c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e088:	2301      	movs	r3, #1
 801e08a:	e04f      	b.n	801e12c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e08c:	687b      	ldr	r3, [r7, #4]
 801e08e:	2202      	movs	r2, #2
 801e090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	681b      	ldr	r3, [r3, #0]
 801e098:	68da      	ldr	r2, [r3, #12]
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	681b      	ldr	r3, [r3, #0]
 801e09e:	f042 0201 	orr.w	r2, r2, #1
 801e0a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	681b      	ldr	r3, [r3, #0]
 801e0a8:	4a23      	ldr	r2, [pc, #140]	; (801e138 <HAL_TIM_Base_Start_IT+0xc4>)
 801e0aa:	4293      	cmp	r3, r2
 801e0ac:	d01d      	beq.n	801e0ea <HAL_TIM_Base_Start_IT+0x76>
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e0b6:	d018      	beq.n	801e0ea <HAL_TIM_Base_Start_IT+0x76>
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	4a1f      	ldr	r2, [pc, #124]	; (801e13c <HAL_TIM_Base_Start_IT+0xc8>)
 801e0be:	4293      	cmp	r3, r2
 801e0c0:	d013      	beq.n	801e0ea <HAL_TIM_Base_Start_IT+0x76>
 801e0c2:	687b      	ldr	r3, [r7, #4]
 801e0c4:	681b      	ldr	r3, [r3, #0]
 801e0c6:	4a1e      	ldr	r2, [pc, #120]	; (801e140 <HAL_TIM_Base_Start_IT+0xcc>)
 801e0c8:	4293      	cmp	r3, r2
 801e0ca:	d00e      	beq.n	801e0ea <HAL_TIM_Base_Start_IT+0x76>
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	681b      	ldr	r3, [r3, #0]
 801e0d0:	4a1c      	ldr	r2, [pc, #112]	; (801e144 <HAL_TIM_Base_Start_IT+0xd0>)
 801e0d2:	4293      	cmp	r3, r2
 801e0d4:	d009      	beq.n	801e0ea <HAL_TIM_Base_Start_IT+0x76>
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	4a1b      	ldr	r2, [pc, #108]	; (801e148 <HAL_TIM_Base_Start_IT+0xd4>)
 801e0dc:	4293      	cmp	r3, r2
 801e0de:	d004      	beq.n	801e0ea <HAL_TIM_Base_Start_IT+0x76>
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	4a19      	ldr	r2, [pc, #100]	; (801e14c <HAL_TIM_Base_Start_IT+0xd8>)
 801e0e6:	4293      	cmp	r3, r2
 801e0e8:	d115      	bne.n	801e116 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	681b      	ldr	r3, [r3, #0]
 801e0ee:	689a      	ldr	r2, [r3, #8]
 801e0f0:	4b17      	ldr	r3, [pc, #92]	; (801e150 <HAL_TIM_Base_Start_IT+0xdc>)
 801e0f2:	4013      	ands	r3, r2
 801e0f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	2b06      	cmp	r3, #6
 801e0fa:	d015      	beq.n	801e128 <HAL_TIM_Base_Start_IT+0xb4>
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e102:	d011      	beq.n	801e128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	681b      	ldr	r3, [r3, #0]
 801e108:	681a      	ldr	r2, [r3, #0]
 801e10a:	687b      	ldr	r3, [r7, #4]
 801e10c:	681b      	ldr	r3, [r3, #0]
 801e10e:	f042 0201 	orr.w	r2, r2, #1
 801e112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e114:	e008      	b.n	801e128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	681a      	ldr	r2, [r3, #0]
 801e11c:	687b      	ldr	r3, [r7, #4]
 801e11e:	681b      	ldr	r3, [r3, #0]
 801e120:	f042 0201 	orr.w	r2, r2, #1
 801e124:	601a      	str	r2, [r3, #0]
 801e126:	e000      	b.n	801e12a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e12a:	2300      	movs	r3, #0
}
 801e12c:	4618      	mov	r0, r3
 801e12e:	3714      	adds	r7, #20
 801e130:	46bd      	mov	sp, r7
 801e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e136:	4770      	bx	lr
 801e138:	40012c00 	.word	0x40012c00
 801e13c:	40000400 	.word	0x40000400
 801e140:	40000800 	.word	0x40000800
 801e144:	40013400 	.word	0x40013400
 801e148:	40014000 	.word	0x40014000
 801e14c:	40015000 	.word	0x40015000
 801e150:	00010007 	.word	0x00010007

0801e154 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e154:	b580      	push	{r7, lr}
 801e156:	b082      	sub	sp, #8
 801e158:	af00      	add	r7, sp, #0
 801e15a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d101      	bne.n	801e166 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e162:	2301      	movs	r3, #1
 801e164:	e049      	b.n	801e1fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e16c:	b2db      	uxtb	r3, r3
 801e16e:	2b00      	cmp	r3, #0
 801e170:	d106      	bne.n	801e180 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	2200      	movs	r2, #0
 801e176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e17a:	6878      	ldr	r0, [r7, #4]
 801e17c:	f7f9 fca4 	bl	8017ac8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e180:	687b      	ldr	r3, [r7, #4]
 801e182:	2202      	movs	r2, #2
 801e184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681a      	ldr	r2, [r3, #0]
 801e18c:	687b      	ldr	r3, [r7, #4]
 801e18e:	3304      	adds	r3, #4
 801e190:	4619      	mov	r1, r3
 801e192:	4610      	mov	r0, r2
 801e194:	f000 fca4 	bl	801eae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e198:	687b      	ldr	r3, [r7, #4]
 801e19a:	2201      	movs	r2, #1
 801e19c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e1a0:	687b      	ldr	r3, [r7, #4]
 801e1a2:	2201      	movs	r2, #1
 801e1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	2201      	movs	r2, #1
 801e1ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e1b0:	687b      	ldr	r3, [r7, #4]
 801e1b2:	2201      	movs	r2, #1
 801e1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e1b8:	687b      	ldr	r3, [r7, #4]
 801e1ba:	2201      	movs	r2, #1
 801e1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	2201      	movs	r2, #1
 801e1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e1c8:	687b      	ldr	r3, [r7, #4]
 801e1ca:	2201      	movs	r2, #1
 801e1cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	2201      	movs	r2, #1
 801e1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e1d8:	687b      	ldr	r3, [r7, #4]
 801e1da:	2201      	movs	r2, #1
 801e1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e1e0:	687b      	ldr	r3, [r7, #4]
 801e1e2:	2201      	movs	r2, #1
 801e1e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	2201      	movs	r2, #1
 801e1ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	2201      	movs	r2, #1
 801e1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e1f8:	2300      	movs	r3, #0
}
 801e1fa:	4618      	mov	r0, r3
 801e1fc:	3708      	adds	r7, #8
 801e1fe:	46bd      	mov	sp, r7
 801e200:	bd80      	pop	{r7, pc}
	...

0801e204 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e204:	b580      	push	{r7, lr}
 801e206:	b084      	sub	sp, #16
 801e208:	af00      	add	r7, sp, #0
 801e20a:	6078      	str	r0, [r7, #4]
 801e20c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e20e:	683b      	ldr	r3, [r7, #0]
 801e210:	2b00      	cmp	r3, #0
 801e212:	d109      	bne.n	801e228 <HAL_TIM_PWM_Start+0x24>
 801e214:	687b      	ldr	r3, [r7, #4]
 801e216:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e21a:	b2db      	uxtb	r3, r3
 801e21c:	2b01      	cmp	r3, #1
 801e21e:	bf14      	ite	ne
 801e220:	2301      	movne	r3, #1
 801e222:	2300      	moveq	r3, #0
 801e224:	b2db      	uxtb	r3, r3
 801e226:	e03c      	b.n	801e2a2 <HAL_TIM_PWM_Start+0x9e>
 801e228:	683b      	ldr	r3, [r7, #0]
 801e22a:	2b04      	cmp	r3, #4
 801e22c:	d109      	bne.n	801e242 <HAL_TIM_PWM_Start+0x3e>
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e234:	b2db      	uxtb	r3, r3
 801e236:	2b01      	cmp	r3, #1
 801e238:	bf14      	ite	ne
 801e23a:	2301      	movne	r3, #1
 801e23c:	2300      	moveq	r3, #0
 801e23e:	b2db      	uxtb	r3, r3
 801e240:	e02f      	b.n	801e2a2 <HAL_TIM_PWM_Start+0x9e>
 801e242:	683b      	ldr	r3, [r7, #0]
 801e244:	2b08      	cmp	r3, #8
 801e246:	d109      	bne.n	801e25c <HAL_TIM_PWM_Start+0x58>
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e24e:	b2db      	uxtb	r3, r3
 801e250:	2b01      	cmp	r3, #1
 801e252:	bf14      	ite	ne
 801e254:	2301      	movne	r3, #1
 801e256:	2300      	moveq	r3, #0
 801e258:	b2db      	uxtb	r3, r3
 801e25a:	e022      	b.n	801e2a2 <HAL_TIM_PWM_Start+0x9e>
 801e25c:	683b      	ldr	r3, [r7, #0]
 801e25e:	2b0c      	cmp	r3, #12
 801e260:	d109      	bne.n	801e276 <HAL_TIM_PWM_Start+0x72>
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e268:	b2db      	uxtb	r3, r3
 801e26a:	2b01      	cmp	r3, #1
 801e26c:	bf14      	ite	ne
 801e26e:	2301      	movne	r3, #1
 801e270:	2300      	moveq	r3, #0
 801e272:	b2db      	uxtb	r3, r3
 801e274:	e015      	b.n	801e2a2 <HAL_TIM_PWM_Start+0x9e>
 801e276:	683b      	ldr	r3, [r7, #0]
 801e278:	2b10      	cmp	r3, #16
 801e27a:	d109      	bne.n	801e290 <HAL_TIM_PWM_Start+0x8c>
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e282:	b2db      	uxtb	r3, r3
 801e284:	2b01      	cmp	r3, #1
 801e286:	bf14      	ite	ne
 801e288:	2301      	movne	r3, #1
 801e28a:	2300      	moveq	r3, #0
 801e28c:	b2db      	uxtb	r3, r3
 801e28e:	e008      	b.n	801e2a2 <HAL_TIM_PWM_Start+0x9e>
 801e290:	687b      	ldr	r3, [r7, #4]
 801e292:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e296:	b2db      	uxtb	r3, r3
 801e298:	2b01      	cmp	r3, #1
 801e29a:	bf14      	ite	ne
 801e29c:	2301      	movne	r3, #1
 801e29e:	2300      	moveq	r3, #0
 801e2a0:	b2db      	uxtb	r3, r3
 801e2a2:	2b00      	cmp	r3, #0
 801e2a4:	d001      	beq.n	801e2aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e2a6:	2301      	movs	r3, #1
 801e2a8:	e0a1      	b.n	801e3ee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e2aa:	683b      	ldr	r3, [r7, #0]
 801e2ac:	2b00      	cmp	r3, #0
 801e2ae:	d104      	bne.n	801e2ba <HAL_TIM_PWM_Start+0xb6>
 801e2b0:	687b      	ldr	r3, [r7, #4]
 801e2b2:	2202      	movs	r2, #2
 801e2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e2b8:	e023      	b.n	801e302 <HAL_TIM_PWM_Start+0xfe>
 801e2ba:	683b      	ldr	r3, [r7, #0]
 801e2bc:	2b04      	cmp	r3, #4
 801e2be:	d104      	bne.n	801e2ca <HAL_TIM_PWM_Start+0xc6>
 801e2c0:	687b      	ldr	r3, [r7, #4]
 801e2c2:	2202      	movs	r2, #2
 801e2c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e2c8:	e01b      	b.n	801e302 <HAL_TIM_PWM_Start+0xfe>
 801e2ca:	683b      	ldr	r3, [r7, #0]
 801e2cc:	2b08      	cmp	r3, #8
 801e2ce:	d104      	bne.n	801e2da <HAL_TIM_PWM_Start+0xd6>
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	2202      	movs	r2, #2
 801e2d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e2d8:	e013      	b.n	801e302 <HAL_TIM_PWM_Start+0xfe>
 801e2da:	683b      	ldr	r3, [r7, #0]
 801e2dc:	2b0c      	cmp	r3, #12
 801e2de:	d104      	bne.n	801e2ea <HAL_TIM_PWM_Start+0xe6>
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	2202      	movs	r2, #2
 801e2e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e2e8:	e00b      	b.n	801e302 <HAL_TIM_PWM_Start+0xfe>
 801e2ea:	683b      	ldr	r3, [r7, #0]
 801e2ec:	2b10      	cmp	r3, #16
 801e2ee:	d104      	bne.n	801e2fa <HAL_TIM_PWM_Start+0xf6>
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	2202      	movs	r2, #2
 801e2f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e2f8:	e003      	b.n	801e302 <HAL_TIM_PWM_Start+0xfe>
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	2202      	movs	r2, #2
 801e2fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	2201      	movs	r2, #1
 801e308:	6839      	ldr	r1, [r7, #0]
 801e30a:	4618      	mov	r0, r3
 801e30c:	f000 ffb0 	bl	801f270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	4a38      	ldr	r2, [pc, #224]	; (801e3f8 <HAL_TIM_PWM_Start+0x1f4>)
 801e316:	4293      	cmp	r3, r2
 801e318:	d018      	beq.n	801e34c <HAL_TIM_PWM_Start+0x148>
 801e31a:	687b      	ldr	r3, [r7, #4]
 801e31c:	681b      	ldr	r3, [r3, #0]
 801e31e:	4a37      	ldr	r2, [pc, #220]	; (801e3fc <HAL_TIM_PWM_Start+0x1f8>)
 801e320:	4293      	cmp	r3, r2
 801e322:	d013      	beq.n	801e34c <HAL_TIM_PWM_Start+0x148>
 801e324:	687b      	ldr	r3, [r7, #4]
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	4a35      	ldr	r2, [pc, #212]	; (801e400 <HAL_TIM_PWM_Start+0x1fc>)
 801e32a:	4293      	cmp	r3, r2
 801e32c:	d00e      	beq.n	801e34c <HAL_TIM_PWM_Start+0x148>
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	4a34      	ldr	r2, [pc, #208]	; (801e404 <HAL_TIM_PWM_Start+0x200>)
 801e334:	4293      	cmp	r3, r2
 801e336:	d009      	beq.n	801e34c <HAL_TIM_PWM_Start+0x148>
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	4a32      	ldr	r2, [pc, #200]	; (801e408 <HAL_TIM_PWM_Start+0x204>)
 801e33e:	4293      	cmp	r3, r2
 801e340:	d004      	beq.n	801e34c <HAL_TIM_PWM_Start+0x148>
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	4a31      	ldr	r2, [pc, #196]	; (801e40c <HAL_TIM_PWM_Start+0x208>)
 801e348:	4293      	cmp	r3, r2
 801e34a:	d101      	bne.n	801e350 <HAL_TIM_PWM_Start+0x14c>
 801e34c:	2301      	movs	r3, #1
 801e34e:	e000      	b.n	801e352 <HAL_TIM_PWM_Start+0x14e>
 801e350:	2300      	movs	r3, #0
 801e352:	2b00      	cmp	r3, #0
 801e354:	d007      	beq.n	801e366 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e356:	687b      	ldr	r3, [r7, #4]
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	681b      	ldr	r3, [r3, #0]
 801e360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	681b      	ldr	r3, [r3, #0]
 801e36a:	4a23      	ldr	r2, [pc, #140]	; (801e3f8 <HAL_TIM_PWM_Start+0x1f4>)
 801e36c:	4293      	cmp	r3, r2
 801e36e:	d01d      	beq.n	801e3ac <HAL_TIM_PWM_Start+0x1a8>
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e378:	d018      	beq.n	801e3ac <HAL_TIM_PWM_Start+0x1a8>
 801e37a:	687b      	ldr	r3, [r7, #4]
 801e37c:	681b      	ldr	r3, [r3, #0]
 801e37e:	4a24      	ldr	r2, [pc, #144]	; (801e410 <HAL_TIM_PWM_Start+0x20c>)
 801e380:	4293      	cmp	r3, r2
 801e382:	d013      	beq.n	801e3ac <HAL_TIM_PWM_Start+0x1a8>
 801e384:	687b      	ldr	r3, [r7, #4]
 801e386:	681b      	ldr	r3, [r3, #0]
 801e388:	4a22      	ldr	r2, [pc, #136]	; (801e414 <HAL_TIM_PWM_Start+0x210>)
 801e38a:	4293      	cmp	r3, r2
 801e38c:	d00e      	beq.n	801e3ac <HAL_TIM_PWM_Start+0x1a8>
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	4a1a      	ldr	r2, [pc, #104]	; (801e3fc <HAL_TIM_PWM_Start+0x1f8>)
 801e394:	4293      	cmp	r3, r2
 801e396:	d009      	beq.n	801e3ac <HAL_TIM_PWM_Start+0x1a8>
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	4a18      	ldr	r2, [pc, #96]	; (801e400 <HAL_TIM_PWM_Start+0x1fc>)
 801e39e:	4293      	cmp	r3, r2
 801e3a0:	d004      	beq.n	801e3ac <HAL_TIM_PWM_Start+0x1a8>
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	4a19      	ldr	r2, [pc, #100]	; (801e40c <HAL_TIM_PWM_Start+0x208>)
 801e3a8:	4293      	cmp	r3, r2
 801e3aa:	d115      	bne.n	801e3d8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	681b      	ldr	r3, [r3, #0]
 801e3b0:	689a      	ldr	r2, [r3, #8]
 801e3b2:	4b19      	ldr	r3, [pc, #100]	; (801e418 <HAL_TIM_PWM_Start+0x214>)
 801e3b4:	4013      	ands	r3, r2
 801e3b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e3b8:	68fb      	ldr	r3, [r7, #12]
 801e3ba:	2b06      	cmp	r3, #6
 801e3bc:	d015      	beq.n	801e3ea <HAL_TIM_PWM_Start+0x1e6>
 801e3be:	68fb      	ldr	r3, [r7, #12]
 801e3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e3c4:	d011      	beq.n	801e3ea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801e3c6:	687b      	ldr	r3, [r7, #4]
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	681a      	ldr	r2, [r3, #0]
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	f042 0201 	orr.w	r2, r2, #1
 801e3d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e3d6:	e008      	b.n	801e3ea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	681b      	ldr	r3, [r3, #0]
 801e3dc:	681a      	ldr	r2, [r3, #0]
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	681b      	ldr	r3, [r3, #0]
 801e3e2:	f042 0201 	orr.w	r2, r2, #1
 801e3e6:	601a      	str	r2, [r3, #0]
 801e3e8:	e000      	b.n	801e3ec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e3ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e3ec:	2300      	movs	r3, #0
}
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	3710      	adds	r7, #16
 801e3f2:	46bd      	mov	sp, r7
 801e3f4:	bd80      	pop	{r7, pc}
 801e3f6:	bf00      	nop
 801e3f8:	40012c00 	.word	0x40012c00
 801e3fc:	40013400 	.word	0x40013400
 801e400:	40014000 	.word	0x40014000
 801e404:	40014400 	.word	0x40014400
 801e408:	40014800 	.word	0x40014800
 801e40c:	40015000 	.word	0x40015000
 801e410:	40000400 	.word	0x40000400
 801e414:	40000800 	.word	0x40000800
 801e418:	00010007 	.word	0x00010007

0801e41c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	b082      	sub	sp, #8
 801e420:	af00      	add	r7, sp, #0
 801e422:	6078      	str	r0, [r7, #4]
 801e424:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	2200      	movs	r2, #0
 801e42c:	6839      	ldr	r1, [r7, #0]
 801e42e:	4618      	mov	r0, r3
 801e430:	f000 ff1e 	bl	801f270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	681b      	ldr	r3, [r3, #0]
 801e438:	4a40      	ldr	r2, [pc, #256]	; (801e53c <HAL_TIM_PWM_Stop+0x120>)
 801e43a:	4293      	cmp	r3, r2
 801e43c:	d018      	beq.n	801e470 <HAL_TIM_PWM_Stop+0x54>
 801e43e:	687b      	ldr	r3, [r7, #4]
 801e440:	681b      	ldr	r3, [r3, #0]
 801e442:	4a3f      	ldr	r2, [pc, #252]	; (801e540 <HAL_TIM_PWM_Stop+0x124>)
 801e444:	4293      	cmp	r3, r2
 801e446:	d013      	beq.n	801e470 <HAL_TIM_PWM_Stop+0x54>
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	681b      	ldr	r3, [r3, #0]
 801e44c:	4a3d      	ldr	r2, [pc, #244]	; (801e544 <HAL_TIM_PWM_Stop+0x128>)
 801e44e:	4293      	cmp	r3, r2
 801e450:	d00e      	beq.n	801e470 <HAL_TIM_PWM_Stop+0x54>
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	4a3c      	ldr	r2, [pc, #240]	; (801e548 <HAL_TIM_PWM_Stop+0x12c>)
 801e458:	4293      	cmp	r3, r2
 801e45a:	d009      	beq.n	801e470 <HAL_TIM_PWM_Stop+0x54>
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	4a3a      	ldr	r2, [pc, #232]	; (801e54c <HAL_TIM_PWM_Stop+0x130>)
 801e462:	4293      	cmp	r3, r2
 801e464:	d004      	beq.n	801e470 <HAL_TIM_PWM_Stop+0x54>
 801e466:	687b      	ldr	r3, [r7, #4]
 801e468:	681b      	ldr	r3, [r3, #0]
 801e46a:	4a39      	ldr	r2, [pc, #228]	; (801e550 <HAL_TIM_PWM_Stop+0x134>)
 801e46c:	4293      	cmp	r3, r2
 801e46e:	d101      	bne.n	801e474 <HAL_TIM_PWM_Stop+0x58>
 801e470:	2301      	movs	r3, #1
 801e472:	e000      	b.n	801e476 <HAL_TIM_PWM_Stop+0x5a>
 801e474:	2300      	movs	r3, #0
 801e476:	2b00      	cmp	r3, #0
 801e478:	d017      	beq.n	801e4aa <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e47a:	687b      	ldr	r3, [r7, #4]
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	6a1a      	ldr	r2, [r3, #32]
 801e480:	f241 1311 	movw	r3, #4369	; 0x1111
 801e484:	4013      	ands	r3, r2
 801e486:	2b00      	cmp	r3, #0
 801e488:	d10f      	bne.n	801e4aa <HAL_TIM_PWM_Stop+0x8e>
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	6a1a      	ldr	r2, [r3, #32]
 801e490:	f244 4344 	movw	r3, #17476	; 0x4444
 801e494:	4013      	ands	r3, r2
 801e496:	2b00      	cmp	r3, #0
 801e498:	d107      	bne.n	801e4aa <HAL_TIM_PWM_Stop+0x8e>
 801e49a:	687b      	ldr	r3, [r7, #4]
 801e49c:	681b      	ldr	r3, [r3, #0]
 801e49e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e4a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	681b      	ldr	r3, [r3, #0]
 801e4ae:	6a1a      	ldr	r2, [r3, #32]
 801e4b0:	f241 1311 	movw	r3, #4369	; 0x1111
 801e4b4:	4013      	ands	r3, r2
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	d10f      	bne.n	801e4da <HAL_TIM_PWM_Stop+0xbe>
 801e4ba:	687b      	ldr	r3, [r7, #4]
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	6a1a      	ldr	r2, [r3, #32]
 801e4c0:	f244 4344 	movw	r3, #17476	; 0x4444
 801e4c4:	4013      	ands	r3, r2
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d107      	bne.n	801e4da <HAL_TIM_PWM_Stop+0xbe>
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	681b      	ldr	r3, [r3, #0]
 801e4ce:	681a      	ldr	r2, [r3, #0]
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	f022 0201 	bic.w	r2, r2, #1
 801e4d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e4da:	683b      	ldr	r3, [r7, #0]
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d104      	bne.n	801e4ea <HAL_TIM_PWM_Stop+0xce>
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2201      	movs	r2, #1
 801e4e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e4e8:	e023      	b.n	801e532 <HAL_TIM_PWM_Stop+0x116>
 801e4ea:	683b      	ldr	r3, [r7, #0]
 801e4ec:	2b04      	cmp	r3, #4
 801e4ee:	d104      	bne.n	801e4fa <HAL_TIM_PWM_Stop+0xde>
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	2201      	movs	r2, #1
 801e4f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e4f8:	e01b      	b.n	801e532 <HAL_TIM_PWM_Stop+0x116>
 801e4fa:	683b      	ldr	r3, [r7, #0]
 801e4fc:	2b08      	cmp	r3, #8
 801e4fe:	d104      	bne.n	801e50a <HAL_TIM_PWM_Stop+0xee>
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	2201      	movs	r2, #1
 801e504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e508:	e013      	b.n	801e532 <HAL_TIM_PWM_Stop+0x116>
 801e50a:	683b      	ldr	r3, [r7, #0]
 801e50c:	2b0c      	cmp	r3, #12
 801e50e:	d104      	bne.n	801e51a <HAL_TIM_PWM_Stop+0xfe>
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	2201      	movs	r2, #1
 801e514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e518:	e00b      	b.n	801e532 <HAL_TIM_PWM_Stop+0x116>
 801e51a:	683b      	ldr	r3, [r7, #0]
 801e51c:	2b10      	cmp	r3, #16
 801e51e:	d104      	bne.n	801e52a <HAL_TIM_PWM_Stop+0x10e>
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	2201      	movs	r2, #1
 801e524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e528:	e003      	b.n	801e532 <HAL_TIM_PWM_Stop+0x116>
 801e52a:	687b      	ldr	r3, [r7, #4]
 801e52c:	2201      	movs	r2, #1
 801e52e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e532:	2300      	movs	r3, #0
}
 801e534:	4618      	mov	r0, r3
 801e536:	3708      	adds	r7, #8
 801e538:	46bd      	mov	sp, r7
 801e53a:	bd80      	pop	{r7, pc}
 801e53c:	40012c00 	.word	0x40012c00
 801e540:	40013400 	.word	0x40013400
 801e544:	40014000 	.word	0x40014000
 801e548:	40014400 	.word	0x40014400
 801e54c:	40014800 	.word	0x40014800
 801e550:	40015000 	.word	0x40015000

0801e554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e554:	b580      	push	{r7, lr}
 801e556:	b082      	sub	sp, #8
 801e558:	af00      	add	r7, sp, #0
 801e55a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	681b      	ldr	r3, [r3, #0]
 801e560:	691b      	ldr	r3, [r3, #16]
 801e562:	f003 0302 	and.w	r3, r3, #2
 801e566:	2b02      	cmp	r3, #2
 801e568:	d122      	bne.n	801e5b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	68db      	ldr	r3, [r3, #12]
 801e570:	f003 0302 	and.w	r3, r3, #2
 801e574:	2b02      	cmp	r3, #2
 801e576:	d11b      	bne.n	801e5b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	f06f 0202 	mvn.w	r2, #2
 801e580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	2201      	movs	r2, #1
 801e586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e588:	687b      	ldr	r3, [r7, #4]
 801e58a:	681b      	ldr	r3, [r3, #0]
 801e58c:	699b      	ldr	r3, [r3, #24]
 801e58e:	f003 0303 	and.w	r3, r3, #3
 801e592:	2b00      	cmp	r3, #0
 801e594:	d003      	beq.n	801e59e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e596:	6878      	ldr	r0, [r7, #4]
 801e598:	f000 fa84 	bl	801eaa4 <HAL_TIM_IC_CaptureCallback>
 801e59c:	e005      	b.n	801e5aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e59e:	6878      	ldr	r0, [r7, #4]
 801e5a0:	f000 fa76 	bl	801ea90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5a4:	6878      	ldr	r0, [r7, #4]
 801e5a6:	f000 fa87 	bl	801eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	2200      	movs	r2, #0
 801e5ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e5b0:	687b      	ldr	r3, [r7, #4]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	691b      	ldr	r3, [r3, #16]
 801e5b6:	f003 0304 	and.w	r3, r3, #4
 801e5ba:	2b04      	cmp	r3, #4
 801e5bc:	d122      	bne.n	801e604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e5be:	687b      	ldr	r3, [r7, #4]
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	68db      	ldr	r3, [r3, #12]
 801e5c4:	f003 0304 	and.w	r3, r3, #4
 801e5c8:	2b04      	cmp	r3, #4
 801e5ca:	d11b      	bne.n	801e604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	f06f 0204 	mvn.w	r2, #4
 801e5d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	2202      	movs	r2, #2
 801e5da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	699b      	ldr	r3, [r3, #24]
 801e5e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	d003      	beq.n	801e5f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	f000 fa5a 	bl	801eaa4 <HAL_TIM_IC_CaptureCallback>
 801e5f0:	e005      	b.n	801e5fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e5f2:	6878      	ldr	r0, [r7, #4]
 801e5f4:	f000 fa4c 	bl	801ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e5f8:	6878      	ldr	r0, [r7, #4]
 801e5fa:	f000 fa5d 	bl	801eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	2200      	movs	r2, #0
 801e602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	691b      	ldr	r3, [r3, #16]
 801e60a:	f003 0308 	and.w	r3, r3, #8
 801e60e:	2b08      	cmp	r3, #8
 801e610:	d122      	bne.n	801e658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	68db      	ldr	r3, [r3, #12]
 801e618:	f003 0308 	and.w	r3, r3, #8
 801e61c:	2b08      	cmp	r3, #8
 801e61e:	d11b      	bne.n	801e658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	681b      	ldr	r3, [r3, #0]
 801e624:	f06f 0208 	mvn.w	r2, #8
 801e628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	2204      	movs	r2, #4
 801e62e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	681b      	ldr	r3, [r3, #0]
 801e634:	69db      	ldr	r3, [r3, #28]
 801e636:	f003 0303 	and.w	r3, r3, #3
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	d003      	beq.n	801e646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e63e:	6878      	ldr	r0, [r7, #4]
 801e640:	f000 fa30 	bl	801eaa4 <HAL_TIM_IC_CaptureCallback>
 801e644:	e005      	b.n	801e652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e646:	6878      	ldr	r0, [r7, #4]
 801e648:	f000 fa22 	bl	801ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e64c:	6878      	ldr	r0, [r7, #4]
 801e64e:	f000 fa33 	bl	801eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	2200      	movs	r2, #0
 801e656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	691b      	ldr	r3, [r3, #16]
 801e65e:	f003 0310 	and.w	r3, r3, #16
 801e662:	2b10      	cmp	r3, #16
 801e664:	d122      	bne.n	801e6ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	68db      	ldr	r3, [r3, #12]
 801e66c:	f003 0310 	and.w	r3, r3, #16
 801e670:	2b10      	cmp	r3, #16
 801e672:	d11b      	bne.n	801e6ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	681b      	ldr	r3, [r3, #0]
 801e678:	f06f 0210 	mvn.w	r2, #16
 801e67c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e67e:	687b      	ldr	r3, [r7, #4]
 801e680:	2208      	movs	r2, #8
 801e682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	69db      	ldr	r3, [r3, #28]
 801e68a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e68e:	2b00      	cmp	r3, #0
 801e690:	d003      	beq.n	801e69a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e692:	6878      	ldr	r0, [r7, #4]
 801e694:	f000 fa06 	bl	801eaa4 <HAL_TIM_IC_CaptureCallback>
 801e698:	e005      	b.n	801e6a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e69a:	6878      	ldr	r0, [r7, #4]
 801e69c:	f000 f9f8 	bl	801ea90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e6a0:	6878      	ldr	r0, [r7, #4]
 801e6a2:	f000 fa09 	bl	801eab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e6a6:	687b      	ldr	r3, [r7, #4]
 801e6a8:	2200      	movs	r2, #0
 801e6aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	691b      	ldr	r3, [r3, #16]
 801e6b2:	f003 0301 	and.w	r3, r3, #1
 801e6b6:	2b01      	cmp	r3, #1
 801e6b8:	d10e      	bne.n	801e6d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	681b      	ldr	r3, [r3, #0]
 801e6be:	68db      	ldr	r3, [r3, #12]
 801e6c0:	f003 0301 	and.w	r3, r3, #1
 801e6c4:	2b01      	cmp	r3, #1
 801e6c6:	d107      	bne.n	801e6d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e6c8:	687b      	ldr	r3, [r7, #4]
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	f06f 0201 	mvn.w	r2, #1
 801e6d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e6d2:	6878      	ldr	r0, [r7, #4]
 801e6d4:	f000 f9d2 	bl	801ea7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	691b      	ldr	r3, [r3, #16]
 801e6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e6e2:	2b80      	cmp	r3, #128	; 0x80
 801e6e4:	d10e      	bne.n	801e704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	681b      	ldr	r3, [r3, #0]
 801e6ea:	68db      	ldr	r3, [r3, #12]
 801e6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e6f0:	2b80      	cmp	r3, #128	; 0x80
 801e6f2:	d107      	bne.n	801e704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e6fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e6fe:	6878      	ldr	r0, [r7, #4]
 801e700:	f000 ff26 	bl	801f550 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	681b      	ldr	r3, [r3, #0]
 801e708:	691b      	ldr	r3, [r3, #16]
 801e70a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e70e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e712:	d10e      	bne.n	801e732 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	68db      	ldr	r3, [r3, #12]
 801e71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e71e:	2b80      	cmp	r3, #128	; 0x80
 801e720:	d107      	bne.n	801e732 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	681b      	ldr	r3, [r3, #0]
 801e726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e72a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e72c:	6878      	ldr	r0, [r7, #4]
 801e72e:	f000 ff19 	bl	801f564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	691b      	ldr	r3, [r3, #16]
 801e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e73c:	2b40      	cmp	r3, #64	; 0x40
 801e73e:	d10e      	bne.n	801e75e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e740:	687b      	ldr	r3, [r7, #4]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	68db      	ldr	r3, [r3, #12]
 801e746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e74a:	2b40      	cmp	r3, #64	; 0x40
 801e74c:	d107      	bne.n	801e75e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	681b      	ldr	r3, [r3, #0]
 801e752:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e758:	6878      	ldr	r0, [r7, #4]
 801e75a:	f000 f9b7 	bl	801eacc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e75e:	687b      	ldr	r3, [r7, #4]
 801e760:	681b      	ldr	r3, [r3, #0]
 801e762:	691b      	ldr	r3, [r3, #16]
 801e764:	f003 0320 	and.w	r3, r3, #32
 801e768:	2b20      	cmp	r3, #32
 801e76a:	d10e      	bne.n	801e78a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	681b      	ldr	r3, [r3, #0]
 801e770:	68db      	ldr	r3, [r3, #12]
 801e772:	f003 0320 	and.w	r3, r3, #32
 801e776:	2b20      	cmp	r3, #32
 801e778:	d107      	bne.n	801e78a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	681b      	ldr	r3, [r3, #0]
 801e77e:	f06f 0220 	mvn.w	r2, #32
 801e782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e784:	6878      	ldr	r0, [r7, #4]
 801e786:	f000 fed9 	bl	801f53c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	681b      	ldr	r3, [r3, #0]
 801e78e:	691b      	ldr	r3, [r3, #16]
 801e790:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e798:	d10f      	bne.n	801e7ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e79a:	687b      	ldr	r3, [r7, #4]
 801e79c:	681b      	ldr	r3, [r3, #0]
 801e79e:	68db      	ldr	r3, [r3, #12]
 801e7a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e7a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e7a8:	d107      	bne.n	801e7ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	681b      	ldr	r3, [r3, #0]
 801e7ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e7b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e7b4:	6878      	ldr	r0, [r7, #4]
 801e7b6:	f000 fedf 	bl	801f578 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	691b      	ldr	r3, [r3, #16]
 801e7c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e7c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e7c8:	d10f      	bne.n	801e7ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	681b      	ldr	r3, [r3, #0]
 801e7ce:	68db      	ldr	r3, [r3, #12]
 801e7d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e7d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e7d8:	d107      	bne.n	801e7ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e7da:	687b      	ldr	r3, [r7, #4]
 801e7dc:	681b      	ldr	r3, [r3, #0]
 801e7de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e7e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e7e4:	6878      	ldr	r0, [r7, #4]
 801e7e6:	f000 fed1 	bl	801f58c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	691b      	ldr	r3, [r3, #16]
 801e7f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e7f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e7f8:	d10f      	bne.n	801e81a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e7fa:	687b      	ldr	r3, [r7, #4]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	68db      	ldr	r3, [r3, #12]
 801e800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e804:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e808:	d107      	bne.n	801e81a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	681b      	ldr	r3, [r3, #0]
 801e80e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e814:	6878      	ldr	r0, [r7, #4]
 801e816:	f000 fec3 	bl	801f5a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	691b      	ldr	r3, [r3, #16]
 801e820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e824:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e828:	d10f      	bne.n	801e84a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	68db      	ldr	r3, [r3, #12]
 801e830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e838:	d107      	bne.n	801e84a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e83a:	687b      	ldr	r3, [r7, #4]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e844:	6878      	ldr	r0, [r7, #4]
 801e846:	f000 feb5 	bl	801f5b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e84a:	bf00      	nop
 801e84c:	3708      	adds	r7, #8
 801e84e:	46bd      	mov	sp, r7
 801e850:	bd80      	pop	{r7, pc}
	...

0801e854 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e854:	b580      	push	{r7, lr}
 801e856:	b086      	sub	sp, #24
 801e858:	af00      	add	r7, sp, #0
 801e85a:	60f8      	str	r0, [r7, #12]
 801e85c:	60b9      	str	r1, [r7, #8]
 801e85e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e860:	2300      	movs	r3, #0
 801e862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e86a:	2b01      	cmp	r3, #1
 801e86c:	d101      	bne.n	801e872 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e86e:	2302      	movs	r3, #2
 801e870:	e0ff      	b.n	801ea72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e872:	68fb      	ldr	r3, [r7, #12]
 801e874:	2201      	movs	r2, #1
 801e876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	2b14      	cmp	r3, #20
 801e87e:	f200 80f0 	bhi.w	801ea62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e882:	a201      	add	r2, pc, #4	; (adr r2, 801e888 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e888:	0801e8dd 	.word	0x0801e8dd
 801e88c:	0801ea63 	.word	0x0801ea63
 801e890:	0801ea63 	.word	0x0801ea63
 801e894:	0801ea63 	.word	0x0801ea63
 801e898:	0801e91d 	.word	0x0801e91d
 801e89c:	0801ea63 	.word	0x0801ea63
 801e8a0:	0801ea63 	.word	0x0801ea63
 801e8a4:	0801ea63 	.word	0x0801ea63
 801e8a8:	0801e95f 	.word	0x0801e95f
 801e8ac:	0801ea63 	.word	0x0801ea63
 801e8b0:	0801ea63 	.word	0x0801ea63
 801e8b4:	0801ea63 	.word	0x0801ea63
 801e8b8:	0801e99f 	.word	0x0801e99f
 801e8bc:	0801ea63 	.word	0x0801ea63
 801e8c0:	0801ea63 	.word	0x0801ea63
 801e8c4:	0801ea63 	.word	0x0801ea63
 801e8c8:	0801e9e1 	.word	0x0801e9e1
 801e8cc:	0801ea63 	.word	0x0801ea63
 801e8d0:	0801ea63 	.word	0x0801ea63
 801e8d4:	0801ea63 	.word	0x0801ea63
 801e8d8:	0801ea21 	.word	0x0801ea21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e8dc:	68fb      	ldr	r3, [r7, #12]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	68b9      	ldr	r1, [r7, #8]
 801e8e2:	4618      	mov	r0, r3
 801e8e4:	f000 f99a 	bl	801ec1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e8e8:	68fb      	ldr	r3, [r7, #12]
 801e8ea:	681b      	ldr	r3, [r3, #0]
 801e8ec:	699a      	ldr	r2, [r3, #24]
 801e8ee:	68fb      	ldr	r3, [r7, #12]
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	f042 0208 	orr.w	r2, r2, #8
 801e8f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e8f8:	68fb      	ldr	r3, [r7, #12]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	699a      	ldr	r2, [r3, #24]
 801e8fe:	68fb      	ldr	r3, [r7, #12]
 801e900:	681b      	ldr	r3, [r3, #0]
 801e902:	f022 0204 	bic.w	r2, r2, #4
 801e906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	681b      	ldr	r3, [r3, #0]
 801e90c:	6999      	ldr	r1, [r3, #24]
 801e90e:	68bb      	ldr	r3, [r7, #8]
 801e910:	691a      	ldr	r2, [r3, #16]
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	430a      	orrs	r2, r1
 801e918:	619a      	str	r2, [r3, #24]
      break;
 801e91a:	e0a5      	b.n	801ea68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e91c:	68fb      	ldr	r3, [r7, #12]
 801e91e:	681b      	ldr	r3, [r3, #0]
 801e920:	68b9      	ldr	r1, [r7, #8]
 801e922:	4618      	mov	r0, r3
 801e924:	f000 fa14 	bl	801ed50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e928:	68fb      	ldr	r3, [r7, #12]
 801e92a:	681b      	ldr	r3, [r3, #0]
 801e92c:	699a      	ldr	r2, [r3, #24]
 801e92e:	68fb      	ldr	r3, [r7, #12]
 801e930:	681b      	ldr	r3, [r3, #0]
 801e932:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e938:	68fb      	ldr	r3, [r7, #12]
 801e93a:	681b      	ldr	r3, [r3, #0]
 801e93c:	699a      	ldr	r2, [r3, #24]
 801e93e:	68fb      	ldr	r3, [r7, #12]
 801e940:	681b      	ldr	r3, [r3, #0]
 801e942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e948:	68fb      	ldr	r3, [r7, #12]
 801e94a:	681b      	ldr	r3, [r3, #0]
 801e94c:	6999      	ldr	r1, [r3, #24]
 801e94e:	68bb      	ldr	r3, [r7, #8]
 801e950:	691b      	ldr	r3, [r3, #16]
 801e952:	021a      	lsls	r2, r3, #8
 801e954:	68fb      	ldr	r3, [r7, #12]
 801e956:	681b      	ldr	r3, [r3, #0]
 801e958:	430a      	orrs	r2, r1
 801e95a:	619a      	str	r2, [r3, #24]
      break;
 801e95c:	e084      	b.n	801ea68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e95e:	68fb      	ldr	r3, [r7, #12]
 801e960:	681b      	ldr	r3, [r3, #0]
 801e962:	68b9      	ldr	r1, [r7, #8]
 801e964:	4618      	mov	r0, r3
 801e966:	f000 fa87 	bl	801ee78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e96a:	68fb      	ldr	r3, [r7, #12]
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	69da      	ldr	r2, [r3, #28]
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	681b      	ldr	r3, [r3, #0]
 801e974:	f042 0208 	orr.w	r2, r2, #8
 801e978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	681b      	ldr	r3, [r3, #0]
 801e97e:	69da      	ldr	r2, [r3, #28]
 801e980:	68fb      	ldr	r3, [r7, #12]
 801e982:	681b      	ldr	r3, [r3, #0]
 801e984:	f022 0204 	bic.w	r2, r2, #4
 801e988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e98a:	68fb      	ldr	r3, [r7, #12]
 801e98c:	681b      	ldr	r3, [r3, #0]
 801e98e:	69d9      	ldr	r1, [r3, #28]
 801e990:	68bb      	ldr	r3, [r7, #8]
 801e992:	691a      	ldr	r2, [r3, #16]
 801e994:	68fb      	ldr	r3, [r7, #12]
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	430a      	orrs	r2, r1
 801e99a:	61da      	str	r2, [r3, #28]
      break;
 801e99c:	e064      	b.n	801ea68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	68b9      	ldr	r1, [r7, #8]
 801e9a4:	4618      	mov	r0, r3
 801e9a6:	f000 faf9 	bl	801ef9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e9aa:	68fb      	ldr	r3, [r7, #12]
 801e9ac:	681b      	ldr	r3, [r3, #0]
 801e9ae:	69da      	ldr	r2, [r3, #28]
 801e9b0:	68fb      	ldr	r3, [r7, #12]
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e9b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e9ba:	68fb      	ldr	r3, [r7, #12]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	69da      	ldr	r2, [r3, #28]
 801e9c0:	68fb      	ldr	r3, [r7, #12]
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e9c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	69d9      	ldr	r1, [r3, #28]
 801e9d0:	68bb      	ldr	r3, [r7, #8]
 801e9d2:	691b      	ldr	r3, [r3, #16]
 801e9d4:	021a      	lsls	r2, r3, #8
 801e9d6:	68fb      	ldr	r3, [r7, #12]
 801e9d8:	681b      	ldr	r3, [r3, #0]
 801e9da:	430a      	orrs	r2, r1
 801e9dc:	61da      	str	r2, [r3, #28]
      break;
 801e9de:	e043      	b.n	801ea68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e9e0:	68fb      	ldr	r3, [r7, #12]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	68b9      	ldr	r1, [r7, #8]
 801e9e6:	4618      	mov	r0, r3
 801e9e8:	f000 fb6c 	bl	801f0c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e9f2:	68fb      	ldr	r3, [r7, #12]
 801e9f4:	681b      	ldr	r3, [r3, #0]
 801e9f6:	f042 0208 	orr.w	r2, r2, #8
 801e9fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	f022 0204 	bic.w	r2, r2, #4
 801ea0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	681b      	ldr	r3, [r3, #0]
 801ea10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801ea12:	68bb      	ldr	r3, [r7, #8]
 801ea14:	691a      	ldr	r2, [r3, #16]
 801ea16:	68fb      	ldr	r3, [r7, #12]
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	430a      	orrs	r2, r1
 801ea1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801ea1e:	e023      	b.n	801ea68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801ea20:	68fb      	ldr	r3, [r7, #12]
 801ea22:	681b      	ldr	r3, [r3, #0]
 801ea24:	68b9      	ldr	r1, [r7, #8]
 801ea26:	4618      	mov	r0, r3
 801ea28:	f000 fbb6 	bl	801f198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801ea2c:	68fb      	ldr	r3, [r7, #12]
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ea32:	68fb      	ldr	r3, [r7, #12]
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801ea3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801ea3c:	68fb      	ldr	r3, [r7, #12]
 801ea3e:	681b      	ldr	r3, [r3, #0]
 801ea40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ea42:	68fb      	ldr	r3, [r7, #12]
 801ea44:	681b      	ldr	r3, [r3, #0]
 801ea46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801ea4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801ea4c:	68fb      	ldr	r3, [r7, #12]
 801ea4e:	681b      	ldr	r3, [r3, #0]
 801ea50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801ea52:	68bb      	ldr	r3, [r7, #8]
 801ea54:	691b      	ldr	r3, [r3, #16]
 801ea56:	021a      	lsls	r2, r3, #8
 801ea58:	68fb      	ldr	r3, [r7, #12]
 801ea5a:	681b      	ldr	r3, [r3, #0]
 801ea5c:	430a      	orrs	r2, r1
 801ea5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801ea60:	e002      	b.n	801ea68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801ea62:	2301      	movs	r3, #1
 801ea64:	75fb      	strb	r3, [r7, #23]
      break;
 801ea66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801ea70:	7dfb      	ldrb	r3, [r7, #23]
}
 801ea72:	4618      	mov	r0, r3
 801ea74:	3718      	adds	r7, #24
 801ea76:	46bd      	mov	sp, r7
 801ea78:	bd80      	pop	{r7, pc}
 801ea7a:	bf00      	nop

0801ea7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ea7c:	b480      	push	{r7}
 801ea7e:	b083      	sub	sp, #12
 801ea80:	af00      	add	r7, sp, #0
 801ea82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801ea84:	bf00      	nop
 801ea86:	370c      	adds	r7, #12
 801ea88:	46bd      	mov	sp, r7
 801ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea8e:	4770      	bx	lr

0801ea90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801ea90:	b480      	push	{r7}
 801ea92:	b083      	sub	sp, #12
 801ea94:	af00      	add	r7, sp, #0
 801ea96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801ea98:	bf00      	nop
 801ea9a:	370c      	adds	r7, #12
 801ea9c:	46bd      	mov	sp, r7
 801ea9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaa2:	4770      	bx	lr

0801eaa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801eaa4:	b480      	push	{r7}
 801eaa6:	b083      	sub	sp, #12
 801eaa8:	af00      	add	r7, sp, #0
 801eaaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801eaac:	bf00      	nop
 801eaae:	370c      	adds	r7, #12
 801eab0:	46bd      	mov	sp, r7
 801eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eab6:	4770      	bx	lr

0801eab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801eab8:	b480      	push	{r7}
 801eaba:	b083      	sub	sp, #12
 801eabc:	af00      	add	r7, sp, #0
 801eabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801eac0:	bf00      	nop
 801eac2:	370c      	adds	r7, #12
 801eac4:	46bd      	mov	sp, r7
 801eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eaca:	4770      	bx	lr

0801eacc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801eacc:	b480      	push	{r7}
 801eace:	b083      	sub	sp, #12
 801ead0:	af00      	add	r7, sp, #0
 801ead2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801ead4:	bf00      	nop
 801ead6:	370c      	adds	r7, #12
 801ead8:	46bd      	mov	sp, r7
 801eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eade:	4770      	bx	lr

0801eae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801eae0:	b480      	push	{r7}
 801eae2:	b085      	sub	sp, #20
 801eae4:	af00      	add	r7, sp, #0
 801eae6:	6078      	str	r0, [r7, #4]
 801eae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	681b      	ldr	r3, [r3, #0]
 801eaee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	4a42      	ldr	r2, [pc, #264]	; (801ebfc <TIM_Base_SetConfig+0x11c>)
 801eaf4:	4293      	cmp	r3, r2
 801eaf6:	d013      	beq.n	801eb20 <TIM_Base_SetConfig+0x40>
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eafe:	d00f      	beq.n	801eb20 <TIM_Base_SetConfig+0x40>
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	4a3f      	ldr	r2, [pc, #252]	; (801ec00 <TIM_Base_SetConfig+0x120>)
 801eb04:	4293      	cmp	r3, r2
 801eb06:	d00b      	beq.n	801eb20 <TIM_Base_SetConfig+0x40>
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	4a3e      	ldr	r2, [pc, #248]	; (801ec04 <TIM_Base_SetConfig+0x124>)
 801eb0c:	4293      	cmp	r3, r2
 801eb0e:	d007      	beq.n	801eb20 <TIM_Base_SetConfig+0x40>
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	4a3d      	ldr	r2, [pc, #244]	; (801ec08 <TIM_Base_SetConfig+0x128>)
 801eb14:	4293      	cmp	r3, r2
 801eb16:	d003      	beq.n	801eb20 <TIM_Base_SetConfig+0x40>
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	4a3c      	ldr	r2, [pc, #240]	; (801ec0c <TIM_Base_SetConfig+0x12c>)
 801eb1c:	4293      	cmp	r3, r2
 801eb1e:	d108      	bne.n	801eb32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801eb20:	68fb      	ldr	r3, [r7, #12]
 801eb22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801eb26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801eb28:	683b      	ldr	r3, [r7, #0]
 801eb2a:	685b      	ldr	r3, [r3, #4]
 801eb2c:	68fa      	ldr	r2, [r7, #12]
 801eb2e:	4313      	orrs	r3, r2
 801eb30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	4a31      	ldr	r2, [pc, #196]	; (801ebfc <TIM_Base_SetConfig+0x11c>)
 801eb36:	4293      	cmp	r3, r2
 801eb38:	d01f      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eb40:	d01b      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	4a2e      	ldr	r2, [pc, #184]	; (801ec00 <TIM_Base_SetConfig+0x120>)
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d017      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	4a2d      	ldr	r2, [pc, #180]	; (801ec04 <TIM_Base_SetConfig+0x124>)
 801eb4e:	4293      	cmp	r3, r2
 801eb50:	d013      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb52:	687b      	ldr	r3, [r7, #4]
 801eb54:	4a2c      	ldr	r2, [pc, #176]	; (801ec08 <TIM_Base_SetConfig+0x128>)
 801eb56:	4293      	cmp	r3, r2
 801eb58:	d00f      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	4a2c      	ldr	r2, [pc, #176]	; (801ec10 <TIM_Base_SetConfig+0x130>)
 801eb5e:	4293      	cmp	r3, r2
 801eb60:	d00b      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	4a2b      	ldr	r2, [pc, #172]	; (801ec14 <TIM_Base_SetConfig+0x134>)
 801eb66:	4293      	cmp	r3, r2
 801eb68:	d007      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	4a2a      	ldr	r2, [pc, #168]	; (801ec18 <TIM_Base_SetConfig+0x138>)
 801eb6e:	4293      	cmp	r3, r2
 801eb70:	d003      	beq.n	801eb7a <TIM_Base_SetConfig+0x9a>
 801eb72:	687b      	ldr	r3, [r7, #4]
 801eb74:	4a25      	ldr	r2, [pc, #148]	; (801ec0c <TIM_Base_SetConfig+0x12c>)
 801eb76:	4293      	cmp	r3, r2
 801eb78:	d108      	bne.n	801eb8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801eb7a:	68fb      	ldr	r3, [r7, #12]
 801eb7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eb80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801eb82:	683b      	ldr	r3, [r7, #0]
 801eb84:	68db      	ldr	r3, [r3, #12]
 801eb86:	68fa      	ldr	r2, [r7, #12]
 801eb88:	4313      	orrs	r3, r2
 801eb8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801eb92:	683b      	ldr	r3, [r7, #0]
 801eb94:	695b      	ldr	r3, [r3, #20]
 801eb96:	4313      	orrs	r3, r2
 801eb98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	68fa      	ldr	r2, [r7, #12]
 801eb9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801eba0:	683b      	ldr	r3, [r7, #0]
 801eba2:	689a      	ldr	r2, [r3, #8]
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801eba8:	683b      	ldr	r3, [r7, #0]
 801ebaa:	681a      	ldr	r2, [r3, #0]
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	4a12      	ldr	r2, [pc, #72]	; (801ebfc <TIM_Base_SetConfig+0x11c>)
 801ebb4:	4293      	cmp	r3, r2
 801ebb6:	d013      	beq.n	801ebe0 <TIM_Base_SetConfig+0x100>
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	4a13      	ldr	r2, [pc, #76]	; (801ec08 <TIM_Base_SetConfig+0x128>)
 801ebbc:	4293      	cmp	r3, r2
 801ebbe:	d00f      	beq.n	801ebe0 <TIM_Base_SetConfig+0x100>
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	4a13      	ldr	r2, [pc, #76]	; (801ec10 <TIM_Base_SetConfig+0x130>)
 801ebc4:	4293      	cmp	r3, r2
 801ebc6:	d00b      	beq.n	801ebe0 <TIM_Base_SetConfig+0x100>
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	4a12      	ldr	r2, [pc, #72]	; (801ec14 <TIM_Base_SetConfig+0x134>)
 801ebcc:	4293      	cmp	r3, r2
 801ebce:	d007      	beq.n	801ebe0 <TIM_Base_SetConfig+0x100>
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	4a11      	ldr	r2, [pc, #68]	; (801ec18 <TIM_Base_SetConfig+0x138>)
 801ebd4:	4293      	cmp	r3, r2
 801ebd6:	d003      	beq.n	801ebe0 <TIM_Base_SetConfig+0x100>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	4a0c      	ldr	r2, [pc, #48]	; (801ec0c <TIM_Base_SetConfig+0x12c>)
 801ebdc:	4293      	cmp	r3, r2
 801ebde:	d103      	bne.n	801ebe8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801ebe0:	683b      	ldr	r3, [r7, #0]
 801ebe2:	691a      	ldr	r2, [r3, #16]
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	2201      	movs	r2, #1
 801ebec:	615a      	str	r2, [r3, #20]
}
 801ebee:	bf00      	nop
 801ebf0:	3714      	adds	r7, #20
 801ebf2:	46bd      	mov	sp, r7
 801ebf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebf8:	4770      	bx	lr
 801ebfa:	bf00      	nop
 801ebfc:	40012c00 	.word	0x40012c00
 801ec00:	40000400 	.word	0x40000400
 801ec04:	40000800 	.word	0x40000800
 801ec08:	40013400 	.word	0x40013400
 801ec0c:	40015000 	.word	0x40015000
 801ec10:	40014000 	.word	0x40014000
 801ec14:	40014400 	.word	0x40014400
 801ec18:	40014800 	.word	0x40014800

0801ec1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ec1c:	b480      	push	{r7}
 801ec1e:	b087      	sub	sp, #28
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	6078      	str	r0, [r7, #4]
 801ec24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ec26:	687b      	ldr	r3, [r7, #4]
 801ec28:	6a1b      	ldr	r3, [r3, #32]
 801ec2a:	f023 0201 	bic.w	r2, r3, #1
 801ec2e:	687b      	ldr	r3, [r7, #4]
 801ec30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	6a1b      	ldr	r3, [r3, #32]
 801ec36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	685b      	ldr	r3, [r3, #4]
 801ec3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	699b      	ldr	r3, [r3, #24]
 801ec42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ec44:	68fb      	ldr	r3, [r7, #12]
 801ec46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ec4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ec4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ec50:	68fb      	ldr	r3, [r7, #12]
 801ec52:	f023 0303 	bic.w	r3, r3, #3
 801ec56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ec58:	683b      	ldr	r3, [r7, #0]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	68fa      	ldr	r2, [r7, #12]
 801ec5e:	4313      	orrs	r3, r2
 801ec60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ec62:	697b      	ldr	r3, [r7, #20]
 801ec64:	f023 0302 	bic.w	r3, r3, #2
 801ec68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801ec6a:	683b      	ldr	r3, [r7, #0]
 801ec6c:	689b      	ldr	r3, [r3, #8]
 801ec6e:	697a      	ldr	r2, [r7, #20]
 801ec70:	4313      	orrs	r3, r2
 801ec72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	4a30      	ldr	r2, [pc, #192]	; (801ed38 <TIM_OC1_SetConfig+0x11c>)
 801ec78:	4293      	cmp	r3, r2
 801ec7a:	d013      	beq.n	801eca4 <TIM_OC1_SetConfig+0x88>
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	4a2f      	ldr	r2, [pc, #188]	; (801ed3c <TIM_OC1_SetConfig+0x120>)
 801ec80:	4293      	cmp	r3, r2
 801ec82:	d00f      	beq.n	801eca4 <TIM_OC1_SetConfig+0x88>
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	4a2e      	ldr	r2, [pc, #184]	; (801ed40 <TIM_OC1_SetConfig+0x124>)
 801ec88:	4293      	cmp	r3, r2
 801ec8a:	d00b      	beq.n	801eca4 <TIM_OC1_SetConfig+0x88>
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	4a2d      	ldr	r2, [pc, #180]	; (801ed44 <TIM_OC1_SetConfig+0x128>)
 801ec90:	4293      	cmp	r3, r2
 801ec92:	d007      	beq.n	801eca4 <TIM_OC1_SetConfig+0x88>
 801ec94:	687b      	ldr	r3, [r7, #4]
 801ec96:	4a2c      	ldr	r2, [pc, #176]	; (801ed48 <TIM_OC1_SetConfig+0x12c>)
 801ec98:	4293      	cmp	r3, r2
 801ec9a:	d003      	beq.n	801eca4 <TIM_OC1_SetConfig+0x88>
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	4a2b      	ldr	r2, [pc, #172]	; (801ed4c <TIM_OC1_SetConfig+0x130>)
 801eca0:	4293      	cmp	r3, r2
 801eca2:	d10c      	bne.n	801ecbe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801eca4:	697b      	ldr	r3, [r7, #20]
 801eca6:	f023 0308 	bic.w	r3, r3, #8
 801ecaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801ecac:	683b      	ldr	r3, [r7, #0]
 801ecae:	68db      	ldr	r3, [r3, #12]
 801ecb0:	697a      	ldr	r2, [r7, #20]
 801ecb2:	4313      	orrs	r3, r2
 801ecb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801ecb6:	697b      	ldr	r3, [r7, #20]
 801ecb8:	f023 0304 	bic.w	r3, r3, #4
 801ecbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	4a1d      	ldr	r2, [pc, #116]	; (801ed38 <TIM_OC1_SetConfig+0x11c>)
 801ecc2:	4293      	cmp	r3, r2
 801ecc4:	d013      	beq.n	801ecee <TIM_OC1_SetConfig+0xd2>
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	4a1c      	ldr	r2, [pc, #112]	; (801ed3c <TIM_OC1_SetConfig+0x120>)
 801ecca:	4293      	cmp	r3, r2
 801eccc:	d00f      	beq.n	801ecee <TIM_OC1_SetConfig+0xd2>
 801ecce:	687b      	ldr	r3, [r7, #4]
 801ecd0:	4a1b      	ldr	r2, [pc, #108]	; (801ed40 <TIM_OC1_SetConfig+0x124>)
 801ecd2:	4293      	cmp	r3, r2
 801ecd4:	d00b      	beq.n	801ecee <TIM_OC1_SetConfig+0xd2>
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	4a1a      	ldr	r2, [pc, #104]	; (801ed44 <TIM_OC1_SetConfig+0x128>)
 801ecda:	4293      	cmp	r3, r2
 801ecdc:	d007      	beq.n	801ecee <TIM_OC1_SetConfig+0xd2>
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	4a19      	ldr	r2, [pc, #100]	; (801ed48 <TIM_OC1_SetConfig+0x12c>)
 801ece2:	4293      	cmp	r3, r2
 801ece4:	d003      	beq.n	801ecee <TIM_OC1_SetConfig+0xd2>
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	4a18      	ldr	r2, [pc, #96]	; (801ed4c <TIM_OC1_SetConfig+0x130>)
 801ecea:	4293      	cmp	r3, r2
 801ecec:	d111      	bne.n	801ed12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801ecee:	693b      	ldr	r3, [r7, #16]
 801ecf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ecf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801ecf6:	693b      	ldr	r3, [r7, #16]
 801ecf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ecfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	695b      	ldr	r3, [r3, #20]
 801ed02:	693a      	ldr	r2, [r7, #16]
 801ed04:	4313      	orrs	r3, r2
 801ed06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801ed08:	683b      	ldr	r3, [r7, #0]
 801ed0a:	699b      	ldr	r3, [r3, #24]
 801ed0c:	693a      	ldr	r2, [r7, #16]
 801ed0e:	4313      	orrs	r3, r2
 801ed10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	693a      	ldr	r2, [r7, #16]
 801ed16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	68fa      	ldr	r2, [r7, #12]
 801ed1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801ed1e:	683b      	ldr	r3, [r7, #0]
 801ed20:	685a      	ldr	r2, [r3, #4]
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	697a      	ldr	r2, [r7, #20]
 801ed2a:	621a      	str	r2, [r3, #32]
}
 801ed2c:	bf00      	nop
 801ed2e:	371c      	adds	r7, #28
 801ed30:	46bd      	mov	sp, r7
 801ed32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed36:	4770      	bx	lr
 801ed38:	40012c00 	.word	0x40012c00
 801ed3c:	40013400 	.word	0x40013400
 801ed40:	40014000 	.word	0x40014000
 801ed44:	40014400 	.word	0x40014400
 801ed48:	40014800 	.word	0x40014800
 801ed4c:	40015000 	.word	0x40015000

0801ed50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ed50:	b480      	push	{r7}
 801ed52:	b087      	sub	sp, #28
 801ed54:	af00      	add	r7, sp, #0
 801ed56:	6078      	str	r0, [r7, #4]
 801ed58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	6a1b      	ldr	r3, [r3, #32]
 801ed5e:	f023 0210 	bic.w	r2, r3, #16
 801ed62:	687b      	ldr	r3, [r7, #4]
 801ed64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	6a1b      	ldr	r3, [r3, #32]
 801ed6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	685b      	ldr	r3, [r3, #4]
 801ed70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	699b      	ldr	r3, [r3, #24]
 801ed76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ed78:	68fb      	ldr	r3, [r7, #12]
 801ed7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ed7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ed82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ed8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ed8c:	683b      	ldr	r3, [r7, #0]
 801ed8e:	681b      	ldr	r3, [r3, #0]
 801ed90:	021b      	lsls	r3, r3, #8
 801ed92:	68fa      	ldr	r2, [r7, #12]
 801ed94:	4313      	orrs	r3, r2
 801ed96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ed98:	697b      	ldr	r3, [r7, #20]
 801ed9a:	f023 0320 	bic.w	r3, r3, #32
 801ed9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801eda0:	683b      	ldr	r3, [r7, #0]
 801eda2:	689b      	ldr	r3, [r3, #8]
 801eda4:	011b      	lsls	r3, r3, #4
 801eda6:	697a      	ldr	r2, [r7, #20]
 801eda8:	4313      	orrs	r3, r2
 801edaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	4a2c      	ldr	r2, [pc, #176]	; (801ee60 <TIM_OC2_SetConfig+0x110>)
 801edb0:	4293      	cmp	r3, r2
 801edb2:	d007      	beq.n	801edc4 <TIM_OC2_SetConfig+0x74>
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	4a2b      	ldr	r2, [pc, #172]	; (801ee64 <TIM_OC2_SetConfig+0x114>)
 801edb8:	4293      	cmp	r3, r2
 801edba:	d003      	beq.n	801edc4 <TIM_OC2_SetConfig+0x74>
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	4a2a      	ldr	r2, [pc, #168]	; (801ee68 <TIM_OC2_SetConfig+0x118>)
 801edc0:	4293      	cmp	r3, r2
 801edc2:	d10d      	bne.n	801ede0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801edc4:	697b      	ldr	r3, [r7, #20]
 801edc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801edca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	68db      	ldr	r3, [r3, #12]
 801edd0:	011b      	lsls	r3, r3, #4
 801edd2:	697a      	ldr	r2, [r7, #20]
 801edd4:	4313      	orrs	r3, r2
 801edd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801edd8:	697b      	ldr	r3, [r7, #20]
 801edda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801edde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ede0:	687b      	ldr	r3, [r7, #4]
 801ede2:	4a1f      	ldr	r2, [pc, #124]	; (801ee60 <TIM_OC2_SetConfig+0x110>)
 801ede4:	4293      	cmp	r3, r2
 801ede6:	d013      	beq.n	801ee10 <TIM_OC2_SetConfig+0xc0>
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	4a1e      	ldr	r2, [pc, #120]	; (801ee64 <TIM_OC2_SetConfig+0x114>)
 801edec:	4293      	cmp	r3, r2
 801edee:	d00f      	beq.n	801ee10 <TIM_OC2_SetConfig+0xc0>
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	4a1e      	ldr	r2, [pc, #120]	; (801ee6c <TIM_OC2_SetConfig+0x11c>)
 801edf4:	4293      	cmp	r3, r2
 801edf6:	d00b      	beq.n	801ee10 <TIM_OC2_SetConfig+0xc0>
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	4a1d      	ldr	r2, [pc, #116]	; (801ee70 <TIM_OC2_SetConfig+0x120>)
 801edfc:	4293      	cmp	r3, r2
 801edfe:	d007      	beq.n	801ee10 <TIM_OC2_SetConfig+0xc0>
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	4a1c      	ldr	r2, [pc, #112]	; (801ee74 <TIM_OC2_SetConfig+0x124>)
 801ee04:	4293      	cmp	r3, r2
 801ee06:	d003      	beq.n	801ee10 <TIM_OC2_SetConfig+0xc0>
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	4a17      	ldr	r2, [pc, #92]	; (801ee68 <TIM_OC2_SetConfig+0x118>)
 801ee0c:	4293      	cmp	r3, r2
 801ee0e:	d113      	bne.n	801ee38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ee10:	693b      	ldr	r3, [r7, #16]
 801ee12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ee16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ee18:	693b      	ldr	r3, [r7, #16]
 801ee1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ee1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ee20:	683b      	ldr	r3, [r7, #0]
 801ee22:	695b      	ldr	r3, [r3, #20]
 801ee24:	009b      	lsls	r3, r3, #2
 801ee26:	693a      	ldr	r2, [r7, #16]
 801ee28:	4313      	orrs	r3, r2
 801ee2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ee2c:	683b      	ldr	r3, [r7, #0]
 801ee2e:	699b      	ldr	r3, [r3, #24]
 801ee30:	009b      	lsls	r3, r3, #2
 801ee32:	693a      	ldr	r2, [r7, #16]
 801ee34:	4313      	orrs	r3, r2
 801ee36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	693a      	ldr	r2, [r7, #16]
 801ee3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	68fa      	ldr	r2, [r7, #12]
 801ee42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ee44:	683b      	ldr	r3, [r7, #0]
 801ee46:	685a      	ldr	r2, [r3, #4]
 801ee48:	687b      	ldr	r3, [r7, #4]
 801ee4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	697a      	ldr	r2, [r7, #20]
 801ee50:	621a      	str	r2, [r3, #32]
}
 801ee52:	bf00      	nop
 801ee54:	371c      	adds	r7, #28
 801ee56:	46bd      	mov	sp, r7
 801ee58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee5c:	4770      	bx	lr
 801ee5e:	bf00      	nop
 801ee60:	40012c00 	.word	0x40012c00
 801ee64:	40013400 	.word	0x40013400
 801ee68:	40015000 	.word	0x40015000
 801ee6c:	40014000 	.word	0x40014000
 801ee70:	40014400 	.word	0x40014400
 801ee74:	40014800 	.word	0x40014800

0801ee78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ee78:	b480      	push	{r7}
 801ee7a:	b087      	sub	sp, #28
 801ee7c:	af00      	add	r7, sp, #0
 801ee7e:	6078      	str	r0, [r7, #4]
 801ee80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	6a1b      	ldr	r3, [r3, #32]
 801ee86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ee8a:	687b      	ldr	r3, [r7, #4]
 801ee8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	6a1b      	ldr	r3, [r3, #32]
 801ee92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	685b      	ldr	r3, [r3, #4]
 801ee98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	69db      	ldr	r3, [r3, #28]
 801ee9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801eea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801eeaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801eeac:	68fb      	ldr	r3, [r7, #12]
 801eeae:	f023 0303 	bic.w	r3, r3, #3
 801eeb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801eeb4:	683b      	ldr	r3, [r7, #0]
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	68fa      	ldr	r2, [r7, #12]
 801eeba:	4313      	orrs	r3, r2
 801eebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801eebe:	697b      	ldr	r3, [r7, #20]
 801eec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801eec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801eec6:	683b      	ldr	r3, [r7, #0]
 801eec8:	689b      	ldr	r3, [r3, #8]
 801eeca:	021b      	lsls	r3, r3, #8
 801eecc:	697a      	ldr	r2, [r7, #20]
 801eece:	4313      	orrs	r3, r2
 801eed0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801eed2:	687b      	ldr	r3, [r7, #4]
 801eed4:	4a2b      	ldr	r2, [pc, #172]	; (801ef84 <TIM_OC3_SetConfig+0x10c>)
 801eed6:	4293      	cmp	r3, r2
 801eed8:	d007      	beq.n	801eeea <TIM_OC3_SetConfig+0x72>
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	4a2a      	ldr	r2, [pc, #168]	; (801ef88 <TIM_OC3_SetConfig+0x110>)
 801eede:	4293      	cmp	r3, r2
 801eee0:	d003      	beq.n	801eeea <TIM_OC3_SetConfig+0x72>
 801eee2:	687b      	ldr	r3, [r7, #4]
 801eee4:	4a29      	ldr	r2, [pc, #164]	; (801ef8c <TIM_OC3_SetConfig+0x114>)
 801eee6:	4293      	cmp	r3, r2
 801eee8:	d10d      	bne.n	801ef06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801eeea:	697b      	ldr	r3, [r7, #20]
 801eeec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801eef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	68db      	ldr	r3, [r3, #12]
 801eef6:	021b      	lsls	r3, r3, #8
 801eef8:	697a      	ldr	r2, [r7, #20]
 801eefa:	4313      	orrs	r3, r2
 801eefc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801eefe:	697b      	ldr	r3, [r7, #20]
 801ef00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ef04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	4a1e      	ldr	r2, [pc, #120]	; (801ef84 <TIM_OC3_SetConfig+0x10c>)
 801ef0a:	4293      	cmp	r3, r2
 801ef0c:	d013      	beq.n	801ef36 <TIM_OC3_SetConfig+0xbe>
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	4a1d      	ldr	r2, [pc, #116]	; (801ef88 <TIM_OC3_SetConfig+0x110>)
 801ef12:	4293      	cmp	r3, r2
 801ef14:	d00f      	beq.n	801ef36 <TIM_OC3_SetConfig+0xbe>
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	4a1d      	ldr	r2, [pc, #116]	; (801ef90 <TIM_OC3_SetConfig+0x118>)
 801ef1a:	4293      	cmp	r3, r2
 801ef1c:	d00b      	beq.n	801ef36 <TIM_OC3_SetConfig+0xbe>
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	4a1c      	ldr	r2, [pc, #112]	; (801ef94 <TIM_OC3_SetConfig+0x11c>)
 801ef22:	4293      	cmp	r3, r2
 801ef24:	d007      	beq.n	801ef36 <TIM_OC3_SetConfig+0xbe>
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	4a1b      	ldr	r2, [pc, #108]	; (801ef98 <TIM_OC3_SetConfig+0x120>)
 801ef2a:	4293      	cmp	r3, r2
 801ef2c:	d003      	beq.n	801ef36 <TIM_OC3_SetConfig+0xbe>
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	4a16      	ldr	r2, [pc, #88]	; (801ef8c <TIM_OC3_SetConfig+0x114>)
 801ef32:	4293      	cmp	r3, r2
 801ef34:	d113      	bne.n	801ef5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ef36:	693b      	ldr	r3, [r7, #16]
 801ef38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ef3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ef3e:	693b      	ldr	r3, [r7, #16]
 801ef40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ef44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ef46:	683b      	ldr	r3, [r7, #0]
 801ef48:	695b      	ldr	r3, [r3, #20]
 801ef4a:	011b      	lsls	r3, r3, #4
 801ef4c:	693a      	ldr	r2, [r7, #16]
 801ef4e:	4313      	orrs	r3, r2
 801ef50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ef52:	683b      	ldr	r3, [r7, #0]
 801ef54:	699b      	ldr	r3, [r3, #24]
 801ef56:	011b      	lsls	r3, r3, #4
 801ef58:	693a      	ldr	r2, [r7, #16]
 801ef5a:	4313      	orrs	r3, r2
 801ef5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	693a      	ldr	r2, [r7, #16]
 801ef62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ef64:	687b      	ldr	r3, [r7, #4]
 801ef66:	68fa      	ldr	r2, [r7, #12]
 801ef68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801ef6a:	683b      	ldr	r3, [r7, #0]
 801ef6c:	685a      	ldr	r2, [r3, #4]
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	697a      	ldr	r2, [r7, #20]
 801ef76:	621a      	str	r2, [r3, #32]
}
 801ef78:	bf00      	nop
 801ef7a:	371c      	adds	r7, #28
 801ef7c:	46bd      	mov	sp, r7
 801ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef82:	4770      	bx	lr
 801ef84:	40012c00 	.word	0x40012c00
 801ef88:	40013400 	.word	0x40013400
 801ef8c:	40015000 	.word	0x40015000
 801ef90:	40014000 	.word	0x40014000
 801ef94:	40014400 	.word	0x40014400
 801ef98:	40014800 	.word	0x40014800

0801ef9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ef9c:	b480      	push	{r7}
 801ef9e:	b087      	sub	sp, #28
 801efa0:	af00      	add	r7, sp, #0
 801efa2:	6078      	str	r0, [r7, #4]
 801efa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	6a1b      	ldr	r3, [r3, #32]
 801efaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801efb2:	687b      	ldr	r3, [r7, #4]
 801efb4:	6a1b      	ldr	r3, [r3, #32]
 801efb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	685b      	ldr	r3, [r3, #4]
 801efbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	69db      	ldr	r3, [r3, #28]
 801efc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801efc4:	68fb      	ldr	r3, [r7, #12]
 801efc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801efca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801efce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801efd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801efd8:	683b      	ldr	r3, [r7, #0]
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	021b      	lsls	r3, r3, #8
 801efde:	68fa      	ldr	r2, [r7, #12]
 801efe0:	4313      	orrs	r3, r2
 801efe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801efe4:	697b      	ldr	r3, [r7, #20]
 801efe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801efea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801efec:	683b      	ldr	r3, [r7, #0]
 801efee:	689b      	ldr	r3, [r3, #8]
 801eff0:	031b      	lsls	r3, r3, #12
 801eff2:	697a      	ldr	r2, [r7, #20]
 801eff4:	4313      	orrs	r3, r2
 801eff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	4a2c      	ldr	r2, [pc, #176]	; (801f0ac <TIM_OC4_SetConfig+0x110>)
 801effc:	4293      	cmp	r3, r2
 801effe:	d007      	beq.n	801f010 <TIM_OC4_SetConfig+0x74>
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	4a2b      	ldr	r2, [pc, #172]	; (801f0b0 <TIM_OC4_SetConfig+0x114>)
 801f004:	4293      	cmp	r3, r2
 801f006:	d003      	beq.n	801f010 <TIM_OC4_SetConfig+0x74>
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	4a2a      	ldr	r2, [pc, #168]	; (801f0b4 <TIM_OC4_SetConfig+0x118>)
 801f00c:	4293      	cmp	r3, r2
 801f00e:	d10d      	bne.n	801f02c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801f010:	697b      	ldr	r3, [r7, #20]
 801f012:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801f018:	683b      	ldr	r3, [r7, #0]
 801f01a:	68db      	ldr	r3, [r3, #12]
 801f01c:	031b      	lsls	r3, r3, #12
 801f01e:	697a      	ldr	r2, [r7, #20]
 801f020:	4313      	orrs	r3, r2
 801f022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801f024:	697b      	ldr	r3, [r7, #20]
 801f026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f02a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	4a1f      	ldr	r2, [pc, #124]	; (801f0ac <TIM_OC4_SetConfig+0x110>)
 801f030:	4293      	cmp	r3, r2
 801f032:	d013      	beq.n	801f05c <TIM_OC4_SetConfig+0xc0>
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	4a1e      	ldr	r2, [pc, #120]	; (801f0b0 <TIM_OC4_SetConfig+0x114>)
 801f038:	4293      	cmp	r3, r2
 801f03a:	d00f      	beq.n	801f05c <TIM_OC4_SetConfig+0xc0>
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	4a1e      	ldr	r2, [pc, #120]	; (801f0b8 <TIM_OC4_SetConfig+0x11c>)
 801f040:	4293      	cmp	r3, r2
 801f042:	d00b      	beq.n	801f05c <TIM_OC4_SetConfig+0xc0>
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	4a1d      	ldr	r2, [pc, #116]	; (801f0bc <TIM_OC4_SetConfig+0x120>)
 801f048:	4293      	cmp	r3, r2
 801f04a:	d007      	beq.n	801f05c <TIM_OC4_SetConfig+0xc0>
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	4a1c      	ldr	r2, [pc, #112]	; (801f0c0 <TIM_OC4_SetConfig+0x124>)
 801f050:	4293      	cmp	r3, r2
 801f052:	d003      	beq.n	801f05c <TIM_OC4_SetConfig+0xc0>
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	4a17      	ldr	r2, [pc, #92]	; (801f0b4 <TIM_OC4_SetConfig+0x118>)
 801f058:	4293      	cmp	r3, r2
 801f05a:	d113      	bne.n	801f084 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801f05c:	693b      	ldr	r3, [r7, #16]
 801f05e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f062:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801f064:	693b      	ldr	r3, [r7, #16]
 801f066:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f06a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801f06c:	683b      	ldr	r3, [r7, #0]
 801f06e:	695b      	ldr	r3, [r3, #20]
 801f070:	019b      	lsls	r3, r3, #6
 801f072:	693a      	ldr	r2, [r7, #16]
 801f074:	4313      	orrs	r3, r2
 801f076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801f078:	683b      	ldr	r3, [r7, #0]
 801f07a:	699b      	ldr	r3, [r3, #24]
 801f07c:	019b      	lsls	r3, r3, #6
 801f07e:	693a      	ldr	r2, [r7, #16]
 801f080:	4313      	orrs	r3, r2
 801f082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	693a      	ldr	r2, [r7, #16]
 801f088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	68fa      	ldr	r2, [r7, #12]
 801f08e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f090:	683b      	ldr	r3, [r7, #0]
 801f092:	685a      	ldr	r2, [r3, #4]
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	697a      	ldr	r2, [r7, #20]
 801f09c:	621a      	str	r2, [r3, #32]
}
 801f09e:	bf00      	nop
 801f0a0:	371c      	adds	r7, #28
 801f0a2:	46bd      	mov	sp, r7
 801f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0a8:	4770      	bx	lr
 801f0aa:	bf00      	nop
 801f0ac:	40012c00 	.word	0x40012c00
 801f0b0:	40013400 	.word	0x40013400
 801f0b4:	40015000 	.word	0x40015000
 801f0b8:	40014000 	.word	0x40014000
 801f0bc:	40014400 	.word	0x40014400
 801f0c0:	40014800 	.word	0x40014800

0801f0c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f0c4:	b480      	push	{r7}
 801f0c6:	b087      	sub	sp, #28
 801f0c8:	af00      	add	r7, sp, #0
 801f0ca:	6078      	str	r0, [r7, #4]
 801f0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	6a1b      	ldr	r3, [r3, #32]
 801f0d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801f0d6:	687b      	ldr	r3, [r7, #4]
 801f0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f0da:	687b      	ldr	r3, [r7, #4]
 801f0dc:	6a1b      	ldr	r3, [r3, #32]
 801f0de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f0e0:	687b      	ldr	r3, [r7, #4]
 801f0e2:	685b      	ldr	r3, [r3, #4]
 801f0e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f0e6:	687b      	ldr	r3, [r7, #4]
 801f0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801f0ec:	68fb      	ldr	r3, [r7, #12]
 801f0ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f0f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f0f8:	683b      	ldr	r3, [r7, #0]
 801f0fa:	681b      	ldr	r3, [r3, #0]
 801f0fc:	68fa      	ldr	r2, [r7, #12]
 801f0fe:	4313      	orrs	r3, r2
 801f100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801f102:	693b      	ldr	r3, [r7, #16]
 801f104:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801f108:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801f10a:	683b      	ldr	r3, [r7, #0]
 801f10c:	689b      	ldr	r3, [r3, #8]
 801f10e:	041b      	lsls	r3, r3, #16
 801f110:	693a      	ldr	r2, [r7, #16]
 801f112:	4313      	orrs	r3, r2
 801f114:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f116:	687b      	ldr	r3, [r7, #4]
 801f118:	4a19      	ldr	r2, [pc, #100]	; (801f180 <TIM_OC5_SetConfig+0xbc>)
 801f11a:	4293      	cmp	r3, r2
 801f11c:	d013      	beq.n	801f146 <TIM_OC5_SetConfig+0x82>
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	4a18      	ldr	r2, [pc, #96]	; (801f184 <TIM_OC5_SetConfig+0xc0>)
 801f122:	4293      	cmp	r3, r2
 801f124:	d00f      	beq.n	801f146 <TIM_OC5_SetConfig+0x82>
 801f126:	687b      	ldr	r3, [r7, #4]
 801f128:	4a17      	ldr	r2, [pc, #92]	; (801f188 <TIM_OC5_SetConfig+0xc4>)
 801f12a:	4293      	cmp	r3, r2
 801f12c:	d00b      	beq.n	801f146 <TIM_OC5_SetConfig+0x82>
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	4a16      	ldr	r2, [pc, #88]	; (801f18c <TIM_OC5_SetConfig+0xc8>)
 801f132:	4293      	cmp	r3, r2
 801f134:	d007      	beq.n	801f146 <TIM_OC5_SetConfig+0x82>
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	4a15      	ldr	r2, [pc, #84]	; (801f190 <TIM_OC5_SetConfig+0xcc>)
 801f13a:	4293      	cmp	r3, r2
 801f13c:	d003      	beq.n	801f146 <TIM_OC5_SetConfig+0x82>
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	4a14      	ldr	r2, [pc, #80]	; (801f194 <TIM_OC5_SetConfig+0xd0>)
 801f142:	4293      	cmp	r3, r2
 801f144:	d109      	bne.n	801f15a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801f146:	697b      	ldr	r3, [r7, #20]
 801f148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f14c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801f14e:	683b      	ldr	r3, [r7, #0]
 801f150:	695b      	ldr	r3, [r3, #20]
 801f152:	021b      	lsls	r3, r3, #8
 801f154:	697a      	ldr	r2, [r7, #20]
 801f156:	4313      	orrs	r3, r2
 801f158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	697a      	ldr	r2, [r7, #20]
 801f15e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f160:	687b      	ldr	r3, [r7, #4]
 801f162:	68fa      	ldr	r2, [r7, #12]
 801f164:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801f166:	683b      	ldr	r3, [r7, #0]
 801f168:	685a      	ldr	r2, [r3, #4]
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f16e:	687b      	ldr	r3, [r7, #4]
 801f170:	693a      	ldr	r2, [r7, #16]
 801f172:	621a      	str	r2, [r3, #32]
}
 801f174:	bf00      	nop
 801f176:	371c      	adds	r7, #28
 801f178:	46bd      	mov	sp, r7
 801f17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f17e:	4770      	bx	lr
 801f180:	40012c00 	.word	0x40012c00
 801f184:	40013400 	.word	0x40013400
 801f188:	40014000 	.word	0x40014000
 801f18c:	40014400 	.word	0x40014400
 801f190:	40014800 	.word	0x40014800
 801f194:	40015000 	.word	0x40015000

0801f198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f198:	b480      	push	{r7}
 801f19a:	b087      	sub	sp, #28
 801f19c:	af00      	add	r7, sp, #0
 801f19e:	6078      	str	r0, [r7, #4]
 801f1a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	6a1b      	ldr	r3, [r3, #32]
 801f1a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	6a1b      	ldr	r3, [r3, #32]
 801f1b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	685b      	ldr	r3, [r3, #4]
 801f1b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f1be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801f1c0:	68fb      	ldr	r3, [r7, #12]
 801f1c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f1c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f1ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f1cc:	683b      	ldr	r3, [r7, #0]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	021b      	lsls	r3, r3, #8
 801f1d2:	68fa      	ldr	r2, [r7, #12]
 801f1d4:	4313      	orrs	r3, r2
 801f1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801f1d8:	693b      	ldr	r3, [r7, #16]
 801f1da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f1de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801f1e0:	683b      	ldr	r3, [r7, #0]
 801f1e2:	689b      	ldr	r3, [r3, #8]
 801f1e4:	051b      	lsls	r3, r3, #20
 801f1e6:	693a      	ldr	r2, [r7, #16]
 801f1e8:	4313      	orrs	r3, r2
 801f1ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	4a1a      	ldr	r2, [pc, #104]	; (801f258 <TIM_OC6_SetConfig+0xc0>)
 801f1f0:	4293      	cmp	r3, r2
 801f1f2:	d013      	beq.n	801f21c <TIM_OC6_SetConfig+0x84>
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	4a19      	ldr	r2, [pc, #100]	; (801f25c <TIM_OC6_SetConfig+0xc4>)
 801f1f8:	4293      	cmp	r3, r2
 801f1fa:	d00f      	beq.n	801f21c <TIM_OC6_SetConfig+0x84>
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	4a18      	ldr	r2, [pc, #96]	; (801f260 <TIM_OC6_SetConfig+0xc8>)
 801f200:	4293      	cmp	r3, r2
 801f202:	d00b      	beq.n	801f21c <TIM_OC6_SetConfig+0x84>
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	4a17      	ldr	r2, [pc, #92]	; (801f264 <TIM_OC6_SetConfig+0xcc>)
 801f208:	4293      	cmp	r3, r2
 801f20a:	d007      	beq.n	801f21c <TIM_OC6_SetConfig+0x84>
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	4a16      	ldr	r2, [pc, #88]	; (801f268 <TIM_OC6_SetConfig+0xd0>)
 801f210:	4293      	cmp	r3, r2
 801f212:	d003      	beq.n	801f21c <TIM_OC6_SetConfig+0x84>
 801f214:	687b      	ldr	r3, [r7, #4]
 801f216:	4a15      	ldr	r2, [pc, #84]	; (801f26c <TIM_OC6_SetConfig+0xd4>)
 801f218:	4293      	cmp	r3, r2
 801f21a:	d109      	bne.n	801f230 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801f21c:	697b      	ldr	r3, [r7, #20]
 801f21e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801f224:	683b      	ldr	r3, [r7, #0]
 801f226:	695b      	ldr	r3, [r3, #20]
 801f228:	029b      	lsls	r3, r3, #10
 801f22a:	697a      	ldr	r2, [r7, #20]
 801f22c:	4313      	orrs	r3, r2
 801f22e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	697a      	ldr	r2, [r7, #20]
 801f234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	68fa      	ldr	r2, [r7, #12]
 801f23a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801f23c:	683b      	ldr	r3, [r7, #0]
 801f23e:	685a      	ldr	r2, [r3, #4]
 801f240:	687b      	ldr	r3, [r7, #4]
 801f242:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	693a      	ldr	r2, [r7, #16]
 801f248:	621a      	str	r2, [r3, #32]
}
 801f24a:	bf00      	nop
 801f24c:	371c      	adds	r7, #28
 801f24e:	46bd      	mov	sp, r7
 801f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f254:	4770      	bx	lr
 801f256:	bf00      	nop
 801f258:	40012c00 	.word	0x40012c00
 801f25c:	40013400 	.word	0x40013400
 801f260:	40014000 	.word	0x40014000
 801f264:	40014400 	.word	0x40014400
 801f268:	40014800 	.word	0x40014800
 801f26c:	40015000 	.word	0x40015000

0801f270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f270:	b480      	push	{r7}
 801f272:	b087      	sub	sp, #28
 801f274:	af00      	add	r7, sp, #0
 801f276:	60f8      	str	r0, [r7, #12]
 801f278:	60b9      	str	r1, [r7, #8]
 801f27a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f27c:	68bb      	ldr	r3, [r7, #8]
 801f27e:	f003 031f 	and.w	r3, r3, #31
 801f282:	2201      	movs	r2, #1
 801f284:	fa02 f303 	lsl.w	r3, r2, r3
 801f288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	6a1a      	ldr	r2, [r3, #32]
 801f28e:	697b      	ldr	r3, [r7, #20]
 801f290:	43db      	mvns	r3, r3
 801f292:	401a      	ands	r2, r3
 801f294:	68fb      	ldr	r3, [r7, #12]
 801f296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f298:	68fb      	ldr	r3, [r7, #12]
 801f29a:	6a1a      	ldr	r2, [r3, #32]
 801f29c:	68bb      	ldr	r3, [r7, #8]
 801f29e:	f003 031f 	and.w	r3, r3, #31
 801f2a2:	6879      	ldr	r1, [r7, #4]
 801f2a4:	fa01 f303 	lsl.w	r3, r1, r3
 801f2a8:	431a      	orrs	r2, r3
 801f2aa:	68fb      	ldr	r3, [r7, #12]
 801f2ac:	621a      	str	r2, [r3, #32]
}
 801f2ae:	bf00      	nop
 801f2b0:	371c      	adds	r7, #28
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b8:	4770      	bx	lr
	...

0801f2bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f2bc:	b480      	push	{r7}
 801f2be:	b085      	sub	sp, #20
 801f2c0:	af00      	add	r7, sp, #0
 801f2c2:	6078      	str	r0, [r7, #4]
 801f2c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f2c6:	687b      	ldr	r3, [r7, #4]
 801f2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f2cc:	2b01      	cmp	r3, #1
 801f2ce:	d101      	bne.n	801f2d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f2d0:	2302      	movs	r3, #2
 801f2d2:	e06f      	b.n	801f3b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801f2d4:	687b      	ldr	r3, [r7, #4]
 801f2d6:	2201      	movs	r2, #1
 801f2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	2202      	movs	r2, #2
 801f2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	685b      	ldr	r3, [r3, #4]
 801f2ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f2ec:	687b      	ldr	r3, [r7, #4]
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	689b      	ldr	r3, [r3, #8]
 801f2f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f2f4:	687b      	ldr	r3, [r7, #4]
 801f2f6:	681b      	ldr	r3, [r3, #0]
 801f2f8:	4a31      	ldr	r2, [pc, #196]	; (801f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f2fa:	4293      	cmp	r3, r2
 801f2fc:	d009      	beq.n	801f312 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f2fe:	687b      	ldr	r3, [r7, #4]
 801f300:	681b      	ldr	r3, [r3, #0]
 801f302:	4a30      	ldr	r2, [pc, #192]	; (801f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f304:	4293      	cmp	r3, r2
 801f306:	d004      	beq.n	801f312 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	4a2e      	ldr	r2, [pc, #184]	; (801f3c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f30e:	4293      	cmp	r3, r2
 801f310:	d108      	bne.n	801f324 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f312:	68fb      	ldr	r3, [r7, #12]
 801f314:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801f318:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f31a:	683b      	ldr	r3, [r7, #0]
 801f31c:	685b      	ldr	r3, [r3, #4]
 801f31e:	68fa      	ldr	r2, [r7, #12]
 801f320:	4313      	orrs	r3, r2
 801f322:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f324:	68fb      	ldr	r3, [r7, #12]
 801f326:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801f32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f32e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f330:	683b      	ldr	r3, [r7, #0]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	68fa      	ldr	r2, [r7, #12]
 801f336:	4313      	orrs	r3, r2
 801f338:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f33a:	687b      	ldr	r3, [r7, #4]
 801f33c:	681b      	ldr	r3, [r3, #0]
 801f33e:	68fa      	ldr	r2, [r7, #12]
 801f340:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f342:	687b      	ldr	r3, [r7, #4]
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	4a1e      	ldr	r2, [pc, #120]	; (801f3c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f348:	4293      	cmp	r3, r2
 801f34a:	d01d      	beq.n	801f388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f34c:	687b      	ldr	r3, [r7, #4]
 801f34e:	681b      	ldr	r3, [r3, #0]
 801f350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f354:	d018      	beq.n	801f388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f356:	687b      	ldr	r3, [r7, #4]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	4a1c      	ldr	r2, [pc, #112]	; (801f3cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f35c:	4293      	cmp	r3, r2
 801f35e:	d013      	beq.n	801f388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	4a1a      	ldr	r2, [pc, #104]	; (801f3d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f366:	4293      	cmp	r3, r2
 801f368:	d00e      	beq.n	801f388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f36a:	687b      	ldr	r3, [r7, #4]
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	4a15      	ldr	r2, [pc, #84]	; (801f3c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f370:	4293      	cmp	r3, r2
 801f372:	d009      	beq.n	801f388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f374:	687b      	ldr	r3, [r7, #4]
 801f376:	681b      	ldr	r3, [r3, #0]
 801f378:	4a16      	ldr	r2, [pc, #88]	; (801f3d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f37a:	4293      	cmp	r3, r2
 801f37c:	d004      	beq.n	801f388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f37e:	687b      	ldr	r3, [r7, #4]
 801f380:	681b      	ldr	r3, [r3, #0]
 801f382:	4a11      	ldr	r2, [pc, #68]	; (801f3c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f384:	4293      	cmp	r3, r2
 801f386:	d10c      	bne.n	801f3a2 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f388:	68bb      	ldr	r3, [r7, #8]
 801f38a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f38e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f390:	683b      	ldr	r3, [r7, #0]
 801f392:	689b      	ldr	r3, [r3, #8]
 801f394:	68ba      	ldr	r2, [r7, #8]
 801f396:	4313      	orrs	r3, r2
 801f398:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	681b      	ldr	r3, [r3, #0]
 801f39e:	68ba      	ldr	r2, [r7, #8]
 801f3a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f3a2:	687b      	ldr	r3, [r7, #4]
 801f3a4:	2201      	movs	r2, #1
 801f3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f3aa:	687b      	ldr	r3, [r7, #4]
 801f3ac:	2200      	movs	r2, #0
 801f3ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f3b2:	2300      	movs	r3, #0
}
 801f3b4:	4618      	mov	r0, r3
 801f3b6:	3714      	adds	r7, #20
 801f3b8:	46bd      	mov	sp, r7
 801f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3be:	4770      	bx	lr
 801f3c0:	40012c00 	.word	0x40012c00
 801f3c4:	40013400 	.word	0x40013400
 801f3c8:	40015000 	.word	0x40015000
 801f3cc:	40000400 	.word	0x40000400
 801f3d0:	40000800 	.word	0x40000800
 801f3d4:	40014000 	.word	0x40014000

0801f3d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f3d8:	b480      	push	{r7}
 801f3da:	b085      	sub	sp, #20
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
 801f3e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f3e2:	2300      	movs	r3, #0
 801f3e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f3ec:	2b01      	cmp	r3, #1
 801f3ee:	d101      	bne.n	801f3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f3f0:	2302      	movs	r3, #2
 801f3f2:	e096      	b.n	801f522 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	2201      	movs	r2, #1
 801f3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f3fc:	68fb      	ldr	r3, [r7, #12]
 801f3fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801f402:	683b      	ldr	r3, [r7, #0]
 801f404:	68db      	ldr	r3, [r3, #12]
 801f406:	4313      	orrs	r3, r2
 801f408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801f410:	683b      	ldr	r3, [r7, #0]
 801f412:	689b      	ldr	r3, [r3, #8]
 801f414:	4313      	orrs	r3, r2
 801f416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f418:	68fb      	ldr	r3, [r7, #12]
 801f41a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801f41e:	683b      	ldr	r3, [r7, #0]
 801f420:	685b      	ldr	r3, [r3, #4]
 801f422:	4313      	orrs	r3, r2
 801f424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f426:	68fb      	ldr	r3, [r7, #12]
 801f428:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801f42c:	683b      	ldr	r3, [r7, #0]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	4313      	orrs	r3, r2
 801f432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f43a:	683b      	ldr	r3, [r7, #0]
 801f43c:	691b      	ldr	r3, [r3, #16]
 801f43e:	4313      	orrs	r3, r2
 801f440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801f448:	683b      	ldr	r3, [r7, #0]
 801f44a:	695b      	ldr	r3, [r3, #20]
 801f44c:	4313      	orrs	r3, r2
 801f44e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f45a:	4313      	orrs	r3, r2
 801f45c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f45e:	68fb      	ldr	r3, [r7, #12]
 801f460:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	699b      	ldr	r3, [r3, #24]
 801f468:	041b      	lsls	r3, r3, #16
 801f46a:	4313      	orrs	r3, r2
 801f46c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f46e:	687b      	ldr	r3, [r7, #4]
 801f470:	681b      	ldr	r3, [r3, #0]
 801f472:	4a2f      	ldr	r2, [pc, #188]	; (801f530 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f474:	4293      	cmp	r3, r2
 801f476:	d009      	beq.n	801f48c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	4a2d      	ldr	r2, [pc, #180]	; (801f534 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f47e:	4293      	cmp	r3, r2
 801f480:	d004      	beq.n	801f48c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	4a2c      	ldr	r2, [pc, #176]	; (801f538 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f488:	4293      	cmp	r3, r2
 801f48a:	d106      	bne.n	801f49a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801f492:	683b      	ldr	r3, [r7, #0]
 801f494:	69db      	ldr	r3, [r3, #28]
 801f496:	4313      	orrs	r3, r2
 801f498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	4a24      	ldr	r2, [pc, #144]	; (801f530 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f4a0:	4293      	cmp	r3, r2
 801f4a2:	d009      	beq.n	801f4b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f4a4:	687b      	ldr	r3, [r7, #4]
 801f4a6:	681b      	ldr	r3, [r3, #0]
 801f4a8:	4a22      	ldr	r2, [pc, #136]	; (801f534 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f4aa:	4293      	cmp	r3, r2
 801f4ac:	d004      	beq.n	801f4b8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	681b      	ldr	r3, [r3, #0]
 801f4b2:	4a21      	ldr	r2, [pc, #132]	; (801f538 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f4b4:	4293      	cmp	r3, r2
 801f4b6:	d12b      	bne.n	801f510 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f4b8:	68fb      	ldr	r3, [r7, #12]
 801f4ba:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f4be:	683b      	ldr	r3, [r7, #0]
 801f4c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f4c2:	051b      	lsls	r3, r3, #20
 801f4c4:	4313      	orrs	r3, r2
 801f4c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f4c8:	68fb      	ldr	r3, [r7, #12]
 801f4ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f4ce:	683b      	ldr	r3, [r7, #0]
 801f4d0:	6a1b      	ldr	r3, [r3, #32]
 801f4d2:	4313      	orrs	r3, r2
 801f4d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f4d6:	68fb      	ldr	r3, [r7, #12]
 801f4d8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f4dc:	683b      	ldr	r3, [r7, #0]
 801f4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f4e0:	4313      	orrs	r3, r2
 801f4e2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	4a11      	ldr	r2, [pc, #68]	; (801f530 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f4ea:	4293      	cmp	r3, r2
 801f4ec:	d009      	beq.n	801f502 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	4a10      	ldr	r2, [pc, #64]	; (801f534 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f4f4:	4293      	cmp	r3, r2
 801f4f6:	d004      	beq.n	801f502 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f4f8:	687b      	ldr	r3, [r7, #4]
 801f4fa:	681b      	ldr	r3, [r3, #0]
 801f4fc:	4a0e      	ldr	r2, [pc, #56]	; (801f538 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f4fe:	4293      	cmp	r3, r2
 801f500:	d106      	bne.n	801f510 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801f502:	68fb      	ldr	r3, [r7, #12]
 801f504:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801f508:	683b      	ldr	r3, [r7, #0]
 801f50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f50c:	4313      	orrs	r3, r2
 801f50e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	68fa      	ldr	r2, [r7, #12]
 801f516:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f518:	687b      	ldr	r3, [r7, #4]
 801f51a:	2200      	movs	r2, #0
 801f51c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f520:	2300      	movs	r3, #0
}
 801f522:	4618      	mov	r0, r3
 801f524:	3714      	adds	r7, #20
 801f526:	46bd      	mov	sp, r7
 801f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f52c:	4770      	bx	lr
 801f52e:	bf00      	nop
 801f530:	40012c00 	.word	0x40012c00
 801f534:	40013400 	.word	0x40013400
 801f538:	40015000 	.word	0x40015000

0801f53c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f53c:	b480      	push	{r7}
 801f53e:	b083      	sub	sp, #12
 801f540:	af00      	add	r7, sp, #0
 801f542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f544:	bf00      	nop
 801f546:	370c      	adds	r7, #12
 801f548:	46bd      	mov	sp, r7
 801f54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f54e:	4770      	bx	lr

0801f550 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f550:	b480      	push	{r7}
 801f552:	b083      	sub	sp, #12
 801f554:	af00      	add	r7, sp, #0
 801f556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f558:	bf00      	nop
 801f55a:	370c      	adds	r7, #12
 801f55c:	46bd      	mov	sp, r7
 801f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f562:	4770      	bx	lr

0801f564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f564:	b480      	push	{r7}
 801f566:	b083      	sub	sp, #12
 801f568:	af00      	add	r7, sp, #0
 801f56a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f56c:	bf00      	nop
 801f56e:	370c      	adds	r7, #12
 801f570:	46bd      	mov	sp, r7
 801f572:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f576:	4770      	bx	lr

0801f578 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801f578:	b480      	push	{r7}
 801f57a:	b083      	sub	sp, #12
 801f57c:	af00      	add	r7, sp, #0
 801f57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801f580:	bf00      	nop
 801f582:	370c      	adds	r7, #12
 801f584:	46bd      	mov	sp, r7
 801f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f58a:	4770      	bx	lr

0801f58c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f58c:	b480      	push	{r7}
 801f58e:	b083      	sub	sp, #12
 801f590:	af00      	add	r7, sp, #0
 801f592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f594:	bf00      	nop
 801f596:	370c      	adds	r7, #12
 801f598:	46bd      	mov	sp, r7
 801f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f59e:	4770      	bx	lr

0801f5a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f5a0:	b480      	push	{r7}
 801f5a2:	b083      	sub	sp, #12
 801f5a4:	af00      	add	r7, sp, #0
 801f5a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f5a8:	bf00      	nop
 801f5aa:	370c      	adds	r7, #12
 801f5ac:	46bd      	mov	sp, r7
 801f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5b2:	4770      	bx	lr

0801f5b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f5b4:	b480      	push	{r7}
 801f5b6:	b083      	sub	sp, #12
 801f5b8:	af00      	add	r7, sp, #0
 801f5ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f5bc:	bf00      	nop
 801f5be:	370c      	adds	r7, #12
 801f5c0:	46bd      	mov	sp, r7
 801f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5c6:	4770      	bx	lr

0801f5c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f5c8:	b580      	push	{r7, lr}
 801f5ca:	b082      	sub	sp, #8
 801f5cc:	af00      	add	r7, sp, #0
 801f5ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f5d0:	687b      	ldr	r3, [r7, #4]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	d101      	bne.n	801f5da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f5d6:	2301      	movs	r3, #1
 801f5d8:	e042      	b.n	801f660 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f5e0:	2b00      	cmp	r3, #0
 801f5e2:	d106      	bne.n	801f5f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	2200      	movs	r2, #0
 801f5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f5ec:	6878      	ldr	r0, [r7, #4]
 801f5ee:	f7f9 fae3 	bl	8018bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f5f2:	687b      	ldr	r3, [r7, #4]
 801f5f4:	2224      	movs	r2, #36	; 0x24
 801f5f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	681a      	ldr	r2, [r3, #0]
 801f600:	687b      	ldr	r3, [r7, #4]
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	f022 0201 	bic.w	r2, r2, #1
 801f608:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f60a:	6878      	ldr	r0, [r7, #4]
 801f60c:	f000 f8c2 	bl	801f794 <UART_SetConfig>
 801f610:	4603      	mov	r3, r0
 801f612:	2b01      	cmp	r3, #1
 801f614:	d101      	bne.n	801f61a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f616:	2301      	movs	r3, #1
 801f618:	e022      	b.n	801f660 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f61a:	687b      	ldr	r3, [r7, #4]
 801f61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d002      	beq.n	801f628 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f622:	6878      	ldr	r0, [r7, #4]
 801f624:	f000 fbb2 	bl	801fd8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	681b      	ldr	r3, [r3, #0]
 801f62c:	685a      	ldr	r2, [r3, #4]
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f636:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f638:	687b      	ldr	r3, [r7, #4]
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	689a      	ldr	r2, [r3, #8]
 801f63e:	687b      	ldr	r3, [r7, #4]
 801f640:	681b      	ldr	r3, [r3, #0]
 801f642:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f646:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f648:	687b      	ldr	r3, [r7, #4]
 801f64a:	681b      	ldr	r3, [r3, #0]
 801f64c:	681a      	ldr	r2, [r3, #0]
 801f64e:	687b      	ldr	r3, [r7, #4]
 801f650:	681b      	ldr	r3, [r3, #0]
 801f652:	f042 0201 	orr.w	r2, r2, #1
 801f656:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f658:	6878      	ldr	r0, [r7, #4]
 801f65a:	f000 fc39 	bl	801fed0 <UART_CheckIdleState>
 801f65e:	4603      	mov	r3, r0
}
 801f660:	4618      	mov	r0, r3
 801f662:	3708      	adds	r7, #8
 801f664:	46bd      	mov	sp, r7
 801f666:	bd80      	pop	{r7, pc}

0801f668 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f668:	b580      	push	{r7, lr}
 801f66a:	b08a      	sub	sp, #40	; 0x28
 801f66c:	af02      	add	r7, sp, #8
 801f66e:	60f8      	str	r0, [r7, #12]
 801f670:	60b9      	str	r1, [r7, #8]
 801f672:	603b      	str	r3, [r7, #0]
 801f674:	4613      	mov	r3, r2
 801f676:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f678:	68fb      	ldr	r3, [r7, #12]
 801f67a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f67e:	2b20      	cmp	r3, #32
 801f680:	f040 8083 	bne.w	801f78a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f684:	68bb      	ldr	r3, [r7, #8]
 801f686:	2b00      	cmp	r3, #0
 801f688:	d002      	beq.n	801f690 <HAL_UART_Transmit+0x28>
 801f68a:	88fb      	ldrh	r3, [r7, #6]
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d101      	bne.n	801f694 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f690:	2301      	movs	r3, #1
 801f692:	e07b      	b.n	801f78c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f69a:	2b01      	cmp	r3, #1
 801f69c:	d101      	bne.n	801f6a2 <HAL_UART_Transmit+0x3a>
 801f69e:	2302      	movs	r3, #2
 801f6a0:	e074      	b.n	801f78c <HAL_UART_Transmit+0x124>
 801f6a2:	68fb      	ldr	r3, [r7, #12]
 801f6a4:	2201      	movs	r2, #1
 801f6a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f6aa:	68fb      	ldr	r3, [r7, #12]
 801f6ac:	2200      	movs	r2, #0
 801f6ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	2221      	movs	r2, #33	; 0x21
 801f6b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f6ba:	f7f9 fb6b 	bl	8018d94 <HAL_GetTick>
 801f6be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f6c0:	68fb      	ldr	r3, [r7, #12]
 801f6c2:	88fa      	ldrh	r2, [r7, #6]
 801f6c4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f6c8:	68fb      	ldr	r3, [r7, #12]
 801f6ca:	88fa      	ldrh	r2, [r7, #6]
 801f6cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f6d0:	68fb      	ldr	r3, [r7, #12]
 801f6d2:	689b      	ldr	r3, [r3, #8]
 801f6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f6d8:	d108      	bne.n	801f6ec <HAL_UART_Transmit+0x84>
 801f6da:	68fb      	ldr	r3, [r7, #12]
 801f6dc:	691b      	ldr	r3, [r3, #16]
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	d104      	bne.n	801f6ec <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f6e2:	2300      	movs	r3, #0
 801f6e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f6e6:	68bb      	ldr	r3, [r7, #8]
 801f6e8:	61bb      	str	r3, [r7, #24]
 801f6ea:	e003      	b.n	801f6f4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f6ec:	68bb      	ldr	r3, [r7, #8]
 801f6ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f6f4:	68fb      	ldr	r3, [r7, #12]
 801f6f6:	2200      	movs	r2, #0
 801f6f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f6fc:	e02c      	b.n	801f758 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f6fe:	683b      	ldr	r3, [r7, #0]
 801f700:	9300      	str	r3, [sp, #0]
 801f702:	697b      	ldr	r3, [r7, #20]
 801f704:	2200      	movs	r2, #0
 801f706:	2180      	movs	r1, #128	; 0x80
 801f708:	68f8      	ldr	r0, [r7, #12]
 801f70a:	f000 fc2c 	bl	801ff66 <UART_WaitOnFlagUntilTimeout>
 801f70e:	4603      	mov	r3, r0
 801f710:	2b00      	cmp	r3, #0
 801f712:	d001      	beq.n	801f718 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f714:	2303      	movs	r3, #3
 801f716:	e039      	b.n	801f78c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f718:	69fb      	ldr	r3, [r7, #28]
 801f71a:	2b00      	cmp	r3, #0
 801f71c:	d10b      	bne.n	801f736 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f71e:	69bb      	ldr	r3, [r7, #24]
 801f720:	881b      	ldrh	r3, [r3, #0]
 801f722:	461a      	mov	r2, r3
 801f724:	68fb      	ldr	r3, [r7, #12]
 801f726:	681b      	ldr	r3, [r3, #0]
 801f728:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f72c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f72e:	69bb      	ldr	r3, [r7, #24]
 801f730:	3302      	adds	r3, #2
 801f732:	61bb      	str	r3, [r7, #24]
 801f734:	e007      	b.n	801f746 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f736:	69fb      	ldr	r3, [r7, #28]
 801f738:	781a      	ldrb	r2, [r3, #0]
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f740:	69fb      	ldr	r3, [r7, #28]
 801f742:	3301      	adds	r3, #1
 801f744:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f746:	68fb      	ldr	r3, [r7, #12]
 801f748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f74c:	b29b      	uxth	r3, r3
 801f74e:	3b01      	subs	r3, #1
 801f750:	b29a      	uxth	r2, r3
 801f752:	68fb      	ldr	r3, [r7, #12]
 801f754:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f758:	68fb      	ldr	r3, [r7, #12]
 801f75a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f75e:	b29b      	uxth	r3, r3
 801f760:	2b00      	cmp	r3, #0
 801f762:	d1cc      	bne.n	801f6fe <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f764:	683b      	ldr	r3, [r7, #0]
 801f766:	9300      	str	r3, [sp, #0]
 801f768:	697b      	ldr	r3, [r7, #20]
 801f76a:	2200      	movs	r2, #0
 801f76c:	2140      	movs	r1, #64	; 0x40
 801f76e:	68f8      	ldr	r0, [r7, #12]
 801f770:	f000 fbf9 	bl	801ff66 <UART_WaitOnFlagUntilTimeout>
 801f774:	4603      	mov	r3, r0
 801f776:	2b00      	cmp	r3, #0
 801f778:	d001      	beq.n	801f77e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f77a:	2303      	movs	r3, #3
 801f77c:	e006      	b.n	801f78c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f77e:	68fb      	ldr	r3, [r7, #12]
 801f780:	2220      	movs	r2, #32
 801f782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f786:	2300      	movs	r3, #0
 801f788:	e000      	b.n	801f78c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f78a:	2302      	movs	r3, #2
  }
}
 801f78c:	4618      	mov	r0, r3
 801f78e:	3720      	adds	r7, #32
 801f790:	46bd      	mov	sp, r7
 801f792:	bd80      	pop	{r7, pc}

0801f794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f798:	b08c      	sub	sp, #48	; 0x30
 801f79a:	af00      	add	r7, sp, #0
 801f79c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f79e:	2300      	movs	r3, #0
 801f7a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f7a4:	697b      	ldr	r3, [r7, #20]
 801f7a6:	689a      	ldr	r2, [r3, #8]
 801f7a8:	697b      	ldr	r3, [r7, #20]
 801f7aa:	691b      	ldr	r3, [r3, #16]
 801f7ac:	431a      	orrs	r2, r3
 801f7ae:	697b      	ldr	r3, [r7, #20]
 801f7b0:	695b      	ldr	r3, [r3, #20]
 801f7b2:	431a      	orrs	r2, r3
 801f7b4:	697b      	ldr	r3, [r7, #20]
 801f7b6:	69db      	ldr	r3, [r3, #28]
 801f7b8:	4313      	orrs	r3, r2
 801f7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f7bc:	697b      	ldr	r3, [r7, #20]
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	681a      	ldr	r2, [r3, #0]
 801f7c2:	4baa      	ldr	r3, [pc, #680]	; (801fa6c <UART_SetConfig+0x2d8>)
 801f7c4:	4013      	ands	r3, r2
 801f7c6:	697a      	ldr	r2, [r7, #20]
 801f7c8:	6812      	ldr	r2, [r2, #0]
 801f7ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f7cc:	430b      	orrs	r3, r1
 801f7ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f7d0:	697b      	ldr	r3, [r7, #20]
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	685b      	ldr	r3, [r3, #4]
 801f7d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f7da:	697b      	ldr	r3, [r7, #20]
 801f7dc:	68da      	ldr	r2, [r3, #12]
 801f7de:	697b      	ldr	r3, [r7, #20]
 801f7e0:	681b      	ldr	r3, [r3, #0]
 801f7e2:	430a      	orrs	r2, r1
 801f7e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f7e6:	697b      	ldr	r3, [r7, #20]
 801f7e8:	699b      	ldr	r3, [r3, #24]
 801f7ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f7ec:	697b      	ldr	r3, [r7, #20]
 801f7ee:	681b      	ldr	r3, [r3, #0]
 801f7f0:	4a9f      	ldr	r2, [pc, #636]	; (801fa70 <UART_SetConfig+0x2dc>)
 801f7f2:	4293      	cmp	r3, r2
 801f7f4:	d004      	beq.n	801f800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f7f6:	697b      	ldr	r3, [r7, #20]
 801f7f8:	6a1b      	ldr	r3, [r3, #32]
 801f7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f7fc:	4313      	orrs	r3, r2
 801f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f800:	697b      	ldr	r3, [r7, #20]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	689b      	ldr	r3, [r3, #8]
 801f806:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f80a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f80e:	697a      	ldr	r2, [r7, #20]
 801f810:	6812      	ldr	r2, [r2, #0]
 801f812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f814:	430b      	orrs	r3, r1
 801f816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f818:	697b      	ldr	r3, [r7, #20]
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f81e:	f023 010f 	bic.w	r1, r3, #15
 801f822:	697b      	ldr	r3, [r7, #20]
 801f824:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f826:	697b      	ldr	r3, [r7, #20]
 801f828:	681b      	ldr	r3, [r3, #0]
 801f82a:	430a      	orrs	r2, r1
 801f82c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f82e:	697b      	ldr	r3, [r7, #20]
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	4a90      	ldr	r2, [pc, #576]	; (801fa74 <UART_SetConfig+0x2e0>)
 801f834:	4293      	cmp	r3, r2
 801f836:	d125      	bne.n	801f884 <UART_SetConfig+0xf0>
 801f838:	4b8f      	ldr	r3, [pc, #572]	; (801fa78 <UART_SetConfig+0x2e4>)
 801f83a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f83e:	f003 0303 	and.w	r3, r3, #3
 801f842:	2b03      	cmp	r3, #3
 801f844:	d81a      	bhi.n	801f87c <UART_SetConfig+0xe8>
 801f846:	a201      	add	r2, pc, #4	; (adr r2, 801f84c <UART_SetConfig+0xb8>)
 801f848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f84c:	0801f85d 	.word	0x0801f85d
 801f850:	0801f86d 	.word	0x0801f86d
 801f854:	0801f865 	.word	0x0801f865
 801f858:	0801f875 	.word	0x0801f875
 801f85c:	2301      	movs	r3, #1
 801f85e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f862:	e116      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f864:	2302      	movs	r3, #2
 801f866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f86a:	e112      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f86c:	2304      	movs	r3, #4
 801f86e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f872:	e10e      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f874:	2308      	movs	r3, #8
 801f876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f87a:	e10a      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f87c:	2310      	movs	r3, #16
 801f87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f882:	e106      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f884:	697b      	ldr	r3, [r7, #20]
 801f886:	681b      	ldr	r3, [r3, #0]
 801f888:	4a7c      	ldr	r2, [pc, #496]	; (801fa7c <UART_SetConfig+0x2e8>)
 801f88a:	4293      	cmp	r3, r2
 801f88c:	d138      	bne.n	801f900 <UART_SetConfig+0x16c>
 801f88e:	4b7a      	ldr	r3, [pc, #488]	; (801fa78 <UART_SetConfig+0x2e4>)
 801f890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f894:	f003 030c 	and.w	r3, r3, #12
 801f898:	2b0c      	cmp	r3, #12
 801f89a:	d82d      	bhi.n	801f8f8 <UART_SetConfig+0x164>
 801f89c:	a201      	add	r2, pc, #4	; (adr r2, 801f8a4 <UART_SetConfig+0x110>)
 801f89e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f8a2:	bf00      	nop
 801f8a4:	0801f8d9 	.word	0x0801f8d9
 801f8a8:	0801f8f9 	.word	0x0801f8f9
 801f8ac:	0801f8f9 	.word	0x0801f8f9
 801f8b0:	0801f8f9 	.word	0x0801f8f9
 801f8b4:	0801f8e9 	.word	0x0801f8e9
 801f8b8:	0801f8f9 	.word	0x0801f8f9
 801f8bc:	0801f8f9 	.word	0x0801f8f9
 801f8c0:	0801f8f9 	.word	0x0801f8f9
 801f8c4:	0801f8e1 	.word	0x0801f8e1
 801f8c8:	0801f8f9 	.word	0x0801f8f9
 801f8cc:	0801f8f9 	.word	0x0801f8f9
 801f8d0:	0801f8f9 	.word	0x0801f8f9
 801f8d4:	0801f8f1 	.word	0x0801f8f1
 801f8d8:	2300      	movs	r3, #0
 801f8da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8de:	e0d8      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f8e0:	2302      	movs	r3, #2
 801f8e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8e6:	e0d4      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f8e8:	2304      	movs	r3, #4
 801f8ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8ee:	e0d0      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f8f0:	2308      	movs	r3, #8
 801f8f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8f6:	e0cc      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f8f8:	2310      	movs	r3, #16
 801f8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8fe:	e0c8      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f900:	697b      	ldr	r3, [r7, #20]
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	4a5e      	ldr	r2, [pc, #376]	; (801fa80 <UART_SetConfig+0x2ec>)
 801f906:	4293      	cmp	r3, r2
 801f908:	d125      	bne.n	801f956 <UART_SetConfig+0x1c2>
 801f90a:	4b5b      	ldr	r3, [pc, #364]	; (801fa78 <UART_SetConfig+0x2e4>)
 801f90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f910:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f914:	2b30      	cmp	r3, #48	; 0x30
 801f916:	d016      	beq.n	801f946 <UART_SetConfig+0x1b2>
 801f918:	2b30      	cmp	r3, #48	; 0x30
 801f91a:	d818      	bhi.n	801f94e <UART_SetConfig+0x1ba>
 801f91c:	2b20      	cmp	r3, #32
 801f91e:	d00a      	beq.n	801f936 <UART_SetConfig+0x1a2>
 801f920:	2b20      	cmp	r3, #32
 801f922:	d814      	bhi.n	801f94e <UART_SetConfig+0x1ba>
 801f924:	2b00      	cmp	r3, #0
 801f926:	d002      	beq.n	801f92e <UART_SetConfig+0x19a>
 801f928:	2b10      	cmp	r3, #16
 801f92a:	d008      	beq.n	801f93e <UART_SetConfig+0x1aa>
 801f92c:	e00f      	b.n	801f94e <UART_SetConfig+0x1ba>
 801f92e:	2300      	movs	r3, #0
 801f930:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f934:	e0ad      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f936:	2302      	movs	r3, #2
 801f938:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f93c:	e0a9      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f93e:	2304      	movs	r3, #4
 801f940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f944:	e0a5      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f946:	2308      	movs	r3, #8
 801f948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f94c:	e0a1      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f94e:	2310      	movs	r3, #16
 801f950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f954:	e09d      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f956:	697b      	ldr	r3, [r7, #20]
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	4a4a      	ldr	r2, [pc, #296]	; (801fa84 <UART_SetConfig+0x2f0>)
 801f95c:	4293      	cmp	r3, r2
 801f95e:	d125      	bne.n	801f9ac <UART_SetConfig+0x218>
 801f960:	4b45      	ldr	r3, [pc, #276]	; (801fa78 <UART_SetConfig+0x2e4>)
 801f962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f966:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f96a:	2bc0      	cmp	r3, #192	; 0xc0
 801f96c:	d016      	beq.n	801f99c <UART_SetConfig+0x208>
 801f96e:	2bc0      	cmp	r3, #192	; 0xc0
 801f970:	d818      	bhi.n	801f9a4 <UART_SetConfig+0x210>
 801f972:	2b80      	cmp	r3, #128	; 0x80
 801f974:	d00a      	beq.n	801f98c <UART_SetConfig+0x1f8>
 801f976:	2b80      	cmp	r3, #128	; 0x80
 801f978:	d814      	bhi.n	801f9a4 <UART_SetConfig+0x210>
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d002      	beq.n	801f984 <UART_SetConfig+0x1f0>
 801f97e:	2b40      	cmp	r3, #64	; 0x40
 801f980:	d008      	beq.n	801f994 <UART_SetConfig+0x200>
 801f982:	e00f      	b.n	801f9a4 <UART_SetConfig+0x210>
 801f984:	2300      	movs	r3, #0
 801f986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f98a:	e082      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f98c:	2302      	movs	r3, #2
 801f98e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f992:	e07e      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f994:	2304      	movs	r3, #4
 801f996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f99a:	e07a      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f99c:	2308      	movs	r3, #8
 801f99e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9a2:	e076      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f9a4:	2310      	movs	r3, #16
 801f9a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9aa:	e072      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f9ac:	697b      	ldr	r3, [r7, #20]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	4a35      	ldr	r2, [pc, #212]	; (801fa88 <UART_SetConfig+0x2f4>)
 801f9b2:	4293      	cmp	r3, r2
 801f9b4:	d12a      	bne.n	801fa0c <UART_SetConfig+0x278>
 801f9b6:	4b30      	ldr	r3, [pc, #192]	; (801fa78 <UART_SetConfig+0x2e4>)
 801f9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f9bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f9c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f9c4:	d01a      	beq.n	801f9fc <UART_SetConfig+0x268>
 801f9c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f9ca:	d81b      	bhi.n	801fa04 <UART_SetConfig+0x270>
 801f9cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f9d0:	d00c      	beq.n	801f9ec <UART_SetConfig+0x258>
 801f9d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f9d6:	d815      	bhi.n	801fa04 <UART_SetConfig+0x270>
 801f9d8:	2b00      	cmp	r3, #0
 801f9da:	d003      	beq.n	801f9e4 <UART_SetConfig+0x250>
 801f9dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f9e0:	d008      	beq.n	801f9f4 <UART_SetConfig+0x260>
 801f9e2:	e00f      	b.n	801fa04 <UART_SetConfig+0x270>
 801f9e4:	2300      	movs	r3, #0
 801f9e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9ea:	e052      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f9ec:	2302      	movs	r3, #2
 801f9ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9f2:	e04e      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f9f4:	2304      	movs	r3, #4
 801f9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f9fa:	e04a      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801f9fc:	2308      	movs	r3, #8
 801f9fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa02:	e046      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa04:	2310      	movs	r3, #16
 801fa06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa0a:	e042      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa0c:	697b      	ldr	r3, [r7, #20]
 801fa0e:	681b      	ldr	r3, [r3, #0]
 801fa10:	4a17      	ldr	r2, [pc, #92]	; (801fa70 <UART_SetConfig+0x2dc>)
 801fa12:	4293      	cmp	r3, r2
 801fa14:	d13a      	bne.n	801fa8c <UART_SetConfig+0x2f8>
 801fa16:	4b18      	ldr	r3, [pc, #96]	; (801fa78 <UART_SetConfig+0x2e4>)
 801fa18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801fa1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801fa20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801fa24:	d01a      	beq.n	801fa5c <UART_SetConfig+0x2c8>
 801fa26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801fa2a:	d81b      	bhi.n	801fa64 <UART_SetConfig+0x2d0>
 801fa2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fa30:	d00c      	beq.n	801fa4c <UART_SetConfig+0x2b8>
 801fa32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fa36:	d815      	bhi.n	801fa64 <UART_SetConfig+0x2d0>
 801fa38:	2b00      	cmp	r3, #0
 801fa3a:	d003      	beq.n	801fa44 <UART_SetConfig+0x2b0>
 801fa3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801fa40:	d008      	beq.n	801fa54 <UART_SetConfig+0x2c0>
 801fa42:	e00f      	b.n	801fa64 <UART_SetConfig+0x2d0>
 801fa44:	2300      	movs	r3, #0
 801fa46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa4a:	e022      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa4c:	2302      	movs	r3, #2
 801fa4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa52:	e01e      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa54:	2304      	movs	r3, #4
 801fa56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa5a:	e01a      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa5c:	2308      	movs	r3, #8
 801fa5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa62:	e016      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa64:	2310      	movs	r3, #16
 801fa66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801fa6a:	e012      	b.n	801fa92 <UART_SetConfig+0x2fe>
 801fa6c:	cfff69f3 	.word	0xcfff69f3
 801fa70:	40008000 	.word	0x40008000
 801fa74:	40013800 	.word	0x40013800
 801fa78:	40021000 	.word	0x40021000
 801fa7c:	40004400 	.word	0x40004400
 801fa80:	40004800 	.word	0x40004800
 801fa84:	40004c00 	.word	0x40004c00
 801fa88:	40005000 	.word	0x40005000
 801fa8c:	2310      	movs	r3, #16
 801fa8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801fa92:	697b      	ldr	r3, [r7, #20]
 801fa94:	681b      	ldr	r3, [r3, #0]
 801fa96:	4aae      	ldr	r2, [pc, #696]	; (801fd50 <UART_SetConfig+0x5bc>)
 801fa98:	4293      	cmp	r3, r2
 801fa9a:	f040 8097 	bne.w	801fbcc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801fa9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801faa2:	2b08      	cmp	r3, #8
 801faa4:	d823      	bhi.n	801faee <UART_SetConfig+0x35a>
 801faa6:	a201      	add	r2, pc, #4	; (adr r2, 801faac <UART_SetConfig+0x318>)
 801faa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801faac:	0801fad1 	.word	0x0801fad1
 801fab0:	0801faef 	.word	0x0801faef
 801fab4:	0801fad9 	.word	0x0801fad9
 801fab8:	0801faef 	.word	0x0801faef
 801fabc:	0801fadf 	.word	0x0801fadf
 801fac0:	0801faef 	.word	0x0801faef
 801fac4:	0801faef 	.word	0x0801faef
 801fac8:	0801faef 	.word	0x0801faef
 801facc:	0801fae7 	.word	0x0801fae7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fad0:	f7fd f8b4 	bl	801cc3c <HAL_RCC_GetPCLK1Freq>
 801fad4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fad6:	e010      	b.n	801fafa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fad8:	4b9e      	ldr	r3, [pc, #632]	; (801fd54 <UART_SetConfig+0x5c0>)
 801fada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fadc:	e00d      	b.n	801fafa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fade:	f7fd f841 	bl	801cb64 <HAL_RCC_GetSysClockFreq>
 801fae2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fae4:	e009      	b.n	801fafa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fae6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801faea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801faec:	e005      	b.n	801fafa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801faee:	2300      	movs	r3, #0
 801faf0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801faf2:	2301      	movs	r3, #1
 801faf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801faf8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fafc:	2b00      	cmp	r3, #0
 801fafe:	f000 8130 	beq.w	801fd62 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801fb02:	697b      	ldr	r3, [r7, #20]
 801fb04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb06:	4a94      	ldr	r2, [pc, #592]	; (801fd58 <UART_SetConfig+0x5c4>)
 801fb08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fb0c:	461a      	mov	r2, r3
 801fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb10:	fbb3 f3f2 	udiv	r3, r3, r2
 801fb14:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fb16:	697b      	ldr	r3, [r7, #20]
 801fb18:	685a      	ldr	r2, [r3, #4]
 801fb1a:	4613      	mov	r3, r2
 801fb1c:	005b      	lsls	r3, r3, #1
 801fb1e:	4413      	add	r3, r2
 801fb20:	69ba      	ldr	r2, [r7, #24]
 801fb22:	429a      	cmp	r2, r3
 801fb24:	d305      	bcc.n	801fb32 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801fb26:	697b      	ldr	r3, [r7, #20]
 801fb28:	685b      	ldr	r3, [r3, #4]
 801fb2a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fb2c:	69ba      	ldr	r2, [r7, #24]
 801fb2e:	429a      	cmp	r2, r3
 801fb30:	d903      	bls.n	801fb3a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801fb32:	2301      	movs	r3, #1
 801fb34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fb38:	e113      	b.n	801fd62 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb3c:	2200      	movs	r2, #0
 801fb3e:	60bb      	str	r3, [r7, #8]
 801fb40:	60fa      	str	r2, [r7, #12]
 801fb42:	697b      	ldr	r3, [r7, #20]
 801fb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb46:	4a84      	ldr	r2, [pc, #528]	; (801fd58 <UART_SetConfig+0x5c4>)
 801fb48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fb4c:	b29b      	uxth	r3, r3
 801fb4e:	2200      	movs	r2, #0
 801fb50:	603b      	str	r3, [r7, #0]
 801fb52:	607a      	str	r2, [r7, #4]
 801fb54:	e9d7 2300 	ldrd	r2, r3, [r7]
 801fb58:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801fb5c:	f7e1 f89c 	bl	8000c98 <__aeabi_uldivmod>
 801fb60:	4602      	mov	r2, r0
 801fb62:	460b      	mov	r3, r1
 801fb64:	4610      	mov	r0, r2
 801fb66:	4619      	mov	r1, r3
 801fb68:	f04f 0200 	mov.w	r2, #0
 801fb6c:	f04f 0300 	mov.w	r3, #0
 801fb70:	020b      	lsls	r3, r1, #8
 801fb72:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801fb76:	0202      	lsls	r2, r0, #8
 801fb78:	6979      	ldr	r1, [r7, #20]
 801fb7a:	6849      	ldr	r1, [r1, #4]
 801fb7c:	0849      	lsrs	r1, r1, #1
 801fb7e:	2000      	movs	r0, #0
 801fb80:	460c      	mov	r4, r1
 801fb82:	4605      	mov	r5, r0
 801fb84:	eb12 0804 	adds.w	r8, r2, r4
 801fb88:	eb43 0905 	adc.w	r9, r3, r5
 801fb8c:	697b      	ldr	r3, [r7, #20]
 801fb8e:	685b      	ldr	r3, [r3, #4]
 801fb90:	2200      	movs	r2, #0
 801fb92:	469a      	mov	sl, r3
 801fb94:	4693      	mov	fp, r2
 801fb96:	4652      	mov	r2, sl
 801fb98:	465b      	mov	r3, fp
 801fb9a:	4640      	mov	r0, r8
 801fb9c:	4649      	mov	r1, r9
 801fb9e:	f7e1 f87b 	bl	8000c98 <__aeabi_uldivmod>
 801fba2:	4602      	mov	r2, r0
 801fba4:	460b      	mov	r3, r1
 801fba6:	4613      	mov	r3, r2
 801fba8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801fbaa:	6a3b      	ldr	r3, [r7, #32]
 801fbac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801fbb0:	d308      	bcc.n	801fbc4 <UART_SetConfig+0x430>
 801fbb2:	6a3b      	ldr	r3, [r7, #32]
 801fbb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fbb8:	d204      	bcs.n	801fbc4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801fbba:	697b      	ldr	r3, [r7, #20]
 801fbbc:	681b      	ldr	r3, [r3, #0]
 801fbbe:	6a3a      	ldr	r2, [r7, #32]
 801fbc0:	60da      	str	r2, [r3, #12]
 801fbc2:	e0ce      	b.n	801fd62 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801fbc4:	2301      	movs	r3, #1
 801fbc6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fbca:	e0ca      	b.n	801fd62 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801fbcc:	697b      	ldr	r3, [r7, #20]
 801fbce:	69db      	ldr	r3, [r3, #28]
 801fbd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fbd4:	d166      	bne.n	801fca4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801fbd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fbda:	2b08      	cmp	r3, #8
 801fbdc:	d827      	bhi.n	801fc2e <UART_SetConfig+0x49a>
 801fbde:	a201      	add	r2, pc, #4	; (adr r2, 801fbe4 <UART_SetConfig+0x450>)
 801fbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fbe4:	0801fc09 	.word	0x0801fc09
 801fbe8:	0801fc11 	.word	0x0801fc11
 801fbec:	0801fc19 	.word	0x0801fc19
 801fbf0:	0801fc2f 	.word	0x0801fc2f
 801fbf4:	0801fc1f 	.word	0x0801fc1f
 801fbf8:	0801fc2f 	.word	0x0801fc2f
 801fbfc:	0801fc2f 	.word	0x0801fc2f
 801fc00:	0801fc2f 	.word	0x0801fc2f
 801fc04:	0801fc27 	.word	0x0801fc27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fc08:	f7fd f818 	bl	801cc3c <HAL_RCC_GetPCLK1Freq>
 801fc0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc0e:	e014      	b.n	801fc3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fc10:	f7fd f82a 	bl	801cc68 <HAL_RCC_GetPCLK2Freq>
 801fc14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc16:	e010      	b.n	801fc3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fc18:	4b4e      	ldr	r3, [pc, #312]	; (801fd54 <UART_SetConfig+0x5c0>)
 801fc1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fc1c:	e00d      	b.n	801fc3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fc1e:	f7fc ffa1 	bl	801cb64 <HAL_RCC_GetSysClockFreq>
 801fc22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fc24:	e009      	b.n	801fc3a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fc26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fc2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fc2c:	e005      	b.n	801fc3a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801fc2e:	2300      	movs	r3, #0
 801fc30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fc32:	2301      	movs	r3, #1
 801fc34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fc38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc3c:	2b00      	cmp	r3, #0
 801fc3e:	f000 8090 	beq.w	801fd62 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fc42:	697b      	ldr	r3, [r7, #20]
 801fc44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fc46:	4a44      	ldr	r2, [pc, #272]	; (801fd58 <UART_SetConfig+0x5c4>)
 801fc48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fc4c:	461a      	mov	r2, r3
 801fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc50:	fbb3 f3f2 	udiv	r3, r3, r2
 801fc54:	005a      	lsls	r2, r3, #1
 801fc56:	697b      	ldr	r3, [r7, #20]
 801fc58:	685b      	ldr	r3, [r3, #4]
 801fc5a:	085b      	lsrs	r3, r3, #1
 801fc5c:	441a      	add	r2, r3
 801fc5e:	697b      	ldr	r3, [r7, #20]
 801fc60:	685b      	ldr	r3, [r3, #4]
 801fc62:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc66:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fc68:	6a3b      	ldr	r3, [r7, #32]
 801fc6a:	2b0f      	cmp	r3, #15
 801fc6c:	d916      	bls.n	801fc9c <UART_SetConfig+0x508>
 801fc6e:	6a3b      	ldr	r3, [r7, #32]
 801fc70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fc74:	d212      	bcs.n	801fc9c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801fc76:	6a3b      	ldr	r3, [r7, #32]
 801fc78:	b29b      	uxth	r3, r3
 801fc7a:	f023 030f 	bic.w	r3, r3, #15
 801fc7e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fc80:	6a3b      	ldr	r3, [r7, #32]
 801fc82:	085b      	lsrs	r3, r3, #1
 801fc84:	b29b      	uxth	r3, r3
 801fc86:	f003 0307 	and.w	r3, r3, #7
 801fc8a:	b29a      	uxth	r2, r3
 801fc8c:	8bfb      	ldrh	r3, [r7, #30]
 801fc8e:	4313      	orrs	r3, r2
 801fc90:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801fc92:	697b      	ldr	r3, [r7, #20]
 801fc94:	681b      	ldr	r3, [r3, #0]
 801fc96:	8bfa      	ldrh	r2, [r7, #30]
 801fc98:	60da      	str	r2, [r3, #12]
 801fc9a:	e062      	b.n	801fd62 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801fc9c:	2301      	movs	r3, #1
 801fc9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fca2:	e05e      	b.n	801fd62 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801fca4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fca8:	2b08      	cmp	r3, #8
 801fcaa:	d828      	bhi.n	801fcfe <UART_SetConfig+0x56a>
 801fcac:	a201      	add	r2, pc, #4	; (adr r2, 801fcb4 <UART_SetConfig+0x520>)
 801fcae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fcb2:	bf00      	nop
 801fcb4:	0801fcd9 	.word	0x0801fcd9
 801fcb8:	0801fce1 	.word	0x0801fce1
 801fcbc:	0801fce9 	.word	0x0801fce9
 801fcc0:	0801fcff 	.word	0x0801fcff
 801fcc4:	0801fcef 	.word	0x0801fcef
 801fcc8:	0801fcff 	.word	0x0801fcff
 801fccc:	0801fcff 	.word	0x0801fcff
 801fcd0:	0801fcff 	.word	0x0801fcff
 801fcd4:	0801fcf7 	.word	0x0801fcf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fcd8:	f7fc ffb0 	bl	801cc3c <HAL_RCC_GetPCLK1Freq>
 801fcdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fcde:	e014      	b.n	801fd0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fce0:	f7fc ffc2 	bl	801cc68 <HAL_RCC_GetPCLK2Freq>
 801fce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fce6:	e010      	b.n	801fd0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fce8:	4b1a      	ldr	r3, [pc, #104]	; (801fd54 <UART_SetConfig+0x5c0>)
 801fcea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fcec:	e00d      	b.n	801fd0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fcee:	f7fc ff39 	bl	801cb64 <HAL_RCC_GetSysClockFreq>
 801fcf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fcf4:	e009      	b.n	801fd0a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fcf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fcfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fcfc:	e005      	b.n	801fd0a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801fcfe:	2300      	movs	r3, #0
 801fd00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fd02:	2301      	movs	r3, #1
 801fd04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fd08:	bf00      	nop
    }

    if (pclk != 0U)
 801fd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd0c:	2b00      	cmp	r3, #0
 801fd0e:	d028      	beq.n	801fd62 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fd10:	697b      	ldr	r3, [r7, #20]
 801fd12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fd14:	4a10      	ldr	r2, [pc, #64]	; (801fd58 <UART_SetConfig+0x5c4>)
 801fd16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fd1a:	461a      	mov	r2, r3
 801fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd1e:	fbb3 f2f2 	udiv	r2, r3, r2
 801fd22:	697b      	ldr	r3, [r7, #20]
 801fd24:	685b      	ldr	r3, [r3, #4]
 801fd26:	085b      	lsrs	r3, r3, #1
 801fd28:	441a      	add	r2, r3
 801fd2a:	697b      	ldr	r3, [r7, #20]
 801fd2c:	685b      	ldr	r3, [r3, #4]
 801fd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 801fd32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fd34:	6a3b      	ldr	r3, [r7, #32]
 801fd36:	2b0f      	cmp	r3, #15
 801fd38:	d910      	bls.n	801fd5c <UART_SetConfig+0x5c8>
 801fd3a:	6a3b      	ldr	r3, [r7, #32]
 801fd3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fd40:	d20c      	bcs.n	801fd5c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fd42:	6a3b      	ldr	r3, [r7, #32]
 801fd44:	b29a      	uxth	r2, r3
 801fd46:	697b      	ldr	r3, [r7, #20]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	60da      	str	r2, [r3, #12]
 801fd4c:	e009      	b.n	801fd62 <UART_SetConfig+0x5ce>
 801fd4e:	bf00      	nop
 801fd50:	40008000 	.word	0x40008000
 801fd54:	00f42400 	.word	0x00f42400
 801fd58:	08023780 	.word	0x08023780
      }
      else
      {
        ret = HAL_ERROR;
 801fd5c:	2301      	movs	r3, #1
 801fd5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fd62:	697b      	ldr	r3, [r7, #20]
 801fd64:	2201      	movs	r2, #1
 801fd66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801fd6a:	697b      	ldr	r3, [r7, #20]
 801fd6c:	2201      	movs	r2, #1
 801fd6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fd72:	697b      	ldr	r3, [r7, #20]
 801fd74:	2200      	movs	r2, #0
 801fd76:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801fd78:	697b      	ldr	r3, [r7, #20]
 801fd7a:	2200      	movs	r2, #0
 801fd7c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801fd7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801fd82:	4618      	mov	r0, r3
 801fd84:	3730      	adds	r7, #48	; 0x30
 801fd86:	46bd      	mov	sp, r7
 801fd88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801fd8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fd8c:	b480      	push	{r7}
 801fd8e:	b083      	sub	sp, #12
 801fd90:	af00      	add	r7, sp, #0
 801fd92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fd94:	687b      	ldr	r3, [r7, #4]
 801fd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd98:	f003 0301 	and.w	r3, r3, #1
 801fd9c:	2b00      	cmp	r3, #0
 801fd9e:	d00a      	beq.n	801fdb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	685b      	ldr	r3, [r3, #4]
 801fda6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fdae:	687b      	ldr	r3, [r7, #4]
 801fdb0:	681b      	ldr	r3, [r3, #0]
 801fdb2:	430a      	orrs	r2, r1
 801fdb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fdb6:	687b      	ldr	r3, [r7, #4]
 801fdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdba:	f003 0302 	and.w	r3, r3, #2
 801fdbe:	2b00      	cmp	r3, #0
 801fdc0:	d00a      	beq.n	801fdd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	685b      	ldr	r3, [r3, #4]
 801fdc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	430a      	orrs	r2, r1
 801fdd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fddc:	f003 0304 	and.w	r3, r3, #4
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	d00a      	beq.n	801fdfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fde4:	687b      	ldr	r3, [r7, #4]
 801fde6:	681b      	ldr	r3, [r3, #0]
 801fde8:	685b      	ldr	r3, [r3, #4]
 801fdea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	681b      	ldr	r3, [r3, #0]
 801fdf6:	430a      	orrs	r2, r1
 801fdf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fdfe:	f003 0308 	and.w	r3, r3, #8
 801fe02:	2b00      	cmp	r3, #0
 801fe04:	d00a      	beq.n	801fe1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fe06:	687b      	ldr	r3, [r7, #4]
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	685b      	ldr	r3, [r3, #4]
 801fe0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801fe10:	687b      	ldr	r3, [r7, #4]
 801fe12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fe14:	687b      	ldr	r3, [r7, #4]
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	430a      	orrs	r2, r1
 801fe1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe20:	f003 0310 	and.w	r3, r3, #16
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d00a      	beq.n	801fe3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	689b      	ldr	r3, [r3, #8]
 801fe2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801fe32:	687b      	ldr	r3, [r7, #4]
 801fe34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	681b      	ldr	r3, [r3, #0]
 801fe3a:	430a      	orrs	r2, r1
 801fe3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe42:	f003 0320 	and.w	r3, r3, #32
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	d00a      	beq.n	801fe60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fe4a:	687b      	ldr	r3, [r7, #4]
 801fe4c:	681b      	ldr	r3, [r3, #0]
 801fe4e:	689b      	ldr	r3, [r3, #8]
 801fe50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fe58:	687b      	ldr	r3, [r7, #4]
 801fe5a:	681b      	ldr	r3, [r3, #0]
 801fe5c:	430a      	orrs	r2, r1
 801fe5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fe60:	687b      	ldr	r3, [r7, #4]
 801fe62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fe64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	d01a      	beq.n	801fea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	681b      	ldr	r3, [r3, #0]
 801fe70:	685b      	ldr	r3, [r3, #4]
 801fe72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	430a      	orrs	r2, r1
 801fe80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fe82:	687b      	ldr	r3, [r7, #4]
 801fe84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fe86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fe8a:	d10a      	bne.n	801fea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	685b      	ldr	r3, [r3, #4]
 801fe92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fe9a:	687b      	ldr	r3, [r7, #4]
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	430a      	orrs	r2, r1
 801fea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fea2:	687b      	ldr	r3, [r7, #4]
 801fea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801feaa:	2b00      	cmp	r3, #0
 801feac:	d00a      	beq.n	801fec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	685b      	ldr	r3, [r3, #4]
 801feb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801feb8:	687b      	ldr	r3, [r7, #4]
 801feba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	681b      	ldr	r3, [r3, #0]
 801fec0:	430a      	orrs	r2, r1
 801fec2:	605a      	str	r2, [r3, #4]
  }
}
 801fec4:	bf00      	nop
 801fec6:	370c      	adds	r7, #12
 801fec8:	46bd      	mov	sp, r7
 801feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fece:	4770      	bx	lr

0801fed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fed0:	b580      	push	{r7, lr}
 801fed2:	b086      	sub	sp, #24
 801fed4:	af02      	add	r7, sp, #8
 801fed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	2200      	movs	r2, #0
 801fedc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fee0:	f7f8 ff58 	bl	8018d94 <HAL_GetTick>
 801fee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fee6:	687b      	ldr	r3, [r7, #4]
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	f003 0308 	and.w	r3, r3, #8
 801fef0:	2b08      	cmp	r3, #8
 801fef2:	d10e      	bne.n	801ff12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fef8:	9300      	str	r3, [sp, #0]
 801fefa:	68fb      	ldr	r3, [r7, #12]
 801fefc:	2200      	movs	r2, #0
 801fefe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ff02:	6878      	ldr	r0, [r7, #4]
 801ff04:	f000 f82f 	bl	801ff66 <UART_WaitOnFlagUntilTimeout>
 801ff08:	4603      	mov	r3, r0
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d001      	beq.n	801ff12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ff0e:	2303      	movs	r3, #3
 801ff10:	e025      	b.n	801ff5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	f003 0304 	and.w	r3, r3, #4
 801ff1c:	2b04      	cmp	r3, #4
 801ff1e:	d10e      	bne.n	801ff3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801ff20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801ff24:	9300      	str	r3, [sp, #0]
 801ff26:	68fb      	ldr	r3, [r7, #12]
 801ff28:	2200      	movs	r2, #0
 801ff2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801ff2e:	6878      	ldr	r0, [r7, #4]
 801ff30:	f000 f819 	bl	801ff66 <UART_WaitOnFlagUntilTimeout>
 801ff34:	4603      	mov	r3, r0
 801ff36:	2b00      	cmp	r3, #0
 801ff38:	d001      	beq.n	801ff3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ff3a:	2303      	movs	r3, #3
 801ff3c:	e00f      	b.n	801ff5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ff3e:	687b      	ldr	r3, [r7, #4]
 801ff40:	2220      	movs	r2, #32
 801ff42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801ff46:	687b      	ldr	r3, [r7, #4]
 801ff48:	2220      	movs	r2, #32
 801ff4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	2200      	movs	r2, #0
 801ff52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	2200      	movs	r2, #0
 801ff58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ff5c:	2300      	movs	r3, #0
}
 801ff5e:	4618      	mov	r0, r3
 801ff60:	3710      	adds	r7, #16
 801ff62:	46bd      	mov	sp, r7
 801ff64:	bd80      	pop	{r7, pc}

0801ff66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ff66:	b580      	push	{r7, lr}
 801ff68:	b09c      	sub	sp, #112	; 0x70
 801ff6a:	af00      	add	r7, sp, #0
 801ff6c:	60f8      	str	r0, [r7, #12]
 801ff6e:	60b9      	str	r1, [r7, #8]
 801ff70:	603b      	str	r3, [r7, #0]
 801ff72:	4613      	mov	r3, r2
 801ff74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ff76:	e0a9      	b.n	80200cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ff78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ff7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff7e:	f000 80a5 	beq.w	80200cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ff82:	f7f8 ff07 	bl	8018d94 <HAL_GetTick>
 801ff86:	4602      	mov	r2, r0
 801ff88:	683b      	ldr	r3, [r7, #0]
 801ff8a:	1ad3      	subs	r3, r2, r3
 801ff8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ff8e:	429a      	cmp	r2, r3
 801ff90:	d302      	bcc.n	801ff98 <UART_WaitOnFlagUntilTimeout+0x32>
 801ff92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ff94:	2b00      	cmp	r3, #0
 801ff96:	d140      	bne.n	802001a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ff98:	68fb      	ldr	r3, [r7, #12]
 801ff9a:	681b      	ldr	r3, [r3, #0]
 801ff9c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ffa0:	e853 3f00 	ldrex	r3, [r3]
 801ffa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ffa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ffa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ffac:	667b      	str	r3, [r7, #100]	; 0x64
 801ffae:	68fb      	ldr	r3, [r7, #12]
 801ffb0:	681b      	ldr	r3, [r3, #0]
 801ffb2:	461a      	mov	r2, r3
 801ffb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ffb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ffb8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ffba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ffbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ffbe:	e841 2300 	strex	r3, r2, [r1]
 801ffc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ffc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ffc6:	2b00      	cmp	r3, #0
 801ffc8:	d1e6      	bne.n	801ff98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	3308      	adds	r3, #8
 801ffd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ffd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ffd4:	e853 3f00 	ldrex	r3, [r3]
 801ffd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ffda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ffdc:	f023 0301 	bic.w	r3, r3, #1
 801ffe0:	663b      	str	r3, [r7, #96]	; 0x60
 801ffe2:	68fb      	ldr	r3, [r7, #12]
 801ffe4:	681b      	ldr	r3, [r3, #0]
 801ffe6:	3308      	adds	r3, #8
 801ffe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801ffea:	64ba      	str	r2, [r7, #72]	; 0x48
 801ffec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ffee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fff2:	e841 2300 	strex	r3, r2, [r1]
 801fff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801fff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d1e5      	bne.n	801ffca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	2220      	movs	r2, #32
 8020002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8020006:	68fb      	ldr	r3, [r7, #12]
 8020008:	2220      	movs	r2, #32
 802000a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 802000e:	68fb      	ldr	r3, [r7, #12]
 8020010:	2200      	movs	r2, #0
 8020012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8020016:	2303      	movs	r3, #3
 8020018:	e069      	b.n	80200ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 802001a:	68fb      	ldr	r3, [r7, #12]
 802001c:	681b      	ldr	r3, [r3, #0]
 802001e:	681b      	ldr	r3, [r3, #0]
 8020020:	f003 0304 	and.w	r3, r3, #4
 8020024:	2b00      	cmp	r3, #0
 8020026:	d051      	beq.n	80200cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020028:	68fb      	ldr	r3, [r7, #12]
 802002a:	681b      	ldr	r3, [r3, #0]
 802002c:	69db      	ldr	r3, [r3, #28]
 802002e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8020032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8020036:	d149      	bne.n	80200cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020038:	68fb      	ldr	r3, [r7, #12]
 802003a:	681b      	ldr	r3, [r3, #0]
 802003c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020040:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8020042:	68fb      	ldr	r3, [r7, #12]
 8020044:	681b      	ldr	r3, [r3, #0]
 8020046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802004a:	e853 3f00 	ldrex	r3, [r3]
 802004e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8020056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8020058:	68fb      	ldr	r3, [r7, #12]
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	461a      	mov	r2, r3
 802005e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020060:	637b      	str	r3, [r7, #52]	; 0x34
 8020062:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8020068:	e841 2300 	strex	r3, r2, [r1]
 802006c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 802006e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020070:	2b00      	cmp	r3, #0
 8020072:	d1e6      	bne.n	8020042 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020074:	68fb      	ldr	r3, [r7, #12]
 8020076:	681b      	ldr	r3, [r3, #0]
 8020078:	3308      	adds	r3, #8
 802007a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802007c:	697b      	ldr	r3, [r7, #20]
 802007e:	e853 3f00 	ldrex	r3, [r3]
 8020082:	613b      	str	r3, [r7, #16]
   return(result);
 8020084:	693b      	ldr	r3, [r7, #16]
 8020086:	f023 0301 	bic.w	r3, r3, #1
 802008a:	66bb      	str	r3, [r7, #104]	; 0x68
 802008c:	68fb      	ldr	r3, [r7, #12]
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	3308      	adds	r3, #8
 8020092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020094:	623a      	str	r2, [r7, #32]
 8020096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020098:	69f9      	ldr	r1, [r7, #28]
 802009a:	6a3a      	ldr	r2, [r7, #32]
 802009c:	e841 2300 	strex	r3, r2, [r1]
 80200a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80200a2:	69bb      	ldr	r3, [r7, #24]
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d1e5      	bne.n	8020074 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80200a8:	68fb      	ldr	r3, [r7, #12]
 80200aa:	2220      	movs	r2, #32
 80200ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80200b0:	68fb      	ldr	r3, [r7, #12]
 80200b2:	2220      	movs	r2, #32
 80200b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80200b8:	68fb      	ldr	r3, [r7, #12]
 80200ba:	2220      	movs	r2, #32
 80200bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80200c0:	68fb      	ldr	r3, [r7, #12]
 80200c2:	2200      	movs	r2, #0
 80200c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80200c8:	2303      	movs	r3, #3
 80200ca:	e010      	b.n	80200ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80200cc:	68fb      	ldr	r3, [r7, #12]
 80200ce:	681b      	ldr	r3, [r3, #0]
 80200d0:	69da      	ldr	r2, [r3, #28]
 80200d2:	68bb      	ldr	r3, [r7, #8]
 80200d4:	4013      	ands	r3, r2
 80200d6:	68ba      	ldr	r2, [r7, #8]
 80200d8:	429a      	cmp	r2, r3
 80200da:	bf0c      	ite	eq
 80200dc:	2301      	moveq	r3, #1
 80200de:	2300      	movne	r3, #0
 80200e0:	b2db      	uxtb	r3, r3
 80200e2:	461a      	mov	r2, r3
 80200e4:	79fb      	ldrb	r3, [r7, #7]
 80200e6:	429a      	cmp	r2, r3
 80200e8:	f43f af46 	beq.w	801ff78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80200ec:	2300      	movs	r3, #0
}
 80200ee:	4618      	mov	r0, r3
 80200f0:	3770      	adds	r7, #112	; 0x70
 80200f2:	46bd      	mov	sp, r7
 80200f4:	bd80      	pop	{r7, pc}

080200f6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80200f6:	b480      	push	{r7}
 80200f8:	b085      	sub	sp, #20
 80200fa:	af00      	add	r7, sp, #0
 80200fc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80200fe:	687b      	ldr	r3, [r7, #4]
 8020100:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020104:	2b01      	cmp	r3, #1
 8020106:	d101      	bne.n	802010c <HAL_UARTEx_DisableFifoMode+0x16>
 8020108:	2302      	movs	r3, #2
 802010a:	e027      	b.n	802015c <HAL_UARTEx_DisableFifoMode+0x66>
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	2201      	movs	r2, #1
 8020110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020114:	687b      	ldr	r3, [r7, #4]
 8020116:	2224      	movs	r2, #36	; 0x24
 8020118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802011c:	687b      	ldr	r3, [r7, #4]
 802011e:	681b      	ldr	r3, [r3, #0]
 8020120:	681b      	ldr	r3, [r3, #0]
 8020122:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	681b      	ldr	r3, [r3, #0]
 8020128:	681a      	ldr	r2, [r3, #0]
 802012a:	687b      	ldr	r3, [r7, #4]
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	f022 0201 	bic.w	r2, r2, #1
 8020132:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8020134:	68fb      	ldr	r3, [r7, #12]
 8020136:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 802013a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	2200      	movs	r2, #0
 8020140:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	681b      	ldr	r3, [r3, #0]
 8020146:	68fa      	ldr	r2, [r7, #12]
 8020148:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	2220      	movs	r2, #32
 802014e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	2200      	movs	r2, #0
 8020156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802015a:	2300      	movs	r3, #0
}
 802015c:	4618      	mov	r0, r3
 802015e:	3714      	adds	r7, #20
 8020160:	46bd      	mov	sp, r7
 8020162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020166:	4770      	bx	lr

08020168 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020168:	b580      	push	{r7, lr}
 802016a:	b084      	sub	sp, #16
 802016c:	af00      	add	r7, sp, #0
 802016e:	6078      	str	r0, [r7, #4]
 8020170:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020178:	2b01      	cmp	r3, #1
 802017a:	d101      	bne.n	8020180 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802017c:	2302      	movs	r3, #2
 802017e:	e02d      	b.n	80201dc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	2201      	movs	r2, #1
 8020184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	2224      	movs	r2, #36	; 0x24
 802018c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	681b      	ldr	r3, [r3, #0]
 8020194:	681b      	ldr	r3, [r3, #0]
 8020196:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020198:	687b      	ldr	r3, [r7, #4]
 802019a:	681b      	ldr	r3, [r3, #0]
 802019c:	681a      	ldr	r2, [r3, #0]
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	681b      	ldr	r3, [r3, #0]
 80201a2:	f022 0201 	bic.w	r2, r2, #1
 80201a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	689b      	ldr	r3, [r3, #8]
 80201ae:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	681b      	ldr	r3, [r3, #0]
 80201b6:	683a      	ldr	r2, [r7, #0]
 80201b8:	430a      	orrs	r2, r1
 80201ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80201bc:	6878      	ldr	r0, [r7, #4]
 80201be:	f000 f84f 	bl	8020260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80201c2:	687b      	ldr	r3, [r7, #4]
 80201c4:	681b      	ldr	r3, [r3, #0]
 80201c6:	68fa      	ldr	r2, [r7, #12]
 80201c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80201ca:	687b      	ldr	r3, [r7, #4]
 80201cc:	2220      	movs	r2, #32
 80201ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	2200      	movs	r2, #0
 80201d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80201da:	2300      	movs	r3, #0
}
 80201dc:	4618      	mov	r0, r3
 80201de:	3710      	adds	r7, #16
 80201e0:	46bd      	mov	sp, r7
 80201e2:	bd80      	pop	{r7, pc}

080201e4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80201e4:	b580      	push	{r7, lr}
 80201e6:	b084      	sub	sp, #16
 80201e8:	af00      	add	r7, sp, #0
 80201ea:	6078      	str	r0, [r7, #4]
 80201ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80201ee:	687b      	ldr	r3, [r7, #4]
 80201f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80201f4:	2b01      	cmp	r3, #1
 80201f6:	d101      	bne.n	80201fc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80201f8:	2302      	movs	r3, #2
 80201fa:	e02d      	b.n	8020258 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	2201      	movs	r2, #1
 8020200:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	2224      	movs	r2, #36	; 0x24
 8020208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	681b      	ldr	r3, [r3, #0]
 8020212:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	681a      	ldr	r2, [r3, #0]
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	f022 0201 	bic.w	r2, r2, #1
 8020222:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	689b      	ldr	r3, [r3, #8]
 802022a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 802022e:	687b      	ldr	r3, [r7, #4]
 8020230:	681b      	ldr	r3, [r3, #0]
 8020232:	683a      	ldr	r2, [r7, #0]
 8020234:	430a      	orrs	r2, r1
 8020236:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020238:	6878      	ldr	r0, [r7, #4]
 802023a:	f000 f811 	bl	8020260 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802023e:	687b      	ldr	r3, [r7, #4]
 8020240:	681b      	ldr	r3, [r3, #0]
 8020242:	68fa      	ldr	r2, [r7, #12]
 8020244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020246:	687b      	ldr	r3, [r7, #4]
 8020248:	2220      	movs	r2, #32
 802024a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802024e:	687b      	ldr	r3, [r7, #4]
 8020250:	2200      	movs	r2, #0
 8020252:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020256:	2300      	movs	r3, #0
}
 8020258:	4618      	mov	r0, r3
 802025a:	3710      	adds	r7, #16
 802025c:	46bd      	mov	sp, r7
 802025e:	bd80      	pop	{r7, pc}

08020260 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020260:	b480      	push	{r7}
 8020262:	b085      	sub	sp, #20
 8020264:	af00      	add	r7, sp, #0
 8020266:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802026c:	2b00      	cmp	r3, #0
 802026e:	d108      	bne.n	8020282 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	2201      	movs	r2, #1
 8020274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	2201      	movs	r2, #1
 802027c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020280:	e031      	b.n	80202e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8020282:	2308      	movs	r3, #8
 8020284:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020286:	2308      	movs	r3, #8
 8020288:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	689b      	ldr	r3, [r3, #8]
 8020290:	0e5b      	lsrs	r3, r3, #25
 8020292:	b2db      	uxtb	r3, r3
 8020294:	f003 0307 	and.w	r3, r3, #7
 8020298:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	681b      	ldr	r3, [r3, #0]
 802029e:	689b      	ldr	r3, [r3, #8]
 80202a0:	0f5b      	lsrs	r3, r3, #29
 80202a2:	b2db      	uxtb	r3, r3
 80202a4:	f003 0307 	and.w	r3, r3, #7
 80202a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80202aa:	7bbb      	ldrb	r3, [r7, #14]
 80202ac:	7b3a      	ldrb	r2, [r7, #12]
 80202ae:	4911      	ldr	r1, [pc, #68]	; (80202f4 <UARTEx_SetNbDataToProcess+0x94>)
 80202b0:	5c8a      	ldrb	r2, [r1, r2]
 80202b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80202b6:	7b3a      	ldrb	r2, [r7, #12]
 80202b8:	490f      	ldr	r1, [pc, #60]	; (80202f8 <UARTEx_SetNbDataToProcess+0x98>)
 80202ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80202bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80202c0:	b29a      	uxth	r2, r3
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80202c8:	7bfb      	ldrb	r3, [r7, #15]
 80202ca:	7b7a      	ldrb	r2, [r7, #13]
 80202cc:	4909      	ldr	r1, [pc, #36]	; (80202f4 <UARTEx_SetNbDataToProcess+0x94>)
 80202ce:	5c8a      	ldrb	r2, [r1, r2]
 80202d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80202d4:	7b7a      	ldrb	r2, [r7, #13]
 80202d6:	4908      	ldr	r1, [pc, #32]	; (80202f8 <UARTEx_SetNbDataToProcess+0x98>)
 80202d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80202da:	fb93 f3f2 	sdiv	r3, r3, r2
 80202de:	b29a      	uxth	r2, r3
 80202e0:	687b      	ldr	r3, [r7, #4]
 80202e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80202e6:	bf00      	nop
 80202e8:	3714      	adds	r7, #20
 80202ea:	46bd      	mov	sp, r7
 80202ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202f0:	4770      	bx	lr
 80202f2:	bf00      	nop
 80202f4:	08023798 	.word	0x08023798
 80202f8:	080237a0 	.word	0x080237a0

080202fc <__errno>:
 80202fc:	4b01      	ldr	r3, [pc, #4]	; (8020304 <__errno+0x8>)
 80202fe:	6818      	ldr	r0, [r3, #0]
 8020300:	4770      	bx	lr
 8020302:	bf00      	nop
 8020304:	2000002c 	.word	0x2000002c

08020308 <__libc_init_array>:
 8020308:	b570      	push	{r4, r5, r6, lr}
 802030a:	4d0d      	ldr	r5, [pc, #52]	; (8020340 <__libc_init_array+0x38>)
 802030c:	4c0d      	ldr	r4, [pc, #52]	; (8020344 <__libc_init_array+0x3c>)
 802030e:	1b64      	subs	r4, r4, r5
 8020310:	10a4      	asrs	r4, r4, #2
 8020312:	2600      	movs	r6, #0
 8020314:	42a6      	cmp	r6, r4
 8020316:	d109      	bne.n	802032c <__libc_init_array+0x24>
 8020318:	4d0b      	ldr	r5, [pc, #44]	; (8020348 <__libc_init_array+0x40>)
 802031a:	4c0c      	ldr	r4, [pc, #48]	; (802034c <__libc_init_array+0x44>)
 802031c:	f003 f8aa 	bl	8023474 <_init>
 8020320:	1b64      	subs	r4, r4, r5
 8020322:	10a4      	asrs	r4, r4, #2
 8020324:	2600      	movs	r6, #0
 8020326:	42a6      	cmp	r6, r4
 8020328:	d105      	bne.n	8020336 <__libc_init_array+0x2e>
 802032a:	bd70      	pop	{r4, r5, r6, pc}
 802032c:	f855 3b04 	ldr.w	r3, [r5], #4
 8020330:	4798      	blx	r3
 8020332:	3601      	adds	r6, #1
 8020334:	e7ee      	b.n	8020314 <__libc_init_array+0xc>
 8020336:	f855 3b04 	ldr.w	r3, [r5], #4
 802033a:	4798      	blx	r3
 802033c:	3601      	adds	r6, #1
 802033e:	e7f2      	b.n	8020326 <__libc_init_array+0x1e>
 8020340:	08023bc0 	.word	0x08023bc0
 8020344:	08023bc0 	.word	0x08023bc0
 8020348:	08023bc0 	.word	0x08023bc0
 802034c:	08023bc4 	.word	0x08023bc4

08020350 <memcpy>:
 8020350:	440a      	add	r2, r1
 8020352:	4291      	cmp	r1, r2
 8020354:	f100 33ff 	add.w	r3, r0, #4294967295
 8020358:	d100      	bne.n	802035c <memcpy+0xc>
 802035a:	4770      	bx	lr
 802035c:	b510      	push	{r4, lr}
 802035e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020366:	4291      	cmp	r1, r2
 8020368:	d1f9      	bne.n	802035e <memcpy+0xe>
 802036a:	bd10      	pop	{r4, pc}

0802036c <memset>:
 802036c:	4402      	add	r2, r0
 802036e:	4603      	mov	r3, r0
 8020370:	4293      	cmp	r3, r2
 8020372:	d100      	bne.n	8020376 <memset+0xa>
 8020374:	4770      	bx	lr
 8020376:	f803 1b01 	strb.w	r1, [r3], #1
 802037a:	e7f9      	b.n	8020370 <memset+0x4>

0802037c <__cvt>:
 802037c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020380:	ec55 4b10 	vmov	r4, r5, d0
 8020384:	2d00      	cmp	r5, #0
 8020386:	460e      	mov	r6, r1
 8020388:	4619      	mov	r1, r3
 802038a:	462b      	mov	r3, r5
 802038c:	bfbb      	ittet	lt
 802038e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8020392:	461d      	movlt	r5, r3
 8020394:	2300      	movge	r3, #0
 8020396:	232d      	movlt	r3, #45	; 0x2d
 8020398:	700b      	strb	r3, [r1, #0]
 802039a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802039c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80203a0:	4691      	mov	r9, r2
 80203a2:	f023 0820 	bic.w	r8, r3, #32
 80203a6:	bfbc      	itt	lt
 80203a8:	4622      	movlt	r2, r4
 80203aa:	4614      	movlt	r4, r2
 80203ac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80203b0:	d005      	beq.n	80203be <__cvt+0x42>
 80203b2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80203b6:	d100      	bne.n	80203ba <__cvt+0x3e>
 80203b8:	3601      	adds	r6, #1
 80203ba:	2102      	movs	r1, #2
 80203bc:	e000      	b.n	80203c0 <__cvt+0x44>
 80203be:	2103      	movs	r1, #3
 80203c0:	ab03      	add	r3, sp, #12
 80203c2:	9301      	str	r3, [sp, #4]
 80203c4:	ab02      	add	r3, sp, #8
 80203c6:	9300      	str	r3, [sp, #0]
 80203c8:	ec45 4b10 	vmov	d0, r4, r5
 80203cc:	4653      	mov	r3, sl
 80203ce:	4632      	mov	r2, r6
 80203d0:	f000 fe2e 	bl	8021030 <_dtoa_r>
 80203d4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80203d8:	4607      	mov	r7, r0
 80203da:	d102      	bne.n	80203e2 <__cvt+0x66>
 80203dc:	f019 0f01 	tst.w	r9, #1
 80203e0:	d022      	beq.n	8020428 <__cvt+0xac>
 80203e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80203e6:	eb07 0906 	add.w	r9, r7, r6
 80203ea:	d110      	bne.n	802040e <__cvt+0x92>
 80203ec:	783b      	ldrb	r3, [r7, #0]
 80203ee:	2b30      	cmp	r3, #48	; 0x30
 80203f0:	d10a      	bne.n	8020408 <__cvt+0x8c>
 80203f2:	2200      	movs	r2, #0
 80203f4:	2300      	movs	r3, #0
 80203f6:	4620      	mov	r0, r4
 80203f8:	4629      	mov	r1, r5
 80203fa:	f7e0 fb8d 	bl	8000b18 <__aeabi_dcmpeq>
 80203fe:	b918      	cbnz	r0, 8020408 <__cvt+0x8c>
 8020400:	f1c6 0601 	rsb	r6, r6, #1
 8020404:	f8ca 6000 	str.w	r6, [sl]
 8020408:	f8da 3000 	ldr.w	r3, [sl]
 802040c:	4499      	add	r9, r3
 802040e:	2200      	movs	r2, #0
 8020410:	2300      	movs	r3, #0
 8020412:	4620      	mov	r0, r4
 8020414:	4629      	mov	r1, r5
 8020416:	f7e0 fb7f 	bl	8000b18 <__aeabi_dcmpeq>
 802041a:	b108      	cbz	r0, 8020420 <__cvt+0xa4>
 802041c:	f8cd 900c 	str.w	r9, [sp, #12]
 8020420:	2230      	movs	r2, #48	; 0x30
 8020422:	9b03      	ldr	r3, [sp, #12]
 8020424:	454b      	cmp	r3, r9
 8020426:	d307      	bcc.n	8020438 <__cvt+0xbc>
 8020428:	9b03      	ldr	r3, [sp, #12]
 802042a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802042c:	1bdb      	subs	r3, r3, r7
 802042e:	4638      	mov	r0, r7
 8020430:	6013      	str	r3, [r2, #0]
 8020432:	b004      	add	sp, #16
 8020434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020438:	1c59      	adds	r1, r3, #1
 802043a:	9103      	str	r1, [sp, #12]
 802043c:	701a      	strb	r2, [r3, #0]
 802043e:	e7f0      	b.n	8020422 <__cvt+0xa6>

08020440 <__exponent>:
 8020440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020442:	4603      	mov	r3, r0
 8020444:	2900      	cmp	r1, #0
 8020446:	bfb8      	it	lt
 8020448:	4249      	neglt	r1, r1
 802044a:	f803 2b02 	strb.w	r2, [r3], #2
 802044e:	bfb4      	ite	lt
 8020450:	222d      	movlt	r2, #45	; 0x2d
 8020452:	222b      	movge	r2, #43	; 0x2b
 8020454:	2909      	cmp	r1, #9
 8020456:	7042      	strb	r2, [r0, #1]
 8020458:	dd2a      	ble.n	80204b0 <__exponent+0x70>
 802045a:	f10d 0407 	add.w	r4, sp, #7
 802045e:	46a4      	mov	ip, r4
 8020460:	270a      	movs	r7, #10
 8020462:	46a6      	mov	lr, r4
 8020464:	460a      	mov	r2, r1
 8020466:	fb91 f6f7 	sdiv	r6, r1, r7
 802046a:	fb07 1516 	mls	r5, r7, r6, r1
 802046e:	3530      	adds	r5, #48	; 0x30
 8020470:	2a63      	cmp	r2, #99	; 0x63
 8020472:	f104 34ff 	add.w	r4, r4, #4294967295
 8020476:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802047a:	4631      	mov	r1, r6
 802047c:	dcf1      	bgt.n	8020462 <__exponent+0x22>
 802047e:	3130      	adds	r1, #48	; 0x30
 8020480:	f1ae 0502 	sub.w	r5, lr, #2
 8020484:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020488:	1c44      	adds	r4, r0, #1
 802048a:	4629      	mov	r1, r5
 802048c:	4561      	cmp	r1, ip
 802048e:	d30a      	bcc.n	80204a6 <__exponent+0x66>
 8020490:	f10d 0209 	add.w	r2, sp, #9
 8020494:	eba2 020e 	sub.w	r2, r2, lr
 8020498:	4565      	cmp	r5, ip
 802049a:	bf88      	it	hi
 802049c:	2200      	movhi	r2, #0
 802049e:	4413      	add	r3, r2
 80204a0:	1a18      	subs	r0, r3, r0
 80204a2:	b003      	add	sp, #12
 80204a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80204a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80204aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80204ae:	e7ed      	b.n	802048c <__exponent+0x4c>
 80204b0:	2330      	movs	r3, #48	; 0x30
 80204b2:	3130      	adds	r1, #48	; 0x30
 80204b4:	7083      	strb	r3, [r0, #2]
 80204b6:	70c1      	strb	r1, [r0, #3]
 80204b8:	1d03      	adds	r3, r0, #4
 80204ba:	e7f1      	b.n	80204a0 <__exponent+0x60>

080204bc <_printf_float>:
 80204bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80204c0:	ed2d 8b02 	vpush	{d8}
 80204c4:	b08d      	sub	sp, #52	; 0x34
 80204c6:	460c      	mov	r4, r1
 80204c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80204cc:	4616      	mov	r6, r2
 80204ce:	461f      	mov	r7, r3
 80204d0:	4605      	mov	r5, r0
 80204d2:	f001 fd53 	bl	8021f7c <_localeconv_r>
 80204d6:	f8d0 a000 	ldr.w	sl, [r0]
 80204da:	4650      	mov	r0, sl
 80204dc:	f7df fea0 	bl	8000220 <strlen>
 80204e0:	2300      	movs	r3, #0
 80204e2:	930a      	str	r3, [sp, #40]	; 0x28
 80204e4:	6823      	ldr	r3, [r4, #0]
 80204e6:	9305      	str	r3, [sp, #20]
 80204e8:	f8d8 3000 	ldr.w	r3, [r8]
 80204ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80204f0:	3307      	adds	r3, #7
 80204f2:	f023 0307 	bic.w	r3, r3, #7
 80204f6:	f103 0208 	add.w	r2, r3, #8
 80204fa:	f8c8 2000 	str.w	r2, [r8]
 80204fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020502:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8020506:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802050a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 802050e:	9307      	str	r3, [sp, #28]
 8020510:	f8cd 8018 	str.w	r8, [sp, #24]
 8020514:	ee08 0a10 	vmov	s16, r0
 8020518:	4b9f      	ldr	r3, [pc, #636]	; (8020798 <_printf_float+0x2dc>)
 802051a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802051e:	f04f 32ff 	mov.w	r2, #4294967295
 8020522:	f7e0 fb2b 	bl	8000b7c <__aeabi_dcmpun>
 8020526:	bb88      	cbnz	r0, 802058c <_printf_float+0xd0>
 8020528:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802052c:	4b9a      	ldr	r3, [pc, #616]	; (8020798 <_printf_float+0x2dc>)
 802052e:	f04f 32ff 	mov.w	r2, #4294967295
 8020532:	f7e0 fb05 	bl	8000b40 <__aeabi_dcmple>
 8020536:	bb48      	cbnz	r0, 802058c <_printf_float+0xd0>
 8020538:	2200      	movs	r2, #0
 802053a:	2300      	movs	r3, #0
 802053c:	4640      	mov	r0, r8
 802053e:	4649      	mov	r1, r9
 8020540:	f7e0 faf4 	bl	8000b2c <__aeabi_dcmplt>
 8020544:	b110      	cbz	r0, 802054c <_printf_float+0x90>
 8020546:	232d      	movs	r3, #45	; 0x2d
 8020548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802054c:	4b93      	ldr	r3, [pc, #588]	; (802079c <_printf_float+0x2e0>)
 802054e:	4894      	ldr	r0, [pc, #592]	; (80207a0 <_printf_float+0x2e4>)
 8020550:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8020554:	bf94      	ite	ls
 8020556:	4698      	movls	r8, r3
 8020558:	4680      	movhi	r8, r0
 802055a:	2303      	movs	r3, #3
 802055c:	6123      	str	r3, [r4, #16]
 802055e:	9b05      	ldr	r3, [sp, #20]
 8020560:	f023 0204 	bic.w	r2, r3, #4
 8020564:	6022      	str	r2, [r4, #0]
 8020566:	f04f 0900 	mov.w	r9, #0
 802056a:	9700      	str	r7, [sp, #0]
 802056c:	4633      	mov	r3, r6
 802056e:	aa0b      	add	r2, sp, #44	; 0x2c
 8020570:	4621      	mov	r1, r4
 8020572:	4628      	mov	r0, r5
 8020574:	f000 f9d8 	bl	8020928 <_printf_common>
 8020578:	3001      	adds	r0, #1
 802057a:	f040 8090 	bne.w	802069e <_printf_float+0x1e2>
 802057e:	f04f 30ff 	mov.w	r0, #4294967295
 8020582:	b00d      	add	sp, #52	; 0x34
 8020584:	ecbd 8b02 	vpop	{d8}
 8020588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802058c:	4642      	mov	r2, r8
 802058e:	464b      	mov	r3, r9
 8020590:	4640      	mov	r0, r8
 8020592:	4649      	mov	r1, r9
 8020594:	f7e0 faf2 	bl	8000b7c <__aeabi_dcmpun>
 8020598:	b140      	cbz	r0, 80205ac <_printf_float+0xf0>
 802059a:	464b      	mov	r3, r9
 802059c:	2b00      	cmp	r3, #0
 802059e:	bfbc      	itt	lt
 80205a0:	232d      	movlt	r3, #45	; 0x2d
 80205a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80205a6:	487f      	ldr	r0, [pc, #508]	; (80207a4 <_printf_float+0x2e8>)
 80205a8:	4b7f      	ldr	r3, [pc, #508]	; (80207a8 <_printf_float+0x2ec>)
 80205aa:	e7d1      	b.n	8020550 <_printf_float+0x94>
 80205ac:	6863      	ldr	r3, [r4, #4]
 80205ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80205b2:	9206      	str	r2, [sp, #24]
 80205b4:	1c5a      	adds	r2, r3, #1
 80205b6:	d13f      	bne.n	8020638 <_printf_float+0x17c>
 80205b8:	2306      	movs	r3, #6
 80205ba:	6063      	str	r3, [r4, #4]
 80205bc:	9b05      	ldr	r3, [sp, #20]
 80205be:	6861      	ldr	r1, [r4, #4]
 80205c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80205c4:	2300      	movs	r3, #0
 80205c6:	9303      	str	r3, [sp, #12]
 80205c8:	ab0a      	add	r3, sp, #40	; 0x28
 80205ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80205ce:	ab09      	add	r3, sp, #36	; 0x24
 80205d0:	ec49 8b10 	vmov	d0, r8, r9
 80205d4:	9300      	str	r3, [sp, #0]
 80205d6:	6022      	str	r2, [r4, #0]
 80205d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80205dc:	4628      	mov	r0, r5
 80205de:	f7ff fecd 	bl	802037c <__cvt>
 80205e2:	9b06      	ldr	r3, [sp, #24]
 80205e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80205e6:	2b47      	cmp	r3, #71	; 0x47
 80205e8:	4680      	mov	r8, r0
 80205ea:	d108      	bne.n	80205fe <_printf_float+0x142>
 80205ec:	1cc8      	adds	r0, r1, #3
 80205ee:	db02      	blt.n	80205f6 <_printf_float+0x13a>
 80205f0:	6863      	ldr	r3, [r4, #4]
 80205f2:	4299      	cmp	r1, r3
 80205f4:	dd41      	ble.n	802067a <_printf_float+0x1be>
 80205f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80205fa:	fa5f fb8b 	uxtb.w	fp, fp
 80205fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020602:	d820      	bhi.n	8020646 <_printf_float+0x18a>
 8020604:	3901      	subs	r1, #1
 8020606:	465a      	mov	r2, fp
 8020608:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802060c:	9109      	str	r1, [sp, #36]	; 0x24
 802060e:	f7ff ff17 	bl	8020440 <__exponent>
 8020612:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020614:	1813      	adds	r3, r2, r0
 8020616:	2a01      	cmp	r2, #1
 8020618:	4681      	mov	r9, r0
 802061a:	6123      	str	r3, [r4, #16]
 802061c:	dc02      	bgt.n	8020624 <_printf_float+0x168>
 802061e:	6822      	ldr	r2, [r4, #0]
 8020620:	07d2      	lsls	r2, r2, #31
 8020622:	d501      	bpl.n	8020628 <_printf_float+0x16c>
 8020624:	3301      	adds	r3, #1
 8020626:	6123      	str	r3, [r4, #16]
 8020628:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 802062c:	2b00      	cmp	r3, #0
 802062e:	d09c      	beq.n	802056a <_printf_float+0xae>
 8020630:	232d      	movs	r3, #45	; 0x2d
 8020632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020636:	e798      	b.n	802056a <_printf_float+0xae>
 8020638:	9a06      	ldr	r2, [sp, #24]
 802063a:	2a47      	cmp	r2, #71	; 0x47
 802063c:	d1be      	bne.n	80205bc <_printf_float+0x100>
 802063e:	2b00      	cmp	r3, #0
 8020640:	d1bc      	bne.n	80205bc <_printf_float+0x100>
 8020642:	2301      	movs	r3, #1
 8020644:	e7b9      	b.n	80205ba <_printf_float+0xfe>
 8020646:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 802064a:	d118      	bne.n	802067e <_printf_float+0x1c2>
 802064c:	2900      	cmp	r1, #0
 802064e:	6863      	ldr	r3, [r4, #4]
 8020650:	dd0b      	ble.n	802066a <_printf_float+0x1ae>
 8020652:	6121      	str	r1, [r4, #16]
 8020654:	b913      	cbnz	r3, 802065c <_printf_float+0x1a0>
 8020656:	6822      	ldr	r2, [r4, #0]
 8020658:	07d0      	lsls	r0, r2, #31
 802065a:	d502      	bpl.n	8020662 <_printf_float+0x1a6>
 802065c:	3301      	adds	r3, #1
 802065e:	440b      	add	r3, r1
 8020660:	6123      	str	r3, [r4, #16]
 8020662:	65a1      	str	r1, [r4, #88]	; 0x58
 8020664:	f04f 0900 	mov.w	r9, #0
 8020668:	e7de      	b.n	8020628 <_printf_float+0x16c>
 802066a:	b913      	cbnz	r3, 8020672 <_printf_float+0x1b6>
 802066c:	6822      	ldr	r2, [r4, #0]
 802066e:	07d2      	lsls	r2, r2, #31
 8020670:	d501      	bpl.n	8020676 <_printf_float+0x1ba>
 8020672:	3302      	adds	r3, #2
 8020674:	e7f4      	b.n	8020660 <_printf_float+0x1a4>
 8020676:	2301      	movs	r3, #1
 8020678:	e7f2      	b.n	8020660 <_printf_float+0x1a4>
 802067a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802067e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020680:	4299      	cmp	r1, r3
 8020682:	db05      	blt.n	8020690 <_printf_float+0x1d4>
 8020684:	6823      	ldr	r3, [r4, #0]
 8020686:	6121      	str	r1, [r4, #16]
 8020688:	07d8      	lsls	r0, r3, #31
 802068a:	d5ea      	bpl.n	8020662 <_printf_float+0x1a6>
 802068c:	1c4b      	adds	r3, r1, #1
 802068e:	e7e7      	b.n	8020660 <_printf_float+0x1a4>
 8020690:	2900      	cmp	r1, #0
 8020692:	bfd4      	ite	le
 8020694:	f1c1 0202 	rsble	r2, r1, #2
 8020698:	2201      	movgt	r2, #1
 802069a:	4413      	add	r3, r2
 802069c:	e7e0      	b.n	8020660 <_printf_float+0x1a4>
 802069e:	6823      	ldr	r3, [r4, #0]
 80206a0:	055a      	lsls	r2, r3, #21
 80206a2:	d407      	bmi.n	80206b4 <_printf_float+0x1f8>
 80206a4:	6923      	ldr	r3, [r4, #16]
 80206a6:	4642      	mov	r2, r8
 80206a8:	4631      	mov	r1, r6
 80206aa:	4628      	mov	r0, r5
 80206ac:	47b8      	blx	r7
 80206ae:	3001      	adds	r0, #1
 80206b0:	d12c      	bne.n	802070c <_printf_float+0x250>
 80206b2:	e764      	b.n	802057e <_printf_float+0xc2>
 80206b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80206b8:	f240 80e0 	bls.w	802087c <_printf_float+0x3c0>
 80206bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80206c0:	2200      	movs	r2, #0
 80206c2:	2300      	movs	r3, #0
 80206c4:	f7e0 fa28 	bl	8000b18 <__aeabi_dcmpeq>
 80206c8:	2800      	cmp	r0, #0
 80206ca:	d034      	beq.n	8020736 <_printf_float+0x27a>
 80206cc:	4a37      	ldr	r2, [pc, #220]	; (80207ac <_printf_float+0x2f0>)
 80206ce:	2301      	movs	r3, #1
 80206d0:	4631      	mov	r1, r6
 80206d2:	4628      	mov	r0, r5
 80206d4:	47b8      	blx	r7
 80206d6:	3001      	adds	r0, #1
 80206d8:	f43f af51 	beq.w	802057e <_printf_float+0xc2>
 80206dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80206e0:	429a      	cmp	r2, r3
 80206e2:	db02      	blt.n	80206ea <_printf_float+0x22e>
 80206e4:	6823      	ldr	r3, [r4, #0]
 80206e6:	07d8      	lsls	r0, r3, #31
 80206e8:	d510      	bpl.n	802070c <_printf_float+0x250>
 80206ea:	ee18 3a10 	vmov	r3, s16
 80206ee:	4652      	mov	r2, sl
 80206f0:	4631      	mov	r1, r6
 80206f2:	4628      	mov	r0, r5
 80206f4:	47b8      	blx	r7
 80206f6:	3001      	adds	r0, #1
 80206f8:	f43f af41 	beq.w	802057e <_printf_float+0xc2>
 80206fc:	f04f 0800 	mov.w	r8, #0
 8020700:	f104 091a 	add.w	r9, r4, #26
 8020704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020706:	3b01      	subs	r3, #1
 8020708:	4543      	cmp	r3, r8
 802070a:	dc09      	bgt.n	8020720 <_printf_float+0x264>
 802070c:	6823      	ldr	r3, [r4, #0]
 802070e:	079b      	lsls	r3, r3, #30
 8020710:	f100 8105 	bmi.w	802091e <_printf_float+0x462>
 8020714:	68e0      	ldr	r0, [r4, #12]
 8020716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020718:	4298      	cmp	r0, r3
 802071a:	bfb8      	it	lt
 802071c:	4618      	movlt	r0, r3
 802071e:	e730      	b.n	8020582 <_printf_float+0xc6>
 8020720:	2301      	movs	r3, #1
 8020722:	464a      	mov	r2, r9
 8020724:	4631      	mov	r1, r6
 8020726:	4628      	mov	r0, r5
 8020728:	47b8      	blx	r7
 802072a:	3001      	adds	r0, #1
 802072c:	f43f af27 	beq.w	802057e <_printf_float+0xc2>
 8020730:	f108 0801 	add.w	r8, r8, #1
 8020734:	e7e6      	b.n	8020704 <_printf_float+0x248>
 8020736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020738:	2b00      	cmp	r3, #0
 802073a:	dc39      	bgt.n	80207b0 <_printf_float+0x2f4>
 802073c:	4a1b      	ldr	r2, [pc, #108]	; (80207ac <_printf_float+0x2f0>)
 802073e:	2301      	movs	r3, #1
 8020740:	4631      	mov	r1, r6
 8020742:	4628      	mov	r0, r5
 8020744:	47b8      	blx	r7
 8020746:	3001      	adds	r0, #1
 8020748:	f43f af19 	beq.w	802057e <_printf_float+0xc2>
 802074c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020750:	4313      	orrs	r3, r2
 8020752:	d102      	bne.n	802075a <_printf_float+0x29e>
 8020754:	6823      	ldr	r3, [r4, #0]
 8020756:	07d9      	lsls	r1, r3, #31
 8020758:	d5d8      	bpl.n	802070c <_printf_float+0x250>
 802075a:	ee18 3a10 	vmov	r3, s16
 802075e:	4652      	mov	r2, sl
 8020760:	4631      	mov	r1, r6
 8020762:	4628      	mov	r0, r5
 8020764:	47b8      	blx	r7
 8020766:	3001      	adds	r0, #1
 8020768:	f43f af09 	beq.w	802057e <_printf_float+0xc2>
 802076c:	f04f 0900 	mov.w	r9, #0
 8020770:	f104 0a1a 	add.w	sl, r4, #26
 8020774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020776:	425b      	negs	r3, r3
 8020778:	454b      	cmp	r3, r9
 802077a:	dc01      	bgt.n	8020780 <_printf_float+0x2c4>
 802077c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802077e:	e792      	b.n	80206a6 <_printf_float+0x1ea>
 8020780:	2301      	movs	r3, #1
 8020782:	4652      	mov	r2, sl
 8020784:	4631      	mov	r1, r6
 8020786:	4628      	mov	r0, r5
 8020788:	47b8      	blx	r7
 802078a:	3001      	adds	r0, #1
 802078c:	f43f aef7 	beq.w	802057e <_printf_float+0xc2>
 8020790:	f109 0901 	add.w	r9, r9, #1
 8020794:	e7ee      	b.n	8020774 <_printf_float+0x2b8>
 8020796:	bf00      	nop
 8020798:	7fefffff 	.word	0x7fefffff
 802079c:	080237ac 	.word	0x080237ac
 80207a0:	080237b0 	.word	0x080237b0
 80207a4:	080237b8 	.word	0x080237b8
 80207a8:	080237b4 	.word	0x080237b4
 80207ac:	080237bc 	.word	0x080237bc
 80207b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80207b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80207b4:	429a      	cmp	r2, r3
 80207b6:	bfa8      	it	ge
 80207b8:	461a      	movge	r2, r3
 80207ba:	2a00      	cmp	r2, #0
 80207bc:	4691      	mov	r9, r2
 80207be:	dc37      	bgt.n	8020830 <_printf_float+0x374>
 80207c0:	f04f 0b00 	mov.w	fp, #0
 80207c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80207c8:	f104 021a 	add.w	r2, r4, #26
 80207cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80207ce:	9305      	str	r3, [sp, #20]
 80207d0:	eba3 0309 	sub.w	r3, r3, r9
 80207d4:	455b      	cmp	r3, fp
 80207d6:	dc33      	bgt.n	8020840 <_printf_float+0x384>
 80207d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80207dc:	429a      	cmp	r2, r3
 80207de:	db3b      	blt.n	8020858 <_printf_float+0x39c>
 80207e0:	6823      	ldr	r3, [r4, #0]
 80207e2:	07da      	lsls	r2, r3, #31
 80207e4:	d438      	bmi.n	8020858 <_printf_float+0x39c>
 80207e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80207e8:	9a05      	ldr	r2, [sp, #20]
 80207ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80207ec:	1a9a      	subs	r2, r3, r2
 80207ee:	eba3 0901 	sub.w	r9, r3, r1
 80207f2:	4591      	cmp	r9, r2
 80207f4:	bfa8      	it	ge
 80207f6:	4691      	movge	r9, r2
 80207f8:	f1b9 0f00 	cmp.w	r9, #0
 80207fc:	dc35      	bgt.n	802086a <_printf_float+0x3ae>
 80207fe:	f04f 0800 	mov.w	r8, #0
 8020802:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020806:	f104 0a1a 	add.w	sl, r4, #26
 802080a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802080e:	1a9b      	subs	r3, r3, r2
 8020810:	eba3 0309 	sub.w	r3, r3, r9
 8020814:	4543      	cmp	r3, r8
 8020816:	f77f af79 	ble.w	802070c <_printf_float+0x250>
 802081a:	2301      	movs	r3, #1
 802081c:	4652      	mov	r2, sl
 802081e:	4631      	mov	r1, r6
 8020820:	4628      	mov	r0, r5
 8020822:	47b8      	blx	r7
 8020824:	3001      	adds	r0, #1
 8020826:	f43f aeaa 	beq.w	802057e <_printf_float+0xc2>
 802082a:	f108 0801 	add.w	r8, r8, #1
 802082e:	e7ec      	b.n	802080a <_printf_float+0x34e>
 8020830:	4613      	mov	r3, r2
 8020832:	4631      	mov	r1, r6
 8020834:	4642      	mov	r2, r8
 8020836:	4628      	mov	r0, r5
 8020838:	47b8      	blx	r7
 802083a:	3001      	adds	r0, #1
 802083c:	d1c0      	bne.n	80207c0 <_printf_float+0x304>
 802083e:	e69e      	b.n	802057e <_printf_float+0xc2>
 8020840:	2301      	movs	r3, #1
 8020842:	4631      	mov	r1, r6
 8020844:	4628      	mov	r0, r5
 8020846:	9205      	str	r2, [sp, #20]
 8020848:	47b8      	blx	r7
 802084a:	3001      	adds	r0, #1
 802084c:	f43f ae97 	beq.w	802057e <_printf_float+0xc2>
 8020850:	9a05      	ldr	r2, [sp, #20]
 8020852:	f10b 0b01 	add.w	fp, fp, #1
 8020856:	e7b9      	b.n	80207cc <_printf_float+0x310>
 8020858:	ee18 3a10 	vmov	r3, s16
 802085c:	4652      	mov	r2, sl
 802085e:	4631      	mov	r1, r6
 8020860:	4628      	mov	r0, r5
 8020862:	47b8      	blx	r7
 8020864:	3001      	adds	r0, #1
 8020866:	d1be      	bne.n	80207e6 <_printf_float+0x32a>
 8020868:	e689      	b.n	802057e <_printf_float+0xc2>
 802086a:	9a05      	ldr	r2, [sp, #20]
 802086c:	464b      	mov	r3, r9
 802086e:	4442      	add	r2, r8
 8020870:	4631      	mov	r1, r6
 8020872:	4628      	mov	r0, r5
 8020874:	47b8      	blx	r7
 8020876:	3001      	adds	r0, #1
 8020878:	d1c1      	bne.n	80207fe <_printf_float+0x342>
 802087a:	e680      	b.n	802057e <_printf_float+0xc2>
 802087c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802087e:	2a01      	cmp	r2, #1
 8020880:	dc01      	bgt.n	8020886 <_printf_float+0x3ca>
 8020882:	07db      	lsls	r3, r3, #31
 8020884:	d538      	bpl.n	80208f8 <_printf_float+0x43c>
 8020886:	2301      	movs	r3, #1
 8020888:	4642      	mov	r2, r8
 802088a:	4631      	mov	r1, r6
 802088c:	4628      	mov	r0, r5
 802088e:	47b8      	blx	r7
 8020890:	3001      	adds	r0, #1
 8020892:	f43f ae74 	beq.w	802057e <_printf_float+0xc2>
 8020896:	ee18 3a10 	vmov	r3, s16
 802089a:	4652      	mov	r2, sl
 802089c:	4631      	mov	r1, r6
 802089e:	4628      	mov	r0, r5
 80208a0:	47b8      	blx	r7
 80208a2:	3001      	adds	r0, #1
 80208a4:	f43f ae6b 	beq.w	802057e <_printf_float+0xc2>
 80208a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80208ac:	2200      	movs	r2, #0
 80208ae:	2300      	movs	r3, #0
 80208b0:	f7e0 f932 	bl	8000b18 <__aeabi_dcmpeq>
 80208b4:	b9d8      	cbnz	r0, 80208ee <_printf_float+0x432>
 80208b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208b8:	f108 0201 	add.w	r2, r8, #1
 80208bc:	3b01      	subs	r3, #1
 80208be:	4631      	mov	r1, r6
 80208c0:	4628      	mov	r0, r5
 80208c2:	47b8      	blx	r7
 80208c4:	3001      	adds	r0, #1
 80208c6:	d10e      	bne.n	80208e6 <_printf_float+0x42a>
 80208c8:	e659      	b.n	802057e <_printf_float+0xc2>
 80208ca:	2301      	movs	r3, #1
 80208cc:	4652      	mov	r2, sl
 80208ce:	4631      	mov	r1, r6
 80208d0:	4628      	mov	r0, r5
 80208d2:	47b8      	blx	r7
 80208d4:	3001      	adds	r0, #1
 80208d6:	f43f ae52 	beq.w	802057e <_printf_float+0xc2>
 80208da:	f108 0801 	add.w	r8, r8, #1
 80208de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80208e0:	3b01      	subs	r3, #1
 80208e2:	4543      	cmp	r3, r8
 80208e4:	dcf1      	bgt.n	80208ca <_printf_float+0x40e>
 80208e6:	464b      	mov	r3, r9
 80208e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80208ec:	e6dc      	b.n	80206a8 <_printf_float+0x1ec>
 80208ee:	f04f 0800 	mov.w	r8, #0
 80208f2:	f104 0a1a 	add.w	sl, r4, #26
 80208f6:	e7f2      	b.n	80208de <_printf_float+0x422>
 80208f8:	2301      	movs	r3, #1
 80208fa:	4642      	mov	r2, r8
 80208fc:	e7df      	b.n	80208be <_printf_float+0x402>
 80208fe:	2301      	movs	r3, #1
 8020900:	464a      	mov	r2, r9
 8020902:	4631      	mov	r1, r6
 8020904:	4628      	mov	r0, r5
 8020906:	47b8      	blx	r7
 8020908:	3001      	adds	r0, #1
 802090a:	f43f ae38 	beq.w	802057e <_printf_float+0xc2>
 802090e:	f108 0801 	add.w	r8, r8, #1
 8020912:	68e3      	ldr	r3, [r4, #12]
 8020914:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020916:	1a5b      	subs	r3, r3, r1
 8020918:	4543      	cmp	r3, r8
 802091a:	dcf0      	bgt.n	80208fe <_printf_float+0x442>
 802091c:	e6fa      	b.n	8020714 <_printf_float+0x258>
 802091e:	f04f 0800 	mov.w	r8, #0
 8020922:	f104 0919 	add.w	r9, r4, #25
 8020926:	e7f4      	b.n	8020912 <_printf_float+0x456>

08020928 <_printf_common>:
 8020928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802092c:	4616      	mov	r6, r2
 802092e:	4699      	mov	r9, r3
 8020930:	688a      	ldr	r2, [r1, #8]
 8020932:	690b      	ldr	r3, [r1, #16]
 8020934:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020938:	4293      	cmp	r3, r2
 802093a:	bfb8      	it	lt
 802093c:	4613      	movlt	r3, r2
 802093e:	6033      	str	r3, [r6, #0]
 8020940:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8020944:	4607      	mov	r7, r0
 8020946:	460c      	mov	r4, r1
 8020948:	b10a      	cbz	r2, 802094e <_printf_common+0x26>
 802094a:	3301      	adds	r3, #1
 802094c:	6033      	str	r3, [r6, #0]
 802094e:	6823      	ldr	r3, [r4, #0]
 8020950:	0699      	lsls	r1, r3, #26
 8020952:	bf42      	ittt	mi
 8020954:	6833      	ldrmi	r3, [r6, #0]
 8020956:	3302      	addmi	r3, #2
 8020958:	6033      	strmi	r3, [r6, #0]
 802095a:	6825      	ldr	r5, [r4, #0]
 802095c:	f015 0506 	ands.w	r5, r5, #6
 8020960:	d106      	bne.n	8020970 <_printf_common+0x48>
 8020962:	f104 0a19 	add.w	sl, r4, #25
 8020966:	68e3      	ldr	r3, [r4, #12]
 8020968:	6832      	ldr	r2, [r6, #0]
 802096a:	1a9b      	subs	r3, r3, r2
 802096c:	42ab      	cmp	r3, r5
 802096e:	dc26      	bgt.n	80209be <_printf_common+0x96>
 8020970:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8020974:	1e13      	subs	r3, r2, #0
 8020976:	6822      	ldr	r2, [r4, #0]
 8020978:	bf18      	it	ne
 802097a:	2301      	movne	r3, #1
 802097c:	0692      	lsls	r2, r2, #26
 802097e:	d42b      	bmi.n	80209d8 <_printf_common+0xb0>
 8020980:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020984:	4649      	mov	r1, r9
 8020986:	4638      	mov	r0, r7
 8020988:	47c0      	blx	r8
 802098a:	3001      	adds	r0, #1
 802098c:	d01e      	beq.n	80209cc <_printf_common+0xa4>
 802098e:	6823      	ldr	r3, [r4, #0]
 8020990:	68e5      	ldr	r5, [r4, #12]
 8020992:	6832      	ldr	r2, [r6, #0]
 8020994:	f003 0306 	and.w	r3, r3, #6
 8020998:	2b04      	cmp	r3, #4
 802099a:	bf08      	it	eq
 802099c:	1aad      	subeq	r5, r5, r2
 802099e:	68a3      	ldr	r3, [r4, #8]
 80209a0:	6922      	ldr	r2, [r4, #16]
 80209a2:	bf0c      	ite	eq
 80209a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80209a8:	2500      	movne	r5, #0
 80209aa:	4293      	cmp	r3, r2
 80209ac:	bfc4      	itt	gt
 80209ae:	1a9b      	subgt	r3, r3, r2
 80209b0:	18ed      	addgt	r5, r5, r3
 80209b2:	2600      	movs	r6, #0
 80209b4:	341a      	adds	r4, #26
 80209b6:	42b5      	cmp	r5, r6
 80209b8:	d11a      	bne.n	80209f0 <_printf_common+0xc8>
 80209ba:	2000      	movs	r0, #0
 80209bc:	e008      	b.n	80209d0 <_printf_common+0xa8>
 80209be:	2301      	movs	r3, #1
 80209c0:	4652      	mov	r2, sl
 80209c2:	4649      	mov	r1, r9
 80209c4:	4638      	mov	r0, r7
 80209c6:	47c0      	blx	r8
 80209c8:	3001      	adds	r0, #1
 80209ca:	d103      	bne.n	80209d4 <_printf_common+0xac>
 80209cc:	f04f 30ff 	mov.w	r0, #4294967295
 80209d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209d4:	3501      	adds	r5, #1
 80209d6:	e7c6      	b.n	8020966 <_printf_common+0x3e>
 80209d8:	18e1      	adds	r1, r4, r3
 80209da:	1c5a      	adds	r2, r3, #1
 80209dc:	2030      	movs	r0, #48	; 0x30
 80209de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80209e2:	4422      	add	r2, r4
 80209e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80209e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80209ec:	3302      	adds	r3, #2
 80209ee:	e7c7      	b.n	8020980 <_printf_common+0x58>
 80209f0:	2301      	movs	r3, #1
 80209f2:	4622      	mov	r2, r4
 80209f4:	4649      	mov	r1, r9
 80209f6:	4638      	mov	r0, r7
 80209f8:	47c0      	blx	r8
 80209fa:	3001      	adds	r0, #1
 80209fc:	d0e6      	beq.n	80209cc <_printf_common+0xa4>
 80209fe:	3601      	adds	r6, #1
 8020a00:	e7d9      	b.n	80209b6 <_printf_common+0x8e>
	...

08020a04 <_printf_i>:
 8020a04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020a08:	7e0f      	ldrb	r7, [r1, #24]
 8020a0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020a0c:	2f78      	cmp	r7, #120	; 0x78
 8020a0e:	4691      	mov	r9, r2
 8020a10:	4680      	mov	r8, r0
 8020a12:	460c      	mov	r4, r1
 8020a14:	469a      	mov	sl, r3
 8020a16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020a1a:	d807      	bhi.n	8020a2c <_printf_i+0x28>
 8020a1c:	2f62      	cmp	r7, #98	; 0x62
 8020a1e:	d80a      	bhi.n	8020a36 <_printf_i+0x32>
 8020a20:	2f00      	cmp	r7, #0
 8020a22:	f000 80d8 	beq.w	8020bd6 <_printf_i+0x1d2>
 8020a26:	2f58      	cmp	r7, #88	; 0x58
 8020a28:	f000 80a3 	beq.w	8020b72 <_printf_i+0x16e>
 8020a2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020a30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8020a34:	e03a      	b.n	8020aac <_printf_i+0xa8>
 8020a36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020a3a:	2b15      	cmp	r3, #21
 8020a3c:	d8f6      	bhi.n	8020a2c <_printf_i+0x28>
 8020a3e:	a101      	add	r1, pc, #4	; (adr r1, 8020a44 <_printf_i+0x40>)
 8020a40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020a44:	08020a9d 	.word	0x08020a9d
 8020a48:	08020ab1 	.word	0x08020ab1
 8020a4c:	08020a2d 	.word	0x08020a2d
 8020a50:	08020a2d 	.word	0x08020a2d
 8020a54:	08020a2d 	.word	0x08020a2d
 8020a58:	08020a2d 	.word	0x08020a2d
 8020a5c:	08020ab1 	.word	0x08020ab1
 8020a60:	08020a2d 	.word	0x08020a2d
 8020a64:	08020a2d 	.word	0x08020a2d
 8020a68:	08020a2d 	.word	0x08020a2d
 8020a6c:	08020a2d 	.word	0x08020a2d
 8020a70:	08020bbd 	.word	0x08020bbd
 8020a74:	08020ae1 	.word	0x08020ae1
 8020a78:	08020b9f 	.word	0x08020b9f
 8020a7c:	08020a2d 	.word	0x08020a2d
 8020a80:	08020a2d 	.word	0x08020a2d
 8020a84:	08020bdf 	.word	0x08020bdf
 8020a88:	08020a2d 	.word	0x08020a2d
 8020a8c:	08020ae1 	.word	0x08020ae1
 8020a90:	08020a2d 	.word	0x08020a2d
 8020a94:	08020a2d 	.word	0x08020a2d
 8020a98:	08020ba7 	.word	0x08020ba7
 8020a9c:	682b      	ldr	r3, [r5, #0]
 8020a9e:	1d1a      	adds	r2, r3, #4
 8020aa0:	681b      	ldr	r3, [r3, #0]
 8020aa2:	602a      	str	r2, [r5, #0]
 8020aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020aa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020aac:	2301      	movs	r3, #1
 8020aae:	e0a3      	b.n	8020bf8 <_printf_i+0x1f4>
 8020ab0:	6820      	ldr	r0, [r4, #0]
 8020ab2:	6829      	ldr	r1, [r5, #0]
 8020ab4:	0606      	lsls	r6, r0, #24
 8020ab6:	f101 0304 	add.w	r3, r1, #4
 8020aba:	d50a      	bpl.n	8020ad2 <_printf_i+0xce>
 8020abc:	680e      	ldr	r6, [r1, #0]
 8020abe:	602b      	str	r3, [r5, #0]
 8020ac0:	2e00      	cmp	r6, #0
 8020ac2:	da03      	bge.n	8020acc <_printf_i+0xc8>
 8020ac4:	232d      	movs	r3, #45	; 0x2d
 8020ac6:	4276      	negs	r6, r6
 8020ac8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020acc:	485e      	ldr	r0, [pc, #376]	; (8020c48 <_printf_i+0x244>)
 8020ace:	230a      	movs	r3, #10
 8020ad0:	e019      	b.n	8020b06 <_printf_i+0x102>
 8020ad2:	680e      	ldr	r6, [r1, #0]
 8020ad4:	602b      	str	r3, [r5, #0]
 8020ad6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020ada:	bf18      	it	ne
 8020adc:	b236      	sxthne	r6, r6
 8020ade:	e7ef      	b.n	8020ac0 <_printf_i+0xbc>
 8020ae0:	682b      	ldr	r3, [r5, #0]
 8020ae2:	6820      	ldr	r0, [r4, #0]
 8020ae4:	1d19      	adds	r1, r3, #4
 8020ae6:	6029      	str	r1, [r5, #0]
 8020ae8:	0601      	lsls	r1, r0, #24
 8020aea:	d501      	bpl.n	8020af0 <_printf_i+0xec>
 8020aec:	681e      	ldr	r6, [r3, #0]
 8020aee:	e002      	b.n	8020af6 <_printf_i+0xf2>
 8020af0:	0646      	lsls	r6, r0, #25
 8020af2:	d5fb      	bpl.n	8020aec <_printf_i+0xe8>
 8020af4:	881e      	ldrh	r6, [r3, #0]
 8020af6:	4854      	ldr	r0, [pc, #336]	; (8020c48 <_printf_i+0x244>)
 8020af8:	2f6f      	cmp	r7, #111	; 0x6f
 8020afa:	bf0c      	ite	eq
 8020afc:	2308      	moveq	r3, #8
 8020afe:	230a      	movne	r3, #10
 8020b00:	2100      	movs	r1, #0
 8020b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8020b06:	6865      	ldr	r5, [r4, #4]
 8020b08:	60a5      	str	r5, [r4, #8]
 8020b0a:	2d00      	cmp	r5, #0
 8020b0c:	bfa2      	ittt	ge
 8020b0e:	6821      	ldrge	r1, [r4, #0]
 8020b10:	f021 0104 	bicge.w	r1, r1, #4
 8020b14:	6021      	strge	r1, [r4, #0]
 8020b16:	b90e      	cbnz	r6, 8020b1c <_printf_i+0x118>
 8020b18:	2d00      	cmp	r5, #0
 8020b1a:	d04d      	beq.n	8020bb8 <_printf_i+0x1b4>
 8020b1c:	4615      	mov	r5, r2
 8020b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8020b22:	fb03 6711 	mls	r7, r3, r1, r6
 8020b26:	5dc7      	ldrb	r7, [r0, r7]
 8020b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020b2c:	4637      	mov	r7, r6
 8020b2e:	42bb      	cmp	r3, r7
 8020b30:	460e      	mov	r6, r1
 8020b32:	d9f4      	bls.n	8020b1e <_printf_i+0x11a>
 8020b34:	2b08      	cmp	r3, #8
 8020b36:	d10b      	bne.n	8020b50 <_printf_i+0x14c>
 8020b38:	6823      	ldr	r3, [r4, #0]
 8020b3a:	07de      	lsls	r6, r3, #31
 8020b3c:	d508      	bpl.n	8020b50 <_printf_i+0x14c>
 8020b3e:	6923      	ldr	r3, [r4, #16]
 8020b40:	6861      	ldr	r1, [r4, #4]
 8020b42:	4299      	cmp	r1, r3
 8020b44:	bfde      	ittt	le
 8020b46:	2330      	movle	r3, #48	; 0x30
 8020b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020b50:	1b52      	subs	r2, r2, r5
 8020b52:	6122      	str	r2, [r4, #16]
 8020b54:	f8cd a000 	str.w	sl, [sp]
 8020b58:	464b      	mov	r3, r9
 8020b5a:	aa03      	add	r2, sp, #12
 8020b5c:	4621      	mov	r1, r4
 8020b5e:	4640      	mov	r0, r8
 8020b60:	f7ff fee2 	bl	8020928 <_printf_common>
 8020b64:	3001      	adds	r0, #1
 8020b66:	d14c      	bne.n	8020c02 <_printf_i+0x1fe>
 8020b68:	f04f 30ff 	mov.w	r0, #4294967295
 8020b6c:	b004      	add	sp, #16
 8020b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b72:	4835      	ldr	r0, [pc, #212]	; (8020c48 <_printf_i+0x244>)
 8020b74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8020b78:	6829      	ldr	r1, [r5, #0]
 8020b7a:	6823      	ldr	r3, [r4, #0]
 8020b7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8020b80:	6029      	str	r1, [r5, #0]
 8020b82:	061d      	lsls	r5, r3, #24
 8020b84:	d514      	bpl.n	8020bb0 <_printf_i+0x1ac>
 8020b86:	07df      	lsls	r7, r3, #31
 8020b88:	bf44      	itt	mi
 8020b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8020b8e:	6023      	strmi	r3, [r4, #0]
 8020b90:	b91e      	cbnz	r6, 8020b9a <_printf_i+0x196>
 8020b92:	6823      	ldr	r3, [r4, #0]
 8020b94:	f023 0320 	bic.w	r3, r3, #32
 8020b98:	6023      	str	r3, [r4, #0]
 8020b9a:	2310      	movs	r3, #16
 8020b9c:	e7b0      	b.n	8020b00 <_printf_i+0xfc>
 8020b9e:	6823      	ldr	r3, [r4, #0]
 8020ba0:	f043 0320 	orr.w	r3, r3, #32
 8020ba4:	6023      	str	r3, [r4, #0]
 8020ba6:	2378      	movs	r3, #120	; 0x78
 8020ba8:	4828      	ldr	r0, [pc, #160]	; (8020c4c <_printf_i+0x248>)
 8020baa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020bae:	e7e3      	b.n	8020b78 <_printf_i+0x174>
 8020bb0:	0659      	lsls	r1, r3, #25
 8020bb2:	bf48      	it	mi
 8020bb4:	b2b6      	uxthmi	r6, r6
 8020bb6:	e7e6      	b.n	8020b86 <_printf_i+0x182>
 8020bb8:	4615      	mov	r5, r2
 8020bba:	e7bb      	b.n	8020b34 <_printf_i+0x130>
 8020bbc:	682b      	ldr	r3, [r5, #0]
 8020bbe:	6826      	ldr	r6, [r4, #0]
 8020bc0:	6961      	ldr	r1, [r4, #20]
 8020bc2:	1d18      	adds	r0, r3, #4
 8020bc4:	6028      	str	r0, [r5, #0]
 8020bc6:	0635      	lsls	r5, r6, #24
 8020bc8:	681b      	ldr	r3, [r3, #0]
 8020bca:	d501      	bpl.n	8020bd0 <_printf_i+0x1cc>
 8020bcc:	6019      	str	r1, [r3, #0]
 8020bce:	e002      	b.n	8020bd6 <_printf_i+0x1d2>
 8020bd0:	0670      	lsls	r0, r6, #25
 8020bd2:	d5fb      	bpl.n	8020bcc <_printf_i+0x1c8>
 8020bd4:	8019      	strh	r1, [r3, #0]
 8020bd6:	2300      	movs	r3, #0
 8020bd8:	6123      	str	r3, [r4, #16]
 8020bda:	4615      	mov	r5, r2
 8020bdc:	e7ba      	b.n	8020b54 <_printf_i+0x150>
 8020bde:	682b      	ldr	r3, [r5, #0]
 8020be0:	1d1a      	adds	r2, r3, #4
 8020be2:	602a      	str	r2, [r5, #0]
 8020be4:	681d      	ldr	r5, [r3, #0]
 8020be6:	6862      	ldr	r2, [r4, #4]
 8020be8:	2100      	movs	r1, #0
 8020bea:	4628      	mov	r0, r5
 8020bec:	f7df fb20 	bl	8000230 <memchr>
 8020bf0:	b108      	cbz	r0, 8020bf6 <_printf_i+0x1f2>
 8020bf2:	1b40      	subs	r0, r0, r5
 8020bf4:	6060      	str	r0, [r4, #4]
 8020bf6:	6863      	ldr	r3, [r4, #4]
 8020bf8:	6123      	str	r3, [r4, #16]
 8020bfa:	2300      	movs	r3, #0
 8020bfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020c00:	e7a8      	b.n	8020b54 <_printf_i+0x150>
 8020c02:	6923      	ldr	r3, [r4, #16]
 8020c04:	462a      	mov	r2, r5
 8020c06:	4649      	mov	r1, r9
 8020c08:	4640      	mov	r0, r8
 8020c0a:	47d0      	blx	sl
 8020c0c:	3001      	adds	r0, #1
 8020c0e:	d0ab      	beq.n	8020b68 <_printf_i+0x164>
 8020c10:	6823      	ldr	r3, [r4, #0]
 8020c12:	079b      	lsls	r3, r3, #30
 8020c14:	d413      	bmi.n	8020c3e <_printf_i+0x23a>
 8020c16:	68e0      	ldr	r0, [r4, #12]
 8020c18:	9b03      	ldr	r3, [sp, #12]
 8020c1a:	4298      	cmp	r0, r3
 8020c1c:	bfb8      	it	lt
 8020c1e:	4618      	movlt	r0, r3
 8020c20:	e7a4      	b.n	8020b6c <_printf_i+0x168>
 8020c22:	2301      	movs	r3, #1
 8020c24:	4632      	mov	r2, r6
 8020c26:	4649      	mov	r1, r9
 8020c28:	4640      	mov	r0, r8
 8020c2a:	47d0      	blx	sl
 8020c2c:	3001      	adds	r0, #1
 8020c2e:	d09b      	beq.n	8020b68 <_printf_i+0x164>
 8020c30:	3501      	adds	r5, #1
 8020c32:	68e3      	ldr	r3, [r4, #12]
 8020c34:	9903      	ldr	r1, [sp, #12]
 8020c36:	1a5b      	subs	r3, r3, r1
 8020c38:	42ab      	cmp	r3, r5
 8020c3a:	dcf2      	bgt.n	8020c22 <_printf_i+0x21e>
 8020c3c:	e7eb      	b.n	8020c16 <_printf_i+0x212>
 8020c3e:	2500      	movs	r5, #0
 8020c40:	f104 0619 	add.w	r6, r4, #25
 8020c44:	e7f5      	b.n	8020c32 <_printf_i+0x22e>
 8020c46:	bf00      	nop
 8020c48:	080237be 	.word	0x080237be
 8020c4c:	080237cf 	.word	0x080237cf

08020c50 <iprintf>:
 8020c50:	b40f      	push	{r0, r1, r2, r3}
 8020c52:	4b0a      	ldr	r3, [pc, #40]	; (8020c7c <iprintf+0x2c>)
 8020c54:	b513      	push	{r0, r1, r4, lr}
 8020c56:	681c      	ldr	r4, [r3, #0]
 8020c58:	b124      	cbz	r4, 8020c64 <iprintf+0x14>
 8020c5a:	69a3      	ldr	r3, [r4, #24]
 8020c5c:	b913      	cbnz	r3, 8020c64 <iprintf+0x14>
 8020c5e:	4620      	mov	r0, r4
 8020c60:	f001 f8ee 	bl	8021e40 <__sinit>
 8020c64:	ab05      	add	r3, sp, #20
 8020c66:	9a04      	ldr	r2, [sp, #16]
 8020c68:	68a1      	ldr	r1, [r4, #8]
 8020c6a:	9301      	str	r3, [sp, #4]
 8020c6c:	4620      	mov	r0, r4
 8020c6e:	f001 fe9d 	bl	80229ac <_vfiprintf_r>
 8020c72:	b002      	add	sp, #8
 8020c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020c78:	b004      	add	sp, #16
 8020c7a:	4770      	bx	lr
 8020c7c:	2000002c 	.word	0x2000002c

08020c80 <putchar>:
 8020c80:	4b09      	ldr	r3, [pc, #36]	; (8020ca8 <putchar+0x28>)
 8020c82:	b513      	push	{r0, r1, r4, lr}
 8020c84:	681c      	ldr	r4, [r3, #0]
 8020c86:	4601      	mov	r1, r0
 8020c88:	b134      	cbz	r4, 8020c98 <putchar+0x18>
 8020c8a:	69a3      	ldr	r3, [r4, #24]
 8020c8c:	b923      	cbnz	r3, 8020c98 <putchar+0x18>
 8020c8e:	9001      	str	r0, [sp, #4]
 8020c90:	4620      	mov	r0, r4
 8020c92:	f001 f8d5 	bl	8021e40 <__sinit>
 8020c96:	9901      	ldr	r1, [sp, #4]
 8020c98:	68a2      	ldr	r2, [r4, #8]
 8020c9a:	4620      	mov	r0, r4
 8020c9c:	b002      	add	sp, #8
 8020c9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ca2:	f001 bfb3 	b.w	8022c0c <_putc_r>
 8020ca6:	bf00      	nop
 8020ca8:	2000002c 	.word	0x2000002c

08020cac <_puts_r>:
 8020cac:	b570      	push	{r4, r5, r6, lr}
 8020cae:	460e      	mov	r6, r1
 8020cb0:	4605      	mov	r5, r0
 8020cb2:	b118      	cbz	r0, 8020cbc <_puts_r+0x10>
 8020cb4:	6983      	ldr	r3, [r0, #24]
 8020cb6:	b90b      	cbnz	r3, 8020cbc <_puts_r+0x10>
 8020cb8:	f001 f8c2 	bl	8021e40 <__sinit>
 8020cbc:	69ab      	ldr	r3, [r5, #24]
 8020cbe:	68ac      	ldr	r4, [r5, #8]
 8020cc0:	b913      	cbnz	r3, 8020cc8 <_puts_r+0x1c>
 8020cc2:	4628      	mov	r0, r5
 8020cc4:	f001 f8bc 	bl	8021e40 <__sinit>
 8020cc8:	4b2c      	ldr	r3, [pc, #176]	; (8020d7c <_puts_r+0xd0>)
 8020cca:	429c      	cmp	r4, r3
 8020ccc:	d120      	bne.n	8020d10 <_puts_r+0x64>
 8020cce:	686c      	ldr	r4, [r5, #4]
 8020cd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020cd2:	07db      	lsls	r3, r3, #31
 8020cd4:	d405      	bmi.n	8020ce2 <_puts_r+0x36>
 8020cd6:	89a3      	ldrh	r3, [r4, #12]
 8020cd8:	0598      	lsls	r0, r3, #22
 8020cda:	d402      	bmi.n	8020ce2 <_puts_r+0x36>
 8020cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020cde:	f001 f952 	bl	8021f86 <__retarget_lock_acquire_recursive>
 8020ce2:	89a3      	ldrh	r3, [r4, #12]
 8020ce4:	0719      	lsls	r1, r3, #28
 8020ce6:	d51d      	bpl.n	8020d24 <_puts_r+0x78>
 8020ce8:	6923      	ldr	r3, [r4, #16]
 8020cea:	b1db      	cbz	r3, 8020d24 <_puts_r+0x78>
 8020cec:	3e01      	subs	r6, #1
 8020cee:	68a3      	ldr	r3, [r4, #8]
 8020cf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020cf4:	3b01      	subs	r3, #1
 8020cf6:	60a3      	str	r3, [r4, #8]
 8020cf8:	bb39      	cbnz	r1, 8020d4a <_puts_r+0x9e>
 8020cfa:	2b00      	cmp	r3, #0
 8020cfc:	da38      	bge.n	8020d70 <_puts_r+0xc4>
 8020cfe:	4622      	mov	r2, r4
 8020d00:	210a      	movs	r1, #10
 8020d02:	4628      	mov	r0, r5
 8020d04:	f000 f848 	bl	8020d98 <__swbuf_r>
 8020d08:	3001      	adds	r0, #1
 8020d0a:	d011      	beq.n	8020d30 <_puts_r+0x84>
 8020d0c:	250a      	movs	r5, #10
 8020d0e:	e011      	b.n	8020d34 <_puts_r+0x88>
 8020d10:	4b1b      	ldr	r3, [pc, #108]	; (8020d80 <_puts_r+0xd4>)
 8020d12:	429c      	cmp	r4, r3
 8020d14:	d101      	bne.n	8020d1a <_puts_r+0x6e>
 8020d16:	68ac      	ldr	r4, [r5, #8]
 8020d18:	e7da      	b.n	8020cd0 <_puts_r+0x24>
 8020d1a:	4b1a      	ldr	r3, [pc, #104]	; (8020d84 <_puts_r+0xd8>)
 8020d1c:	429c      	cmp	r4, r3
 8020d1e:	bf08      	it	eq
 8020d20:	68ec      	ldreq	r4, [r5, #12]
 8020d22:	e7d5      	b.n	8020cd0 <_puts_r+0x24>
 8020d24:	4621      	mov	r1, r4
 8020d26:	4628      	mov	r0, r5
 8020d28:	f000 f888 	bl	8020e3c <__swsetup_r>
 8020d2c:	2800      	cmp	r0, #0
 8020d2e:	d0dd      	beq.n	8020cec <_puts_r+0x40>
 8020d30:	f04f 35ff 	mov.w	r5, #4294967295
 8020d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020d36:	07da      	lsls	r2, r3, #31
 8020d38:	d405      	bmi.n	8020d46 <_puts_r+0x9a>
 8020d3a:	89a3      	ldrh	r3, [r4, #12]
 8020d3c:	059b      	lsls	r3, r3, #22
 8020d3e:	d402      	bmi.n	8020d46 <_puts_r+0x9a>
 8020d40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020d42:	f001 f921 	bl	8021f88 <__retarget_lock_release_recursive>
 8020d46:	4628      	mov	r0, r5
 8020d48:	bd70      	pop	{r4, r5, r6, pc}
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	da04      	bge.n	8020d58 <_puts_r+0xac>
 8020d4e:	69a2      	ldr	r2, [r4, #24]
 8020d50:	429a      	cmp	r2, r3
 8020d52:	dc06      	bgt.n	8020d62 <_puts_r+0xb6>
 8020d54:	290a      	cmp	r1, #10
 8020d56:	d004      	beq.n	8020d62 <_puts_r+0xb6>
 8020d58:	6823      	ldr	r3, [r4, #0]
 8020d5a:	1c5a      	adds	r2, r3, #1
 8020d5c:	6022      	str	r2, [r4, #0]
 8020d5e:	7019      	strb	r1, [r3, #0]
 8020d60:	e7c5      	b.n	8020cee <_puts_r+0x42>
 8020d62:	4622      	mov	r2, r4
 8020d64:	4628      	mov	r0, r5
 8020d66:	f000 f817 	bl	8020d98 <__swbuf_r>
 8020d6a:	3001      	adds	r0, #1
 8020d6c:	d1bf      	bne.n	8020cee <_puts_r+0x42>
 8020d6e:	e7df      	b.n	8020d30 <_puts_r+0x84>
 8020d70:	6823      	ldr	r3, [r4, #0]
 8020d72:	250a      	movs	r5, #10
 8020d74:	1c5a      	adds	r2, r3, #1
 8020d76:	6022      	str	r2, [r4, #0]
 8020d78:	701d      	strb	r5, [r3, #0]
 8020d7a:	e7db      	b.n	8020d34 <_puts_r+0x88>
 8020d7c:	08023890 	.word	0x08023890
 8020d80:	080238b0 	.word	0x080238b0
 8020d84:	08023870 	.word	0x08023870

08020d88 <puts>:
 8020d88:	4b02      	ldr	r3, [pc, #8]	; (8020d94 <puts+0xc>)
 8020d8a:	4601      	mov	r1, r0
 8020d8c:	6818      	ldr	r0, [r3, #0]
 8020d8e:	f7ff bf8d 	b.w	8020cac <_puts_r>
 8020d92:	bf00      	nop
 8020d94:	2000002c 	.word	0x2000002c

08020d98 <__swbuf_r>:
 8020d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d9a:	460e      	mov	r6, r1
 8020d9c:	4614      	mov	r4, r2
 8020d9e:	4605      	mov	r5, r0
 8020da0:	b118      	cbz	r0, 8020daa <__swbuf_r+0x12>
 8020da2:	6983      	ldr	r3, [r0, #24]
 8020da4:	b90b      	cbnz	r3, 8020daa <__swbuf_r+0x12>
 8020da6:	f001 f84b 	bl	8021e40 <__sinit>
 8020daa:	4b21      	ldr	r3, [pc, #132]	; (8020e30 <__swbuf_r+0x98>)
 8020dac:	429c      	cmp	r4, r3
 8020dae:	d12b      	bne.n	8020e08 <__swbuf_r+0x70>
 8020db0:	686c      	ldr	r4, [r5, #4]
 8020db2:	69a3      	ldr	r3, [r4, #24]
 8020db4:	60a3      	str	r3, [r4, #8]
 8020db6:	89a3      	ldrh	r3, [r4, #12]
 8020db8:	071a      	lsls	r2, r3, #28
 8020dba:	d52f      	bpl.n	8020e1c <__swbuf_r+0x84>
 8020dbc:	6923      	ldr	r3, [r4, #16]
 8020dbe:	b36b      	cbz	r3, 8020e1c <__swbuf_r+0x84>
 8020dc0:	6923      	ldr	r3, [r4, #16]
 8020dc2:	6820      	ldr	r0, [r4, #0]
 8020dc4:	1ac0      	subs	r0, r0, r3
 8020dc6:	6963      	ldr	r3, [r4, #20]
 8020dc8:	b2f6      	uxtb	r6, r6
 8020dca:	4283      	cmp	r3, r0
 8020dcc:	4637      	mov	r7, r6
 8020dce:	dc04      	bgt.n	8020dda <__swbuf_r+0x42>
 8020dd0:	4621      	mov	r1, r4
 8020dd2:	4628      	mov	r0, r5
 8020dd4:	f000 ffa0 	bl	8021d18 <_fflush_r>
 8020dd8:	bb30      	cbnz	r0, 8020e28 <__swbuf_r+0x90>
 8020dda:	68a3      	ldr	r3, [r4, #8]
 8020ddc:	3b01      	subs	r3, #1
 8020dde:	60a3      	str	r3, [r4, #8]
 8020de0:	6823      	ldr	r3, [r4, #0]
 8020de2:	1c5a      	adds	r2, r3, #1
 8020de4:	6022      	str	r2, [r4, #0]
 8020de6:	701e      	strb	r6, [r3, #0]
 8020de8:	6963      	ldr	r3, [r4, #20]
 8020dea:	3001      	adds	r0, #1
 8020dec:	4283      	cmp	r3, r0
 8020dee:	d004      	beq.n	8020dfa <__swbuf_r+0x62>
 8020df0:	89a3      	ldrh	r3, [r4, #12]
 8020df2:	07db      	lsls	r3, r3, #31
 8020df4:	d506      	bpl.n	8020e04 <__swbuf_r+0x6c>
 8020df6:	2e0a      	cmp	r6, #10
 8020df8:	d104      	bne.n	8020e04 <__swbuf_r+0x6c>
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	4628      	mov	r0, r5
 8020dfe:	f000 ff8b 	bl	8021d18 <_fflush_r>
 8020e02:	b988      	cbnz	r0, 8020e28 <__swbuf_r+0x90>
 8020e04:	4638      	mov	r0, r7
 8020e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020e08:	4b0a      	ldr	r3, [pc, #40]	; (8020e34 <__swbuf_r+0x9c>)
 8020e0a:	429c      	cmp	r4, r3
 8020e0c:	d101      	bne.n	8020e12 <__swbuf_r+0x7a>
 8020e0e:	68ac      	ldr	r4, [r5, #8]
 8020e10:	e7cf      	b.n	8020db2 <__swbuf_r+0x1a>
 8020e12:	4b09      	ldr	r3, [pc, #36]	; (8020e38 <__swbuf_r+0xa0>)
 8020e14:	429c      	cmp	r4, r3
 8020e16:	bf08      	it	eq
 8020e18:	68ec      	ldreq	r4, [r5, #12]
 8020e1a:	e7ca      	b.n	8020db2 <__swbuf_r+0x1a>
 8020e1c:	4621      	mov	r1, r4
 8020e1e:	4628      	mov	r0, r5
 8020e20:	f000 f80c 	bl	8020e3c <__swsetup_r>
 8020e24:	2800      	cmp	r0, #0
 8020e26:	d0cb      	beq.n	8020dc0 <__swbuf_r+0x28>
 8020e28:	f04f 37ff 	mov.w	r7, #4294967295
 8020e2c:	e7ea      	b.n	8020e04 <__swbuf_r+0x6c>
 8020e2e:	bf00      	nop
 8020e30:	08023890 	.word	0x08023890
 8020e34:	080238b0 	.word	0x080238b0
 8020e38:	08023870 	.word	0x08023870

08020e3c <__swsetup_r>:
 8020e3c:	4b32      	ldr	r3, [pc, #200]	; (8020f08 <__swsetup_r+0xcc>)
 8020e3e:	b570      	push	{r4, r5, r6, lr}
 8020e40:	681d      	ldr	r5, [r3, #0]
 8020e42:	4606      	mov	r6, r0
 8020e44:	460c      	mov	r4, r1
 8020e46:	b125      	cbz	r5, 8020e52 <__swsetup_r+0x16>
 8020e48:	69ab      	ldr	r3, [r5, #24]
 8020e4a:	b913      	cbnz	r3, 8020e52 <__swsetup_r+0x16>
 8020e4c:	4628      	mov	r0, r5
 8020e4e:	f000 fff7 	bl	8021e40 <__sinit>
 8020e52:	4b2e      	ldr	r3, [pc, #184]	; (8020f0c <__swsetup_r+0xd0>)
 8020e54:	429c      	cmp	r4, r3
 8020e56:	d10f      	bne.n	8020e78 <__swsetup_r+0x3c>
 8020e58:	686c      	ldr	r4, [r5, #4]
 8020e5a:	89a3      	ldrh	r3, [r4, #12]
 8020e5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020e60:	0719      	lsls	r1, r3, #28
 8020e62:	d42c      	bmi.n	8020ebe <__swsetup_r+0x82>
 8020e64:	06dd      	lsls	r5, r3, #27
 8020e66:	d411      	bmi.n	8020e8c <__swsetup_r+0x50>
 8020e68:	2309      	movs	r3, #9
 8020e6a:	6033      	str	r3, [r6, #0]
 8020e6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020e70:	81a3      	strh	r3, [r4, #12]
 8020e72:	f04f 30ff 	mov.w	r0, #4294967295
 8020e76:	e03e      	b.n	8020ef6 <__swsetup_r+0xba>
 8020e78:	4b25      	ldr	r3, [pc, #148]	; (8020f10 <__swsetup_r+0xd4>)
 8020e7a:	429c      	cmp	r4, r3
 8020e7c:	d101      	bne.n	8020e82 <__swsetup_r+0x46>
 8020e7e:	68ac      	ldr	r4, [r5, #8]
 8020e80:	e7eb      	b.n	8020e5a <__swsetup_r+0x1e>
 8020e82:	4b24      	ldr	r3, [pc, #144]	; (8020f14 <__swsetup_r+0xd8>)
 8020e84:	429c      	cmp	r4, r3
 8020e86:	bf08      	it	eq
 8020e88:	68ec      	ldreq	r4, [r5, #12]
 8020e8a:	e7e6      	b.n	8020e5a <__swsetup_r+0x1e>
 8020e8c:	0758      	lsls	r0, r3, #29
 8020e8e:	d512      	bpl.n	8020eb6 <__swsetup_r+0x7a>
 8020e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020e92:	b141      	cbz	r1, 8020ea6 <__swsetup_r+0x6a>
 8020e94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020e98:	4299      	cmp	r1, r3
 8020e9a:	d002      	beq.n	8020ea2 <__swsetup_r+0x66>
 8020e9c:	4630      	mov	r0, r6
 8020e9e:	f001 fc7b 	bl	8022798 <_free_r>
 8020ea2:	2300      	movs	r3, #0
 8020ea4:	6363      	str	r3, [r4, #52]	; 0x34
 8020ea6:	89a3      	ldrh	r3, [r4, #12]
 8020ea8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020eac:	81a3      	strh	r3, [r4, #12]
 8020eae:	2300      	movs	r3, #0
 8020eb0:	6063      	str	r3, [r4, #4]
 8020eb2:	6923      	ldr	r3, [r4, #16]
 8020eb4:	6023      	str	r3, [r4, #0]
 8020eb6:	89a3      	ldrh	r3, [r4, #12]
 8020eb8:	f043 0308 	orr.w	r3, r3, #8
 8020ebc:	81a3      	strh	r3, [r4, #12]
 8020ebe:	6923      	ldr	r3, [r4, #16]
 8020ec0:	b94b      	cbnz	r3, 8020ed6 <__swsetup_r+0x9a>
 8020ec2:	89a3      	ldrh	r3, [r4, #12]
 8020ec4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020ecc:	d003      	beq.n	8020ed6 <__swsetup_r+0x9a>
 8020ece:	4621      	mov	r1, r4
 8020ed0:	4630      	mov	r0, r6
 8020ed2:	f001 f87f 	bl	8021fd4 <__smakebuf_r>
 8020ed6:	89a0      	ldrh	r0, [r4, #12]
 8020ed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020edc:	f010 0301 	ands.w	r3, r0, #1
 8020ee0:	d00a      	beq.n	8020ef8 <__swsetup_r+0xbc>
 8020ee2:	2300      	movs	r3, #0
 8020ee4:	60a3      	str	r3, [r4, #8]
 8020ee6:	6963      	ldr	r3, [r4, #20]
 8020ee8:	425b      	negs	r3, r3
 8020eea:	61a3      	str	r3, [r4, #24]
 8020eec:	6923      	ldr	r3, [r4, #16]
 8020eee:	b943      	cbnz	r3, 8020f02 <__swsetup_r+0xc6>
 8020ef0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020ef4:	d1ba      	bne.n	8020e6c <__swsetup_r+0x30>
 8020ef6:	bd70      	pop	{r4, r5, r6, pc}
 8020ef8:	0781      	lsls	r1, r0, #30
 8020efa:	bf58      	it	pl
 8020efc:	6963      	ldrpl	r3, [r4, #20]
 8020efe:	60a3      	str	r3, [r4, #8]
 8020f00:	e7f4      	b.n	8020eec <__swsetup_r+0xb0>
 8020f02:	2000      	movs	r0, #0
 8020f04:	e7f7      	b.n	8020ef6 <__swsetup_r+0xba>
 8020f06:	bf00      	nop
 8020f08:	2000002c 	.word	0x2000002c
 8020f0c:	08023890 	.word	0x08023890
 8020f10:	080238b0 	.word	0x080238b0
 8020f14:	08023870 	.word	0x08023870

08020f18 <quorem>:
 8020f18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f1c:	6903      	ldr	r3, [r0, #16]
 8020f1e:	690c      	ldr	r4, [r1, #16]
 8020f20:	42a3      	cmp	r3, r4
 8020f22:	4607      	mov	r7, r0
 8020f24:	f2c0 8081 	blt.w	802102a <quorem+0x112>
 8020f28:	3c01      	subs	r4, #1
 8020f2a:	f101 0814 	add.w	r8, r1, #20
 8020f2e:	f100 0514 	add.w	r5, r0, #20
 8020f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020f36:	9301      	str	r3, [sp, #4]
 8020f38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020f3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020f40:	3301      	adds	r3, #1
 8020f42:	429a      	cmp	r2, r3
 8020f44:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020f48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020f4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8020f50:	d331      	bcc.n	8020fb6 <quorem+0x9e>
 8020f52:	f04f 0e00 	mov.w	lr, #0
 8020f56:	4640      	mov	r0, r8
 8020f58:	46ac      	mov	ip, r5
 8020f5a:	46f2      	mov	sl, lr
 8020f5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8020f60:	b293      	uxth	r3, r2
 8020f62:	fb06 e303 	mla	r3, r6, r3, lr
 8020f66:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020f6a:	b29b      	uxth	r3, r3
 8020f6c:	ebaa 0303 	sub.w	r3, sl, r3
 8020f70:	f8dc a000 	ldr.w	sl, [ip]
 8020f74:	0c12      	lsrs	r2, r2, #16
 8020f76:	fa13 f38a 	uxtah	r3, r3, sl
 8020f7a:	fb06 e202 	mla	r2, r6, r2, lr
 8020f7e:	9300      	str	r3, [sp, #0]
 8020f80:	9b00      	ldr	r3, [sp, #0]
 8020f82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020f86:	b292      	uxth	r2, r2
 8020f88:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020f8c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020f90:	f8bd 3000 	ldrh.w	r3, [sp]
 8020f94:	4581      	cmp	r9, r0
 8020f96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020f9a:	f84c 3b04 	str.w	r3, [ip], #4
 8020f9e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020fa2:	d2db      	bcs.n	8020f5c <quorem+0x44>
 8020fa4:	f855 300b 	ldr.w	r3, [r5, fp]
 8020fa8:	b92b      	cbnz	r3, 8020fb6 <quorem+0x9e>
 8020faa:	9b01      	ldr	r3, [sp, #4]
 8020fac:	3b04      	subs	r3, #4
 8020fae:	429d      	cmp	r5, r3
 8020fb0:	461a      	mov	r2, r3
 8020fb2:	d32e      	bcc.n	8021012 <quorem+0xfa>
 8020fb4:	613c      	str	r4, [r7, #16]
 8020fb6:	4638      	mov	r0, r7
 8020fb8:	f001 fad6 	bl	8022568 <__mcmp>
 8020fbc:	2800      	cmp	r0, #0
 8020fbe:	db24      	blt.n	802100a <quorem+0xf2>
 8020fc0:	3601      	adds	r6, #1
 8020fc2:	4628      	mov	r0, r5
 8020fc4:	f04f 0c00 	mov.w	ip, #0
 8020fc8:	f858 2b04 	ldr.w	r2, [r8], #4
 8020fcc:	f8d0 e000 	ldr.w	lr, [r0]
 8020fd0:	b293      	uxth	r3, r2
 8020fd2:	ebac 0303 	sub.w	r3, ip, r3
 8020fd6:	0c12      	lsrs	r2, r2, #16
 8020fd8:	fa13 f38e 	uxtah	r3, r3, lr
 8020fdc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020fe0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020fe4:	b29b      	uxth	r3, r3
 8020fe6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020fea:	45c1      	cmp	r9, r8
 8020fec:	f840 3b04 	str.w	r3, [r0], #4
 8020ff0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020ff4:	d2e8      	bcs.n	8020fc8 <quorem+0xb0>
 8020ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020ffa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020ffe:	b922      	cbnz	r2, 802100a <quorem+0xf2>
 8021000:	3b04      	subs	r3, #4
 8021002:	429d      	cmp	r5, r3
 8021004:	461a      	mov	r2, r3
 8021006:	d30a      	bcc.n	802101e <quorem+0x106>
 8021008:	613c      	str	r4, [r7, #16]
 802100a:	4630      	mov	r0, r6
 802100c:	b003      	add	sp, #12
 802100e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021012:	6812      	ldr	r2, [r2, #0]
 8021014:	3b04      	subs	r3, #4
 8021016:	2a00      	cmp	r2, #0
 8021018:	d1cc      	bne.n	8020fb4 <quorem+0x9c>
 802101a:	3c01      	subs	r4, #1
 802101c:	e7c7      	b.n	8020fae <quorem+0x96>
 802101e:	6812      	ldr	r2, [r2, #0]
 8021020:	3b04      	subs	r3, #4
 8021022:	2a00      	cmp	r2, #0
 8021024:	d1f0      	bne.n	8021008 <quorem+0xf0>
 8021026:	3c01      	subs	r4, #1
 8021028:	e7eb      	b.n	8021002 <quorem+0xea>
 802102a:	2000      	movs	r0, #0
 802102c:	e7ee      	b.n	802100c <quorem+0xf4>
	...

08021030 <_dtoa_r>:
 8021030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021034:	ed2d 8b04 	vpush	{d8-d9}
 8021038:	ec57 6b10 	vmov	r6, r7, d0
 802103c:	b093      	sub	sp, #76	; 0x4c
 802103e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021040:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8021044:	9106      	str	r1, [sp, #24]
 8021046:	ee10 aa10 	vmov	sl, s0
 802104a:	4604      	mov	r4, r0
 802104c:	9209      	str	r2, [sp, #36]	; 0x24
 802104e:	930c      	str	r3, [sp, #48]	; 0x30
 8021050:	46bb      	mov	fp, r7
 8021052:	b975      	cbnz	r5, 8021072 <_dtoa_r+0x42>
 8021054:	2010      	movs	r0, #16
 8021056:	f000 fffd 	bl	8022054 <malloc>
 802105a:	4602      	mov	r2, r0
 802105c:	6260      	str	r0, [r4, #36]	; 0x24
 802105e:	b920      	cbnz	r0, 802106a <_dtoa_r+0x3a>
 8021060:	4ba7      	ldr	r3, [pc, #668]	; (8021300 <_dtoa_r+0x2d0>)
 8021062:	21ea      	movs	r1, #234	; 0xea
 8021064:	48a7      	ldr	r0, [pc, #668]	; (8021304 <_dtoa_r+0x2d4>)
 8021066:	f001 fe7f 	bl	8022d68 <__assert_func>
 802106a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802106e:	6005      	str	r5, [r0, #0]
 8021070:	60c5      	str	r5, [r0, #12]
 8021072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021074:	6819      	ldr	r1, [r3, #0]
 8021076:	b151      	cbz	r1, 802108e <_dtoa_r+0x5e>
 8021078:	685a      	ldr	r2, [r3, #4]
 802107a:	604a      	str	r2, [r1, #4]
 802107c:	2301      	movs	r3, #1
 802107e:	4093      	lsls	r3, r2
 8021080:	608b      	str	r3, [r1, #8]
 8021082:	4620      	mov	r0, r4
 8021084:	f001 f82e 	bl	80220e4 <_Bfree>
 8021088:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802108a:	2200      	movs	r2, #0
 802108c:	601a      	str	r2, [r3, #0]
 802108e:	1e3b      	subs	r3, r7, #0
 8021090:	bfaa      	itet	ge
 8021092:	2300      	movge	r3, #0
 8021094:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8021098:	f8c8 3000 	strge.w	r3, [r8]
 802109c:	4b9a      	ldr	r3, [pc, #616]	; (8021308 <_dtoa_r+0x2d8>)
 802109e:	bfbc      	itt	lt
 80210a0:	2201      	movlt	r2, #1
 80210a2:	f8c8 2000 	strlt.w	r2, [r8]
 80210a6:	ea33 030b 	bics.w	r3, r3, fp
 80210aa:	d11b      	bne.n	80210e4 <_dtoa_r+0xb4>
 80210ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80210b2:	6013      	str	r3, [r2, #0]
 80210b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80210b8:	4333      	orrs	r3, r6
 80210ba:	f000 8592 	beq.w	8021be2 <_dtoa_r+0xbb2>
 80210be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80210c0:	b963      	cbnz	r3, 80210dc <_dtoa_r+0xac>
 80210c2:	4b92      	ldr	r3, [pc, #584]	; (802130c <_dtoa_r+0x2dc>)
 80210c4:	e022      	b.n	802110c <_dtoa_r+0xdc>
 80210c6:	4b92      	ldr	r3, [pc, #584]	; (8021310 <_dtoa_r+0x2e0>)
 80210c8:	9301      	str	r3, [sp, #4]
 80210ca:	3308      	adds	r3, #8
 80210cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80210ce:	6013      	str	r3, [r2, #0]
 80210d0:	9801      	ldr	r0, [sp, #4]
 80210d2:	b013      	add	sp, #76	; 0x4c
 80210d4:	ecbd 8b04 	vpop	{d8-d9}
 80210d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210dc:	4b8b      	ldr	r3, [pc, #556]	; (802130c <_dtoa_r+0x2dc>)
 80210de:	9301      	str	r3, [sp, #4]
 80210e0:	3303      	adds	r3, #3
 80210e2:	e7f3      	b.n	80210cc <_dtoa_r+0x9c>
 80210e4:	2200      	movs	r2, #0
 80210e6:	2300      	movs	r3, #0
 80210e8:	4650      	mov	r0, sl
 80210ea:	4659      	mov	r1, fp
 80210ec:	f7df fd14 	bl	8000b18 <__aeabi_dcmpeq>
 80210f0:	ec4b ab19 	vmov	d9, sl, fp
 80210f4:	4680      	mov	r8, r0
 80210f6:	b158      	cbz	r0, 8021110 <_dtoa_r+0xe0>
 80210f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80210fa:	2301      	movs	r3, #1
 80210fc:	6013      	str	r3, [r2, #0]
 80210fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021100:	2b00      	cmp	r3, #0
 8021102:	f000 856b 	beq.w	8021bdc <_dtoa_r+0xbac>
 8021106:	4883      	ldr	r0, [pc, #524]	; (8021314 <_dtoa_r+0x2e4>)
 8021108:	6018      	str	r0, [r3, #0]
 802110a:	1e43      	subs	r3, r0, #1
 802110c:	9301      	str	r3, [sp, #4]
 802110e:	e7df      	b.n	80210d0 <_dtoa_r+0xa0>
 8021110:	ec4b ab10 	vmov	d0, sl, fp
 8021114:	aa10      	add	r2, sp, #64	; 0x40
 8021116:	a911      	add	r1, sp, #68	; 0x44
 8021118:	4620      	mov	r0, r4
 802111a:	f001 facb 	bl	80226b4 <__d2b>
 802111e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8021122:	ee08 0a10 	vmov	s16, r0
 8021126:	2d00      	cmp	r5, #0
 8021128:	f000 8084 	beq.w	8021234 <_dtoa_r+0x204>
 802112c:	ee19 3a90 	vmov	r3, s19
 8021130:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021134:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8021138:	4656      	mov	r6, sl
 802113a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 802113e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021142:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021146:	4b74      	ldr	r3, [pc, #464]	; (8021318 <_dtoa_r+0x2e8>)
 8021148:	2200      	movs	r2, #0
 802114a:	4630      	mov	r0, r6
 802114c:	4639      	mov	r1, r7
 802114e:	f7df f8c3 	bl	80002d8 <__aeabi_dsub>
 8021152:	a365      	add	r3, pc, #404	; (adr r3, 80212e8 <_dtoa_r+0x2b8>)
 8021154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021158:	f7df fa76 	bl	8000648 <__aeabi_dmul>
 802115c:	a364      	add	r3, pc, #400	; (adr r3, 80212f0 <_dtoa_r+0x2c0>)
 802115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021162:	f7df f8bb 	bl	80002dc <__adddf3>
 8021166:	4606      	mov	r6, r0
 8021168:	4628      	mov	r0, r5
 802116a:	460f      	mov	r7, r1
 802116c:	f7df fa02 	bl	8000574 <__aeabi_i2d>
 8021170:	a361      	add	r3, pc, #388	; (adr r3, 80212f8 <_dtoa_r+0x2c8>)
 8021172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021176:	f7df fa67 	bl	8000648 <__aeabi_dmul>
 802117a:	4602      	mov	r2, r0
 802117c:	460b      	mov	r3, r1
 802117e:	4630      	mov	r0, r6
 8021180:	4639      	mov	r1, r7
 8021182:	f7df f8ab 	bl	80002dc <__adddf3>
 8021186:	4606      	mov	r6, r0
 8021188:	460f      	mov	r7, r1
 802118a:	f7df fd0d 	bl	8000ba8 <__aeabi_d2iz>
 802118e:	2200      	movs	r2, #0
 8021190:	9000      	str	r0, [sp, #0]
 8021192:	2300      	movs	r3, #0
 8021194:	4630      	mov	r0, r6
 8021196:	4639      	mov	r1, r7
 8021198:	f7df fcc8 	bl	8000b2c <__aeabi_dcmplt>
 802119c:	b150      	cbz	r0, 80211b4 <_dtoa_r+0x184>
 802119e:	9800      	ldr	r0, [sp, #0]
 80211a0:	f7df f9e8 	bl	8000574 <__aeabi_i2d>
 80211a4:	4632      	mov	r2, r6
 80211a6:	463b      	mov	r3, r7
 80211a8:	f7df fcb6 	bl	8000b18 <__aeabi_dcmpeq>
 80211ac:	b910      	cbnz	r0, 80211b4 <_dtoa_r+0x184>
 80211ae:	9b00      	ldr	r3, [sp, #0]
 80211b0:	3b01      	subs	r3, #1
 80211b2:	9300      	str	r3, [sp, #0]
 80211b4:	9b00      	ldr	r3, [sp, #0]
 80211b6:	2b16      	cmp	r3, #22
 80211b8:	d85a      	bhi.n	8021270 <_dtoa_r+0x240>
 80211ba:	9a00      	ldr	r2, [sp, #0]
 80211bc:	4b57      	ldr	r3, [pc, #348]	; (802131c <_dtoa_r+0x2ec>)
 80211be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80211c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80211c6:	ec51 0b19 	vmov	r0, r1, d9
 80211ca:	f7df fcaf 	bl	8000b2c <__aeabi_dcmplt>
 80211ce:	2800      	cmp	r0, #0
 80211d0:	d050      	beq.n	8021274 <_dtoa_r+0x244>
 80211d2:	9b00      	ldr	r3, [sp, #0]
 80211d4:	3b01      	subs	r3, #1
 80211d6:	9300      	str	r3, [sp, #0]
 80211d8:	2300      	movs	r3, #0
 80211da:	930b      	str	r3, [sp, #44]	; 0x2c
 80211dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80211de:	1b5d      	subs	r5, r3, r5
 80211e0:	1e6b      	subs	r3, r5, #1
 80211e2:	9305      	str	r3, [sp, #20]
 80211e4:	bf45      	ittet	mi
 80211e6:	f1c5 0301 	rsbmi	r3, r5, #1
 80211ea:	9304      	strmi	r3, [sp, #16]
 80211ec:	2300      	movpl	r3, #0
 80211ee:	2300      	movmi	r3, #0
 80211f0:	bf4c      	ite	mi
 80211f2:	9305      	strmi	r3, [sp, #20]
 80211f4:	9304      	strpl	r3, [sp, #16]
 80211f6:	9b00      	ldr	r3, [sp, #0]
 80211f8:	2b00      	cmp	r3, #0
 80211fa:	db3d      	blt.n	8021278 <_dtoa_r+0x248>
 80211fc:	9b05      	ldr	r3, [sp, #20]
 80211fe:	9a00      	ldr	r2, [sp, #0]
 8021200:	920a      	str	r2, [sp, #40]	; 0x28
 8021202:	4413      	add	r3, r2
 8021204:	9305      	str	r3, [sp, #20]
 8021206:	2300      	movs	r3, #0
 8021208:	9307      	str	r3, [sp, #28]
 802120a:	9b06      	ldr	r3, [sp, #24]
 802120c:	2b09      	cmp	r3, #9
 802120e:	f200 8089 	bhi.w	8021324 <_dtoa_r+0x2f4>
 8021212:	2b05      	cmp	r3, #5
 8021214:	bfc4      	itt	gt
 8021216:	3b04      	subgt	r3, #4
 8021218:	9306      	strgt	r3, [sp, #24]
 802121a:	9b06      	ldr	r3, [sp, #24]
 802121c:	f1a3 0302 	sub.w	r3, r3, #2
 8021220:	bfcc      	ite	gt
 8021222:	2500      	movgt	r5, #0
 8021224:	2501      	movle	r5, #1
 8021226:	2b03      	cmp	r3, #3
 8021228:	f200 8087 	bhi.w	802133a <_dtoa_r+0x30a>
 802122c:	e8df f003 	tbb	[pc, r3]
 8021230:	59383a2d 	.word	0x59383a2d
 8021234:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8021238:	441d      	add	r5, r3
 802123a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 802123e:	2b20      	cmp	r3, #32
 8021240:	bfc1      	itttt	gt
 8021242:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021246:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 802124a:	fa0b f303 	lslgt.w	r3, fp, r3
 802124e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021252:	bfda      	itte	le
 8021254:	f1c3 0320 	rsble	r3, r3, #32
 8021258:	fa06 f003 	lslle.w	r0, r6, r3
 802125c:	4318      	orrgt	r0, r3
 802125e:	f7df f979 	bl	8000554 <__aeabi_ui2d>
 8021262:	2301      	movs	r3, #1
 8021264:	4606      	mov	r6, r0
 8021266:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 802126a:	3d01      	subs	r5, #1
 802126c:	930e      	str	r3, [sp, #56]	; 0x38
 802126e:	e76a      	b.n	8021146 <_dtoa_r+0x116>
 8021270:	2301      	movs	r3, #1
 8021272:	e7b2      	b.n	80211da <_dtoa_r+0x1aa>
 8021274:	900b      	str	r0, [sp, #44]	; 0x2c
 8021276:	e7b1      	b.n	80211dc <_dtoa_r+0x1ac>
 8021278:	9b04      	ldr	r3, [sp, #16]
 802127a:	9a00      	ldr	r2, [sp, #0]
 802127c:	1a9b      	subs	r3, r3, r2
 802127e:	9304      	str	r3, [sp, #16]
 8021280:	4253      	negs	r3, r2
 8021282:	9307      	str	r3, [sp, #28]
 8021284:	2300      	movs	r3, #0
 8021286:	930a      	str	r3, [sp, #40]	; 0x28
 8021288:	e7bf      	b.n	802120a <_dtoa_r+0x1da>
 802128a:	2300      	movs	r3, #0
 802128c:	9308      	str	r3, [sp, #32]
 802128e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021290:	2b00      	cmp	r3, #0
 8021292:	dc55      	bgt.n	8021340 <_dtoa_r+0x310>
 8021294:	2301      	movs	r3, #1
 8021296:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802129a:	461a      	mov	r2, r3
 802129c:	9209      	str	r2, [sp, #36]	; 0x24
 802129e:	e00c      	b.n	80212ba <_dtoa_r+0x28a>
 80212a0:	2301      	movs	r3, #1
 80212a2:	e7f3      	b.n	802128c <_dtoa_r+0x25c>
 80212a4:	2300      	movs	r3, #0
 80212a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80212a8:	9308      	str	r3, [sp, #32]
 80212aa:	9b00      	ldr	r3, [sp, #0]
 80212ac:	4413      	add	r3, r2
 80212ae:	9302      	str	r3, [sp, #8]
 80212b0:	3301      	adds	r3, #1
 80212b2:	2b01      	cmp	r3, #1
 80212b4:	9303      	str	r3, [sp, #12]
 80212b6:	bfb8      	it	lt
 80212b8:	2301      	movlt	r3, #1
 80212ba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80212bc:	2200      	movs	r2, #0
 80212be:	6042      	str	r2, [r0, #4]
 80212c0:	2204      	movs	r2, #4
 80212c2:	f102 0614 	add.w	r6, r2, #20
 80212c6:	429e      	cmp	r6, r3
 80212c8:	6841      	ldr	r1, [r0, #4]
 80212ca:	d93d      	bls.n	8021348 <_dtoa_r+0x318>
 80212cc:	4620      	mov	r0, r4
 80212ce:	f000 fec9 	bl	8022064 <_Balloc>
 80212d2:	9001      	str	r0, [sp, #4]
 80212d4:	2800      	cmp	r0, #0
 80212d6:	d13b      	bne.n	8021350 <_dtoa_r+0x320>
 80212d8:	4b11      	ldr	r3, [pc, #68]	; (8021320 <_dtoa_r+0x2f0>)
 80212da:	4602      	mov	r2, r0
 80212dc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80212e0:	e6c0      	b.n	8021064 <_dtoa_r+0x34>
 80212e2:	2301      	movs	r3, #1
 80212e4:	e7df      	b.n	80212a6 <_dtoa_r+0x276>
 80212e6:	bf00      	nop
 80212e8:	636f4361 	.word	0x636f4361
 80212ec:	3fd287a7 	.word	0x3fd287a7
 80212f0:	8b60c8b3 	.word	0x8b60c8b3
 80212f4:	3fc68a28 	.word	0x3fc68a28
 80212f8:	509f79fb 	.word	0x509f79fb
 80212fc:	3fd34413 	.word	0x3fd34413
 8021300:	080237ed 	.word	0x080237ed
 8021304:	08023804 	.word	0x08023804
 8021308:	7ff00000 	.word	0x7ff00000
 802130c:	080237e9 	.word	0x080237e9
 8021310:	080237e0 	.word	0x080237e0
 8021314:	080237bd 	.word	0x080237bd
 8021318:	3ff80000 	.word	0x3ff80000
 802131c:	08023958 	.word	0x08023958
 8021320:	0802385f 	.word	0x0802385f
 8021324:	2501      	movs	r5, #1
 8021326:	2300      	movs	r3, #0
 8021328:	9306      	str	r3, [sp, #24]
 802132a:	9508      	str	r5, [sp, #32]
 802132c:	f04f 33ff 	mov.w	r3, #4294967295
 8021330:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021334:	2200      	movs	r2, #0
 8021336:	2312      	movs	r3, #18
 8021338:	e7b0      	b.n	802129c <_dtoa_r+0x26c>
 802133a:	2301      	movs	r3, #1
 802133c:	9308      	str	r3, [sp, #32]
 802133e:	e7f5      	b.n	802132c <_dtoa_r+0x2fc>
 8021340:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021342:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021346:	e7b8      	b.n	80212ba <_dtoa_r+0x28a>
 8021348:	3101      	adds	r1, #1
 802134a:	6041      	str	r1, [r0, #4]
 802134c:	0052      	lsls	r2, r2, #1
 802134e:	e7b8      	b.n	80212c2 <_dtoa_r+0x292>
 8021350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021352:	9a01      	ldr	r2, [sp, #4]
 8021354:	601a      	str	r2, [r3, #0]
 8021356:	9b03      	ldr	r3, [sp, #12]
 8021358:	2b0e      	cmp	r3, #14
 802135a:	f200 809d 	bhi.w	8021498 <_dtoa_r+0x468>
 802135e:	2d00      	cmp	r5, #0
 8021360:	f000 809a 	beq.w	8021498 <_dtoa_r+0x468>
 8021364:	9b00      	ldr	r3, [sp, #0]
 8021366:	2b00      	cmp	r3, #0
 8021368:	dd32      	ble.n	80213d0 <_dtoa_r+0x3a0>
 802136a:	4ab7      	ldr	r2, [pc, #732]	; (8021648 <_dtoa_r+0x618>)
 802136c:	f003 030f 	and.w	r3, r3, #15
 8021370:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021374:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021378:	9b00      	ldr	r3, [sp, #0]
 802137a:	05d8      	lsls	r0, r3, #23
 802137c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8021380:	d516      	bpl.n	80213b0 <_dtoa_r+0x380>
 8021382:	4bb2      	ldr	r3, [pc, #712]	; (802164c <_dtoa_r+0x61c>)
 8021384:	ec51 0b19 	vmov	r0, r1, d9
 8021388:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 802138c:	f7df fa86 	bl	800089c <__aeabi_ddiv>
 8021390:	f007 070f 	and.w	r7, r7, #15
 8021394:	4682      	mov	sl, r0
 8021396:	468b      	mov	fp, r1
 8021398:	2503      	movs	r5, #3
 802139a:	4eac      	ldr	r6, [pc, #688]	; (802164c <_dtoa_r+0x61c>)
 802139c:	b957      	cbnz	r7, 80213b4 <_dtoa_r+0x384>
 802139e:	4642      	mov	r2, r8
 80213a0:	464b      	mov	r3, r9
 80213a2:	4650      	mov	r0, sl
 80213a4:	4659      	mov	r1, fp
 80213a6:	f7df fa79 	bl	800089c <__aeabi_ddiv>
 80213aa:	4682      	mov	sl, r0
 80213ac:	468b      	mov	fp, r1
 80213ae:	e028      	b.n	8021402 <_dtoa_r+0x3d2>
 80213b0:	2502      	movs	r5, #2
 80213b2:	e7f2      	b.n	802139a <_dtoa_r+0x36a>
 80213b4:	07f9      	lsls	r1, r7, #31
 80213b6:	d508      	bpl.n	80213ca <_dtoa_r+0x39a>
 80213b8:	4640      	mov	r0, r8
 80213ba:	4649      	mov	r1, r9
 80213bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80213c0:	f7df f942 	bl	8000648 <__aeabi_dmul>
 80213c4:	3501      	adds	r5, #1
 80213c6:	4680      	mov	r8, r0
 80213c8:	4689      	mov	r9, r1
 80213ca:	107f      	asrs	r7, r7, #1
 80213cc:	3608      	adds	r6, #8
 80213ce:	e7e5      	b.n	802139c <_dtoa_r+0x36c>
 80213d0:	f000 809b 	beq.w	802150a <_dtoa_r+0x4da>
 80213d4:	9b00      	ldr	r3, [sp, #0]
 80213d6:	4f9d      	ldr	r7, [pc, #628]	; (802164c <_dtoa_r+0x61c>)
 80213d8:	425e      	negs	r6, r3
 80213da:	4b9b      	ldr	r3, [pc, #620]	; (8021648 <_dtoa_r+0x618>)
 80213dc:	f006 020f 	and.w	r2, r6, #15
 80213e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80213e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80213e8:	ec51 0b19 	vmov	r0, r1, d9
 80213ec:	f7df f92c 	bl	8000648 <__aeabi_dmul>
 80213f0:	1136      	asrs	r6, r6, #4
 80213f2:	4682      	mov	sl, r0
 80213f4:	468b      	mov	fp, r1
 80213f6:	2300      	movs	r3, #0
 80213f8:	2502      	movs	r5, #2
 80213fa:	2e00      	cmp	r6, #0
 80213fc:	d17a      	bne.n	80214f4 <_dtoa_r+0x4c4>
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d1d3      	bne.n	80213aa <_dtoa_r+0x37a>
 8021402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021404:	2b00      	cmp	r3, #0
 8021406:	f000 8082 	beq.w	802150e <_dtoa_r+0x4de>
 802140a:	4b91      	ldr	r3, [pc, #580]	; (8021650 <_dtoa_r+0x620>)
 802140c:	2200      	movs	r2, #0
 802140e:	4650      	mov	r0, sl
 8021410:	4659      	mov	r1, fp
 8021412:	f7df fb8b 	bl	8000b2c <__aeabi_dcmplt>
 8021416:	2800      	cmp	r0, #0
 8021418:	d079      	beq.n	802150e <_dtoa_r+0x4de>
 802141a:	9b03      	ldr	r3, [sp, #12]
 802141c:	2b00      	cmp	r3, #0
 802141e:	d076      	beq.n	802150e <_dtoa_r+0x4de>
 8021420:	9b02      	ldr	r3, [sp, #8]
 8021422:	2b00      	cmp	r3, #0
 8021424:	dd36      	ble.n	8021494 <_dtoa_r+0x464>
 8021426:	9b00      	ldr	r3, [sp, #0]
 8021428:	4650      	mov	r0, sl
 802142a:	4659      	mov	r1, fp
 802142c:	1e5f      	subs	r7, r3, #1
 802142e:	2200      	movs	r2, #0
 8021430:	4b88      	ldr	r3, [pc, #544]	; (8021654 <_dtoa_r+0x624>)
 8021432:	f7df f909 	bl	8000648 <__aeabi_dmul>
 8021436:	9e02      	ldr	r6, [sp, #8]
 8021438:	4682      	mov	sl, r0
 802143a:	468b      	mov	fp, r1
 802143c:	3501      	adds	r5, #1
 802143e:	4628      	mov	r0, r5
 8021440:	f7df f898 	bl	8000574 <__aeabi_i2d>
 8021444:	4652      	mov	r2, sl
 8021446:	465b      	mov	r3, fp
 8021448:	f7df f8fe 	bl	8000648 <__aeabi_dmul>
 802144c:	4b82      	ldr	r3, [pc, #520]	; (8021658 <_dtoa_r+0x628>)
 802144e:	2200      	movs	r2, #0
 8021450:	f7de ff44 	bl	80002dc <__adddf3>
 8021454:	46d0      	mov	r8, sl
 8021456:	46d9      	mov	r9, fp
 8021458:	4682      	mov	sl, r0
 802145a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 802145e:	2e00      	cmp	r6, #0
 8021460:	d158      	bne.n	8021514 <_dtoa_r+0x4e4>
 8021462:	4b7e      	ldr	r3, [pc, #504]	; (802165c <_dtoa_r+0x62c>)
 8021464:	2200      	movs	r2, #0
 8021466:	4640      	mov	r0, r8
 8021468:	4649      	mov	r1, r9
 802146a:	f7de ff35 	bl	80002d8 <__aeabi_dsub>
 802146e:	4652      	mov	r2, sl
 8021470:	465b      	mov	r3, fp
 8021472:	4680      	mov	r8, r0
 8021474:	4689      	mov	r9, r1
 8021476:	f7df fb77 	bl	8000b68 <__aeabi_dcmpgt>
 802147a:	2800      	cmp	r0, #0
 802147c:	f040 8295 	bne.w	80219aa <_dtoa_r+0x97a>
 8021480:	4652      	mov	r2, sl
 8021482:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8021486:	4640      	mov	r0, r8
 8021488:	4649      	mov	r1, r9
 802148a:	f7df fb4f 	bl	8000b2c <__aeabi_dcmplt>
 802148e:	2800      	cmp	r0, #0
 8021490:	f040 8289 	bne.w	80219a6 <_dtoa_r+0x976>
 8021494:	ec5b ab19 	vmov	sl, fp, d9
 8021498:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802149a:	2b00      	cmp	r3, #0
 802149c:	f2c0 8148 	blt.w	8021730 <_dtoa_r+0x700>
 80214a0:	9a00      	ldr	r2, [sp, #0]
 80214a2:	2a0e      	cmp	r2, #14
 80214a4:	f300 8144 	bgt.w	8021730 <_dtoa_r+0x700>
 80214a8:	4b67      	ldr	r3, [pc, #412]	; (8021648 <_dtoa_r+0x618>)
 80214aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80214ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80214b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214b4:	2b00      	cmp	r3, #0
 80214b6:	f280 80d5 	bge.w	8021664 <_dtoa_r+0x634>
 80214ba:	9b03      	ldr	r3, [sp, #12]
 80214bc:	2b00      	cmp	r3, #0
 80214be:	f300 80d1 	bgt.w	8021664 <_dtoa_r+0x634>
 80214c2:	f040 826f 	bne.w	80219a4 <_dtoa_r+0x974>
 80214c6:	4b65      	ldr	r3, [pc, #404]	; (802165c <_dtoa_r+0x62c>)
 80214c8:	2200      	movs	r2, #0
 80214ca:	4640      	mov	r0, r8
 80214cc:	4649      	mov	r1, r9
 80214ce:	f7df f8bb 	bl	8000648 <__aeabi_dmul>
 80214d2:	4652      	mov	r2, sl
 80214d4:	465b      	mov	r3, fp
 80214d6:	f7df fb3d 	bl	8000b54 <__aeabi_dcmpge>
 80214da:	9e03      	ldr	r6, [sp, #12]
 80214dc:	4637      	mov	r7, r6
 80214de:	2800      	cmp	r0, #0
 80214e0:	f040 8245 	bne.w	802196e <_dtoa_r+0x93e>
 80214e4:	9d01      	ldr	r5, [sp, #4]
 80214e6:	2331      	movs	r3, #49	; 0x31
 80214e8:	f805 3b01 	strb.w	r3, [r5], #1
 80214ec:	9b00      	ldr	r3, [sp, #0]
 80214ee:	3301      	adds	r3, #1
 80214f0:	9300      	str	r3, [sp, #0]
 80214f2:	e240      	b.n	8021976 <_dtoa_r+0x946>
 80214f4:	07f2      	lsls	r2, r6, #31
 80214f6:	d505      	bpl.n	8021504 <_dtoa_r+0x4d4>
 80214f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80214fc:	f7df f8a4 	bl	8000648 <__aeabi_dmul>
 8021500:	3501      	adds	r5, #1
 8021502:	2301      	movs	r3, #1
 8021504:	1076      	asrs	r6, r6, #1
 8021506:	3708      	adds	r7, #8
 8021508:	e777      	b.n	80213fa <_dtoa_r+0x3ca>
 802150a:	2502      	movs	r5, #2
 802150c:	e779      	b.n	8021402 <_dtoa_r+0x3d2>
 802150e:	9f00      	ldr	r7, [sp, #0]
 8021510:	9e03      	ldr	r6, [sp, #12]
 8021512:	e794      	b.n	802143e <_dtoa_r+0x40e>
 8021514:	9901      	ldr	r1, [sp, #4]
 8021516:	4b4c      	ldr	r3, [pc, #304]	; (8021648 <_dtoa_r+0x618>)
 8021518:	4431      	add	r1, r6
 802151a:	910d      	str	r1, [sp, #52]	; 0x34
 802151c:	9908      	ldr	r1, [sp, #32]
 802151e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021522:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021526:	2900      	cmp	r1, #0
 8021528:	d043      	beq.n	80215b2 <_dtoa_r+0x582>
 802152a:	494d      	ldr	r1, [pc, #308]	; (8021660 <_dtoa_r+0x630>)
 802152c:	2000      	movs	r0, #0
 802152e:	f7df f9b5 	bl	800089c <__aeabi_ddiv>
 8021532:	4652      	mov	r2, sl
 8021534:	465b      	mov	r3, fp
 8021536:	f7de fecf 	bl	80002d8 <__aeabi_dsub>
 802153a:	9d01      	ldr	r5, [sp, #4]
 802153c:	4682      	mov	sl, r0
 802153e:	468b      	mov	fp, r1
 8021540:	4649      	mov	r1, r9
 8021542:	4640      	mov	r0, r8
 8021544:	f7df fb30 	bl	8000ba8 <__aeabi_d2iz>
 8021548:	4606      	mov	r6, r0
 802154a:	f7df f813 	bl	8000574 <__aeabi_i2d>
 802154e:	4602      	mov	r2, r0
 8021550:	460b      	mov	r3, r1
 8021552:	4640      	mov	r0, r8
 8021554:	4649      	mov	r1, r9
 8021556:	f7de febf 	bl	80002d8 <__aeabi_dsub>
 802155a:	3630      	adds	r6, #48	; 0x30
 802155c:	f805 6b01 	strb.w	r6, [r5], #1
 8021560:	4652      	mov	r2, sl
 8021562:	465b      	mov	r3, fp
 8021564:	4680      	mov	r8, r0
 8021566:	4689      	mov	r9, r1
 8021568:	f7df fae0 	bl	8000b2c <__aeabi_dcmplt>
 802156c:	2800      	cmp	r0, #0
 802156e:	d163      	bne.n	8021638 <_dtoa_r+0x608>
 8021570:	4642      	mov	r2, r8
 8021572:	464b      	mov	r3, r9
 8021574:	4936      	ldr	r1, [pc, #216]	; (8021650 <_dtoa_r+0x620>)
 8021576:	2000      	movs	r0, #0
 8021578:	f7de feae 	bl	80002d8 <__aeabi_dsub>
 802157c:	4652      	mov	r2, sl
 802157e:	465b      	mov	r3, fp
 8021580:	f7df fad4 	bl	8000b2c <__aeabi_dcmplt>
 8021584:	2800      	cmp	r0, #0
 8021586:	f040 80b5 	bne.w	80216f4 <_dtoa_r+0x6c4>
 802158a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802158c:	429d      	cmp	r5, r3
 802158e:	d081      	beq.n	8021494 <_dtoa_r+0x464>
 8021590:	4b30      	ldr	r3, [pc, #192]	; (8021654 <_dtoa_r+0x624>)
 8021592:	2200      	movs	r2, #0
 8021594:	4650      	mov	r0, sl
 8021596:	4659      	mov	r1, fp
 8021598:	f7df f856 	bl	8000648 <__aeabi_dmul>
 802159c:	4b2d      	ldr	r3, [pc, #180]	; (8021654 <_dtoa_r+0x624>)
 802159e:	4682      	mov	sl, r0
 80215a0:	468b      	mov	fp, r1
 80215a2:	4640      	mov	r0, r8
 80215a4:	4649      	mov	r1, r9
 80215a6:	2200      	movs	r2, #0
 80215a8:	f7df f84e 	bl	8000648 <__aeabi_dmul>
 80215ac:	4680      	mov	r8, r0
 80215ae:	4689      	mov	r9, r1
 80215b0:	e7c6      	b.n	8021540 <_dtoa_r+0x510>
 80215b2:	4650      	mov	r0, sl
 80215b4:	4659      	mov	r1, fp
 80215b6:	f7df f847 	bl	8000648 <__aeabi_dmul>
 80215ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215bc:	9d01      	ldr	r5, [sp, #4]
 80215be:	930f      	str	r3, [sp, #60]	; 0x3c
 80215c0:	4682      	mov	sl, r0
 80215c2:	468b      	mov	fp, r1
 80215c4:	4649      	mov	r1, r9
 80215c6:	4640      	mov	r0, r8
 80215c8:	f7df faee 	bl	8000ba8 <__aeabi_d2iz>
 80215cc:	4606      	mov	r6, r0
 80215ce:	f7de ffd1 	bl	8000574 <__aeabi_i2d>
 80215d2:	3630      	adds	r6, #48	; 0x30
 80215d4:	4602      	mov	r2, r0
 80215d6:	460b      	mov	r3, r1
 80215d8:	4640      	mov	r0, r8
 80215da:	4649      	mov	r1, r9
 80215dc:	f7de fe7c 	bl	80002d8 <__aeabi_dsub>
 80215e0:	f805 6b01 	strb.w	r6, [r5], #1
 80215e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80215e6:	429d      	cmp	r5, r3
 80215e8:	4680      	mov	r8, r0
 80215ea:	4689      	mov	r9, r1
 80215ec:	f04f 0200 	mov.w	r2, #0
 80215f0:	d124      	bne.n	802163c <_dtoa_r+0x60c>
 80215f2:	4b1b      	ldr	r3, [pc, #108]	; (8021660 <_dtoa_r+0x630>)
 80215f4:	4650      	mov	r0, sl
 80215f6:	4659      	mov	r1, fp
 80215f8:	f7de fe70 	bl	80002dc <__adddf3>
 80215fc:	4602      	mov	r2, r0
 80215fe:	460b      	mov	r3, r1
 8021600:	4640      	mov	r0, r8
 8021602:	4649      	mov	r1, r9
 8021604:	f7df fab0 	bl	8000b68 <__aeabi_dcmpgt>
 8021608:	2800      	cmp	r0, #0
 802160a:	d173      	bne.n	80216f4 <_dtoa_r+0x6c4>
 802160c:	4652      	mov	r2, sl
 802160e:	465b      	mov	r3, fp
 8021610:	4913      	ldr	r1, [pc, #76]	; (8021660 <_dtoa_r+0x630>)
 8021612:	2000      	movs	r0, #0
 8021614:	f7de fe60 	bl	80002d8 <__aeabi_dsub>
 8021618:	4602      	mov	r2, r0
 802161a:	460b      	mov	r3, r1
 802161c:	4640      	mov	r0, r8
 802161e:	4649      	mov	r1, r9
 8021620:	f7df fa84 	bl	8000b2c <__aeabi_dcmplt>
 8021624:	2800      	cmp	r0, #0
 8021626:	f43f af35 	beq.w	8021494 <_dtoa_r+0x464>
 802162a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802162c:	1e6b      	subs	r3, r5, #1
 802162e:	930f      	str	r3, [sp, #60]	; 0x3c
 8021630:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021634:	2b30      	cmp	r3, #48	; 0x30
 8021636:	d0f8      	beq.n	802162a <_dtoa_r+0x5fa>
 8021638:	9700      	str	r7, [sp, #0]
 802163a:	e049      	b.n	80216d0 <_dtoa_r+0x6a0>
 802163c:	4b05      	ldr	r3, [pc, #20]	; (8021654 <_dtoa_r+0x624>)
 802163e:	f7df f803 	bl	8000648 <__aeabi_dmul>
 8021642:	4680      	mov	r8, r0
 8021644:	4689      	mov	r9, r1
 8021646:	e7bd      	b.n	80215c4 <_dtoa_r+0x594>
 8021648:	08023958 	.word	0x08023958
 802164c:	08023930 	.word	0x08023930
 8021650:	3ff00000 	.word	0x3ff00000
 8021654:	40240000 	.word	0x40240000
 8021658:	401c0000 	.word	0x401c0000
 802165c:	40140000 	.word	0x40140000
 8021660:	3fe00000 	.word	0x3fe00000
 8021664:	9d01      	ldr	r5, [sp, #4]
 8021666:	4656      	mov	r6, sl
 8021668:	465f      	mov	r7, fp
 802166a:	4642      	mov	r2, r8
 802166c:	464b      	mov	r3, r9
 802166e:	4630      	mov	r0, r6
 8021670:	4639      	mov	r1, r7
 8021672:	f7df f913 	bl	800089c <__aeabi_ddiv>
 8021676:	f7df fa97 	bl	8000ba8 <__aeabi_d2iz>
 802167a:	4682      	mov	sl, r0
 802167c:	f7de ff7a 	bl	8000574 <__aeabi_i2d>
 8021680:	4642      	mov	r2, r8
 8021682:	464b      	mov	r3, r9
 8021684:	f7de ffe0 	bl	8000648 <__aeabi_dmul>
 8021688:	4602      	mov	r2, r0
 802168a:	460b      	mov	r3, r1
 802168c:	4630      	mov	r0, r6
 802168e:	4639      	mov	r1, r7
 8021690:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021694:	f7de fe20 	bl	80002d8 <__aeabi_dsub>
 8021698:	f805 6b01 	strb.w	r6, [r5], #1
 802169c:	9e01      	ldr	r6, [sp, #4]
 802169e:	9f03      	ldr	r7, [sp, #12]
 80216a0:	1bae      	subs	r6, r5, r6
 80216a2:	42b7      	cmp	r7, r6
 80216a4:	4602      	mov	r2, r0
 80216a6:	460b      	mov	r3, r1
 80216a8:	d135      	bne.n	8021716 <_dtoa_r+0x6e6>
 80216aa:	f7de fe17 	bl	80002dc <__adddf3>
 80216ae:	4642      	mov	r2, r8
 80216b0:	464b      	mov	r3, r9
 80216b2:	4606      	mov	r6, r0
 80216b4:	460f      	mov	r7, r1
 80216b6:	f7df fa57 	bl	8000b68 <__aeabi_dcmpgt>
 80216ba:	b9d0      	cbnz	r0, 80216f2 <_dtoa_r+0x6c2>
 80216bc:	4642      	mov	r2, r8
 80216be:	464b      	mov	r3, r9
 80216c0:	4630      	mov	r0, r6
 80216c2:	4639      	mov	r1, r7
 80216c4:	f7df fa28 	bl	8000b18 <__aeabi_dcmpeq>
 80216c8:	b110      	cbz	r0, 80216d0 <_dtoa_r+0x6a0>
 80216ca:	f01a 0f01 	tst.w	sl, #1
 80216ce:	d110      	bne.n	80216f2 <_dtoa_r+0x6c2>
 80216d0:	4620      	mov	r0, r4
 80216d2:	ee18 1a10 	vmov	r1, s16
 80216d6:	f000 fd05 	bl	80220e4 <_Bfree>
 80216da:	2300      	movs	r3, #0
 80216dc:	9800      	ldr	r0, [sp, #0]
 80216de:	702b      	strb	r3, [r5, #0]
 80216e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80216e2:	3001      	adds	r0, #1
 80216e4:	6018      	str	r0, [r3, #0]
 80216e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80216e8:	2b00      	cmp	r3, #0
 80216ea:	f43f acf1 	beq.w	80210d0 <_dtoa_r+0xa0>
 80216ee:	601d      	str	r5, [r3, #0]
 80216f0:	e4ee      	b.n	80210d0 <_dtoa_r+0xa0>
 80216f2:	9f00      	ldr	r7, [sp, #0]
 80216f4:	462b      	mov	r3, r5
 80216f6:	461d      	mov	r5, r3
 80216f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80216fc:	2a39      	cmp	r2, #57	; 0x39
 80216fe:	d106      	bne.n	802170e <_dtoa_r+0x6de>
 8021700:	9a01      	ldr	r2, [sp, #4]
 8021702:	429a      	cmp	r2, r3
 8021704:	d1f7      	bne.n	80216f6 <_dtoa_r+0x6c6>
 8021706:	9901      	ldr	r1, [sp, #4]
 8021708:	2230      	movs	r2, #48	; 0x30
 802170a:	3701      	adds	r7, #1
 802170c:	700a      	strb	r2, [r1, #0]
 802170e:	781a      	ldrb	r2, [r3, #0]
 8021710:	3201      	adds	r2, #1
 8021712:	701a      	strb	r2, [r3, #0]
 8021714:	e790      	b.n	8021638 <_dtoa_r+0x608>
 8021716:	4ba6      	ldr	r3, [pc, #664]	; (80219b0 <_dtoa_r+0x980>)
 8021718:	2200      	movs	r2, #0
 802171a:	f7de ff95 	bl	8000648 <__aeabi_dmul>
 802171e:	2200      	movs	r2, #0
 8021720:	2300      	movs	r3, #0
 8021722:	4606      	mov	r6, r0
 8021724:	460f      	mov	r7, r1
 8021726:	f7df f9f7 	bl	8000b18 <__aeabi_dcmpeq>
 802172a:	2800      	cmp	r0, #0
 802172c:	d09d      	beq.n	802166a <_dtoa_r+0x63a>
 802172e:	e7cf      	b.n	80216d0 <_dtoa_r+0x6a0>
 8021730:	9a08      	ldr	r2, [sp, #32]
 8021732:	2a00      	cmp	r2, #0
 8021734:	f000 80d7 	beq.w	80218e6 <_dtoa_r+0x8b6>
 8021738:	9a06      	ldr	r2, [sp, #24]
 802173a:	2a01      	cmp	r2, #1
 802173c:	f300 80ba 	bgt.w	80218b4 <_dtoa_r+0x884>
 8021740:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021742:	2a00      	cmp	r2, #0
 8021744:	f000 80b2 	beq.w	80218ac <_dtoa_r+0x87c>
 8021748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802174c:	9e07      	ldr	r6, [sp, #28]
 802174e:	9d04      	ldr	r5, [sp, #16]
 8021750:	9a04      	ldr	r2, [sp, #16]
 8021752:	441a      	add	r2, r3
 8021754:	9204      	str	r2, [sp, #16]
 8021756:	9a05      	ldr	r2, [sp, #20]
 8021758:	2101      	movs	r1, #1
 802175a:	441a      	add	r2, r3
 802175c:	4620      	mov	r0, r4
 802175e:	9205      	str	r2, [sp, #20]
 8021760:	f000 fd78 	bl	8022254 <__i2b>
 8021764:	4607      	mov	r7, r0
 8021766:	2d00      	cmp	r5, #0
 8021768:	dd0c      	ble.n	8021784 <_dtoa_r+0x754>
 802176a:	9b05      	ldr	r3, [sp, #20]
 802176c:	2b00      	cmp	r3, #0
 802176e:	dd09      	ble.n	8021784 <_dtoa_r+0x754>
 8021770:	42ab      	cmp	r3, r5
 8021772:	9a04      	ldr	r2, [sp, #16]
 8021774:	bfa8      	it	ge
 8021776:	462b      	movge	r3, r5
 8021778:	1ad2      	subs	r2, r2, r3
 802177a:	9204      	str	r2, [sp, #16]
 802177c:	9a05      	ldr	r2, [sp, #20]
 802177e:	1aed      	subs	r5, r5, r3
 8021780:	1ad3      	subs	r3, r2, r3
 8021782:	9305      	str	r3, [sp, #20]
 8021784:	9b07      	ldr	r3, [sp, #28]
 8021786:	b31b      	cbz	r3, 80217d0 <_dtoa_r+0x7a0>
 8021788:	9b08      	ldr	r3, [sp, #32]
 802178a:	2b00      	cmp	r3, #0
 802178c:	f000 80af 	beq.w	80218ee <_dtoa_r+0x8be>
 8021790:	2e00      	cmp	r6, #0
 8021792:	dd13      	ble.n	80217bc <_dtoa_r+0x78c>
 8021794:	4639      	mov	r1, r7
 8021796:	4632      	mov	r2, r6
 8021798:	4620      	mov	r0, r4
 802179a:	f000 fe1b 	bl	80223d4 <__pow5mult>
 802179e:	ee18 2a10 	vmov	r2, s16
 80217a2:	4601      	mov	r1, r0
 80217a4:	4607      	mov	r7, r0
 80217a6:	4620      	mov	r0, r4
 80217a8:	f000 fd6a 	bl	8022280 <__multiply>
 80217ac:	ee18 1a10 	vmov	r1, s16
 80217b0:	4680      	mov	r8, r0
 80217b2:	4620      	mov	r0, r4
 80217b4:	f000 fc96 	bl	80220e4 <_Bfree>
 80217b8:	ee08 8a10 	vmov	s16, r8
 80217bc:	9b07      	ldr	r3, [sp, #28]
 80217be:	1b9a      	subs	r2, r3, r6
 80217c0:	d006      	beq.n	80217d0 <_dtoa_r+0x7a0>
 80217c2:	ee18 1a10 	vmov	r1, s16
 80217c6:	4620      	mov	r0, r4
 80217c8:	f000 fe04 	bl	80223d4 <__pow5mult>
 80217cc:	ee08 0a10 	vmov	s16, r0
 80217d0:	2101      	movs	r1, #1
 80217d2:	4620      	mov	r0, r4
 80217d4:	f000 fd3e 	bl	8022254 <__i2b>
 80217d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80217da:	2b00      	cmp	r3, #0
 80217dc:	4606      	mov	r6, r0
 80217de:	f340 8088 	ble.w	80218f2 <_dtoa_r+0x8c2>
 80217e2:	461a      	mov	r2, r3
 80217e4:	4601      	mov	r1, r0
 80217e6:	4620      	mov	r0, r4
 80217e8:	f000 fdf4 	bl	80223d4 <__pow5mult>
 80217ec:	9b06      	ldr	r3, [sp, #24]
 80217ee:	2b01      	cmp	r3, #1
 80217f0:	4606      	mov	r6, r0
 80217f2:	f340 8081 	ble.w	80218f8 <_dtoa_r+0x8c8>
 80217f6:	f04f 0800 	mov.w	r8, #0
 80217fa:	6933      	ldr	r3, [r6, #16]
 80217fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021800:	6918      	ldr	r0, [r3, #16]
 8021802:	f000 fcd7 	bl	80221b4 <__hi0bits>
 8021806:	f1c0 0020 	rsb	r0, r0, #32
 802180a:	9b05      	ldr	r3, [sp, #20]
 802180c:	4418      	add	r0, r3
 802180e:	f010 001f 	ands.w	r0, r0, #31
 8021812:	f000 8092 	beq.w	802193a <_dtoa_r+0x90a>
 8021816:	f1c0 0320 	rsb	r3, r0, #32
 802181a:	2b04      	cmp	r3, #4
 802181c:	f340 808a 	ble.w	8021934 <_dtoa_r+0x904>
 8021820:	f1c0 001c 	rsb	r0, r0, #28
 8021824:	9b04      	ldr	r3, [sp, #16]
 8021826:	4403      	add	r3, r0
 8021828:	9304      	str	r3, [sp, #16]
 802182a:	9b05      	ldr	r3, [sp, #20]
 802182c:	4403      	add	r3, r0
 802182e:	4405      	add	r5, r0
 8021830:	9305      	str	r3, [sp, #20]
 8021832:	9b04      	ldr	r3, [sp, #16]
 8021834:	2b00      	cmp	r3, #0
 8021836:	dd07      	ble.n	8021848 <_dtoa_r+0x818>
 8021838:	ee18 1a10 	vmov	r1, s16
 802183c:	461a      	mov	r2, r3
 802183e:	4620      	mov	r0, r4
 8021840:	f000 fe22 	bl	8022488 <__lshift>
 8021844:	ee08 0a10 	vmov	s16, r0
 8021848:	9b05      	ldr	r3, [sp, #20]
 802184a:	2b00      	cmp	r3, #0
 802184c:	dd05      	ble.n	802185a <_dtoa_r+0x82a>
 802184e:	4631      	mov	r1, r6
 8021850:	461a      	mov	r2, r3
 8021852:	4620      	mov	r0, r4
 8021854:	f000 fe18 	bl	8022488 <__lshift>
 8021858:	4606      	mov	r6, r0
 802185a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802185c:	2b00      	cmp	r3, #0
 802185e:	d06e      	beq.n	802193e <_dtoa_r+0x90e>
 8021860:	ee18 0a10 	vmov	r0, s16
 8021864:	4631      	mov	r1, r6
 8021866:	f000 fe7f 	bl	8022568 <__mcmp>
 802186a:	2800      	cmp	r0, #0
 802186c:	da67      	bge.n	802193e <_dtoa_r+0x90e>
 802186e:	9b00      	ldr	r3, [sp, #0]
 8021870:	3b01      	subs	r3, #1
 8021872:	ee18 1a10 	vmov	r1, s16
 8021876:	9300      	str	r3, [sp, #0]
 8021878:	220a      	movs	r2, #10
 802187a:	2300      	movs	r3, #0
 802187c:	4620      	mov	r0, r4
 802187e:	f000 fc53 	bl	8022128 <__multadd>
 8021882:	9b08      	ldr	r3, [sp, #32]
 8021884:	ee08 0a10 	vmov	s16, r0
 8021888:	2b00      	cmp	r3, #0
 802188a:	f000 81b1 	beq.w	8021bf0 <_dtoa_r+0xbc0>
 802188e:	2300      	movs	r3, #0
 8021890:	4639      	mov	r1, r7
 8021892:	220a      	movs	r2, #10
 8021894:	4620      	mov	r0, r4
 8021896:	f000 fc47 	bl	8022128 <__multadd>
 802189a:	9b02      	ldr	r3, [sp, #8]
 802189c:	2b00      	cmp	r3, #0
 802189e:	4607      	mov	r7, r0
 80218a0:	f300 808e 	bgt.w	80219c0 <_dtoa_r+0x990>
 80218a4:	9b06      	ldr	r3, [sp, #24]
 80218a6:	2b02      	cmp	r3, #2
 80218a8:	dc51      	bgt.n	802194e <_dtoa_r+0x91e>
 80218aa:	e089      	b.n	80219c0 <_dtoa_r+0x990>
 80218ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80218ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80218b2:	e74b      	b.n	802174c <_dtoa_r+0x71c>
 80218b4:	9b03      	ldr	r3, [sp, #12]
 80218b6:	1e5e      	subs	r6, r3, #1
 80218b8:	9b07      	ldr	r3, [sp, #28]
 80218ba:	42b3      	cmp	r3, r6
 80218bc:	bfbf      	itttt	lt
 80218be:	9b07      	ldrlt	r3, [sp, #28]
 80218c0:	9607      	strlt	r6, [sp, #28]
 80218c2:	1af2      	sublt	r2, r6, r3
 80218c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80218c6:	bfb6      	itet	lt
 80218c8:	189b      	addlt	r3, r3, r2
 80218ca:	1b9e      	subge	r6, r3, r6
 80218cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80218ce:	9b03      	ldr	r3, [sp, #12]
 80218d0:	bfb8      	it	lt
 80218d2:	2600      	movlt	r6, #0
 80218d4:	2b00      	cmp	r3, #0
 80218d6:	bfb7      	itett	lt
 80218d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80218dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80218e0:	1a9d      	sublt	r5, r3, r2
 80218e2:	2300      	movlt	r3, #0
 80218e4:	e734      	b.n	8021750 <_dtoa_r+0x720>
 80218e6:	9e07      	ldr	r6, [sp, #28]
 80218e8:	9d04      	ldr	r5, [sp, #16]
 80218ea:	9f08      	ldr	r7, [sp, #32]
 80218ec:	e73b      	b.n	8021766 <_dtoa_r+0x736>
 80218ee:	9a07      	ldr	r2, [sp, #28]
 80218f0:	e767      	b.n	80217c2 <_dtoa_r+0x792>
 80218f2:	9b06      	ldr	r3, [sp, #24]
 80218f4:	2b01      	cmp	r3, #1
 80218f6:	dc18      	bgt.n	802192a <_dtoa_r+0x8fa>
 80218f8:	f1ba 0f00 	cmp.w	sl, #0
 80218fc:	d115      	bne.n	802192a <_dtoa_r+0x8fa>
 80218fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021902:	b993      	cbnz	r3, 802192a <_dtoa_r+0x8fa>
 8021904:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021908:	0d1b      	lsrs	r3, r3, #20
 802190a:	051b      	lsls	r3, r3, #20
 802190c:	b183      	cbz	r3, 8021930 <_dtoa_r+0x900>
 802190e:	9b04      	ldr	r3, [sp, #16]
 8021910:	3301      	adds	r3, #1
 8021912:	9304      	str	r3, [sp, #16]
 8021914:	9b05      	ldr	r3, [sp, #20]
 8021916:	3301      	adds	r3, #1
 8021918:	9305      	str	r3, [sp, #20]
 802191a:	f04f 0801 	mov.w	r8, #1
 802191e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021920:	2b00      	cmp	r3, #0
 8021922:	f47f af6a 	bne.w	80217fa <_dtoa_r+0x7ca>
 8021926:	2001      	movs	r0, #1
 8021928:	e76f      	b.n	802180a <_dtoa_r+0x7da>
 802192a:	f04f 0800 	mov.w	r8, #0
 802192e:	e7f6      	b.n	802191e <_dtoa_r+0x8ee>
 8021930:	4698      	mov	r8, r3
 8021932:	e7f4      	b.n	802191e <_dtoa_r+0x8ee>
 8021934:	f43f af7d 	beq.w	8021832 <_dtoa_r+0x802>
 8021938:	4618      	mov	r0, r3
 802193a:	301c      	adds	r0, #28
 802193c:	e772      	b.n	8021824 <_dtoa_r+0x7f4>
 802193e:	9b03      	ldr	r3, [sp, #12]
 8021940:	2b00      	cmp	r3, #0
 8021942:	dc37      	bgt.n	80219b4 <_dtoa_r+0x984>
 8021944:	9b06      	ldr	r3, [sp, #24]
 8021946:	2b02      	cmp	r3, #2
 8021948:	dd34      	ble.n	80219b4 <_dtoa_r+0x984>
 802194a:	9b03      	ldr	r3, [sp, #12]
 802194c:	9302      	str	r3, [sp, #8]
 802194e:	9b02      	ldr	r3, [sp, #8]
 8021950:	b96b      	cbnz	r3, 802196e <_dtoa_r+0x93e>
 8021952:	4631      	mov	r1, r6
 8021954:	2205      	movs	r2, #5
 8021956:	4620      	mov	r0, r4
 8021958:	f000 fbe6 	bl	8022128 <__multadd>
 802195c:	4601      	mov	r1, r0
 802195e:	4606      	mov	r6, r0
 8021960:	ee18 0a10 	vmov	r0, s16
 8021964:	f000 fe00 	bl	8022568 <__mcmp>
 8021968:	2800      	cmp	r0, #0
 802196a:	f73f adbb 	bgt.w	80214e4 <_dtoa_r+0x4b4>
 802196e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021970:	9d01      	ldr	r5, [sp, #4]
 8021972:	43db      	mvns	r3, r3
 8021974:	9300      	str	r3, [sp, #0]
 8021976:	f04f 0800 	mov.w	r8, #0
 802197a:	4631      	mov	r1, r6
 802197c:	4620      	mov	r0, r4
 802197e:	f000 fbb1 	bl	80220e4 <_Bfree>
 8021982:	2f00      	cmp	r7, #0
 8021984:	f43f aea4 	beq.w	80216d0 <_dtoa_r+0x6a0>
 8021988:	f1b8 0f00 	cmp.w	r8, #0
 802198c:	d005      	beq.n	802199a <_dtoa_r+0x96a>
 802198e:	45b8      	cmp	r8, r7
 8021990:	d003      	beq.n	802199a <_dtoa_r+0x96a>
 8021992:	4641      	mov	r1, r8
 8021994:	4620      	mov	r0, r4
 8021996:	f000 fba5 	bl	80220e4 <_Bfree>
 802199a:	4639      	mov	r1, r7
 802199c:	4620      	mov	r0, r4
 802199e:	f000 fba1 	bl	80220e4 <_Bfree>
 80219a2:	e695      	b.n	80216d0 <_dtoa_r+0x6a0>
 80219a4:	2600      	movs	r6, #0
 80219a6:	4637      	mov	r7, r6
 80219a8:	e7e1      	b.n	802196e <_dtoa_r+0x93e>
 80219aa:	9700      	str	r7, [sp, #0]
 80219ac:	4637      	mov	r7, r6
 80219ae:	e599      	b.n	80214e4 <_dtoa_r+0x4b4>
 80219b0:	40240000 	.word	0x40240000
 80219b4:	9b08      	ldr	r3, [sp, #32]
 80219b6:	2b00      	cmp	r3, #0
 80219b8:	f000 80ca 	beq.w	8021b50 <_dtoa_r+0xb20>
 80219bc:	9b03      	ldr	r3, [sp, #12]
 80219be:	9302      	str	r3, [sp, #8]
 80219c0:	2d00      	cmp	r5, #0
 80219c2:	dd05      	ble.n	80219d0 <_dtoa_r+0x9a0>
 80219c4:	4639      	mov	r1, r7
 80219c6:	462a      	mov	r2, r5
 80219c8:	4620      	mov	r0, r4
 80219ca:	f000 fd5d 	bl	8022488 <__lshift>
 80219ce:	4607      	mov	r7, r0
 80219d0:	f1b8 0f00 	cmp.w	r8, #0
 80219d4:	d05b      	beq.n	8021a8e <_dtoa_r+0xa5e>
 80219d6:	6879      	ldr	r1, [r7, #4]
 80219d8:	4620      	mov	r0, r4
 80219da:	f000 fb43 	bl	8022064 <_Balloc>
 80219de:	4605      	mov	r5, r0
 80219e0:	b928      	cbnz	r0, 80219ee <_dtoa_r+0x9be>
 80219e2:	4b87      	ldr	r3, [pc, #540]	; (8021c00 <_dtoa_r+0xbd0>)
 80219e4:	4602      	mov	r2, r0
 80219e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80219ea:	f7ff bb3b 	b.w	8021064 <_dtoa_r+0x34>
 80219ee:	693a      	ldr	r2, [r7, #16]
 80219f0:	3202      	adds	r2, #2
 80219f2:	0092      	lsls	r2, r2, #2
 80219f4:	f107 010c 	add.w	r1, r7, #12
 80219f8:	300c      	adds	r0, #12
 80219fa:	f7fe fca9 	bl	8020350 <memcpy>
 80219fe:	2201      	movs	r2, #1
 8021a00:	4629      	mov	r1, r5
 8021a02:	4620      	mov	r0, r4
 8021a04:	f000 fd40 	bl	8022488 <__lshift>
 8021a08:	9b01      	ldr	r3, [sp, #4]
 8021a0a:	f103 0901 	add.w	r9, r3, #1
 8021a0e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8021a12:	4413      	add	r3, r2
 8021a14:	9305      	str	r3, [sp, #20]
 8021a16:	f00a 0301 	and.w	r3, sl, #1
 8021a1a:	46b8      	mov	r8, r7
 8021a1c:	9304      	str	r3, [sp, #16]
 8021a1e:	4607      	mov	r7, r0
 8021a20:	4631      	mov	r1, r6
 8021a22:	ee18 0a10 	vmov	r0, s16
 8021a26:	f7ff fa77 	bl	8020f18 <quorem>
 8021a2a:	4641      	mov	r1, r8
 8021a2c:	9002      	str	r0, [sp, #8]
 8021a2e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021a32:	ee18 0a10 	vmov	r0, s16
 8021a36:	f000 fd97 	bl	8022568 <__mcmp>
 8021a3a:	463a      	mov	r2, r7
 8021a3c:	9003      	str	r0, [sp, #12]
 8021a3e:	4631      	mov	r1, r6
 8021a40:	4620      	mov	r0, r4
 8021a42:	f000 fdad 	bl	80225a0 <__mdiff>
 8021a46:	68c2      	ldr	r2, [r0, #12]
 8021a48:	f109 3bff 	add.w	fp, r9, #4294967295
 8021a4c:	4605      	mov	r5, r0
 8021a4e:	bb02      	cbnz	r2, 8021a92 <_dtoa_r+0xa62>
 8021a50:	4601      	mov	r1, r0
 8021a52:	ee18 0a10 	vmov	r0, s16
 8021a56:	f000 fd87 	bl	8022568 <__mcmp>
 8021a5a:	4602      	mov	r2, r0
 8021a5c:	4629      	mov	r1, r5
 8021a5e:	4620      	mov	r0, r4
 8021a60:	9207      	str	r2, [sp, #28]
 8021a62:	f000 fb3f 	bl	80220e4 <_Bfree>
 8021a66:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8021a6a:	ea43 0102 	orr.w	r1, r3, r2
 8021a6e:	9b04      	ldr	r3, [sp, #16]
 8021a70:	430b      	orrs	r3, r1
 8021a72:	464d      	mov	r5, r9
 8021a74:	d10f      	bne.n	8021a96 <_dtoa_r+0xa66>
 8021a76:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021a7a:	d02a      	beq.n	8021ad2 <_dtoa_r+0xaa2>
 8021a7c:	9b03      	ldr	r3, [sp, #12]
 8021a7e:	2b00      	cmp	r3, #0
 8021a80:	dd02      	ble.n	8021a88 <_dtoa_r+0xa58>
 8021a82:	9b02      	ldr	r3, [sp, #8]
 8021a84:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8021a88:	f88b a000 	strb.w	sl, [fp]
 8021a8c:	e775      	b.n	802197a <_dtoa_r+0x94a>
 8021a8e:	4638      	mov	r0, r7
 8021a90:	e7ba      	b.n	8021a08 <_dtoa_r+0x9d8>
 8021a92:	2201      	movs	r2, #1
 8021a94:	e7e2      	b.n	8021a5c <_dtoa_r+0xa2c>
 8021a96:	9b03      	ldr	r3, [sp, #12]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	db04      	blt.n	8021aa6 <_dtoa_r+0xa76>
 8021a9c:	9906      	ldr	r1, [sp, #24]
 8021a9e:	430b      	orrs	r3, r1
 8021aa0:	9904      	ldr	r1, [sp, #16]
 8021aa2:	430b      	orrs	r3, r1
 8021aa4:	d122      	bne.n	8021aec <_dtoa_r+0xabc>
 8021aa6:	2a00      	cmp	r2, #0
 8021aa8:	ddee      	ble.n	8021a88 <_dtoa_r+0xa58>
 8021aaa:	ee18 1a10 	vmov	r1, s16
 8021aae:	2201      	movs	r2, #1
 8021ab0:	4620      	mov	r0, r4
 8021ab2:	f000 fce9 	bl	8022488 <__lshift>
 8021ab6:	4631      	mov	r1, r6
 8021ab8:	ee08 0a10 	vmov	s16, r0
 8021abc:	f000 fd54 	bl	8022568 <__mcmp>
 8021ac0:	2800      	cmp	r0, #0
 8021ac2:	dc03      	bgt.n	8021acc <_dtoa_r+0xa9c>
 8021ac4:	d1e0      	bne.n	8021a88 <_dtoa_r+0xa58>
 8021ac6:	f01a 0f01 	tst.w	sl, #1
 8021aca:	d0dd      	beq.n	8021a88 <_dtoa_r+0xa58>
 8021acc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021ad0:	d1d7      	bne.n	8021a82 <_dtoa_r+0xa52>
 8021ad2:	2339      	movs	r3, #57	; 0x39
 8021ad4:	f88b 3000 	strb.w	r3, [fp]
 8021ad8:	462b      	mov	r3, r5
 8021ada:	461d      	mov	r5, r3
 8021adc:	3b01      	subs	r3, #1
 8021ade:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021ae2:	2a39      	cmp	r2, #57	; 0x39
 8021ae4:	d071      	beq.n	8021bca <_dtoa_r+0xb9a>
 8021ae6:	3201      	adds	r2, #1
 8021ae8:	701a      	strb	r2, [r3, #0]
 8021aea:	e746      	b.n	802197a <_dtoa_r+0x94a>
 8021aec:	2a00      	cmp	r2, #0
 8021aee:	dd07      	ble.n	8021b00 <_dtoa_r+0xad0>
 8021af0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021af4:	d0ed      	beq.n	8021ad2 <_dtoa_r+0xaa2>
 8021af6:	f10a 0301 	add.w	r3, sl, #1
 8021afa:	f88b 3000 	strb.w	r3, [fp]
 8021afe:	e73c      	b.n	802197a <_dtoa_r+0x94a>
 8021b00:	9b05      	ldr	r3, [sp, #20]
 8021b02:	f809 ac01 	strb.w	sl, [r9, #-1]
 8021b06:	4599      	cmp	r9, r3
 8021b08:	d047      	beq.n	8021b9a <_dtoa_r+0xb6a>
 8021b0a:	ee18 1a10 	vmov	r1, s16
 8021b0e:	2300      	movs	r3, #0
 8021b10:	220a      	movs	r2, #10
 8021b12:	4620      	mov	r0, r4
 8021b14:	f000 fb08 	bl	8022128 <__multadd>
 8021b18:	45b8      	cmp	r8, r7
 8021b1a:	ee08 0a10 	vmov	s16, r0
 8021b1e:	f04f 0300 	mov.w	r3, #0
 8021b22:	f04f 020a 	mov.w	r2, #10
 8021b26:	4641      	mov	r1, r8
 8021b28:	4620      	mov	r0, r4
 8021b2a:	d106      	bne.n	8021b3a <_dtoa_r+0xb0a>
 8021b2c:	f000 fafc 	bl	8022128 <__multadd>
 8021b30:	4680      	mov	r8, r0
 8021b32:	4607      	mov	r7, r0
 8021b34:	f109 0901 	add.w	r9, r9, #1
 8021b38:	e772      	b.n	8021a20 <_dtoa_r+0x9f0>
 8021b3a:	f000 faf5 	bl	8022128 <__multadd>
 8021b3e:	4639      	mov	r1, r7
 8021b40:	4680      	mov	r8, r0
 8021b42:	2300      	movs	r3, #0
 8021b44:	220a      	movs	r2, #10
 8021b46:	4620      	mov	r0, r4
 8021b48:	f000 faee 	bl	8022128 <__multadd>
 8021b4c:	4607      	mov	r7, r0
 8021b4e:	e7f1      	b.n	8021b34 <_dtoa_r+0xb04>
 8021b50:	9b03      	ldr	r3, [sp, #12]
 8021b52:	9302      	str	r3, [sp, #8]
 8021b54:	9d01      	ldr	r5, [sp, #4]
 8021b56:	ee18 0a10 	vmov	r0, s16
 8021b5a:	4631      	mov	r1, r6
 8021b5c:	f7ff f9dc 	bl	8020f18 <quorem>
 8021b60:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8021b64:	9b01      	ldr	r3, [sp, #4]
 8021b66:	f805 ab01 	strb.w	sl, [r5], #1
 8021b6a:	1aea      	subs	r2, r5, r3
 8021b6c:	9b02      	ldr	r3, [sp, #8]
 8021b6e:	4293      	cmp	r3, r2
 8021b70:	dd09      	ble.n	8021b86 <_dtoa_r+0xb56>
 8021b72:	ee18 1a10 	vmov	r1, s16
 8021b76:	2300      	movs	r3, #0
 8021b78:	220a      	movs	r2, #10
 8021b7a:	4620      	mov	r0, r4
 8021b7c:	f000 fad4 	bl	8022128 <__multadd>
 8021b80:	ee08 0a10 	vmov	s16, r0
 8021b84:	e7e7      	b.n	8021b56 <_dtoa_r+0xb26>
 8021b86:	9b02      	ldr	r3, [sp, #8]
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	bfc8      	it	gt
 8021b8c:	461d      	movgt	r5, r3
 8021b8e:	9b01      	ldr	r3, [sp, #4]
 8021b90:	bfd8      	it	le
 8021b92:	2501      	movle	r5, #1
 8021b94:	441d      	add	r5, r3
 8021b96:	f04f 0800 	mov.w	r8, #0
 8021b9a:	ee18 1a10 	vmov	r1, s16
 8021b9e:	2201      	movs	r2, #1
 8021ba0:	4620      	mov	r0, r4
 8021ba2:	f000 fc71 	bl	8022488 <__lshift>
 8021ba6:	4631      	mov	r1, r6
 8021ba8:	ee08 0a10 	vmov	s16, r0
 8021bac:	f000 fcdc 	bl	8022568 <__mcmp>
 8021bb0:	2800      	cmp	r0, #0
 8021bb2:	dc91      	bgt.n	8021ad8 <_dtoa_r+0xaa8>
 8021bb4:	d102      	bne.n	8021bbc <_dtoa_r+0xb8c>
 8021bb6:	f01a 0f01 	tst.w	sl, #1
 8021bba:	d18d      	bne.n	8021ad8 <_dtoa_r+0xaa8>
 8021bbc:	462b      	mov	r3, r5
 8021bbe:	461d      	mov	r5, r3
 8021bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021bc4:	2a30      	cmp	r2, #48	; 0x30
 8021bc6:	d0fa      	beq.n	8021bbe <_dtoa_r+0xb8e>
 8021bc8:	e6d7      	b.n	802197a <_dtoa_r+0x94a>
 8021bca:	9a01      	ldr	r2, [sp, #4]
 8021bcc:	429a      	cmp	r2, r3
 8021bce:	d184      	bne.n	8021ada <_dtoa_r+0xaaa>
 8021bd0:	9b00      	ldr	r3, [sp, #0]
 8021bd2:	3301      	adds	r3, #1
 8021bd4:	9300      	str	r3, [sp, #0]
 8021bd6:	2331      	movs	r3, #49	; 0x31
 8021bd8:	7013      	strb	r3, [r2, #0]
 8021bda:	e6ce      	b.n	802197a <_dtoa_r+0x94a>
 8021bdc:	4b09      	ldr	r3, [pc, #36]	; (8021c04 <_dtoa_r+0xbd4>)
 8021bde:	f7ff ba95 	b.w	802110c <_dtoa_r+0xdc>
 8021be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	f47f aa6e 	bne.w	80210c6 <_dtoa_r+0x96>
 8021bea:	4b07      	ldr	r3, [pc, #28]	; (8021c08 <_dtoa_r+0xbd8>)
 8021bec:	f7ff ba8e 	b.w	802110c <_dtoa_r+0xdc>
 8021bf0:	9b02      	ldr	r3, [sp, #8]
 8021bf2:	2b00      	cmp	r3, #0
 8021bf4:	dcae      	bgt.n	8021b54 <_dtoa_r+0xb24>
 8021bf6:	9b06      	ldr	r3, [sp, #24]
 8021bf8:	2b02      	cmp	r3, #2
 8021bfa:	f73f aea8 	bgt.w	802194e <_dtoa_r+0x91e>
 8021bfe:	e7a9      	b.n	8021b54 <_dtoa_r+0xb24>
 8021c00:	0802385f 	.word	0x0802385f
 8021c04:	080237bc 	.word	0x080237bc
 8021c08:	080237e0 	.word	0x080237e0

08021c0c <__sflush_r>:
 8021c0c:	898a      	ldrh	r2, [r1, #12]
 8021c0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021c12:	4605      	mov	r5, r0
 8021c14:	0710      	lsls	r0, r2, #28
 8021c16:	460c      	mov	r4, r1
 8021c18:	d458      	bmi.n	8021ccc <__sflush_r+0xc0>
 8021c1a:	684b      	ldr	r3, [r1, #4]
 8021c1c:	2b00      	cmp	r3, #0
 8021c1e:	dc05      	bgt.n	8021c2c <__sflush_r+0x20>
 8021c20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021c22:	2b00      	cmp	r3, #0
 8021c24:	dc02      	bgt.n	8021c2c <__sflush_r+0x20>
 8021c26:	2000      	movs	r0, #0
 8021c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021c2e:	2e00      	cmp	r6, #0
 8021c30:	d0f9      	beq.n	8021c26 <__sflush_r+0x1a>
 8021c32:	2300      	movs	r3, #0
 8021c34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021c38:	682f      	ldr	r7, [r5, #0]
 8021c3a:	602b      	str	r3, [r5, #0]
 8021c3c:	d032      	beq.n	8021ca4 <__sflush_r+0x98>
 8021c3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021c40:	89a3      	ldrh	r3, [r4, #12]
 8021c42:	075a      	lsls	r2, r3, #29
 8021c44:	d505      	bpl.n	8021c52 <__sflush_r+0x46>
 8021c46:	6863      	ldr	r3, [r4, #4]
 8021c48:	1ac0      	subs	r0, r0, r3
 8021c4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021c4c:	b10b      	cbz	r3, 8021c52 <__sflush_r+0x46>
 8021c4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021c50:	1ac0      	subs	r0, r0, r3
 8021c52:	2300      	movs	r3, #0
 8021c54:	4602      	mov	r2, r0
 8021c56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021c58:	6a21      	ldr	r1, [r4, #32]
 8021c5a:	4628      	mov	r0, r5
 8021c5c:	47b0      	blx	r6
 8021c5e:	1c43      	adds	r3, r0, #1
 8021c60:	89a3      	ldrh	r3, [r4, #12]
 8021c62:	d106      	bne.n	8021c72 <__sflush_r+0x66>
 8021c64:	6829      	ldr	r1, [r5, #0]
 8021c66:	291d      	cmp	r1, #29
 8021c68:	d82c      	bhi.n	8021cc4 <__sflush_r+0xb8>
 8021c6a:	4a2a      	ldr	r2, [pc, #168]	; (8021d14 <__sflush_r+0x108>)
 8021c6c:	40ca      	lsrs	r2, r1
 8021c6e:	07d6      	lsls	r6, r2, #31
 8021c70:	d528      	bpl.n	8021cc4 <__sflush_r+0xb8>
 8021c72:	2200      	movs	r2, #0
 8021c74:	6062      	str	r2, [r4, #4]
 8021c76:	04d9      	lsls	r1, r3, #19
 8021c78:	6922      	ldr	r2, [r4, #16]
 8021c7a:	6022      	str	r2, [r4, #0]
 8021c7c:	d504      	bpl.n	8021c88 <__sflush_r+0x7c>
 8021c7e:	1c42      	adds	r2, r0, #1
 8021c80:	d101      	bne.n	8021c86 <__sflush_r+0x7a>
 8021c82:	682b      	ldr	r3, [r5, #0]
 8021c84:	b903      	cbnz	r3, 8021c88 <__sflush_r+0x7c>
 8021c86:	6560      	str	r0, [r4, #84]	; 0x54
 8021c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021c8a:	602f      	str	r7, [r5, #0]
 8021c8c:	2900      	cmp	r1, #0
 8021c8e:	d0ca      	beq.n	8021c26 <__sflush_r+0x1a>
 8021c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021c94:	4299      	cmp	r1, r3
 8021c96:	d002      	beq.n	8021c9e <__sflush_r+0x92>
 8021c98:	4628      	mov	r0, r5
 8021c9a:	f000 fd7d 	bl	8022798 <_free_r>
 8021c9e:	2000      	movs	r0, #0
 8021ca0:	6360      	str	r0, [r4, #52]	; 0x34
 8021ca2:	e7c1      	b.n	8021c28 <__sflush_r+0x1c>
 8021ca4:	6a21      	ldr	r1, [r4, #32]
 8021ca6:	2301      	movs	r3, #1
 8021ca8:	4628      	mov	r0, r5
 8021caa:	47b0      	blx	r6
 8021cac:	1c41      	adds	r1, r0, #1
 8021cae:	d1c7      	bne.n	8021c40 <__sflush_r+0x34>
 8021cb0:	682b      	ldr	r3, [r5, #0]
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d0c4      	beq.n	8021c40 <__sflush_r+0x34>
 8021cb6:	2b1d      	cmp	r3, #29
 8021cb8:	d001      	beq.n	8021cbe <__sflush_r+0xb2>
 8021cba:	2b16      	cmp	r3, #22
 8021cbc:	d101      	bne.n	8021cc2 <__sflush_r+0xb6>
 8021cbe:	602f      	str	r7, [r5, #0]
 8021cc0:	e7b1      	b.n	8021c26 <__sflush_r+0x1a>
 8021cc2:	89a3      	ldrh	r3, [r4, #12]
 8021cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021cc8:	81a3      	strh	r3, [r4, #12]
 8021cca:	e7ad      	b.n	8021c28 <__sflush_r+0x1c>
 8021ccc:	690f      	ldr	r7, [r1, #16]
 8021cce:	2f00      	cmp	r7, #0
 8021cd0:	d0a9      	beq.n	8021c26 <__sflush_r+0x1a>
 8021cd2:	0793      	lsls	r3, r2, #30
 8021cd4:	680e      	ldr	r6, [r1, #0]
 8021cd6:	bf08      	it	eq
 8021cd8:	694b      	ldreq	r3, [r1, #20]
 8021cda:	600f      	str	r7, [r1, #0]
 8021cdc:	bf18      	it	ne
 8021cde:	2300      	movne	r3, #0
 8021ce0:	eba6 0807 	sub.w	r8, r6, r7
 8021ce4:	608b      	str	r3, [r1, #8]
 8021ce6:	f1b8 0f00 	cmp.w	r8, #0
 8021cea:	dd9c      	ble.n	8021c26 <__sflush_r+0x1a>
 8021cec:	6a21      	ldr	r1, [r4, #32]
 8021cee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021cf0:	4643      	mov	r3, r8
 8021cf2:	463a      	mov	r2, r7
 8021cf4:	4628      	mov	r0, r5
 8021cf6:	47b0      	blx	r6
 8021cf8:	2800      	cmp	r0, #0
 8021cfa:	dc06      	bgt.n	8021d0a <__sflush_r+0xfe>
 8021cfc:	89a3      	ldrh	r3, [r4, #12]
 8021cfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021d02:	81a3      	strh	r3, [r4, #12]
 8021d04:	f04f 30ff 	mov.w	r0, #4294967295
 8021d08:	e78e      	b.n	8021c28 <__sflush_r+0x1c>
 8021d0a:	4407      	add	r7, r0
 8021d0c:	eba8 0800 	sub.w	r8, r8, r0
 8021d10:	e7e9      	b.n	8021ce6 <__sflush_r+0xda>
 8021d12:	bf00      	nop
 8021d14:	20400001 	.word	0x20400001

08021d18 <_fflush_r>:
 8021d18:	b538      	push	{r3, r4, r5, lr}
 8021d1a:	690b      	ldr	r3, [r1, #16]
 8021d1c:	4605      	mov	r5, r0
 8021d1e:	460c      	mov	r4, r1
 8021d20:	b913      	cbnz	r3, 8021d28 <_fflush_r+0x10>
 8021d22:	2500      	movs	r5, #0
 8021d24:	4628      	mov	r0, r5
 8021d26:	bd38      	pop	{r3, r4, r5, pc}
 8021d28:	b118      	cbz	r0, 8021d32 <_fflush_r+0x1a>
 8021d2a:	6983      	ldr	r3, [r0, #24]
 8021d2c:	b90b      	cbnz	r3, 8021d32 <_fflush_r+0x1a>
 8021d2e:	f000 f887 	bl	8021e40 <__sinit>
 8021d32:	4b14      	ldr	r3, [pc, #80]	; (8021d84 <_fflush_r+0x6c>)
 8021d34:	429c      	cmp	r4, r3
 8021d36:	d11b      	bne.n	8021d70 <_fflush_r+0x58>
 8021d38:	686c      	ldr	r4, [r5, #4]
 8021d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	d0ef      	beq.n	8021d22 <_fflush_r+0xa>
 8021d42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021d44:	07d0      	lsls	r0, r2, #31
 8021d46:	d404      	bmi.n	8021d52 <_fflush_r+0x3a>
 8021d48:	0599      	lsls	r1, r3, #22
 8021d4a:	d402      	bmi.n	8021d52 <_fflush_r+0x3a>
 8021d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d4e:	f000 f91a 	bl	8021f86 <__retarget_lock_acquire_recursive>
 8021d52:	4628      	mov	r0, r5
 8021d54:	4621      	mov	r1, r4
 8021d56:	f7ff ff59 	bl	8021c0c <__sflush_r>
 8021d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021d5c:	07da      	lsls	r2, r3, #31
 8021d5e:	4605      	mov	r5, r0
 8021d60:	d4e0      	bmi.n	8021d24 <_fflush_r+0xc>
 8021d62:	89a3      	ldrh	r3, [r4, #12]
 8021d64:	059b      	lsls	r3, r3, #22
 8021d66:	d4dd      	bmi.n	8021d24 <_fflush_r+0xc>
 8021d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021d6a:	f000 f90d 	bl	8021f88 <__retarget_lock_release_recursive>
 8021d6e:	e7d9      	b.n	8021d24 <_fflush_r+0xc>
 8021d70:	4b05      	ldr	r3, [pc, #20]	; (8021d88 <_fflush_r+0x70>)
 8021d72:	429c      	cmp	r4, r3
 8021d74:	d101      	bne.n	8021d7a <_fflush_r+0x62>
 8021d76:	68ac      	ldr	r4, [r5, #8]
 8021d78:	e7df      	b.n	8021d3a <_fflush_r+0x22>
 8021d7a:	4b04      	ldr	r3, [pc, #16]	; (8021d8c <_fflush_r+0x74>)
 8021d7c:	429c      	cmp	r4, r3
 8021d7e:	bf08      	it	eq
 8021d80:	68ec      	ldreq	r4, [r5, #12]
 8021d82:	e7da      	b.n	8021d3a <_fflush_r+0x22>
 8021d84:	08023890 	.word	0x08023890
 8021d88:	080238b0 	.word	0x080238b0
 8021d8c:	08023870 	.word	0x08023870

08021d90 <std>:
 8021d90:	2300      	movs	r3, #0
 8021d92:	b510      	push	{r4, lr}
 8021d94:	4604      	mov	r4, r0
 8021d96:	e9c0 3300 	strd	r3, r3, [r0]
 8021d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021d9e:	6083      	str	r3, [r0, #8]
 8021da0:	8181      	strh	r1, [r0, #12]
 8021da2:	6643      	str	r3, [r0, #100]	; 0x64
 8021da4:	81c2      	strh	r2, [r0, #14]
 8021da6:	6183      	str	r3, [r0, #24]
 8021da8:	4619      	mov	r1, r3
 8021daa:	2208      	movs	r2, #8
 8021dac:	305c      	adds	r0, #92	; 0x5c
 8021dae:	f7fe fadd 	bl	802036c <memset>
 8021db2:	4b05      	ldr	r3, [pc, #20]	; (8021dc8 <std+0x38>)
 8021db4:	6263      	str	r3, [r4, #36]	; 0x24
 8021db6:	4b05      	ldr	r3, [pc, #20]	; (8021dcc <std+0x3c>)
 8021db8:	62a3      	str	r3, [r4, #40]	; 0x28
 8021dba:	4b05      	ldr	r3, [pc, #20]	; (8021dd0 <std+0x40>)
 8021dbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021dbe:	4b05      	ldr	r3, [pc, #20]	; (8021dd4 <std+0x44>)
 8021dc0:	6224      	str	r4, [r4, #32]
 8021dc2:	6323      	str	r3, [r4, #48]	; 0x30
 8021dc4:	bd10      	pop	{r4, pc}
 8021dc6:	bf00      	nop
 8021dc8:	08022cbd 	.word	0x08022cbd
 8021dcc:	08022cdf 	.word	0x08022cdf
 8021dd0:	08022d17 	.word	0x08022d17
 8021dd4:	08022d3b 	.word	0x08022d3b

08021dd8 <_cleanup_r>:
 8021dd8:	4901      	ldr	r1, [pc, #4]	; (8021de0 <_cleanup_r+0x8>)
 8021dda:	f000 b8af 	b.w	8021f3c <_fwalk_reent>
 8021dde:	bf00      	nop
 8021de0:	08021d19 	.word	0x08021d19

08021de4 <__sfmoreglue>:
 8021de4:	b570      	push	{r4, r5, r6, lr}
 8021de6:	2268      	movs	r2, #104	; 0x68
 8021de8:	1e4d      	subs	r5, r1, #1
 8021dea:	4355      	muls	r5, r2
 8021dec:	460e      	mov	r6, r1
 8021dee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021df2:	f000 fd3d 	bl	8022870 <_malloc_r>
 8021df6:	4604      	mov	r4, r0
 8021df8:	b140      	cbz	r0, 8021e0c <__sfmoreglue+0x28>
 8021dfa:	2100      	movs	r1, #0
 8021dfc:	e9c0 1600 	strd	r1, r6, [r0]
 8021e00:	300c      	adds	r0, #12
 8021e02:	60a0      	str	r0, [r4, #8]
 8021e04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021e08:	f7fe fab0 	bl	802036c <memset>
 8021e0c:	4620      	mov	r0, r4
 8021e0e:	bd70      	pop	{r4, r5, r6, pc}

08021e10 <__sfp_lock_acquire>:
 8021e10:	4801      	ldr	r0, [pc, #4]	; (8021e18 <__sfp_lock_acquire+0x8>)
 8021e12:	f000 b8b8 	b.w	8021f86 <__retarget_lock_acquire_recursive>
 8021e16:	bf00      	nop
 8021e18:	2000f90d 	.word	0x2000f90d

08021e1c <__sfp_lock_release>:
 8021e1c:	4801      	ldr	r0, [pc, #4]	; (8021e24 <__sfp_lock_release+0x8>)
 8021e1e:	f000 b8b3 	b.w	8021f88 <__retarget_lock_release_recursive>
 8021e22:	bf00      	nop
 8021e24:	2000f90d 	.word	0x2000f90d

08021e28 <__sinit_lock_acquire>:
 8021e28:	4801      	ldr	r0, [pc, #4]	; (8021e30 <__sinit_lock_acquire+0x8>)
 8021e2a:	f000 b8ac 	b.w	8021f86 <__retarget_lock_acquire_recursive>
 8021e2e:	bf00      	nop
 8021e30:	2000f90e 	.word	0x2000f90e

08021e34 <__sinit_lock_release>:
 8021e34:	4801      	ldr	r0, [pc, #4]	; (8021e3c <__sinit_lock_release+0x8>)
 8021e36:	f000 b8a7 	b.w	8021f88 <__retarget_lock_release_recursive>
 8021e3a:	bf00      	nop
 8021e3c:	2000f90e 	.word	0x2000f90e

08021e40 <__sinit>:
 8021e40:	b510      	push	{r4, lr}
 8021e42:	4604      	mov	r4, r0
 8021e44:	f7ff fff0 	bl	8021e28 <__sinit_lock_acquire>
 8021e48:	69a3      	ldr	r3, [r4, #24]
 8021e4a:	b11b      	cbz	r3, 8021e54 <__sinit+0x14>
 8021e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e50:	f7ff bff0 	b.w	8021e34 <__sinit_lock_release>
 8021e54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021e58:	6523      	str	r3, [r4, #80]	; 0x50
 8021e5a:	4b13      	ldr	r3, [pc, #76]	; (8021ea8 <__sinit+0x68>)
 8021e5c:	4a13      	ldr	r2, [pc, #76]	; (8021eac <__sinit+0x6c>)
 8021e5e:	681b      	ldr	r3, [r3, #0]
 8021e60:	62a2      	str	r2, [r4, #40]	; 0x28
 8021e62:	42a3      	cmp	r3, r4
 8021e64:	bf04      	itt	eq
 8021e66:	2301      	moveq	r3, #1
 8021e68:	61a3      	streq	r3, [r4, #24]
 8021e6a:	4620      	mov	r0, r4
 8021e6c:	f000 f820 	bl	8021eb0 <__sfp>
 8021e70:	6060      	str	r0, [r4, #4]
 8021e72:	4620      	mov	r0, r4
 8021e74:	f000 f81c 	bl	8021eb0 <__sfp>
 8021e78:	60a0      	str	r0, [r4, #8]
 8021e7a:	4620      	mov	r0, r4
 8021e7c:	f000 f818 	bl	8021eb0 <__sfp>
 8021e80:	2200      	movs	r2, #0
 8021e82:	60e0      	str	r0, [r4, #12]
 8021e84:	2104      	movs	r1, #4
 8021e86:	6860      	ldr	r0, [r4, #4]
 8021e88:	f7ff ff82 	bl	8021d90 <std>
 8021e8c:	68a0      	ldr	r0, [r4, #8]
 8021e8e:	2201      	movs	r2, #1
 8021e90:	2109      	movs	r1, #9
 8021e92:	f7ff ff7d 	bl	8021d90 <std>
 8021e96:	68e0      	ldr	r0, [r4, #12]
 8021e98:	2202      	movs	r2, #2
 8021e9a:	2112      	movs	r1, #18
 8021e9c:	f7ff ff78 	bl	8021d90 <std>
 8021ea0:	2301      	movs	r3, #1
 8021ea2:	61a3      	str	r3, [r4, #24]
 8021ea4:	e7d2      	b.n	8021e4c <__sinit+0xc>
 8021ea6:	bf00      	nop
 8021ea8:	080237a8 	.word	0x080237a8
 8021eac:	08021dd9 	.word	0x08021dd9

08021eb0 <__sfp>:
 8021eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021eb2:	4607      	mov	r7, r0
 8021eb4:	f7ff ffac 	bl	8021e10 <__sfp_lock_acquire>
 8021eb8:	4b1e      	ldr	r3, [pc, #120]	; (8021f34 <__sfp+0x84>)
 8021eba:	681e      	ldr	r6, [r3, #0]
 8021ebc:	69b3      	ldr	r3, [r6, #24]
 8021ebe:	b913      	cbnz	r3, 8021ec6 <__sfp+0x16>
 8021ec0:	4630      	mov	r0, r6
 8021ec2:	f7ff ffbd 	bl	8021e40 <__sinit>
 8021ec6:	3648      	adds	r6, #72	; 0x48
 8021ec8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021ecc:	3b01      	subs	r3, #1
 8021ece:	d503      	bpl.n	8021ed8 <__sfp+0x28>
 8021ed0:	6833      	ldr	r3, [r6, #0]
 8021ed2:	b30b      	cbz	r3, 8021f18 <__sfp+0x68>
 8021ed4:	6836      	ldr	r6, [r6, #0]
 8021ed6:	e7f7      	b.n	8021ec8 <__sfp+0x18>
 8021ed8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021edc:	b9d5      	cbnz	r5, 8021f14 <__sfp+0x64>
 8021ede:	4b16      	ldr	r3, [pc, #88]	; (8021f38 <__sfp+0x88>)
 8021ee0:	60e3      	str	r3, [r4, #12]
 8021ee2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021ee6:	6665      	str	r5, [r4, #100]	; 0x64
 8021ee8:	f000 f84c 	bl	8021f84 <__retarget_lock_init_recursive>
 8021eec:	f7ff ff96 	bl	8021e1c <__sfp_lock_release>
 8021ef0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021ef4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021ef8:	6025      	str	r5, [r4, #0]
 8021efa:	61a5      	str	r5, [r4, #24]
 8021efc:	2208      	movs	r2, #8
 8021efe:	4629      	mov	r1, r5
 8021f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021f04:	f7fe fa32 	bl	802036c <memset>
 8021f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021f10:	4620      	mov	r0, r4
 8021f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021f14:	3468      	adds	r4, #104	; 0x68
 8021f16:	e7d9      	b.n	8021ecc <__sfp+0x1c>
 8021f18:	2104      	movs	r1, #4
 8021f1a:	4638      	mov	r0, r7
 8021f1c:	f7ff ff62 	bl	8021de4 <__sfmoreglue>
 8021f20:	4604      	mov	r4, r0
 8021f22:	6030      	str	r0, [r6, #0]
 8021f24:	2800      	cmp	r0, #0
 8021f26:	d1d5      	bne.n	8021ed4 <__sfp+0x24>
 8021f28:	f7ff ff78 	bl	8021e1c <__sfp_lock_release>
 8021f2c:	230c      	movs	r3, #12
 8021f2e:	603b      	str	r3, [r7, #0]
 8021f30:	e7ee      	b.n	8021f10 <__sfp+0x60>
 8021f32:	bf00      	nop
 8021f34:	080237a8 	.word	0x080237a8
 8021f38:	ffff0001 	.word	0xffff0001

08021f3c <_fwalk_reent>:
 8021f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f40:	4606      	mov	r6, r0
 8021f42:	4688      	mov	r8, r1
 8021f44:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021f48:	2700      	movs	r7, #0
 8021f4a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8021f52:	d505      	bpl.n	8021f60 <_fwalk_reent+0x24>
 8021f54:	6824      	ldr	r4, [r4, #0]
 8021f56:	2c00      	cmp	r4, #0
 8021f58:	d1f7      	bne.n	8021f4a <_fwalk_reent+0xe>
 8021f5a:	4638      	mov	r0, r7
 8021f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f60:	89ab      	ldrh	r3, [r5, #12]
 8021f62:	2b01      	cmp	r3, #1
 8021f64:	d907      	bls.n	8021f76 <_fwalk_reent+0x3a>
 8021f66:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f6a:	3301      	adds	r3, #1
 8021f6c:	d003      	beq.n	8021f76 <_fwalk_reent+0x3a>
 8021f6e:	4629      	mov	r1, r5
 8021f70:	4630      	mov	r0, r6
 8021f72:	47c0      	blx	r8
 8021f74:	4307      	orrs	r7, r0
 8021f76:	3568      	adds	r5, #104	; 0x68
 8021f78:	e7e9      	b.n	8021f4e <_fwalk_reent+0x12>
	...

08021f7c <_localeconv_r>:
 8021f7c:	4800      	ldr	r0, [pc, #0]	; (8021f80 <_localeconv_r+0x4>)
 8021f7e:	4770      	bx	lr
 8021f80:	20000180 	.word	0x20000180

08021f84 <__retarget_lock_init_recursive>:
 8021f84:	4770      	bx	lr

08021f86 <__retarget_lock_acquire_recursive>:
 8021f86:	4770      	bx	lr

08021f88 <__retarget_lock_release_recursive>:
 8021f88:	4770      	bx	lr

08021f8a <__swhatbuf_r>:
 8021f8a:	b570      	push	{r4, r5, r6, lr}
 8021f8c:	460e      	mov	r6, r1
 8021f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f92:	2900      	cmp	r1, #0
 8021f94:	b096      	sub	sp, #88	; 0x58
 8021f96:	4614      	mov	r4, r2
 8021f98:	461d      	mov	r5, r3
 8021f9a:	da08      	bge.n	8021fae <__swhatbuf_r+0x24>
 8021f9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021fa0:	2200      	movs	r2, #0
 8021fa2:	602a      	str	r2, [r5, #0]
 8021fa4:	061a      	lsls	r2, r3, #24
 8021fa6:	d410      	bmi.n	8021fca <__swhatbuf_r+0x40>
 8021fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021fac:	e00e      	b.n	8021fcc <__swhatbuf_r+0x42>
 8021fae:	466a      	mov	r2, sp
 8021fb0:	f000 ff1a 	bl	8022de8 <_fstat_r>
 8021fb4:	2800      	cmp	r0, #0
 8021fb6:	dbf1      	blt.n	8021f9c <__swhatbuf_r+0x12>
 8021fb8:	9a01      	ldr	r2, [sp, #4]
 8021fba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021fbe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021fc2:	425a      	negs	r2, r3
 8021fc4:	415a      	adcs	r2, r3
 8021fc6:	602a      	str	r2, [r5, #0]
 8021fc8:	e7ee      	b.n	8021fa8 <__swhatbuf_r+0x1e>
 8021fca:	2340      	movs	r3, #64	; 0x40
 8021fcc:	2000      	movs	r0, #0
 8021fce:	6023      	str	r3, [r4, #0]
 8021fd0:	b016      	add	sp, #88	; 0x58
 8021fd2:	bd70      	pop	{r4, r5, r6, pc}

08021fd4 <__smakebuf_r>:
 8021fd4:	898b      	ldrh	r3, [r1, #12]
 8021fd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021fd8:	079d      	lsls	r5, r3, #30
 8021fda:	4606      	mov	r6, r0
 8021fdc:	460c      	mov	r4, r1
 8021fde:	d507      	bpl.n	8021ff0 <__smakebuf_r+0x1c>
 8021fe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021fe4:	6023      	str	r3, [r4, #0]
 8021fe6:	6123      	str	r3, [r4, #16]
 8021fe8:	2301      	movs	r3, #1
 8021fea:	6163      	str	r3, [r4, #20]
 8021fec:	b002      	add	sp, #8
 8021fee:	bd70      	pop	{r4, r5, r6, pc}
 8021ff0:	ab01      	add	r3, sp, #4
 8021ff2:	466a      	mov	r2, sp
 8021ff4:	f7ff ffc9 	bl	8021f8a <__swhatbuf_r>
 8021ff8:	9900      	ldr	r1, [sp, #0]
 8021ffa:	4605      	mov	r5, r0
 8021ffc:	4630      	mov	r0, r6
 8021ffe:	f000 fc37 	bl	8022870 <_malloc_r>
 8022002:	b948      	cbnz	r0, 8022018 <__smakebuf_r+0x44>
 8022004:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022008:	059a      	lsls	r2, r3, #22
 802200a:	d4ef      	bmi.n	8021fec <__smakebuf_r+0x18>
 802200c:	f023 0303 	bic.w	r3, r3, #3
 8022010:	f043 0302 	orr.w	r3, r3, #2
 8022014:	81a3      	strh	r3, [r4, #12]
 8022016:	e7e3      	b.n	8021fe0 <__smakebuf_r+0xc>
 8022018:	4b0d      	ldr	r3, [pc, #52]	; (8022050 <__smakebuf_r+0x7c>)
 802201a:	62b3      	str	r3, [r6, #40]	; 0x28
 802201c:	89a3      	ldrh	r3, [r4, #12]
 802201e:	6020      	str	r0, [r4, #0]
 8022020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022024:	81a3      	strh	r3, [r4, #12]
 8022026:	9b00      	ldr	r3, [sp, #0]
 8022028:	6163      	str	r3, [r4, #20]
 802202a:	9b01      	ldr	r3, [sp, #4]
 802202c:	6120      	str	r0, [r4, #16]
 802202e:	b15b      	cbz	r3, 8022048 <__smakebuf_r+0x74>
 8022030:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022034:	4630      	mov	r0, r6
 8022036:	f000 fee9 	bl	8022e0c <_isatty_r>
 802203a:	b128      	cbz	r0, 8022048 <__smakebuf_r+0x74>
 802203c:	89a3      	ldrh	r3, [r4, #12]
 802203e:	f023 0303 	bic.w	r3, r3, #3
 8022042:	f043 0301 	orr.w	r3, r3, #1
 8022046:	81a3      	strh	r3, [r4, #12]
 8022048:	89a0      	ldrh	r0, [r4, #12]
 802204a:	4305      	orrs	r5, r0
 802204c:	81a5      	strh	r5, [r4, #12]
 802204e:	e7cd      	b.n	8021fec <__smakebuf_r+0x18>
 8022050:	08021dd9 	.word	0x08021dd9

08022054 <malloc>:
 8022054:	4b02      	ldr	r3, [pc, #8]	; (8022060 <malloc+0xc>)
 8022056:	4601      	mov	r1, r0
 8022058:	6818      	ldr	r0, [r3, #0]
 802205a:	f000 bc09 	b.w	8022870 <_malloc_r>
 802205e:	bf00      	nop
 8022060:	2000002c 	.word	0x2000002c

08022064 <_Balloc>:
 8022064:	b570      	push	{r4, r5, r6, lr}
 8022066:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022068:	4604      	mov	r4, r0
 802206a:	460d      	mov	r5, r1
 802206c:	b976      	cbnz	r6, 802208c <_Balloc+0x28>
 802206e:	2010      	movs	r0, #16
 8022070:	f7ff fff0 	bl	8022054 <malloc>
 8022074:	4602      	mov	r2, r0
 8022076:	6260      	str	r0, [r4, #36]	; 0x24
 8022078:	b920      	cbnz	r0, 8022084 <_Balloc+0x20>
 802207a:	4b18      	ldr	r3, [pc, #96]	; (80220dc <_Balloc+0x78>)
 802207c:	4818      	ldr	r0, [pc, #96]	; (80220e0 <_Balloc+0x7c>)
 802207e:	2166      	movs	r1, #102	; 0x66
 8022080:	f000 fe72 	bl	8022d68 <__assert_func>
 8022084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022088:	6006      	str	r6, [r0, #0]
 802208a:	60c6      	str	r6, [r0, #12]
 802208c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 802208e:	68f3      	ldr	r3, [r6, #12]
 8022090:	b183      	cbz	r3, 80220b4 <_Balloc+0x50>
 8022092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022094:	68db      	ldr	r3, [r3, #12]
 8022096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802209a:	b9b8      	cbnz	r0, 80220cc <_Balloc+0x68>
 802209c:	2101      	movs	r1, #1
 802209e:	fa01 f605 	lsl.w	r6, r1, r5
 80220a2:	1d72      	adds	r2, r6, #5
 80220a4:	0092      	lsls	r2, r2, #2
 80220a6:	4620      	mov	r0, r4
 80220a8:	f000 fb60 	bl	802276c <_calloc_r>
 80220ac:	b160      	cbz	r0, 80220c8 <_Balloc+0x64>
 80220ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80220b2:	e00e      	b.n	80220d2 <_Balloc+0x6e>
 80220b4:	2221      	movs	r2, #33	; 0x21
 80220b6:	2104      	movs	r1, #4
 80220b8:	4620      	mov	r0, r4
 80220ba:	f000 fb57 	bl	802276c <_calloc_r>
 80220be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80220c0:	60f0      	str	r0, [r6, #12]
 80220c2:	68db      	ldr	r3, [r3, #12]
 80220c4:	2b00      	cmp	r3, #0
 80220c6:	d1e4      	bne.n	8022092 <_Balloc+0x2e>
 80220c8:	2000      	movs	r0, #0
 80220ca:	bd70      	pop	{r4, r5, r6, pc}
 80220cc:	6802      	ldr	r2, [r0, #0]
 80220ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80220d2:	2300      	movs	r3, #0
 80220d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80220d8:	e7f7      	b.n	80220ca <_Balloc+0x66>
 80220da:	bf00      	nop
 80220dc:	080237ed 	.word	0x080237ed
 80220e0:	080238d0 	.word	0x080238d0

080220e4 <_Bfree>:
 80220e4:	b570      	push	{r4, r5, r6, lr}
 80220e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80220e8:	4605      	mov	r5, r0
 80220ea:	460c      	mov	r4, r1
 80220ec:	b976      	cbnz	r6, 802210c <_Bfree+0x28>
 80220ee:	2010      	movs	r0, #16
 80220f0:	f7ff ffb0 	bl	8022054 <malloc>
 80220f4:	4602      	mov	r2, r0
 80220f6:	6268      	str	r0, [r5, #36]	; 0x24
 80220f8:	b920      	cbnz	r0, 8022104 <_Bfree+0x20>
 80220fa:	4b09      	ldr	r3, [pc, #36]	; (8022120 <_Bfree+0x3c>)
 80220fc:	4809      	ldr	r0, [pc, #36]	; (8022124 <_Bfree+0x40>)
 80220fe:	218a      	movs	r1, #138	; 0x8a
 8022100:	f000 fe32 	bl	8022d68 <__assert_func>
 8022104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022108:	6006      	str	r6, [r0, #0]
 802210a:	60c6      	str	r6, [r0, #12]
 802210c:	b13c      	cbz	r4, 802211e <_Bfree+0x3a>
 802210e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8022110:	6862      	ldr	r2, [r4, #4]
 8022112:	68db      	ldr	r3, [r3, #12]
 8022114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022118:	6021      	str	r1, [r4, #0]
 802211a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802211e:	bd70      	pop	{r4, r5, r6, pc}
 8022120:	080237ed 	.word	0x080237ed
 8022124:	080238d0 	.word	0x080238d0

08022128 <__multadd>:
 8022128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802212c:	690d      	ldr	r5, [r1, #16]
 802212e:	4607      	mov	r7, r0
 8022130:	460c      	mov	r4, r1
 8022132:	461e      	mov	r6, r3
 8022134:	f101 0c14 	add.w	ip, r1, #20
 8022138:	2000      	movs	r0, #0
 802213a:	f8dc 3000 	ldr.w	r3, [ip]
 802213e:	b299      	uxth	r1, r3
 8022140:	fb02 6101 	mla	r1, r2, r1, r6
 8022144:	0c1e      	lsrs	r6, r3, #16
 8022146:	0c0b      	lsrs	r3, r1, #16
 8022148:	fb02 3306 	mla	r3, r2, r6, r3
 802214c:	b289      	uxth	r1, r1
 802214e:	3001      	adds	r0, #1
 8022150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022154:	4285      	cmp	r5, r0
 8022156:	f84c 1b04 	str.w	r1, [ip], #4
 802215a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802215e:	dcec      	bgt.n	802213a <__multadd+0x12>
 8022160:	b30e      	cbz	r6, 80221a6 <__multadd+0x7e>
 8022162:	68a3      	ldr	r3, [r4, #8]
 8022164:	42ab      	cmp	r3, r5
 8022166:	dc19      	bgt.n	802219c <__multadd+0x74>
 8022168:	6861      	ldr	r1, [r4, #4]
 802216a:	4638      	mov	r0, r7
 802216c:	3101      	adds	r1, #1
 802216e:	f7ff ff79 	bl	8022064 <_Balloc>
 8022172:	4680      	mov	r8, r0
 8022174:	b928      	cbnz	r0, 8022182 <__multadd+0x5a>
 8022176:	4602      	mov	r2, r0
 8022178:	4b0c      	ldr	r3, [pc, #48]	; (80221ac <__multadd+0x84>)
 802217a:	480d      	ldr	r0, [pc, #52]	; (80221b0 <__multadd+0x88>)
 802217c:	21b5      	movs	r1, #181	; 0xb5
 802217e:	f000 fdf3 	bl	8022d68 <__assert_func>
 8022182:	6922      	ldr	r2, [r4, #16]
 8022184:	3202      	adds	r2, #2
 8022186:	f104 010c 	add.w	r1, r4, #12
 802218a:	0092      	lsls	r2, r2, #2
 802218c:	300c      	adds	r0, #12
 802218e:	f7fe f8df 	bl	8020350 <memcpy>
 8022192:	4621      	mov	r1, r4
 8022194:	4638      	mov	r0, r7
 8022196:	f7ff ffa5 	bl	80220e4 <_Bfree>
 802219a:	4644      	mov	r4, r8
 802219c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80221a0:	3501      	adds	r5, #1
 80221a2:	615e      	str	r6, [r3, #20]
 80221a4:	6125      	str	r5, [r4, #16]
 80221a6:	4620      	mov	r0, r4
 80221a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221ac:	0802385f 	.word	0x0802385f
 80221b0:	080238d0 	.word	0x080238d0

080221b4 <__hi0bits>:
 80221b4:	0c03      	lsrs	r3, r0, #16
 80221b6:	041b      	lsls	r3, r3, #16
 80221b8:	b9d3      	cbnz	r3, 80221f0 <__hi0bits+0x3c>
 80221ba:	0400      	lsls	r0, r0, #16
 80221bc:	2310      	movs	r3, #16
 80221be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80221c2:	bf04      	itt	eq
 80221c4:	0200      	lsleq	r0, r0, #8
 80221c6:	3308      	addeq	r3, #8
 80221c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80221cc:	bf04      	itt	eq
 80221ce:	0100      	lsleq	r0, r0, #4
 80221d0:	3304      	addeq	r3, #4
 80221d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80221d6:	bf04      	itt	eq
 80221d8:	0080      	lsleq	r0, r0, #2
 80221da:	3302      	addeq	r3, #2
 80221dc:	2800      	cmp	r0, #0
 80221de:	db05      	blt.n	80221ec <__hi0bits+0x38>
 80221e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80221e4:	f103 0301 	add.w	r3, r3, #1
 80221e8:	bf08      	it	eq
 80221ea:	2320      	moveq	r3, #32
 80221ec:	4618      	mov	r0, r3
 80221ee:	4770      	bx	lr
 80221f0:	2300      	movs	r3, #0
 80221f2:	e7e4      	b.n	80221be <__hi0bits+0xa>

080221f4 <__lo0bits>:
 80221f4:	6803      	ldr	r3, [r0, #0]
 80221f6:	f013 0207 	ands.w	r2, r3, #7
 80221fa:	4601      	mov	r1, r0
 80221fc:	d00b      	beq.n	8022216 <__lo0bits+0x22>
 80221fe:	07da      	lsls	r2, r3, #31
 8022200:	d423      	bmi.n	802224a <__lo0bits+0x56>
 8022202:	0798      	lsls	r0, r3, #30
 8022204:	bf49      	itett	mi
 8022206:	085b      	lsrmi	r3, r3, #1
 8022208:	089b      	lsrpl	r3, r3, #2
 802220a:	2001      	movmi	r0, #1
 802220c:	600b      	strmi	r3, [r1, #0]
 802220e:	bf5c      	itt	pl
 8022210:	600b      	strpl	r3, [r1, #0]
 8022212:	2002      	movpl	r0, #2
 8022214:	4770      	bx	lr
 8022216:	b298      	uxth	r0, r3
 8022218:	b9a8      	cbnz	r0, 8022246 <__lo0bits+0x52>
 802221a:	0c1b      	lsrs	r3, r3, #16
 802221c:	2010      	movs	r0, #16
 802221e:	b2da      	uxtb	r2, r3
 8022220:	b90a      	cbnz	r2, 8022226 <__lo0bits+0x32>
 8022222:	3008      	adds	r0, #8
 8022224:	0a1b      	lsrs	r3, r3, #8
 8022226:	071a      	lsls	r2, r3, #28
 8022228:	bf04      	itt	eq
 802222a:	091b      	lsreq	r3, r3, #4
 802222c:	3004      	addeq	r0, #4
 802222e:	079a      	lsls	r2, r3, #30
 8022230:	bf04      	itt	eq
 8022232:	089b      	lsreq	r3, r3, #2
 8022234:	3002      	addeq	r0, #2
 8022236:	07da      	lsls	r2, r3, #31
 8022238:	d403      	bmi.n	8022242 <__lo0bits+0x4e>
 802223a:	085b      	lsrs	r3, r3, #1
 802223c:	f100 0001 	add.w	r0, r0, #1
 8022240:	d005      	beq.n	802224e <__lo0bits+0x5a>
 8022242:	600b      	str	r3, [r1, #0]
 8022244:	4770      	bx	lr
 8022246:	4610      	mov	r0, r2
 8022248:	e7e9      	b.n	802221e <__lo0bits+0x2a>
 802224a:	2000      	movs	r0, #0
 802224c:	4770      	bx	lr
 802224e:	2020      	movs	r0, #32
 8022250:	4770      	bx	lr
	...

08022254 <__i2b>:
 8022254:	b510      	push	{r4, lr}
 8022256:	460c      	mov	r4, r1
 8022258:	2101      	movs	r1, #1
 802225a:	f7ff ff03 	bl	8022064 <_Balloc>
 802225e:	4602      	mov	r2, r0
 8022260:	b928      	cbnz	r0, 802226e <__i2b+0x1a>
 8022262:	4b05      	ldr	r3, [pc, #20]	; (8022278 <__i2b+0x24>)
 8022264:	4805      	ldr	r0, [pc, #20]	; (802227c <__i2b+0x28>)
 8022266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 802226a:	f000 fd7d 	bl	8022d68 <__assert_func>
 802226e:	2301      	movs	r3, #1
 8022270:	6144      	str	r4, [r0, #20]
 8022272:	6103      	str	r3, [r0, #16]
 8022274:	bd10      	pop	{r4, pc}
 8022276:	bf00      	nop
 8022278:	0802385f 	.word	0x0802385f
 802227c:	080238d0 	.word	0x080238d0

08022280 <__multiply>:
 8022280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022284:	4691      	mov	r9, r2
 8022286:	690a      	ldr	r2, [r1, #16]
 8022288:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802228c:	429a      	cmp	r2, r3
 802228e:	bfb8      	it	lt
 8022290:	460b      	movlt	r3, r1
 8022292:	460c      	mov	r4, r1
 8022294:	bfbc      	itt	lt
 8022296:	464c      	movlt	r4, r9
 8022298:	4699      	movlt	r9, r3
 802229a:	6927      	ldr	r7, [r4, #16]
 802229c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80222a0:	68a3      	ldr	r3, [r4, #8]
 80222a2:	6861      	ldr	r1, [r4, #4]
 80222a4:	eb07 060a 	add.w	r6, r7, sl
 80222a8:	42b3      	cmp	r3, r6
 80222aa:	b085      	sub	sp, #20
 80222ac:	bfb8      	it	lt
 80222ae:	3101      	addlt	r1, #1
 80222b0:	f7ff fed8 	bl	8022064 <_Balloc>
 80222b4:	b930      	cbnz	r0, 80222c4 <__multiply+0x44>
 80222b6:	4602      	mov	r2, r0
 80222b8:	4b44      	ldr	r3, [pc, #272]	; (80223cc <__multiply+0x14c>)
 80222ba:	4845      	ldr	r0, [pc, #276]	; (80223d0 <__multiply+0x150>)
 80222bc:	f240 115d 	movw	r1, #349	; 0x15d
 80222c0:	f000 fd52 	bl	8022d68 <__assert_func>
 80222c4:	f100 0514 	add.w	r5, r0, #20
 80222c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80222cc:	462b      	mov	r3, r5
 80222ce:	2200      	movs	r2, #0
 80222d0:	4543      	cmp	r3, r8
 80222d2:	d321      	bcc.n	8022318 <__multiply+0x98>
 80222d4:	f104 0314 	add.w	r3, r4, #20
 80222d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80222dc:	f109 0314 	add.w	r3, r9, #20
 80222e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80222e4:	9202      	str	r2, [sp, #8]
 80222e6:	1b3a      	subs	r2, r7, r4
 80222e8:	3a15      	subs	r2, #21
 80222ea:	f022 0203 	bic.w	r2, r2, #3
 80222ee:	3204      	adds	r2, #4
 80222f0:	f104 0115 	add.w	r1, r4, #21
 80222f4:	428f      	cmp	r7, r1
 80222f6:	bf38      	it	cc
 80222f8:	2204      	movcc	r2, #4
 80222fa:	9201      	str	r2, [sp, #4]
 80222fc:	9a02      	ldr	r2, [sp, #8]
 80222fe:	9303      	str	r3, [sp, #12]
 8022300:	429a      	cmp	r2, r3
 8022302:	d80c      	bhi.n	802231e <__multiply+0x9e>
 8022304:	2e00      	cmp	r6, #0
 8022306:	dd03      	ble.n	8022310 <__multiply+0x90>
 8022308:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802230c:	2b00      	cmp	r3, #0
 802230e:	d05a      	beq.n	80223c6 <__multiply+0x146>
 8022310:	6106      	str	r6, [r0, #16]
 8022312:	b005      	add	sp, #20
 8022314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022318:	f843 2b04 	str.w	r2, [r3], #4
 802231c:	e7d8      	b.n	80222d0 <__multiply+0x50>
 802231e:	f8b3 a000 	ldrh.w	sl, [r3]
 8022322:	f1ba 0f00 	cmp.w	sl, #0
 8022326:	d024      	beq.n	8022372 <__multiply+0xf2>
 8022328:	f104 0e14 	add.w	lr, r4, #20
 802232c:	46a9      	mov	r9, r5
 802232e:	f04f 0c00 	mov.w	ip, #0
 8022332:	f85e 2b04 	ldr.w	r2, [lr], #4
 8022336:	f8d9 1000 	ldr.w	r1, [r9]
 802233a:	fa1f fb82 	uxth.w	fp, r2
 802233e:	b289      	uxth	r1, r1
 8022340:	fb0a 110b 	mla	r1, sl, fp, r1
 8022344:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022348:	f8d9 2000 	ldr.w	r2, [r9]
 802234c:	4461      	add	r1, ip
 802234e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022352:	fb0a c20b 	mla	r2, sl, fp, ip
 8022356:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802235a:	b289      	uxth	r1, r1
 802235c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022360:	4577      	cmp	r7, lr
 8022362:	f849 1b04 	str.w	r1, [r9], #4
 8022366:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802236a:	d8e2      	bhi.n	8022332 <__multiply+0xb2>
 802236c:	9a01      	ldr	r2, [sp, #4]
 802236e:	f845 c002 	str.w	ip, [r5, r2]
 8022372:	9a03      	ldr	r2, [sp, #12]
 8022374:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022378:	3304      	adds	r3, #4
 802237a:	f1b9 0f00 	cmp.w	r9, #0
 802237e:	d020      	beq.n	80223c2 <__multiply+0x142>
 8022380:	6829      	ldr	r1, [r5, #0]
 8022382:	f104 0c14 	add.w	ip, r4, #20
 8022386:	46ae      	mov	lr, r5
 8022388:	f04f 0a00 	mov.w	sl, #0
 802238c:	f8bc b000 	ldrh.w	fp, [ip]
 8022390:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022394:	fb09 220b 	mla	r2, r9, fp, r2
 8022398:	4492      	add	sl, r2
 802239a:	b289      	uxth	r1, r1
 802239c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80223a0:	f84e 1b04 	str.w	r1, [lr], #4
 80223a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80223a8:	f8be 1000 	ldrh.w	r1, [lr]
 80223ac:	0c12      	lsrs	r2, r2, #16
 80223ae:	fb09 1102 	mla	r1, r9, r2, r1
 80223b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80223b6:	4567      	cmp	r7, ip
 80223b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80223bc:	d8e6      	bhi.n	802238c <__multiply+0x10c>
 80223be:	9a01      	ldr	r2, [sp, #4]
 80223c0:	50a9      	str	r1, [r5, r2]
 80223c2:	3504      	adds	r5, #4
 80223c4:	e79a      	b.n	80222fc <__multiply+0x7c>
 80223c6:	3e01      	subs	r6, #1
 80223c8:	e79c      	b.n	8022304 <__multiply+0x84>
 80223ca:	bf00      	nop
 80223cc:	0802385f 	.word	0x0802385f
 80223d0:	080238d0 	.word	0x080238d0

080223d4 <__pow5mult>:
 80223d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80223d8:	4615      	mov	r5, r2
 80223da:	f012 0203 	ands.w	r2, r2, #3
 80223de:	4606      	mov	r6, r0
 80223e0:	460f      	mov	r7, r1
 80223e2:	d007      	beq.n	80223f4 <__pow5mult+0x20>
 80223e4:	4c25      	ldr	r4, [pc, #148]	; (802247c <__pow5mult+0xa8>)
 80223e6:	3a01      	subs	r2, #1
 80223e8:	2300      	movs	r3, #0
 80223ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80223ee:	f7ff fe9b 	bl	8022128 <__multadd>
 80223f2:	4607      	mov	r7, r0
 80223f4:	10ad      	asrs	r5, r5, #2
 80223f6:	d03d      	beq.n	8022474 <__pow5mult+0xa0>
 80223f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80223fa:	b97c      	cbnz	r4, 802241c <__pow5mult+0x48>
 80223fc:	2010      	movs	r0, #16
 80223fe:	f7ff fe29 	bl	8022054 <malloc>
 8022402:	4602      	mov	r2, r0
 8022404:	6270      	str	r0, [r6, #36]	; 0x24
 8022406:	b928      	cbnz	r0, 8022414 <__pow5mult+0x40>
 8022408:	4b1d      	ldr	r3, [pc, #116]	; (8022480 <__pow5mult+0xac>)
 802240a:	481e      	ldr	r0, [pc, #120]	; (8022484 <__pow5mult+0xb0>)
 802240c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022410:	f000 fcaa 	bl	8022d68 <__assert_func>
 8022414:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022418:	6004      	str	r4, [r0, #0]
 802241a:	60c4      	str	r4, [r0, #12]
 802241c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022420:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022424:	b94c      	cbnz	r4, 802243a <__pow5mult+0x66>
 8022426:	f240 2171 	movw	r1, #625	; 0x271
 802242a:	4630      	mov	r0, r6
 802242c:	f7ff ff12 	bl	8022254 <__i2b>
 8022430:	2300      	movs	r3, #0
 8022432:	f8c8 0008 	str.w	r0, [r8, #8]
 8022436:	4604      	mov	r4, r0
 8022438:	6003      	str	r3, [r0, #0]
 802243a:	f04f 0900 	mov.w	r9, #0
 802243e:	07eb      	lsls	r3, r5, #31
 8022440:	d50a      	bpl.n	8022458 <__pow5mult+0x84>
 8022442:	4639      	mov	r1, r7
 8022444:	4622      	mov	r2, r4
 8022446:	4630      	mov	r0, r6
 8022448:	f7ff ff1a 	bl	8022280 <__multiply>
 802244c:	4639      	mov	r1, r7
 802244e:	4680      	mov	r8, r0
 8022450:	4630      	mov	r0, r6
 8022452:	f7ff fe47 	bl	80220e4 <_Bfree>
 8022456:	4647      	mov	r7, r8
 8022458:	106d      	asrs	r5, r5, #1
 802245a:	d00b      	beq.n	8022474 <__pow5mult+0xa0>
 802245c:	6820      	ldr	r0, [r4, #0]
 802245e:	b938      	cbnz	r0, 8022470 <__pow5mult+0x9c>
 8022460:	4622      	mov	r2, r4
 8022462:	4621      	mov	r1, r4
 8022464:	4630      	mov	r0, r6
 8022466:	f7ff ff0b 	bl	8022280 <__multiply>
 802246a:	6020      	str	r0, [r4, #0]
 802246c:	f8c0 9000 	str.w	r9, [r0]
 8022470:	4604      	mov	r4, r0
 8022472:	e7e4      	b.n	802243e <__pow5mult+0x6a>
 8022474:	4638      	mov	r0, r7
 8022476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802247a:	bf00      	nop
 802247c:	08023a20 	.word	0x08023a20
 8022480:	080237ed 	.word	0x080237ed
 8022484:	080238d0 	.word	0x080238d0

08022488 <__lshift>:
 8022488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802248c:	460c      	mov	r4, r1
 802248e:	6849      	ldr	r1, [r1, #4]
 8022490:	6923      	ldr	r3, [r4, #16]
 8022492:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022496:	68a3      	ldr	r3, [r4, #8]
 8022498:	4607      	mov	r7, r0
 802249a:	4691      	mov	r9, r2
 802249c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80224a0:	f108 0601 	add.w	r6, r8, #1
 80224a4:	42b3      	cmp	r3, r6
 80224a6:	db0b      	blt.n	80224c0 <__lshift+0x38>
 80224a8:	4638      	mov	r0, r7
 80224aa:	f7ff fddb 	bl	8022064 <_Balloc>
 80224ae:	4605      	mov	r5, r0
 80224b0:	b948      	cbnz	r0, 80224c6 <__lshift+0x3e>
 80224b2:	4602      	mov	r2, r0
 80224b4:	4b2a      	ldr	r3, [pc, #168]	; (8022560 <__lshift+0xd8>)
 80224b6:	482b      	ldr	r0, [pc, #172]	; (8022564 <__lshift+0xdc>)
 80224b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80224bc:	f000 fc54 	bl	8022d68 <__assert_func>
 80224c0:	3101      	adds	r1, #1
 80224c2:	005b      	lsls	r3, r3, #1
 80224c4:	e7ee      	b.n	80224a4 <__lshift+0x1c>
 80224c6:	2300      	movs	r3, #0
 80224c8:	f100 0114 	add.w	r1, r0, #20
 80224cc:	f100 0210 	add.w	r2, r0, #16
 80224d0:	4618      	mov	r0, r3
 80224d2:	4553      	cmp	r3, sl
 80224d4:	db37      	blt.n	8022546 <__lshift+0xbe>
 80224d6:	6920      	ldr	r0, [r4, #16]
 80224d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80224dc:	f104 0314 	add.w	r3, r4, #20
 80224e0:	f019 091f 	ands.w	r9, r9, #31
 80224e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80224e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80224ec:	d02f      	beq.n	802254e <__lshift+0xc6>
 80224ee:	f1c9 0e20 	rsb	lr, r9, #32
 80224f2:	468a      	mov	sl, r1
 80224f4:	f04f 0c00 	mov.w	ip, #0
 80224f8:	681a      	ldr	r2, [r3, #0]
 80224fa:	fa02 f209 	lsl.w	r2, r2, r9
 80224fe:	ea42 020c 	orr.w	r2, r2, ip
 8022502:	f84a 2b04 	str.w	r2, [sl], #4
 8022506:	f853 2b04 	ldr.w	r2, [r3], #4
 802250a:	4298      	cmp	r0, r3
 802250c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022510:	d8f2      	bhi.n	80224f8 <__lshift+0x70>
 8022512:	1b03      	subs	r3, r0, r4
 8022514:	3b15      	subs	r3, #21
 8022516:	f023 0303 	bic.w	r3, r3, #3
 802251a:	3304      	adds	r3, #4
 802251c:	f104 0215 	add.w	r2, r4, #21
 8022520:	4290      	cmp	r0, r2
 8022522:	bf38      	it	cc
 8022524:	2304      	movcc	r3, #4
 8022526:	f841 c003 	str.w	ip, [r1, r3]
 802252a:	f1bc 0f00 	cmp.w	ip, #0
 802252e:	d001      	beq.n	8022534 <__lshift+0xac>
 8022530:	f108 0602 	add.w	r6, r8, #2
 8022534:	3e01      	subs	r6, #1
 8022536:	4638      	mov	r0, r7
 8022538:	612e      	str	r6, [r5, #16]
 802253a:	4621      	mov	r1, r4
 802253c:	f7ff fdd2 	bl	80220e4 <_Bfree>
 8022540:	4628      	mov	r0, r5
 8022542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022546:	f842 0f04 	str.w	r0, [r2, #4]!
 802254a:	3301      	adds	r3, #1
 802254c:	e7c1      	b.n	80224d2 <__lshift+0x4a>
 802254e:	3904      	subs	r1, #4
 8022550:	f853 2b04 	ldr.w	r2, [r3], #4
 8022554:	f841 2f04 	str.w	r2, [r1, #4]!
 8022558:	4298      	cmp	r0, r3
 802255a:	d8f9      	bhi.n	8022550 <__lshift+0xc8>
 802255c:	e7ea      	b.n	8022534 <__lshift+0xac>
 802255e:	bf00      	nop
 8022560:	0802385f 	.word	0x0802385f
 8022564:	080238d0 	.word	0x080238d0

08022568 <__mcmp>:
 8022568:	b530      	push	{r4, r5, lr}
 802256a:	6902      	ldr	r2, [r0, #16]
 802256c:	690c      	ldr	r4, [r1, #16]
 802256e:	1b12      	subs	r2, r2, r4
 8022570:	d10e      	bne.n	8022590 <__mcmp+0x28>
 8022572:	f100 0314 	add.w	r3, r0, #20
 8022576:	3114      	adds	r1, #20
 8022578:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802257c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022580:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022584:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022588:	42a5      	cmp	r5, r4
 802258a:	d003      	beq.n	8022594 <__mcmp+0x2c>
 802258c:	d305      	bcc.n	802259a <__mcmp+0x32>
 802258e:	2201      	movs	r2, #1
 8022590:	4610      	mov	r0, r2
 8022592:	bd30      	pop	{r4, r5, pc}
 8022594:	4283      	cmp	r3, r0
 8022596:	d3f3      	bcc.n	8022580 <__mcmp+0x18>
 8022598:	e7fa      	b.n	8022590 <__mcmp+0x28>
 802259a:	f04f 32ff 	mov.w	r2, #4294967295
 802259e:	e7f7      	b.n	8022590 <__mcmp+0x28>

080225a0 <__mdiff>:
 80225a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225a4:	460c      	mov	r4, r1
 80225a6:	4606      	mov	r6, r0
 80225a8:	4611      	mov	r1, r2
 80225aa:	4620      	mov	r0, r4
 80225ac:	4690      	mov	r8, r2
 80225ae:	f7ff ffdb 	bl	8022568 <__mcmp>
 80225b2:	1e05      	subs	r5, r0, #0
 80225b4:	d110      	bne.n	80225d8 <__mdiff+0x38>
 80225b6:	4629      	mov	r1, r5
 80225b8:	4630      	mov	r0, r6
 80225ba:	f7ff fd53 	bl	8022064 <_Balloc>
 80225be:	b930      	cbnz	r0, 80225ce <__mdiff+0x2e>
 80225c0:	4b3a      	ldr	r3, [pc, #232]	; (80226ac <__mdiff+0x10c>)
 80225c2:	4602      	mov	r2, r0
 80225c4:	f240 2132 	movw	r1, #562	; 0x232
 80225c8:	4839      	ldr	r0, [pc, #228]	; (80226b0 <__mdiff+0x110>)
 80225ca:	f000 fbcd 	bl	8022d68 <__assert_func>
 80225ce:	2301      	movs	r3, #1
 80225d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80225d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80225d8:	bfa4      	itt	ge
 80225da:	4643      	movge	r3, r8
 80225dc:	46a0      	movge	r8, r4
 80225de:	4630      	mov	r0, r6
 80225e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80225e4:	bfa6      	itte	ge
 80225e6:	461c      	movge	r4, r3
 80225e8:	2500      	movge	r5, #0
 80225ea:	2501      	movlt	r5, #1
 80225ec:	f7ff fd3a 	bl	8022064 <_Balloc>
 80225f0:	b920      	cbnz	r0, 80225fc <__mdiff+0x5c>
 80225f2:	4b2e      	ldr	r3, [pc, #184]	; (80226ac <__mdiff+0x10c>)
 80225f4:	4602      	mov	r2, r0
 80225f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80225fa:	e7e5      	b.n	80225c8 <__mdiff+0x28>
 80225fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022600:	6926      	ldr	r6, [r4, #16]
 8022602:	60c5      	str	r5, [r0, #12]
 8022604:	f104 0914 	add.w	r9, r4, #20
 8022608:	f108 0514 	add.w	r5, r8, #20
 802260c:	f100 0e14 	add.w	lr, r0, #20
 8022610:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022614:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022618:	f108 0210 	add.w	r2, r8, #16
 802261c:	46f2      	mov	sl, lr
 802261e:	2100      	movs	r1, #0
 8022620:	f859 3b04 	ldr.w	r3, [r9], #4
 8022624:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022628:	fa1f f883 	uxth.w	r8, r3
 802262c:	fa11 f18b 	uxtah	r1, r1, fp
 8022630:	0c1b      	lsrs	r3, r3, #16
 8022632:	eba1 0808 	sub.w	r8, r1, r8
 8022636:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802263a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802263e:	fa1f f888 	uxth.w	r8, r8
 8022642:	1419      	asrs	r1, r3, #16
 8022644:	454e      	cmp	r6, r9
 8022646:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802264a:	f84a 3b04 	str.w	r3, [sl], #4
 802264e:	d8e7      	bhi.n	8022620 <__mdiff+0x80>
 8022650:	1b33      	subs	r3, r6, r4
 8022652:	3b15      	subs	r3, #21
 8022654:	f023 0303 	bic.w	r3, r3, #3
 8022658:	3304      	adds	r3, #4
 802265a:	3415      	adds	r4, #21
 802265c:	42a6      	cmp	r6, r4
 802265e:	bf38      	it	cc
 8022660:	2304      	movcc	r3, #4
 8022662:	441d      	add	r5, r3
 8022664:	4473      	add	r3, lr
 8022666:	469e      	mov	lr, r3
 8022668:	462e      	mov	r6, r5
 802266a:	4566      	cmp	r6, ip
 802266c:	d30e      	bcc.n	802268c <__mdiff+0xec>
 802266e:	f10c 0203 	add.w	r2, ip, #3
 8022672:	1b52      	subs	r2, r2, r5
 8022674:	f022 0203 	bic.w	r2, r2, #3
 8022678:	3d03      	subs	r5, #3
 802267a:	45ac      	cmp	ip, r5
 802267c:	bf38      	it	cc
 802267e:	2200      	movcc	r2, #0
 8022680:	441a      	add	r2, r3
 8022682:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022686:	b17b      	cbz	r3, 80226a8 <__mdiff+0x108>
 8022688:	6107      	str	r7, [r0, #16]
 802268a:	e7a3      	b.n	80225d4 <__mdiff+0x34>
 802268c:	f856 8b04 	ldr.w	r8, [r6], #4
 8022690:	fa11 f288 	uxtah	r2, r1, r8
 8022694:	1414      	asrs	r4, r2, #16
 8022696:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802269a:	b292      	uxth	r2, r2
 802269c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80226a0:	f84e 2b04 	str.w	r2, [lr], #4
 80226a4:	1421      	asrs	r1, r4, #16
 80226a6:	e7e0      	b.n	802266a <__mdiff+0xca>
 80226a8:	3f01      	subs	r7, #1
 80226aa:	e7ea      	b.n	8022682 <__mdiff+0xe2>
 80226ac:	0802385f 	.word	0x0802385f
 80226b0:	080238d0 	.word	0x080238d0

080226b4 <__d2b>:
 80226b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80226b8:	4689      	mov	r9, r1
 80226ba:	2101      	movs	r1, #1
 80226bc:	ec57 6b10 	vmov	r6, r7, d0
 80226c0:	4690      	mov	r8, r2
 80226c2:	f7ff fccf 	bl	8022064 <_Balloc>
 80226c6:	4604      	mov	r4, r0
 80226c8:	b930      	cbnz	r0, 80226d8 <__d2b+0x24>
 80226ca:	4602      	mov	r2, r0
 80226cc:	4b25      	ldr	r3, [pc, #148]	; (8022764 <__d2b+0xb0>)
 80226ce:	4826      	ldr	r0, [pc, #152]	; (8022768 <__d2b+0xb4>)
 80226d0:	f240 310a 	movw	r1, #778	; 0x30a
 80226d4:	f000 fb48 	bl	8022d68 <__assert_func>
 80226d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80226dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80226e0:	bb35      	cbnz	r5, 8022730 <__d2b+0x7c>
 80226e2:	2e00      	cmp	r6, #0
 80226e4:	9301      	str	r3, [sp, #4]
 80226e6:	d028      	beq.n	802273a <__d2b+0x86>
 80226e8:	4668      	mov	r0, sp
 80226ea:	9600      	str	r6, [sp, #0]
 80226ec:	f7ff fd82 	bl	80221f4 <__lo0bits>
 80226f0:	9900      	ldr	r1, [sp, #0]
 80226f2:	b300      	cbz	r0, 8022736 <__d2b+0x82>
 80226f4:	9a01      	ldr	r2, [sp, #4]
 80226f6:	f1c0 0320 	rsb	r3, r0, #32
 80226fa:	fa02 f303 	lsl.w	r3, r2, r3
 80226fe:	430b      	orrs	r3, r1
 8022700:	40c2      	lsrs	r2, r0
 8022702:	6163      	str	r3, [r4, #20]
 8022704:	9201      	str	r2, [sp, #4]
 8022706:	9b01      	ldr	r3, [sp, #4]
 8022708:	61a3      	str	r3, [r4, #24]
 802270a:	2b00      	cmp	r3, #0
 802270c:	bf14      	ite	ne
 802270e:	2202      	movne	r2, #2
 8022710:	2201      	moveq	r2, #1
 8022712:	6122      	str	r2, [r4, #16]
 8022714:	b1d5      	cbz	r5, 802274c <__d2b+0x98>
 8022716:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802271a:	4405      	add	r5, r0
 802271c:	f8c9 5000 	str.w	r5, [r9]
 8022720:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022724:	f8c8 0000 	str.w	r0, [r8]
 8022728:	4620      	mov	r0, r4
 802272a:	b003      	add	sp, #12
 802272c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022730:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022734:	e7d5      	b.n	80226e2 <__d2b+0x2e>
 8022736:	6161      	str	r1, [r4, #20]
 8022738:	e7e5      	b.n	8022706 <__d2b+0x52>
 802273a:	a801      	add	r0, sp, #4
 802273c:	f7ff fd5a 	bl	80221f4 <__lo0bits>
 8022740:	9b01      	ldr	r3, [sp, #4]
 8022742:	6163      	str	r3, [r4, #20]
 8022744:	2201      	movs	r2, #1
 8022746:	6122      	str	r2, [r4, #16]
 8022748:	3020      	adds	r0, #32
 802274a:	e7e3      	b.n	8022714 <__d2b+0x60>
 802274c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022750:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022754:	f8c9 0000 	str.w	r0, [r9]
 8022758:	6918      	ldr	r0, [r3, #16]
 802275a:	f7ff fd2b 	bl	80221b4 <__hi0bits>
 802275e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8022762:	e7df      	b.n	8022724 <__d2b+0x70>
 8022764:	0802385f 	.word	0x0802385f
 8022768:	080238d0 	.word	0x080238d0

0802276c <_calloc_r>:
 802276c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802276e:	fba1 2402 	umull	r2, r4, r1, r2
 8022772:	b94c      	cbnz	r4, 8022788 <_calloc_r+0x1c>
 8022774:	4611      	mov	r1, r2
 8022776:	9201      	str	r2, [sp, #4]
 8022778:	f000 f87a 	bl	8022870 <_malloc_r>
 802277c:	9a01      	ldr	r2, [sp, #4]
 802277e:	4605      	mov	r5, r0
 8022780:	b930      	cbnz	r0, 8022790 <_calloc_r+0x24>
 8022782:	4628      	mov	r0, r5
 8022784:	b003      	add	sp, #12
 8022786:	bd30      	pop	{r4, r5, pc}
 8022788:	220c      	movs	r2, #12
 802278a:	6002      	str	r2, [r0, #0]
 802278c:	2500      	movs	r5, #0
 802278e:	e7f8      	b.n	8022782 <_calloc_r+0x16>
 8022790:	4621      	mov	r1, r4
 8022792:	f7fd fdeb 	bl	802036c <memset>
 8022796:	e7f4      	b.n	8022782 <_calloc_r+0x16>

08022798 <_free_r>:
 8022798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802279a:	2900      	cmp	r1, #0
 802279c:	d044      	beq.n	8022828 <_free_r+0x90>
 802279e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80227a2:	9001      	str	r0, [sp, #4]
 80227a4:	2b00      	cmp	r3, #0
 80227a6:	f1a1 0404 	sub.w	r4, r1, #4
 80227aa:	bfb8      	it	lt
 80227ac:	18e4      	addlt	r4, r4, r3
 80227ae:	f000 fb61 	bl	8022e74 <__malloc_lock>
 80227b2:	4a1e      	ldr	r2, [pc, #120]	; (802282c <_free_r+0x94>)
 80227b4:	9801      	ldr	r0, [sp, #4]
 80227b6:	6813      	ldr	r3, [r2, #0]
 80227b8:	b933      	cbnz	r3, 80227c8 <_free_r+0x30>
 80227ba:	6063      	str	r3, [r4, #4]
 80227bc:	6014      	str	r4, [r2, #0]
 80227be:	b003      	add	sp, #12
 80227c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80227c4:	f000 bb5c 	b.w	8022e80 <__malloc_unlock>
 80227c8:	42a3      	cmp	r3, r4
 80227ca:	d908      	bls.n	80227de <_free_r+0x46>
 80227cc:	6825      	ldr	r5, [r4, #0]
 80227ce:	1961      	adds	r1, r4, r5
 80227d0:	428b      	cmp	r3, r1
 80227d2:	bf01      	itttt	eq
 80227d4:	6819      	ldreq	r1, [r3, #0]
 80227d6:	685b      	ldreq	r3, [r3, #4]
 80227d8:	1949      	addeq	r1, r1, r5
 80227da:	6021      	streq	r1, [r4, #0]
 80227dc:	e7ed      	b.n	80227ba <_free_r+0x22>
 80227de:	461a      	mov	r2, r3
 80227e0:	685b      	ldr	r3, [r3, #4]
 80227e2:	b10b      	cbz	r3, 80227e8 <_free_r+0x50>
 80227e4:	42a3      	cmp	r3, r4
 80227e6:	d9fa      	bls.n	80227de <_free_r+0x46>
 80227e8:	6811      	ldr	r1, [r2, #0]
 80227ea:	1855      	adds	r5, r2, r1
 80227ec:	42a5      	cmp	r5, r4
 80227ee:	d10b      	bne.n	8022808 <_free_r+0x70>
 80227f0:	6824      	ldr	r4, [r4, #0]
 80227f2:	4421      	add	r1, r4
 80227f4:	1854      	adds	r4, r2, r1
 80227f6:	42a3      	cmp	r3, r4
 80227f8:	6011      	str	r1, [r2, #0]
 80227fa:	d1e0      	bne.n	80227be <_free_r+0x26>
 80227fc:	681c      	ldr	r4, [r3, #0]
 80227fe:	685b      	ldr	r3, [r3, #4]
 8022800:	6053      	str	r3, [r2, #4]
 8022802:	4421      	add	r1, r4
 8022804:	6011      	str	r1, [r2, #0]
 8022806:	e7da      	b.n	80227be <_free_r+0x26>
 8022808:	d902      	bls.n	8022810 <_free_r+0x78>
 802280a:	230c      	movs	r3, #12
 802280c:	6003      	str	r3, [r0, #0]
 802280e:	e7d6      	b.n	80227be <_free_r+0x26>
 8022810:	6825      	ldr	r5, [r4, #0]
 8022812:	1961      	adds	r1, r4, r5
 8022814:	428b      	cmp	r3, r1
 8022816:	bf04      	itt	eq
 8022818:	6819      	ldreq	r1, [r3, #0]
 802281a:	685b      	ldreq	r3, [r3, #4]
 802281c:	6063      	str	r3, [r4, #4]
 802281e:	bf04      	itt	eq
 8022820:	1949      	addeq	r1, r1, r5
 8022822:	6021      	streq	r1, [r4, #0]
 8022824:	6054      	str	r4, [r2, #4]
 8022826:	e7ca      	b.n	80227be <_free_r+0x26>
 8022828:	b003      	add	sp, #12
 802282a:	bd30      	pop	{r4, r5, pc}
 802282c:	2000f910 	.word	0x2000f910

08022830 <sbrk_aligned>:
 8022830:	b570      	push	{r4, r5, r6, lr}
 8022832:	4e0e      	ldr	r6, [pc, #56]	; (802286c <sbrk_aligned+0x3c>)
 8022834:	460c      	mov	r4, r1
 8022836:	6831      	ldr	r1, [r6, #0]
 8022838:	4605      	mov	r5, r0
 802283a:	b911      	cbnz	r1, 8022842 <sbrk_aligned+0x12>
 802283c:	f000 fa2e 	bl	8022c9c <_sbrk_r>
 8022840:	6030      	str	r0, [r6, #0]
 8022842:	4621      	mov	r1, r4
 8022844:	4628      	mov	r0, r5
 8022846:	f000 fa29 	bl	8022c9c <_sbrk_r>
 802284a:	1c43      	adds	r3, r0, #1
 802284c:	d00a      	beq.n	8022864 <sbrk_aligned+0x34>
 802284e:	1cc4      	adds	r4, r0, #3
 8022850:	f024 0403 	bic.w	r4, r4, #3
 8022854:	42a0      	cmp	r0, r4
 8022856:	d007      	beq.n	8022868 <sbrk_aligned+0x38>
 8022858:	1a21      	subs	r1, r4, r0
 802285a:	4628      	mov	r0, r5
 802285c:	f000 fa1e 	bl	8022c9c <_sbrk_r>
 8022860:	3001      	adds	r0, #1
 8022862:	d101      	bne.n	8022868 <sbrk_aligned+0x38>
 8022864:	f04f 34ff 	mov.w	r4, #4294967295
 8022868:	4620      	mov	r0, r4
 802286a:	bd70      	pop	{r4, r5, r6, pc}
 802286c:	2000f914 	.word	0x2000f914

08022870 <_malloc_r>:
 8022870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022874:	1ccd      	adds	r5, r1, #3
 8022876:	f025 0503 	bic.w	r5, r5, #3
 802287a:	3508      	adds	r5, #8
 802287c:	2d0c      	cmp	r5, #12
 802287e:	bf38      	it	cc
 8022880:	250c      	movcc	r5, #12
 8022882:	2d00      	cmp	r5, #0
 8022884:	4607      	mov	r7, r0
 8022886:	db01      	blt.n	802288c <_malloc_r+0x1c>
 8022888:	42a9      	cmp	r1, r5
 802288a:	d905      	bls.n	8022898 <_malloc_r+0x28>
 802288c:	230c      	movs	r3, #12
 802288e:	603b      	str	r3, [r7, #0]
 8022890:	2600      	movs	r6, #0
 8022892:	4630      	mov	r0, r6
 8022894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022898:	4e2e      	ldr	r6, [pc, #184]	; (8022954 <_malloc_r+0xe4>)
 802289a:	f000 faeb 	bl	8022e74 <__malloc_lock>
 802289e:	6833      	ldr	r3, [r6, #0]
 80228a0:	461c      	mov	r4, r3
 80228a2:	bb34      	cbnz	r4, 80228f2 <_malloc_r+0x82>
 80228a4:	4629      	mov	r1, r5
 80228a6:	4638      	mov	r0, r7
 80228a8:	f7ff ffc2 	bl	8022830 <sbrk_aligned>
 80228ac:	1c43      	adds	r3, r0, #1
 80228ae:	4604      	mov	r4, r0
 80228b0:	d14d      	bne.n	802294e <_malloc_r+0xde>
 80228b2:	6834      	ldr	r4, [r6, #0]
 80228b4:	4626      	mov	r6, r4
 80228b6:	2e00      	cmp	r6, #0
 80228b8:	d140      	bne.n	802293c <_malloc_r+0xcc>
 80228ba:	6823      	ldr	r3, [r4, #0]
 80228bc:	4631      	mov	r1, r6
 80228be:	4638      	mov	r0, r7
 80228c0:	eb04 0803 	add.w	r8, r4, r3
 80228c4:	f000 f9ea 	bl	8022c9c <_sbrk_r>
 80228c8:	4580      	cmp	r8, r0
 80228ca:	d13a      	bne.n	8022942 <_malloc_r+0xd2>
 80228cc:	6821      	ldr	r1, [r4, #0]
 80228ce:	3503      	adds	r5, #3
 80228d0:	1a6d      	subs	r5, r5, r1
 80228d2:	f025 0503 	bic.w	r5, r5, #3
 80228d6:	3508      	adds	r5, #8
 80228d8:	2d0c      	cmp	r5, #12
 80228da:	bf38      	it	cc
 80228dc:	250c      	movcc	r5, #12
 80228de:	4629      	mov	r1, r5
 80228e0:	4638      	mov	r0, r7
 80228e2:	f7ff ffa5 	bl	8022830 <sbrk_aligned>
 80228e6:	3001      	adds	r0, #1
 80228e8:	d02b      	beq.n	8022942 <_malloc_r+0xd2>
 80228ea:	6823      	ldr	r3, [r4, #0]
 80228ec:	442b      	add	r3, r5
 80228ee:	6023      	str	r3, [r4, #0]
 80228f0:	e00e      	b.n	8022910 <_malloc_r+0xa0>
 80228f2:	6822      	ldr	r2, [r4, #0]
 80228f4:	1b52      	subs	r2, r2, r5
 80228f6:	d41e      	bmi.n	8022936 <_malloc_r+0xc6>
 80228f8:	2a0b      	cmp	r2, #11
 80228fa:	d916      	bls.n	802292a <_malloc_r+0xba>
 80228fc:	1961      	adds	r1, r4, r5
 80228fe:	42a3      	cmp	r3, r4
 8022900:	6025      	str	r5, [r4, #0]
 8022902:	bf18      	it	ne
 8022904:	6059      	strne	r1, [r3, #4]
 8022906:	6863      	ldr	r3, [r4, #4]
 8022908:	bf08      	it	eq
 802290a:	6031      	streq	r1, [r6, #0]
 802290c:	5162      	str	r2, [r4, r5]
 802290e:	604b      	str	r3, [r1, #4]
 8022910:	4638      	mov	r0, r7
 8022912:	f104 060b 	add.w	r6, r4, #11
 8022916:	f000 fab3 	bl	8022e80 <__malloc_unlock>
 802291a:	f026 0607 	bic.w	r6, r6, #7
 802291e:	1d23      	adds	r3, r4, #4
 8022920:	1af2      	subs	r2, r6, r3
 8022922:	d0b6      	beq.n	8022892 <_malloc_r+0x22>
 8022924:	1b9b      	subs	r3, r3, r6
 8022926:	50a3      	str	r3, [r4, r2]
 8022928:	e7b3      	b.n	8022892 <_malloc_r+0x22>
 802292a:	6862      	ldr	r2, [r4, #4]
 802292c:	42a3      	cmp	r3, r4
 802292e:	bf0c      	ite	eq
 8022930:	6032      	streq	r2, [r6, #0]
 8022932:	605a      	strne	r2, [r3, #4]
 8022934:	e7ec      	b.n	8022910 <_malloc_r+0xa0>
 8022936:	4623      	mov	r3, r4
 8022938:	6864      	ldr	r4, [r4, #4]
 802293a:	e7b2      	b.n	80228a2 <_malloc_r+0x32>
 802293c:	4634      	mov	r4, r6
 802293e:	6876      	ldr	r6, [r6, #4]
 8022940:	e7b9      	b.n	80228b6 <_malloc_r+0x46>
 8022942:	230c      	movs	r3, #12
 8022944:	603b      	str	r3, [r7, #0]
 8022946:	4638      	mov	r0, r7
 8022948:	f000 fa9a 	bl	8022e80 <__malloc_unlock>
 802294c:	e7a1      	b.n	8022892 <_malloc_r+0x22>
 802294e:	6025      	str	r5, [r4, #0]
 8022950:	e7de      	b.n	8022910 <_malloc_r+0xa0>
 8022952:	bf00      	nop
 8022954:	2000f910 	.word	0x2000f910

08022958 <__sfputc_r>:
 8022958:	6893      	ldr	r3, [r2, #8]
 802295a:	3b01      	subs	r3, #1
 802295c:	2b00      	cmp	r3, #0
 802295e:	b410      	push	{r4}
 8022960:	6093      	str	r3, [r2, #8]
 8022962:	da08      	bge.n	8022976 <__sfputc_r+0x1e>
 8022964:	6994      	ldr	r4, [r2, #24]
 8022966:	42a3      	cmp	r3, r4
 8022968:	db01      	blt.n	802296e <__sfputc_r+0x16>
 802296a:	290a      	cmp	r1, #10
 802296c:	d103      	bne.n	8022976 <__sfputc_r+0x1e>
 802296e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022972:	f7fe ba11 	b.w	8020d98 <__swbuf_r>
 8022976:	6813      	ldr	r3, [r2, #0]
 8022978:	1c58      	adds	r0, r3, #1
 802297a:	6010      	str	r0, [r2, #0]
 802297c:	7019      	strb	r1, [r3, #0]
 802297e:	4608      	mov	r0, r1
 8022980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022984:	4770      	bx	lr

08022986 <__sfputs_r>:
 8022986:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022988:	4606      	mov	r6, r0
 802298a:	460f      	mov	r7, r1
 802298c:	4614      	mov	r4, r2
 802298e:	18d5      	adds	r5, r2, r3
 8022990:	42ac      	cmp	r4, r5
 8022992:	d101      	bne.n	8022998 <__sfputs_r+0x12>
 8022994:	2000      	movs	r0, #0
 8022996:	e007      	b.n	80229a8 <__sfputs_r+0x22>
 8022998:	f814 1b01 	ldrb.w	r1, [r4], #1
 802299c:	463a      	mov	r2, r7
 802299e:	4630      	mov	r0, r6
 80229a0:	f7ff ffda 	bl	8022958 <__sfputc_r>
 80229a4:	1c43      	adds	r3, r0, #1
 80229a6:	d1f3      	bne.n	8022990 <__sfputs_r+0xa>
 80229a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080229ac <_vfiprintf_r>:
 80229ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229b0:	460d      	mov	r5, r1
 80229b2:	b09d      	sub	sp, #116	; 0x74
 80229b4:	4614      	mov	r4, r2
 80229b6:	4698      	mov	r8, r3
 80229b8:	4606      	mov	r6, r0
 80229ba:	b118      	cbz	r0, 80229c4 <_vfiprintf_r+0x18>
 80229bc:	6983      	ldr	r3, [r0, #24]
 80229be:	b90b      	cbnz	r3, 80229c4 <_vfiprintf_r+0x18>
 80229c0:	f7ff fa3e 	bl	8021e40 <__sinit>
 80229c4:	4b89      	ldr	r3, [pc, #548]	; (8022bec <_vfiprintf_r+0x240>)
 80229c6:	429d      	cmp	r5, r3
 80229c8:	d11b      	bne.n	8022a02 <_vfiprintf_r+0x56>
 80229ca:	6875      	ldr	r5, [r6, #4]
 80229cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229ce:	07d9      	lsls	r1, r3, #31
 80229d0:	d405      	bmi.n	80229de <_vfiprintf_r+0x32>
 80229d2:	89ab      	ldrh	r3, [r5, #12]
 80229d4:	059a      	lsls	r2, r3, #22
 80229d6:	d402      	bmi.n	80229de <_vfiprintf_r+0x32>
 80229d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80229da:	f7ff fad4 	bl	8021f86 <__retarget_lock_acquire_recursive>
 80229de:	89ab      	ldrh	r3, [r5, #12]
 80229e0:	071b      	lsls	r3, r3, #28
 80229e2:	d501      	bpl.n	80229e8 <_vfiprintf_r+0x3c>
 80229e4:	692b      	ldr	r3, [r5, #16]
 80229e6:	b9eb      	cbnz	r3, 8022a24 <_vfiprintf_r+0x78>
 80229e8:	4629      	mov	r1, r5
 80229ea:	4630      	mov	r0, r6
 80229ec:	f7fe fa26 	bl	8020e3c <__swsetup_r>
 80229f0:	b1c0      	cbz	r0, 8022a24 <_vfiprintf_r+0x78>
 80229f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229f4:	07dc      	lsls	r4, r3, #31
 80229f6:	d50e      	bpl.n	8022a16 <_vfiprintf_r+0x6a>
 80229f8:	f04f 30ff 	mov.w	r0, #4294967295
 80229fc:	b01d      	add	sp, #116	; 0x74
 80229fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a02:	4b7b      	ldr	r3, [pc, #492]	; (8022bf0 <_vfiprintf_r+0x244>)
 8022a04:	429d      	cmp	r5, r3
 8022a06:	d101      	bne.n	8022a0c <_vfiprintf_r+0x60>
 8022a08:	68b5      	ldr	r5, [r6, #8]
 8022a0a:	e7df      	b.n	80229cc <_vfiprintf_r+0x20>
 8022a0c:	4b79      	ldr	r3, [pc, #484]	; (8022bf4 <_vfiprintf_r+0x248>)
 8022a0e:	429d      	cmp	r5, r3
 8022a10:	bf08      	it	eq
 8022a12:	68f5      	ldreq	r5, [r6, #12]
 8022a14:	e7da      	b.n	80229cc <_vfiprintf_r+0x20>
 8022a16:	89ab      	ldrh	r3, [r5, #12]
 8022a18:	0598      	lsls	r0, r3, #22
 8022a1a:	d4ed      	bmi.n	80229f8 <_vfiprintf_r+0x4c>
 8022a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022a1e:	f7ff fab3 	bl	8021f88 <__retarget_lock_release_recursive>
 8022a22:	e7e9      	b.n	80229f8 <_vfiprintf_r+0x4c>
 8022a24:	2300      	movs	r3, #0
 8022a26:	9309      	str	r3, [sp, #36]	; 0x24
 8022a28:	2320      	movs	r3, #32
 8022a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022a32:	2330      	movs	r3, #48	; 0x30
 8022a34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022bf8 <_vfiprintf_r+0x24c>
 8022a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022a3c:	f04f 0901 	mov.w	r9, #1
 8022a40:	4623      	mov	r3, r4
 8022a42:	469a      	mov	sl, r3
 8022a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a48:	b10a      	cbz	r2, 8022a4e <_vfiprintf_r+0xa2>
 8022a4a:	2a25      	cmp	r2, #37	; 0x25
 8022a4c:	d1f9      	bne.n	8022a42 <_vfiprintf_r+0x96>
 8022a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8022a52:	d00b      	beq.n	8022a6c <_vfiprintf_r+0xc0>
 8022a54:	465b      	mov	r3, fp
 8022a56:	4622      	mov	r2, r4
 8022a58:	4629      	mov	r1, r5
 8022a5a:	4630      	mov	r0, r6
 8022a5c:	f7ff ff93 	bl	8022986 <__sfputs_r>
 8022a60:	3001      	adds	r0, #1
 8022a62:	f000 80aa 	beq.w	8022bba <_vfiprintf_r+0x20e>
 8022a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022a68:	445a      	add	r2, fp
 8022a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8022a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	f000 80a2 	beq.w	8022bba <_vfiprintf_r+0x20e>
 8022a76:	2300      	movs	r3, #0
 8022a78:	f04f 32ff 	mov.w	r2, #4294967295
 8022a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a80:	f10a 0a01 	add.w	sl, sl, #1
 8022a84:	9304      	str	r3, [sp, #16]
 8022a86:	9307      	str	r3, [sp, #28]
 8022a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8022a8e:	4654      	mov	r4, sl
 8022a90:	2205      	movs	r2, #5
 8022a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a96:	4858      	ldr	r0, [pc, #352]	; (8022bf8 <_vfiprintf_r+0x24c>)
 8022a98:	f7dd fbca 	bl	8000230 <memchr>
 8022a9c:	9a04      	ldr	r2, [sp, #16]
 8022a9e:	b9d8      	cbnz	r0, 8022ad8 <_vfiprintf_r+0x12c>
 8022aa0:	06d1      	lsls	r1, r2, #27
 8022aa2:	bf44      	itt	mi
 8022aa4:	2320      	movmi	r3, #32
 8022aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022aaa:	0713      	lsls	r3, r2, #28
 8022aac:	bf44      	itt	mi
 8022aae:	232b      	movmi	r3, #43	; 0x2b
 8022ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8022ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8022aba:	d015      	beq.n	8022ae8 <_vfiprintf_r+0x13c>
 8022abc:	9a07      	ldr	r2, [sp, #28]
 8022abe:	4654      	mov	r4, sl
 8022ac0:	2000      	movs	r0, #0
 8022ac2:	f04f 0c0a 	mov.w	ip, #10
 8022ac6:	4621      	mov	r1, r4
 8022ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022acc:	3b30      	subs	r3, #48	; 0x30
 8022ace:	2b09      	cmp	r3, #9
 8022ad0:	d94e      	bls.n	8022b70 <_vfiprintf_r+0x1c4>
 8022ad2:	b1b0      	cbz	r0, 8022b02 <_vfiprintf_r+0x156>
 8022ad4:	9207      	str	r2, [sp, #28]
 8022ad6:	e014      	b.n	8022b02 <_vfiprintf_r+0x156>
 8022ad8:	eba0 0308 	sub.w	r3, r0, r8
 8022adc:	fa09 f303 	lsl.w	r3, r9, r3
 8022ae0:	4313      	orrs	r3, r2
 8022ae2:	9304      	str	r3, [sp, #16]
 8022ae4:	46a2      	mov	sl, r4
 8022ae6:	e7d2      	b.n	8022a8e <_vfiprintf_r+0xe2>
 8022ae8:	9b03      	ldr	r3, [sp, #12]
 8022aea:	1d19      	adds	r1, r3, #4
 8022aec:	681b      	ldr	r3, [r3, #0]
 8022aee:	9103      	str	r1, [sp, #12]
 8022af0:	2b00      	cmp	r3, #0
 8022af2:	bfbb      	ittet	lt
 8022af4:	425b      	neglt	r3, r3
 8022af6:	f042 0202 	orrlt.w	r2, r2, #2
 8022afa:	9307      	strge	r3, [sp, #28]
 8022afc:	9307      	strlt	r3, [sp, #28]
 8022afe:	bfb8      	it	lt
 8022b00:	9204      	strlt	r2, [sp, #16]
 8022b02:	7823      	ldrb	r3, [r4, #0]
 8022b04:	2b2e      	cmp	r3, #46	; 0x2e
 8022b06:	d10c      	bne.n	8022b22 <_vfiprintf_r+0x176>
 8022b08:	7863      	ldrb	r3, [r4, #1]
 8022b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8022b0c:	d135      	bne.n	8022b7a <_vfiprintf_r+0x1ce>
 8022b0e:	9b03      	ldr	r3, [sp, #12]
 8022b10:	1d1a      	adds	r2, r3, #4
 8022b12:	681b      	ldr	r3, [r3, #0]
 8022b14:	9203      	str	r2, [sp, #12]
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	bfb8      	it	lt
 8022b1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8022b1e:	3402      	adds	r4, #2
 8022b20:	9305      	str	r3, [sp, #20]
 8022b22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022c08 <_vfiprintf_r+0x25c>
 8022b26:	7821      	ldrb	r1, [r4, #0]
 8022b28:	2203      	movs	r2, #3
 8022b2a:	4650      	mov	r0, sl
 8022b2c:	f7dd fb80 	bl	8000230 <memchr>
 8022b30:	b140      	cbz	r0, 8022b44 <_vfiprintf_r+0x198>
 8022b32:	2340      	movs	r3, #64	; 0x40
 8022b34:	eba0 000a 	sub.w	r0, r0, sl
 8022b38:	fa03 f000 	lsl.w	r0, r3, r0
 8022b3c:	9b04      	ldr	r3, [sp, #16]
 8022b3e:	4303      	orrs	r3, r0
 8022b40:	3401      	adds	r4, #1
 8022b42:	9304      	str	r3, [sp, #16]
 8022b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b48:	482c      	ldr	r0, [pc, #176]	; (8022bfc <_vfiprintf_r+0x250>)
 8022b4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022b4e:	2206      	movs	r2, #6
 8022b50:	f7dd fb6e 	bl	8000230 <memchr>
 8022b54:	2800      	cmp	r0, #0
 8022b56:	d03f      	beq.n	8022bd8 <_vfiprintf_r+0x22c>
 8022b58:	4b29      	ldr	r3, [pc, #164]	; (8022c00 <_vfiprintf_r+0x254>)
 8022b5a:	bb1b      	cbnz	r3, 8022ba4 <_vfiprintf_r+0x1f8>
 8022b5c:	9b03      	ldr	r3, [sp, #12]
 8022b5e:	3307      	adds	r3, #7
 8022b60:	f023 0307 	bic.w	r3, r3, #7
 8022b64:	3308      	adds	r3, #8
 8022b66:	9303      	str	r3, [sp, #12]
 8022b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b6a:	443b      	add	r3, r7
 8022b6c:	9309      	str	r3, [sp, #36]	; 0x24
 8022b6e:	e767      	b.n	8022a40 <_vfiprintf_r+0x94>
 8022b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b74:	460c      	mov	r4, r1
 8022b76:	2001      	movs	r0, #1
 8022b78:	e7a5      	b.n	8022ac6 <_vfiprintf_r+0x11a>
 8022b7a:	2300      	movs	r3, #0
 8022b7c:	3401      	adds	r4, #1
 8022b7e:	9305      	str	r3, [sp, #20]
 8022b80:	4619      	mov	r1, r3
 8022b82:	f04f 0c0a 	mov.w	ip, #10
 8022b86:	4620      	mov	r0, r4
 8022b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b8c:	3a30      	subs	r2, #48	; 0x30
 8022b8e:	2a09      	cmp	r2, #9
 8022b90:	d903      	bls.n	8022b9a <_vfiprintf_r+0x1ee>
 8022b92:	2b00      	cmp	r3, #0
 8022b94:	d0c5      	beq.n	8022b22 <_vfiprintf_r+0x176>
 8022b96:	9105      	str	r1, [sp, #20]
 8022b98:	e7c3      	b.n	8022b22 <_vfiprintf_r+0x176>
 8022b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b9e:	4604      	mov	r4, r0
 8022ba0:	2301      	movs	r3, #1
 8022ba2:	e7f0      	b.n	8022b86 <_vfiprintf_r+0x1da>
 8022ba4:	ab03      	add	r3, sp, #12
 8022ba6:	9300      	str	r3, [sp, #0]
 8022ba8:	462a      	mov	r2, r5
 8022baa:	4b16      	ldr	r3, [pc, #88]	; (8022c04 <_vfiprintf_r+0x258>)
 8022bac:	a904      	add	r1, sp, #16
 8022bae:	4630      	mov	r0, r6
 8022bb0:	f7fd fc84 	bl	80204bc <_printf_float>
 8022bb4:	4607      	mov	r7, r0
 8022bb6:	1c78      	adds	r0, r7, #1
 8022bb8:	d1d6      	bne.n	8022b68 <_vfiprintf_r+0x1bc>
 8022bba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022bbc:	07d9      	lsls	r1, r3, #31
 8022bbe:	d405      	bmi.n	8022bcc <_vfiprintf_r+0x220>
 8022bc0:	89ab      	ldrh	r3, [r5, #12]
 8022bc2:	059a      	lsls	r2, r3, #22
 8022bc4:	d402      	bmi.n	8022bcc <_vfiprintf_r+0x220>
 8022bc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022bc8:	f7ff f9de 	bl	8021f88 <__retarget_lock_release_recursive>
 8022bcc:	89ab      	ldrh	r3, [r5, #12]
 8022bce:	065b      	lsls	r3, r3, #25
 8022bd0:	f53f af12 	bmi.w	80229f8 <_vfiprintf_r+0x4c>
 8022bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022bd6:	e711      	b.n	80229fc <_vfiprintf_r+0x50>
 8022bd8:	ab03      	add	r3, sp, #12
 8022bda:	9300      	str	r3, [sp, #0]
 8022bdc:	462a      	mov	r2, r5
 8022bde:	4b09      	ldr	r3, [pc, #36]	; (8022c04 <_vfiprintf_r+0x258>)
 8022be0:	a904      	add	r1, sp, #16
 8022be2:	4630      	mov	r0, r6
 8022be4:	f7fd ff0e 	bl	8020a04 <_printf_i>
 8022be8:	e7e4      	b.n	8022bb4 <_vfiprintf_r+0x208>
 8022bea:	bf00      	nop
 8022bec:	08023890 	.word	0x08023890
 8022bf0:	080238b0 	.word	0x080238b0
 8022bf4:	08023870 	.word	0x08023870
 8022bf8:	08023a2c 	.word	0x08023a2c
 8022bfc:	08023a36 	.word	0x08023a36
 8022c00:	080204bd 	.word	0x080204bd
 8022c04:	08022987 	.word	0x08022987
 8022c08:	08023a32 	.word	0x08023a32

08022c0c <_putc_r>:
 8022c0c:	b570      	push	{r4, r5, r6, lr}
 8022c0e:	460d      	mov	r5, r1
 8022c10:	4614      	mov	r4, r2
 8022c12:	4606      	mov	r6, r0
 8022c14:	b118      	cbz	r0, 8022c1e <_putc_r+0x12>
 8022c16:	6983      	ldr	r3, [r0, #24]
 8022c18:	b90b      	cbnz	r3, 8022c1e <_putc_r+0x12>
 8022c1a:	f7ff f911 	bl	8021e40 <__sinit>
 8022c1e:	4b1c      	ldr	r3, [pc, #112]	; (8022c90 <_putc_r+0x84>)
 8022c20:	429c      	cmp	r4, r3
 8022c22:	d124      	bne.n	8022c6e <_putc_r+0x62>
 8022c24:	6874      	ldr	r4, [r6, #4]
 8022c26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c28:	07d8      	lsls	r0, r3, #31
 8022c2a:	d405      	bmi.n	8022c38 <_putc_r+0x2c>
 8022c2c:	89a3      	ldrh	r3, [r4, #12]
 8022c2e:	0599      	lsls	r1, r3, #22
 8022c30:	d402      	bmi.n	8022c38 <_putc_r+0x2c>
 8022c32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c34:	f7ff f9a7 	bl	8021f86 <__retarget_lock_acquire_recursive>
 8022c38:	68a3      	ldr	r3, [r4, #8]
 8022c3a:	3b01      	subs	r3, #1
 8022c3c:	2b00      	cmp	r3, #0
 8022c3e:	60a3      	str	r3, [r4, #8]
 8022c40:	da05      	bge.n	8022c4e <_putc_r+0x42>
 8022c42:	69a2      	ldr	r2, [r4, #24]
 8022c44:	4293      	cmp	r3, r2
 8022c46:	db1c      	blt.n	8022c82 <_putc_r+0x76>
 8022c48:	b2eb      	uxtb	r3, r5
 8022c4a:	2b0a      	cmp	r3, #10
 8022c4c:	d019      	beq.n	8022c82 <_putc_r+0x76>
 8022c4e:	6823      	ldr	r3, [r4, #0]
 8022c50:	1c5a      	adds	r2, r3, #1
 8022c52:	6022      	str	r2, [r4, #0]
 8022c54:	701d      	strb	r5, [r3, #0]
 8022c56:	b2ed      	uxtb	r5, r5
 8022c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022c5a:	07da      	lsls	r2, r3, #31
 8022c5c:	d405      	bmi.n	8022c6a <_putc_r+0x5e>
 8022c5e:	89a3      	ldrh	r3, [r4, #12]
 8022c60:	059b      	lsls	r3, r3, #22
 8022c62:	d402      	bmi.n	8022c6a <_putc_r+0x5e>
 8022c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022c66:	f7ff f98f 	bl	8021f88 <__retarget_lock_release_recursive>
 8022c6a:	4628      	mov	r0, r5
 8022c6c:	bd70      	pop	{r4, r5, r6, pc}
 8022c6e:	4b09      	ldr	r3, [pc, #36]	; (8022c94 <_putc_r+0x88>)
 8022c70:	429c      	cmp	r4, r3
 8022c72:	d101      	bne.n	8022c78 <_putc_r+0x6c>
 8022c74:	68b4      	ldr	r4, [r6, #8]
 8022c76:	e7d6      	b.n	8022c26 <_putc_r+0x1a>
 8022c78:	4b07      	ldr	r3, [pc, #28]	; (8022c98 <_putc_r+0x8c>)
 8022c7a:	429c      	cmp	r4, r3
 8022c7c:	bf08      	it	eq
 8022c7e:	68f4      	ldreq	r4, [r6, #12]
 8022c80:	e7d1      	b.n	8022c26 <_putc_r+0x1a>
 8022c82:	4629      	mov	r1, r5
 8022c84:	4622      	mov	r2, r4
 8022c86:	4630      	mov	r0, r6
 8022c88:	f7fe f886 	bl	8020d98 <__swbuf_r>
 8022c8c:	4605      	mov	r5, r0
 8022c8e:	e7e3      	b.n	8022c58 <_putc_r+0x4c>
 8022c90:	08023890 	.word	0x08023890
 8022c94:	080238b0 	.word	0x080238b0
 8022c98:	08023870 	.word	0x08023870

08022c9c <_sbrk_r>:
 8022c9c:	b538      	push	{r3, r4, r5, lr}
 8022c9e:	4d06      	ldr	r5, [pc, #24]	; (8022cb8 <_sbrk_r+0x1c>)
 8022ca0:	2300      	movs	r3, #0
 8022ca2:	4604      	mov	r4, r0
 8022ca4:	4608      	mov	r0, r1
 8022ca6:	602b      	str	r3, [r5, #0]
 8022ca8:	f7f4 fd3e 	bl	8017728 <_sbrk>
 8022cac:	1c43      	adds	r3, r0, #1
 8022cae:	d102      	bne.n	8022cb6 <_sbrk_r+0x1a>
 8022cb0:	682b      	ldr	r3, [r5, #0]
 8022cb2:	b103      	cbz	r3, 8022cb6 <_sbrk_r+0x1a>
 8022cb4:	6023      	str	r3, [r4, #0]
 8022cb6:	bd38      	pop	{r3, r4, r5, pc}
 8022cb8:	2000f918 	.word	0x2000f918

08022cbc <__sread>:
 8022cbc:	b510      	push	{r4, lr}
 8022cbe:	460c      	mov	r4, r1
 8022cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cc4:	f000 f8e2 	bl	8022e8c <_read_r>
 8022cc8:	2800      	cmp	r0, #0
 8022cca:	bfab      	itete	ge
 8022ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022cce:	89a3      	ldrhlt	r3, [r4, #12]
 8022cd0:	181b      	addge	r3, r3, r0
 8022cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022cd6:	bfac      	ite	ge
 8022cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8022cda:	81a3      	strhlt	r3, [r4, #12]
 8022cdc:	bd10      	pop	{r4, pc}

08022cde <__swrite>:
 8022cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ce2:	461f      	mov	r7, r3
 8022ce4:	898b      	ldrh	r3, [r1, #12]
 8022ce6:	05db      	lsls	r3, r3, #23
 8022ce8:	4605      	mov	r5, r0
 8022cea:	460c      	mov	r4, r1
 8022cec:	4616      	mov	r6, r2
 8022cee:	d505      	bpl.n	8022cfc <__swrite+0x1e>
 8022cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cf4:	2302      	movs	r3, #2
 8022cf6:	2200      	movs	r2, #0
 8022cf8:	f000 f898 	bl	8022e2c <_lseek_r>
 8022cfc:	89a3      	ldrh	r3, [r4, #12]
 8022cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022d06:	81a3      	strh	r3, [r4, #12]
 8022d08:	4632      	mov	r2, r6
 8022d0a:	463b      	mov	r3, r7
 8022d0c:	4628      	mov	r0, r5
 8022d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022d12:	f000 b817 	b.w	8022d44 <_write_r>

08022d16 <__sseek>:
 8022d16:	b510      	push	{r4, lr}
 8022d18:	460c      	mov	r4, r1
 8022d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022d1e:	f000 f885 	bl	8022e2c <_lseek_r>
 8022d22:	1c43      	adds	r3, r0, #1
 8022d24:	89a3      	ldrh	r3, [r4, #12]
 8022d26:	bf15      	itete	ne
 8022d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8022d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022d32:	81a3      	strheq	r3, [r4, #12]
 8022d34:	bf18      	it	ne
 8022d36:	81a3      	strhne	r3, [r4, #12]
 8022d38:	bd10      	pop	{r4, pc}

08022d3a <__sclose>:
 8022d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022d3e:	f000 b831 	b.w	8022da4 <_close_r>
	...

08022d44 <_write_r>:
 8022d44:	b538      	push	{r3, r4, r5, lr}
 8022d46:	4d07      	ldr	r5, [pc, #28]	; (8022d64 <_write_r+0x20>)
 8022d48:	4604      	mov	r4, r0
 8022d4a:	4608      	mov	r0, r1
 8022d4c:	4611      	mov	r1, r2
 8022d4e:	2200      	movs	r2, #0
 8022d50:	602a      	str	r2, [r5, #0]
 8022d52:	461a      	mov	r2, r3
 8022d54:	f7f4 fc94 	bl	8017680 <_write>
 8022d58:	1c43      	adds	r3, r0, #1
 8022d5a:	d102      	bne.n	8022d62 <_write_r+0x1e>
 8022d5c:	682b      	ldr	r3, [r5, #0]
 8022d5e:	b103      	cbz	r3, 8022d62 <_write_r+0x1e>
 8022d60:	6023      	str	r3, [r4, #0]
 8022d62:	bd38      	pop	{r3, r4, r5, pc}
 8022d64:	2000f918 	.word	0x2000f918

08022d68 <__assert_func>:
 8022d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d6a:	4614      	mov	r4, r2
 8022d6c:	461a      	mov	r2, r3
 8022d6e:	4b09      	ldr	r3, [pc, #36]	; (8022d94 <__assert_func+0x2c>)
 8022d70:	681b      	ldr	r3, [r3, #0]
 8022d72:	4605      	mov	r5, r0
 8022d74:	68d8      	ldr	r0, [r3, #12]
 8022d76:	b14c      	cbz	r4, 8022d8c <__assert_func+0x24>
 8022d78:	4b07      	ldr	r3, [pc, #28]	; (8022d98 <__assert_func+0x30>)
 8022d7a:	9100      	str	r1, [sp, #0]
 8022d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022d80:	4906      	ldr	r1, [pc, #24]	; (8022d9c <__assert_func+0x34>)
 8022d82:	462b      	mov	r3, r5
 8022d84:	f000 f81e 	bl	8022dc4 <fiprintf>
 8022d88:	f000 f89f 	bl	8022eca <abort>
 8022d8c:	4b04      	ldr	r3, [pc, #16]	; (8022da0 <__assert_func+0x38>)
 8022d8e:	461c      	mov	r4, r3
 8022d90:	e7f3      	b.n	8022d7a <__assert_func+0x12>
 8022d92:	bf00      	nop
 8022d94:	2000002c 	.word	0x2000002c
 8022d98:	08023a3d 	.word	0x08023a3d
 8022d9c:	08023a4a 	.word	0x08023a4a
 8022da0:	08023a78 	.word	0x08023a78

08022da4 <_close_r>:
 8022da4:	b538      	push	{r3, r4, r5, lr}
 8022da6:	4d06      	ldr	r5, [pc, #24]	; (8022dc0 <_close_r+0x1c>)
 8022da8:	2300      	movs	r3, #0
 8022daa:	4604      	mov	r4, r0
 8022dac:	4608      	mov	r0, r1
 8022dae:	602b      	str	r3, [r5, #0]
 8022db0:	f7f4 fc86 	bl	80176c0 <_close>
 8022db4:	1c43      	adds	r3, r0, #1
 8022db6:	d102      	bne.n	8022dbe <_close_r+0x1a>
 8022db8:	682b      	ldr	r3, [r5, #0]
 8022dba:	b103      	cbz	r3, 8022dbe <_close_r+0x1a>
 8022dbc:	6023      	str	r3, [r4, #0]
 8022dbe:	bd38      	pop	{r3, r4, r5, pc}
 8022dc0:	2000f918 	.word	0x2000f918

08022dc4 <fiprintf>:
 8022dc4:	b40e      	push	{r1, r2, r3}
 8022dc6:	b503      	push	{r0, r1, lr}
 8022dc8:	4601      	mov	r1, r0
 8022dca:	ab03      	add	r3, sp, #12
 8022dcc:	4805      	ldr	r0, [pc, #20]	; (8022de4 <fiprintf+0x20>)
 8022dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dd2:	6800      	ldr	r0, [r0, #0]
 8022dd4:	9301      	str	r3, [sp, #4]
 8022dd6:	f7ff fde9 	bl	80229ac <_vfiprintf_r>
 8022dda:	b002      	add	sp, #8
 8022ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8022de0:	b003      	add	sp, #12
 8022de2:	4770      	bx	lr
 8022de4:	2000002c 	.word	0x2000002c

08022de8 <_fstat_r>:
 8022de8:	b538      	push	{r3, r4, r5, lr}
 8022dea:	4d07      	ldr	r5, [pc, #28]	; (8022e08 <_fstat_r+0x20>)
 8022dec:	2300      	movs	r3, #0
 8022dee:	4604      	mov	r4, r0
 8022df0:	4608      	mov	r0, r1
 8022df2:	4611      	mov	r1, r2
 8022df4:	602b      	str	r3, [r5, #0]
 8022df6:	f7f4 fc6f 	bl	80176d8 <_fstat>
 8022dfa:	1c43      	adds	r3, r0, #1
 8022dfc:	d102      	bne.n	8022e04 <_fstat_r+0x1c>
 8022dfe:	682b      	ldr	r3, [r5, #0]
 8022e00:	b103      	cbz	r3, 8022e04 <_fstat_r+0x1c>
 8022e02:	6023      	str	r3, [r4, #0]
 8022e04:	bd38      	pop	{r3, r4, r5, pc}
 8022e06:	bf00      	nop
 8022e08:	2000f918 	.word	0x2000f918

08022e0c <_isatty_r>:
 8022e0c:	b538      	push	{r3, r4, r5, lr}
 8022e0e:	4d06      	ldr	r5, [pc, #24]	; (8022e28 <_isatty_r+0x1c>)
 8022e10:	2300      	movs	r3, #0
 8022e12:	4604      	mov	r4, r0
 8022e14:	4608      	mov	r0, r1
 8022e16:	602b      	str	r3, [r5, #0]
 8022e18:	f7f4 fc6e 	bl	80176f8 <_isatty>
 8022e1c:	1c43      	adds	r3, r0, #1
 8022e1e:	d102      	bne.n	8022e26 <_isatty_r+0x1a>
 8022e20:	682b      	ldr	r3, [r5, #0]
 8022e22:	b103      	cbz	r3, 8022e26 <_isatty_r+0x1a>
 8022e24:	6023      	str	r3, [r4, #0]
 8022e26:	bd38      	pop	{r3, r4, r5, pc}
 8022e28:	2000f918 	.word	0x2000f918

08022e2c <_lseek_r>:
 8022e2c:	b538      	push	{r3, r4, r5, lr}
 8022e2e:	4d07      	ldr	r5, [pc, #28]	; (8022e4c <_lseek_r+0x20>)
 8022e30:	4604      	mov	r4, r0
 8022e32:	4608      	mov	r0, r1
 8022e34:	4611      	mov	r1, r2
 8022e36:	2200      	movs	r2, #0
 8022e38:	602a      	str	r2, [r5, #0]
 8022e3a:	461a      	mov	r2, r3
 8022e3c:	f7f4 fc67 	bl	801770e <_lseek>
 8022e40:	1c43      	adds	r3, r0, #1
 8022e42:	d102      	bne.n	8022e4a <_lseek_r+0x1e>
 8022e44:	682b      	ldr	r3, [r5, #0]
 8022e46:	b103      	cbz	r3, 8022e4a <_lseek_r+0x1e>
 8022e48:	6023      	str	r3, [r4, #0]
 8022e4a:	bd38      	pop	{r3, r4, r5, pc}
 8022e4c:	2000f918 	.word	0x2000f918

08022e50 <__ascii_mbtowc>:
 8022e50:	b082      	sub	sp, #8
 8022e52:	b901      	cbnz	r1, 8022e56 <__ascii_mbtowc+0x6>
 8022e54:	a901      	add	r1, sp, #4
 8022e56:	b142      	cbz	r2, 8022e6a <__ascii_mbtowc+0x1a>
 8022e58:	b14b      	cbz	r3, 8022e6e <__ascii_mbtowc+0x1e>
 8022e5a:	7813      	ldrb	r3, [r2, #0]
 8022e5c:	600b      	str	r3, [r1, #0]
 8022e5e:	7812      	ldrb	r2, [r2, #0]
 8022e60:	1e10      	subs	r0, r2, #0
 8022e62:	bf18      	it	ne
 8022e64:	2001      	movne	r0, #1
 8022e66:	b002      	add	sp, #8
 8022e68:	4770      	bx	lr
 8022e6a:	4610      	mov	r0, r2
 8022e6c:	e7fb      	b.n	8022e66 <__ascii_mbtowc+0x16>
 8022e6e:	f06f 0001 	mvn.w	r0, #1
 8022e72:	e7f8      	b.n	8022e66 <__ascii_mbtowc+0x16>

08022e74 <__malloc_lock>:
 8022e74:	4801      	ldr	r0, [pc, #4]	; (8022e7c <__malloc_lock+0x8>)
 8022e76:	f7ff b886 	b.w	8021f86 <__retarget_lock_acquire_recursive>
 8022e7a:	bf00      	nop
 8022e7c:	2000f90c 	.word	0x2000f90c

08022e80 <__malloc_unlock>:
 8022e80:	4801      	ldr	r0, [pc, #4]	; (8022e88 <__malloc_unlock+0x8>)
 8022e82:	f7ff b881 	b.w	8021f88 <__retarget_lock_release_recursive>
 8022e86:	bf00      	nop
 8022e88:	2000f90c 	.word	0x2000f90c

08022e8c <_read_r>:
 8022e8c:	b538      	push	{r3, r4, r5, lr}
 8022e8e:	4d07      	ldr	r5, [pc, #28]	; (8022eac <_read_r+0x20>)
 8022e90:	4604      	mov	r4, r0
 8022e92:	4608      	mov	r0, r1
 8022e94:	4611      	mov	r1, r2
 8022e96:	2200      	movs	r2, #0
 8022e98:	602a      	str	r2, [r5, #0]
 8022e9a:	461a      	mov	r2, r3
 8022e9c:	f7f4 fbd2 	bl	8017644 <_read>
 8022ea0:	1c43      	adds	r3, r0, #1
 8022ea2:	d102      	bne.n	8022eaa <_read_r+0x1e>
 8022ea4:	682b      	ldr	r3, [r5, #0]
 8022ea6:	b103      	cbz	r3, 8022eaa <_read_r+0x1e>
 8022ea8:	6023      	str	r3, [r4, #0]
 8022eaa:	bd38      	pop	{r3, r4, r5, pc}
 8022eac:	2000f918 	.word	0x2000f918

08022eb0 <__ascii_wctomb>:
 8022eb0:	b149      	cbz	r1, 8022ec6 <__ascii_wctomb+0x16>
 8022eb2:	2aff      	cmp	r2, #255	; 0xff
 8022eb4:	bf85      	ittet	hi
 8022eb6:	238a      	movhi	r3, #138	; 0x8a
 8022eb8:	6003      	strhi	r3, [r0, #0]
 8022eba:	700a      	strbls	r2, [r1, #0]
 8022ebc:	f04f 30ff 	movhi.w	r0, #4294967295
 8022ec0:	bf98      	it	ls
 8022ec2:	2001      	movls	r0, #1
 8022ec4:	4770      	bx	lr
 8022ec6:	4608      	mov	r0, r1
 8022ec8:	4770      	bx	lr

08022eca <abort>:
 8022eca:	b508      	push	{r3, lr}
 8022ecc:	2006      	movs	r0, #6
 8022ece:	f000 f82b 	bl	8022f28 <raise>
 8022ed2:	2001      	movs	r0, #1
 8022ed4:	f7f4 fbac 	bl	8017630 <_exit>

08022ed8 <_raise_r>:
 8022ed8:	291f      	cmp	r1, #31
 8022eda:	b538      	push	{r3, r4, r5, lr}
 8022edc:	4604      	mov	r4, r0
 8022ede:	460d      	mov	r5, r1
 8022ee0:	d904      	bls.n	8022eec <_raise_r+0x14>
 8022ee2:	2316      	movs	r3, #22
 8022ee4:	6003      	str	r3, [r0, #0]
 8022ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8022eea:	bd38      	pop	{r3, r4, r5, pc}
 8022eec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022eee:	b112      	cbz	r2, 8022ef6 <_raise_r+0x1e>
 8022ef0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022ef4:	b94b      	cbnz	r3, 8022f0a <_raise_r+0x32>
 8022ef6:	4620      	mov	r0, r4
 8022ef8:	f000 f830 	bl	8022f5c <_getpid_r>
 8022efc:	462a      	mov	r2, r5
 8022efe:	4601      	mov	r1, r0
 8022f00:	4620      	mov	r0, r4
 8022f02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022f06:	f000 b817 	b.w	8022f38 <_kill_r>
 8022f0a:	2b01      	cmp	r3, #1
 8022f0c:	d00a      	beq.n	8022f24 <_raise_r+0x4c>
 8022f0e:	1c59      	adds	r1, r3, #1
 8022f10:	d103      	bne.n	8022f1a <_raise_r+0x42>
 8022f12:	2316      	movs	r3, #22
 8022f14:	6003      	str	r3, [r0, #0]
 8022f16:	2001      	movs	r0, #1
 8022f18:	e7e7      	b.n	8022eea <_raise_r+0x12>
 8022f1a:	2400      	movs	r4, #0
 8022f1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022f20:	4628      	mov	r0, r5
 8022f22:	4798      	blx	r3
 8022f24:	2000      	movs	r0, #0
 8022f26:	e7e0      	b.n	8022eea <_raise_r+0x12>

08022f28 <raise>:
 8022f28:	4b02      	ldr	r3, [pc, #8]	; (8022f34 <raise+0xc>)
 8022f2a:	4601      	mov	r1, r0
 8022f2c:	6818      	ldr	r0, [r3, #0]
 8022f2e:	f7ff bfd3 	b.w	8022ed8 <_raise_r>
 8022f32:	bf00      	nop
 8022f34:	2000002c 	.word	0x2000002c

08022f38 <_kill_r>:
 8022f38:	b538      	push	{r3, r4, r5, lr}
 8022f3a:	4d07      	ldr	r5, [pc, #28]	; (8022f58 <_kill_r+0x20>)
 8022f3c:	2300      	movs	r3, #0
 8022f3e:	4604      	mov	r4, r0
 8022f40:	4608      	mov	r0, r1
 8022f42:	4611      	mov	r1, r2
 8022f44:	602b      	str	r3, [r5, #0]
 8022f46:	f7f4 fb63 	bl	8017610 <_kill>
 8022f4a:	1c43      	adds	r3, r0, #1
 8022f4c:	d102      	bne.n	8022f54 <_kill_r+0x1c>
 8022f4e:	682b      	ldr	r3, [r5, #0]
 8022f50:	b103      	cbz	r3, 8022f54 <_kill_r+0x1c>
 8022f52:	6023      	str	r3, [r4, #0]
 8022f54:	bd38      	pop	{r3, r4, r5, pc}
 8022f56:	bf00      	nop
 8022f58:	2000f918 	.word	0x2000f918

08022f5c <_getpid_r>:
 8022f5c:	f7f4 bb50 	b.w	8017600 <_getpid>

08022f60 <ceil>:
 8022f60:	ec51 0b10 	vmov	r0, r1, d0
 8022f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022f6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022f70:	2e13      	cmp	r6, #19
 8022f72:	ee10 5a10 	vmov	r5, s0
 8022f76:	ee10 8a10 	vmov	r8, s0
 8022f7a:	460c      	mov	r4, r1
 8022f7c:	dc30      	bgt.n	8022fe0 <ceil+0x80>
 8022f7e:	2e00      	cmp	r6, #0
 8022f80:	da12      	bge.n	8022fa8 <ceil+0x48>
 8022f82:	a335      	add	r3, pc, #212	; (adr r3, 8023058 <ceil+0xf8>)
 8022f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f88:	f7dd f9a8 	bl	80002dc <__adddf3>
 8022f8c:	2200      	movs	r2, #0
 8022f8e:	2300      	movs	r3, #0
 8022f90:	f7dd fdea 	bl	8000b68 <__aeabi_dcmpgt>
 8022f94:	b128      	cbz	r0, 8022fa2 <ceil+0x42>
 8022f96:	2c00      	cmp	r4, #0
 8022f98:	db55      	blt.n	8023046 <ceil+0xe6>
 8022f9a:	432c      	orrs	r4, r5
 8022f9c:	d057      	beq.n	802304e <ceil+0xee>
 8022f9e:	4c30      	ldr	r4, [pc, #192]	; (8023060 <ceil+0x100>)
 8022fa0:	2500      	movs	r5, #0
 8022fa2:	4621      	mov	r1, r4
 8022fa4:	4628      	mov	r0, r5
 8022fa6:	e025      	b.n	8022ff4 <ceil+0x94>
 8022fa8:	4f2e      	ldr	r7, [pc, #184]	; (8023064 <ceil+0x104>)
 8022faa:	4137      	asrs	r7, r6
 8022fac:	ea01 0307 	and.w	r3, r1, r7
 8022fb0:	4303      	orrs	r3, r0
 8022fb2:	d01f      	beq.n	8022ff4 <ceil+0x94>
 8022fb4:	a328      	add	r3, pc, #160	; (adr r3, 8023058 <ceil+0xf8>)
 8022fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fba:	f7dd f98f 	bl	80002dc <__adddf3>
 8022fbe:	2200      	movs	r2, #0
 8022fc0:	2300      	movs	r3, #0
 8022fc2:	f7dd fdd1 	bl	8000b68 <__aeabi_dcmpgt>
 8022fc6:	2800      	cmp	r0, #0
 8022fc8:	d0eb      	beq.n	8022fa2 <ceil+0x42>
 8022fca:	2c00      	cmp	r4, #0
 8022fcc:	bfc2      	ittt	gt
 8022fce:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022fd2:	fa43 f606 	asrgt.w	r6, r3, r6
 8022fd6:	19a4      	addgt	r4, r4, r6
 8022fd8:	ea24 0407 	bic.w	r4, r4, r7
 8022fdc:	2500      	movs	r5, #0
 8022fde:	e7e0      	b.n	8022fa2 <ceil+0x42>
 8022fe0:	2e33      	cmp	r6, #51	; 0x33
 8022fe2:	dd0b      	ble.n	8022ffc <ceil+0x9c>
 8022fe4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022fe8:	d104      	bne.n	8022ff4 <ceil+0x94>
 8022fea:	ee10 2a10 	vmov	r2, s0
 8022fee:	460b      	mov	r3, r1
 8022ff0:	f7dd f974 	bl	80002dc <__adddf3>
 8022ff4:	ec41 0b10 	vmov	d0, r0, r1
 8022ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ffc:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023000:	f04f 33ff 	mov.w	r3, #4294967295
 8023004:	fa23 f707 	lsr.w	r7, r3, r7
 8023008:	4207      	tst	r7, r0
 802300a:	d0f3      	beq.n	8022ff4 <ceil+0x94>
 802300c:	a312      	add	r3, pc, #72	; (adr r3, 8023058 <ceil+0xf8>)
 802300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023012:	f7dd f963 	bl	80002dc <__adddf3>
 8023016:	2200      	movs	r2, #0
 8023018:	2300      	movs	r3, #0
 802301a:	f7dd fda5 	bl	8000b68 <__aeabi_dcmpgt>
 802301e:	2800      	cmp	r0, #0
 8023020:	d0bf      	beq.n	8022fa2 <ceil+0x42>
 8023022:	2c00      	cmp	r4, #0
 8023024:	dd02      	ble.n	802302c <ceil+0xcc>
 8023026:	2e14      	cmp	r6, #20
 8023028:	d103      	bne.n	8023032 <ceil+0xd2>
 802302a:	3401      	adds	r4, #1
 802302c:	ea25 0507 	bic.w	r5, r5, r7
 8023030:	e7b7      	b.n	8022fa2 <ceil+0x42>
 8023032:	2301      	movs	r3, #1
 8023034:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023038:	fa03 f606 	lsl.w	r6, r3, r6
 802303c:	4435      	add	r5, r6
 802303e:	4545      	cmp	r5, r8
 8023040:	bf38      	it	cc
 8023042:	18e4      	addcc	r4, r4, r3
 8023044:	e7f2      	b.n	802302c <ceil+0xcc>
 8023046:	2500      	movs	r5, #0
 8023048:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802304c:	e7a9      	b.n	8022fa2 <ceil+0x42>
 802304e:	4625      	mov	r5, r4
 8023050:	e7a7      	b.n	8022fa2 <ceil+0x42>
 8023052:	bf00      	nop
 8023054:	f3af 8000 	nop.w
 8023058:	8800759c 	.word	0x8800759c
 802305c:	7e37e43c 	.word	0x7e37e43c
 8023060:	3ff00000 	.word	0x3ff00000
 8023064:	000fffff 	.word	0x000fffff

08023068 <exp>:
 8023068:	b538      	push	{r3, r4, r5, lr}
 802306a:	ed2d 8b02 	vpush	{d8}
 802306e:	ec55 4b10 	vmov	r4, r5, d0
 8023072:	f000 f841 	bl	80230f8 <__ieee754_exp>
 8023076:	eeb0 8a40 	vmov.f32	s16, s0
 802307a:	eef0 8a60 	vmov.f32	s17, s1
 802307e:	ec45 4b10 	vmov	d0, r4, r5
 8023082:	f000 f9eb 	bl	802345c <finite>
 8023086:	b168      	cbz	r0, 80230a4 <exp+0x3c>
 8023088:	a317      	add	r3, pc, #92	; (adr r3, 80230e8 <exp+0x80>)
 802308a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802308e:	4620      	mov	r0, r4
 8023090:	4629      	mov	r1, r5
 8023092:	f7dd fd69 	bl	8000b68 <__aeabi_dcmpgt>
 8023096:	b160      	cbz	r0, 80230b2 <exp+0x4a>
 8023098:	f7fd f930 	bl	80202fc <__errno>
 802309c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80230d8 <exp+0x70>
 80230a0:	2322      	movs	r3, #34	; 0x22
 80230a2:	6003      	str	r3, [r0, #0]
 80230a4:	eeb0 0a48 	vmov.f32	s0, s16
 80230a8:	eef0 0a68 	vmov.f32	s1, s17
 80230ac:	ecbd 8b02 	vpop	{d8}
 80230b0:	bd38      	pop	{r3, r4, r5, pc}
 80230b2:	a30f      	add	r3, pc, #60	; (adr r3, 80230f0 <exp+0x88>)
 80230b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230b8:	4620      	mov	r0, r4
 80230ba:	4629      	mov	r1, r5
 80230bc:	f7dd fd36 	bl	8000b2c <__aeabi_dcmplt>
 80230c0:	2800      	cmp	r0, #0
 80230c2:	d0ef      	beq.n	80230a4 <exp+0x3c>
 80230c4:	f7fd f91a 	bl	80202fc <__errno>
 80230c8:	2322      	movs	r3, #34	; 0x22
 80230ca:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80230e0 <exp+0x78>
 80230ce:	6003      	str	r3, [r0, #0]
 80230d0:	e7e8      	b.n	80230a4 <exp+0x3c>
 80230d2:	bf00      	nop
 80230d4:	f3af 8000 	nop.w
 80230d8:	00000000 	.word	0x00000000
 80230dc:	7ff00000 	.word	0x7ff00000
	...
 80230e8:	fefa39ef 	.word	0xfefa39ef
 80230ec:	40862e42 	.word	0x40862e42
 80230f0:	d52d3051 	.word	0xd52d3051
 80230f4:	c0874910 	.word	0xc0874910

080230f8 <__ieee754_exp>:
 80230f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80230fc:	ec55 4b10 	vmov	r4, r5, d0
 8023100:	49b5      	ldr	r1, [pc, #724]	; (80233d8 <__ieee754_exp+0x2e0>)
 8023102:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023106:	428b      	cmp	r3, r1
 8023108:	ed2d 8b04 	vpush	{d8-d9}
 802310c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023110:	d93d      	bls.n	802318e <__ieee754_exp+0x96>
 8023112:	49b2      	ldr	r1, [pc, #712]	; (80233dc <__ieee754_exp+0x2e4>)
 8023114:	428b      	cmp	r3, r1
 8023116:	d918      	bls.n	802314a <__ieee754_exp+0x52>
 8023118:	ee10 3a10 	vmov	r3, s0
 802311c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8023120:	4313      	orrs	r3, r2
 8023122:	d009      	beq.n	8023138 <__ieee754_exp+0x40>
 8023124:	ee10 2a10 	vmov	r2, s0
 8023128:	462b      	mov	r3, r5
 802312a:	4620      	mov	r0, r4
 802312c:	4629      	mov	r1, r5
 802312e:	f7dd f8d5 	bl	80002dc <__adddf3>
 8023132:	4604      	mov	r4, r0
 8023134:	460d      	mov	r5, r1
 8023136:	e002      	b.n	802313e <__ieee754_exp+0x46>
 8023138:	b10e      	cbz	r6, 802313e <__ieee754_exp+0x46>
 802313a:	2400      	movs	r4, #0
 802313c:	2500      	movs	r5, #0
 802313e:	ecbd 8b04 	vpop	{d8-d9}
 8023142:	ec45 4b10 	vmov	d0, r4, r5
 8023146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802314a:	a38d      	add	r3, pc, #564	; (adr r3, 8023380 <__ieee754_exp+0x288>)
 802314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023150:	ee10 0a10 	vmov	r0, s0
 8023154:	4629      	mov	r1, r5
 8023156:	f7dd fd07 	bl	8000b68 <__aeabi_dcmpgt>
 802315a:	4607      	mov	r7, r0
 802315c:	b130      	cbz	r0, 802316c <__ieee754_exp+0x74>
 802315e:	ecbd 8b04 	vpop	{d8-d9}
 8023162:	2000      	movs	r0, #0
 8023164:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023168:	f000 b96f 	b.w	802344a <__math_oflow>
 802316c:	a386      	add	r3, pc, #536	; (adr r3, 8023388 <__ieee754_exp+0x290>)
 802316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023172:	4620      	mov	r0, r4
 8023174:	4629      	mov	r1, r5
 8023176:	f7dd fcd9 	bl	8000b2c <__aeabi_dcmplt>
 802317a:	2800      	cmp	r0, #0
 802317c:	f000 808b 	beq.w	8023296 <__ieee754_exp+0x19e>
 8023180:	ecbd 8b04 	vpop	{d8-d9}
 8023184:	4638      	mov	r0, r7
 8023186:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802318a:	f000 b955 	b.w	8023438 <__math_uflow>
 802318e:	4a94      	ldr	r2, [pc, #592]	; (80233e0 <__ieee754_exp+0x2e8>)
 8023190:	4293      	cmp	r3, r2
 8023192:	f240 80ac 	bls.w	80232ee <__ieee754_exp+0x1f6>
 8023196:	4a93      	ldr	r2, [pc, #588]	; (80233e4 <__ieee754_exp+0x2ec>)
 8023198:	4293      	cmp	r3, r2
 802319a:	d87c      	bhi.n	8023296 <__ieee754_exp+0x19e>
 802319c:	4b92      	ldr	r3, [pc, #584]	; (80233e8 <__ieee754_exp+0x2f0>)
 802319e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80231a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231a6:	ee10 0a10 	vmov	r0, s0
 80231aa:	4629      	mov	r1, r5
 80231ac:	f7dd f894 	bl	80002d8 <__aeabi_dsub>
 80231b0:	4b8e      	ldr	r3, [pc, #568]	; (80233ec <__ieee754_exp+0x2f4>)
 80231b2:	00f7      	lsls	r7, r6, #3
 80231b4:	443b      	add	r3, r7
 80231b6:	ed93 7b00 	vldr	d7, [r3]
 80231ba:	f1c6 0a01 	rsb	sl, r6, #1
 80231be:	4680      	mov	r8, r0
 80231c0:	4689      	mov	r9, r1
 80231c2:	ebaa 0a06 	sub.w	sl, sl, r6
 80231c6:	eeb0 8a47 	vmov.f32	s16, s14
 80231ca:	eef0 8a67 	vmov.f32	s17, s15
 80231ce:	ec53 2b18 	vmov	r2, r3, d8
 80231d2:	4640      	mov	r0, r8
 80231d4:	4649      	mov	r1, r9
 80231d6:	f7dd f87f 	bl	80002d8 <__aeabi_dsub>
 80231da:	4604      	mov	r4, r0
 80231dc:	460d      	mov	r5, r1
 80231de:	4622      	mov	r2, r4
 80231e0:	462b      	mov	r3, r5
 80231e2:	4620      	mov	r0, r4
 80231e4:	4629      	mov	r1, r5
 80231e6:	f7dd fa2f 	bl	8000648 <__aeabi_dmul>
 80231ea:	a369      	add	r3, pc, #420	; (adr r3, 8023390 <__ieee754_exp+0x298>)
 80231ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231f0:	4606      	mov	r6, r0
 80231f2:	460f      	mov	r7, r1
 80231f4:	f7dd fa28 	bl	8000648 <__aeabi_dmul>
 80231f8:	a367      	add	r3, pc, #412	; (adr r3, 8023398 <__ieee754_exp+0x2a0>)
 80231fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231fe:	f7dd f86b 	bl	80002d8 <__aeabi_dsub>
 8023202:	4632      	mov	r2, r6
 8023204:	463b      	mov	r3, r7
 8023206:	f7dd fa1f 	bl	8000648 <__aeabi_dmul>
 802320a:	a365      	add	r3, pc, #404	; (adr r3, 80233a0 <__ieee754_exp+0x2a8>)
 802320c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023210:	f7dd f864 	bl	80002dc <__adddf3>
 8023214:	4632      	mov	r2, r6
 8023216:	463b      	mov	r3, r7
 8023218:	f7dd fa16 	bl	8000648 <__aeabi_dmul>
 802321c:	a362      	add	r3, pc, #392	; (adr r3, 80233a8 <__ieee754_exp+0x2b0>)
 802321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023222:	f7dd f859 	bl	80002d8 <__aeabi_dsub>
 8023226:	4632      	mov	r2, r6
 8023228:	463b      	mov	r3, r7
 802322a:	f7dd fa0d 	bl	8000648 <__aeabi_dmul>
 802322e:	a360      	add	r3, pc, #384	; (adr r3, 80233b0 <__ieee754_exp+0x2b8>)
 8023230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023234:	f7dd f852 	bl	80002dc <__adddf3>
 8023238:	4632      	mov	r2, r6
 802323a:	463b      	mov	r3, r7
 802323c:	f7dd fa04 	bl	8000648 <__aeabi_dmul>
 8023240:	4602      	mov	r2, r0
 8023242:	460b      	mov	r3, r1
 8023244:	4620      	mov	r0, r4
 8023246:	4629      	mov	r1, r5
 8023248:	f7dd f846 	bl	80002d8 <__aeabi_dsub>
 802324c:	4602      	mov	r2, r0
 802324e:	460b      	mov	r3, r1
 8023250:	4606      	mov	r6, r0
 8023252:	460f      	mov	r7, r1
 8023254:	4620      	mov	r0, r4
 8023256:	4629      	mov	r1, r5
 8023258:	f7dd f9f6 	bl	8000648 <__aeabi_dmul>
 802325c:	ec41 0b19 	vmov	d9, r0, r1
 8023260:	f1ba 0f00 	cmp.w	sl, #0
 8023264:	d15d      	bne.n	8023322 <__ieee754_exp+0x22a>
 8023266:	2200      	movs	r2, #0
 8023268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802326c:	4630      	mov	r0, r6
 802326e:	4639      	mov	r1, r7
 8023270:	f7dd f832 	bl	80002d8 <__aeabi_dsub>
 8023274:	4602      	mov	r2, r0
 8023276:	460b      	mov	r3, r1
 8023278:	ec51 0b19 	vmov	r0, r1, d9
 802327c:	f7dd fb0e 	bl	800089c <__aeabi_ddiv>
 8023280:	4622      	mov	r2, r4
 8023282:	462b      	mov	r3, r5
 8023284:	f7dd f828 	bl	80002d8 <__aeabi_dsub>
 8023288:	4602      	mov	r2, r0
 802328a:	460b      	mov	r3, r1
 802328c:	2000      	movs	r0, #0
 802328e:	4958      	ldr	r1, [pc, #352]	; (80233f0 <__ieee754_exp+0x2f8>)
 8023290:	f7dd f822 	bl	80002d8 <__aeabi_dsub>
 8023294:	e74d      	b.n	8023132 <__ieee754_exp+0x3a>
 8023296:	4857      	ldr	r0, [pc, #348]	; (80233f4 <__ieee754_exp+0x2fc>)
 8023298:	a347      	add	r3, pc, #284	; (adr r3, 80233b8 <__ieee754_exp+0x2c0>)
 802329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802329e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80232a2:	4629      	mov	r1, r5
 80232a4:	4620      	mov	r0, r4
 80232a6:	f7dd f9cf 	bl	8000648 <__aeabi_dmul>
 80232aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80232ae:	f7dd f815 	bl	80002dc <__adddf3>
 80232b2:	f7dd fc79 	bl	8000ba8 <__aeabi_d2iz>
 80232b6:	4682      	mov	sl, r0
 80232b8:	f7dd f95c 	bl	8000574 <__aeabi_i2d>
 80232bc:	a340      	add	r3, pc, #256	; (adr r3, 80233c0 <__ieee754_exp+0x2c8>)
 80232be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232c2:	4606      	mov	r6, r0
 80232c4:	460f      	mov	r7, r1
 80232c6:	f7dd f9bf 	bl	8000648 <__aeabi_dmul>
 80232ca:	4602      	mov	r2, r0
 80232cc:	460b      	mov	r3, r1
 80232ce:	4620      	mov	r0, r4
 80232d0:	4629      	mov	r1, r5
 80232d2:	f7dd f801 	bl	80002d8 <__aeabi_dsub>
 80232d6:	a33c      	add	r3, pc, #240	; (adr r3, 80233c8 <__ieee754_exp+0x2d0>)
 80232d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232dc:	4680      	mov	r8, r0
 80232de:	4689      	mov	r9, r1
 80232e0:	4630      	mov	r0, r6
 80232e2:	4639      	mov	r1, r7
 80232e4:	f7dd f9b0 	bl	8000648 <__aeabi_dmul>
 80232e8:	ec41 0b18 	vmov	d8, r0, r1
 80232ec:	e76f      	b.n	80231ce <__ieee754_exp+0xd6>
 80232ee:	4a42      	ldr	r2, [pc, #264]	; (80233f8 <__ieee754_exp+0x300>)
 80232f0:	4293      	cmp	r3, r2
 80232f2:	d811      	bhi.n	8023318 <__ieee754_exp+0x220>
 80232f4:	a336      	add	r3, pc, #216	; (adr r3, 80233d0 <__ieee754_exp+0x2d8>)
 80232f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232fa:	ee10 0a10 	vmov	r0, s0
 80232fe:	4629      	mov	r1, r5
 8023300:	f7dc ffec 	bl	80002dc <__adddf3>
 8023304:	4b3a      	ldr	r3, [pc, #232]	; (80233f0 <__ieee754_exp+0x2f8>)
 8023306:	2200      	movs	r2, #0
 8023308:	f7dd fc2e 	bl	8000b68 <__aeabi_dcmpgt>
 802330c:	b138      	cbz	r0, 802331e <__ieee754_exp+0x226>
 802330e:	4b38      	ldr	r3, [pc, #224]	; (80233f0 <__ieee754_exp+0x2f8>)
 8023310:	2200      	movs	r2, #0
 8023312:	4620      	mov	r0, r4
 8023314:	4629      	mov	r1, r5
 8023316:	e70a      	b.n	802312e <__ieee754_exp+0x36>
 8023318:	f04f 0a00 	mov.w	sl, #0
 802331c:	e75f      	b.n	80231de <__ieee754_exp+0xe6>
 802331e:	4682      	mov	sl, r0
 8023320:	e75d      	b.n	80231de <__ieee754_exp+0xe6>
 8023322:	4632      	mov	r2, r6
 8023324:	463b      	mov	r3, r7
 8023326:	2000      	movs	r0, #0
 8023328:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802332c:	f7dc ffd4 	bl	80002d8 <__aeabi_dsub>
 8023330:	4602      	mov	r2, r0
 8023332:	460b      	mov	r3, r1
 8023334:	ec51 0b19 	vmov	r0, r1, d9
 8023338:	f7dd fab0 	bl	800089c <__aeabi_ddiv>
 802333c:	4602      	mov	r2, r0
 802333e:	460b      	mov	r3, r1
 8023340:	ec51 0b18 	vmov	r0, r1, d8
 8023344:	f7dc ffc8 	bl	80002d8 <__aeabi_dsub>
 8023348:	4642      	mov	r2, r8
 802334a:	464b      	mov	r3, r9
 802334c:	f7dc ffc4 	bl	80002d8 <__aeabi_dsub>
 8023350:	4602      	mov	r2, r0
 8023352:	460b      	mov	r3, r1
 8023354:	2000      	movs	r0, #0
 8023356:	4926      	ldr	r1, [pc, #152]	; (80233f0 <__ieee754_exp+0x2f8>)
 8023358:	f7dc ffbe 	bl	80002d8 <__aeabi_dsub>
 802335c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023360:	4592      	cmp	sl, r2
 8023362:	db02      	blt.n	802336a <__ieee754_exp+0x272>
 8023364:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023368:	e6e3      	b.n	8023132 <__ieee754_exp+0x3a>
 802336a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802336e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023372:	2200      	movs	r2, #0
 8023374:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023378:	f7dd f966 	bl	8000648 <__aeabi_dmul>
 802337c:	e6d9      	b.n	8023132 <__ieee754_exp+0x3a>
 802337e:	bf00      	nop
 8023380:	fefa39ef 	.word	0xfefa39ef
 8023384:	40862e42 	.word	0x40862e42
 8023388:	d52d3051 	.word	0xd52d3051
 802338c:	c0874910 	.word	0xc0874910
 8023390:	72bea4d0 	.word	0x72bea4d0
 8023394:	3e663769 	.word	0x3e663769
 8023398:	c5d26bf1 	.word	0xc5d26bf1
 802339c:	3ebbbd41 	.word	0x3ebbbd41
 80233a0:	af25de2c 	.word	0xaf25de2c
 80233a4:	3f11566a 	.word	0x3f11566a
 80233a8:	16bebd93 	.word	0x16bebd93
 80233ac:	3f66c16c 	.word	0x3f66c16c
 80233b0:	5555553e 	.word	0x5555553e
 80233b4:	3fc55555 	.word	0x3fc55555
 80233b8:	652b82fe 	.word	0x652b82fe
 80233bc:	3ff71547 	.word	0x3ff71547
 80233c0:	fee00000 	.word	0xfee00000
 80233c4:	3fe62e42 	.word	0x3fe62e42
 80233c8:	35793c76 	.word	0x35793c76
 80233cc:	3dea39ef 	.word	0x3dea39ef
 80233d0:	8800759c 	.word	0x8800759c
 80233d4:	7e37e43c 	.word	0x7e37e43c
 80233d8:	40862e41 	.word	0x40862e41
 80233dc:	7fefffff 	.word	0x7fefffff
 80233e0:	3fd62e42 	.word	0x3fd62e42
 80233e4:	3ff0a2b1 	.word	0x3ff0a2b1
 80233e8:	08023b98 	.word	0x08023b98
 80233ec:	08023ba8 	.word	0x08023ba8
 80233f0:	3ff00000 	.word	0x3ff00000
 80233f4:	08023b88 	.word	0x08023b88
 80233f8:	3defffff 	.word	0x3defffff

080233fc <with_errno>:
 80233fc:	b570      	push	{r4, r5, r6, lr}
 80233fe:	4604      	mov	r4, r0
 8023400:	460d      	mov	r5, r1
 8023402:	4616      	mov	r6, r2
 8023404:	f7fc ff7a 	bl	80202fc <__errno>
 8023408:	4629      	mov	r1, r5
 802340a:	6006      	str	r6, [r0, #0]
 802340c:	4620      	mov	r0, r4
 802340e:	bd70      	pop	{r4, r5, r6, pc}

08023410 <xflow>:
 8023410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023412:	4614      	mov	r4, r2
 8023414:	461d      	mov	r5, r3
 8023416:	b108      	cbz	r0, 802341c <xflow+0xc>
 8023418:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802341c:	e9cd 2300 	strd	r2, r3, [sp]
 8023420:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023424:	4620      	mov	r0, r4
 8023426:	4629      	mov	r1, r5
 8023428:	f7dd f90e 	bl	8000648 <__aeabi_dmul>
 802342c:	2222      	movs	r2, #34	; 0x22
 802342e:	b003      	add	sp, #12
 8023430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023434:	f7ff bfe2 	b.w	80233fc <with_errno>

08023438 <__math_uflow>:
 8023438:	b508      	push	{r3, lr}
 802343a:	2200      	movs	r2, #0
 802343c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8023440:	f7ff ffe6 	bl	8023410 <xflow>
 8023444:	ec41 0b10 	vmov	d0, r0, r1
 8023448:	bd08      	pop	{r3, pc}

0802344a <__math_oflow>:
 802344a:	b508      	push	{r3, lr}
 802344c:	2200      	movs	r2, #0
 802344e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023452:	f7ff ffdd 	bl	8023410 <xflow>
 8023456:	ec41 0b10 	vmov	d0, r0, r1
 802345a:	bd08      	pop	{r3, pc}

0802345c <finite>:
 802345c:	b082      	sub	sp, #8
 802345e:	ed8d 0b00 	vstr	d0, [sp]
 8023462:	9801      	ldr	r0, [sp, #4]
 8023464:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8023468:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802346c:	0fc0      	lsrs	r0, r0, #31
 802346e:	b002      	add	sp, #8
 8023470:	4770      	bx	lr
	...

08023474 <_init>:
 8023474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023476:	bf00      	nop
 8023478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802347a:	bc08      	pop	{r3}
 802347c:	469e      	mov	lr, r3
 802347e:	4770      	bx	lr

08023480 <_fini>:
 8023480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023482:	bf00      	nop
 8023484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023486:	bc08      	pop	{r3}
 8023488:	469e      	mov	lr, r3
 802348a:	4770      	bx	lr
