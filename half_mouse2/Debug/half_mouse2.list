
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023f74  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  08024158  08024158  00034158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024a58  08024a58  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08024a58  08024a58  00034a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024a60  08024a60  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024a60  08024a60  00034a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08024a64  08024a64  00034a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08024a68  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f714  200001fc  08024c64  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000f910  08024c64  0004f910  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027893  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006069  00000000  00000000  00067abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd0  00000000  00000000  0006db28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  0006faf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028802  00000000  00000000  000717d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031dc7  00000000  00000000  00099fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb3eb  00000000  00000000  000cbd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7184  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a58  00000000  00000000  001b71d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0802413c 	.word	0x0802413c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0802413c 	.word	0x0802413c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
//float angle_R_database[ANGLE_MEAN_SIZE];

//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <reset_distance+0x5c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <reset_distance+0x60>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <reset_distance+0x64>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <reset_distance+0x68>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <reset_distance+0x6c>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <reset_distance+0x70>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <reset_distance+0x74>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <reset_distance+0x78>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <reset_distance+0x7c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <reset_distance+0x80>)
 8000fe4:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <reset_distance+0x84>)
 8000fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fec:	601a      	str	r2, [r3, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000224 	.word	0x20000224
 8001000:	20000230 	.word	0x20000230
 8001004:	20000234 	.word	0x20000234
 8001008:	20000240 	.word	0x20000240
 800100c:	20000244 	.word	0x20000244
 8001010:	20000250 	.word	0x20000250
 8001014:	20000254 	.word	0x20000254
 8001018:	20000260 	.word	0x20000260
 800101c:	3f59999a 	.word	0x3f59999a
 8001020:	20000264 	.word	0x20000264

08001024 <reset_speed>:

void reset_speed(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <reset_speed+0x4c>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <reset_speed+0x50>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <reset_speed+0x54>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <reset_speed+0x58>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <reset_speed+0x5c>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <reset_speed+0x60>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <reset_speed+0x64>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <reset_speed+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <reset_speed+0x6c>)
 8001060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000248 	.word	0x20000248
 8001074:	2000024c 	.word	0x2000024c
 8001078:	20000238 	.word	0x20000238
 800107c:	2000023c 	.word	0x2000023c
 8001080:	20000258 	.word	0x20000258
 8001084:	2000025c 	.word	0x2000025c
 8001088:	20000260 	.word	0x20000260
 800108c:	3f59999a 	.word	0x3f59999a
 8001090:	20000264 	.word	0x20000264
 8001094:	00000000 	.word	0x00000000

08001098 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	float angle_R_mean,angle_L_mean;
	angle_R=encoder_R-encoder_R0;
 80010a0:	4be5      	ldr	r3, [pc, #916]	; (8001438 <interupt_calEncoder+0x3a0>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4be5      	ldr	r3, [pc, #916]	; (800143c <interupt_calEncoder+0x3a4>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001440 <interupt_calEncoder+0x3a8>
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	dd07      	ble.n	80010d6 <interupt_calEncoder+0x3e>
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001444 <interupt_calEncoder+0x3ac>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8001448 <interupt_calEncoder+0x3b0>
 80010de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d507      	bpl.n	80010f8 <interupt_calEncoder+0x60>
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001444 <interupt_calEncoder+0x3ac>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010f8:	4bd4      	ldr	r3, [pc, #848]	; (800144c <interupt_calEncoder+0x3b4>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4bd4      	ldr	r3, [pc, #848]	; (8001450 <interupt_calEncoder+0x3b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eef1 7a67 	vneg.f32	s15, s15
 800110c:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001440 <interupt_calEncoder+0x3a8>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd07      	ble.n	8001132 <interupt_calEncoder+0x9a>
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001444 <interupt_calEncoder+0x3ac>
 800112a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112e:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001448 <interupt_calEncoder+0x3b0>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d507      	bpl.n	8001154 <interupt_calEncoder+0xbc>
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001444 <interupt_calEncoder+0x3ac>
 800114c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001150:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff fa1f 	bl	8000598 <__aeabi_f2d>
 800115a:	a39d      	add	r3, pc, #628	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa72 	bl	8000648 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001172:	f7ff fb93 	bl	800089c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a396      	add	r3, pc, #600	; (adr r3, 80013d8 <interupt_calEncoder+0x340>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa60 	bl	8000648 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a393      	add	r3, pc, #588	; (adr r3, 80013e0 <interupt_calEncoder+0x348>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a391      	add	r3, pc, #580	; (adr r3, 80013e8 <interupt_calEncoder+0x350>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa4e 	bl	8000648 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a38e      	add	r3, pc, #568	; (adr r3, 80013f0 <interupt_calEncoder+0x358>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb6f 	bl	800089c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4ba3      	ldr	r3, [pc, #652]	; (8001458 <interupt_calEncoder+0x3c0>)
 80011cc:	f7ff fa3c 	bl	8000648 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a387      	add	r3, pc, #540	; (adr r3, 80013f8 <interupt_calEncoder+0x360>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb5d 	bl	800089c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <interupt_calEncoder+0x3c4>)
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <interupt_calEncoder+0x3c8>)
 8001202:	f7ff fb4b 	bl	800089c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a37c      	add	r3, pc, #496	; (adr r3, 8001400 <interupt_calEncoder+0x368>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fa18 	bl	8000648 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a379      	add	r3, pc, #484	; (adr r3, 8001408 <interupt_calEncoder+0x370>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb39 	bl	800089c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123a:	f7ff fb2f 	bl	800089c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b86      	ldr	r3, [pc, #536]	; (8001464 <interupt_calEncoder+0x3cc>)
 800124c:	f7ff f9fc 	bl	8000648 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	a36d      	add	r3, pc, #436	; (adr r3, 8001410 <interupt_calEncoder+0x378>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff fb1d 	bl	800089c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	a36b      	add	r3, pc, #428	; (adr r3, 8001418 <interupt_calEncoder+0x380>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9ea 	bl	8000648 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4690      	mov	r8, r2
 800127a:	4699      	mov	r9, r3
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 800127c:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <interupt_calEncoder+0x3d0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f989 	bl	8000598 <__aeabi_f2d>
 8001286:	4604      	mov	r4, r0
 8001288:	460d      	mov	r5, r1
 800128a:	4b70      	ldr	r3, [pc, #448]	; (800144c <interupt_calEncoder+0x3b4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f982 	bl	8000598 <__aeabi_f2d>
 8001294:	a34e      	add	r3, pc, #312	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f9d5 	bl	8000648 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012ac:	f7ff faf6 	bl	800089c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b17 	vmov	d7, r2, r3
 80012b8:	eeb0 0a47 	vmov.f32	s0, s14
 80012bc:	eef0 0a67 	vmov.f32	s1, s15
 80012c0:	f021 fcea 	bl	8022c98 <sin>
 80012c4:	ec51 0b10 	vmov	r0, r1, d0
 80012c8:	a355      	add	r3, pc, #340	; (adr r3, 8001420 <interupt_calEncoder+0x388>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f9bb 	bl	8000648 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4692      	mov	sl, r2
 80012d8:	469b      	mov	fp, r3
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <interupt_calEncoder+0x3b4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f95a 	bl	8000598 <__aeabi_f2d>
 80012e4:	a33a      	add	r3, pc, #232	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f9ad 	bl	8000648 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b56      	ldr	r3, [pc, #344]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012fc:	f7ff face 	bl	800089c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	ec43 2b17 	vmov	d7, r2, r3
 8001308:	eeb0 0a47 	vmov.f32	s0, s14
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	f021 fc6e 	bl	8022bf0 <cos>
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	a343      	add	r3, pc, #268	; (adr r3, 8001428 <interupt_calEncoder+0x390>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f993 	bl	8000648 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4650      	mov	r0, sl
 8001328:	4659      	mov	r1, fp
 800132a:	f7fe ffd7 	bl	80002dc <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4692      	mov	sl, r2
 8001334:	469b      	mov	fp, r3

	+THETA_COMP_L3*sin(2*encoder_L*pi/180)+THETA_COMP_L4*cos(2*encoder_L*pi/180)));
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <interupt_calEncoder+0x3b4>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001340:	ee17 0a90 	vmov	r0, s15
 8001344:	f7ff f928 	bl	8000598 <__aeabi_f2d>
 8001348:	a321      	add	r3, pc, #132	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f97b 	bl	8000648 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001360:	f7ff fa9c 	bl	800089c <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b17 	vmov	d7, r2, r3
 800136c:	eeb0 0a47 	vmov.f32	s0, s14
 8001370:	eef0 0a67 	vmov.f32	s1, s15
 8001374:	f021 fc90 	bl	8022c98 <sin>
 8001378:	ec51 0b10 	vmov	r0, r1, d0
 800137c:	a32c      	add	r3, pc, #176	; (adr r3, 8001430 <interupt_calEncoder+0x398>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f961 	bl	8000648 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4650      	mov	r0, sl
 800138c:	4659      	mov	r1, fp
 800138e:	f7fe ffa5 	bl	80002dc <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4692      	mov	sl, r2
 8001398:	469b      	mov	fp, r3
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <interupt_calEncoder+0x3b4>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013a4:	ee17 0a90 	vmov	r0, s15
 80013a8:	f7ff f8f6 	bl	8000598 <__aeabi_f2d>
 80013ac:	a308      	add	r3, pc, #32	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f949 	bl	8000648 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <interupt_calEncoder+0x3bc>)
 80013c4:	f7ff fa6a 	bl	800089c <__aeabi_ddiv>
 80013c8:	e050      	b.n	800146c <interupt_calEncoder+0x3d4>
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	54411744 	.word	0x54411744
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	4e70a65b 	.word	0x4e70a65b
 80013dc:	3f882f36 	.word	0x3f882f36
 80013e0:	a858793e 	.word	0xa858793e
 80013e4:	3ff1cd35 	.word	0x3ff1cd35
 80013e8:	00000000 	.word	0x00000000
 80013ec:	4078c000 	.word	0x4078c000
 80013f0:	147ae148 	.word	0x147ae148
 80013f4:	4078fbae 	.word	0x4078fbae
 80013f8:	0a3d70a4 	.word	0x0a3d70a4
 80013fc:	4078efd7 	.word	0x4078efd7
 8001400:	00000000 	.word	0x00000000
 8001404:	4125eb2e 	.word	0x4125eb2e
 8001408:	33333333 	.word	0x33333333
 800140c:	4125f7be 	.word	0x4125f7be
 8001410:	d2f1a9fc 	.word	0xd2f1a9fc
 8001414:	3f50624d 	.word	0x3f50624d
 8001418:	d0353719 	.word	0xd0353719
 800141c:	409a862c 	.word	0x409a862c
 8001420:	aa14ef84 	.word	0xaa14ef84
 8001424:	400ca14f 	.word	0x400ca14f
 8001428:	74decf2e 	.word	0x74decf2e
 800142c:	c05a4d26 	.word	0xc05a4d26
 8001430:	19d7419b 	.word	0x19d7419b
 8001434:	c0710f5a 	.word	0xc0710f5a
 8001438:	200006dc 	.word	0x200006dc
 800143c:	20000218 	.word	0x20000218
 8001440:	43340000 	.word	0x43340000
 8001444:	43b40000 	.word	0x43b40000
 8001448:	c3340000 	.word	0xc3340000
 800144c:	200006e0 	.word	0x200006e0
 8001450:	2000021c 	.word	0x2000021c
 8001454:	40668000 	.word	0x40668000
 8001458:	40790000 	.word	0x40790000
 800145c:	40870800 	.word	0x40870800
 8001460:	40868000 	.word	0x40868000
 8001464:	408f4000 	.word	0x408f4000
 8001468:	20000264 	.word	0x20000264
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b17 	vmov	d7, r2, r3
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f021 fbb8 	bl	8022bf0 <cos>
 8001480:	ec51 0b10 	vmov	r0, r1, d0
 8001484:	a3fd      	add	r3, pc, #1012	; (adr r3, 800187c <interupt_calEncoder+0x7e4>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8dd 	bl	8000648 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4650      	mov	r0, sl
 8001494:	4659      	mov	r1, fp
 8001496:	f7fe ff21 	bl	80002dc <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 800149e:	4620      	mov	r0, r4
 80014a0:	4629      	mov	r1, r5
 80014a2:	f7ff f8d1 	bl	8000648 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	a3f5      	add	r3, pc, #980	; (adr r3, 8001884 <interupt_calEncoder+0x7ec>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7fe ff12 	bl	80002dc <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4640      	mov	r0, r8
 80014be:	4649      	mov	r1, r9
 80014c0:	f7ff f9ec 	bl	800089c <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb94 	bl	8000bf8 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 80014d2:	4adf      	ldr	r2, [pc, #892]	; (8001850 <interupt_calEncoder+0x7b8>)
 80014d4:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	a3c4      	add	r3, pc, #784	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f8b1 	bl	8000648 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4bd8      	ldr	r3, [pc, #864]	; (8001854 <interupt_calEncoder+0x7bc>)
 80014f4:	f7ff f9d2 	bl	800089c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	a3bd      	add	r3, pc, #756	; (adr r3, 80017f8 <interupt_calEncoder+0x760>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f89f 	bl	8000648 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	a3bb      	add	r3, pc, #748	; (adr r3, 8001800 <interupt_calEncoder+0x768>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f896 	bl	8000648 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	a3b8      	add	r3, pc, #736	; (adr r3, 8001808 <interupt_calEncoder+0x770>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f88d 	bl	8000648 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	a3b6      	add	r3, pc, #728	; (adr r3, 8001810 <interupt_calEncoder+0x778>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f9ae 	bl	800089c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4bc2      	ldr	r3, [pc, #776]	; (8001858 <interupt_calEncoder+0x7c0>)
 800154e:	f7ff f87b 	bl	8000648 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	a3af      	add	r3, pc, #700	; (adr r3, 8001818 <interupt_calEncoder+0x780>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f99c 	bl	800089c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4bba      	ldr	r3, [pc, #744]	; (800185c <interupt_calEncoder+0x7c4>)
 8001572:	f7ff f869 	bl	8000648 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <interupt_calEncoder+0x7c8>)
 8001584:	f7ff f98a 	bl	800089c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f980 	bl	800089c <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4bae      	ldr	r3, [pc, #696]	; (8001864 <interupt_calEncoder+0x7cc>)
 80015aa:	f7ff f84d 	bl	8000648 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	a39a      	add	r3, pc, #616	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff f96e 	bl	800089c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	a397      	add	r3, pc, #604	; (adr r3, 8001828 <interupt_calEncoder+0x790>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4690      	mov	r8, r2
 80015d8:	4699      	mov	r9, r3
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 80015da:	4ba3      	ldr	r3, [pc, #652]	; (8001868 <interupt_calEncoder+0x7d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffda 	bl	8000598 <__aeabi_f2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
 80015e8:	4ba0      	ldr	r3, [pc, #640]	; (800186c <interupt_calEncoder+0x7d4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffd3 	bl	8000598 <__aeabi_f2d>
 80015f2:	a37f      	add	r3, pc, #508	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f826 	bl	8000648 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <interupt_calEncoder+0x7bc>)
 800160a:	f7ff f947 	bl	800089c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ec43 2b17 	vmov	d7, r2, r3
 8001616:	eeb0 0a47 	vmov.f32	s0, s14
 800161a:	eef0 0a67 	vmov.f32	s1, s15
 800161e:	f021 fb3b 	bl	8022c98 <sin>
 8001622:	ec51 0b10 	vmov	r0, r1, d0
 8001626:	a382      	add	r3, pc, #520	; (adr r3, 8001830 <interupt_calEncoder+0x798>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f80c 	bl	8000648 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4692      	mov	sl, r2
 8001636:	469b      	mov	fp, r3
 8001638:	4b8c      	ldr	r3, [pc, #560]	; (800186c <interupt_calEncoder+0x7d4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ffab 	bl	8000598 <__aeabi_f2d>
 8001642:	a36b      	add	r3, pc, #428	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe fffe 	bl	8000648 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <interupt_calEncoder+0x7bc>)
 800165a:	f7ff f91f 	bl	800089c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	ec43 2b17 	vmov	d7, r2, r3
 8001666:	eeb0 0a47 	vmov.f32	s0, s14
 800166a:	eef0 0a67 	vmov.f32	s1, s15
 800166e:	f021 fabf 	bl	8022bf0 <cos>
 8001672:	ec51 0b10 	vmov	r0, r1, d0
 8001676:	a370      	add	r3, pc, #448	; (adr r3, 8001838 <interupt_calEncoder+0x7a0>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ffe4 	bl	8000648 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4650      	mov	r0, sl
 8001686:	4659      	mov	r1, fp
 8001688:	f7fe fe28 	bl	80002dc <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4692      	mov	sl, r2
 8001692:	469b      	mov	fp, r3
							  +THETA_COMP_R3*sin(2*encoder_R*pi/180)+THETA_COMP_R4*cos(2*encoder_R*pi/180)));
 8001694:	4b75      	ldr	r3, [pc, #468]	; (800186c <interupt_calEncoder+0x7d4>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f7fe ff79 	bl	8000598 <__aeabi_f2d>
 80016a6:	a352      	add	r3, pc, #328	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe ffcc 	bl	8000648 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b65      	ldr	r3, [pc, #404]	; (8001854 <interupt_calEncoder+0x7bc>)
 80016be:	f7ff f8ed 	bl	800089c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ec43 2b17 	vmov	d7, r2, r3
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	eef0 0a67 	vmov.f32	s1, s15
 80016d2:	f021 fae1 	bl	8022c98 <sin>
 80016d6:	ec51 0b10 	vmov	r0, r1, d0
 80016da:	a359      	add	r3, pc, #356	; (adr r3, 8001840 <interupt_calEncoder+0x7a8>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4650      	mov	r0, sl
 80016ea:	4659      	mov	r1, fp
 80016ec:	f7fe fdf6 	bl	80002dc <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4692      	mov	sl, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	4b5c      	ldr	r3, [pc, #368]	; (800186c <interupt_calEncoder+0x7d4>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001702:	ee17 0a90 	vmov	r0, s15
 8001706:	f7fe ff47 	bl	8000598 <__aeabi_f2d>
 800170a:	a339      	add	r3, pc, #228	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff9a 	bl	8000648 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <interupt_calEncoder+0x7bc>)
 8001722:	f7ff f8bb 	bl	800089c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ec43 2b17 	vmov	d7, r2, r3
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f021 fa5b 	bl	8022bf0 <cos>
 800173a:	ec51 0b10 	vmov	r0, r1, d0
 800173e:	a342      	add	r3, pc, #264	; (adr r3, 8001848 <interupt_calEncoder+0x7b0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff80 	bl	8000648 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4650      	mov	r0, sl
 800174e:	4659      	mov	r1, fp
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe ff74 	bl	8000648 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	a32f      	add	r3, pc, #188	; (adr r3, 8001828 <interupt_calEncoder+0x790>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe fdb5 	bl	80002dc <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4640      	mov	r0, r8
 8001778:	4649      	mov	r1, r9
 800177a:	f7ff f88f 	bl	800089c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa37 	bl	8000bf8 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 800178c:	4a38      	ldr	r2, [pc, #224]	; (8001870 <interupt_calEncoder+0x7d8>)
 800178e:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <interupt_calEncoder+0x7dc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feff 	bl	8000598 <__aeabi_f2d>
 800179a:	4604      	mov	r4, r0
 800179c:	460d      	mov	r5, r1
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <interupt_calEncoder+0x7b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fef8 	bl	8000598 <__aeabi_f2d>
 80017a8:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff4b 	bl	8000648 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd8f 	bl	80002dc <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa17 	bl	8000bf8 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a29      	ldr	r2, [pc, #164]	; (8001874 <interupt_calEncoder+0x7dc>)
 80017ce:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <interupt_calEncoder+0x7e0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedf 	bl	8000598 <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <interupt_calEncoder+0x7d8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fed8 	bl	8000598 <__aeabi_f2d>
 80017e8:	e050      	b.n	800188c <interupt_calEncoder+0x7f4>
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	54411744 	.word	0x54411744
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	4e70a65b 	.word	0x4e70a65b
 80017fc:	3f882f36 	.word	0x3f882f36
 8001800:	a858793e 	.word	0xa858793e
 8001804:	3ff1cd35 	.word	0x3ff1cd35
 8001808:	00000000 	.word	0x00000000
 800180c:	4078c000 	.word	0x4078c000
 8001810:	147ae148 	.word	0x147ae148
 8001814:	4078fbae 	.word	0x4078fbae
 8001818:	5c28f5c3 	.word	0x5c28f5c3
 800181c:	40792a8f 	.word	0x40792a8f
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	3f50624d 	.word	0x3f50624d
 8001828:	11d3671b 	.word	0x11d3671b
 800182c:	409c0a10 	.word	0x409c0a10
 8001830:	27aee802 	.word	0x27aee802
 8001834:	c0234be5 	.word	0xc0234be5
 8001838:	578a2a91 	.word	0x578a2a91
 800183c:	405f0f59 	.word	0x405f0f59
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	404d0ccc 	.word	0x404d0ccc
 8001848:	45e8419d 	.word	0x45e8419d
 800184c:	4075ef32 	.word	0x4075ef32
 8001850:	20000228 	.word	0x20000228
 8001854:	40668000 	.word	0x40668000
 8001858:	40790000 	.word	0x40790000
 800185c:	40870800 	.word	0x40870800
 8001860:	40868000 	.word	0x40868000
 8001864:	408f4000 	.word	0x408f4000
 8001868:	20000264 	.word	0x20000264
 800186c:	200006dc 	.word	0x200006dc
 8001870:	2000022c 	.word	0x2000022c
 8001874:	20000220 	.word	0x20000220
 8001878:	20000224 	.word	0x20000224
 800187c:	a96b73c1 	.word	0xa96b73c1
 8001880:	4058baae 	.word	0x4058baae
 8001884:	d0353719 	.word	0xd0353719
 8001888:	409a862c 	.word	0x409a862c
 800188c:	a315      	add	r3, pc, #84	; (adr r3, 80018e4 <interupt_calEncoder+0x84c>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fed9 	bl	8000648 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <interupt_calEncoder+0x838>)
 80018b2:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <interupt_calEncoder+0x83c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <interupt_calEncoder+0x840>)
 80018ba:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <interupt_calEncoder+0x844>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <interupt_calEncoder+0x848>)
 80018c2:	6013      	str	r3, [r2, #0]

}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ce:	bf00      	nop
 80018d0:	20000224 	.word	0x20000224
 80018d4:	200006e0 	.word	0x200006e0
 80018d8:	2000021c 	.word	0x2000021c
 80018dc:	200006dc 	.word	0x200006dc
 80018e0:	20000218 	.word	0x20000218
 80018e4:	d2f1a9fc 	.word	0xd2f1a9fc
 80018e8:	3f50624d 	.word	0x3f50624d
 80018ec:	00000000 	.word	0x00000000

080018f0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80018f6:	4ba4      	ldr	r3, [pc, #656]	; (8001b88 <interupt_calFusion+0x298>)
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <interupt_calFusion+0x29c>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <interupt_calFusion+0x298>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001910:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <interupt_calFusion+0x2a0>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001922:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <interupt_calFusion+0x29c>)
 8001924:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001928:	4b97      	ldr	r3, [pc, #604]	; (8001b88 <interupt_calFusion+0x298>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b99      	ldr	r3, [pc, #612]	; (8001b94 <interupt_calFusion+0x2a4>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001938:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <interupt_calFusion+0x298>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001942:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001946:	4b94      	ldr	r3, [pc, #592]	; (8001b98 <interupt_calFusion+0x2a8>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <interupt_calFusion+0x2a4>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800195a:	4b90      	ldr	r3, [pc, #576]	; (8001b9c <interupt_calFusion+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe1a 	bl	8000598 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <interupt_calFusion+0x29c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a383      	add	r3, pc, #524	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe fcaa 	bl	80002dc <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f932 	bl	8000bf8 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4a81      	ldr	r2, [pc, #516]	; (8001b9c <interupt_calFusion+0x2ac>)
 8001998:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800199a:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <interupt_calFusion+0x2b0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdfa 	bl	8000598 <__aeabi_f2d>
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <interupt_calFusion+0x2a4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdf3 	bl	8000598 <__aeabi_f2d>
 80019b2:	a373      	add	r3, pc, #460	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe46 	bl	8000648 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc8a 	bl	80002dc <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f912 	bl	8000bf8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a72      	ldr	r2, [pc, #456]	; (8001ba0 <interupt_calFusion+0x2b0>)
 80019d8:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 80019da:	4b6b      	ldr	r3, [pc, #428]	; (8001b88 <interupt_calFusion+0x298>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdda 	bl	8000598 <__aeabi_f2d>
 80019e4:	4604      	mov	r4, r0
 80019e6:	460d      	mov	r5, r1
 80019e8:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <interupt_calFusion+0x2b4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdd3 	bl	8000598 <__aeabi_f2d>
 80019f2:	4680      	mov	r8, r0
 80019f4:	4689      	mov	r9, r1
 80019f6:	4b6c      	ldr	r3, [pc, #432]	; (8001ba8 <interupt_calFusion+0x2b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdcc 	bl	8000598 <__aeabi_f2d>
 8001a00:	a35f      	add	r3, pc, #380	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fe1f 	bl	8000648 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4649      	mov	r1, r9
 8001a12:	f7fe fc63 	bl	80002dc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe fe13 	bl	8000648 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4614      	mov	r4, r2
 8001a28:	461d      	mov	r5, r3
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <interupt_calFusion+0x298>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a38:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <interupt_calFusion+0x2a0>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fda7 	bl	8000598 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7fe fc43 	bl	80002dc <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8cb 	bl	8000bf8 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <interupt_calFusion+0x2b4>)
 8001a66:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <interupt_calFusion+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd93 	bl	8000598 <__aeabi_f2d>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <interupt_calFusion+0x2b4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd8c 	bl	8000598 <__aeabi_f2d>
 8001a80:	4680      	mov	r8, r0
 8001a82:	4689      	mov	r9, r1
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <interupt_calFusion+0x2b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd85 	bl	8000598 <__aeabi_f2d>
 8001a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fdd8 	bl	8000648 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	f7fe fc1c 	bl	80002dc <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fdcc 	bl	8000648 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <interupt_calFusion+0x298>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <interupt_calFusion+0x2a8>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	ee17 0a90 	vmov	r0, s15
 8001ad4:	f7fe fd60 	bl	8000598 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fbfc 	bl	80002dc <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f884 	bl	8000bf8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <interupt_calFusion+0x2bc>)
 8001af4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <interupt_calFusion+0x2c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd4c 	bl	8000598 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <interupt_calFusion+0x2b4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd45 	bl	8000598 <__aeabi_f2d>
 8001b0e:	a31c      	add	r3, pc, #112	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd98 	bl	8000648 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fbdc 	bl	80002dc <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f864 	bl	8000bf8 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <interupt_calFusion+0x2c0>)
 8001b34:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <interupt_calFusion+0x2c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd2c 	bl	8000598 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <interupt_calFusion+0x2bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	a30c      	add	r3, pc, #48	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd78 	bl	8000648 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fbbc 	bl	80002dc <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f844 	bl	8000bf8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <interupt_calFusion+0x2c4>)
 8001b74:	6013      	str	r3, [r2, #0]

}
 8001b76:	bf00      	nop
 8001b78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b7c:	f3af 8000 	nop.w
 8001b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b84:	3f50624d 	.word	0x3f50624d
 8001b88:	20000260 	.word	0x20000260
 8001b8c:	20000238 	.word	0x20000238
 8001b90:	20000228 	.word	0x20000228
 8001b94:	2000023c 	.word	0x2000023c
 8001b98:	2000022c 	.word	0x2000022c
 8001b9c:	20000230 	.word	0x20000230
 8001ba0:	20000234 	.word	0x20000234
 8001ba4:	20000258 	.word	0x20000258
 8001ba8:	20000284 	.word	0x20000284
 8001bac:	2000025c 	.word	0x2000025c
 8001bb0:	20000250 	.word	0x20000250
 8001bb4:	20000254 	.word	0x20000254

08001bb8 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	int s = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <reset_gyro+0xfc>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <reset_gyro+0x100>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	e026      	b.n	8001c26 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <reset_gyro+0x104>)
 8001bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <reset_gyro+0x100>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <reset_gyro+0x100>)
 8001bea:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <reset_gyro+0x104>)
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <reset_gyro+0x108>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <reset_gyro+0x108>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <reset_gyro+0x104>)
 8001c06:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <reset_gyro+0x10c>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <reset_gyro+0x10c>)
 8001c16:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f006 fbdc 	bl	80083d8 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3301      	adds	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2c:	ddd4      	ble.n	8001bd8 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <reset_gyro+0x100>)
 8001c30:	ed93 7a00 	vldr	s14, [r3]
 8001c34:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001cc8 <reset_gyro+0x110>
 8001c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <reset_gyro+0x100>)
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <reset_gyro+0x108>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001cc8 <reset_gyro+0x110>
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <reset_gyro+0x108>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <reset_gyro+0x10c>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001cc8 <reset_gyro+0x110>
 8001c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <reset_gyro+0x10c>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <reset_gyro+0xfc>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <reset_gyro+0x114>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <reset_gyro+0x118>)
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <reset_gyro+0x11c>)
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	e009      	b.n	8001ca4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <reset_gyro+0x120>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	ddf2      	ble.n	8001c90 <reset_gyro+0xd8>
	}
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000268 	.word	0x20000268
 8001cb8:	2000028c 	.word	0x2000028c
 8001cbc:	200006e8 	.word	0x200006e8
 8001cc0:	20000288 	.word	0x20000288
 8001cc4:	20000290 	.word	0x20000290
 8001cc8:	447a0000 	.word	0x447a0000
 8001ccc:	20000270 	.word	0x20000270
 8001cd0:	2000027c 	.word	0x2000027c
 8001cd4:	20000280 	.word	0x20000280
 8001cd8:	20000294 	.word	0x20000294
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	int j = 9;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001cea:	2309      	movs	r3, #9
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	e00d      	b.n	8001d0c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4aa6      	ldr	r2, [pc, #664]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	49a4      	ldr	r1, [pc, #656]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dcee      	bgt.n	8001cf0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001d12:	4ba0      	ldr	r3, [pc, #640]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001d14:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d18:	4b9f      	ldr	r3, [pc, #636]	; (8001f98 <interrupt_calGyro+0x2b8>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fc37 	bl	8000598 <__aeabi_f2d>
 8001d2a:	a387      	add	r3, pc, #540	; (adr r3, 8001f48 <interrupt_calGyro+0x268>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fc8a 	bl	8000648 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	a384      	add	r3, pc, #528	; (adr r3, 8001f50 <interrupt_calGyro+0x270>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fc81 	bl	8000648 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	a382      	add	r3, pc, #520	; (adr r3, 8001f58 <interrupt_calGyro+0x278>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fda2 	bl	800089c <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff4a 	bl	8000bf8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a8a      	ldr	r2, [pc, #552]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001d68:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a8b      	ldr	r2, [pc, #556]	; (8001f9c <interrupt_calGyro+0x2bc>)
 8001d70:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001d72:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a8a      	ldr	r2, [pc, #552]	; (8001fa0 <interrupt_calGyro+0x2c0>)
 8001d78:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001d7a:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001d7c:	ed93 7a00 	vldr	s14, [r3]
 8001d80:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <interrupt_calGyro+0x2c4>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <interrupt_calGyro+0x2c8>)
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001d90:	4b86      	ldr	r3, [pc, #536]	; (8001fac <interrupt_calGyro+0x2cc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbff 	bl	8000598 <__aeabi_f2d>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	460d      	mov	r5, r1
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <interrupt_calGyro+0x2bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbf8 	bl	8000598 <__aeabi_f2d>
 8001da8:	a36d      	add	r3, pc, #436	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fc4b 	bl	8000648 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fa8f 	bl	80002dc <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe ff17 	bl	8000bf8 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a77      	ldr	r2, [pc, #476]	; (8001fac <interrupt_calGyro+0x2cc>)
 8001dce:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001dd0:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <interrupt_calGyro+0x2d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fbdf 	bl	8000598 <__aeabi_f2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <interrupt_calGyro+0x2c4>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dee:	ee17 0a90 	vmov	r0, s15
 8001df2:	f7fe fbd1 	bl	8000598 <__aeabi_f2d>
 8001df6:	a35a      	add	r3, pc, #360	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc24 	bl	8000648 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fa68 	bl	80002dc <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fef0 	bl	8000bf8 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <interrupt_calGyro+0x2d0>)
 8001e1c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001e20:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e24:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <interrupt_calGyro+0x2d4>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f7fe fbb1 	bl	8000598 <__aeabi_f2d>
 8001e36:	a34c      	add	r3, pc, #304	; (adr r3, 8001f68 <interrupt_calGyro+0x288>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fc04 	bl	8000648 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	a349      	add	r3, pc, #292	; (adr r3, 8001f70 <interrupt_calGyro+0x290>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fbfb 	bl	8000648 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	a347      	add	r3, pc, #284	; (adr r3, 8001f78 <interrupt_calGyro+0x298>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fd1c 	bl	800089c <__aeabi_ddiv>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <interrupt_calGyro+0x2d8>)
 8001e72:	f7fe fbe9 	bl	8000648 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	a340      	add	r3, pc, #256	; (adr r3, 8001f80 <interrupt_calGyro+0x2a0>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fd0a 	bl	800089c <__aeabi_ddiv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <interrupt_calGyro+0x2dc>)
 8001e96:	f7fe fbd7 	bl	8000648 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	a339      	add	r3, pc, #228	; (adr r3, 8001f88 <interrupt_calGyro+0x2a8>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fbce 	bl	8000648 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fea0 	bl	8000bf8 <__aeabi_d2f>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a41      	ldr	r2, [pc, #260]	; (8001fc0 <interrupt_calGyro+0x2e0>)
 8001ebc:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <interrupt_calGyro+0x2e4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb68 	bl	8000598 <__aeabi_f2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <interrupt_calGyro+0x2e0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb61 	bl	8000598 <__aeabi_f2d>
 8001ed6:	a322      	add	r3, pc, #136	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fbb4 	bl	8000648 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f9f8 	bl	80002dc <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fe80 	bl	8000bf8 <__aeabi_d2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <interrupt_calGyro+0x2e4>)
 8001efc:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <interrupt_calGyro+0x2e8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb48 	bl	8000598 <__aeabi_f2d>
 8001f08:	4604      	mov	r4, r0
 8001f0a:	460d      	mov	r5, r1
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <interrupt_calGyro+0x2e4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fb41 	bl	8000598 <__aeabi_f2d>
 8001f16:	a312      	add	r3, pc, #72	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb94 	bl	8000648 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4620      	mov	r0, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7fe f9d8 	bl	80002dc <__adddf3>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7fe fe60 	bl	8000bf8 <__aeabi_d2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <interrupt_calGyro+0x2e8>)
 8001f3c:	6013      	str	r3, [r2, #0]




}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdb0      	pop	{r4, r5, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	70a3d70a 	.word	0x70a3d70a
 8001f4c:	3fef0a3d 	.word	0x3fef0a3d
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40acd400 	.word	0x40acd400
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40ac2000 	.word	0x40ac2000
 8001f60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f64:	3f50624d 	.word	0x3f50624d
 8001f68:	0fcf80dc 	.word	0x0fcf80dc
 8001f6c:	3ff0a423 	.word	0x3ff0a423
 8001f70:	00000000 	.word	0x00000000
 8001f74:	4078c000 	.word	0x4078c000
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	4077d000 	.word	0x4077d000
 8001f80:	00000000 	.word	0x00000000
 8001f84:	407a7000 	.word	0x407a7000
 8001f88:	3a92a305 	.word	0x3a92a305
 8001f8c:	40239d01 	.word	0x40239d01
 8001f90:	20000294 	.word	0x20000294
 8001f94:	200006e8 	.word	0x200006e8
 8001f98:	2000028c 	.word	0x2000028c
 8001f9c:	2000026c 	.word	0x2000026c
 8001fa0:	20000274 	.word	0x20000274
 8001fa4:	20000288 	.word	0x20000288
 8001fa8:	20000278 	.word	0x20000278
 8001fac:	20000268 	.word	0x20000268
 8001fb0:	20000270 	.word	0x20000270
 8001fb4:	20000290 	.word	0x20000290
 8001fb8:	40790000 	.word	0x40790000
 8001fbc:	408f4000 	.word	0x408f4000
 8001fc0:	20000284 	.word	0x20000284
 8001fc4:	2000027c 	.word	0x2000027c
 8001fc8:	20000280 	.word	0x20000280
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	e00f      	b.n	8001ffc <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001fdc:	f005 ffa0 	bl	8007f20 <pl_getbatt>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <battcheak+0xe8>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f006 f9ad 	bl	8008350 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b13      	cmp	r3, #19
 8002000:	ddec      	ble.n	8001fdc <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <battcheak+0xec>)
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	e010      	b.n	8002032 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8002010:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <battcheak+0xe8>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <battcheak+0xec>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <battcheak+0xec>)
 8002028:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b13      	cmp	r3, #19
 8002036:	ddeb      	ble.n	8002010 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <battcheak+0xec>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <battcheak+0xec>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <battcheak+0xec>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe faa1 	bl	8000598 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <battcheak+0xf0>)
 800205c:	f01e fbba 	bl	80207d4 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <battcheak+0xec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa97 	bl	8000598 <__aeabi_f2d>
 800206a:	a311      	add	r3, pc, #68	; (adr r3, 80020b0 <battcheak+0xe0>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fd66 	bl	8000b40 <__aeabi_dcmple>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d100      	bne.n	800207c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 800207a:	e014      	b.n	80020a6 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 800207c:	2001      	movs	r0, #1
 800207e:	f005 f9d7 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8002082:	2001      	movs	r0, #1
 8002084:	f005 f9e6 	bl	8007454 <pl_l_blue_LED>
		wait_ms(500);
 8002088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800208c:	f006 f960 	bl	8008350 <wait_ms>
		pl_r_blue_LED(OFF);
 8002090:	2000      	movs	r0, #0
 8002092:	f005 f9cd 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8002096:	2000      	movs	r0, #0
 8002098:	f005 f9dc 	bl	8007454 <pl_l_blue_LED>
		wait_ms(500);
 800209c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020a0:	f006 f956 	bl	8008350 <wait_ms>
		pl_r_blue_LED(ON);
 80020a4:	e7ea      	b.n	800207c <battcheak+0xac>
}
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	f3af 8000 	nop.w
 80020b0:	9999999a 	.word	0x9999999a
 80020b4:	400d9999 	.word	0x400d9999
 80020b8:	20000488 	.word	0x20000488
 80020bc:	200004d8 	.word	0x200004d8
 80020c0:	08024158 	.word	0x08024158

080020c4 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 80020ca:	f006 f8c7 	bl	800825c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 80020ce:	2313      	movs	r3, #19
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e037      	b.n	8002144 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <interupt_calSensor+0x170>)
 80020da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020de:	4955      	ldr	r1, [pc, #340]	; (8002234 <interupt_calSensor+0x170>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <interupt_calSensor+0x170>)
 80020ec:	3314      	adds	r3, #20
 80020ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020f2:	4950      	ldr	r1, [pc, #320]	; (8002234 <interupt_calSensor+0x170>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3314      	adds	r3, #20
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <interupt_calSensor+0x170>)
 8002102:	3328      	adds	r3, #40	; 0x28
 8002104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002108:	494a      	ldr	r1, [pc, #296]	; (8002234 <interupt_calSensor+0x170>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3328      	adds	r3, #40	; 0x28
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3b01      	subs	r3, #1
 8002116:	4a47      	ldr	r2, [pc, #284]	; (8002234 <interupt_calSensor+0x170>)
 8002118:	333c      	adds	r3, #60	; 0x3c
 800211a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800211e:	4945      	ldr	r1, [pc, #276]	; (8002234 <interupt_calSensor+0x170>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	333c      	adds	r3, #60	; 0x3c
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <interupt_calSensor+0x170>)
 800212e:	3350      	adds	r3, #80	; 0x50
 8002130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002134:	493f      	ldr	r1, [pc, #252]	; (8002234 <interupt_calSensor+0x170>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3350      	adds	r3, #80	; 0x50
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3b01      	subs	r3, #1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	dcc4      	bgt.n	80020d4 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <interupt_calSensor+0x174>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <interupt_calSensor+0x178>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a37      	ldr	r2, [pc, #220]	; (8002234 <interupt_calSensor+0x170>)
 8002158:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <interupt_calSensor+0x174>)
 800215c:	885b      	ldrh	r3, [r3, #2]
 800215e:	461a      	mov	r2, r3
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <interupt_calSensor+0x178>)
 8002162:	885b      	ldrh	r3, [r3, #2]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a33      	ldr	r2, [pc, #204]	; (8002234 <interupt_calSensor+0x170>)
 8002168:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <interupt_calSensor+0x174>)
 800216c:	889b      	ldrh	r3, [r3, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <interupt_calSensor+0x178>)
 8002172:	889b      	ldrh	r3, [r3, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <interupt_calSensor+0x170>)
 8002178:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <interupt_calSensor+0x174>)
 800217e:	88db      	ldrh	r3, [r3, #6]
 8002180:	461a      	mov	r2, r3
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <interupt_calSensor+0x178>)
 8002184:	88db      	ldrh	r3, [r3, #6]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <interupt_calSensor+0x170>)
 800218a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <interupt_calSensor+0x174>)
 8002190:	891b      	ldrh	r3, [r3, #8]
 8002192:	461a      	mov	r2, r3
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <interupt_calSensor+0x178>)
 8002196:	891b      	ldrh	r3, [r3, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <interupt_calSensor+0x170>)
 800219c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	e03d      	b.n	8002222 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 80021a6:	4923      	ldr	r1, [pc, #140]	; (8002234 <interupt_calSensor+0x170>)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	440b      	add	r3, r1
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <interupt_calSensor+0x170>)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	4403      	add	r3, r0
 80021c4:	332c      	adds	r3, #44	; 0x2c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1aca      	subs	r2, r1, r3
 80021ca:	491d      	ldr	r1, [pc, #116]	; (8002240 <interupt_calSensor+0x17c>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 80021d2:	4918      	ldr	r1, [pc, #96]	; (8002234 <interupt_calSensor+0x170>)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	440b      	add	r3, r1
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	4814      	ldr	r0, [pc, #80]	; (8002234 <interupt_calSensor+0x170>)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4403      	add	r3, r0
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4419      	add	r1, r3
 80021f6:	480f      	ldr	r0, [pc, #60]	; (8002234 <interupt_calSensor+0x170>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4403      	add	r3, r0
 8002204:	3308      	adds	r3, #8
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	440b      	add	r3, r1
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <interupt_calSensor+0x180>)
 800220c:	fb82 1203 	smull	r1, r2, r2, r3
 8002210:	17db      	asrs	r3, r3, #31
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <interupt_calSensor+0x184>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3301      	adds	r3, #1
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b04      	cmp	r3, #4
 8002226:	ddbe      	ble.n	80021a6 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200002bc 	.word	0x200002bc
 8002238:	20000710 	.word	0x20000710
 800223c:	2000071c 	.word	0x2000071c
 8002240:	2000044c 	.word	0x2000044c
 8002244:	55555556 	.word	0x55555556
 8002248:	20000474 	.word	0x20000474

0800224c <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

	modeacc = 0;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <Control_mode_Init+0x28>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <Control_mode_Init+0x2c>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <Control_mode_Init+0x30>)
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <Control_mode_Init+0x34>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]

}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	2000052c 	.word	0x2000052c
 8002278:	20000809 	.word	0x20000809
 800227c:	20000804 	.word	0x20000804
 8002280:	2000052d 	.word	0x2000052d

08002284 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	ed87 0a03 	vstr	s0, [r7, #12]
 800228e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8002296:	edd7 7a03 	vldr	s15, [r7, #12]
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	db14      	blt.n	80022ce <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f005 fd71 	bl	8007d8c <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <get_duty+0x11c>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80022b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80023a4 <get_duty+0x120>
 80022bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 2a90 	vmov	r2, s15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e015      	b.n	80022fa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f005 fd5c 	bl	8007d8c <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 80022d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d8:	eef1 6a67 	vneg.f32	s13, s15
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <get_duty+0x11c>)
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80023a4 <get_duty+0x120>
 80022ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f2:	ee17 2a90 	vmov	r2, s15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 80022fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	db14      	blt.n	8002332 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8002308:	2001      	movs	r0, #1
 800230a:	f005 fd67 	bl	8007ddc <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <get_duty+0x11c>)
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	edd7 6a02 	vldr	s13, [r7, #8]
 8002318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80023a4 <get_duty+0x120>
 8002320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002328:	ee17 2a90 	vmov	r2, s15
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e015      	b.n	800235e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8002332:	2002      	movs	r0, #2
 8002334:	f005 fd52 	bl	8007ddc <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8002338:	edd7 7a02 	vldr	s15, [r7, #8]
 800233c:	eef1 6a67 	vneg.f32	s13, s15
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <get_duty+0x11c>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80023a4 <get_duty+0x120>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002356:	ee17 2a90 	vmov	r2, s15
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f240 628c 	movw	r2, #1676	; 0x68c
 8002376:	4293      	cmp	r3, r2
 8002378:	dd03      	ble.n	8002382 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f240 628d 	movw	r2, #1677	; 0x68d
 8002380:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f240 628c 	movw	r2, #1676	; 0x68c
 800238a:	4293      	cmp	r3, r2
 800238c:	dd03      	ble.n	8002396 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f240 628d 	movw	r2, #1677	; 0x68d
 8002394:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200004d8 	.word	0x200004d8
 80023a4:	44d1e000 	.word	0x44d1e000

080023a8 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 80023a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ac:	b08c      	sub	sp, #48	; 0x30
 80023ae:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 80023d6:	4bd2      	ldr	r3, [pc, #840]	; (8002720 <interupt_DriveMotor+0x378>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 80023de:	4bd1      	ldr	r3, [pc, #836]	; (8002724 <interupt_DriveMotor+0x37c>)
 80023e0:	2204      	movs	r2, #4
 80023e2:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 80023e4:	4bd0      	ldr	r3, [pc, #832]	; (8002728 <interupt_DriveMotor+0x380>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80023ea:	4bd0      	ldr	r3, [pc, #832]	; (800272c <interupt_DriveMotor+0x384>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 80023f0:	4bcb      	ldr	r3, [pc, #812]	; (8002720 <interupt_DriveMotor+0x378>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	f040 828f 	bne.w	8002918 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 80023fa:	4bcc      	ldr	r3, [pc, #816]	; (800272c <interupt_DriveMotor+0x384>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002400:	4bcb      	ldr	r3, [pc, #812]	; (8002730 <interupt_DriveMotor+0x388>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4aca      	ldr	r2, [pc, #808]	; (8002730 <interupt_DriveMotor+0x388>)
 8002408:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800240a:	4bca      	ldr	r3, [pc, #808]	; (8002734 <interupt_DriveMotor+0x38c>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f8c2 	bl	8000598 <__aeabi_f2d>
 8002414:	4604      	mov	r4, r0
 8002416:	460d      	mov	r5, r1
 8002418:	4bc6      	ldr	r3, [pc, #792]	; (8002734 <interupt_DriveMotor+0x38c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8bb 	bl	8000598 <__aeabi_f2d>
 8002422:	a3bb      	add	r3, pc, #748	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f90e 	bl	8000648 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4690      	mov	r8, r2
 8002432:	4699      	mov	r9, r3
 8002434:	4bbf      	ldr	r3, [pc, #764]	; (8002734 <interupt_DriveMotor+0x38c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	a3b4      	add	r3, pc, #720	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f900 	bl	8000648 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	a3af      	add	r3, pc, #700	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe f8f7 	bl	8000648 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800246a:	f7fe fa17 	bl	800089c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4640      	mov	r0, r8
 8002474:	4649      	mov	r1, r9
 8002476:	f7fd ff31 	bl	80002dc <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fd ff2b 	bl	80002dc <__adddf3>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fbb3 	bl	8000bf8 <__aeabi_d2f>
 8002492:	4603      	mov	r3, r0
 8002494:	4aa7      	ldr	r2, [pc, #668]	; (8002734 <interupt_DriveMotor+0x38c>)
 8002496:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002498:	4ba6      	ldr	r3, [pc, #664]	; (8002734 <interupt_DriveMotor+0x38c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f87b 	bl	8000598 <__aeabi_f2d>
 80024a2:	4604      	mov	r4, r0
 80024a4:	460d      	mov	r5, r1
 80024a6:	4ba3      	ldr	r3, [pc, #652]	; (8002734 <interupt_DriveMotor+0x38c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f874 	bl	8000598 <__aeabi_f2d>
 80024b0:	a397      	add	r3, pc, #604	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe f8c7 	bl	8000648 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd ff0b 	bl	80002dc <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7fe fb93 	bl	8000bf8 <__aeabi_d2f>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a97      	ldr	r2, [pc, #604]	; (8002734 <interupt_DriveMotor+0x38c>)
 80024d6:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024d8:	4b97      	ldr	r3, [pc, #604]	; (8002738 <interupt_DriveMotor+0x390>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f85b 	bl	8000598 <__aeabi_f2d>
 80024e2:	4604      	mov	r4, r0
 80024e4:	460d      	mov	r5, r1
 80024e6:	4b94      	ldr	r3, [pc, #592]	; (8002738 <interupt_DriveMotor+0x390>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f854 	bl	8000598 <__aeabi_f2d>
 80024f0:	a387      	add	r3, pc, #540	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f8a7 	bl	8000648 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4690      	mov	r8, r2
 8002500:	4699      	mov	r9, r3
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <interupt_DriveMotor+0x390>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f846 	bl	8000598 <__aeabi_f2d>
 800250c:	a380      	add	r3, pc, #512	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fe f899 	bl	8000648 <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	a37c      	add	r3, pc, #496	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f890 	bl	8000648 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002538:	f7fe f9b0 	bl	800089c <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4640      	mov	r0, r8
 8002542:	4649      	mov	r1, r9
 8002544:	f7fd feca 	bl	80002dc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd fec4 	bl	80002dc <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb4c 	bl	8000bf8 <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <interupt_DriveMotor+0x390>)
 8002564:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <interupt_DriveMotor+0x390>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f814 	bl	8000598 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <interupt_DriveMotor+0x390>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe f80d 	bl	8000598 <__aeabi_f2d>
 800257e:	a364      	add	r3, pc, #400	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe f860 	bl	8000648 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fd fea4 	bl	80002dc <__adddf3>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f7fe fb2c 	bl	8000bf8 <__aeabi_d2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a65      	ldr	r2, [pc, #404]	; (8002738 <interupt_DriveMotor+0x390>)
 80025a4:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <interupt_DriveMotor+0x394>)
 80025a8:	4a62      	ldr	r2, [pc, #392]	; (8002734 <interupt_DriveMotor+0x38c>)
 80025aa:	9201      	str	r2, [sp, #4]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	9200      	str	r2, [sp, #0]
 80025b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b2:	f006 f8cb 	bl	800874c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80025b6:	4b5f      	ldr	r3, [pc, #380]	; (8002734 <interupt_DriveMotor+0x38c>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <interupt_DriveMotor+0x390>)
 80025be:	ed93 7a00 	vldr	s14, [r3]
 80025c2:	f107 020c 	add.w	r2, r7, #12
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	eef0 0a47 	vmov.f32	s1, s14
 80025ce:	eeb0 0a67 	vmov.f32	s0, s15
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fa4f 	bl	8004a78 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80025da:	4b59      	ldr	r3, [pc, #356]	; (8002740 <interupt_DriveMotor+0x398>)
 80025dc:	ed93 7a00 	vldr	s14, [r3]
 80025e0:	4b58      	ldr	r3, [pc, #352]	; (8002744 <interupt_DriveMotor+0x39c>)
 80025e2:	edd3 7a00 	vldr	s15, [r3]
 80025e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ea:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025f2:	4b50      	ldr	r3, [pc, #320]	; (8002734 <interupt_DriveMotor+0x38c>)
 80025f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80025f8:	4b53      	ldr	r3, [pc, #332]	; (8002748 <interupt_DriveMotor+0x3a0>)
 80025fa:	edd3 6a00 	vldr	s13, [r3]
 80025fe:	4b4e      	ldr	r3, [pc, #312]	; (8002738 <interupt_DriveMotor+0x390>)
 8002600:	ed93 6a01 	vldr	s12, [r3, #4]
 8002604:	1d3a      	adds	r2, r7, #4
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	eef0 1a46 	vmov.f32	s3, s12
 800260e:	eeb0 1a66 	vmov.f32	s2, s13
 8002612:	4611      	mov	r1, r2
 8002614:	eef0 0a67 	vmov.f32	s1, s15
 8002618:	eeb0 0a47 	vmov.f32	s0, s14
 800261c:	4618      	mov	r0, r3
 800261e:	f001 ff7f 	bl	8004520 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8002622:	f002 fc41 	bl	8004ea8 <calWallConrol>
 8002626:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 800262a:	ed97 7a04 	vldr	s14, [r7, #16]
 800262e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002632:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002636:	edd7 7a07 	vldr	s15, [r7, #28]
 800263a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800263e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002642:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002646:	edd7 7a01 	vldr	s15, [r7, #4]
 800264a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800264e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002652:	ed97 7a04 	vldr	s14, [r7, #16]
 8002656:	edd7 7a03 	vldr	s15, [r7, #12]
 800265a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002662:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002666:	edd7 7a02 	vldr	s15, [r7, #8]
 800266a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002676:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800267a:	ed97 7a04 	vldr	s14, [r7, #16]
 800267e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002686:	ee17 0a90 	vmov	r0, s15
 800268a:	f7fd ff85 	bl	8000598 <__aeabi_f2d>
 800268e:	4604      	mov	r4, r0
 8002690:	460d      	mov	r5, r1
 8002692:	4b2e      	ldr	r3, [pc, #184]	; (800274c <interupt_DriveMotor+0x3a4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff7e 	bl	8000598 <__aeabi_f2d>
 800269c:	a31e      	add	r3, pc, #120	; (adr r3, 8002718 <interupt_DriveMotor+0x370>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fd ffd1 	bl	8000648 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4620      	mov	r0, r4
 80026ac:	4629      	mov	r1, r5
 80026ae:	f7fe fa5b 	bl	8000b68 <__aeabi_dcmpgt>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 808d 	beq.w	80027d4 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80026ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026bc:	f7fd ff6c 	bl	8000598 <__aeabi_f2d>
 80026c0:	4604      	mov	r4, r0
 80026c2:	460d      	mov	r5, r1
 80026c4:	4b21      	ldr	r3, [pc, #132]	; (800274c <interupt_DriveMotor+0x3a4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd ff65 	bl	8000598 <__aeabi_f2d>
 80026ce:	a312      	add	r3, pc, #72	; (adr r3, 8002718 <interupt_DriveMotor+0x370>)
 80026d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d4:	f7fd ffb8 	bl	8000648 <__aeabi_dmul>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4690      	mov	r8, r2
 80026de:	4699      	mov	r9, r3
 80026e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80026e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ec:	ee17 0a90 	vmov	r0, s15
 80026f0:	f7fd ff52 	bl	8000598 <__aeabi_f2d>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4640      	mov	r0, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fd fdec 	bl	80002d8 <__aeabi_dsub>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	e022      	b.n	8002750 <interupt_DriveMotor+0x3a8>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	d2f1a9fc 	.word	0xd2f1a9fc
 8002714:	3f50624d 	.word	0x3f50624d
 8002718:	d916872b 	.word	0xd916872b
 800271c:	3feff7ce 	.word	0x3feff7ce
 8002720:	2000052c 	.word	0x2000052c
 8002724:	20000808 	.word	0x20000808
 8002728:	20000594 	.word	0x20000594
 800272c:	20000596 	.word	0x20000596
 8002730:	20000528 	.word	0x20000528
 8002734:	200004dc 	.word	0x200004dc
 8002738:	200004e8 	.word	0x200004e8
 800273c:	200004f4 	.word	0x200004f4
 8002740:	20000238 	.word	0x20000238
 8002744:	2000023c 	.word	0x2000023c
 8002748:	2000026c 	.word	0x2000026c
 800274c:	200004d8 	.word	0x200004d8
 8002750:	f7fd fdc4 	bl	80002dc <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa4c 	bl	8000bf8 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002764:	6a38      	ldr	r0, [r7, #32]
 8002766:	f7fd ff17 	bl	8000598 <__aeabi_f2d>
 800276a:	4604      	mov	r4, r0
 800276c:	460d      	mov	r5, r1
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <interupt_DriveMotor+0x428>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd ff10 	bl	8000598 <__aeabi_f2d>
 8002778:	a313      	add	r3, pc, #76	; (adr r3, 80027c8 <interupt_DriveMotor+0x420>)
 800277a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277e:	f7fd ff63 	bl	8000648 <__aeabi_dmul>
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4690      	mov	r8, r2
 8002788:	4699      	mov	r9, r3
 800278a:	ed97 7a04 	vldr	s14, [r7, #16]
 800278e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002796:	ee17 0a90 	vmov	r0, s15
 800279a:	f7fd fefd 	bl	8000598 <__aeabi_f2d>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4640      	mov	r0, r8
 80027a4:	4649      	mov	r1, r9
 80027a6:	f7fd fd97 	bl	80002d8 <__aeabi_dsub>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fd fd93 	bl	80002dc <__adddf3>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4610      	mov	r0, r2
 80027bc:	4619      	mov	r1, r3
 80027be:	f7fe fa1b 	bl	8000bf8 <__aeabi_d2f>
 80027c2:	4603      	mov	r3, r0
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	e095      	b.n	80028f4 <interupt_DriveMotor+0x54c>
 80027c8:	d916872b 	.word	0xd916872b
 80027cc:	3feff7ce 	.word	0x3feff7ce
 80027d0:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80027d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80027d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e0:	ee17 0a90 	vmov	r0, s15
 80027e4:	f7fd fed8 	bl	8000598 <__aeabi_f2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	4bce      	ldr	r3, [pc, #824]	; (8002b28 <interupt_DriveMotor+0x780>)
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	eef1 7a67 	vneg.f32	s15, s15
 80027f6:	ee17 3a90 	vmov	r3, s15
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fecc 	bl	8000598 <__aeabi_f2d>
 8002800:	a3c5      	add	r3, pc, #788	; (adr r3, 8002b18 <interupt_DriveMotor+0x770>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd ff1f 	bl	8000648 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4620      	mov	r0, r4
 8002810:	4629      	mov	r1, r5
 8002812:	f7fe f98b 	bl	8000b2c <__aeabi_dcmplt>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d06b      	beq.n	80028f4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800281c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800281e:	f7fd febb 	bl	8000598 <__aeabi_f2d>
 8002822:	4604      	mov	r4, r0
 8002824:	460d      	mov	r5, r1
 8002826:	4bc0      	ldr	r3, [pc, #768]	; (8002b28 <interupt_DriveMotor+0x780>)
 8002828:	edd3 7a00 	vldr	s15, [r3]
 800282c:	eef1 7a67 	vneg.f32	s15, s15
 8002830:	ee17 3a90 	vmov	r3, s15
 8002834:	4618      	mov	r0, r3
 8002836:	f7fd feaf 	bl	8000598 <__aeabi_f2d>
 800283a:	a3b7      	add	r3, pc, #732	; (adr r3, 8002b18 <interupt_DriveMotor+0x770>)
 800283c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002840:	f7fd ff02 	bl	8000648 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	4690      	mov	r8, r2
 800284a:	4699      	mov	r9, r3
 800284c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002850:	edd7 7a02 	vldr	s15, [r7, #8]
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	ee17 0a90 	vmov	r0, s15
 800285c:	f7fd fe9c 	bl	8000598 <__aeabi_f2d>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4640      	mov	r0, r8
 8002866:	4649      	mov	r1, r9
 8002868:	f7fd fd36 	bl	80002d8 <__aeabi_dsub>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fd fd32 	bl	80002dc <__adddf3>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f9ba 	bl	8000bf8 <__aeabi_d2f>
 8002884:	4603      	mov	r3, r0
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002888:	6a38      	ldr	r0, [r7, #32]
 800288a:	f7fd fe85 	bl	8000598 <__aeabi_f2d>
 800288e:	4604      	mov	r4, r0
 8002890:	460d      	mov	r5, r1
 8002892:	4ba5      	ldr	r3, [pc, #660]	; (8002b28 <interupt_DriveMotor+0x780>)
 8002894:	edd3 7a00 	vldr	s15, [r3]
 8002898:	eef1 7a67 	vneg.f32	s15, s15
 800289c:	ee17 3a90 	vmov	r3, s15
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fd fe79 	bl	8000598 <__aeabi_f2d>
 80028a6:	a39c      	add	r3, pc, #624	; (adr r3, 8002b18 <interupt_DriveMotor+0x770>)
 80028a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ac:	f7fd fecc 	bl	8000648 <__aeabi_dmul>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4690      	mov	r8, r2
 80028b6:	4699      	mov	r9, r3
 80028b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028c4:	ee17 0a90 	vmov	r0, s15
 80028c8:	f7fd fe66 	bl	8000598 <__aeabi_f2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4640      	mov	r0, r8
 80028d2:	4649      	mov	r1, r9
 80028d4:	f7fd fd00 	bl	80002d8 <__aeabi_dsub>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4620      	mov	r0, r4
 80028de:	4629      	mov	r1, r5
 80028e0:	f7fd fcfc 	bl	80002dc <__adddf3>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f984 	bl	8000bf8 <__aeabi_d2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80028f4:	f107 0214 	add.w	r2, r7, #20
 80028f8:	f107 0318 	add.w	r3, r7, #24
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	edd7 0a08 	vldr	s1, [r7, #32]
 8002904:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002908:	f7ff fcbc 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f005 faa4 	bl	8007e60 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002918:	4b84      	ldr	r3, [pc, #528]	; (8002b2c <interupt_DriveMotor+0x784>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d004      	beq.n	800292a <interupt_DriveMotor+0x582>
 8002920:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <interupt_DriveMotor+0x784>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b04      	cmp	r3, #4
 8002926:	f040 8287 	bne.w	8002e38 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 800292a:	4b81      	ldr	r3, [pc, #516]	; (8002b30 <interupt_DriveMotor+0x788>)
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002930:	4b80      	ldr	r3, [pc, #512]	; (8002b34 <interupt_DriveMotor+0x78c>)
 8002932:	2200      	movs	r2, #0
 8002934:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002936:	4b80      	ldr	r3, [pc, #512]	; (8002b38 <interupt_DriveMotor+0x790>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	4a7e      	ldr	r2, [pc, #504]	; (8002b38 <interupt_DriveMotor+0x790>)
 800293e:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002940:	4b7e      	ldr	r3, [pc, #504]	; (8002b3c <interupt_DriveMotor+0x794>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f7fd fe27 	bl	8000598 <__aeabi_f2d>
 800294a:	4604      	mov	r4, r0
 800294c:	460d      	mov	r5, r1
 800294e:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <interupt_DriveMotor+0x794>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fe20 	bl	8000598 <__aeabi_f2d>
 8002958:	a371      	add	r3, pc, #452	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 800295a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295e:	f7fd fe73 	bl	8000648 <__aeabi_dmul>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4690      	mov	r8, r2
 8002968:	4699      	mov	r9, r3
 800296a:	4b74      	ldr	r3, [pc, #464]	; (8002b3c <interupt_DriveMotor+0x794>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fd fe12 	bl	8000598 <__aeabi_f2d>
 8002974:	a36a      	add	r3, pc, #424	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fe65 	bl	8000648 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4610      	mov	r0, r2
 8002984:	4619      	mov	r1, r3
 8002986:	a366      	add	r3, pc, #408	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f7fd fe5c 	bl	8000648 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	4610      	mov	r0, r2
 8002996:	4619      	mov	r1, r3
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a0:	f7fd ff7c 	bl	800089c <__aeabi_ddiv>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4640      	mov	r0, r8
 80029aa:	4649      	mov	r1, r9
 80029ac:	f7fd fc96 	bl	80002dc <__adddf3>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f7fd fc90 	bl	80002dc <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f918 	bl	8000bf8 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a5c      	ldr	r2, [pc, #368]	; (8002b3c <interupt_DriveMotor+0x794>)
 80029cc:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <interupt_DriveMotor+0x794>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fd fde0 	bl	8000598 <__aeabi_f2d>
 80029d8:	4604      	mov	r4, r0
 80029da:	460d      	mov	r5, r1
 80029dc:	4b57      	ldr	r3, [pc, #348]	; (8002b3c <interupt_DriveMotor+0x794>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fd fdd9 	bl	8000598 <__aeabi_f2d>
 80029e6:	a34e      	add	r3, pc, #312	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f7fd fe2c 	bl	8000648 <__aeabi_dmul>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fc70 	bl	80002dc <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7fe f8f8 	bl	8000bf8 <__aeabi_d2f>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a4c      	ldr	r2, [pc, #304]	; (8002b3c <interupt_DriveMotor+0x794>)
 8002a0c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a0e:	4b4c      	ldr	r3, [pc, #304]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdc0 	bl	8000598 <__aeabi_f2d>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fdb9 	bl	8000598 <__aeabi_f2d>
 8002a26:	a33e      	add	r3, pc, #248	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fe0c 	bl	8000648 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4690      	mov	r8, r2
 8002a36:	4699      	mov	r9, r3
 8002a38:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f7fd fdab 	bl	8000598 <__aeabi_f2d>
 8002a42:	a337      	add	r3, pc, #220	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f7fd fdfe 	bl	8000648 <__aeabi_dmul>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	460b      	mov	r3, r1
 8002a50:	4610      	mov	r0, r2
 8002a52:	4619      	mov	r1, r3
 8002a54:	a332      	add	r3, pc, #200	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 8002a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5a:	f7fd fdf5 	bl	8000648 <__aeabi_dmul>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4610      	mov	r0, r2
 8002a64:	4619      	mov	r1, r3
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a6e:	f7fd ff15 	bl	800089c <__aeabi_ddiv>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4640      	mov	r0, r8
 8002a78:	4649      	mov	r1, r9
 8002a7a:	f7fd fc2f 	bl	80002dc <__adddf3>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4620      	mov	r0, r4
 8002a84:	4629      	mov	r1, r5
 8002a86:	f7fd fc29 	bl	80002dc <__adddf3>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	4610      	mov	r0, r2
 8002a90:	4619      	mov	r1, r3
 8002a92:	f7fe f8b1 	bl	8000bf8 <__aeabi_d2f>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002a9a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002a9c:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd79 	bl	8000598 <__aeabi_f2d>
 8002aa6:	4604      	mov	r4, r0
 8002aa8:	460d      	mov	r5, r1
 8002aaa:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fd72 	bl	8000598 <__aeabi_f2d>
 8002ab4:	a31a      	add	r3, pc, #104	; (adr r3, 8002b20 <interupt_DriveMotor+0x778>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fdc5 	bl	8000648 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f7fd fc09 	bl	80002dc <__adddf3>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f7fe f891 	bl	8000bf8 <__aeabi_d2f>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a19      	ldr	r2, [pc, #100]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002ada:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <interupt_DriveMotor+0x79c>)
 8002ade:	4a18      	ldr	r2, [pc, #96]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002ae0:	9201      	str	r2, [sp, #4]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	9200      	str	r2, [sp, #0]
 8002ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ae8:	f005 fe30 	bl	800874c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002aec:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <interupt_DriveMotor+0x794>)
 8002aee:	edd3 7a00 	vldr	s15, [r3]
 8002af2:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002af4:	ed93 7a00 	vldr	s14, [r3]
 8002af8:	f107 020c 	add.w	r2, r7, #12
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	eef0 0a47 	vmov.f32	s1, s14
 8002b04:	eeb0 0a67 	vmov.f32	s0, s15
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 ffb4 	bl	8004a78 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002b10:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <interupt_DriveMotor+0x7a0>)
 8002b12:	ed93 7a00 	vldr	s14, [r3]
 8002b16:	e019      	b.n	8002b4c <interupt_DriveMotor+0x7a4>
 8002b18:	d916872b 	.word	0xd916872b
 8002b1c:	3feff7ce 	.word	0x3feff7ce
 8002b20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b24:	3f50624d 	.word	0x3f50624d
 8002b28:	200004d8 	.word	0x200004d8
 8002b2c:	2000052c 	.word	0x2000052c
 8002b30:	20000594 	.word	0x20000594
 8002b34:	20000596 	.word	0x20000596
 8002b38:	20000528 	.word	0x20000528
 8002b3c:	200004dc 	.word	0x200004dc
 8002b40:	200004e8 	.word	0x200004e8
 8002b44:	20000508 	.word	0x20000508
 8002b48:	20000238 	.word	0x20000238
 8002b4c:	4b64      	ldr	r3, [pc, #400]	; (8002ce0 <interupt_DriveMotor+0x938>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b5a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b5e:	4b61      	ldr	r3, [pc, #388]	; (8002ce4 <interupt_DriveMotor+0x93c>)
 8002b60:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b64:	4b60      	ldr	r3, [pc, #384]	; (8002ce8 <interupt_DriveMotor+0x940>)
 8002b66:	edd3 6a00 	vldr	s13, [r3]
 8002b6a:	4b60      	ldr	r3, [pc, #384]	; (8002cec <interupt_DriveMotor+0x944>)
 8002b6c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002b70:	1d3a      	adds	r2, r7, #4
 8002b72:	f107 0308 	add.w	r3, r7, #8
 8002b76:	eef0 1a46 	vmov.f32	s3, s12
 8002b7a:	eeb0 1a66 	vmov.f32	s2, s13
 8002b7e:	4611      	mov	r1, r2
 8002b80:	eef0 0a67 	vmov.f32	s1, s15
 8002b84:	eeb0 0a47 	vmov.f32	s0, s14
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f001 fcc9 	bl	8004520 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002b8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b92:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ba2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002baa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002bae:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bca:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002bce:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bda:	ee17 0a90 	vmov	r0, s15
 8002bde:	f7fd fcdb 	bl	8000598 <__aeabi_f2d>
 8002be2:	4604      	mov	r4, r0
 8002be4:	460d      	mov	r5, r1
 8002be6:	4b42      	ldr	r3, [pc, #264]	; (8002cf0 <interupt_DriveMotor+0x948>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcd4 	bl	8000598 <__aeabi_f2d>
 8002bf0:	a339      	add	r3, pc, #228	; (adr r3, 8002cd8 <interupt_DriveMotor+0x930>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f7fd fd27 	bl	8000648 <__aeabi_dmul>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4620      	mov	r0, r4
 8002c00:	4629      	mov	r1, r5
 8002c02:	f7fd ffb1 	bl	8000b68 <__aeabi_dcmpgt>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d073      	beq.n	8002cf4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c0e:	f7fd fcc3 	bl	8000598 <__aeabi_f2d>
 8002c12:	4604      	mov	r4, r0
 8002c14:	460d      	mov	r5, r1
 8002c16:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <interupt_DriveMotor+0x948>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fcbc 	bl	8000598 <__aeabi_f2d>
 8002c20:	a32d      	add	r3, pc, #180	; (adr r3, 8002cd8 <interupt_DriveMotor+0x930>)
 8002c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c26:	f7fd fd0f 	bl	8000648 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c36:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3e:	ee17 0a90 	vmov	r0, s15
 8002c42:	f7fd fca9 	bl	8000598 <__aeabi_f2d>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f7fd fb43 	bl	80002d8 <__aeabi_dsub>
 8002c52:	4602      	mov	r2, r0
 8002c54:	460b      	mov	r3, r1
 8002c56:	4620      	mov	r0, r4
 8002c58:	4629      	mov	r1, r5
 8002c5a:	f7fd fb3f 	bl	80002dc <__adddf3>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4610      	mov	r0, r2
 8002c64:	4619      	mov	r1, r3
 8002c66:	f7fd ffc7 	bl	8000bf8 <__aeabi_d2f>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c6e:	6a38      	ldr	r0, [r7, #32]
 8002c70:	f7fd fc92 	bl	8000598 <__aeabi_f2d>
 8002c74:	4604      	mov	r4, r0
 8002c76:	460d      	mov	r5, r1
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <interupt_DriveMotor+0x948>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fd fc8b 	bl	8000598 <__aeabi_f2d>
 8002c82:	a315      	add	r3, pc, #84	; (adr r3, 8002cd8 <interupt_DriveMotor+0x930>)
 8002c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c88:	f7fd fcde 	bl	8000648 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4690      	mov	r8, r2
 8002c92:	4699      	mov	r9, r3
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	ee17 0a90 	vmov	r0, s15
 8002ca4:	f7fd fc78 	bl	8000598 <__aeabi_f2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4640      	mov	r0, r8
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f7fd fb12 	bl	80002d8 <__aeabi_dsub>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4620      	mov	r0, r4
 8002cba:	4629      	mov	r1, r5
 8002cbc:	f7fd fb0e 	bl	80002dc <__adddf3>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f7fd ff96 	bl	8000bf8 <__aeabi_d2f>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	623b      	str	r3, [r7, #32]
 8002cd0:	e0a0      	b.n	8002e14 <interupt_DriveMotor+0xa6c>
 8002cd2:	bf00      	nop
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	d916872b 	.word	0xd916872b
 8002cdc:	3feff7ce 	.word	0x3feff7ce
 8002ce0:	2000023c 	.word	0x2000023c
 8002ce4:	200004dc 	.word	0x200004dc
 8002ce8:	2000026c 	.word	0x2000026c
 8002cec:	200004e8 	.word	0x200004e8
 8002cf0:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002cf4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d00:	ee17 0a90 	vmov	r0, s15
 8002d04:	f7fd fc48 	bl	8000598 <__aeabi_f2d>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	460d      	mov	r5, r1
 8002d0c:	4bd6      	ldr	r3, [pc, #856]	; (8003068 <interupt_DriveMotor+0xcc0>)
 8002d0e:	edd3 7a00 	vldr	s15, [r3]
 8002d12:	eef1 7a67 	vneg.f32	s15, s15
 8002d16:	ee17 3a90 	vmov	r3, s15
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fc3c 	bl	8000598 <__aeabi_f2d>
 8002d20:	a3cd      	add	r3, pc, #820	; (adr r3, 8003058 <interupt_DriveMotor+0xcb0>)
 8002d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d26:	f7fd fc8f 	bl	8000648 <__aeabi_dmul>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	4620      	mov	r0, r4
 8002d30:	4629      	mov	r1, r5
 8002d32:	f7fd fefb 	bl	8000b2c <__aeabi_dcmplt>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d06b      	beq.n	8002e14 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d3e:	f7fd fc2b 	bl	8000598 <__aeabi_f2d>
 8002d42:	4604      	mov	r4, r0
 8002d44:	460d      	mov	r5, r1
 8002d46:	4bc8      	ldr	r3, [pc, #800]	; (8003068 <interupt_DriveMotor+0xcc0>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	eef1 7a67 	vneg.f32	s15, s15
 8002d50:	ee17 3a90 	vmov	r3, s15
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7fd fc1f 	bl	8000598 <__aeabi_f2d>
 8002d5a:	a3bf      	add	r3, pc, #764	; (adr r3, 8003058 <interupt_DriveMotor+0xcb0>)
 8002d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d60:	f7fd fc72 	bl	8000648 <__aeabi_dmul>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4690      	mov	r8, r2
 8002d6a:	4699      	mov	r9, r3
 8002d6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d70:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d78:	ee17 0a90 	vmov	r0, s15
 8002d7c:	f7fd fc0c 	bl	8000598 <__aeabi_f2d>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4640      	mov	r0, r8
 8002d86:	4649      	mov	r1, r9
 8002d88:	f7fd faa6 	bl	80002d8 <__aeabi_dsub>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4620      	mov	r0, r4
 8002d92:	4629      	mov	r1, r5
 8002d94:	f7fd faa2 	bl	80002dc <__adddf3>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4610      	mov	r0, r2
 8002d9e:	4619      	mov	r1, r3
 8002da0:	f7fd ff2a 	bl	8000bf8 <__aeabi_d2f>
 8002da4:	4603      	mov	r3, r0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002da8:	6a38      	ldr	r0, [r7, #32]
 8002daa:	f7fd fbf5 	bl	8000598 <__aeabi_f2d>
 8002dae:	4604      	mov	r4, r0
 8002db0:	460d      	mov	r5, r1
 8002db2:	4bad      	ldr	r3, [pc, #692]	; (8003068 <interupt_DriveMotor+0xcc0>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	eef1 7a67 	vneg.f32	s15, s15
 8002dbc:	ee17 3a90 	vmov	r3, s15
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	a3a4      	add	r3, pc, #656	; (adr r3, 8003058 <interupt_DriveMotor+0xcb0>)
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f7fd fc3c 	bl	8000648 <__aeabi_dmul>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4690      	mov	r8, r2
 8002dd6:	4699      	mov	r9, r3
 8002dd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002de4:	ee17 0a90 	vmov	r0, s15
 8002de8:	f7fd fbd6 	bl	8000598 <__aeabi_f2d>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	4640      	mov	r0, r8
 8002df2:	4649      	mov	r1, r9
 8002df4:	f7fd fa70 	bl	80002d8 <__aeabi_dsub>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	4629      	mov	r1, r5
 8002e00:	f7fd fa6c 	bl	80002dc <__adddf3>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	f7fd fef4 	bl	8000bf8 <__aeabi_d2f>
 8002e10:	4603      	mov	r3, r0
 8002e12:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002e14:	f107 0214 	add.w	r2, r7, #20
 8002e18:	f107 0318 	add.w	r3, r7, #24
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	edd7 0a08 	vldr	s1, [r7, #32]
 8002e24:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e28:	f7ff fa2c 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 f814 	bl	8007e60 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <interupt_DriveMotor+0xcc4>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	f040 8137 	bne.w	80030b0 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 8002e42:	4b8b      	ldr	r3, [pc, #556]	; (8003070 <interupt_DriveMotor+0xcc8>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002e48:	4b8a      	ldr	r3, [pc, #552]	; (8003074 <interupt_DriveMotor+0xccc>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002e4e:	4b8a      	ldr	r3, [pc, #552]	; (8003078 <interupt_DriveMotor+0xcd0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3301      	adds	r3, #1
 8002e54:	4a88      	ldr	r2, [pc, #544]	; (8003078 <interupt_DriveMotor+0xcd0>)
 8002e56:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e58:	4b88      	ldr	r3, [pc, #544]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd fb9b 	bl	8000598 <__aeabi_f2d>
 8002e62:	4604      	mov	r4, r0
 8002e64:	460d      	mov	r5, r1
 8002e66:	4b85      	ldr	r3, [pc, #532]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fd fb94 	bl	8000598 <__aeabi_f2d>
 8002e70:	a37b      	add	r3, pc, #492	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e76:	f7fd fbe7 	bl	8000648 <__aeabi_dmul>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	4690      	mov	r8, r2
 8002e80:	4699      	mov	r9, r3
 8002e82:	4b7e      	ldr	r3, [pc, #504]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fd fb86 	bl	8000598 <__aeabi_f2d>
 8002e8c:	a374      	add	r3, pc, #464	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd fbd9 	bl	8000648 <__aeabi_dmul>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	a370      	add	r3, pc, #448	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f7fd fbd0 	bl	8000648 <__aeabi_dmul>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4610      	mov	r0, r2
 8002eae:	4619      	mov	r1, r3
 8002eb0:	f04f 0200 	mov.w	r2, #0
 8002eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002eb8:	f7fd fcf0 	bl	800089c <__aeabi_ddiv>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4640      	mov	r0, r8
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	f7fd fa0a 	bl	80002dc <__adddf3>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4620      	mov	r0, r4
 8002ece:	4629      	mov	r1, r5
 8002ed0:	f7fd fa04 	bl	80002dc <__adddf3>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f7fd fe8c 	bl	8000bf8 <__aeabi_d2f>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4a66      	ldr	r2, [pc, #408]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002ee4:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002ee6:	4b65      	ldr	r3, [pc, #404]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fb54 	bl	8000598 <__aeabi_f2d>
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	460d      	mov	r5, r1
 8002ef4:	4b61      	ldr	r3, [pc, #388]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb4d 	bl	8000598 <__aeabi_f2d>
 8002efe:	a358      	add	r3, pc, #352	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fba0 	bl	8000648 <__aeabi_dmul>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4620      	mov	r0, r4
 8002f0e:	4629      	mov	r1, r5
 8002f10:	f7fd f9e4 	bl	80002dc <__adddf3>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7fd fe6c 	bl	8000bf8 <__aeabi_d2f>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4a56      	ldr	r2, [pc, #344]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002f24:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002f26:	4b56      	ldr	r3, [pc, #344]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fb34 	bl	8000598 <__aeabi_f2d>
 8002f30:	4604      	mov	r4, r0
 8002f32:	460d      	mov	r5, r1
 8002f34:	4b52      	ldr	r3, [pc, #328]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fb2d 	bl	8000598 <__aeabi_f2d>
 8002f3e:	a348      	add	r3, pc, #288	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f44:	f7fd fb80 	bl	8000648 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4690      	mov	r8, r2
 8002f4e:	4699      	mov	r9, r3
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd fb1f 	bl	8000598 <__aeabi_f2d>
 8002f5a:	a341      	add	r3, pc, #260	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fb72 	bl	8000648 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	a33c      	add	r3, pc, #240	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f72:	f7fd fb69 	bl	8000648 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f86:	f7fd fc89 	bl	800089c <__aeabi_ddiv>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4640      	mov	r0, r8
 8002f90:	4649      	mov	r1, r9
 8002f92:	f7fd f9a3 	bl	80002dc <__adddf3>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4620      	mov	r0, r4
 8002f9c:	4629      	mov	r1, r5
 8002f9e:	f7fd f99d 	bl	80002dc <__adddf3>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fe25 	bl	8000bf8 <__aeabi_d2f>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4a33      	ldr	r2, [pc, #204]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002fb2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd faed 	bl	8000598 <__aeabi_f2d>
 8002fbe:	4604      	mov	r4, r0
 8002fc0:	460d      	mov	r5, r1
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fae6 	bl	8000598 <__aeabi_f2d>
 8002fcc:	a324      	add	r3, pc, #144	; (adr r3, 8003060 <interupt_DriveMotor+0xcb8>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd fb39 	bl	8000648 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4620      	mov	r0, r4
 8002fdc:	4629      	mov	r1, r5
 8002fde:	f7fd f97d 	bl	80002dc <__adddf3>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	4619      	mov	r1, r3
 8002fea:	f7fd fe05 	bl	8000bf8 <__aeabi_d2f>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002ff2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ff4:	4b21      	ldr	r3, [pc, #132]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002ff6:	edd3 7a00 	vldr	s15, [r3]
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002ffc:	ed93 7a00 	vldr	s14, [r3]
 8003000:	f107 020c 	add.w	r2, r7, #12
 8003004:	f107 0310 	add.w	r3, r7, #16
 8003008:	eef0 0a47 	vmov.f32	s1, s14
 800300c:	eeb0 0a67 	vmov.f32	s0, s15
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fd30 	bl	8004a78 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003018:	ed97 7a04 	vldr	s14, [r7, #16]
 800301c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003020:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003024:	edd7 7a02 	vldr	s15, [r7, #8]
 8003028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003034:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003038:	ed97 7a04 	vldr	s14, [r7, #16]
 800303c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003040:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003044:	edd7 7a02 	vldr	s15, [r7, #8]
 8003048:	ee37 7a27 	vadd.f32	s14, s14, s15
 800304c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003050:	e018      	b.n	8003084 <interupt_DriveMotor+0xcdc>
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	d916872b 	.word	0xd916872b
 800305c:	3feff7ce 	.word	0x3feff7ce
 8003060:	d2f1a9fc 	.word	0xd2f1a9fc
 8003064:	3f50624d 	.word	0x3f50624d
 8003068:	200004d8 	.word	0x200004d8
 800306c:	2000052c 	.word	0x2000052c
 8003070:	20000594 	.word	0x20000594
 8003074:	20000596 	.word	0x20000596
 8003078:	20000528 	.word	0x20000528
 800307c:	200004dc 	.word	0x200004dc
 8003080:	200004e8 	.word	0x200004e8
 8003084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003088:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800308c:	f107 0214 	add.w	r2, r7, #20
 8003090:	f107 0318 	add.w	r3, r7, #24
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	edd7 0a08 	vldr	s1, [r7, #32]
 800309c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80030a0:	f7ff f8f0 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 fed8 	bl	8007e60 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 80030b0:	4bd3      	ldr	r3, [pc, #844]	; (8003400 <interupt_DriveMotor+0x1058>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b05      	cmp	r3, #5
 80030b6:	d137      	bne.n	8003128 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 80030b8:	4bd2      	ldr	r3, [pc, #840]	; (8003404 <interupt_DriveMotor+0x105c>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80030be:	4bd2      	ldr	r3, [pc, #840]	; (8003408 <interupt_DriveMotor+0x1060>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80030c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80030e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003100:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003104:	f107 0214 	add.w	r2, r7, #20
 8003108:	f107 0318 	add.w	r3, r7, #24
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	edd7 0a08 	vldr	s1, [r7, #32]
 8003114:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003118:	f7ff f8b4 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f004 fe9c 	bl	8007e60 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8003128:	4bb5      	ldr	r3, [pc, #724]	; (8003400 <interupt_DriveMotor+0x1058>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b06      	cmp	r3, #6
 800312e:	f040 8105 	bne.w	800333c <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8003132:	4bb4      	ldr	r3, [pc, #720]	; (8003404 <interupt_DriveMotor+0x105c>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8003138:	4bb3      	ldr	r3, [pc, #716]	; (8003408 <interupt_DriveMotor+0x1060>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800313e:	4bb3      	ldr	r3, [pc, #716]	; (800340c <interupt_DriveMotor+0x1064>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fa28 	bl	8000598 <__aeabi_f2d>
 8003148:	4604      	mov	r4, r0
 800314a:	460d      	mov	r5, r1
 800314c:	4baf      	ldr	r3, [pc, #700]	; (800340c <interupt_DriveMotor+0x1064>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fa21 	bl	8000598 <__aeabi_f2d>
 8003156:	a3a8      	add	r3, pc, #672	; (adr r3, 80033f8 <interupt_DriveMotor+0x1050>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd fa74 	bl	8000648 <__aeabi_dmul>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4690      	mov	r8, r2
 8003166:	4699      	mov	r9, r3
 8003168:	4ba8      	ldr	r3, [pc, #672]	; (800340c <interupt_DriveMotor+0x1064>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f7fd fa13 	bl	8000598 <__aeabi_f2d>
 8003172:	a3a1      	add	r3, pc, #644	; (adr r3, 80033f8 <interupt_DriveMotor+0x1050>)
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	f7fd fa66 	bl	8000648 <__aeabi_dmul>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4610      	mov	r0, r2
 8003182:	4619      	mov	r1, r3
 8003184:	a39c      	add	r3, pc, #624	; (adr r3, 80033f8 <interupt_DriveMotor+0x1050>)
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	f7fd fa5d 	bl	8000648 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4610      	mov	r0, r2
 8003194:	4619      	mov	r1, r3
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800319e:	f7fd fb7d 	bl	800089c <__aeabi_ddiv>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4640      	mov	r0, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	f7fd f897 	bl	80002dc <__adddf3>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4620      	mov	r0, r4
 80031b4:	4629      	mov	r1, r5
 80031b6:	f7fd f891 	bl	80002dc <__adddf3>
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4610      	mov	r0, r2
 80031c0:	4619      	mov	r1, r3
 80031c2:	f7fd fd19 	bl	8000bf8 <__aeabi_d2f>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4a90      	ldr	r2, [pc, #576]	; (800340c <interupt_DriveMotor+0x1064>)
 80031ca:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80031cc:	4b8f      	ldr	r3, [pc, #572]	; (800340c <interupt_DriveMotor+0x1064>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9e1 	bl	8000598 <__aeabi_f2d>
 80031d6:	4604      	mov	r4, r0
 80031d8:	460d      	mov	r5, r1
 80031da:	4b8c      	ldr	r3, [pc, #560]	; (800340c <interupt_DriveMotor+0x1064>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f9da 	bl	8000598 <__aeabi_f2d>
 80031e4:	a384      	add	r3, pc, #528	; (adr r3, 80033f8 <interupt_DriveMotor+0x1050>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fd fa2d 	bl	8000648 <__aeabi_dmul>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4620      	mov	r0, r4
 80031f4:	4629      	mov	r1, r5
 80031f6:	f7fd f871 	bl	80002dc <__adddf3>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4610      	mov	r0, r2
 8003200:	4619      	mov	r1, r3
 8003202:	f7fd fcf9 	bl	8000bf8 <__aeabi_d2f>
 8003206:	4603      	mov	r3, r0
 8003208:	4a80      	ldr	r2, [pc, #512]	; (800340c <interupt_DriveMotor+0x1064>)
 800320a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800320c:	4b80      	ldr	r3, [pc, #512]	; (8003410 <interupt_DriveMotor+0x1068>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fd f9c1 	bl	8000598 <__aeabi_f2d>
 8003216:	4604      	mov	r4, r0
 8003218:	460d      	mov	r5, r1
 800321a:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <interupt_DriveMotor+0x1068>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7fd f9ba 	bl	8000598 <__aeabi_f2d>
 8003224:	a374      	add	r3, pc, #464	; (adr r3, 80033f8 <interupt_DriveMotor+0x1050>)
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f7fd fa0d 	bl	8000648 <__aeabi_dmul>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4620      	mov	r0, r4
 8003234:	4629      	mov	r1, r5
 8003236:	f7fd f851 	bl	80002dc <__adddf3>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	f7fd fcd9 	bl	8000bf8 <__aeabi_d2f>
 8003246:	4603      	mov	r3, r0
 8003248:	4a71      	ldr	r2, [pc, #452]	; (8003410 <interupt_DriveMotor+0x1068>)
 800324a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 800324c:	4b71      	ldr	r3, [pc, #452]	; (8003414 <interupt_DriveMotor+0x106c>)
 800324e:	edd3 6a00 	vldr	s13, [r3]
 8003252:	ed93 7a01 	vldr	s14, [r3, #4]
 8003256:	edd3 7a02 	vldr	s15, [r3, #8]
 800325a:	486d      	ldr	r0, [pc, #436]	; (8003410 <interupt_DriveMotor+0x1068>)
 800325c:	eeb0 0a66 	vmov.f32	s0, s13
 8003260:	eef0 0a47 	vmov.f32	s1, s14
 8003264:	eeb0 1a67 	vmov.f32	s2, s15
 8003268:	f005 fdca 	bl	8008e00 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800326c:	4b67      	ldr	r3, [pc, #412]	; (800340c <interupt_DriveMotor+0x1064>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	4b67      	ldr	r3, [pc, #412]	; (8003410 <interupt_DriveMotor+0x1068>)
 8003274:	ed93 7a00 	vldr	s14, [r3]
 8003278:	f107 020c 	add.w	r2, r7, #12
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	eef0 0a47 	vmov.f32	s1, s14
 8003284:	eeb0 0a67 	vmov.f32	s0, s15
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f001 fbf4 	bl	8004a78 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003290:	4b61      	ldr	r3, [pc, #388]	; (8003418 <interupt_DriveMotor+0x1070>)
 8003292:	ed93 7a00 	vldr	s14, [r3]
 8003296:	4b61      	ldr	r3, [pc, #388]	; (800341c <interupt_DriveMotor+0x1074>)
 8003298:	edd3 7a00 	vldr	s15, [r3]
 800329c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032a0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032a8:	4b58      	ldr	r3, [pc, #352]	; (800340c <interupt_DriveMotor+0x1064>)
 80032aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <interupt_DriveMotor+0x1078>)
 80032b0:	edd3 6a00 	vldr	s13, [r3]
 80032b4:	4b56      	ldr	r3, [pc, #344]	; (8003410 <interupt_DriveMotor+0x1068>)
 80032b6:	ed93 6a01 	vldr	s12, [r3, #4]
 80032ba:	1d3a      	adds	r2, r7, #4
 80032bc:	f107 0308 	add.w	r3, r7, #8
 80032c0:	eef0 1a46 	vmov.f32	s3, s12
 80032c4:	eeb0 1a66 	vmov.f32	s2, s13
 80032c8:	4611      	mov	r1, r2
 80032ca:	eef0 0a67 	vmov.f32	s1, s15
 80032ce:	eeb0 0a47 	vmov.f32	s0, s14
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 f924 	bl	8004520 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80032d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80032dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80032e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80032f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80032f8:	ed97 7a04 	vldr	s14, [r7, #16]
 80032fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003300:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003304:	edd7 7a02 	vldr	s15, [r7, #8]
 8003308:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003314:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003318:	f107 0214 	add.w	r2, r7, #20
 800331c:	f107 0318 	add.w	r3, r7, #24
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	edd7 0a08 	vldr	s1, [r7, #32]
 8003328:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800332c:	f7fe ffaa 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f004 fd92 	bl	8007e60 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <interupt_DriveMotor+0x1058>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	2b64      	cmp	r3, #100	; 0x64
 8003342:	d14b      	bne.n	80033dc <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8003344:	4b31      	ldr	r3, [pc, #196]	; (800340c <interupt_DriveMotor+0x1064>)
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 800334c:	4b30      	ldr	r3, [pc, #192]	; (8003410 <interupt_DriveMotor+0x1068>)
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <interupt_DriveMotor+0x1064>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	4b2d      	ldr	r3, [pc, #180]	; (8003410 <interupt_DriveMotor+0x1068>)
 800335c:	ed93 7a00 	vldr	s14, [r3]
 8003360:	f107 020c 	add.w	r2, r7, #12
 8003364:	f107 0310 	add.w	r3, r7, #16
 8003368:	eef0 0a47 	vmov.f32	s1, s14
 800336c:	eeb0 0a67 	vmov.f32	s0, s15
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f001 fb80 	bl	8004a78 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8003378:	ed97 7a04 	vldr	s14, [r7, #16]
 800337c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003380:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003384:	edd7 7a02 	vldr	s15, [r7, #8]
 8003388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800338c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003394:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003398:	ed97 7a04 	vldr	s14, [r7, #16]
 800339c:	edd7 7a03 	vldr	s15, [r7, #12]
 80033a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033b4:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80033b8:	f107 0214 	add.w	r2, r7, #20
 80033bc:	f107 0318 	add.w	r3, r7, #24
 80033c0:	4611      	mov	r1, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	edd7 0a08 	vldr	s1, [r7, #32]
 80033c8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80033cc:	f7fe ff5a 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4611      	mov	r1, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f004 fd42 	bl	8007e60 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 80033dc:	4a11      	ldr	r2, [pc, #68]	; (8003424 <interupt_DriveMotor+0x107c>)
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <interupt_DriveMotor+0x1080>)
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	6013      	str	r3, [r2, #0]



}
 80033e8:	bf00      	nop
 80033ea:	3728      	adds	r7, #40	; 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033f2:	bf00      	nop
 80033f4:	f3af 8000 	nop.w
 80033f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033fc:	3f50624d 	.word	0x3f50624d
 8003400:	2000052c 	.word	0x2000052c
 8003404:	20000594 	.word	0x20000594
 8003408:	20000596 	.word	0x20000596
 800340c:	200004dc 	.word	0x200004dc
 8003410:	200004e8 	.word	0x200004e8
 8003414:	2000051c 	.word	0x2000051c
 8003418:	20000238 	.word	0x20000238
 800341c:	2000023c 	.word	0x2000023c
 8003420:	2000026c 	.word	0x2000026c
 8003424:	20000530 	.word	0x20000530
 8003428:	20000534 	.word	0x20000534

0800342c <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	ed87 0a05 	vstr	s0, [r7, #20]
 8003436:	edc7 0a04 	vstr	s1, [r7, #16]
 800343a:	ed87 1a03 	vstr	s2, [r7, #12]
 800343e:	edc7 1a02 	vstr	s3, [r7, #8]
 8003442:	ed87 2a01 	vstr	s4, [r7, #4]
 8003446:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003448:	edd7 7a03 	vldr	s15, [r7, #12]
 800344c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003450:	edd7 7a04 	vldr	s15, [r7, #16]
 8003454:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003458:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800345c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003460:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003464:	ed97 7a01 	vldr	s14, [r7, #4]
 8003468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800346c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003470:	edd7 7a01 	vldr	s15, [r7, #4]
 8003474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d505      	bpl.n	800348a <straight_table2+0x5e>
 800347e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	edc7 7a01 	vstr	s15, [r7, #4]

	if(noGoalPillarMode==1 && motor_mode.WallCutMode==1){
 800348a:	4bba      	ldr	r3, [pc, #744]	; (8003774 <straight_table2+0x348>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d10c      	bne.n	80034ac <straight_table2+0x80>
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d109      	bne.n	80034ac <straight_table2+0x80>
		motor_mode.WallCutMode=0;
 8003498:	2300      	movs	r3, #0
 800349a:	70fb      	strb	r3, [r7, #3]
		input_displacement=input_displacement-MAZE_OFFSET;
 800349c:	edd7 7a05 	vldr	s15, [r7, #20]
 80034a0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80034a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80034a8:	edc7 7a05 	vstr	s15, [r7, #20]
	}


	Trapezoid_straight.displacement = input_displacement;
 80034ac:	4ab2      	ldr	r2, [pc, #712]	; (8003778 <straight_table2+0x34c>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80034b2:	4ab1      	ldr	r2, [pc, #708]	; (8003778 <straight_table2+0x34c>)
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80034b8:	4aaf      	ldr	r2, [pc, #700]	; (8003778 <straight_table2+0x34c>)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80034be:	4aae      	ldr	r2, [pc, #696]	; (8003778 <straight_table2+0x34c>)
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80034c4:	4aac      	ldr	r2, [pc, #688]	; (8003778 <straight_table2+0x34c>)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	db03      	blt.n	80034e0 <straight_table2+0xb4>
 80034d8:	4aa8      	ldr	r2, [pc, #672]	; (800377c <straight_table2+0x350>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6053      	str	r3, [r2, #4]
 80034de:	e006      	b.n	80034ee <straight_table2+0xc2>
	}else{straight.acceleration = -input_acceleration;}
 80034e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80034e4:	eef1 7a67 	vneg.f32	s15, s15
 80034e8:	4ba4      	ldr	r3, [pc, #656]	; (800377c <straight_table2+0x350>)
 80034ea:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80034ee:	4aa3      	ldr	r2, [pc, #652]	; (800377c <straight_table2+0x350>)
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80034f4:	4ba1      	ldr	r3, [pc, #644]	; (800377c <straight_table2+0x350>)
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80034fc:	4ba0      	ldr	r3, [pc, #640]	; (8003780 <straight_table2+0x354>)
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003504:	4b9e      	ldr	r3, [pc, #632]	; (8003780 <straight_table2+0x354>)
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800350c:	4b9c      	ldr	r3, [pc, #624]	; (8003780 <straight_table2+0x354>)
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003514:	4b9b      	ldr	r3, [pc, #620]	; (8003784 <straight_table2+0x358>)
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800351a:	4b9b      	ldr	r3, [pc, #620]	; (8003788 <straight_table2+0x35c>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003520:	edd7 7a05 	vldr	s15, [r7, #20]
 8003524:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352c:	dd0e      	ble.n	800354c <straight_table2+0x120>
 800352e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003532:	edd7 7a05 	vldr	s15, [r7, #20]
 8003536:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353e:	dd05      	ble.n	800354c <straight_table2+0x120>
 8003540:	4b91      	ldr	r3, [pc, #580]	; (8003788 <straight_table2+0x35c>)
 8003542:	2205      	movs	r2, #5
 8003544:	701a      	strb	r2, [r3, #0]
 8003546:	4a8d      	ldr	r2, [pc, #564]	; (800377c <straight_table2+0x350>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800354c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003558:	dd14      	ble.n	8003584 <straight_table2+0x158>
 800355a:	edd7 7a05 	vldr	s15, [r7, #20]
 800355e:	eef1 7a67 	vneg.f32	s15, s15
 8003562:	ed97 7a07 	vldr	s14, [r7, #28]
 8003566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800356a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356e:	d509      	bpl.n	8003584 <straight_table2+0x158>
 8003570:	4b85      	ldr	r3, [pc, #532]	; (8003788 <straight_table2+0x35c>)
 8003572:	2206      	movs	r2, #6
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	edd7 7a01 	vldr	s15, [r7, #4]
 800357a:	eef1 7a67 	vneg.f32	s15, s15
 800357e:	4b7f      	ldr	r3, [pc, #508]	; (800377c <straight_table2+0x350>)
 8003580:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003584:	edd7 7a05 	vldr	s15, [r7, #20]
 8003588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800358c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003590:	d514      	bpl.n	80035bc <straight_table2+0x190>
 8003592:	edd7 7a05 	vldr	s15, [r7, #20]
 8003596:	eef1 7a67 	vneg.f32	s15, s15
 800359a:	ed97 7a07 	vldr	s14, [r7, #28]
 800359e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a6:	dd09      	ble.n	80035bc <straight_table2+0x190>
 80035a8:	4b77      	ldr	r3, [pc, #476]	; (8003788 <straight_table2+0x35c>)
 80035aa:	2205      	movs	r2, #5
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b2:	eef1 7a67 	vneg.f32	s15, s15
 80035b6:	4b71      	ldr	r3, [pc, #452]	; (800377c <straight_table2+0x350>)
 80035b8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	d50e      	bpl.n	80035e8 <straight_table2+0x1bc>
 80035ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80035ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035da:	d505      	bpl.n	80035e8 <straight_table2+0x1bc>
 80035dc:	4b6a      	ldr	r3, [pc, #424]	; (8003788 <straight_table2+0x35c>)
 80035de:	2206      	movs	r2, #6
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	4a66      	ldr	r2, [pc, #408]	; (800377c <straight_table2+0x350>)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80035e8:	4b68      	ldr	r3, [pc, #416]	; (800378c <straight_table2+0x360>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 80035ee:	783a      	ldrb	r2, [r7, #0]
 80035f0:	4b67      	ldr	r3, [pc, #412]	; (8003790 <straight_table2+0x364>)
 80035f2:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80035f4:	f004 fc18 	bl	8007e28 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	f040 80d4 	bne.w	80037a8 <straight_table2+0x37c>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003600:	4b64      	ldr	r3, [pc, #400]	; (8003794 <straight_table2+0x368>)
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003608:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <straight_table2+0x35c>)
 800360a:	2200      	movs	r2, #0
 800360c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800360e:	4b5b      	ldr	r3, [pc, #364]	; (800377c <straight_table2+0x350>)
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003616:	bf00      	nop
 8003618:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <straight_table2+0x36c>)
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003622:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	d409      	bmi.n	8003640 <straight_table2+0x214>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800362c:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <straight_table2+0x36c>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003632:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800379c <straight_table2+0x370>
 8003636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800363a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363e:	dd18      	ble.n	8003672 <straight_table2+0x246>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <straight_table2+0x374>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003646:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800364a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003652:	d409      	bmi.n	8003668 <straight_table2+0x23c>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003654:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <straight_table2+0x374>)
 8003656:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800365a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800379c <straight_table2+0x370>
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	dd04      	ble.n	8003672 <straight_table2+0x246>
			  front_wall_break_90==0){}
 8003668:	4b4e      	ldr	r3, [pc, #312]	; (80037a4 <straight_table2+0x378>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0d2      	beq.n	8003618 <straight_table2+0x1ec>
		straight.displacement=0;
 8003672:	4b42      	ldr	r3, [pc, #264]	; (800377c <straight_table2+0x350>)
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800367a:	edd7 7a02 	vldr	s15, [r7, #8]
 800367e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	db03      	blt.n	8003690 <straight_table2+0x264>
 8003688:	4a3c      	ldr	r2, [pc, #240]	; (800377c <straight_table2+0x350>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6053      	str	r3, [r2, #4]
 800368e:	e006      	b.n	800369e <straight_table2+0x272>
			}else{straight.acceleration = -input_acceleration;}
 8003690:	edd7 7a01 	vldr	s15, [r7, #4]
 8003694:	eef1 7a67 	vneg.f32	s15, s15
 8003698:	4b38      	ldr	r3, [pc, #224]	; (800377c <straight_table2+0x350>)
 800369a:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800369e:	4b3a      	ldr	r3, [pc, #232]	; (8003788 <straight_table2+0x35c>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80036a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036b0:	dd0e      	ble.n	80036d0 <straight_table2+0x2a4>
 80036b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80036b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	dd05      	ble.n	80036d0 <straight_table2+0x2a4>
 80036c4:	4b30      	ldr	r3, [pc, #192]	; (8003788 <straight_table2+0x35c>)
 80036c6:	2205      	movs	r2, #5
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	4a2c      	ldr	r2, [pc, #176]	; (800377c <straight_table2+0x350>)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80036d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	dd14      	ble.n	8003708 <straight_table2+0x2dc>
 80036de:	edd7 7a05 	vldr	s15, [r7, #20]
 80036e2:	eef1 7a67 	vneg.f32	s15, s15
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f2:	d509      	bpl.n	8003708 <straight_table2+0x2dc>
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <straight_table2+0x35c>)
 80036f6:	2206      	movs	r2, #6
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80036fe:	eef1 7a67 	vneg.f32	s15, s15
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <straight_table2+0x350>)
 8003704:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003708:	edd7 7a05 	vldr	s15, [r7, #20]
 800370c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d514      	bpl.n	8003740 <straight_table2+0x314>
 8003716:	edd7 7a05 	vldr	s15, [r7, #20]
 800371a:	eef1 7a67 	vneg.f32	s15, s15
 800371e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372a:	dd09      	ble.n	8003740 <straight_table2+0x314>
 800372c:	4b16      	ldr	r3, [pc, #88]	; (8003788 <straight_table2+0x35c>)
 800372e:	2205      	movs	r2, #5
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	edd7 7a01 	vldr	s15, [r7, #4]
 8003736:	eef1 7a67 	vneg.f32	s15, s15
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <straight_table2+0x350>)
 800373c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003740:	edd7 7a05 	vldr	s15, [r7, #20]
 8003744:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374c:	f140 825c 	bpl.w	8003c08 <straight_table2+0x7dc>
 8003750:	ed97 7a07 	vldr	s14, [r7, #28]
 8003754:	edd7 7a05 	vldr	s15, [r7, #20]
 8003758:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003760:	f140 8252 	bpl.w	8003c08 <straight_table2+0x7dc>
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <straight_table2+0x35c>)
 8003766:	2206      	movs	r2, #6
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	4a04      	ldr	r2, [pc, #16]	; (800377c <straight_table2+0x350>)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6053      	str	r3, [r2, #4]
 8003770:	e24a      	b.n	8003c08 <straight_table2+0x7dc>
 8003772:	bf00      	nop
 8003774:	2000052d 	.word	0x2000052d
 8003778:	200004f4 	.word	0x200004f4
 800377c:	200004dc 	.word	0x200004dc
 8003780:	200004e8 	.word	0x200004e8
 8003784:	20000809 	.word	0x20000809
 8003788:	20000808 	.word	0x20000808
 800378c:	2000052c 	.word	0x2000052c
 8003790:	20000594 	.word	0x20000594
 8003794:	20000538 	.word	0x20000538
 8003798:	200005d0 	.word	0x200005d0
 800379c:	425c0000 	.word	0x425c0000
 80037a0:	200005d4 	.word	0x200005d4
 80037a4:	200005f6 	.word	0x200005f6
	}else if(motor_mode.WallCutMode==2){
 80037a8:	78fb      	ldrb	r3, [r7, #3]
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	f040 80c9 	bne.w	8003942 <straight_table2+0x516>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 80037b0:	4bb8      	ldr	r3, [pc, #736]	; (8003a94 <straight_table2+0x668>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80037b6:	4bb8      	ldr	r3, [pc, #736]	; (8003a98 <straight_table2+0x66c>)
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80037be:	bf00      	nop
 80037c0:	4bb6      	ldr	r3, [pc, #728]	; (8003a9c <straight_table2+0x670>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ce:	d913      	bls.n	80037f8 <straight_table2+0x3cc>
 80037d0:	4bb2      	ldr	r3, [pc, #712]	; (8003a9c <straight_table2+0x670>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 80037da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	d909      	bls.n	80037f8 <straight_table2+0x3cc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80037e4:	4bad      	ldr	r3, [pc, #692]	; (8003a9c <straight_table2+0x670>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80037ea:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8003aa0 <straight_table2+0x674>
 80037ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	db20      	blt.n	800383a <straight_table2+0x40e>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80037f8:	4baa      	ldr	r3, [pc, #680]	; (8003aa4 <straight_table2+0x678>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80037fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	d913      	bls.n	8003830 <straight_table2+0x404>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003808:	4ba6      	ldr	r3, [pc, #664]	; (8003aa4 <straight_table2+0x678>)
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381a:	d909      	bls.n	8003830 <straight_table2+0x404>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800381c:	4ba1      	ldr	r3, [pc, #644]	; (8003aa4 <straight_table2+0x678>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003822:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8003aa0 <straight_table2+0x674>
 8003826:	eef4 7ac7 	vcmpe.f32	s15, s14
 800382a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382e:	db04      	blt.n	800383a <straight_table2+0x40e>
			  front_wall_break_45==0){}
 8003830:	4b9d      	ldr	r3, [pc, #628]	; (8003aa8 <straight_table2+0x67c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c2      	beq.n	80037c0 <straight_table2+0x394>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 800383a:	4b9c      	ldr	r3, [pc, #624]	; (8003aac <straight_table2+0x680>)
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003842:	4b95      	ldr	r3, [pc, #596]	; (8003a98 <straight_table2+0x66c>)
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800384a:	edd7 7a02 	vldr	s15, [r7, #8]
 800384e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003856:	db03      	blt.n	8003860 <straight_table2+0x434>
 8003858:	4a8f      	ldr	r2, [pc, #572]	; (8003a98 <straight_table2+0x66c>)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	e006      	b.n	800386e <straight_table2+0x442>
			}else{straight.acceleration = -input_acceleration;}
 8003860:	edd7 7a01 	vldr	s15, [r7, #4]
 8003864:	eef1 7a67 	vneg.f32	s15, s15
 8003868:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <straight_table2+0x66c>)
 800386a:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800386e:	4b89      	ldr	r3, [pc, #548]	; (8003a94 <straight_table2+0x668>)
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003874:	edd7 7a05 	vldr	s15, [r7, #20]
 8003878:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003880:	dd0e      	ble.n	80038a0 <straight_table2+0x474>
 8003882:	ed97 7a07 	vldr	s14, [r7, #28]
 8003886:	edd7 7a05 	vldr	s15, [r7, #20]
 800388a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	dd05      	ble.n	80038a0 <straight_table2+0x474>
 8003894:	4b7f      	ldr	r3, [pc, #508]	; (8003a94 <straight_table2+0x668>)
 8003896:	2205      	movs	r2, #5
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	4a7f      	ldr	r2, [pc, #508]	; (8003a98 <straight_table2+0x66c>)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80038a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80038a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ac:	dd14      	ble.n	80038d8 <straight_table2+0x4ac>
 80038ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80038b2:	eef1 7a67 	vneg.f32	s15, s15
 80038b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c2:	d509      	bpl.n	80038d8 <straight_table2+0x4ac>
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <straight_table2+0x668>)
 80038c6:	2206      	movs	r2, #6
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ce:	eef1 7a67 	vneg.f32	s15, s15
 80038d2:	4b71      	ldr	r3, [pc, #452]	; (8003a98 <straight_table2+0x66c>)
 80038d4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80038d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80038dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	d514      	bpl.n	8003910 <straight_table2+0x4e4>
 80038e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038ea:	eef1 7a67 	vneg.f32	s15, s15
 80038ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80038f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fa:	dd09      	ble.n	8003910 <straight_table2+0x4e4>
 80038fc:	4b65      	ldr	r3, [pc, #404]	; (8003a94 <straight_table2+0x668>)
 80038fe:	2205      	movs	r2, #5
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	edd7 7a01 	vldr	s15, [r7, #4]
 8003906:	eef1 7a67 	vneg.f32	s15, s15
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <straight_table2+0x66c>)
 800390c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003910:	edd7 7a05 	vldr	s15, [r7, #20]
 8003914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	f140 8174 	bpl.w	8003c08 <straight_table2+0x7dc>
 8003920:	ed97 7a07 	vldr	s14, [r7, #28]
 8003924:	edd7 7a05 	vldr	s15, [r7, #20]
 8003928:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800392c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003930:	f140 816a 	bpl.w	8003c08 <straight_table2+0x7dc>
 8003934:	4b57      	ldr	r3, [pc, #348]	; (8003a94 <straight_table2+0x668>)
 8003936:	2206      	movs	r2, #6
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <straight_table2+0x66c>)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6053      	str	r3, [r2, #4]
 8003940:	e162      	b.n	8003c08 <straight_table2+0x7dc>
	}else if(motor_mode.WallCutMode==3){
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	2b03      	cmp	r3, #3
 8003946:	f040 80b9 	bne.w	8003abc <straight_table2+0x690>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 800394a:	4b52      	ldr	r3, [pc, #328]	; (8003a94 <straight_table2+0x668>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003950:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <straight_table2+0x66c>)
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003958:	bf00      	nop
 800395a:	4b55      	ldr	r3, [pc, #340]	; (8003ab0 <straight_table2+0x684>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	d409      	bmi.n	8003982 <straight_table2+0x556>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800396e:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <straight_table2+0x684>)
 8003970:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003974:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003ab4 <straight_table2+0x688>
 8003978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800397c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003980:	dd04      	ble.n	800398c <straight_table2+0x560>
				  front_wall_break_45slant==0){}
 8003982:	4b4d      	ldr	r3, [pc, #308]	; (8003ab8 <straight_table2+0x68c>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0e6      	beq.n	800395a <straight_table2+0x52e>
		enc.sigma_error=0;
 800398c:	4b47      	ldr	r3, [pc, #284]	; (8003aac <straight_table2+0x680>)
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003994:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <straight_table2+0x66c>)
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800399c:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	db03      	blt.n	80039b2 <straight_table2+0x586>
 80039aa:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <straight_table2+0x66c>)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6053      	str	r3, [r2, #4]
 80039b0:	e006      	b.n	80039c0 <straight_table2+0x594>
			}else{straight.acceleration = -input_acceleration;}
 80039b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b6:	eef1 7a67 	vneg.f32	s15, s15
 80039ba:	4b37      	ldr	r3, [pc, #220]	; (8003a98 <straight_table2+0x66c>)
 80039bc:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80039c0:	4b34      	ldr	r3, [pc, #208]	; (8003a94 <straight_table2+0x668>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80039c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d2:	dd0e      	ble.n	80039f2 <straight_table2+0x5c6>
 80039d4:	ed97 7a07 	vldr	s14, [r7, #28]
 80039d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80039dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e4:	dd05      	ble.n	80039f2 <straight_table2+0x5c6>
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <straight_table2+0x668>)
 80039e8:	2205      	movs	r2, #5
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <straight_table2+0x66c>)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80039f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fe:	dd14      	ble.n	8003a2a <straight_table2+0x5fe>
 8003a00:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a04:	eef1 7a67 	vneg.f32	s15, s15
 8003a08:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	d509      	bpl.n	8003a2a <straight_table2+0x5fe>
 8003a16:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <straight_table2+0x668>)
 8003a18:	2206      	movs	r2, #6
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a20:	eef1 7a67 	vneg.f32	s15, s15
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <straight_table2+0x66c>)
 8003a26:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d514      	bpl.n	8003a62 <straight_table2+0x636>
 8003a38:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a3c:	eef1 7a67 	vneg.f32	s15, s15
 8003a40:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	dd09      	ble.n	8003a62 <straight_table2+0x636>
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <straight_table2+0x668>)
 8003a50:	2205      	movs	r2, #5
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a58:	eef1 7a67 	vneg.f32	s15, s15
 8003a5c:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <straight_table2+0x66c>)
 8003a5e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6e:	f140 80cb 	bpl.w	8003c08 <straight_table2+0x7dc>
 8003a72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a82:	f140 80c1 	bpl.w	8003c08 <straight_table2+0x7dc>
 8003a86:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <straight_table2+0x668>)
 8003a88:	2206      	movs	r2, #6
 8003a8a:	701a      	strb	r2, [r3, #0]
 8003a8c:	4a02      	ldr	r2, [pc, #8]	; (8003a98 <straight_table2+0x66c>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6053      	str	r3, [r2, #4]
 8003a92:	e0b9      	b.n	8003c08 <straight_table2+0x7dc>
 8003a94:	20000808 	.word	0x20000808
 8003a98:	200004dc 	.word	0x200004dc
 8003a9c:	200005d8 	.word	0x200005d8
 8003aa0:	42000000 	.word	0x42000000
 8003aa4:	200005dc 	.word	0x200005dc
 8003aa8:	200005f7 	.word	0x200005f7
 8003aac:	20000538 	.word	0x20000538
 8003ab0:	200005e8 	.word	0x200005e8
 8003ab4:	420c0000 	.word	0x420c0000
 8003ab8:	200005f8 	.word	0x200005f8
	}else if(motor_mode.WallCutMode==4){
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	f040 80a2 	bne.w	8003c08 <straight_table2+0x7dc>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8003ac4:	4baa      	ldr	r3, [pc, #680]	; (8003d70 <straight_table2+0x944>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003aca:	4baa      	ldr	r3, [pc, #680]	; (8003d74 <straight_table2+0x948>)
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003ad2:	bf00      	nop
 8003ad4:	4ba8      	ldr	r3, [pc, #672]	; (8003d78 <straight_table2+0x94c>)
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003ade:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	d409      	bmi.n	8003afc <straight_table2+0x6d0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003ae8:	4ba3      	ldr	r3, [pc, #652]	; (8003d78 <straight_table2+0x94c>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003aee:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003d7c <straight_table2+0x950>
 8003af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	dd04      	ble.n	8003b06 <straight_table2+0x6da>
				  front_wall_break_45slant==0){}
 8003afc:	4ba0      	ldr	r3, [pc, #640]	; (8003d80 <straight_table2+0x954>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0e6      	beq.n	8003ad4 <straight_table2+0x6a8>
		enc.sigma_error=0;
 8003b06:	4b9f      	ldr	r3, [pc, #636]	; (8003d84 <straight_table2+0x958>)
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003b0e:	4b99      	ldr	r3, [pc, #612]	; (8003d74 <straight_table2+0x948>)
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003b16:	edd7 7a02 	vldr	s15, [r7, #8]
 8003b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b22:	db03      	blt.n	8003b2c <straight_table2+0x700>
 8003b24:	4a93      	ldr	r2, [pc, #588]	; (8003d74 <straight_table2+0x948>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6053      	str	r3, [r2, #4]
 8003b2a:	e006      	b.n	8003b3a <straight_table2+0x70e>
			}else{straight.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b30:	eef1 7a67 	vneg.f32	s15, s15
 8003b34:	4b8f      	ldr	r3, [pc, #572]	; (8003d74 <straight_table2+0x948>)
 8003b36:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003b3a:	4b8d      	ldr	r3, [pc, #564]	; (8003d70 <straight_table2+0x944>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4c:	dd0e      	ble.n	8003b6c <straight_table2+0x740>
 8003b4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	dd05      	ble.n	8003b6c <straight_table2+0x740>
 8003b60:	4b83      	ldr	r3, [pc, #524]	; (8003d70 <straight_table2+0x944>)
 8003b62:	2205      	movs	r2, #5
 8003b64:	701a      	strb	r2, [r3, #0]
 8003b66:	4a83      	ldr	r2, [pc, #524]	; (8003d74 <straight_table2+0x948>)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003b6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b78:	dd14      	ble.n	8003ba4 <straight_table2+0x778>
 8003b7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7e:	eef1 7a67 	vneg.f32	s15, s15
 8003b82:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b8e:	d509      	bpl.n	8003ba4 <straight_table2+0x778>
 8003b90:	4b77      	ldr	r3, [pc, #476]	; (8003d70 <straight_table2+0x944>)
 8003b92:	2206      	movs	r2, #6
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b9a:	eef1 7a67 	vneg.f32	s15, s15
 8003b9e:	4b75      	ldr	r3, [pc, #468]	; (8003d74 <straight_table2+0x948>)
 8003ba0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003ba4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ba8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb0:	d514      	bpl.n	8003bdc <straight_table2+0x7b0>
 8003bb2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bb6:	eef1 7a67 	vneg.f32	s15, s15
 8003bba:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bc6:	dd09      	ble.n	8003bdc <straight_table2+0x7b0>
 8003bc8:	4b69      	ldr	r3, [pc, #420]	; (8003d70 <straight_table2+0x944>)
 8003bca:	2205      	movs	r2, #5
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8003bd2:	eef1 7a67 	vneg.f32	s15, s15
 8003bd6:	4b67      	ldr	r3, [pc, #412]	; (8003d74 <straight_table2+0x948>)
 8003bd8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003bdc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003be0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d50e      	bpl.n	8003c08 <straight_table2+0x7dc>
 8003bea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bee:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfa:	d505      	bpl.n	8003c08 <straight_table2+0x7dc>
 8003bfc:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <straight_table2+0x944>)
 8003bfe:	2206      	movs	r2, #6
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <straight_table2+0x948>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003c08:	78bb      	ldrb	r3, [r7, #2]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f040 80a7 	bne.w	8003d5e <straight_table2+0x932>
	while (g_acc_flag!=4){
 8003c10:	e074      	b.n	8003cfc <straight_table2+0x8d0>
		if(motor_mode.WallCutMode==1){
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d120      	bne.n	8003c5a <straight_table2+0x82e>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003c18:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c1c:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003c20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c24:	4b58      	ldr	r3, [pc, #352]	; (8003d88 <straight_table2+0x95c>)
 8003c26:	edd3 7a00 	vldr	s15, [r3]
 8003c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	d90e      	bls.n	8003c52 <straight_table2+0x826>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c38:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c40:	4b52      	ldr	r3, [pc, #328]	; (8003d8c <straight_table2+0x960>)
 8003c42:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c4e:	d900      	bls.n	8003c52 <straight_table2+0x826>
 8003c50:	e054      	b.n	8003cfc <straight_table2+0x8d0>
				g_acc_flag=4;
 8003c52:	4b47      	ldr	r3, [pc, #284]	; (8003d70 <straight_table2+0x944>)
 8003c54:	2204      	movs	r2, #4
 8003c56:	701a      	strb	r2, [r3, #0]
				break;
 8003c58:	e055      	b.n	8003d06 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==2){
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d121      	bne.n	8003ca4 <straight_table2+0x878>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003c60:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c64:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c68:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003c6c:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <straight_table2+0x964>)
 8003c6e:	edd3 7a00 	vldr	s15, [r3]
 8003c72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d900      	bls.n	8003c7e <straight_table2+0x852>
 8003c7c:	e03e      	b.n	8003cfc <straight_table2+0x8d0>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003c7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c82:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003c86:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003c8a:	4b42      	ldr	r3, [pc, #264]	; (8003d94 <straight_table2+0x968>)
 8003c8c:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003c90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c98:	d900      	bls.n	8003c9c <straight_table2+0x870>
 8003c9a:	e02f      	b.n	8003cfc <straight_table2+0x8d0>
				g_acc_flag=4;
 8003c9c:	4b34      	ldr	r3, [pc, #208]	; (8003d70 <straight_table2+0x944>)
 8003c9e:	2204      	movs	r2, #4
 8003ca0:	701a      	strb	r2, [r3, #0]
				break;
 8003ca2:	e030      	b.n	8003d06 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==3){
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d112      	bne.n	8003cd0 <straight_table2+0x8a4>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003caa:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cb6:	4b38      	ldr	r3, [pc, #224]	; (8003d98 <straight_table2+0x96c>)
 8003cb8:	edd3 7a00 	vldr	s15, [r3]
 8003cbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc4:	d900      	bls.n	8003cc8 <straight_table2+0x89c>
 8003cc6:	e019      	b.n	8003cfc <straight_table2+0x8d0>
				g_acc_flag=4;
 8003cc8:	4b29      	ldr	r3, [pc, #164]	; (8003d70 <straight_table2+0x944>)
 8003cca:	2204      	movs	r2, #4
 8003ccc:	701a      	strb	r2, [r3, #0]
				break;
 8003cce:	e01a      	b.n	8003d06 <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==4){
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d112      	bne.n	8003cfc <straight_table2+0x8d0>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8003cd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cda:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ce2:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <straight_table2+0x94c>)
 8003ce4:	edd3 7a00 	vldr	s15, [r3]
 8003ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf0:	d900      	bls.n	8003cf4 <straight_table2+0x8c8>
 8003cf2:	e003      	b.n	8003cfc <straight_table2+0x8d0>
				g_acc_flag=4;
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <straight_table2+0x944>)
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	701a      	strb	r2, [r3, #0]
				break;
 8003cfa:	e004      	b.n	8003d06 <straight_table2+0x8da>
	while (g_acc_flag!=4){
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <straight_table2+0x944>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d185      	bne.n	8003c12 <straight_table2+0x7e6>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d12:	d10e      	bne.n	8003d32 <straight_table2+0x906>
		wait_ms_NoReset(100);
 8003d14:	2064      	movs	r0, #100	; 0x64
 8003d16:	f004 fb5f 	bl	80083d8 <wait_ms_NoReset>
		modeacc = 0;
 8003d1a:	4b20      	ldr	r3, [pc, #128]	; (8003d9c <straight_table2+0x970>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8003d20:	2003      	movs	r0, #3
 8003d22:	f004 f85b 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8003d26:	2003      	movs	r0, #3
 8003d28:	f004 f830 	bl	8007d8c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 8003d2c:	2064      	movs	r0, #100	; 0x64
 8003d2e:	f004 fb53 	bl	80083d8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <straight_table2+0x974>)
 8003d34:	ed93 7a00 	vldr	s14, [r3]
 8003d38:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <straight_table2+0x974>)
 8003d42:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <straight_table2+0x978>)
 8003d48:	ed93 7a00 	vldr	s14, [r3]
 8003d4c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d54:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <straight_table2+0x978>)
 8003d56:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003d5a:	f004 f873 	bl	8007e44 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 8003d5e:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <straight_table2+0x948>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	ee07 3a90 	vmov	s15, r3



}
 8003d66:	eeb0 0a67 	vmov.f32	s0, s15
 8003d6a:	3720      	adds	r7, #32
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	20000808 	.word	0x20000808
 8003d74:	200004dc 	.word	0x200004dc
 8003d78:	200005ec 	.word	0x200005ec
 8003d7c:	420c0000 	.word	0x420c0000
 8003d80:	200005f8 	.word	0x200005f8
 8003d84:	20000538 	.word	0x20000538
 8003d88:	200005d4 	.word	0x200005d4
 8003d8c:	200005d0 	.word	0x200005d0
 8003d90:	200005dc 	.word	0x200005dc
 8003d94:	200005d8 	.word	0x200005d8
 8003d98:	200005e8 	.word	0x200005e8
 8003d9c:	2000052c 	.word	0x2000052c
 8003da0:	20000220 	.word	0x20000220
 8003da4:	20000224 	.word	0x20000224

08003da8 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	ed87 0a03 	vstr	s0, [r7, #12]
 8003db2:	60b8      	str	r0, [r7, #8]
 8003db4:	460b      	mov	r3, r1
 8003db6:	71fb      	strb	r3, [r7, #7]
 8003db8:	4613      	mov	r3, r2
 8003dba:	71bb      	strb	r3, [r7, #6]
	if(noGoalPillarMode==1){
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <End_straight+0xc0>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d132      	bne.n	8003e2a <End_straight+0x82>
		motor_mode.WallCutMode=0;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	72fb      	strb	r3, [r7, #11]
	}
	while (g_acc_flag!=4){
 8003dc8:	e02f      	b.n	8003e2a <End_straight+0x82>
		if(right_wall == 0 || left_wall == 0){
 8003dca:	79fb      	ldrb	r3, [r7, #7]
 8003dcc:	f083 0301 	eor.w	r3, r3, #1
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <End_straight+0x3a>
 8003dd6:	79bb      	ldrb	r3, [r7, #6]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d023      	beq.n	8003e2a <End_straight+0x82>
		if(motor_mode.WallCutMode==1){
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d120      	bne.n	8003e2a <End_straight+0x82>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8003dec:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003df4:	4b1d      	ldr	r3, [pc, #116]	; (8003e6c <End_straight+0xc4>)
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e02:	d90e      	bls.n	8003e22 <End_straight+0x7a>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e08:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <End_straight+0xc8>)
 8003e12:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1e:	d900      	bls.n	8003e22 <End_straight+0x7a>
 8003e20:	e003      	b.n	8003e2a <End_straight+0x82>
						g_acc_flag=4;
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <End_straight+0xcc>)
 8003e24:	2204      	movs	r2, #4
 8003e26:	701a      	strb	r2, [r3, #0]
						break;
 8003e28:	e004      	b.n	8003e34 <End_straight+0x8c>
	while (g_acc_flag!=4){
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <End_straight+0xcc>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d1ca      	bne.n	8003dca <End_straight+0x22>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003e34:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <End_straight+0xd0>)
 8003e36:	ed93 7a00 	vldr	s14, [r3]
 8003e3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e42:	4b0d      	ldr	r3, [pc, #52]	; (8003e78 <End_straight+0xd0>)
 8003e44:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <End_straight+0xd4>)
 8003e4a:	ed93 7a00 	vldr	s14, [r3]
 8003e4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e56:	4b09      	ldr	r3, [pc, #36]	; (8003e7c <End_straight+0xd4>)
 8003e58:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003e5c:	f003 fff2 	bl	8007e44 <pl_DriveMotor_stop>
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	2000052d 	.word	0x2000052d
 8003e6c:	200005d4 	.word	0x200005d4
 8003e70:	200005d0 	.word	0x200005d0
 8003e74:	20000808 	.word	0x20000808
 8003e78:	20000220 	.word	0x20000220
 8003e7c:	20000224 	.word	0x20000224

08003e80 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	ed87 0a05 	vstr	s0, [r7, #20]
 8003e8a:	edc7 0a04 	vstr	s1, [r7, #16]
 8003e8e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003e92:	edc7 1a02 	vstr	s3, [r7, #8]
 8003e96:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003e9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e9e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003ea2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ea6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003eae:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003eb2:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003eb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebe:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003ec2:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ece:	d505      	bpl.n	8003edc <turning_table2+0x5c>
 8003ed0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ed4:	eef1 7a67 	vneg.f32	s15, s15
 8003ed8:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <turning_table2+0x218>)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003ee2:	4a6d      	ldr	r2, [pc, #436]	; (8004098 <turning_table2+0x218>)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003ee8:	4a6b      	ldr	r2, [pc, #428]	; (8004098 <turning_table2+0x218>)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003eee:	4a6a      	ldr	r2, [pc, #424]	; (8004098 <turning_table2+0x218>)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ef4:	4a68      	ldr	r2, [pc, #416]	; (8004098 <turning_table2+0x218>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003efa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f06:	db03      	blt.n	8003f10 <turning_table2+0x90>
 8003f08:	4a64      	ldr	r2, [pc, #400]	; (800409c <turning_table2+0x21c>)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6053      	str	r3, [r2, #4]
 8003f0e:	e006      	b.n	8003f1e <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f14:	eef1 7a67 	vneg.f32	s15, s15
 8003f18:	4b60      	ldr	r3, [pc, #384]	; (800409c <turning_table2+0x21c>)
 8003f1a:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003f1e:	4a5f      	ldr	r2, [pc, #380]	; (800409c <turning_table2+0x21c>)
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003f24:	4b5d      	ldr	r3, [pc, #372]	; (800409c <turning_table2+0x21c>)
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f2c:	4b5c      	ldr	r3, [pc, #368]	; (80040a0 <turning_table2+0x220>)
 8003f2e:	f04f 0200 	mov.w	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003f34:	4b5a      	ldr	r3, [pc, #360]	; (80040a0 <turning_table2+0x220>)
 8003f36:	f04f 0200 	mov.w	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f3c:	4b58      	ldr	r3, [pc, #352]	; (80040a0 <turning_table2+0x220>)
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f44:	4b57      	ldr	r3, [pc, #348]	; (80040a4 <turning_table2+0x224>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f4a:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <turning_table2+0x228>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5c:	dd0e      	ble.n	8003f7c <turning_table2+0xfc>
 8003f5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6e:	dd05      	ble.n	8003f7c <turning_table2+0xfc>
 8003f70:	4b4d      	ldr	r3, [pc, #308]	; (80040a8 <turning_table2+0x228>)
 8003f72:	2205      	movs	r2, #5
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	4a49      	ldr	r2, [pc, #292]	; (800409c <turning_table2+0x21c>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003f7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f88:	dd14      	ble.n	8003fb4 <turning_table2+0x134>
 8003f8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f8e:	eef1 7a67 	vneg.f32	s15, s15
 8003f92:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9e:	d509      	bpl.n	8003fb4 <turning_table2+0x134>
 8003fa0:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <turning_table2+0x228>)
 8003fa2:	2206      	movs	r2, #6
 8003fa4:	701a      	strb	r2, [r3, #0]
 8003fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003faa:	eef1 7a67 	vneg.f32	s15, s15
 8003fae:	4b3b      	ldr	r3, [pc, #236]	; (800409c <turning_table2+0x21c>)
 8003fb0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc0:	d514      	bpl.n	8003fec <turning_table2+0x16c>
 8003fc2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fc6:	eef1 7a67 	vneg.f32	s15, s15
 8003fca:	ed97 7a07 	vldr	s14, [r7, #28]
 8003fce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd6:	dd09      	ble.n	8003fec <turning_table2+0x16c>
 8003fd8:	4b33      	ldr	r3, [pc, #204]	; (80040a8 <turning_table2+0x228>)
 8003fda:	2205      	movs	r2, #5
 8003fdc:	701a      	strb	r2, [r3, #0]
 8003fde:	edd7 7a01 	vldr	s15, [r7, #4]
 8003fe2:	eef1 7a67 	vneg.f32	s15, s15
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	; (800409c <turning_table2+0x21c>)
 8003fe8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003fec:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ff0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff8:	d50e      	bpl.n	8004018 <turning_table2+0x198>
 8003ffa:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ffe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800400a:	d505      	bpl.n	8004018 <turning_table2+0x198>
 800400c:	4b26      	ldr	r3, [pc, #152]	; (80040a8 <turning_table2+0x228>)
 800400e:	2206      	movs	r2, #6
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	4a22      	ldr	r2, [pc, #136]	; (800409c <turning_table2+0x21c>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <turning_table2+0x22c>)
 800401a:	2202      	movs	r2, #2
 800401c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 800401e:	f003 ff03 	bl	8007e28 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004022:	bf00      	nop
 8004024:	4b20      	ldr	r3, [pc, #128]	; (80040a8 <turning_table2+0x228>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b04      	cmp	r3, #4
 800402c:	d1fa      	bne.n	8004024 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 800402e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004032:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403a:	d10f      	bne.n	800405c <turning_table2+0x1dc>
		wait_ms_NoReset(300);
 800403c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004040:	f004 f9ca 	bl	80083d8 <wait_ms_NoReset>
		modeacc = 0;
 8004044:	4b19      	ldr	r3, [pc, #100]	; (80040ac <turning_table2+0x22c>)
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800404a:	2003      	movs	r0, #3
 800404c:	f003 fec6 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8004050:	2003      	movs	r0, #3
 8004052:	f003 fe9b 	bl	8007d8c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 8004056:	2064      	movs	r0, #100	; 0x64
 8004058:	f004 f9be 	bl	80083d8 <wait_ms_NoReset>
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 800405c:	4b14      	ldr	r3, [pc, #80]	; (80040b0 <turning_table2+0x230>)
 800405e:	ed93 7a00 	vldr	s14, [r3]
 8004062:	edd7 7a05 	vldr	s15, [r7, #20]
 8004066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <turning_table2+0x230>)
 800406c:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004070:	f003 fee8 	bl	8007e44 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004074:	4b0f      	ldr	r3, [pc, #60]	; (80040b4 <turning_table2+0x234>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a0f      	ldr	r2, [pc, #60]	; (80040b8 <turning_table2+0x238>)
 800407a:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <turning_table2+0x23c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0f      	ldr	r2, [pc, #60]	; (80040c0 <turning_table2+0x240>)
 8004082:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <turning_table2+0x21c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	ee07 3a90 	vmov	s15, r3
}
 800408c:	eeb0 0a67 	vmov.f32	s0, s15
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000508 	.word	0x20000508
 800409c:	200004e8 	.word	0x200004e8
 80040a0:	200004dc 	.word	0x200004dc
 80040a4:	20000809 	.word	0x20000809
 80040a8:	20000808 	.word	0x20000808
 80040ac:	2000052c 	.word	0x2000052c
 80040b0:	20000268 	.word	0x20000268
 80040b4:	20000228 	.word	0x20000228
 80040b8:	20000258 	.word	0x20000258
 80040bc:	2000022c 	.word	0x2000022c
 80040c0:	2000025c 	.word	0x2000025c

080040c4 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80040ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80040d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80040d6:	edc7 1a02 	vstr	s3, [r7, #8]
 80040da:	ed87 2a01 	vstr	s4, [r7, #4]
 80040de:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80040e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80040ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80040ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040f2:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80040f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80040fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80040fe:	ed97 7a00 	vldr	s14, [r7]
 8004102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004106:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800410a:	edd7 7a00 	vldr	s15, [r7]
 800410e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d505      	bpl.n	8004124 <slalom_table2+0x60>
 8004118:	edd7 7a00 	vldr	s15, [r7]
 800411c:	eef1 7a67 	vneg.f32	s15, s15
 8004120:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8004124:	4a5e      	ldr	r2, [pc, #376]	; (80042a0 <slalom_table2+0x1dc>)
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 800412a:	4a5d      	ldr	r2, [pc, #372]	; (80042a0 <slalom_table2+0x1dc>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004130:	4a5b      	ldr	r2, [pc, #364]	; (80042a0 <slalom_table2+0x1dc>)
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004136:	4a5a      	ldr	r2, [pc, #360]	; (80042a0 <slalom_table2+0x1dc>)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <slalom_table2+0x1dc>)
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8004142:	edd7 7a01 	vldr	s15, [r7, #4]
 8004146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414e:	db03      	blt.n	8004158 <slalom_table2+0x94>
 8004150:	4a54      	ldr	r2, [pc, #336]	; (80042a4 <slalom_table2+0x1e0>)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	e006      	b.n	8004166 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8004158:	edd7 7a00 	vldr	s15, [r7]
 800415c:	eef1 7a67 	vneg.f32	s15, s15
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <slalom_table2+0x1e0>)
 8004162:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8004166:	4a4f      	ldr	r2, [pc, #316]	; (80042a4 <slalom_table2+0x1e0>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 800416c:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <slalom_table2+0x1e0>)
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004174:	4a4c      	ldr	r2, [pc, #304]	; (80042a8 <slalom_table2+0x1e4>)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 800417a:	4b4b      	ldr	r3, [pc, #300]	; (80042a8 <slalom_table2+0x1e4>)
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004182:	4b49      	ldr	r3, [pc, #292]	; (80042a8 <slalom_table2+0x1e4>)
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800418a:	4b48      	ldr	r3, [pc, #288]	; (80042ac <slalom_table2+0x1e8>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004190:	4b47      	ldr	r3, [pc, #284]	; (80042b0 <slalom_table2+0x1ec>)
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8004196:	edd7 7a04 	vldr	s15, [r7, #16]
 800419a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	dd0e      	ble.n	80041c2 <slalom_table2+0xfe>
 80041a4:	ed97 7a07 	vldr	s14, [r7, #28]
 80041a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80041ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	dd05      	ble.n	80041c2 <slalom_table2+0xfe>
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <slalom_table2+0x1ec>)
 80041b8:	2205      	movs	r2, #5
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <slalom_table2+0x1e0>)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80041c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80041c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ce:	dd14      	ble.n	80041fa <slalom_table2+0x136>
 80041d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80041d4:	eef1 7a67 	vneg.f32	s15, s15
 80041d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80041dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e4:	d509      	bpl.n	80041fa <slalom_table2+0x136>
 80041e6:	4b32      	ldr	r3, [pc, #200]	; (80042b0 <slalom_table2+0x1ec>)
 80041e8:	2206      	movs	r2, #6
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	edd7 7a00 	vldr	s15, [r7]
 80041f0:	eef1 7a67 	vneg.f32	s15, s15
 80041f4:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <slalom_table2+0x1e0>)
 80041f6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 80041fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80041fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004206:	d514      	bpl.n	8004232 <slalom_table2+0x16e>
 8004208:	edd7 7a04 	vldr	s15, [r7, #16]
 800420c:	eef1 7a67 	vneg.f32	s15, s15
 8004210:	ed97 7a07 	vldr	s14, [r7, #28]
 8004214:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	dd09      	ble.n	8004232 <slalom_table2+0x16e>
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <slalom_table2+0x1ec>)
 8004220:	2205      	movs	r2, #5
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	edd7 7a00 	vldr	s15, [r7]
 8004228:	eef1 7a67 	vneg.f32	s15, s15
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <slalom_table2+0x1e0>)
 800422e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004232:	edd7 7a04 	vldr	s15, [r7, #16]
 8004236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800423a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423e:	d50e      	bpl.n	800425e <slalom_table2+0x19a>
 8004240:	ed97 7a07 	vldr	s14, [r7, #28]
 8004244:	edd7 7a04 	vldr	s15, [r7, #16]
 8004248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	d505      	bpl.n	800425e <slalom_table2+0x19a>
 8004252:	4b17      	ldr	r3, [pc, #92]	; (80042b0 <slalom_table2+0x1ec>)
 8004254:	2206      	movs	r2, #6
 8004256:	701a      	strb	r2, [r3, #0]
 8004258:	4a12      	ldr	r2, [pc, #72]	; (80042a4 <slalom_table2+0x1e0>)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 800425e:	4b15      	ldr	r3, [pc, #84]	; (80042b4 <slalom_table2+0x1f0>)
 8004260:	2204      	movs	r2, #4
 8004262:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8004264:	f003 fde0 	bl	8007e28 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004268:	bf00      	nop
 800426a:	4b11      	ldr	r3, [pc, #68]	; (80042b0 <slalom_table2+0x1ec>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b04      	cmp	r3, #4
 8004272:	d1fa      	bne.n	800426a <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8004274:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <slalom_table2+0x1f4>)
 8004276:	ed93 7a00 	vldr	s14, [r3]
 800427a:	edd7 7a04 	vldr	s15, [r7, #16]
 800427e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004282:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <slalom_table2+0x1f4>)
 8004284:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004288:	f003 fddc 	bl	8007e44 <pl_DriveMotor_stop>

	return turning.velocity;
 800428c:	4b05      	ldr	r3, [pc, #20]	; (80042a4 <slalom_table2+0x1e0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	ee07 3a90 	vmov	s15, r3
}
 8004294:	eeb0 0a67 	vmov.f32	s0, s15
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000508 	.word	0x20000508
 80042a4:	200004e8 	.word	0x200004e8
 80042a8:	200004dc 	.word	0x200004dc
 80042ac:	20000809 	.word	0x20000809
 80042b0:	20000808 	.word	0x20000808
 80042b4:	2000052c 	.word	0x2000052c
 80042b8:	20000268 	.word	0x20000268

080042bc <no_angle>:

void no_angle(void){
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 80042c0:	4b20      	ldr	r3, [pc, #128]	; (8004344 <no_angle+0x88>)
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 80042c8:	4b1e      	ldr	r3, [pc, #120]	; (8004344 <no_angle+0x88>)
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 80042d0:	4b1c      	ldr	r3, [pc, #112]	; (8004344 <no_angle+0x88>)
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <no_angle+0x8c>)
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <no_angle+0x8c>)
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80042e8:	4b17      	ldr	r3, [pc, #92]	; (8004348 <no_angle+0x8c>)
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 80042f0:	4b16      	ldr	r3, [pc, #88]	; (800434c <no_angle+0x90>)
 80042f2:	2203      	movs	r2, #3
 80042f4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80042f6:	f003 fd97 	bl	8007e28 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80042fa:	e002      	b.n	8004302 <no_angle+0x46>
		HAL_Delay(1);
 80042fc:	2001      	movs	r0, #1
 80042fe:	f014 fb17 	bl	8018930 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004302:	4b13      	ldr	r3, [pc, #76]	; (8004350 <no_angle+0x94>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800430a:	ddf7      	ble.n	80042fc <no_angle+0x40>
 800430c:	4b10      	ldr	r3, [pc, #64]	; (8004350 <no_angle+0x94>)
 800430e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004312:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004316:	ddf1      	ble.n	80042fc <no_angle+0x40>
 8004318:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <no_angle+0x94>)
 800431a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800431e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004322:	ddeb      	ble.n	80042fc <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <no_angle+0x90>)
 8004326:	2200      	movs	r2, #0
 8004328:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 800432a:	f003 fd8b 	bl	8007e44 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <no_angle+0x98>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a09      	ldr	r2, [pc, #36]	; (8004358 <no_angle+0x9c>)
 8004334:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <no_angle+0xa0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <no_angle+0xa4>)
 800433c:	6013      	str	r3, [r2, #0]

}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200004e8 	.word	0x200004e8
 8004348:	200004dc 	.word	0x200004dc
 800434c:	2000052c 	.word	0x2000052c
 8004350:	200002bc 	.word	0x200002bc
 8004354:	20000228 	.word	0x20000228
 8004358:	20000258 	.word	0x20000258
 800435c:	2000022c 	.word	0x2000022c
 8004360:	2000025c 	.word	0x2000025c
 8004364:	00000000 	.word	0x00000000

08004368 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8004368:	b5b0      	push	{r4, r5, r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004372:	edc7 0a02 	vstr	s1, [r7, #8]
 8004376:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 800437a:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <mollifier_slalom_table+0x108>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8004380:	4a3b      	ldr	r2, [pc, #236]	; (8004470 <mollifier_slalom_table+0x108>)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8004386:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <mollifier_slalom_table+0x108>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 800438c:	4b39      	ldr	r3, [pc, #228]	; (8004474 <mollifier_slalom_table+0x10c>)
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004394:	4b37      	ldr	r3, [pc, #220]	; (8004474 <mollifier_slalom_table+0x10c>)
 8004396:	f04f 0200 	mov.w	r2, #0
 800439a:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 800439c:	4a36      	ldr	r2, [pc, #216]	; (8004478 <mollifier_slalom_table+0x110>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 80043a2:	4b35      	ldr	r3, [pc, #212]	; (8004478 <mollifier_slalom_table+0x110>)
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80043aa:	4b33      	ldr	r3, [pc, #204]	; (8004478 <mollifier_slalom_table+0x110>)
 80043ac:	f04f 0200 	mov.w	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80043b2:	4b32      	ldr	r3, [pc, #200]	; (800447c <mollifier_slalom_table+0x114>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80043b8:	4b31      	ldr	r3, [pc, #196]	; (8004480 <mollifier_slalom_table+0x118>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 80043be:	edd7 7a02 	vldr	s15, [r7, #8]
 80043c2:	eef0 7ae7 	vabs.f32	s15, s15
 80043c6:	ee17 0a90 	vmov	r0, s15
 80043ca:	f7fc f8e5 	bl	8000598 <__aeabi_f2d>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4614      	mov	r4, r2
 80043d4:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80043d8:	a321      	add	r3, pc, #132	; (adr r3, 8004460 <mollifier_slalom_table+0xf8>)
 80043da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043de:	4620      	mov	r0, r4
 80043e0:	4629      	mov	r1, r5
 80043e2:	f7fc fa5b 	bl	800089c <__aeabi_ddiv>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	a31e      	add	r3, pc, #120	; (adr r3, 8004468 <mollifier_slalom_table+0x100>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f7fc f928 	bl	8000648 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4614      	mov	r4, r2
 80043fe:	461d      	mov	r5, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fc f8c9 	bl	8000598 <__aeabi_f2d>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4620      	mov	r0, r4
 800440c:	4629      	mov	r1, r5
 800440e:	f7fc fa45 	bl	800089c <__aeabi_ddiv>
 8004412:	4602      	mov	r2, r0
 8004414:	460b      	mov	r3, r1
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	f7fc fbed 	bl	8000bf8 <__aeabi_d2f>
 800441e:	4603      	mov	r3, r0
 8004420:	4a18      	ldr	r2, [pc, #96]	; (8004484 <mollifier_slalom_table+0x11c>)
 8004422:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8004424:	4b18      	ldr	r3, [pc, #96]	; (8004488 <mollifier_slalom_table+0x120>)
 8004426:	2206      	movs	r2, #6
 8004428:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 800442a:	f003 fcfd 	bl	8007e28 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 800442e:	bf00      	nop
 8004430:	4b13      	ldr	r3, [pc, #76]	; (8004480 <mollifier_slalom_table+0x118>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b04      	cmp	r3, #4
 8004438:	d1fa      	bne.n	8004430 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <mollifier_slalom_table+0x124>)
 800443c:	ed93 7a00 	vldr	s14, [r3]
 8004440:	edd7 7a02 	vldr	s15, [r7, #8]
 8004444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <mollifier_slalom_table+0x124>)
 800444a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 800444e:	f003 fcf9 	bl	8007e44 <pl_DriveMotor_stop>

}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bdb0      	pop	{r4, r5, r7, pc}
 800445a:	bf00      	nop
 800445c:	f3af 8000 	nop.w
 8004460:	f9db22d1 	.word	0xf9db22d1
 8004464:	3fdc6a7e 	.word	0x3fdc6a7e
 8004468:	362cef38 	.word	0x362cef38
 800446c:	3fd78b56 	.word	0x3fd78b56
 8004470:	2000051c 	.word	0x2000051c
 8004474:	200004e8 	.word	0x200004e8
 8004478:	200004dc 	.word	0x200004dc
 800447c:	20000809 	.word	0x20000809
 8004480:	20000808 	.word	0x20000808
 8004484:	20000804 	.word	0x20000804
 8004488:	2000052c 	.word	0x2000052c
 800448c:	20000268 	.word	0x20000268

08004490 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8004490:	b580      	push	{r7, lr}
 8004492:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004494:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <no_frontwall_straight+0x70>)
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 800449c:	4b18      	ldr	r3, [pc, #96]	; (8004500 <no_frontwall_straight+0x70>)
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 80044a4:	4b16      	ldr	r3, [pc, #88]	; (8004500 <no_frontwall_straight+0x70>)
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80044ac:	4b15      	ldr	r3, [pc, #84]	; (8004504 <no_frontwall_straight+0x74>)
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <no_frontwall_straight+0x74>)
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <no_frontwall_straight+0x74>)
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 80044c4:	4b10      	ldr	r3, [pc, #64]	; (8004508 <no_frontwall_straight+0x78>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <no_frontwall_straight+0x7c>)
 80044cc:	2205      	movs	r2, #5
 80044ce:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80044d0:	f003 fcaa 	bl	8007e28 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 80044d4:	2096      	movs	r0, #150	; 0x96
 80044d6:	f003 ff7f 	bl	80083d8 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <no_frontwall_straight+0x78>)
 80044dc:	2200      	movs	r2, #0
 80044de:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 80044e0:	4b0a      	ldr	r3, [pc, #40]	; (800450c <no_frontwall_straight+0x7c>)
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 80044e6:	f003 fcad 	bl	8007e44 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 80044ea:	4b09      	ldr	r3, [pc, #36]	; (8004510 <no_frontwall_straight+0x80>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a09      	ldr	r2, [pc, #36]	; (8004514 <no_frontwall_straight+0x84>)
 80044f0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <no_frontwall_straight+0x88>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <no_frontwall_straight+0x8c>)
 80044f8:	6013      	str	r3, [r2, #0]

}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200004e8 	.word	0x200004e8
 8004504:	200004dc 	.word	0x200004dc
 8004508:	20000595 	.word	0x20000595
 800450c:	2000052c 	.word	0x2000052c
 8004510:	20000228 	.word	0x20000228
 8004514:	20000258 	.word	0x20000258
 8004518:	2000022c 	.word	0x2000022c
 800451c:	2000025c 	.word	0x2000025c

08004520 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004520:	b5b0      	push	{r4, r5, r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6178      	str	r0, [r7, #20]
 8004528:	ed87 0a04 	vstr	s0, [r7, #16]
 800452c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	ed87 1a01 	vstr	s2, [r7, #4]
 8004536:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 800453a:	4bd3      	ldr	r3, [pc, #844]	; (8004888 <feedforward_const_accel+0x368>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 8004542:	4bd2      	ldr	r3, [pc, #840]	; (800488c <feedforward_const_accel+0x36c>)
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	e001      	b.n	800454c <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 8004548:	4bd1      	ldr	r3, [pc, #836]	; (8004890 <feedforward_const_accel+0x370>)
 800454a:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 800454c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004550:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004558:	db7c      	blt.n	8004654 <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7fc f81c 	bl	8000598 <__aeabi_f2d>
 8004560:	a3bd      	add	r3, pc, #756	; (adr r3, 8004858 <feedforward_const_accel+0x338>)
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	f7fc f86f 	bl	8000648 <__aeabi_dmul>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4610      	mov	r0, r2
 8004570:	4619      	mov	r1, r3
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	4bc7      	ldr	r3, [pc, #796]	; (8004894 <feedforward_const_accel+0x374>)
 8004578:	f7fc f990 	bl	800089c <__aeabi_ddiv>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4610      	mov	r0, r2
 8004582:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004584:	a3b6      	add	r3, pc, #728	; (adr r3, 8004860 <feedforward_const_accel+0x340>)
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f7fc f987 	bl	800089c <__aeabi_ddiv>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4610      	mov	r0, r2
 8004594:	4619      	mov	r1, r3
 8004596:	f04f 0200 	mov.w	r2, #0
 800459a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800459e:	f7fc f97d 	bl	800089c <__aeabi_ddiv>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4610      	mov	r0, r2
 80045a8:	4619      	mov	r1, r3
 80045aa:	a3af      	add	r3, pc, #700	; (adr r3, 8004868 <feedforward_const_accel+0x348>)
 80045ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b0:	f7fb fe94 	bl	80002dc <__adddf3>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4610      	mov	r0, r2
 80045ba:	4619      	mov	r1, r3
 80045bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8004870 <feedforward_const_accel+0x350>)
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	f7fc f841 	bl	8000648 <__aeabi_dmul>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	a3aa      	add	r3, pc, #680	; (adr r3, 8004878 <feedforward_const_accel+0x358>)
 80045d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d4:	f7fc f962 	bl	800089c <__aeabi_ddiv>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4614      	mov	r4, r2
 80045de:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80045e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80045e4:	eddf 6aad 	vldr	s13, [pc, #692]	; 800489c <feedforward_const_accel+0x37c>
 80045e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045ec:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8004898 <feedforward_const_accel+0x378>
 80045f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045f4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80045f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045fc:	ee16 0a90 	vmov	r0, s13
 8004600:	f7fb ffca 	bl	8000598 <__aeabi_f2d>
 8004604:	a39e      	add	r3, pc, #632	; (adr r3, 8004880 <feedforward_const_accel+0x360>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f7fc f81d 	bl	8000648 <__aeabi_dmul>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4610      	mov	r0, r2
 8004614:	4619      	mov	r1, r3
 8004616:	a392      	add	r3, pc, #584	; (adr r3, 8004860 <feedforward_const_accel+0x340>)
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f7fc f93e 	bl	800089c <__aeabi_ddiv>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4610      	mov	r0, r2
 8004626:	4619      	mov	r1, r3
 8004628:	f04f 0200 	mov.w	r2, #0
 800462c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004630:	f7fc f934 	bl	800089c <__aeabi_ddiv>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4620      	mov	r0, r4
 800463a:	4629      	mov	r1, r5
 800463c:	f7fb fe4e 	bl	80002dc <__adddf3>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	f7fc fad6 	bl	8000bf8 <__aeabi_d2f>
 800464c:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	601a      	str	r2, [r3, #0]
 8004652:	e07b      	b.n	800474c <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f7fb ff9f 	bl	8000598 <__aeabi_f2d>
 800465a:	a37f      	add	r3, pc, #508	; (adr r3, 8004858 <feedforward_const_accel+0x338>)
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f7fb fff2 	bl	8000648 <__aeabi_dmul>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4610      	mov	r0, r2
 800466a:	4619      	mov	r1, r3
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	4b88      	ldr	r3, [pc, #544]	; (8004894 <feedforward_const_accel+0x374>)
 8004672:	f7fc f913 	bl	800089c <__aeabi_ddiv>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4610      	mov	r0, r2
 800467c:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800467e:	a378      	add	r3, pc, #480	; (adr r3, 8004860 <feedforward_const_accel+0x340>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fc f90a 	bl	800089c <__aeabi_ddiv>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	f04f 0200 	mov.w	r2, #0
 8004694:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004698:	f7fc f900 	bl	800089c <__aeabi_ddiv>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	4610      	mov	r0, r2
 80046a2:	4619      	mov	r1, r3
 80046a4:	a370      	add	r3, pc, #448	; (adr r3, 8004868 <feedforward_const_accel+0x348>)
 80046a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046aa:	f7fb fe15 	bl	80002d8 <__aeabi_dsub>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4610      	mov	r0, r2
 80046b4:	4619      	mov	r1, r3
 80046b6:	a36e      	add	r3, pc, #440	; (adr r3, 8004870 <feedforward_const_accel+0x350>)
 80046b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046bc:	f7fb ffc4 	bl	8000648 <__aeabi_dmul>
 80046c0:	4602      	mov	r2, r0
 80046c2:	460b      	mov	r3, r1
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	a36b      	add	r3, pc, #428	; (adr r3, 8004878 <feedforward_const_accel+0x358>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	f7fc f8e5 	bl	800089c <__aeabi_ddiv>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4614      	mov	r4, r2
 80046d8:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80046da:	ed97 7a04 	vldr	s14, [r7, #16]
 80046de:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800489c <feedforward_const_accel+0x37c>
 80046e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046e6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8004898 <feedforward_const_accel+0x378>
 80046ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ee:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80046f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046f6:	ee16 0a90 	vmov	r0, s13
 80046fa:	f7fb ff4d 	bl	8000598 <__aeabi_f2d>
 80046fe:	a360      	add	r3, pc, #384	; (adr r3, 8004880 <feedforward_const_accel+0x360>)
 8004700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004704:	f7fb ffa0 	bl	8000648 <__aeabi_dmul>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4610      	mov	r0, r2
 800470e:	4619      	mov	r1, r3
 8004710:	a353      	add	r3, pc, #332	; (adr r3, 8004860 <feedforward_const_accel+0x340>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fc f8c1 	bl	800089c <__aeabi_ddiv>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800472a:	f7fc f8b7 	bl	800089c <__aeabi_ddiv>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4620      	mov	r0, r4
 8004734:	4629      	mov	r1, r5
 8004736:	f7fb fdd1 	bl	80002dc <__adddf3>
 800473a:	4602      	mov	r2, r0
 800473c:	460b      	mov	r3, r1
 800473e:	4610      	mov	r0, r2
 8004740:	4619      	mov	r1, r3
 8004742:	f7fc fa59 	bl	8000bf8 <__aeabi_d2f>
 8004746:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800474c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004750:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004758:	f2c0 80a2 	blt.w	80048a0 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800475c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004760:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004898 <feedforward_const_accel+0x378>
 8004764:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004768:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800476c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004770:	edd7 7a00 	vldr	s15, [r7]
 8004774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004778:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800489c <feedforward_const_accel+0x37c>
 800477c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004780:	ee16 0a90 	vmov	r0, s13
 8004784:	f7fb ff08 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004788:	a335      	add	r3, pc, #212	; (adr r3, 8004860 <feedforward_const_accel+0x340>)
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f7fc f885 	bl	800089c <__aeabi_ddiv>
 8004792:	4602      	mov	r2, r0
 8004794:	460b      	mov	r3, r1
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047a2:	f7fc f87b 	bl	800089c <__aeabi_ddiv>
 80047a6:	4602      	mov	r2, r0
 80047a8:	460b      	mov	r3, r1
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	a32e      	add	r3, pc, #184	; (adr r3, 8004868 <feedforward_const_accel+0x348>)
 80047b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b4:	f7fb fd92 	bl	80002dc <__adddf3>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4610      	mov	r0, r2
 80047be:	4619      	mov	r1, r3
 80047c0:	a32b      	add	r3, pc, #172	; (adr r3, 8004870 <feedforward_const_accel+0x350>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	f7fb ff3f 	bl	8000648 <__aeabi_dmul>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4610      	mov	r0, r2
 80047d0:	4619      	mov	r1, r3
 80047d2:	a329      	add	r3, pc, #164	; (adr r3, 8004878 <feedforward_const_accel+0x358>)
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	f7fc f860 	bl	800089c <__aeabi_ddiv>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4614      	mov	r4, r2
 80047e2:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80047e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80047e8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800489c <feedforward_const_accel+0x37c>
 80047ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047f0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8004898 <feedforward_const_accel+0x378>
 80047f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047f8:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004800:	ee16 0a90 	vmov	r0, s13
 8004804:	f7fb fec8 	bl	8000598 <__aeabi_f2d>
 8004808:	a31d      	add	r3, pc, #116	; (adr r3, 8004880 <feedforward_const_accel+0x360>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb ff1b 	bl	8000648 <__aeabi_dmul>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	a311      	add	r3, pc, #68	; (adr r3, 8004860 <feedforward_const_accel+0x340>)
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f7fc f83c 	bl	800089c <__aeabi_ddiv>
 8004824:	4602      	mov	r2, r0
 8004826:	460b      	mov	r3, r1
 8004828:	4610      	mov	r0, r2
 800482a:	4619      	mov	r1, r3
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004834:	f7fc f832 	bl	800089c <__aeabi_ddiv>
 8004838:	4602      	mov	r2, r0
 800483a:	460b      	mov	r3, r1
 800483c:	4620      	mov	r0, r4
 800483e:	4629      	mov	r1, r5
 8004840:	f7fb fd4c 	bl	80002dc <__adddf3>
 8004844:	4602      	mov	r2, r0
 8004846:	460b      	mov	r3, r1
 8004848:	4610      	mov	r0, r2
 800484a:	4619      	mov	r1, r3
 800484c:	f7fc f9d4 	bl	8000bf8 <__aeabi_d2f>
 8004850:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 8004856:	e0a0      	b.n	800499a <feedforward_const_accel+0x47a>
 8004858:	7df8b79b 	.word	0x7df8b79b
 800485c:	3ed5fdfc 	.word	0x3ed5fdfc
 8004860:	ca619631 	.word	0xca619631
 8004864:	3f9b3322 	.word	0x3f9b3322
 8004868:	eb1c432d 	.word	0xeb1c432d
 800486c:	3f1a36e2 	.word	0x3f1a36e2
 8004870:	51eb851f 	.word	0x51eb851f
 8004874:	3ff11eb8 	.word	0x3ff11eb8
 8004878:	b7952d23 	.word	0xb7952d23
 800487c:	3f569c23 	.word	0x3f569c23
 8004880:	761b0f50 	.word	0x761b0f50
 8004884:	3f66bf29 	.word	0x3f66bf29
 8004888:	2000080c 	.word	0x2000080c
 800488c:	350b9621 	.word	0x350b9621
 8004890:	34bbe7a2 	.word	0x34bbe7a2
 8004894:	408f4000 	.word	0x408f4000
 8004898:	421c0000 	.word	0x421c0000
 800489c:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80048a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80048a4:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8004898 <feedforward_const_accel+0x378>
 80048a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80048ac:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 80048b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80048b4:	edd7 7a00 	vldr	s15, [r7]
 80048b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048bc:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 800489c <feedforward_const_accel+0x37c>
 80048c0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80048c4:	ee16 0a90 	vmov	r0, s13
 80048c8:	f7fb fe66 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80048cc:	a338      	add	r3, pc, #224	; (adr r3, 80049b0 <feedforward_const_accel+0x490>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb ffe3 	bl	800089c <__aeabi_ddiv>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048e6:	f7fb ffd9 	bl	800089c <__aeabi_ddiv>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4610      	mov	r0, r2
 80048f0:	4619      	mov	r1, r3
 80048f2:	a333      	add	r3, pc, #204	; (adr r3, 80049c0 <feedforward_const_accel+0x4a0>)
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	f7fb fcee 	bl	80002d8 <__aeabi_dsub>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4610      	mov	r0, r2
 8004902:	4619      	mov	r1, r3
 8004904:	a330      	add	r3, pc, #192	; (adr r3, 80049c8 <feedforward_const_accel+0x4a8>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	f7fb fe9d 	bl	8000648 <__aeabi_dmul>
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	a32e      	add	r3, pc, #184	; (adr r3, 80049d0 <feedforward_const_accel+0x4b0>)
 8004918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491c:	f7fb ffbe 	bl	800089c <__aeabi_ddiv>
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4614      	mov	r4, r2
 8004926:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004928:	ed97 7a01 	vldr	s14, [r7, #4]
 800492c:	eddf 6a22 	vldr	s13, [pc, #136]	; 80049b8 <feedforward_const_accel+0x498>
 8004930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004934:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80049bc <feedforward_const_accel+0x49c>
 8004938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800493c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004940:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004944:	ee16 0a90 	vmov	r0, s13
 8004948:	f7fb fe26 	bl	8000598 <__aeabi_f2d>
 800494c:	a316      	add	r3, pc, #88	; (adr r3, 80049a8 <feedforward_const_accel+0x488>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f7fb fe79 	bl	8000648 <__aeabi_dmul>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	a314      	add	r3, pc, #80	; (adr r3, 80049b0 <feedforward_const_accel+0x490>)
 8004960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004964:	f7fb ff9a 	bl	800089c <__aeabi_ddiv>
 8004968:	4602      	mov	r2, r0
 800496a:	460b      	mov	r3, r1
 800496c:	4610      	mov	r0, r2
 800496e:	4619      	mov	r1, r3
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004978:	f7fb ff90 	bl	800089c <__aeabi_ddiv>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	4620      	mov	r0, r4
 8004982:	4629      	mov	r1, r5
 8004984:	f7fb fcaa 	bl	80002dc <__adddf3>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4610      	mov	r0, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f7fc f932 	bl	8000bf8 <__aeabi_d2f>
 8004994:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	3720      	adds	r7, #32
 800499e:	46bd      	mov	sp, r7
 80049a0:	bdb0      	pop	{r4, r5, r7, pc}
 80049a2:	bf00      	nop
 80049a4:	f3af 8000 	nop.w
 80049a8:	761b0f50 	.word	0x761b0f50
 80049ac:	3f66bf29 	.word	0x3f66bf29
 80049b0:	ca619631 	.word	0xca619631
 80049b4:	3f9b3322 	.word	0x3f9b3322
 80049b8:	447a0000 	.word	0x447a0000
 80049bc:	421c0000 	.word	0x421c0000
 80049c0:	eb1c432d 	.word	0xeb1c432d
 80049c4:	3f1a36e2 	.word	0x3f1a36e2
 80049c8:	51eb851f 	.word	0x51eb851f
 80049cc:	3ff11eb8 	.word	0x3ff11eb8
 80049d0:	b7952d23 	.word	0xb7952d23
 80049d4:	3f569c23 	.word	0x3f569c23

080049d8 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <PID_Init+0x44>)
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <PID_Init+0x48>)
 80049e0:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 80049e2:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <PID_Init+0x4c>)
 80049e4:	4a10      	ldr	r2, [pc, #64]	; (8004a28 <PID_Init+0x50>)
 80049e6:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 80049e8:	4b10      	ldr	r3, [pc, #64]	; (8004a2c <PID_Init+0x54>)
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <PID_Init+0x58>)
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <PID_Init+0x5c>)
 80049f4:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <PID_Init+0x60>)
 80049f8:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <PID_Init+0x64>)
 80049fa:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 80049fc:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <PID_Init+0x68>)
 80049fe:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <PID_Init+0x6c>)
 8004a00:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <PID_Init+0x70>)
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <PID_Init+0x74>)
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	609a      	str	r2, [r3, #8]

}
 8004a12:	bf00      	nop
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	20000558 	.word	0x20000558
 8004a20:	40466666 	.word	0x40466666
 8004a24:	2000055c 	.word	0x2000055c
 8004a28:	3da3d70a 	.word	0x3da3d70a
 8004a2c:	20000560 	.word	0x20000560
 8004a30:	20000564 	.word	0x20000564
 8004a34:	3fcccccd 	.word	0x3fcccccd
 8004a38:	20000568 	.word	0x20000568
 8004a3c:	3d75c28f 	.word	0x3d75c28f
 8004a40:	2000056c 	.word	0x2000056c
 8004a44:	3b03126f 	.word	0x3b03126f
 8004a48:	20000538 	.word	0x20000538
 8004a4c:	20000548 	.word	0x20000548

08004a50 <clear_Ierror>:

void clear_Ierror(void) {
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <clear_Ierror+0x20>)
 8004a56:	f04f 0200 	mov.w	r2, #0
 8004a5a:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <clear_Ierror+0x24>)
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	609a      	str	r2, [r3, #8]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000538 	.word	0x20000538
 8004a74:	20000548 	.word	0x20000548

08004a78 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a86:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004a8a:	f04f 0300 	mov.w	r3, #0
 8004a8e:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8004a90:	f04f 0300 	mov.w	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 8004a96:	4b80      	ldr	r3, [pc, #512]	; (8004c98 <EncoderGyro_PID+0x220>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d111      	bne.n	8004ac2 <EncoderGyro_PID+0x4a>
		Ksp = 5.7; //3//P項の制御量直進*****************************************************
 8004a9e:	4b7f      	ldr	r3, [pc, #508]	; (8004c9c <EncoderGyro_PID+0x224>)
 8004aa0:	4a7f      	ldr	r2, [pc, #508]	; (8004ca0 <EncoderGyro_PID+0x228>)
 8004aa2:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8004aa4:	4b7f      	ldr	r3, [pc, #508]	; (8004ca4 <EncoderGyro_PID+0x22c>)
 8004aa6:	4a80      	ldr	r2, [pc, #512]	; (8004ca8 <EncoderGyro_PID+0x230>)
 8004aa8:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 8004aaa:	4b80      	ldr	r3, [pc, #512]	; (8004cac <EncoderGyro_PID+0x234>)
 8004aac:	4a80      	ldr	r2, [pc, #512]	; (8004cb0 <EncoderGyro_PID+0x238>)
 8004aae:	601a      	str	r2, [r3, #0]
		Ktp = 4.6; //295//P項の制御量旋回*****************************************************
 8004ab0:	4b80      	ldr	r3, [pc, #512]	; (8004cb4 <EncoderGyro_PID+0x23c>)
 8004ab2:	4a81      	ldr	r2, [pc, #516]	; (8004cb8 <EncoderGyro_PID+0x240>)
 8004ab4:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8004ab6:	4b81      	ldr	r3, [pc, #516]	; (8004cbc <EncoderGyro_PID+0x244>)
 8004ab8:	4a81      	ldr	r2, [pc, #516]	; (8004cc0 <EncoderGyro_PID+0x248>)
 8004aba:	601a      	str	r2, [r3, #0]
		Ktd = -0.01; //205//D項の制御量旋回*****************************************************
 8004abc:	4b81      	ldr	r3, [pc, #516]	; (8004cc4 <EncoderGyro_PID+0x24c>)
 8004abe:	4a82      	ldr	r2, [pc, #520]	; (8004cc8 <EncoderGyro_PID+0x250>)
 8004ac0:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8004ac2:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ac6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ace:	d101      	bne.n	8004ad4 <EncoderGyro_PID+0x5c>
		reset_speed();
 8004ad0:	f7fc faa8 	bl	8001024 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004ad4:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <EncoderGyro_PID+0x254>)
 8004ad6:	edd3 7a00 	vldr	s15, [r3]
 8004ada:	eef0 7ae7 	vabs.f32	s15, s15
 8004ade:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004cd0 <EncoderGyro_PID+0x258>
 8004ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aea:	d520      	bpl.n	8004b2e <EncoderGyro_PID+0xb6>
 8004aec:	edd7 7a01 	vldr	s15, [r7, #4]
 8004af0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004cd4 <EncoderGyro_PID+0x25c>
 8004af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004afc:	db17      	blt.n	8004b2e <EncoderGyro_PID+0xb6>
 8004afe:	4b76      	ldr	r3, [pc, #472]	; (8004cd8 <EncoderGyro_PID+0x260>)
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d013      	beq.n	8004b2e <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004b06:	4b75      	ldr	r3, [pc, #468]	; (8004cdc <EncoderGyro_PID+0x264>)
 8004b08:	ed93 7a00 	vldr	s14, [r3]
 8004b0c:	4b74      	ldr	r3, [pc, #464]	; (8004ce0 <EncoderGyro_PID+0x268>)
 8004b0e:	edd3 7a00 	vldr	s15, [r3]
 8004b12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b1e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b26:	4b6f      	ldr	r3, [pc, #444]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b28:	edc3 7a00 	vstr	s15, [r3]
 8004b2c:	e01a      	b.n	8004b64 <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004b2e:	4b6e      	ldr	r3, [pc, #440]	; (8004ce8 <EncoderGyro_PID+0x270>)
 8004b30:	ed93 7a00 	vldr	s14, [r3]
 8004b34:	4b6d      	ldr	r3, [pc, #436]	; (8004cec <EncoderGyro_PID+0x274>)
 8004b36:	edd3 7a00 	vldr	s15, [r3]
 8004b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b46:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b4e:	4b65      	ldr	r3, [pc, #404]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b50:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 8004b54:	4b66      	ldr	r3, [pc, #408]	; (8004cf0 <EncoderGyro_PID+0x278>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a61      	ldr	r2, [pc, #388]	; (8004ce0 <EncoderGyro_PID+0x268>)
 8004b5a:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 8004b5c:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <EncoderGyro_PID+0x27c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a5e      	ldr	r2, [pc, #376]	; (8004cdc <EncoderGyro_PID+0x264>)
 8004b62:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004b64:	4b5f      	ldr	r3, [pc, #380]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b66:	ed93 7a00 	vldr	s14, [r3]
 8004b6a:	4b5e      	ldr	r3, [pc, #376]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b74:	4b5b      	ldr	r3, [pc, #364]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b76:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a59      	ldr	r2, [pc, #356]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b80:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004b82:	4b58      	ldr	r3, [pc, #352]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b84:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b88:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b8a:	edd3 7a00 	vldr	s15, [r3]
 8004b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b92:	4b54      	ldr	r3, [pc, #336]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b94:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004b98:	4b52      	ldr	r3, [pc, #328]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004b9a:	ed93 7a00 	vldr	s14, [r3]
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <EncoderGyro_PID+0x224>)
 8004ba0:	edd3 7a00 	vldr	s15, [r3]
 8004ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ba8:	4b4e      	ldr	r3, [pc, #312]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004baa:	edd3 6a02 	vldr	s13, [r3, #8]
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <EncoderGyro_PID+0x22c>)
 8004bb0:	edd3 7a00 	vldr	s15, [r3]
 8004bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bbc:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <EncoderGyro_PID+0x26c>)
 8004bbe:	edd3 6a03 	vldr	s13, [r3, #12]
 8004bc2:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <EncoderGyro_PID+0x234>)
 8004bc4:	edd3 7a00 	vldr	s15, [r3]
 8004bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bd0:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004bd4:	4b3d      	ldr	r3, [pc, #244]	; (8004ccc <EncoderGyro_PID+0x254>)
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	ed97 7a00 	vldr	s14, [r7]
 8004bde:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be2:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004be4:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004bea:	ed93 7a00 	vldr	s14, [r3]
 8004bee:	4b42      	ldr	r3, [pc, #264]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004bf0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bf8:	4b3f      	ldr	r3, [pc, #252]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004bfa:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004bfe:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3d      	ldr	r2, [pc, #244]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c04:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004c06:	4b3c      	ldr	r3, [pc, #240]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c08:	ed93 7a02 	vldr	s14, [r3, #8]
 8004c0c:	4b3a      	ldr	r3, [pc, #232]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c0e:	edd3 7a00 	vldr	s15, [r3]
 8004c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c16:	4b38      	ldr	r3, [pc, #224]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c18:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004c1c:	4b36      	ldr	r3, [pc, #216]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c1e:	ed93 7a00 	vldr	s14, [r3]
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <EncoderGyro_PID+0x23c>)
 8004c24:	edd3 7a00 	vldr	s15, [r3]
 8004c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c2e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c32:	4b22      	ldr	r3, [pc, #136]	; (8004cbc <EncoderGyro_PID+0x244>)
 8004c34:	edd3 7a00 	vldr	s15, [r3]
 8004c38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004c40:	4b2d      	ldr	r3, [pc, #180]	; (8004cf8 <EncoderGyro_PID+0x280>)
 8004c42:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c46:	4b1f      	ldr	r3, [pc, #124]	; (8004cc4 <EncoderGyro_PID+0x24c>)
 8004c48:	edd3 7a00 	vldr	s15, [r3]
 8004c4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004c50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c54:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c5c:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004cfc <EncoderGyro_PID+0x284>
 8004c60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <EncoderGyro_PID+0x288>)
 8004c66:	edd3 7a00 	vldr	s15, [r3]
 8004c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004c74:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c78:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004cfc <EncoderGyro_PID+0x284>
 8004c7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c80:	4b1f      	ldr	r3, [pc, #124]	; (8004d00 <EncoderGyro_PID+0x288>)
 8004c82:	edd3 7a00 	vldr	s15, [r3]
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	edc3 7a00 	vstr	s15, [r3]

}
 8004c90:	bf00      	nop
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	2000080c 	.word	0x2000080c
 8004c9c:	20000558 	.word	0x20000558
 8004ca0:	40b66666 	.word	0x40b66666
 8004ca4:	2000055c 	.word	0x2000055c
 8004ca8:	3db851ec 	.word	0x3db851ec
 8004cac:	20000560 	.word	0x20000560
 8004cb0:	bbe56042 	.word	0xbbe56042
 8004cb4:	20000564 	.word	0x20000564
 8004cb8:	40933333 	.word	0x40933333
 8004cbc:	20000568 	.word	0x20000568
 8004cc0:	3d8f5c29 	.word	0x3d8f5c29
 8004cc4:	2000056c 	.word	0x2000056c
 8004cc8:	bc23d70a 	.word	0xbc23d70a
 8004ccc:	2000026c 	.word	0x2000026c
 8004cd0:	42f00000 	.word	0x42f00000
 8004cd4:	42c80000 	.word	0x42c80000
 8004cd8:	2000052c 	.word	0x2000052c
 8004cdc:	2000025c 	.word	0x2000025c
 8004ce0:	20000258 	.word	0x20000258
 8004ce4:	20000538 	.word	0x20000538
 8004ce8:	2000022c 	.word	0x2000022c
 8004cec:	20000228 	.word	0x20000228
 8004cf0:	20000238 	.word	0x20000238
 8004cf4:	2000023c 	.word	0x2000023c
 8004cf8:	20000548 	.word	0x20000548
 8004cfc:	44d1e000 	.word	0x44d1e000
 8004d00:	200004d8 	.word	0x200004d8

08004d04 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <init_WallControl+0x104>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004d0e:	4b3f      	ldr	r3, [pc, #252]	; (8004e0c <init_WallControl+0x108>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004d14:	4b3e      	ldr	r3, [pc, #248]	; (8004e10 <init_WallControl+0x10c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004d1a:	4b3e      	ldr	r3, [pc, #248]	; (8004e14 <init_WallControl+0x110>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004d20:	4b3d      	ldr	r3, [pc, #244]	; (8004e18 <init_WallControl+0x114>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004d26:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <init_WallControl+0x118>)
 8004d28:	2200      	movs	r2, #0
 8004d2a:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004d2c:	4b3c      	ldr	r3, [pc, #240]	; (8004e20 <init_WallControl+0x11c>)
 8004d2e:	2200      	movs	r2, #0
 8004d30:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004d32:	4b3c      	ldr	r3, [pc, #240]	; (8004e24 <init_WallControl+0x120>)
 8004d34:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <init_WallControl+0x124>)
 8004d36:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004d38:	4b3c      	ldr	r3, [pc, #240]	; (8004e2c <init_WallControl+0x128>)
 8004d3a:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <init_WallControl+0x12c>)
 8004d3c:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004d3e:	4b3d      	ldr	r3, [pc, #244]	; (8004e34 <init_WallControl+0x130>)
 8004d40:	4a3d      	ldr	r2, [pc, #244]	; (8004e38 <init_WallControl+0x134>)
 8004d42:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004d44:	4b3d      	ldr	r3, [pc, #244]	; (8004e3c <init_WallControl+0x138>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	; (8004e40 <init_WallControl+0x13c>)
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004d50:	4b3c      	ldr	r3, [pc, #240]	; (8004e44 <init_WallControl+0x140>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004d56:	4b3c      	ldr	r3, [pc, #240]	; (8004e48 <init_WallControl+0x144>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004d5c:	4b3b      	ldr	r3, [pc, #236]	; (8004e4c <init_WallControl+0x148>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004d62:	4b3b      	ldr	r3, [pc, #236]	; (8004e50 <init_WallControl+0x14c>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004d68:	4b3a      	ldr	r3, [pc, #232]	; (8004e54 <init_WallControl+0x150>)
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004d70:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <init_WallControl+0x154>)
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004d78:	4b38      	ldr	r3, [pc, #224]	; (8004e5c <init_WallControl+0x158>)
 8004d7a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d7e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004d80:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <init_WallControl+0x15c>)
 8004d82:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004d86:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <init_WallControl+0x160>)
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004d90:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <init_WallControl+0x164>)
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004d98:	4b34      	ldr	r3, [pc, #208]	; (8004e6c <init_WallControl+0x168>)
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004da0:	4b33      	ldr	r3, [pc, #204]	; (8004e70 <init_WallControl+0x16c>)
 8004da2:	f04f 0200 	mov.w	r2, #0
 8004da6:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004da8:	4b32      	ldr	r3, [pc, #200]	; (8004e74 <init_WallControl+0x170>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004dae:	4b32      	ldr	r3, [pc, #200]	; (8004e78 <init_WallControl+0x174>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <init_WallControl+0x178>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004dba:	4b31      	ldr	r3, [pc, #196]	; (8004e80 <init_WallControl+0x17c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004dc0:	4b30      	ldr	r3, [pc, #192]	; (8004e84 <init_WallControl+0x180>)
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004dc6:	4b30      	ldr	r3, [pc, #192]	; (8004e88 <init_WallControl+0x184>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004dcc:	4b2f      	ldr	r3, [pc, #188]	; (8004e8c <init_WallControl+0x188>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004dd2:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <init_WallControl+0x18c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004dd8:	4b2e      	ldr	r3, [pc, #184]	; (8004e94 <init_WallControl+0x190>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <init_WallControl+0x194>)
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004de6:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <init_WallControl+0x198>)
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004dee:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <init_WallControl+0x19c>)
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004df6:	4b2b      	ldr	r3, [pc, #172]	; (8004ea4 <init_WallControl+0x1a0>)
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	20000594 	.word	0x20000594
 8004e0c:	20000595 	.word	0x20000595
 8004e10:	20000597 	.word	0x20000597
 8004e14:	20000596 	.word	0x20000596
 8004e18:	20000599 	.word	0x20000599
 8004e1c:	2000059a 	.word	0x2000059a
 8004e20:	2000059b 	.word	0x2000059b
 8004e24:	2000059c 	.word	0x2000059c
 8004e28:	44be6000 	.word	0x44be6000
 8004e2c:	200005a0 	.word	0x200005a0
 8004e30:	44974000 	.word	0x44974000
 8004e34:	200005a4 	.word	0x200005a4
 8004e38:	41a00000 	.word	0x41a00000
 8004e3c:	200005bc 	.word	0x200005bc
 8004e40:	200005b8 	.word	0x200005b8
 8004e44:	200005c4 	.word	0x200005c4
 8004e48:	200005c0 	.word	0x200005c0
 8004e4c:	200005cc 	.word	0x200005cc
 8004e50:	200005c8 	.word	0x200005c8
 8004e54:	200005d4 	.word	0x200005d4
 8004e58:	200005d0 	.word	0x200005d0
 8004e5c:	200005dc 	.word	0x200005dc
 8004e60:	200005d8 	.word	0x200005d8
 8004e64:	200005e4 	.word	0x200005e4
 8004e68:	200005e0 	.word	0x200005e0
 8004e6c:	200005ec 	.word	0x200005ec
 8004e70:	200005e8 	.word	0x200005e8
 8004e74:	200005f0 	.word	0x200005f0
 8004e78:	200005f1 	.word	0x200005f1
 8004e7c:	200005f2 	.word	0x200005f2
 8004e80:	200005f3 	.word	0x200005f3
 8004e84:	200005f4 	.word	0x200005f4
 8004e88:	200005f5 	.word	0x200005f5
 8004e8c:	200005f6 	.word	0x200005f6
 8004e90:	200005f7 	.word	0x200005f7
 8004e94:	200005f8 	.word	0x200005f8
 8004e98:	200005fc 	.word	0x200005fc
 8004e9c:	20000600 	.word	0x20000600
 8004ea0:	20000604 	.word	0x20000604
 8004ea4:	20000608 	.word	0x20000608

08004ea8 <calWallConrol>:


float calWallConrol(void) {
 8004ea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004eac:	b0aa      	sub	sp, #168	; 0xa8
 8004eae:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004eb0:	4ba1      	ldr	r3, [pc, #644]	; (8005138 <calWallConrol+0x290>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d13d      	bne.n	8004f34 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004eb8:	4ba0      	ldr	r3, [pc, #640]	; (800513c <calWallConrol+0x294>)
 8004eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004ebe:	4ba0      	ldr	r3, [pc, #640]	; (8005140 <calWallConrol+0x298>)
 8004ec0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8004ec4:	4b9f      	ldr	r3, [pc, #636]	; (8005144 <calWallConrol+0x29c>)
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005148 <calWallConrol+0x2a0>
 8004ece:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ed6:	dd06      	ble.n	8004ee6 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8004ed8:	4b9c      	ldr	r3, [pc, #624]	; (800514c <calWallConrol+0x2a4>)
 8004eda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8004ede:	4b9c      	ldr	r3, [pc, #624]	; (8005150 <calWallConrol+0x2a8>)
 8004ee0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ee4:	e052      	b.n	8004f8c <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004ee6:	4b97      	ldr	r3, [pc, #604]	; (8005144 <calWallConrol+0x29c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fb fb54 	bl	8000598 <__aeabi_f2d>
 8004ef0:	a389      	add	r3, pc, #548	; (adr r3, 8005118 <calWallConrol+0x270>)
 8004ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef6:	f7fb fba7 	bl	8000648 <__aeabi_dmul>
 8004efa:	4602      	mov	r2, r0
 8004efc:	460b      	mov	r3, r1
 8004efe:	4610      	mov	r0, r2
 8004f00:	4619      	mov	r1, r3
 8004f02:	f7fb fe79 	bl	8000bf8 <__aeabi_d2f>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004f0c:	4b8d      	ldr	r3, [pc, #564]	; (8005144 <calWallConrol+0x29c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fb fb41 	bl	8000598 <__aeabi_f2d>
 8004f16:	a382      	add	r3, pc, #520	; (adr r3, 8005120 <calWallConrol+0x278>)
 8004f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1c:	f7fb fb94 	bl	8000648 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4610      	mov	r0, r2
 8004f26:	4619      	mov	r1, r3
 8004f28:	f7fb fe66 	bl	8000bf8 <__aeabi_d2f>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f32:	e02b      	b.n	8004f8c <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004f34:	4b87      	ldr	r3, [pc, #540]	; (8005154 <calWallConrol+0x2ac>)
 8004f36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004f3a:	4b87      	ldr	r3, [pc, #540]	; (8005158 <calWallConrol+0x2b0>)
 8004f3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004f40:	4b80      	ldr	r3, [pc, #512]	; (8005144 <calWallConrol+0x29c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fb27 	bl	8000598 <__aeabi_f2d>
 8004f4a:	a377      	add	r3, pc, #476	; (adr r3, 8005128 <calWallConrol+0x280>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f7fb fb7a 	bl	8000648 <__aeabi_dmul>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4610      	mov	r0, r2
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	f7fb fe4c 	bl	8000bf8 <__aeabi_d2f>
 8004f60:	4603      	mov	r3, r0
 8004f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004f66:	4b77      	ldr	r3, [pc, #476]	; (8005144 <calWallConrol+0x29c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fb fb14 	bl	8000598 <__aeabi_f2d>
 8004f70:	a36f      	add	r3, pc, #444	; (adr r3, 8005130 <calWallConrol+0x288>)
 8004f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f76:	f7fb fb67 	bl	8000648 <__aeabi_dmul>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	f7fb fe39 	bl	8000bf8 <__aeabi_d2f>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004f8c:	4b73      	ldr	r3, [pc, #460]	; (800515c <calWallConrol+0x2b4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f240 2289 	movw	r2, #649	; 0x289
 8004f94:	4293      	cmp	r3, r2
 8004f96:	dc03      	bgt.n	8004fa0 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8004f98:	4b71      	ldr	r3, [pc, #452]	; (8005160 <calWallConrol+0x2b8>)
 8004f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f9e:	e011      	b.n	8004fc4 <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004fa0:	4b6e      	ldr	r3, [pc, #440]	; (800515c <calWallConrol+0x2b4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	dd03      	ble.n	8004fb4 <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8004fac:	4b6d      	ldr	r3, [pc, #436]	; (8005164 <calWallConrol+0x2bc>)
 8004fae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fb2:	e007      	b.n	8004fc4 <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004fb4:	4b69      	ldr	r3, [pc, #420]	; (800515c <calWallConrol+0x2b4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	ee07 3a90 	vmov	s15, r3
 8004fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004fc4:	4b65      	ldr	r3, [pc, #404]	; (800515c <calWallConrol+0x2b4>)
 8004fc6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fca:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004fce:	da03      	bge.n	8004fd8 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004fd0:	4b65      	ldr	r3, [pc, #404]	; (8005168 <calWallConrol+0x2c0>)
 8004fd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fd6:	e012      	b.n	8004ffe <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004fd8:	4b60      	ldr	r3, [pc, #384]	; (800515c <calWallConrol+0x2b4>)
 8004fda:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004fde:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004fe2:	dd03      	ble.n	8004fec <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004fe4:	4b61      	ldr	r3, [pc, #388]	; (800516c <calWallConrol+0x2c4>)
 8004fe6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fea:	e008      	b.n	8004ffe <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004fec:	4b5b      	ldr	r3, [pc, #364]	; (800515c <calWallConrol+0x2b4>)
 8004fee:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ffa:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 800500c:	4b58      	ldr	r3, [pc, #352]	; (8005170 <calWallConrol+0x2c8>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d11c      	bne.n	800504e <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8005014:	4b57      	ldr	r3, [pc, #348]	; (8005174 <calWallConrol+0x2cc>)
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 800501a:	4b57      	ldr	r3, [pc, #348]	; (8005178 <calWallConrol+0x2d0>)
 800501c:	2200      	movs	r2, #0
 800501e:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8005020:	4b56      	ldr	r3, [pc, #344]	; (800517c <calWallConrol+0x2d4>)
 8005022:	2200      	movs	r2, #0
 8005024:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8005026:	4b56      	ldr	r3, [pc, #344]	; (8005180 <calWallConrol+0x2d8>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 800502c:	4b55      	ldr	r3, [pc, #340]	; (8005184 <calWallConrol+0x2dc>)
 800502e:	4a56      	ldr	r2, [pc, #344]	; (8005188 <calWallConrol+0x2e0>)
 8005030:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8005032:	4b56      	ldr	r3, [pc, #344]	; (800518c <calWallConrol+0x2e4>)
 8005034:	4a56      	ldr	r2, [pc, #344]	; (8005190 <calWallConrol+0x2e8>)
 8005036:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8005038:	4b56      	ldr	r3, [pc, #344]	; (8005194 <calWallConrol+0x2ec>)
 800503a:	4a57      	ldr	r2, [pc, #348]	; (8005198 <calWallConrol+0x2f0>)
 800503c:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8005046:	f002 f909 	bl	800725c <pl_yellow_LED_off>
 800504a:	f001 ba4c 	b.w	80064e6 <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 800504e:	4b48      	ldr	r3, [pc, #288]	; (8005170 <calWallConrol+0x2c8>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b01      	cmp	r3, #1
 8005054:	f040 82ef 	bne.w	8005636 <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8005058:	4b46      	ldr	r3, [pc, #280]	; (8005174 <calWallConrol+0x2cc>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 809d 	beq.w	80051a0 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8005066:	4b3d      	ldr	r3, [pc, #244]	; (800515c <calWallConrol+0x2b4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800506e:	db16      	blt.n	800509e <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8005070:	4b4a      	ldr	r3, [pc, #296]	; (800519c <calWallConrol+0x2f4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fa7d 	bl	8000574 <__aeabi_i2d>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4690      	mov	r8, r2
 8005080:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005084:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005088:	f7fb fa86 	bl	8000598 <__aeabi_f2d>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4640      	mov	r0, r8
 8005092:	4649      	mov	r1, r9
 8005094:	f7fb fd68 	bl	8000b68 <__aeabi_dcmpgt>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d037      	beq.n	800510e <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 800509e:	4b35      	ldr	r3, [pc, #212]	; (8005174 <calWallConrol+0x2cc>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	4b33      	ldr	r3, [pc, #204]	; (8005174 <calWallConrol+0x2cc>)
 80050a8:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <calWallConrol+0x2dc>)
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80050b2:	2300      	movs	r3, #0
 80050b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050b8:	e021      	b.n	80050fe <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 80050ba:	4a28      	ldr	r2, [pc, #160]	; (800515c <calWallConrol+0x2b4>)
 80050bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c4:	ee07 3a90 	vmov	s15, r3
 80050c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050cc:	4b2d      	ldr	r3, [pc, #180]	; (8005184 <calWallConrol+0x2dc>)
 80050ce:	edd3 7a00 	vldr	s15, [r3]
 80050d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050da:	dd0b      	ble.n	80050f4 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 80050dc:	4a1f      	ldr	r2, [pc, #124]	; (800515c <calWallConrol+0x2b4>)
 80050de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e6:	ee07 3a90 	vmov	s15, r3
 80050ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050ee:	4b25      	ldr	r3, [pc, #148]	; (8005184 <calWallConrol+0x2dc>)
 80050f0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80050f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f8:	3301      	adds	r3, #1
 80050fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005102:	2b13      	cmp	r3, #19
 8005104:	ddd9      	ble.n	80050ba <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 8005106:	4b23      	ldr	r3, [pc, #140]	; (8005194 <calWallConrol+0x2ec>)
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 800510e:	4b1b      	ldr	r3, [pc, #108]	; (800517c <calWallConrol+0x2d4>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
 8005114:	e066      	b.n	80051e4 <calWallConrol+0x33c>
 8005116:	bf00      	nop
 8005118:	33333333 	.word	0x33333333
 800511c:	3fd33333 	.word	0x3fd33333
 8005120:	d2f1a9fc 	.word	0xd2f1a9fc
 8005124:	bf70624d 	.word	0xbf70624d
 8005128:	33333333 	.word	0x33333333
 800512c:	3fe33333 	.word	0x3fe33333
 8005130:	bc6a7efa 	.word	0xbc6a7efa
 8005134:	3f789374 	.word	0x3f789374
 8005138:	2000080c 	.word	0x2000080c
 800513c:	435c0000 	.word	0x435c0000
 8005140:	43480000 	.word	0x43480000
 8005144:	200004dc 	.word	0x200004dc
 8005148:	447a0000 	.word	0x447a0000
 800514c:	43960000 	.word	0x43960000
 8005150:	c0800000 	.word	0xc0800000
 8005154:	431d0000 	.word	0x431d0000
 8005158:	42dc0000 	.word	0x42dc0000
 800515c:	200002bc 	.word	0x200002bc
 8005160:	44228000 	.word	0x44228000
 8005164:	450fc000 	.word	0x450fc000
 8005168:	44160000 	.word	0x44160000
 800516c:	44fa0000 	.word	0x44fa0000
 8005170:	20000594 	.word	0x20000594
 8005174:	20000597 	.word	0x20000597
 8005178:	20000599 	.word	0x20000599
 800517c:	2000059a 	.word	0x2000059a
 8005180:	2000059b 	.word	0x2000059b
 8005184:	2000059c 	.word	0x2000059c
 8005188:	44be6000 	.word	0x44be6000
 800518c:	200005a0 	.word	0x200005a0
 8005190:	44974000 	.word	0x44974000
 8005194:	200005a4 	.word	0x200005a4
 8005198:	41a00000 	.word	0x41a00000
 800519c:	2000044c 	.word	0x2000044c
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 80051a0:	4bbf      	ldr	r3, [pc, #764]	; (80054a0 <calWallConrol+0x5f8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80051a8:	dd1c      	ble.n	80051e4 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 80051aa:	4bbe      	ldr	r3, [pc, #760]	; (80054a4 <calWallConrol+0x5fc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fb f9e0 	bl	8000574 <__aeabi_i2d>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4614      	mov	r4, r2
 80051ba:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80051be:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80051c2:	f7fb f9e9 	bl	8000598 <__aeabi_f2d>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4620      	mov	r0, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	f7fb fcad 	bl	8000b2c <__aeabi_dcmplt>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d005      	beq.n	80051e4 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 80051d8:	4bb3      	ldr	r3, [pc, #716]	; (80054a8 <calWallConrol+0x600>)
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	3301      	adds	r3, #1
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	4bb1      	ldr	r3, [pc, #708]	; (80054a8 <calWallConrol+0x600>)
 80051e2:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 80051e4:	4bb0      	ldr	r3, [pc, #704]	; (80054a8 <calWallConrol+0x600>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	085b      	lsrs	r3, r3, #1
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d05c      	beq.n	80052ae <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 80051f4:	4baa      	ldr	r3, [pc, #680]	; (80054a0 <calWallConrol+0x5f8>)
 80051f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80051fa:	f240 2225 	movw	r2, #549	; 0x225
 80051fe:	4293      	cmp	r3, r2
 8005200:	dd17      	ble.n	8005232 <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005202:	4ba8      	ldr	r3, [pc, #672]	; (80054a4 <calWallConrol+0x5fc>)
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fb f9b4 	bl	8000574 <__aeabi_i2d>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	613a      	str	r2, [r7, #16]
 8005212:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005216:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8005218:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800521c:	f7fb f9bc 	bl	8000598 <__aeabi_f2d>
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8005224:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005228:	f7fb fc9e 	bl	8000b68 <__aeabi_dcmpgt>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d039      	beq.n	80052a6 <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8005232:	4b9d      	ldr	r3, [pc, #628]	; (80054a8 <calWallConrol+0x600>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	3b02      	subs	r3, #2
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4b9b      	ldr	r3, [pc, #620]	; (80054a8 <calWallConrol+0x600>)
 800523c:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 800523e:	4b9b      	ldr	r3, [pc, #620]	; (80054ac <calWallConrol+0x604>)
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005246:	2300      	movs	r3, #0
 8005248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800524c:	e023      	b.n	8005296 <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 800524e:	4a94      	ldr	r2, [pc, #592]	; (80054a0 <calWallConrol+0x5f8>)
 8005250:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005254:	3350      	adds	r3, #80	; 0x50
 8005256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005262:	4b92      	ldr	r3, [pc, #584]	; (80054ac <calWallConrol+0x604>)
 8005264:	edd3 7a00 	vldr	s15, [r3]
 8005268:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800526c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005270:	dd0c      	ble.n	800528c <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8005272:	4a8b      	ldr	r2, [pc, #556]	; (80054a0 <calWallConrol+0x5f8>)
 8005274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005278:	3350      	adds	r3, #80	; 0x50
 800527a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800527e:	ee07 3a90 	vmov	s15, r3
 8005282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005286:	4b89      	ldr	r3, [pc, #548]	; (80054ac <calWallConrol+0x604>)
 8005288:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800528c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005290:	3301      	adds	r3, #1
 8005292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005296:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800529a:	2b13      	cmp	r3, #19
 800529c:	ddd7      	ble.n	800524e <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 800529e:	4b84      	ldr	r3, [pc, #528]	; (80054b0 <calWallConrol+0x608>)
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 80052a6:	4b83      	ldr	r3, [pc, #524]	; (80054b4 <calWallConrol+0x60c>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
 80052ac:	e024      	b.n	80052f8 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 80052ae:	4b7c      	ldr	r3, [pc, #496]	; (80054a0 <calWallConrol+0x5f8>)
 80052b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052b4:	f240 2226 	movw	r2, #550	; 0x226
 80052b8:	4293      	cmp	r3, r2
 80052ba:	dd1d      	ble.n	80052f8 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 80052bc:	4b79      	ldr	r3, [pc, #484]	; (80054a4 <calWallConrol+0x5fc>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	4618      	mov	r0, r3
 80052c2:	f7fb f957 	bl	8000574 <__aeabi_i2d>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	60ba      	str	r2, [r7, #8]
 80052cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052d0:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 80052d2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80052d6:	f7fb f95f 	bl	8000598 <__aeabi_f2d>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 80052de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052e2:	f7fb fc23 	bl	8000b2c <__aeabi_dcmplt>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d005      	beq.n	80052f8 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 80052ec:	4b6e      	ldr	r3, [pc, #440]	; (80054a8 <calWallConrol+0x600>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	3302      	adds	r3, #2
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	4b6c      	ldr	r3, [pc, #432]	; (80054a8 <calWallConrol+0x600>)
 80052f6:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 80052f8:	4b6b      	ldr	r3, [pc, #428]	; (80054a8 <calWallConrol+0x600>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b03      	cmp	r3, #3
 80052fe:	f201 80f2 	bhi.w	80064e6 <calWallConrol+0x163e>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <calWallConrol+0x460>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	08005319 	.word	0x08005319
 800530c:	0800541f 	.word	0x0800541f
 8005310:	080054cd 	.word	0x080054cd
 8005314:	08005537 	.word	0x08005537
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005318:	4b65      	ldr	r3, [pc, #404]	; (80054b0 <calWallConrol+0x608>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f93b 	bl	8000598 <__aeabi_f2d>
 8005322:	4604      	mov	r4, r0
 8005324:	460d      	mov	r5, r1
 8005326:	4b64      	ldr	r3, [pc, #400]	; (80054b8 <calWallConrol+0x610>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f7fb f934 	bl	8000598 <__aeabi_f2d>
 8005330:	a357      	add	r3, pc, #348	; (adr r3, 8005490 <calWallConrol+0x5e8>)
 8005332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005336:	f7fb f987 	bl	8000648 <__aeabi_dmul>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	f7fa ffcb 	bl	80002dc <__adddf3>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4610      	mov	r0, r2
 800534c:	4619      	mov	r1, r3
 800534e:	f7fb fc53 	bl	8000bf8 <__aeabi_d2f>
 8005352:	4603      	mov	r3, r0
 8005354:	4a56      	ldr	r2, [pc, #344]	; (80054b0 <calWallConrol+0x608>)
 8005356:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005358:	4b55      	ldr	r3, [pc, #340]	; (80054b0 <calWallConrol+0x608>)
 800535a:	edd3 7a00 	vldr	s15, [r3]
 800535e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005362:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d52e      	bpl.n	80053ca <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 800536c:	4b53      	ldr	r3, [pc, #332]	; (80054bc <calWallConrol+0x614>)
 800536e:	edd3 7a00 	vldr	s15, [r3]
 8005372:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80054c0 <calWallConrol+0x618>
 8005376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800537a:	eef1 6a67 	vneg.f32	s13, s15
 800537e:	4b4f      	ldr	r3, [pc, #316]	; (80054bc <calWallConrol+0x614>)
 8005380:	edd3 7a00 	vldr	s15, [r3]
 8005384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005388:	4b48      	ldr	r3, [pc, #288]	; (80054ac <calWallConrol+0x604>)
 800538a:	edd3 7a00 	vldr	s15, [r3]
 800538e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80054c8 <calWallConrol+0x620>
 8005392:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005396:	4b45      	ldr	r3, [pc, #276]	; (80054ac <calWallConrol+0x604>)
 8005398:	edd3 6a00 	vldr	s13, [r3]
 800539c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80053a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a4:	ee17 0a90 	vmov	r0, s15
 80053a8:	f7fb f8f6 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 80053ac:	a33a      	add	r3, pc, #232	; (adr r3, 8005498 <calWallConrol+0x5f0>)
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fb f949 	bl	8000648 <__aeabi_dmul>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	f7fb fc1b 	bl	8000bf8 <__aeabi_d2f>
 80053c2:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 80053c4:	4a3f      	ldr	r2, [pc, #252]	; (80054c4 <calWallConrol+0x61c>)
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e003      	b.n	80053d2 <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 80053ca:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <calWallConrol+0x61c>)
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80053d2:	4b3c      	ldr	r3, [pc, #240]	; (80054c4 <calWallConrol+0x61c>)
 80053d4:	ed93 7a00 	vldr	s14, [r3]
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <calWallConrol+0x61c>)
 80053da:	edd3 7a01 	vldr	s15, [r3, #4]
 80053de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e2:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <calWallConrol+0x61c>)
 80053e4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80053e8:	4b36      	ldr	r3, [pc, #216]	; (80054c4 <calWallConrol+0x61c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a35      	ldr	r2, [pc, #212]	; (80054c4 <calWallConrol+0x61c>)
 80053ee:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80053f0:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <calWallConrol+0x61c>)
 80053f2:	ed93 7a00 	vldr	s14, [r3]
 80053f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053fa:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80053fe:	4b31      	ldr	r3, [pc, #196]	; (80054c4 <calWallConrol+0x61c>)
 8005400:	edd3 6a02 	vldr	s13, [r3, #8]
 8005404:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005408:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800540c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005410:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005414:	2000      	movs	r0, #0
 8005416:	f001 ff5b 	bl	80072d0 <pl_yellow_LED_count>
			break;
 800541a:	f001 b864 	b.w	80064e6 <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 800541e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005422:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80054c0 <calWallConrol+0x618>
 8005426:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800542a:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800542e:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8005432:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005436:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 800543a:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <calWallConrol+0x61c>)
 800543c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005440:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <calWallConrol+0x61c>)
 8005442:	ed93 7a00 	vldr	s14, [r3]
 8005446:	4b1f      	ldr	r3, [pc, #124]	; (80054c4 <calWallConrol+0x61c>)
 8005448:	edd3 7a01 	vldr	s15, [r3, #4]
 800544c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005450:	4b1c      	ldr	r3, [pc, #112]	; (80054c4 <calWallConrol+0x61c>)
 8005452:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005456:	4b1b      	ldr	r3, [pc, #108]	; (80054c4 <calWallConrol+0x61c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <calWallConrol+0x61c>)
 800545c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800545e:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <calWallConrol+0x61c>)
 8005460:	ed93 7a00 	vldr	s14, [r3]
 8005464:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005468:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800546c:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <calWallConrol+0x61c>)
 800546e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005472:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005476:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800547a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8005482:	2080      	movs	r0, #128	; 0x80
 8005484:	f001 ff24 	bl	80072d0 <pl_yellow_LED_count>
			break;
 8005488:	f001 b82d 	b.w	80064e6 <calWallConrol+0x163e>
 800548c:	f3af 8000 	nop.w
 8005490:	d2f1a9fc 	.word	0xd2f1a9fc
 8005494:	3f50624d 	.word	0x3f50624d
 8005498:	66666666 	.word	0x66666666
 800549c:	3fe66666 	.word	0x3fe66666
 80054a0:	200002bc 	.word	0x200002bc
 80054a4:	2000044c 	.word	0x2000044c
 80054a8:	20000597 	.word	0x20000597
 80054ac:	200005a0 	.word	0x200005a0
 80054b0:	200005a4 	.word	0x200005a4
 80054b4:	2000059b 	.word	0x2000059b
 80054b8:	200004dc 	.word	0x200004dc
 80054bc:	2000059c 	.word	0x2000059c
 80054c0:	44be6000 	.word	0x44be6000
 80054c4:	20000570 	.word	0x20000570
 80054c8:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80054cc:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80054d0:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80054c8 <calWallConrol+0x620>
 80054d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 80054dc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80054e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80054e4:	4baa      	ldr	r3, [pc, #680]	; (8005790 <calWallConrol+0x8e8>)
 80054e6:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80054ea:	4ba9      	ldr	r3, [pc, #676]	; (8005790 <calWallConrol+0x8e8>)
 80054ec:	ed93 7a00 	vldr	s14, [r3]
 80054f0:	4ba7      	ldr	r3, [pc, #668]	; (8005790 <calWallConrol+0x8e8>)
 80054f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80054f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054fa:	4ba5      	ldr	r3, [pc, #660]	; (8005790 <calWallConrol+0x8e8>)
 80054fc:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005500:	4ba3      	ldr	r3, [pc, #652]	; (8005790 <calWallConrol+0x8e8>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4aa2      	ldr	r2, [pc, #648]	; (8005790 <calWallConrol+0x8e8>)
 8005506:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005508:	4ba1      	ldr	r3, [pc, #644]	; (8005790 <calWallConrol+0x8e8>)
 800550a:	ed93 7a00 	vldr	s14, [r3]
 800550e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005512:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005516:	4b9e      	ldr	r3, [pc, #632]	; (8005790 <calWallConrol+0x8e8>)
 8005518:	edd3 6a02 	vldr	s13, [r3, #8]
 800551c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005520:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005528:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 800552c:	2001      	movs	r0, #1
 800552e:	f001 fecf 	bl	80072d0 <pl_yellow_LED_count>
			break;
 8005532:	f000 bfd8 	b.w	80064e6 <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005536:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800553a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005794 <calWallConrol+0x8ec>
 800553e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005542:	eef1 6a67 	vneg.f32	s13, s15
 8005546:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800554a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 800554e:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005552:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005798 <calWallConrol+0x8f0>
 8005556:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 800555a:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800555e:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005562:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005566:	4b8a      	ldr	r3, [pc, #552]	; (8005790 <calWallConrol+0x8e8>)
 8005568:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800556c:	4b88      	ldr	r3, [pc, #544]	; (8005790 <calWallConrol+0x8e8>)
 800556e:	ed93 7a00 	vldr	s14, [r3]
 8005572:	4b87      	ldr	r3, [pc, #540]	; (8005790 <calWallConrol+0x8e8>)
 8005574:	edd3 7a01 	vldr	s15, [r3, #4]
 8005578:	ee77 7a67 	vsub.f32	s15, s14, s15
 800557c:	4b84      	ldr	r3, [pc, #528]	; (8005790 <calWallConrol+0x8e8>)
 800557e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005582:	4b83      	ldr	r3, [pc, #524]	; (8005790 <calWallConrol+0x8e8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a82      	ldr	r2, [pc, #520]	; (8005790 <calWallConrol+0x8e8>)
 8005588:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800558a:	4b81      	ldr	r3, [pc, #516]	; (8005790 <calWallConrol+0x8e8>)
 800558c:	ed93 7a00 	vldr	s14, [r3]
 8005590:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005594:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005598:	4b7d      	ldr	r3, [pc, #500]	; (8005790 <calWallConrol+0x8e8>)
 800559a:	edd3 6a02 	vldr	s13, [r3, #8]
 800559e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80055a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80055a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055aa:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 80055ae:	2081      	movs	r0, #129	; 0x81
 80055b0:	f001 fe8e 	bl	80072d0 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 80055b4:	4b79      	ldr	r3, [pc, #484]	; (800579c <calWallConrol+0x8f4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fa ffdb 	bl	8000574 <__aeabi_i2d>
 80055be:	4602      	mov	r2, r0
 80055c0:	460b      	mov	r3, r1
 80055c2:	603a      	str	r2, [r7, #0]
 80055c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055c8:	607b      	str	r3, [r7, #4]
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	4b74      	ldr	r3, [pc, #464]	; (80057a0 <calWallConrol+0x8f8>)
 80055d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80055d4:	f7fb faaa 	bl	8000b2c <__aeabi_dcmplt>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d01a      	beq.n	8005614 <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 80055de:	4b6f      	ldr	r3, [pc, #444]	; (800579c <calWallConrol+0x8f4>)
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fa ffc6 	bl	8000574 <__aeabi_i2d>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4692      	mov	sl, r2
 80055ee:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <calWallConrol+0x8f8>)
 80055f8:	4650      	mov	r0, sl
 80055fa:	4659      	mov	r1, fp
 80055fc:	f7fb fa96 	bl	8000b2c <__aeabi_dcmplt>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005606:	4b67      	ldr	r3, [pc, #412]	; (80057a4 <calWallConrol+0x8fc>)
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	3301      	adds	r3, #1
 800560c:	b2da      	uxtb	r2, r3
 800560e:	4b65      	ldr	r3, [pc, #404]	; (80057a4 <calWallConrol+0x8fc>)
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e002      	b.n	800561a <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005614:	4b63      	ldr	r3, [pc, #396]	; (80057a4 <calWallConrol+0x8fc>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 800561a:	4b62      	ldr	r3, [pc, #392]	; (80057a4 <calWallConrol+0x8fc>)
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b18      	cmp	r3, #24
 8005620:	f240 8760 	bls.w	80064e4 <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 8005624:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <calWallConrol+0x900>)
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 800562c:	4b5d      	ldr	r3, [pc, #372]	; (80057a4 <calWallConrol+0x8fc>)
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005632:	f000 bf57 	b.w	80064e4 <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005636:	4b5d      	ldr	r3, [pc, #372]	; (80057ac <calWallConrol+0x904>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b02      	cmp	r3, #2
 800563c:	f000 8753 	beq.w	80064e6 <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005640:	4b5a      	ldr	r3, [pc, #360]	; (80057ac <calWallConrol+0x904>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b03      	cmp	r3, #3
 8005646:	f040 874e 	bne.w	80064e6 <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 800564a:	4b59      	ldr	r3, [pc, #356]	; (80057b0 <calWallConrol+0x908>)
 800564c:	edd3 7a00 	vldr	s15, [r3]
 8005650:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80057b4 <calWallConrol+0x90c>
 8005654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800565c:	dd05      	ble.n	800566a <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 800565e:	4b56      	ldr	r3, [pc, #344]	; (80057b8 <calWallConrol+0x910>)
 8005660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 8005664:	4b55      	ldr	r3, [pc, #340]	; (80057bc <calWallConrol+0x914>)
 8005666:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005668:	e024      	b.n	80056b4 <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <calWallConrol+0x908>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f7fa ff92 	bl	8000598 <__aeabi_f2d>
 8005674:	a342      	add	r3, pc, #264	; (adr r3, 8005780 <calWallConrol+0x8d8>)
 8005676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567a:	f7fa ffe5 	bl	8000648 <__aeabi_dmul>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	f7fb fab7 	bl	8000bf8 <__aeabi_d2f>
 800568a:	4603      	mov	r3, r0
 800568c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005690:	4b47      	ldr	r3, [pc, #284]	; (80057b0 <calWallConrol+0x908>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7fa ff7f 	bl	8000598 <__aeabi_f2d>
 800569a:	a33b      	add	r3, pc, #236	; (adr r3, 8005788 <calWallConrol+0x8e0>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa ffd2 	bl	8000648 <__aeabi_dmul>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	f7fb faa4 	bl	8000bf8 <__aeabi_d2f>
 80056b0:	4603      	mov	r3, r0
 80056b2:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 80056b4:	4b42      	ldr	r3, [pc, #264]	; (80057c0 <calWallConrol+0x918>)
 80056b6:	edd3 7a00 	vldr	s15, [r3]
 80056ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c6:	dd12      	ble.n	80056ee <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <calWallConrol+0x918>)
 80056ca:	edd3 7a00 	vldr	s15, [r3]
 80056ce:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80056d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056da:	d808      	bhi.n	80056ee <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 80056dc:	4b39      	ldr	r3, [pc, #228]	; (80057c4 <calWallConrol+0x91c>)
 80056de:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 80056e0:	4b39      	ldr	r3, [pc, #228]	; (80057c8 <calWallConrol+0x920>)
 80056e2:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 80056e4:	4b39      	ldr	r3, [pc, #228]	; (80057cc <calWallConrol+0x924>)
 80056e6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 80056e8:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <calWallConrol+0x928>)
 80056ea:	657b      	str	r3, [r7, #84]	; 0x54
 80056ec:	e0a7      	b.n	800583e <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80056ee:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <calWallConrol+0x918>)
 80056f0:	edd3 7a00 	vldr	s15, [r3]
 80056f4:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80057d4 <calWallConrol+0x92c>
 80056f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005700:	dd12      	ble.n	8005728 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 8005702:	4b2f      	ldr	r3, [pc, #188]	; (80057c0 <calWallConrol+0x918>)
 8005704:	edd3 7a00 	vldr	s15, [r3]
 8005708:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80057d8 <calWallConrol+0x930>
 800570c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005714:	d808      	bhi.n	8005728 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005716:	4b31      	ldr	r3, [pc, #196]	; (80057dc <calWallConrol+0x934>)
 8005718:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 800571a:	4b31      	ldr	r3, [pc, #196]	; (80057e0 <calWallConrol+0x938>)
 800571c:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 800571e:	4b31      	ldr	r3, [pc, #196]	; (80057e4 <calWallConrol+0x93c>)
 8005720:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005722:	4b31      	ldr	r3, [pc, #196]	; (80057e8 <calWallConrol+0x940>)
 8005724:	657b      	str	r3, [r7, #84]	; 0x54
 8005726:	e08a      	b.n	800583e <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <calWallConrol+0x918>)
 800572a:	edd3 7a00 	vldr	s15, [r3]
 800572e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80057ec <calWallConrol+0x944>
 8005732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800573a:	dd12      	ble.n	8005762 <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 800573c:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <calWallConrol+0x918>)
 800573e:	edd3 7a00 	vldr	s15, [r3]
 8005742:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80057f0 <calWallConrol+0x948>
 8005746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574e:	d808      	bhi.n	8005762 <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005750:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <calWallConrol+0x94c>)
 8005752:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005754:	4b28      	ldr	r3, [pc, #160]	; (80057f8 <calWallConrol+0x950>)
 8005756:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005758:	4b28      	ldr	r3, [pc, #160]	; (80057fc <calWallConrol+0x954>)
 800575a:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 800575c:	4b28      	ldr	r3, [pc, #160]	; (8005800 <calWallConrol+0x958>)
 800575e:	657b      	str	r3, [r7, #84]	; 0x54
 8005760:	e06d      	b.n	800583e <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005762:	4b28      	ldr	r3, [pc, #160]	; (8005804 <calWallConrol+0x95c>)
 8005764:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005768:	2bb4      	cmp	r3, #180	; 0xb4
 800576a:	dd4f      	ble.n	800580c <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 800576c:	4b26      	ldr	r3, [pc, #152]	; (8005808 <calWallConrol+0x960>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	f043 0302 	orr.w	r3, r3, #2
 8005774:	b2da      	uxtb	r2, r3
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <calWallConrol+0x960>)
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	e04e      	b.n	800581a <calWallConrol+0x972>
 800577c:	f3af 8000 	nop.w
 8005780:	66666666 	.word	0x66666666
 8005784:	3fe66666 	.word	0x3fe66666
 8005788:	1eb851ec 	.word	0x1eb851ec
 800578c:	bfb1eb85 	.word	0xbfb1eb85
 8005790:	20000570 	.word	0x20000570
 8005794:	44be6000 	.word	0x44be6000
 8005798:	44974000 	.word	0x44974000
 800579c:	2000044c 	.word	0x2000044c
 80057a0:	403e0000 	.word	0x403e0000
 80057a4:	20000599 	.word	0x20000599
 80057a8:	20000548 	.word	0x20000548
 80057ac:	20000594 	.word	0x20000594
 80057b0:	200004dc 	.word	0x200004dc
 80057b4:	447a0000 	.word	0x447a0000
 80057b8:	442f0000 	.word	0x442f0000
 80057bc:	c28c0000 	.word	0xc28c0000
 80057c0:	200005e0 	.word	0x200005e0
 80057c4:	4519d2f5 	.word	0x4519d2f5
 80057c8:	c40e02ec 	.word	0xc40e02ec
 80057cc:	423da41a 	.word	0x423da41a
 80057d0:	bfa28f5c 	.word	0xbfa28f5c
 80057d4:	420c0000 	.word	0x420c0000
 80057d8:	42700000 	.word	0x42700000
 80057dc:	440d1857 	.word	0x440d1857
 80057e0:	c181619b 	.word	0xc181619b
 80057e4:	3eaab6f2 	.word	0x3eaab6f2
 80057e8:	bacaf00f 	.word	0xbacaf00f
 80057ec:	42c80000 	.word	0x42c80000
 80057f0:	42f00000 	.word	0x42f00000
 80057f4:	4559c991 	.word	0x4559c991
 80057f8:	41cef541 	.word	0x41cef541
 80057fc:	bfbda504 	.word	0xbfbda504
 8005800:	3c22339c 	.word	0x3c22339c
 8005804:	200002bc 	.word	0x200002bc
 8005808:	20000597 	.word	0x20000597
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800580c:	4b79      	ldr	r3, [pc, #484]	; (80059f4 <calWallConrol+0xb4c>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f023 0302 	bic.w	r3, r3, #2
 8005814:	b2da      	uxtb	r2, r3
 8005816:	4b77      	ldr	r3, [pc, #476]	; (80059f4 <calWallConrol+0xb4c>)
 8005818:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 800581a:	4b77      	ldr	r3, [pc, #476]	; (80059f8 <calWallConrol+0xb50>)
 800581c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005820:	ee07 3a90 	vmov	s15, r3
 8005824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005828:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 800583e:	4b6f      	ldr	r3, [pc, #444]	; (80059fc <calWallConrol+0xb54>)
 8005840:	edd3 7a00 	vldr	s15, [r3]
 8005844:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800584c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005850:	dd12      	ble.n	8005878 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 8005852:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <calWallConrol+0xb54>)
 8005854:	edd3 7a00 	vldr	s15, [r3]
 8005858:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800585c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005864:	d808      	bhi.n	8005878 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 8005866:	4b66      	ldr	r3, [pc, #408]	; (8005a00 <calWallConrol+0xb58>)
 8005868:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 800586a:	4b66      	ldr	r3, [pc, #408]	; (8005a04 <calWallConrol+0xb5c>)
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 800586e:	4b66      	ldr	r3, [pc, #408]	; (8005a08 <calWallConrol+0xb60>)
 8005870:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 8005872:	4b66      	ldr	r3, [pc, #408]	; (8005a0c <calWallConrol+0xb64>)
 8005874:	647b      	str	r3, [r7, #68]	; 0x44
 8005876:	e05d      	b.n	8005934 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005878:	4b60      	ldr	r3, [pc, #384]	; (80059fc <calWallConrol+0xb54>)
 800587a:	edd3 7a00 	vldr	s15, [r3]
 800587e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005a10 <calWallConrol+0xb68>
 8005882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800588a:	dd12      	ble.n	80058b2 <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 800588c:	4b5b      	ldr	r3, [pc, #364]	; (80059fc <calWallConrol+0xb54>)
 800588e:	edd3 7a00 	vldr	s15, [r3]
 8005892:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8005a14 <calWallConrol+0xb6c>
 8005896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800589a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800589e:	d808      	bhi.n	80058b2 <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 80058a0:	4b5d      	ldr	r3, [pc, #372]	; (8005a18 <calWallConrol+0xb70>)
 80058a2:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80058a4:	4b5d      	ldr	r3, [pc, #372]	; (8005a1c <calWallConrol+0xb74>)
 80058a6:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 80058a8:	4b5d      	ldr	r3, [pc, #372]	; (8005a20 <calWallConrol+0xb78>)
 80058aa:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 80058ac:	4b5d      	ldr	r3, [pc, #372]	; (8005a24 <calWallConrol+0xb7c>)
 80058ae:	647b      	str	r3, [r7, #68]	; 0x44
 80058b0:	e040      	b.n	8005934 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 80058b2:	4b52      	ldr	r3, [pc, #328]	; (80059fc <calWallConrol+0xb54>)
 80058b4:	edd3 7a00 	vldr	s15, [r3]
 80058b8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005a28 <calWallConrol+0xb80>
 80058bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c4:	dd12      	ble.n	80058ec <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 80058c6:	4b4d      	ldr	r3, [pc, #308]	; (80059fc <calWallConrol+0xb54>)
 80058c8:	edd3 7a00 	vldr	s15, [r3]
 80058cc:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005a2c <calWallConrol+0xb84>
 80058d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d8:	d808      	bhi.n	80058ec <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 80058da:	4b55      	ldr	r3, [pc, #340]	; (8005a30 <calWallConrol+0xb88>)
 80058dc:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 80058de:	4b55      	ldr	r3, [pc, #340]	; (8005a34 <calWallConrol+0xb8c>)
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 80058e2:	4b55      	ldr	r3, [pc, #340]	; (8005a38 <calWallConrol+0xb90>)
 80058e4:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 80058e6:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <calWallConrol+0xb94>)
 80058e8:	647b      	str	r3, [r7, #68]	; 0x44
 80058ea:	e023      	b.n	8005934 <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 80058ec:	4b42      	ldr	r3, [pc, #264]	; (80059f8 <calWallConrol+0xb50>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2bb4      	cmp	r3, #180	; 0xb4
 80058f2:	dd07      	ble.n	8005904 <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80058f4:	4b3f      	ldr	r3, [pc, #252]	; (80059f4 <calWallConrol+0xb4c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4b3d      	ldr	r3, [pc, #244]	; (80059f4 <calWallConrol+0xb4c>)
 8005900:	701a      	strb	r2, [r3, #0]
 8005902:	e006      	b.n	8005912 <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005904:	4b3b      	ldr	r3, [pc, #236]	; (80059f4 <calWallConrol+0xb4c>)
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	f023 0301 	bic.w	r3, r3, #1
 800590c:	b2da      	uxtb	r2, r3
 800590e:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <calWallConrol+0xb4c>)
 8005910:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 8005912:	4b39      	ldr	r3, [pc, #228]	; (80059f8 <calWallConrol+0xb50>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	ee07 3a90 	vmov	s15, r3
 800591a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800591e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 8005922:	f04f 0300 	mov.w	r3, #0
 8005926:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 8005934:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005938:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 800593c:	4b40      	ldr	r3, [pc, #256]	; (8005a40 <calWallConrol+0xb98>)
 800593e:	edd3 7a00 	vldr	s15, [r3]
 8005942:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005946:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800594a:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 800594e:	4b3c      	ldr	r3, [pc, #240]	; (8005a40 <calWallConrol+0xb98>)
 8005950:	edd3 7a00 	vldr	s15, [r3]
 8005954:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005958:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <calWallConrol+0xb98>)
 800595a:	edd3 7a00 	vldr	s15, [r3]
 800595e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005962:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 8005966:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800596a:	4b35      	ldr	r3, [pc, #212]	; (8005a40 <calWallConrol+0xb98>)
 800596c:	edd3 7a00 	vldr	s15, [r3]
 8005970:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005974:	4b32      	ldr	r3, [pc, #200]	; (8005a40 <calWallConrol+0xb98>)
 8005976:	edd3 7a00 	vldr	s15, [r3]
 800597a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800597e:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <calWallConrol+0xb98>)
 8005980:	edd3 7a00 	vldr	s15, [r3]
 8005984:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005990:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 8005994:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005998:	4b18      	ldr	r3, [pc, #96]	; (80059fc <calWallConrol+0xb54>)
 800599a:	edd3 7a00 	vldr	s15, [r3]
 800599e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059a2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80059a6:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 80059aa:	4b14      	ldr	r3, [pc, #80]	; (80059fc <calWallConrol+0xb54>)
 80059ac:	edd3 7a00 	vldr	s15, [r3]
 80059b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80059b4:	4b11      	ldr	r3, [pc, #68]	; (80059fc <calWallConrol+0xb54>)
 80059b6:	edd3 7a00 	vldr	s15, [r3]
 80059ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80059be:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 80059c2:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 80059c6:	4b0d      	ldr	r3, [pc, #52]	; (80059fc <calWallConrol+0xb54>)
 80059c8:	edd3 7a00 	vldr	s15, [r3]
 80059cc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <calWallConrol+0xb54>)
 80059d2:	edd3 7a00 	vldr	s15, [r3]
 80059d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80059da:	4b08      	ldr	r3, [pc, #32]	; (80059fc <calWallConrol+0xb54>)
 80059dc:	edd3 7a00 	vldr	s15, [r3]
 80059e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 80059e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 80059ec:	230b      	movs	r3, #11
 80059ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80059f0:	e041      	b.n	8005a76 <calWallConrol+0xbce>
 80059f2:	bf00      	nop
 80059f4:	20000597 	.word	0x20000597
 80059f8:	200002bc 	.word	0x200002bc
 80059fc:	200005e4 	.word	0x200005e4
 8005a00:	44f286e9 	.word	0x44f286e9
 8005a04:	c3c54757 	.word	0xc3c54757
 8005a08:	41e9f1c4 	.word	0x41e9f1c4
 8005a0c:	bf307804 	.word	0xbf307804
 8005a10:	420c0000 	.word	0x420c0000
 8005a14:	42700000 	.word	0x42700000
 8005a18:	43b4a7f9 	.word	0x43b4a7f9
 8005a1c:	c04f43da 	.word	0xc04f43da
 8005a20:	3a9164ed 	.word	0x3a9164ed
 8005a24:	3a8c6aa9 	.word	0x3a8c6aa9
 8005a28:	42c80000 	.word	0x42c80000
 8005a2c:	42f00000 	.word	0x42f00000
 8005a30:	478c2a26 	.word	0x478c2a26
 8005a34:	c4fbb229 	.word	0xc4fbb229
 8005a38:	4195b611 	.word	0x4195b611
 8005a3c:	bd67d567 	.word	0xbd67d567
 8005a40:	200005e0 	.word	0x200005e0
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005a44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a46:	3b01      	subs	r3, #1
 8005a48:	4a9c      	ldr	r2, [pc, #624]	; (8005cbc <calWallConrol+0xe14>)
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	499a      	ldr	r1, [pc, #616]	; (8005cbc <calWallConrol+0xe14>)
 8005a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	4a98      	ldr	r2, [pc, #608]	; (8005cc0 <calWallConrol+0xe18>)
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4996      	ldr	r1, [pc, #600]	; (8005cc0 <calWallConrol+0xe18>)
 8005a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005a70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a72:	3b01      	subs	r3, #1
 8005a74:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	dce3      	bgt.n	8005a44 <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8005a7c:	4a8f      	ldr	r2, [pc, #572]	; (8005cbc <calWallConrol+0xe14>)
 8005a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a80:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005a82:	4a8f      	ldr	r2, [pc, #572]	; (8005cc0 <calWallConrol+0xe18>)
 8005a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a86:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005a88:	4b8c      	ldr	r3, [pc, #560]	; (8005cbc <calWallConrol+0xe14>)
 8005a8a:	ed93 7a00 	vldr	s14, [r3]
 8005a8e:	4b8b      	ldr	r3, [pc, #556]	; (8005cbc <calWallConrol+0xe14>)
 8005a90:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005a94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a98:	4b8a      	ldr	r3, [pc, #552]	; (8005cc4 <calWallConrol+0xe1c>)
 8005a9a:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8005a9e:	4b88      	ldr	r3, [pc, #544]	; (8005cc0 <calWallConrol+0xe18>)
 8005aa0:	ed93 7a00 	vldr	s14, [r3]
 8005aa4:	4b86      	ldr	r3, [pc, #536]	; (8005cc0 <calWallConrol+0xe18>)
 8005aa6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aae:	4b86      	ldr	r3, [pc, #536]	; (8005cc8 <calWallConrol+0xe20>)
 8005ab0:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005ab4:	4b85      	ldr	r3, [pc, #532]	; (8005ccc <calWallConrol+0xe24>)
 8005ab6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005aba:	2bb4      	cmp	r3, #180	; 0xb4
 8005abc:	dd1a      	ble.n	8005af4 <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005abe:	4b84      	ldr	r3, [pc, #528]	; (8005cd0 <calWallConrol+0xe28>)
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	ee07 3a90 	vmov	s15, r3
 8005ac6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aca:	4b7e      	ldr	r3, [pc, #504]	; (8005cc4 <calWallConrol+0xe1c>)
 8005acc:	edd3 7a00 	vldr	s15, [r3]
 8005ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad4:	eef0 7ae7 	vabs.f32	s15, s15
 8005ad8:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005cd4 <calWallConrol+0xe2c>
 8005adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ae4:	d506      	bpl.n	8005af4 <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005ae6:	4b7c      	ldr	r3, [pc, #496]	; (8005cd8 <calWallConrol+0xe30>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	f043 0302 	orr.w	r3, r3, #2
 8005aee:	b2da      	uxtb	r2, r3
 8005af0:	4b79      	ldr	r3, [pc, #484]	; (8005cd8 <calWallConrol+0xe30>)
 8005af2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005af4:	4b75      	ldr	r3, [pc, #468]	; (8005ccc <calWallConrol+0xe24>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2bb4      	cmp	r3, #180	; 0xb4
 8005afa:	dd1a      	ble.n	8005b32 <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005afc:	4b74      	ldr	r3, [pc, #464]	; (8005cd0 <calWallConrol+0xe28>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b08:	4b6f      	ldr	r3, [pc, #444]	; (8005cc8 <calWallConrol+0xe20>)
 8005b0a:	edd3 7a00 	vldr	s15, [r3]
 8005b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b12:	eef0 7ae7 	vabs.f32	s15, s15
 8005b16:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005cd4 <calWallConrol+0xe2c>
 8005b1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	d506      	bpl.n	8005b32 <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005b24:	4b6c      	ldr	r3, [pc, #432]	; (8005cd8 <calWallConrol+0xe30>)
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	4b6a      	ldr	r3, [pc, #424]	; (8005cd8 <calWallConrol+0xe30>)
 8005b30:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005b32:	4b66      	ldr	r3, [pc, #408]	; (8005ccc <calWallConrol+0xe24>)
 8005b34:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b38:	2bb3      	cmp	r3, #179	; 0xb3
 8005b3a:	dd13      	ble.n	8005b64 <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005b3c:	4b64      	ldr	r3, [pc, #400]	; (8005cd0 <calWallConrol+0xe28>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	ee07 3a90 	vmov	s15, r3
 8005b44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b48:	4b5e      	ldr	r3, [pc, #376]	; (8005cc4 <calWallConrol+0xe1c>)
 8005b4a:	edd3 7a00 	vldr	s15, [r3]
 8005b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b52:	eef0 7ae7 	vabs.f32	s15, s15
 8005b56:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005cd4 <calWallConrol+0xe2c>
 8005b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b62:	dd06      	ble.n	8005b72 <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005b64:	4b5c      	ldr	r3, [pc, #368]	; (8005cd8 <calWallConrol+0xe30>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f023 0302 	bic.w	r3, r3, #2
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	4b5a      	ldr	r3, [pc, #360]	; (8005cd8 <calWallConrol+0xe30>)
 8005b70:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005b72:	4b56      	ldr	r3, [pc, #344]	; (8005ccc <calWallConrol+0xe24>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2bb3      	cmp	r3, #179	; 0xb3
 8005b78:	dd13      	ble.n	8005ba2 <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005b7a:	4b55      	ldr	r3, [pc, #340]	; (8005cd0 <calWallConrol+0xe28>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	ee07 3a90 	vmov	s15, r3
 8005b82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b86:	4b50      	ldr	r3, [pc, #320]	; (8005cc8 <calWallConrol+0xe20>)
 8005b88:	edd3 7a00 	vldr	s15, [r3]
 8005b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b90:	eef0 7ae7 	vabs.f32	s15, s15
 8005b94:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005cd4 <calWallConrol+0xe2c>
 8005b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	dd06      	ble.n	8005bb0 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005ba2:	4b4d      	ldr	r3, [pc, #308]	; (8005cd8 <calWallConrol+0xe30>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f023 0301 	bic.w	r3, r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4b4a      	ldr	r3, [pc, #296]	; (8005cd8 <calWallConrol+0xe30>)
 8005bae:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <calWallConrol+0xe30>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	f200 813d 	bhi.w	8005e34 <calWallConrol+0xf8c>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <calWallConrol+0xd18>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005bd1 	.word	0x08005bd1
 8005bc4:	08005c25 	.word	0x08005c25
 8005bc8:	08005ce9 	.word	0x08005ce9
 8005bcc:	08005d7f 	.word	0x08005d7f
		case 0:			//両壁なし
			PID_wall = 0;
 8005bd0:	f04f 0300 	mov.w	r3, #0
 8005bd4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f001 faf7 	bl	80071cc <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005bde:	2000      	movs	r0, #0
 8005be0:	f001 fb2a 	bl	8007238 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005be4:	4b39      	ldr	r3, [pc, #228]	; (8005ccc <calWallConrol+0xe24>)
 8005be6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005bea:	ee07 3a90 	vmov	s15, r3
 8005bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bf2:	4b3a      	ldr	r3, [pc, #232]	; (8005cdc <calWallConrol+0xe34>)
 8005bf4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005bf8:	4b34      	ldr	r3, [pc, #208]	; (8005ccc <calWallConrol+0xe24>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	ee07 3a90 	vmov	s15, r3
 8005c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c04:	4b36      	ldr	r3, [pc, #216]	; (8005ce0 <calWallConrol+0xe38>)
 8005c06:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005c0a:	4b36      	ldr	r3, [pc, #216]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005c1a:	4b32      	ldr	r3, [pc, #200]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	605a      	str	r2, [r3, #4]
			break;
 8005c22:	e107      	b.n	8005e34 <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005c24:	2000      	movs	r0, #0
 8005c26:	f001 fad1 	bl	80071cc <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005c2a:	2001      	movs	r0, #1
 8005c2c:	f001 fb04 	bl	8007238 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005c30:	4b26      	ldr	r3, [pc, #152]	; (8005ccc <calWallConrol+0xe24>)
 8005c32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c3e:	4b27      	ldr	r3, [pc, #156]	; (8005cdc <calWallConrol+0xe34>)
 8005c40:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005c44:	4a26      	ldr	r2, [pc, #152]	; (8005ce0 <calWallConrol+0xe38>)
 8005c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c48:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005c4a:	4b20      	ldr	r3, [pc, #128]	; (8005ccc <calWallConrol+0xe24>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c56:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c5e:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005c62:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <calWallConrol+0xe24>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005c72:	4b1c      	ldr	r3, [pc, #112]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c74:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005c78:	4b1a      	ldr	r3, [pc, #104]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c7a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c80:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c84:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005c88:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c8a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005c8e:	4b15      	ldr	r3, [pc, #84]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a14      	ldr	r2, [pc, #80]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c94:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005c96:	4b13      	ldr	r3, [pc, #76]	; (8005ce4 <calWallConrol+0xe3c>)
 8005c98:	ed93 7a00 	vldr	s14, [r3]
 8005c9c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005ca0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005ca4:	4b0f      	ldr	r3, [pc, #60]	; (8005ce4 <calWallConrol+0xe3c>)
 8005ca6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005caa:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005cae:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005cba:	e0bb      	b.n	8005e34 <calWallConrol+0xf8c>
 8005cbc:	2000060c 	.word	0x2000060c
 8005cc0:	2000063c 	.word	0x2000063c
 8005cc4:	200006cc 	.word	0x200006cc
 8005cc8:	200006d0 	.word	0x200006d0
 8005ccc:	200002bc 	.word	0x200002bc
 8005cd0:	2000044c 	.word	0x2000044c
 8005cd4:	42a00000 	.word	0x42a00000
 8005cd8:	20000597 	.word	0x20000597
 8005cdc:	200005b0 	.word	0x200005b0
 8005ce0:	200005b4 	.word	0x200005b4
 8005ce4:	2000057c 	.word	0x2000057c
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f001 fa6f 	bl	80071cc <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005cee:	2000      	movs	r0, #0
 8005cf0:	f001 faa2 	bl	8007238 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005cf4:	4aa4      	ldr	r2, [pc, #656]	; (8005f88 <calWallConrol+0x10e0>)
 8005cf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005cf8:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005cfa:	4ba4      	ldr	r3, [pc, #656]	; (8005f8c <calWallConrol+0x10e4>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	ee07 3a90 	vmov	s15, r3
 8005d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d06:	4ba2      	ldr	r3, [pc, #648]	; (8005f90 <calWallConrol+0x10e8>)
 8005d08:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005d0c:	4b9f      	ldr	r3, [pc, #636]	; (8005f8c <calWallConrol+0x10e4>)
 8005d0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d12:	ee07 3a90 	vmov	s15, r3
 8005d16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d1a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005d1e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005d22:	4b9a      	ldr	r3, [pc, #616]	; (8005f8c <calWallConrol+0x10e4>)
 8005d24:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d30:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005d34:	4b97      	ldr	r3, [pc, #604]	; (8005f94 <calWallConrol+0x10ec>)
 8005d36:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005d3a:	4b96      	ldr	r3, [pc, #600]	; (8005f94 <calWallConrol+0x10ec>)
 8005d3c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005d40:	4b94      	ldr	r3, [pc, #592]	; (8005f94 <calWallConrol+0x10ec>)
 8005d42:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d46:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005d4a:	4b92      	ldr	r3, [pc, #584]	; (8005f94 <calWallConrol+0x10ec>)
 8005d4c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005d50:	4b90      	ldr	r3, [pc, #576]	; (8005f94 <calWallConrol+0x10ec>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a8f      	ldr	r2, [pc, #572]	; (8005f94 <calWallConrol+0x10ec>)
 8005d56:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d58:	4b8e      	ldr	r3, [pc, #568]	; (8005f94 <calWallConrol+0x10ec>)
 8005d5a:	ed93 7a00 	vldr	s14, [r3]
 8005d5e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d62:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005d66:	4b8b      	ldr	r3, [pc, #556]	; (8005f94 <calWallConrol+0x10ec>)
 8005d68:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d6c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d70:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d78:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005d7c:	e05a      	b.n	8005e34 <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f001 fa24 	bl	80071cc <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005d84:	2001      	movs	r0, #1
 8005d86:	f001 fa57 	bl	8007238 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005d8a:	4a7f      	ldr	r2, [pc, #508]	; (8005f88 <calWallConrol+0x10e0>)
 8005d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d8e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005d90:	4a7f      	ldr	r2, [pc, #508]	; (8005f90 <calWallConrol+0x10e8>)
 8005d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d94:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005d96:	4b7d      	ldr	r3, [pc, #500]	; (8005f8c <calWallConrol+0x10e4>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005da2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005da6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005daa:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005dae:	4b77      	ldr	r3, [pc, #476]	; (8005f8c <calWallConrol+0x10e4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005dbe:	4b73      	ldr	r3, [pc, #460]	; (8005f8c <calWallConrol+0x10e4>)
 8005dc0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005dcc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005dd0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005dd4:	4b6d      	ldr	r3, [pc, #436]	; (8005f8c <calWallConrol+0x10e4>)
 8005dd6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005de2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005de6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005dea:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <calWallConrol+0x10ec>)
 8005dec:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005df0:	4b68      	ldr	r3, [pc, #416]	; (8005f94 <calWallConrol+0x10ec>)
 8005df2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005df6:	4b67      	ldr	r3, [pc, #412]	; (8005f94 <calWallConrol+0x10ec>)
 8005df8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dfc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005e00:	4b64      	ldr	r3, [pc, #400]	; (8005f94 <calWallConrol+0x10ec>)
 8005e02:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005e06:	4b63      	ldr	r3, [pc, #396]	; (8005f94 <calWallConrol+0x10ec>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a62      	ldr	r2, [pc, #392]	; (8005f94 <calWallConrol+0x10ec>)
 8005e0c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005e0e:	4b61      	ldr	r3, [pc, #388]	; (8005f94 <calWallConrol+0x10ec>)
 8005e10:	ed93 7a00 	vldr	s14, [r3]
 8005e14:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005e18:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005e1c:	4b5d      	ldr	r3, [pc, #372]	; (8005f94 <calWallConrol+0x10ec>)
 8005e1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e22:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005e32:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 8005e34:	4b58      	ldr	r3, [pc, #352]	; (8005f98 <calWallConrol+0x10f0>)
 8005e36:	edd3 7a00 	vldr	s15, [r3]
 8005e3a:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005f9c <calWallConrol+0x10f4>
 8005e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e46:	dd04      	ble.n	8005e52 <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 8005e48:	4b55      	ldr	r3, [pc, #340]	; (8005fa0 <calWallConrol+0x10f8>)
 8005e4a:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 8005e4c:	4b55      	ldr	r3, [pc, #340]	; (8005fa4 <calWallConrol+0x10fc>)
 8005e4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005e50:	e023      	b.n	8005e9a <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005e52:	4b51      	ldr	r3, [pc, #324]	; (8005f98 <calWallConrol+0x10f0>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fa fb9e 	bl	8000598 <__aeabi_f2d>
 8005e5c:	a346      	add	r3, pc, #280	; (adr r3, 8005f78 <calWallConrol+0x10d0>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa fbf1 	bl	8000648 <__aeabi_dmul>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f7fa fec3 	bl	8000bf8 <__aeabi_d2f>
 8005e72:	4603      	mov	r3, r0
 8005e74:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005e76:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <calWallConrol+0x10f0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fa fb8c 	bl	8000598 <__aeabi_f2d>
 8005e80:	a33f      	add	r3, pc, #252	; (adr r3, 8005f80 <calWallConrol+0x10d8>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f7fa fbdf 	bl	8000648 <__aeabi_dmul>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fa feb1 	bl	8000bf8 <__aeabi_d2f>
 8005e96:	4603      	mov	r3, r0
 8005e98:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005e9a:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <calWallConrol+0x1100>)
 8005e9c:	edd3 7a00 	vldr	s15, [r3]
 8005ea0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eac:	dd12      	ble.n	8005ed4 <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005eae:	4b3e      	ldr	r3, [pc, #248]	; (8005fa8 <calWallConrol+0x1100>)
 8005eb0:	edd3 7a00 	vldr	s15, [r3]
 8005eb4:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005fac <calWallConrol+0x1104>
 8005eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ec0:	d808      	bhi.n	8005ed4 <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <calWallConrol+0x1108>)
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <calWallConrol+0x110c>)
 8005ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005eca:	4b3b      	ldr	r3, [pc, #236]	; (8005fb8 <calWallConrol+0x1110>)
 8005ecc:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005ece:	4b3b      	ldr	r3, [pc, #236]	; (8005fbc <calWallConrol+0x1114>)
 8005ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ed2:	e025      	b.n	8005f20 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <calWallConrol+0x10e4>)
 8005ed6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005eda:	2bdc      	cmp	r3, #220	; 0xdc
 8005edc:	dd07      	ble.n	8005eee <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005ede:	4b38      	ldr	r3, [pc, #224]	; (8005fc0 <calWallConrol+0x1118>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	f043 0302 	orr.w	r3, r3, #2
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b35      	ldr	r3, [pc, #212]	; (8005fc0 <calWallConrol+0x1118>)
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e006      	b.n	8005efc <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005eee:	4b34      	ldr	r3, [pc, #208]	; (8005fc0 <calWallConrol+0x1118>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	f023 0302 	bic.w	r3, r3, #2
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	4b31      	ldr	r3, [pc, #196]	; (8005fc0 <calWallConrol+0x1118>)
 8005efa:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005efc:	4b23      	ldr	r3, [pc, #140]	; (8005f8c <calWallConrol+0x10e4>)
 8005efe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f02:	ee07 3a90 	vmov	s15, r3
 8005f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005f0e:	f04f 0300 	mov.w	r3, #0
 8005f12:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005f20:	4b28      	ldr	r3, [pc, #160]	; (8005fc4 <calWallConrol+0x111c>)
 8005f22:	edd3 7a00 	vldr	s15, [r3]
 8005f26:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005f2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f32:	dd12      	ble.n	8005f5a <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005f34:	4b23      	ldr	r3, [pc, #140]	; (8005fc4 <calWallConrol+0x111c>)
 8005f36:	edd3 7a00 	vldr	s15, [r3]
 8005f3a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005fac <calWallConrol+0x1104>
 8005f3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f46:	d808      	bhi.n	8005f5a <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005f48:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <calWallConrol+0x1120>)
 8005f4a:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005f4c:	4b1f      	ldr	r3, [pc, #124]	; (8005fcc <calWallConrol+0x1124>)
 8005f4e:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005f50:	4b1f      	ldr	r3, [pc, #124]	; (8005fd0 <calWallConrol+0x1128>)
 8005f52:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005f54:	4b1f      	ldr	r3, [pc, #124]	; (8005fd4 <calWallConrol+0x112c>)
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
 8005f58:	e056      	b.n	8006008 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <calWallConrol+0x10e4>)
 8005f5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f5e:	2bdc      	cmp	r3, #220	; 0xdc
 8005f60:	dd3a      	ble.n	8005fd8 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005f62:	4b17      	ldr	r3, [pc, #92]	; (8005fc0 <calWallConrol+0x1118>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <calWallConrol+0x1118>)
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e039      	b.n	8005fe6 <calWallConrol+0x113e>
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
 8005f78:	33333333 	.word	0x33333333
 8005f7c:	3fe33333 	.word	0x3fe33333
 8005f80:	eb851eb8 	.word	0xeb851eb8
 8005f84:	bfaeb851 	.word	0xbfaeb851
 8005f88:	200005b0 	.word	0x200005b0
 8005f8c:	200002bc 	.word	0x200002bc
 8005f90:	200005b4 	.word	0x200005b4
 8005f94:	2000057c 	.word	0x2000057c
 8005f98:	200004dc 	.word	0x200004dc
 8005f9c:	447a0000 	.word	0x447a0000
 8005fa0:	44160000 	.word	0x44160000
 8005fa4:	c2700000 	.word	0xc2700000
 8005fa8:	200005e0 	.word	0x200005e0
 8005fac:	42a00000 	.word	0x42a00000
 8005fb0:	43e7e73c 	.word	0x43e7e73c
 8005fb4:	c0f9d45b 	.word	0xc0f9d45b
 8005fb8:	3e043787 	.word	0x3e043787
 8005fbc:	b83cbe62 	.word	0xb83cbe62
 8005fc0:	20000598 	.word	0x20000598
 8005fc4:	200005e4 	.word	0x200005e4
 8005fc8:	440fa6b0 	.word	0x440fa6b0
 8005fcc:	c1892199 	.word	0xc1892199
 8005fd0:	3ea1604b 	.word	0x3ea1604b
 8005fd4:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005fd8:	4bb5      	ldr	r3, [pc, #724]	; (80062b0 <calWallConrol+0x1408>)
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	f023 0301 	bic.w	r3, r3, #1
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	4bb3      	ldr	r3, [pc, #716]	; (80062b0 <calWallConrol+0x1408>)
 8005fe4:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005fe6:	4bb3      	ldr	r3, [pc, #716]	; (80062b4 <calWallConrol+0x140c>)
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ff2:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005ffc:	f04f 0300 	mov.w	r3, #0
 8006000:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8006008:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 800600c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006010:	4ba9      	ldr	r3, [pc, #676]	; (80062b8 <calWallConrol+0x1410>)
 8006012:	edd3 7a00 	vldr	s15, [r3]
 8006016:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800601a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 800601e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8006022:	4ba5      	ldr	r3, [pc, #660]	; (80062b8 <calWallConrol+0x1410>)
 8006024:	edd3 7a00 	vldr	s15, [r3]
 8006028:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 800602c:	4ba2      	ldr	r3, [pc, #648]	; (80062b8 <calWallConrol+0x1410>)
 800602e:	edd3 7a00 	vldr	s15, [r3]
 8006032:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8006036:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 800603a:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 800603e:	4b9e      	ldr	r3, [pc, #632]	; (80062b8 <calWallConrol+0x1410>)
 8006040:	edd3 7a00 	vldr	s15, [r3]
 8006044:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006048:	4b9b      	ldr	r3, [pc, #620]	; (80062b8 <calWallConrol+0x1410>)
 800604a:	edd3 7a00 	vldr	s15, [r3]
 800604e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8006052:	4b99      	ldr	r3, [pc, #612]	; (80062b8 <calWallConrol+0x1410>)
 8006054:	edd3 7a00 	vldr	s15, [r3]
 8006058:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 800605c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006060:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8006064:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8006068:	edd7 6a07 	vldr	s13, [r7, #28]
 800606c:	4b93      	ldr	r3, [pc, #588]	; (80062bc <calWallConrol+0x1414>)
 800606e:	edd3 7a00 	vldr	s15, [r3]
 8006072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006076:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 800607a:	edd7 6a08 	vldr	s13, [r7, #32]
 800607e:	4b8f      	ldr	r3, [pc, #572]	; (80062bc <calWallConrol+0x1414>)
 8006080:	edd3 7a00 	vldr	s15, [r3]
 8006084:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006088:	4b8c      	ldr	r3, [pc, #560]	; (80062bc <calWallConrol+0x1414>)
 800608a:	edd3 7a00 	vldr	s15, [r3]
 800608e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8006092:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8006096:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800609a:	4b88      	ldr	r3, [pc, #544]	; (80062bc <calWallConrol+0x1414>)
 800609c:	edd3 7a00 	vldr	s15, [r3]
 80060a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80060a4:	4b85      	ldr	r3, [pc, #532]	; (80062bc <calWallConrol+0x1414>)
 80060a6:	edd3 7a00 	vldr	s15, [r3]
 80060aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80060ae:	4b83      	ldr	r3, [pc, #524]	; (80062bc <calWallConrol+0x1414>)
 80060b0:	edd3 7a00 	vldr	s15, [r3]
 80060b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 80060b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060bc:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 80060c0:	230b      	movs	r3, #11
 80060c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c4:	e018      	b.n	80060f8 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 80060c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c8:	3b01      	subs	r3, #1
 80060ca:	4a7d      	ldr	r2, [pc, #500]	; (80062c0 <calWallConrol+0x1418>)
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	497b      	ldr	r1, [pc, #492]	; (80062c0 <calWallConrol+0x1418>)
 80060d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	440b      	add	r3, r1
 80060da:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	3b01      	subs	r3, #1
 80060e0:	4a78      	ldr	r2, [pc, #480]	; (80062c4 <calWallConrol+0x141c>)
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	4976      	ldr	r1, [pc, #472]	; (80062c4 <calWallConrol+0x141c>)
 80060ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	440b      	add	r3, r1
 80060f0:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80060f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f4:	3b01      	subs	r3, #1
 80060f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	dce3      	bgt.n	80060c6 <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 80060fe:	4a70      	ldr	r2, [pc, #448]	; (80062c0 <calWallConrol+0x1418>)
 8006100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006102:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8006104:	4a6f      	ldr	r2, [pc, #444]	; (80062c4 <calWallConrol+0x141c>)
 8006106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006108:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 800610a:	4b6d      	ldr	r3, [pc, #436]	; (80062c0 <calWallConrol+0x1418>)
 800610c:	ed93 7a00 	vldr	s14, [r3]
 8006110:	4b6b      	ldr	r3, [pc, #428]	; (80062c0 <calWallConrol+0x1418>)
 8006112:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006116:	ee77 7a67 	vsub.f32	s15, s14, s15
 800611a:	4b6b      	ldr	r3, [pc, #428]	; (80062c8 <calWallConrol+0x1420>)
 800611c:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8006120:	4b68      	ldr	r3, [pc, #416]	; (80062c4 <calWallConrol+0x141c>)
 8006122:	ed93 7a00 	vldr	s14, [r3]
 8006126:	4b67      	ldr	r3, [pc, #412]	; (80062c4 <calWallConrol+0x141c>)
 8006128:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800612c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006130:	4b66      	ldr	r3, [pc, #408]	; (80062cc <calWallConrol+0x1424>)
 8006132:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8006136:	4b5f      	ldr	r3, [pc, #380]	; (80062b4 <calWallConrol+0x140c>)
 8006138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800613c:	2bdc      	cmp	r3, #220	; 0xdc
 800613e:	dd1a      	ble.n	8006176 <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8006140:	4b63      	ldr	r3, [pc, #396]	; (80062d0 <calWallConrol+0x1428>)
 8006142:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800614c:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <calWallConrol+0x1420>)
 800614e:	edd3 7a00 	vldr	s15, [r3]
 8006152:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8006156:	eef0 7ae7 	vabs.f32	s15, s15
 800615a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80062d4 <calWallConrol+0x142c>
 800615e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006166:	d506      	bpl.n	8006176 <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006168:	4b51      	ldr	r3, [pc, #324]	; (80062b0 <calWallConrol+0x1408>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	f043 0302 	orr.w	r3, r3, #2
 8006170:	b2da      	uxtb	r2, r3
 8006172:	4b4f      	ldr	r3, [pc, #316]	; (80062b0 <calWallConrol+0x1408>)
 8006174:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8006176:	4b4f      	ldr	r3, [pc, #316]	; (80062b4 <calWallConrol+0x140c>)
 8006178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617a:	2bdc      	cmp	r3, #220	; 0xdc
 800617c:	dd1a      	ble.n	80061b4 <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 800617e:	4b54      	ldr	r3, [pc, #336]	; (80062d0 <calWallConrol+0x1428>)
 8006180:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006182:	ee07 3a90 	vmov	s15, r3
 8006186:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800618a:	4b50      	ldr	r3, [pc, #320]	; (80062cc <calWallConrol+0x1424>)
 800618c:	edd3 7a00 	vldr	s15, [r3]
 8006190:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8006194:	eef0 7ae7 	vabs.f32	s15, s15
 8006198:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80062d4 <calWallConrol+0x142c>
 800619c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a4:	d506      	bpl.n	80061b4 <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 80061a6:	4b42      	ldr	r3, [pc, #264]	; (80062b0 <calWallConrol+0x1408>)
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	f043 0301 	orr.w	r3, r3, #1
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	4b3f      	ldr	r3, [pc, #252]	; (80062b0 <calWallConrol+0x1408>)
 80061b2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 80061b4:	4b3f      	ldr	r3, [pc, #252]	; (80062b4 <calWallConrol+0x140c>)
 80061b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061ba:	2bdb      	cmp	r3, #219	; 0xdb
 80061bc:	dd13      	ble.n	80061e6 <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80061be:	4b44      	ldr	r3, [pc, #272]	; (80062d0 <calWallConrol+0x1428>)
 80061c0:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80061c2:	ee07 3a90 	vmov	s15, r3
 80061c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ca:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <calWallConrol+0x1420>)
 80061cc:	edd3 7a00 	vldr	s15, [r3]
 80061d0:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 80061d4:	eef0 7ae7 	vabs.f32	s15, s15
 80061d8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80062d4 <calWallConrol+0x142c>
 80061dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e4:	dd06      	ble.n	80061f4 <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 80061e6:	4b32      	ldr	r3, [pc, #200]	; (80062b0 <calWallConrol+0x1408>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	f023 0302 	bic.w	r3, r3, #2
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	4b2f      	ldr	r3, [pc, #188]	; (80062b0 <calWallConrol+0x1408>)
 80061f2:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 80061f4:	4b2f      	ldr	r3, [pc, #188]	; (80062b4 <calWallConrol+0x140c>)
 80061f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f8:	2bdb      	cmp	r3, #219	; 0xdb
 80061fa:	dd13      	ble.n	8006224 <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80061fc:	4b34      	ldr	r3, [pc, #208]	; (80062d0 <calWallConrol+0x1428>)
 80061fe:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006200:	ee07 3a90 	vmov	s15, r3
 8006204:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006208:	4b30      	ldr	r3, [pc, #192]	; (80062cc <calWallConrol+0x1424>)
 800620a:	edd3 7a00 	vldr	s15, [r3]
 800620e:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006212:	eef0 7ae7 	vabs.f32	s15, s15
 8006216:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80062d4 <calWallConrol+0x142c>
 800621a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006222:	dd06      	ble.n	8006232 <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006224:	4b22      	ldr	r3, [pc, #136]	; (80062b0 <calWallConrol+0x1408>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f023 0301 	bic.w	r3, r3, #1
 800622c:	b2da      	uxtb	r2, r3
 800622e:	4b20      	ldr	r3, [pc, #128]	; (80062b0 <calWallConrol+0x1408>)
 8006230:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8006232:	4b1f      	ldr	r3, [pc, #124]	; (80062b0 <calWallConrol+0x1408>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b03      	cmp	r3, #3
 8006238:	f200 8155 	bhi.w	80064e6 <calWallConrol+0x163e>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <calWallConrol+0x139c>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006255 	.word	0x08006255
 8006248:	080062e9 	.word	0x080062e9
 800624c:	08006389 	.word	0x08006389
 8006250:	08006427 	.word	0x08006427
		case 0:			//両壁なし
			PID_wall += 0;
 8006254:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006258:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80062d8 <calWallConrol+0x1430>
 800625c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006260:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8006264:	2000      	movs	r0, #0
 8006266:	f000 ffc3 	bl	80071f0 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 800626a:	2000      	movs	r0, #0
 800626c:	f000 ffd2 	bl	8007214 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006270:	4b10      	ldr	r3, [pc, #64]	; (80062b4 <calWallConrol+0x140c>)
 8006272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800627e:	4b17      	ldr	r3, [pc, #92]	; (80062dc <calWallConrol+0x1434>)
 8006280:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <calWallConrol+0x140c>)
 8006286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <calWallConrol+0x1438>)
 8006292:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <calWallConrol+0x143c>)
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <calWallConrol+0x143c>)
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 80062a6:	4b0f      	ldr	r3, [pc, #60]	; (80062e4 <calWallConrol+0x143c>)
 80062a8:	f04f 0200 	mov.w	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
			break;
 80062ae:	e11a      	b.n	80064e6 <calWallConrol+0x163e>
 80062b0:	20000598 	.word	0x20000598
 80062b4:	200002bc 	.word	0x200002bc
 80062b8:	200005e0 	.word	0x200005e0
 80062bc:	200005e4 	.word	0x200005e4
 80062c0:	2000066c 	.word	0x2000066c
 80062c4:	2000069c 	.word	0x2000069c
 80062c8:	200006d4 	.word	0x200006d4
 80062cc:	200006d8 	.word	0x200006d8
 80062d0:	2000044c 	.word	0x2000044c
 80062d4:	42a00000 	.word	0x42a00000
 80062d8:	00000000 	.word	0x00000000
 80062dc:	200005a8 	.word	0x200005a8
 80062e0:	200005ac 	.word	0x200005ac
 80062e4:	20000588 	.word	0x20000588
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 80062e8:	2000      	movs	r0, #0
 80062ea:	f000 ff81 	bl	80071f0 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 80062ee:	2001      	movs	r0, #1
 80062f0:	f000 ff90 	bl	8007214 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80062f4:	4b87      	ldr	r3, [pc, #540]	; (8006514 <calWallConrol+0x166c>)
 80062f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006302:	4b85      	ldr	r3, [pc, #532]	; (8006518 <calWallConrol+0x1670>)
 8006304:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006308:	4a84      	ldr	r2, [pc, #528]	; (800651c <calWallConrol+0x1674>)
 800630a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800630c:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 800630e:	4b81      	ldr	r3, [pc, #516]	; (8006514 <calWallConrol+0x166c>)
 8006310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800631a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800631e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006322:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8006326:	4b7b      	ldr	r3, [pc, #492]	; (8006514 <calWallConrol+0x166c>)
 8006328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632a:	ee07 3a90 	vmov	s15, r3
 800632e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006332:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8006336:	4b7a      	ldr	r3, [pc, #488]	; (8006520 <calWallConrol+0x1678>)
 8006338:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 800633c:	4b78      	ldr	r3, [pc, #480]	; (8006520 <calWallConrol+0x1678>)
 800633e:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006342:	4b77      	ldr	r3, [pc, #476]	; (8006520 <calWallConrol+0x1678>)
 8006344:	edd3 7a01 	vldr	s15, [r3, #4]
 8006348:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 800634c:	4b74      	ldr	r3, [pc, #464]	; (8006520 <calWallConrol+0x1678>)
 800634e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006352:	4b73      	ldr	r3, [pc, #460]	; (8006520 <calWallConrol+0x1678>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a72      	ldr	r2, [pc, #456]	; (8006520 <calWallConrol+0x1678>)
 8006358:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800635a:	4b71      	ldr	r3, [pc, #452]	; (8006520 <calWallConrol+0x1678>)
 800635c:	ed93 7a00 	vldr	s14, [r3]
 8006360:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006364:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006368:	4b6d      	ldr	r3, [pc, #436]	; (8006520 <calWallConrol+0x1678>)
 800636a:	edd3 6a02 	vldr	s13, [r3, #8]
 800636e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006376:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800637a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800637e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006382:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006386:	e0ae      	b.n	80064e6 <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006388:	2001      	movs	r0, #1
 800638a:	f000 ff31 	bl	80071f0 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 800638e:	2000      	movs	r0, #0
 8006390:	f000 ff40 	bl	8007214 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006394:	4a60      	ldr	r2, [pc, #384]	; (8006518 <calWallConrol+0x1670>)
 8006396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006398:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 800639a:	4b5e      	ldr	r3, [pc, #376]	; (8006514 <calWallConrol+0x166c>)
 800639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063a6:	4b5d      	ldr	r3, [pc, #372]	; (800651c <calWallConrol+0x1674>)
 80063a8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80063ac:	4b59      	ldr	r3, [pc, #356]	; (8006514 <calWallConrol+0x166c>)
 80063ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80063be:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80063c2:	4b54      	ldr	r3, [pc, #336]	; (8006514 <calWallConrol+0x166c>)
 80063c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063c8:	ee07 3a90 	vmov	s15, r3
 80063cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80063d4:	4b52      	ldr	r3, [pc, #328]	; (8006520 <calWallConrol+0x1678>)
 80063d6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80063da:	4b51      	ldr	r3, [pc, #324]	; (8006520 <calWallConrol+0x1678>)
 80063dc:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80063e0:	4b4f      	ldr	r3, [pc, #316]	; (8006520 <calWallConrol+0x1678>)
 80063e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80063e6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80063ea:	4b4d      	ldr	r3, [pc, #308]	; (8006520 <calWallConrol+0x1678>)
 80063ec:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80063f0:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <calWallConrol+0x1678>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a4a      	ldr	r2, [pc, #296]	; (8006520 <calWallConrol+0x1678>)
 80063f6:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063f8:	4b49      	ldr	r3, [pc, #292]	; (8006520 <calWallConrol+0x1678>)
 80063fa:	ed93 7a00 	vldr	s14, [r3]
 80063fe:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006402:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006406:	4b46      	ldr	r3, [pc, #280]	; (8006520 <calWallConrol+0x1678>)
 8006408:	edd3 6a02 	vldr	s13, [r3, #8]
 800640c:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006414:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006418:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800641c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006420:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006424:	e05f      	b.n	80064e6 <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8006426:	2001      	movs	r0, #1
 8006428:	f000 fee2 	bl	80071f0 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 800642c:	2001      	movs	r0, #1
 800642e:	f000 fef1 	bl	8007214 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006432:	4a39      	ldr	r2, [pc, #228]	; (8006518 <calWallConrol+0x1670>)
 8006434:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006436:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006438:	4a38      	ldr	r2, [pc, #224]	; (800651c <calWallConrol+0x1674>)
 800643a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800643c:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800643e:	4b35      	ldr	r3, [pc, #212]	; (8006514 <calWallConrol+0x166c>)
 8006440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800644a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800644e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006452:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006456:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <calWallConrol+0x166c>)
 8006458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006466:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <calWallConrol+0x166c>)
 8006468:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800646c:	ee07 3a90 	vmov	s15, r3
 8006470:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006474:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006478:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800647c:	4b25      	ldr	r3, [pc, #148]	; (8006514 <calWallConrol+0x166c>)
 800647e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800648a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800648e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006492:	4b23      	ldr	r3, [pc, #140]	; (8006520 <calWallConrol+0x1678>)
 8006494:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <calWallConrol+0x1678>)
 800649a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800649e:	4b20      	ldr	r3, [pc, #128]	; (8006520 <calWallConrol+0x1678>)
 80064a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80064a4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80064a8:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <calWallConrol+0x1678>)
 80064aa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80064ae:	4b1c      	ldr	r3, [pc, #112]	; (8006520 <calWallConrol+0x1678>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <calWallConrol+0x1678>)
 80064b4:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80064b6:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <calWallConrol+0x1678>)
 80064b8:	ed93 7a00 	vldr	s14, [r3]
 80064bc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80064c0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80064c4:	4b16      	ldr	r3, [pc, #88]	; (8006520 <calWallConrol+0x1678>)
 80064c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80064ca:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80064ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80064d2:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80064d6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80064da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064de:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80064e2:	e000      	b.n	80064e6 <calWallConrol+0x163e>
			break;
 80064e4:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 80064e6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80064ea:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006524 <calWallConrol+0x167c>
 80064ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80064f2:	4b0d      	ldr	r3, [pc, #52]	; (8006528 <calWallConrol+0x1680>)
 80064f4:	edd3 7a00 	vldr	s15, [r3]
 80064f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064fc:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006502:	ee07 3a90 	vmov	s15, r3
}
 8006506:	eeb0 0a67 	vmov.f32	s0, s15
 800650a:	37a8      	adds	r7, #168	; 0xa8
 800650c:	46bd      	mov	sp, r7
 800650e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006512:	bf00      	nop
 8006514:	200002bc 	.word	0x200002bc
 8006518:	200005a8 	.word	0x200005a8
 800651c:	200005ac 	.word	0x200005ac
 8006520:	20000588 	.word	0x20000588
 8006524:	44d1e000 	.word	0x44d1e000
 8006528:	200004d8 	.word	0x200004d8
 800652c:	00000000 	.word	0x00000000

08006530 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006530:	b5b0      	push	{r4, r5, r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006536:	4ba2      	ldr	r3, [pc, #648]	; (80067c0 <interrupt_WallCut+0x290>)
 8006538:	edd3 7a00 	vldr	s15, [r3]
 800653c:	eef0 7ae7 	vabs.f32	s15, s15
 8006540:	ee17 0a90 	vmov	r0, s15
 8006544:	f7fa f828 	bl	8000598 <__aeabi_f2d>
 8006548:	4602      	mov	r2, r0
 800654a:	460b      	mov	r3, r1
 800654c:	a198      	add	r1, pc, #608	; (adr r1, 80067b0 <interrupt_WallCut+0x280>)
 800654e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006552:	f7fa f9a3 	bl	800089c <__aeabi_ddiv>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	ec43 2b17 	vmov	d7, r2, r3
 800655e:	eeb0 0a47 	vmov.f32	s0, s14
 8006562:	eef0 0a67 	vmov.f32	s1, s15
 8006566:	f01c fabf 	bl	8022ae8 <ceil>
 800656a:	ec53 2b10 	vmov	r2, r3, d0
 800656e:	4610      	mov	r0, r2
 8006570:	4619      	mov	r1, r3
 8006572:	f7fa fb19 	bl	8000ba8 <__aeabi_d2iz>
 8006576:	4603      	mov	r3, r0
 8006578:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b0a      	cmp	r3, #10
 800657e:	dd01      	ble.n	8006584 <interrupt_WallCut+0x54>
 8006580:	230b      	movs	r3, #11
 8006582:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	2b04      	cmp	r3, #4
 8006588:	dc01      	bgt.n	800658e <interrupt_WallCut+0x5e>
 800658a:	2304      	movs	r3, #4
 800658c:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 800658e:	2300      	movs	r3, #0
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	e019      	b.n	80065c8 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 8006594:	498b      	ldr	r1, [pc, #556]	; (80067c4 <interrupt_WallCut+0x294>)
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	440b      	add	r3, r1
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	4887      	ldr	r0, [pc, #540]	; (80067c4 <interrupt_WallCut+0x294>)
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4613      	mov	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	4413      	add	r3, r2
 80065b4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80065b8:	1aca      	subs	r2, r1, r3
 80065ba:	4983      	ldr	r1, [pc, #524]	; (80067c8 <interrupt_WallCut+0x298>)
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3301      	adds	r3, #1
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	dde2      	ble.n	8006594 <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 80065ce:	4b7f      	ldr	r3, [pc, #508]	; (80067cc <interrupt_WallCut+0x29c>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	f040 8555 	bne.w	8007082 <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 80065d8:	4b7a      	ldr	r3, [pc, #488]	; (80067c4 <interrupt_WallCut+0x294>)
 80065da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065e2:	dd03      	ble.n	80065ec <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 80065e4:	4b7a      	ldr	r3, [pc, #488]	; (80067d0 <interrupt_WallCut+0x2a0>)
 80065e6:	2201      	movs	r2, #1
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	e002      	b.n	80065f2 <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 80065ec:	4b78      	ldr	r3, [pc, #480]	; (80067d0 <interrupt_WallCut+0x2a0>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 80065f2:	4b74      	ldr	r3, [pc, #464]	; (80067c4 <interrupt_WallCut+0x294>)
 80065f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80065f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80065fc:	dd03      	ble.n	8006606 <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 80065fe:	4b75      	ldr	r3, [pc, #468]	; (80067d4 <interrupt_WallCut+0x2a4>)
 8006600:	2201      	movs	r2, #1
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	e002      	b.n	800660c <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 8006606:	4b73      	ldr	r3, [pc, #460]	; (80067d4 <interrupt_WallCut+0x2a4>)
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 800660c:	4b6d      	ldr	r3, [pc, #436]	; (80067c4 <interrupt_WallCut+0x294>)
 800660e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006612:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006616:	dd03      	ble.n	8006620 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 8006618:	4b6f      	ldr	r3, [pc, #444]	; (80067d8 <interrupt_WallCut+0x2a8>)
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e002      	b.n	8006626 <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 8006620:	4b6d      	ldr	r3, [pc, #436]	; (80067d8 <interrupt_WallCut+0x2a8>)
 8006622:	2200      	movs	r2, #0
 8006624:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006626:	4b67      	ldr	r3, [pc, #412]	; (80067c4 <interrupt_WallCut+0x294>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800662e:	da30      	bge.n	8006692 <interrupt_WallCut+0x162>
			NoWallCountL90++;
 8006630:	4b6a      	ldr	r3, [pc, #424]	; (80067dc <interrupt_WallCut+0x2ac>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	4a69      	ldr	r2, [pc, #420]	; (80067dc <interrupt_WallCut+0x2ac>)
 8006638:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800663a:	4b69      	ldr	r3, [pc, #420]	; (80067e0 <interrupt_WallCut+0x2b0>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7f9 ffaa 	bl	8000598 <__aeabi_f2d>
 8006644:	4604      	mov	r4, r0
 8006646:	460d      	mov	r5, r1
 8006648:	4b66      	ldr	r3, [pc, #408]	; (80067e4 <interrupt_WallCut+0x2b4>)
 800664a:	ed93 7a00 	vldr	s14, [r3]
 800664e:	4b66      	ldr	r3, [pc, #408]	; (80067e8 <interrupt_WallCut+0x2b8>)
 8006650:	edd3 7a00 	vldr	s15, [r3]
 8006654:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006658:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800665c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006660:	ee16 0a90 	vmov	r0, s13
 8006664:	f7f9 ff98 	bl	8000598 <__aeabi_f2d>
 8006668:	a353      	add	r3, pc, #332	; (adr r3, 80067b8 <interrupt_WallCut+0x288>)
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f7f9 ffeb 	bl	8000648 <__aeabi_dmul>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4620      	mov	r0, r4
 8006678:	4629      	mov	r1, r5
 800667a:	f7f9 fe2f 	bl	80002dc <__adddf3>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	f7fa fab7 	bl	8000bf8 <__aeabi_d2f>
 800668a:	4603      	mov	r3, r0
 800668c:	4a54      	ldr	r2, [pc, #336]	; (80067e0 <interrupt_WallCut+0x2b0>)
 800668e:	6013      	str	r3, [r2, #0]
 8006690:	e006      	b.n	80066a0 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006692:	4b52      	ldr	r3, [pc, #328]	; (80067dc <interrupt_WallCut+0x2ac>)
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006698:	4b51      	ldr	r3, [pc, #324]	; (80067e0 <interrupt_WallCut+0x2b0>)
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80066a0:	4b48      	ldr	r3, [pc, #288]	; (80067c4 <interrupt_WallCut+0x294>)
 80066a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80066a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80066aa:	da30      	bge.n	800670e <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 80066ac:	4b4f      	ldr	r3, [pc, #316]	; (80067ec <interrupt_WallCut+0x2bc>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3301      	adds	r3, #1
 80066b2:	4a4e      	ldr	r2, [pc, #312]	; (80067ec <interrupt_WallCut+0x2bc>)
 80066b4:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80066b6:	4b4e      	ldr	r3, [pc, #312]	; (80067f0 <interrupt_WallCut+0x2c0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7f9 ff6c 	bl	8000598 <__aeabi_f2d>
 80066c0:	4604      	mov	r4, r0
 80066c2:	460d      	mov	r5, r1
 80066c4:	4b47      	ldr	r3, [pc, #284]	; (80067e4 <interrupt_WallCut+0x2b4>)
 80066c6:	ed93 7a00 	vldr	s14, [r3]
 80066ca:	4b47      	ldr	r3, [pc, #284]	; (80067e8 <interrupt_WallCut+0x2b8>)
 80066cc:	edd3 7a00 	vldr	s15, [r3]
 80066d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066dc:	ee16 0a90 	vmov	r0, s13
 80066e0:	f7f9 ff5a 	bl	8000598 <__aeabi_f2d>
 80066e4:	a334      	add	r3, pc, #208	; (adr r3, 80067b8 <interrupt_WallCut+0x288>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f7f9 ffad 	bl	8000648 <__aeabi_dmul>
 80066ee:	4602      	mov	r2, r0
 80066f0:	460b      	mov	r3, r1
 80066f2:	4620      	mov	r0, r4
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7f9 fdf1 	bl	80002dc <__adddf3>
 80066fa:	4602      	mov	r2, r0
 80066fc:	460b      	mov	r3, r1
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	f7fa fa79 	bl	8000bf8 <__aeabi_d2f>
 8006706:	4603      	mov	r3, r0
 8006708:	4a39      	ldr	r2, [pc, #228]	; (80067f0 <interrupt_WallCut+0x2c0>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	e006      	b.n	800671c <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 800670e:	4b37      	ldr	r3, [pc, #220]	; (80067ec <interrupt_WallCut+0x2bc>)
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006714:	4b36      	ldr	r3, [pc, #216]	; (80067f0 <interrupt_WallCut+0x2c0>)
 8006716:	f04f 0200 	mov.w	r2, #0
 800671a:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800671c:	4b2a      	ldr	r3, [pc, #168]	; (80067c8 <interrupt_WallCut+0x298>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006724:	da03      	bge.n	800672e <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006726:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <interrupt_WallCut+0x294>)
 8006728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672a:	2bc8      	cmp	r3, #200	; 0xc8
 800672c:	dd37      	ble.n	800679e <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 800672e:	4b31      	ldr	r3, [pc, #196]	; (80067f4 <interrupt_WallCut+0x2c4>)
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006736:	4b30      	ldr	r3, [pc, #192]	; (80067f8 <interrupt_WallCut+0x2c8>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	4a2e      	ldr	r2, [pc, #184]	; (80067f8 <interrupt_WallCut+0x2c8>)
 800673e:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006740:	4b2e      	ldr	r3, [pc, #184]	; (80067fc <interrupt_WallCut+0x2cc>)
 8006742:	2200      	movs	r2, #0
 8006744:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <interrupt_WallCut+0x2d0>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f7f9 ff24 	bl	8000598 <__aeabi_f2d>
 8006750:	4604      	mov	r4, r0
 8006752:	460d      	mov	r5, r1
 8006754:	4b23      	ldr	r3, [pc, #140]	; (80067e4 <interrupt_WallCut+0x2b4>)
 8006756:	ed93 7a00 	vldr	s14, [r3]
 800675a:	4b23      	ldr	r3, [pc, #140]	; (80067e8 <interrupt_WallCut+0x2b8>)
 800675c:	edd3 7a00 	vldr	s15, [r3]
 8006760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006764:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006768:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800676c:	ee16 0a90 	vmov	r0, s13
 8006770:	f7f9 ff12 	bl	8000598 <__aeabi_f2d>
 8006774:	a310      	add	r3, pc, #64	; (adr r3, 80067b8 <interrupt_WallCut+0x288>)
 8006776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677a:	f7f9 ff65 	bl	8000648 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4620      	mov	r0, r4
 8006784:	4629      	mov	r1, r5
 8006786:	f7f9 fda9 	bl	80002dc <__adddf3>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4610      	mov	r0, r2
 8006790:	4619      	mov	r1, r3
 8006792:	f7fa fa31 	bl	8000bf8 <__aeabi_d2f>
 8006796:	4603      	mov	r3, r0
 8006798:	4a19      	ldr	r2, [pc, #100]	; (8006800 <interrupt_WallCut+0x2d0>)
 800679a:	6013      	str	r3, [r2, #0]
 800679c:	e09f      	b.n	80068de <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 800679e:	4b17      	ldr	r3, [pc, #92]	; (80067fc <interrupt_WallCut+0x2cc>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d16b      	bne.n	800687e <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	e04b      	b.n	8006844 <interrupt_WallCut+0x314>
 80067ac:	f3af 8000 	nop.w
 80067b0:	00000000 	.word	0x00000000
 80067b4:	40ab5800 	.word	0x40ab5800
 80067b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80067bc:	3f50624d 	.word	0x3f50624d
 80067c0:	200004dc 	.word	0x200004dc
 80067c4:	200002bc 	.word	0x200002bc
 80067c8:	20000460 	.word	0x20000460
 80067cc:	20000596 	.word	0x20000596
 80067d0:	200005f6 	.word	0x200005f6
 80067d4:	200005f7 	.word	0x200005f7
 80067d8:	200005f8 	.word	0x200005f8
 80067dc:	200005bc 	.word	0x200005bc
 80067e0:	200005d4 	.word	0x200005d4
 80067e4:	20000258 	.word	0x20000258
 80067e8:	2000025c 	.word	0x2000025c
 80067ec:	200005b8 	.word	0x200005b8
 80067f0:	200005d0 	.word	0x200005d0
 80067f4:	200005fc 	.word	0x200005fc
 80067f8:	200005c4 	.word	0x200005c4
 80067fc:	200005f0 	.word	0x200005f0
 8006800:	200005dc 	.word	0x200005dc
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006804:	4a7c      	ldr	r2, [pc, #496]	; (80069f8 <interrupt_WallCut+0x4c8>)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3314      	adds	r3, #20
 800680a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006816:	4b79      	ldr	r3, [pc, #484]	; (80069fc <interrupt_WallCut+0x4cc>)
 8006818:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 800681c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006824:	dd0b      	ble.n	800683e <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006826:	4a74      	ldr	r2, [pc, #464]	; (80069f8 <interrupt_WallCut+0x4c8>)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3314      	adds	r3, #20
 800682c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006830:	ee07 3a90 	vmov	s15, r3
 8006834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006838:	4b70      	ldr	r3, [pc, #448]	; (80069fc <interrupt_WallCut+0x4cc>)
 800683a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b13      	cmp	r3, #19
 8006848:	dddc      	ble.n	8006804 <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 800684a:	4b6d      	ldr	r3, [pc, #436]	; (8006a00 <interrupt_WallCut+0x4d0>)
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006850:	4b6c      	ldr	r3, [pc, #432]	; (8006a04 <interrupt_WallCut+0x4d4>)
 8006852:	2201      	movs	r2, #1
 8006854:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 8006856:	4b69      	ldr	r3, [pc, #420]	; (80069fc <interrupt_WallCut+0x4cc>)
 8006858:	edd3 7a00 	vldr	s15, [r3]
 800685c:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006a08 <interrupt_WallCut+0x4d8>
 8006860:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006864:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8006a0c <interrupt_WallCut+0x4dc>
 8006868:	ee67 6a87 	vmul.f32	s13, s15, s14
 800686c:	4b63      	ldr	r3, [pc, #396]	; (80069fc <interrupt_WallCut+0x4cc>)
 800686e:	ed93 7a00 	vldr	s14, [r3]
 8006872:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 8006876:	4b66      	ldr	r3, [pc, #408]	; (8006a10 <interrupt_WallCut+0x4e0>)
 8006878:	edc3 7a00 	vstr	s15, [r3]
 800687c:	e02f      	b.n	80068de <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 800687e:	4b60      	ldr	r3, [pc, #384]	; (8006a00 <interrupt_WallCut+0x4d0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a5e      	ldr	r2, [pc, #376]	; (8006a00 <interrupt_WallCut+0x4d0>)
 8006886:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006888:	4b61      	ldr	r3, [pc, #388]	; (8006a10 <interrupt_WallCut+0x4e0>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7f9 fe83 	bl	8000598 <__aeabi_f2d>
 8006892:	4604      	mov	r4, r0
 8006894:	460d      	mov	r5, r1
 8006896:	4b5f      	ldr	r3, [pc, #380]	; (8006a14 <interrupt_WallCut+0x4e4>)
 8006898:	ed93 7a00 	vldr	s14, [r3]
 800689c:	4b5e      	ldr	r3, [pc, #376]	; (8006a18 <interrupt_WallCut+0x4e8>)
 800689e:	edd3 7a00 	vldr	s15, [r3]
 80068a2:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80068a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068ae:	ee16 0a90 	vmov	r0, s13
 80068b2:	f7f9 fe71 	bl	8000598 <__aeabi_f2d>
 80068b6:	a34e      	add	r3, pc, #312	; (adr r3, 80069f0 <interrupt_WallCut+0x4c0>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	f7f9 fec4 	bl	8000648 <__aeabi_dmul>
 80068c0:	4602      	mov	r2, r0
 80068c2:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80068c4:	4620      	mov	r0, r4
 80068c6:	4629      	mov	r1, r5
 80068c8:	f7f9 fd08 	bl	80002dc <__adddf3>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7fa f990 	bl	8000bf8 <__aeabi_d2f>
 80068d8:	4603      	mov	r3, r0
 80068da:	4a4d      	ldr	r2, [pc, #308]	; (8006a10 <interrupt_WallCut+0x4e0>)
 80068dc:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068de:	4b4f      	ldr	r3, [pc, #316]	; (8006a1c <interrupt_WallCut+0x4ec>)
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f113 0f45 	cmn.w	r3, #69	; 0x45
 80068e6:	da05      	bge.n	80068f4 <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 80068e8:	4b43      	ldr	r3, [pc, #268]	; (80069f8 <interrupt_WallCut+0x4c8>)
 80068ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ee:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80068f2:	dd37      	ble.n	8006964 <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 80068f4:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <interrupt_WallCut+0x4f0>)
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 80068fc:	4b49      	ldr	r3, [pc, #292]	; (8006a24 <interrupt_WallCut+0x4f4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	4a48      	ldr	r2, [pc, #288]	; (8006a24 <interrupt_WallCut+0x4f4>)
 8006904:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 8006906:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <interrupt_WallCut+0x4f8>)
 8006908:	2200      	movs	r2, #0
 800690a:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800690c:	4b47      	ldr	r3, [pc, #284]	; (8006a2c <interrupt_WallCut+0x4fc>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4618      	mov	r0, r3
 8006912:	f7f9 fe41 	bl	8000598 <__aeabi_f2d>
 8006916:	4604      	mov	r4, r0
 8006918:	460d      	mov	r5, r1
 800691a:	4b3e      	ldr	r3, [pc, #248]	; (8006a14 <interrupt_WallCut+0x4e4>)
 800691c:	ed93 7a00 	vldr	s14, [r3]
 8006920:	4b3d      	ldr	r3, [pc, #244]	; (8006a18 <interrupt_WallCut+0x4e8>)
 8006922:	edd3 7a00 	vldr	s15, [r3]
 8006926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800692a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800692e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006932:	ee16 0a90 	vmov	r0, s13
 8006936:	f7f9 fe2f 	bl	8000598 <__aeabi_f2d>
 800693a:	a32d      	add	r3, pc, #180	; (adr r3, 80069f0 <interrupt_WallCut+0x4c0>)
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f7f9 fe82 	bl	8000648 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4620      	mov	r0, r4
 800694a:	4629      	mov	r1, r5
 800694c:	f7f9 fcc6 	bl	80002dc <__adddf3>
 8006950:	4602      	mov	r2, r0
 8006952:	460b      	mov	r3, r1
 8006954:	4610      	mov	r0, r2
 8006956:	4619      	mov	r1, r3
 8006958:	f7fa f94e 	bl	8000bf8 <__aeabi_d2f>
 800695c:	4603      	mov	r3, r0
 800695e:	4a33      	ldr	r2, [pc, #204]	; (8006a2c <interrupt_WallCut+0x4fc>)
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	e097      	b.n	8006a94 <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 8006964:	4b30      	ldr	r3, [pc, #192]	; (8006a28 <interrupt_WallCut+0x4f8>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d163      	bne.n	8006a34 <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 800696c:	2300      	movs	r3, #0
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	e01f      	b.n	80069b2 <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006972:	4a21      	ldr	r2, [pc, #132]	; (80069f8 <interrupt_WallCut+0x4c8>)
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	333c      	adds	r3, #60	; 0x3c
 8006978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800697c:	ee07 3a90 	vmov	s15, r3
 8006980:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006984:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <interrupt_WallCut+0x4f0>)
 8006986:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 800698a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800698e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006992:	dd0b      	ble.n	80069ac <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006994:	4a18      	ldr	r2, [pc, #96]	; (80069f8 <interrupt_WallCut+0x4c8>)
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	333c      	adds	r3, #60	; 0x3c
 800699a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800699e:	ee07 3a90 	vmov	s15, r3
 80069a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80069a6:	4b1e      	ldr	r3, [pc, #120]	; (8006a20 <interrupt_WallCut+0x4f0>)
 80069a8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	3301      	adds	r3, #1
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	2b13      	cmp	r3, #19
 80069b6:	dddc      	ble.n	8006972 <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 80069b8:	4b1a      	ldr	r3, [pc, #104]	; (8006a24 <interrupt_WallCut+0x4f4>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 80069be:	4b1a      	ldr	r3, [pc, #104]	; (8006a28 <interrupt_WallCut+0x4f8>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 80069c4:	4b16      	ldr	r3, [pc, #88]	; (8006a20 <interrupt_WallCut+0x4f0>)
 80069c6:	edd3 7a00 	vldr	s15, [r3]
 80069ca:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006a30 <interrupt_WallCut+0x500>
 80069ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8006a0c <interrupt_WallCut+0x4dc>
 80069d6:	ee67 6a87 	vmul.f32	s13, s15, s14
 80069da:	4b11      	ldr	r3, [pc, #68]	; (8006a20 <interrupt_WallCut+0x4f0>)
 80069dc:	ed93 7a00 	vldr	s14, [r3]
 80069e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 80069e4:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <interrupt_WallCut+0x4fc>)
 80069e6:	edc3 7a00 	vstr	s15, [r3]
 80069ea:	e053      	b.n	8006a94 <interrupt_WallCut+0x564>
 80069ec:	f3af 8000 	nop.w
 80069f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80069f4:	3f50624d 	.word	0x3f50624d
 80069f8:	200002bc 	.word	0x200002bc
 80069fc:	200005fc 	.word	0x200005fc
 8006a00:	200005c4 	.word	0x200005c4
 8006a04:	200005f0 	.word	0x200005f0
 8006a08:	43f68000 	.word	0x43f68000
 8006a0c:	00000000 	.word	0x00000000
 8006a10:	200005dc 	.word	0x200005dc
 8006a14:	20000258 	.word	0x20000258
 8006a18:	2000025c 	.word	0x2000025c
 8006a1c:	20000460 	.word	0x20000460
 8006a20:	20000600 	.word	0x20000600
 8006a24:	200005c0 	.word	0x200005c0
 8006a28:	200005f1 	.word	0x200005f1
 8006a2c:	200005d8 	.word	0x200005d8
 8006a30:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 8006a34:	4b94      	ldr	r3, [pc, #592]	; (8006c88 <interrupt_WallCut+0x758>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3301      	adds	r3, #1
 8006a3a:	4a93      	ldr	r2, [pc, #588]	; (8006c88 <interrupt_WallCut+0x758>)
 8006a3c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006a3e:	4b93      	ldr	r3, [pc, #588]	; (8006c8c <interrupt_WallCut+0x75c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7f9 fda8 	bl	8000598 <__aeabi_f2d>
 8006a48:	4604      	mov	r4, r0
 8006a4a:	460d      	mov	r5, r1
 8006a4c:	4b90      	ldr	r3, [pc, #576]	; (8006c90 <interrupt_WallCut+0x760>)
 8006a4e:	ed93 7a00 	vldr	s14, [r3]
 8006a52:	4b90      	ldr	r3, [pc, #576]	; (8006c94 <interrupt_WallCut+0x764>)
 8006a54:	edd3 7a00 	vldr	s15, [r3]
 8006a58:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8006a5c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a60:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a64:	ee16 0a90 	vmov	r0, s13
 8006a68:	f7f9 fd96 	bl	8000598 <__aeabi_f2d>
 8006a6c:	a384      	add	r3, pc, #528	; (adr r3, 8006c80 <interrupt_WallCut+0x750>)
 8006a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a72:	f7f9 fde9 	bl	8000648 <__aeabi_dmul>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 8006a7a:	4620      	mov	r0, r4
 8006a7c:	4629      	mov	r1, r5
 8006a7e:	f7f9 fc2d 	bl	80002dc <__adddf3>
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4610      	mov	r0, r2
 8006a88:	4619      	mov	r1, r3
 8006a8a:	f7fa f8b5 	bl	8000bf8 <__aeabi_d2f>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4a7e      	ldr	r2, [pc, #504]	; (8006c8c <interrupt_WallCut+0x75c>)
 8006a92:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006a94:	4b80      	ldr	r3, [pc, #512]	; (8006c98 <interrupt_WallCut+0x768>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006a9c:	db5f      	blt.n	8006b5e <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 8006a9e:	4b7f      	ldr	r3, [pc, #508]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006aa0:	f04f 0200 	mov.w	r2, #0
 8006aa4:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006aa6:	4b7e      	ldr	r3, [pc, #504]	; (8006ca0 <interrupt_WallCut+0x770>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	4a7c      	ldr	r2, [pc, #496]	; (8006ca0 <interrupt_WallCut+0x770>)
 8006aae:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f000 fccf 	bl	8007454 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006ab6:	4b7b      	ldr	r3, [pc, #492]	; (8006ca4 <interrupt_WallCut+0x774>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006abc:	4b7a      	ldr	r3, [pc, #488]	; (8006ca8 <interrupt_WallCut+0x778>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7f9 fd69 	bl	8000598 <__aeabi_f2d>
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	460d      	mov	r5, r1
 8006aca:	4b71      	ldr	r3, [pc, #452]	; (8006c90 <interrupt_WallCut+0x760>)
 8006acc:	ed93 7a00 	vldr	s14, [r3]
 8006ad0:	4b70      	ldr	r3, [pc, #448]	; (8006c94 <interrupt_WallCut+0x764>)
 8006ad2:	edd3 7a00 	vldr	s15, [r3]
 8006ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006ada:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006ade:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006ae2:	ee16 0a90 	vmov	r0, s13
 8006ae6:	f7f9 fd57 	bl	8000598 <__aeabi_f2d>
 8006aea:	a365      	add	r3, pc, #404	; (adr r3, 8006c80 <interrupt_WallCut+0x750>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	f7f9 fdaa 	bl	8000648 <__aeabi_dmul>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006af8:	4620      	mov	r0, r4
 8006afa:	4629      	mov	r1, r5
 8006afc:	f7f9 fbee 	bl	80002dc <__adddf3>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	4610      	mov	r0, r2
 8006b06:	4619      	mov	r1, r3
 8006b08:	f7fa f876 	bl	8000bf8 <__aeabi_d2f>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	4a66      	ldr	r2, [pc, #408]	; (8006ca8 <interrupt_WallCut+0x778>)
 8006b10:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006b12:	4b66      	ldr	r3, [pc, #408]	; (8006cac <interrupt_WallCut+0x77c>)
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	f040 812b 	bne.w	8006d72 <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006b1c:	4b64      	ldr	r3, [pc, #400]	; (8006cb0 <interrupt_WallCut+0x780>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7f9 fd39 	bl	8000598 <__aeabi_f2d>
 8006b26:	4604      	mov	r4, r0
 8006b28:	460d      	mov	r5, r1
 8006b2a:	4b62      	ldr	r3, [pc, #392]	; (8006cb4 <interrupt_WallCut+0x784>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f7f9 fd32 	bl	8000598 <__aeabi_f2d>
 8006b34:	a352      	add	r3, pc, #328	; (adr r3, 8006c80 <interrupt_WallCut+0x750>)
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f7f9 fd85 	bl	8000648 <__aeabi_dmul>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	460b      	mov	r3, r1
 8006b42:	4620      	mov	r0, r4
 8006b44:	4629      	mov	r1, r5
 8006b46:	f7f9 fbc9 	bl	80002dc <__adddf3>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4610      	mov	r0, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	f7fa f851 	bl	8000bf8 <__aeabi_d2f>
 8006b56:	4603      	mov	r3, r0
 8006b58:	4a55      	ldr	r2, [pc, #340]	; (8006cb0 <interrupt_WallCut+0x780>)
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	e109      	b.n	8006d72 <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 8006b5e:	4b51      	ldr	r3, [pc, #324]	; (8006ca4 <interrupt_WallCut+0x774>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f040 80ae 	bne.w	8006cc4 <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 8006b68:	2300      	movs	r3, #0
 8006b6a:	607b      	str	r3, [r7, #4]
 8006b6c:	e01f      	b.n	8006bae <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006b6e:	4a52      	ldr	r2, [pc, #328]	; (8006cb8 <interrupt_WallCut+0x788>)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	3314      	adds	r3, #20
 8006b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b78:	ee07 3a90 	vmov	s15, r3
 8006b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b80:	4b46      	ldr	r3, [pc, #280]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006b82:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8006b86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b8e:	dd0b      	ble.n	8006ba8 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006b90:	4a49      	ldr	r2, [pc, #292]	; (8006cb8 <interrupt_WallCut+0x788>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3314      	adds	r3, #20
 8006b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8006ba2:	4b3e      	ldr	r3, [pc, #248]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006ba4:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	3301      	adds	r3, #1
 8006bac:	607b      	str	r3, [r7, #4]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b13      	cmp	r3, #19
 8006bb2:	dddc      	ble.n	8006b6e <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 8006bb4:	4b3a      	ldr	r3, [pc, #232]	; (8006ca0 <interrupt_WallCut+0x770>)
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006bba:	4b3a      	ldr	r3, [pc, #232]	; (8006ca4 <interrupt_WallCut+0x774>)
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006bc0:	2001      	movs	r0, #1
 8006bc2:	f000 fc47 	bl	8007454 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006bc6:	4b35      	ldr	r3, [pc, #212]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006bc8:	edd3 7a00 	vldr	s15, [r3]
 8006bcc:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006cbc <interrupt_WallCut+0x78c>
 8006bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bdc:	db26      	blt.n	8006c2c <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006bde:	4b2f      	ldr	r3, [pc, #188]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006be0:	edd3 7a00 	vldr	s15, [r3]
 8006be4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006cbc <interrupt_WallCut+0x78c>
 8006be8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bec:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006cc0 <interrupt_WallCut+0x790>
 8006bf0:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006bf4:	4b29      	ldr	r3, [pc, #164]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006bf6:	ed93 7a00 	vldr	s14, [r3]
 8006bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006bfe:	4b2c      	ldr	r3, [pc, #176]	; (8006cb0 <interrupt_WallCut+0x780>)
 8006c00:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006c06:	edd3 7a00 	vldr	s15, [r3]
 8006c0a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006cbc <interrupt_WallCut+0x78c>
 8006c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c12:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006cc0 <interrupt_WallCut+0x790>
 8006c16:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c1a:	4b20      	ldr	r3, [pc, #128]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006c1c:	ed93 7a00 	vldr	s14, [r3]
 8006c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006c24:	4b20      	ldr	r3, [pc, #128]	; (8006ca8 <interrupt_WallCut+0x778>)
 8006c26:	edc3 7a00 	vstr	s15, [r3]
 8006c2a:	e09f      	b.n	8006d6c <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006c2e:	edd3 7a00 	vldr	s15, [r3]
 8006c32:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006cbc <interrupt_WallCut+0x78c>
 8006c36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c3a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006cc0 <interrupt_WallCut+0x790>
 8006c3e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c42:	4b16      	ldr	r3, [pc, #88]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006c44:	ed93 7a00 	vldr	s14, [r3]
 8006c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006c4c:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <interrupt_WallCut+0x780>)
 8006c4e:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006c52:	4b12      	ldr	r3, [pc, #72]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006c54:	edd3 7a00 	vldr	s15, [r3]
 8006c58:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006cbc <interrupt_WallCut+0x78c>
 8006c5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c60:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006cc0 <interrupt_WallCut+0x790>
 8006c64:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006c68:	4b0c      	ldr	r3, [pc, #48]	; (8006c9c <interrupt_WallCut+0x76c>)
 8006c6a:	ed93 7a00 	vldr	s14, [r3]
 8006c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8006c72:	4b0d      	ldr	r3, [pc, #52]	; (8006ca8 <interrupt_WallCut+0x778>)
 8006c74:	edc3 7a00 	vstr	s15, [r3]
 8006c78:	e078      	b.n	8006d6c <interrupt_WallCut+0x83c>
 8006c7a:	bf00      	nop
 8006c7c:	f3af 8000 	nop.w
 8006c80:	d2f1a9fc 	.word	0xd2f1a9fc
 8006c84:	3f50624d 	.word	0x3f50624d
 8006c88:	200005c0 	.word	0x200005c0
 8006c8c:	200005d8 	.word	0x200005d8
 8006c90:	20000258 	.word	0x20000258
 8006c94:	2000025c 	.word	0x2000025c
 8006c98:	20000460 	.word	0x20000460
 8006c9c:	20000604 	.word	0x20000604
 8006ca0:	200005cc 	.word	0x200005cc
 8006ca4:	200005f2 	.word	0x200005f2
 8006ca8:	200005ec 	.word	0x200005ec
 8006cac:	200005f4 	.word	0x200005f4
 8006cb0:	200005e4 	.word	0x200005e4
 8006cb4:	200004dc 	.word	0x200004dc
 8006cb8:	200002bc 	.word	0x200002bc
 8006cbc:	455ac000 	.word	0x455ac000
 8006cc0:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8006cc4:	4bac      	ldr	r3, [pc, #688]	; (8006f78 <interrupt_WallCut+0xa48>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4aab      	ldr	r2, [pc, #684]	; (8006f78 <interrupt_WallCut+0xa48>)
 8006ccc:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006cce:	4bab      	ldr	r3, [pc, #684]	; (8006f7c <interrupt_WallCut+0xa4c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7f9 fc60 	bl	8000598 <__aeabi_f2d>
 8006cd8:	4604      	mov	r4, r0
 8006cda:	460d      	mov	r5, r1
 8006cdc:	4ba8      	ldr	r3, [pc, #672]	; (8006f80 <interrupt_WallCut+0xa50>)
 8006cde:	ed93 7a00 	vldr	s14, [r3]
 8006ce2:	4ba8      	ldr	r3, [pc, #672]	; (8006f84 <interrupt_WallCut+0xa54>)
 8006ce4:	edd3 7a00 	vldr	s15, [r3]
 8006ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006cec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006cf0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006cf4:	ee16 0a90 	vmov	r0, s13
 8006cf8:	f7f9 fc4e 	bl	8000598 <__aeabi_f2d>
 8006cfc:	a39c      	add	r3, pc, #624	; (adr r3, 8006f70 <interrupt_WallCut+0xa40>)
 8006cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d02:	f7f9 fca1 	bl	8000648 <__aeabi_dmul>
 8006d06:	4602      	mov	r2, r0
 8006d08:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006d0a:	4620      	mov	r0, r4
 8006d0c:	4629      	mov	r1, r5
 8006d0e:	f7f9 fae5 	bl	80002dc <__adddf3>
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4610      	mov	r0, r2
 8006d18:	4619      	mov	r1, r3
 8006d1a:	f7f9 ff6d 	bl	8000bf8 <__aeabi_d2f>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4a96      	ldr	r2, [pc, #600]	; (8006f7c <interrupt_WallCut+0xa4c>)
 8006d22:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006d24:	4b98      	ldr	r3, [pc, #608]	; (8006f88 <interrupt_WallCut+0xa58>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d11f      	bne.n	8006d6c <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006d2c:	4b97      	ldr	r3, [pc, #604]	; (8006f8c <interrupt_WallCut+0xa5c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7f9 fc31 	bl	8000598 <__aeabi_f2d>
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4b95      	ldr	r3, [pc, #596]	; (8006f90 <interrupt_WallCut+0xa60>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7f9 fc2a 	bl	8000598 <__aeabi_f2d>
 8006d44:	a38a      	add	r3, pc, #552	; (adr r3, 8006f70 <interrupt_WallCut+0xa40>)
 8006d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d4a:	f7f9 fc7d 	bl	8000648 <__aeabi_dmul>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	460b      	mov	r3, r1
 8006d52:	4620      	mov	r0, r4
 8006d54:	4629      	mov	r1, r5
 8006d56:	f7f9 fac1 	bl	80002dc <__adddf3>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	4610      	mov	r0, r2
 8006d60:	4619      	mov	r1, r3
 8006d62:	f7f9 ff49 	bl	8000bf8 <__aeabi_d2f>
 8006d66:	4603      	mov	r3, r0
 8006d68:	4a88      	ldr	r2, [pc, #544]	; (8006f8c <interrupt_WallCut+0xa5c>)
 8006d6a:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006d6c:	4b86      	ldr	r3, [pc, #536]	; (8006f88 <interrupt_WallCut+0xa58>)
 8006d6e:	2201      	movs	r2, #1
 8006d70:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006d72:	4b88      	ldr	r3, [pc, #544]	; (8006f94 <interrupt_WallCut+0xa64>)
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006d7a:	db6a      	blt.n	8006e52 <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006d7c:	4b86      	ldr	r3, [pc, #536]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006d84:	4b85      	ldr	r3, [pc, #532]	; (8006f9c <interrupt_WallCut+0xa6c>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3301      	adds	r3, #1
 8006d8a:	4a84      	ldr	r2, [pc, #528]	; (8006f9c <interrupt_WallCut+0xa6c>)
 8006d8c:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f000 fb4e 	bl	8007430 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006d94:	4b82      	ldr	r3, [pc, #520]	; (8006fa0 <interrupt_WallCut+0xa70>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006d9a:	4b82      	ldr	r3, [pc, #520]	; (8006fa4 <interrupt_WallCut+0xa74>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7f9 fbfa 	bl	8000598 <__aeabi_f2d>
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	4b75      	ldr	r3, [pc, #468]	; (8006f80 <interrupt_WallCut+0xa50>)
 8006daa:	ed93 7a00 	vldr	s14, [r3]
 8006dae:	4b75      	ldr	r3, [pc, #468]	; (8006f84 <interrupt_WallCut+0xa54>)
 8006db0:	edd3 7a00 	vldr	s15, [r3]
 8006db4:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006db8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006dbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006dc0:	ee16 0a90 	vmov	r0, s13
 8006dc4:	f7f9 fbe8 	bl	8000598 <__aeabi_f2d>
 8006dc8:	a369      	add	r3, pc, #420	; (adr r3, 8006f70 <interrupt_WallCut+0xa40>)
 8006dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dce:	f7f9 fc3b 	bl	8000648 <__aeabi_dmul>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	4629      	mov	r1, r5
 8006dda:	f7f9 fa7f 	bl	80002dc <__adddf3>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4610      	mov	r0, r2
 8006de4:	4619      	mov	r1, r3
 8006de6:	f7f9 ff07 	bl	8000bf8 <__aeabi_d2f>
 8006dea:	4603      	mov	r3, r0
 8006dec:	4a6d      	ldr	r2, [pc, #436]	; (8006fa4 <interrupt_WallCut+0xa74>)
 8006dee:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006df0:	4b6d      	ldr	r3, [pc, #436]	; (8006fa8 <interrupt_WallCut+0xa78>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	f040 81a4 	bne.w	8007142 <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006dfa:	4b6c      	ldr	r3, [pc, #432]	; (8006fac <interrupt_WallCut+0xa7c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f7f9 fbca 	bl	8000598 <__aeabi_f2d>
 8006e04:	4604      	mov	r4, r0
 8006e06:	460d      	mov	r5, r1
 8006e08:	4b5d      	ldr	r3, [pc, #372]	; (8006f80 <interrupt_WallCut+0xa50>)
 8006e0a:	ed93 7a00 	vldr	s14, [r3]
 8006e0e:	4b5d      	ldr	r3, [pc, #372]	; (8006f84 <interrupt_WallCut+0xa54>)
 8006e10:	edd3 7a00 	vldr	s15, [r3]
 8006e14:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006e18:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006e1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e20:	ee16 0a90 	vmov	r0, s13
 8006e24:	f7f9 fbb8 	bl	8000598 <__aeabi_f2d>
 8006e28:	a351      	add	r3, pc, #324	; (adr r3, 8006f70 <interrupt_WallCut+0xa40>)
 8006e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2e:	f7f9 fc0b 	bl	8000648 <__aeabi_dmul>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006e36:	4620      	mov	r0, r4
 8006e38:	4629      	mov	r1, r5
 8006e3a:	f7f9 fa4f 	bl	80002dc <__adddf3>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4610      	mov	r0, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	f7f9 fed7 	bl	8000bf8 <__aeabi_d2f>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4a57      	ldr	r2, [pc, #348]	; (8006fac <interrupt_WallCut+0xa7c>)
 8006e4e:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006e50:	e177      	b.n	8007142 <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 8006e52:	4b53      	ldr	r3, [pc, #332]	; (8006fa0 <interrupt_WallCut+0xa70>)
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f040 80b0 	bne.w	8006fbc <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	603b      	str	r3, [r7, #0]
 8006e60:	e01f      	b.n	8006ea2 <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006e62:	4a53      	ldr	r2, [pc, #332]	; (8006fb0 <interrupt_WallCut+0xa80>)
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	333c      	adds	r3, #60	; 0x3c
 8006e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e74:	4b48      	ldr	r3, [pc, #288]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006e76:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006e7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e82:	dd0b      	ble.n	8006e9c <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006e84:	4a4a      	ldr	r2, [pc, #296]	; (8006fb0 <interrupt_WallCut+0xa80>)
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	333c      	adds	r3, #60	; 0x3c
 8006e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006e96:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006e98:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	603b      	str	r3, [r7, #0]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b13      	cmp	r3, #19
 8006ea6:	dddc      	ble.n	8006e62 <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 8006ea8:	4b3c      	ldr	r3, [pc, #240]	; (8006f9c <interrupt_WallCut+0xa6c>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006eae:	4b3c      	ldr	r3, [pc, #240]	; (8006fa0 <interrupt_WallCut+0xa70>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	f000 fabb 	bl	8007430 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006eba:	4b37      	ldr	r3, [pc, #220]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006ebc:	edd3 7a00 	vldr	s15, [r3]
 8006ec0:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006fb4 <interrupt_WallCut+0xa84>
 8006ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ec8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	db26      	blt.n	8006f20 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006ed2:	4b31      	ldr	r3, [pc, #196]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006ed4:	edd3 7a00 	vldr	s15, [r3]
 8006ed8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006fb4 <interrupt_WallCut+0xa84>
 8006edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ee0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006fb8 <interrupt_WallCut+0xa88>
 8006ee4:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006ee8:	4b2b      	ldr	r3, [pc, #172]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006eea:	ed93 7a00 	vldr	s14, [r3]
 8006eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006ef2:	4b2e      	ldr	r3, [pc, #184]	; (8006fac <interrupt_WallCut+0xa7c>)
 8006ef4:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006ef8:	4b27      	ldr	r3, [pc, #156]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006efa:	edd3 7a00 	vldr	s15, [r3]
 8006efe:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006fb4 <interrupt_WallCut+0xa84>
 8006f02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f06:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006fb8 <interrupt_WallCut+0xa88>
 8006f0a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006f0e:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006f10:	ed93 7a00 	vldr	s14, [r3]
 8006f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006f18:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <interrupt_WallCut+0xa74>)
 8006f1a:	edc3 7a00 	vstr	s15, [r3]
 8006f1e:	e0ac      	b.n	800707a <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006f20:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006f22:	edd3 7a00 	vldr	s15, [r3]
 8006f26:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006fb4 <interrupt_WallCut+0xa84>
 8006f2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f2e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006fb8 <interrupt_WallCut+0xa88>
 8006f32:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006f36:	4b18      	ldr	r3, [pc, #96]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006f38:	ed93 7a00 	vldr	s14, [r3]
 8006f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006f40:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <interrupt_WallCut+0xa7c>)
 8006f42:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006f48:	edd3 7a00 	vldr	s15, [r3]
 8006f4c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006fb4 <interrupt_WallCut+0xa84>
 8006f50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f54:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006fb8 <interrupt_WallCut+0xa88>
 8006f58:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <interrupt_WallCut+0xa68>)
 8006f5e:	ed93 7a00 	vldr	s14, [r3]
 8006f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006f66:	4b0f      	ldr	r3, [pc, #60]	; (8006fa4 <interrupt_WallCut+0xa74>)
 8006f68:	edc3 7a00 	vstr	s15, [r3]
 8006f6c:	e085      	b.n	800707a <interrupt_WallCut+0xb4a>
 8006f6e:	bf00      	nop
 8006f70:	d2f1a9fc 	.word	0xd2f1a9fc
 8006f74:	3f50624d 	.word	0x3f50624d
 8006f78:	200005cc 	.word	0x200005cc
 8006f7c:	200005ec 	.word	0x200005ec
 8006f80:	20000258 	.word	0x20000258
 8006f84:	2000025c 	.word	0x2000025c
 8006f88:	200005f4 	.word	0x200005f4
 8006f8c:	200005e4 	.word	0x200005e4
 8006f90:	200004dc 	.word	0x200004dc
 8006f94:	20000460 	.word	0x20000460
 8006f98:	20000608 	.word	0x20000608
 8006f9c:	200005c8 	.word	0x200005c8
 8006fa0:	200005f3 	.word	0x200005f3
 8006fa4:	200005e8 	.word	0x200005e8
 8006fa8:	200005f5 	.word	0x200005f5
 8006fac:	200005e0 	.word	0x200005e0
 8006fb0:	200002bc 	.word	0x200002bc
 8006fb4:	455ac000 	.word	0x455ac000
 8006fb8:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006fbc:	4b66      	ldr	r3, [pc, #408]	; (8007158 <interrupt_WallCut+0xc28>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a65      	ldr	r2, [pc, #404]	; (8007158 <interrupt_WallCut+0xc28>)
 8006fc4:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006fc6:	4b65      	ldr	r3, [pc, #404]	; (800715c <interrupt_WallCut+0xc2c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7f9 fae4 	bl	8000598 <__aeabi_f2d>
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	4b62      	ldr	r3, [pc, #392]	; (8007160 <interrupt_WallCut+0xc30>)
 8006fd6:	ed93 7a00 	vldr	s14, [r3]
 8006fda:	4b62      	ldr	r3, [pc, #392]	; (8007164 <interrupt_WallCut+0xc34>)
 8006fdc:	edd3 7a00 	vldr	s15, [r3]
 8006fe0:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006fe4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006fe8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fec:	ee16 0a90 	vmov	r0, s13
 8006ff0:	f7f9 fad2 	bl	8000598 <__aeabi_f2d>
 8006ff4:	a356      	add	r3, pc, #344	; (adr r3, 8007150 <interrupt_WallCut+0xc20>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	f7f9 fb25 	bl	8000648 <__aeabi_dmul>
 8006ffe:	4602      	mov	r2, r0
 8007000:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8007002:	4620      	mov	r0, r4
 8007004:	4629      	mov	r1, r5
 8007006:	f7f9 f969 	bl	80002dc <__adddf3>
 800700a:	4602      	mov	r2, r0
 800700c:	460b      	mov	r3, r1
 800700e:	4610      	mov	r0, r2
 8007010:	4619      	mov	r1, r3
 8007012:	f7f9 fdf1 	bl	8000bf8 <__aeabi_d2f>
 8007016:	4603      	mov	r3, r0
 8007018:	4a50      	ldr	r2, [pc, #320]	; (800715c <interrupt_WallCut+0xc2c>)
 800701a:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 800701c:	4b52      	ldr	r3, [pc, #328]	; (8007168 <interrupt_WallCut+0xc38>)
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d12a      	bne.n	800707a <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007024:	4b51      	ldr	r3, [pc, #324]	; (800716c <interrupt_WallCut+0xc3c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f7f9 fab5 	bl	8000598 <__aeabi_f2d>
 800702e:	4604      	mov	r4, r0
 8007030:	460d      	mov	r5, r1
 8007032:	4b4b      	ldr	r3, [pc, #300]	; (8007160 <interrupt_WallCut+0xc30>)
 8007034:	ed93 7a00 	vldr	s14, [r3]
 8007038:	4b4a      	ldr	r3, [pc, #296]	; (8007164 <interrupt_WallCut+0xc34>)
 800703a:	edd3 7a00 	vldr	s15, [r3]
 800703e:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8007042:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007046:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800704a:	ee16 0a90 	vmov	r0, s13
 800704e:	f7f9 faa3 	bl	8000598 <__aeabi_f2d>
 8007052:	a33f      	add	r3, pc, #252	; (adr r3, 8007150 <interrupt_WallCut+0xc20>)
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	f7f9 faf6 	bl	8000648 <__aeabi_dmul>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007060:	4620      	mov	r0, r4
 8007062:	4629      	mov	r1, r5
 8007064:	f7f9 f93a 	bl	80002dc <__adddf3>
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	4610      	mov	r0, r2
 800706e:	4619      	mov	r1, r3
 8007070:	f7f9 fdc2 	bl	8000bf8 <__aeabi_d2f>
 8007074:	4603      	mov	r3, r0
 8007076:	4a3d      	ldr	r2, [pc, #244]	; (800716c <interrupt_WallCut+0xc3c>)
 8007078:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 800707a:	4b3b      	ldr	r3, [pc, #236]	; (8007168 <interrupt_WallCut+0xc38>)
 800707c:	2201      	movs	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]
}
 8007080:	e05f      	b.n	8007142 <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 8007082:	4b3b      	ldr	r3, [pc, #236]	; (8007170 <interrupt_WallCut+0xc40>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8007088:	4b3a      	ldr	r3, [pc, #232]	; (8007174 <interrupt_WallCut+0xc44>)
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 800708e:	4b3a      	ldr	r3, [pc, #232]	; (8007178 <interrupt_WallCut+0xc48>)
 8007090:	2200      	movs	r2, #0
 8007092:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8007094:	4b39      	ldr	r3, [pc, #228]	; (800717c <interrupt_WallCut+0xc4c>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 800709a:	4b39      	ldr	r3, [pc, #228]	; (8007180 <interrupt_WallCut+0xc50>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 80070a0:	4b2d      	ldr	r3, [pc, #180]	; (8007158 <interrupt_WallCut+0xc28>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 80070a6:	4b37      	ldr	r3, [pc, #220]	; (8007184 <interrupt_WallCut+0xc54>)
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 80070ae:	4b36      	ldr	r3, [pc, #216]	; (8007188 <interrupt_WallCut+0xc58>)
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80070b6:	4b35      	ldr	r3, [pc, #212]	; (800718c <interrupt_WallCut+0xc5c>)
 80070b8:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80070bc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80070be:	4b34      	ldr	r3, [pc, #208]	; (8007190 <interrupt_WallCut+0xc60>)
 80070c0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80070c4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 80070c6:	4b33      	ldr	r3, [pc, #204]	; (8007194 <interrupt_WallCut+0xc64>)
 80070c8:	f04f 0200 	mov.w	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 80070ce:	4b27      	ldr	r3, [pc, #156]	; (800716c <interrupt_WallCut+0xc3c>)
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 80070d6:	4b30      	ldr	r3, [pc, #192]	; (8007198 <interrupt_WallCut+0xc68>)
 80070d8:	f04f 0200 	mov.w	r2, #0
 80070dc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 80070de:	4b1f      	ldr	r3, [pc, #124]	; (800715c <interrupt_WallCut+0xc2c>)
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 80070e6:	4b2d      	ldr	r3, [pc, #180]	; (800719c <interrupt_WallCut+0xc6c>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 80070ec:	4b2c      	ldr	r3, [pc, #176]	; (80071a0 <interrupt_WallCut+0xc70>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 80070f2:	4b2c      	ldr	r3, [pc, #176]	; (80071a4 <interrupt_WallCut+0xc74>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 80070f8:	4b2b      	ldr	r3, [pc, #172]	; (80071a8 <interrupt_WallCut+0xc78>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 80070fe:	4b2b      	ldr	r3, [pc, #172]	; (80071ac <interrupt_WallCut+0xc7c>)
 8007100:	2200      	movs	r2, #0
 8007102:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8007104:	4b18      	ldr	r3, [pc, #96]	; (8007168 <interrupt_WallCut+0xc38>)
 8007106:	2200      	movs	r2, #0
 8007108:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 800710a:	4b29      	ldr	r3, [pc, #164]	; (80071b0 <interrupt_WallCut+0xc80>)
 800710c:	2200      	movs	r2, #0
 800710e:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8007110:	4b28      	ldr	r3, [pc, #160]	; (80071b4 <interrupt_WallCut+0xc84>)
 8007112:	2200      	movs	r2, #0
 8007114:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8007116:	4b28      	ldr	r3, [pc, #160]	; (80071b8 <interrupt_WallCut+0xc88>)
 8007118:	2200      	movs	r2, #0
 800711a:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 800711c:	4b26      	ldr	r3, [pc, #152]	; (80071b8 <interrupt_WallCut+0xc88>)
 800711e:	2200      	movs	r2, #0
 8007120:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <interrupt_WallCut+0xc8c>)
 8007124:	f04f 0200 	mov.w	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 800712a:	4b25      	ldr	r3, [pc, #148]	; (80071c0 <interrupt_WallCut+0xc90>)
 800712c:	f04f 0200 	mov.w	r2, #0
 8007130:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <interrupt_WallCut+0xc94>)
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 800713a:	4b23      	ldr	r3, [pc, #140]	; (80071c8 <interrupt_WallCut+0xc98>)
 800713c:	f04f 0200 	mov.w	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
}
 8007142:	bf00      	nop
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bdb0      	pop	{r4, r5, r7, pc}
 800714a:	bf00      	nop
 800714c:	f3af 8000 	nop.w
 8007150:	d2f1a9fc 	.word	0xd2f1a9fc
 8007154:	3f50624d 	.word	0x3f50624d
 8007158:	200005c8 	.word	0x200005c8
 800715c:	200005e8 	.word	0x200005e8
 8007160:	20000258 	.word	0x20000258
 8007164:	2000025c 	.word	0x2000025c
 8007168:	200005f5 	.word	0x200005f5
 800716c:	200005e0 	.word	0x200005e0
 8007170:	200005bc 	.word	0x200005bc
 8007174:	200005b8 	.word	0x200005b8
 8007178:	200005c4 	.word	0x200005c4
 800717c:	200005c0 	.word	0x200005c0
 8007180:	200005cc 	.word	0x200005cc
 8007184:	200005d4 	.word	0x200005d4
 8007188:	200005d0 	.word	0x200005d0
 800718c:	200005dc 	.word	0x200005dc
 8007190:	200005d8 	.word	0x200005d8
 8007194:	200005e4 	.word	0x200005e4
 8007198:	200005ec 	.word	0x200005ec
 800719c:	200005f0 	.word	0x200005f0
 80071a0:	200005f1 	.word	0x200005f1
 80071a4:	200005f2 	.word	0x200005f2
 80071a8:	200005f3 	.word	0x200005f3
 80071ac:	200005f4 	.word	0x200005f4
 80071b0:	200005f6 	.word	0x200005f6
 80071b4:	200005f7 	.word	0x200005f7
 80071b8:	200005f8 	.word	0x200005f8
 80071bc:	200005fc 	.word	0x200005fc
 80071c0:	20000600 	.word	0x20000600
 80071c4:	20000604 	.word	0x20000604
 80071c8:	20000608 	.word	0x20000608

080071cc <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071e2:	f014 fd61 	bl	801bca8 <HAL_GPIO_WritePin>
}
 80071e6:	bf00      	nop
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
	...

080071f0 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	2140      	movs	r1, #64	; 0x40
 8007200:	4803      	ldr	r0, [pc, #12]	; (8007210 <pl_yellow_LED_3+0x20>)
 8007202:	f014 fd51 	bl	801bca8 <HAL_GPIO_WritePin>
}
 8007206:	bf00      	nop
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	48000800 	.word	0x48000800

08007214 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007226:	4803      	ldr	r0, [pc, #12]	; (8007234 <pl_yellow_LED_6+0x20>)
 8007228:	f014 fd3e 	bl	801bca8 <HAL_GPIO_WritePin>
}
 800722c:	bf00      	nop
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	48000400 	.word	0x48000400

08007238 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	b2db      	uxtb	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800724a:	4803      	ldr	r0, [pc, #12]	; (8007258 <pl_yellow_LED_8+0x20>)
 800724c:	f014 fd2c 	bl	801bca8 <HAL_GPIO_WritePin>
}
 8007250:	bf00      	nop
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	48000400 	.word	0x48000400

0800725c <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007260:	2200      	movs	r2, #0
 8007262:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007266:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800726a:	f014 fd1d 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 800726e:	2200      	movs	r2, #0
 8007270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007278:	f014 fd16 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 800727c:	2200      	movs	r2, #0
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	4811      	ldr	r0, [pc, #68]	; (80072c8 <pl_yellow_LED_off+0x6c>)
 8007282:	f014 fd11 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007286:	2200      	movs	r2, #0
 8007288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800728c:	480f      	ldr	r0, [pc, #60]	; (80072cc <pl_yellow_LED_off+0x70>)
 800728e:	f014 fd0b 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007292:	2200      	movs	r2, #0
 8007294:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007298:	480c      	ldr	r0, [pc, #48]	; (80072cc <pl_yellow_LED_off+0x70>)
 800729a:	f014 fd05 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800729e:	2200      	movs	r2, #0
 80072a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072a4:	4809      	ldr	r0, [pc, #36]	; (80072cc <pl_yellow_LED_off+0x70>)
 80072a6:	f014 fcff 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 80072aa:	2200      	movs	r2, #0
 80072ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80072b0:	4806      	ldr	r0, [pc, #24]	; (80072cc <pl_yellow_LED_off+0x70>)
 80072b2:	f014 fcf9 	bl	801bca8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 80072b6:	2200      	movs	r2, #0
 80072b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80072bc:	4803      	ldr	r0, [pc, #12]	; (80072cc <pl_yellow_LED_off+0x70>)
 80072be:	f014 fcf3 	bl	801bca8 <HAL_GPIO_WritePin>
}
 80072c2:	bf00      	nop
 80072c4:	bd80      	pop	{r7, pc}
 80072c6:	bf00      	nop
 80072c8:	48000800 	.word	0x48000800
 80072cc:	48000400 	.word	0x48000400

080072d0 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	4603      	mov	r3, r0
 80072d8:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 80072da:	79fb      	ldrb	r3, [r7, #7]
 80072dc:	f003 0301 	and.w	r3, r3, #1
 80072e0:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 80072e2:	79fb      	ldrb	r3, [r7, #7]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 80072ea:	79fb      	ldrb	r3, [r7, #7]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f003 0308 	and.w	r3, r3, #8
 80072f8:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	f003 0310 	and.w	r3, r3, #16
 8007300:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007310:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8007312:	79fb      	ldrb	r3, [r7, #7]
 8007314:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007318:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d007      	beq.n	8007330 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007320:	2201      	movs	r2, #1
 8007322:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800732a:	f014 fcbd 	bl	801bca8 <HAL_GPIO_WritePin>
 800732e:	e006      	b.n	800733e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007330:	2200      	movs	r2, #0
 8007332:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007336:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800733a:	f014 fcb5 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 800733e:	7bbb      	ldrb	r3, [r7, #14]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d007      	beq.n	8007354 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8007344:	2201      	movs	r2, #1
 8007346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800734a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800734e:	f014 fcab 	bl	801bca8 <HAL_GPIO_WritePin>
 8007352:	e006      	b.n	8007362 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007354:	2200      	movs	r2, #0
 8007356:	f44f 7180 	mov.w	r1, #256	; 0x100
 800735a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800735e:	f014 fca3 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8007362:	7b7b      	ldrb	r3, [r7, #13]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007368:	2201      	movs	r2, #1
 800736a:	2140      	movs	r1, #64	; 0x40
 800736c:	482e      	ldr	r0, [pc, #184]	; (8007428 <pl_yellow_LED_count+0x158>)
 800736e:	f014 fc9b 	bl	801bca8 <HAL_GPIO_WritePin>
 8007372:	e004      	b.n	800737e <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007374:	2200      	movs	r2, #0
 8007376:	2140      	movs	r1, #64	; 0x40
 8007378:	482b      	ldr	r0, [pc, #172]	; (8007428 <pl_yellow_LED_count+0x158>)
 800737a:	f014 fc95 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 800737e:	7b3b      	ldrb	r3, [r7, #12]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d006      	beq.n	8007392 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007384:	2201      	movs	r2, #1
 8007386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800738a:	4828      	ldr	r0, [pc, #160]	; (800742c <pl_yellow_LED_count+0x15c>)
 800738c:	f014 fc8c 	bl	801bca8 <HAL_GPIO_WritePin>
 8007390:	e005      	b.n	800739e <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007392:	2200      	movs	r2, #0
 8007394:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007398:	4824      	ldr	r0, [pc, #144]	; (800742c <pl_yellow_LED_count+0x15c>)
 800739a:	f014 fc85 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 800739e:	7afb      	ldrb	r3, [r7, #11]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d006      	beq.n	80073b2 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80073a4:	2201      	movs	r2, #1
 80073a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073aa:	4820      	ldr	r0, [pc, #128]	; (800742c <pl_yellow_LED_count+0x15c>)
 80073ac:	f014 fc7c 	bl	801bca8 <HAL_GPIO_WritePin>
 80073b0:	e005      	b.n	80073be <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 80073b2:	2200      	movs	r2, #0
 80073b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073b8:	481c      	ldr	r0, [pc, #112]	; (800742c <pl_yellow_LED_count+0x15c>)
 80073ba:	f014 fc75 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 80073be:	7abb      	ldrb	r3, [r7, #10]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d006      	beq.n	80073d2 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 80073c4:	2201      	movs	r2, #1
 80073c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073ca:	4818      	ldr	r0, [pc, #96]	; (800742c <pl_yellow_LED_count+0x15c>)
 80073cc:	f014 fc6c 	bl	801bca8 <HAL_GPIO_WritePin>
 80073d0:	e005      	b.n	80073de <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 80073d2:	2200      	movs	r2, #0
 80073d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073d8:	4814      	ldr	r0, [pc, #80]	; (800742c <pl_yellow_LED_count+0x15c>)
 80073da:	f014 fc65 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 80073de:	7a7b      	ldrb	r3, [r7, #9]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d006      	beq.n	80073f2 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 80073e4:	2201      	movs	r2, #1
 80073e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073ea:	4810      	ldr	r0, [pc, #64]	; (800742c <pl_yellow_LED_count+0x15c>)
 80073ec:	f014 fc5c 	bl	801bca8 <HAL_GPIO_WritePin>
 80073f0:	e005      	b.n	80073fe <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 80073f2:	2200      	movs	r2, #0
 80073f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073f8:	480c      	ldr	r0, [pc, #48]	; (800742c <pl_yellow_LED_count+0x15c>)
 80073fa:	f014 fc55 	bl	801bca8 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 80073fe:	7a3b      	ldrb	r3, [r7, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007404:	2201      	movs	r2, #1
 8007406:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800740a:	4808      	ldr	r0, [pc, #32]	; (800742c <pl_yellow_LED_count+0x15c>)
 800740c:	f014 fc4c 	bl	801bca8 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007410:	e005      	b.n	800741e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007412:	2200      	movs	r2, #0
 8007414:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007418:	4804      	ldr	r0, [pc, #16]	; (800742c <pl_yellow_LED_count+0x15c>)
 800741a:	f014 fc45 	bl	801bca8 <HAL_GPIO_WritePin>
}
 800741e:	bf00      	nop
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	48000800 	.word	0x48000800
 800742c:	48000400 	.word	0x48000400

08007430 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007442:	4803      	ldr	r0, [pc, #12]	; (8007450 <pl_r_blue_LED+0x20>)
 8007444:	f014 fc30 	bl	801bca8 <HAL_GPIO_WritePin>
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	48000800 	.word	0x48000800

08007454 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	461a      	mov	r2, r3
 8007462:	2104      	movs	r1, #4
 8007464:	4803      	ldr	r0, [pc, #12]	; (8007474 <pl_l_blue_LED+0x20>)
 8007466:	f014 fc1f 	bl	801bca8 <HAL_GPIO_WritePin>
}
 800746a:	bf00      	nop
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	48000400 	.word	0x48000400

08007478 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007478:	b580      	push	{r7, lr}
 800747a:	b088      	sub	sp, #32
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	460a      	mov	r2, r1
 8007482:	80fb      	strh	r3, [r7, #6]
 8007484:	4613      	mov	r3, r2
 8007486:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007488:	2200      	movs	r2, #0
 800748a:	2110      	movs	r1, #16
 800748c:	4833      	ldr	r0, [pc, #204]	; (800755c <encoder_read_byte_R+0xe4>)
 800748e:	f014 fc0b 	bl	801bca8 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007492:	88fb      	ldrh	r3, [r7, #6]
 8007494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007498:	80fb      	strh	r3, [r7, #6]
	parity=0;
 800749a:	2300      	movs	r3, #0
 800749c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800749e:	2300      	movs	r3, #0
 80074a0:	61bb      	str	r3, [r7, #24]
 80074a2:	e00d      	b.n	80074c0 <encoder_read_byte_R+0x48>
 80074a4:	88fa      	ldrh	r2, [r7, #6]
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	fa42 f303 	asr.w	r3, r2, r3
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	8bfb      	ldrh	r3, [r7, #30]
 80074b6:	4413      	add	r3, r2
 80074b8:	83fb      	strh	r3, [r7, #30]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	3301      	adds	r3, #1
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	2b0e      	cmp	r3, #14
 80074c4:	ddee      	ble.n	80074a4 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 80074c6:	8bfb      	ldrh	r3, [r7, #30]
 80074c8:	03db      	lsls	r3, r3, #15
 80074ca:	b21a      	sxth	r2, r3
 80074cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	b21b      	sxth	r3, r3
 80074d4:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	0a1b      	lsrs	r3, r3, #8
 80074da:	b29b      	uxth	r3, r3
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80074e0:	88fb      	ldrh	r3, [r7, #6]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80074e6:	f107 0110 	add.w	r1, r7, #16
 80074ea:	2364      	movs	r3, #100	; 0x64
 80074ec:	2202      	movs	r2, #2
 80074ee:	481c      	ldr	r0, [pc, #112]	; (8007560 <encoder_read_byte_R+0xe8>)
 80074f0:	f015 fcbd 	bl	801ce6e <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80074f4:	2201      	movs	r2, #1
 80074f6:	2110      	movs	r1, #16
 80074f8:	4818      	ldr	r0, [pc, #96]	; (800755c <encoder_read_byte_R+0xe4>)
 80074fa:	f014 fbd5 	bl	801bca8 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
 8007502:	e002      	b.n	800750a <encoder_read_byte_R+0x92>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	3301      	adds	r3, #1
 8007508:	617b      	str	r3, [r7, #20]
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b95      	cmp	r3, #149	; 0x95
 800750e:	ddf9      	ble.n	8007504 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007510:	2200      	movs	r2, #0
 8007512:	2110      	movs	r1, #16
 8007514:	4811      	ldr	r0, [pc, #68]	; (800755c <encoder_read_byte_R+0xe4>)
 8007516:	f014 fbc7 	bl	801bca8 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800751a:	88bb      	ldrh	r3, [r7, #4]
 800751c:	0a1b      	lsrs	r3, r3, #8
 800751e:	b29b      	uxth	r3, r3
 8007520:	b2db      	uxtb	r3, r3
 8007522:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007524:	88bb      	ldrh	r3, [r7, #4]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800752a:	f107 010c 	add.w	r1, r7, #12
 800752e:	2364      	movs	r3, #100	; 0x64
 8007530:	2202      	movs	r2, #2
 8007532:	480b      	ldr	r0, [pc, #44]	; (8007560 <encoder_read_byte_R+0xe8>)
 8007534:	f015 fe09 	bl	801d14a <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007538:	7b3b      	ldrb	r3, [r7, #12]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	b21a      	sxth	r2, r3
 800753e:	7b7b      	ldrb	r3, [r7, #13]
 8007540:	b21b      	sxth	r3, r3
 8007542:	4313      	orrs	r3, r2
 8007544:	b21b      	sxth	r3, r3
 8007546:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007548:	2201      	movs	r2, #1
 800754a:	2110      	movs	r1, #16
 800754c:	4803      	ldr	r0, [pc, #12]	; (800755c <encoder_read_byte_R+0xe4>)
 800754e:	f014 fbab 	bl	801bca8 <HAL_GPIO_WritePin>

	return data;
 8007552:	88bb      	ldrh	r3, [r7, #4]

}
 8007554:	4618      	mov	r0, r3
 8007556:	3720      	adds	r7, #32
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}
 800755c:	48000400 	.word	0x48000400
 8007560:	2000ee28 	.word	0x2000ee28

08007564 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007564:	b580      	push	{r7, lr}
 8007566:	b088      	sub	sp, #32
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	460a      	mov	r2, r1
 800756e:	80fb      	strh	r3, [r7, #6]
 8007570:	4613      	mov	r3, r2
 8007572:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007574:	2200      	movs	r2, #0
 8007576:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800757a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800757e:	f014 fb93 	bl	801bca8 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007582:	88fb      	ldrh	r3, [r7, #6]
 8007584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007588:	80fb      	strh	r3, [r7, #6]
	parity=0;
 800758a:	2300      	movs	r3, #0
 800758c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800758e:	2300      	movs	r3, #0
 8007590:	61bb      	str	r3, [r7, #24]
 8007592:	e00d      	b.n	80075b0 <encoder_read_byte_L+0x4c>
 8007594:	88fa      	ldrh	r2, [r7, #6]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	fa42 f303 	asr.w	r3, r2, r3
 800759c:	b29b      	uxth	r3, r3
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	8bfb      	ldrh	r3, [r7, #30]
 80075a6:	4413      	add	r3, r2
 80075a8:	83fb      	strh	r3, [r7, #30]
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	3301      	adds	r3, #1
 80075ae:	61bb      	str	r3, [r7, #24]
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	2b0e      	cmp	r3, #14
 80075b4:	ddee      	ble.n	8007594 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 80075b6:	8bfb      	ldrh	r3, [r7, #30]
 80075b8:	03db      	lsls	r3, r3, #15
 80075ba:	b21a      	sxth	r2, r3
 80075bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	b21b      	sxth	r3, r3
 80075c4:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80075c6:	88fb      	ldrh	r3, [r7, #6]
 80075c8:	0a1b      	lsrs	r3, r3, #8
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80075d6:	f107 0110 	add.w	r1, r7, #16
 80075da:	2364      	movs	r3, #100	; 0x64
 80075dc:	2202      	movs	r2, #2
 80075de:	481e      	ldr	r0, [pc, #120]	; (8007658 <encoder_read_byte_L+0xf4>)
 80075e0:	f015 fc45 	bl	801ce6e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80075e4:	2201      	movs	r2, #1
 80075e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075ee:	f014 fb5b 	bl	801bca8 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e002      	b.n	80075fe <encoder_read_byte_L+0x9a>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	3301      	adds	r3, #1
 80075fc:	617b      	str	r3, [r7, #20]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b95      	cmp	r3, #149	; 0x95
 8007602:	ddf9      	ble.n	80075f8 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007604:	2200      	movs	r2, #0
 8007606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800760a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800760e:	f014 fb4b 	bl	801bca8 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007612:	88bb      	ldrh	r3, [r7, #4]
 8007614:	0a1b      	lsrs	r3, r3, #8
 8007616:	b29b      	uxth	r3, r3
 8007618:	b2db      	uxtb	r3, r3
 800761a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800761c:	88bb      	ldrh	r3, [r7, #4]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007622:	f107 010c 	add.w	r1, r7, #12
 8007626:	2364      	movs	r3, #100	; 0x64
 8007628:	2202      	movs	r2, #2
 800762a:	480b      	ldr	r0, [pc, #44]	; (8007658 <encoder_read_byte_L+0xf4>)
 800762c:	f015 fd8d 	bl	801d14a <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007630:	7b3b      	ldrb	r3, [r7, #12]
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	b21a      	sxth	r2, r3
 8007636:	7b7b      	ldrb	r3, [r7, #13]
 8007638:	b21b      	sxth	r3, r3
 800763a:	4313      	orrs	r3, r2
 800763c:	b21b      	sxth	r3, r3
 800763e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007640:	2201      	movs	r2, #1
 8007642:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800764a:	f014 fb2d 	bl	801bca8 <HAL_GPIO_WritePin>

	return data;
 800764e:	88bb      	ldrh	r3, [r7, #4]

}
 8007650:	4618      	mov	r0, r3
 8007652:	3720      	adds	r7, #32
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	2000ee28 	.word	0x2000ee28

0800765c <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007660:	2100      	movs	r1, #0
 8007662:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007666:	f7ff ff07 	bl	8007478 <encoder_read_byte_R>
 800766a:	4603      	mov	r3, r0
 800766c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007670:	ee07 3a90 	vmov	s15, r3
 8007674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007678:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80076c0 <AS5047_DataUpdate+0x64>
 800767c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007680:	eddf 6a10 	vldr	s13, [pc, #64]	; 80076c4 <AS5047_DataUpdate+0x68>
 8007684:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007688:	4b0f      	ldr	r3, [pc, #60]	; (80076c8 <AS5047_DataUpdate+0x6c>)
 800768a:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 800768e:	2100      	movs	r1, #0
 8007690:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007694:	f7ff ff66 	bl	8007564 <encoder_read_byte_L>
 8007698:	4603      	mov	r3, r0
 800769a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076a6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80076c0 <AS5047_DataUpdate+0x64>
 80076aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80076ae:	eddf 6a05 	vldr	s13, [pc, #20]	; 80076c4 <AS5047_DataUpdate+0x68>
 80076b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076b6:	4b05      	ldr	r3, [pc, #20]	; (80076cc <AS5047_DataUpdate+0x70>)
 80076b8:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 80076bc:	bf00      	nop
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	43b40000 	.word	0x43b40000
 80076c4:	46800000 	.word	0x46800000
 80076c8:	200006dc 	.word	0x200006dc
 80076cc:	200006e0 	.word	0x200006e0

080076d0 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
		  record_out();
 80076d4:	f000 f91a 	bl	800790c <record_out>
		  maze_display();
 80076d8:	f00d f900 	bl	80148dc <maze_display>
		  flash_record_init();
 80076dc:	f000 f9c2 	bl	8007a64 <flash_record_init>
		  record_in();
 80076e0:	f000 f858 	bl	8007794 <record_in>
}
 80076e4:	bf00      	nop
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <eraseFlash>:


void eraseFlash( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 80076ee:	2300      	movs	r3, #0
 80076f0:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 80076f2:	2301      	movs	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 80076f6:	23fe      	movs	r3, #254	; 0xfe
 80076f8:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 80076fa:	2301      	movs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 80076fe:	2300      	movs	r3, #0
 8007700:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007702:	1d3a      	adds	r2, r7, #4
 8007704:	f107 0308 	add.w	r3, r7, #8
 8007708:	4611      	mov	r1, r2
 800770a:	4618      	mov	r0, r3
 800770c:	f014 f824 	bl	801b758 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007710:	bf00      	nop
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007718:	b5b0      	push	{r4, r5, r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007726:	f013 ff2b 	bl	801b580 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <writeFlash+0x1c>
 8007730:	f7ff ffda 	bl	80076e8 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e00f      	b.n	800775a <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	17da      	asrs	r2, r3, #31
 800773e:	461c      	mov	r4, r3
 8007740:	4615      	mov	r5, r2
 8007742:	4622      	mov	r2, r4
 8007744:	462b      	mov	r3, r5
 8007746:	6979      	ldr	r1, [r7, #20]
 8007748:	2000      	movs	r0, #0
 800774a:	f013 fec3 	bl	801b4d4 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	3320      	adds	r3, #32
 8007752:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	3308      	adds	r3, #8
 8007758:	617b      	str	r3, [r7, #20]
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4413      	add	r3, r2
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	429a      	cmp	r2, r3
 8007764:	d3e9      	bcc.n	800773a <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007766:	f013 ff2d 	bl	801b5c4 <HAL_FLASH_Lock>

}
 800776a:	bf00      	nop
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bdb0      	pop	{r4, r5, r7, pc}

08007772 <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	60f8      	str	r0, [r7, #12]
 800777a:	60b9      	str	r1, [r7, #8]
 800777c:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	4619      	mov	r1, r3
 8007784:	68b8      	ldr	r0, [r7, #8]
 8007786:	f018 fba5 	bl	801fed4 <memcpy>

}
 800778a:	bf00      	nop
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <record_in>:


void record_in(void) {
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
	int t = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 800779e:	4b58      	ldr	r3, [pc, #352]	; (8007900 <record_in+0x16c>)
 80077a0:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80077a2:	e017      	b.n	80077d4 <record_in+0x40>
		record.row[t] = wall.row[t];
 80077a4:	4a57      	ldr	r2, [pc, #348]	; (8007904 <record_in+0x170>)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80077ac:	4a56      	ldr	r2, [pc, #344]	; (8007908 <record_in+0x174>)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 80077b4:	4a53      	ldr	r2, [pc, #332]	; (8007904 <record_in+0x170>)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	330c      	adds	r3, #12
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4413      	add	r3, r2
 80077be:	88d9      	ldrh	r1, [r3, #6]
 80077c0:	4a51      	ldr	r2, [pc, #324]	; (8007908 <record_in+0x174>)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	330c      	adds	r3, #12
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	460a      	mov	r2, r1
 80077cc:	80da      	strh	r2, [r3, #6]
		t++;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	3301      	adds	r3, #1
 80077d2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b0e      	cmp	r3, #14
 80077d8:	dde4      	ble.n	80077a4 <record_in+0x10>
	}
	t = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80077de:	e01c      	b.n	800781a <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 80077e0:	4a48      	ldr	r2, [pc, #288]	; (8007904 <record_in+0x170>)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	331c      	adds	r3, #28
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	8899      	ldrh	r1, [r3, #4]
 80077ec:	4a46      	ldr	r2, [pc, #280]	; (8007908 <record_in+0x174>)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	331c      	adds	r3, #28
 80077f2:	005b      	lsls	r3, r3, #1
 80077f4:	4413      	add	r3, r2
 80077f6:	460a      	mov	r2, r1
 80077f8:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 80077fa:	4a42      	ldr	r2, [pc, #264]	; (8007904 <record_in+0x170>)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	332c      	adds	r3, #44	; 0x2c
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	4413      	add	r3, r2
 8007804:	8859      	ldrh	r1, [r3, #2]
 8007806:	4a40      	ldr	r2, [pc, #256]	; (8007908 <record_in+0x174>)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	332c      	adds	r3, #44	; 0x2c
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	4413      	add	r3, r2
 8007810:	460a      	mov	r2, r1
 8007812:	805a      	strh	r2, [r3, #2]
		t++;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3301      	adds	r3, #1
 8007818:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2b0e      	cmp	r3, #14
 800781e:	dddf      	ble.n	80077e0 <record_in+0x4c>
	}
	t = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007824:	4b38      	ldr	r3, [pc, #224]	; (8007908 <record_in+0x174>)
 8007826:	881b      	ldrh	r3, [r3, #0]
 8007828:	4619      	mov	r1, r3
 800782a:	2301      	movs	r3, #1
 800782c:	2201      	movs	r2, #1
 800782e:	6838      	ldr	r0, [r7, #0]
 8007830:	f7ff ff72 	bl	8007718 <writeFlash>
	address+=16;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	3310      	adds	r3, #16
 8007838:	603b      	str	r3, [r7, #0]
	t=1;
 800783a:	2301      	movs	r3, #1
 800783c:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800783e:	e00f      	b.n	8007860 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007840:	4a31      	ldr	r2, [pc, #196]	; (8007908 <record_in+0x174>)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007848:	4619      	mov	r1, r3
 800784a:	2300      	movs	r3, #0
 800784c:	2201      	movs	r2, #1
 800784e:	6838      	ldr	r0, [r7, #0]
 8007850:	f7ff ff62 	bl	8007718 <writeFlash>
	address+=16;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	3310      	adds	r3, #16
 8007858:	603b      	str	r3, [r7, #0]
	t++;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3301      	adds	r3, #1
 800785e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2b0e      	cmp	r3, #14
 8007864:	ddec      	ble.n	8007840 <record_in+0xac>
	}

	t=0;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800786a:	e011      	b.n	8007890 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 800786c:	4a26      	ldr	r2, [pc, #152]	; (8007908 <record_in+0x174>)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	330c      	adds	r3, #12
 8007872:	005b      	lsls	r3, r3, #1
 8007874:	4413      	add	r3, r2
 8007876:	88db      	ldrh	r3, [r3, #6]
 8007878:	4619      	mov	r1, r3
 800787a:	2300      	movs	r3, #0
 800787c:	2201      	movs	r2, #1
 800787e:	6838      	ldr	r0, [r7, #0]
 8007880:	f7ff ff4a 	bl	8007718 <writeFlash>
	address+=16;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	3310      	adds	r3, #16
 8007888:	603b      	str	r3, [r7, #0]
	t++;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	3301      	adds	r3, #1
 800788e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2b0e      	cmp	r3, #14
 8007894:	ddea      	ble.n	800786c <record_in+0xd8>
	}

	t=0;
 8007896:	2300      	movs	r3, #0
 8007898:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800789a:	e011      	b.n	80078c0 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 800789c:	4a1a      	ldr	r2, [pc, #104]	; (8007908 <record_in+0x174>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	331c      	adds	r3, #28
 80078a2:	005b      	lsls	r3, r3, #1
 80078a4:	4413      	add	r3, r2
 80078a6:	889b      	ldrh	r3, [r3, #4]
 80078a8:	4619      	mov	r1, r3
 80078aa:	2300      	movs	r3, #0
 80078ac:	2201      	movs	r2, #1
 80078ae:	6838      	ldr	r0, [r7, #0]
 80078b0:	f7ff ff32 	bl	8007718 <writeFlash>
	address+=16;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	3310      	adds	r3, #16
 80078b8:	603b      	str	r3, [r7, #0]
	t++;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3301      	adds	r3, #1
 80078be:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b0e      	cmp	r3, #14
 80078c4:	ddea      	ble.n	800789c <record_in+0x108>
	}

	t=0;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80078ca:	e011      	b.n	80078f0 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 80078cc:	4a0e      	ldr	r2, [pc, #56]	; (8007908 <record_in+0x174>)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	332c      	adds	r3, #44	; 0x2c
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	885b      	ldrh	r3, [r3, #2]
 80078d8:	4619      	mov	r1, r3
 80078da:	2300      	movs	r3, #0
 80078dc:	2201      	movs	r2, #1
 80078de:	6838      	ldr	r0, [r7, #0]
 80078e0:	f7ff ff1a 	bl	8007718 <writeFlash>
	address+=16;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	3310      	adds	r3, #16
 80078e8:	603b      	str	r3, [r7, #0]
	t++;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3301      	adds	r3, #1
 80078ee:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b0e      	cmp	r3, #14
 80078f4:	ddea      	ble.n	80078cc <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	0807f000 	.word	0x0807f000
 8007904:	20000c30 	.word	0x20000c30
 8007908:	20000ca8 	.word	0x20000ca8

0800790c <record_out>:


void record_out(void) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 8007912:	2300      	movs	r3, #0
 8007914:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007916:	4b50      	ldr	r3, [pc, #320]	; (8007a58 <record_out+0x14c>)
 8007918:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 800791a:	e00e      	b.n	800793a <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	005b      	lsls	r3, r3, #1
 8007920:	4a4e      	ldr	r2, [pc, #312]	; (8007a5c <record_out+0x150>)
 8007922:	4413      	add	r3, r2
 8007924:	2202      	movs	r2, #2
 8007926:	4619      	mov	r1, r3
 8007928:	6838      	ldr	r0, [r7, #0]
 800792a:	f7ff ff22 	bl	8007772 <loadFlash>
	address+=16;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	3310      	adds	r3, #16
 8007932:	603b      	str	r3, [r7, #0]
	t++;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	3301      	adds	r3, #1
 8007938:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b0e      	cmp	r3, #14
 800793e:	dded      	ble.n	800791c <record_out+0x10>
	}

	t=0;
 8007940:	2300      	movs	r3, #0
 8007942:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007944:	e010      	b.n	8007968 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	330c      	adds	r3, #12
 800794a:	005b      	lsls	r3, r3, #1
 800794c:	4a43      	ldr	r2, [pc, #268]	; (8007a5c <record_out+0x150>)
 800794e:	4413      	add	r3, r2
 8007950:	3306      	adds	r3, #6
 8007952:	2202      	movs	r2, #2
 8007954:	4619      	mov	r1, r3
 8007956:	6838      	ldr	r0, [r7, #0]
 8007958:	f7ff ff0b 	bl	8007772 <loadFlash>
	address+=16;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	3310      	adds	r3, #16
 8007960:	603b      	str	r3, [r7, #0]
	t++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3301      	adds	r3, #1
 8007966:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2b0e      	cmp	r3, #14
 800796c:	ddeb      	ble.n	8007946 <record_out+0x3a>
	}

	t=0;
 800796e:	2300      	movs	r3, #0
 8007970:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007972:	e010      	b.n	8007996 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	331c      	adds	r3, #28
 8007978:	005b      	lsls	r3, r3, #1
 800797a:	4a38      	ldr	r2, [pc, #224]	; (8007a5c <record_out+0x150>)
 800797c:	4413      	add	r3, r2
 800797e:	3304      	adds	r3, #4
 8007980:	2202      	movs	r2, #2
 8007982:	4619      	mov	r1, r3
 8007984:	6838      	ldr	r0, [r7, #0]
 8007986:	f7ff fef4 	bl	8007772 <loadFlash>
		address+=16;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	3310      	adds	r3, #16
 800798e:	603b      	str	r3, [r7, #0]
		t++;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3301      	adds	r3, #1
 8007994:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b0e      	cmp	r3, #14
 800799a:	ddeb      	ble.n	8007974 <record_out+0x68>
	}

	t=0;
 800799c:	2300      	movs	r3, #0
 800799e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079a0:	e010      	b.n	80079c4 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	332c      	adds	r3, #44	; 0x2c
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	4a2c      	ldr	r2, [pc, #176]	; (8007a5c <record_out+0x150>)
 80079aa:	4413      	add	r3, r2
 80079ac:	3302      	adds	r3, #2
 80079ae:	2202      	movs	r2, #2
 80079b0:	4619      	mov	r1, r3
 80079b2:	6838      	ldr	r0, [r7, #0]
 80079b4:	f7ff fedd 	bl	8007772 <loadFlash>
		address+=16;
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	3310      	adds	r3, #16
 80079bc:	603b      	str	r3, [r7, #0]
		t++;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3301      	adds	r3, #1
 80079c2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b0e      	cmp	r3, #14
 80079c8:	ddeb      	ble.n	80079a2 <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80079ce:	e017      	b.n	8007a00 <record_out+0xf4>
		wall.row[t] = record.row[t];
 80079d0:	4a22      	ldr	r2, [pc, #136]	; (8007a5c <record_out+0x150>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80079d8:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <record_out+0x154>)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80079e0:	4a1e      	ldr	r2, [pc, #120]	; (8007a5c <record_out+0x150>)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	330c      	adds	r3, #12
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	4413      	add	r3, r2
 80079ea:	88d9      	ldrh	r1, [r3, #6]
 80079ec:	4a1c      	ldr	r2, [pc, #112]	; (8007a60 <record_out+0x154>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	330c      	adds	r3, #12
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	4413      	add	r3, r2
 80079f6:	460a      	mov	r2, r1
 80079f8:	80da      	strh	r2, [r3, #6]
		t++;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	3301      	adds	r3, #1
 80079fe:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b0e      	cmp	r3, #14
 8007a04:	dde4      	ble.n	80079d0 <record_out+0xc4>
	}
	t = 0;
 8007a06:	2300      	movs	r3, #0
 8007a08:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a0a:	e01c      	b.n	8007a46 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 8007a0c:	4a13      	ldr	r2, [pc, #76]	; (8007a5c <record_out+0x150>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	331c      	adds	r3, #28
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	4413      	add	r3, r2
 8007a16:	8899      	ldrh	r1, [r3, #4]
 8007a18:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <record_out+0x154>)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	331c      	adds	r3, #28
 8007a1e:	005b      	lsls	r3, r3, #1
 8007a20:	4413      	add	r3, r2
 8007a22:	460a      	mov	r2, r1
 8007a24:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 8007a26:	4a0d      	ldr	r2, [pc, #52]	; (8007a5c <record_out+0x150>)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	332c      	adds	r3, #44	; 0x2c
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	8859      	ldrh	r1, [r3, #2]
 8007a32:	4a0b      	ldr	r2, [pc, #44]	; (8007a60 <record_out+0x154>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	332c      	adds	r3, #44	; 0x2c
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	4413      	add	r3, r2
 8007a3c:	460a      	mov	r2, r1
 8007a3e:	805a      	strh	r2, [r3, #2]
		t++;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	3301      	adds	r3, #1
 8007a44:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b0e      	cmp	r3, #14
 8007a4a:	dddf      	ble.n	8007a0c <record_out+0x100>
	}

	t = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	607b      	str	r3, [r7, #4]

}
 8007a50:	bf00      	nop
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	0807f000 	.word	0x0807f000
 8007a5c:	20000ca8 	.word	0x20000ca8
 8007a60:	20000c30 	.word	0x20000c30

08007a64 <flash_record_init>:

void flash_record_init(void){
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
	int t = 0;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a6e:	e013      	b.n	8007a98 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 8007a70:	4a1e      	ldr	r2, [pc, #120]	; (8007aec <flash_record_init+0x88>)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007a78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	005b      	lsls	r3, r3, #1
 8007a82:	b299      	uxth	r1, r3
 8007a84:	4a19      	ldr	r2, [pc, #100]	; (8007aec <flash_record_init+0x88>)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	330c      	adds	r3, #12
 8007a8a:	005b      	lsls	r3, r3, #1
 8007a8c:	4413      	add	r3, r2
 8007a8e:	460a      	mov	r2, r1
 8007a90:	80da      	strh	r2, [r3, #6]
		t++;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	3301      	adds	r3, #1
 8007a96:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b0e      	cmp	r3, #14
 8007a9c:	dde8      	ble.n	8007a70 <flash_record_init+0xc>
	}
	t = 0;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007aa2:	e018      	b.n	8007ad6 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	b299      	uxth	r1, r3
 8007aac:	4a0f      	ldr	r2, [pc, #60]	; (8007aec <flash_record_init+0x88>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	331c      	adds	r3, #28
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	4413      	add	r3, r2
 8007ab6:	460a      	mov	r2, r1
 8007ab8:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	b299      	uxth	r1, r3
 8007ac2:	4a0a      	ldr	r2, [pc, #40]	; (8007aec <flash_record_init+0x88>)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	332c      	adds	r3, #44	; 0x2c
 8007ac8:	005b      	lsls	r3, r3, #1
 8007aca:	4413      	add	r3, r2
 8007acc:	460a      	mov	r2, r1
 8007ace:	805a      	strh	r2, [r3, #2]
		t++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b0e      	cmp	r3, #14
 8007ada:	dde3      	ble.n	8007aa4 <flash_record_init+0x40>
	}

}
 8007adc:	bf00      	nop
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	20000c30 	.word	0x20000c30

08007af0 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	4603      	mov	r3, r0
 8007af8:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007afa:	2200      	movs	r2, #0
 8007afc:	2110      	movs	r1, #16
 8007afe:	4810      	ldr	r0, [pc, #64]	; (8007b40 <gyro_read_byte+0x50>)
 8007b00:	f014 f8d2 	bl	801bca8 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007b04:	79fb      	ldrb	r3, [r7, #7]
 8007b06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007b0e:	f107 010f 	add.w	r1, r7, #15
 8007b12:	2364      	movs	r3, #100	; 0x64
 8007b14:	2201      	movs	r2, #1
 8007b16:	480b      	ldr	r0, [pc, #44]	; (8007b44 <gyro_read_byte+0x54>)
 8007b18:	f015 f9a9 	bl	801ce6e <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007b1c:	f107 010e 	add.w	r1, r7, #14
 8007b20:	2364      	movs	r3, #100	; 0x64
 8007b22:	2201      	movs	r2, #1
 8007b24:	4807      	ldr	r0, [pc, #28]	; (8007b44 <gyro_read_byte+0x54>)
 8007b26:	f015 fb10 	bl	801d14a <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	2110      	movs	r1, #16
 8007b2e:	4804      	ldr	r0, [pc, #16]	; (8007b40 <gyro_read_byte+0x50>)
 8007b30:	f014 f8ba 	bl	801bca8 <HAL_GPIO_WritePin>

	return val;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]

}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	48000800 	.word	0x48000800
 8007b44:	2000edc4 	.word	0x2000edc4

08007b48 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	460a      	mov	r2, r1
 8007b52:	71fb      	strb	r3, [r7, #7]
 8007b54:	4613      	mov	r3, r2
 8007b56:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007b58:	79fb      	ldrb	r3, [r7, #7]
 8007b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8007b62:	2200      	movs	r2, #0
 8007b64:	2110      	movs	r1, #16
 8007b66:	480c      	ldr	r0, [pc, #48]	; (8007b98 <gyro_write_byte+0x50>)
 8007b68:	f014 f89e 	bl	801bca8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007b6c:	f107 010f 	add.w	r1, r7, #15
 8007b70:	2364      	movs	r3, #100	; 0x64
 8007b72:	2201      	movs	r2, #1
 8007b74:	4809      	ldr	r0, [pc, #36]	; (8007b9c <gyro_write_byte+0x54>)
 8007b76:	f015 f97a 	bl	801ce6e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8007b7a:	1db9      	adds	r1, r7, #6
 8007b7c:	2364      	movs	r3, #100	; 0x64
 8007b7e:	2201      	movs	r2, #1
 8007b80:	4806      	ldr	r0, [pc, #24]	; (8007b9c <gyro_write_byte+0x54>)
 8007b82:	f015 f974 	bl	801ce6e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8007b86:	2201      	movs	r2, #1
 8007b88:	2110      	movs	r1, #16
 8007b8a:	4803      	ldr	r0, [pc, #12]	; (8007b98 <gyro_write_byte+0x50>)
 8007b8c:	f014 f88c 	bl	801bca8 <HAL_GPIO_WritePin>

}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	48000800 	.word	0x48000800
 8007b9c:	2000edc4 	.word	0x2000edc4

08007ba0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8007baa:	2075      	movs	r0, #117	; 0x75
 8007bac:	f7ff ffa0 	bl	8007af0 <gyro_read_byte>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	481b      	ldr	r0, [pc, #108]	; (8007c28 <pl_gyro_init+0x88>)
 8007bba:	f018 fe0b 	bl	80207d4 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	2b98      	cmp	r3, #152	; 0x98
 8007bc2:	d00e      	beq.n	8007be2 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007bc4:	2064      	movs	r0, #100	; 0x64
 8007bc6:	f010 feb3 	bl	8018930 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8007bca:	2075      	movs	r0, #117	; 0x75
 8007bcc:	f7ff ff90 	bl	8007af0 <gyro_read_byte>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	2b98      	cmp	r3, #152	; 0x98
 8007bd8:	d003      	beq.n	8007be2 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8007bda:	4814      	ldr	r0, [pc, #80]	; (8007c2c <pl_gyro_init+0x8c>)
 8007bdc:	f018 fdfa 	bl	80207d4 <iprintf>
 8007be0:	e7fb      	b.n	8007bda <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007be2:	2100      	movs	r1, #0
 8007be4:	206b      	movs	r0, #107	; 0x6b
 8007be6:	f7ff ffaf 	bl	8007b48 <gyro_write_byte>

	HAL_Delay(50);
 8007bea:	2032      	movs	r0, #50	; 0x32
 8007bec:	f010 fea0 	bl	8018930 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007bf0:	2100      	movs	r1, #0
 8007bf2:	206c      	movs	r0, #108	; 0x6c
 8007bf4:	f7ff ffa8 	bl	8007b48 <gyro_write_byte>

	HAL_Delay(50);
 8007bf8:	2032      	movs	r0, #50	; 0x32
 8007bfa:	f010 fe99 	bl	8018930 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8007bfe:	2118      	movs	r1, #24
 8007c00:	201b      	movs	r0, #27
 8007c02:	f7ff ffa1 	bl	8007b48 <gyro_write_byte>

	HAL_Delay(50);
 8007c06:	2032      	movs	r0, #50	; 0x32
 8007c08:	f010 fe92 	bl	8018930 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007c0c:	2118      	movs	r1, #24
 8007c0e:	201c      	movs	r0, #28
 8007c10:	f7ff ff9a 	bl	8007b48 <gyro_write_byte>

	HAL_Delay(50);
 8007c14:	2032      	movs	r0, #50	; 0x32
 8007c16:	f010 fe8b 	bl	8018930 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <pl_gyro_init+0x90>)
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	701a      	strb	r2, [r3, #0]

}
 8007c20:	bf00      	nop
 8007c22:	3708      	adds	r7, #8
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	080241b8 	.word	0x080241b8
 8007c2c:	080241cc 	.word	0x080241cc
 8007c30:	200006e4 	.word	0x200006e4

08007c34 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007c34:	b590      	push	{r4, r7, lr}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff ff55 	bl	8007af0 <gyro_read_byte>
 8007c46:	4603      	mov	r3, r0
 8007c48:	021b      	lsls	r3, r3, #8
 8007c4a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	3301      	adds	r3, #1
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7ff ff4c 	bl	8007af0 <gyro_read_byte>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c5c:	4323      	orrs	r3, r4
 8007c5e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8007c60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007c64:	ee07 3a90 	vmov	s15, r3
 8007c68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007c6c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007c88 <ICM20602_GYRO_READ+0x54>
 8007c70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c74:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	ee07 3a90 	vmov	s15, r3

}
 8007c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd90      	pop	{r4, r7, pc}
 8007c88:	41833333 	.word	0x41833333

08007c8c <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8007c8c:	b590      	push	{r4, r7, lr}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff29 	bl	8007af0 <gyro_read_byte>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	021b      	lsls	r3, r3, #8
 8007ca2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007ca4:	79fb      	ldrb	r3, [r7, #7]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff ff20 	bl	8007af0 <gyro_read_byte>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007cb4:	4323      	orrs	r3, r4
 8007cb6:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007cb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007cbc:	ee07 3a90 	vmov	s15, r3
 8007cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cc4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007ce0 <ICM20602_ACCEL_READ+0x54>
 8007cc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ccc:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	ee07 3a90 	vmov	s15, r3

}
 8007cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd90      	pop	{r4, r7, pc}
 8007ce0:	45000000 	.word	0x45000000

08007ce4 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007ce8:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <ICM20602_DataUpdate+0x40>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d117      	bne.n	8007d20 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007cf0:	2045      	movs	r0, #69	; 0x45
 8007cf2:	f7ff ff9f 	bl	8007c34 <ICM20602_GYRO_READ>
 8007cf6:	eef0 7a40 	vmov.f32	s15, s0
 8007cfa:	4b0b      	ldr	r3, [pc, #44]	; (8007d28 <ICM20602_DataUpdate+0x44>)
 8007cfc:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007d00:	2047      	movs	r0, #71	; 0x47
 8007d02:	f7ff ff97 	bl	8007c34 <ICM20602_GYRO_READ>
 8007d06:	eef0 7a40 	vmov.f32	s15, s0
 8007d0a:	4b07      	ldr	r3, [pc, #28]	; (8007d28 <ICM20602_DataUpdate+0x44>)
 8007d0c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007d10:	203b      	movs	r0, #59	; 0x3b
 8007d12:	f7ff ffbb 	bl	8007c8c <ICM20602_ACCEL_READ>
 8007d16:	eef0 7a40 	vmov.f32	s15, s0
 8007d1a:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <ICM20602_DataUpdate+0x44>)
 8007d1c:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	200006e4 	.word	0x200006e4
 8007d28:	200006e8 	.word	0x200006e8

08007d2c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007d30:	480f      	ldr	r0, [pc, #60]	; (8007d70 <pl_motor_init+0x44>)
 8007d32:	f015 ff61 	bl	801dbf8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007d36:	480e      	ldr	r0, [pc, #56]	; (8007d70 <pl_motor_init+0x44>)
 8007d38:	f00f fc88 	bl	801764c <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007d3c:	480d      	ldr	r0, [pc, #52]	; (8007d74 <pl_motor_init+0x48>)
 8007d3e:	f015 ff5b 	bl	801dbf8 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007d42:	480c      	ldr	r0, [pc, #48]	; (8007d74 <pl_motor_init+0x48>)
 8007d44:	f00f fc82 	bl	801764c <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007d48:	2001      	movs	r0, #1
 8007d4a:	f000 f81f 	bl	8007d8c <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <pl_motor_init+0x44>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	225a      	movs	r2, #90	; 0x5a
 8007d54:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007d56:	2001      	movs	r0, #1
 8007d58:	f000 f840 	bl	8007ddc <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007d5c:	4b04      	ldr	r3, [pc, #16]	; (8007d70 <pl_motor_init+0x44>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	225a      	movs	r2, #90	; 0x5a
 8007d62:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007d64:	4b03      	ldr	r3, [pc, #12]	; (8007d74 <pl_motor_init+0x48>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	221e      	movs	r2, #30
 8007d6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007d6c:	bf00      	nop
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	2000eedc 	.word	0x2000eedc
 8007d74:	2000ef28 	.word	0x2000ef28

08007d78 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d819      	bhi.n	8007dce <pl_L_DriveMotor_mode+0x42>
 8007d9a:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <pl_L_DriveMotor_mode+0x14>)
 8007d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da0:	08007dcd 	.word	0x08007dcd
 8007da4:	08007db1 	.word	0x08007db1
 8007da8:	08007dbf 	.word	0x08007dbf
 8007dac:	08007dcd 	.word	0x08007dcd
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007db0:	2200      	movs	r2, #0
 8007db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007db6:	4808      	ldr	r0, [pc, #32]	; (8007dd8 <pl_L_DriveMotor_mode+0x4c>)
 8007db8:	f013 ff76 	bl	801bca8 <HAL_GPIO_WritePin>
break;
 8007dbc:	e007      	b.n	8007dce <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007dc4:	4804      	ldr	r0, [pc, #16]	; (8007dd8 <pl_L_DriveMotor_mode+0x4c>)
 8007dc6:	f013 ff6f 	bl	801bca8 <HAL_GPIO_WritePin>
break;
 8007dca:	e000      	b.n	8007dce <pl_L_DriveMotor_mode+0x42>
break;
 8007dcc:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007dce:	bf00      	nop
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	48000800 	.word	0x48000800

08007ddc <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d817      	bhi.n	8007e1a <pl_R_DriveMotor_mode+0x3e>
 8007dea:	a201      	add	r2, pc, #4	; (adr r2, 8007df0 <pl_R_DriveMotor_mode+0x14>)
 8007dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e01 	.word	0x08007e01
 8007df8:	08007e0d 	.word	0x08007e0d
 8007dfc:	08007e19 	.word	0x08007e19
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007e00:	2201      	movs	r2, #1
 8007e02:	2180      	movs	r1, #128	; 0x80
 8007e04:	4807      	ldr	r0, [pc, #28]	; (8007e24 <pl_R_DriveMotor_mode+0x48>)
 8007e06:	f013 ff4f 	bl	801bca8 <HAL_GPIO_WritePin>
break;
 8007e0a:	e006      	b.n	8007e1a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2180      	movs	r1, #128	; 0x80
 8007e10:	4804      	ldr	r0, [pc, #16]	; (8007e24 <pl_R_DriveMotor_mode+0x48>)
 8007e12:	f013 ff49 	bl	801bca8 <HAL_GPIO_WritePin>
break;
 8007e16:	e000      	b.n	8007e1a <pl_R_DriveMotor_mode+0x3e>
break;
 8007e18:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007e1a:	bf00      	nop
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	48000400 	.word	0x48000400

08007e28 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007e2c:	2108      	movs	r1, #8
 8007e2e:	4804      	ldr	r0, [pc, #16]	; (8007e40 <pl_DriveMotor_start+0x18>)
 8007e30:	f015 ffaa 	bl	801dd88 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007e34:	2100      	movs	r1, #0
 8007e36:	4802      	ldr	r0, [pc, #8]	; (8007e40 <pl_DriveMotor_start+0x18>)
 8007e38:	f015 ffa6 	bl	801dd88 <HAL_TIM_PWM_Start>
}
 8007e3c:	bf00      	nop
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	2000eedc 	.word	0x2000eedc

08007e44 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007e48:	2108      	movs	r1, #8
 8007e4a:	4804      	ldr	r0, [pc, #16]	; (8007e5c <pl_DriveMotor_stop+0x18>)
 8007e4c:	f016 f8a8 	bl	801dfa0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007e50:	2100      	movs	r1, #0
 8007e52:	4802      	ldr	r0, [pc, #8]	; (8007e5c <pl_DriveMotor_stop+0x18>)
 8007e54:	f016 f8a4 	bl	801dfa0 <HAL_TIM_PWM_Stop>
}
 8007e58:	bf00      	nop
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	2000eedc 	.word	0x2000eedc

08007e60 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007e6a:	4b07      	ldr	r3, [pc, #28]	; (8007e88 <pl_DriveMotor_duty+0x28>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007e72:	4b05      	ldr	r3, [pc, #20]	; (8007e88 <pl_DriveMotor_duty+0x28>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007e7a:	bf00      	nop
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	2000eedc 	.word	0x2000eedc

08007e8c <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007e90:	2100      	movs	r1, #0
 8007e92:	4802      	ldr	r0, [pc, #8]	; (8007e9c <pl_FunMotor_start+0x10>)
 8007e94:	f015 ff78 	bl	801dd88 <HAL_TIM_PWM_Start>
}
 8007e98:	bf00      	nop
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	2000ef28 	.word	0x2000ef28

08007ea0 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4802      	ldr	r0, [pc, #8]	; (8007eb0 <pl_FunMotor_stop+0x10>)
 8007ea8:	f016 f87a 	bl	801dfa0 <HAL_TIM_PWM_Stop>
}
 8007eac:	bf00      	nop
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	2000ef28 	.word	0x2000ef28

08007eb4 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ec2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007ef8 <pl_FunMotor_duty+0x44>
 8007ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ece:	ee17 3a90 	vmov	r3, s15
 8007ed2:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <pl_FunMotor_duty+0x48>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2264      	movs	r2, #100	; 0x64
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8007edc:	4b07      	ldr	r3, [pc, #28]	; (8007efc <pl_FunMotor_duty+0x48>)
 8007ede:	2264      	movs	r2, #100	; 0x64
 8007ee0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007ee2:	4b06      	ldr	r3, [pc, #24]	; (8007efc <pl_FunMotor_duty+0x48>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	42c80000 	.word	0x42c80000
 8007efc:	2000ef28 	.word	0x2000ef28

08007f00 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007f00:	b580      	push	{r7, lr}
 8007f02:	af00      	add	r7, sp, #0
	AD_step=0;
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <pl_sensor_init+0x18>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007f0a:	217f      	movs	r1, #127	; 0x7f
 8007f0c:	4803      	ldr	r0, [pc, #12]	; (8007f1c <pl_sensor_init+0x1c>)
 8007f0e:	f012 fd89 	bl	801aa24 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007f12:	bf00      	nop
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	2000070c 	.word	0x2000070c
 8007f1c:	20000738 	.word	0x20000738

08007f20 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007f26:	483c      	ldr	r0, [pc, #240]	; (8008018 <pl_getbatt+0xf8>)
 8007f28:	f011 f96a 	bl	8019200 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007f2c:	2132      	movs	r1, #50	; 0x32
 8007f2e:	483a      	ldr	r0, [pc, #232]	; (8008018 <pl_getbatt+0xf8>)
 8007f30:	f011 fa64 	bl	80193fc <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007f34:	4838      	ldr	r0, [pc, #224]	; (8008018 <pl_getbatt+0xf8>)
 8007f36:	f011 fc80 	bl	801983a <HAL_ADC_GetValue>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007f3e:	4836      	ldr	r0, [pc, #216]	; (8008018 <pl_getbatt+0xf8>)
 8007f40:	f011 fa28 	bl	8019394 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	ee07 3a90 	vmov	s15, r3
 8007f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f4e:	ee17 0a90 	vmov	r0, s15
 8007f52:	f7f8 fb21 	bl	8000598 <__aeabi_f2d>
 8007f56:	a326      	add	r3, pc, #152	; (adr r3, 8007ff0 <pl_getbatt+0xd0>)
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	f7f8 fb74 	bl	8000648 <__aeabi_dmul>
 8007f60:	4602      	mov	r2, r0
 8007f62:	460b      	mov	r3, r1
 8007f64:	4610      	mov	r0, r2
 8007f66:	4619      	mov	r1, r3
 8007f68:	a323      	add	r3, pc, #140	; (adr r3, 8007ff8 <pl_getbatt+0xd8>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 fc95 	bl	800089c <__aeabi_ddiv>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4610      	mov	r0, r2
 8007f78:	4619      	mov	r1, r3
 8007f7a:	f04f 0200 	mov.w	r2, #0
 8007f7e:	4b27      	ldr	r3, [pc, #156]	; (800801c <pl_getbatt+0xfc>)
 8007f80:	f7f8 fb62 	bl	8000648 <__aeabi_dmul>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4610      	mov	r0, r2
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	4b23      	ldr	r3, [pc, #140]	; (8008020 <pl_getbatt+0x100>)
 8007f92:	f7f8 fc83 	bl	800089c <__aeabi_ddiv>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	a318      	add	r3, pc, #96	; (adr r3, 8008000 <pl_getbatt+0xe0>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 fb50 	bl	8000648 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4610      	mov	r0, r2
 8007fae:	4619      	mov	r1, r3
 8007fb0:	a315      	add	r3, pc, #84	; (adr r3, 8008008 <pl_getbatt+0xe8>)
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f7f8 fb47 	bl	8000648 <__aeabi_dmul>
 8007fba:	4602      	mov	r2, r0
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	4610      	mov	r0, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	a313      	add	r3, pc, #76	; (adr r3, 8008010 <pl_getbatt+0xf0>)
 8007fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc8:	f7f8 fc68 	bl	800089c <__aeabi_ddiv>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	4610      	mov	r0, r2
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f7f8 fe10 	bl	8000bf8 <__aeabi_d2f>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	603b      	str	r3, [r7, #0]
return batt;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	ee07 3a90 	vmov	s15, r3
}
 8007fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	f3af 8000 	nop.w
 8007ff0:	66666666 	.word	0x66666666
 8007ff4:	400a6666 	.word	0x400a6666
 8007ff8:	00000000 	.word	0x00000000
 8007ffc:	40affe00 	.word	0x40affe00
 8008000:	66666666 	.word	0x66666666
 8008004:	3ff26666 	.word	0x3ff26666
 8008008:	9999999a 	.word	0x9999999a
 800800c:	400d9999 	.word	0x400d9999
 8008010:	ae147ae1 	.word	0xae147ae1
 8008014:	400ee147 	.word	0x400ee147
 8008018:	20000738 	.word	0x20000738
 800801c:	40340000 	.word	0x40340000
 8008020:	40240000 	.word	0x40240000
 8008024:	00000000 	.word	0x00000000

08008028 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800802e:	4882      	ldr	r0, [pc, #520]	; (8008238 <pl_callback_getSensor+0x210>)
 8008030:	f011 fba2 	bl	8019778 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8008034:	4b81      	ldr	r3, [pc, #516]	; (800823c <pl_callback_getSensor+0x214>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b04      	cmp	r3, #4
 800803a:	f200 80d9 	bhi.w	80081f0 <pl_callback_getSensor+0x1c8>
 800803e:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <pl_callback_getSensor+0x1c>)
 8008040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008044:	08008059 	.word	0x08008059
 8008048:	08008091 	.word	0x08008091
 800804c:	080080f1 	.word	0x080080f1
 8008050:	08008131 	.word	0x08008131
 8008054:	080081f1 	.word	0x080081f1
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8008058:	2201      	movs	r2, #1
 800805a:	2102      	movs	r1, #2
 800805c:	4878      	ldr	r0, [pc, #480]	; (8008240 <pl_callback_getSensor+0x218>)
 800805e:	f013 fe23 	bl	801bca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008062:	2200      	movs	r2, #0
 8008064:	2110      	movs	r1, #16
 8008066:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800806a:	f013 fe1d 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800806e:	2200      	movs	r2, #0
 8008070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008074:	4873      	ldr	r0, [pc, #460]	; (8008244 <pl_callback_getSensor+0x21c>)
 8008076:	f013 fe17 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800807a:	2300      	movs	r3, #0
 800807c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800807e:	e002      	b.n	8008086 <pl_callback_getSensor+0x5e>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3301      	adds	r3, #1
 8008084:	607b      	str	r3, [r7, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800808c:	ddf8      	ble.n	8008080 <pl_callback_getSensor+0x58>
		break;
 800808e:	e0af      	b.n	80081f0 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8008090:	4b6d      	ldr	r3, [pc, #436]	; (8008248 <pl_callback_getSensor+0x220>)
 8008092:	885a      	ldrh	r2, [r3, #2]
 8008094:	4b6d      	ldr	r3, [pc, #436]	; (800824c <pl_callback_getSensor+0x224>)
 8008096:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8008098:	4b6b      	ldr	r3, [pc, #428]	; (8008248 <pl_callback_getSensor+0x220>)
 800809a:	889a      	ldrh	r2, [r3, #4]
 800809c:	4b6b      	ldr	r3, [pc, #428]	; (800824c <pl_callback_getSensor+0x224>)
 800809e:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 80080a0:	4b69      	ldr	r3, [pc, #420]	; (8008248 <pl_callback_getSensor+0x220>)
 80080a2:	88da      	ldrh	r2, [r3, #6]
 80080a4:	4b6a      	ldr	r3, [pc, #424]	; (8008250 <pl_callback_getSensor+0x228>)
 80080a6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 80080a8:	4b67      	ldr	r3, [pc, #412]	; (8008248 <pl_callback_getSensor+0x220>)
 80080aa:	891a      	ldrh	r2, [r3, #8]
 80080ac:	4b68      	ldr	r3, [pc, #416]	; (8008250 <pl_callback_getSensor+0x228>)
 80080ae:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 80080b0:	4b65      	ldr	r3, [pc, #404]	; (8008248 <pl_callback_getSensor+0x220>)
 80080b2:	895a      	ldrh	r2, [r3, #10]
 80080b4:	4b66      	ldr	r3, [pc, #408]	; (8008250 <pl_callback_getSensor+0x228>)
 80080b6:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80080b8:	2200      	movs	r2, #0
 80080ba:	2102      	movs	r1, #2
 80080bc:	4860      	ldr	r0, [pc, #384]	; (8008240 <pl_callback_getSensor+0x218>)
 80080be:	f013 fdf3 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 80080c2:	2201      	movs	r2, #1
 80080c4:	2110      	movs	r1, #16
 80080c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80080ca:	f013 fded 	bl	801bca8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80080ce:	2200      	movs	r2, #0
 80080d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80080d4:	485b      	ldr	r0, [pc, #364]	; (8008244 <pl_callback_getSensor+0x21c>)
 80080d6:	f013 fde7 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80080da:	2300      	movs	r3, #0
 80080dc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80080de:	e002      	b.n	80080e6 <pl_callback_getSensor+0xbe>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	3301      	adds	r3, #1
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ec:	ddf8      	ble.n	80080e0 <pl_callback_getSensor+0xb8>
		break;
 80080ee:	e07f      	b.n	80081f0 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 80080f0:	4b55      	ldr	r3, [pc, #340]	; (8008248 <pl_callback_getSensor+0x220>)
 80080f2:	88da      	ldrh	r2, [r3, #6]
 80080f4:	4b55      	ldr	r3, [pc, #340]	; (800824c <pl_callback_getSensor+0x224>)
 80080f6:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80080f8:	2200      	movs	r2, #0
 80080fa:	2102      	movs	r1, #2
 80080fc:	4850      	ldr	r0, [pc, #320]	; (8008240 <pl_callback_getSensor+0x218>)
 80080fe:	f013 fdd3 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8008102:	2200      	movs	r2, #0
 8008104:	2110      	movs	r1, #16
 8008106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800810a:	f013 fdcd 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 800810e:	2201      	movs	r2, #1
 8008110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008114:	484b      	ldr	r0, [pc, #300]	; (8008244 <pl_callback_getSensor+0x21c>)
 8008116:	f013 fdc7 	bl	801bca8 <HAL_GPIO_WritePin>
		j=0;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800811e:	e002      	b.n	8008126 <pl_callback_getSensor+0xfe>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3301      	adds	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800812c:	ddf8      	ble.n	8008120 <pl_callback_getSensor+0xf8>
		break;
 800812e:	e05f      	b.n	80081f0 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8008130:	4b45      	ldr	r3, [pc, #276]	; (8008248 <pl_callback_getSensor+0x220>)
 8008132:	885a      	ldrh	r2, [r3, #2]
 8008134:	4b46      	ldr	r3, [pc, #280]	; (8008250 <pl_callback_getSensor+0x228>)
 8008136:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8008138:	4b43      	ldr	r3, [pc, #268]	; (8008248 <pl_callback_getSensor+0x220>)
 800813a:	889a      	ldrh	r2, [r3, #4]
 800813c:	4b44      	ldr	r3, [pc, #272]	; (8008250 <pl_callback_getSensor+0x228>)
 800813e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8008140:	4b41      	ldr	r3, [pc, #260]	; (8008248 <pl_callback_getSensor+0x220>)
 8008142:	891a      	ldrh	r2, [r3, #8]
 8008144:	4b41      	ldr	r3, [pc, #260]	; (800824c <pl_callback_getSensor+0x224>)
 8008146:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8008148:	4b3f      	ldr	r3, [pc, #252]	; (8008248 <pl_callback_getSensor+0x220>)
 800814a:	895a      	ldrh	r2, [r3, #10]
 800814c:	4b3f      	ldr	r3, [pc, #252]	; (800824c <pl_callback_getSensor+0x224>)
 800814e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008150:	2200      	movs	r2, #0
 8008152:	2102      	movs	r1, #2
 8008154:	483a      	ldr	r0, [pc, #232]	; (8008240 <pl_callback_getSensor+0x218>)
 8008156:	f013 fda7 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800815a:	2200      	movs	r2, #0
 800815c:	2110      	movs	r1, #16
 800815e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008162:	f013 fda1 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008166:	2200      	movs	r2, #0
 8008168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800816c:	4835      	ldr	r0, [pc, #212]	; (8008244 <pl_callback_getSensor+0x21c>)
 800816e:	f013 fd9b 	bl	801bca8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8008172:	2300      	movs	r3, #0
 8008174:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8008176:	e002      	b.n	800817e <pl_callback_getSensor+0x156>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3301      	adds	r3, #1
 800817c:	607b      	str	r3, [r7, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2b32      	cmp	r3, #50	; 0x32
 8008182:	ddf9      	ble.n	8008178 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8008184:	4b30      	ldr	r3, [pc, #192]	; (8008248 <pl_callback_getSensor+0x220>)
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 800818a:	887b      	ldrh	r3, [r7, #2]
 800818c:	ee07 3a90 	vmov	s15, r3
 8008190:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008194:	ee17 0a90 	vmov	r0, s15
 8008198:	f7f8 f9fe 	bl	8000598 <__aeabi_f2d>
 800819c:	a320      	add	r3, pc, #128	; (adr r3, 8008220 <pl_callback_getSensor+0x1f8>)
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	f7f8 fa51 	bl	8000648 <__aeabi_dmul>
 80081a6:	4602      	mov	r2, r0
 80081a8:	460b      	mov	r3, r1
 80081aa:	4610      	mov	r0, r2
 80081ac:	4619      	mov	r1, r3
 80081ae:	a31e      	add	r3, pc, #120	; (adr r3, 8008228 <pl_callback_getSensor+0x200>)
 80081b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b4:	f7f8 fb72 	bl	800089c <__aeabi_ddiv>
 80081b8:	4602      	mov	r2, r0
 80081ba:	460b      	mov	r3, r1
 80081bc:	4610      	mov	r0, r2
 80081be:	4619      	mov	r1, r3
 80081c0:	a31b      	add	r3, pc, #108	; (adr r3, 8008230 <pl_callback_getSensor+0x208>)
 80081c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c6:	f7f8 fa3f 	bl	8000648 <__aeabi_dmul>
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4610      	mov	r0, r2
 80081d0:	4619      	mov	r1, r3
 80081d2:	f04f 0200 	mov.w	r2, #0
 80081d6:	4b1f      	ldr	r3, [pc, #124]	; (8008254 <pl_callback_getSensor+0x22c>)
 80081d8:	f7f8 fb60 	bl	800089c <__aeabi_ddiv>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4610      	mov	r0, r2
 80081e2:	4619      	mov	r1, r3
 80081e4:	f7f8 fd08 	bl	8000bf8 <__aeabi_d2f>
 80081e8:	4603      	mov	r3, r0
 80081ea:	4a1b      	ldr	r2, [pc, #108]	; (8008258 <pl_callback_getSensor+0x230>)
 80081ec:	6013      	str	r3, [r2, #0]
		break;
 80081ee:	bf00      	nop

		break;
	}


	AD_step++;
 80081f0:	4b12      	ldr	r3, [pc, #72]	; (800823c <pl_callback_getSensor+0x214>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	b2da      	uxtb	r2, r3
 80081f8:	4b10      	ldr	r3, [pc, #64]	; (800823c <pl_callback_getSensor+0x214>)
 80081fa:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <pl_callback_getSensor+0x214>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d005      	beq.n	8008210 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008204:	2206      	movs	r2, #6
 8008206:	4910      	ldr	r1, [pc, #64]	; (8008248 <pl_callback_getSensor+0x220>)
 8008208:	480b      	ldr	r0, [pc, #44]	; (8008238 <pl_callback_getSensor+0x210>)
 800820a:	f011 f9eb 	bl	80195e4 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 800820e:	e002      	b.n	8008216 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8008210:	4b0a      	ldr	r3, [pc, #40]	; (800823c <pl_callback_getSensor+0x214>)
 8008212:	2200      	movs	r2, #0
 8008214:	701a      	strb	r2, [r3, #0]
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	66666666 	.word	0x66666666
 8008224:	400a6666 	.word	0x400a6666
 8008228:	00000000 	.word	0x00000000
 800822c:	40affe00 	.word	0x40affe00
 8008230:	00000000 	.word	0x00000000
 8008234:	4062c000 	.word	0x4062c000
 8008238:	20000738 	.word	0x20000738
 800823c:	2000070c 	.word	0x2000070c
 8008240:	48000400 	.word	0x48000400
 8008244:	48000800 	.word	0x48000800
 8008248:	20000700 	.word	0x20000700
 800824c:	20000710 	.word	0x20000710
 8008250:	2000071c 	.word	0x2000071c
 8008254:	40490000 	.word	0x40490000
 8008258:	20000728 	.word	0x20000728

0800825c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 800825c:	b580      	push	{r7, lr}
 800825e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8008260:	2206      	movs	r2, #6
 8008262:	4903      	ldr	r1, [pc, #12]	; (8008270 <pl_interupt_getSensor+0x14>)
 8008264:	4803      	ldr	r0, [pc, #12]	; (8008274 <pl_interupt_getSensor+0x18>)
 8008266:	f011 f9bd 	bl	80195e4 <HAL_ADC_Start_DMA>

}
 800826a:	bf00      	nop
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	20000700 	.word	0x20000700
 8008274:	20000738 	.word	0x20000738

08008278 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
	count_mode=0;
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <pl_timer_init+0x1c>)
 800827e:	2200      	movs	r2, #0
 8008280:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008282:	4b05      	ldr	r3, [pc, #20]	; (8008298 <pl_timer_init+0x20>)
 8008284:	f04f 0200 	mov.w	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 800828a:	4804      	ldr	r0, [pc, #16]	; (800829c <pl_timer_init+0x24>)
 800828c:	f015 fcb4 	bl	801dbf8 <HAL_TIM_Base_Start_IT>
}
 8008290:	bf00      	nop
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000734 	.word	0x20000734
 8008298:	20000730 	.word	0x20000730
 800829c:	2000ee90 	.word	0x2000ee90

080082a0 <interrupt_timer>:

void interrupt_timer(void){
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
	g_timCount++;
 80082a4:	4b10      	ldr	r3, [pc, #64]	; (80082e8 <interrupt_timer+0x48>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	3301      	adds	r3, #1
 80082aa:	4a0f      	ldr	r2, [pc, #60]	; (80082e8 <interrupt_timer+0x48>)
 80082ac:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <interrupt_timer+0x4c>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d112      	bne.n	80082dc <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 80082b6:	4b0e      	ldr	r3, [pc, #56]	; (80082f0 <interrupt_timer+0x50>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7f8 f96c 	bl	8000598 <__aeabi_f2d>
 80082c0:	a307      	add	r3, pc, #28	; (adr r3, 80082e0 <interrupt_timer+0x40>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f809 	bl	80002dc <__adddf3>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4610      	mov	r0, r2
 80082d0:	4619      	mov	r1, r3
 80082d2:	f7f8 fc91 	bl	8000bf8 <__aeabi_d2f>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4a05      	ldr	r2, [pc, #20]	; (80082f0 <interrupt_timer+0x50>)
 80082da:	6013      	str	r3, [r2, #0]
	}

}
 80082dc:	bf00      	nop
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80082e4:	3f50624d 	.word	0x3f50624d
 80082e8:	2000072c 	.word	0x2000072c
 80082ec:	20000734 	.word	0x20000734
 80082f0:	20000730 	.word	0x20000730

080082f4 <tic_timer>:

void tic_timer(void){
 80082f4:	b480      	push	{r7}
 80082f6:	af00      	add	r7, sp, #0
	count_mode=1;
 80082f8:	4b05      	ldr	r3, [pc, #20]	; (8008310 <tic_timer+0x1c>)
 80082fa:	2201      	movs	r2, #1
 80082fc:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <tic_timer+0x20>)
 8008300:	f04f 0200 	mov.w	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
}
 8008306:	bf00      	nop
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	20000734 	.word	0x20000734
 8008314:	20000730 	.word	0x20000730

08008318 <toc_timer>:

float toc_timer(void){
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 800831e:	4b0a      	ldr	r3, [pc, #40]	; (8008348 <toc_timer+0x30>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8008324:	4b09      	ldr	r3, [pc, #36]	; (800834c <toc_timer+0x34>)
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 800832a:	4b07      	ldr	r3, [pc, #28]	; (8008348 <toc_timer+0x30>)
 800832c:	f04f 0200 	mov.w	r2, #0
 8008330:	601a      	str	r2, [r3, #0]
	return timer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	ee07 3a90 	vmov	s15, r3
}
 8008338:	eeb0 0a67 	vmov.f32	s0, s15
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000730 	.word	0x20000730
 800834c:	20000734 	.word	0x20000734

08008350 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008358:	4b1d      	ldr	r3, [pc, #116]	; (80083d0 <wait_ms+0x80>)
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 800835e:	4b1d      	ldr	r3, [pc, #116]	; (80083d4 <wait_ms+0x84>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2200      	movs	r2, #0
 8008364:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008366:	bf00      	nop
 8008368:	4b19      	ldr	r3, [pc, #100]	; (80083d0 <wait_ms+0x80>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	ee07 3a90 	vmov	s15, r3
 8008370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008374:	ee17 0a90 	vmov	r0, s15
 8008378:	f7f8 f90e 	bl	8000598 <__aeabi_f2d>
 800837c:	a312      	add	r3, pc, #72	; (adr r3, 80083c8 <wait_ms+0x78>)
 800837e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008382:	f7f8 f961 	bl	8000648 <__aeabi_dmul>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4610      	mov	r0, r2
 800838c:	4619      	mov	r1, r3
 800838e:	a30e      	add	r3, pc, #56	; (adr r3, 80083c8 <wait_ms+0x78>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f7f8 fa82 	bl	800089c <__aeabi_ddiv>
 8008398:	4602      	mov	r2, r0
 800839a:	460b      	mov	r3, r1
 800839c:	4614      	mov	r4, r2
 800839e:	461d      	mov	r5, r3
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7f8 f8d7 	bl	8000554 <__aeabi_ui2d>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4620      	mov	r0, r4
 80083ac:	4629      	mov	r1, r5
 80083ae:	f7f8 fbbd 	bl	8000b2c <__aeabi_dcmplt>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1d7      	bne.n	8008368 <wait_ms+0x18>
        }

}
 80083b8:	bf00      	nop
 80083ba:	bf00      	nop
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bdb0      	pop	{r4, r5, r7, pc}
 80083c2:	bf00      	nop
 80083c4:	f3af 8000 	nop.w
 80083c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80083cc:	3f50624d 	.word	0x3f50624d
 80083d0:	2000072c 	.word	0x2000072c
 80083d4:	2000ee90 	.word	0x2000ee90

080083d8 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 80083d8:	b5b0      	push	{r4, r5, r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80083e0:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <wait_ms_NoReset+0x78>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80083e6:	bf00      	nop
 80083e8:	4b19      	ldr	r3, [pc, #100]	; (8008450 <wait_ms_NoReset+0x78>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	ee07 3a90 	vmov	s15, r3
 80083f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f4:	ee17 0a90 	vmov	r0, s15
 80083f8:	f7f8 f8ce 	bl	8000598 <__aeabi_f2d>
 80083fc:	a312      	add	r3, pc, #72	; (adr r3, 8008448 <wait_ms_NoReset+0x70>)
 80083fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008402:	f7f8 f921 	bl	8000648 <__aeabi_dmul>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4610      	mov	r0, r2
 800840c:	4619      	mov	r1, r3
 800840e:	a30e      	add	r3, pc, #56	; (adr r3, 8008448 <wait_ms_NoReset+0x70>)
 8008410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008414:	f7f8 fa42 	bl	800089c <__aeabi_ddiv>
 8008418:	4602      	mov	r2, r0
 800841a:	460b      	mov	r3, r1
 800841c:	4614      	mov	r4, r2
 800841e:	461d      	mov	r5, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7f8 f897 	bl	8000554 <__aeabi_ui2d>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4620      	mov	r0, r4
 800842c:	4629      	mov	r1, r5
 800842e:	f7f8 fb7d 	bl	8000b2c <__aeabi_dcmplt>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1d7      	bne.n	80083e8 <wait_ms_NoReset+0x10>
        }

}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bdb0      	pop	{r4, r5, r7, pc}
 8008442:	bf00      	nop
 8008444:	f3af 8000 	nop.w
 8008448:	d2f1a9fc 	.word	0xd2f1a9fc
 800844c:	3f50624d 	.word	0x3f50624d
 8008450:	2000072c 	.word	0x2000072c

08008454 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08c      	sub	sp, #48	; 0x30
 8008458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800845a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800845e:	2200      	movs	r2, #0
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	605a      	str	r2, [r3, #4]
 8008464:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008466:	1d3b      	adds	r3, r7, #4
 8008468:	2220      	movs	r2, #32
 800846a:	2100      	movs	r1, #0
 800846c:	4618      	mov	r0, r3
 800846e:	f017 fd3f 	bl	801fef0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008472:	4b56      	ldr	r3, [pc, #344]	; (80085cc <MX_ADC1_Init+0x178>)
 8008474:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008478:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800847a:	4b54      	ldr	r3, [pc, #336]	; (80085cc <MX_ADC1_Init+0x178>)
 800847c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008480:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008482:	4b52      	ldr	r3, [pc, #328]	; (80085cc <MX_ADC1_Init+0x178>)
 8008484:	2200      	movs	r2, #0
 8008486:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008488:	4b50      	ldr	r3, [pc, #320]	; (80085cc <MX_ADC1_Init+0x178>)
 800848a:	2200      	movs	r2, #0
 800848c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800848e:	4b4f      	ldr	r3, [pc, #316]	; (80085cc <MX_ADC1_Init+0x178>)
 8008490:	2200      	movs	r2, #0
 8008492:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008494:	4b4d      	ldr	r3, [pc, #308]	; (80085cc <MX_ADC1_Init+0x178>)
 8008496:	2201      	movs	r2, #1
 8008498:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800849a:	4b4c      	ldr	r3, [pc, #304]	; (80085cc <MX_ADC1_Init+0x178>)
 800849c:	2208      	movs	r2, #8
 800849e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80084a0:	4b4a      	ldr	r3, [pc, #296]	; (80085cc <MX_ADC1_Init+0x178>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80084a6:	4b49      	ldr	r3, [pc, #292]	; (80085cc <MX_ADC1_Init+0x178>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80084ac:	4b47      	ldr	r3, [pc, #284]	; (80085cc <MX_ADC1_Init+0x178>)
 80084ae:	2206      	movs	r2, #6
 80084b0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80084b2:	4b46      	ldr	r3, [pc, #280]	; (80085cc <MX_ADC1_Init+0x178>)
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80084ba:	4b44      	ldr	r3, [pc, #272]	; (80085cc <MX_ADC1_Init+0x178>)
 80084bc:	2200      	movs	r2, #0
 80084be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80084c0:	4b42      	ldr	r3, [pc, #264]	; (80085cc <MX_ADC1_Init+0x178>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80084c6:	4b41      	ldr	r3, [pc, #260]	; (80085cc <MX_ADC1_Init+0x178>)
 80084c8:	2201      	movs	r2, #1
 80084ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80084ce:	4b3f      	ldr	r3, [pc, #252]	; (80085cc <MX_ADC1_Init+0x178>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80084d4:	4b3d      	ldr	r3, [pc, #244]	; (80085cc <MX_ADC1_Init+0x178>)
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80084dc:	483b      	ldr	r0, [pc, #236]	; (80085cc <MX_ADC1_Init+0x178>)
 80084de:	f010 fcdb 	bl	8018e98 <HAL_ADC_Init>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d001      	beq.n	80084ec <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80084e8:	f001 fac5 	bl	8009a76 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80084ec:	2300      	movs	r3, #0
 80084ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80084f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f4:	4619      	mov	r1, r3
 80084f6:	4835      	ldr	r0, [pc, #212]	; (80085cc <MX_ADC1_Init+0x178>)
 80084f8:	f012 fb28 	bl	801ab4c <HAL_ADCEx_MultiModeConfigChannel>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008502:	f001 fab8 	bl	8009a76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008506:	4b32      	ldr	r3, [pc, #200]	; (80085d0 <MX_ADC1_Init+0x17c>)
 8008508:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800850a:	2306      	movs	r3, #6
 800850c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800850e:	2301      	movs	r3, #1
 8008510:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008512:	237f      	movs	r3, #127	; 0x7f
 8008514:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008516:	2304      	movs	r3, #4
 8008518:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800851e:	1d3b      	adds	r3, r7, #4
 8008520:	4619      	mov	r1, r3
 8008522:	482a      	ldr	r0, [pc, #168]	; (80085cc <MX_ADC1_Init+0x178>)
 8008524:	f011 fbee 	bl	8019d04 <HAL_ADC_ConfigChannel>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800852e:	f001 faa2 	bl	8009a76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008532:	4b28      	ldr	r3, [pc, #160]	; (80085d4 <MX_ADC1_Init+0x180>)
 8008534:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008536:	230c      	movs	r3, #12
 8008538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800853a:	1d3b      	adds	r3, r7, #4
 800853c:	4619      	mov	r1, r3
 800853e:	4823      	ldr	r0, [pc, #140]	; (80085cc <MX_ADC1_Init+0x178>)
 8008540:	f011 fbe0 	bl	8019d04 <HAL_ADC_ConfigChannel>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800854a:	f001 fa94 	bl	8009a76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800854e:	4b22      	ldr	r3, [pc, #136]	; (80085d8 <MX_ADC1_Init+0x184>)
 8008550:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008552:	2312      	movs	r3, #18
 8008554:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008556:	1d3b      	adds	r3, r7, #4
 8008558:	4619      	mov	r1, r3
 800855a:	481c      	ldr	r0, [pc, #112]	; (80085cc <MX_ADC1_Init+0x178>)
 800855c:	f011 fbd2 	bl	8019d04 <HAL_ADC_ConfigChannel>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d001      	beq.n	800856a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8008566:	f001 fa86 	bl	8009a76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800856a:	4b1c      	ldr	r3, [pc, #112]	; (80085dc <MX_ADC1_Init+0x188>)
 800856c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800856e:	2318      	movs	r3, #24
 8008570:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008572:	1d3b      	adds	r3, r7, #4
 8008574:	4619      	mov	r1, r3
 8008576:	4815      	ldr	r0, [pc, #84]	; (80085cc <MX_ADC1_Init+0x178>)
 8008578:	f011 fbc4 	bl	8019d04 <HAL_ADC_ConfigChannel>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008582:	f001 fa78 	bl	8009a76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008586:	4b16      	ldr	r3, [pc, #88]	; (80085e0 <MX_ADC1_Init+0x18c>)
 8008588:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800858a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800858e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008590:	1d3b      	adds	r3, r7, #4
 8008592:	4619      	mov	r1, r3
 8008594:	480d      	ldr	r0, [pc, #52]	; (80085cc <MX_ADC1_Init+0x178>)
 8008596:	f011 fbb5 	bl	8019d04 <HAL_ADC_ConfigChannel>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80085a0:	f001 fa69 	bl	8009a76 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80085a4:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <MX_ADC1_Init+0x190>)
 80085a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80085a8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80085ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80085ae:	1d3b      	adds	r3, r7, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4806      	ldr	r0, [pc, #24]	; (80085cc <MX_ADC1_Init+0x178>)
 80085b4:	f011 fba6 	bl	8019d04 <HAL_ADC_ConfigChannel>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80085be:	f001 fa5a 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80085c2:	bf00      	nop
 80085c4:	3730      	adds	r7, #48	; 0x30
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000738 	.word	0x20000738
 80085d0:	2e300800 	.word	0x2e300800
 80085d4:	3ef08000 	.word	0x3ef08000
 80085d8:	10c00010 	.word	0x10c00010
 80085dc:	0c900008 	.word	0x0c900008
 80085e0:	08600004 	.word	0x08600004
 80085e4:	04300002 	.word	0x04300002

080085e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b09e      	sub	sp, #120	; 0x78
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80085f4:	2200      	movs	r2, #0
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	605a      	str	r2, [r3, #4]
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	60da      	str	r2, [r3, #12]
 80085fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008600:	f107 0314 	add.w	r3, r7, #20
 8008604:	2250      	movs	r2, #80	; 0x50
 8008606:	2100      	movs	r1, #0
 8008608:	4618      	mov	r0, r3
 800860a:	f017 fc71 	bl	801fef0 <memset>
  if(adcHandle->Instance==ADC1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008616:	f040 8082 	bne.w	800871e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800861a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008620:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008624:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008626:	f107 0314 	add.w	r3, r7, #20
 800862a:	4618      	mov	r0, r3
 800862c:	f014 f938 	bl	801c8a0 <HAL_RCCEx_PeriphCLKConfig>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008636:	f001 fa1e 	bl	8009a76 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800863a:	4b3b      	ldr	r3, [pc, #236]	; (8008728 <HAL_ADC_MspInit+0x140>)
 800863c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800863e:	4a3a      	ldr	r2, [pc, #232]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008640:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008646:	4b38      	ldr	r3, [pc, #224]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800864a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800864e:	613b      	str	r3, [r7, #16]
 8008650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008652:	4b35      	ldr	r3, [pc, #212]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008656:	4a34      	ldr	r2, [pc, #208]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008658:	f043 0301 	orr.w	r3, r3, #1
 800865c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800865e:	4b32      	ldr	r3, [pc, #200]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008662:	f003 0301 	and.w	r3, r3, #1
 8008666:	60fb      	str	r3, [r7, #12]
 8008668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800866a:	4b2f      	ldr	r3, [pc, #188]	; (8008728 <HAL_ADC_MspInit+0x140>)
 800866c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800866e:	4a2e      	ldr	r2, [pc, #184]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008670:	f043 0302 	orr.w	r3, r3, #2
 8008674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008676:	4b2c      	ldr	r3, [pc, #176]	; (8008728 <HAL_ADC_MspInit+0x140>)
 8008678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867a:	f003 0302 	and.w	r3, r3, #2
 800867e:	60bb      	str	r3, [r7, #8]
 8008680:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008682:	230f      	movs	r3, #15
 8008684:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008686:	2303      	movs	r3, #3
 8008688:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868a:	2300      	movs	r3, #0
 800868c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800868e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008692:	4619      	mov	r1, r3
 8008694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008698:	f013 f984 	bl	801b9a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 800869c:	f241 0301 	movw	r3, #4097	; 0x1001
 80086a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086a2:	2303      	movs	r3, #3
 80086a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a6:	2300      	movs	r3, #0
 80086a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80086ae:	4619      	mov	r1, r3
 80086b0:	481e      	ldr	r0, [pc, #120]	; (800872c <HAL_ADC_MspInit+0x144>)
 80086b2:	f013 f977 	bl	801b9a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80086b6:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086b8:	4a1e      	ldr	r2, [pc, #120]	; (8008734 <HAL_ADC_MspInit+0x14c>)
 80086ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80086bc:	4b1c      	ldr	r3, [pc, #112]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086be:	2205      	movs	r2, #5
 80086c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086c2:	4b1b      	ldr	r3, [pc, #108]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80086c8:	4b19      	ldr	r3, [pc, #100]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80086ce:	4b18      	ldr	r3, [pc, #96]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086d0:	2280      	movs	r2, #128	; 0x80
 80086d2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80086d4:	4b16      	ldr	r3, [pc, #88]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086da:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80086dc:	4b14      	ldr	r3, [pc, #80]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80086e2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80086e4:	4b12      	ldr	r3, [pc, #72]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086e6:	2220      	movs	r2, #32
 80086e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80086ea:	4b11      	ldr	r3, [pc, #68]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80086f2:	480f      	ldr	r0, [pc, #60]	; (8008730 <HAL_ADC_MspInit+0x148>)
 80086f4:	f012 fc22 	bl	801af3c <HAL_DMA_Init>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d001      	beq.n	8008702 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 80086fe:	f001 f9ba 	bl	8009a76 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <HAL_ADC_MspInit+0x148>)
 8008706:	655a      	str	r2, [r3, #84]	; 0x54
 8008708:	4a09      	ldr	r2, [pc, #36]	; (8008730 <HAL_ADC_MspInit+0x148>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800870e:	2200      	movs	r2, #0
 8008710:	2100      	movs	r1, #0
 8008712:	2012      	movs	r0, #18
 8008714:	f012 fbdd 	bl	801aed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008718:	2012      	movs	r0, #18
 800871a:	f012 fbf4 	bl	801af06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800871e:	bf00      	nop
 8008720:	3778      	adds	r7, #120	; 0x78
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	40021000 	.word	0x40021000
 800872c:	48000400 	.word	0x48000400
 8008730:	200007a4 	.word	0x200007a4
 8008734:	40020008 	.word	0x40020008

08008738 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008740:	f7ff fc72 	bl	8008028 <pl_callback_getSensor>
}
 8008744:	bf00      	nop
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 800874c:	b084      	sub	sp, #16
 800874e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	f107 0420 	add.w	r4, r7, #32
 800875a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800875e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008762:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800876a:	f2c0 819d 	blt.w	8008aa8 <cal_table+0x35c>
	switch (g_acc_flag) {
 800876e:	4bcd      	ldr	r3, [pc, #820]	; (8008aa4 <cal_table+0x358>)
 8008770:	781b      	ldrb	r3, [r3, #0]
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b06      	cmp	r3, #6
 8008776:	f200 833a 	bhi.w	8008dee <cal_table+0x6a2>
 800877a:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <cal_table+0x34>)
 800877c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008780:	08008de1 	.word	0x08008de1
 8008784:	0800879d 	.word	0x0800879d
 8008788:	0800890f 	.word	0x0800890f
 800878c:	08008a2d 	.word	0x08008a2d
 8008790:	08008de1 	.word	0x08008de1
 8008794:	08008a59 	.word	0x08008a59
 8008798:	08008a7f 	.word	0x08008a7f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 800879c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879e:	ed93 7a00 	vldr	s14, [r3]
 80087a2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ae:	db0a      	blt.n	80087c6 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80087b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80087b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b8:	f04f 0200 	mov.w	r2, #0
 80087bc:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80087be:	4bb9      	ldr	r3, [pc, #740]	; (8008aa4 <cal_table+0x358>)
 80087c0:	2202      	movs	r2, #2
 80087c2:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80087c4:	e313      	b.n	8008dee <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80087c6:	ed97 7a08 	vldr	s14, [r7, #32]
 80087ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087cc:	edd3 7a00 	vldr	s15, [r3]
 80087d0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80087d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d6:	edd3 7a00 	vldr	s15, [r3]
 80087da:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80087de:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80087e2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80087e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80087ee:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80087fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008802:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008806:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800880a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800880e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008816:	d900      	bls.n	800881a <cal_table+0xce>
		break;
 8008818:	e2e9      	b.n	8008dee <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	edd3 7a00 	vldr	s15, [r3]
 8008820:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008826:	edd3 7a00 	vldr	s15, [r3]
 800882a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800882e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008832:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008836:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800883a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800883e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008842:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800884a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800884e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008856:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008862:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008868:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800886c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008870:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	4618      	mov	r0, r3
 800887a:	f7f7 fe8d 	bl	8000598 <__aeabi_f2d>
 800887e:	4604      	mov	r4, r0
 8008880:	460d      	mov	r5, r1
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	4618      	mov	r0, r3
 8008886:	f7f7 fe87 	bl	8000598 <__aeabi_f2d>
 800888a:	f04f 0200 	mov.w	r2, #0
 800888e:	f04f 0300 	mov.w	r3, #0
 8008892:	f7f7 fed9 	bl	8000648 <__aeabi_dmul>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4690      	mov	r8, r2
 800889c:	4699      	mov	r9, r3
 800889e:	edd7 7a01 	vldr	s15, [r7, #4]
 80088a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80088a6:	ee17 0a90 	vmov	r0, s15
 80088aa:	f7f7 fe75 	bl	8000598 <__aeabi_f2d>
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4640      	mov	r0, r8
 80088b4:	4649      	mov	r1, r9
 80088b6:	f7f7 fec7 	bl	8000648 <__aeabi_dmul>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f7 fd09 	bl	80002d8 <__aeabi_dsub>
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4610      	mov	r0, r2
 80088cc:	4619      	mov	r1, r3
 80088ce:	f7f8 f993 	bl	8000bf8 <__aeabi_d2f>
 80088d2:	4602      	mov	r2, r0
 80088d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088d6:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80088d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088da:	ed93 7a00 	vldr	s14, [r3]
 80088de:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80088e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80088ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80088ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80088f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f4:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 80088f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80088fc:	eef1 7a67 	vneg.f32	s15, s15
 8008900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008902:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8008906:	4b67      	ldr	r3, [pc, #412]	; (8008aa4 <cal_table+0x358>)
 8008908:	2203      	movs	r2, #3
 800890a:	701a      	strb	r2, [r3, #0]
		break;
 800890c:	e26f      	b.n	8008dee <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800890e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	edd3 7a02 	vldr	s15, [r3, #8]
 8008918:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800891c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008920:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008924:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008928:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800892c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008930:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008934:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008938:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800893c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008940:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008944:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008948:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008950:	d900      	bls.n	8008954 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008952:	e24c      	b.n	8008dee <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008956:	ed93 7a02 	vldr	s14, [r3, #8]
 800895a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800895e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008962:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008966:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800896a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800896e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008972:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008976:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800897a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800897e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008982:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008986:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800898a:	edd7 7a08 	vldr	s15, [r7, #32]
 800898e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008994:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800899c:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80089a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7f7 fdf7 	bl	8000598 <__aeabi_f2d>
 80089aa:	4604      	mov	r4, r0
 80089ac:	460d      	mov	r5, r1
 80089ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7f7 fdf1 	bl	8000598 <__aeabi_f2d>
 80089b6:	f04f 0200 	mov.w	r2, #0
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	f7f7 fe43 	bl	8000648 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	4690      	mov	r8, r2
 80089c8:	4699      	mov	r9, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7f7 fde4 	bl	8000598 <__aeabi_f2d>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4640      	mov	r0, r8
 80089d6:	4649      	mov	r1, r9
 80089d8:	f7f7 fe36 	bl	8000648 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4620      	mov	r0, r4
 80089e2:	4629      	mov	r1, r5
 80089e4:	f7f7 fc78 	bl	80002d8 <__aeabi_dsub>
 80089e8:	4602      	mov	r2, r0
 80089ea:	460b      	mov	r3, r1
 80089ec:	4610      	mov	r0, r2
 80089ee:	4619      	mov	r1, r3
 80089f0:	f7f8 f902 	bl	8000bf8 <__aeabi_d2f>
 80089f4:	4602      	mov	r2, r0
 80089f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f8:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 80089fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fc:	ed93 7a00 	vldr	s14, [r3]
 8008a00:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008a04:	edd7 7a01 	vldr	s15, [r7, #4]
 8008a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a12:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8008a16:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008a1a:	eef1 7a67 	vneg.f32	s15, s15
 8008a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a20:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8008a24:	4b1f      	ldr	r3, [pc, #124]	; (8008aa4 <cal_table+0x358>)
 8008a26:	2203      	movs	r2, #3
 8008a28:	701a      	strb	r2, [r3, #0]
		break;
 8008a2a:	e1e0      	b.n	8008dee <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2e:	ed93 7a00 	vldr	s14, [r3]
 8008a32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3e:	d900      	bls.n	8008a42 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a40:	e1d5      	b.n	8008dee <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a46:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4a:	f04f 0200 	mov.w	r2, #0
 8008a4e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a50:	4b14      	ldr	r3, [pc, #80]	; (8008aa4 <cal_table+0x358>)
 8008a52:	2204      	movs	r2, #4
 8008a54:	701a      	strb	r2, [r3, #0]
		break;
 8008a56:	e1ca      	b.n	8008dee <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a5e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a6a:	da00      	bge.n	8008a6e <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a6c:	e1bf      	b.n	8008dee <cal_table+0x6a2>
			target->acceleration = 0;
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	f04f 0200 	mov.w	r2, #0
 8008a74:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <cal_table+0x358>)
 8008a78:	2204      	movs	r2, #4
 8008a7a:	701a      	strb	r2, [r3, #0]
		break;
 8008a7c:	e1b7      	b.n	8008dee <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8008a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a80:	ed93 7a02 	vldr	s14, [r3, #8]
 8008a84:	edd7 7a08 	vldr	s15, [r7, #32]
 8008a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a90:	da00      	bge.n	8008a94 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008a92:	e1ac      	b.n	8008dee <cal_table+0x6a2>
			target->acceleration = 0;
 8008a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a96:	f04f 0200 	mov.w	r2, #0
 8008a9a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008a9c:	4b01      	ldr	r3, [pc, #4]	; (8008aa4 <cal_table+0x358>)
 8008a9e:	2204      	movs	r2, #4
 8008aa0:	701a      	strb	r2, [r3, #0]
		break;
 8008aa2:	e1a4      	b.n	8008dee <cal_table+0x6a2>
 8008aa4:	20000808 	.word	0x20000808
	}
}else{
	switch (g_acc_flag) {
 8008aa8:	4bce      	ldr	r3, [pc, #824]	; (8008de4 <cal_table+0x698>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b06      	cmp	r3, #6
 8008ab0:	f200 819d 	bhi.w	8008dee <cal_table+0x6a2>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <cal_table+0x370>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008ded 	.word	0x08008ded
 8008ac0:	08008ad9 	.word	0x08008ad9
 8008ac4:	08008c4b 	.word	0x08008c4b
 8008ac8:	08008d61 	.word	0x08008d61
 8008acc:	08008d8d 	.word	0x08008d8d
 8008ad0:	08008d95 	.word	0x08008d95
 8008ad4:	08008dbb 	.word	0x08008dbb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ada:	ed93 7a00 	vldr	s14, [r3]
 8008ade:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008ae2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aea:	d80a      	bhi.n	8008b02 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8008aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af0:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008afa:	4bba      	ldr	r3, [pc, #744]	; (8008de4 <cal_table+0x698>)
 8008afc:	2202      	movs	r2, #2
 8008afe:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008b00:	e175      	b.n	8008dee <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008b02:	edd7 7a08 	vldr	s15, [r7, #32]
 8008b06:	eeb1 7a67 	vneg.f32	s14, s15
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0c:	edd3 7a00 	vldr	s15, [r3]
 8008b10:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	edd3 7a00 	vldr	s15, [r3]
 8008b1a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008b1e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008b22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b26:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b2a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008b2e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008b32:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b36:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b3a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008b3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b42:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008b46:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008b4a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008b4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b56:	d900      	bls.n	8008b5a <cal_table+0x40e>
		break;
 8008b58:	e149      	b.n	8008dee <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8008b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5c:	edd3 7a00 	vldr	s15, [r3]
 8008b60:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b66:	edd3 7a00 	vldr	s15, [r3]
 8008b6a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008b6e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008b72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b7a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008b7e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008b82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8008b8e:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008b92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b9a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba2:	edd7 7a08 	vldr	s15, [r7, #32]
 8008ba6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bb4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f7f7 fceb 	bl	8000598 <__aeabi_f2d>
 8008bc2:	4604      	mov	r4, r0
 8008bc4:	460d      	mov	r5, r1
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f7f7 fce5 	bl	8000598 <__aeabi_f2d>
 8008bce:	f04f 0200 	mov.w	r2, #0
 8008bd2:	f04f 0300 	mov.w	r3, #0
 8008bd6:	f7f7 fd37 	bl	8000648 <__aeabi_dmul>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4690      	mov	r8, r2
 8008be0:	4699      	mov	r9, r3
 8008be2:	edd7 7a01 	vldr	s15, [r7, #4]
 8008be6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008bea:	ee17 0a90 	vmov	r0, s15
 8008bee:	f7f7 fcd3 	bl	8000598 <__aeabi_f2d>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	4640      	mov	r0, r8
 8008bf8:	4649      	mov	r1, r9
 8008bfa:	f7f7 fd25 	bl	8000648 <__aeabi_dmul>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4620      	mov	r0, r4
 8008c04:	4629      	mov	r1, r5
 8008c06:	f7f7 fb69 	bl	80002dc <__adddf3>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	4610      	mov	r0, r2
 8008c10:	4619      	mov	r1, r3
 8008c12:	f7f7 fff1 	bl	8000bf8 <__aeabi_d2f>
 8008c16:	4602      	mov	r2, r0
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8008c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1e:	ed93 7a00 	vldr	s14, [r3]
 8008c22:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c2a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c38:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8008c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c40:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8008c42:	4b68      	ldr	r3, [pc, #416]	; (8008de4 <cal_table+0x698>)
 8008c44:	2203      	movs	r2, #3
 8008c46:	701a      	strb	r2, [r3, #0]
		break;
 8008c48:	e0d1      	b.n	8008dee <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8008c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c50:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c54:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008c58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008c5c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c60:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008c64:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008c68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008c6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008c70:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008c74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c78:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008c7c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008c80:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8008c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c8c:	d900      	bls.n	8008c90 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008c8e:	e0ae      	b.n	8008dee <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c92:	ed93 7a02 	vldr	s14, [r3, #8]
 8008c96:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008c9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008c9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008ca2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008ca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008cae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008cb2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008cb6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8008cba:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008cbe:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008cc2:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008cc6:	edd7 7a08 	vldr	s15, [r7, #32]
 8008cca:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd0:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cd8:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f7 fc59 	bl	8000598 <__aeabi_f2d>
 8008ce6:	4604      	mov	r4, r0
 8008ce8:	460d      	mov	r5, r1
 8008cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7f7 fc53 	bl	8000598 <__aeabi_f2d>
 8008cf2:	f04f 0200 	mov.w	r2, #0
 8008cf6:	f04f 0300 	mov.w	r3, #0
 8008cfa:	f7f7 fca5 	bl	8000648 <__aeabi_dmul>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4690      	mov	r8, r2
 8008d04:	4699      	mov	r9, r3
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7f7 fc46 	bl	8000598 <__aeabi_f2d>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4640      	mov	r0, r8
 8008d12:	4649      	mov	r1, r9
 8008d14:	f7f7 fc98 	bl	8000648 <__aeabi_dmul>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	4629      	mov	r1, r5
 8008d20:	f7f7 fadc 	bl	80002dc <__adddf3>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f7f7 ff64 	bl	8000bf8 <__aeabi_d2f>
 8008d30:	4602      	mov	r2, r0
 8008d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d34:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d38:	ed93 7a00 	vldr	s14, [r3]
 8008d3c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008d40:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d4e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8008d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d56:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008d58:	4b22      	ldr	r3, [pc, #136]	; (8008de4 <cal_table+0x698>)
 8008d5a:	2203      	movs	r2, #3
 8008d5c:	701a      	strb	r2, [r3, #0]
		break;
 8008d5e:	e046      	b.n	8008dee <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d62:	ed93 7a00 	vldr	s14, [r3]
 8008d66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008d6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d72:	da00      	bge.n	8008d76 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008d74:	e03b      	b.n	8008dee <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d7e:	f04f 0200 	mov.w	r2, #0
 8008d82:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008d84:	4b17      	ldr	r3, [pc, #92]	; (8008de4 <cal_table+0x698>)
 8008d86:	2204      	movs	r2, #4
 8008d88:	701a      	strb	r2, [r3, #0]
		break;
 8008d8a:	e030      	b.n	8008dee <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8008d8c:	4b16      	ldr	r3, [pc, #88]	; (8008de8 <cal_table+0x69c>)
 8008d8e:	2201      	movs	r2, #1
 8008d90:	701a      	strb	r2, [r3, #0]
		break;
 8008d92:	e02c      	b.n	8008dee <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8008d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d96:	ed93 7a02 	vldr	s14, [r3, #8]
 8008d9a:	edd7 7a08 	vldr	s15, [r7, #32]
 8008d9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da6:	d900      	bls.n	8008daa <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008da8:	e021      	b.n	8008dee <cal_table+0x6a2>
			target->acceleration = 0;
 8008daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dac:	f04f 0200 	mov.w	r2, #0
 8008db0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008db2:	4b0c      	ldr	r3, [pc, #48]	; (8008de4 <cal_table+0x698>)
 8008db4:	2204      	movs	r2, #4
 8008db6:	701a      	strb	r2, [r3, #0]
		break;
 8008db8:	e019      	b.n	8008dee <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8008dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8008dc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8008dc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dcc:	d900      	bls.n	8008dd0 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008dce:	e00e      	b.n	8008dee <cal_table+0x6a2>
			target->acceleration = 0;
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dd2:	f04f 0200 	mov.w	r2, #0
 8008dd6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008dd8:	4b02      	ldr	r3, [pc, #8]	; (8008de4 <cal_table+0x698>)
 8008dda:	2204      	movs	r2, #4
 8008ddc:	701a      	strb	r2, [r3, #0]
		break;
 8008dde:	e006      	b.n	8008dee <cal_table+0x6a2>
		break;
 8008de0:	bf00      	nop
 8008de2:	e004      	b.n	8008dee <cal_table+0x6a2>
 8008de4:	20000808 	.word	0x20000808
 8008de8:	20000809 	.word	0x20000809
		break;
 8008dec:	bf00      	nop
	}

}

}
 8008dee:	bf00      	nop
 8008df0:	3708      	adds	r7, #8
 8008df2:	46bd      	mov	sp, r7
 8008df4:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008df8:	b004      	add	sp, #16
 8008dfa:	4770      	bx	lr
 8008dfc:	0000      	movs	r0, r0
	...

08008e00 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e04:	b088      	sub	sp, #32
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	eef0 6a40 	vmov.f32	s13, s0
 8008e0c:	eeb0 7a60 	vmov.f32	s14, s1
 8008e10:	eef0 7a41 	vmov.f32	s15, s2
 8008e14:	6038      	str	r0, [r7, #0]
 8008e16:	edc7 6a01 	vstr	s13, [r7, #4]
 8008e1a:	ed87 7a02 	vstr	s14, [r7, #8]
 8008e1e:	edc7 7a03 	vstr	s15, [r7, #12]

float mollifier_T;
float old_velocity;
float time_delay=12;
 8008e22:	4bbf      	ldr	r3, [pc, #764]	; (8009120 <cal_mollifier_table+0x320>)
 8008e24:	61fb      	str	r3, [r7, #28]
float time_delay2=-10;
 8008e26:	4bbf      	ldr	r3, [pc, #764]	; (8009124 <cal_mollifier_table+0x324>)
 8008e28:	61bb      	str	r3, [r7, #24]
	mollifier_timer+=INTERRUPT_TIME;
 8008e2a:	4bbf      	ldr	r3, [pc, #764]	; (8009128 <cal_mollifier_table+0x328>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f7 fbb2 	bl	8000598 <__aeabi_f2d>
 8008e34:	a3b2      	add	r3, pc, #712	; (adr r3, 8009100 <cal_mollifier_table+0x300>)
 8008e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3a:	f7f7 fa4f 	bl	80002dc <__adddf3>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	4610      	mov	r0, r2
 8008e44:	4619      	mov	r1, r3
 8008e46:	f7f7 fed7 	bl	8000bf8 <__aeabi_d2f>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4ab6      	ldr	r2, [pc, #728]	; (8009128 <cal_mollifier_table+0x328>)
 8008e4e:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008e50:	edd7 7a01 	vldr	s15, [r7, #4]
 8008e54:	eef0 7ae7 	vabs.f32	s15, s15
 8008e58:	ee17 0a90 	vmov	r0, s15
 8008e5c:	f7f7 fb9c 	bl	8000598 <__aeabi_f2d>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	f7f7 fa3a 	bl	80002dc <__adddf3>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4619      	mov	r1, r3
 8008e70:	a3a5      	add	r3, pc, #660	; (adr r3, 8009108 <cal_mollifier_table+0x308>)
 8008e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e76:	f7f7 fd11 	bl	800089c <__aeabi_ddiv>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4619      	mov	r1, r3
 8008e82:	a3a3      	add	r3, pc, #652	; (adr r3, 8009110 <cal_mollifier_table+0x310>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	f7f7 fbde 	bl	8000648 <__aeabi_dmul>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	461d      	mov	r5, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f7f7 fb7e 	bl	8000598 <__aeabi_f2d>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4620      	mov	r0, r4
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f7f7 fcfa 	bl	800089c <__aeabi_ddiv>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4610      	mov	r0, r2
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f7f7 fea2 	bl	8000bf8 <__aeabi_d2f>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	617b      	str	r3, [r7, #20]
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008eb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ebc:	eef1 7a67 	vneg.f32	s15, s15
 8008ec0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ec4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ec8:	4b97      	ldr	r3, [pc, #604]	; (8009128 <cal_mollifier_table+0x328>)
 8008eca:	edd3 7a00 	vldr	s15, [r3]
 8008ece:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ed6:	f140 81a2 	bpl.w	800921e <cal_mollifier_table+0x41e>
 8008eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8008ede:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ee2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ee6:	4b90      	ldr	r3, [pc, #576]	; (8009128 <cal_mollifier_table+0x328>)
 8008ee8:	edd3 7a00 	vldr	s15, [r3]
 8008eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ef4:	f340 8193 	ble.w	800921e <cal_mollifier_table+0x41e>
			old_velocity=target->velocity;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	613b      	str	r3, [r7, #16]
			target->velocity = cal_mollifier_velocity(mollifier_timer,mollifier_T,input.displacement);
 8008efe:	4b8a      	ldr	r3, [pc, #552]	; (8009128 <cal_mollifier_table+0x328>)
 8008f00:	edd3 7a00 	vldr	s15, [r3]
 8008f04:	ed97 7a01 	vldr	s14, [r7, #4]
 8008f08:	eeb0 1a47 	vmov.f32	s2, s14
 8008f0c:	edd7 0a05 	vldr	s1, [r7, #20]
 8008f10:	eeb0 0a67 	vmov.f32	s0, s15
 8008f14:	f000 f9ac 	bl	8009270 <cal_mollifier_velocity>
 8008f18:	eef0 7a40 	vmov.f32	s15, s0
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	edc3 7a00 	vstr	s15, [r3]

			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008f22:	4b81      	ldr	r3, [pc, #516]	; (8009128 <cal_mollifier_table+0x328>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7f7 fb36 	bl	8000598 <__aeabi_f2d>
 8008f2c:	4604      	mov	r4, r0
 8008f2e:	460d      	mov	r5, r1
 8008f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f34:	eef1 7a67 	vneg.f32	s15, s15
 8008f38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f3c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f40:	ee16 0a90 	vmov	r0, s13
 8008f44:	f7f7 fb28 	bl	8000598 <__aeabi_f2d>
 8008f48:	a373      	add	r3, pc, #460	; (adr r3, 8009118 <cal_mollifier_table+0x318>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 fca5 	bl	800089c <__aeabi_ddiv>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	4690      	mov	r8, r2
 8008f58:	4699      	mov	r9, r3
 8008f5a:	69f8      	ldr	r0, [r7, #28]
 8008f5c:	f7f7 fb1c 	bl	8000598 <__aeabi_f2d>
 8008f60:	a367      	add	r3, pc, #412	; (adr r3, 8009100 <cal_mollifier_table+0x300>)
 8008f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f66:	f7f7 fb6f 	bl	8000648 <__aeabi_dmul>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4640      	mov	r0, r8
 8008f70:	4649      	mov	r1, r9
 8008f72:	f7f7 f9b3 	bl	80002dc <__adddf3>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	4629      	mov	r1, r5
 8008f7e:	f7f7 fdd5 	bl	8000b2c <__aeabi_dcmplt>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d027      	beq.n	8008fd8 <cal_mollifier_table+0x1d8>
				target->acceleration = cal_mollifier_acceleration(-mollifier_T/2/1.316,mollifier_T,input.displacement);
 8008f88:	edd7 7a05 	vldr	s15, [r7, #20]
 8008f8c:	eef1 7a67 	vneg.f32	s15, s15
 8008f90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f98:	ee16 0a90 	vmov	r0, s13
 8008f9c:	f7f7 fafc 	bl	8000598 <__aeabi_f2d>
 8008fa0:	a35d      	add	r3, pc, #372	; (adr r3, 8009118 <cal_mollifier_table+0x318>)
 8008fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa6:	f7f7 fc79 	bl	800089c <__aeabi_ddiv>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4610      	mov	r0, r2
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f7f7 fe21 	bl	8000bf8 <__aeabi_d2f>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8008fbc:	eeb0 1a67 	vmov.f32	s2, s15
 8008fc0:	edd7 0a05 	vldr	s1, [r7, #20]
 8008fc4:	ee00 3a10 	vmov	s0, r3
 8008fc8:	f000 f9b2 	bl	8009330 <cal_mollifier_acceleration>
 8008fcc:	eef0 7a40 	vmov.f32	s15, s0
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008fd6:	e137      	b.n	8009248 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<0){
 8008fd8:	4b53      	ldr	r3, [pc, #332]	; (8009128 <cal_mollifier_table+0x328>)
 8008fda:	edd3 7a00 	vldr	s15, [r3]
 8008fde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fe6:	d52b      	bpl.n	8009040 <cal_mollifier_table+0x240>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8008fe8:	4b4f      	ldr	r3, [pc, #316]	; (8009128 <cal_mollifier_table+0x328>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7f7 fad3 	bl	8000598 <__aeabi_f2d>
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	69f8      	ldr	r0, [r7, #28]
 8008ff8:	f7f7 face 	bl	8000598 <__aeabi_f2d>
 8008ffc:	a340      	add	r3, pc, #256	; (adr r3, 8009100 <cal_mollifier_table+0x300>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 fb21 	bl	8000648 <__aeabi_dmul>
 8009006:	4602      	mov	r2, r0
 8009008:	460b      	mov	r3, r1
 800900a:	4620      	mov	r0, r4
 800900c:	4629      	mov	r1, r5
 800900e:	f7f7 f963 	bl	80002d8 <__aeabi_dsub>
 8009012:	4602      	mov	r2, r0
 8009014:	460b      	mov	r3, r1
 8009016:	4610      	mov	r0, r2
 8009018:	4619      	mov	r1, r3
 800901a:	f7f7 fded 	bl	8000bf8 <__aeabi_d2f>
 800901e:	4603      	mov	r3, r0
 8009020:	edd7 7a01 	vldr	s15, [r7, #4]
 8009024:	eeb0 1a67 	vmov.f32	s2, s15
 8009028:	edd7 0a05 	vldr	s1, [r7, #20]
 800902c:	ee00 3a10 	vmov	s0, r3
 8009030:	f000 f97e 	bl	8009330 <cal_mollifier_acceleration>
 8009034:	eef0 7a40 	vmov.f32	s15, s0
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800903e:	e103      	b.n	8009248 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009040:	4b39      	ldr	r3, [pc, #228]	; (8009128 <cal_mollifier_table+0x328>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4618      	mov	r0, r3
 8009046:	f7f7 faa7 	bl	8000598 <__aeabi_f2d>
 800904a:	4604      	mov	r4, r0
 800904c:	460d      	mov	r5, r1
 800904e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009052:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009056:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800905a:	ee16 0a90 	vmov	r0, s13
 800905e:	f7f7 fa9b 	bl	8000598 <__aeabi_f2d>
 8009062:	a32d      	add	r3, pc, #180	; (adr r3, 8009118 <cal_mollifier_table+0x318>)
 8009064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009068:	f7f7 fc18 	bl	800089c <__aeabi_ddiv>
 800906c:	4602      	mov	r2, r0
 800906e:	460b      	mov	r3, r1
 8009070:	4690      	mov	r8, r2
 8009072:	4699      	mov	r9, r3
 8009074:	69b8      	ldr	r0, [r7, #24]
 8009076:	f7f7 fa8f 	bl	8000598 <__aeabi_f2d>
 800907a:	a321      	add	r3, pc, #132	; (adr r3, 8009100 <cal_mollifier_table+0x300>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 fae2 	bl	8000648 <__aeabi_dmul>
 8009084:	4602      	mov	r2, r0
 8009086:	460b      	mov	r3, r1
 8009088:	4640      	mov	r0, r8
 800908a:	4649      	mov	r1, r9
 800908c:	f7f7 f926 	bl	80002dc <__adddf3>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4620      	mov	r0, r4
 8009096:	4629      	mov	r1, r5
 8009098:	f7f7 fd48 	bl	8000b2c <__aeabi_dcmplt>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d044      	beq.n	800912c <cal_mollifier_table+0x32c>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 80090a2:	4b21      	ldr	r3, [pc, #132]	; (8009128 <cal_mollifier_table+0x328>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7f7 fa76 	bl	8000598 <__aeabi_f2d>
 80090ac:	4604      	mov	r4, r0
 80090ae:	460d      	mov	r5, r1
 80090b0:	69f8      	ldr	r0, [r7, #28]
 80090b2:	f7f7 fa71 	bl	8000598 <__aeabi_f2d>
 80090b6:	a312      	add	r3, pc, #72	; (adr r3, 8009100 <cal_mollifier_table+0x300>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	f7f7 fac4 	bl	8000648 <__aeabi_dmul>
 80090c0:	4602      	mov	r2, r0
 80090c2:	460b      	mov	r3, r1
 80090c4:	4620      	mov	r0, r4
 80090c6:	4629      	mov	r1, r5
 80090c8:	f7f7 f906 	bl	80002d8 <__aeabi_dsub>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4610      	mov	r0, r2
 80090d2:	4619      	mov	r1, r3
 80090d4:	f7f7 fd90 	bl	8000bf8 <__aeabi_d2f>
 80090d8:	4603      	mov	r3, r0
 80090da:	edd7 7a01 	vldr	s15, [r7, #4]
 80090de:	eeb0 1a67 	vmov.f32	s2, s15
 80090e2:	edd7 0a05 	vldr	s1, [r7, #20]
 80090e6:	ee00 3a10 	vmov	s0, r3
 80090ea:	f000 f921 	bl	8009330 <cal_mollifier_acceleration>
 80090ee:	eef0 7a40 	vmov.f32	s15, s0
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80090f8:	e0a6      	b.n	8009248 <cal_mollifier_table+0x448>
 80090fa:	bf00      	nop
 80090fc:	f3af 8000 	nop.w
 8009100:	d2f1a9fc 	.word	0xd2f1a9fc
 8009104:	3f50624d 	.word	0x3f50624d
 8009108:	f9db22d1 	.word	0xf9db22d1
 800910c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009110:	362cef38 	.word	0x362cef38
 8009114:	3fd78b56 	.word	0x3fd78b56
 8009118:	04189375 	.word	0x04189375
 800911c:	3ff50e56 	.word	0x3ff50e56
 8009120:	41400000 	.word	0x41400000
 8009124:	c1200000 	.word	0xc1200000
 8009128:	20000804 	.word	0x20000804
			}else if(mollifier_timer<mollifier_T/2+time_delay2*INTERRUPT_TIME){
 800912c:	4b4e      	ldr	r3, [pc, #312]	; (8009268 <cal_mollifier_table+0x468>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4618      	mov	r0, r3
 8009132:	f7f7 fa31 	bl	8000598 <__aeabi_f2d>
 8009136:	4604      	mov	r4, r0
 8009138:	460d      	mov	r5, r1
 800913a:	edd7 7a05 	vldr	s15, [r7, #20]
 800913e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009142:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009146:	ee16 0a90 	vmov	r0, s13
 800914a:	f7f7 fa25 	bl	8000598 <__aeabi_f2d>
 800914e:	4680      	mov	r8, r0
 8009150:	4689      	mov	r9, r1
 8009152:	69b8      	ldr	r0, [r7, #24]
 8009154:	f7f7 fa20 	bl	8000598 <__aeabi_f2d>
 8009158:	a33f      	add	r3, pc, #252	; (adr r3, 8009258 <cal_mollifier_table+0x458>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 fa73 	bl	8000648 <__aeabi_dmul>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4640      	mov	r0, r8
 8009168:	4649      	mov	r1, r9
 800916a:	f7f7 f8b7 	bl	80002dc <__adddf3>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4620      	mov	r0, r4
 8009174:	4629      	mov	r1, r5
 8009176:	f7f7 fcd9 	bl	8000b2c <__aeabi_dcmplt>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d028      	beq.n	80091d2 <cal_mollifier_table+0x3d2>
				time_delay=0;
 8009180:	f04f 0300 	mov.w	r3, #0
 8009184:	61fb      	str	r3, [r7, #28]
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009186:	edd7 7a05 	vldr	s15, [r7, #20]
 800918a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800918e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009192:	ee16 0a90 	vmov	r0, s13
 8009196:	f7f7 f9ff 	bl	8000598 <__aeabi_f2d>
 800919a:	a331      	add	r3, pc, #196	; (adr r3, 8009260 <cal_mollifier_table+0x460>)
 800919c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a0:	f7f7 fb7c 	bl	800089c <__aeabi_ddiv>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4610      	mov	r0, r2
 80091aa:	4619      	mov	r1, r3
 80091ac:	f7f7 fd24 	bl	8000bf8 <__aeabi_d2f>
 80091b0:	4603      	mov	r3, r0
 80091b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80091b6:	eeb0 1a67 	vmov.f32	s2, s15
 80091ba:	edd7 0a05 	vldr	s1, [r7, #20]
 80091be:	ee00 3a10 	vmov	s0, r3
 80091c2:	f000 f8b5 	bl	8009330 <cal_mollifier_acceleration>
 80091c6:	eef0 7a40 	vmov.f32	s15, s0
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80091d0:	e03a      	b.n	8009248 <cal_mollifier_table+0x448>
			}else{
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2-INTERRUPT_TIME,mollifier_T,input.displacement);
 80091d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80091d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091de:	ee16 0a90 	vmov	r0, s13
 80091e2:	f7f7 f9d9 	bl	8000598 <__aeabi_f2d>
 80091e6:	a31c      	add	r3, pc, #112	; (adr r3, 8009258 <cal_mollifier_table+0x458>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f7f7 f874 	bl	80002d8 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4610      	mov	r0, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	f7f7 fcfe 	bl	8000bf8 <__aeabi_d2f>
 80091fc:	4603      	mov	r3, r0
 80091fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8009202:	eeb0 1a67 	vmov.f32	s2, s15
 8009206:	edd7 0a05 	vldr	s1, [r7, #20]
 800920a:	ee00 3a10 	vmov	s0, r3
 800920e:	f000 f88f 	bl	8009330 <cal_mollifier_acceleration>
 8009212:	eef0 7a40 	vmov.f32	s15, s0
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800921c:	e014      	b.n	8009248 <cal_mollifier_table+0x448>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	613b      	str	r3, [r7, #16]
			target->velocity=0;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	f04f 0200 	mov.w	r2, #0
 800922a:	601a      	str	r2, [r3, #0]
			target->acceleration = -target->velocity+old_velocity;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	edd3 7a00 	vldr	s15, [r3]
 8009232:	ed97 7a04 	vldr	s14, [r7, #16]
 8009236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <cal_mollifier_table+0x46c>)
 8009242:	2204      	movs	r2, #4
 8009244:	701a      	strb	r2, [r3, #0]

		}

}
 8009246:	bf00      	nop
 8009248:	bf00      	nop
 800924a:	3720      	adds	r7, #32
 800924c:	46bd      	mov	sp, r7
 800924e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009252:	bf00      	nop
 8009254:	f3af 8000 	nop.w
 8009258:	d2f1a9fc 	.word	0xd2f1a9fc
 800925c:	3f50624d 	.word	0x3f50624d
 8009260:	04189375 	.word	0x04189375
 8009264:	3ff50e56 	.word	0x3ff50e56
 8009268:	20000804 	.word	0x20000804
 800926c:	20000808 	.word	0x20000808

08009270 <cal_mollifier_velocity>:


float cal_mollifier_velocity(float t_now,float mollifier_T,float integral){
 8009270:	b5b0      	push	{r4, r5, r7, lr}
 8009272:	b086      	sub	sp, #24
 8009274:	af00      	add	r7, sp, #0
 8009276:	ed87 0a03 	vstr	s0, [r7, #12]
 800927a:	edc7 0a02 	vstr	s1, [r7, #8]
 800927e:	ed87 1a01 	vstr	s2, [r7, #4]
	float velocity;
	velocity=(2/mollifier_T)*integral/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 8009282:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009286:	edd7 7a02 	vldr	s15, [r7, #8]
 800928a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800928e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009296:	ee17 0a90 	vmov	r0, s15
 800929a:	f7f7 f97d 	bl	8000598 <__aeabi_f2d>
 800929e:	a322      	add	r3, pc, #136	; (adr r3, 8009328 <cal_mollifier_velocity+0xb8>)
 80092a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a4:	f7f7 fafa 	bl	800089c <__aeabi_ddiv>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	4614      	mov	r4, r2
 80092ae:	461d      	mov	r5, r3
 80092b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80092b4:	eeb1 7a67 	vneg.f32	s14, s15
 80092b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80092bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092c0:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80092c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80092c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80092cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092d0:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80092d4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80092d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80092dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80092e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80092e8:	ee16 0a90 	vmov	r0, s13
 80092ec:	f7f7 f954 	bl	8000598 <__aeabi_f2d>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	ec43 2b10 	vmov	d0, r2, r3
 80092f8:	f019 fd26 	bl	8022d48 <exp>
 80092fc:	ec53 2b10 	vmov	r2, r3, d0
 8009300:	4620      	mov	r0, r4
 8009302:	4629      	mov	r1, r5
 8009304:	f7f7 f9a0 	bl	8000648 <__aeabi_dmul>
 8009308:	4602      	mov	r2, r0
 800930a:	460b      	mov	r3, r1
 800930c:	4610      	mov	r0, r2
 800930e:	4619      	mov	r1, r3
 8009310:	f7f7 fc72 	bl	8000bf8 <__aeabi_d2f>
 8009314:	4603      	mov	r3, r0
 8009316:	617b      	str	r3, [r7, #20]
	return velocity;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	ee07 3a90 	vmov	s15, r3
}
 800931e:	eeb0 0a67 	vmov.f32	s0, s15
 8009322:	3718      	adds	r7, #24
 8009324:	46bd      	mov	sp, r7
 8009326:	bdb0      	pop	{r4, r5, r7, pc}
 8009328:	f9db22d1 	.word	0xf9db22d1
 800932c:	3fdc6a7e 	.word	0x3fdc6a7e

08009330 <cal_mollifier_acceleration>:
float cal_mollifier_acceleration(float t_now,float mollifier_T,float integral){
 8009330:	b5b0      	push	{r4, r5, r7, lr}
 8009332:	b086      	sub	sp, #24
 8009334:	af00      	add	r7, sp, #0
 8009336:	ed87 0a03 	vstr	s0, [r7, #12]
 800933a:	edc7 0a02 	vstr	s1, [r7, #8]
 800933e:	ed87 1a01 	vstr	s2, [r7, #4]
	float acceleration;
	acceleration= integral/MOLLIFIER_INTEGRAL*(-mollifier_T*t_now/(mollifier_T*mollifier_T/4-t_now*t_now)/(mollifier_T*mollifier_T/4-t_now*t_now))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7f7 f928 	bl	8000598 <__aeabi_f2d>
 8009348:	a33d      	add	r3, pc, #244	; (adr r3, 8009440 <cal_mollifier_acceleration+0x110>)
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f7f7 faa5 	bl	800089c <__aeabi_ddiv>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4614      	mov	r4, r2
 8009358:	461d      	mov	r5, r3
 800935a:	edd7 7a02 	vldr	s15, [r7, #8]
 800935e:	eeb1 7a67 	vneg.f32	s14, s15
 8009362:	edd7 7a03 	vldr	s15, [r7, #12]
 8009366:	ee67 6a27 	vmul.f32	s13, s14, s15
 800936a:	edd7 7a02 	vldr	s15, [r7, #8]
 800936e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009372:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8009376:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800937a:	edd7 7a03 	vldr	s15, [r7, #12]
 800937e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800938a:	edd7 7a02 	vldr	s15, [r7, #8]
 800938e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009392:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8009396:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800939a:	edd7 7a03 	vldr	s15, [r7, #12]
 800939e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80093a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80093aa:	ee16 0a90 	vmov	r0, s13
 80093ae:	f7f7 f8f3 	bl	8000598 <__aeabi_f2d>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4620      	mov	r0, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	f7f7 f945 	bl	8000648 <__aeabi_dmul>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4614      	mov	r4, r2
 80093c4:	461d      	mov	r5, r3
 80093c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80093ca:	eeb1 7a67 	vneg.f32	s14, s15
 80093ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80093d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093d6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80093da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80093de:	edd7 7a02 	vldr	s15, [r7, #8]
 80093e2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093e6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80093ea:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80093ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80093f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80093f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80093fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80093fe:	ee16 0a90 	vmov	r0, s13
 8009402:	f7f7 f8c9 	bl	8000598 <__aeabi_f2d>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	ec43 2b10 	vmov	d0, r2, r3
 800940e:	f019 fc9b 	bl	8022d48 <exp>
 8009412:	ec53 2b10 	vmov	r2, r3, d0
 8009416:	4620      	mov	r0, r4
 8009418:	4629      	mov	r1, r5
 800941a:	f7f7 f915 	bl	8000648 <__aeabi_dmul>
 800941e:	4602      	mov	r2, r0
 8009420:	460b      	mov	r3, r1
 8009422:	4610      	mov	r0, r2
 8009424:	4619      	mov	r1, r3
 8009426:	f7f7 fbe7 	bl	8000bf8 <__aeabi_d2f>
 800942a:	4603      	mov	r3, r0
 800942c:	617b      	str	r3, [r7, #20]
	return acceleration;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	ee07 3a90 	vmov	s15, r3
}
 8009434:	eeb0 0a67 	vmov.f32	s0, s15
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bdb0      	pop	{r4, r5, r7, pc}
 800943e:	bf00      	nop
 8009440:	f9db22d1 	.word	0xf9db22d1
 8009444:	3fdc6a7e 	.word	0x3fdc6a7e

08009448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <MX_DMA_Init+0x50>)
 8009450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009452:	4a11      	ldr	r2, [pc, #68]	; (8009498 <MX_DMA_Init+0x50>)
 8009454:	f043 0304 	orr.w	r3, r3, #4
 8009458:	6493      	str	r3, [r2, #72]	; 0x48
 800945a:	4b0f      	ldr	r3, [pc, #60]	; (8009498 <MX_DMA_Init+0x50>)
 800945c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	607b      	str	r3, [r7, #4]
 8009464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009466:	4b0c      	ldr	r3, [pc, #48]	; (8009498 <MX_DMA_Init+0x50>)
 8009468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800946a:	4a0b      	ldr	r2, [pc, #44]	; (8009498 <MX_DMA_Init+0x50>)
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	6493      	str	r3, [r2, #72]	; 0x48
 8009472:	4b09      	ldr	r3, [pc, #36]	; (8009498 <MX_DMA_Init+0x50>)
 8009474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	603b      	str	r3, [r7, #0]
 800947c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800947e:	2200      	movs	r2, #0
 8009480:	2100      	movs	r1, #0
 8009482:	200b      	movs	r0, #11
 8009484:	f011 fd25 	bl	801aed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8009488:	200b      	movs	r0, #11
 800948a:	f011 fd3c 	bl	801af06 <HAL_NVIC_EnableIRQ>

}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	40021000 	.word	0x40021000

0800949c <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
	error_mode=0;
 80094a0:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <init_FailSafe+0x4c>)
 80094a2:	2200      	movs	r2, #0
 80094a4:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 80094a6:	4b11      	ldr	r3, [pc, #68]	; (80094ec <init_FailSafe+0x50>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80094ac:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <init_FailSafe+0x54>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 80094b2:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <init_FailSafe+0x58>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 80094b8:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <init_FailSafe+0x5c>)
 80094ba:	4a10      	ldr	r2, [pc, #64]	; (80094fc <init_FailSafe+0x60>)
 80094bc:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 80094be:	4b10      	ldr	r3, [pc, #64]	; (8009500 <init_FailSafe+0x64>)
 80094c0:	4a10      	ldr	r2, [pc, #64]	; (8009504 <init_FailSafe+0x68>)
 80094c2:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 80094c4:	4b10      	ldr	r3, [pc, #64]	; (8009508 <init_FailSafe+0x6c>)
 80094c6:	4a0d      	ldr	r2, [pc, #52]	; (80094fc <init_FailSafe+0x60>)
 80094c8:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 80094ca:	4b10      	ldr	r3, [pc, #64]	; (800950c <init_FailSafe+0x70>)
 80094cc:	4a10      	ldr	r2, [pc, #64]	; (8009510 <init_FailSafe+0x74>)
 80094ce:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 80094d0:	4b10      	ldr	r3, [pc, #64]	; (8009514 <init_FailSafe+0x78>)
 80094d2:	4a11      	ldr	r2, [pc, #68]	; (8009518 <init_FailSafe+0x7c>)
 80094d4:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 80094d6:	4b11      	ldr	r3, [pc, #68]	; (800951c <init_FailSafe+0x80>)
 80094d8:	4a0f      	ldr	r2, [pc, #60]	; (8009518 <init_FailSafe+0x7c>)
 80094da:	601a      	str	r2, [r3, #0]
}
 80094dc:	bf00      	nop
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	2000080b 	.word	0x2000080b
 80094ec:	2000080a 	.word	0x2000080a
 80094f0:	2000080c 	.word	0x2000080c
 80094f4:	20000828 	.word	0x20000828
 80094f8:	20000810 	.word	0x20000810
 80094fc:	44bb8000 	.word	0x44bb8000
 8009500:	20000814 	.word	0x20000814
 8009504:	44480000 	.word	0x44480000
 8009508:	20000818 	.word	0x20000818
 800950c:	2000081c 	.word	0x2000081c
 8009510:	455ac000 	.word	0x455ac000
 8009514:	20000820 	.word	0x20000820
 8009518:	44ed8000 	.word	0x44ed8000
 800951c:	20000824 	.word	0x20000824

08009520 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8009526:	4b6e      	ldr	r3, [pc, #440]	; (80096e0 <interrupt_FailSafe+0x1c0>)
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800952e:	4b6d      	ldr	r3, [pc, #436]	; (80096e4 <interrupt_FailSafe+0x1c4>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009534:	4b6c      	ldr	r3, [pc, #432]	; (80096e8 <interrupt_FailSafe+0x1c8>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800953a:	4b6c      	ldr	r3, [pc, #432]	; (80096ec <interrupt_FailSafe+0x1cc>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	607b      	str	r3, [r7, #4]
 8009540:	e008      	b.n	8009554 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009542:	4b6b      	ldr	r3, [pc, #428]	; (80096f0 <interrupt_FailSafe+0x1d0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009548:	4b6a      	ldr	r3, [pc, #424]	; (80096f4 <interrupt_FailSafe+0x1d4>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 800954e:	4b6a      	ldr	r3, [pc, #424]	; (80096f8 <interrupt_FailSafe+0x1d8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009554:	4b69      	ldr	r3, [pc, #420]	; (80096fc <interrupt_FailSafe+0x1dc>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d062      	beq.n	8009622 <interrupt_FailSafe+0x102>
 800955c:	4b67      	ldr	r3, [pc, #412]	; (80096fc <interrupt_FailSafe+0x1dc>)
 800955e:	781b      	ldrb	r3, [r3, #0]
 8009560:	2b03      	cmp	r3, #3
 8009562:	d05e      	beq.n	8009622 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009564:	4b66      	ldr	r3, [pc, #408]	; (8009700 <interrupt_FailSafe+0x1e0>)
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d15a      	bne.n	8009622 <interrupt_FailSafe+0x102>
 800956c:	4b65      	ldr	r3, [pc, #404]	; (8009704 <interrupt_FailSafe+0x1e4>)
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d156      	bne.n	8009622 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009574:	4b64      	ldr	r3, [pc, #400]	; (8009708 <interrupt_FailSafe+0x1e8>)
 8009576:	ed93 7a00 	vldr	s14, [r3]
 800957a:	4b64      	ldr	r3, [pc, #400]	; (800970c <interrupt_FailSafe+0x1ec>)
 800957c:	edd3 7a00 	vldr	s15, [r3]
 8009580:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009584:	eef0 7ae7 	vabs.f32	s15, s15
 8009588:	ed97 7a02 	vldr	s14, [r7, #8]
 800958c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009594:	d809      	bhi.n	80095aa <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009596:	f7fe fc83 	bl	8007ea0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800959a:	2001      	movs	r0, #1
 800959c:	f7fd fe98 	bl	80072d0 <pl_yellow_LED_count>
						error_mode = 1;
 80095a0:	4b58      	ldr	r3, [pc, #352]	; (8009704 <interrupt_FailSafe+0x1e4>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80095a6:	f7fb fa53 	bl	8004a50 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 80095aa:	4b59      	ldr	r3, [pc, #356]	; (8009710 <interrupt_FailSafe+0x1f0>)
 80095ac:	edd3 7a00 	vldr	s15, [r3]
 80095b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80095b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80095b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095bc:	d809      	bhi.n	80095d2 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80095be:	f7fe fc6f 	bl	8007ea0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 80095c2:	2002      	movs	r0, #2
 80095c4:	f7fd fe84 	bl	80072d0 <pl_yellow_LED_count>
						error_mode = 1;
 80095c8:	4b4e      	ldr	r3, [pc, #312]	; (8009704 <interrupt_FailSafe+0x1e4>)
 80095ca:	2201      	movs	r2, #1
 80095cc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80095ce:	f7fb fa3f 	bl	8004a50 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 80095d2:	4b50      	ldr	r3, [pc, #320]	; (8009714 <interrupt_FailSafe+0x1f4>)
 80095d4:	ed93 7a00 	vldr	s14, [r3]
 80095d8:	4b4f      	ldr	r3, [pc, #316]	; (8009718 <interrupt_FailSafe+0x1f8>)
 80095da:	edd3 6a00 	vldr	s13, [r3]
 80095de:	4b4f      	ldr	r3, [pc, #316]	; (800971c <interrupt_FailSafe+0x1fc>)
 80095e0:	edd3 7a00 	vldr	s15, [r3]
 80095e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80095e8:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80095ec:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80095f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f4:	eef0 7ae7 	vabs.f32	s15, s15
 80095f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80095fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009604:	d80d      	bhi.n	8009622 <interrupt_FailSafe+0x102>
 8009606:	4b3d      	ldr	r3, [pc, #244]	; (80096fc <interrupt_FailSafe+0x1dc>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d109      	bne.n	8009622 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800960e:	f7fe fc47 	bl	8007ea0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009612:	2004      	movs	r0, #4
 8009614:	f7fd fe5c 	bl	80072d0 <pl_yellow_LED_count>
						error_mode = 1;
 8009618:	4b3a      	ldr	r3, [pc, #232]	; (8009704 <interrupt_FailSafe+0x1e4>)
 800961a:	2201      	movs	r2, #1
 800961c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800961e:	f7fb fa17 	bl	8004a50 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009622:	4b38      	ldr	r3, [pc, #224]	; (8009704 <interrupt_FailSafe+0x1e4>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d153      	bne.n	80096d2 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800962a:	4b3d      	ldr	r3, [pc, #244]	; (8009720 <interrupt_FailSafe+0x200>)
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009630:	4b3c      	ldr	r3, [pc, #240]	; (8009724 <interrupt_FailSafe+0x204>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	4a3b      	ldr	r2, [pc, #236]	; (8009724 <interrupt_FailSafe+0x204>)
 8009638:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800963a:	4b3a      	ldr	r3, [pc, #232]	; (8009724 <interrupt_FailSafe+0x204>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009642:	dc05      	bgt.n	8009650 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009644:	f7fb fb5e 	bl	8004d04 <init_WallControl>
			modeacc=100;//エラー用
 8009648:	4b2c      	ldr	r3, [pc, #176]	; (80096fc <interrupt_FailSafe+0x1dc>)
 800964a:	2264      	movs	r2, #100	; 0x64
 800964c:	701a      	strb	r2, [r3, #0]
 800964e:	e009      	b.n	8009664 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009650:	2000      	movs	r0, #0
 8009652:	f7fe fb91 	bl	8007d78 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8009656:	f7fe fbf5 	bl	8007e44 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800965a:	f7fe fc21 	bl	8007ea0 <pl_FunMotor_stop>
			modeacc=0;
 800965e:	4b27      	ldr	r3, [pc, #156]	; (80096fc <interrupt_FailSafe+0x1dc>)
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009664:	4b30      	ldr	r3, [pc, #192]	; (8009728 <interrupt_FailSafe+0x208>)
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 800966c:	4b2f      	ldr	r3, [pc, #188]	; (800972c <interrupt_FailSafe+0x20c>)
 800966e:	f04f 32ff 	mov.w	r2, #4294967295
 8009672:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009674:	4b2e      	ldr	r3, [pc, #184]	; (8009730 <interrupt_FailSafe+0x210>)
 8009676:	f04f 32ff 	mov.w	r2, #4294967295
 800967a:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 800967c:	4b2d      	ldr	r3, [pc, #180]	; (8009734 <interrupt_FailSafe+0x214>)
 800967e:	f04f 32ff 	mov.w	r2, #4294967295
 8009682:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009684:	4b2c      	ldr	r3, [pc, #176]	; (8009738 <interrupt_FailSafe+0x218>)
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 800968c:	4b2b      	ldr	r3, [pc, #172]	; (800973c <interrupt_FailSafe+0x21c>)
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 8009694:	4b2a      	ldr	r3, [pc, #168]	; (8009740 <interrupt_FailSafe+0x220>)
 8009696:	4a2b      	ldr	r2, [pc, #172]	; (8009744 <interrupt_FailSafe+0x224>)
 8009698:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 800969a:	4b2b      	ldr	r3, [pc, #172]	; (8009748 <interrupt_FailSafe+0x228>)
 800969c:	4a29      	ldr	r2, [pc, #164]	; (8009744 <interrupt_FailSafe+0x224>)
 800969e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 80096a0:	4b2a      	ldr	r3, [pc, #168]	; (800974c <interrupt_FailSafe+0x22c>)
 80096a2:	4a2b      	ldr	r2, [pc, #172]	; (8009750 <interrupt_FailSafe+0x230>)
 80096a4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 80096a6:	4b2b      	ldr	r3, [pc, #172]	; (8009754 <interrupt_FailSafe+0x234>)
 80096a8:	4a29      	ldr	r2, [pc, #164]	; (8009750 <interrupt_FailSafe+0x230>)
 80096aa:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 80096ac:	4b2a      	ldr	r3, [pc, #168]	; (8009758 <interrupt_FailSafe+0x238>)
 80096ae:	4a2b      	ldr	r2, [pc, #172]	; (800975c <interrupt_FailSafe+0x23c>)
 80096b0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 80096b2:	4b2b      	ldr	r3, [pc, #172]	; (8009760 <interrupt_FailSafe+0x240>)
 80096b4:	4a29      	ldr	r2, [pc, #164]	; (800975c <interrupt_FailSafe+0x23c>)
 80096b6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 80096b8:	4b2a      	ldr	r3, [pc, #168]	; (8009764 <interrupt_FailSafe+0x244>)
 80096ba:	4a28      	ldr	r2, [pc, #160]	; (800975c <interrupt_FailSafe+0x23c>)
 80096bc:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 80096be:	4b2a      	ldr	r3, [pc, #168]	; (8009768 <interrupt_FailSafe+0x248>)
 80096c0:	4a26      	ldr	r2, [pc, #152]	; (800975c <interrupt_FailSafe+0x23c>)
 80096c2:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 80096c4:	4b29      	ldr	r3, [pc, #164]	; (800976c <interrupt_FailSafe+0x24c>)
 80096c6:	2204      	movs	r2, #4
 80096c8:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 80096ca:	4b29      	ldr	r3, [pc, #164]	; (8009770 <interrupt_FailSafe+0x250>)
 80096cc:	2200      	movs	r2, #0
 80096ce:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 80096d0:	e002      	b.n	80096d8 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 80096d2:	4b14      	ldr	r3, [pc, #80]	; (8009724 <interrupt_FailSafe+0x204>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	601a      	str	r2, [r3, #0]
}
 80096d8:	bf00      	nop
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	2000080c 	.word	0x2000080c
 80096e4:	20000810 	.word	0x20000810
 80096e8:	20000814 	.word	0x20000814
 80096ec:	20000818 	.word	0x20000818
 80096f0:	2000081c 	.word	0x2000081c
 80096f4:	20000820 	.word	0x20000820
 80096f8:	20000824 	.word	0x20000824
 80096fc:	2000052c 	.word	0x2000052c
 8009700:	2000080a 	.word	0x2000080a
 8009704:	2000080b 	.word	0x2000080b
 8009708:	200004e8 	.word	0x200004e8
 800970c:	2000026c 	.word	0x2000026c
 8009710:	20000278 	.word	0x20000278
 8009714:	200004dc 	.word	0x200004dc
 8009718:	2000025c 	.word	0x2000025c
 800971c:	20000258 	.word	0x20000258
 8009720:	2000edb4 	.word	0x2000edb4
 8009724:	20000828 	.word	0x20000828
 8009728:	200005bc 	.word	0x200005bc
 800972c:	200005b8 	.word	0x200005b8
 8009730:	200005c4 	.word	0x200005c4
 8009734:	200005c0 	.word	0x200005c0
 8009738:	200005cc 	.word	0x200005cc
 800973c:	200005c8 	.word	0x200005c8
 8009740:	200005d4 	.word	0x200005d4
 8009744:	42480000 	.word	0x42480000
 8009748:	200005d0 	.word	0x200005d0
 800974c:	200005dc 	.word	0x200005dc
 8009750:	41a00000 	.word	0x41a00000
 8009754:	200005d8 	.word	0x200005d8
 8009758:	200005e4 	.word	0x200005e4
 800975c:	420c0000 	.word	0x420c0000
 8009760:	200005e0 	.word	0x200005e0
 8009764:	200005ec 	.word	0x200005ec
 8009768:	200005e8 	.word	0x200005e8
 800976c:	20000808 	.word	0x20000808
 8009770:	20000596 	.word	0x20000596

08009774 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08a      	sub	sp, #40	; 0x28
 8009778:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800977a:	f107 0314 	add.w	r3, r7, #20
 800977e:	2200      	movs	r2, #0
 8009780:	601a      	str	r2, [r3, #0]
 8009782:	605a      	str	r2, [r3, #4]
 8009784:	609a      	str	r2, [r3, #8]
 8009786:	60da      	str	r2, [r3, #12]
 8009788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800978a:	4b3a      	ldr	r3, [pc, #232]	; (8009874 <MX_GPIO_Init+0x100>)
 800978c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800978e:	4a39      	ldr	r2, [pc, #228]	; (8009874 <MX_GPIO_Init+0x100>)
 8009790:	f043 0304 	orr.w	r3, r3, #4
 8009794:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009796:	4b37      	ldr	r3, [pc, #220]	; (8009874 <MX_GPIO_Init+0x100>)
 8009798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	613b      	str	r3, [r7, #16]
 80097a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80097a2:	4b34      	ldr	r3, [pc, #208]	; (8009874 <MX_GPIO_Init+0x100>)
 80097a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097a6:	4a33      	ldr	r2, [pc, #204]	; (8009874 <MX_GPIO_Init+0x100>)
 80097a8:	f043 0320 	orr.w	r3, r3, #32
 80097ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097ae:	4b31      	ldr	r3, [pc, #196]	; (8009874 <MX_GPIO_Init+0x100>)
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	f003 0320 	and.w	r3, r3, #32
 80097b6:	60fb      	str	r3, [r7, #12]
 80097b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ba:	4b2e      	ldr	r3, [pc, #184]	; (8009874 <MX_GPIO_Init+0x100>)
 80097bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097be:	4a2d      	ldr	r2, [pc, #180]	; (8009874 <MX_GPIO_Init+0x100>)
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097c6:	4b2b      	ldr	r3, [pc, #172]	; (8009874 <MX_GPIO_Init+0x100>)
 80097c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ca:	f003 0301 	and.w	r3, r3, #1
 80097ce:	60bb      	str	r3, [r7, #8]
 80097d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80097d2:	4b28      	ldr	r3, [pc, #160]	; (8009874 <MX_GPIO_Init+0x100>)
 80097d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097d6:	4a27      	ldr	r2, [pc, #156]	; (8009874 <MX_GPIO_Init+0x100>)
 80097d8:	f043 0302 	orr.w	r3, r3, #2
 80097dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80097de:	4b25      	ldr	r3, [pc, #148]	; (8009874 <MX_GPIO_Init+0x100>)
 80097e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	607b      	str	r3, [r7, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 80097ea:	2200      	movs	r2, #0
 80097ec:	f24e 0150 	movw	r1, #57424	; 0xe050
 80097f0:	4821      	ldr	r0, [pc, #132]	; (8009878 <MX_GPIO_Init+0x104>)
 80097f2:	f012 fa59 	bl	801bca8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 80097f6:	2200      	movs	r2, #0
 80097f8:	f648 1110 	movw	r1, #35088	; 0x8910
 80097fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009800:	f012 fa52 	bl	801bca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009804:	2200      	movs	r2, #0
 8009806:	f64e 4196 	movw	r1, #60566	; 0xec96
 800980a:	481c      	ldr	r0, [pc, #112]	; (800987c <MX_GPIO_Init+0x108>)
 800980c:	f012 fa4c 	bl	801bca8 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009810:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009814:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009816:	2301      	movs	r3, #1
 8009818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800981a:	2300      	movs	r3, #0
 800981c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800981e:	2300      	movs	r3, #0
 8009820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009822:	f107 0314 	add.w	r3, r7, #20
 8009826:	4619      	mov	r1, r3
 8009828:	4813      	ldr	r0, [pc, #76]	; (8009878 <MX_GPIO_Init+0x104>)
 800982a:	f012 f8bb 	bl	801b9a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 800982e:	f648 1310 	movw	r3, #35088	; 0x8910
 8009832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009834:	2301      	movs	r3, #1
 8009836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009838:	2300      	movs	r3, #0
 800983a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800983c:	2300      	movs	r3, #0
 800983e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009840:	f107 0314 	add.w	r3, r7, #20
 8009844:	4619      	mov	r1, r3
 8009846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800984a:	f012 f8ab 	bl	801b9a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800984e:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009852:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009854:	2301      	movs	r3, #1
 8009856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800985c:	2300      	movs	r3, #0
 800985e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009860:	f107 0314 	add.w	r3, r7, #20
 8009864:	4619      	mov	r1, r3
 8009866:	4805      	ldr	r0, [pc, #20]	; (800987c <MX_GPIO_Init+0x108>)
 8009868:	f012 f89c 	bl	801b9a4 <HAL_GPIO_Init>

}
 800986c:	bf00      	nop
 800986e:	3728      	adds	r7, #40	; 0x28
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	40021000 	.word	0x40021000
 8009878:	48000800 	.word	0x48000800
 800987c:	48000400 	.word	0x48000400

08009880 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b087      	sub	sp, #28
 8009884:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009886:	f00e ffdb 	bl	8018840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800988a:	f000 f8a9 	bl	80099e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800988e:	f7ff fddb 	bl	8009448 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009892:	f7ff ff6f 	bl	8009774 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009896:	f7fe fddd 	bl	8008454 <MX_ADC1_Init>
  MX_SPI1_Init();
 800989a:	f00d fae1 	bl	8016e60 <MX_SPI1_Init>
  MX_TIM6_Init();
 800989e:	f00d fd4d 	bl	801733c <MX_TIM6_Init>
  MX_TIM8_Init();
 80098a2:	f00d fd81 	bl	80173a8 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80098a6:	f00e fefd 	bl	80186a4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80098aa:	f7ff fdcd 	bl	8009448 <MX_DMA_Init>
  MX_SPI3_Init();
 80098ae:	f00d fb15 	bl	8016edc <MX_SPI3_Init>
  MX_TIM16_Init();
 80098b2:	f00d fe19 	bl	80174e8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 80098b6:	f7fe fcdf 	bl	8008278 <pl_timer_init>
  pl_gyro_init();
 80098ba:	f7fe f971 	bl	8007ba0 <pl_gyro_init>
  pl_sensor_init();
 80098be:	f7fe fb1f 	bl	8007f00 <pl_sensor_init>
  reset_distance();
 80098c2:	f7f7 fb6b 	bl	8000f9c <reset_distance>
  reset_gyro();
 80098c6:	f7f8 f977 	bl	8001bb8 <reset_gyro>
  reset_speed();
 80098ca:	f7f7 fbab 	bl	8001024 <reset_speed>
  record_reset();
 80098ce:	f00d f819 	bl	8016904 <record_reset>
  pl_motor_init();
 80098d2:	f7fe fa2b 	bl	8007d2c <pl_motor_init>
  PID_Init();
 80098d6:	f7fb f87f 	bl	80049d8 <PID_Init>
  init_WallControl();
 80098da:	f7fb fa13 	bl	8004d04 <init_WallControl>
  Control_mode_Init();
 80098de:	f7f8 fcb5 	bl	800224c <Control_mode_Init>
  init_FailSafe();
 80098e2:	f7ff fddb 	bl	800949c <init_FailSafe>
  input_parameter();
 80098e6:	f00d ffdf 	bl	80178a8 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098ee:	4b37      	ldr	r3, [pc, #220]	; (80099cc <main+0x14c>)
 80098f0:	881b      	ldrh	r3, [r3, #0]
 80098f2:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 80098f4:	4b35      	ldr	r3, [pc, #212]	; (80099cc <main+0x14c>)
 80098f6:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098f8:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 80098fa:	4b34      	ldr	r3, [pc, #208]	; (80099cc <main+0x14c>)
 80098fc:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 80098fe:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009900:	4b32      	ldr	r3, [pc, #200]	; (80099cc <main+0x14c>)
 8009902:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009904:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009906:	4b31      	ldr	r3, [pc, #196]	; (80099cc <main+0x14c>)
 8009908:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	9200      	str	r2, [sp, #0]
 800990e:	4623      	mov	r3, r4
 8009910:	4602      	mov	r2, r0
 8009912:	482f      	ldr	r0, [pc, #188]	; (80099d0 <main+0x150>)
 8009914:	f016 ff5e 	bl	80207d4 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009918:	4b2e      	ldr	r3, [pc, #184]	; (80099d4 <main+0x154>)
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800991e:	4b2d      	ldr	r3, [pc, #180]	; (80099d4 <main+0x154>)
 8009920:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009922:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009924:	4b2b      	ldr	r3, [pc, #172]	; (80099d4 <main+0x154>)
 8009926:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009928:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800992a:	4b2a      	ldr	r3, [pc, #168]	; (80099d4 <main+0x154>)
 800992c:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800992e:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009930:	4b28      	ldr	r3, [pc, #160]	; (80099d4 <main+0x154>)
 8009932:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009934:	9301      	str	r3, [sp, #4]
 8009936:	9200      	str	r2, [sp, #0]
 8009938:	4623      	mov	r3, r4
 800993a:	4602      	mov	r2, r0
 800993c:	4826      	ldr	r0, [pc, #152]	; (80099d8 <main+0x158>)
 800993e:	f016 ff49 	bl	80207d4 <iprintf>
	battcheak();
 8009942:	f7f8 fb45 	bl	8001fd0 <battcheak>

//起動cheak
	int yellow_count=1;
 8009946:	2301      	movs	r3, #1
 8009948:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 800994a:	2300      	movs	r3, #0
 800994c:	607b      	str	r3, [r7, #4]
 800994e:	e00d      	b.n	800996c <main+0xec>
		pl_yellow_LED_count(yellow_count);
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	b2db      	uxtb	r3, r3
 8009954:	4618      	mov	r0, r3
 8009956:	f7fd fcbb 	bl	80072d0 <pl_yellow_LED_count>
		HAL_Delay(50);
 800995a:	2032      	movs	r0, #50	; 0x32
 800995c:	f00e ffe8 	bl	8018930 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	005b      	lsls	r3, r3, #1
 8009964:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	3301      	adds	r3, #1
 800996a:	607b      	str	r3, [r7, #4]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b07      	cmp	r3, #7
 8009970:	ddee      	ble.n	8009950 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 8009972:	2300      	movs	r3, #0
 8009974:	603b      	str	r3, [r7, #0]
 8009976:	e00f      	b.n	8009998 <main+0x118>
			pl_yellow_LED_count(yellow_count);
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	b2db      	uxtb	r3, r3
 800997c:	4618      	mov	r0, r3
 800997e:	f7fd fca7 	bl	80072d0 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009982:	2032      	movs	r0, #50	; 0x32
 8009984:	f00e ffd4 	bl	8018930 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	0fda      	lsrs	r2, r3, #31
 800998c:	4413      	add	r3, r2
 800998e:	105b      	asrs	r3, r3, #1
 8009990:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	3301      	adds	r3, #1
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	2b08      	cmp	r3, #8
 800999c:	ddec      	ble.n	8009978 <main+0xf8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	4618      	mov	r0, r3
 80099a4:	f00b f9a0 	bl	8014ce8 <mode_decision>
 80099a8:	4603      	mov	r3, r0
 80099aa:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 80099ac:	f7f7 faf6 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 80099b0:	f7f8 f902 	bl	8001bb8 <reset_gyro>
	  		reset_speed();
 80099b4:	f7f7 fb36 	bl	8001024 <reset_speed>

	  		mode_execution(mode);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	4618      	mov	r0, r3
 80099be:	f00b fa8d 	bl	8014edc <mode_execution>

	  		error_mode = 0;
 80099c2:	4b06      	ldr	r3, [pc, #24]	; (80099dc <main+0x15c>)
 80099c4:	2200      	movs	r2, #0
 80099c6:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 80099c8:	e7e9      	b.n	800999e <main+0x11e>
 80099ca:	bf00      	nop
 80099cc:	20000710 	.word	0x20000710
 80099d0:	080241d8 	.word	0x080241d8
 80099d4:	2000071c 	.word	0x2000071c
 80099d8:	08024204 	.word	0x08024204
 80099dc:	2000080b 	.word	0x2000080b

080099e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b094      	sub	sp, #80	; 0x50
 80099e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80099e6:	f107 0318 	add.w	r3, r7, #24
 80099ea:	2238      	movs	r2, #56	; 0x38
 80099ec:	2100      	movs	r1, #0
 80099ee:	4618      	mov	r0, r3
 80099f0:	f016 fa7e 	bl	801fef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80099f4:	1d3b      	adds	r3, r7, #4
 80099f6:	2200      	movs	r2, #0
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	605a      	str	r2, [r3, #4]
 80099fc:	609a      	str	r2, [r3, #8]
 80099fe:	60da      	str	r2, [r3, #12]
 8009a00:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009a02:	2000      	movs	r0, #0
 8009a04:	f012 f968 	bl	801bcd8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009a0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a10:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009a12:	2302      	movs	r3, #2
 8009a14:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009a16:	2303      	movs	r3, #3
 8009a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009a1a:	2304      	movs	r3, #4
 8009a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009a1e:	2355      	movs	r3, #85	; 0x55
 8009a20:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009a22:	2302      	movs	r3, #2
 8009a24:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009a26:	2302      	movs	r3, #2
 8009a28:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009a2e:	f107 0318 	add.w	r3, r7, #24
 8009a32:	4618      	mov	r0, r3
 8009a34:	f012 fa04 	bl	801be40 <HAL_RCC_OscConfig>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009a3e:	f000 f81a 	bl	8009a76 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009a42:	230f      	movs	r3, #15
 8009a44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009a46:	2303      	movs	r3, #3
 8009a48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009a4e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009a52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009a5a:	1d3b      	adds	r3, r7, #4
 8009a5c:	2104      	movs	r1, #4
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f012 fd06 	bl	801c470 <HAL_RCC_ClockConfig>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009a6a:	f000 f804 	bl	8009a76 <Error_Handler>
  }
}
 8009a6e:	bf00      	nop
 8009a70:	3750      	adds	r7, #80	; 0x50
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}

08009a76 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009a76:	b480      	push	{r7}
 8009a78:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009a7a:	b672      	cpsid	i
}
 8009a7c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009a7e:	e7fe      	b.n	8009a7e <Error_Handler+0x8>

08009a80 <backTurn_controlWall>:
	}
	wait_ms_NoReset(150);

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	ed87 0a03 	vstr	s0, [r7, #12]
 8009a8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8009a8e:	4603      	mov	r3, r0
 8009a90:	71fb      	strb	r3, [r7, #7]
 8009a92:	460b      	mov	r3, r1
 8009a94:	71bb      	strb	r3, [r7, #6]
 8009a96:	4613      	mov	r3, r2
 8009a98:	717b      	strb	r3, [r7, #5]
	no_safty = 1;
 8009a9a:	4b5e      	ldr	r3, [pc, #376]	; (8009c14 <backTurn_controlWall+0x194>)
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	701a      	strb	r2, [r3, #0]
	if(front_wall){
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <backTurn_controlWall+0x3c>
		no_frontwall_straight();
 8009aa6:	f7fa fcf3 	bl	8004490 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009aaa:	2003      	movs	r0, #3
 8009aac:	f7fe f996 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ab0:	2003      	movs	r0, #3
 8009ab2:	f7fe f96b 	bl	8007d8c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009ab6:	2032      	movs	r0, #50	; 0x32
 8009ab8:	f7fe fc8e 	bl	80083d8 <wait_ms_NoReset>
	}
	if(left_wall){
 8009abc:	79bb      	ldrb	r3, [r7, #6]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d02c      	beq.n	8009b1c <backTurn_controlWall+0x9c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009ac2:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ac6:	edd7 1a03 	vldr	s3, [r7, #12]
 8009aca:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8009c18 <backTurn_controlWall+0x198>
 8009ace:	eddf 0a52 	vldr	s1, [pc, #328]	; 8009c18 <backTurn_controlWall+0x198>
 8009ad2:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8009c1c <backTurn_controlWall+0x19c>
 8009ad6:	f7fa f9d3 	bl	8003e80 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ada:	2003      	movs	r0, #3
 8009adc:	f7fe f97e 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ae0:	2003      	movs	r0, #3
 8009ae2:	f7fe f953 	bl	8007d8c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009ae6:	2032      	movs	r0, #50	; 0x32
 8009ae8:	f7fe fc76 	bl	80083d8 <wait_ms_NoReset>
		no_frontwall_straight();
 8009aec:	f7fa fcd0 	bl	8004490 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009af0:	2003      	movs	r0, #3
 8009af2:	f7fe f973 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009af6:	2003      	movs	r0, #3
 8009af8:	f7fe f948 	bl	8007d8c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009afc:	2032      	movs	r0, #50	; 0x32
 8009afe:	f7fe fc6b 	bl	80083d8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009b02:	ed97 2a02 	vldr	s4, [r7, #8]
 8009b06:	edd7 1a03 	vldr	s3, [r7, #12]
 8009b0a:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8009c18 <backTurn_controlWall+0x198>
 8009b0e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8009c18 <backTurn_controlWall+0x198>
 8009b12:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8009c1c <backTurn_controlWall+0x19c>
 8009b16:	f7fa f9b3 	bl	8003e80 <turning_table2>
 8009b1a:	e06a      	b.n	8009bf2 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall){
 8009b1c:	79bb      	ldrb	r3, [r7, #6]
 8009b1e:	f083 0301 	eor.w	r3, r3, #1
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d037      	beq.n	8009b98 <backTurn_controlWall+0x118>
 8009b28:	797b      	ldrb	r3, [r7, #5]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d034      	beq.n	8009b98 <backTurn_controlWall+0x118>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009b2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b32:	eef1 7a67 	vneg.f32	s15, s15
 8009b36:	ed97 2a02 	vldr	s4, [r7, #8]
 8009b3a:	eef0 1a67 	vmov.f32	s3, s15
 8009b3e:	ed9f 1a36 	vldr	s2, [pc, #216]	; 8009c18 <backTurn_controlWall+0x198>
 8009b42:	eddf 0a35 	vldr	s1, [pc, #212]	; 8009c18 <backTurn_controlWall+0x198>
 8009b46:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8009c20 <backTurn_controlWall+0x1a0>
 8009b4a:	f7fa f999 	bl	8003e80 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009b4e:	2003      	movs	r0, #3
 8009b50:	f7fe f944 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009b54:	2003      	movs	r0, #3
 8009b56:	f7fe f919 	bl	8007d8c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009b5a:	2032      	movs	r0, #50	; 0x32
 8009b5c:	f7fe fc3c 	bl	80083d8 <wait_ms_NoReset>
		no_frontwall_straight();
 8009b60:	f7fa fc96 	bl	8004490 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009b64:	2003      	movs	r0, #3
 8009b66:	f7fe f939 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009b6a:	2003      	movs	r0, #3
 8009b6c:	f7fe f90e 	bl	8007d8c <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009b70:	2032      	movs	r0, #50	; 0x32
 8009b72:	f7fe fc31 	bl	80083d8 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009b76:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b7a:	eef1 7a67 	vneg.f32	s15, s15
 8009b7e:	ed97 2a02 	vldr	s4, [r7, #8]
 8009b82:	eef0 1a67 	vmov.f32	s3, s15
 8009b86:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8009c18 <backTurn_controlWall+0x198>
 8009b8a:	eddf 0a23 	vldr	s1, [pc, #140]	; 8009c18 <backTurn_controlWall+0x198>
 8009b8e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8009c20 <backTurn_controlWall+0x1a0>
 8009b92:	f7fa f975 	bl	8003e80 <turning_table2>
 8009b96:	e02c      	b.n	8009bf2 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall==0){
 8009b98:	79bb      	ldrb	r3, [r7, #6]
 8009b9a:	f083 0301 	eor.w	r3, r3, #1
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d026      	beq.n	8009bf2 <backTurn_controlWall+0x172>
 8009ba4:	797b      	ldrb	r3, [r7, #5]
 8009ba6:	f083 0301 	eor.w	r3, r3, #1
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d020      	beq.n	8009bf2 <backTurn_controlWall+0x172>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009bb0:	ed97 2a02 	vldr	s4, [r7, #8]
 8009bb4:	edd7 1a03 	vldr	s3, [r7, #12]
 8009bb8:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8009c18 <backTurn_controlWall+0x198>
 8009bbc:	eddf 0a16 	vldr	s1, [pc, #88]	; 8009c18 <backTurn_controlWall+0x198>
 8009bc0:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8009c1c <backTurn_controlWall+0x19c>
 8009bc4:	f7fa f95c 	bl	8003e80 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009bc8:	2003      	movs	r0, #3
 8009bca:	f7fe f907 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009bce:	2003      	movs	r0, #3
 8009bd0:	f7fe f8dc 	bl	8007d8c <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009bd4:	2032      	movs	r0, #50	; 0x32
 8009bd6:	f7fe fbff 	bl	80083d8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009bda:	ed97 2a02 	vldr	s4, [r7, #8]
 8009bde:	edd7 1a03 	vldr	s3, [r7, #12]
 8009be2:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8009c18 <backTurn_controlWall+0x198>
 8009be6:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8009c18 <backTurn_controlWall+0x198>
 8009bea:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8009c1c <backTurn_controlWall+0x19c>
 8009bee:	f7fa f947 	bl	8003e80 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009bf2:	2003      	movs	r0, #3
 8009bf4:	f7fe f8f2 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009bf8:	2003      	movs	r0, #3
 8009bfa:	f7fe f8c7 	bl	8007d8c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(150);
 8009bfe:	2096      	movs	r0, #150	; 0x96
 8009c00:	f7fe fbea 	bl	80083d8 <wait_ms_NoReset>
	no_safty = 0;
 8009c04:	4b03      	ldr	r3, [pc, #12]	; (8009c14 <backTurn_controlWall+0x194>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
}
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	2000080a 	.word	0x2000080a
 8009c18:	00000000 	.word	0x00000000
 8009c1c:	42b40000 	.word	0x42b40000
 8009c20:	c2b40000 	.word	0xc2b40000

08009c24 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009c24:	b084      	sub	sp, #16
 8009c26:	b5b0      	push	{r4, r5, r7, lr}
 8009c28:	ed2d 8b02 	vpush	{d8}
 8009c2c:	b084      	sub	sp, #16
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009c34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009c38:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009c3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	f040 80f5 	bne.w	8009e30 <slalomR+0x20c>
		highspeed_mode = 0;
 8009c46:	4be3      	ldr	r3, [pc, #908]	; (8009fd4 <slalomR+0x3b0>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009c50:	2300      	movs	r3, #0
 8009c52:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009c5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11f      	bne.n	8009ca4 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009c64:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009c68:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009c6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009c70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009c74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c78:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009c7c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009c80:	eddf 5ad5 	vldr	s11, [pc, #852]	; 8009fd8 <slalomR+0x3b4>
 8009c84:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	eeb0 2a47 	vmov.f32	s4, s14
 8009c8e:	eef0 1a46 	vmov.f32	s3, s12
 8009c92:	eeb0 1a66 	vmov.f32	s2, s13
 8009c96:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8009fdc <slalomR+0x3b8>
 8009c9a:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8009fe0 <slalomR+0x3bc>
 8009c9e:	f7f9 fbc5 	bl	800342c <straight_table2>
 8009ca2:	e01e      	b.n	8009ce2 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009ca4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009ca8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009cac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009cb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009cb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cb8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009cbc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009cc0:	eddf 5ac5 	vldr	s11, [pc, #788]	; 8009fd8 <slalomR+0x3b4>
 8009cc4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	eeb0 2a47 	vmov.f32	s4, s14
 8009cce:	eef0 1a46 	vmov.f32	s3, s12
 8009cd2:	eeb0 1a66 	vmov.f32	s2, s13
 8009cd6:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8009fdc <slalomR+0x3b8>
 8009cda:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8009fe4 <slalomR+0x3c0>
 8009cde:	f7f9 fba5 	bl	800342c <straight_table2>
		}
		wallmode.WallCutMode=1;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 8009cea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d127      	bne.n	8009d42 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009cf2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009cf6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009cfa:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009cfe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009d02:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009d06:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009d0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009d0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d16:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009d1a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009d1e:	eddf 4aae 	vldr	s9, [pc, #696]	; 8009fd8 <slalomR+0x3b4>
 8009d22:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	eeb0 2a47 	vmov.f32	s4, s14
 8009d2c:	eef0 1a45 	vmov.f32	s3, s10
 8009d30:	eeb0 1a65 	vmov.f32	s2, s11
 8009d34:	eef0 0a46 	vmov.f32	s1, s12
 8009d38:	eeb0 0a66 	vmov.f32	s0, s13
 8009d3c:	f7f9 fb76 	bl	800342c <straight_table2>
 8009d40:	e022      	b.n	8009d88 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009d42:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009d46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009d4a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009d4e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009d52:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009d56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d5e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009d62:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009d66:	eddf 4a9c 	vldr	s9, [pc, #624]	; 8009fd8 <slalomR+0x3b4>
 8009d6a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	eeb0 2a47 	vmov.f32	s4, s14
 8009d74:	eef0 1a45 	vmov.f32	s3, s10
 8009d78:	eeb0 1a65 	vmov.f32	s2, s11
 8009d7c:	eef0 0a46 	vmov.f32	s1, s12
 8009d80:	eeb0 0a66 	vmov.f32	s0, s13
 8009d84:	f7f9 fb52 	bl	800342c <straight_table2>
		}
		if(mollifier_mode == ON){
 8009d88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d10c      	bne.n	8009daa <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009d90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009d94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009d98:	eeb0 1a47 	vmov.f32	s2, s14
 8009d9c:	eddf 0a92 	vldr	s1, [pc, #584]	; 8009fe8 <slalomR+0x3c4>
 8009da0:	eeb0 0a67 	vmov.f32	s0, s15
 8009da4:	f7fa fae0 	bl	8004368 <mollifier_slalom_table>
 8009da8:	e015      	b.n	8009dd6 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009daa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009dae:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009db2:	eef1 7a67 	vneg.f32	s15, s15
 8009db6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009dba:	eef0 2a66 	vmov.f32	s5, s13
 8009dbe:	eeb0 2a67 	vmov.f32	s4, s15
 8009dc2:	eddf 1a86 	vldr	s3, [pc, #536]	; 8009fdc <slalomR+0x3b8>
 8009dc6:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8009fdc <slalomR+0x3b8>
 8009dca:	eddf 0a87 	vldr	s1, [pc, #540]	; 8009fe8 <slalomR+0x3c4>
 8009dce:	eeb0 0a47 	vmov.f32	s0, s14
 8009dd2:	f7fa f977 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009dde:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009de2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8009fd8 <slalomR+0x3b4>
 8009de6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009dea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009dee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009df2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009df6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009dfe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8009e02:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 8009e06:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8009fd8 <slalomR+0x3b4>
 8009e0a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8009e0e:	68f8      	ldr	r0, [r7, #12]
 8009e10:	eeb0 2a47 	vmov.f32	s4, s14
 8009e14:	eef0 1a65 	vmov.f32	s3, s11
 8009e18:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8009fdc <slalomR+0x3b8>
 8009e1c:	eef0 0a46 	vmov.f32	s1, s12
 8009e20:	eeb0 0a66 	vmov.f32	s0, s13
 8009e24:	f7f9 fb02 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 8009e28:	4b6a      	ldr	r3, [pc, #424]	; (8009fd4 <slalomR+0x3b0>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 8009e2e:	e0c8      	b.n	8009fc2 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 8009e30:	2300      	movs	r3, #0
 8009e32:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009e40:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d127      	bne.n	8009e98 <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009e4c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8009e50:	ee77 6a87 	vadd.f32	s13, s15, s14
 8009e54:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009e58:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009e5c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009e60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009e64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e6c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009e70:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e74:	eddf 4a58 	vldr	s9, [pc, #352]	; 8009fd8 <slalomR+0x3b4>
 8009e78:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	eeb0 2a47 	vmov.f32	s4, s14
 8009e82:	eef0 1a45 	vmov.f32	s3, s10
 8009e86:	eeb0 1a65 	vmov.f32	s2, s11
 8009e8a:	eef0 0a46 	vmov.f32	s1, s12
 8009e8e:	eeb0 0a66 	vmov.f32	s0, s13
 8009e92:	f7f9 facb 	bl	800342c <straight_table2>
 8009e96:	e022      	b.n	8009ede <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009e98:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009e9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8009ea0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 8009ea4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009ea8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009eac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009eb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009eb4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 8009eb8:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 8009ebc:	eddf 4a46 	vldr	s9, [pc, #280]	; 8009fd8 <slalomR+0x3b4>
 8009ec0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 8009ec4:	68f8      	ldr	r0, [r7, #12]
 8009ec6:	eeb0 2a47 	vmov.f32	s4, s14
 8009eca:	eef0 1a45 	vmov.f32	s3, s10
 8009ece:	eeb0 1a65 	vmov.f32	s2, s11
 8009ed2:	eef0 0a46 	vmov.f32	s1, s12
 8009ed6:	eeb0 0a66 	vmov.f32	s0, s13
 8009eda:	f7f9 faa7 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 8009ede:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d10c      	bne.n	8009f00 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 8009ee6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009eea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009eee:	eeb0 1a47 	vmov.f32	s2, s14
 8009ef2:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8009fe8 <slalomR+0x3c4>
 8009ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8009efa:	f7fa fa35 	bl	8004368 <mollifier_slalom_table>
 8009efe:	e015      	b.n	8009f2c <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 8009f00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009f08:	eef1 7a67 	vneg.f32	s15, s15
 8009f0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009f10:	eef0 2a66 	vmov.f32	s5, s13
 8009f14:	eeb0 2a67 	vmov.f32	s4, s15
 8009f18:	eddf 1a30 	vldr	s3, [pc, #192]	; 8009fdc <slalomR+0x3b8>
 8009f1c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8009fdc <slalomR+0x3b8>
 8009f20:	eddf 0a31 	vldr	s1, [pc, #196]	; 8009fe8 <slalomR+0x3c4>
 8009f24:	eeb0 0a47 	vmov.f32	s0, s14
 8009f28:	f7fa f8cc 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 8009f30:	2300      	movs	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 8009f34:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 8009f38:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 8009f3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009f40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009f44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f48:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f54:	eef0 7ae7 	vabs.f32	s15, s15
 8009f58:	ee17 0a90 	vmov	r0, s15
 8009f5c:	f7f6 fb1c 	bl	8000598 <__aeabi_f2d>
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009f68:	f7f6 fc98 	bl	800089c <__aeabi_ddiv>
 8009f6c:	4602      	mov	r2, r0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4614      	mov	r4, r2
 8009f72:	461d      	mov	r5, r3
 8009f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7f6 fb0e 	bl	8000598 <__aeabi_f2d>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4620      	mov	r0, r4
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 fc8a 	bl	800089c <__aeabi_ddiv>
 8009f88:	4602      	mov	r2, r0
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f04f 0200 	mov.w	r2, #0
 8009f94:	4b15      	ldr	r3, [pc, #84]	; (8009fec <slalomR+0x3c8>)
 8009f96:	f7f6 f9a1 	bl	80002dc <__adddf3>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 8009f9e:	4610      	mov	r0, r2
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	f7f6 fe29 	bl	8000bf8 <__aeabi_d2f>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	ee02 3a10 	vmov	s4, r3
 8009fae:	edd7 1a01 	vldr	s3, [r7, #4]
 8009fb2:	ed97 1a01 	vldr	s2, [r7, #4]
 8009fb6:	eef0 0a68 	vmov.f32	s1, s17
 8009fba:	eeb0 0a48 	vmov.f32	s0, s16
 8009fbe:	f7f9 fa35 	bl	800342c <straight_table2>
}
 8009fc2:	bf00      	nop
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	ecbd 8b02 	vpop	{d8}
 8009fcc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8009fd0:	b004      	add	sp, #16
 8009fd2:	4770      	bx	lr
 8009fd4:	2000080c 	.word	0x2000080c
 8009fd8:	42340000 	.word	0x42340000
 8009fdc:	00000000 	.word	0x00000000
 8009fe0:	431b8000 	.word	0x431b8000
 8009fe4:	43138000 	.word	0x43138000
 8009fe8:	c2b40000 	.word	0xc2b40000
 8009fec:	408f4000 	.word	0x408f4000

08009ff0 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	b5b0      	push	{r4, r5, r7, lr}
 8009ff4:	ed2d 8b02 	vpush	{d8}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a004:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a008:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	f040 80f3 	bne.w	800a1f8 <slalomL+0x208>
		highspeed_mode = 0;
 800a012:	4be1      	ldr	r3, [pc, #900]	; (800a398 <slalomL+0x3a8>)
 800a014:	2200      	movs	r2, #0
 800a016:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a018:	2301      	movs	r3, #1
 800a01a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a01c:	2300      	movs	r3, #0
 800a01e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a020:	2300      	movs	r3, #0
 800a022:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a024:	2300      	movs	r3, #0
 800a026:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a028:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11f      	bne.n	800a070 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a030:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a034:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a038:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a03c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a040:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a044:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a048:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a04c:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800a39c <slalomL+0x3ac>
 800a050:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a054:	68f8      	ldr	r0, [r7, #12]
 800a056:	eeb0 2a47 	vmov.f32	s4, s14
 800a05a:	eef0 1a46 	vmov.f32	s3, s12
 800a05e:	eeb0 1a66 	vmov.f32	s2, s13
 800a062:	eddf 0acf 	vldr	s1, [pc, #828]	; 800a3a0 <slalomL+0x3b0>
 800a066:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800a3a4 <slalomL+0x3b4>
 800a06a:	f7f9 f9df 	bl	800342c <straight_table2>
 800a06e:	e01e      	b.n	800a0ae <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a070:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a074:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a078:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a07c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a084:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a088:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a08c:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800a39c <slalomL+0x3ac>
 800a090:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	eeb0 2a47 	vmov.f32	s4, s14
 800a09a:	eef0 1a46 	vmov.f32	s3, s12
 800a09e:	eeb0 1a66 	vmov.f32	s2, s13
 800a0a2:	eddf 0abf 	vldr	s1, [pc, #764]	; 800a3a0 <slalomL+0x3b0>
 800a0a6:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a3a8 <slalomL+0x3b8>
 800a0aa:	f7f9 f9bf 	bl	800342c <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a0b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d127      	bne.n	800a10e <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a0c2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a0c6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a0ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a0ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a0d2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0e2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a0e6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0ea:	eddf 4aac 	vldr	s9, [pc, #688]	; 800a39c <slalomL+0x3ac>
 800a0ee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	eeb0 2a47 	vmov.f32	s4, s14
 800a0f8:	eef0 1a45 	vmov.f32	s3, s10
 800a0fc:	eeb0 1a65 	vmov.f32	s2, s11
 800a100:	eef0 0a46 	vmov.f32	s1, s12
 800a104:	eeb0 0a66 	vmov.f32	s0, s13
 800a108:	f7f9 f990 	bl	800342c <straight_table2>
 800a10c:	e022      	b.n	800a154 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a10e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a112:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a116:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a11a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a11e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a12a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a12e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a132:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800a39c <slalomL+0x3ac>
 800a136:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	eeb0 2a47 	vmov.f32	s4, s14
 800a140:	eef0 1a45 	vmov.f32	s3, s10
 800a144:	eeb0 1a65 	vmov.f32	s2, s11
 800a148:	eef0 0a46 	vmov.f32	s1, s12
 800a14c:	eeb0 0a66 	vmov.f32	s0, s13
 800a150:	f7f9 f96c 	bl	800342c <straight_table2>
		}
		if(mollifier_mode == ON){
 800a154:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d10c      	bne.n	800a176 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a160:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a164:	eeb0 1a47 	vmov.f32	s2, s14
 800a168:	eddf 0a90 	vldr	s1, [pc, #576]	; 800a3ac <slalomL+0x3bc>
 800a16c:	eeb0 0a67 	vmov.f32	s0, s15
 800a170:	f7fa f8fa 	bl	8004368 <mollifier_slalom_table>
 800a174:	e013      	b.n	800a19e <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a176:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a17a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a17e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a182:	eef0 2a66 	vmov.f32	s5, s13
 800a186:	eeb0 2a47 	vmov.f32	s4, s14
 800a18a:	eddf 1a85 	vldr	s3, [pc, #532]	; 800a3a0 <slalomL+0x3b0>
 800a18e:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800a3a0 <slalomL+0x3b0>
 800a192:	eddf 0a86 	vldr	s1, [pc, #536]	; 800a3ac <slalomL+0x3bc>
 800a196:	eeb0 0a67 	vmov.f32	s0, s15
 800a19a:	f7f9 ff93 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a1a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a1aa:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a39c <slalomL+0x3ac>
 800a1ae:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1b6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1c6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a1ca:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a1ce:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800a39c <slalomL+0x3ac>
 800a1d2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	eeb0 2a47 	vmov.f32	s4, s14
 800a1dc:	eef0 1a65 	vmov.f32	s3, s11
 800a1e0:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a3a0 <slalomL+0x3b0>
 800a1e4:	eef0 0a46 	vmov.f32	s1, s12
 800a1e8:	eeb0 0a66 	vmov.f32	s0, s13
 800a1ec:	f7f9 f91e 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800a1f0:	4b69      	ldr	r3, [pc, #420]	; (800a398 <slalomL+0x3a8>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a1f6:	e0c6      	b.n	800a386 <slalomL+0x396>
		wallmode.WallControlMode=0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a200:	2301      	movs	r3, #1
 800a202:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a204:	2300      	movs	r3, #0
 800a206:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a208:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d127      	bne.n	800a260 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a210:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a214:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a218:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a21c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a220:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a224:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a228:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a22c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a230:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a234:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a238:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a23c:	eddf 4a57 	vldr	s9, [pc, #348]	; 800a39c <slalomL+0x3ac>
 800a240:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a244:	68f8      	ldr	r0, [r7, #12]
 800a246:	eeb0 2a47 	vmov.f32	s4, s14
 800a24a:	eef0 1a45 	vmov.f32	s3, s10
 800a24e:	eeb0 1a65 	vmov.f32	s2, s11
 800a252:	eef0 0a46 	vmov.f32	s1, s12
 800a256:	eeb0 0a66 	vmov.f32	s0, s13
 800a25a:	f7f9 f8e7 	bl	800342c <straight_table2>
 800a25e:	e022      	b.n	800a2a6 <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a260:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a264:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a268:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a26c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a270:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a274:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a27c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a280:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a284:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a39c <slalomL+0x3ac>
 800a288:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	eeb0 2a47 	vmov.f32	s4, s14
 800a292:	eef0 1a45 	vmov.f32	s3, s10
 800a296:	eeb0 1a65 	vmov.f32	s2, s11
 800a29a:	eef0 0a46 	vmov.f32	s1, s12
 800a29e:	eeb0 0a66 	vmov.f32	s0, s13
 800a2a2:	f7f9 f8c3 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800a2a6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d10c      	bne.n	800a2c8 <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a2ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2b2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a2b6:	eeb0 1a47 	vmov.f32	s2, s14
 800a2ba:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a3ac <slalomL+0x3bc>
 800a2be:	eeb0 0a67 	vmov.f32	s0, s15
 800a2c2:	f7fa f851 	bl	8004368 <mollifier_slalom_table>
 800a2c6:	e013      	b.n	800a2f0 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a2c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a2d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a2d4:	eef0 2a66 	vmov.f32	s5, s13
 800a2d8:	eeb0 2a47 	vmov.f32	s4, s14
 800a2dc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a3a0 <slalomL+0x3b0>
 800a2e0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a3a0 <slalomL+0x3b0>
 800a2e4:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a3ac <slalomL+0x3bc>
 800a2e8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ec:	f7f9 feea 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2f8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a2fc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a300:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a304:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a308:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a30c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a310:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a314:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a318:	eef0 7ae7 	vabs.f32	s15, s15
 800a31c:	ee17 0a90 	vmov	r0, s15
 800a320:	f7f6 f93a 	bl	8000598 <__aeabi_f2d>
 800a324:	f04f 0200 	mov.w	r2, #0
 800a328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a32c:	f7f6 fab6 	bl	800089c <__aeabi_ddiv>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4614      	mov	r4, r2
 800a336:	461d      	mov	r5, r3
 800a338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7f6 f92c 	bl	8000598 <__aeabi_f2d>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f6 faa8 	bl	800089c <__aeabi_ddiv>
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	4610      	mov	r0, r2
 800a352:	4619      	mov	r1, r3
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <slalomL+0x3c0>)
 800a35a:	f7f5 ffbf 	bl	80002dc <__adddf3>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a362:	4610      	mov	r0, r2
 800a364:	4619      	mov	r1, r3
 800a366:	f7f6 fc47 	bl	8000bf8 <__aeabi_d2f>
 800a36a:	4603      	mov	r3, r0
 800a36c:	68f8      	ldr	r0, [r7, #12]
 800a36e:	ee02 3a10 	vmov	s4, r3
 800a372:	edd7 1a01 	vldr	s3, [r7, #4]
 800a376:	ed97 1a01 	vldr	s2, [r7, #4]
 800a37a:	eef0 0a68 	vmov.f32	s1, s17
 800a37e:	eeb0 0a48 	vmov.f32	s0, s16
 800a382:	f7f9 f853 	bl	800342c <straight_table2>
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	ecbd 8b02 	vpop	{d8}
 800a390:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a394:	b004      	add	sp, #16
 800a396:	4770      	bx	lr
 800a398:	2000080c 	.word	0x2000080c
 800a39c:	42340000 	.word	0x42340000
 800a3a0:	00000000 	.word	0x00000000
 800a3a4:	431b8000 	.word	0x431b8000
 800a3a8:	43138000 	.word	0x43138000
 800a3ac:	42b40000 	.word	0x42b40000
 800a3b0:	408f4000 	.word	0x408f4000

0800a3b4 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	b5b0      	push	{r4, r5, r7, lr}
 800a3b8:	ed2d 8b02 	vpush	{d8}
 800a3bc:	b084      	sub	sp, #16
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a3c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a3c8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a3cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a3d0:	2b01      	cmp	r3, #1
 800a3d2:	f040 80a5 	bne.w	800a520 <turn90R+0x16c>
		highspeed_mode = 1;
 800a3d6:	4ba5      	ldr	r3, [pc, #660]	; (800a66c <turn90R+0x2b8>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a3ec:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3f0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a400:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a404:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a408:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a670 <turn90R+0x2bc>
 800a40c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	eeb0 2a47 	vmov.f32	s4, s14
 800a416:	eef0 1a46 	vmov.f32	s3, s12
 800a41a:	eeb0 1a66 	vmov.f32	s2, s13
 800a41e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a674 <turn90R+0x2c0>
 800a422:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a678 <turn90R+0x2c4>
 800a426:	f7f9 f801 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800a42a:	2300      	movs	r3, #0
 800a42c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a42e:	2302      	movs	r3, #2
 800a430:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a432:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a436:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a43a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a43e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a442:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a446:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a44a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a44e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a452:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a456:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a670 <turn90R+0x2bc>
 800a45a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a45e:	68f8      	ldr	r0, [r7, #12]
 800a460:	eeb0 2a47 	vmov.f32	s4, s14
 800a464:	eef0 1a45 	vmov.f32	s3, s10
 800a468:	eeb0 1a65 	vmov.f32	s2, s11
 800a46c:	eef0 0a46 	vmov.f32	s1, s12
 800a470:	eeb0 0a66 	vmov.f32	s0, s13
 800a474:	f7f8 ffda 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800a478:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d10c      	bne.n	800a49a <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a484:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a488:	eeb0 1a47 	vmov.f32	s2, s14
 800a48c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a67c <turn90R+0x2c8>
 800a490:	eeb0 0a67 	vmov.f32	s0, s15
 800a494:	f7f9 ff68 	bl	8004368 <mollifier_slalom_table>
 800a498:	e015      	b.n	800a4c6 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a49a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a49e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a4a2:	eef1 7a67 	vneg.f32	s15, s15
 800a4a6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a4aa:	eef0 2a66 	vmov.f32	s5, s13
 800a4ae:	eeb0 2a67 	vmov.f32	s4, s15
 800a4b2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a674 <turn90R+0x2c0>
 800a4b6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a674 <turn90R+0x2c0>
 800a4ba:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a67c <turn90R+0x2c8>
 800a4be:	eeb0 0a47 	vmov.f32	s0, s14
 800a4c2:	f7f9 fdff 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a4ce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4d2:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a680 <turn90R+0x2cc>
 800a4d6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a4da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4ee:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a4f2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a4f6:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a670 <turn90R+0x2bc>
 800a4fa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	eeb0 2a47 	vmov.f32	s4, s14
 800a504:	eef0 1a65 	vmov.f32	s3, s11
 800a508:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a674 <turn90R+0x2c0>
 800a50c:	eef0 0a46 	vmov.f32	s1, s12
 800a510:	eeb0 0a66 	vmov.f32	s0, s13
 800a514:	f7f8 ff8a 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800a518:	4b54      	ldr	r3, [pc, #336]	; (800a66c <turn90R+0x2b8>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a51e:	e09c      	b.n	800a65a <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a520:	2300      	movs	r3, #0
 800a522:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a524:	2300      	movs	r3, #0
 800a526:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a528:	2302      	movs	r3, #2
 800a52a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a530:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a534:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a538:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a53c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a540:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a544:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a548:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a54c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a550:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a554:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a670 <turn90R+0x2bc>
 800a558:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a55c:	68f8      	ldr	r0, [r7, #12]
 800a55e:	eeb0 2a47 	vmov.f32	s4, s14
 800a562:	eef0 1a45 	vmov.f32	s3, s10
 800a566:	eeb0 1a65 	vmov.f32	s2, s11
 800a56a:	eef0 0a46 	vmov.f32	s1, s12
 800a56e:	eeb0 0a66 	vmov.f32	s0, s13
 800a572:	f7f8 ff5b 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800a576:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d10c      	bne.n	800a598 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a57e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a582:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a586:	eeb0 1a47 	vmov.f32	s2, s14
 800a58a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a67c <turn90R+0x2c8>
 800a58e:	eeb0 0a67 	vmov.f32	s0, s15
 800a592:	f7f9 fee9 	bl	8004368 <mollifier_slalom_table>
 800a596:	e015      	b.n	800a5c4 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a598:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a59c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a5a0:	eef1 7a67 	vneg.f32	s15, s15
 800a5a4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a5a8:	eef0 2a66 	vmov.f32	s5, s13
 800a5ac:	eeb0 2a67 	vmov.f32	s4, s15
 800a5b0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a674 <turn90R+0x2c0>
 800a5b4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a674 <turn90R+0x2c0>
 800a5b8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a67c <turn90R+0x2c8>
 800a5bc:	eeb0 0a47 	vmov.f32	s0, s14
 800a5c0:	f7f9 fd80 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a5cc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a5d0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a5d4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5e0:	edd7 7a01 	vldr	s15, [r7, #4]
 800a5e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a5e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ec:	eef0 7ae7 	vabs.f32	s15, s15
 800a5f0:	ee17 0a90 	vmov	r0, s15
 800a5f4:	f7f5 ffd0 	bl	8000598 <__aeabi_f2d>
 800a5f8:	f04f 0200 	mov.w	r2, #0
 800a5fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a600:	f7f6 f94c 	bl	800089c <__aeabi_ddiv>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4614      	mov	r4, r2
 800a60a:	461d      	mov	r5, r3
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	4618      	mov	r0, r3
 800a610:	f7f5 ffc2 	bl	8000598 <__aeabi_f2d>
 800a614:	4602      	mov	r2, r0
 800a616:	460b      	mov	r3, r1
 800a618:	4620      	mov	r0, r4
 800a61a:	4629      	mov	r1, r5
 800a61c:	f7f6 f93e 	bl	800089c <__aeabi_ddiv>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4610      	mov	r0, r2
 800a626:	4619      	mov	r1, r3
 800a628:	f04f 0200 	mov.w	r2, #0
 800a62c:	4b15      	ldr	r3, [pc, #84]	; (800a684 <turn90R+0x2d0>)
 800a62e:	f7f5 fe55 	bl	80002dc <__adddf3>
 800a632:	4602      	mov	r2, r0
 800a634:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a636:	4610      	mov	r0, r2
 800a638:	4619      	mov	r1, r3
 800a63a:	f7f6 fadd 	bl	8000bf8 <__aeabi_d2f>
 800a63e:	4603      	mov	r3, r0
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	ee02 3a10 	vmov	s4, r3
 800a646:	edd7 1a01 	vldr	s3, [r7, #4]
 800a64a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a64e:	eef0 0a68 	vmov.f32	s1, s17
 800a652:	eeb0 0a48 	vmov.f32	s0, s16
 800a656:	f7f8 fee9 	bl	800342c <straight_table2>
}
 800a65a:	bf00      	nop
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	ecbd 8b02 	vpop	{d8}
 800a664:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a668:	b004      	add	sp, #16
 800a66a:	4770      	bx	lr
 800a66c:	2000080c 	.word	0x2000080c
 800a670:	42340000 	.word	0x42340000
 800a674:	00000000 	.word	0x00000000
 800a678:	42cd0000 	.word	0x42cd0000
 800a67c:	c2b40000 	.word	0xc2b40000
 800a680:	42b40000 	.word	0x42b40000
 800a684:	408f4000 	.word	0x408f4000

0800a688 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a688:	b084      	sub	sp, #16
 800a68a:	b5b0      	push	{r4, r5, r7, lr}
 800a68c:	ed2d 8b02 	vpush	{d8}
 800a690:	b084      	sub	sp, #16
 800a692:	af00      	add	r7, sp, #0
 800a694:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a69c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a6a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	f040 80a3 	bne.w	800a7f0 <turn90L+0x168>
		highspeed_mode = 1;
 800a6aa:	4ba3      	ldr	r3, [pc, #652]	; (800a938 <turn90L+0x2b0>)
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a6c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a6c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a6c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a6cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a6d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a6d4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a6d8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a6dc:	eddf 5a97 	vldr	s11, [pc, #604]	; 800a93c <turn90L+0x2b4>
 800a6e0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	eeb0 2a47 	vmov.f32	s4, s14
 800a6ea:	eef0 1a46 	vmov.f32	s3, s12
 800a6ee:	eeb0 1a66 	vmov.f32	s2, s13
 800a6f2:	eddf 0a93 	vldr	s1, [pc, #588]	; 800a940 <turn90L+0x2b8>
 800a6f6:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800a944 <turn90L+0x2bc>
 800a6fa:	f7f8 fe97 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a702:	2302      	movs	r3, #2
 800a704:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a706:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a70a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a70e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a712:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a716:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a71a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a71e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a722:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a726:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a72a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a93c <turn90L+0x2b4>
 800a72e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	eeb0 2a47 	vmov.f32	s4, s14
 800a738:	eef0 1a45 	vmov.f32	s3, s10
 800a73c:	eeb0 1a65 	vmov.f32	s2, s11
 800a740:	eef0 0a46 	vmov.f32	s1, s12
 800a744:	eeb0 0a66 	vmov.f32	s0, s13
 800a748:	f7f8 fe70 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800a74c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a750:	2b01      	cmp	r3, #1
 800a752:	d10c      	bne.n	800a76e <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a758:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a75c:	eeb0 1a47 	vmov.f32	s2, s14
 800a760:	eddf 0a79 	vldr	s1, [pc, #484]	; 800a948 <turn90L+0x2c0>
 800a764:	eeb0 0a67 	vmov.f32	s0, s15
 800a768:	f7f9 fdfe 	bl	8004368 <mollifier_slalom_table>
 800a76c:	e013      	b.n	800a796 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a76e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a772:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a776:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a77a:	eef0 2a66 	vmov.f32	s5, s13
 800a77e:	eeb0 2a47 	vmov.f32	s4, s14
 800a782:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a940 <turn90L+0x2b8>
 800a786:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a940 <turn90L+0x2b8>
 800a78a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800a948 <turn90L+0x2c0>
 800a78e:	eeb0 0a67 	vmov.f32	s0, s15
 800a792:	f7f9 fc97 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a796:	2300      	movs	r3, #0
 800a798:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a79e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a7a2:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800a948 <turn90L+0x2c0>
 800a7a6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a7aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a7ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7be:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a7c2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a7c6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a93c <turn90L+0x2b4>
 800a7ca:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	eeb0 2a47 	vmov.f32	s4, s14
 800a7d4:	eef0 1a65 	vmov.f32	s3, s11
 800a7d8:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a940 <turn90L+0x2b8>
 800a7dc:	eef0 0a46 	vmov.f32	s1, s12
 800a7e0:	eeb0 0a66 	vmov.f32	s0, s13
 800a7e4:	f7f8 fe22 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800a7e8:	4b53      	ldr	r3, [pc, #332]	; (800a938 <turn90L+0x2b0>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a7ee:	e09a      	b.n	800a926 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a800:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a804:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a808:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a80c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a810:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a814:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a81c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a820:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a824:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a93c <turn90L+0x2b4>
 800a828:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	eeb0 2a47 	vmov.f32	s4, s14
 800a832:	eef0 1a45 	vmov.f32	s3, s10
 800a836:	eeb0 1a65 	vmov.f32	s2, s11
 800a83a:	eef0 0a46 	vmov.f32	s1, s12
 800a83e:	eeb0 0a66 	vmov.f32	s0, s13
 800a842:	f7f8 fdf3 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800a846:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d10c      	bne.n	800a868 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a84e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a852:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a856:	eeb0 1a47 	vmov.f32	s2, s14
 800a85a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800a948 <turn90L+0x2c0>
 800a85e:	eeb0 0a67 	vmov.f32	s0, s15
 800a862:	f7f9 fd81 	bl	8004368 <mollifier_slalom_table>
 800a866:	e013      	b.n	800a890 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a868:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a86c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a870:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a874:	eef0 2a66 	vmov.f32	s5, s13
 800a878:	eeb0 2a47 	vmov.f32	s4, s14
 800a87c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a940 <turn90L+0x2b8>
 800a880:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a940 <turn90L+0x2b8>
 800a884:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a948 <turn90L+0x2c0>
 800a888:	eeb0 0a67 	vmov.f32	s0, s15
 800a88c:	f7f9 fc1a 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a890:	2301      	movs	r3, #1
 800a892:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a894:	2300      	movs	r3, #0
 800a896:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a898:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a89c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a8a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ac:	edd7 7a01 	vldr	s15, [r7, #4]
 800a8b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a8b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8b8:	eef0 7ae7 	vabs.f32	s15, s15
 800a8bc:	ee17 0a90 	vmov	r0, s15
 800a8c0:	f7f5 fe6a 	bl	8000598 <__aeabi_f2d>
 800a8c4:	f04f 0200 	mov.w	r2, #0
 800a8c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8cc:	f7f5 ffe6 	bl	800089c <__aeabi_ddiv>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4614      	mov	r4, r2
 800a8d6:	461d      	mov	r5, r3
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f5 fe5c 	bl	8000598 <__aeabi_f2d>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	f7f5 ffd8 	bl	800089c <__aeabi_ddiv>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	4b14      	ldr	r3, [pc, #80]	; (800a94c <turn90L+0x2c4>)
 800a8fa:	f7f5 fcef 	bl	80002dc <__adddf3>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a902:	4610      	mov	r0, r2
 800a904:	4619      	mov	r1, r3
 800a906:	f7f6 f977 	bl	8000bf8 <__aeabi_d2f>
 800a90a:	4603      	mov	r3, r0
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	ee02 3a10 	vmov	s4, r3
 800a912:	edd7 1a01 	vldr	s3, [r7, #4]
 800a916:	ed97 1a01 	vldr	s2, [r7, #4]
 800a91a:	eef0 0a68 	vmov.f32	s1, s17
 800a91e:	eeb0 0a48 	vmov.f32	s0, s16
 800a922:	f7f8 fd83 	bl	800342c <straight_table2>
}
 800a926:	bf00      	nop
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	ecbd 8b02 	vpop	{d8}
 800a930:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a934:	b004      	add	sp, #16
 800a936:	4770      	bx	lr
 800a938:	2000080c 	.word	0x2000080c
 800a93c:	42340000 	.word	0x42340000
 800a940:	00000000 	.word	0x00000000
 800a944:	42cd0000 	.word	0x42cd0000
 800a948:	42b40000 	.word	0x42b40000
 800a94c:	408f4000 	.word	0x408f4000

0800a950 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a950:	b084      	sub	sp, #16
 800a952:	b5b0      	push	{r4, r5, r7, lr}
 800a954:	ed2d 8b02 	vpush	{d8}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a964:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a968:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	f040 80a5 	bne.w	800aabc <turn180R+0x16c>
		highspeed_mode = 1;
 800a972:	4ba5      	ldr	r3, [pc, #660]	; (800ac08 <turn180R+0x2b8>)
 800a974:	2201      	movs	r2, #1
 800a976:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a978:	2301      	movs	r3, #1
 800a97a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a980:	2300      	movs	r3, #0
 800a982:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a984:	2300      	movs	r3, #0
 800a986:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a988:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a98c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a990:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a994:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a99c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a9a0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a9a4:	eddf 5a99 	vldr	s11, [pc, #612]	; 800ac0c <turn180R+0x2bc>
 800a9a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	eeb0 2a47 	vmov.f32	s4, s14
 800a9b2:	eef0 1a46 	vmov.f32	s3, s12
 800a9b6:	eeb0 1a66 	vmov.f32	s2, s13
 800a9ba:	eddf 0a95 	vldr	s1, [pc, #596]	; 800ac10 <turn180R+0x2c0>
 800a9be:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800ac14 <turn180R+0x2c4>
 800a9c2:	f7f8 fd33 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a9ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a9d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a9d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a9da:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a9de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a9e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a9ea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a9ee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a9f2:	eddf 4a86 	vldr	s9, [pc, #536]	; 800ac0c <turn180R+0x2bc>
 800a9f6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	eeb0 2a47 	vmov.f32	s4, s14
 800aa00:	eef0 1a45 	vmov.f32	s3, s10
 800aa04:	eeb0 1a65 	vmov.f32	s2, s11
 800aa08:	eef0 0a46 	vmov.f32	s1, s12
 800aa0c:	eeb0 0a66 	vmov.f32	s0, s13
 800aa10:	f7f8 fd0c 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800aa14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d10c      	bne.n	800aa36 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800aa1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aa24:	eeb0 1a47 	vmov.f32	s2, s14
 800aa28:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800ac18 <turn180R+0x2c8>
 800aa2c:	eeb0 0a67 	vmov.f32	s0, s15
 800aa30:	f7f9 fc9a 	bl	8004368 <mollifier_slalom_table>
 800aa34:	e015      	b.n	800aa62 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800aa36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800aa3e:	eef1 7a67 	vneg.f32	s15, s15
 800aa42:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aa46:	eef0 2a66 	vmov.f32	s5, s13
 800aa4a:	eeb0 2a67 	vmov.f32	s4, s15
 800aa4e:	eddf 1a70 	vldr	s3, [pc, #448]	; 800ac10 <turn180R+0x2c0>
 800aa52:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800ac10 <turn180R+0x2c0>
 800aa56:	eddf 0a70 	vldr	s1, [pc, #448]	; 800ac18 <turn180R+0x2c8>
 800aa5a:	eeb0 0a47 	vmov.f32	s0, s14
 800aa5e:	f7f9 fb31 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aa62:	2300      	movs	r3, #0
 800aa64:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aa6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aa6e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ac1c <turn180R+0x2cc>
 800aa72:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aa76:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa7a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa8a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aa8e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aa92:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800ac0c <turn180R+0x2bc>
 800aa96:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	eeb0 2a47 	vmov.f32	s4, s14
 800aaa0:	eef0 1a65 	vmov.f32	s3, s11
 800aaa4:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800ac10 <turn180R+0x2c0>
 800aaa8:	eef0 0a46 	vmov.f32	s1, s12
 800aaac:	eeb0 0a66 	vmov.f32	s0, s13
 800aab0:	f7f8 fcbc 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800aab4:	4b54      	ldr	r3, [pc, #336]	; (800ac08 <turn180R+0x2b8>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800aaba:	e09c      	b.n	800abf6 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800aabc:	2300      	movs	r3, #0
 800aabe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aac0:	2300      	movs	r3, #0
 800aac2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800aac4:	2302      	movs	r3, #2
 800aac6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aac8:	2300      	movs	r3, #0
 800aaca:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aacc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aad0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aad4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aad8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aadc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aae0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aae8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aaec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aaf0:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ac0c <turn180R+0x2bc>
 800aaf4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aaf8:	68f8      	ldr	r0, [r7, #12]
 800aafa:	eeb0 2a47 	vmov.f32	s4, s14
 800aafe:	eef0 1a45 	vmov.f32	s3, s10
 800ab02:	eeb0 1a65 	vmov.f32	s2, s11
 800ab06:	eef0 0a46 	vmov.f32	s1, s12
 800ab0a:	eeb0 0a66 	vmov.f32	s0, s13
 800ab0e:	f7f8 fc8d 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800ab12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d10c      	bne.n	800ab34 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ab1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab22:	eeb0 1a47 	vmov.f32	s2, s14
 800ab26:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800ac18 <turn180R+0x2c8>
 800ab2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab2e:	f7f9 fc1b 	bl	8004368 <mollifier_slalom_table>
 800ab32:	e015      	b.n	800ab60 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ab34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab38:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab3c:	eef1 7a67 	vneg.f32	s15, s15
 800ab40:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ab44:	eef0 2a66 	vmov.f32	s5, s13
 800ab48:	eeb0 2a67 	vmov.f32	s4, s15
 800ab4c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac10 <turn180R+0x2c0>
 800ab50:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac10 <turn180R+0x2c0>
 800ab54:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ac18 <turn180R+0x2c8>
 800ab58:	eeb0 0a47 	vmov.f32	s0, s14
 800ab5c:	f7f9 fab2 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ab60:	2301      	movs	r3, #1
 800ab62:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ab68:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ab6c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ab70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab7c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab80:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ab84:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab88:	eef0 7ae7 	vabs.f32	s15, s15
 800ab8c:	ee17 0a90 	vmov	r0, s15
 800ab90:	f7f5 fd02 	bl	8000598 <__aeabi_f2d>
 800ab94:	f04f 0200 	mov.w	r2, #0
 800ab98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab9c:	f7f5 fe7e 	bl	800089c <__aeabi_ddiv>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	4614      	mov	r4, r2
 800aba6:	461d      	mov	r5, r3
 800aba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abaa:	4618      	mov	r0, r3
 800abac:	f7f5 fcf4 	bl	8000598 <__aeabi_f2d>
 800abb0:	4602      	mov	r2, r0
 800abb2:	460b      	mov	r3, r1
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fe70 	bl	800089c <__aeabi_ddiv>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4610      	mov	r0, r2
 800abc2:	4619      	mov	r1, r3
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <turn180R+0x2d0>)
 800abca:	f7f5 fb87 	bl	80002dc <__adddf3>
 800abce:	4602      	mov	r2, r0
 800abd0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abd2:	4610      	mov	r0, r2
 800abd4:	4619      	mov	r1, r3
 800abd6:	f7f6 f80f 	bl	8000bf8 <__aeabi_d2f>
 800abda:	4603      	mov	r3, r0
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	ee02 3a10 	vmov	s4, r3
 800abe2:	edd7 1a01 	vldr	s3, [r7, #4]
 800abe6:	ed97 1a01 	vldr	s2, [r7, #4]
 800abea:	eef0 0a68 	vmov.f32	s1, s17
 800abee:	eeb0 0a48 	vmov.f32	s0, s16
 800abf2:	f7f8 fc1b 	bl	800342c <straight_table2>
}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	ecbd 8b02 	vpop	{d8}
 800ac00:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac04:	b004      	add	sp, #16
 800ac06:	4770      	bx	lr
 800ac08:	2000080c 	.word	0x2000080c
 800ac0c:	42340000 	.word	0x42340000
 800ac10:	00000000 	.word	0x00000000
 800ac14:	42cd0000 	.word	0x42cd0000
 800ac18:	c3340000 	.word	0xc3340000
 800ac1c:	42b40000 	.word	0x42b40000
 800ac20:	408f4000 	.word	0x408f4000

0800ac24 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ac24:	b084      	sub	sp, #16
 800ac26:	b5b0      	push	{r4, r5, r7, lr}
 800ac28:	ed2d 8b02 	vpush	{d8}
 800ac2c:	b084      	sub	sp, #16
 800ac2e:	af00      	add	r7, sp, #0
 800ac30:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ac34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ac38:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ac3c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	f040 80a3 	bne.w	800ad8c <turn180L+0x168>
		highspeed_mode = 1;
 800ac46:	4ba3      	ldr	r3, [pc, #652]	; (800aed4 <turn180L+0x2b0>)
 800ac48:	2201      	movs	r2, #1
 800ac4a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ac5c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ac60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac64:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac70:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ac74:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ac78:	eddf 5a97 	vldr	s11, [pc, #604]	; 800aed8 <turn180L+0x2b4>
 800ac7c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	eeb0 2a47 	vmov.f32	s4, s14
 800ac86:	eef0 1a46 	vmov.f32	s3, s12
 800ac8a:	eeb0 1a66 	vmov.f32	s2, s13
 800ac8e:	eddf 0a93 	vldr	s1, [pc, #588]	; 800aedc <turn180L+0x2b8>
 800ac92:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800aee0 <turn180L+0x2bc>
 800ac96:	f7f8 fbc9 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ac9e:	2302      	movs	r3, #2
 800aca0:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aca2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aca6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800acaa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800acae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acb2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acb6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acbe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800acc2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800acc6:	eddf 4a84 	vldr	s9, [pc, #528]	; 800aed8 <turn180L+0x2b4>
 800acca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	eeb0 2a47 	vmov.f32	s4, s14
 800acd4:	eef0 1a45 	vmov.f32	s3, s10
 800acd8:	eeb0 1a65 	vmov.f32	s2, s11
 800acdc:	eef0 0a46 	vmov.f32	s1, s12
 800ace0:	eeb0 0a66 	vmov.f32	s0, s13
 800ace4:	f7f8 fba2 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800ace8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800acec:	2b01      	cmp	r3, #1
 800acee:	d10c      	bne.n	800ad0a <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800acf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acf4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800acf8:	eeb0 1a47 	vmov.f32	s2, s14
 800acfc:	eddf 0a79 	vldr	s1, [pc, #484]	; 800aee4 <turn180L+0x2c0>
 800ad00:	eeb0 0a67 	vmov.f32	s0, s15
 800ad04:	f7f9 fb30 	bl	8004368 <mollifier_slalom_table>
 800ad08:	e013      	b.n	800ad32 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ad0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad0e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad12:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad16:	eef0 2a66 	vmov.f32	s5, s13
 800ad1a:	eeb0 2a47 	vmov.f32	s4, s14
 800ad1e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800aedc <turn180L+0x2b8>
 800ad22:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800aedc <turn180L+0x2b8>
 800ad26:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800aee4 <turn180L+0x2c0>
 800ad2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2e:	f7f9 f9c9 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ad32:	2300      	movs	r3, #0
 800ad34:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ad36:	2300      	movs	r3, #0
 800ad38:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ad3a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ad3e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800aee8 <turn180L+0x2c4>
 800ad42:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ad46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad4a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad5a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ad5e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ad62:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800aed8 <turn180L+0x2b4>
 800ad66:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	eeb0 2a47 	vmov.f32	s4, s14
 800ad70:	eef0 1a65 	vmov.f32	s3, s11
 800ad74:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800aedc <turn180L+0x2b8>
 800ad78:	eef0 0a46 	vmov.f32	s1, s12
 800ad7c:	eeb0 0a66 	vmov.f32	s0, s13
 800ad80:	f7f8 fb54 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800ad84:	4b53      	ldr	r3, [pc, #332]	; (800aed4 <turn180L+0x2b0>)
 800ad86:	2200      	movs	r2, #0
 800ad88:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ad8a:	e09a      	b.n	800aec2 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ad94:	2302      	movs	r3, #2
 800ad96:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad9c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ada0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ada4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ada8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adb0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adb8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800adbc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800adc0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800aed8 <turn180L+0x2b4>
 800adc4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	eeb0 2a47 	vmov.f32	s4, s14
 800adce:	eef0 1a45 	vmov.f32	s3, s10
 800add2:	eeb0 1a65 	vmov.f32	s2, s11
 800add6:	eef0 0a46 	vmov.f32	s1, s12
 800adda:	eeb0 0a66 	vmov.f32	s0, s13
 800adde:	f7f8 fb25 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800ade2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d10c      	bne.n	800ae04 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800adea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800adee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800adf2:	eeb0 1a47 	vmov.f32	s2, s14
 800adf6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800aee4 <turn180L+0x2c0>
 800adfa:	eeb0 0a67 	vmov.f32	s0, s15
 800adfe:	f7f9 fab3 	bl	8004368 <mollifier_slalom_table>
 800ae02:	e013      	b.n	800ae2c <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ae04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae10:	eef0 2a66 	vmov.f32	s5, s13
 800ae14:	eeb0 2a47 	vmov.f32	s4, s14
 800ae18:	eddf 1a30 	vldr	s3, [pc, #192]	; 800aedc <turn180L+0x2b8>
 800ae1c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800aedc <turn180L+0x2b8>
 800ae20:	eddf 0a30 	vldr	s1, [pc, #192]	; 800aee4 <turn180L+0x2c0>
 800ae24:	eeb0 0a67 	vmov.f32	s0, s15
 800ae28:	f7f9 f94c 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800ae2c:	2301      	movs	r3, #1
 800ae2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ae30:	2300      	movs	r3, #0
 800ae32:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ae34:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ae38:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ae3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae48:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae54:	eef0 7ae7 	vabs.f32	s15, s15
 800ae58:	ee17 0a90 	vmov	r0, s15
 800ae5c:	f7f5 fb9c 	bl	8000598 <__aeabi_f2d>
 800ae60:	f04f 0200 	mov.w	r2, #0
 800ae64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ae68:	f7f5 fd18 	bl	800089c <__aeabi_ddiv>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	460b      	mov	r3, r1
 800ae70:	4614      	mov	r4, r2
 800ae72:	461d      	mov	r5, r3
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7f5 fb8e 	bl	8000598 <__aeabi_f2d>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	460b      	mov	r3, r1
 800ae80:	4620      	mov	r0, r4
 800ae82:	4629      	mov	r1, r5
 800ae84:	f7f5 fd0a 	bl	800089c <__aeabi_ddiv>
 800ae88:	4602      	mov	r2, r0
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	4610      	mov	r0, r2
 800ae8e:	4619      	mov	r1, r3
 800ae90:	f04f 0200 	mov.w	r2, #0
 800ae94:	4b15      	ldr	r3, [pc, #84]	; (800aeec <turn180L+0x2c8>)
 800ae96:	f7f5 fa21 	bl	80002dc <__adddf3>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ae9e:	4610      	mov	r0, r2
 800aea0:	4619      	mov	r1, r3
 800aea2:	f7f5 fea9 	bl	8000bf8 <__aeabi_d2f>
 800aea6:	4603      	mov	r3, r0
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	ee02 3a10 	vmov	s4, r3
 800aeae:	edd7 1a01 	vldr	s3, [r7, #4]
 800aeb2:	ed97 1a01 	vldr	s2, [r7, #4]
 800aeb6:	eef0 0a68 	vmov.f32	s1, s17
 800aeba:	eeb0 0a48 	vmov.f32	s0, s16
 800aebe:	f7f8 fab5 	bl	800342c <straight_table2>
}
 800aec2:	bf00      	nop
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	ecbd 8b02 	vpop	{d8}
 800aecc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800aed0:	b004      	add	sp, #16
 800aed2:	4770      	bx	lr
 800aed4:	2000080c 	.word	0x2000080c
 800aed8:	42340000 	.word	0x42340000
 800aedc:	00000000 	.word	0x00000000
 800aee0:	42cd0000 	.word	0x42cd0000
 800aee4:	43340000 	.word	0x43340000
 800aee8:	42b40000 	.word	0x42b40000
 800aeec:	408f4000 	.word	0x408f4000

0800aef0 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800aef0:	b084      	sub	sp, #16
 800aef2:	b5b0      	push	{r4, r5, r7, lr}
 800aef4:	ed2d 8b02 	vpush	{d8}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af04:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af08:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af0c:	2b01      	cmp	r3, #1
 800af0e:	f040 80ae 	bne.w	800b06e <turn45inR+0x17e>
		highspeed_mode = 1;
 800af12:	4bdd      	ldr	r3, [pc, #884]	; (800b288 <turn45inR+0x398>)
 800af14:	2201      	movs	r2, #1
 800af16:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800af18:	2301      	movs	r3, #1
 800af1a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800af1c:	2300      	movs	r3, #0
 800af1e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800af20:	2300      	movs	r3, #0
 800af22:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800af24:	2300      	movs	r3, #0
 800af26:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800af28:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800af2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af3c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800af40:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800af44:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b28c <turn45inR+0x39c>
 800af48:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	eeb0 2a47 	vmov.f32	s4, s14
 800af52:	eef0 1a46 	vmov.f32	s3, s12
 800af56:	eeb0 1a66 	vmov.f32	s2, s13
 800af5a:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b298 <turn45inR+0x3a8>
 800af5e:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b290 <turn45inR+0x3a0>
 800af62:	f7f8 fa63 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800af66:	2300      	movs	r3, #0
 800af68:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800af6a:	2302      	movs	r3, #2
 800af6c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af6e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800af72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af76:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800af7a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af8a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800af8e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800af92:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b28c <turn45inR+0x39c>
 800af96:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	eeb0 2a47 	vmov.f32	s4, s14
 800afa0:	eef0 1a45 	vmov.f32	s3, s10
 800afa4:	eeb0 1a65 	vmov.f32	s2, s11
 800afa8:	eef0 0a46 	vmov.f32	s1, s12
 800afac:	eeb0 0a66 	vmov.f32	s0, s13
 800afb0:	f7f8 fa3c 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800afb4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d10c      	bne.n	800afd6 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800afbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afc0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800afc4:	eeb0 1a47 	vmov.f32	s2, s14
 800afc8:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b29c <turn45inR+0x3ac>
 800afcc:	eeb0 0a67 	vmov.f32	s0, s15
 800afd0:	f7f9 f9ca 	bl	8004368 <mollifier_slalom_table>
 800afd4:	e015      	b.n	800b002 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800afd6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800afde:	eef1 7a67 	vneg.f32	s15, s15
 800afe2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800afe6:	eef0 2a66 	vmov.f32	s5, s13
 800afea:	eeb0 2a67 	vmov.f32	s4, s15
 800afee:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b298 <turn45inR+0x3a8>
 800aff2:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b298 <turn45inR+0x3a8>
 800aff6:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b29c <turn45inR+0x3ac>
 800affa:	eeb0 0a47 	vmov.f32	s0, s14
 800affe:	f7f9 f861 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b002:	2300      	movs	r3, #0
 800b004:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7f5 fac3 	bl	8000598 <__aeabi_f2d>
 800b012:	a39b      	add	r3, pc, #620	; (adr r3, 800b280 <turn45inR+0x390>)
 800b014:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b018:	f7f5 f960 	bl	80002dc <__adddf3>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	4610      	mov	r0, r2
 800b022:	4619      	mov	r1, r3
 800b024:	f7f5 fde8 	bl	8000bf8 <__aeabi_d2f>
 800b028:	4603      	mov	r3, r0
 800b02a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b02e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b032:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b036:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b03a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b03e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b042:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b046:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b28c <turn45inR+0x39c>
 800b04a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	eeb0 2a47 	vmov.f32	s4, s14
 800b054:	eef0 1a46 	vmov.f32	s3, s12
 800b058:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b298 <turn45inR+0x3a8>
 800b05c:	eef0 0a66 	vmov.f32	s1, s13
 800b060:	ee00 3a10 	vmov	s0, r3
 800b064:	f7f8 f9e2 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800b068:	4b87      	ldr	r3, [pc, #540]	; (800b288 <turn45inR+0x398>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b06e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b072:	2b00      	cmp	r3, #0
 800b074:	f040 809d 	bne.w	800b1b2 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b078:	2300      	movs	r3, #0
 800b07a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b07c:	2300      	movs	r3, #0
 800b07e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b080:	2302      	movs	r3, #2
 800b082:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b084:	2300      	movs	r3, #0
 800b086:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b088:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b08c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b090:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b094:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b098:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b09c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0a4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b0a8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0ac:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b28c <turn45inR+0x39c>
 800b0b0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	eeb0 2a47 	vmov.f32	s4, s14
 800b0ba:	eef0 1a45 	vmov.f32	s3, s10
 800b0be:	eeb0 1a65 	vmov.f32	s2, s11
 800b0c2:	eef0 0a46 	vmov.f32	s1, s12
 800b0c6:	eeb0 0a66 	vmov.f32	s0, s13
 800b0ca:	f7f8 f9af 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b0ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b0d2:	2b01      	cmp	r3, #1
 800b0d4:	d10c      	bne.n	800b0f0 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b0d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b0de:	eeb0 1a47 	vmov.f32	s2, s14
 800b0e2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b29c <turn45inR+0x3ac>
 800b0e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b0ea:	f7f9 f93d 	bl	8004368 <mollifier_slalom_table>
 800b0ee:	e015      	b.n	800b11c <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b0f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b0f8:	eef1 7a67 	vneg.f32	s15, s15
 800b0fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b100:	eef0 2a66 	vmov.f32	s5, s13
 800b104:	eeb0 2a67 	vmov.f32	s4, s15
 800b108:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b298 <turn45inR+0x3a8>
 800b10c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b298 <turn45inR+0x3a8>
 800b110:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b29c <turn45inR+0x3ac>
 800b114:	eeb0 0a47 	vmov.f32	s0, s14
 800b118:	f7f8 ffd4 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b120:	2300      	movs	r3, #0
 800b122:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b124:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b128:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b12c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b130:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b134:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b138:	edd7 7a01 	vldr	s15, [r7, #4]
 800b13c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b140:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b144:	eef0 7ae7 	vabs.f32	s15, s15
 800b148:	ee17 0a90 	vmov	r0, s15
 800b14c:	f7f5 fa24 	bl	8000598 <__aeabi_f2d>
 800b150:	f04f 0200 	mov.w	r2, #0
 800b154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b158:	f7f5 fba0 	bl	800089c <__aeabi_ddiv>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4614      	mov	r4, r2
 800b162:	461d      	mov	r5, r3
 800b164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b166:	4618      	mov	r0, r3
 800b168:	f7f5 fa16 	bl	8000598 <__aeabi_f2d>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4620      	mov	r0, r4
 800b172:	4629      	mov	r1, r5
 800b174:	f7f5 fb92 	bl	800089c <__aeabi_ddiv>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4610      	mov	r0, r2
 800b17e:	4619      	mov	r1, r3
 800b180:	f04f 0200 	mov.w	r2, #0
 800b184:	4b43      	ldr	r3, [pc, #268]	; (800b294 <turn45inR+0x3a4>)
 800b186:	f7f5 f8a9 	bl	80002dc <__adddf3>
 800b18a:	4602      	mov	r2, r0
 800b18c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b18e:	4610      	mov	r0, r2
 800b190:	4619      	mov	r1, r3
 800b192:	f7f5 fd31 	bl	8000bf8 <__aeabi_d2f>
 800b196:	4603      	mov	r3, r0
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	ee02 3a10 	vmov	s4, r3
 800b19e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b1a2:	ed97 1a01 	vldr	s2, [r7, #4]
 800b1a6:	eef0 0a68 	vmov.f32	s1, s17
 800b1aa:	eeb0 0a48 	vmov.f32	s0, s16
 800b1ae:	f7f8 f93d 	bl	800342c <straight_table2>

	}
	if (test_mode >= 2) {
 800b1b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1b6:	2b01      	cmp	r3, #1
 800b1b8:	f240 80d0 	bls.w	800b35c <turn45inR+0x46c>

		highspeed_mode = 1;
 800b1bc:	4b32      	ldr	r3, [pc, #200]	; (800b288 <turn45inR+0x398>)
 800b1be:	2201      	movs	r2, #1
 800b1c0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b1d2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b1d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b1da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1e6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b1ea:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b1ee:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b28c <turn45inR+0x39c>
 800b1f2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	eeb0 2a47 	vmov.f32	s4, s14
 800b1fc:	eef0 1a46 	vmov.f32	s3, s12
 800b200:	eeb0 1a66 	vmov.f32	s2, s13
 800b204:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b298 <turn45inR+0x3a8>
 800b208:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b290 <turn45inR+0x3a0>
 800b20c:	f7f8 f90e 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800b210:	2300      	movs	r3, #0
 800b212:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b214:	2302      	movs	r3, #2
 800b216:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b218:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b21c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b220:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b224:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b228:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b22c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b230:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b234:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b238:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b23c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b28c <turn45inR+0x39c>
 800b240:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	eeb0 2a47 	vmov.f32	s4, s14
 800b24a:	eef0 1a45 	vmov.f32	s3, s10
 800b24e:	eeb0 1a65 	vmov.f32	s2, s11
 800b252:	eef0 0a46 	vmov.f32	s1, s12
 800b256:	eeb0 0a66 	vmov.f32	s0, s13
 800b25a:	f7f8 f8e7 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b25e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b262:	2b01      	cmp	r3, #1
 800b264:	d11c      	bne.n	800b2a0 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b266:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b26a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b26e:	eeb0 1a47 	vmov.f32	s2, s14
 800b272:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b29c <turn45inR+0x3ac>
 800b276:	eeb0 0a67 	vmov.f32	s0, s15
 800b27a:	f7f9 f875 	bl	8004368 <mollifier_slalom_table>
 800b27e:	e025      	b.n	800b2cc <turn45inR+0x3dc>
 800b280:	c022ec18 	.word	0xc022ec18
 800b284:	405fd1de 	.word	0x405fd1de
 800b288:	2000080c 	.word	0x2000080c
 800b28c:	42340000 	.word	0x42340000
 800b290:	42cd0000 	.word	0x42cd0000
 800b294:	408f4000 	.word	0x408f4000
 800b298:	00000000 	.word	0x00000000
 800b29c:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b2a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2a4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b2a8:	eef1 7a67 	vneg.f32	s15, s15
 800b2ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b2b0:	eef0 2a66 	vmov.f32	s5, s13
 800b2b4:	eeb0 2a67 	vmov.f32	s4, s15
 800b2b8:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b298 <turn45inR+0x3a8>
 800b2bc:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b298 <turn45inR+0x3a8>
 800b2c0:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b29c <turn45inR+0x3ac>
 800b2c4:	eeb0 0a47 	vmov.f32	s0, s14
 800b2c8:	f7f8 fefc 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b2d8:	3b02      	subs	r3, #2
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f7f5 f94a 	bl	8000574 <__aeabi_i2d>
 800b2e0:	a325      	add	r3, pc, #148	; (adr r3, 800b378 <turn45inR+0x488>)
 800b2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e6:	f7f5 f9af 	bl	8000648 <__aeabi_dmul>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	460b      	mov	r3, r1
 800b2ee:	4614      	mov	r4, r2
 800b2f0:	461d      	mov	r5, r3
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7f5 f94f 	bl	8000598 <__aeabi_f2d>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	4620      	mov	r0, r4
 800b300:	4629      	mov	r1, r5
 800b302:	f7f4 ffeb 	bl	80002dc <__adddf3>
 800b306:	4602      	mov	r2, r0
 800b308:	460b      	mov	r3, r1
 800b30a:	4610      	mov	r0, r2
 800b30c:	4619      	mov	r1, r3
 800b30e:	f7f5 fc73 	bl	8000bf8 <__aeabi_d2f>
 800b312:	4603      	mov	r3, r0
 800b314:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b318:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b31c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b320:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b32c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b330:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b334:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b370 <turn45inR+0x480>
 800b338:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	eeb0 2a47 	vmov.f32	s4, s14
 800b342:	eef0 1a65 	vmov.f32	s3, s11
 800b346:	eeb0 1a46 	vmov.f32	s2, s12
 800b34a:	eef0 0a66 	vmov.f32	s1, s13
 800b34e:	ee00 3a10 	vmov	s0, r3
 800b352:	f7f8 f86b 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800b356:	4b07      	ldr	r3, [pc, #28]	; (800b374 <turn45inR+0x484>)
 800b358:	2200      	movs	r2, #0
 800b35a:	701a      	strb	r2, [r3, #0]
	}

}
 800b35c:	bf00      	nop
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	ecbd 8b02 	vpop	{d8}
 800b366:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b36a:	b004      	add	sp, #16
 800b36c:	4770      	bx	lr
 800b36e:	bf00      	nop
 800b370:	42340000 	.word	0x42340000
 800b374:	2000080c 	.word	0x2000080c
 800b378:	c022ec18 	.word	0xc022ec18
 800b37c:	404fd1de 	.word	0x404fd1de

0800b380 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b380:	b084      	sub	sp, #16
 800b382:	b5b0      	push	{r4, r5, r7, lr}
 800b384:	ed2d 8b02 	vpush	{d8}
 800b388:	b084      	sub	sp, #16
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b394:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b398:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	f040 80ac 	bne.w	800b4fa <turn45inL+0x17a>
		highspeed_mode = 1;
 800b3a2:	4bdb      	ldr	r3, [pc, #876]	; (800b710 <turn45inL+0x390>)
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b3b8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b3bc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3c0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3c4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3cc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b3d0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b3d4:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800b720 <turn45inL+0x3a0>
 800b3d8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b3dc:	68f8      	ldr	r0, [r7, #12]
 800b3de:	eeb0 2a47 	vmov.f32	s4, s14
 800b3e2:	eef0 1a46 	vmov.f32	s3, s12
 800b3e6:	eeb0 1a66 	vmov.f32	s2, s13
 800b3ea:	eddf 0acc 	vldr	s1, [pc, #816]	; 800b71c <turn45inL+0x39c>
 800b3ee:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800b714 <turn45inL+0x394>
 800b3f2:	f7f8 f81b 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b3fa:	2302      	movs	r3, #2
 800b3fc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b402:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b406:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b40a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b40e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b412:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b416:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b41a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b41e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b422:	eddf 4abf 	vldr	s9, [pc, #764]	; 800b720 <turn45inL+0x3a0>
 800b426:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	eeb0 2a47 	vmov.f32	s4, s14
 800b430:	eef0 1a45 	vmov.f32	s3, s10
 800b434:	eeb0 1a65 	vmov.f32	s2, s11
 800b438:	eef0 0a46 	vmov.f32	s1, s12
 800b43c:	eeb0 0a66 	vmov.f32	s0, s13
 800b440:	f7f7 fff4 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b444:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d10c      	bne.n	800b466 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b44c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b450:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b454:	eeb0 1a47 	vmov.f32	s2, s14
 800b458:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800b720 <turn45inL+0x3a0>
 800b45c:	eeb0 0a67 	vmov.f32	s0, s15
 800b460:	f7f8 ff82 	bl	8004368 <mollifier_slalom_table>
 800b464:	e013      	b.n	800b48e <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b466:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b46a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b46e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b472:	eef0 2a66 	vmov.f32	s5, s13
 800b476:	eeb0 2a47 	vmov.f32	s4, s14
 800b47a:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800b71c <turn45inL+0x39c>
 800b47e:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800b71c <turn45inL+0x39c>
 800b482:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800b720 <turn45inL+0x3a0>
 800b486:	eeb0 0a67 	vmov.f32	s0, s15
 800b48a:	f7f8 fe1b 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b48e:	2300      	movs	r3, #0
 800b490:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b492:	2300      	movs	r3, #0
 800b494:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b498:	4618      	mov	r0, r3
 800b49a:	f7f5 f87d 	bl	8000598 <__aeabi_f2d>
 800b49e:	a39a      	add	r3, pc, #616	; (adr r3, 800b708 <turn45inL+0x388>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 ff1a 	bl	80002dc <__adddf3>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	f7f5 fba2 	bl	8000bf8 <__aeabi_d2f>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b4ba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4ca:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b4ce:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b4d2:	eddf 5a93 	vldr	s11, [pc, #588]	; 800b720 <turn45inL+0x3a0>
 800b4d6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	eeb0 2a47 	vmov.f32	s4, s14
 800b4e0:	eef0 1a46 	vmov.f32	s3, s12
 800b4e4:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800b71c <turn45inL+0x39c>
 800b4e8:	eef0 0a66 	vmov.f32	s1, s13
 800b4ec:	ee00 3a10 	vmov	s0, r3
 800b4f0:	f7f7 ff9c 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800b4f4:	4b86      	ldr	r3, [pc, #536]	; (800b710 <turn45inL+0x390>)
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b4fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f040 809b 	bne.w	800b63a <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b504:	2300      	movs	r3, #0
 800b506:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b508:	2300      	movs	r3, #0
 800b50a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b50c:	2302      	movs	r3, #2
 800b50e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b510:	2300      	movs	r3, #0
 800b512:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b514:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b518:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b51c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b520:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b524:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b528:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b52c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b530:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b534:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b538:	eddf 4a79 	vldr	s9, [pc, #484]	; 800b720 <turn45inL+0x3a0>
 800b53c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b540:	68f8      	ldr	r0, [r7, #12]
 800b542:	eeb0 2a47 	vmov.f32	s4, s14
 800b546:	eef0 1a45 	vmov.f32	s3, s10
 800b54a:	eeb0 1a65 	vmov.f32	s2, s11
 800b54e:	eef0 0a46 	vmov.f32	s1, s12
 800b552:	eeb0 0a66 	vmov.f32	s0, s13
 800b556:	f7f7 ff69 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b55a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d10c      	bne.n	800b57c <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b562:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b566:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b56a:	eeb0 1a47 	vmov.f32	s2, s14
 800b56e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800b720 <turn45inL+0x3a0>
 800b572:	eeb0 0a67 	vmov.f32	s0, s15
 800b576:	f7f8 fef7 	bl	8004368 <mollifier_slalom_table>
 800b57a:	e013      	b.n	800b5a4 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b57c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b580:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b584:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b588:	eef0 2a66 	vmov.f32	s5, s13
 800b58c:	eeb0 2a47 	vmov.f32	s4, s14
 800b590:	eddf 1a62 	vldr	s3, [pc, #392]	; 800b71c <turn45inL+0x39c>
 800b594:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800b71c <turn45inL+0x39c>
 800b598:	eddf 0a61 	vldr	s1, [pc, #388]	; 800b720 <turn45inL+0x3a0>
 800b59c:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a0:	f7f8 fd90 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b5a4:	2303      	movs	r3, #3
 800b5a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b5ac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b5b0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b5b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b5c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5cc:	eef0 7ae7 	vabs.f32	s15, s15
 800b5d0:	ee17 0a90 	vmov	r0, s15
 800b5d4:	f7f4 ffe0 	bl	8000598 <__aeabi_f2d>
 800b5d8:	f04f 0200 	mov.w	r2, #0
 800b5dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5e0:	f7f5 f95c 	bl	800089c <__aeabi_ddiv>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4614      	mov	r4, r2
 800b5ea:	461d      	mov	r5, r3
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7f4 ffd2 	bl	8000598 <__aeabi_f2d>
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	460b      	mov	r3, r1
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	f7f5 f94e 	bl	800089c <__aeabi_ddiv>
 800b600:	4602      	mov	r2, r0
 800b602:	460b      	mov	r3, r1
 800b604:	4610      	mov	r0, r2
 800b606:	4619      	mov	r1, r3
 800b608:	f04f 0200 	mov.w	r2, #0
 800b60c:	4b42      	ldr	r3, [pc, #264]	; (800b718 <turn45inL+0x398>)
 800b60e:	f7f4 fe65 	bl	80002dc <__adddf3>
 800b612:	4602      	mov	r2, r0
 800b614:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b616:	4610      	mov	r0, r2
 800b618:	4619      	mov	r1, r3
 800b61a:	f7f5 faed 	bl	8000bf8 <__aeabi_d2f>
 800b61e:	4603      	mov	r3, r0
 800b620:	68f8      	ldr	r0, [r7, #12]
 800b622:	ee02 3a10 	vmov	s4, r3
 800b626:	edd7 1a01 	vldr	s3, [r7, #4]
 800b62a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b62e:	eef0 0a68 	vmov.f32	s1, s17
 800b632:	eeb0 0a48 	vmov.f32	s0, s16
 800b636:	f7f7 fef9 	bl	800342c <straight_table2>

	}
	if (test_mode >= 2) {
 800b63a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b63e:	2b01      	cmp	r3, #1
 800b640:	f240 80cc 	bls.w	800b7dc <turn45inL+0x45c>

		highspeed_mode = 1;
 800b644:	4b32      	ldr	r3, [pc, #200]	; (800b710 <turn45inL+0x390>)
 800b646:	2201      	movs	r2, #1
 800b648:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b64a:	2301      	movs	r3, #1
 800b64c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b64e:	2300      	movs	r3, #0
 800b650:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b652:	2300      	movs	r3, #0
 800b654:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b656:	2300      	movs	r3, #0
 800b658:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b65a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b65e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b662:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b666:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b66a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b66e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b672:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b676:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800b720 <turn45inL+0x3a0>
 800b67a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	eeb0 2a47 	vmov.f32	s4, s14
 800b684:	eef0 1a46 	vmov.f32	s3, s12
 800b688:	eeb0 1a66 	vmov.f32	s2, s13
 800b68c:	eddf 0a23 	vldr	s1, [pc, #140]	; 800b71c <turn45inL+0x39c>
 800b690:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800b714 <turn45inL+0x394>
 800b694:	f7f7 feca 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800b698:	2300      	movs	r3, #0
 800b69a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b69c:	2302      	movs	r3, #2
 800b69e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b6a0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b6a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b6a8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b6ac:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b6b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b6b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b6bc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b6c0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b6c4:	eddf 4a16 	vldr	s9, [pc, #88]	; 800b720 <turn45inL+0x3a0>
 800b6c8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	eeb0 2a47 	vmov.f32	s4, s14
 800b6d2:	eef0 1a45 	vmov.f32	s3, s10
 800b6d6:	eeb0 1a65 	vmov.f32	s2, s11
 800b6da:	eef0 0a46 	vmov.f32	s1, s12
 800b6de:	eeb0 0a66 	vmov.f32	s0, s13
 800b6e2:	f7f7 fea3 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b6e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d11a      	bne.n	800b724 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b6ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b6f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b6f6:	eeb0 1a47 	vmov.f32	s2, s14
 800b6fa:	eddf 0a09 	vldr	s1, [pc, #36]	; 800b720 <turn45inL+0x3a0>
 800b6fe:	eeb0 0a67 	vmov.f32	s0, s15
 800b702:	f7f8 fe31 	bl	8004368 <mollifier_slalom_table>
 800b706:	e021      	b.n	800b74c <turn45inL+0x3cc>
 800b708:	c022ec18 	.word	0xc022ec18
 800b70c:	405fd1de 	.word	0x405fd1de
 800b710:	2000080c 	.word	0x2000080c
 800b714:	42cd0000 	.word	0x42cd0000
 800b718:	408f4000 	.word	0x408f4000
 800b71c:	00000000 	.word	0x00000000
 800b720:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b728:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b72c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b730:	eef0 2a66 	vmov.f32	s5, s13
 800b734:	eeb0 2a47 	vmov.f32	s4, s14
 800b738:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800b71c <turn45inL+0x39c>
 800b73c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800b71c <turn45inL+0x39c>
 800b740:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800b720 <turn45inL+0x3a0>
 800b744:	eeb0 0a67 	vmov.f32	s0, s15
 800b748:	f7f8 fcbc 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b750:	2300      	movs	r3, #0
 800b752:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b754:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b758:	3b02      	subs	r3, #2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f7f4 ff0a 	bl	8000574 <__aeabi_i2d>
 800b760:	a325      	add	r3, pc, #148	; (adr r3, 800b7f8 <turn45inL+0x478>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f4 ff6f 	bl	8000648 <__aeabi_dmul>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4614      	mov	r4, r2
 800b770:	461d      	mov	r5, r3
 800b772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b774:	4618      	mov	r0, r3
 800b776:	f7f4 ff0f 	bl	8000598 <__aeabi_f2d>
 800b77a:	4602      	mov	r2, r0
 800b77c:	460b      	mov	r3, r1
 800b77e:	4620      	mov	r0, r4
 800b780:	4629      	mov	r1, r5
 800b782:	f7f4 fdab 	bl	80002dc <__adddf3>
 800b786:	4602      	mov	r2, r0
 800b788:	460b      	mov	r3, r1
 800b78a:	4610      	mov	r0, r2
 800b78c:	4619      	mov	r1, r3
 800b78e:	f7f5 fa33 	bl	8000bf8 <__aeabi_d2f>
 800b792:	4603      	mov	r3, r0
 800b794:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b798:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b79c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b7a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b7ac:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b7b0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b7b4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b7f0 <turn45inL+0x470>
 800b7b8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	eeb0 2a47 	vmov.f32	s4, s14
 800b7c2:	eef0 1a65 	vmov.f32	s3, s11
 800b7c6:	eeb0 1a46 	vmov.f32	s2, s12
 800b7ca:	eef0 0a66 	vmov.f32	s1, s13
 800b7ce:	ee00 3a10 	vmov	s0, r3
 800b7d2:	f7f7 fe2b 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800b7d6:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <turn45inL+0x474>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	701a      	strb	r2, [r3, #0]
	}

}
 800b7dc:	bf00      	nop
 800b7de:	3710      	adds	r7, #16
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	ecbd 8b02 	vpop	{d8}
 800b7e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b7ea:	b004      	add	sp, #16
 800b7ec:	4770      	bx	lr
 800b7ee:	bf00      	nop
 800b7f0:	42340000 	.word	0x42340000
 800b7f4:	2000080c 	.word	0x2000080c
 800b7f8:	c022ec18 	.word	0xc022ec18
 800b7fc:	404fd1de 	.word	0x404fd1de

0800b800 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b800:	b084      	sub	sp, #16
 800b802:	b5b0      	push	{r4, r5, r7, lr}
 800b804:	ed2d 8b02 	vpush	{d8}
 800b808:	b084      	sub	sp, #16
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b814:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b818:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	f040 80ae 	bne.w	800b97e <turn135inR+0x17e>
		highspeed_mode = 1;
 800b822:	4bdd      	ldr	r3, [pc, #884]	; (800bb98 <turn135inR+0x398>)
 800b824:	2201      	movs	r2, #1
 800b826:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b828:	2301      	movs	r3, #1
 800b82a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b830:	2300      	movs	r3, #0
 800b832:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b834:	2300      	movs	r3, #0
 800b836:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b838:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b83c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b840:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b844:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b84c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b850:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b854:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800bb9c <turn135inR+0x39c>
 800b858:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b85c:	68f8      	ldr	r0, [r7, #12]
 800b85e:	eeb0 2a47 	vmov.f32	s4, s14
 800b862:	eef0 1a46 	vmov.f32	s3, s12
 800b866:	eeb0 1a66 	vmov.f32	s2, s13
 800b86a:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bba8 <turn135inR+0x3a8>
 800b86e:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bba0 <turn135inR+0x3a0>
 800b872:	f7f7 fddb 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800b876:	2300      	movs	r3, #0
 800b878:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b87a:	2302      	movs	r3, #2
 800b87c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b87e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b882:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b886:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b88a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b88e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b89a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b89e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b8a2:	eddf 4abe 	vldr	s9, [pc, #760]	; 800bb9c <turn135inR+0x39c>
 800b8a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	eeb0 2a47 	vmov.f32	s4, s14
 800b8b0:	eef0 1a45 	vmov.f32	s3, s10
 800b8b4:	eeb0 1a65 	vmov.f32	s2, s11
 800b8b8:	eef0 0a46 	vmov.f32	s1, s12
 800b8bc:	eeb0 0a66 	vmov.f32	s0, s13
 800b8c0:	f7f7 fdb4 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b8c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8c8:	2b01      	cmp	r3, #1
 800b8ca:	d10c      	bne.n	800b8e6 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800b8cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8d4:	eeb0 1a47 	vmov.f32	s2, s14
 800b8d8:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bbac <turn135inR+0x3ac>
 800b8dc:	eeb0 0a67 	vmov.f32	s0, s15
 800b8e0:	f7f8 fd42 	bl	8004368 <mollifier_slalom_table>
 800b8e4:	e015      	b.n	800b912 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b8e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b8ee:	eef1 7a67 	vneg.f32	s15, s15
 800b8f2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8f6:	eef0 2a66 	vmov.f32	s5, s13
 800b8fa:	eeb0 2a67 	vmov.f32	s4, s15
 800b8fe:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bba8 <turn135inR+0x3a8>
 800b902:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bba8 <turn135inR+0x3a8>
 800b906:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bbac <turn135inR+0x3ac>
 800b90a:	eeb0 0a47 	vmov.f32	s0, s14
 800b90e:	f7f8 fbd9 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b912:	2300      	movs	r3, #0
 800b914:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7f4 fe3b 	bl	8000598 <__aeabi_f2d>
 800b922:	a39b      	add	r3, pc, #620	; (adr r3, 800bb90 <turn135inR+0x390>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fcd8 	bl	80002dc <__adddf3>
 800b92c:	4602      	mov	r2, r0
 800b92e:	460b      	mov	r3, r1
 800b930:	4610      	mov	r0, r2
 800b932:	4619      	mov	r1, r3
 800b934:	f7f5 f960 	bl	8000bf8 <__aeabi_d2f>
 800b938:	4603      	mov	r3, r0
 800b93a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b93e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b942:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b946:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b94a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b94e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b952:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b956:	eddf 5a91 	vldr	s11, [pc, #580]	; 800bb9c <turn135inR+0x39c>
 800b95a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	eeb0 2a47 	vmov.f32	s4, s14
 800b964:	eef0 1a46 	vmov.f32	s3, s12
 800b968:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bba8 <turn135inR+0x3a8>
 800b96c:	eef0 0a66 	vmov.f32	s1, s13
 800b970:	ee00 3a10 	vmov	s0, r3
 800b974:	f7f7 fd5a 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800b978:	4b87      	ldr	r3, [pc, #540]	; (800bb98 <turn135inR+0x398>)
 800b97a:	2200      	movs	r2, #0
 800b97c:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b97e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b982:	2b00      	cmp	r3, #0
 800b984:	f040 809d 	bne.w	800bac2 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b988:	2300      	movs	r3, #0
 800b98a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b98c:	2300      	movs	r3, #0
 800b98e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b990:	2302      	movs	r3, #2
 800b992:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b998:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b99c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b9a0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b9a4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9b4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b9b8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9bc:	eddf 4a77 	vldr	s9, [pc, #476]	; 800bb9c <turn135inR+0x39c>
 800b9c0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	eeb0 2a47 	vmov.f32	s4, s14
 800b9ca:	eef0 1a45 	vmov.f32	s3, s10
 800b9ce:	eeb0 1a65 	vmov.f32	s2, s11
 800b9d2:	eef0 0a46 	vmov.f32	s1, s12
 800b9d6:	eeb0 0a66 	vmov.f32	s0, s13
 800b9da:	f7f7 fd27 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800b9de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d10c      	bne.n	800ba00 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800b9e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b9ee:	eeb0 1a47 	vmov.f32	s2, s14
 800b9f2:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bbac <turn135inR+0x3ac>
 800b9f6:	eeb0 0a67 	vmov.f32	s0, s15
 800b9fa:	f7f8 fcb5 	bl	8004368 <mollifier_slalom_table>
 800b9fe:	e015      	b.n	800ba2c <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ba00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ba08:	eef1 7a67 	vneg.f32	s15, s15
 800ba0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba10:	eef0 2a66 	vmov.f32	s5, s13
 800ba14:	eeb0 2a67 	vmov.f32	s4, s15
 800ba18:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bba8 <turn135inR+0x3a8>
 800ba1c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bba8 <turn135inR+0x3a8>
 800ba20:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bbac <turn135inR+0x3ac>
 800ba24:	eeb0 0a47 	vmov.f32	s0, s14
 800ba28:	f7f8 fb4c 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ba34:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800ba38:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ba3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba48:	edd7 7a01 	vldr	s15, [r7, #4]
 800ba4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ba50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba54:	eef0 7ae7 	vabs.f32	s15, s15
 800ba58:	ee17 0a90 	vmov	r0, s15
 800ba5c:	f7f4 fd9c 	bl	8000598 <__aeabi_f2d>
 800ba60:	f04f 0200 	mov.w	r2, #0
 800ba64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba68:	f7f4 ff18 	bl	800089c <__aeabi_ddiv>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	4614      	mov	r4, r2
 800ba72:	461d      	mov	r5, r3
 800ba74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7f4 fd8e 	bl	8000598 <__aeabi_f2d>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4620      	mov	r0, r4
 800ba82:	4629      	mov	r1, r5
 800ba84:	f7f4 ff0a 	bl	800089c <__aeabi_ddiv>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4610      	mov	r0, r2
 800ba8e:	4619      	mov	r1, r3
 800ba90:	f04f 0200 	mov.w	r2, #0
 800ba94:	4b43      	ldr	r3, [pc, #268]	; (800bba4 <turn135inR+0x3a4>)
 800ba96:	f7f4 fc21 	bl	80002dc <__adddf3>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ba9e:	4610      	mov	r0, r2
 800baa0:	4619      	mov	r1, r3
 800baa2:	f7f5 f8a9 	bl	8000bf8 <__aeabi_d2f>
 800baa6:	4603      	mov	r3, r0
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	ee02 3a10 	vmov	s4, r3
 800baae:	edd7 1a01 	vldr	s3, [r7, #4]
 800bab2:	ed97 1a01 	vldr	s2, [r7, #4]
 800bab6:	eef0 0a68 	vmov.f32	s1, s17
 800baba:	eeb0 0a48 	vmov.f32	s0, s16
 800babe:	f7f7 fcb5 	bl	800342c <straight_table2>

	}
	if (test_mode >= 2) {
 800bac2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	f240 80d0 	bls.w	800bc6c <turn135inR+0x46c>

		highspeed_mode = 1;
 800bacc:	4b32      	ldr	r3, [pc, #200]	; (800bb98 <turn135inR+0x398>)
 800bace:	2201      	movs	r2, #1
 800bad0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bad2:	2301      	movs	r3, #1
 800bad4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bade:	2300      	movs	r3, #0
 800bae0:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bae2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bae6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baf6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bafa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bafe:	eddf 5a27 	vldr	s11, [pc, #156]	; 800bb9c <turn135inR+0x39c>
 800bb02:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bb06:	68f8      	ldr	r0, [r7, #12]
 800bb08:	eeb0 2a47 	vmov.f32	s4, s14
 800bb0c:	eef0 1a46 	vmov.f32	s3, s12
 800bb10:	eeb0 1a66 	vmov.f32	s2, s13
 800bb14:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bba8 <turn135inR+0x3a8>
 800bb18:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bba0 <turn135inR+0x3a0>
 800bb1c:	f7f7 fc86 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800bb20:	2300      	movs	r3, #0
 800bb22:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bb24:	2302      	movs	r3, #2
 800bb26:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb28:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb2c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bb30:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bb34:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb3c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb44:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bb48:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb4c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800bb9c <turn135inR+0x39c>
 800bb50:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	eeb0 2a47 	vmov.f32	s4, s14
 800bb5a:	eef0 1a45 	vmov.f32	s3, s10
 800bb5e:	eeb0 1a65 	vmov.f32	s2, s11
 800bb62:	eef0 0a46 	vmov.f32	s1, s12
 800bb66:	eeb0 0a66 	vmov.f32	s0, s13
 800bb6a:	f7f7 fc5f 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800bb6e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d11c      	bne.n	800bbb0 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bb76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb7e:	eeb0 1a47 	vmov.f32	s2, s14
 800bb82:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bbac <turn135inR+0x3ac>
 800bb86:	eeb0 0a67 	vmov.f32	s0, s15
 800bb8a:	f7f8 fbed 	bl	8004368 <mollifier_slalom_table>
 800bb8e:	e025      	b.n	800bbdc <turn135inR+0x3dc>
 800bb90:	c022ec18 	.word	0xc022ec18
 800bb94:	405fd1de 	.word	0x405fd1de
 800bb98:	2000080c 	.word	0x2000080c
 800bb9c:	42340000 	.word	0x42340000
 800bba0:	42cd0000 	.word	0x42cd0000
 800bba4:	408f4000 	.word	0x408f4000
 800bba8:	00000000 	.word	0x00000000
 800bbac:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bbb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbb4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bbb8:	eef1 7a67 	vneg.f32	s15, s15
 800bbbc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bbc0:	eef0 2a66 	vmov.f32	s5, s13
 800bbc4:	eeb0 2a67 	vmov.f32	s4, s15
 800bbc8:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bba8 <turn135inR+0x3a8>
 800bbcc:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bba8 <turn135inR+0x3a8>
 800bbd0:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bbac <turn135inR+0x3ac>
 800bbd4:	eeb0 0a47 	vmov.f32	s0, s14
 800bbd8:	f7f8 fa74 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbe4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bbe8:	3b02      	subs	r3, #2
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7f4 fcc2 	bl	8000574 <__aeabi_i2d>
 800bbf0:	a325      	add	r3, pc, #148	; (adr r3, 800bc88 <turn135inR+0x488>)
 800bbf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf6:	f7f4 fd27 	bl	8000648 <__aeabi_dmul>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	4614      	mov	r4, r2
 800bc00:	461d      	mov	r5, r3
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7f4 fcc7 	bl	8000598 <__aeabi_f2d>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	4620      	mov	r0, r4
 800bc10:	4629      	mov	r1, r5
 800bc12:	f7f4 fb63 	bl	80002dc <__adddf3>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f7f4 ffeb 	bl	8000bf8 <__aeabi_d2f>
 800bc22:	4603      	mov	r3, r0
 800bc24:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc28:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bc2c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc30:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc3c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bc40:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc44:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bc80 <turn135inR+0x480>
 800bc48:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	eeb0 2a47 	vmov.f32	s4, s14
 800bc52:	eef0 1a65 	vmov.f32	s3, s11
 800bc56:	eeb0 1a46 	vmov.f32	s2, s12
 800bc5a:	eef0 0a66 	vmov.f32	s1, s13
 800bc5e:	ee00 3a10 	vmov	s0, r3
 800bc62:	f7f7 fbe3 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800bc66:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <turn135inR+0x484>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
	}

}
 800bc6c:	bf00      	nop
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	ecbd 8b02 	vpop	{d8}
 800bc76:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bc7a:	b004      	add	sp, #16
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	42340000 	.word	0x42340000
 800bc84:	2000080c 	.word	0x2000080c
 800bc88:	c022ec18 	.word	0xc022ec18
 800bc8c:	404fd1de 	.word	0x404fd1de

0800bc90 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bc90:	b084      	sub	sp, #16
 800bc92:	b5b0      	push	{r4, r5, r7, lr}
 800bc94:	ed2d 8b02 	vpush	{d8}
 800bc98:	b084      	sub	sp, #16
 800bc9a:	af00      	add	r7, sp, #0
 800bc9c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bca4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bca8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcac:	2b01      	cmp	r3, #1
 800bcae:	f040 80ac 	bne.w	800be0a <turn135inL+0x17a>
		highspeed_mode = 1;
 800bcb2:	4bdb      	ldr	r3, [pc, #876]	; (800c020 <turn135inL+0x390>)
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bcc8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bccc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcdc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bce0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bce4:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c024 <turn135inL+0x394>
 800bce8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	eeb0 2a47 	vmov.f32	s4, s14
 800bcf2:	eef0 1a46 	vmov.f32	s3, s12
 800bcf6:	eeb0 1a66 	vmov.f32	s2, s13
 800bcfa:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c030 <turn135inL+0x3a0>
 800bcfe:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c028 <turn135inL+0x398>
 800bd02:	f7f7 fb93 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bd0a:	2302      	movs	r3, #2
 800bd0c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd0e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd12:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd16:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd1a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd22:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd2a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd2e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd32:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c024 <turn135inL+0x394>
 800bd36:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	eeb0 2a47 	vmov.f32	s4, s14
 800bd40:	eef0 1a45 	vmov.f32	s3, s10
 800bd44:	eeb0 1a65 	vmov.f32	s2, s11
 800bd48:	eef0 0a46 	vmov.f32	s1, s12
 800bd4c:	eeb0 0a66 	vmov.f32	s0, s13
 800bd50:	f7f7 fb6c 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800bd54:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d10c      	bne.n	800bd76 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bd5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd60:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd64:	eeb0 1a47 	vmov.f32	s2, s14
 800bd68:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c034 <turn135inL+0x3a4>
 800bd6c:	eeb0 0a67 	vmov.f32	s0, s15
 800bd70:	f7f8 fafa 	bl	8004368 <mollifier_slalom_table>
 800bd74:	e013      	b.n	800bd9e <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bd76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd7a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd7e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd82:	eef0 2a66 	vmov.f32	s5, s13
 800bd86:	eeb0 2a47 	vmov.f32	s4, s14
 800bd8a:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c030 <turn135inL+0x3a0>
 800bd8e:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c030 <turn135inL+0x3a0>
 800bd92:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c034 <turn135inL+0x3a4>
 800bd96:	eeb0 0a67 	vmov.f32	s0, s15
 800bd9a:	f7f8 f993 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bda2:	2300      	movs	r3, #0
 800bda4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7f4 fbf5 	bl	8000598 <__aeabi_f2d>
 800bdae:	a39a      	add	r3, pc, #616	; (adr r3, 800c018 <turn135inL+0x388>)
 800bdb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb4:	f7f4 fa92 	bl	80002dc <__adddf3>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	f7f4 ff1a 	bl	8000bf8 <__aeabi_d2f>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bdca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdd2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bdd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdda:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bdde:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bde2:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c024 <turn135inL+0x394>
 800bde6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bdea:	68f8      	ldr	r0, [r7, #12]
 800bdec:	eeb0 2a47 	vmov.f32	s4, s14
 800bdf0:	eef0 1a46 	vmov.f32	s3, s12
 800bdf4:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c030 <turn135inL+0x3a0>
 800bdf8:	eef0 0a66 	vmov.f32	s1, s13
 800bdfc:	ee00 3a10 	vmov	s0, r3
 800be00:	f7f7 fb14 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800be04:	4b86      	ldr	r3, [pc, #536]	; (800c020 <turn135inL+0x390>)
 800be06:	2200      	movs	r2, #0
 800be08:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800be0a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be0e:	2b00      	cmp	r3, #0
 800be10:	f040 809b 	bne.w	800bf4a <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800be14:	2300      	movs	r3, #0
 800be16:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be18:	2300      	movs	r3, #0
 800be1a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800be1c:	2302      	movs	r3, #2
 800be1e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be20:	2300      	movs	r3, #0
 800be22:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be24:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be28:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be2c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be30:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be34:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be40:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be44:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be48:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c024 <turn135inL+0x394>
 800be4c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be50:	68f8      	ldr	r0, [r7, #12]
 800be52:	eeb0 2a47 	vmov.f32	s4, s14
 800be56:	eef0 1a45 	vmov.f32	s3, s10
 800be5a:	eeb0 1a65 	vmov.f32	s2, s11
 800be5e:	eef0 0a46 	vmov.f32	s1, s12
 800be62:	eeb0 0a66 	vmov.f32	s0, s13
 800be66:	f7f7 fae1 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800be6a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be6e:	2b01      	cmp	r3, #1
 800be70:	d10c      	bne.n	800be8c <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800be72:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be76:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be7a:	eeb0 1a47 	vmov.f32	s2, s14
 800be7e:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c034 <turn135inL+0x3a4>
 800be82:	eeb0 0a67 	vmov.f32	s0, s15
 800be86:	f7f8 fa6f 	bl	8004368 <mollifier_slalom_table>
 800be8a:	e013      	b.n	800beb4 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800be8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be94:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800be98:	eef0 2a66 	vmov.f32	s5, s13
 800be9c:	eeb0 2a47 	vmov.f32	s4, s14
 800bea0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c030 <turn135inL+0x3a0>
 800bea4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c030 <turn135inL+0x3a0>
 800bea8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c034 <turn135inL+0x3a4>
 800beac:	eeb0 0a67 	vmov.f32	s0, s15
 800beb0:	f7f8 f908 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800beb4:	2303      	movs	r3, #3
 800beb6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800beb8:	2300      	movs	r3, #0
 800beba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bebc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bec0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bec4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bec8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800becc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bed0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bed4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bedc:	eef0 7ae7 	vabs.f32	s15, s15
 800bee0:	ee17 0a90 	vmov	r0, s15
 800bee4:	f7f4 fb58 	bl	8000598 <__aeabi_f2d>
 800bee8:	f04f 0200 	mov.w	r2, #0
 800beec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bef0:	f7f4 fcd4 	bl	800089c <__aeabi_ddiv>
 800bef4:	4602      	mov	r2, r0
 800bef6:	460b      	mov	r3, r1
 800bef8:	4614      	mov	r4, r2
 800befa:	461d      	mov	r5, r3
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	4618      	mov	r0, r3
 800bf00:	f7f4 fb4a 	bl	8000598 <__aeabi_f2d>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	4620      	mov	r0, r4
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f7f4 fcc6 	bl	800089c <__aeabi_ddiv>
 800bf10:	4602      	mov	r2, r0
 800bf12:	460b      	mov	r3, r1
 800bf14:	4610      	mov	r0, r2
 800bf16:	4619      	mov	r1, r3
 800bf18:	f04f 0200 	mov.w	r2, #0
 800bf1c:	4b43      	ldr	r3, [pc, #268]	; (800c02c <turn135inL+0x39c>)
 800bf1e:	f7f4 f9dd 	bl	80002dc <__adddf3>
 800bf22:	4602      	mov	r2, r0
 800bf24:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf26:	4610      	mov	r0, r2
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f7f4 fe65 	bl	8000bf8 <__aeabi_d2f>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	ee02 3a10 	vmov	s4, r3
 800bf36:	edd7 1a01 	vldr	s3, [r7, #4]
 800bf3a:	ed97 1a01 	vldr	s2, [r7, #4]
 800bf3e:	eef0 0a68 	vmov.f32	s1, s17
 800bf42:	eeb0 0a48 	vmov.f32	s0, s16
 800bf46:	f7f7 fa71 	bl	800342c <straight_table2>

	}
	if (test_mode >= 2) {
 800bf4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	f240 80ce 	bls.w	800c0f0 <turn135inL+0x460>

		highspeed_mode = 1;
 800bf54:	4b32      	ldr	r3, [pc, #200]	; (800c020 <turn135inL+0x390>)
 800bf56:	2201      	movs	r2, #1
 800bf58:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf6a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf6e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf7e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bf82:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf86:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c024 <turn135inL+0x394>
 800bf8a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf8e:	68f8      	ldr	r0, [r7, #12]
 800bf90:	eeb0 2a47 	vmov.f32	s4, s14
 800bf94:	eef0 1a46 	vmov.f32	s3, s12
 800bf98:	eeb0 1a66 	vmov.f32	s2, s13
 800bf9c:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c030 <turn135inL+0x3a0>
 800bfa0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c028 <turn135inL+0x398>
 800bfa4:	f7f7 fa42 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bfac:	2302      	movs	r3, #2
 800bfae:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfb0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bfb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bfb8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bfbc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bfc0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfcc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bfd0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfd4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c024 <turn135inL+0x394>
 800bfd8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	eeb0 2a47 	vmov.f32	s4, s14
 800bfe2:	eef0 1a45 	vmov.f32	s3, s10
 800bfe6:	eeb0 1a65 	vmov.f32	s2, s11
 800bfea:	eef0 0a46 	vmov.f32	s1, s12
 800bfee:	eeb0 0a66 	vmov.f32	s0, s13
 800bff2:	f7f7 fa1b 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800bff6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d11c      	bne.n	800c038 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800bffe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c002:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c006:	eeb0 1a47 	vmov.f32	s2, s14
 800c00a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c034 <turn135inL+0x3a4>
 800c00e:	eeb0 0a67 	vmov.f32	s0, s15
 800c012:	f7f8 f9a9 	bl	8004368 <mollifier_slalom_table>
 800c016:	e023      	b.n	800c060 <turn135inL+0x3d0>
 800c018:	c022ec18 	.word	0xc022ec18
 800c01c:	405fd1de 	.word	0x405fd1de
 800c020:	2000080c 	.word	0x2000080c
 800c024:	42340000 	.word	0x42340000
 800c028:	42cd0000 	.word	0x42cd0000
 800c02c:	408f4000 	.word	0x408f4000
 800c030:	00000000 	.word	0x00000000
 800c034:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c038:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c03c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c040:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c044:	eef0 2a66 	vmov.f32	s5, s13
 800c048:	eeb0 2a47 	vmov.f32	s4, s14
 800c04c:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c030 <turn135inL+0x3a0>
 800c050:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c030 <turn135inL+0x3a0>
 800c054:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c034 <turn135inL+0x3a4>
 800c058:	eeb0 0a67 	vmov.f32	s0, s15
 800c05c:	f7f8 f832 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c060:	2300      	movs	r3, #0
 800c062:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c064:	2300      	movs	r3, #0
 800c066:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c068:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c06c:	3b02      	subs	r3, #2
 800c06e:	4618      	mov	r0, r3
 800c070:	f7f4 fa80 	bl	8000574 <__aeabi_i2d>
 800c074:	a326      	add	r3, pc, #152	; (adr r3, 800c110 <turn135inL+0x480>)
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f7f4 fae5 	bl	8000648 <__aeabi_dmul>
 800c07e:	4602      	mov	r2, r0
 800c080:	460b      	mov	r3, r1
 800c082:	4614      	mov	r4, r2
 800c084:	461d      	mov	r5, r3
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	4618      	mov	r0, r3
 800c08a:	f7f4 fa85 	bl	8000598 <__aeabi_f2d>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4620      	mov	r0, r4
 800c094:	4629      	mov	r1, r5
 800c096:	f7f4 f921 	bl	80002dc <__adddf3>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4610      	mov	r0, r2
 800c0a0:	4619      	mov	r1, r3
 800c0a2:	f7f4 fda9 	bl	8000bf8 <__aeabi_d2f>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c0ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c0b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0c0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c0c4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0c8:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c108 <turn135inL+0x478>
 800c0cc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c0d0:	68f8      	ldr	r0, [r7, #12]
 800c0d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c0d6:	eef0 1a65 	vmov.f32	s3, s11
 800c0da:	eeb0 1a46 	vmov.f32	s2, s12
 800c0de:	eef0 0a66 	vmov.f32	s1, s13
 800c0e2:	ee00 3a10 	vmov	s0, r3
 800c0e6:	f7f7 f9a1 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800c0ea:	4b08      	ldr	r3, [pc, #32]	; (800c10c <turn135inL+0x47c>)
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	701a      	strb	r2, [r3, #0]
	}

}
 800c0f0:	bf00      	nop
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	ecbd 8b02 	vpop	{d8}
 800c0fa:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c0fe:	b004      	add	sp, #16
 800c100:	4770      	bx	lr
 800c102:	bf00      	nop
 800c104:	f3af 8000 	nop.w
 800c108:	42340000 	.word	0x42340000
 800c10c:	2000080c 	.word	0x2000080c
 800c110:	c022ec18 	.word	0xc022ec18
 800c114:	404fd1de 	.word	0x404fd1de

0800c118 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c118:	b084      	sub	sp, #16
 800c11a:	b5b0      	push	{r4, r5, r7, lr}
 800c11c:	ed2d 8b02 	vpush	{d8}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c12c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c130:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c134:	2b01      	cmp	r3, #1
 800c136:	f040 80a5 	bne.w	800c284 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c13a:	4be9      	ldr	r3, [pc, #932]	; (800c4e0 <turn45outR+0x3c8>)
 800c13c:	2201      	movs	r2, #1
 800c13e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c140:	2300      	movs	r3, #0
 800c142:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c144:	2300      	movs	r3, #0
 800c146:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c148:	2300      	movs	r3, #0
 800c14a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c150:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c154:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c158:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c15c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c160:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c164:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c168:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c16c:	eddf 5add 	vldr	s11, [pc, #884]	; 800c4e4 <turn45outR+0x3cc>
 800c170:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	eeb0 2a47 	vmov.f32	s4, s14
 800c17a:	eef0 1a46 	vmov.f32	s3, s12
 800c17e:	eeb0 1a66 	vmov.f32	s2, s13
 800c182:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c4e8 <turn45outR+0x3d0>
 800c186:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c4ec <turn45outR+0x3d4>
 800c18a:	f7f7 f94f 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800c18e:	2300      	movs	r3, #0
 800c190:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c192:	2303      	movs	r3, #3
 800c194:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c196:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c19a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c19e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c1a2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1ba:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c4e4 <turn45outR+0x3cc>
 800c1be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1c2:	68f8      	ldr	r0, [r7, #12]
 800c1c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c1c8:	eef0 1a45 	vmov.f32	s3, s10
 800c1cc:	eeb0 1a65 	vmov.f32	s2, s11
 800c1d0:	eef0 0a46 	vmov.f32	s1, s12
 800c1d4:	eeb0 0a66 	vmov.f32	s0, s13
 800c1d8:	f7f7 f928 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800c1dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1e0:	2b01      	cmp	r3, #1
 800c1e2:	d10c      	bne.n	800c1fe <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c1e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1ec:	eeb0 1a47 	vmov.f32	s2, s14
 800c1f0:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c4f0 <turn45outR+0x3d8>
 800c1f4:	eeb0 0a67 	vmov.f32	s0, s15
 800c1f8:	f7f8 f8b6 	bl	8004368 <mollifier_slalom_table>
 800c1fc:	e015      	b.n	800c22a <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c1fe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c202:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c206:	eef1 7a67 	vneg.f32	s15, s15
 800c20a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c20e:	eef0 2a66 	vmov.f32	s5, s13
 800c212:	eeb0 2a67 	vmov.f32	s4, s15
 800c216:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c4e8 <turn45outR+0x3d0>
 800c21a:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c4e8 <turn45outR+0x3d0>
 800c21e:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c4f0 <turn45outR+0x3d8>
 800c222:	eeb0 0a47 	vmov.f32	s0, s14
 800c226:	f7f7 ff4d 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c22e:	2300      	movs	r3, #0
 800c230:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c232:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c236:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c4f4 <turn45outR+0x3dc>
 800c23a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c23e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c242:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c246:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c24a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c24e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c252:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c256:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c25a:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c4e4 <turn45outR+0x3cc>
 800c25e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	eeb0 2a47 	vmov.f32	s4, s14
 800c268:	eef0 1a65 	vmov.f32	s3, s11
 800c26c:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c4e8 <turn45outR+0x3d0>
 800c270:	eef0 0a46 	vmov.f32	s1, s12
 800c274:	eeb0 0a66 	vmov.f32	s0, s13
 800c278:	f7f7 f8d8 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800c27c:	4b98      	ldr	r3, [pc, #608]	; (800c4e0 <turn45outR+0x3c8>)
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c282:	e123      	b.n	800c4cc <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c284:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c288:	2b01      	cmp	r3, #1
 800c28a:	f240 8082 	bls.w	800c392 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c28e:	4b94      	ldr	r3, [pc, #592]	; (800c4e0 <turn45outR+0x3c8>)
 800c290:	2201      	movs	r2, #1
 800c292:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c294:	2300      	movs	r3, #0
 800c296:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c298:	2300      	movs	r3, #0
 800c29a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c29c:	2303      	movs	r3, #3
 800c29e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c2a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c2ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c2b0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c2c4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2c8:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c4e4 <turn45outR+0x3cc>
 800c2cc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c2d0:	68f8      	ldr	r0, [r7, #12]
 800c2d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c2d6:	eef0 1a45 	vmov.f32	s3, s10
 800c2da:	eeb0 1a65 	vmov.f32	s2, s11
 800c2de:	eef0 0a46 	vmov.f32	s1, s12
 800c2e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c2e6:	f7f7 f8a1 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800c2ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d10c      	bne.n	800c30c <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c2f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c2fa:	eeb0 1a47 	vmov.f32	s2, s14
 800c2fe:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c4f0 <turn45outR+0x3d8>
 800c302:	eeb0 0a67 	vmov.f32	s0, s15
 800c306:	f7f8 f82f 	bl	8004368 <mollifier_slalom_table>
 800c30a:	e015      	b.n	800c338 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c30c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c310:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c314:	eef1 7a67 	vneg.f32	s15, s15
 800c318:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c31c:	eef0 2a66 	vmov.f32	s5, s13
 800c320:	eeb0 2a67 	vmov.f32	s4, s15
 800c324:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c4e8 <turn45outR+0x3d0>
 800c328:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c4e8 <turn45outR+0x3d0>
 800c32c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c4f0 <turn45outR+0x3d8>
 800c330:	eeb0 0a47 	vmov.f32	s0, s14
 800c334:	f7f7 fec6 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800c338:	2300      	movs	r3, #0
 800c33a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c340:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c344:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c4f4 <turn45outR+0x3dc>
 800c348:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c34c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c350:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c354:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c358:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c35c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c360:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c364:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c368:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c4e4 <turn45outR+0x3cc>
 800c36c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	eeb0 2a47 	vmov.f32	s4, s14
 800c376:	eef0 1a65 	vmov.f32	s3, s11
 800c37a:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c4e8 <turn45outR+0x3d0>
 800c37e:	eef0 0a46 	vmov.f32	s1, s12
 800c382:	eeb0 0a66 	vmov.f32	s0, s13
 800c386:	f7f7 f851 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800c38a:	4b55      	ldr	r3, [pc, #340]	; (800c4e0 <turn45outR+0x3c8>)
 800c38c:	2200      	movs	r2, #0
 800c38e:	701a      	strb	r2, [r3, #0]
}
 800c390:	e09c      	b.n	800c4cc <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c392:	2300      	movs	r3, #0
 800c394:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c396:	2300      	movs	r3, #0
 800c398:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c39a:	2303      	movs	r3, #3
 800c39c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3a2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c3a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c3aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c3ae:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c3b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c3b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3be:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c3c2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3c6:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c4e4 <turn45outR+0x3cc>
 800c3ca:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	eeb0 2a47 	vmov.f32	s4, s14
 800c3d4:	eef0 1a45 	vmov.f32	s3, s10
 800c3d8:	eeb0 1a65 	vmov.f32	s2, s11
 800c3dc:	eef0 0a46 	vmov.f32	s1, s12
 800c3e0:	eeb0 0a66 	vmov.f32	s0, s13
 800c3e4:	f7f7 f822 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800c3e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d10c      	bne.n	800c40a <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c3f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c3f4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3f8:	eeb0 1a47 	vmov.f32	s2, s14
 800c3fc:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c4f0 <turn45outR+0x3d8>
 800c400:	eeb0 0a67 	vmov.f32	s0, s15
 800c404:	f7f7 ffb0 	bl	8004368 <mollifier_slalom_table>
 800c408:	e015      	b.n	800c436 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c40a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c40e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c412:	eef1 7a67 	vneg.f32	s15, s15
 800c416:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c41a:	eef0 2a66 	vmov.f32	s5, s13
 800c41e:	eeb0 2a67 	vmov.f32	s4, s15
 800c422:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c4e8 <turn45outR+0x3d0>
 800c426:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c4e8 <turn45outR+0x3d0>
 800c42a:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c4f0 <turn45outR+0x3d8>
 800c42e:	eeb0 0a47 	vmov.f32	s0, s14
 800c432:	f7f7 fe47 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c436:	2301      	movs	r3, #1
 800c438:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c43e:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c442:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c446:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c44a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c44e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c452:	edd7 7a01 	vldr	s15, [r7, #4]
 800c456:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c45a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c45e:	eef0 7ae7 	vabs.f32	s15, s15
 800c462:	ee17 0a90 	vmov	r0, s15
 800c466:	f7f4 f897 	bl	8000598 <__aeabi_f2d>
 800c46a:	f04f 0200 	mov.w	r2, #0
 800c46e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c472:	f7f4 fa13 	bl	800089c <__aeabi_ddiv>
 800c476:	4602      	mov	r2, r0
 800c478:	460b      	mov	r3, r1
 800c47a:	4614      	mov	r4, r2
 800c47c:	461d      	mov	r5, r3
 800c47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c480:	4618      	mov	r0, r3
 800c482:	f7f4 f889 	bl	8000598 <__aeabi_f2d>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	4620      	mov	r0, r4
 800c48c:	4629      	mov	r1, r5
 800c48e:	f7f4 fa05 	bl	800089c <__aeabi_ddiv>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	4610      	mov	r0, r2
 800c498:	4619      	mov	r1, r3
 800c49a:	f04f 0200 	mov.w	r2, #0
 800c49e:	4b16      	ldr	r3, [pc, #88]	; (800c4f8 <turn45outR+0x3e0>)
 800c4a0:	f7f3 ff1c 	bl	80002dc <__adddf3>
 800c4a4:	4602      	mov	r2, r0
 800c4a6:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f7f4 fba4 	bl	8000bf8 <__aeabi_d2f>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	ee02 3a10 	vmov	s4, r3
 800c4b8:	edd7 1a01 	vldr	s3, [r7, #4]
 800c4bc:	ed97 1a01 	vldr	s2, [r7, #4]
 800c4c0:	eef0 0a68 	vmov.f32	s1, s17
 800c4c4:	eeb0 0a48 	vmov.f32	s0, s16
 800c4c8:	f7f6 ffb0 	bl	800342c <straight_table2>
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	ecbd 8b02 	vpop	{d8}
 800c4d6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c4da:	b004      	add	sp, #16
 800c4dc:	4770      	bx	lr
 800c4de:	bf00      	nop
 800c4e0:	2000080c 	.word	0x2000080c
 800c4e4:	42340000 	.word	0x42340000
 800c4e8:	00000000 	.word	0x00000000
 800c4ec:	42c4477b 	.word	0x42c4477b
 800c4f0:	c2340000 	.word	0xc2340000
 800c4f4:	42b40000 	.word	0x42b40000
 800c4f8:	408f4000 	.word	0x408f4000

0800c4fc <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c4fc:	b084      	sub	sp, #16
 800c4fe:	b5b0      	push	{r4, r5, r7, lr}
 800c500:	ed2d 8b02 	vpush	{d8}
 800c504:	b084      	sub	sp, #16
 800c506:	af00      	add	r7, sp, #0
 800c508:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c50c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c510:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c514:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c518:	2b01      	cmp	r3, #1
 800c51a:	f040 80a3 	bne.w	800c664 <turn45outL+0x168>
			highspeed_mode = 1;
 800c51e:	4be5      	ldr	r3, [pc, #916]	; (800c8b4 <turn45outL+0x3b8>)
 800c520:	2201      	movs	r2, #1
 800c522:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c524:	2300      	movs	r3, #0
 800c526:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c528:	2300      	movs	r3, #0
 800c52a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c52c:	2300      	movs	r3, #0
 800c52e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c530:	2300      	movs	r3, #0
 800c532:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c534:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c538:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c53c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c540:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c544:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c548:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c54c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c550:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800c8b8 <turn45outL+0x3bc>
 800c554:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	eeb0 2a47 	vmov.f32	s4, s14
 800c55e:	eef0 1a46 	vmov.f32	s3, s12
 800c562:	eeb0 1a66 	vmov.f32	s2, s13
 800c566:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800c8bc <turn45outL+0x3c0>
 800c56a:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800c8c0 <turn45outL+0x3c4>
 800c56e:	f7f6 ff5d 	bl	800342c <straight_table2>
			wallmode.WallControlMode=0;
 800c572:	2300      	movs	r3, #0
 800c574:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c576:	2304      	movs	r3, #4
 800c578:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c57a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c57e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c582:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c586:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c58a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c58e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c592:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c596:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c59a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c59e:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800c8b8 <turn45outL+0x3bc>
 800c5a2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	eeb0 2a47 	vmov.f32	s4, s14
 800c5ac:	eef0 1a45 	vmov.f32	s3, s10
 800c5b0:	eeb0 1a65 	vmov.f32	s2, s11
 800c5b4:	eef0 0a46 	vmov.f32	s1, s12
 800c5b8:	eeb0 0a66 	vmov.f32	s0, s13
 800c5bc:	f7f6 ff36 	bl	800342c <straight_table2>
			if(mollifier_mode == ON){
 800c5c0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d10c      	bne.n	800c5e2 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c5c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5d0:	eeb0 1a47 	vmov.f32	s2, s14
 800c5d4:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800c8b8 <turn45outL+0x3bc>
 800c5d8:	eeb0 0a67 	vmov.f32	s0, s15
 800c5dc:	f7f7 fec4 	bl	8004368 <mollifier_slalom_table>
 800c5e0:	e013      	b.n	800c60a <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5e6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5ea:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c5ee:	eef0 2a66 	vmov.f32	s5, s13
 800c5f2:	eeb0 2a47 	vmov.f32	s4, s14
 800c5f6:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800c8bc <turn45outL+0x3c0>
 800c5fa:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800c8bc <turn45outL+0x3c0>
 800c5fe:	eddf 0aae 	vldr	s1, [pc, #696]	; 800c8b8 <turn45outL+0x3bc>
 800c602:	eeb0 0a67 	vmov.f32	s0, s15
 800c606:	f7f7 fd5d 	bl	80040c4 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c60e:	2300      	movs	r3, #0
 800c610:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c612:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c616:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800c8c4 <turn45outL+0x3c8>
 800c61a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c61e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c622:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c626:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c62a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c62e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c632:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c636:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c63a:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800c8b8 <turn45outL+0x3bc>
 800c63e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c642:	68f8      	ldr	r0, [r7, #12]
 800c644:	eeb0 2a47 	vmov.f32	s4, s14
 800c648:	eef0 1a65 	vmov.f32	s3, s11
 800c64c:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800c8bc <turn45outL+0x3c0>
 800c650:	eef0 0a46 	vmov.f32	s1, s12
 800c654:	eeb0 0a66 	vmov.f32	s0, s13
 800c658:	f7f6 fee8 	bl	800342c <straight_table2>
			highspeed_mode = 0;
 800c65c:	4b95      	ldr	r3, [pc, #596]	; (800c8b4 <turn45outL+0x3b8>)
 800c65e:	2200      	movs	r2, #0
 800c660:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c662:	e11e      	b.n	800c8a2 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c664:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d97f      	bls.n	800c76c <turn45outL+0x270>
		highspeed_mode = 1;
 800c66c:	4b91      	ldr	r3, [pc, #580]	; (800c8b4 <turn45outL+0x3b8>)
 800c66e:	2201      	movs	r2, #1
 800c670:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c672:	2300      	movs	r3, #0
 800c674:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c676:	2300      	movs	r3, #0
 800c678:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c67a:	2304      	movs	r3, #4
 800c67c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c67e:	2300      	movs	r3, #0
 800c680:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c682:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c686:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c68a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c68e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c692:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c696:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c69a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c69e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c6a2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6a6:	eddf 4a84 	vldr	s9, [pc, #528]	; 800c8b8 <turn45outL+0x3bc>
 800c6aa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	eeb0 2a47 	vmov.f32	s4, s14
 800c6b4:	eef0 1a45 	vmov.f32	s3, s10
 800c6b8:	eeb0 1a65 	vmov.f32	s2, s11
 800c6bc:	eef0 0a46 	vmov.f32	s1, s12
 800c6c0:	eeb0 0a66 	vmov.f32	s0, s13
 800c6c4:	f7f6 feb2 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800c6c8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d10c      	bne.n	800c6ea <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c6d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6d4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6d8:	eeb0 1a47 	vmov.f32	s2, s14
 800c6dc:	eddf 0a76 	vldr	s1, [pc, #472]	; 800c8b8 <turn45outL+0x3bc>
 800c6e0:	eeb0 0a67 	vmov.f32	s0, s15
 800c6e4:	f7f7 fe40 	bl	8004368 <mollifier_slalom_table>
 800c6e8:	e013      	b.n	800c712 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c6ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c6f2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c6f6:	eef0 2a66 	vmov.f32	s5, s13
 800c6fa:	eeb0 2a47 	vmov.f32	s4, s14
 800c6fe:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800c8bc <turn45outL+0x3c0>
 800c702:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800c8bc <turn45outL+0x3c0>
 800c706:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c8b8 <turn45outL+0x3bc>
 800c70a:	eeb0 0a67 	vmov.f32	s0, s15
 800c70e:	f7f7 fcd9 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800c712:	2300      	movs	r3, #0
 800c714:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c71a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c71e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800c8c4 <turn45outL+0x3c8>
 800c722:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c726:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c72a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c72e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c732:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c73a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c73e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c742:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800c8b8 <turn45outL+0x3bc>
 800c746:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	eeb0 2a47 	vmov.f32	s4, s14
 800c750:	eef0 1a65 	vmov.f32	s3, s11
 800c754:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800c8bc <turn45outL+0x3c0>
 800c758:	eef0 0a46 	vmov.f32	s1, s12
 800c75c:	eeb0 0a66 	vmov.f32	s0, s13
 800c760:	f7f6 fe64 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800c764:	4b53      	ldr	r3, [pc, #332]	; (800c8b4 <turn45outL+0x3b8>)
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]
}
 800c76a:	e09a      	b.n	800c8a2 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c76c:	2300      	movs	r3, #0
 800c76e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c770:	2300      	movs	r3, #0
 800c772:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c774:	2304      	movs	r3, #4
 800c776:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c778:	2300      	movs	r3, #0
 800c77a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c77c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c780:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c784:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c788:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c78c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c790:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c794:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c798:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c79c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c7a0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800c8b8 <turn45outL+0x3bc>
 800c7a4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c7a8:	68f8      	ldr	r0, [r7, #12]
 800c7aa:	eeb0 2a47 	vmov.f32	s4, s14
 800c7ae:	eef0 1a45 	vmov.f32	s3, s10
 800c7b2:	eeb0 1a65 	vmov.f32	s2, s11
 800c7b6:	eef0 0a46 	vmov.f32	s1, s12
 800c7ba:	eeb0 0a66 	vmov.f32	s0, s13
 800c7be:	f7f6 fe35 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800c7c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d10c      	bne.n	800c7e4 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c7ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7d2:	eeb0 1a47 	vmov.f32	s2, s14
 800c7d6:	eddf 0a38 	vldr	s1, [pc, #224]	; 800c8b8 <turn45outL+0x3bc>
 800c7da:	eeb0 0a67 	vmov.f32	s0, s15
 800c7de:	f7f7 fdc3 	bl	8004368 <mollifier_slalom_table>
 800c7e2:	e013      	b.n	800c80c <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c7e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c7ec:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c7f0:	eef0 2a66 	vmov.f32	s5, s13
 800c7f4:	eeb0 2a47 	vmov.f32	s4, s14
 800c7f8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800c8bc <turn45outL+0x3c0>
 800c7fc:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800c8bc <turn45outL+0x3c0>
 800c800:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800c8b8 <turn45outL+0x3bc>
 800c804:	eeb0 0a67 	vmov.f32	s0, s15
 800c808:	f7f7 fc5c 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c80c:	2301      	movs	r3, #1
 800c80e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c810:	2300      	movs	r3, #0
 800c812:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c814:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c818:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c81c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c820:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c824:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c828:	edd7 7a01 	vldr	s15, [r7, #4]
 800c82c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c830:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c834:	eef0 7ae7 	vabs.f32	s15, s15
 800c838:	ee17 0a90 	vmov	r0, s15
 800c83c:	f7f3 feac 	bl	8000598 <__aeabi_f2d>
 800c840:	f04f 0200 	mov.w	r2, #0
 800c844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c848:	f7f4 f828 	bl	800089c <__aeabi_ddiv>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	4614      	mov	r4, r2
 800c852:	461d      	mov	r5, r3
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	4618      	mov	r0, r3
 800c858:	f7f3 fe9e 	bl	8000598 <__aeabi_f2d>
 800c85c:	4602      	mov	r2, r0
 800c85e:	460b      	mov	r3, r1
 800c860:	4620      	mov	r0, r4
 800c862:	4629      	mov	r1, r5
 800c864:	f7f4 f81a 	bl	800089c <__aeabi_ddiv>
 800c868:	4602      	mov	r2, r0
 800c86a:	460b      	mov	r3, r1
 800c86c:	4610      	mov	r0, r2
 800c86e:	4619      	mov	r1, r3
 800c870:	f04f 0200 	mov.w	r2, #0
 800c874:	4b14      	ldr	r3, [pc, #80]	; (800c8c8 <turn45outL+0x3cc>)
 800c876:	f7f3 fd31 	bl	80002dc <__adddf3>
 800c87a:	4602      	mov	r2, r0
 800c87c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c87e:	4610      	mov	r0, r2
 800c880:	4619      	mov	r1, r3
 800c882:	f7f4 f9b9 	bl	8000bf8 <__aeabi_d2f>
 800c886:	4603      	mov	r3, r0
 800c888:	68f8      	ldr	r0, [r7, #12]
 800c88a:	ee02 3a10 	vmov	s4, r3
 800c88e:	edd7 1a01 	vldr	s3, [r7, #4]
 800c892:	ed97 1a01 	vldr	s2, [r7, #4]
 800c896:	eef0 0a68 	vmov.f32	s1, s17
 800c89a:	eeb0 0a48 	vmov.f32	s0, s16
 800c89e:	f7f6 fdc5 	bl	800342c <straight_table2>
}
 800c8a2:	bf00      	nop
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	ecbd 8b02 	vpop	{d8}
 800c8ac:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c8b0:	b004      	add	sp, #16
 800c8b2:	4770      	bx	lr
 800c8b4:	2000080c 	.word	0x2000080c
 800c8b8:	42340000 	.word	0x42340000
 800c8bc:	00000000 	.word	0x00000000
 800c8c0:	42c4477b 	.word	0x42c4477b
 800c8c4:	42b40000 	.word	0x42b40000
 800c8c8:	408f4000 	.word	0x408f4000

0800c8cc <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c8cc:	b084      	sub	sp, #16
 800c8ce:	b5b0      	push	{r4, r5, r7, lr}
 800c8d0:	ed2d 8b02 	vpush	{d8}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c8dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c8e0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c8e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	f040 80a5 	bne.w	800ca38 <turn135outR+0x16c>
			highspeed_mode = 1;
 800c8ee:	4be9      	ldr	r3, [pc, #932]	; (800cc94 <turn135outR+0x3c8>)
 800c8f0:	2201      	movs	r2, #1
 800c8f2:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c900:	2300      	movs	r3, #0
 800c902:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c904:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c908:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c90c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c910:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c914:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c918:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c91c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c920:	eddf 5add 	vldr	s11, [pc, #884]	; 800cc98 <turn135outR+0x3cc>
 800c924:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	eeb0 2a47 	vmov.f32	s4, s14
 800c92e:	eef0 1a46 	vmov.f32	s3, s12
 800c932:	eeb0 1a66 	vmov.f32	s2, s13
 800c936:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cc9c <turn135outR+0x3d0>
 800c93a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cca0 <turn135outR+0x3d4>
 800c93e:	f7f6 fd75 	bl	800342c <straight_table2>
			wallmode.WallControlMode=0;
 800c942:	2300      	movs	r3, #0
 800c944:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800c946:	2303      	movs	r3, #3
 800c948:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c94a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c94e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c952:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c956:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c95a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c95e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c962:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c966:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c96a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c96e:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cc98 <turn135outR+0x3cc>
 800c972:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	eeb0 2a47 	vmov.f32	s4, s14
 800c97c:	eef0 1a45 	vmov.f32	s3, s10
 800c980:	eeb0 1a65 	vmov.f32	s2, s11
 800c984:	eef0 0a46 	vmov.f32	s1, s12
 800c988:	eeb0 0a66 	vmov.f32	s0, s13
 800c98c:	f7f6 fd4e 	bl	800342c <straight_table2>
			if(mollifier_mode == ON){
 800c990:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c994:	2b01      	cmp	r3, #1
 800c996:	d10c      	bne.n	800c9b2 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c998:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c99c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c9a0:	eeb0 1a47 	vmov.f32	s2, s14
 800c9a4:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cca4 <turn135outR+0x3d8>
 800c9a8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9ac:	f7f7 fcdc 	bl	8004368 <mollifier_slalom_table>
 800c9b0:	e015      	b.n	800c9de <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c9b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c9ba:	eef1 7a67 	vneg.f32	s15, s15
 800c9be:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c9c2:	eef0 2a66 	vmov.f32	s5, s13
 800c9c6:	eeb0 2a67 	vmov.f32	s4, s15
 800c9ca:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cc9c <turn135outR+0x3d0>
 800c9ce:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cc9c <turn135outR+0x3d0>
 800c9d2:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cca4 <turn135outR+0x3d8>
 800c9d6:	eeb0 0a47 	vmov.f32	s0, s14
 800c9da:	f7f7 fb73 	bl	80040c4 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c9e6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c9ea:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cca8 <turn135outR+0x3dc>
 800c9ee:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c9f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9f6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca06:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca0a:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca0e:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cc98 <turn135outR+0x3cc>
 800ca12:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	eeb0 2a47 	vmov.f32	s4, s14
 800ca1c:	eef0 1a65 	vmov.f32	s3, s11
 800ca20:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cc9c <turn135outR+0x3d0>
 800ca24:	eef0 0a46 	vmov.f32	s1, s12
 800ca28:	eeb0 0a66 	vmov.f32	s0, s13
 800ca2c:	f7f6 fcfe 	bl	800342c <straight_table2>
			highspeed_mode = 0;
 800ca30:	4b98      	ldr	r3, [pc, #608]	; (800cc94 <turn135outR+0x3c8>)
 800ca32:	2200      	movs	r2, #0
 800ca34:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ca36:	e123      	b.n	800cc80 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800ca38:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	f240 8082 	bls.w	800cb46 <turn135outR+0x27a>
		highspeed_mode = 1;
 800ca42:	4b94      	ldr	r3, [pc, #592]	; (800cc94 <turn135outR+0x3c8>)
 800ca44:	2201      	movs	r2, #1
 800ca46:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ca50:	2303      	movs	r3, #3
 800ca52:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ca5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca60:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ca64:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca74:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ca78:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca7c:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cc98 <turn135outR+0x3cc>
 800ca80:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca84:	68f8      	ldr	r0, [r7, #12]
 800ca86:	eeb0 2a47 	vmov.f32	s4, s14
 800ca8a:	eef0 1a45 	vmov.f32	s3, s10
 800ca8e:	eeb0 1a65 	vmov.f32	s2, s11
 800ca92:	eef0 0a46 	vmov.f32	s1, s12
 800ca96:	eeb0 0a66 	vmov.f32	s0, s13
 800ca9a:	f7f6 fcc7 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800ca9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800caa2:	2b01      	cmp	r3, #1
 800caa4:	d10c      	bne.n	800cac0 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800caa6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caaa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800caae:	eeb0 1a47 	vmov.f32	s2, s14
 800cab2:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cca4 <turn135outR+0x3d8>
 800cab6:	eeb0 0a67 	vmov.f32	s0, s15
 800caba:	f7f7 fc55 	bl	8004368 <mollifier_slalom_table>
 800cabe:	e015      	b.n	800caec <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cac0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cac4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cac8:	eef1 7a67 	vneg.f32	s15, s15
 800cacc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cad0:	eef0 2a66 	vmov.f32	s5, s13
 800cad4:	eeb0 2a67 	vmov.f32	s4, s15
 800cad8:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cc9c <turn135outR+0x3d0>
 800cadc:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cc9c <turn135outR+0x3d0>
 800cae0:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cca4 <turn135outR+0x3d8>
 800cae4:	eeb0 0a47 	vmov.f32	s0, s14
 800cae8:	f7f7 faec 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800caec:	2300      	movs	r3, #0
 800caee:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800caf4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800caf8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cca8 <turn135outR+0x3dc>
 800cafc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cb00:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb04:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb14:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cb18:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb1c:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cc98 <turn135outR+0x3cc>
 800cb20:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	eeb0 2a47 	vmov.f32	s4, s14
 800cb2a:	eef0 1a65 	vmov.f32	s3, s11
 800cb2e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cc9c <turn135outR+0x3d0>
 800cb32:	eef0 0a46 	vmov.f32	s1, s12
 800cb36:	eeb0 0a66 	vmov.f32	s0, s13
 800cb3a:	f7f6 fc77 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800cb3e:	4b55      	ldr	r3, [pc, #340]	; (800cc94 <turn135outR+0x3c8>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	701a      	strb	r2, [r3, #0]
}
 800cb44:	e09c      	b.n	800cc80 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cb46:	2300      	movs	r3, #0
 800cb48:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cb4e:	2303      	movs	r3, #3
 800cb50:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb56:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cb5a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cb5e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cb62:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb66:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb72:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cb76:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb7a:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cc98 <turn135outR+0x3cc>
 800cb7e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	eeb0 2a47 	vmov.f32	s4, s14
 800cb88:	eef0 1a45 	vmov.f32	s3, s10
 800cb8c:	eeb0 1a65 	vmov.f32	s2, s11
 800cb90:	eef0 0a46 	vmov.f32	s1, s12
 800cb94:	eeb0 0a66 	vmov.f32	s0, s13
 800cb98:	f7f6 fc48 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800cb9c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d10c      	bne.n	800cbbe <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cba8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cbac:	eeb0 1a47 	vmov.f32	s2, s14
 800cbb0:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cca4 <turn135outR+0x3d8>
 800cbb4:	eeb0 0a67 	vmov.f32	s0, s15
 800cbb8:	f7f7 fbd6 	bl	8004368 <mollifier_slalom_table>
 800cbbc:	e015      	b.n	800cbea <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cbbe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbc2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cbc6:	eef1 7a67 	vneg.f32	s15, s15
 800cbca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cbce:	eef0 2a66 	vmov.f32	s5, s13
 800cbd2:	eeb0 2a67 	vmov.f32	s4, s15
 800cbd6:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cc9c <turn135outR+0x3d0>
 800cbda:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cc9c <turn135outR+0x3d0>
 800cbde:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cca4 <turn135outR+0x3d8>
 800cbe2:	eeb0 0a47 	vmov.f32	s0, s14
 800cbe6:	f7f7 fa6d 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cbea:	2301      	movs	r3, #1
 800cbec:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbf2:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cbf6:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cbfa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc06:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc12:	eef0 7ae7 	vabs.f32	s15, s15
 800cc16:	ee17 0a90 	vmov	r0, s15
 800cc1a:	f7f3 fcbd 	bl	8000598 <__aeabi_f2d>
 800cc1e:	f04f 0200 	mov.w	r2, #0
 800cc22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc26:	f7f3 fe39 	bl	800089c <__aeabi_ddiv>
 800cc2a:	4602      	mov	r2, r0
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	4614      	mov	r4, r2
 800cc30:	461d      	mov	r5, r3
 800cc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7f3 fcaf 	bl	8000598 <__aeabi_f2d>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	4620      	mov	r0, r4
 800cc40:	4629      	mov	r1, r5
 800cc42:	f7f3 fe2b 	bl	800089c <__aeabi_ddiv>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4610      	mov	r0, r2
 800cc4c:	4619      	mov	r1, r3
 800cc4e:	f04f 0200 	mov.w	r2, #0
 800cc52:	4b16      	ldr	r3, [pc, #88]	; (800ccac <turn135outR+0x3e0>)
 800cc54:	f7f3 fb42 	bl	80002dc <__adddf3>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cc5c:	4610      	mov	r0, r2
 800cc5e:	4619      	mov	r1, r3
 800cc60:	f7f3 ffca 	bl	8000bf8 <__aeabi_d2f>
 800cc64:	4603      	mov	r3, r0
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	ee02 3a10 	vmov	s4, r3
 800cc6c:	edd7 1a01 	vldr	s3, [r7, #4]
 800cc70:	ed97 1a01 	vldr	s2, [r7, #4]
 800cc74:	eef0 0a68 	vmov.f32	s1, s17
 800cc78:	eeb0 0a48 	vmov.f32	s0, s16
 800cc7c:	f7f6 fbd6 	bl	800342c <straight_table2>
}
 800cc80:	bf00      	nop
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	ecbd 8b02 	vpop	{d8}
 800cc8a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc8e:	b004      	add	sp, #16
 800cc90:	4770      	bx	lr
 800cc92:	bf00      	nop
 800cc94:	2000080c 	.word	0x2000080c
 800cc98:	42340000 	.word	0x42340000
 800cc9c:	00000000 	.word	0x00000000
 800cca0:	42c4477b 	.word	0x42c4477b
 800cca4:	c3070000 	.word	0xc3070000
 800cca8:	42b40000 	.word	0x42b40000
 800ccac:	408f4000 	.word	0x408f4000

0800ccb0 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800ccb0:	b084      	sub	sp, #16
 800ccb2:	b5b0      	push	{r4, r5, r7, lr}
 800ccb4:	ed2d 8b02 	vpush	{d8}
 800ccb8:	b084      	sub	sp, #16
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ccc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ccc4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ccc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cccc:	2b01      	cmp	r3, #1
 800ccce:	f040 80a3 	bne.w	800ce18 <turn135outL+0x168>
		highspeed_mode = 1;
 800ccd2:	4be5      	ldr	r3, [pc, #916]	; (800d068 <turn135outL+0x3b8>)
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cce4:	2300      	movs	r3, #0
 800cce6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cce8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ccec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccfc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cd00:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cd04:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d06c <turn135outL+0x3bc>
 800cd08:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	eeb0 2a47 	vmov.f32	s4, s14
 800cd12:	eef0 1a46 	vmov.f32	s3, s12
 800cd16:	eeb0 1a66 	vmov.f32	s2, s13
 800cd1a:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d070 <turn135outL+0x3c0>
 800cd1e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d074 <turn135outL+0x3c4>
 800cd22:	f7f6 fb83 	bl	800342c <straight_table2>
		wallmode.WallControlMode=0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800cd2a:	2304      	movs	r3, #4
 800cd2c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd2e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd32:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd36:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd3a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd4a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd4e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd52:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d06c <turn135outL+0x3bc>
 800cd56:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd5a:	68f8      	ldr	r0, [r7, #12]
 800cd5c:	eeb0 2a47 	vmov.f32	s4, s14
 800cd60:	eef0 1a45 	vmov.f32	s3, s10
 800cd64:	eeb0 1a65 	vmov.f32	s2, s11
 800cd68:	eef0 0a46 	vmov.f32	s1, s12
 800cd6c:	eeb0 0a66 	vmov.f32	s0, s13
 800cd70:	f7f6 fb5c 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800cd74:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d10c      	bne.n	800cd96 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cd7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd84:	eeb0 1a47 	vmov.f32	s2, s14
 800cd88:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d078 <turn135outL+0x3c8>
 800cd8c:	eeb0 0a67 	vmov.f32	s0, s15
 800cd90:	f7f7 faea 	bl	8004368 <mollifier_slalom_table>
 800cd94:	e013      	b.n	800cdbe <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cd96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd9a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd9e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cda2:	eef0 2a66 	vmov.f32	s5, s13
 800cda6:	eeb0 2a47 	vmov.f32	s4, s14
 800cdaa:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d070 <turn135outL+0x3c0>
 800cdae:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d070 <turn135outL+0x3c0>
 800cdb2:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d078 <turn135outL+0x3c8>
 800cdb6:	eeb0 0a67 	vmov.f32	s0, s15
 800cdba:	f7f7 f983 	bl	80040c4 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cdc6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cdca:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d07c <turn135outL+0x3cc>
 800cdce:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cdd2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdd6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cde2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cde6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cdea:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cdee:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d06c <turn135outL+0x3bc>
 800cdf2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	eeb0 2a47 	vmov.f32	s4, s14
 800cdfc:	eef0 1a65 	vmov.f32	s3, s11
 800ce00:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d070 <turn135outL+0x3c0>
 800ce04:	eef0 0a46 	vmov.f32	s1, s12
 800ce08:	eeb0 0a66 	vmov.f32	s0, s13
 800ce0c:	f7f6 fb0e 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800ce10:	4b95      	ldr	r3, [pc, #596]	; (800d068 <turn135outL+0x3b8>)
 800ce12:	2200      	movs	r2, #0
 800ce14:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ce16:	e11e      	b.n	800d056 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800ce18:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce1c:	2b01      	cmp	r3, #1
 800ce1e:	d97f      	bls.n	800cf20 <turn135outL+0x270>
		highspeed_mode = 1;
 800ce20:	4b91      	ldr	r3, [pc, #580]	; (800d068 <turn135outL+0x3b8>)
 800ce22:	2201      	movs	r2, #1
 800ce24:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800ce2e:	2304      	movs	r3, #4
 800ce30:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ce32:	2300      	movs	r3, #0
 800ce34:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce36:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ce3a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce3e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ce42:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce52:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ce56:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce5a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d06c <turn135outL+0x3bc>
 800ce5e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ce62:	68f8      	ldr	r0, [r7, #12]
 800ce64:	eeb0 2a47 	vmov.f32	s4, s14
 800ce68:	eef0 1a45 	vmov.f32	s3, s10
 800ce6c:	eeb0 1a65 	vmov.f32	s2, s11
 800ce70:	eef0 0a46 	vmov.f32	s1, s12
 800ce74:	eeb0 0a66 	vmov.f32	s0, s13
 800ce78:	f7f6 fad8 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800ce7c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d10c      	bne.n	800ce9e <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800ce84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce8c:	eeb0 1a47 	vmov.f32	s2, s14
 800ce90:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d078 <turn135outL+0x3c8>
 800ce94:	eeb0 0a67 	vmov.f32	s0, s15
 800ce98:	f7f7 fa66 	bl	8004368 <mollifier_slalom_table>
 800ce9c:	e013      	b.n	800cec6 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ce9e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cea2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cea6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ceaa:	eef0 2a66 	vmov.f32	s5, s13
 800ceae:	eeb0 2a47 	vmov.f32	s4, s14
 800ceb2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d070 <turn135outL+0x3c0>
 800ceb6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d070 <turn135outL+0x3c0>
 800ceba:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d078 <turn135outL+0x3c8>
 800cebe:	eeb0 0a67 	vmov.f32	s0, s15
 800cec2:	f7f7 f8ff 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800cec6:	2300      	movs	r3, #0
 800cec8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cece:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ced2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d07c <turn135outL+0x3cc>
 800ced6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ceda:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cede:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cee2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cee6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ceea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceee:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cef2:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cef6:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d06c <turn135outL+0x3bc>
 800cefa:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	eeb0 2a47 	vmov.f32	s4, s14
 800cf04:	eef0 1a65 	vmov.f32	s3, s11
 800cf08:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d070 <turn135outL+0x3c0>
 800cf0c:	eef0 0a46 	vmov.f32	s1, s12
 800cf10:	eeb0 0a66 	vmov.f32	s0, s13
 800cf14:	f7f6 fa8a 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800cf18:	4b53      	ldr	r3, [pc, #332]	; (800d068 <turn135outL+0x3b8>)
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	701a      	strb	r2, [r3, #0]
}
 800cf1e:	e09a      	b.n	800d056 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cf20:	2300      	movs	r3, #0
 800cf22:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cf28:	2304      	movs	r3, #4
 800cf2a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf30:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf34:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf38:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf3c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf4c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf50:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf54:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d06c <turn135outL+0x3bc>
 800cf58:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	eeb0 2a47 	vmov.f32	s4, s14
 800cf62:	eef0 1a45 	vmov.f32	s3, s10
 800cf66:	eeb0 1a65 	vmov.f32	s2, s11
 800cf6a:	eef0 0a46 	vmov.f32	s1, s12
 800cf6e:	eeb0 0a66 	vmov.f32	s0, s13
 800cf72:	f7f6 fa5b 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800cf76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d10c      	bne.n	800cf98 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cf7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf86:	eeb0 1a47 	vmov.f32	s2, s14
 800cf8a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d078 <turn135outL+0x3c8>
 800cf8e:	eeb0 0a67 	vmov.f32	s0, s15
 800cf92:	f7f7 f9e9 	bl	8004368 <mollifier_slalom_table>
 800cf96:	e013      	b.n	800cfc0 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cf98:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf9c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cfa0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cfa4:	eef0 2a66 	vmov.f32	s5, s13
 800cfa8:	eeb0 2a47 	vmov.f32	s4, s14
 800cfac:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d070 <turn135outL+0x3c0>
 800cfb0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d070 <turn135outL+0x3c0>
 800cfb4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d078 <turn135outL+0x3c8>
 800cfb8:	eeb0 0a67 	vmov.f32	s0, s15
 800cfbc:	f7f7 f882 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfc8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cfcc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cfd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cfd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cfdc:	edd7 7a01 	vldr	s15, [r7, #4]
 800cfe0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cfe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfe8:	eef0 7ae7 	vabs.f32	s15, s15
 800cfec:	ee17 0a90 	vmov	r0, s15
 800cff0:	f7f3 fad2 	bl	8000598 <__aeabi_f2d>
 800cff4:	f04f 0200 	mov.w	r2, #0
 800cff8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cffc:	f7f3 fc4e 	bl	800089c <__aeabi_ddiv>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	4614      	mov	r4, r2
 800d006:	461d      	mov	r5, r3
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7f3 fac4 	bl	8000598 <__aeabi_f2d>
 800d010:	4602      	mov	r2, r0
 800d012:	460b      	mov	r3, r1
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 fc40 	bl	800089c <__aeabi_ddiv>
 800d01c:	4602      	mov	r2, r0
 800d01e:	460b      	mov	r3, r1
 800d020:	4610      	mov	r0, r2
 800d022:	4619      	mov	r1, r3
 800d024:	f04f 0200 	mov.w	r2, #0
 800d028:	4b15      	ldr	r3, [pc, #84]	; (800d080 <turn135outL+0x3d0>)
 800d02a:	f7f3 f957 	bl	80002dc <__adddf3>
 800d02e:	4602      	mov	r2, r0
 800d030:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d032:	4610      	mov	r0, r2
 800d034:	4619      	mov	r1, r3
 800d036:	f7f3 fddf 	bl	8000bf8 <__aeabi_d2f>
 800d03a:	4603      	mov	r3, r0
 800d03c:	68f8      	ldr	r0, [r7, #12]
 800d03e:	ee02 3a10 	vmov	s4, r3
 800d042:	edd7 1a01 	vldr	s3, [r7, #4]
 800d046:	ed97 1a01 	vldr	s2, [r7, #4]
 800d04a:	eef0 0a68 	vmov.f32	s1, s17
 800d04e:	eeb0 0a48 	vmov.f32	s0, s16
 800d052:	f7f6 f9eb 	bl	800342c <straight_table2>
}
 800d056:	bf00      	nop
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	ecbd 8b02 	vpop	{d8}
 800d060:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d064:	b004      	add	sp, #16
 800d066:	4770      	bx	lr
 800d068:	2000080c 	.word	0x2000080c
 800d06c:	42340000 	.word	0x42340000
 800d070:	00000000 	.word	0x00000000
 800d074:	42c4477b 	.word	0x42c4477b
 800d078:	43070000 	.word	0x43070000
 800d07c:	42b40000 	.word	0x42b40000
 800d080:	408f4000 	.word	0x408f4000
 800d084:	00000000 	.word	0x00000000

0800d088 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d088:	b084      	sub	sp, #16
 800d08a:	b5b0      	push	{r4, r5, r7, lr}
 800d08c:	ed2d 8b02 	vpush	{d8}
 800d090:	b084      	sub	sp, #16
 800d092:	af00      	add	r7, sp, #0
 800d094:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d09c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d0a0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	f040 80af 	bne.w	800d208 <V90R+0x180>
			highspeed_mode = 1;
 800d0aa:	4bc1      	ldr	r3, [pc, #772]	; (800d3b0 <V90R+0x328>)
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d0c0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d0c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0d4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d0d8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d0dc:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d3b4 <V90R+0x32c>
 800d0e0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d0e4:	68f8      	ldr	r0, [r7, #12]
 800d0e6:	eeb0 2a47 	vmov.f32	s4, s14
 800d0ea:	eef0 1a46 	vmov.f32	s3, s12
 800d0ee:	eeb0 1a66 	vmov.f32	s2, s13
 800d0f2:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d3bc <V90R+0x334>
 800d0f6:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d3b8 <V90R+0x330>
 800d0fa:	f7f6 f997 	bl	800342c <straight_table2>
			wallmode.WallControlMode=0;
 800d0fe:	2300      	movs	r3, #0
 800d100:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d102:	2303      	movs	r3, #3
 800d104:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d106:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d10a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d10e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d112:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d116:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d11a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d11e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d122:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d126:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d12a:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d3b4 <V90R+0x32c>
 800d12e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d132:	68f8      	ldr	r0, [r7, #12]
 800d134:	eeb0 2a47 	vmov.f32	s4, s14
 800d138:	eef0 1a45 	vmov.f32	s3, s10
 800d13c:	eeb0 1a65 	vmov.f32	s2, s11
 800d140:	eef0 0a46 	vmov.f32	s1, s12
 800d144:	eeb0 0a66 	vmov.f32	s0, s13
 800d148:	f7f6 f970 	bl	800342c <straight_table2>
			if(mollifier_mode == ON){
 800d14c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d150:	2b01      	cmp	r3, #1
 800d152:	d10c      	bne.n	800d16e <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d154:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d158:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d15c:	eeb0 1a47 	vmov.f32	s2, s14
 800d160:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d3c0 <V90R+0x338>
 800d164:	eeb0 0a67 	vmov.f32	s0, s15
 800d168:	f7f7 f8fe 	bl	8004368 <mollifier_slalom_table>
 800d16c:	e015      	b.n	800d19a <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d16e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d172:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d176:	eef1 7a67 	vneg.f32	s15, s15
 800d17a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d17e:	eef0 2a66 	vmov.f32	s5, s13
 800d182:	eeb0 2a67 	vmov.f32	s4, s15
 800d186:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d3bc <V90R+0x334>
 800d18a:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d3bc <V90R+0x334>
 800d18e:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d3c0 <V90R+0x338>
 800d192:	eeb0 0a47 	vmov.f32	s0, s14
 800d196:	f7f6 ff95 	bl	80040c4 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d19e:	2300      	movs	r3, #0
 800d1a0:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f7f3 f9f7 	bl	8000598 <__aeabi_f2d>
 800d1aa:	a37f      	add	r3, pc, #508	; (adr r3, 800d3a8 <V90R+0x320>)
 800d1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b0:	f7f3 f894 	bl	80002dc <__adddf3>
 800d1b4:	4602      	mov	r2, r0
 800d1b6:	460b      	mov	r3, r1
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	f7f3 fd1c 	bl	8000bf8 <__aeabi_d2f>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d1c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1ca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1d6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d1da:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d1de:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d3b4 <V90R+0x32c>
 800d1e2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d1e6:	68f8      	ldr	r0, [r7, #12]
 800d1e8:	eeb0 2a47 	vmov.f32	s4, s14
 800d1ec:	eef0 1a46 	vmov.f32	s3, s12
 800d1f0:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d3bc <V90R+0x334>
 800d1f4:	eef0 0a66 	vmov.f32	s1, s13
 800d1f8:	ee00 3a10 	vmov	s0, r3
 800d1fc:	f7f6 f916 	bl	800342c <straight_table2>
			highspeed_mode = 0;
 800d200:	4b6b      	ldr	r3, [pc, #428]	; (800d3b0 <V90R+0x328>)
 800d202:	2200      	movs	r2, #0
 800d204:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d206:	e13e      	b.n	800d486 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d208:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	f240 808c 	bls.w	800d32a <V90R+0x2a2>
		highspeed_mode = 1;
 800d212:	4b67      	ldr	r3, [pc, #412]	; (800d3b0 <V90R+0x328>)
 800d214:	2201      	movs	r2, #1
 800d216:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d218:	2300      	movs	r3, #0
 800d21a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d21c:	2300      	movs	r3, #0
 800d21e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d220:	2303      	movs	r3, #3
 800d222:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d224:	2300      	movs	r3, #0
 800d226:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d228:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d22c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d230:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d234:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d238:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d23c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d240:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d244:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d248:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d24c:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d3b4 <V90R+0x32c>
 800d250:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	eeb0 2a47 	vmov.f32	s4, s14
 800d25a:	eef0 1a45 	vmov.f32	s3, s10
 800d25e:	eeb0 1a65 	vmov.f32	s2, s11
 800d262:	eef0 0a46 	vmov.f32	s1, s12
 800d266:	eeb0 0a66 	vmov.f32	s0, s13
 800d26a:	f7f6 f8df 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800d26e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d272:	2b01      	cmp	r3, #1
 800d274:	d10c      	bne.n	800d290 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d276:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d27a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d27e:	eeb0 1a47 	vmov.f32	s2, s14
 800d282:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d3c0 <V90R+0x338>
 800d286:	eeb0 0a67 	vmov.f32	s0, s15
 800d28a:	f7f7 f86d 	bl	8004368 <mollifier_slalom_table>
 800d28e:	e015      	b.n	800d2bc <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d290:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d294:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d298:	eef1 7a67 	vneg.f32	s15, s15
 800d29c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d2a0:	eef0 2a66 	vmov.f32	s5, s13
 800d2a4:	eeb0 2a67 	vmov.f32	s4, s15
 800d2a8:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d3bc <V90R+0x334>
 800d2ac:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d3bc <V90R+0x334>
 800d2b0:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d3c0 <V90R+0x338>
 800d2b4:	eeb0 0a47 	vmov.f32	s0, s14
 800d2b8:	f7f6 ff04 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7f3 f966 	bl	8000598 <__aeabi_f2d>
 800d2cc:	a336      	add	r3, pc, #216	; (adr r3, 800d3a8 <V90R+0x320>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	f7f3 f803 	bl	80002dc <__adddf3>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	460b      	mov	r3, r1
 800d2da:	4610      	mov	r0, r2
 800d2dc:	4619      	mov	r1, r3
 800d2de:	f7f3 fc8b 	bl	8000bf8 <__aeabi_d2f>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d2e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2ec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2f8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2fc:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d300:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d3b4 <V90R+0x32c>
 800d304:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	eeb0 2a47 	vmov.f32	s4, s14
 800d30e:	eef0 1a46 	vmov.f32	s3, s12
 800d312:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d3bc <V90R+0x334>
 800d316:	eef0 0a66 	vmov.f32	s1, s13
 800d31a:	ee00 3a10 	vmov	s0, r3
 800d31e:	f7f6 f885 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800d322:	4b23      	ldr	r3, [pc, #140]	; (800d3b0 <V90R+0x328>)
 800d324:	2200      	movs	r2, #0
 800d326:	701a      	strb	r2, [r3, #0]
}
 800d328:	e0ad      	b.n	800d486 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d32a:	2300      	movs	r3, #0
 800d32c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d32e:	2300      	movs	r3, #0
 800d330:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d332:	2303      	movs	r3, #3
 800d334:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d336:	2300      	movs	r3, #0
 800d338:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d33a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d33e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d342:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d346:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d34a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d34e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d352:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d356:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d35a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d35e:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d3b4 <V90R+0x32c>
 800d362:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	eeb0 2a47 	vmov.f32	s4, s14
 800d36c:	eef0 1a45 	vmov.f32	s3, s10
 800d370:	eeb0 1a65 	vmov.f32	s2, s11
 800d374:	eef0 0a46 	vmov.f32	s1, s12
 800d378:	eeb0 0a66 	vmov.f32	s0, s13
 800d37c:	f7f6 f856 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800d380:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d384:	2b01      	cmp	r3, #1
 800d386:	d11d      	bne.n	800d3c4 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d38c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d390:	eeb0 1a47 	vmov.f32	s2, s14
 800d394:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d3c0 <V90R+0x338>
 800d398:	eeb0 0a67 	vmov.f32	s0, s15
 800d39c:	f7f6 ffe4 	bl	8004368 <mollifier_slalom_table>
 800d3a0:	e026      	b.n	800d3f0 <V90R+0x368>
 800d3a2:	bf00      	nop
 800d3a4:	f3af 8000 	nop.w
 800d3a8:	c022ec18 	.word	0xc022ec18
 800d3ac:	405fd1de 	.word	0x405fd1de
 800d3b0:	2000080c 	.word	0x2000080c
 800d3b4:	42340000 	.word	0x42340000
 800d3b8:	42c4477b 	.word	0x42c4477b
 800d3bc:	00000000 	.word	0x00000000
 800d3c0:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d3c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3c8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d3cc:	eef1 7a67 	vneg.f32	s15, s15
 800d3d0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d3d4:	eef0 2a66 	vmov.f32	s5, s13
 800d3d8:	eeb0 2a67 	vmov.f32	s4, s15
 800d3dc:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d3bc <V90R+0x334>
 800d3e0:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d3bc <V90R+0x334>
 800d3e4:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d3c0 <V90R+0x338>
 800d3e8:	eeb0 0a47 	vmov.f32	s0, s14
 800d3ec:	f7f6 fe6a 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d3f8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d3fc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d400:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d404:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d408:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d40c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d410:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d414:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d418:	eef0 7ae7 	vabs.f32	s15, s15
 800d41c:	ee17 0a90 	vmov	r0, s15
 800d420:	f7f3 f8ba 	bl	8000598 <__aeabi_f2d>
 800d424:	f04f 0200 	mov.w	r2, #0
 800d428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d42c:	f7f3 fa36 	bl	800089c <__aeabi_ddiv>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	4614      	mov	r4, r2
 800d436:	461d      	mov	r5, r3
 800d438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43a:	4618      	mov	r0, r3
 800d43c:	f7f3 f8ac 	bl	8000598 <__aeabi_f2d>
 800d440:	4602      	mov	r2, r0
 800d442:	460b      	mov	r3, r1
 800d444:	4620      	mov	r0, r4
 800d446:	4629      	mov	r1, r5
 800d448:	f7f3 fa28 	bl	800089c <__aeabi_ddiv>
 800d44c:	4602      	mov	r2, r0
 800d44e:	460b      	mov	r3, r1
 800d450:	4610      	mov	r0, r2
 800d452:	4619      	mov	r1, r3
 800d454:	f04f 0200 	mov.w	r2, #0
 800d458:	4b0f      	ldr	r3, [pc, #60]	; (800d498 <V90R+0x410>)
 800d45a:	f7f2 ff3f 	bl	80002dc <__adddf3>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d462:	4610      	mov	r0, r2
 800d464:	4619      	mov	r1, r3
 800d466:	f7f3 fbc7 	bl	8000bf8 <__aeabi_d2f>
 800d46a:	4603      	mov	r3, r0
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	ee02 3a10 	vmov	s4, r3
 800d472:	edd7 1a01 	vldr	s3, [r7, #4]
 800d476:	ed97 1a01 	vldr	s2, [r7, #4]
 800d47a:	eef0 0a68 	vmov.f32	s1, s17
 800d47e:	eeb0 0a48 	vmov.f32	s0, s16
 800d482:	f7f5 ffd3 	bl	800342c <straight_table2>
}
 800d486:	bf00      	nop
 800d488:	3710      	adds	r7, #16
 800d48a:	46bd      	mov	sp, r7
 800d48c:	ecbd 8b02 	vpop	{d8}
 800d490:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d494:	b004      	add	sp, #16
 800d496:	4770      	bx	lr
 800d498:	408f4000 	.word	0x408f4000
 800d49c:	00000000 	.word	0x00000000

0800d4a0 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	b5b0      	push	{r4, r5, r7, lr}
 800d4a4:	ed2d 8b02 	vpush	{d8}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d4b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d4b4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d4b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	f040 80ad 	bne.w	800d61c <V90L+0x17c>
				highspeed_mode = 1;
 800d4c2:	4bbf      	ldr	r3, [pc, #764]	; (800d7c0 <V90L+0x320>)
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d4d8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d4dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4ec:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d4f0:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d4f4:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800d7c4 <V90L+0x324>
 800d4f8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d4fc:	68f8      	ldr	r0, [r7, #12]
 800d4fe:	eeb0 2a47 	vmov.f32	s4, s14
 800d502:	eef0 1a46 	vmov.f32	s3, s12
 800d506:	eeb0 1a66 	vmov.f32	s2, s13
 800d50a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800d7cc <V90L+0x32c>
 800d50e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800d7c8 <V90L+0x328>
 800d512:	f7f5 ff8b 	bl	800342c <straight_table2>
				wallmode.WallControlMode=0;
 800d516:	2300      	movs	r3, #0
 800d518:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d51a:	2304      	movs	r3, #4
 800d51c:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d51e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d522:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d526:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d52a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d52e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d532:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d536:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d53a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d53e:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d542:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800d7c4 <V90L+0x324>
 800d546:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	eeb0 2a47 	vmov.f32	s4, s14
 800d550:	eef0 1a45 	vmov.f32	s3, s10
 800d554:	eeb0 1a65 	vmov.f32	s2, s11
 800d558:	eef0 0a46 	vmov.f32	s1, s12
 800d55c:	eeb0 0a66 	vmov.f32	s0, s13
 800d560:	f7f5 ff64 	bl	800342c <straight_table2>
				if(mollifier_mode == ON){
 800d564:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d10c      	bne.n	800d586 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d56c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d570:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d574:	eeb0 1a47 	vmov.f32	s2, s14
 800d578:	eddf 0a95 	vldr	s1, [pc, #596]	; 800d7d0 <V90L+0x330>
 800d57c:	eeb0 0a67 	vmov.f32	s0, s15
 800d580:	f7f6 fef2 	bl	8004368 <mollifier_slalom_table>
 800d584:	e013      	b.n	800d5ae <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d586:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d58a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d58e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d592:	eef0 2a66 	vmov.f32	s5, s13
 800d596:	eeb0 2a47 	vmov.f32	s4, s14
 800d59a:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800d7cc <V90L+0x32c>
 800d59e:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800d7cc <V90L+0x32c>
 800d5a2:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800d7d0 <V90L+0x330>
 800d5a6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5aa:	f7f6 fd8b 	bl	80040c4 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f7f2 ffed 	bl	8000598 <__aeabi_f2d>
 800d5be:	a37e      	add	r3, pc, #504	; (adr r3, 800d7b8 <V90L+0x318>)
 800d5c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c4:	f7f2 fe8a 	bl	80002dc <__adddf3>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4610      	mov	r0, r2
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	f7f3 fb12 	bl	8000bf8 <__aeabi_d2f>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d5da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d5de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d5ee:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d5f2:	eddf 5a74 	vldr	s11, [pc, #464]	; 800d7c4 <V90L+0x324>
 800d5f6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	eeb0 2a47 	vmov.f32	s4, s14
 800d600:	eef0 1a46 	vmov.f32	s3, s12
 800d604:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800d7cc <V90L+0x32c>
 800d608:	eef0 0a66 	vmov.f32	s1, s13
 800d60c:	ee00 3a10 	vmov	s0, r3
 800d610:	f7f5 ff0c 	bl	800342c <straight_table2>
				highspeed_mode = 0;
 800d614:	4b6a      	ldr	r3, [pc, #424]	; (800d7c0 <V90L+0x320>)
 800d616:	2200      	movs	r2, #0
 800d618:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d61a:	e13a      	b.n	800d892 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d61c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d620:	2b01      	cmp	r3, #1
 800d622:	f240 808a 	bls.w	800d73a <V90L+0x29a>
		highspeed_mode = 1;
 800d626:	4b66      	ldr	r3, [pc, #408]	; (800d7c0 <V90L+0x320>)
 800d628:	2201      	movs	r2, #1
 800d62a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d62c:	2300      	movs	r3, #0
 800d62e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d630:	2300      	movs	r3, #0
 800d632:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d634:	2304      	movs	r3, #4
 800d636:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d638:	2300      	movs	r3, #0
 800d63a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d63c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d640:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d644:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d648:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d64c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d650:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d654:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d658:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d65c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d660:	eddf 4a58 	vldr	s9, [pc, #352]	; 800d7c4 <V90L+0x324>
 800d664:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	eeb0 2a47 	vmov.f32	s4, s14
 800d66e:	eef0 1a45 	vmov.f32	s3, s10
 800d672:	eeb0 1a65 	vmov.f32	s2, s11
 800d676:	eef0 0a46 	vmov.f32	s1, s12
 800d67a:	eeb0 0a66 	vmov.f32	s0, s13
 800d67e:	f7f5 fed5 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800d682:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d686:	2b01      	cmp	r3, #1
 800d688:	d10c      	bne.n	800d6a4 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d68a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d68e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d692:	eeb0 1a47 	vmov.f32	s2, s14
 800d696:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800d7d0 <V90L+0x330>
 800d69a:	eeb0 0a67 	vmov.f32	s0, s15
 800d69e:	f7f6 fe63 	bl	8004368 <mollifier_slalom_table>
 800d6a2:	e013      	b.n	800d6cc <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d6a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6ac:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d6b0:	eef0 2a66 	vmov.f32	s5, s13
 800d6b4:	eeb0 2a47 	vmov.f32	s4, s14
 800d6b8:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d7cc <V90L+0x32c>
 800d6bc:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d7cc <V90L+0x32c>
 800d6c0:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d7d0 <V90L+0x330>
 800d6c4:	eeb0 0a67 	vmov.f32	s0, s15
 800d6c8:	f7f6 fcfc 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=0;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7f2 ff5e 	bl	8000598 <__aeabi_f2d>
 800d6dc:	a336      	add	r3, pc, #216	; (adr r3, 800d7b8 <V90L+0x318>)
 800d6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6e2:	f7f2 fdfb 	bl	80002dc <__adddf3>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	f7f3 fa83 	bl	8000bf8 <__aeabi_d2f>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d6f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d700:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d704:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d708:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d70c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d710:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d7c4 <V90L+0x324>
 800d714:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	eeb0 2a47 	vmov.f32	s4, s14
 800d71e:	eef0 1a46 	vmov.f32	s3, s12
 800d722:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d7cc <V90L+0x32c>
 800d726:	eef0 0a66 	vmov.f32	s1, s13
 800d72a:	ee00 3a10 	vmov	s0, r3
 800d72e:	f7f5 fe7d 	bl	800342c <straight_table2>
		highspeed_mode = 0;
 800d732:	4b23      	ldr	r3, [pc, #140]	; (800d7c0 <V90L+0x320>)
 800d734:	2200      	movs	r2, #0
 800d736:	701a      	strb	r2, [r3, #0]
}
 800d738:	e0ab      	b.n	800d892 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d73a:	2300      	movs	r3, #0
 800d73c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d73e:	2300      	movs	r3, #0
 800d740:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d742:	2304      	movs	r3, #4
 800d744:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d746:	2300      	movs	r3, #0
 800d748:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d74a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d74e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d752:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d756:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d75a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d75e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d762:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d766:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d76a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d76e:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d7c4 <V90L+0x324>
 800d772:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d776:	68f8      	ldr	r0, [r7, #12]
 800d778:	eeb0 2a47 	vmov.f32	s4, s14
 800d77c:	eef0 1a45 	vmov.f32	s3, s10
 800d780:	eeb0 1a65 	vmov.f32	s2, s11
 800d784:	eef0 0a46 	vmov.f32	s1, s12
 800d788:	eeb0 0a66 	vmov.f32	s0, s13
 800d78c:	f7f5 fe4e 	bl	800342c <straight_table2>
		if(mollifier_mode == ON){
 800d790:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d794:	2b01      	cmp	r3, #1
 800d796:	d11d      	bne.n	800d7d4 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d798:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d79c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d7a0:	eeb0 1a47 	vmov.f32	s2, s14
 800d7a4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d7d0 <V90L+0x330>
 800d7a8:	eeb0 0a67 	vmov.f32	s0, s15
 800d7ac:	f7f6 fddc 	bl	8004368 <mollifier_slalom_table>
 800d7b0:	e024      	b.n	800d7fc <V90L+0x35c>
 800d7b2:	bf00      	nop
 800d7b4:	f3af 8000 	nop.w
 800d7b8:	c022ec18 	.word	0xc022ec18
 800d7bc:	405fd1de 	.word	0x405fd1de
 800d7c0:	2000080c 	.word	0x2000080c
 800d7c4:	42340000 	.word	0x42340000
 800d7c8:	42d4477b 	.word	0x42d4477b
 800d7cc:	00000000 	.word	0x00000000
 800d7d0:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d7d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d7dc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d7e0:	eef0 2a66 	vmov.f32	s5, s13
 800d7e4:	eeb0 2a47 	vmov.f32	s4, s14
 800d7e8:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800d7cc <V90L+0x32c>
 800d7ec:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800d7cc <V90L+0x32c>
 800d7f0:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800d7d0 <V90L+0x330>
 800d7f4:	eeb0 0a67 	vmov.f32	s0, s15
 800d7f8:	f7f6 fc64 	bl	80040c4 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d800:	2300      	movs	r3, #0
 800d802:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d804:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d808:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d80c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d810:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d814:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d818:	edd7 7a01 	vldr	s15, [r7, #4]
 800d81c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d820:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d824:	eef0 7ae7 	vabs.f32	s15, s15
 800d828:	ee17 0a90 	vmov	r0, s15
 800d82c:	f7f2 feb4 	bl	8000598 <__aeabi_f2d>
 800d830:	f04f 0200 	mov.w	r2, #0
 800d834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d838:	f7f3 f830 	bl	800089c <__aeabi_ddiv>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4614      	mov	r4, r2
 800d842:	461d      	mov	r5, r3
 800d844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d846:	4618      	mov	r0, r3
 800d848:	f7f2 fea6 	bl	8000598 <__aeabi_f2d>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4620      	mov	r0, r4
 800d852:	4629      	mov	r1, r5
 800d854:	f7f3 f822 	bl	800089c <__aeabi_ddiv>
 800d858:	4602      	mov	r2, r0
 800d85a:	460b      	mov	r3, r1
 800d85c:	4610      	mov	r0, r2
 800d85e:	4619      	mov	r1, r3
 800d860:	f04f 0200 	mov.w	r2, #0
 800d864:	4b0f      	ldr	r3, [pc, #60]	; (800d8a4 <V90L+0x404>)
 800d866:	f7f2 fd39 	bl	80002dc <__adddf3>
 800d86a:	4602      	mov	r2, r0
 800d86c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d86e:	4610      	mov	r0, r2
 800d870:	4619      	mov	r1, r3
 800d872:	f7f3 f9c1 	bl	8000bf8 <__aeabi_d2f>
 800d876:	4603      	mov	r3, r0
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	ee02 3a10 	vmov	s4, r3
 800d87e:	edd7 1a01 	vldr	s3, [r7, #4]
 800d882:	ed97 1a01 	vldr	s2, [r7, #4]
 800d886:	eef0 0a68 	vmov.f32	s1, s17
 800d88a:	eeb0 0a48 	vmov.f32	s0, s16
 800d88e:	f7f5 fdcd 	bl	800342c <straight_table2>
}
 800d892:	bf00      	nop
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	ecbd 8b02 	vpop	{d8}
 800d89c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d8a0:	b004      	add	sp, #16
 800d8a2:	4770      	bx	lr
 800d8a4:	408f4000 	.word	0x408f4000

0800d8a8 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800d8a8:	b084      	sub	sp, #16
 800d8aa:	b580      	push	{r7, lr}
 800d8ac:	b086      	sub	sp, #24
 800d8ae:	af04      	add	r7, sp, #16
 800d8b0:	f107 0c10 	add.w	ip, r7, #16
 800d8b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800d8b8:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800d8bc:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d116      	bne.n	800d8f2 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800d8c4:	2001      	movs	r0, #1
 800d8c6:	f7fa fa57 	bl	8007d78 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d8ca:	2003      	movs	r0, #3
 800d8cc:	f7fa fa5e 	bl	8007d8c <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800d8d0:	ed97 0a01 	vldr	s0, [r7, #4]
 800d8d4:	f7fa faee 	bl	8007eb4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800d8d8:	f7fa fad8 	bl	8007e8c <pl_FunMotor_start>
		HAL_Delay(600);
 800d8dc:	f44f 7016 	mov.w	r0, #600	; 0x258
 800d8e0:	f00b f826 	bl	8018930 <HAL_Delay>
		reset_gyro();
 800d8e4:	f7f4 f968 	bl	8001bb8 <reset_gyro>
		reset_speed();
 800d8e8:	f7f3 fb9c 	bl	8001024 <reset_speed>
		clear_Ierror();
 800d8ec:	f7f7 f8b0 	bl	8004a50 <clear_Ierror>
 800d8f0:	e00b      	b.n	800d90a <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800d8f2:	2001      	movs	r0, #1
 800d8f4:	f7fa fa40 	bl	8007d78 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800d8f8:	2003      	movs	r0, #3
 800d8fa:	f7fa fa47 	bl	8007d8c <pl_L_DriveMotor_mode>
		reset_gyro();
 800d8fe:	f7f4 f95b 	bl	8001bb8 <reset_gyro>
		reset_speed();
 800d902:	f7f3 fb8f 	bl	8001024 <reset_speed>
		clear_Ierror();
 800d906:	f7f7 f8a3 	bl	8004a50 <clear_Ierror>

	}
	record_mode=12;
 800d90a:	4ba8      	ldr	r3, [pc, #672]	; (800dbac <testturning+0x304>)
 800d90c:	220c      	movs	r2, #12
 800d90e:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800d910:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d914:	2b00      	cmp	r3, #0
 800d916:	d110      	bne.n	800d93a <testturning+0x92>
 800d918:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d91c:	9303      	str	r3, [sp, #12]
 800d91e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d922:	9302      	str	r3, [sp, #8]
 800d924:	2301      	movs	r3, #1
 800d926:	9301      	str	r3, [sp, #4]
 800d928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d92a:	9300      	str	r3, [sp, #0]
 800d92c:	f107 0318 	add.w	r3, r7, #24
 800d930:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d932:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800dbb0 <testturning+0x308>
 800d936:	f7fc f975 	bl	8009c24 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800d93a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d110      	bne.n	800d964 <testturning+0xbc>
 800d942:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d946:	9303      	str	r3, [sp, #12]
 800d948:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800d94c:	9302      	str	r3, [sp, #8]
 800d94e:	2301      	movs	r3, #1
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d95a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d95c:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800dbb0 <testturning+0x308>
 800d960:	f7fc fb46 	bl	8009ff0 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800d964:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d10d      	bne.n	800d988 <testturning+0xe0>
 800d96c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d970:	9302      	str	r3, [sp, #8]
 800d972:	2301      	movs	r3, #1
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d97e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d980:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800dbb0 <testturning+0x308>
 800d984:	f7fc fd16 	bl	800a3b4 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800d988:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d98c:	2b03      	cmp	r3, #3
 800d98e:	d10d      	bne.n	800d9ac <testturning+0x104>
 800d990:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d994:	9302      	str	r3, [sp, #8]
 800d996:	2301      	movs	r3, #1
 800d998:	9301      	str	r3, [sp, #4]
 800d99a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d9a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9a4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800dbb0 <testturning+0x308>
 800d9a8:	f7fc fe6e 	bl	800a688 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800d9ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9b0:	2b04      	cmp	r3, #4
 800d9b2:	d10d      	bne.n	800d9d0 <testturning+0x128>
 800d9b4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9b8:	9302      	str	r3, [sp, #8]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9c0:	9300      	str	r3, [sp, #0]
 800d9c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800d9c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9c8:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800dbb0 <testturning+0x308>
 800d9cc:	f7fc ffc0 	bl	800a950 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800d9d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9d4:	2b05      	cmp	r3, #5
 800d9d6:	d10e      	bne.n	800d9f6 <testturning+0x14e>
 800d9d8:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800d9dc:	9302      	str	r3, [sp, #8]
 800d9de:	2301      	movs	r3, #1
 800d9e0:	9301      	str	r3, [sp, #4]
 800d9e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800d9ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d9ee:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800dbb0 <testturning+0x308>
 800d9f2:	f7fd f917 	bl	800ac24 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800d9f6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800d9fa:	2b06      	cmp	r3, #6
 800d9fc:	d10e      	bne.n	800da1c <testturning+0x174>
 800d9fe:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da02:	9302      	str	r3, [sp, #8]
 800da04:	2301      	movs	r3, #1
 800da06:	9301      	str	r3, [sp, #4]
 800da08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800da12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da14:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800dbb0 <testturning+0x308>
 800da18:	f7fd fa6a 	bl	800aef0 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800da1c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da20:	2b07      	cmp	r3, #7
 800da22:	d10e      	bne.n	800da42 <testturning+0x19a>
 800da24:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da28:	9302      	str	r3, [sp, #8]
 800da2a:	2301      	movs	r3, #1
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800da32:	9300      	str	r3, [sp, #0]
 800da34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800da38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da3a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800dbb0 <testturning+0x308>
 800da3e:	f7fd fc9f 	bl	800b380 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800da42:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da46:	2b08      	cmp	r3, #8
 800da48:	d10e      	bne.n	800da68 <testturning+0x1c0>
 800da4a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da4e:	9302      	str	r3, [sp, #8]
 800da50:	2301      	movs	r3, #1
 800da52:	9301      	str	r3, [sp, #4]
 800da54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800da5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da60:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800dbb0 <testturning+0x308>
 800da64:	f7fd fecc 	bl	800b800 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800da68:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da6c:	2b09      	cmp	r3, #9
 800da6e:	d10e      	bne.n	800da8e <testturning+0x1e6>
 800da70:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	2301      	movs	r3, #1
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800da84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800da86:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800dbb0 <testturning+0x308>
 800da8a:	f7fe f901 	bl	800bc90 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800da8e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800da92:	2b0a      	cmp	r3, #10
 800da94:	d10e      	bne.n	800dab4 <testturning+0x20c>
 800da96:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800da9a:	9302      	str	r3, [sp, #8]
 800da9c:	2301      	movs	r3, #1
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800daaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800daac:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800dbb0 <testturning+0x308>
 800dab0:	f7fe fb32 	bl	800c118 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800dab4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dab8:	2b0b      	cmp	r3, #11
 800daba:	d10e      	bne.n	800dada <testturning+0x232>
 800dabc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dac0:	9302      	str	r3, [sp, #8]
 800dac2:	2301      	movs	r3, #1
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800daca:	9300      	str	r3, [sp, #0]
 800dacc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800dad0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dad2:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800dbb0 <testturning+0x308>
 800dad6:	f7fe fd11 	bl	800c4fc <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800dada:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dade:	2b0c      	cmp	r3, #12
 800dae0:	d10e      	bne.n	800db00 <testturning+0x258>
 800dae2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dae6:	9302      	str	r3, [sp, #8]
 800dae8:	2301      	movs	r3, #1
 800daea:	9301      	str	r3, [sp, #4]
 800daec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800daf0:	9300      	str	r3, [sp, #0]
 800daf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800daf8:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800dbb0 <testturning+0x308>
 800dafc:	f7fe fee6 	bl	800c8cc <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800db00:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db04:	2b0d      	cmp	r3, #13
 800db06:	d10e      	bne.n	800db26 <testturning+0x27e>
 800db08:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db0c:	9302      	str	r3, [sp, #8]
 800db0e:	2301      	movs	r3, #1
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800db16:	9300      	str	r3, [sp, #0]
 800db18:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800db1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db1e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800dbb0 <testturning+0x308>
 800db22:	f7ff f8c5 	bl	800ccb0 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800db26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db2a:	2b0e      	cmp	r3, #14
 800db2c:	d10e      	bne.n	800db4c <testturning+0x2a4>
 800db2e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db32:	9302      	str	r3, [sp, #8]
 800db34:	2301      	movs	r3, #1
 800db36:	9301      	str	r3, [sp, #4]
 800db38:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800db42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db44:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800dbb0 <testturning+0x308>
 800db48:	f7ff fa9e 	bl	800d088 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800db4c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800db50:	2b0f      	cmp	r3, #15
 800db52:	d10e      	bne.n	800db72 <testturning+0x2ca>
 800db54:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800db58:	9302      	str	r3, [sp, #8]
 800db5a:	2301      	movs	r3, #1
 800db5c:	9301      	str	r3, [sp, #4]
 800db5e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800db68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800db6a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800dbb0 <testturning+0x308>
 800db6e:	f7ff fc97 	bl	800d4a0 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800db72:	4b0e      	ldr	r3, [pc, #56]	; (800dbac <testturning+0x304>)
 800db74:	2200      	movs	r2, #0
 800db76:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800db78:	2003      	movs	r0, #3
 800db7a:	f7fa f92f 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800db7e:	2003      	movs	r0, #3
 800db80:	f7fa f904 	bl	8007d8c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800db84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db88:	f7fa fc26 	bl	80083d8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800db8c:	f7fa f988 	bl	8007ea0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800db90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db94:	f7fa fc20 	bl	80083d8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800db98:	2000      	movs	r0, #0
 800db9a:	f7fa f8ed 	bl	8007d78 <pl_DriveMotor_standby>

}
 800db9e:	bf00      	nop
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dba8:	b004      	add	sp, #16
 800dbaa:	4770      	bx	lr
 800dbac:	2000edb4 	.word	0x2000edb4
 800dbb0:	c2c80000 	.word	0xc2c80000

0800dbb4 <get_wallData_sensor>:





void get_wallData_sensor(_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 800dbb4:	b480      	push	{r7}
 800dbb6:	b085      	sub	sp, #20
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]

	*front_wall = (g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dbc0:	4b12      	ldr	r3, [pc, #72]	; (800dc0c <get_wallData_sensor+0x58>)
 800dbc2:	689b      	ldr	r3, [r3, #8]
 800dbc4:	2b86      	cmp	r3, #134	; 0x86
 800dbc6:	bfcc      	ite	gt
 800dbc8:	2301      	movgt	r3, #1
 800dbca:	2300      	movle	r3, #0
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	701a      	strb	r2, [r3, #0]
	*right_wall = (g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dbd2:	4b0e      	ldr	r3, [pc, #56]	; (800dc0c <get_wallData_sensor+0x58>)
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dbda:	4293      	cmp	r3, r2
 800dbdc:	bfcc      	ite	gt
 800dbde:	2301      	movgt	r3, #1
 800dbe0:	2300      	movle	r3, #0
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	701a      	strb	r2, [r3, #0]
	*left_wall  = (g_sensor_mean[SENSOR_LEFT]  >= L_PRESENCE);
 800dbe8:	4b08      	ldr	r3, [pc, #32]	; (800dc0c <get_wallData_sensor+0x58>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	bfcc      	ite	gt
 800dbf4:	2301      	movgt	r3, #1
 800dbf6:	2300      	movle	r3, #0
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	701a      	strb	r2, [r3, #0]

}
 800dbfe:	bf00      	nop
 800dc00:	3714      	adds	r7, #20
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
 800dc0a:	bf00      	nop
 800dc0c:	20000474 	.word	0x20000474

0800dc10 <update_coordinate>:


void update_coordinate(int *x,int *y,int direction){
 800dc10:	b480      	push	{r7}
 800dc12:	b085      	sub	sp, #20
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	60f8      	str	r0, [r7, #12]
 800dc18:	60b9      	str	r1, [r7, #8]
 800dc1a:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	3b01      	subs	r3, #1
 800dc20:	2b03      	cmp	r3, #3
 800dc22:	d823      	bhi.n	800dc6c <update_coordinate+0x5c>
 800dc24:	a201      	add	r2, pc, #4	; (adr r2, 800dc2c <update_coordinate+0x1c>)
 800dc26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc2a:	bf00      	nop
 800dc2c:	0800dc3d 	.word	0x0800dc3d
 800dc30:	0800dc49 	.word	0x0800dc49
 800dc34:	0800dc55 	.word	0x0800dc55
 800dc38:	0800dc61 	.word	0x0800dc61
	case 1://北
		*y += 1;
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	1c5a      	adds	r2, r3, #1
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	601a      	str	r2, [r3, #0]
		break;
 800dc46:	e011      	b.n	800dc6c <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	1c5a      	adds	r2, r3, #1
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	601a      	str	r2, [r3, #0]
		break;
 800dc52:	e00b      	b.n	800dc6c <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	1e5a      	subs	r2, r3, #1
 800dc5a:	68bb      	ldr	r3, [r7, #8]
 800dc5c:	601a      	str	r2, [r3, #0]
		break;
 800dc5e:	e005      	b.n	800dc6c <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	1e5a      	subs	r2, r3, #1
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	601a      	str	r2, [r3, #0]
		break;
 800dc6a:	bf00      	nop
	}



}
 800dc6c:	bf00      	nop
 800dc6e:	3714      	adds	r7, #20
 800dc70:	46bd      	mov	sp, r7
 800dc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc76:	4770      	bx	lr

0800dc78 <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800dc78:	b084      	sub	sp, #16
 800dc7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dc7c:	b093      	sub	sp, #76	; 0x4c
 800dc7e:	af04      	add	r7, sp, #16
 800dc80:	ed87 0a03 	vstr	s0, [r7, #12]
 800dc84:	edc7 0a02 	vstr	s1, [r7, #8]
 800dc88:	ed87 1a01 	vstr	s2, [r7, #4]
 800dc8c:	edc7 1a00 	vstr	s3, [r7]
 800dc90:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800dc94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	unsigned short front_count, right_count, back_count, left_count;
	maze_mode = 1; //***************************************************************************************
 800dc98:	4b6f      	ldr	r3, [pc, #444]	; (800de58 <AdatiWayReturn+0x1e0>)
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_standby(ON);
 800dc9e:	2001      	movs	r0, #1
 800dca0:	f7fa f86a 	bl	8007d78 <pl_DriveMotor_standby>
	wait_ms_NoReset(500);
 800dca4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dca8:	f7fa fb96 	bl	80083d8 <wait_ms_NoReset>
	//初期化
	//構造体にする
	int x=0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	62bb      	str	r3, [r7, #40]	; 0x28
	int y=0;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	627b      	str	r3, [r7, #36]	; 0x24
	int direction=1;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	623b      	str	r3, [r7, #32]
	_Bool front_wall,right_wall,left_wall;
	char timer_end_mode=0;
 800dcb8:	2300      	movs	r3, #0
 800dcba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	int kitiku_distance;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	75bb      	strb	r3, [r7, #22]
	//初期位置のセンサー確認
	get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800dcce:	f107 021d 	add.w	r2, r7, #29
 800dcd2:	f107 011e 	add.w	r1, r7, #30
 800dcd6:	f107 031f 	add.w	r3, r7, #31
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7ff ff6a 	bl	800dbb4 <get_wallData_sensor>
	//初期位置での壁更新
	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dce2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dce4:	6a3c      	ldr	r4, [r7, #32]
 800dce6:	7ffd      	ldrb	r5, [r7, #31]
 800dce8:	7fbb      	ldrb	r3, [r7, #30]
 800dcea:	7f7a      	ldrb	r2, [r7, #29]
 800dcec:	9201      	str	r2, [sp, #4]
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	462b      	mov	r3, r5
 800dcf2:	4622      	mov	r2, r4
 800dcf4:	f002 fbf0 	bl	80104d8 <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800dcf8:	f005 ffca 	bl	8013c90 <create_StepCountMap_queue>
	straight_table2(MAZE_SECTION/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800dcfc:	6978      	ldr	r0, [r7, #20]
 800dcfe:	ed97 2a01 	vldr	s4, [r7, #4]
 800dd02:	edd7 1a03 	vldr	s3, [r7, #12]
 800dd06:	ed97 1a03 	vldr	s2, [r7, #12]
 800dd0a:	eddf 0a57 	vldr	s1, [pc, #348]	; 800de68 <AdatiWayReturn+0x1f0>
 800dd0e:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800de5c <AdatiWayReturn+0x1e4>
 800dd12:	f7f5 fb8b 	bl	800342c <straight_table2>

	while (1) {

		update_coordinate(&x,&y,direction);
 800dd16:	6a3a      	ldr	r2, [r7, #32]
 800dd18:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800dd1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7ff ff75 	bl	800dc10 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800dd26:	f107 021d 	add.w	r2, r7, #29
 800dd2a:	f107 011e 	add.w	r1, r7, #30
 800dd2e:	f107 031f 	add.w	r3, r7, #31
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7ff ff3e 	bl	800dbb4 <get_wallData_sensor>

		mode.WallControlMode=1;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800dd40:	2300      	movs	r3, #0
 800dd42:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800dd44:	6978      	ldr	r0, [r7, #20]
 800dd46:	ed97 2a01 	vldr	s4, [r7, #4]
 800dd4a:	edd7 1a03 	vldr	s3, [r7, #12]
 800dd4e:	ed97 1a03 	vldr	s2, [r7, #12]
 800dd52:	edd7 0a03 	vldr	s1, [r7, #12]
 800dd56:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800dd5a:	f7f5 fb67 	bl	800342c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dd5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dd60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dd62:	6a3c      	ldr	r4, [r7, #32]
 800dd64:	7ffd      	ldrb	r5, [r7, #31]
 800dd66:	7fbb      	ldrb	r3, [r7, #30]
 800dd68:	7f7a      	ldrb	r2, [r7, #29]
 800dd6a:	9201      	str	r2, [sp, #4]
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	462b      	mov	r3, r5
 800dd70:	4622      	mov	r2, r4
 800dd72:	f002 fbb1 	bl	80104d8 <update_wall>

		create_StepCountMap_queue();
 800dd76:	f005 ff8b 	bl	8013c90 <create_StepCountMap_queue>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800dd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd7e:	6a39      	ldr	r1, [r7, #32]
 800dd80:	f107 062e 	add.w	r6, r7, #46	; 0x2e
 800dd84:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800dd88:	f107 0432 	add.w	r4, r7, #50	; 0x32
 800dd8c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800dd90:	9102      	str	r1, [sp, #8]
 800dd92:	9201      	str	r2, [sp, #4]
 800dd94:	9300      	str	r3, [sp, #0]
 800dd96:	4633      	mov	r3, r6
 800dd98:	462a      	mov	r2, r5
 800dd9a:	4621      	mov	r1, r4
 800dd9c:	f003 f916 	bl	8010fcc <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800dda0:	7ffb      	ldrb	r3, [r7, #31]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d001      	beq.n	800ddaa <AdatiWayReturn+0x132>
 800dda6:	23ff      	movs	r3, #255	; 0xff
 800dda8:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800ddaa:	7fbb      	ldrb	r3, [r7, #30]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d001      	beq.n	800ddb4 <AdatiWayReturn+0x13c>
 800ddb0:	23ff      	movs	r3, #255	; 0xff
 800ddb2:	867b      	strh	r3, [r7, #50]	; 0x32
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800ddb4:	7f7b      	ldrb	r3, [r7, #29]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d001      	beq.n	800ddbe <AdatiWayReturn+0x146>
 800ddba:	23ff      	movs	r3, #255	; 0xff
 800ddbc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800ddbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800ddc2:	6a3d      	ldr	r5, [r7, #32]
 800ddc4:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
 800ddc6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ddc8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ddca:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800ddcc:	9102      	str	r1, [sp, #8]
 800ddce:	9201      	str	r2, [sp, #4]
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	4633      	mov	r3, r6
 800ddd4:	462a      	mov	r2, r5
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	f002 f938 	bl	801004c <decision_kitiku>
		mode.WallCutMode=1;
 800dddc:	2301      	movs	r3, #1
 800ddde:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800dde0:	7fbb      	ldrb	r3, [r7, #30]
 800dde2:	7f7a      	ldrb	r2, [r7, #29]
 800dde4:	4619      	mov	r1, r3
 800dde6:	6978      	ldr	r0, [r7, #20]
 800dde8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800ddec:	f7f5 ffdc 	bl	8003da8 <End_straight>


		//異常終了
		if (x == 0 && y == 0) {
 800ddf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10b      	bne.n	800de0e <AdatiWayReturn+0x196>
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d108      	bne.n	800de0e <AdatiWayReturn+0x196>
			error_mode=1;
 800ddfc:	4b18      	ldr	r3, [pc, #96]	; (800de60 <AdatiWayReturn+0x1e8>)
 800ddfe:	2201      	movs	r2, #1
 800de00:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800de02:	f7fa f81f 	bl	8007e44 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800de06:	2000      	movs	r0, #0
 800de08:	f7f9 ffb6 	bl	8007d78 <pl_DriveMotor_standby>
			break;
 800de0c:	e223      	b.n	800e256 <AdatiWayReturn+0x5de>
		}
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800de0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800de10:	2bff      	cmp	r3, #255	; 0xff
 800de12:	d111      	bne.n	800de38 <AdatiWayReturn+0x1c0>
 800de14:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800de16:	2bff      	cmp	r3, #255	; 0xff
 800de18:	d10e      	bne.n	800de38 <AdatiWayReturn+0x1c0>
 800de1a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800de1c:	2bff      	cmp	r3, #255	; 0xff
 800de1e:	d10b      	bne.n	800de38 <AdatiWayReturn+0x1c0>
 800de20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800de22:	2bff      	cmp	r3, #255	; 0xff
 800de24:	d108      	bne.n	800de38 <AdatiWayReturn+0x1c0>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 800de26:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <AdatiWayReturn+0x1e8>)
 800de28:	2201      	movs	r2, #1
 800de2a:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800de2c:	f7fa f80a 	bl	8007e44 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800de30:	2000      	movs	r0, #0
 800de32:	f7f9 ffa1 	bl	8007d78 <pl_DriveMotor_standby>
			break;
 800de36:	e20e      	b.n	800e256 <AdatiWayReturn+0x5de>
		}

		//正常終了
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	2b05      	cmp	r3, #5
 800de3c:	d003      	beq.n	800de46 <AdatiWayReturn+0x1ce>
 800de3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de40:	2b06      	cmp	r3, #6
 800de42:	f040 80d0 	bne.w	800dfe6 <AdatiWayReturn+0x36e>
 800de46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de48:	2b04      	cmp	r3, #4
 800de4a:	d07e      	beq.n	800df4a <AdatiWayReturn+0x2d2>
 800de4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4e:	2b05      	cmp	r3, #5
 800de50:	f040 80c9 	bne.w	800dfe6 <AdatiWayReturn+0x36e>

			while (front_wall==0) {
 800de54:	e079      	b.n	800df4a <AdatiWayReturn+0x2d2>
 800de56:	bf00      	nop
 800de58:	2000082e 	.word	0x2000082e
 800de5c:	42830000 	.word	0x42830000
 800de60:	2000080b 	.word	0x2000080b
 800de64:	42a40000 	.word	0x42a40000
 800de68:	00000000 	.word	0x00000000
 800de6c:	42140000 	.word	0x42140000
				//直進
				mode.WallControlMode=1;
 800de70:	2301      	movs	r3, #1
 800de72:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800de74:	2300      	movs	r3, #0
 800de76:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800de78:	2300      	movs	r3, #0
 800de7a:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_SECTION-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800de7c:	6978      	ldr	r0, [r7, #20]
 800de7e:	ed97 2a01 	vldr	s4, [r7, #4]
 800de82:	edd7 1a03 	vldr	s3, [r7, #12]
 800de86:	ed97 1a03 	vldr	s2, [r7, #12]
 800de8a:	edd7 0a03 	vldr	s1, [r7, #12]
 800de8e:	ed1f 0a0b 	vldr	s0, [pc, #-44]	; 800de64 <AdatiWayReturn+0x1ec>
 800de92:	f7f5 facb 	bl	800342c <straight_table2>
				update_coordinate(&x,&y,direction);
 800de96:	6a3a      	ldr	r2, [r7, #32]
 800de98:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800de9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff feb5 	bl	800dc10 <update_coordinate>
				get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800dea6:	f107 021d 	add.w	r2, r7, #29
 800deaa:	f107 011e 	add.w	r1, r7, #30
 800deae:	f107 031f 	add.w	r3, r7, #31
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7ff fe7e 	bl	800dbb4 <get_wallData_sensor>
				mode.calMazeMode=1;
 800deb8:	2301      	movs	r3, #1
 800deba:	75bb      	strb	r3, [r7, #22]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800debc:	6978      	ldr	r0, [r7, #20]
 800debe:	ed97 2a01 	vldr	s4, [r7, #4]
 800dec2:	edd7 1a03 	vldr	s3, [r7, #12]
 800dec6:	ed97 1a03 	vldr	s2, [r7, #12]
 800deca:	edd7 0a03 	vldr	s1, [r7, #12]
 800dece:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800ded2:	f7f5 faab 	bl	800342c <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800ded6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ded8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800deda:	6a3c      	ldr	r4, [r7, #32]
 800dedc:	7ffd      	ldrb	r5, [r7, #31]
 800dede:	7fbb      	ldrb	r3, [r7, #30]
 800dee0:	7f7a      	ldrb	r2, [r7, #29]
 800dee2:	9201      	str	r2, [sp, #4]
 800dee4:	9300      	str	r3, [sp, #0]
 800dee6:	462b      	mov	r3, r5
 800dee8:	4622      	mov	r2, r4
 800deea:	f002 faf5 	bl	80104d8 <update_wall>
				create_StepCountMap_queue();
 800deee:	f005 fecf 	bl	8013c90 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800def6:	6a39      	ldr	r1, [r7, #32]
 800def8:	f107 062e 	add.w	r6, r7, #46	; 0x2e
 800defc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800df00:	f107 0432 	add.w	r4, r7, #50	; 0x32
 800df04:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800df08:	9102      	str	r1, [sp, #8]
 800df0a:	9201      	str	r2, [sp, #4]
 800df0c:	9300      	str	r3, [sp, #0]
 800df0e:	4633      	mov	r3, r6
 800df10:	462a      	mov	r2, r5
 800df12:	4621      	mov	r1, r4
 800df14:	f003 f85a 	bl	8010fcc <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800df18:	7ffb      	ldrb	r3, [r7, #31]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d001      	beq.n	800df22 <AdatiWayReturn+0x2aa>
 800df1e:	23ff      	movs	r3, #255	; 0xff
 800df20:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800df22:	7fbb      	ldrb	r3, [r7, #30]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <AdatiWayReturn+0x2b4>
 800df28:	23ff      	movs	r3, #255	; 0xff
 800df2a:	867b      	strh	r3, [r7, #50]	; 0x32
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800df2c:	7f7b      	ldrb	r3, [r7, #29]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <AdatiWayReturn+0x2be>
 800df32:	23ff      	movs	r3, #255	; 0xff
 800df34:	85fb      	strh	r3, [r7, #46]	; 0x2e
				mode.WallCutMode=1;
 800df36:	2301      	movs	r3, #1
 800df38:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800df3a:	7fbb      	ldrb	r3, [r7, #30]
 800df3c:	7f7a      	ldrb	r2, [r7, #29]
 800df3e:	4619      	mov	r1, r3
 800df40:	6978      	ldr	r0, [r7, #20]
 800df42:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800df46:	f7f5 ff2f 	bl	8003da8 <End_straight>
			while (front_wall==0) {
 800df4a:	7ffb      	ldrb	r3, [r7, #31]
 800df4c:	f083 0301 	eor.w	r3, r3, #1
 800df50:	b2db      	uxtb	r3, r3
 800df52:	2b00      	cmp	r3, #0
 800df54:	d18c      	bne.n	800de70 <AdatiWayReturn+0x1f8>


			}
			mode.WallControlMode=0;
 800df56:	2300      	movs	r3, #0
 800df58:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800df5e:	2300      	movs	r3, #0
 800df60:	75fb      	strb	r3, [r7, #23]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800df62:	6978      	ldr	r0, [r7, #20]
 800df64:	ed97 2a01 	vldr	s4, [r7, #4]
 800df68:	edd7 1a03 	vldr	s3, [r7, #12]
 800df6c:	ed1f 1a42 	vldr	s2, [pc, #-264]	; 800de68 <AdatiWayReturn+0x1f0>
 800df70:	edd7 0a03 	vldr	s1, [r7, #12]
 800df74:	ed1f 0a43 	vldr	s0, [pc, #-268]	; 800de6c <AdatiWayReturn+0x1f4>
 800df78:	f7f5 fa58 	bl	800342c <straight_table2>
			no_safty = 1;
 800df7c:	4ba6      	ldr	r3, [pc, #664]	; (800e218 <AdatiWayReturn+0x5a0>)
 800df7e:	2201      	movs	r2, #1
 800df80:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800df82:	ed97 2a00 	vldr	s4, [r7]
 800df86:	edd7 1a02 	vldr	s3, [r7, #8]
 800df8a:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 800e21c <AdatiWayReturn+0x5a4>
 800df8e:	eddf 0aa3 	vldr	s1, [pc, #652]	; 800e21c <AdatiWayReturn+0x5a4>
 800df92:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 800e220 <AdatiWayReturn+0x5a8>
 800df96:	f7f5 ff73 	bl	8003e80 <turning_table2>
			straight_table2(-BACK_TO_CENTER-5, 0,0,-150,1000, mode);
 800df9a:	6978      	ldr	r0, [r7, #20]
 800df9c:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 800e224 <AdatiWayReturn+0x5ac>
 800dfa0:	eddf 1aa1 	vldr	s3, [pc, #644]	; 800e228 <AdatiWayReturn+0x5b0>
 800dfa4:	ed9f 1a9d 	vldr	s2, [pc, #628]	; 800e21c <AdatiWayReturn+0x5a4>
 800dfa8:	eddf 0a9c 	vldr	s1, [pc, #624]	; 800e21c <AdatiWayReturn+0x5a4>
 800dfac:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800e22c <AdatiWayReturn+0x5b4>
 800dfb0:	f7f5 fa3c 	bl	800342c <straight_table2>
			no_safty = 0;
 800dfb4:	4b98      	ldr	r3, [pc, #608]	; (800e218 <AdatiWayReturn+0x5a0>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800dfba:	f7f6 fd49 	bl	8004a50 <clear_Ierror>
			maze_mode = 0;
 800dfbe:	4b9c      	ldr	r3, [pc, #624]	; (800e230 <AdatiWayReturn+0x5b8>)
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800dfc4:	6a3b      	ldr	r3, [r7, #32]
 800dfc6:	3302      	adds	r3, #2
 800dfc8:	623b      	str	r3, [r7, #32]

			if (direction >= 5) {
 800dfca:	6a3b      	ldr	r3, [r7, #32]
 800dfcc:	2b04      	cmp	r3, #4
 800dfce:	dd02      	ble.n	800dfd6 <AdatiWayReturn+0x35e>
				direction = direction-4;
 800dfd0:	6a3b      	ldr	r3, [r7, #32]
 800dfd2:	3b04      	subs	r3, #4
 800dfd4:	623b      	str	r3, [r7, #32]
			}
			if (direction <= 0) {
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f300 811b 	bgt.w	800e214 <AdatiWayReturn+0x59c>
				direction = direction+4;
 800dfde:	6a3b      	ldr	r3, [r7, #32]
 800dfe0:	3304      	adds	r3, #4
 800dfe2:	623b      	str	r3, [r7, #32]
			}

			break;
 800dfe4:	e116      	b.n	800e214 <AdatiWayReturn+0x59c>
		}

		if(know_mode==0){kitikukan = 0;}
 800dfe6:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d102      	bne.n	800dff4 <AdatiWayReturn+0x37c>
 800dfee:	4b91      	ldr	r3, [pc, #580]	; (800e234 <AdatiWayReturn+0x5bc>)
 800dff0:	2200      	movs	r2, #0
 800dff2:	601a      	str	r2, [r3, #0]
		if (kitikukan == OFF) {
 800dff4:	4b8f      	ldr	r3, [pc, #572]	; (800e234 <AdatiWayReturn+0x5bc>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	f040 80aa 	bne.w	800e152 <AdatiWayReturn+0x4da>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800dffe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e000:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e002:	429a      	cmp	r2, r3
 800e004:	d81a      	bhi.n	800e03c <AdatiWayReturn+0x3c4>
 800e006:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e008:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d816      	bhi.n	800e03c <AdatiWayReturn+0x3c4>
 800e00e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e010:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e012:	429a      	cmp	r2, r3
 800e014:	d812      	bhi.n	800e03c <AdatiWayReturn+0x3c4>
				// 直進
				mode.WallControlMode=1;
 800e016:	2301      	movs	r3, #1
 800e018:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e01a:	2300      	movs	r3, #0
 800e01c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e01e:	2300      	movs	r3, #0
 800e020:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e022:	6978      	ldr	r0, [r7, #20]
 800e024:	ed97 2a01 	vldr	s4, [r7, #4]
 800e028:	edd7 1a03 	vldr	s3, [r7, #12]
 800e02c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e030:	edd7 0a03 	vldr	s1, [r7, #12]
 800e034:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800e238 <AdatiWayReturn+0x5c0>
 800e038:	f7f5 f9f8 	bl	800342c <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e03c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e03e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e040:	429a      	cmp	r2, r3
 800e042:	d219      	bcs.n	800e078 <AdatiWayReturn+0x400>
 800e044:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e046:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e048:	429a      	cmp	r2, r3
 800e04a:	d815      	bhi.n	800e078 <AdatiWayReturn+0x400>
 800e04c:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e04e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e050:	429a      	cmp	r2, r3
 800e052:	d811      	bhi.n	800e078 <AdatiWayReturn+0x400>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e054:	2300      	movs	r3, #0
 800e056:	9303      	str	r3, [sp, #12]
 800e058:	2300      	movs	r3, #0
 800e05a:	9302      	str	r3, [sp, #8]
 800e05c:	2300      	movs	r3, #0
 800e05e:	9301      	str	r3, [sp, #4]
 800e060:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e062:	9300      	str	r3, [sp, #0]
 800e064:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800e068:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e06a:	ed97 0a03 	vldr	s0, [r7, #12]
 800e06e:	f7fb fdd9 	bl	8009c24 <slalomR>
				direction++;
 800e072:	6a3b      	ldr	r3, [r7, #32]
 800e074:	3301      	adds	r3, #1
 800e076:	623b      	str	r3, [r7, #32]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e078:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e07a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d219      	bcs.n	800e0b4 <AdatiWayReturn+0x43c>
 800e080:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e082:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e084:	429a      	cmp	r2, r3
 800e086:	d215      	bcs.n	800e0b4 <AdatiWayReturn+0x43c>
 800e088:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e08a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d811      	bhi.n	800e0b4 <AdatiWayReturn+0x43c>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e090:	2300      	movs	r3, #0
 800e092:	9303      	str	r3, [sp, #12]
 800e094:	2300      	movs	r3, #0
 800e096:	9302      	str	r3, [sp, #8]
 800e098:	2300      	movs	r3, #0
 800e09a:	9301      	str	r3, [sp, #4]
 800e09c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e09e:	9300      	str	r3, [sp, #0]
 800e0a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e0a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e0a6:	ed97 0a03 	vldr	s0, [r7, #12]
 800e0aa:	f7fb ffa1 	bl	8009ff0 <slalomL>
				direction--;
 800e0ae:	6a3b      	ldr	r3, [r7, #32]
 800e0b0:	3b01      	subs	r3, #1
 800e0b2:	623b      	str	r3, [r7, #32]
			}
			if(back_count < front_count && back_count < right_count
 800e0b4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e0b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	f080 8087 	bcs.w	800e1cc <AdatiWayReturn+0x554>
 800e0be:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e0c0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	f080 8082 	bcs.w	800e1cc <AdatiWayReturn+0x554>
					&& back_count < left_count){
 800e0c8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e0ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d27d      	bcs.n	800e1cc <AdatiWayReturn+0x554>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e0dc:	6978      	ldr	r0, [r7, #20]
 800e0de:	ed97 2a01 	vldr	s4, [r7, #4]
 800e0e2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e0e6:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 800e21c <AdatiWayReturn+0x5a4>
 800e0ea:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0ee:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800e23c <AdatiWayReturn+0x5c4>
 800e0f2:	f7f5 f99b 	bl	800342c <straight_table2>
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e0f6:	7ffb      	ldrb	r3, [r7, #31]
 800e0f8:	7f79      	ldrb	r1, [r7, #29]
 800e0fa:	7fba      	ldrb	r2, [r7, #30]
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	edd7 0a00 	vldr	s1, [r7]
 800e102:	ed97 0a02 	vldr	s0, [r7, #8]
 800e106:	f7fb fcbb 	bl	8009a80 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				mode.WallControlMode=0;
 800e10a:	2300      	movs	r3, #0
 800e10c:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800e10e:	6978      	ldr	r0, [r7, #20]
 800e110:	ed9f 2a44 	vldr	s4, [pc, #272]	; 800e224 <AdatiWayReturn+0x5ac>
 800e114:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e228 <AdatiWayReturn+0x5b0>
 800e118:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800e21c <AdatiWayReturn+0x5a4>
 800e11c:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800e21c <AdatiWayReturn+0x5a4>
 800e120:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800e124:	f7f5 f982 	bl	800342c <straight_table2>
				clear_Ierror();
 800e128:	f7f6 fc92 	bl	8004a50 <clear_Ierror>
				mode.WallControlMode=1;
 800e12c:	2301      	movs	r3, #1
 800e12e:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e130:	6978      	ldr	r0, [r7, #20]
 800e132:	ed97 2a01 	vldr	s4, [r7, #4]
 800e136:	edd7 1a03 	vldr	s3, [r7, #12]
 800e13a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e13e:	eddf 0a37 	vldr	s1, [pc, #220]	; 800e21c <AdatiWayReturn+0x5a4>
 800e142:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800e240 <AdatiWayReturn+0x5c8>
 800e146:	f7f5 f971 	bl	800342c <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	3302      	adds	r3, #2
 800e14e:	623b      	str	r3, [r7, #32]
 800e150:	e03c      	b.n	800e1cc <AdatiWayReturn+0x554>
			}

		} else {
			mode.WallControlMode=1;
 800e152:	2301      	movs	r3, #1
 800e154:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=1;
 800e156:	2301      	movs	r3, #1
 800e158:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e15a:	2300      	movs	r3, #0
 800e15c:	75fb      	strb	r3, [r7, #23]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e15e:	6978      	ldr	r0, [r7, #20]
 800e160:	ed97 2a01 	vldr	s4, [r7, #4]
 800e164:	edd7 1a03 	vldr	s3, [r7, #12]
 800e168:	ed97 1a03 	vldr	s2, [r7, #12]
 800e16c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e170:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e23c <AdatiWayReturn+0x5c4>
 800e174:	f7f5 f95a 	bl	800342c <straight_table2>
			compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800e178:	f107 0318 	add.w	r3, r7, #24
 800e17c:	f107 0220 	add.w	r2, r7, #32
 800e180:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e184:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e188:	f001 ffd2 	bl	8010130 <compress_kitiku>
			End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800e18c:	2201      	movs	r2, #1
 800e18e:	2101      	movs	r1, #1
 800e190:	6978      	ldr	r0, [r7, #20]
 800e192:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 800e23c <AdatiWayReturn+0x5c4>
 800e196:	f7f5 fe07 	bl	8003da8 <End_straight>
			mode.calMazeMode=0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	75bb      	strb	r3, [r7, #22]
			straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e19e:	69ba      	ldr	r2, [r7, #24]
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	005b      	lsls	r3, r3, #1
 800e1a4:	4413      	add	r3, r2
 800e1a6:	011a      	lsls	r2, r3, #4
 800e1a8:	1ad3      	subs	r3, r2, r3
 800e1aa:	ee07 3a90 	vmov	s15, r3
 800e1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e1b2:	6978      	ldr	r0, [r7, #20]
 800e1b4:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1b8:	eddf 1a22 	vldr	s3, [pc, #136]	; 800e244 <AdatiWayReturn+0x5cc>
 800e1bc:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1c0:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1c4:	eeb0 0a67 	vmov.f32	s0, s15
 800e1c8:	f7f5 f930 	bl	800342c <straight_table2>
		}

		if (direction >= 5) {
 800e1cc:	6a3b      	ldr	r3, [r7, #32]
 800e1ce:	2b04      	cmp	r3, #4
 800e1d0:	dd02      	ble.n	800e1d8 <AdatiWayReturn+0x560>
			direction = direction-4;
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	3b04      	subs	r3, #4
 800e1d6:	623b      	str	r3, [r7, #32]
		}
		if (direction <= 0) {
 800e1d8:	6a3b      	ldr	r3, [r7, #32]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	dc02      	bgt.n	800e1e4 <AdatiWayReturn+0x56c>
			direction = direction+4;
 800e1de:	6a3b      	ldr	r3, [r7, #32]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	623b      	str	r3, [r7, #32]
		}

		if(error_mode==1){break;}
 800e1e4:	4b18      	ldr	r3, [pc, #96]	; (800e248 <AdatiWayReturn+0x5d0>)
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d033      	beq.n	800e254 <AdatiWayReturn+0x5dc>
		if (g_timCount_sec>240){
 800e1ec:	4b17      	ldr	r3, [pc, #92]	; (800e24c <AdatiWayReturn+0x5d4>)
 800e1ee:	edd3 7a00 	vldr	s15, [r3]
 800e1f2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800e250 <AdatiWayReturn+0x5d8>
 800e1f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1fe:	dd08      	ble.n	800e212 <AdatiWayReturn+0x59a>
			// 秒数エンド
			timer_end_mode=1;
 800e200:	2301      	movs	r3, #1
 800e202:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			pl_DriveMotor_stop();
 800e206:	f7f9 fe1d 	bl	8007e44 <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800e20a:	2000      	movs	r0, #0
 800e20c:	f7f9 fdb4 	bl	8007d78 <pl_DriveMotor_standby>
			break;
 800e210:	e021      	b.n	800e256 <AdatiWayReturn+0x5de>
		update_coordinate(&x,&y,direction);
 800e212:	e580      	b.n	800dd16 <AdatiWayReturn+0x9e>
			break;
 800e214:	bf00      	nop
 800e216:	e01e      	b.n	800e256 <AdatiWayReturn+0x5de>
 800e218:	2000080a 	.word	0x2000080a
 800e21c:	00000000 	.word	0x00000000
 800e220:	43340000 	.word	0x43340000
 800e224:	447a0000 	.word	0x447a0000
 800e228:	c3160000 	.word	0xc3160000
 800e22c:	c1cc0000 	.word	0xc1cc0000
 800e230:	2000082e 	.word	0x2000082e
 800e234:	20000830 	.word	0x20000830
 800e238:	42a40000 	.word	0x42a40000
 800e23c:	42140000 	.word	0x42140000
 800e240:	42830000 	.word	0x42830000
 800e244:	44610000 	.word	0x44610000
 800e248:	2000080b 	.word	0x2000080b
 800e24c:	20000730 	.word	0x20000730
 800e250:	43700000 	.word	0x43700000
		if(error_mode==1){break;}
 800e254:	bf00      	nop
		}

	}

	if(error_mode==0){
 800e256:	4b8e      	ldr	r3, [pc, #568]	; (800e490 <AdatiWayReturn+0x818>)
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d101      	bne.n	800e262 <AdatiWayReturn+0x5ea>
	record_in();
 800e25e:	f7f9 fa99 	bl	8007794 <record_in>
	}
	create_DijkstraMap();
 800e262:	f002 ffdb 	bl	801121c <create_DijkstraMap>
	clear_Ierror();
 800e266:	f7f6 fbf3 	bl	8004a50 <clear_Ierror>
	reset_gyro();
 800e26a:	f7f3 fca5 	bl	8001bb8 <reset_gyro>
	reset_speed();
 800e26e:	f7f2 fed9 	bl	8001024 <reset_speed>
	maze_mode = 1;
 800e272:	4b88      	ldr	r3, [pc, #544]	; (800e494 <AdatiWayReturn+0x81c>)
 800e274:	2201      	movs	r2, #1
 800e276:	701a      	strb	r2, [r3, #0]
	straight_table2(MAZE_SECTION/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e278:	6978      	ldr	r0, [r7, #20]
 800e27a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e27e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e282:	ed97 1a03 	vldr	s2, [r7, #12]
 800e286:	eddf 0a84 	vldr	s1, [pc, #528]	; 800e498 <AdatiWayReturn+0x820>
 800e28a:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800e49c <AdatiWayReturn+0x824>
 800e28e:	f7f5 f8cd 	bl	800342c <straight_table2>

	while (1) {
		update_coordinate(&x,&y,direction);
 800e292:	6a3a      	ldr	r2, [r7, #32]
 800e294:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e29c:	4618      	mov	r0, r3
 800e29e:	f7ff fcb7 	bl	800dc10 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a4:	2b05      	cmp	r3, #5
 800e2a6:	d002      	beq.n	800e2ae <AdatiWayReturn+0x636>
 800e2a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2aa:	2b06      	cmp	r3, #6
 800e2ac:	d109      	bne.n	800e2c2 <AdatiWayReturn+0x64a>
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	2b04      	cmp	r3, #4
 800e2b2:	d002      	beq.n	800e2ba <AdatiWayReturn+0x642>
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	2b05      	cmp	r3, #5
 800e2b8:	d103      	bne.n	800e2c2 <AdatiWayReturn+0x64a>
			noGoalPillarMode=1;
 800e2ba:	4b79      	ldr	r3, [pc, #484]	; (800e4a0 <AdatiWayReturn+0x828>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	e002      	b.n	800e2c8 <AdatiWayReturn+0x650>
		}else{
			noGoalPillarMode=0;
 800e2c2:	4b77      	ldr	r3, [pc, #476]	; (800e4a0 <AdatiWayReturn+0x828>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	701a      	strb	r2, [r3, #0]
		}

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800e2c8:	f107 021d 	add.w	r2, r7, #29
 800e2cc:	f107 011e 	add.w	r1, r7, #30
 800e2d0:	f107 031f 	add.w	r3, r7, #31
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7ff fc6d 	bl	800dbb4 <get_wallData_sensor>

		mode.WallControlMode=1;
 800e2da:	2301      	movs	r3, #1
 800e2dc:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e2de:	2301      	movs	r3, #1
 800e2e0:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2e6:	6978      	ldr	r0, [r7, #20]
 800e2e8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2ec:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2f0:	ed97 1a03 	vldr	s2, [r7, #12]
 800e2f4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2f8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2fc:	f7f5 f896 	bl	800342c <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e304:	6a3c      	ldr	r4, [r7, #32]
 800e306:	7ffd      	ldrb	r5, [r7, #31]
 800e308:	7fbb      	ldrb	r3, [r7, #30]
 800e30a:	7f7a      	ldrb	r2, [r7, #29]
 800e30c:	9201      	str	r2, [sp, #4]
 800e30e:	9300      	str	r3, [sp, #0]
 800e310:	462b      	mov	r3, r5
 800e312:	4622      	mov	r2, r4
 800e314:	f002 f8e0 	bl	80104d8 <update_wall>
		if(Dijkstra_mode==1){
 800e318:	f897 319c 	ldrb.w	r3, [r7, #412]	; 0x19c
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d104      	bne.n	800e32a <AdatiWayReturn+0x6b2>
			route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800e320:	f004 fcc6 	bl	8012cb0 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e324:	f005 f97e 	bl	8013624 <create_StepCountMap_unknown>
 800e328:	e001      	b.n	800e32e <AdatiWayReturn+0x6b6>
		}else{
			create_StepCountMapBack_queue();
 800e32a:	f005 ff9b 	bl	8014264 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e332:	6a39      	ldr	r1, [r7, #32]
 800e334:	f107 062e 	add.w	r6, r7, #46	; 0x2e
 800e338:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800e33c:	f107 0432 	add.w	r4, r7, #50	; 0x32
 800e340:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e344:	9102      	str	r1, [sp, #8]
 800e346:	9201      	str	r2, [sp, #4]
 800e348:	9300      	str	r3, [sp, #0]
 800e34a:	4633      	mov	r3, r6
 800e34c:	462a      	mov	r2, r5
 800e34e:	4621      	mov	r1, r4
 800e350:	f002 fe3c 	bl	8010fcc <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e354:	7ffb      	ldrb	r3, [r7, #31]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d001      	beq.n	800e35e <AdatiWayReturn+0x6e6>
 800e35a:	23ff      	movs	r3, #255	; 0xff
 800e35c:	86bb      	strh	r3, [r7, #52]	; 0x34
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e35e:	7fbb      	ldrb	r3, [r7, #30]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d001      	beq.n	800e368 <AdatiWayReturn+0x6f0>
 800e364:	23ff      	movs	r3, #255	; 0xff
 800e366:	867b      	strh	r3, [r7, #50]	; 0x32
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e368:	7f7b      	ldrb	r3, [r7, #29]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <AdatiWayReturn+0x6fa>
 800e36e:	23ff      	movs	r3, #255	; 0xff
 800e370:	85fb      	strh	r3, [r7, #46]	; 0x2e
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e374:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e376:	6a3d      	ldr	r5, [r7, #32]
 800e378:	8ebe      	ldrh	r6, [r7, #52]	; 0x34
 800e37a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e37c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e37e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800e380:	9102      	str	r1, [sp, #8]
 800e382:	9201      	str	r2, [sp, #4]
 800e384:	9300      	str	r3, [sp, #0]
 800e386:	4633      	mov	r3, r6
 800e388:	462a      	mov	r2, r5
 800e38a:	4621      	mov	r1, r4
 800e38c:	f001 fe5e 	bl	801004c <decision_kitiku>
		mode.WallCutMode=1;
 800e390:	2301      	movs	r3, #1
 800e392:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e394:	7fbb      	ldrb	r3, [r7, #30]
 800e396:	7f7a      	ldrb	r2, [r7, #29]
 800e398:	4619      	mov	r1, r3
 800e39a:	6978      	ldr	r0, [r7, #20]
 800e39c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e3a0:	f7f5 fd02 	bl	8003da8 <End_straight>


			if(x == 0 && y == 0) {
 800e3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d147      	bne.n	800e43a <AdatiWayReturn+0x7c2>
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d144      	bne.n	800e43a <AdatiWayReturn+0x7c2>

				mode.WallControlMode=0;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e3bc:	6978      	ldr	r0, [r7, #20]
 800e3be:	ed97 2a01 	vldr	s4, [r7, #4]
 800e3c2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e3c6:	ed9f 1a34 	vldr	s2, [pc, #208]	; 800e498 <AdatiWayReturn+0x820>
 800e3ca:	edd7 0a03 	vldr	s1, [r7, #12]
 800e3ce:	ed9f 0a35 	vldr	s0, [pc, #212]	; 800e4a4 <AdatiWayReturn+0x82c>
 800e3d2:	f7f5 f82b 	bl	800342c <straight_table2>
				no_safty = 1;
 800e3d6:	4b34      	ldr	r3, [pc, #208]	; (800e4a8 <AdatiWayReturn+0x830>)
 800e3d8:	2201      	movs	r2, #1
 800e3da:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e3dc:	ed97 2a00 	vldr	s4, [r7]
 800e3e0:	edd7 1a02 	vldr	s3, [r7, #8]
 800e3e4:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800e498 <AdatiWayReturn+0x820>
 800e3e8:	eddf 0a2b 	vldr	s1, [pc, #172]	; 800e498 <AdatiWayReturn+0x820>
 800e3ec:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800e4ac <AdatiWayReturn+0x834>
 800e3f0:	f7f5 fd46 	bl	8003e80 <turning_table2>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e3f4:	6978      	ldr	r0, [r7, #20]
 800e3f6:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 800e4b0 <AdatiWayReturn+0x838>
 800e3fa:	eddf 1a2e 	vldr	s3, [pc, #184]	; 800e4b4 <AdatiWayReturn+0x83c>
 800e3fe:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800e498 <AdatiWayReturn+0x820>
 800e402:	eddf 0a25 	vldr	s1, [pc, #148]	; 800e498 <AdatiWayReturn+0x820>
 800e406:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e40a:	f7f5 f80f 	bl	800342c <straight_table2>
				no_safty = 0;
 800e40e:	4b26      	ldr	r3, [pc, #152]	; (800e4a8 <AdatiWayReturn+0x830>)
 800e410:	2200      	movs	r2, #0
 800e412:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e414:	f7f6 fb1c 	bl	8004a50 <clear_Ierror>

				direction = direction + 2;
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	3302      	adds	r3, #2
 800e41c:	623b      	str	r3, [r7, #32]

				if (direction >= 5) {
 800e41e:	6a3b      	ldr	r3, [r7, #32]
 800e420:	2b04      	cmp	r3, #4
 800e422:	dd02      	ble.n	800e42a <AdatiWayReturn+0x7b2>
					direction = direction-4;
 800e424:	6a3b      	ldr	r3, [r7, #32]
 800e426:	3b04      	subs	r3, #4
 800e428:	623b      	str	r3, [r7, #32]
				}
				if (direction <= 0) {
 800e42a:	6a3b      	ldr	r3, [r7, #32]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	f300 82db 	bgt.w	800e9e8 <AdatiWayReturn+0xd70>
					direction = direction+4;
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	3304      	adds	r3, #4
 800e436:	623b      	str	r3, [r7, #32]
				}

				break;
 800e438:	e2d6      	b.n	800e9e8 <AdatiWayReturn+0xd70>
			}


			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e43a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e43c:	2bff      	cmp	r3, #255	; 0xff
 800e43e:	d10b      	bne.n	800e458 <AdatiWayReturn+0x7e0>
 800e440:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e442:	2bff      	cmp	r3, #255	; 0xff
 800e444:	d108      	bne.n	800e458 <AdatiWayReturn+0x7e0>
 800e446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e448:	2bff      	cmp	r3, #255	; 0xff
 800e44a:	d105      	bne.n	800e458 <AdatiWayReturn+0x7e0>
 800e44c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e44e:	2bff      	cmp	r3, #255	; 0xff
 800e450:	d102      	bne.n	800e458 <AdatiWayReturn+0x7e0>
				// 迷路破損のため、ダイクストラ法更新
				Dijkstra_maker_flag=1;
 800e452:	4b19      	ldr	r3, [pc, #100]	; (800e4b8 <AdatiWayReturn+0x840>)
 800e454:	2201      	movs	r2, #1
 800e456:	701a      	strb	r2, [r3, #0]
			}
			if (x<0 || y<0 || x>15 || y>15){
 800e458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	db08      	blt.n	800e470 <AdatiWayReturn+0x7f8>
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	2b00      	cmp	r3, #0
 800e462:	db05      	blt.n	800e470 <AdatiWayReturn+0x7f8>
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	2b0f      	cmp	r3, #15
 800e468:	dc02      	bgt.n	800e470 <AdatiWayReturn+0x7f8>
 800e46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46c:	2b0f      	cmp	r3, #15
 800e46e:	dd27      	ble.n	800e4c0 <AdatiWayReturn+0x848>
				// 自己位置の破損
				error_mode=1;
 800e470:	4b07      	ldr	r3, [pc, #28]	; (800e490 <AdatiWayReturn+0x818>)
 800e472:	2201      	movs	r2, #1
 800e474:	701a      	strb	r2, [r3, #0]
				g_WallControl_mode=0;
 800e476:	4b11      	ldr	r3, [pc, #68]	; (800e4bc <AdatiWayReturn+0x844>)
 800e478:	2200      	movs	r2, #0
 800e47a:	701a      	strb	r2, [r3, #0]
				pl_yellow_LED_count(2*2*2*2);
 800e47c:	2010      	movs	r0, #16
 800e47e:	f7f8 ff27 	bl	80072d0 <pl_yellow_LED_count>
				pl_DriveMotor_stop();
 800e482:	f7f9 fcdf 	bl	8007e44 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e486:	2000      	movs	r0, #0
 800e488:	f7f9 fc76 	bl	8007d78 <pl_DriveMotor_standby>
				break;
 800e48c:	e2af      	b.n	800e9ee <AdatiWayReturn+0xd76>
 800e48e:	bf00      	nop
 800e490:	2000080b 	.word	0x2000080b
 800e494:	2000082e 	.word	0x2000082e
 800e498:	00000000 	.word	0x00000000
 800e49c:	42830000 	.word	0x42830000
 800e4a0:	2000052d 	.word	0x2000052d
 800e4a4:	42140000 	.word	0x42140000
 800e4a8:	2000080a 	.word	0x2000080a
 800e4ac:	43340000 	.word	0x43340000
 800e4b0:	447a0000 	.word	0x447a0000
 800e4b4:	c3160000 	.word	0xc3160000
 800e4b8:	20000d20 	.word	0x20000d20
 800e4bc:	20000594 	.word	0x20000594
			}


			if(Dijkstra_maker_flag==1){
 800e4c0:	4ba1      	ldr	r3, [pc, #644]	; (800e748 <AdatiWayReturn+0xad0>)
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	f040 8157 	bne.w	800e778 <AdatiWayReturn+0xb00>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET-(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4d6:	6978      	ldr	r0, [r7, #20]
 800e4d8:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4dc:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4e0:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 800e74c <AdatiWayReturn+0xad4>
 800e4e4:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4e8:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800e4ec:	f7f4 ff9e 	bl	800342c <straight_table2>

				create_DijkstraMap();
 800e4f0:	f002 fe94 	bl	801121c <create_DijkstraMap>
				route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800e4f4:	f004 fbdc 	bl	8012cb0 <route_Dijkstra>
				create_StepCountMap_unknown();
 800e4f8:	f005 f894 	bl	8013624 <create_StepCountMap_unknown>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e500:	6a39      	ldr	r1, [r7, #32]
 800e502:	f107 062e 	add.w	r6, r7, #46	; 0x2e
 800e506:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800e50a:	f107 0432 	add.w	r4, r7, #50	; 0x32
 800e50e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800e512:	9102      	str	r1, [sp, #8]
 800e514:	9201      	str	r2, [sp, #4]
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	4633      	mov	r3, r6
 800e51a:	462a      	mov	r2, r5
 800e51c:	4621      	mov	r1, r4
 800e51e:	f002 fd55 	bl	8010fcc <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e522:	7ffb      	ldrb	r3, [r7, #31]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d001      	beq.n	800e52c <AdatiWayReturn+0x8b4>
 800e528:	23ff      	movs	r3, #255	; 0xff
 800e52a:	86bb      	strh	r3, [r7, #52]	; 0x34
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e52c:	7fbb      	ldrb	r3, [r7, #30]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d001      	beq.n	800e536 <AdatiWayReturn+0x8be>
 800e532:	23ff      	movs	r3, #255	; 0xff
 800e534:	867b      	strh	r3, [r7, #50]	; 0x32
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e536:	7f7b      	ldrb	r3, [r7, #29]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d001      	beq.n	800e540 <AdatiWayReturn+0x8c8>
 800e53c:	23ff      	movs	r3, #255	; 0xff
 800e53e:	85fb      	strh	r3, [r7, #46]	; 0x2e
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e540:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e542:	2bff      	cmp	r3, #255	; 0xff
 800e544:	d117      	bne.n	800e576 <AdatiWayReturn+0x8fe>
 800e546:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e548:	2bff      	cmp	r3, #255	; 0xff
 800e54a:	d114      	bne.n	800e576 <AdatiWayReturn+0x8fe>
 800e54c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e54e:	2bff      	cmp	r3, #255	; 0xff
 800e550:	d111      	bne.n	800e576 <AdatiWayReturn+0x8fe>
 800e552:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e554:	2bff      	cmp	r3, #255	; 0xff
 800e556:	d10e      	bne.n	800e576 <AdatiWayReturn+0x8fe>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e558:	4b7d      	ldr	r3, [pc, #500]	; (800e750 <AdatiWayReturn+0xad8>)
 800e55a:	2201      	movs	r2, #1
 800e55c:	701a      	strb	r2, [r3, #0]
									g_WallControl_mode=0;
 800e55e:	4b7d      	ldr	r3, [pc, #500]	; (800e754 <AdatiWayReturn+0xadc>)
 800e560:	2200      	movs	r2, #0
 800e562:	701a      	strb	r2, [r3, #0]
									pl_yellow_LED_count(2*2*2*2*2);
 800e564:	2020      	movs	r0, #32
 800e566:	f7f8 feb3 	bl	80072d0 <pl_yellow_LED_count>
									pl_DriveMotor_stop();
 800e56a:	f7f9 fc6b 	bl	8007e44 <pl_DriveMotor_stop>
									pl_DriveMotor_standby(OFF);
 800e56e:	2000      	movs	r0, #0
 800e570:	f7f9 fc02 	bl	8007d78 <pl_DriveMotor_standby>
									break;
 800e574:	e23b      	b.n	800e9ee <AdatiWayReturn+0xd76>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e578:	2b00      	cmp	r3, #0
 800e57a:	db08      	blt.n	800e58e <AdatiWayReturn+0x916>
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	2b00      	cmp	r3, #0
 800e580:	db05      	blt.n	800e58e <AdatiWayReturn+0x916>
 800e582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e584:	2b0f      	cmp	r3, #15
 800e586:	dc02      	bgt.n	800e58e <AdatiWayReturn+0x916>
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	2b0f      	cmp	r3, #15
 800e58c:	dd0e      	ble.n	800e5ac <AdatiWayReturn+0x934>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e58e:	4b70      	ldr	r3, [pc, #448]	; (800e750 <AdatiWayReturn+0xad8>)
 800e590:	2201      	movs	r2, #1
 800e592:	701a      	strb	r2, [r3, #0]
									g_WallControl_mode=0;
 800e594:	4b6f      	ldr	r3, [pc, #444]	; (800e754 <AdatiWayReturn+0xadc>)
 800e596:	2200      	movs	r2, #0
 800e598:	701a      	strb	r2, [r3, #0]
									pl_yellow_LED_count(2*2*2*2);
 800e59a:	2010      	movs	r0, #16
 800e59c:	f7f8 fe98 	bl	80072d0 <pl_yellow_LED_count>
									pl_DriveMotor_stop();
 800e5a0:	f7f9 fc50 	bl	8007e44 <pl_DriveMotor_stop>
									pl_DriveMotor_standby(OFF);
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	f7f9 fbe7 	bl	8007d78 <pl_DriveMotor_standby>
									break;
 800e5aa:	e220      	b.n	800e9ee <AdatiWayReturn+0xd76>
								}
								mode.WallControlMode=0;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	753b      	strb	r3, [r7, #20]
								mode.WallCutMode=0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	75fb      	strb	r3, [r7, #23]
								mode.calMazeMode=0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	75bb      	strb	r3, [r7, #22]
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e5b8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e5ba:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d814      	bhi.n	800e5ea <AdatiWayReturn+0x972>
 800e5c0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e5c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d810      	bhi.n	800e5ea <AdatiWayReturn+0x972>
 800e5c8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e5ca:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d80c      	bhi.n	800e5ea <AdatiWayReturn+0x972>
									// 直進
									straight_table2(MAZE_SECTION/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5d0:	6978      	ldr	r0, [r7, #20]
 800e5d2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5d6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5da:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5de:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800e74c <AdatiWayReturn+0xad4>
 800e5e2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800e758 <AdatiWayReturn+0xae0>
 800e5e6:	f7f4 ff21 	bl	800342c <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e5ea:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e5ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e5ee:	429a      	cmp	r2, r3
 800e5f0:	d227      	bcs.n	800e642 <AdatiWayReturn+0x9ca>
 800e5f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e5f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d823      	bhi.n	800e642 <AdatiWayReturn+0x9ca>
 800e5fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e5fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d81f      	bhi.n	800e642 <AdatiWayReturn+0x9ca>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e602:	edd7 7a02 	vldr	s15, [r7, #8]
 800e606:	eef1 7a67 	vneg.f32	s15, s15
 800e60a:	ed97 2a00 	vldr	s4, [r7]
 800e60e:	eef0 1a67 	vmov.f32	s3, s15
 800e612:	ed9f 1a4e 	vldr	s2, [pc, #312]	; 800e74c <AdatiWayReturn+0xad4>
 800e616:	eddf 0a4d 	vldr	s1, [pc, #308]	; 800e74c <AdatiWayReturn+0xad4>
 800e61a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800e75c <AdatiWayReturn+0xae4>
 800e61e:	f7f5 fc2f 	bl	8003e80 <turning_table2>
									straight_table2(MAZE_SECTION/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e622:	6978      	ldr	r0, [r7, #20]
 800e624:	ed97 2a01 	vldr	s4, [r7, #4]
 800e628:	edd7 1a03 	vldr	s3, [r7, #12]
 800e62c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e630:	eddf 0a46 	vldr	s1, [pc, #280]	; 800e74c <AdatiWayReturn+0xad4>
 800e634:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800e758 <AdatiWayReturn+0xae0>
 800e638:	f7f4 fef8 	bl	800342c <straight_table2>
									direction++;
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	3301      	adds	r3, #1
 800e640:	623b      	str	r3, [r7, #32]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e642:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e644:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e646:	429a      	cmp	r2, r3
 800e648:	d223      	bcs.n	800e692 <AdatiWayReturn+0xa1a>
 800e64a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e64c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e64e:	429a      	cmp	r2, r3
 800e650:	d21f      	bcs.n	800e692 <AdatiWayReturn+0xa1a>
 800e652:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e654:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e656:	429a      	cmp	r2, r3
 800e658:	d81b      	bhi.n	800e692 <AdatiWayReturn+0xa1a>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e65a:	ed97 2a00 	vldr	s4, [r7]
 800e65e:	edd7 1a02 	vldr	s3, [r7, #8]
 800e662:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 800e74c <AdatiWayReturn+0xad4>
 800e666:	eddf 0a39 	vldr	s1, [pc, #228]	; 800e74c <AdatiWayReturn+0xad4>
 800e66a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800e760 <AdatiWayReturn+0xae8>
 800e66e:	f7f5 fc07 	bl	8003e80 <turning_table2>
									straight_table2(MAZE_SECTION/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e672:	6978      	ldr	r0, [r7, #20]
 800e674:	ed97 2a01 	vldr	s4, [r7, #4]
 800e678:	edd7 1a03 	vldr	s3, [r7, #12]
 800e67c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e680:	eddf 0a32 	vldr	s1, [pc, #200]	; 800e74c <AdatiWayReturn+0xad4>
 800e684:	ed9f 0a34 	vldr	s0, [pc, #208]	; 800e758 <AdatiWayReturn+0xae0>
 800e688:	f7f4 fed0 	bl	800342c <straight_table2>
									direction--;
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	3b01      	subs	r3, #1
 800e690:	623b      	str	r3, [r7, #32]
								}
								if(back_count < front_count && back_count < right_count
 800e692:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e694:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e696:	429a      	cmp	r2, r3
 800e698:	f080 8182 	bcs.w	800e9a0 <AdatiWayReturn+0xd28>
 800e69c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e69e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e6a0:	429a      	cmp	r2, r3
 800e6a2:	f080 817d 	bcs.w	800e9a0 <AdatiWayReturn+0xd28>
										&& back_count < left_count){
 800e6a6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e6a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	f080 8178 	bcs.w	800e9a0 <AdatiWayReturn+0xd28>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800e6b0:	4b2c      	ldr	r3, [pc, #176]	; (800e764 <AdatiWayReturn+0xaec>)
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e6b6:	7ffb      	ldrb	r3, [r7, #31]
 800e6b8:	7f79      	ldrb	r1, [r7, #29]
 800e6ba:	7fba      	ldrb	r2, [r7, #30]
 800e6bc:	4618      	mov	r0, r3
 800e6be:	edd7 0a00 	vldr	s1, [r7]
 800e6c2:	ed97 0a02 	vldr	s0, [r7, #8]
 800e6c6:	f7fb f9db 	bl	8009a80 <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800e6ca:	2064      	movs	r0, #100	; 0x64
 800e6cc:	f7f9 fe84 	bl	80083d8 <wait_ms_NoReset>
									no_safty = 0;
 800e6d0:	4b24      	ldr	r3, [pc, #144]	; (800e764 <AdatiWayReturn+0xaec>)
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800e6da:	7ffb      	ldrb	r3, [r7, #31]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d01e      	beq.n	800e71e <AdatiWayReturn+0xaa6>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e6e0:	6978      	ldr	r0, [r7, #20]
 800e6e2:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800e768 <AdatiWayReturn+0xaf0>
 800e6e6:	eddf 1a21 	vldr	s3, [pc, #132]	; 800e76c <AdatiWayReturn+0xaf4>
 800e6ea:	ed9f 1a18 	vldr	s2, [pc, #96]	; 800e74c <AdatiWayReturn+0xad4>
 800e6ee:	eddf 0a17 	vldr	s1, [pc, #92]	; 800e74c <AdatiWayReturn+0xad4>
 800e6f2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800e770 <AdatiWayReturn+0xaf8>
 800e6f6:	f7f4 fe99 	bl	800342c <straight_table2>
									clear_Ierror();
 800e6fa:	f7f6 f9a9 	bl	8004a50 <clear_Ierror>
									mode.WallControlMode=1;
 800e6fe:	2301      	movs	r3, #1
 800e700:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e702:	6978      	ldr	r0, [r7, #20]
 800e704:	ed97 2a01 	vldr	s4, [r7, #4]
 800e708:	edd7 1a03 	vldr	s3, [r7, #12]
 800e70c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e710:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800e74c <AdatiWayReturn+0xad4>
 800e714:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800e774 <AdatiWayReturn+0xafc>
 800e718:	f7f4 fe88 	bl	800342c <straight_table2>
 800e71c:	e010      	b.n	800e740 <AdatiWayReturn+0xac8>
									}else{
										clear_Ierror();
 800e71e:	f7f6 f997 	bl	8004a50 <clear_Ierror>
										mode.WallControlMode=0;
 800e722:	2300      	movs	r3, #0
 800e724:	753b      	strb	r3, [r7, #20]
										straight_table2(MAZE_SECTION/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT),0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e726:	6978      	ldr	r0, [r7, #20]
 800e728:	ed97 2a01 	vldr	s4, [r7, #4]
 800e72c:	edd7 1a03 	vldr	s3, [r7, #12]
 800e730:	ed97 1a03 	vldr	s2, [r7, #12]
 800e734:	eddf 0a05 	vldr	s1, [pc, #20]	; 800e74c <AdatiWayReturn+0xad4>
 800e738:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800e758 <AdatiWayReturn+0xae0>
 800e73c:	f7f4 fe76 	bl	800342c <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800e740:	6a3b      	ldr	r3, [r7, #32]
 800e742:	3302      	adds	r3, #2
 800e744:	623b      	str	r3, [r7, #32]
 800e746:	e12b      	b.n	800e9a0 <AdatiWayReturn+0xd28>
 800e748:	20000d20 	.word	0x20000d20
 800e74c:	00000000 	.word	0x00000000
 800e750:	2000080b 	.word	0x2000080b
 800e754:	20000594 	.word	0x20000594
 800e758:	42540000 	.word	0x42540000
 800e75c:	c2b40000 	.word	0xc2b40000
 800e760:	42b40000 	.word	0x42b40000
 800e764:	2000080a 	.word	0x2000080a
 800e768:	447a0000 	.word	0x447a0000
 800e76c:	c3160000 	.word	0xc3160000
 800e770:	c1a40000 	.word	0xc1a40000
 800e774:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800e778:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d102      	bne.n	800e786 <AdatiWayReturn+0xb0e>
					kitikukan = 0;
 800e780:	4bb0      	ldr	r3, [pc, #704]	; (800ea44 <AdatiWayReturn+0xdcc>)
 800e782:	2200      	movs	r2, #0
 800e784:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800e786:	4baf      	ldr	r3, [pc, #700]	; (800ea44 <AdatiWayReturn+0xdcc>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	f040 80cb 	bne.w	800e926 <AdatiWayReturn+0xcae>


				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e790:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e792:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e794:	429a      	cmp	r2, r3
 800e796:	d81a      	bhi.n	800e7ce <AdatiWayReturn+0xb56>
 800e798:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e79a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d816      	bhi.n	800e7ce <AdatiWayReturn+0xb56>
 800e7a0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800e7a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d812      	bhi.n	800e7ce <AdatiWayReturn+0xb56>
					// 直進
					mode.WallControlMode=1;
 800e7a8:	2301      	movs	r3, #1
 800e7aa:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75fb      	strb	r3, [r7, #23]
					straight_table2(MAZE_SECTION-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e7b4:	6978      	ldr	r0, [r7, #20]
 800e7b6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e7ba:	edd7 1a03 	vldr	s3, [r7, #12]
 800e7be:	ed97 1a03 	vldr	s2, [r7, #12]
 800e7c2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e7c6:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800ea48 <AdatiWayReturn+0xdd0>
 800e7ca:	f7f4 fe2f 	bl	800342c <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e7ce:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e7d0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d219      	bcs.n	800e80a <AdatiWayReturn+0xb92>
 800e7d6:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e7d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d815      	bhi.n	800e80a <AdatiWayReturn+0xb92>
 800e7de:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800e7e0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d811      	bhi.n	800e80a <AdatiWayReturn+0xb92>
					// 右旋回
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e7e6:	4b99      	ldr	r3, [pc, #612]	; (800ea4c <AdatiWayReturn+0xdd4>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	9203      	str	r2, [sp, #12]
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	9202      	str	r2, [sp, #8]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	9201      	str	r2, [sp, #4]
 800e7f4:	699a      	ldr	r2, [r3, #24]
 800e7f6:	9200      	str	r2, [sp, #0]
 800e7f8:	3308      	adds	r3, #8
 800e7fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7fc:	ed97 0a03 	vldr	s0, [r7, #12]
 800e800:	f7fb fa10 	bl	8009c24 <slalomR>
					direction++;
 800e804:	6a3b      	ldr	r3, [r7, #32]
 800e806:	3301      	adds	r3, #1
 800e808:	623b      	str	r3, [r7, #32]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e80a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e80c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e80e:	429a      	cmp	r2, r3
 800e810:	d219      	bcs.n	800e846 <AdatiWayReturn+0xbce>
 800e812:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e814:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e816:	429a      	cmp	r2, r3
 800e818:	d215      	bcs.n	800e846 <AdatiWayReturn+0xbce>
 800e81a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e81c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800e81e:	429a      	cmp	r2, r3
 800e820:	d811      	bhi.n	800e846 <AdatiWayReturn+0xbce>
					// 左旋回
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e822:	4b8a      	ldr	r3, [pc, #552]	; (800ea4c <AdatiWayReturn+0xdd4>)
 800e824:	2200      	movs	r2, #0
 800e826:	9203      	str	r2, [sp, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	9202      	str	r2, [sp, #8]
 800e82c:	2200      	movs	r2, #0
 800e82e:	9201      	str	r2, [sp, #4]
 800e830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e832:	9200      	str	r2, [sp, #0]
 800e834:	331c      	adds	r3, #28
 800e836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e838:	ed97 0a03 	vldr	s0, [r7, #12]
 800e83c:	f7fb fbd8 	bl	8009ff0 <slalomL>
					direction--;
 800e840:	6a3b      	ldr	r3, [r7, #32]
 800e842:	3b01      	subs	r3, #1
 800e844:	623b      	str	r3, [r7, #32]
				}
				if(back_count < front_count && back_count < right_count
 800e846:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e848:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e84a:	429a      	cmp	r2, r3
 800e84c:	f080 80a8 	bcs.w	800e9a0 <AdatiWayReturn+0xd28>
 800e850:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e852:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e854:	429a      	cmp	r2, r3
 800e856:	f080 80a3 	bcs.w	800e9a0 <AdatiWayReturn+0xd28>
						&& back_count < left_count){
 800e85a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800e85c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e85e:	429a      	cmp	r2, r3
 800e860:	f080 809e 	bcs.w	800e9a0 <AdatiWayReturn+0xd28>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800e864:	2301      	movs	r3, #1
 800e866:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800e868:	2300      	movs	r3, #0
 800e86a:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	75fb      	strb	r3, [r7, #23]
					straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e870:	6978      	ldr	r0, [r7, #20]
 800e872:	ed97 2a01 	vldr	s4, [r7, #4]
 800e876:	edd7 1a03 	vldr	s3, [r7, #12]
 800e87a:	ed9f 1a75 	vldr	s2, [pc, #468]	; 800ea50 <AdatiWayReturn+0xdd8>
 800e87e:	edd7 0a03 	vldr	s1, [r7, #12]
 800e882:	ed9f 0a74 	vldr	s0, [pc, #464]	; 800ea54 <AdatiWayReturn+0xddc>
 800e886:	f7f4 fdd1 	bl	800342c <straight_table2>
					create_DijkstraMap();
 800e88a:	f002 fcc7 	bl	801121c <create_DijkstraMap>
					no_safty = 1;
 800e88e:	4b72      	ldr	r3, [pc, #456]	; (800ea58 <AdatiWayReturn+0xde0>)
 800e890:	2201      	movs	r2, #1
 800e892:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e894:	7ffb      	ldrb	r3, [r7, #31]
 800e896:	7f79      	ldrb	r1, [r7, #29]
 800e898:	7fba      	ldrb	r2, [r7, #30]
 800e89a:	4618      	mov	r0, r3
 800e89c:	edd7 0a00 	vldr	s1, [r7]
 800e8a0:	ed97 0a02 	vldr	s0, [r7, #8]
 800e8a4:	f7fb f8ec 	bl	8009a80 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800e8a8:	2064      	movs	r0, #100	; 0x64
 800e8aa:	f7f9 fd95 	bl	80083d8 <wait_ms_NoReset>
					no_safty = 0;
 800e8ae:	4b6a      	ldr	r3, [pc, #424]	; (800ea58 <AdatiWayReturn+0xde0>)
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800e8b8:	7ffb      	ldrb	r3, [r7, #31]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d01e      	beq.n	800e8fc <AdatiWayReturn+0xc84>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e8be:	6978      	ldr	r0, [r7, #20]
 800e8c0:	ed9f 2a66 	vldr	s4, [pc, #408]	; 800ea5c <AdatiWayReturn+0xde4>
 800e8c4:	eddf 1a66 	vldr	s3, [pc, #408]	; 800ea60 <AdatiWayReturn+0xde8>
 800e8c8:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ea50 <AdatiWayReturn+0xdd8>
 800e8cc:	eddf 0a60 	vldr	s1, [pc, #384]	; 800ea50 <AdatiWayReturn+0xdd8>
 800e8d0:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800ea64 <AdatiWayReturn+0xdec>
 800e8d4:	f7f4 fdaa 	bl	800342c <straight_table2>
					clear_Ierror();
 800e8d8:	f7f6 f8ba 	bl	8004a50 <clear_Ierror>
					mode.WallControlMode=1;
 800e8dc:	2301      	movs	r3, #1
 800e8de:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8e0:	6978      	ldr	r0, [r7, #20]
 800e8e2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8e6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8ea:	ed97 1a03 	vldr	s2, [r7, #12]
 800e8ee:	eddf 0a58 	vldr	s1, [pc, #352]	; 800ea50 <AdatiWayReturn+0xdd8>
 800e8f2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800ea68 <AdatiWayReturn+0xdf0>
 800e8f6:	f7f4 fd99 	bl	800342c <straight_table2>
 800e8fa:	e010      	b.n	800e91e <AdatiWayReturn+0xca6>
					}else{
						clear_Ierror();
 800e8fc:	f7f6 f8a8 	bl	8004a50 <clear_Ierror>
						mode.WallControlMode=0;
 800e900:	2300      	movs	r3, #0
 800e902:	753b      	strb	r3, [r7, #20]
						straight_table2(MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e904:	6978      	ldr	r0, [r7, #20]
 800e906:	ed97 2a01 	vldr	s4, [r7, #4]
 800e90a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e90e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e912:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800ea50 <AdatiWayReturn+0xdd8>
 800e916:	ed9f 0a55 	vldr	s0, [pc, #340]	; 800ea6c <AdatiWayReturn+0xdf4>
 800e91a:	f7f4 fd87 	bl	800342c <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800e91e:	6a3b      	ldr	r3, [r7, #32]
 800e920:	3302      	adds	r3, #2
 800e922:	623b      	str	r3, [r7, #32]
 800e924:	e03c      	b.n	800e9a0 <AdatiWayReturn+0xd28>

				}

			} else {
				mode.WallControlMode=1;
 800e926:	2301      	movs	r3, #1
 800e928:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e92a:	2301      	movs	r3, #1
 800e92c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e92e:	2300      	movs	r3, #0
 800e930:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e932:	6978      	ldr	r0, [r7, #20]
 800e934:	ed97 2a01 	vldr	s4, [r7, #4]
 800e938:	edd7 1a03 	vldr	s3, [r7, #12]
 800e93c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e940:	edd7 0a03 	vldr	s1, [r7, #12]
 800e944:	ed9f 0a43 	vldr	s0, [pc, #268]	; 800ea54 <AdatiWayReturn+0xddc>
 800e948:	f7f4 fd70 	bl	800342c <straight_table2>
				compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800e94c:	f107 0318 	add.w	r3, r7, #24
 800e950:	f107 0220 	add.w	r2, r7, #32
 800e954:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800e958:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800e95c:	f001 fbe8 	bl	8010130 <compress_kitiku>
				End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800e960:	2201      	movs	r2, #1
 800e962:	2101      	movs	r1, #1
 800e964:	6978      	ldr	r0, [r7, #20]
 800e966:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 800ea54 <AdatiWayReturn+0xddc>
 800e96a:	f7f5 fa1d 	bl	8003da8 <End_straight>
				mode.calMazeMode=0;
 800e96e:	2300      	movs	r3, #0
 800e970:	75bb      	strb	r3, [r7, #22]
				straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800e972:	69ba      	ldr	r2, [r7, #24]
 800e974:	4613      	mov	r3, r2
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	4413      	add	r3, r2
 800e97a:	011a      	lsls	r2, r3, #4
 800e97c:	1ad3      	subs	r3, r2, r3
 800e97e:	ee07 3a90 	vmov	s15, r3
 800e982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e986:	6978      	ldr	r0, [r7, #20]
 800e988:	ed97 2a01 	vldr	s4, [r7, #4]
 800e98c:	eddf 1a33 	vldr	s3, [pc, #204]	; 800ea5c <AdatiWayReturn+0xde4>
 800e990:	ed97 1a03 	vldr	s2, [r7, #12]
 800e994:	edd7 0a03 	vldr	s1, [r7, #12]
 800e998:	eeb0 0a67 	vmov.f32	s0, s15
 800e99c:	f7f4 fd46 	bl	800342c <straight_table2>
			}

			}

			if (direction >= 5) {
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	2b04      	cmp	r3, #4
 800e9a4:	dd02      	ble.n	800e9ac <AdatiWayReturn+0xd34>
				direction = direction-4;
 800e9a6:	6a3b      	ldr	r3, [r7, #32]
 800e9a8:	3b04      	subs	r3, #4
 800e9aa:	623b      	str	r3, [r7, #32]
			}
			if (direction <= 0) {
 800e9ac:	6a3b      	ldr	r3, [r7, #32]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	dc02      	bgt.n	800e9b8 <AdatiWayReturn+0xd40>
				direction = direction+4;
 800e9b2:	6a3b      	ldr	r3, [r7, #32]
 800e9b4:	3304      	adds	r3, #4
 800e9b6:	623b      	str	r3, [r7, #32]
			}

			if(error_mode==1){break;}
 800e9b8:	4b2d      	ldr	r3, [pc, #180]	; (800ea70 <AdatiWayReturn+0xdf8>)
 800e9ba:	781b      	ldrb	r3, [r3, #0]
 800e9bc:	2b01      	cmp	r3, #1
 800e9be:	d015      	beq.n	800e9ec <AdatiWayReturn+0xd74>
			if (g_timCount_sec>240){
 800e9c0:	4b2c      	ldr	r3, [pc, #176]	; (800ea74 <AdatiWayReturn+0xdfc>)
 800e9c2:	edd3 7a00 	vldr	s15, [r3]
 800e9c6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800ea78 <AdatiWayReturn+0xe00>
 800e9ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d2:	dd08      	ble.n	800e9e6 <AdatiWayReturn+0xd6e>
				// 秒数エンド
				timer_end_mode=1;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				pl_DriveMotor_stop();
 800e9da:	f7f9 fa33 	bl	8007e44 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e9de:	2000      	movs	r0, #0
 800e9e0:	f7f9 f9ca 	bl	8007d78 <pl_DriveMotor_standby>
				break;
 800e9e4:	e003      	b.n	800e9ee <AdatiWayReturn+0xd76>
		update_coordinate(&x,&y,direction);
 800e9e6:	e454      	b.n	800e292 <AdatiWayReturn+0x61a>
				break;
 800e9e8:	bf00      	nop
 800e9ea:	e000      	b.n	800e9ee <AdatiWayReturn+0xd76>
			if(error_mode==1){break;}
 800e9ec:	bf00      	nop
			}
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800e9ee:	2000      	movs	r0, #0
 800e9f0:	f7f9 f9c2 	bl	8007d78 <pl_DriveMotor_standby>
	maze_mode = 0;
 800e9f4:	4b21      	ldr	r3, [pc, #132]	; (800ea7c <AdatiWayReturn+0xe04>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(100);
 800e9fa:	2064      	movs	r0, #100	; 0x64
 800e9fc:	f7f9 fcec 	bl	80083d8 <wait_ms_NoReset>
	maze_display();
 800ea00:	f005 ff6c 	bl	80148dc <maze_display>
	create_StepCountMap_queue();
 800ea04:	f005 f944 	bl	8013c90 <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800ea08:	4b1d      	ldr	r3, [pc, #116]	; (800ea80 <AdatiWayReturn+0xe08>)
 800ea0a:	881b      	ldrh	r3, [r3, #0]
 800ea0c:	2bff      	cmp	r3, #255	; 0xff
 800ea0e:	d102      	bne.n	800ea16 <AdatiWayReturn+0xd9e>
		error_mode = 1;
 800ea10:	4b17      	ldr	r3, [pc, #92]	; (800ea70 <AdatiWayReturn+0xdf8>)
 800ea12:	2201      	movs	r2, #1
 800ea14:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ea16:	4b16      	ldr	r3, [pc, #88]	; (800ea70 <AdatiWayReturn+0xdf8>)
 800ea18:	781b      	ldrb	r3, [r3, #0]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d102      	bne.n	800ea24 <AdatiWayReturn+0xdac>
		record_in();
 800ea1e:	f7f8 feb9 	bl	8007794 <record_in>
		record_out();
	}else{
		record_in();
	}

}
 800ea22:	e008      	b.n	800ea36 <AdatiWayReturn+0xdbe>
	} else if(timer_end_mode==0) {
 800ea24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d102      	bne.n	800ea32 <AdatiWayReturn+0xdba>
		record_out();
 800ea2c:	f7f8 ff6e 	bl	800790c <record_out>
}
 800ea30:	e001      	b.n	800ea36 <AdatiWayReturn+0xdbe>
		record_in();
 800ea32:	f7f8 feaf 	bl	8007794 <record_in>
}
 800ea36:	bf00      	nop
 800ea38:	373c      	adds	r7, #60	; 0x3c
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ea40:	b004      	add	sp, #16
 800ea42:	4770      	bx	lr
 800ea44:	20000830 	.word	0x20000830
 800ea48:	42a40000 	.word	0x42a40000
 800ea4c:	2000ef74 	.word	0x2000ef74
 800ea50:	00000000 	.word	0x00000000
 800ea54:	42140000 	.word	0x42140000
 800ea58:	2000080a 	.word	0x2000080a
 800ea5c:	447a0000 	.word	0x447a0000
 800ea60:	c3160000 	.word	0xc3160000
 800ea64:	c1a40000 	.word	0xc1a40000
 800ea68:	42830000 	.word	0x42830000
 800ea6c:	42340000 	.word	0x42340000
 800ea70:	2000080b 	.word	0x2000080b
 800ea74:	20000730 	.word	0x20000730
 800ea78:	43700000 	.word	0x43700000
 800ea7c:	2000082e 	.word	0x2000082e
 800ea80:	20000d24 	.word	0x20000d24

0800ea84 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ea84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ea86:	b08b      	sub	sp, #44	; 0x2c
 800ea88:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	607b      	str	r3, [r7, #4]
	int y = 0;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ea92:	2301      	movs	r3, #1
 800ea94:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ea96:	4b8b      	ldr	r3, [pc, #556]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	801a      	strh	r2, [r3, #0]
	create_DijkstraMap();
 800ea9c:	f002 fbbe 	bl	801121c <create_DijkstraMap>
	maze_display_Dijkstra();
 800eaa0:	f006 f83a 	bl	8014b18 <maze_display_Dijkstra>
	pass[0] = 1;
 800eaa4:	4b88      	ldr	r3, [pc, #544]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800eaaa:	4639      	mov	r1, r7
 800eaac:	1d3b      	adds	r3, r7, #4
 800eaae:	697a      	ldr	r2, [r7, #20]
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7ff f8ad 	bl	800dc10 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2b05      	cmp	r3, #5
 800eaba:	d002      	beq.n	800eac2 <pass_maker_Dijkstra+0x3e>
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2b06      	cmp	r3, #6
 800eac0:	d13a      	bne.n	800eb38 <pass_maker_Dijkstra+0xb4>
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	d002      	beq.n	800eace <pass_maker_Dijkstra+0x4a>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	2b05      	cmp	r3, #5
 800eacc:	d134      	bne.n	800eb38 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800eace:	4b7d      	ldr	r3, [pc, #500]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	461a      	mov	r2, r3
 800ead4:	4b7c      	ldr	r3, [pc, #496]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800ead6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	da05      	bge.n	800eaea <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800eade:	4b79      	ldr	r3, [pc, #484]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	3301      	adds	r3, #1
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	4b77      	ldr	r3, [pc, #476]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800eae8:	801a      	strh	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800eaea:	4b76      	ldr	r3, [pc, #472]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	4b75      	ldr	r3, [pc, #468]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800eaf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eaf6:	4a73      	ldr	r2, [pc, #460]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800eaf8:	8812      	ldrh	r2, [r2, #0]
 800eafa:	4611      	mov	r1, r2
 800eafc:	3301      	adds	r3, #1
 800eafe:	4a72      	ldr	r2, [pc, #456]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800eb00:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	3302      	adds	r3, #2
 800eb08:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2b05      	cmp	r3, #5
 800eb0e:	d101      	bne.n	800eb14 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800eb10:	2301      	movs	r3, #1
 800eb12:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	2b06      	cmp	r3, #6
 800eb18:	d101      	bne.n	800eb1e <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800eb1a:	2302      	movs	r3, #2
 800eb1c:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800eb24:	2304      	movs	r3, #4
 800eb26:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb2e:	f040 80c2 	bne.w	800ecb6 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800eb32:	2303      	movs	r3, #3
 800eb34:	617b      	str	r3, [r7, #20]
					}
					break;
 800eb36:	e0be      	b.n	800ecb6 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	f107 020b 	add.w	r2, r7, #11
 800eb40:	f107 0309 	add.w	r3, r7, #9
 800eb44:	9301      	str	r3, [sp, #4]
 800eb46:	f107 030a 	add.w	r3, r7, #10
 800eb4a:	9300      	str	r3, [sp, #0]
 800eb4c:	4613      	mov	r3, r2
 800eb4e:	697a      	ldr	r2, [r7, #20]
 800eb50:	f001 ff48 	bl	80109e4 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	f107 060c 	add.w	r6, r7, #12
 800eb5c:	f107 050e 	add.w	r5, r7, #14
 800eb60:	f107 0410 	add.w	r4, r7, #16
 800eb64:	f107 0012 	add.w	r0, r7, #18
 800eb68:	6979      	ldr	r1, [r7, #20]
 800eb6a:	9102      	str	r1, [sp, #8]
 800eb6c:	9201      	str	r2, [sp, #4]
 800eb6e:	9300      	str	r3, [sp, #0]
 800eb70:	4633      	mov	r3, r6
 800eb72:	462a      	mov	r2, r5
 800eb74:	4621      	mov	r1, r4
 800eb76:	f002 fab7 	bl	80110e8 <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eb7a:	7afb      	ldrb	r3, [r7, #11]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <pass_maker_Dijkstra+0x102>
 800eb80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb84:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eb86:	7abb      	ldrb	r3, [r7, #10]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d002      	beq.n	800eb92 <pass_maker_Dijkstra+0x10e>
 800eb8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb90:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eb92:	7a7b      	ldrb	r3, [r7, #9]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <pass_maker_Dijkstra+0x11a>
 800eb98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb9c:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800eb9e:	8a7b      	ldrh	r3, [r7, #18]
 800eba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eba4:	4293      	cmp	r3, r2
 800eba6:	d10e      	bne.n	800ebc6 <pass_maker_Dijkstra+0x142>
 800eba8:	8a3b      	ldrh	r3, [r7, #16]
 800ebaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d109      	bne.n	800ebc6 <pass_maker_Dijkstra+0x142>
 800ebb2:	89bb      	ldrh	r3, [r7, #12]
 800ebb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	d104      	bne.n	800ebc6 <pass_maker_Dijkstra+0x142>
 800ebbc:	89fb      	ldrh	r3, [r7, #14]
 800ebbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ebc2:	4293      	cmp	r3, r2
 800ebc4:	d079      	beq.n	800ecba <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ebc6:	8a7a      	ldrh	r2, [r7, #18]
 800ebc8:	8a3b      	ldrh	r3, [r7, #16]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d822      	bhi.n	800ec14 <pass_maker_Dijkstra+0x190>
 800ebce:	8a7a      	ldrh	r2, [r7, #18]
 800ebd0:	89bb      	ldrh	r3, [r7, #12]
 800ebd2:	429a      	cmp	r2, r3
 800ebd4:	d81e      	bhi.n	800ec14 <pass_maker_Dijkstra+0x190>
 800ebd6:	8a7a      	ldrh	r2, [r7, #18]
 800ebd8:	89fb      	ldrh	r3, [r7, #14]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d81a      	bhi.n	800ec14 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800ebde:	4b39      	ldr	r3, [pc, #228]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	461a      	mov	r2, r3
 800ebe4:	4b38      	ldr	r3, [pc, #224]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800ebe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	da05      	bge.n	800ebfa <pass_maker_Dijkstra+0x176>
 800ebee:	4b35      	ldr	r3, [pc, #212]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ebf0:	881b      	ldrh	r3, [r3, #0]
 800ebf2:	3301      	adds	r3, #1
 800ebf4:	b29a      	uxth	r2, r3
 800ebf6:	4b33      	ldr	r3, [pc, #204]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ebf8:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800ebfa:	4b32      	ldr	r3, [pc, #200]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ebfc:	881b      	ldrh	r3, [r3, #0]
 800ebfe:	461a      	mov	r2, r3
 800ec00:	4b31      	ldr	r3, [pc, #196]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800ec02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec06:	4a2f      	ldr	r2, [pc, #188]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec08:	8812      	ldrh	r2, [r2, #0]
 800ec0a:	4611      	mov	r1, r2
 800ec0c:	3302      	adds	r3, #2
 800ec0e:	4a2e      	ldr	r2, [pc, #184]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800ec10:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ec14:	8a3a      	ldrh	r2, [r7, #16]
 800ec16:	8a7b      	ldrh	r3, [r7, #18]
 800ec18:	429a      	cmp	r2, r3
 800ec1a:	d218      	bcs.n	800ec4e <pass_maker_Dijkstra+0x1ca>
 800ec1c:	8a3a      	ldrh	r2, [r7, #16]
 800ec1e:	89bb      	ldrh	r3, [r7, #12]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d814      	bhi.n	800ec4e <pass_maker_Dijkstra+0x1ca>
 800ec24:	8a3a      	ldrh	r2, [r7, #16]
 800ec26:	89fb      	ldrh	r3, [r7, #14]
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d810      	bhi.n	800ec4e <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800ec2c:	4b25      	ldr	r3, [pc, #148]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	3301      	adds	r3, #1
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	4b23      	ldr	r3, [pc, #140]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec36:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -2;
 800ec38:	4b22      	ldr	r3, [pc, #136]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec3a:	881b      	ldrh	r3, [r3, #0]
 800ec3c:	4619      	mov	r1, r3
 800ec3e:	4b22      	ldr	r3, [pc, #136]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800ec40:	f06f 0201 	mvn.w	r2, #1
 800ec44:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	3301      	adds	r3, #1
 800ec4c:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ec4e:	89ba      	ldrh	r2, [r7, #12]
 800ec50:	8a7b      	ldrh	r3, [r7, #18]
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d218      	bcs.n	800ec88 <pass_maker_Dijkstra+0x204>
 800ec56:	89ba      	ldrh	r2, [r7, #12]
 800ec58:	8a3b      	ldrh	r3, [r7, #16]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d214      	bcs.n	800ec88 <pass_maker_Dijkstra+0x204>
 800ec5e:	89ba      	ldrh	r2, [r7, #12]
 800ec60:	89fb      	ldrh	r3, [r7, #14]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d810      	bhi.n	800ec88 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800ec66:	4b17      	ldr	r3, [pc, #92]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	4b15      	ldr	r3, [pc, #84]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec70:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -3;
 800ec72:	4b14      	ldr	r3, [pc, #80]	; (800ecc4 <pass_maker_Dijkstra+0x240>)
 800ec74:	881b      	ldrh	r3, [r3, #0]
 800ec76:	4619      	mov	r1, r3
 800ec78:	4b13      	ldr	r3, [pc, #76]	; (800ecc8 <pass_maker_Dijkstra+0x244>)
 800ec7a:	f06f 0202 	mvn.w	r2, #2
 800ec7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800ec82:	697b      	ldr	r3, [r7, #20]
 800ec84:	3b01      	subs	r3, #1
 800ec86:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	2b05      	cmp	r3, #5
 800ec8c:	d101      	bne.n	800ec92 <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	2b06      	cmp	r3, #6
 800ec96:	d101      	bne.n	800ec9c <pass_maker_Dijkstra+0x218>
			direction = 2;
 800ec98:	2302      	movs	r3, #2
 800ec9a:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800ec9c:	697b      	ldr	r3, [r7, #20]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d101      	bne.n	800eca6 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800eca2:	2304      	movs	r3, #4
 800eca4:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecac:	f47f aefd 	bne.w	800eaaa <pass_maker_Dijkstra+0x26>
			direction = 3;
 800ecb0:	2303      	movs	r3, #3
 800ecb2:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800ecb4:	e6f9      	b.n	800eaaa <pass_maker_Dijkstra+0x26>
					break;
 800ecb6:	bf00      	nop
 800ecb8:	e000      	b.n	800ecbc <pass_maker_Dijkstra+0x238>
			break;
 800ecba:	bf00      	nop
		}

	}
}
 800ecbc:	bf00      	nop
 800ecbe:	371c      	adds	r7, #28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc4:	2000082c 	.word	0x2000082c
 800ecc8:	20000834 	.word	0x20000834
 800eccc:	00000000 	.word	0x00000000

0800ecd0 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800ecd0:	b5b0      	push	{r4, r5, r7, lr}
 800ecd2:	b0e2      	sub	sp, #392	; 0x188
 800ecd4:	af50      	add	r7, sp, #320	; 0x140
 800ecd6:	ed87 0a05 	vstr	s0, [r7, #20]
 800ecda:	edc7 0a04 	vstr	s1, [r7, #16]
 800ecde:	60f8      	str	r0, [r7, #12]
 800ece0:	4608      	mov	r0, r1
 800ece2:	4611      	mov	r1, r2
 800ece4:	461a      	mov	r2, r3
 800ece6:	ed87 1a01 	vstr	s2, [r7, #4]
 800ecea:	4603      	mov	r3, r0
 800ecec:	72fb      	strb	r3, [r7, #11]
 800ecee:	460b      	mov	r3, r1
 800ecf0:	72bb      	strb	r3, [r7, #10]
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800ecf6:	f06f 0301 	mvn.w	r3, #1
 800ecfa:	643b      	str	r3, [r7, #64]	; 0x40

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800ed00:	2300      	movs	r3, #0
 800ed02:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800ed08:	2300      	movs	r3, #0
 800ed0a:	77bb      	strb	r3, [r7, #30]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed10:	e007      	b.n	800ed22 <run_shortest+0x52>
 800ed12:	4a07      	ldr	r2, [pc, #28]	; (800ed30 <run_shortest+0x60>)
 800ed14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed16:	2100      	movs	r1, #0
 800ed18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ed1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed1e:	3301      	adds	r3, #1
 800ed20:	637b      	str	r3, [r7, #52]	; 0x34
 800ed22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed24:	2bfe      	cmp	r3, #254	; 0xfe
 800ed26:	ddf4      	ble.n	800ed12 <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800ed28:	2300      	movs	r3, #0
 800ed2a:	633b      	str	r3, [r7, #48]	; 0x30
 800ed2c:	e077      	b.n	800ee1e <run_shortest+0x14e>
 800ed2e:	bf00      	nop
 800ed30:	20000834 	.word	0x20000834
		record.row[i] = wall.row[i];
 800ed34:	4aa9      	ldr	r2, [pc, #676]	; (800efdc <run_shortest+0x30c>)
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ed3c:	4aa8      	ldr	r2, [pc, #672]	; (800efe0 <run_shortest+0x310>)
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800ed44:	4aa5      	ldr	r2, [pc, #660]	; (800efdc <run_shortest+0x30c>)
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	330c      	adds	r3, #12
 800ed4a:	005b      	lsls	r3, r3, #1
 800ed4c:	4413      	add	r3, r2
 800ed4e:	88d9      	ldrh	r1, [r3, #6]
 800ed50:	4aa3      	ldr	r2, [pc, #652]	; (800efe0 <run_shortest+0x310>)
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	330c      	adds	r3, #12
 800ed56:	005b      	lsls	r3, r3, #1
 800ed58:	4413      	add	r3, r2
 800ed5a:	460a      	mov	r2, r1
 800ed5c:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800ed5e:	4a9f      	ldr	r2, [pc, #636]	; (800efdc <run_shortest+0x30c>)
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	331c      	adds	r3, #28
 800ed64:	005b      	lsls	r3, r3, #1
 800ed66:	4413      	add	r3, r2
 800ed68:	8899      	ldrh	r1, [r3, #4]
 800ed6a:	4a9d      	ldr	r2, [pc, #628]	; (800efe0 <run_shortest+0x310>)
 800ed6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6e:	331c      	adds	r3, #28
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4413      	add	r3, r2
 800ed74:	460a      	mov	r2, r1
 800ed76:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800ed78:	4a98      	ldr	r2, [pc, #608]	; (800efdc <run_shortest+0x30c>)
 800ed7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7c:	332c      	adds	r3, #44	; 0x2c
 800ed7e:	005b      	lsls	r3, r3, #1
 800ed80:	4413      	add	r3, r2
 800ed82:	8859      	ldrh	r1, [r3, #2]
 800ed84:	4a96      	ldr	r2, [pc, #600]	; (800efe0 <run_shortest+0x310>)
 800ed86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed88:	332c      	adds	r3, #44	; 0x2c
 800ed8a:	005b      	lsls	r3, r3, #1
 800ed8c:	4413      	add	r3, r2
 800ed8e:	460a      	mov	r2, r1
 800ed90:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800ed92:	4a92      	ldr	r2, [pc, #584]	; (800efdc <run_shortest+0x30c>)
 800ed94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed96:	331c      	adds	r3, #28
 800ed98:	005b      	lsls	r3, r3, #1
 800ed9a:	4413      	add	r3, r2
 800ed9c:	889b      	ldrh	r3, [r3, #4]
 800ed9e:	43db      	mvns	r3, r3
 800eda0:	b299      	uxth	r1, r3
 800eda2:	4a8e      	ldr	r2, [pc, #568]	; (800efdc <run_shortest+0x30c>)
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	331c      	adds	r3, #28
 800eda8:	005b      	lsls	r3, r3, #1
 800edaa:	4413      	add	r3, r2
 800edac:	460a      	mov	r2, r1
 800edae:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800edb0:	4a8a      	ldr	r2, [pc, #552]	; (800efdc <run_shortest+0x30c>)
 800edb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edb4:	332c      	adds	r3, #44	; 0x2c
 800edb6:	005b      	lsls	r3, r3, #1
 800edb8:	4413      	add	r3, r2
 800edba:	885b      	ldrh	r3, [r3, #2]
 800edbc:	43db      	mvns	r3, r3
 800edbe:	b299      	uxth	r1, r3
 800edc0:	4a86      	ldr	r2, [pc, #536]	; (800efdc <run_shortest+0x30c>)
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	332c      	adds	r3, #44	; 0x2c
 800edc6:	005b      	lsls	r3, r3, #1
 800edc8:	4413      	add	r3, r2
 800edca:	460a      	mov	r2, r1
 800edcc:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800edce:	4a83      	ldr	r2, [pc, #524]	; (800efdc <run_shortest+0x30c>)
 800edd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800edd6:	4981      	ldr	r1, [pc, #516]	; (800efdc <run_shortest+0x30c>)
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	331c      	adds	r3, #28
 800eddc:	005b      	lsls	r3, r3, #1
 800edde:	440b      	add	r3, r1
 800ede0:	889b      	ldrh	r3, [r3, #4]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	b299      	uxth	r1, r3
 800ede6:	4a7d      	ldr	r2, [pc, #500]	; (800efdc <run_shortest+0x30c>)
 800ede8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800edee:	4a7b      	ldr	r2, [pc, #492]	; (800efdc <run_shortest+0x30c>)
 800edf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf2:	330c      	adds	r3, #12
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	4413      	add	r3, r2
 800edf8:	88da      	ldrh	r2, [r3, #6]
 800edfa:	4978      	ldr	r1, [pc, #480]	; (800efdc <run_shortest+0x30c>)
 800edfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfe:	332c      	adds	r3, #44	; 0x2c
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	440b      	add	r3, r1
 800ee04:	885b      	ldrh	r3, [r3, #2]
 800ee06:	4313      	orrs	r3, r2
 800ee08:	b299      	uxth	r1, r3
 800ee0a:	4a74      	ldr	r2, [pc, #464]	; (800efdc <run_shortest+0x30c>)
 800ee0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0e:	330c      	adds	r3, #12
 800ee10:	005b      	lsls	r3, r3, #1
 800ee12:	4413      	add	r3, r2
 800ee14:	460a      	mov	r2, r1
 800ee16:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	633b      	str	r3, [r7, #48]	; 0x30
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee20:	2b0e      	cmp	r3, #14
 800ee22:	dd87      	ble.n	800ed34 <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800ee24:	f7ff fe2e 	bl	800ea84 <pass_maker_Dijkstra>

	pass_count = 1;
 800ee28:	4b6e      	ldr	r3, [pc, #440]	; (800efe4 <run_shortest+0x314>)
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	801a      	strh	r2, [r3, #0]
if(pass_mode==1){
 800ee2e:	7afb      	ldrb	r3, [r7, #11]
 800ee30:	2b01      	cmp	r3, #1
 800ee32:	f040 84b7 	bne.w	800f7a4 <run_shortest+0xad4>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800ee36:	4b6b      	ldr	r3, [pc, #428]	; (800efe4 <run_shortest+0x314>)
 800ee38:	881b      	ldrh	r3, [r3, #0]
 800ee3a:	461a      	mov	r2, r3
 800ee3c:	4b6a      	ldr	r3, [pc, #424]	; (800efe8 <run_shortest+0x318>)
 800ee3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f000 813c 	beq.w	800f0c0 <run_shortest+0x3f0>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800ee48:	4b66      	ldr	r3, [pc, #408]	; (800efe4 <run_shortest+0x314>)
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	4b66      	ldr	r3, [pc, #408]	; (800efe8 <run_shortest+0x318>)
 800ee50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee54:	f113 0f02 	cmn.w	r3, #2
 800ee58:	d131      	bne.n	800eebe <run_shortest+0x1ee>
 800ee5a:	4b62      	ldr	r3, [pc, #392]	; (800efe4 <run_shortest+0x314>)
 800ee5c:	881b      	ldrh	r3, [r3, #0]
 800ee5e:	3b01      	subs	r3, #1
 800ee60:	4a61      	ldr	r2, [pc, #388]	; (800efe8 <run_shortest+0x318>)
 800ee62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	dd29      	ble.n	800eebe <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800ee6a:	4b5e      	ldr	r3, [pc, #376]	; (800efe4 <run_shortest+0x314>)
 800ee6c:	881b      	ldrh	r3, [r3, #0]
 800ee6e:	3301      	adds	r3, #1
 800ee70:	4a5d      	ldr	r2, [pc, #372]	; (800efe8 <run_shortest+0x318>)
 800ee72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd21      	ble.n	800eebe <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800ee7a:	4b5a      	ldr	r3, [pc, #360]	; (800efe4 <run_shortest+0x314>)
 800ee7c:	881b      	ldrh	r3, [r3, #0]
 800ee7e:	3b01      	subs	r3, #1
 800ee80:	4a59      	ldr	r2, [pc, #356]	; (800efe8 <run_shortest+0x318>)
 800ee82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ee86:	4b57      	ldr	r3, [pc, #348]	; (800efe4 <run_shortest+0x314>)
 800ee88:	881b      	ldrh	r3, [r3, #0]
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	3a01      	subs	r2, #1
 800ee8e:	4956      	ldr	r1, [pc, #344]	; (800efe8 <run_shortest+0x318>)
 800ee90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800ee94:	4b53      	ldr	r3, [pc, #332]	; (800efe4 <run_shortest+0x314>)
 800ee96:	881b      	ldrh	r3, [r3, #0]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	4a53      	ldr	r2, [pc, #332]	; (800efe8 <run_shortest+0x318>)
 800ee9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eea0:	4b50      	ldr	r3, [pc, #320]	; (800efe4 <run_shortest+0x314>)
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	3301      	adds	r3, #1
 800eea6:	3a01      	subs	r2, #1
 800eea8:	494f      	ldr	r1, [pc, #316]	; (800efe8 <run_shortest+0x318>)
 800eeaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800eeae:	4b4d      	ldr	r3, [pc, #308]	; (800efe4 <run_shortest+0x314>)
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4b4c      	ldr	r3, [pc, #304]	; (800efe8 <run_shortest+0x318>)
 800eeb6:	f06f 0203 	mvn.w	r2, #3
 800eeba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800eebe:	4b49      	ldr	r3, [pc, #292]	; (800efe4 <run_shortest+0x314>)
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	4b48      	ldr	r3, [pc, #288]	; (800efe8 <run_shortest+0x318>)
 800eec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeca:	f113 0f03 	cmn.w	r3, #3
 800eece:	d131      	bne.n	800ef34 <run_shortest+0x264>
 800eed0:	4b44      	ldr	r3, [pc, #272]	; (800efe4 <run_shortest+0x314>)
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	3b01      	subs	r3, #1
 800eed6:	4a44      	ldr	r2, [pc, #272]	; (800efe8 <run_shortest+0x318>)
 800eed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	dd29      	ble.n	800ef34 <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800eee0:	4b40      	ldr	r3, [pc, #256]	; (800efe4 <run_shortest+0x314>)
 800eee2:	881b      	ldrh	r3, [r3, #0]
 800eee4:	3301      	adds	r3, #1
 800eee6:	4a40      	ldr	r2, [pc, #256]	; (800efe8 <run_shortest+0x318>)
 800eee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	dd21      	ble.n	800ef34 <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800eef0:	4b3c      	ldr	r3, [pc, #240]	; (800efe4 <run_shortest+0x314>)
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	3b01      	subs	r3, #1
 800eef6:	4a3c      	ldr	r2, [pc, #240]	; (800efe8 <run_shortest+0x318>)
 800eef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eefc:	4b39      	ldr	r3, [pc, #228]	; (800efe4 <run_shortest+0x314>)
 800eefe:	881b      	ldrh	r3, [r3, #0]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	3a01      	subs	r2, #1
 800ef04:	4938      	ldr	r1, [pc, #224]	; (800efe8 <run_shortest+0x318>)
 800ef06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800ef0a:	4b36      	ldr	r3, [pc, #216]	; (800efe4 <run_shortest+0x314>)
 800ef0c:	881b      	ldrh	r3, [r3, #0]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	4a35      	ldr	r2, [pc, #212]	; (800efe8 <run_shortest+0x318>)
 800ef12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ef16:	4b33      	ldr	r3, [pc, #204]	; (800efe4 <run_shortest+0x314>)
 800ef18:	881b      	ldrh	r3, [r3, #0]
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	3a01      	subs	r2, #1
 800ef1e:	4932      	ldr	r1, [pc, #200]	; (800efe8 <run_shortest+0x318>)
 800ef20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800ef24:	4b2f      	ldr	r3, [pc, #188]	; (800efe4 <run_shortest+0x314>)
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	4619      	mov	r1, r3
 800ef2a:	4b2f      	ldr	r3, [pc, #188]	; (800efe8 <run_shortest+0x318>)
 800ef2c:	f06f 0204 	mvn.w	r2, #4
 800ef30:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800ef34:	4b2b      	ldr	r3, [pc, #172]	; (800efe4 <run_shortest+0x314>)
 800ef36:	881b      	ldrh	r3, [r3, #0]
 800ef38:	3b01      	subs	r3, #1
 800ef3a:	4a2b      	ldr	r2, [pc, #172]	; (800efe8 <run_shortest+0x318>)
 800ef3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	dd43      	ble.n	800efcc <run_shortest+0x2fc>
 800ef44:	4b27      	ldr	r3, [pc, #156]	; (800efe4 <run_shortest+0x314>)
 800ef46:	881b      	ldrh	r3, [r3, #0]
 800ef48:	461a      	mov	r2, r3
 800ef4a:	4b27      	ldr	r3, [pc, #156]	; (800efe8 <run_shortest+0x318>)
 800ef4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef50:	f113 0f02 	cmn.w	r3, #2
 800ef54:	d13a      	bne.n	800efcc <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800ef56:	4b23      	ldr	r3, [pc, #140]	; (800efe4 <run_shortest+0x314>)
 800ef58:	881b      	ldrh	r3, [r3, #0]
 800ef5a:	3301      	adds	r3, #1
 800ef5c:	4a22      	ldr	r2, [pc, #136]	; (800efe8 <run_shortest+0x318>)
 800ef5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef62:	f113 0f02 	cmn.w	r3, #2
 800ef66:	d131      	bne.n	800efcc <run_shortest+0x2fc>
 800ef68:	4b1e      	ldr	r3, [pc, #120]	; (800efe4 <run_shortest+0x314>)
 800ef6a:	881b      	ldrh	r3, [r3, #0]
 800ef6c:	3302      	adds	r3, #2
 800ef6e:	4a1e      	ldr	r2, [pc, #120]	; (800efe8 <run_shortest+0x318>)
 800ef70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	dd29      	ble.n	800efcc <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800ef78:	4b1a      	ldr	r3, [pc, #104]	; (800efe4 <run_shortest+0x314>)
 800ef7a:	881b      	ldrh	r3, [r3, #0]
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	4a1a      	ldr	r2, [pc, #104]	; (800efe8 <run_shortest+0x318>)
 800ef80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ef84:	4b17      	ldr	r3, [pc, #92]	; (800efe4 <run_shortest+0x314>)
 800ef86:	881b      	ldrh	r3, [r3, #0]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	3a01      	subs	r2, #1
 800ef8c:	4916      	ldr	r1, [pc, #88]	; (800efe8 <run_shortest+0x318>)
 800ef8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800ef92:	4b14      	ldr	r3, [pc, #80]	; (800efe4 <run_shortest+0x314>)
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	4619      	mov	r1, r3
 800ef98:	4b13      	ldr	r3, [pc, #76]	; (800efe8 <run_shortest+0x318>)
 800ef9a:	f06f 0205 	mvn.w	r2, #5
 800ef9e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800efa2:	4b10      	ldr	r3, [pc, #64]	; (800efe4 <run_shortest+0x314>)
 800efa4:	881b      	ldrh	r3, [r3, #0]
 800efa6:	3301      	adds	r3, #1
 800efa8:	4a0f      	ldr	r2, [pc, #60]	; (800efe8 <run_shortest+0x318>)
 800efaa:	f04f 31ff 	mov.w	r1, #4294967295
 800efae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800efb2:	4b0c      	ldr	r3, [pc, #48]	; (800efe4 <run_shortest+0x314>)
 800efb4:	881b      	ldrh	r3, [r3, #0]
 800efb6:	3302      	adds	r3, #2
 800efb8:	4a0b      	ldr	r2, [pc, #44]	; (800efe8 <run_shortest+0x318>)
 800efba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efbe:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <run_shortest+0x314>)
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	3302      	adds	r3, #2
 800efc4:	3a01      	subs	r2, #1
 800efc6:	4908      	ldr	r1, [pc, #32]	; (800efe8 <run_shortest+0x318>)
 800efc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800efcc:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <run_shortest+0x314>)
 800efce:	881b      	ldrh	r3, [r3, #0]
 800efd0:	3b01      	subs	r3, #1
 800efd2:	4a05      	ldr	r2, [pc, #20]	; (800efe8 <run_shortest+0x318>)
 800efd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800efd8:	e008      	b.n	800efec <run_shortest+0x31c>
 800efda:	bf00      	nop
 800efdc:	20000c30 	.word	0x20000c30
 800efe0:	20000ca8 	.word	0x20000ca8
 800efe4:	2000082c 	.word	0x2000082c
 800efe8:	20000834 	.word	0x20000834
 800efec:	2b00      	cmp	r3, #0
 800efee:	dd43      	ble.n	800f078 <run_shortest+0x3a8>
 800eff0:	4b31      	ldr	r3, [pc, #196]	; (800f0b8 <run_shortest+0x3e8>)
 800eff2:	881b      	ldrh	r3, [r3, #0]
 800eff4:	461a      	mov	r2, r3
 800eff6:	4b31      	ldr	r3, [pc, #196]	; (800f0bc <run_shortest+0x3ec>)
 800eff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effc:	f113 0f03 	cmn.w	r3, #3
 800f000:	d13a      	bne.n	800f078 <run_shortest+0x3a8>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f002:	4b2d      	ldr	r3, [pc, #180]	; (800f0b8 <run_shortest+0x3e8>)
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	3301      	adds	r3, #1
 800f008:	4a2c      	ldr	r2, [pc, #176]	; (800f0bc <run_shortest+0x3ec>)
 800f00a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f00e:	f113 0f03 	cmn.w	r3, #3
 800f012:	d131      	bne.n	800f078 <run_shortest+0x3a8>
 800f014:	4b28      	ldr	r3, [pc, #160]	; (800f0b8 <run_shortest+0x3e8>)
 800f016:	881b      	ldrh	r3, [r3, #0]
 800f018:	3302      	adds	r3, #2
 800f01a:	4a28      	ldr	r2, [pc, #160]	; (800f0bc <run_shortest+0x3ec>)
 800f01c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd29      	ble.n	800f078 <run_shortest+0x3a8>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f024:	4b24      	ldr	r3, [pc, #144]	; (800f0b8 <run_shortest+0x3e8>)
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	3b01      	subs	r3, #1
 800f02a:	4a24      	ldr	r2, [pc, #144]	; (800f0bc <run_shortest+0x3ec>)
 800f02c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f030:	4b21      	ldr	r3, [pc, #132]	; (800f0b8 <run_shortest+0x3e8>)
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	3b01      	subs	r3, #1
 800f036:	3a01      	subs	r2, #1
 800f038:	4920      	ldr	r1, [pc, #128]	; (800f0bc <run_shortest+0x3ec>)
 800f03a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f03e:	4b1e      	ldr	r3, [pc, #120]	; (800f0b8 <run_shortest+0x3e8>)
 800f040:	881b      	ldrh	r3, [r3, #0]
 800f042:	4619      	mov	r1, r3
 800f044:	4b1d      	ldr	r3, [pc, #116]	; (800f0bc <run_shortest+0x3ec>)
 800f046:	f06f 0206 	mvn.w	r2, #6
 800f04a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f04e:	4b1a      	ldr	r3, [pc, #104]	; (800f0b8 <run_shortest+0x3e8>)
 800f050:	881b      	ldrh	r3, [r3, #0]
 800f052:	3301      	adds	r3, #1
 800f054:	4a19      	ldr	r2, [pc, #100]	; (800f0bc <run_shortest+0x3ec>)
 800f056:	f04f 31ff 	mov.w	r1, #4294967295
 800f05a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f05e:	4b16      	ldr	r3, [pc, #88]	; (800f0b8 <run_shortest+0x3e8>)
 800f060:	881b      	ldrh	r3, [r3, #0]
 800f062:	3302      	adds	r3, #2
 800f064:	4a15      	ldr	r2, [pc, #84]	; (800f0bc <run_shortest+0x3ec>)
 800f066:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f06a:	4b13      	ldr	r3, [pc, #76]	; (800f0b8 <run_shortest+0x3e8>)
 800f06c:	881b      	ldrh	r3, [r3, #0]
 800f06e:	3302      	adds	r3, #2
 800f070:	3a01      	subs	r2, #1
 800f072:	4912      	ldr	r1, [pc, #72]	; (800f0bc <run_shortest+0x3ec>)
 800f074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f078:	4b0f      	ldr	r3, [pc, #60]	; (800f0b8 <run_shortest+0x3e8>)
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	461a      	mov	r2, r3
 800f07e:	4b0f      	ldr	r3, [pc, #60]	; (800f0bc <run_shortest+0x3ec>)
 800f080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f084:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f088:	4b0b      	ldr	r3, [pc, #44]	; (800f0b8 <run_shortest+0x3e8>)
 800f08a:	881b      	ldrh	r3, [r3, #0]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	4a0b      	ldr	r2, [pc, #44]	; (800f0bc <run_shortest+0x3ec>)
 800f090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d107      	bne.n	800f0a8 <run_shortest+0x3d8>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f098:	4b07      	ldr	r3, [pc, #28]	; (800f0b8 <run_shortest+0x3e8>)
 800f09a:	881b      	ldrh	r3, [r3, #0]
 800f09c:	3b01      	subs	r3, #1
 800f09e:	4a07      	ldr	r2, [pc, #28]	; (800f0bc <run_shortest+0x3ec>)
 800f0a0:	f04f 31ff 	mov.w	r1, #4294967295
 800f0a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f0a8:	4b03      	ldr	r3, [pc, #12]	; (800f0b8 <run_shortest+0x3e8>)
 800f0aa:	881b      	ldrh	r3, [r3, #0]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	b29a      	uxth	r2, r3
 800f0b0:	4b01      	ldr	r3, [pc, #4]	; (800f0b8 <run_shortest+0x3e8>)
 800f0b2:	801a      	strh	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f0b4:	e6bf      	b.n	800ee36 <run_shortest+0x166>
 800f0b6:	bf00      	nop
 800f0b8:	2000082c 	.word	0x2000082c
 800f0bc:	20000834 	.word	0x20000834
			break;
 800f0c0:	bf00      	nop
	}

	pass_count = 1;
 800f0c2:	4b8c      	ldr	r3, [pc, #560]	; (800f2f4 <run_shortest+0x624>)
 800f0c4:	2201      	movs	r2, #1
 800f0c6:	801a      	strh	r2, [r3, #0]
	if (slant_mode == 1) {
 800f0c8:	7a7b      	ldrb	r3, [r7, #9]
 800f0ca:	2b01      	cmp	r3, #1
 800f0cc:	f040 836a 	bne.w	800f7a4 <run_shortest+0xad4>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f0d0:	4b88      	ldr	r3, [pc, #544]	; (800f2f4 <run_shortest+0x624>)
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	4b88      	ldr	r3, [pc, #544]	; (800f2f8 <run_shortest+0x628>)
 800f0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f000 81f1 	beq.w	800f4c4 <run_shortest+0x7f4>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f0e2:	4b84      	ldr	r3, [pc, #528]	; (800f2f4 <run_shortest+0x624>)
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	3b01      	subs	r3, #1
 800f0e8:	4a83      	ldr	r2, [pc, #524]	; (800f2f8 <run_shortest+0x628>)
 800f0ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	f340 81dc 	ble.w	800f4ac <run_shortest+0x7dc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f0f4:	4b7f      	ldr	r3, [pc, #508]	; (800f2f4 <run_shortest+0x624>)
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4b7f      	ldr	r3, [pc, #508]	; (800f2f8 <run_shortest+0x628>)
 800f0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f100:	f113 0f02 	cmn.w	r3, #2
 800f104:	d009      	beq.n	800f11a <run_shortest+0x44a>
 800f106:	4b7b      	ldr	r3, [pc, #492]	; (800f2f4 <run_shortest+0x624>)
 800f108:	881b      	ldrh	r3, [r3, #0]
 800f10a:	461a      	mov	r2, r3
 800f10c:	4b7a      	ldr	r3, [pc, #488]	; (800f2f8 <run_shortest+0x628>)
 800f10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f112:	f113 0f03 	cmn.w	r3, #3
 800f116:	f040 81c9 	bne.w	800f4ac <run_shortest+0x7dc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f11a:	4b76      	ldr	r3, [pc, #472]	; (800f2f4 <run_shortest+0x624>)
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	461a      	mov	r2, r3
 800f120:	4b75      	ldr	r3, [pc, #468]	; (800f2f8 <run_shortest+0x628>)
 800f122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f126:	f113 0f02 	cmn.w	r3, #2
 800f12a:	d12d      	bne.n	800f188 <run_shortest+0x4b8>
 800f12c:	4b71      	ldr	r3, [pc, #452]	; (800f2f4 <run_shortest+0x624>)
 800f12e:	881b      	ldrh	r3, [r3, #0]
 800f130:	3301      	adds	r3, #1
 800f132:	4a71      	ldr	r2, [pc, #452]	; (800f2f8 <run_shortest+0x628>)
 800f134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f138:	f113 0f03 	cmn.w	r3, #3
 800f13c:	d124      	bne.n	800f188 <run_shortest+0x4b8>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f13e:	4b6d      	ldr	r3, [pc, #436]	; (800f2f4 <run_shortest+0x624>)
 800f140:	881b      	ldrh	r3, [r3, #0]
 800f142:	3b01      	subs	r3, #1
 800f144:	4a6c      	ldr	r2, [pc, #432]	; (800f2f8 <run_shortest+0x628>)
 800f146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f14a:	4b6a      	ldr	r3, [pc, #424]	; (800f2f4 <run_shortest+0x624>)
 800f14c:	881b      	ldrh	r3, [r3, #0]
 800f14e:	3b01      	subs	r3, #1
 800f150:	3a01      	subs	r2, #1
 800f152:	4969      	ldr	r1, [pc, #420]	; (800f2f8 <run_shortest+0x628>)
 800f154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f158:	4b66      	ldr	r3, [pc, #408]	; (800f2f4 <run_shortest+0x624>)
 800f15a:	881b      	ldrh	r3, [r3, #0]
 800f15c:	3b01      	subs	r3, #1
 800f15e:	4a66      	ldr	r2, [pc, #408]	; (800f2f8 <run_shortest+0x628>)
 800f160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d107      	bne.n	800f178 <run_shortest+0x4a8>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f168:	4b62      	ldr	r3, [pc, #392]	; (800f2f4 <run_shortest+0x624>)
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	3b01      	subs	r3, #1
 800f16e:	4a62      	ldr	r2, [pc, #392]	; (800f2f8 <run_shortest+0x628>)
 800f170:	f04f 31ff 	mov.w	r1, #4294967295
 800f174:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f178:	4b5e      	ldr	r3, [pc, #376]	; (800f2f4 <run_shortest+0x624>)
 800f17a:	881b      	ldrh	r3, [r3, #0]
 800f17c:	4619      	mov	r1, r3
 800f17e:	4b5e      	ldr	r3, [pc, #376]	; (800f2f8 <run_shortest+0x628>)
 800f180:	f06f 0207 	mvn.w	r2, #7
 800f184:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f188:	4b5a      	ldr	r3, [pc, #360]	; (800f2f4 <run_shortest+0x624>)
 800f18a:	881b      	ldrh	r3, [r3, #0]
 800f18c:	461a      	mov	r2, r3
 800f18e:	4b5a      	ldr	r3, [pc, #360]	; (800f2f8 <run_shortest+0x628>)
 800f190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f194:	f113 0f03 	cmn.w	r3, #3
 800f198:	d12d      	bne.n	800f1f6 <run_shortest+0x526>
 800f19a:	4b56      	ldr	r3, [pc, #344]	; (800f2f4 <run_shortest+0x624>)
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	4a55      	ldr	r2, [pc, #340]	; (800f2f8 <run_shortest+0x628>)
 800f1a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1a6:	f113 0f02 	cmn.w	r3, #2
 800f1aa:	d124      	bne.n	800f1f6 <run_shortest+0x526>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f1ac:	4b51      	ldr	r3, [pc, #324]	; (800f2f4 <run_shortest+0x624>)
 800f1ae:	881b      	ldrh	r3, [r3, #0]
 800f1b0:	3b01      	subs	r3, #1
 800f1b2:	4a51      	ldr	r2, [pc, #324]	; (800f2f8 <run_shortest+0x628>)
 800f1b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1b8:	4b4e      	ldr	r3, [pc, #312]	; (800f2f4 <run_shortest+0x624>)
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	3b01      	subs	r3, #1
 800f1be:	3a01      	subs	r2, #1
 800f1c0:	494d      	ldr	r1, [pc, #308]	; (800f2f8 <run_shortest+0x628>)
 800f1c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f1c6:	4b4b      	ldr	r3, [pc, #300]	; (800f2f4 <run_shortest+0x624>)
 800f1c8:	881b      	ldrh	r3, [r3, #0]
 800f1ca:	3b01      	subs	r3, #1
 800f1cc:	4a4a      	ldr	r2, [pc, #296]	; (800f2f8 <run_shortest+0x628>)
 800f1ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d107      	bne.n	800f1e6 <run_shortest+0x516>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f1d6:	4b47      	ldr	r3, [pc, #284]	; (800f2f4 <run_shortest+0x624>)
 800f1d8:	881b      	ldrh	r3, [r3, #0]
 800f1da:	3b01      	subs	r3, #1
 800f1dc:	4a46      	ldr	r2, [pc, #280]	; (800f2f8 <run_shortest+0x628>)
 800f1de:	f04f 31ff 	mov.w	r1, #4294967295
 800f1e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f1e6:	4b43      	ldr	r3, [pc, #268]	; (800f2f4 <run_shortest+0x624>)
 800f1e8:	881b      	ldrh	r3, [r3, #0]
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	4b42      	ldr	r3, [pc, #264]	; (800f2f8 <run_shortest+0x628>)
 800f1ee:	f06f 0208 	mvn.w	r2, #8
 800f1f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f1f6:	4b3f      	ldr	r3, [pc, #252]	; (800f2f4 <run_shortest+0x624>)
 800f1f8:	881b      	ldrh	r3, [r3, #0]
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	4b3e      	ldr	r3, [pc, #248]	; (800f2f8 <run_shortest+0x628>)
 800f1fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f202:	f113 0f02 	cmn.w	r3, #2
 800f206:	d135      	bne.n	800f274 <run_shortest+0x5a4>
 800f208:	4b3a      	ldr	r3, [pc, #232]	; (800f2f4 <run_shortest+0x624>)
 800f20a:	881b      	ldrh	r3, [r3, #0]
 800f20c:	3301      	adds	r3, #1
 800f20e:	4a3a      	ldr	r2, [pc, #232]	; (800f2f8 <run_shortest+0x628>)
 800f210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f214:	f113 0f02 	cmn.w	r3, #2
 800f218:	d12c      	bne.n	800f274 <run_shortest+0x5a4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f21a:	4b36      	ldr	r3, [pc, #216]	; (800f2f4 <run_shortest+0x624>)
 800f21c:	881b      	ldrh	r3, [r3, #0]
 800f21e:	3b01      	subs	r3, #1
 800f220:	4a35      	ldr	r2, [pc, #212]	; (800f2f8 <run_shortest+0x628>)
 800f222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f226:	4b33      	ldr	r3, [pc, #204]	; (800f2f4 <run_shortest+0x624>)
 800f228:	881b      	ldrh	r3, [r3, #0]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	3a01      	subs	r2, #1
 800f22e:	4932      	ldr	r1, [pc, #200]	; (800f2f8 <run_shortest+0x628>)
 800f230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f234:	4b2f      	ldr	r3, [pc, #188]	; (800f2f4 <run_shortest+0x624>)
 800f236:	881b      	ldrh	r3, [r3, #0]
 800f238:	3b01      	subs	r3, #1
 800f23a:	4a2f      	ldr	r2, [pc, #188]	; (800f2f8 <run_shortest+0x628>)
 800f23c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d107      	bne.n	800f254 <run_shortest+0x584>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f244:	4b2b      	ldr	r3, [pc, #172]	; (800f2f4 <run_shortest+0x624>)
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	3b01      	subs	r3, #1
 800f24a:	4a2b      	ldr	r2, [pc, #172]	; (800f2f8 <run_shortest+0x628>)
 800f24c:	f04f 31ff 	mov.w	r1, #4294967295
 800f250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f254:	4b27      	ldr	r3, [pc, #156]	; (800f2f4 <run_shortest+0x624>)
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	4619      	mov	r1, r3
 800f25a:	4b27      	ldr	r3, [pc, #156]	; (800f2f8 <run_shortest+0x628>)
 800f25c:	f06f 0209 	mvn.w	r2, #9
 800f260:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f264:	4b23      	ldr	r3, [pc, #140]	; (800f2f4 <run_shortest+0x624>)
 800f266:	881b      	ldrh	r3, [r3, #0]
 800f268:	3301      	adds	r3, #1
 800f26a:	4a23      	ldr	r2, [pc, #140]	; (800f2f8 <run_shortest+0x628>)
 800f26c:	f04f 31ff 	mov.w	r1, #4294967295
 800f270:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f274:	4b1f      	ldr	r3, [pc, #124]	; (800f2f4 <run_shortest+0x624>)
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	461a      	mov	r2, r3
 800f27a:	4b1f      	ldr	r3, [pc, #124]	; (800f2f8 <run_shortest+0x628>)
 800f27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f280:	f113 0f03 	cmn.w	r3, #3
 800f284:	d140      	bne.n	800f308 <run_shortest+0x638>
 800f286:	4b1b      	ldr	r3, [pc, #108]	; (800f2f4 <run_shortest+0x624>)
 800f288:	881b      	ldrh	r3, [r3, #0]
 800f28a:	3301      	adds	r3, #1
 800f28c:	4a1a      	ldr	r2, [pc, #104]	; (800f2f8 <run_shortest+0x628>)
 800f28e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f292:	f113 0f03 	cmn.w	r3, #3
 800f296:	d137      	bne.n	800f308 <run_shortest+0x638>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f298:	4b16      	ldr	r3, [pc, #88]	; (800f2f4 <run_shortest+0x624>)
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4a16      	ldr	r2, [pc, #88]	; (800f2f8 <run_shortest+0x628>)
 800f2a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2a4:	4b13      	ldr	r3, [pc, #76]	; (800f2f4 <run_shortest+0x624>)
 800f2a6:	881b      	ldrh	r3, [r3, #0]
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	3a01      	subs	r2, #1
 800f2ac:	4912      	ldr	r1, [pc, #72]	; (800f2f8 <run_shortest+0x628>)
 800f2ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f2b2:	4b10      	ldr	r3, [pc, #64]	; (800f2f4 <run_shortest+0x624>)
 800f2b4:	881b      	ldrh	r3, [r3, #0]
 800f2b6:	3b01      	subs	r3, #1
 800f2b8:	4a0f      	ldr	r2, [pc, #60]	; (800f2f8 <run_shortest+0x628>)
 800f2ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d107      	bne.n	800f2d2 <run_shortest+0x602>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f2c2:	4b0c      	ldr	r3, [pc, #48]	; (800f2f4 <run_shortest+0x624>)
 800f2c4:	881b      	ldrh	r3, [r3, #0]
 800f2c6:	3b01      	subs	r3, #1
 800f2c8:	4a0b      	ldr	r2, [pc, #44]	; (800f2f8 <run_shortest+0x628>)
 800f2ca:	f04f 31ff 	mov.w	r1, #4294967295
 800f2ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f2d2:	4b08      	ldr	r3, [pc, #32]	; (800f2f4 <run_shortest+0x624>)
 800f2d4:	881b      	ldrh	r3, [r3, #0]
 800f2d6:	4619      	mov	r1, r3
 800f2d8:	4b07      	ldr	r3, [pc, #28]	; (800f2f8 <run_shortest+0x628>)
 800f2da:	f06f 020a 	mvn.w	r2, #10
 800f2de:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f2e2:	4b04      	ldr	r3, [pc, #16]	; (800f2f4 <run_shortest+0x624>)
 800f2e4:	881b      	ldrh	r3, [r3, #0]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	4a03      	ldr	r2, [pc, #12]	; (800f2f8 <run_shortest+0x628>)
 800f2ea:	f04f 31ff 	mov.w	r1, #4294967295
 800f2ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f2f2:	e009      	b.n	800f308 <run_shortest+0x638>
 800f2f4:	2000082c 	.word	0x2000082c
 800f2f8:	20000834 	.word	0x20000834
						pass_count++;
 800f2fc:	4b6f      	ldr	r3, [pc, #444]	; (800f4bc <run_shortest+0x7ec>)
 800f2fe:	881b      	ldrh	r3, [r3, #0]
 800f300:	3301      	adds	r3, #1
 800f302:	b29a      	uxth	r2, r3
 800f304:	4b6d      	ldr	r3, [pc, #436]	; (800f4bc <run_shortest+0x7ec>)
 800f306:	801a      	strh	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f308:	4b6c      	ldr	r3, [pc, #432]	; (800f4bc <run_shortest+0x7ec>)
 800f30a:	881b      	ldrh	r3, [r3, #0]
 800f30c:	461a      	mov	r2, r3
 800f30e:	4b6c      	ldr	r3, [pc, #432]	; (800f4c0 <run_shortest+0x7f0>)
 800f310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f314:	2b00      	cmp	r3, #0
 800f316:	dbf1      	blt.n	800f2fc <run_shortest+0x62c>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f318:	4b68      	ldr	r3, [pc, #416]	; (800f4bc <run_shortest+0x7ec>)
 800f31a:	881b      	ldrh	r3, [r3, #0]
 800f31c:	3b01      	subs	r3, #1
 800f31e:	4a68      	ldr	r2, [pc, #416]	; (800f4c0 <run_shortest+0x7f0>)
 800f320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f324:	f113 0f02 	cmn.w	r3, #2
 800f328:	d15b      	bne.n	800f3e2 <run_shortest+0x712>
						if (pass[pass_count - 2] == -2) {
 800f32a:	4b64      	ldr	r3, [pc, #400]	; (800f4bc <run_shortest+0x7ec>)
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	3b02      	subs	r3, #2
 800f330:	4a63      	ldr	r2, [pc, #396]	; (800f4c0 <run_shortest+0x7f0>)
 800f332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f336:	f113 0f02 	cmn.w	r3, #2
 800f33a:	d12d      	bne.n	800f398 <run_shortest+0x6c8>
							pass[pass_count] = pass[pass_count] - 1;
 800f33c:	4b5f      	ldr	r3, [pc, #380]	; (800f4bc <run_shortest+0x7ec>)
 800f33e:	881b      	ldrh	r3, [r3, #0]
 800f340:	461a      	mov	r2, r3
 800f342:	4b5f      	ldr	r3, [pc, #380]	; (800f4c0 <run_shortest+0x7f0>)
 800f344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f348:	4a5c      	ldr	r2, [pc, #368]	; (800f4bc <run_shortest+0x7ec>)
 800f34a:	8812      	ldrh	r2, [r2, #0]
 800f34c:	4611      	mov	r1, r2
 800f34e:	3b01      	subs	r3, #1
 800f350:	4a5b      	ldr	r2, [pc, #364]	; (800f4c0 <run_shortest+0x7f0>)
 800f352:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f356:	4b59      	ldr	r3, [pc, #356]	; (800f4bc <run_shortest+0x7ec>)
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	4b58      	ldr	r3, [pc, #352]	; (800f4c0 <run_shortest+0x7f0>)
 800f35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d107      	bne.n	800f376 <run_shortest+0x6a6>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f366:	4b55      	ldr	r3, [pc, #340]	; (800f4bc <run_shortest+0x7ec>)
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	4619      	mov	r1, r3
 800f36c:	4b54      	ldr	r3, [pc, #336]	; (800f4c0 <run_shortest+0x7f0>)
 800f36e:	f04f 32ff 	mov.w	r2, #4294967295
 800f372:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f376:	4b51      	ldr	r3, [pc, #324]	; (800f4bc <run_shortest+0x7ec>)
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	3b01      	subs	r3, #1
 800f37c:	4a50      	ldr	r2, [pc, #320]	; (800f4c0 <run_shortest+0x7f0>)
 800f37e:	f06f 010d 	mvn.w	r1, #13
 800f382:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f386:	4b4d      	ldr	r3, [pc, #308]	; (800f4bc <run_shortest+0x7ec>)
 800f388:	881b      	ldrh	r3, [r3, #0]
 800f38a:	3b02      	subs	r3, #2
 800f38c:	4a4c      	ldr	r2, [pc, #304]	; (800f4c0 <run_shortest+0x7f0>)
 800f38e:	f04f 31ff 	mov.w	r1, #4294967295
 800f392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f396:	e024      	b.n	800f3e2 <run_shortest+0x712>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f398:	4b48      	ldr	r3, [pc, #288]	; (800f4bc <run_shortest+0x7ec>)
 800f39a:	881b      	ldrh	r3, [r3, #0]
 800f39c:	461a      	mov	r2, r3
 800f39e:	4b48      	ldr	r3, [pc, #288]	; (800f4c0 <run_shortest+0x7f0>)
 800f3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a4:	4a45      	ldr	r2, [pc, #276]	; (800f4bc <run_shortest+0x7ec>)
 800f3a6:	8812      	ldrh	r2, [r2, #0]
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	3b01      	subs	r3, #1
 800f3ac:	4a44      	ldr	r2, [pc, #272]	; (800f4c0 <run_shortest+0x7f0>)
 800f3ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f3b2:	4b42      	ldr	r3, [pc, #264]	; (800f4bc <run_shortest+0x7ec>)
 800f3b4:	881b      	ldrh	r3, [r3, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	4b41      	ldr	r3, [pc, #260]	; (800f4c0 <run_shortest+0x7f0>)
 800f3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d107      	bne.n	800f3d2 <run_shortest+0x702>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f3c2:	4b3e      	ldr	r3, [pc, #248]	; (800f4bc <run_shortest+0x7ec>)
 800f3c4:	881b      	ldrh	r3, [r3, #0]
 800f3c6:	4619      	mov	r1, r3
 800f3c8:	4b3d      	ldr	r3, [pc, #244]	; (800f4c0 <run_shortest+0x7f0>)
 800f3ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ce:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f3d2:	4b3a      	ldr	r3, [pc, #232]	; (800f4bc <run_shortest+0x7ec>)
 800f3d4:	881b      	ldrh	r3, [r3, #0]
 800f3d6:	3b01      	subs	r3, #1
 800f3d8:	4a39      	ldr	r2, [pc, #228]	; (800f4c0 <run_shortest+0x7f0>)
 800f3da:	f06f 010b 	mvn.w	r1, #11
 800f3de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f3e2:	4b36      	ldr	r3, [pc, #216]	; (800f4bc <run_shortest+0x7ec>)
 800f3e4:	881b      	ldrh	r3, [r3, #0]
 800f3e6:	3b01      	subs	r3, #1
 800f3e8:	4a35      	ldr	r2, [pc, #212]	; (800f4c0 <run_shortest+0x7f0>)
 800f3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ee:	f113 0f03 	cmn.w	r3, #3
 800f3f2:	d15b      	bne.n	800f4ac <run_shortest+0x7dc>
						if (pass[pass_count - 2] == -3) {
 800f3f4:	4b31      	ldr	r3, [pc, #196]	; (800f4bc <run_shortest+0x7ec>)
 800f3f6:	881b      	ldrh	r3, [r3, #0]
 800f3f8:	3b02      	subs	r3, #2
 800f3fa:	4a31      	ldr	r2, [pc, #196]	; (800f4c0 <run_shortest+0x7f0>)
 800f3fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f400:	f113 0f03 	cmn.w	r3, #3
 800f404:	d12d      	bne.n	800f462 <run_shortest+0x792>
							pass[pass_count] = pass[pass_count] - 1;
 800f406:	4b2d      	ldr	r3, [pc, #180]	; (800f4bc <run_shortest+0x7ec>)
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	461a      	mov	r2, r3
 800f40c:	4b2c      	ldr	r3, [pc, #176]	; (800f4c0 <run_shortest+0x7f0>)
 800f40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f412:	4a2a      	ldr	r2, [pc, #168]	; (800f4bc <run_shortest+0x7ec>)
 800f414:	8812      	ldrh	r2, [r2, #0]
 800f416:	4611      	mov	r1, r2
 800f418:	3b01      	subs	r3, #1
 800f41a:	4a29      	ldr	r2, [pc, #164]	; (800f4c0 <run_shortest+0x7f0>)
 800f41c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f420:	4b26      	ldr	r3, [pc, #152]	; (800f4bc <run_shortest+0x7ec>)
 800f422:	881b      	ldrh	r3, [r3, #0]
 800f424:	461a      	mov	r2, r3
 800f426:	4b26      	ldr	r3, [pc, #152]	; (800f4c0 <run_shortest+0x7f0>)
 800f428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d107      	bne.n	800f440 <run_shortest+0x770>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f430:	4b22      	ldr	r3, [pc, #136]	; (800f4bc <run_shortest+0x7ec>)
 800f432:	881b      	ldrh	r3, [r3, #0]
 800f434:	4619      	mov	r1, r3
 800f436:	4b22      	ldr	r3, [pc, #136]	; (800f4c0 <run_shortest+0x7f0>)
 800f438:	f04f 32ff 	mov.w	r2, #4294967295
 800f43c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f440:	4b1e      	ldr	r3, [pc, #120]	; (800f4bc <run_shortest+0x7ec>)
 800f442:	881b      	ldrh	r3, [r3, #0]
 800f444:	3b01      	subs	r3, #1
 800f446:	4a1e      	ldr	r2, [pc, #120]	; (800f4c0 <run_shortest+0x7f0>)
 800f448:	f06f 010e 	mvn.w	r1, #14
 800f44c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f450:	4b1a      	ldr	r3, [pc, #104]	; (800f4bc <run_shortest+0x7ec>)
 800f452:	881b      	ldrh	r3, [r3, #0]
 800f454:	3b02      	subs	r3, #2
 800f456:	4a1a      	ldr	r2, [pc, #104]	; (800f4c0 <run_shortest+0x7f0>)
 800f458:	f04f 31ff 	mov.w	r1, #4294967295
 800f45c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f460:	e024      	b.n	800f4ac <run_shortest+0x7dc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f462:	4b16      	ldr	r3, [pc, #88]	; (800f4bc <run_shortest+0x7ec>)
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	461a      	mov	r2, r3
 800f468:	4b15      	ldr	r3, [pc, #84]	; (800f4c0 <run_shortest+0x7f0>)
 800f46a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f46e:	4a13      	ldr	r2, [pc, #76]	; (800f4bc <run_shortest+0x7ec>)
 800f470:	8812      	ldrh	r2, [r2, #0]
 800f472:	4611      	mov	r1, r2
 800f474:	3b01      	subs	r3, #1
 800f476:	4a12      	ldr	r2, [pc, #72]	; (800f4c0 <run_shortest+0x7f0>)
 800f478:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f47c:	4b0f      	ldr	r3, [pc, #60]	; (800f4bc <run_shortest+0x7ec>)
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	461a      	mov	r2, r3
 800f482:	4b0f      	ldr	r3, [pc, #60]	; (800f4c0 <run_shortest+0x7f0>)
 800f484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d107      	bne.n	800f49c <run_shortest+0x7cc>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f48c:	4b0b      	ldr	r3, [pc, #44]	; (800f4bc <run_shortest+0x7ec>)
 800f48e:	881b      	ldrh	r3, [r3, #0]
 800f490:	4619      	mov	r1, r3
 800f492:	4b0b      	ldr	r3, [pc, #44]	; (800f4c0 <run_shortest+0x7f0>)
 800f494:	f04f 32ff 	mov.w	r2, #4294967295
 800f498:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f49c:	4b07      	ldr	r3, [pc, #28]	; (800f4bc <run_shortest+0x7ec>)
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	3b01      	subs	r3, #1
 800f4a2:	4a07      	ldr	r2, [pc, #28]	; (800f4c0 <run_shortest+0x7f0>)
 800f4a4:	f06f 010c 	mvn.w	r1, #12
 800f4a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f4ac:	4b03      	ldr	r3, [pc, #12]	; (800f4bc <run_shortest+0x7ec>)
 800f4ae:	881b      	ldrh	r3, [r3, #0]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	b29a      	uxth	r2, r3
 800f4b4:	4b01      	ldr	r3, [pc, #4]	; (800f4bc <run_shortest+0x7ec>)
 800f4b6:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f4b8:	e60a      	b.n	800f0d0 <run_shortest+0x400>
 800f4ba:	bf00      	nop
 800f4bc:	2000082c 	.word	0x2000082c
 800f4c0:	20000834 	.word	0x20000834
				break;
 800f4c4:	bf00      	nop
		}

		pass_count = 1;
 800f4c6:	4ba3      	ldr	r3, [pc, #652]	; (800f754 <run_shortest+0xa84>)
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	801a      	strh	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f4cc:	4ba1      	ldr	r3, [pc, #644]	; (800f754 <run_shortest+0xa84>)
 800f4ce:	881b      	ldrh	r3, [r3, #0]
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	4ba1      	ldr	r3, [pc, #644]	; (800f758 <run_shortest+0xa88>)
 800f4d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	f000 813f 	beq.w	800f75c <run_shortest+0xa8c>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f4de:	4b9d      	ldr	r3, [pc, #628]	; (800f754 <run_shortest+0xa84>)
 800f4e0:	881b      	ldrh	r3, [r3, #0]
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	4b9c      	ldr	r3, [pc, #624]	; (800f758 <run_shortest+0xa88>)
 800f4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4ea:	f113 0f08 	cmn.w	r3, #8
 800f4ee:	d01b      	beq.n	800f528 <run_shortest+0x858>
 800f4f0:	4b98      	ldr	r3, [pc, #608]	; (800f754 <run_shortest+0xa84>)
 800f4f2:	881b      	ldrh	r3, [r3, #0]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4b98      	ldr	r3, [pc, #608]	; (800f758 <run_shortest+0xa88>)
 800f4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4fc:	f113 0f09 	cmn.w	r3, #9
 800f500:	d012      	beq.n	800f528 <run_shortest+0x858>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f502:	4b94      	ldr	r3, [pc, #592]	; (800f754 <run_shortest+0xa84>)
 800f504:	881b      	ldrh	r3, [r3, #0]
 800f506:	461a      	mov	r2, r3
 800f508:	4b93      	ldr	r3, [pc, #588]	; (800f758 <run_shortest+0xa88>)
 800f50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f50e:	f113 0f0a 	cmn.w	r3, #10
 800f512:	d009      	beq.n	800f528 <run_shortest+0x858>
 800f514:	4b8f      	ldr	r3, [pc, #572]	; (800f754 <run_shortest+0xa84>)
 800f516:	881b      	ldrh	r3, [r3, #0]
 800f518:	461a      	mov	r2, r3
 800f51a:	4b8f      	ldr	r3, [pc, #572]	; (800f758 <run_shortest+0xa88>)
 800f51c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f520:	f113 0f0b 	cmn.w	r3, #11
 800f524:	f040 810f 	bne.w	800f746 <run_shortest+0xa76>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f528:	4b8a      	ldr	r3, [pc, #552]	; (800f754 <run_shortest+0xa84>)
 800f52a:	881b      	ldrh	r3, [r3, #0]
 800f52c:	461a      	mov	r2, r3
 800f52e:	4b8a      	ldr	r3, [pc, #552]	; (800f758 <run_shortest+0xa88>)
 800f530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f534:	f113 0f08 	cmn.w	r3, #8
 800f538:	d008      	beq.n	800f54c <run_shortest+0x87c>
 800f53a:	4b86      	ldr	r3, [pc, #536]	; (800f754 <run_shortest+0xa84>)
 800f53c:	881b      	ldrh	r3, [r3, #0]
 800f53e:	461a      	mov	r2, r3
 800f540:	4b85      	ldr	r3, [pc, #532]	; (800f758 <run_shortest+0xa88>)
 800f542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f546:	f113 0f0a 	cmn.w	r3, #10
 800f54a:	d102      	bne.n	800f552 <run_shortest+0x882>
					slant_direction = -3;
 800f54c:	f06f 0302 	mvn.w	r3, #2
 800f550:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f552:	4b80      	ldr	r3, [pc, #512]	; (800f754 <run_shortest+0xa84>)
 800f554:	881b      	ldrh	r3, [r3, #0]
 800f556:	461a      	mov	r2, r3
 800f558:	4b7f      	ldr	r3, [pc, #508]	; (800f758 <run_shortest+0xa88>)
 800f55a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f55e:	f113 0f09 	cmn.w	r3, #9
 800f562:	d008      	beq.n	800f576 <run_shortest+0x8a6>
 800f564:	4b7b      	ldr	r3, [pc, #492]	; (800f754 <run_shortest+0xa84>)
 800f566:	881b      	ldrh	r3, [r3, #0]
 800f568:	461a      	mov	r2, r3
 800f56a:	4b7b      	ldr	r3, [pc, #492]	; (800f758 <run_shortest+0xa88>)
 800f56c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f570:	f113 0f0b 	cmn.w	r3, #11
 800f574:	d102      	bne.n	800f57c <run_shortest+0x8ac>
					slant_direction = -2;
 800f576:	f06f 0301 	mvn.w	r3, #1
 800f57a:	643b      	str	r3, [r7, #64]	; 0x40
				}
				pass_count++;
 800f57c:	4b75      	ldr	r3, [pc, #468]	; (800f754 <run_shortest+0xa84>)
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	3301      	adds	r3, #1
 800f582:	b29a      	uxth	r2, r3
 800f584:	4b73      	ldr	r3, [pc, #460]	; (800f754 <run_shortest+0xa84>)
 800f586:	801a      	strh	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f588:	4b72      	ldr	r3, [pc, #456]	; (800f754 <run_shortest+0xa84>)
 800f58a:	881b      	ldrh	r3, [r3, #0]
 800f58c:	461a      	mov	r2, r3
 800f58e:	4b72      	ldr	r3, [pc, #456]	; (800f758 <run_shortest+0xa88>)
 800f590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f598:	d105      	bne.n	800f5a6 <run_shortest+0x8d6>
					pass_count++;
 800f59a:	4b6e      	ldr	r3, [pc, #440]	; (800f754 <run_shortest+0xa84>)
 800f59c:	881b      	ldrh	r3, [r3, #0]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	4b6c      	ldr	r3, [pc, #432]	; (800f754 <run_shortest+0xa84>)
 800f5a4:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f5a6:	4b6b      	ldr	r3, [pc, #428]	; (800f754 <run_shortest+0xa84>)
 800f5a8:	881b      	ldrh	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	4b6a      	ldr	r3, [pc, #424]	; (800f758 <run_shortest+0xa88>)
 800f5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5b6:	d105      	bne.n	800f5c4 <run_shortest+0x8f4>
					pass_count++;
 800f5b8:	4b66      	ldr	r3, [pc, #408]	; (800f754 <run_shortest+0xa84>)
 800f5ba:	881b      	ldrh	r3, [r3, #0]
 800f5bc:	3301      	adds	r3, #1
 800f5be:	b29a      	uxth	r2, r3
 800f5c0:	4b64      	ldr	r3, [pc, #400]	; (800f754 <run_shortest+0xa84>)
 800f5c2:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800f5c4:	4b63      	ldr	r3, [pc, #396]	; (800f754 <run_shortest+0xa84>)
 800f5c6:	881b      	ldrh	r3, [r3, #0]
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	4b63      	ldr	r3, [pc, #396]	; (800f758 <run_shortest+0xa88>)
 800f5cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d0:	f113 0f03 	cmn.w	r3, #3
 800f5d4:	f2c0 80ad 	blt.w	800f732 <run_shortest+0xa62>
					slant_count = pass_count;
 800f5d8:	4b5e      	ldr	r3, [pc, #376]	; (800f754 <run_shortest+0xa84>)
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pass[slant_count] = 51;
 800f5e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f5e4:	4a5c      	ldr	r2, [pc, #368]	; (800f758 <run_shortest+0xa88>)
 800f5e6:	2133      	movs	r1, #51	; 0x33
 800f5e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800f5ec:	4b59      	ldr	r3, [pc, #356]	; (800f754 <run_shortest+0xa84>)
 800f5ee:	881b      	ldrh	r3, [r3, #0]
 800f5f0:	3301      	adds	r3, #1
 800f5f2:	b29a      	uxth	r2, r3
 800f5f4:	4b57      	ldr	r3, [pc, #348]	; (800f754 <run_shortest+0xa84>)
 800f5f6:	801a      	strh	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800f5f8:	e09b      	b.n	800f732 <run_shortest+0xa62>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f5fa:	4b56      	ldr	r3, [pc, #344]	; (800f754 <run_shortest+0xa84>)
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	4b55      	ldr	r3, [pc, #340]	; (800f758 <run_shortest+0xa88>)
 800f602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60a:	d105      	bne.n	800f618 <run_shortest+0x948>
						pass_count++;
 800f60c:	4b51      	ldr	r3, [pc, #324]	; (800f754 <run_shortest+0xa84>)
 800f60e:	881b      	ldrh	r3, [r3, #0]
 800f610:	3301      	adds	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	4b4f      	ldr	r3, [pc, #316]	; (800f754 <run_shortest+0xa84>)
 800f616:	801a      	strh	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800f618:	4b4e      	ldr	r3, [pc, #312]	; (800f754 <run_shortest+0xa84>)
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	461a      	mov	r2, r3
 800f61e:	4b4e      	ldr	r3, [pc, #312]	; (800f758 <run_shortest+0xa88>)
 800f620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f624:	f113 0f0c 	cmn.w	r3, #12
 800f628:	f000 808d 	beq.w	800f746 <run_shortest+0xa76>
 800f62c:	4b49      	ldr	r3, [pc, #292]	; (800f754 <run_shortest+0xa84>)
 800f62e:	881b      	ldrh	r3, [r3, #0]
 800f630:	461a      	mov	r2, r3
 800f632:	4b49      	ldr	r3, [pc, #292]	; (800f758 <run_shortest+0xa88>)
 800f634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f638:	f113 0f0d 	cmn.w	r3, #13
 800f63c:	f000 8083 	beq.w	800f746 <run_shortest+0xa76>
							|| pass[pass_count] == -14
 800f640:	4b44      	ldr	r3, [pc, #272]	; (800f754 <run_shortest+0xa84>)
 800f642:	881b      	ldrh	r3, [r3, #0]
 800f644:	461a      	mov	r2, r3
 800f646:	4b44      	ldr	r3, [pc, #272]	; (800f758 <run_shortest+0xa88>)
 800f648:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f64c:	f113 0f0e 	cmn.w	r3, #14
 800f650:	d079      	beq.n	800f746 <run_shortest+0xa76>
							|| pass[pass_count] == -15) {
 800f652:	4b40      	ldr	r3, [pc, #256]	; (800f754 <run_shortest+0xa84>)
 800f654:	881b      	ldrh	r3, [r3, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	4b3f      	ldr	r3, [pc, #252]	; (800f758 <run_shortest+0xa88>)
 800f65a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f65e:	f113 0f0f 	cmn.w	r3, #15
 800f662:	d070      	beq.n	800f746 <run_shortest+0xa76>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800f664:	4b3b      	ldr	r3, [pc, #236]	; (800f754 <run_shortest+0xa84>)
 800f666:	881b      	ldrh	r3, [r3, #0]
 800f668:	461a      	mov	r2, r3
 800f66a:	4b3b      	ldr	r3, [pc, #236]	; (800f758 <run_shortest+0xa88>)
 800f66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f672:	429a      	cmp	r2, r3
 800f674:	d127      	bne.n	800f6c6 <run_shortest+0x9f6>
						pass[slant_count] = pass[slant_count] - 1;
 800f676:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f67a:	4a37      	ldr	r2, [pc, #220]	; (800f758 <run_shortest+0xa88>)
 800f67c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f684:	3a01      	subs	r2, #1
 800f686:	4934      	ldr	r1, [pc, #208]	; (800f758 <run_shortest+0xa88>)
 800f688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800f68c:	4b31      	ldr	r3, [pc, #196]	; (800f754 <run_shortest+0xa84>)
 800f68e:	881b      	ldrh	r3, [r3, #0]
 800f690:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (slant_direction == -2) {
 800f694:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f696:	f113 0f02 	cmn.w	r3, #2
 800f69a:	d107      	bne.n	800f6ac <run_shortest+0x9dc>
							pass[pass_count] = -16;
 800f69c:	4b2d      	ldr	r3, [pc, #180]	; (800f754 <run_shortest+0xa84>)
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4b2d      	ldr	r3, [pc, #180]	; (800f758 <run_shortest+0xa88>)
 800f6a4:	f06f 020f 	mvn.w	r2, #15
 800f6a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800f6ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ae:	f113 0f03 	cmn.w	r3, #3
 800f6b2:	d138      	bne.n	800f726 <run_shortest+0xa56>
							pass[pass_count] = -17;
 800f6b4:	4b27      	ldr	r3, [pc, #156]	; (800f754 <run_shortest+0xa84>)
 800f6b6:	881b      	ldrh	r3, [r3, #0]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	4b27      	ldr	r3, [pc, #156]	; (800f758 <run_shortest+0xa88>)
 800f6bc:	f06f 0210 	mvn.w	r2, #16
 800f6c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f6c4:	e02f      	b.n	800f726 <run_shortest+0xa56>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800f6c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f6ca:	4a23      	ldr	r2, [pc, #140]	; (800f758 <run_shortest+0xa88>)
 800f6cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6d0:	2b31      	cmp	r3, #49	; 0x31
 800f6d2:	dd08      	ble.n	800f6e6 <run_shortest+0xa16>
							pass[pass_count] = -1;
 800f6d4:	4b1f      	ldr	r3, [pc, #124]	; (800f754 <run_shortest+0xa84>)
 800f6d6:	881b      	ldrh	r3, [r3, #0]
 800f6d8:	4619      	mov	r1, r3
 800f6da:	4b1f      	ldr	r3, [pc, #124]	; (800f758 <run_shortest+0xa88>)
 800f6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f6e4:	e009      	b.n	800f6fa <run_shortest+0xa2a>
						} else {
							slant_count = pass_count;
 800f6e6:	4b1b      	ldr	r3, [pc, #108]	; (800f754 <run_shortest+0xa84>)
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							pass[slant_count] = 50;
 800f6ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f6f2:	4a19      	ldr	r2, [pc, #100]	; (800f758 <run_shortest+0xa88>)
 800f6f4:	2132      	movs	r1, #50	; 0x32
 800f6f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800f6fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f6fe:	4a16      	ldr	r2, [pc, #88]	; (800f758 <run_shortest+0xa88>)
 800f700:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f704:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f708:	3201      	adds	r2, #1
 800f70a:	4913      	ldr	r1, [pc, #76]	; (800f758 <run_shortest+0xa88>)
 800f70c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800f710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f712:	f113 0f02 	cmn.w	r3, #2
 800f716:	d103      	bne.n	800f720 <run_shortest+0xa50>
							slant_direction = -3;
 800f718:	f06f 0302 	mvn.w	r3, #2
 800f71c:	643b      	str	r3, [r7, #64]	; 0x40
 800f71e:	e002      	b.n	800f726 <run_shortest+0xa56>
						} else {
							slant_direction = -2;
 800f720:	f06f 0301 	mvn.w	r3, #1
 800f724:	643b      	str	r3, [r7, #64]	; 0x40
						}

					}

					pass_count++;
 800f726:	4b0b      	ldr	r3, [pc, #44]	; (800f754 <run_shortest+0xa84>)
 800f728:	881b      	ldrh	r3, [r3, #0]
 800f72a:	3301      	adds	r3, #1
 800f72c:	b29a      	uxth	r2, r3
 800f72e:	4b09      	ldr	r3, [pc, #36]	; (800f754 <run_shortest+0xa84>)
 800f730:	801a      	strh	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800f732:	4b08      	ldr	r3, [pc, #32]	; (800f754 <run_shortest+0xa84>)
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	461a      	mov	r2, r3
 800f738:	4b07      	ldr	r3, [pc, #28]	; (800f758 <run_shortest+0xa88>)
 800f73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73e:	f113 0f03 	cmn.w	r3, #3
 800f742:	f6bf af5a 	bge.w	800f5fa <run_shortest+0x92a>

			}

			//		if(){}

			pass_count++;
 800f746:	4b03      	ldr	r3, [pc, #12]	; (800f754 <run_shortest+0xa84>)
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	3301      	adds	r3, #1
 800f74c:	b29a      	uxth	r2, r3
 800f74e:	4b01      	ldr	r3, [pc, #4]	; (800f754 <run_shortest+0xa84>)
 800f750:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f752:	e6bb      	b.n	800f4cc <run_shortest+0x7fc>
 800f754:	2000082c 	.word	0x2000082c
 800f758:	20000834 	.word	0x20000834
				break;
 800f75c:	bf00      	nop
		}
		pass_count=0;
 800f75e:	4bb2      	ldr	r3, [pc, #712]	; (800fa28 <run_shortest+0xd58>)
 800f760:	2200      	movs	r2, #0
 800f762:	801a      	strh	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800f764:	4bb0      	ldr	r3, [pc, #704]	; (800fa28 <run_shortest+0xd58>)
 800f766:	881b      	ldrh	r3, [r3, #0]
 800f768:	461a      	mov	r2, r3
 800f76a:	4bb0      	ldr	r3, [pc, #704]	; (800fa2c <run_shortest+0xd5c>)
 800f76c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f770:	2b32      	cmp	r3, #50	; 0x32
 800f772:	d107      	bne.n	800f784 <run_shortest+0xab4>
				pass[pass_count] =-1;
 800f774:	4bac      	ldr	r3, [pc, #688]	; (800fa28 <run_shortest+0xd58>)
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	4619      	mov	r1, r3
 800f77a:	4bac      	ldr	r3, [pc, #688]	; (800fa2c <run_shortest+0xd5c>)
 800f77c:	f04f 32ff 	mov.w	r2, #4294967295
 800f780:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800f784:	4ba8      	ldr	r3, [pc, #672]	; (800fa28 <run_shortest+0xd58>)
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	461a      	mov	r2, r3
 800f78a:	4ba8      	ldr	r3, [pc, #672]	; (800fa2c <run_shortest+0xd5c>)
 800f78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d006      	beq.n	800f7a2 <run_shortest+0xad2>
				break;
			}
			pass_count++;
 800f794:	4ba4      	ldr	r3, [pc, #656]	; (800fa28 <run_shortest+0xd58>)
 800f796:	881b      	ldrh	r3, [r3, #0]
 800f798:	3301      	adds	r3, #1
 800f79a:	b29a      	uxth	r2, r3
 800f79c:	4ba2      	ldr	r3, [pc, #648]	; (800fa28 <run_shortest+0xd58>)
 800f79e:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800f7a0:	e7e0      	b.n	800f764 <run_shortest+0xa94>
				break;
 800f7a2:	bf00      	nop
		}

	}
}
	int j = 0;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 800f7a8:	e00b      	b.n	800f7c2 <run_shortest+0xaf2>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800f7aa:	4aa0      	ldr	r2, [pc, #640]	; (800fa2c <run_shortest+0xd5c>)
 800f7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f7b6:	489e      	ldr	r0, [pc, #632]	; (800fa30 <run_shortest+0xd60>)
 800f7b8:	f011 f80c 	bl	80207d4 <iprintf>
		j++;
 800f7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7be:	3301      	adds	r3, #1
 800f7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 800f7c2:	4a9a      	ldr	r2, [pc, #616]	; (800fa2c <run_shortest+0xd5c>)
 800f7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1ed      	bne.n	800f7aa <run_shortest+0xada>
	}
	int pass_count2;
	pass_count2=0;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 800f7d2:	e002      	b.n	800f7da <run_shortest+0xb0a>
		pass_count2++;
 800f7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 800f7da:	4a94      	ldr	r2, [pc, #592]	; (800fa2c <run_shortest+0xd5c>)
 800f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e6:	d0f5      	beq.n	800f7d4 <run_shortest+0xb04>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800f7e8:	4a90      	ldr	r2, [pc, #576]	; (800fa2c <run_shortest+0xd5c>)
 800f7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7f0:	934e      	str	r3, [sp, #312]	; 0x138
 800f7f2:	4668      	mov	r0, sp
 800f7f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f7f8:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f7fc:	4619      	mov	r1, r3
 800f7fe:	f010 fb69 	bl	801fed4 <memcpy>
 800f802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f808:	f007 ffae 	bl	8017768 <get_center_velocity>
 800f80c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	printf("%d,%f\n",pass_count2, end_velocity);
 800f810:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f812:	f7f0 fec1 	bl	8000598 <__aeabi_f2d>
 800f816:	4602      	mov	r2, r0
 800f818:	460b      	mov	r3, r1
 800f81a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f81c:	4885      	ldr	r0, [pc, #532]	; (800fa34 <run_shortest+0xd64>)
 800f81e:	f010 ffd9 	bl	80207d4 <iprintf>

	wait_ms_NoReset(500);
 800f822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f826:	f7f8 fdd7 	bl	80083d8 <wait_ms_NoReset>
	pl_DriveMotor_standby(ON);
 800f82a:	2001      	movs	r0, #1
 800f82c:	f7f8 faa4 	bl	8007d78 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800f830:	2003      	movs	r0, #3
 800f832:	f7f8 fad3 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800f836:	2003      	movs	r0, #3
 800f838:	f7f8 faa8 	bl	8007d8c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800f83c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f840:	f7f8 fdca 	bl	80083d8 <wait_ms_NoReset>
	no_safty = 1;
 800f844:	4b7c      	ldr	r3, [pc, #496]	; (800fa38 <run_shortest+0xd68>)
 800f846:	2201      	movs	r2, #1
 800f848:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800f84a:	4b7b      	ldr	r3, [pc, #492]	; (800fa38 <run_shortest+0xd68>)
 800f84c:	2200      	movs	r2, #0
 800f84e:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800f850:	f7f5 f8fe 	bl	8004a50 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800f854:	7abb      	ldrb	r3, [r7, #10]
 800f856:	2b01      	cmp	r3, #1
 800f858:	d12d      	bne.n	800f8b6 <run_shortest+0xbe6>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f7f0 fe9c 	bl	8000598 <__aeabi_f2d>
 800f860:	a36f      	add	r3, pc, #444	; (adr r3, 800fa20 <run_shortest+0xd50>)
 800f862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f866:	f7f0 feef 	bl	8000648 <__aeabi_dmul>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4614      	mov	r4, r2
 800f870:	461d      	mov	r5, r3
 800f872:	4b72      	ldr	r3, [pc, #456]	; (800fa3c <run_shortest+0xd6c>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	4618      	mov	r0, r3
 800f878:	f7f0 fe8e 	bl	8000598 <__aeabi_f2d>
 800f87c:	4602      	mov	r2, r0
 800f87e:	460b      	mov	r3, r1
 800f880:	4620      	mov	r0, r4
 800f882:	4629      	mov	r1, r5
 800f884:	f7f1 f80a 	bl	800089c <__aeabi_ddiv>
 800f888:	4602      	mov	r2, r0
 800f88a:	460b      	mov	r3, r1
 800f88c:	4610      	mov	r0, r2
 800f88e:	4619      	mov	r1, r3
 800f890:	f7f1 f9b2 	bl	8000bf8 <__aeabi_d2f>
 800f894:	4603      	mov	r3, r0
 800f896:	ee00 3a10 	vmov	s0, r3
 800f89a:	f7f8 fb0b 	bl	8007eb4 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800f89e:	f7f8 faf5 	bl	8007e8c <pl_FunMotor_start>
		wait_ms_NoReset(600);
 800f8a2:	f44f 7016 	mov.w	r0, #600	; 0x258
 800f8a6:	f7f8 fd97 	bl	80083d8 <wait_ms_NoReset>
		reset_gyro();
 800f8aa:	f7f2 f985 	bl	8001bb8 <reset_gyro>
		reset_speed();
 800f8ae:	f7f1 fbb9 	bl	8001024 <reset_speed>
		clear_Ierror();
 800f8b2:	f7f5 f8cd 	bl	8004a50 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						wait_ms_NoReset(2000);	//候補1

	}
	maze_mode = 1;
 800f8b6:	4b62      	ldr	r3, [pc, #392]	; (800fa40 <run_shortest+0xd70>)
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800f8bc:	4b61      	ldr	r3, [pc, #388]	; (800fa44 <run_shortest+0xd74>)
 800f8be:	2201      	movs	r2, #1
 800f8c0:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800f8c2:	4b61      	ldr	r3, [pc, #388]	; (800fa48 <run_shortest+0xd78>)
 800f8c4:	2212      	movs	r2, #18
 800f8c6:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	pass_count = 0;
 800f8c8:	4b57      	ldr	r3, [pc, #348]	; (800fa28 <run_shortest+0xd58>)
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	801a      	strh	r2, [r3, #0]


	mode.WallControlMode=1;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	777b      	strb	r3, [r7, #29]
	mode.calMazeMode=0;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	77bb      	strb	r3, [r7, #30]
	mode.WallCutMode=0;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	77fb      	strb	r3, [r7, #31]
	pass_count2=0;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 800f8e2:	e002      	b.n	800f8ea <run_shortest+0xc1a>
		pass_count2++;
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	3301      	adds	r3, #1
 800f8e8:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 800f8ea:	4a50      	ldr	r2, [pc, #320]	; (800fa2c <run_shortest+0xd5c>)
 800f8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8f6:	d0f5      	beq.n	800f8e4 <run_shortest+0xc14>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800f8f8:	4a4c      	ldr	r2, [pc, #304]	; (800fa2c <run_shortest+0xd5c>)
 800f8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f900:	934e      	str	r3, [sp, #312]	; 0x138
 800f902:	4668      	mov	r0, sp
 800f904:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f908:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f90c:	4619      	mov	r1, r3
 800f90e:	f010 fae1 	bl	801fed4 <memcpy>
 800f912:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f918:	f007 ff26 	bl	8017768 <get_center_velocity>
 800f91c:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800f920:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800f924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f928:	ee17 0a90 	vmov	r0, s15
 800f92c:	f7f0 fe34 	bl	8000598 <__aeabi_f2d>
 800f930:	f04f 0200 	mov.w	r2, #0
 800f934:	4b45      	ldr	r3, [pc, #276]	; (800fa4c <run_shortest+0xd7c>)
 800f936:	f7f0 ffb1 	bl	800089c <__aeabi_ddiv>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	4610      	mov	r0, r2
 800f940:	4619      	mov	r1, r3
 800f942:	f04f 0200 	mov.w	r2, #0
 800f946:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f94a:	f7f0 ffa7 	bl	800089c <__aeabi_ddiv>
 800f94e:	4602      	mov	r2, r0
 800f950:	460b      	mov	r3, r1
 800f952:	4610      	mov	r0, r2
 800f954:	4619      	mov	r1, r3
 800f956:	f7f1 f94f 	bl	8000bf8 <__aeabi_d2f>
 800f95a:	4603      	mov	r3, r0
 800f95c:	69f8      	ldr	r0, [r7, #28]
 800f95e:	ee02 3a10 	vmov	s4, r3
 800f962:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 800f966:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 800f96a:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fa50 <run_shortest+0xd80>
 800f96e:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800f972:	f7f3 fd5b 	bl	800342c <straight_table2>


	while (pass_count <= 255) {
 800f976:	e2db      	b.n	800ff30 <run_shortest+0x1260>
		pass_count2=pass_count+1;
 800f978:	4b2b      	ldr	r3, [pc, #172]	; (800fa28 <run_shortest+0xd58>)
 800f97a:	881b      	ldrh	r3, [r3, #0]
 800f97c:	3301      	adds	r3, #1
 800f97e:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 800f980:	e002      	b.n	800f988 <run_shortest+0xcb8>
			pass_count2++;
 800f982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f984:	3301      	adds	r3, #1
 800f986:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 800f988:	4a28      	ldr	r2, [pc, #160]	; (800fa2c <run_shortest+0xd5c>)
 800f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f994:	d0f5      	beq.n	800f982 <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800f996:	4a25      	ldr	r2, [pc, #148]	; (800fa2c <run_shortest+0xd5c>)
 800f998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f99e:	934e      	str	r3, [sp, #312]	; 0x138
 800f9a0:	4668      	mov	r0, sp
 800f9a2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800f9a6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	f010 fa92 	bl	801fed4 <memcpy>
 800f9b0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f9b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9b6:	f007 fed7 	bl	8017768 <get_center_velocity>
 800f9ba:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		if (pass[pass_count] == -1) {
 800f9be:	4b1a      	ldr	r3, [pc, #104]	; (800fa28 <run_shortest+0xd58>)
 800f9c0:	881b      	ldrh	r3, [r3, #0]
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	4b19      	ldr	r3, [pc, #100]	; (800fa2c <run_shortest+0xd5c>)
 800f9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9ce:	d106      	bne.n	800f9de <run_shortest+0xd0e>
			pass_count++;
 800f9d0:	4b15      	ldr	r3, [pc, #84]	; (800fa28 <run_shortest+0xd58>)
 800f9d2:	881b      	ldrh	r3, [r3, #0]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	4b13      	ldr	r3, [pc, #76]	; (800fa28 <run_shortest+0xd58>)
 800f9da:	801a      	strh	r2, [r3, #0]
 800f9dc:	e2a0      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -2) {
 800f9de:	4b12      	ldr	r3, [pc, #72]	; (800fa28 <run_shortest+0xd58>)
 800f9e0:	881b      	ldrh	r3, [r3, #0]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	4b11      	ldr	r3, [pc, #68]	; (800fa2c <run_shortest+0xd5c>)
 800f9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ea:	f113 0f02 	cmn.w	r3, #2
 800f9ee:	d131      	bne.n	800fa54 <run_shortest+0xd84>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800f9f0:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800f9f4:	9303      	str	r3, [sp, #12]
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	9302      	str	r3, [sp, #8]
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	9301      	str	r3, [sp, #4]
 800f9fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fa06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa08:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fa0c:	f7fa f90a 	bl	8009c24 <slalomR>

			pass_count++;
 800fa10:	4b05      	ldr	r3, [pc, #20]	; (800fa28 <run_shortest+0xd58>)
 800fa12:	881b      	ldrh	r3, [r3, #0]
 800fa14:	3301      	adds	r3, #1
 800fa16:	b29a      	uxth	r2, r3
 800fa18:	4b03      	ldr	r3, [pc, #12]	; (800fa28 <run_shortest+0xd58>)
 800fa1a:	801a      	strh	r2, [r3, #0]
 800fa1c:	e280      	b.n	800ff20 <run_shortest+0x1250>
 800fa1e:	bf00      	nop
 800fa20:	cccccccd 	.word	0xcccccccd
 800fa24:	4010cccc 	.word	0x4010cccc
 800fa28:	2000082c 	.word	0x2000082c
 800fa2c:	20000834 	.word	0x20000834
 800fa30:	08024234 	.word	0x08024234
 800fa34:	0802424c 	.word	0x0802424c
 800fa38:	2000080a 	.word	0x2000080a
 800fa3c:	200004d8 	.word	0x200004d8
 800fa40:	2000082e 	.word	0x2000082e
 800fa44:	2000080c 	.word	0x2000080c
 800fa48:	2000edb4 	.word	0x2000edb4
 800fa4c:	40290000 	.word	0x40290000
 800fa50:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fa54:	4b9b      	ldr	r3, [pc, #620]	; (800fcc4 <run_shortest+0xff4>)
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	461a      	mov	r2, r3
 800fa5a:	4b9b      	ldr	r3, [pc, #620]	; (800fcc8 <run_shortest+0xff8>)
 800fa5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa60:	f113 0f03 	cmn.w	r3, #3
 800fa64:	d117      	bne.n	800fa96 <run_shortest+0xdc6>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fa66:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fa6a:	9303      	str	r3, [sp, #12]
 800fa6c:	2301      	movs	r3, #1
 800fa6e:	9302      	str	r3, [sp, #8]
 800fa70:	2300      	movs	r3, #0
 800fa72:	9301      	str	r3, [sp, #4]
 800fa74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa78:	9300      	str	r3, [sp, #0]
 800fa7a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800fa7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fa80:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fa84:	f7fa fab4 	bl	8009ff0 <slalomL>

			pass_count++;
 800fa88:	4b8e      	ldr	r3, [pc, #568]	; (800fcc4 <run_shortest+0xff4>)
 800fa8a:	881b      	ldrh	r3, [r3, #0]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	4b8c      	ldr	r3, [pc, #560]	; (800fcc4 <run_shortest+0xff4>)
 800fa92:	801a      	strh	r2, [r3, #0]
 800fa94:	e244      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -4) {
 800fa96:	4b8b      	ldr	r3, [pc, #556]	; (800fcc4 <run_shortest+0xff4>)
 800fa98:	881b      	ldrh	r3, [r3, #0]
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	4b8a      	ldr	r3, [pc, #552]	; (800fcc8 <run_shortest+0xff8>)
 800fa9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faa2:	f113 0f04 	cmn.w	r3, #4
 800faa6:	d115      	bne.n	800fad4 <run_shortest+0xe04>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800faa8:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800faac:	9302      	str	r3, [sp, #8]
 800faae:	2300      	movs	r3, #0
 800fab0:	9301      	str	r3, [sp, #4]
 800fab2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800fabc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fabe:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fac2:	f7fa fc77 	bl	800a3b4 <turn90R>
			pass_count++;
 800fac6:	4b7f      	ldr	r3, [pc, #508]	; (800fcc4 <run_shortest+0xff4>)
 800fac8:	881b      	ldrh	r3, [r3, #0]
 800faca:	3301      	adds	r3, #1
 800facc:	b29a      	uxth	r2, r3
 800face:	4b7d      	ldr	r3, [pc, #500]	; (800fcc4 <run_shortest+0xff4>)
 800fad0:	801a      	strh	r2, [r3, #0]
 800fad2:	e225      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -5) {
 800fad4:	4b7b      	ldr	r3, [pc, #492]	; (800fcc4 <run_shortest+0xff4>)
 800fad6:	881b      	ldrh	r3, [r3, #0]
 800fad8:	461a      	mov	r2, r3
 800fada:	4b7b      	ldr	r3, [pc, #492]	; (800fcc8 <run_shortest+0xff8>)
 800fadc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fae0:	f113 0f05 	cmn.w	r3, #5
 800fae4:	d115      	bne.n	800fb12 <run_shortest+0xe42>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800fae6:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800faea:	9302      	str	r3, [sp, #8]
 800faec:	2300      	movs	r3, #0
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800faf4:	9300      	str	r3, [sp, #0]
 800faf6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800fafa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fafc:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fb00:	f7fa fdc2 	bl	800a688 <turn90L>
			pass_count++;
 800fb04:	4b6f      	ldr	r3, [pc, #444]	; (800fcc4 <run_shortest+0xff4>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	3301      	adds	r3, #1
 800fb0a:	b29a      	uxth	r2, r3
 800fb0c:	4b6d      	ldr	r3, [pc, #436]	; (800fcc4 <run_shortest+0xff4>)
 800fb0e:	801a      	strh	r2, [r3, #0]
 800fb10:	e206      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -6) {
 800fb12:	4b6c      	ldr	r3, [pc, #432]	; (800fcc4 <run_shortest+0xff4>)
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	461a      	mov	r2, r3
 800fb18:	4b6b      	ldr	r3, [pc, #428]	; (800fcc8 <run_shortest+0xff8>)
 800fb1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb1e:	f113 0f06 	cmn.w	r3, #6
 800fb22:	d115      	bne.n	800fb50 <run_shortest+0xe80>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800fb24:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fb28:	9302      	str	r3, [sp, #8]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	9301      	str	r3, [sp, #4]
 800fb2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fb38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb3a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fb3e:	f7fa ff07 	bl	800a950 <turn180R>
			pass_count++;
 800fb42:	4b60      	ldr	r3, [pc, #384]	; (800fcc4 <run_shortest+0xff4>)
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	3301      	adds	r3, #1
 800fb48:	b29a      	uxth	r2, r3
 800fb4a:	4b5e      	ldr	r3, [pc, #376]	; (800fcc4 <run_shortest+0xff4>)
 800fb4c:	801a      	strh	r2, [r3, #0]
 800fb4e:	e1e7      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -7) {
 800fb50:	4b5c      	ldr	r3, [pc, #368]	; (800fcc4 <run_shortest+0xff4>)
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	461a      	mov	r2, r3
 800fb56:	4b5c      	ldr	r3, [pc, #368]	; (800fcc8 <run_shortest+0xff8>)
 800fb58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5c:	f113 0f07 	cmn.w	r3, #7
 800fb60:	d115      	bne.n	800fb8e <run_shortest+0xebe>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800fb62:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fb66:	9302      	str	r3, [sp, #8]
 800fb68:	2300      	movs	r3, #0
 800fb6a:	9301      	str	r3, [sp, #4]
 800fb6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fb70:	9300      	str	r3, [sp, #0]
 800fb72:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800fb76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb78:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fb7c:	f7fb f852 	bl	800ac24 <turn180L>
			pass_count++;
 800fb80:	4b50      	ldr	r3, [pc, #320]	; (800fcc4 <run_shortest+0xff4>)
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	3301      	adds	r3, #1
 800fb86:	b29a      	uxth	r2, r3
 800fb88:	4b4e      	ldr	r3, [pc, #312]	; (800fcc4 <run_shortest+0xff4>)
 800fb8a:	801a      	strh	r2, [r3, #0]
 800fb8c:	e1c8      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800fb8e:	4b4d      	ldr	r3, [pc, #308]	; (800fcc4 <run_shortest+0xff4>)
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	461a      	mov	r2, r3
 800fb94:	4b4c      	ldr	r3, [pc, #304]	; (800fcc8 <run_shortest+0xff8>)
 800fb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9a:	f113 0f08 	cmn.w	r3, #8
 800fb9e:	d115      	bne.n	800fbcc <run_shortest+0xefc>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 800fba0:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fba4:	9302      	str	r3, [sp, #8]
 800fba6:	2300      	movs	r3, #0
 800fba8:	9301      	str	r3, [sp, #4]
 800fbaa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800fbb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbb6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fbba:	f7fb f999 	bl	800aef0 <turn45inR>
			pass_count++;
 800fbbe:	4b41      	ldr	r3, [pc, #260]	; (800fcc4 <run_shortest+0xff4>)
 800fbc0:	881b      	ldrh	r3, [r3, #0]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	b29a      	uxth	r2, r3
 800fbc6:	4b3f      	ldr	r3, [pc, #252]	; (800fcc4 <run_shortest+0xff4>)
 800fbc8:	801a      	strh	r2, [r3, #0]
 800fbca:	e1a9      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -9) { //入り45L
 800fbcc:	4b3d      	ldr	r3, [pc, #244]	; (800fcc4 <run_shortest+0xff4>)
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	461a      	mov	r2, r3
 800fbd2:	4b3d      	ldr	r3, [pc, #244]	; (800fcc8 <run_shortest+0xff8>)
 800fbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbd8:	f113 0f09 	cmn.w	r3, #9
 800fbdc:	d115      	bne.n	800fc0a <run_shortest+0xf3a>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 800fbde:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fbe2:	9302      	str	r3, [sp, #8]
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fbec:	9300      	str	r3, [sp, #0]
 800fbee:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800fbf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbf4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fbf8:	f7fb fbc2 	bl	800b380 <turn45inL>
			pass_count++;
 800fbfc:	4b31      	ldr	r3, [pc, #196]	; (800fcc4 <run_shortest+0xff4>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	3301      	adds	r3, #1
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	4b2f      	ldr	r3, [pc, #188]	; (800fcc4 <run_shortest+0xff4>)
 800fc06:	801a      	strh	r2, [r3, #0]
 800fc08:	e18a      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -10) { //入り135R
 800fc0a:	4b2e      	ldr	r3, [pc, #184]	; (800fcc4 <run_shortest+0xff4>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	4b2d      	ldr	r3, [pc, #180]	; (800fcc8 <run_shortest+0xff8>)
 800fc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc16:	f113 0f0a 	cmn.w	r3, #10
 800fc1a:	d115      	bne.n	800fc48 <run_shortest+0xf78>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 800fc1c:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fc20:	9302      	str	r3, [sp, #8]
 800fc22:	2300      	movs	r3, #0
 800fc24:	9301      	str	r3, [sp, #4]
 800fc26:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800fc2a:	9300      	str	r3, [sp, #0]
 800fc2c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800fc30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc32:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fc36:	f7fb fde3 	bl	800b800 <turn135inR>
			pass_count++;
 800fc3a:	4b22      	ldr	r3, [pc, #136]	; (800fcc4 <run_shortest+0xff4>)
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	3301      	adds	r3, #1
 800fc40:	b29a      	uxth	r2, r3
 800fc42:	4b20      	ldr	r3, [pc, #128]	; (800fcc4 <run_shortest+0xff4>)
 800fc44:	801a      	strh	r2, [r3, #0]
 800fc46:	e16b      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -11) { //入り135L
 800fc48:	4b1e      	ldr	r3, [pc, #120]	; (800fcc4 <run_shortest+0xff4>)
 800fc4a:	881b      	ldrh	r3, [r3, #0]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	4b1e      	ldr	r3, [pc, #120]	; (800fcc8 <run_shortest+0xff8>)
 800fc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc54:	f113 0f0b 	cmn.w	r3, #11
 800fc58:	d115      	bne.n	800fc86 <run_shortest+0xfb6>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 800fc5a:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fc5e:	9302      	str	r3, [sp, #8]
 800fc60:	2300      	movs	r3, #0
 800fc62:	9301      	str	r3, [sp, #4]
 800fc64:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800fc6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc70:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fc74:	f7fc f80c 	bl	800bc90 <turn135inL>
			pass_count++;
 800fc78:	4b12      	ldr	r3, [pc, #72]	; (800fcc4 <run_shortest+0xff4>)
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	3301      	adds	r3, #1
 800fc7e:	b29a      	uxth	r2, r3
 800fc80:	4b10      	ldr	r3, [pc, #64]	; (800fcc4 <run_shortest+0xff4>)
 800fc82:	801a      	strh	r2, [r3, #0]
 800fc84:	e14c      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -12) { //出り45R
 800fc86:	4b0f      	ldr	r3, [pc, #60]	; (800fcc4 <run_shortest+0xff4>)
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	461a      	mov	r2, r3
 800fc8c:	4b0e      	ldr	r3, [pc, #56]	; (800fcc8 <run_shortest+0xff8>)
 800fc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc92:	f113 0f0c 	cmn.w	r3, #12
 800fc96:	d119      	bne.n	800fccc <run_shortest+0xffc>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 800fc98:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fc9c:	9302      	str	r3, [sp, #8]
 800fc9e:	2300      	movs	r3, #0
 800fca0:	9301      	str	r3, [sp, #4]
 800fca2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800fcac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcae:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fcb2:	f7fc fa31 	bl	800c118 <turn45outR>
			pass_count++;
 800fcb6:	4b03      	ldr	r3, [pc, #12]	; (800fcc4 <run_shortest+0xff4>)
 800fcb8:	881b      	ldrh	r3, [r3, #0]
 800fcba:	3301      	adds	r3, #1
 800fcbc:	b29a      	uxth	r2, r3
 800fcbe:	4b01      	ldr	r3, [pc, #4]	; (800fcc4 <run_shortest+0xff4>)
 800fcc0:	801a      	strh	r2, [r3, #0]
 800fcc2:	e12d      	b.n	800ff20 <run_shortest+0x1250>
 800fcc4:	2000082c 	.word	0x2000082c
 800fcc8:	20000834 	.word	0x20000834
		}
		else if (pass[pass_count] == -13) { //出り45L
 800fccc:	4bb2      	ldr	r3, [pc, #712]	; (800ff98 <run_shortest+0x12c8>)
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	4bb2      	ldr	r3, [pc, #712]	; (800ff9c <run_shortest+0x12cc>)
 800fcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd8:	f113 0f0d 	cmn.w	r3, #13
 800fcdc:	d115      	bne.n	800fd0a <run_shortest+0x103a>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 800fcde:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fce2:	9302      	str	r3, [sp, #8]
 800fce4:	2300      	movs	r3, #0
 800fce6:	9301      	str	r3, [sp, #4]
 800fce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 800fcf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcf4:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fcf8:	f7fc fc00 	bl	800c4fc <turn45outL>
			pass_count++;
 800fcfc:	4ba6      	ldr	r3, [pc, #664]	; (800ff98 <run_shortest+0x12c8>)
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	3301      	adds	r3, #1
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	4ba4      	ldr	r3, [pc, #656]	; (800ff98 <run_shortest+0x12c8>)
 800fd06:	801a      	strh	r2, [r3, #0]
 800fd08:	e10a      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -14) { //出り135R
 800fd0a:	4ba3      	ldr	r3, [pc, #652]	; (800ff98 <run_shortest+0x12c8>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	461a      	mov	r2, r3
 800fd10:	4ba2      	ldr	r3, [pc, #648]	; (800ff9c <run_shortest+0x12cc>)
 800fd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd16:	f113 0f0e 	cmn.w	r3, #14
 800fd1a:	d115      	bne.n	800fd48 <run_shortest+0x1078>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 800fd1c:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fd20:	9302      	str	r3, [sp, #8]
 800fd22:	2300      	movs	r3, #0
 800fd24:	9301      	str	r3, [sp, #4]
 800fd26:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fd2a:	9300      	str	r3, [sp, #0]
 800fd2c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800fd30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd32:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fd36:	f7fc fdc9 	bl	800c8cc <turn135outR>
			pass_count++;
 800fd3a:	4b97      	ldr	r3, [pc, #604]	; (800ff98 <run_shortest+0x12c8>)
 800fd3c:	881b      	ldrh	r3, [r3, #0]
 800fd3e:	3301      	adds	r3, #1
 800fd40:	b29a      	uxth	r2, r3
 800fd42:	4b95      	ldr	r3, [pc, #596]	; (800ff98 <run_shortest+0x12c8>)
 800fd44:	801a      	strh	r2, [r3, #0]
 800fd46:	e0eb      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -15) { //出り135L
 800fd48:	4b93      	ldr	r3, [pc, #588]	; (800ff98 <run_shortest+0x12c8>)
 800fd4a:	881b      	ldrh	r3, [r3, #0]
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	4b93      	ldr	r3, [pc, #588]	; (800ff9c <run_shortest+0x12cc>)
 800fd50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd54:	f113 0f0f 	cmn.w	r3, #15
 800fd58:	d115      	bne.n	800fd86 <run_shortest+0x10b6>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 800fd5a:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fd5e:	9302      	str	r3, [sp, #8]
 800fd60:	2300      	movs	r3, #0
 800fd62:	9301      	str	r3, [sp, #4]
 800fd64:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800fd68:	9300      	str	r3, [sp, #0]
 800fd6a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800fd6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd70:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fd74:	f7fc ff9c 	bl	800ccb0 <turn135outL>
			pass_count++;
 800fd78:	4b87      	ldr	r3, [pc, #540]	; (800ff98 <run_shortest+0x12c8>)
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	b29a      	uxth	r2, r3
 800fd80:	4b85      	ldr	r3, [pc, #532]	; (800ff98 <run_shortest+0x12c8>)
 800fd82:	801a      	strh	r2, [r3, #0]
 800fd84:	e0cc      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -16) { //V90R
 800fd86:	4b84      	ldr	r3, [pc, #528]	; (800ff98 <run_shortest+0x12c8>)
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	4b83      	ldr	r3, [pc, #524]	; (800ff9c <run_shortest+0x12cc>)
 800fd8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd92:	f113 0f10 	cmn.w	r3, #16
 800fd96:	d115      	bne.n	800fdc4 <run_shortest+0x10f4>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 800fd98:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fd9c:	9302      	str	r3, [sp, #8]
 800fd9e:	2300      	movs	r3, #0
 800fda0:	9301      	str	r3, [sp, #4]
 800fda2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800fda6:	9300      	str	r3, [sp, #0]
 800fda8:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800fdac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdae:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fdb2:	f7fd f969 	bl	800d088 <V90R>
			pass_count++;
 800fdb6:	4b78      	ldr	r3, [pc, #480]	; (800ff98 <run_shortest+0x12c8>)
 800fdb8:	881b      	ldrh	r3, [r3, #0]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	4b76      	ldr	r3, [pc, #472]	; (800ff98 <run_shortest+0x12c8>)
 800fdc0:	801a      	strh	r2, [r3, #0]
 800fdc2:	e0ad      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] == -17) { //V90L
 800fdc4:	4b74      	ldr	r3, [pc, #464]	; (800ff98 <run_shortest+0x12c8>)
 800fdc6:	881b      	ldrh	r3, [r3, #0]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	4b74      	ldr	r3, [pc, #464]	; (800ff9c <run_shortest+0x12cc>)
 800fdcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd0:	f113 0f11 	cmn.w	r3, #17
 800fdd4:	d115      	bne.n	800fe02 <run_shortest+0x1132>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 800fdd6:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 800fdda:	9302      	str	r3, [sp, #8]
 800fddc:	2300      	movs	r3, #0
 800fdde:	9301      	str	r3, [sp, #4]
 800fde0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800fde4:	9300      	str	r3, [sp, #0]
 800fde6:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 800fdea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdec:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800fdf0:	f7fd fb56 	bl	800d4a0 <V90L>
			pass_count++;
 800fdf4:	4b68      	ldr	r3, [pc, #416]	; (800ff98 <run_shortest+0x12c8>)
 800fdf6:	881b      	ldrh	r3, [r3, #0]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	4b66      	ldr	r3, [pc, #408]	; (800ff98 <run_shortest+0x12c8>)
 800fdfe:	801a      	strh	r2, [r3, #0]
 800fe00:	e08e      	b.n	800ff20 <run_shortest+0x1250>
		}
		else if (pass[pass_count] >= 1) {
 800fe02:	4b65      	ldr	r3, [pc, #404]	; (800ff98 <run_shortest+0x12c8>)
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	461a      	mov	r2, r3
 800fe08:	4b64      	ldr	r3, [pc, #400]	; (800ff9c <run_shortest+0x12cc>)
 800fe0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f340 8086 	ble.w	800ff20 <run_shortest+0x1250>
			first_v = howspeed.TurnCentervelocity;
 800fe14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe16:	63fb      	str	r3, [r7, #60]	; 0x3c
			last_v = howspeed.TurnCentervelocity;
 800fe18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe1a:	623b      	str	r3, [r7, #32]
			if (pass_count >= 1) {
 800fe1c:	4b5e      	ldr	r3, [pc, #376]	; (800ff98 <run_shortest+0x12c8>)
 800fe1e:	881b      	ldrh	r3, [r3, #0]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d013      	beq.n	800fe4c <run_shortest+0x117c>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 800fe24:	4b5c      	ldr	r3, [pc, #368]	; (800ff98 <run_shortest+0x12c8>)
 800fe26:	881b      	ldrh	r3, [r3, #0]
 800fe28:	3b01      	subs	r3, #1
 800fe2a:	4a5c      	ldr	r2, [pc, #368]	; (800ff9c <run_shortest+0x12cc>)
 800fe2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe30:	f113 0f02 	cmn.w	r3, #2
 800fe34:	d008      	beq.n	800fe48 <run_shortest+0x1178>
 800fe36:	4b58      	ldr	r3, [pc, #352]	; (800ff98 <run_shortest+0x12c8>)
 800fe38:	881b      	ldrh	r3, [r3, #0]
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	4a57      	ldr	r2, [pc, #348]	; (800ff9c <run_shortest+0x12cc>)
 800fe3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe42:	f113 0f03 	cmn.w	r3, #3
 800fe46:	d101      	bne.n	800fe4c <run_shortest+0x117c>
					first_v = howspeed.SlalomCentervelocity;
 800fe48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe4a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 800fe4c:	4b52      	ldr	r3, [pc, #328]	; (800ff98 <run_shortest+0x12c8>)
 800fe4e:	881b      	ldrh	r3, [r3, #0]
 800fe50:	3301      	adds	r3, #1
 800fe52:	4a52      	ldr	r2, [pc, #328]	; (800ff9c <run_shortest+0x12cc>)
 800fe54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe58:	f113 0f02 	cmn.w	r3, #2
 800fe5c:	d008      	beq.n	800fe70 <run_shortest+0x11a0>
 800fe5e:	4b4e      	ldr	r3, [pc, #312]	; (800ff98 <run_shortest+0x12c8>)
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	3301      	adds	r3, #1
 800fe64:	4a4d      	ldr	r2, [pc, #308]	; (800ff9c <run_shortest+0x12cc>)
 800fe66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe6a:	f113 0f03 	cmn.w	r3, #3
 800fe6e:	d101      	bne.n	800fe74 <run_shortest+0x11a4>
				last_v = howspeed.SlalomCentervelocity;
 800fe70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fe72:	623b      	str	r3, [r7, #32]
			}
			if (pass[pass_count] >= 50) {
 800fe74:	4b48      	ldr	r3, [pc, #288]	; (800ff98 <run_shortest+0x12c8>)
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	4b48      	ldr	r3, [pc, #288]	; (800ff9c <run_shortest+0x12cc>)
 800fe7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe80:	2b31      	cmp	r3, #49	; 0x31
 800fe82:	dd27      	ble.n	800fed4 <run_shortest+0x1204>
				mode.WallControlMode=3;
 800fe84:	2303      	movs	r3, #3
 800fe86:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	777b      	strb	r3, [r7, #29]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 800fe8c:	4b42      	ldr	r3, [pc, #264]	; (800ff98 <run_shortest+0x12c8>)
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	461a      	mov	r2, r3
 800fe92:	4b42      	ldr	r3, [pc, #264]	; (800ff9c <run_shortest+0x12cc>)
 800fe94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe98:	3b32      	subs	r3, #50	; 0x32
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f7f0 fb6a 	bl	8000574 <__aeabi_i2d>
 800fea0:	a33b      	add	r3, pc, #236	; (adr r3, 800ff90 <run_shortest+0x12c0>)
 800fea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea6:	f7f0 fbcf 	bl	8000648 <__aeabi_dmul>
 800feaa:	4602      	mov	r2, r0
 800feac:	460b      	mov	r3, r1
 800feae:	4610      	mov	r0, r2
 800feb0:	4619      	mov	r1, r3
 800feb2:	f7f0 fea1 	bl	8000bf8 <__aeabi_d2f>
 800feb6:	4603      	mov	r3, r0
 800feb8:	69f8      	ldr	r0, [r7, #28]
 800feba:	ed97 2a04 	vldr	s4, [r7, #16]
 800febe:	edd7 1a05 	vldr	s3, [r7, #20]
 800fec2:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 800fec6:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 800feca:	ee00 3a10 	vmov	s0, r3
 800fece:	f7f3 faad 	bl	800342c <straight_table2>
 800fed2:	e01f      	b.n	800ff14 <run_shortest+0x1244>
			} else {
				mode.WallControlMode=1;
 800fed4:	2301      	movs	r3, #1
 800fed6:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 800fed8:	2300      	movs	r3, #0
 800feda:	777b      	strb	r3, [r7, #29]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 800fedc:	4b2e      	ldr	r3, [pc, #184]	; (800ff98 <run_shortest+0x12c8>)
 800fede:	881b      	ldrh	r3, [r3, #0]
 800fee0:	461a      	mov	r2, r3
 800fee2:	4b2e      	ldr	r3, [pc, #184]	; (800ff9c <run_shortest+0x12cc>)
 800fee4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fee8:	4613      	mov	r3, r2
 800feea:	005b      	lsls	r3, r3, #1
 800feec:	4413      	add	r3, r2
 800feee:	011a      	lsls	r2, r3, #4
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	ee07 3a90 	vmov	s15, r3
 800fef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fefa:	69f8      	ldr	r0, [r7, #28]
 800fefc:	ed97 2a04 	vldr	s4, [r7, #16]
 800ff00:	edd7 1a05 	vldr	s3, [r7, #20]
 800ff04:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 800ff08:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 800ff0c:	eeb0 0a67 	vmov.f32	s0, s15
 800ff10:	f7f3 fa8c 	bl	800342c <straight_table2>
			}

			pass_count++;
 800ff14:	4b20      	ldr	r3, [pc, #128]	; (800ff98 <run_shortest+0x12c8>)
 800ff16:	881b      	ldrh	r3, [r3, #0]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	b29a      	uxth	r2, r3
 800ff1c:	4b1e      	ldr	r3, [pc, #120]	; (800ff98 <run_shortest+0x12c8>)
 800ff1e:	801a      	strh	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 800ff20:	4b1d      	ldr	r3, [pc, #116]	; (800ff98 <run_shortest+0x12c8>)
 800ff22:	881b      	ldrh	r3, [r3, #0]
 800ff24:	461a      	mov	r2, r3
 800ff26:	4b1d      	ldr	r3, [pc, #116]	; (800ff9c <run_shortest+0x12cc>)
 800ff28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d005      	beq.n	800ff3c <run_shortest+0x126c>
	while (pass_count <= 255) {
 800ff30:	4b19      	ldr	r3, [pc, #100]	; (800ff98 <run_shortest+0x12c8>)
 800ff32:	881b      	ldrh	r3, [r3, #0]
 800ff34:	2bff      	cmp	r3, #255	; 0xff
 800ff36:	f67f ad1f 	bls.w	800f978 <run_shortest+0xca8>
 800ff3a:	e000      	b.n	800ff3e <run_shortest+0x126e>
			break;
 800ff3c:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	773b      	strb	r3, [r7, #28]
		mode.WallControlStatus=0;
 800ff42:	2300      	movs	r3, #0
 800ff44:	777b      	strb	r3, [r7, #29]
		straight_table2(MAZE_SECTION,end_velocity, 0,inspeed, inacc, mode);
 800ff46:	69f8      	ldr	r0, [r7, #28]
 800ff48:	ed97 2a04 	vldr	s4, [r7, #16]
 800ff4c:	edd7 1a05 	vldr	s3, [r7, #20]
 800ff50:	ed9f 1a13 	vldr	s2, [pc, #76]	; 800ffa0 <run_shortest+0x12d0>
 800ff54:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 800ff58:	ed9f 0a12 	vldr	s0, [pc, #72]	; 800ffa4 <run_shortest+0x12d4>
 800ff5c:	f7f3 fa66 	bl	800342c <straight_table2>
		wait_ms_NoReset(700);
 800ff60:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800ff64:	f7f8 fa38 	bl	80083d8 <wait_ms_NoReset>
		pl_FunMotor_stop();
 800ff68:	f7f7 ff9a 	bl	8007ea0 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 800ff6c:	4b0e      	ldr	r3, [pc, #56]	; (800ffa8 <run_shortest+0x12d8>)
 800ff6e:	2200      	movs	r2, #0
 800ff70:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800ff72:	4b0e      	ldr	r3, [pc, #56]	; (800ffac <run_shortest+0x12dc>)
 800ff74:	2200      	movs	r2, #0
 800ff76:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 800ff78:	4b0d      	ldr	r3, [pc, #52]	; (800ffb0 <run_shortest+0x12e0>)
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 800ff7e:	2000      	movs	r0, #0
 800ff80:	f7f7 fefa 	bl	8007d78 <pl_DriveMotor_standby>
	int t = 0;
 800ff84:	2300      	movs	r3, #0
 800ff86:	627b      	str	r3, [r7, #36]	; 0x24

	while (t <= 14) {
 800ff88:	e02c      	b.n	800ffe4 <run_shortest+0x1314>
 800ff8a:	bf00      	nop
 800ff8c:	f3af 8000 	nop.w
 800ff90:	c022ec18 	.word	0xc022ec18
 800ff94:	404fd1de 	.word	0x404fd1de
 800ff98:	2000082c 	.word	0x2000082c
 800ff9c:	20000834 	.word	0x20000834
 800ffa0:	00000000 	.word	0x00000000
 800ffa4:	42b40000 	.word	0x42b40000
 800ffa8:	2000082e 	.word	0x2000082e
 800ffac:	2000080c 	.word	0x2000080c
 800ffb0:	2000edb4 	.word	0x2000edb4
		wall.row[t] = record.row[t];
 800ffb4:	4a23      	ldr	r2, [pc, #140]	; (8010044 <run_shortest+0x1374>)
 800ffb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ffbc:	4a22      	ldr	r2, [pc, #136]	; (8010048 <run_shortest+0x1378>)
 800ffbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 800ffc4:	4a1f      	ldr	r2, [pc, #124]	; (8010044 <run_shortest+0x1374>)
 800ffc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc8:	330c      	adds	r3, #12
 800ffca:	005b      	lsls	r3, r3, #1
 800ffcc:	4413      	add	r3, r2
 800ffce:	88d9      	ldrh	r1, [r3, #6]
 800ffd0:	4a1d      	ldr	r2, [pc, #116]	; (8010048 <run_shortest+0x1378>)
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	330c      	adds	r3, #12
 800ffd6:	005b      	lsls	r3, r3, #1
 800ffd8:	4413      	add	r3, r2
 800ffda:	460a      	mov	r2, r1
 800ffdc:	80da      	strh	r2, [r3, #6]
		t++;
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	3301      	adds	r3, #1
 800ffe2:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe6:	2b0e      	cmp	r3, #14
 800ffe8:	dde4      	ble.n	800ffb4 <run_shortest+0x12e4>
	}
	t = 0;
 800ffea:	2300      	movs	r3, #0
 800ffec:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 800ffee:	e020      	b.n	8010032 <run_shortest+0x1362>
		wall.row_look[t] = ~wall.row_look[t];
 800fff0:	4a15      	ldr	r2, [pc, #84]	; (8010048 <run_shortest+0x1378>)
 800fff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff4:	331c      	adds	r3, #28
 800fff6:	005b      	lsls	r3, r3, #1
 800fff8:	4413      	add	r3, r2
 800fffa:	889b      	ldrh	r3, [r3, #4]
 800fffc:	43db      	mvns	r3, r3
 800fffe:	b299      	uxth	r1, r3
 8010000:	4a11      	ldr	r2, [pc, #68]	; (8010048 <run_shortest+0x1378>)
 8010002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010004:	331c      	adds	r3, #28
 8010006:	005b      	lsls	r3, r3, #1
 8010008:	4413      	add	r3, r2
 801000a:	460a      	mov	r2, r1
 801000c:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 801000e:	4a0e      	ldr	r2, [pc, #56]	; (8010048 <run_shortest+0x1378>)
 8010010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010012:	332c      	adds	r3, #44	; 0x2c
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	4413      	add	r3, r2
 8010018:	885b      	ldrh	r3, [r3, #2]
 801001a:	43db      	mvns	r3, r3
 801001c:	b299      	uxth	r1, r3
 801001e:	4a0a      	ldr	r2, [pc, #40]	; (8010048 <run_shortest+0x1378>)
 8010020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010022:	332c      	adds	r3, #44	; 0x2c
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	4413      	add	r3, r2
 8010028:	460a      	mov	r2, r1
 801002a:	805a      	strh	r2, [r3, #2]
		t++;
 801002c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801002e:	3301      	adds	r3, #1
 8010030:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010034:	2b0e      	cmp	r3, #14
 8010036:	dddb      	ble.n	800fff0 <run_shortest+0x1320>
	}

}
 8010038:	bf00      	nop
 801003a:	bf00      	nop
 801003c:	3748      	adds	r7, #72	; 0x48
 801003e:	46bd      	mov	sp, r7
 8010040:	bdb0      	pop	{r4, r5, r7, pc}
 8010042:	bf00      	nop
 8010044:	20000ca8 	.word	0x20000ca8
 8010048:	20000c30 	.word	0x20000c30

0801004c <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 801004c:	b580      	push	{r7, lr}
 801004e:	b08a      	sub	sp, #40	; 0x28
 8010050:	af02      	add	r7, sp, #8
 8010052:	60f8      	str	r0, [r7, #12]
 8010054:	60b9      	str	r1, [r7, #8]
 8010056:	607a      	str	r2, [r7, #4]
 8010058:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 801005a:	2301      	movs	r3, #1
 801005c:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 801005e:	2301      	movs	r3, #1
 8010060:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010062:	2301      	movs	r3, #1
 8010064:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 801006e:	f107 0114 	add.w	r1, r7, #20
 8010072:	f107 0318 	add.w	r3, r7, #24
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	4618      	mov	r0, r3
 801007a:	f7fd fdc9 	bl	800dc10 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 801007e:	69b8      	ldr	r0, [r7, #24]
 8010080:	6979      	ldr	r1, [r7, #20]
 8010082:	f107 021e 	add.w	r2, r7, #30
 8010086:	f107 031c 	add.w	r3, r7, #28
 801008a:	9301      	str	r3, [sp, #4]
 801008c:	f107 031d 	add.w	r3, r7, #29
 8010090:	9300      	str	r3, [sp, #0]
 8010092:	4613      	mov	r3, r2
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	f000 fe19 	bl	8010ccc <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 801009a:	7fbb      	ldrb	r3, [r7, #30]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d007      	beq.n	80100b0 <decision_kitiku+0x64>
 80100a0:	7f7b      	ldrb	r3, [r7, #29]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d004      	beq.n	80100b0 <decision_kitiku+0x64>
 80100a6:	7f3b      	ldrb	r3, [r7, #28]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <decision_kitiku+0x64>
 80100ac:	2301      	movs	r3, #1
 80100ae:	e000      	b.n	80100b2 <decision_kitiku+0x66>
 80100b0:	2300      	movs	r3, #0
 80100b2:	77fb      	strb	r3, [r7, #31]
 80100b4:	7ffb      	ldrb	r3, [r7, #31]
 80100b6:	f003 0301 	and.w	r3, r3, #1
 80100ba:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 80100bc:	7ffb      	ldrb	r3, [r7, #31]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d02b      	beq.n	801011a <decision_kitiku+0xce>
 80100c2:	887a      	ldrh	r2, [r7, #2]
 80100c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d827      	bhi.n	801011a <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 80100ca:	887a      	ldrh	r2, [r7, #2]
 80100cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d823      	bhi.n	801011a <decision_kitiku+0xce>
 80100d2:	887a      	ldrh	r2, [r7, #2]
 80100d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d81f      	bhi.n	801011a <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d102      	bne.n	80100e6 <decision_kitiku+0x9a>
 80100e0:	68bb      	ldr	r3, [r7, #8]
 80100e2:	2b0d      	cmp	r3, #13
 80100e4:	dc11      	bgt.n	801010a <decision_kitiku+0xbe>
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	2b02      	cmp	r3, #2
 80100ea:	d102      	bne.n	80100f2 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	2b0d      	cmp	r3, #13
 80100f0:	dc0b      	bgt.n	801010a <decision_kitiku+0xbe>
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2b03      	cmp	r3, #3
 80100f6:	d102      	bne.n	80100fe <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	2b01      	cmp	r3, #1
 80100fc:	dd05      	ble.n	801010a <decision_kitiku+0xbe>
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	2b04      	cmp	r3, #4
 8010102:	d106      	bne.n	8010112 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b01      	cmp	r3, #1
 8010108:	dc03      	bgt.n	8010112 <decision_kitiku+0xc6>
			kitikukan = 0;
 801010a:	4b08      	ldr	r3, [pc, #32]	; (801012c <decision_kitiku+0xe0>)
 801010c:	2200      	movs	r2, #0
 801010e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010110:	e007      	b.n	8010122 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010112:	4b06      	ldr	r3, [pc, #24]	; (801012c <decision_kitiku+0xe0>)
 8010114:	2201      	movs	r2, #1
 8010116:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010118:	e003      	b.n	8010122 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 801011a:	4b04      	ldr	r3, [pc, #16]	; (801012c <decision_kitiku+0xe0>)
 801011c:	2200      	movs	r2, #0
 801011e:	601a      	str	r2, [r3, #0]
	}


}
 8010120:	bf00      	nop
 8010122:	bf00      	nop
 8010124:	3720      	adds	r7, #32
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}
 801012a:	bf00      	nop
 801012c:	20000830 	.word	0x20000830

08010130 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction,int *kitiku_distance) {
 8010130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010132:	b09b      	sub	sp, #108	; 0x6c
 8010134:	af04      	add	r7, sp, #16
 8010136:	60f8      	str	r0, [r7, #12]
 8010138:	60b9      	str	r1, [r7, #8]
 801013a:	607a      	str	r2, [r7, #4]
 801013c:	603b      	str	r3, [r7, #0]
	*kitiku_distance = 1;
 801013e:	683b      	ldr	r3, [r7, #0]
 8010140:	2201      	movs	r2, #1
 8010142:	601a      	str	r2, [r3, #0]
	int kitiku = 1;
 8010144:	2301      	movs	r3, #1
 8010146:	647b      	str	r3, [r7, #68]	; 0x44
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	63bb      	str	r3, [r7, #56]	; 0x38
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	637b      	str	r3, [r7, #52]	; 0x34
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 801015a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 801015e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010162:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010164:	4618      	mov	r0, r3
 8010166:	f7fd fd53 	bl	800dc10 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 801016a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016c:	633b      	str	r3, [r7, #48]	; 0x30
 801016e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010174:	62bb      	str	r3, [r7, #40]	; 0x28
 8010176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010178:	627b      	str	r3, [r7, #36]	; 0x24
 801017a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017c:	623b      	str	r3, [r7, #32]
 801017e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010180:	61fb      	str	r3, [r7, #28]

		update_coordinate(&x_front,&y_front,direction_now);
 8010182:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010186:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801018a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801018c:	4618      	mov	r0, r3
 801018e:	f7fd fd3f 	bl	800dc10 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010194:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010196:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801019a:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	4613      	mov	r3, r2
 80101a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101aa:	f000 fd8f 	bl	8010ccc <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 80101ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d009      	beq.n	80101ca <compress_kitiku+0x9a>
 80101b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d005      	beq.n	80101ca <compress_kitiku+0x9a>
 80101be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <compress_kitiku+0x9a>
 80101c6:	2301      	movs	r3, #1
 80101c8:	e000      	b.n	80101cc <compress_kitiku+0x9c>
 80101ca:	2300      	movs	r3, #0
 80101cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80101d4:	f003 0301 	and.w	r3, r3, #1
 80101d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 80101dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101de:	2b04      	cmp	r3, #4
 80101e0:	d102      	bne.n	80101e8 <compress_kitiku+0xb8>
 80101e2:	2301      	movs	r3, #1
 80101e4:	653b      	str	r3, [r7, #80]	; 0x50
 80101e6:	e002      	b.n	80101ee <compress_kitiku+0xbe>
 80101e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101ea:	3301      	adds	r3, #1
 80101ec:	653b      	str	r3, [r7, #80]	; 0x50
		update_coordinate(&x_right,&y_right,direction_right);
 80101ee:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80101f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80101f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fd fd09 	bl	800dc10 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 80101fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010200:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010202:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010206:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 801020a:	9301      	str	r3, [sp, #4]
 801020c:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	4613      	mov	r3, r2
 8010214:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010216:	f000 fd59 	bl	8010ccc <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 801021a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801021e:	2b00      	cmp	r3, #0
 8010220:	d009      	beq.n	8010236 <compress_kitiku+0x106>
 8010222:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010226:	2b00      	cmp	r3, #0
 8010228:	d005      	beq.n	8010236 <compress_kitiku+0x106>
 801022a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801022e:	2b00      	cmp	r3, #0
 8010230:	d001      	beq.n	8010236 <compress_kitiku+0x106>
 8010232:	2301      	movs	r3, #1
 8010234:	e000      	b.n	8010238 <compress_kitiku+0x108>
 8010236:	2300      	movs	r3, #0
 8010238:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801023c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010240:	f003 0301 	and.w	r3, r3, #1
 8010244:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801024a:	2b01      	cmp	r3, #1
 801024c:	d102      	bne.n	8010254 <compress_kitiku+0x124>
 801024e:	2304      	movs	r3, #4
 8010250:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010252:	e002      	b.n	801025a <compress_kitiku+0x12a>
 8010254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010256:	3b01      	subs	r3, #1
 8010258:	64fb      	str	r3, [r7, #76]	; 0x4c
		update_coordinate(&x_left,&y_left,direction_left);
 801025a:	f107 011c 	add.w	r1, r7, #28
 801025e:	f107 0320 	add.w	r3, r7, #32
 8010262:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010264:	4618      	mov	r0, r3
 8010266:	f7fd fcd3 	bl	800dc10 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 801026a:	6a38      	ldr	r0, [r7, #32]
 801026c:	69f9      	ldr	r1, [r7, #28]
 801026e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010272:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010276:	9301      	str	r3, [sp, #4]
 8010278:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	4613      	mov	r3, r2
 8010280:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010282:	f000 fd23 	bl	8010ccc <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010286:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801028a:	2b00      	cmp	r3, #0
 801028c:	d009      	beq.n	80102a2 <compress_kitiku+0x172>
 801028e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010292:	2b00      	cmp	r3, #0
 8010294:	d005      	beq.n	80102a2 <compress_kitiku+0x172>
 8010296:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <compress_kitiku+0x172>
 801029e:	2301      	movs	r3, #1
 80102a0:	e000      	b.n	80102a4 <compress_kitiku+0x174>
 80102a2:	2300      	movs	r3, #0
 80102a4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 80102a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80102ac:	f003 0301 	and.w	r3, r3, #1
 80102b0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 80102b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80102b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80102bc:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80102c0:	9301      	str	r3, [sp, #4]
 80102c2:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	4613      	mov	r3, r2
 80102ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102cc:	f000 fb8a 	bl	80109e4 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 80102d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102d4:	f107 0614 	add.w	r6, r7, #20
 80102d8:	f107 0516 	add.w	r5, r7, #22
 80102dc:	f107 0418 	add.w	r4, r7, #24
 80102e0:	f107 001a 	add.w	r0, r7, #26
 80102e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102e6:	9102      	str	r1, [sp, #8]
 80102e8:	9201      	str	r2, [sp, #4]
 80102ea:	9300      	str	r3, [sp, #0]
 80102ec:	4633      	mov	r3, r6
 80102ee:	462a      	mov	r2, r5
 80102f0:	4621      	mov	r1, r4
 80102f2:	f000 fe6b 	bl	8010fcc <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 80102f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d001      	beq.n	8010302 <compress_kitiku+0x1d2>
 80102fe:	23ff      	movs	r3, #255	; 0xff
 8010300:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010302:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010306:	2b00      	cmp	r3, #0
 8010308:	d001      	beq.n	801030e <compress_kitiku+0x1de>
 801030a:	23ff      	movs	r3, #255	; 0xff
 801030c:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 801030e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <compress_kitiku+0x1ea>
 8010316:	23ff      	movs	r3, #255	; 0xff
 8010318:	82bb      	strh	r3, [r7, #20]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 801031a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801031c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031e:	496c      	ldr	r1, [pc, #432]	; (80104d0 <compress_kitiku+0x3a0>)
 8010320:	0112      	lsls	r2, r2, #4
 8010322:	4413      	add	r3, r2
 8010324:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010328:	2b01      	cmp	r3, #1
 801032a:	f240 8099 	bls.w	8010460 <compress_kitiku+0x330>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 801032e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010330:	2b01      	cmp	r3, #1
 8010332:	d103      	bne.n	801033c <compress_kitiku+0x20c>
 8010334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010336:	2b0d      	cmp	r3, #13
 8010338:	f300 8094 	bgt.w	8010464 <compress_kitiku+0x334>
		if (direction_now==2 && x_now>=14) {break;}
 801033c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801033e:	2b02      	cmp	r3, #2
 8010340:	d103      	bne.n	801034a <compress_kitiku+0x21a>
 8010342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010344:	2b0d      	cmp	r3, #13
 8010346:	f300 808f 	bgt.w	8010468 <compress_kitiku+0x338>
		if (direction_now==3 && y_now<=1) {break;}
 801034a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801034c:	2b03      	cmp	r3, #3
 801034e:	d103      	bne.n	8010358 <compress_kitiku+0x228>
 8010350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010352:	2b01      	cmp	r3, #1
 8010354:	f340 808a 	ble.w	801046c <compress_kitiku+0x33c>
		if (direction_now==4 && x_now<=1) {break;}
 8010358:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801035a:	2b04      	cmp	r3, #4
 801035c:	d103      	bne.n	8010366 <compress_kitiku+0x236>
 801035e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010360:	2b01      	cmp	r3, #1
 8010362:	f340 8085 	ble.w	8010470 <compress_kitiku+0x340>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8010366:	8b7b      	ldrh	r3, [r7, #26]
 8010368:	2bff      	cmp	r3, #255	; 0xff
 801036a:	d10c      	bne.n	8010386 <compress_kitiku+0x256>
 801036c:	8b3b      	ldrh	r3, [r7, #24]
 801036e:	2bff      	cmp	r3, #255	; 0xff
 8010370:	d109      	bne.n	8010386 <compress_kitiku+0x256>
 8010372:	8abb      	ldrh	r3, [r7, #20]
 8010374:	2bff      	cmp	r3, #255	; 0xff
 8010376:	d106      	bne.n	8010386 <compress_kitiku+0x256>
 8010378:	8afb      	ldrh	r3, [r7, #22]
 801037a:	2bff      	cmp	r3, #255	; 0xff
 801037c:	d103      	bne.n	8010386 <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 801037e:	4b55      	ldr	r3, [pc, #340]	; (80104d4 <compress_kitiku+0x3a4>)
 8010380:	2201      	movs	r2, #1
 8010382:	701a      	strb	r2, [r3, #0]
		break;
 8010384:	e077      	b.n	8010476 <compress_kitiku+0x346>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010386:	8b7a      	ldrh	r2, [r7, #26]
 8010388:	8b3b      	ldrh	r3, [r7, #24]
 801038a:	429a      	cmp	r2, r3
 801038c:	d814      	bhi.n	80103b8 <compress_kitiku+0x288>
 801038e:	8b7a      	ldrh	r2, [r7, #26]
 8010390:	8abb      	ldrh	r3, [r7, #20]
 8010392:	429a      	cmp	r2, r3
 8010394:	d810      	bhi.n	80103b8 <compress_kitiku+0x288>
 8010396:	8b7a      	ldrh	r2, [r7, #26]
 8010398:	8afb      	ldrh	r3, [r7, #22]
 801039a:	429a      	cmp	r2, r3
 801039c:	d80c      	bhi.n	80103b8 <compress_kitiku+0x288>
		// 直進
			if(look_f){
 801039e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d005      	beq.n	80103b2 <compress_kitiku+0x282>
				*kitiku_distance += 2;
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	1c9a      	adds	r2, r3, #2
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	601a      	str	r2, [r3, #0]
 80103b0:	e002      	b.n	80103b8 <compress_kitiku+0x288>
			}else{
				kitiku = 0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 80103b6:	e05e      	b.n	8010476 <compress_kitiku+0x346>
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80103b8:	8b3a      	ldrh	r2, [r7, #24]
 80103ba:	8b7b      	ldrh	r3, [r7, #26]
 80103bc:	429a      	cmp	r2, r3
 80103be:	d211      	bcs.n	80103e4 <compress_kitiku+0x2b4>
 80103c0:	8b3a      	ldrh	r2, [r7, #24]
 80103c2:	8abb      	ldrh	r3, [r7, #20]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d80d      	bhi.n	80103e4 <compress_kitiku+0x2b4>
 80103c8:	8b3a      	ldrh	r2, [r7, #24]
 80103ca:	8afb      	ldrh	r3, [r7, #22]
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d809      	bhi.n	80103e4 <compress_kitiku+0x2b4>
		// 右旋回
			if(look_r){
 80103d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d002      	beq.n	80103de <compress_kitiku+0x2ae>
				kitiku = 0;
 80103d8:	2300      	movs	r3, #0
 80103da:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 80103dc:	e04b      	b.n	8010476 <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 80103e2:	e048      	b.n	8010476 <compress_kitiku+0x346>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80103e4:	8aba      	ldrh	r2, [r7, #20]
 80103e6:	8b7b      	ldrh	r3, [r7, #26]
 80103e8:	429a      	cmp	r2, r3
 80103ea:	d211      	bcs.n	8010410 <compress_kitiku+0x2e0>
 80103ec:	8aba      	ldrh	r2, [r7, #20]
 80103ee:	8b3b      	ldrh	r3, [r7, #24]
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d20d      	bcs.n	8010410 <compress_kitiku+0x2e0>
 80103f4:	8aba      	ldrh	r2, [r7, #20]
 80103f6:	8afb      	ldrh	r3, [r7, #22]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d809      	bhi.n	8010410 <compress_kitiku+0x2e0>
		// 左旋回
			if(look_l){
 80103fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <compress_kitiku+0x2da>
				kitiku = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8010408:	e035      	b.n	8010476 <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 801040a:	2300      	movs	r3, #0
 801040c:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801040e:	e032      	b.n	8010476 <compress_kitiku+0x346>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 8010410:	8afa      	ldrh	r2, [r7, #22]
 8010412:	8b7b      	ldrh	r3, [r7, #26]
 8010414:	429a      	cmp	r2, r3
 8010416:	d20a      	bcs.n	801042e <compress_kitiku+0x2fe>
 8010418:	8afa      	ldrh	r2, [r7, #22]
 801041a:	8b3b      	ldrh	r3, [r7, #24]
 801041c:	429a      	cmp	r2, r3
 801041e:	d206      	bcs.n	801042e <compress_kitiku+0x2fe>
								&& back_count < left_count){
 8010420:	8afa      	ldrh	r2, [r7, #22]
 8010422:	8abb      	ldrh	r3, [r7, #20]
 8010424:	429a      	cmp	r2, r3
 8010426:	d202      	bcs.n	801042e <compress_kitiku+0x2fe>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 8010428:	2300      	movs	r3, #0
 801042a:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 801042c:	e023      	b.n	8010476 <compress_kitiku+0x346>
			direction_now+=2;
		}


		if (direction_now == 5) {
 801042e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010430:	2b05      	cmp	r3, #5
 8010432:	d101      	bne.n	8010438 <compress_kitiku+0x308>
			direction_now = 1;
 8010434:	2301      	movs	r3, #1
 8010436:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 6) {
 8010438:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801043a:	2b06      	cmp	r3, #6
 801043c:	d101      	bne.n	8010442 <compress_kitiku+0x312>
			direction_now = 2;
 801043e:	2302      	movs	r3, #2
 8010440:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 0) {
 8010442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010444:	2b00      	cmp	r3, #0
 8010446:	d101      	bne.n	801044c <compress_kitiku+0x31c>
			direction_now = 4;
 8010448:	2304      	movs	r3, #4
 801044a:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == -1) {
 801044c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801044e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010452:	d101      	bne.n	8010458 <compress_kitiku+0x328>
			direction_now = 3;
 8010454:	2303      	movs	r3, #3
 8010456:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (kitiku == 0) {
 8010458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801045a:	2b00      	cmp	r3, #0
 801045c:	d00a      	beq.n	8010474 <compress_kitiku+0x344>
		update_coordinate(&x_now,&y_now,direction_now);
 801045e:	e67c      	b.n	801015a <compress_kitiku+0x2a>
			break;
 8010460:	bf00      	nop
 8010462:	e008      	b.n	8010476 <compress_kitiku+0x346>
		if (direction_now==1 && y_now>=14) {break;}
 8010464:	bf00      	nop
 8010466:	e006      	b.n	8010476 <compress_kitiku+0x346>
		if (direction_now==2 && x_now>=14) {break;}
 8010468:	bf00      	nop
 801046a:	e004      	b.n	8010476 <compress_kitiku+0x346>
		if (direction_now==3 && y_now<=1) {break;}
 801046c:	bf00      	nop
 801046e:	e002      	b.n	8010476 <compress_kitiku+0x346>
		if (direction_now==4 && x_now<=1) {break;}
 8010470:	bf00      	nop
 8010472:	e000      	b.n	8010476 <compress_kitiku+0x346>

			break;
 8010474:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 8010476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010478:	3302      	adds	r3, #2
 801047a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (direction2 == 5) {
 801047c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801047e:	2b05      	cmp	r3, #5
 8010480:	d101      	bne.n	8010486 <compress_kitiku+0x356>
				direction2 = 1;
 8010482:	2301      	movs	r3, #1
 8010484:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 6) {
 8010486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010488:	2b06      	cmp	r3, #6
 801048a:	d101      	bne.n	8010490 <compress_kitiku+0x360>
				direction2 = 2;
 801048c:	2302      	movs	r3, #2
 801048e:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 0) {
 8010490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010492:	2b00      	cmp	r3, #0
 8010494:	d101      	bne.n	801049a <compress_kitiku+0x36a>
				direction2 = 4;
 8010496:	2304      	movs	r3, #4
 8010498:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == -1) {
 801049a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801049c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104a0:	d101      	bne.n	80104a6 <compress_kitiku+0x376>
				direction2 = 3;
 80104a2:	2303      	movs	r3, #3
 80104a4:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	update_coordinate(&x_now,&y_now,direction2);
 80104a6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80104aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80104ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fd fbad 	bl	800dc10 <update_coordinate>

	*x=x_now;
 80104b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	601a      	str	r2, [r3, #0]
	*y=y_now;
 80104bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104be:	68bb      	ldr	r3, [r7, #8]
 80104c0:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80104c6:	601a      	str	r2, [r3, #0]

}
 80104c8:	bf00      	nop
 80104ca:	375c      	adds	r7, #92	; 0x5c
 80104cc:	46bd      	mov	sp, r7
 80104ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104d0:	20000d24 	.word	0x20000d24
 80104d4:	2000080b 	.word	0x2000080b

080104d8 <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 80104d8:	b480      	push	{r7}
 80104da:	b085      	sub	sp, #20
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	607a      	str	r2, [r7, #4]
 80104e4:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	3b01      	subs	r3, #1
 80104ea:	2b03      	cmp	r3, #3
 80104ec:	f200 8272 	bhi.w	80109d4 <update_wall+0x4fc>
 80104f0:	a201      	add	r2, pc, #4	; (adr r2, 80104f8 <update_wall+0x20>)
 80104f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104f6:	bf00      	nop
 80104f8:	08010509 	.word	0x08010509
 80104fc:	0801062f 	.word	0x0801062f
 8010500:	08010765 	.word	0x08010765
 8010504:	08010893 	.word	0x08010893
	case 1:
		if (y <= 14) {
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	2b0e      	cmp	r3, #14
 801050c:	dc2e      	bgt.n	801056c <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 801050e:	4a94      	ldr	r2, [pc, #592]	; (8010760 <update_wall+0x288>)
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	332c      	adds	r3, #44	; 0x2c
 8010514:	005b      	lsls	r3, r3, #1
 8010516:	4413      	add	r3, r2
 8010518:	885b      	ldrh	r3, [r3, #2]
 801051a:	b21a      	sxth	r2, r3
 801051c:	2101      	movs	r1, #1
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	fa01 f303 	lsl.w	r3, r1, r3
 8010524:	b21b      	sxth	r3, r3
 8010526:	4313      	orrs	r3, r2
 8010528:	b21b      	sxth	r3, r3
 801052a:	b299      	uxth	r1, r3
 801052c:	4a8c      	ldr	r2, [pc, #560]	; (8010760 <update_wall+0x288>)
 801052e:	68bb      	ldr	r3, [r7, #8]
 8010530:	332c      	adds	r3, #44	; 0x2c
 8010532:	005b      	lsls	r3, r3, #1
 8010534:	4413      	add	r3, r2
 8010536:	460a      	mov	r2, r1
 8010538:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 801053a:	78fb      	ldrb	r3, [r7, #3]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d015      	beq.n	801056c <update_wall+0x94>
 8010540:	4a87      	ldr	r2, [pc, #540]	; (8010760 <update_wall+0x288>)
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	330c      	adds	r3, #12
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	4413      	add	r3, r2
 801054a:	88db      	ldrh	r3, [r3, #6]
 801054c:	b21a      	sxth	r2, r3
 801054e:	2101      	movs	r1, #1
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	fa01 f303 	lsl.w	r3, r1, r3
 8010556:	b21b      	sxth	r3, r3
 8010558:	4313      	orrs	r3, r2
 801055a:	b21b      	sxth	r3, r3
 801055c:	b299      	uxth	r1, r3
 801055e:	4a80      	ldr	r2, [pc, #512]	; (8010760 <update_wall+0x288>)
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	330c      	adds	r3, #12
 8010564:	005b      	lsls	r3, r3, #1
 8010566:	4413      	add	r3, r2
 8010568:	460a      	mov	r2, r1
 801056a:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2b00      	cmp	r3, #0
 8010570:	dd2d      	ble.n	80105ce <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	3b01      	subs	r3, #1
 8010576:	4a7a      	ldr	r2, [pc, #488]	; (8010760 <update_wall+0x288>)
 8010578:	331c      	adds	r3, #28
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	4413      	add	r3, r2
 801057e:	889b      	ldrh	r3, [r3, #4]
 8010580:	b21a      	sxth	r2, r3
 8010582:	2101      	movs	r1, #1
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	fa01 f303 	lsl.w	r3, r1, r3
 801058a:	b21b      	sxth	r3, r3
 801058c:	4313      	orrs	r3, r2
 801058e:	b21a      	sxth	r2, r3
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	3b01      	subs	r3, #1
 8010594:	b291      	uxth	r1, r2
 8010596:	4a72      	ldr	r2, [pc, #456]	; (8010760 <update_wall+0x288>)
 8010598:	331c      	adds	r3, #28
 801059a:	005b      	lsls	r3, r3, #1
 801059c:	4413      	add	r3, r2
 801059e:	460a      	mov	r2, r1
 80105a0:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80105a2:	7f3b      	ldrb	r3, [r7, #28]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d012      	beq.n	80105ce <update_wall+0xf6>
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	3b01      	subs	r3, #1
 80105ac:	4a6c      	ldr	r2, [pc, #432]	; (8010760 <update_wall+0x288>)
 80105ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105b2:	b21a      	sxth	r2, r3
 80105b4:	2101      	movs	r1, #1
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	fa01 f303 	lsl.w	r3, r1, r3
 80105bc:	b21b      	sxth	r3, r3
 80105be:	4313      	orrs	r3, r2
 80105c0:	b21a      	sxth	r2, r3
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	3b01      	subs	r3, #1
 80105c6:	b291      	uxth	r1, r2
 80105c8:	4a65      	ldr	r2, [pc, #404]	; (8010760 <update_wall+0x288>)
 80105ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2b0e      	cmp	r3, #14
 80105d2:	f300 81f8 	bgt.w	80109c6 <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 80105d6:	4a62      	ldr	r2, [pc, #392]	; (8010760 <update_wall+0x288>)
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	331c      	adds	r3, #28
 80105dc:	005b      	lsls	r3, r3, #1
 80105de:	4413      	add	r3, r2
 80105e0:	889b      	ldrh	r3, [r3, #4]
 80105e2:	b21a      	sxth	r2, r3
 80105e4:	2101      	movs	r1, #1
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	fa01 f303 	lsl.w	r3, r1, r3
 80105ec:	b21b      	sxth	r3, r3
 80105ee:	4313      	orrs	r3, r2
 80105f0:	b21b      	sxth	r3, r3
 80105f2:	b299      	uxth	r1, r3
 80105f4:	4a5a      	ldr	r2, [pc, #360]	; (8010760 <update_wall+0x288>)
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	331c      	adds	r3, #28
 80105fa:	005b      	lsls	r3, r3, #1
 80105fc:	4413      	add	r3, r2
 80105fe:	460a      	mov	r2, r1
 8010600:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010602:	7e3b      	ldrb	r3, [r7, #24]
 8010604:	2b00      	cmp	r3, #0
 8010606:	f000 81de 	beq.w	80109c6 <update_wall+0x4ee>
 801060a:	4a55      	ldr	r2, [pc, #340]	; (8010760 <update_wall+0x288>)
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010612:	b21a      	sxth	r2, r3
 8010614:	2101      	movs	r1, #1
 8010616:	68bb      	ldr	r3, [r7, #8]
 8010618:	fa01 f303 	lsl.w	r3, r1, r3
 801061c:	b21b      	sxth	r3, r3
 801061e:	4313      	orrs	r3, r2
 8010620:	b21b      	sxth	r3, r3
 8010622:	b299      	uxth	r1, r3
 8010624:	4a4e      	ldr	r2, [pc, #312]	; (8010760 <update_wall+0x288>)
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 801062c:	e1cb      	b.n	80109c6 <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	2b0e      	cmp	r3, #14
 8010632:	dc29      	bgt.n	8010688 <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010634:	4a4a      	ldr	r2, [pc, #296]	; (8010760 <update_wall+0x288>)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	331c      	adds	r3, #28
 801063a:	005b      	lsls	r3, r3, #1
 801063c:	4413      	add	r3, r2
 801063e:	889b      	ldrh	r3, [r3, #4]
 8010640:	b21a      	sxth	r2, r3
 8010642:	2101      	movs	r1, #1
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	fa01 f303 	lsl.w	r3, r1, r3
 801064a:	b21b      	sxth	r3, r3
 801064c:	4313      	orrs	r3, r2
 801064e:	b21b      	sxth	r3, r3
 8010650:	b299      	uxth	r1, r3
 8010652:	4a43      	ldr	r2, [pc, #268]	; (8010760 <update_wall+0x288>)
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	331c      	adds	r3, #28
 8010658:	005b      	lsls	r3, r3, #1
 801065a:	4413      	add	r3, r2
 801065c:	460a      	mov	r2, r1
 801065e:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010660:	78fb      	ldrb	r3, [r7, #3]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d010      	beq.n	8010688 <update_wall+0x1b0>
 8010666:	4a3e      	ldr	r2, [pc, #248]	; (8010760 <update_wall+0x288>)
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801066e:	b21a      	sxth	r2, r3
 8010670:	2101      	movs	r1, #1
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	fa01 f303 	lsl.w	r3, r1, r3
 8010678:	b21b      	sxth	r3, r3
 801067a:	4313      	orrs	r3, r2
 801067c:	b21b      	sxth	r3, r3
 801067e:	b299      	uxth	r1, r3
 8010680:	4a37      	ldr	r2, [pc, #220]	; (8010760 <update_wall+0x288>)
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010688:	68bb      	ldr	r3, [r7, #8]
 801068a:	2b0e      	cmp	r3, #14
 801068c:	dc2e      	bgt.n	80106ec <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 801068e:	4a34      	ldr	r2, [pc, #208]	; (8010760 <update_wall+0x288>)
 8010690:	68bb      	ldr	r3, [r7, #8]
 8010692:	332c      	adds	r3, #44	; 0x2c
 8010694:	005b      	lsls	r3, r3, #1
 8010696:	4413      	add	r3, r2
 8010698:	885b      	ldrh	r3, [r3, #2]
 801069a:	b21a      	sxth	r2, r3
 801069c:	2101      	movs	r1, #1
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	fa01 f303 	lsl.w	r3, r1, r3
 80106a4:	b21b      	sxth	r3, r3
 80106a6:	4313      	orrs	r3, r2
 80106a8:	b21b      	sxth	r3, r3
 80106aa:	b299      	uxth	r1, r3
 80106ac:	4a2c      	ldr	r2, [pc, #176]	; (8010760 <update_wall+0x288>)
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	332c      	adds	r3, #44	; 0x2c
 80106b2:	005b      	lsls	r3, r3, #1
 80106b4:	4413      	add	r3, r2
 80106b6:	460a      	mov	r2, r1
 80106b8:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80106ba:	7f3b      	ldrb	r3, [r7, #28]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d015      	beq.n	80106ec <update_wall+0x214>
 80106c0:	4a27      	ldr	r2, [pc, #156]	; (8010760 <update_wall+0x288>)
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	330c      	adds	r3, #12
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	4413      	add	r3, r2
 80106ca:	88db      	ldrh	r3, [r3, #6]
 80106cc:	b21a      	sxth	r2, r3
 80106ce:	2101      	movs	r1, #1
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	fa01 f303 	lsl.w	r3, r1, r3
 80106d6:	b21b      	sxth	r3, r3
 80106d8:	4313      	orrs	r3, r2
 80106da:	b21b      	sxth	r3, r3
 80106dc:	b299      	uxth	r1, r3
 80106de:	4a20      	ldr	r2, [pc, #128]	; (8010760 <update_wall+0x288>)
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	330c      	adds	r3, #12
 80106e4:	005b      	lsls	r3, r3, #1
 80106e6:	4413      	add	r3, r2
 80106e8:	460a      	mov	r2, r1
 80106ea:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	f340 816b 	ble.w	80109ca <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	3b01      	subs	r3, #1
 80106f8:	4a19      	ldr	r2, [pc, #100]	; (8010760 <update_wall+0x288>)
 80106fa:	332c      	adds	r3, #44	; 0x2c
 80106fc:	005b      	lsls	r3, r3, #1
 80106fe:	4413      	add	r3, r2
 8010700:	885b      	ldrh	r3, [r3, #2]
 8010702:	b21a      	sxth	r2, r3
 8010704:	2101      	movs	r1, #1
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	fa01 f303 	lsl.w	r3, r1, r3
 801070c:	b21b      	sxth	r3, r3
 801070e:	4313      	orrs	r3, r2
 8010710:	b21a      	sxth	r2, r3
 8010712:	68bb      	ldr	r3, [r7, #8]
 8010714:	3b01      	subs	r3, #1
 8010716:	b291      	uxth	r1, r2
 8010718:	4a11      	ldr	r2, [pc, #68]	; (8010760 <update_wall+0x288>)
 801071a:	332c      	adds	r3, #44	; 0x2c
 801071c:	005b      	lsls	r3, r3, #1
 801071e:	4413      	add	r3, r2
 8010720:	460a      	mov	r2, r1
 8010722:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010724:	7e3b      	ldrb	r3, [r7, #24]
 8010726:	2b00      	cmp	r3, #0
 8010728:	f000 814f 	beq.w	80109ca <update_wall+0x4f2>
 801072c:	68bb      	ldr	r3, [r7, #8]
 801072e:	3b01      	subs	r3, #1
 8010730:	4a0b      	ldr	r2, [pc, #44]	; (8010760 <update_wall+0x288>)
 8010732:	330c      	adds	r3, #12
 8010734:	005b      	lsls	r3, r3, #1
 8010736:	4413      	add	r3, r2
 8010738:	88db      	ldrh	r3, [r3, #6]
 801073a:	b21a      	sxth	r2, r3
 801073c:	2101      	movs	r1, #1
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	fa01 f303 	lsl.w	r3, r1, r3
 8010744:	b21b      	sxth	r3, r3
 8010746:	4313      	orrs	r3, r2
 8010748:	b21a      	sxth	r2, r3
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	3b01      	subs	r3, #1
 801074e:	b291      	uxth	r1, r2
 8010750:	4a03      	ldr	r2, [pc, #12]	; (8010760 <update_wall+0x288>)
 8010752:	330c      	adds	r3, #12
 8010754:	005b      	lsls	r3, r3, #1
 8010756:	4413      	add	r3, r2
 8010758:	460a      	mov	r2, r1
 801075a:	80da      	strh	r2, [r3, #6]
		}

		break;
 801075c:	e135      	b.n	80109ca <update_wall+0x4f2>
 801075e:	bf00      	nop
 8010760:	20000c30 	.word	0x20000c30
	case 3:
		if (y >= 1) {
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	2b00      	cmp	r3, #0
 8010768:	dd32      	ble.n	80107d0 <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	3b01      	subs	r3, #1
 801076e:	4a9c      	ldr	r2, [pc, #624]	; (80109e0 <update_wall+0x508>)
 8010770:	332c      	adds	r3, #44	; 0x2c
 8010772:	005b      	lsls	r3, r3, #1
 8010774:	4413      	add	r3, r2
 8010776:	885b      	ldrh	r3, [r3, #2]
 8010778:	b21a      	sxth	r2, r3
 801077a:	2101      	movs	r1, #1
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	fa01 f303 	lsl.w	r3, r1, r3
 8010782:	b21b      	sxth	r3, r3
 8010784:	4313      	orrs	r3, r2
 8010786:	b21a      	sxth	r2, r3
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	3b01      	subs	r3, #1
 801078c:	b291      	uxth	r1, r2
 801078e:	4a94      	ldr	r2, [pc, #592]	; (80109e0 <update_wall+0x508>)
 8010790:	332c      	adds	r3, #44	; 0x2c
 8010792:	005b      	lsls	r3, r3, #1
 8010794:	4413      	add	r3, r2
 8010796:	460a      	mov	r2, r1
 8010798:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 801079a:	78fb      	ldrb	r3, [r7, #3]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d017      	beq.n	80107d0 <update_wall+0x2f8>
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	3b01      	subs	r3, #1
 80107a4:	4a8e      	ldr	r2, [pc, #568]	; (80109e0 <update_wall+0x508>)
 80107a6:	330c      	adds	r3, #12
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	4413      	add	r3, r2
 80107ac:	88db      	ldrh	r3, [r3, #6]
 80107ae:	b21a      	sxth	r2, r3
 80107b0:	2101      	movs	r1, #1
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	fa01 f303 	lsl.w	r3, r1, r3
 80107b8:	b21b      	sxth	r3, r3
 80107ba:	4313      	orrs	r3, r2
 80107bc:	b21a      	sxth	r2, r3
 80107be:	68bb      	ldr	r3, [r7, #8]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	b291      	uxth	r1, r2
 80107c4:	4a86      	ldr	r2, [pc, #536]	; (80109e0 <update_wall+0x508>)
 80107c6:	330c      	adds	r3, #12
 80107c8:	005b      	lsls	r3, r3, #1
 80107ca:	4413      	add	r3, r2
 80107cc:	460a      	mov	r2, r1
 80107ce:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2b0e      	cmp	r3, #14
 80107d4:	dc29      	bgt.n	801082a <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 80107d6:	4a82      	ldr	r2, [pc, #520]	; (80109e0 <update_wall+0x508>)
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	331c      	adds	r3, #28
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	4413      	add	r3, r2
 80107e0:	889b      	ldrh	r3, [r3, #4]
 80107e2:	b21a      	sxth	r2, r3
 80107e4:	2101      	movs	r1, #1
 80107e6:	68bb      	ldr	r3, [r7, #8]
 80107e8:	fa01 f303 	lsl.w	r3, r1, r3
 80107ec:	b21b      	sxth	r3, r3
 80107ee:	4313      	orrs	r3, r2
 80107f0:	b21b      	sxth	r3, r3
 80107f2:	b299      	uxth	r1, r3
 80107f4:	4a7a      	ldr	r2, [pc, #488]	; (80109e0 <update_wall+0x508>)
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	331c      	adds	r3, #28
 80107fa:	005b      	lsls	r3, r3, #1
 80107fc:	4413      	add	r3, r2
 80107fe:	460a      	mov	r2, r1
 8010800:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010802:	7f3b      	ldrb	r3, [r7, #28]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d010      	beq.n	801082a <update_wall+0x352>
 8010808:	4a75      	ldr	r2, [pc, #468]	; (80109e0 <update_wall+0x508>)
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010810:	b21a      	sxth	r2, r3
 8010812:	2101      	movs	r1, #1
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	fa01 f303 	lsl.w	r3, r1, r3
 801081a:	b21b      	sxth	r3, r3
 801081c:	4313      	orrs	r3, r2
 801081e:	b21b      	sxth	r3, r3
 8010820:	b299      	uxth	r1, r3
 8010822:	4a6f      	ldr	r2, [pc, #444]	; (80109e0 <update_wall+0x508>)
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2b00      	cmp	r3, #0
 801082e:	f340 80ce 	ble.w	80109ce <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	3b01      	subs	r3, #1
 8010836:	4a6a      	ldr	r2, [pc, #424]	; (80109e0 <update_wall+0x508>)
 8010838:	331c      	adds	r3, #28
 801083a:	005b      	lsls	r3, r3, #1
 801083c:	4413      	add	r3, r2
 801083e:	889b      	ldrh	r3, [r3, #4]
 8010840:	b21a      	sxth	r2, r3
 8010842:	2101      	movs	r1, #1
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	fa01 f303 	lsl.w	r3, r1, r3
 801084a:	b21b      	sxth	r3, r3
 801084c:	4313      	orrs	r3, r2
 801084e:	b21a      	sxth	r2, r3
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	3b01      	subs	r3, #1
 8010854:	b291      	uxth	r1, r2
 8010856:	4a62      	ldr	r2, [pc, #392]	; (80109e0 <update_wall+0x508>)
 8010858:	331c      	adds	r3, #28
 801085a:	005b      	lsls	r3, r3, #1
 801085c:	4413      	add	r3, r2
 801085e:	460a      	mov	r2, r1
 8010860:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010862:	7e3b      	ldrb	r3, [r7, #24]
 8010864:	2b00      	cmp	r3, #0
 8010866:	f000 80b2 	beq.w	80109ce <update_wall+0x4f6>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	3b01      	subs	r3, #1
 801086e:	4a5c      	ldr	r2, [pc, #368]	; (80109e0 <update_wall+0x508>)
 8010870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010874:	b21a      	sxth	r2, r3
 8010876:	2101      	movs	r1, #1
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	fa01 f303 	lsl.w	r3, r1, r3
 801087e:	b21b      	sxth	r3, r3
 8010880:	4313      	orrs	r3, r2
 8010882:	b21a      	sxth	r2, r3
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	3b01      	subs	r3, #1
 8010888:	b291      	uxth	r1, r2
 801088a:	4a55      	ldr	r2, [pc, #340]	; (80109e0 <update_wall+0x508>)
 801088c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010890:	e09d      	b.n	80109ce <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2b00      	cmp	r3, #0
 8010896:	dd2d      	ble.n	80108f4 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	3b01      	subs	r3, #1
 801089c:	4a50      	ldr	r2, [pc, #320]	; (80109e0 <update_wall+0x508>)
 801089e:	331c      	adds	r3, #28
 80108a0:	005b      	lsls	r3, r3, #1
 80108a2:	4413      	add	r3, r2
 80108a4:	889b      	ldrh	r3, [r3, #4]
 80108a6:	b21a      	sxth	r2, r3
 80108a8:	2101      	movs	r1, #1
 80108aa:	68bb      	ldr	r3, [r7, #8]
 80108ac:	fa01 f303 	lsl.w	r3, r1, r3
 80108b0:	b21b      	sxth	r3, r3
 80108b2:	4313      	orrs	r3, r2
 80108b4:	b21a      	sxth	r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	3b01      	subs	r3, #1
 80108ba:	b291      	uxth	r1, r2
 80108bc:	4a48      	ldr	r2, [pc, #288]	; (80109e0 <update_wall+0x508>)
 80108be:	331c      	adds	r3, #28
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	4413      	add	r3, r2
 80108c4:	460a      	mov	r2, r1
 80108c6:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80108c8:	78fb      	ldrb	r3, [r7, #3]
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d012      	beq.n	80108f4 <update_wall+0x41c>
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	3b01      	subs	r3, #1
 80108d2:	4a43      	ldr	r2, [pc, #268]	; (80109e0 <update_wall+0x508>)
 80108d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108d8:	b21a      	sxth	r2, r3
 80108da:	2101      	movs	r1, #1
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	fa01 f303 	lsl.w	r3, r1, r3
 80108e2:	b21b      	sxth	r3, r3
 80108e4:	4313      	orrs	r3, r2
 80108e6:	b21a      	sxth	r2, r3
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	3b01      	subs	r3, #1
 80108ec:	b291      	uxth	r1, r2
 80108ee:	4a3c      	ldr	r2, [pc, #240]	; (80109e0 <update_wall+0x508>)
 80108f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	dd32      	ble.n	8010960 <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	3b01      	subs	r3, #1
 80108fe:	4a38      	ldr	r2, [pc, #224]	; (80109e0 <update_wall+0x508>)
 8010900:	332c      	adds	r3, #44	; 0x2c
 8010902:	005b      	lsls	r3, r3, #1
 8010904:	4413      	add	r3, r2
 8010906:	885b      	ldrh	r3, [r3, #2]
 8010908:	b21a      	sxth	r2, r3
 801090a:	2101      	movs	r1, #1
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	fa01 f303 	lsl.w	r3, r1, r3
 8010912:	b21b      	sxth	r3, r3
 8010914:	4313      	orrs	r3, r2
 8010916:	b21a      	sxth	r2, r3
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	3b01      	subs	r3, #1
 801091c:	b291      	uxth	r1, r2
 801091e:	4a30      	ldr	r2, [pc, #192]	; (80109e0 <update_wall+0x508>)
 8010920:	332c      	adds	r3, #44	; 0x2c
 8010922:	005b      	lsls	r3, r3, #1
 8010924:	4413      	add	r3, r2
 8010926:	460a      	mov	r2, r1
 8010928:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 801092a:	7f3b      	ldrb	r3, [r7, #28]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d017      	beq.n	8010960 <update_wall+0x488>
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	3b01      	subs	r3, #1
 8010934:	4a2a      	ldr	r2, [pc, #168]	; (80109e0 <update_wall+0x508>)
 8010936:	330c      	adds	r3, #12
 8010938:	005b      	lsls	r3, r3, #1
 801093a:	4413      	add	r3, r2
 801093c:	88db      	ldrh	r3, [r3, #6]
 801093e:	b21a      	sxth	r2, r3
 8010940:	2101      	movs	r1, #1
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	fa01 f303 	lsl.w	r3, r1, r3
 8010948:	b21b      	sxth	r3, r3
 801094a:	4313      	orrs	r3, r2
 801094c:	b21a      	sxth	r2, r3
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	3b01      	subs	r3, #1
 8010952:	b291      	uxth	r1, r2
 8010954:	4a22      	ldr	r2, [pc, #136]	; (80109e0 <update_wall+0x508>)
 8010956:	330c      	adds	r3, #12
 8010958:	005b      	lsls	r3, r3, #1
 801095a:	4413      	add	r3, r2
 801095c:	460a      	mov	r2, r1
 801095e:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	2b0e      	cmp	r3, #14
 8010964:	dc35      	bgt.n	80109d2 <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010966:	4a1e      	ldr	r2, [pc, #120]	; (80109e0 <update_wall+0x508>)
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	332c      	adds	r3, #44	; 0x2c
 801096c:	005b      	lsls	r3, r3, #1
 801096e:	4413      	add	r3, r2
 8010970:	885b      	ldrh	r3, [r3, #2]
 8010972:	b21a      	sxth	r2, r3
 8010974:	2101      	movs	r1, #1
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	fa01 f303 	lsl.w	r3, r1, r3
 801097c:	b21b      	sxth	r3, r3
 801097e:	4313      	orrs	r3, r2
 8010980:	b21b      	sxth	r3, r3
 8010982:	b299      	uxth	r1, r3
 8010984:	4a16      	ldr	r2, [pc, #88]	; (80109e0 <update_wall+0x508>)
 8010986:	68bb      	ldr	r3, [r7, #8]
 8010988:	332c      	adds	r3, #44	; 0x2c
 801098a:	005b      	lsls	r3, r3, #1
 801098c:	4413      	add	r3, r2
 801098e:	460a      	mov	r2, r1
 8010990:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010992:	7e3b      	ldrb	r3, [r7, #24]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d01c      	beq.n	80109d2 <update_wall+0x4fa>
 8010998:	4a11      	ldr	r2, [pc, #68]	; (80109e0 <update_wall+0x508>)
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	330c      	adds	r3, #12
 801099e:	005b      	lsls	r3, r3, #1
 80109a0:	4413      	add	r3, r2
 80109a2:	88db      	ldrh	r3, [r3, #6]
 80109a4:	b21a      	sxth	r2, r3
 80109a6:	2101      	movs	r1, #1
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	fa01 f303 	lsl.w	r3, r1, r3
 80109ae:	b21b      	sxth	r3, r3
 80109b0:	4313      	orrs	r3, r2
 80109b2:	b21b      	sxth	r3, r3
 80109b4:	b299      	uxth	r1, r3
 80109b6:	4a0a      	ldr	r2, [pc, #40]	; (80109e0 <update_wall+0x508>)
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	330c      	adds	r3, #12
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	4413      	add	r3, r2
 80109c0:	460a      	mov	r2, r1
 80109c2:	80da      	strh	r2, [r3, #6]
		}

		break;
 80109c4:	e005      	b.n	80109d2 <update_wall+0x4fa>
		break;
 80109c6:	bf00      	nop
 80109c8:	e004      	b.n	80109d4 <update_wall+0x4fc>
		break;
 80109ca:	bf00      	nop
 80109cc:	e002      	b.n	80109d4 <update_wall+0x4fc>
		break;
 80109ce:	bf00      	nop
 80109d0:	e000      	b.n	80109d4 <update_wall+0x4fc>
		break;
 80109d2:	bf00      	nop

	}


}
 80109d4:	bf00      	nop
 80109d6:	3714      	adds	r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr
 80109e0:	20000c30 	.word	0x20000c30

080109e4 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 80109e4:	b480      	push	{r7}
 80109e6:	b085      	sub	sp, #20
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
 80109f0:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	2201      	movs	r2, #1
 80109f6:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 80109f8:	69bb      	ldr	r3, [r7, #24]
 80109fa:	2201      	movs	r2, #1
 80109fc:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	2201      	movs	r2, #1
 8010a02:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	3b01      	subs	r3, #1
 8010a08:	2b03      	cmp	r3, #3
 8010a0a:	f200 8156 	bhi.w	8010cba <get_wall+0x2d6>
 8010a0e:	a201      	add	r2, pc, #4	; (adr r2, 8010a14 <get_wall+0x30>)
 8010a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a14:	08010a25 	.word	0x08010a25
 8010a18:	08010ac5 	.word	0x08010ac5
 8010a1c:	08010b69 	.word	0x08010b69
 8010a20:	08010c09 	.word	0x08010c09
	case 1:
		if (y <= 14) {
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	2b0e      	cmp	r3, #14
 8010a28:	dc17      	bgt.n	8010a5a <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010a2a:	4aa7      	ldr	r2, [pc, #668]	; (8010cc8 <get_wall+0x2e4>)
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	330c      	adds	r3, #12
 8010a30:	005b      	lsls	r3, r3, #1
 8010a32:	4413      	add	r3, r2
 8010a34:	88db      	ldrh	r3, [r3, #6]
 8010a36:	4619      	mov	r1, r3
 8010a38:	2201      	movs	r2, #1
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010a40:	ea01 0203 	and.w	r2, r1, r3
 8010a44:	2101      	movs	r1, #1
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	fa01 f303 	lsl.w	r3, r1, r3
 8010a4c:	429a      	cmp	r2, r3
 8010a4e:	bf0c      	ite	eq
 8010a50:	2301      	moveq	r3, #1
 8010a52:	2300      	movne	r3, #0
 8010a54:	b2da      	uxtb	r2, r3
 8010a56:	683b      	ldr	r3, [r7, #0]
 8010a58:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	dd16      	ble.n	8010a8e <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	4a98      	ldr	r2, [pc, #608]	; (8010cc8 <get_wall+0x2e4>)
 8010a66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	fa02 f303 	lsl.w	r3, r2, r3
 8010a74:	ea01 0203 	and.w	r2, r1, r3
 8010a78:	2101      	movs	r1, #1
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a80:	429a      	cmp	r2, r3
 8010a82:	bf0c      	ite	eq
 8010a84:	2301      	moveq	r3, #1
 8010a86:	2300      	movne	r3, #0
 8010a88:	b2da      	uxtb	r2, r3
 8010a8a:	69fb      	ldr	r3, [r7, #28]
 8010a8c:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	2b0e      	cmp	r3, #14
 8010a92:	f300 810b 	bgt.w	8010cac <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010a96:	4a8c      	ldr	r2, [pc, #560]	; (8010cc8 <get_wall+0x2e4>)
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	2201      	movs	r2, #1
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8010aa8:	ea01 0203 	and.w	r2, r1, r3
 8010aac:	2101      	movs	r1, #1
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab4:	429a      	cmp	r2, r3
 8010ab6:	bf0c      	ite	eq
 8010ab8:	2301      	moveq	r3, #1
 8010aba:	2300      	movne	r3, #0
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	69bb      	ldr	r3, [r7, #24]
 8010ac0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010ac2:	e0f3      	b.n	8010cac <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	2b0e      	cmp	r3, #14
 8010ac8:	dc15      	bgt.n	8010af6 <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010aca:	4a7f      	ldr	r2, [pc, #508]	; (8010cc8 <get_wall+0x2e4>)
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ad2:	4619      	mov	r1, r3
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8010adc:	ea01 0203 	and.w	r2, r1, r3
 8010ae0:	2101      	movs	r1, #1
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ae8:	429a      	cmp	r2, r3
 8010aea:	bf0c      	ite	eq
 8010aec:	2301      	moveq	r3, #1
 8010aee:	2300      	movne	r3, #0
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	683b      	ldr	r3, [r7, #0]
 8010af4:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	2b0e      	cmp	r3, #14
 8010afa:	dc17      	bgt.n	8010b2c <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010afc:	4a72      	ldr	r2, [pc, #456]	; (8010cc8 <get_wall+0x2e4>)
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	330c      	adds	r3, #12
 8010b02:	005b      	lsls	r3, r3, #1
 8010b04:	4413      	add	r3, r2
 8010b06:	88db      	ldrh	r3, [r3, #6]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8010b12:	ea01 0203 	and.w	r2, r1, r3
 8010b16:	2101      	movs	r1, #1
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	bf0c      	ite	eq
 8010b22:	2301      	moveq	r3, #1
 8010b24:	2300      	movne	r3, #0
 8010b26:	b2da      	uxtb	r2, r3
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010b2c:	68bb      	ldr	r3, [r7, #8]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f340 80be 	ble.w	8010cb0 <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	3b01      	subs	r3, #1
 8010b38:	4a63      	ldr	r2, [pc, #396]	; (8010cc8 <get_wall+0x2e4>)
 8010b3a:	330c      	adds	r3, #12
 8010b3c:	005b      	lsls	r3, r3, #1
 8010b3e:	4413      	add	r3, r2
 8010b40:	88db      	ldrh	r3, [r3, #6]
 8010b42:	4619      	mov	r1, r3
 8010b44:	2201      	movs	r2, #1
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	fa02 f303 	lsl.w	r3, r2, r3
 8010b4c:	ea01 0203 	and.w	r2, r1, r3
 8010b50:	2101      	movs	r1, #1
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	fa01 f303 	lsl.w	r3, r1, r3
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	bf0c      	ite	eq
 8010b5c:	2301      	moveq	r3, #1
 8010b5e:	2300      	movne	r3, #0
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	69bb      	ldr	r3, [r7, #24]
 8010b64:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010b66:	e0a3      	b.n	8010cb0 <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	dd18      	ble.n	8010ba0 <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010b6e:	68bb      	ldr	r3, [r7, #8]
 8010b70:	3b01      	subs	r3, #1
 8010b72:	4a55      	ldr	r2, [pc, #340]	; (8010cc8 <get_wall+0x2e4>)
 8010b74:	330c      	adds	r3, #12
 8010b76:	005b      	lsls	r3, r3, #1
 8010b78:	4413      	add	r3, r2
 8010b7a:	88db      	ldrh	r3, [r3, #6]
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	2201      	movs	r2, #1
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	fa02 f303 	lsl.w	r3, r2, r3
 8010b86:	ea01 0203 	and.w	r2, r1, r3
 8010b8a:	2101      	movs	r1, #1
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8010b92:	429a      	cmp	r2, r3
 8010b94:	bf0c      	ite	eq
 8010b96:	2301      	moveq	r3, #1
 8010b98:	2300      	movne	r3, #0
 8010b9a:	b2da      	uxtb	r2, r3
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2b0e      	cmp	r3, #14
 8010ba4:	dc15      	bgt.n	8010bd2 <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010ba6:	4a48      	ldr	r2, [pc, #288]	; (8010cc8 <get_wall+0x2e4>)
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010bae:	4619      	mov	r1, r3
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8010bb8:	ea01 0203 	and.w	r2, r1, r3
 8010bbc:	2101      	movs	r1, #1
 8010bbe:	68bb      	ldr	r3, [r7, #8]
 8010bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	bf0c      	ite	eq
 8010bc8:	2301      	moveq	r3, #1
 8010bca:	2300      	movne	r3, #0
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	dd6d      	ble.n	8010cb4 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3b01      	subs	r3, #1
 8010bdc:	4a3a      	ldr	r2, [pc, #232]	; (8010cc8 <get_wall+0x2e4>)
 8010bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010be2:	4619      	mov	r1, r3
 8010be4:	2201      	movs	r2, #1
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	fa02 f303 	lsl.w	r3, r2, r3
 8010bec:	ea01 0203 	and.w	r2, r1, r3
 8010bf0:	2101      	movs	r1, #1
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	bf0c      	ite	eq
 8010bfc:	2301      	moveq	r3, #1
 8010bfe:	2300      	movne	r3, #0
 8010c00:	b2da      	uxtb	r2, r3
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010c06:	e055      	b.n	8010cb4 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	dd16      	ble.n	8010c3c <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	3b01      	subs	r3, #1
 8010c12:	4a2d      	ldr	r2, [pc, #180]	; (8010cc8 <get_wall+0x2e4>)
 8010c14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c18:	4619      	mov	r1, r3
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010c22:	ea01 0203 	and.w	r2, r1, r3
 8010c26:	2101      	movs	r1, #1
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c2e:	429a      	cmp	r2, r3
 8010c30:	bf0c      	ite	eq
 8010c32:	2301      	moveq	r3, #1
 8010c34:	2300      	movne	r3, #0
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	dd18      	ble.n	8010c74 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010c42:	68bb      	ldr	r3, [r7, #8]
 8010c44:	3b01      	subs	r3, #1
 8010c46:	4a20      	ldr	r2, [pc, #128]	; (8010cc8 <get_wall+0x2e4>)
 8010c48:	330c      	adds	r3, #12
 8010c4a:	005b      	lsls	r3, r3, #1
 8010c4c:	4413      	add	r3, r2
 8010c4e:	88db      	ldrh	r3, [r3, #6]
 8010c50:	4619      	mov	r1, r3
 8010c52:	2201      	movs	r2, #1
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	fa02 f303 	lsl.w	r3, r2, r3
 8010c5a:	ea01 0203 	and.w	r2, r1, r3
 8010c5e:	2101      	movs	r1, #1
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	fa01 f303 	lsl.w	r3, r1, r3
 8010c66:	429a      	cmp	r2, r3
 8010c68:	bf0c      	ite	eq
 8010c6a:	2301      	moveq	r3, #1
 8010c6c:	2300      	movne	r3, #0
 8010c6e:	b2da      	uxtb	r2, r3
 8010c70:	69fb      	ldr	r3, [r7, #28]
 8010c72:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010c74:	68bb      	ldr	r3, [r7, #8]
 8010c76:	2b0e      	cmp	r3, #14
 8010c78:	dc1e      	bgt.n	8010cb8 <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010c7a:	4a13      	ldr	r2, [pc, #76]	; (8010cc8 <get_wall+0x2e4>)
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	330c      	adds	r3, #12
 8010c80:	005b      	lsls	r3, r3, #1
 8010c82:	4413      	add	r3, r2
 8010c84:	88db      	ldrh	r3, [r3, #6]
 8010c86:	4619      	mov	r1, r3
 8010c88:	2201      	movs	r2, #1
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010c90:	ea01 0203 	and.w	r2, r1, r3
 8010c94:	2101      	movs	r1, #1
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	fa01 f303 	lsl.w	r3, r1, r3
 8010c9c:	429a      	cmp	r2, r3
 8010c9e:	bf0c      	ite	eq
 8010ca0:	2301      	moveq	r3, #1
 8010ca2:	2300      	movne	r3, #0
 8010ca4:	b2da      	uxtb	r2, r3
 8010ca6:	69bb      	ldr	r3, [r7, #24]
 8010ca8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010caa:	e005      	b.n	8010cb8 <get_wall+0x2d4>
		break;
 8010cac:	bf00      	nop
 8010cae:	e004      	b.n	8010cba <get_wall+0x2d6>
		break;
 8010cb0:	bf00      	nop
 8010cb2:	e002      	b.n	8010cba <get_wall+0x2d6>
		break;
 8010cb4:	bf00      	nop
 8010cb6:	e000      	b.n	8010cba <get_wall+0x2d6>
		break;
 8010cb8:	bf00      	nop
	}

}
 8010cba:	bf00      	nop
 8010cbc:	3714      	adds	r7, #20
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc4:	4770      	bx	lr
 8010cc6:	bf00      	nop
 8010cc8:	20000c30 	.word	0x20000c30

08010ccc <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010ccc:	b480      	push	{r7}
 8010cce:	b085      	sub	sp, #20
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	607a      	str	r2, [r7, #4]
 8010cd8:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	2201      	movs	r2, #1
 8010cde:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010ce0:	69bb      	ldr	r3, [r7, #24]
 8010ce2:	2201      	movs	r2, #1
 8010ce4:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010ce6:	69fb      	ldr	r3, [r7, #28]
 8010ce8:	2201      	movs	r2, #1
 8010cea:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	2b03      	cmp	r3, #3
 8010cf2:	f200 8162 	bhi.w	8010fba <get_wall_look+0x2ee>
 8010cf6:	a201      	add	r2, pc, #4	; (adr r2, 8010cfc <get_wall_look+0x30>)
 8010cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfc:	08010d0d 	.word	0x08010d0d
 8010d00:	08010db5 	.word	0x08010db5
 8010d04:	08010e5d 	.word	0x08010e5d
 8010d08:	08010f05 	.word	0x08010f05
	case 1:
		if (y <= 14) {
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	2b0e      	cmp	r3, #14
 8010d10:	dc17      	bgt.n	8010d42 <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010d12:	4aad      	ldr	r2, [pc, #692]	; (8010fc8 <get_wall_look+0x2fc>)
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	332c      	adds	r3, #44	; 0x2c
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	4413      	add	r3, r2
 8010d1c:	885b      	ldrh	r3, [r3, #2]
 8010d1e:	4619      	mov	r1, r3
 8010d20:	2201      	movs	r2, #1
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	fa02 f303 	lsl.w	r3, r2, r3
 8010d28:	ea01 0203 	and.w	r2, r1, r3
 8010d2c:	2101      	movs	r1, #1
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	fa01 f303 	lsl.w	r3, r1, r3
 8010d34:	429a      	cmp	r2, r3
 8010d36:	bf0c      	ite	eq
 8010d38:	2301      	moveq	r3, #1
 8010d3a:	2300      	movne	r3, #0
 8010d3c:	b2da      	uxtb	r2, r3
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	dd18      	ble.n	8010d7a <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	4a9e      	ldr	r2, [pc, #632]	; (8010fc8 <get_wall_look+0x2fc>)
 8010d4e:	331c      	adds	r3, #28
 8010d50:	005b      	lsls	r3, r3, #1
 8010d52:	4413      	add	r3, r2
 8010d54:	889b      	ldrh	r3, [r3, #4]
 8010d56:	4619      	mov	r1, r3
 8010d58:	2201      	movs	r2, #1
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d60:	ea01 0203 	and.w	r2, r1, r3
 8010d64:	2101      	movs	r1, #1
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	fa01 f303 	lsl.w	r3, r1, r3
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	bf0c      	ite	eq
 8010d70:	2301      	moveq	r3, #1
 8010d72:	2300      	movne	r3, #0
 8010d74:	b2da      	uxtb	r2, r3
 8010d76:	69fb      	ldr	r3, [r7, #28]
 8010d78:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	2b0e      	cmp	r3, #14
 8010d7e:	f300 8115 	bgt.w	8010fac <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010d82:	4a91      	ldr	r2, [pc, #580]	; (8010fc8 <get_wall_look+0x2fc>)
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	331c      	adds	r3, #28
 8010d88:	005b      	lsls	r3, r3, #1
 8010d8a:	4413      	add	r3, r2
 8010d8c:	889b      	ldrh	r3, [r3, #4]
 8010d8e:	4619      	mov	r1, r3
 8010d90:	2201      	movs	r2, #1
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	fa02 f303 	lsl.w	r3, r2, r3
 8010d98:	ea01 0203 	and.w	r2, r1, r3
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	fa01 f303 	lsl.w	r3, r1, r3
 8010da4:	429a      	cmp	r2, r3
 8010da6:	bf0c      	ite	eq
 8010da8:	2301      	moveq	r3, #1
 8010daa:	2300      	movne	r3, #0
 8010dac:	b2da      	uxtb	r2, r3
 8010dae:	69bb      	ldr	r3, [r7, #24]
 8010db0:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010db2:	e0fb      	b.n	8010fac <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2b0e      	cmp	r3, #14
 8010db8:	dc17      	bgt.n	8010dea <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010dba:	4a83      	ldr	r2, [pc, #524]	; (8010fc8 <get_wall_look+0x2fc>)
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	331c      	adds	r3, #28
 8010dc0:	005b      	lsls	r3, r3, #1
 8010dc2:	4413      	add	r3, r2
 8010dc4:	889b      	ldrh	r3, [r3, #4]
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	2201      	movs	r2, #1
 8010dca:	68bb      	ldr	r3, [r7, #8]
 8010dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8010dd0:	ea01 0203 	and.w	r2, r1, r3
 8010dd4:	2101      	movs	r1, #1
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8010ddc:	429a      	cmp	r2, r3
 8010dde:	bf0c      	ite	eq
 8010de0:	2301      	moveq	r3, #1
 8010de2:	2300      	movne	r3, #0
 8010de4:	b2da      	uxtb	r2, r3
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	2b0e      	cmp	r3, #14
 8010dee:	dc17      	bgt.n	8010e20 <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010df0:	4a75      	ldr	r2, [pc, #468]	; (8010fc8 <get_wall_look+0x2fc>)
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	332c      	adds	r3, #44	; 0x2c
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	4413      	add	r3, r2
 8010dfa:	885b      	ldrh	r3, [r3, #2]
 8010dfc:	4619      	mov	r1, r3
 8010dfe:	2201      	movs	r2, #1
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	fa02 f303 	lsl.w	r3, r2, r3
 8010e06:	ea01 0203 	and.w	r2, r1, r3
 8010e0a:	2101      	movs	r1, #1
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e12:	429a      	cmp	r2, r3
 8010e14:	bf0c      	ite	eq
 8010e16:	2301      	moveq	r3, #1
 8010e18:	2300      	movne	r3, #0
 8010e1a:	b2da      	uxtb	r2, r3
 8010e1c:	69fb      	ldr	r3, [r7, #28]
 8010e1e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f340 80c4 	ble.w	8010fb0 <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8010e28:	68bb      	ldr	r3, [r7, #8]
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	4a66      	ldr	r2, [pc, #408]	; (8010fc8 <get_wall_look+0x2fc>)
 8010e2e:	332c      	adds	r3, #44	; 0x2c
 8010e30:	005b      	lsls	r3, r3, #1
 8010e32:	4413      	add	r3, r2
 8010e34:	885b      	ldrh	r3, [r3, #2]
 8010e36:	4619      	mov	r1, r3
 8010e38:	2201      	movs	r2, #1
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e40:	ea01 0203 	and.w	r2, r1, r3
 8010e44:	2101      	movs	r1, #1
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	fa01 f303 	lsl.w	r3, r1, r3
 8010e4c:	429a      	cmp	r2, r3
 8010e4e:	bf0c      	ite	eq
 8010e50:	2301      	moveq	r3, #1
 8010e52:	2300      	movne	r3, #0
 8010e54:	b2da      	uxtb	r2, r3
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010e5a:	e0a9      	b.n	8010fb0 <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	dd18      	ble.n	8010e94 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	3b01      	subs	r3, #1
 8010e66:	4a58      	ldr	r2, [pc, #352]	; (8010fc8 <get_wall_look+0x2fc>)
 8010e68:	332c      	adds	r3, #44	; 0x2c
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	4413      	add	r3, r2
 8010e6e:	885b      	ldrh	r3, [r3, #2]
 8010e70:	4619      	mov	r1, r3
 8010e72:	2201      	movs	r2, #1
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	fa02 f303 	lsl.w	r3, r2, r3
 8010e7a:	ea01 0203 	and.w	r2, r1, r3
 8010e7e:	2101      	movs	r1, #1
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	fa01 f303 	lsl.w	r3, r1, r3
 8010e86:	429a      	cmp	r2, r3
 8010e88:	bf0c      	ite	eq
 8010e8a:	2301      	moveq	r3, #1
 8010e8c:	2300      	movne	r3, #0
 8010e8e:	b2da      	uxtb	r2, r3
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	2b0e      	cmp	r3, #14
 8010e98:	dc17      	bgt.n	8010eca <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010e9a:	4a4b      	ldr	r2, [pc, #300]	; (8010fc8 <get_wall_look+0x2fc>)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	331c      	adds	r3, #28
 8010ea0:	005b      	lsls	r3, r3, #1
 8010ea2:	4413      	add	r3, r2
 8010ea4:	889b      	ldrh	r3, [r3, #4]
 8010ea6:	4619      	mov	r1, r3
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	fa02 f303 	lsl.w	r3, r2, r3
 8010eb0:	ea01 0203 	and.w	r2, r1, r3
 8010eb4:	2101      	movs	r1, #1
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	bf0c      	ite	eq
 8010ec0:	2301      	moveq	r3, #1
 8010ec2:	2300      	movne	r3, #0
 8010ec4:	b2da      	uxtb	r2, r3
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	dd71      	ble.n	8010fb4 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	4a3c      	ldr	r2, [pc, #240]	; (8010fc8 <get_wall_look+0x2fc>)
 8010ed6:	331c      	adds	r3, #28
 8010ed8:	005b      	lsls	r3, r3, #1
 8010eda:	4413      	add	r3, r2
 8010edc:	889b      	ldrh	r3, [r3, #4]
 8010ede:	4619      	mov	r1, r3
 8010ee0:	2201      	movs	r2, #1
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ee8:	ea01 0203 	and.w	r2, r1, r3
 8010eec:	2101      	movs	r1, #1
 8010eee:	68bb      	ldr	r3, [r7, #8]
 8010ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	bf0c      	ite	eq
 8010ef8:	2301      	moveq	r3, #1
 8010efa:	2300      	movne	r3, #0
 8010efc:	b2da      	uxtb	r2, r3
 8010efe:	69bb      	ldr	r3, [r7, #24]
 8010f00:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f02:	e057      	b.n	8010fb4 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	dd18      	ble.n	8010f3c <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	4a2e      	ldr	r2, [pc, #184]	; (8010fc8 <get_wall_look+0x2fc>)
 8010f10:	331c      	adds	r3, #28
 8010f12:	005b      	lsls	r3, r3, #1
 8010f14:	4413      	add	r3, r2
 8010f16:	889b      	ldrh	r3, [r3, #4]
 8010f18:	4619      	mov	r1, r3
 8010f1a:	2201      	movs	r2, #1
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8010f22:	ea01 0203 	and.w	r2, r1, r3
 8010f26:	2101      	movs	r1, #1
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	bf0c      	ite	eq
 8010f32:	2301      	moveq	r3, #1
 8010f34:	2300      	movne	r3, #0
 8010f36:	b2da      	uxtb	r2, r3
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	dd18      	ble.n	8010f74 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8010f42:	68bb      	ldr	r3, [r7, #8]
 8010f44:	3b01      	subs	r3, #1
 8010f46:	4a20      	ldr	r2, [pc, #128]	; (8010fc8 <get_wall_look+0x2fc>)
 8010f48:	332c      	adds	r3, #44	; 0x2c
 8010f4a:	005b      	lsls	r3, r3, #1
 8010f4c:	4413      	add	r3, r2
 8010f4e:	885b      	ldrh	r3, [r3, #2]
 8010f50:	4619      	mov	r1, r3
 8010f52:	2201      	movs	r2, #1
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5a:	ea01 0203 	and.w	r2, r1, r3
 8010f5e:	2101      	movs	r1, #1
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	fa01 f303 	lsl.w	r3, r1, r3
 8010f66:	429a      	cmp	r2, r3
 8010f68:	bf0c      	ite	eq
 8010f6a:	2301      	moveq	r3, #1
 8010f6c:	2300      	movne	r3, #0
 8010f6e:	b2da      	uxtb	r2, r3
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	2b0e      	cmp	r3, #14
 8010f78:	dc1e      	bgt.n	8010fb8 <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010f7a:	4a13      	ldr	r2, [pc, #76]	; (8010fc8 <get_wall_look+0x2fc>)
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	332c      	adds	r3, #44	; 0x2c
 8010f80:	005b      	lsls	r3, r3, #1
 8010f82:	4413      	add	r3, r2
 8010f84:	885b      	ldrh	r3, [r3, #2]
 8010f86:	4619      	mov	r1, r3
 8010f88:	2201      	movs	r2, #1
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f90:	ea01 0203 	and.w	r2, r1, r3
 8010f94:	2101      	movs	r1, #1
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	fa01 f303 	lsl.w	r3, r1, r3
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	bf0c      	ite	eq
 8010fa0:	2301      	moveq	r3, #1
 8010fa2:	2300      	movne	r3, #0
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010faa:	e005      	b.n	8010fb8 <get_wall_look+0x2ec>
		break;
 8010fac:	bf00      	nop
 8010fae:	e004      	b.n	8010fba <get_wall_look+0x2ee>
		break;
 8010fb0:	bf00      	nop
 8010fb2:	e002      	b.n	8010fba <get_wall_look+0x2ee>
		break;
 8010fb4:	bf00      	nop
 8010fb6:	e000      	b.n	8010fba <get_wall_look+0x2ee>
		break;
 8010fb8:	bf00      	nop
	}

}
 8010fba:	bf00      	nop
 8010fbc:	3714      	adds	r7, #20
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop
 8010fc8:	20000c30 	.word	0x20000c30

08010fcc <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8010fcc:	b480      	push	{r7}
 8010fce:	b087      	sub	sp, #28
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
 8010fd8:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	2b0e      	cmp	r3, #14
 8010fde:	dd02      	ble.n	8010fe6 <search_AroundWalkCount+0x1a>
 8010fe0:	23ff      	movs	r3, #255	; 0xff
 8010fe2:	82fb      	strh	r3, [r7, #22]
 8010fe4:	e008      	b.n	8010ff8 <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 8010fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe8:	3301      	adds	r3, #1
 8010fea:	493e      	ldr	r1, [pc, #248]	; (80110e4 <search_AroundWalkCount+0x118>)
 8010fec:	6a3a      	ldr	r2, [r7, #32]
 8010fee:	0112      	lsls	r2, r2, #4
 8010ff0:	4413      	add	r3, r2
 8010ff2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010ff6:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8010ff8:	6a3b      	ldr	r3, [r7, #32]
 8010ffa:	2b0e      	cmp	r3, #14
 8010ffc:	dd02      	ble.n	8011004 <search_AroundWalkCount+0x38>
 8010ffe:	23ff      	movs	r3, #255	; 0xff
 8011000:	82bb      	strh	r3, [r7, #20]
 8011002:	e008      	b.n	8011016 <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 8011004:	6a3b      	ldr	r3, [r7, #32]
 8011006:	3301      	adds	r3, #1
 8011008:	4936      	ldr	r1, [pc, #216]	; (80110e4 <search_AroundWalkCount+0x118>)
 801100a:	011a      	lsls	r2, r3, #4
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	4413      	add	r3, r2
 8011010:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011014:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	2b00      	cmp	r3, #0
 801101a:	dc02      	bgt.n	8011022 <search_AroundWalkCount+0x56>
 801101c:	23ff      	movs	r3, #255	; 0xff
 801101e:	827b      	strh	r3, [r7, #18]
 8011020:	e008      	b.n	8011034 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 8011022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011024:	3b01      	subs	r3, #1
 8011026:	492f      	ldr	r1, [pc, #188]	; (80110e4 <search_AroundWalkCount+0x118>)
 8011028:	6a3a      	ldr	r2, [r7, #32]
 801102a:	0112      	lsls	r2, r2, #4
 801102c:	4413      	add	r3, r2
 801102e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011032:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011034:	6a3b      	ldr	r3, [r7, #32]
 8011036:	2b00      	cmp	r3, #0
 8011038:	dc02      	bgt.n	8011040 <search_AroundWalkCount+0x74>
 801103a:	23ff      	movs	r3, #255	; 0xff
 801103c:	823b      	strh	r3, [r7, #16]
 801103e:	e008      	b.n	8011052 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 8011040:	6a3b      	ldr	r3, [r7, #32]
 8011042:	3b01      	subs	r3, #1
 8011044:	4927      	ldr	r1, [pc, #156]	; (80110e4 <search_AroundWalkCount+0x118>)
 8011046:	011a      	lsls	r2, r3, #4
 8011048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801104a:	4413      	add	r3, r2
 801104c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011050:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011054:	3b01      	subs	r3, #1
 8011056:	2b03      	cmp	r3, #3
 8011058:	d83e      	bhi.n	80110d8 <search_AroundWalkCount+0x10c>
 801105a:	a201      	add	r2, pc, #4	; (adr r2, 8011060 <search_AroundWalkCount+0x94>)
 801105c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011060:	08011071 	.word	0x08011071
 8011064:	0801108b 	.word	0x0801108b
 8011068:	080110a5 	.word	0x080110a5
 801106c:	080110bf 	.word	0x080110bf
	case 1:
		*front_count = north_count;
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	8afa      	ldrh	r2, [r7, #22]
 8011074:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011076:	68bb      	ldr	r3, [r7, #8]
 8011078:	8aba      	ldrh	r2, [r7, #20]
 801107a:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	8a7a      	ldrh	r2, [r7, #18]
 8011080:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	8a3a      	ldrh	r2, [r7, #16]
 8011086:	801a      	strh	r2, [r3, #0]
		break;
 8011088:	e026      	b.n	80110d8 <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	8aba      	ldrh	r2, [r7, #20]
 801108e:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	8a7a      	ldrh	r2, [r7, #18]
 8011094:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	8a3a      	ldrh	r2, [r7, #16]
 801109a:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	8afa      	ldrh	r2, [r7, #22]
 80110a0:	801a      	strh	r2, [r3, #0]
		break;
 80110a2:	e019      	b.n	80110d8 <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	8a7a      	ldrh	r2, [r7, #18]
 80110a8:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	8a3a      	ldrh	r2, [r7, #16]
 80110ae:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	8afa      	ldrh	r2, [r7, #22]
 80110b4:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	8aba      	ldrh	r2, [r7, #20]
 80110ba:	801a      	strh	r2, [r3, #0]
		break;
 80110bc:	e00c      	b.n	80110d8 <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	8a3a      	ldrh	r2, [r7, #16]
 80110c2:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	8afa      	ldrh	r2, [r7, #22]
 80110c8:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	8aba      	ldrh	r2, [r7, #20]
 80110ce:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	8a7a      	ldrh	r2, [r7, #18]
 80110d4:	801a      	strh	r2, [r3, #0]
		break;
 80110d6:	bf00      	nop

	}


}
 80110d8:	bf00      	nop
 80110da:	371c      	adds	r7, #28
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr
 80110e4:	20000d24 	.word	0x20000d24

080110e8 <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 80110e8:	b480      	push	{r7}
 80110ea:	b087      	sub	sp, #28
 80110ec:	af00      	add	r7, sp, #0
 80110ee:	60f8      	str	r0, [r7, #12]
 80110f0:	60b9      	str	r1, [r7, #8]
 80110f2:	607a      	str	r2, [r7, #4]
 80110f4:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 80110f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f8:	2b0e      	cmp	r3, #14
 80110fa:	dd03      	ble.n	8011104 <search_AroundDijkstraCount+0x1c>
 80110fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011100:	82fb      	strh	r3, [r7, #22]
 8011102:	e00a      	b.n	801111a <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011104:	4944      	ldr	r1, [pc, #272]	; (8011218 <search_AroundDijkstraCount+0x130>)
 8011106:	6a3a      	ldr	r2, [r7, #32]
 8011108:	4613      	mov	r3, r2
 801110a:	011b      	lsls	r3, r3, #4
 801110c:	1a9b      	subs	r3, r3, r2
 801110e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011110:	4413      	add	r3, r2
 8011112:	33f0      	adds	r3, #240	; 0xf0
 8011114:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011118:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 801111a:	6a3b      	ldr	r3, [r7, #32]
 801111c:	2b0e      	cmp	r3, #14
 801111e:	dd03      	ble.n	8011128 <search_AroundDijkstraCount+0x40>
 8011120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011124:	82bb      	strh	r3, [r7, #20]
 8011126:	e009      	b.n	801113c <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 8011128:	493b      	ldr	r1, [pc, #236]	; (8011218 <search_AroundDijkstraCount+0x130>)
 801112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801112c:	4613      	mov	r3, r2
 801112e:	011b      	lsls	r3, r3, #4
 8011130:	1a9b      	subs	r3, r3, r2
 8011132:	6a3a      	ldr	r2, [r7, #32]
 8011134:	4413      	add	r3, r2
 8011136:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801113a:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801113e:	2b00      	cmp	r3, #0
 8011140:	dc03      	bgt.n	801114a <search_AroundDijkstraCount+0x62>
 8011142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011146:	827b      	strh	r3, [r7, #18]
 8011148:	e00b      	b.n	8011162 <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	1e59      	subs	r1, r3, #1
 801114e:	4832      	ldr	r0, [pc, #200]	; (8011218 <search_AroundDijkstraCount+0x130>)
 8011150:	6a3a      	ldr	r2, [r7, #32]
 8011152:	4613      	mov	r3, r2
 8011154:	011b      	lsls	r3, r3, #4
 8011156:	1a9b      	subs	r3, r3, r2
 8011158:	440b      	add	r3, r1
 801115a:	33f0      	adds	r3, #240	; 0xf0
 801115c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011160:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 8011162:	6a3b      	ldr	r3, [r7, #32]
 8011164:	2b00      	cmp	r3, #0
 8011166:	dc03      	bgt.n	8011170 <search_AroundDijkstraCount+0x88>
 8011168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801116c:	823b      	strh	r3, [r7, #16]
 801116e:	e00a      	b.n	8011186 <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	1e59      	subs	r1, r3, #1
 8011174:	4828      	ldr	r0, [pc, #160]	; (8011218 <search_AroundDijkstraCount+0x130>)
 8011176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011178:	4613      	mov	r3, r2
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	1a9b      	subs	r3, r3, r2
 801117e:	440b      	add	r3, r1
 8011180:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011184:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011188:	3b01      	subs	r3, #1
 801118a:	2b03      	cmp	r3, #3
 801118c:	d83e      	bhi.n	801120c <search_AroundDijkstraCount+0x124>
 801118e:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <search_AroundDijkstraCount+0xac>)
 8011190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011194:	080111a5 	.word	0x080111a5
 8011198:	080111bf 	.word	0x080111bf
 801119c:	080111d9 	.word	0x080111d9
 80111a0:	080111f3 	.word	0x080111f3
	case 1:
		*front_count = north_count;
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	8afa      	ldrh	r2, [r7, #22]
 80111a8:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	8aba      	ldrh	r2, [r7, #20]
 80111ae:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	8a7a      	ldrh	r2, [r7, #18]
 80111b4:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	8a3a      	ldrh	r2, [r7, #16]
 80111ba:	801a      	strh	r2, [r3, #0]
		break;
 80111bc:	e026      	b.n	801120c <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	8aba      	ldrh	r2, [r7, #20]
 80111c2:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	8a7a      	ldrh	r2, [r7, #18]
 80111c8:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	8a3a      	ldrh	r2, [r7, #16]
 80111ce:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	8afa      	ldrh	r2, [r7, #22]
 80111d4:	801a      	strh	r2, [r3, #0]
		break;
 80111d6:	e019      	b.n	801120c <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	8a7a      	ldrh	r2, [r7, #18]
 80111dc:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	8a3a      	ldrh	r2, [r7, #16]
 80111e2:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	8afa      	ldrh	r2, [r7, #22]
 80111e8:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	8aba      	ldrh	r2, [r7, #20]
 80111ee:	801a      	strh	r2, [r3, #0]
		break;
 80111f0:	e00c      	b.n	801120c <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	8a3a      	ldrh	r2, [r7, #16]
 80111f6:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	8afa      	ldrh	r2, [r7, #22]
 80111fc:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	8aba      	ldrh	r2, [r7, #20]
 8011202:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	8a7a      	ldrh	r2, [r7, #18]
 8011208:	801a      	strh	r2, [r3, #0]
		break;
 801120a:	bf00      	nop

	}


}
 801120c:	bf00      	nop
 801120e:	371c      	adds	r7, #28
 8011210:	46bd      	mov	sp, r7
 8011212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011216:	4770      	bx	lr
 8011218:	20000f24 	.word	0x20000f24

0801121c <create_DijkstraMap>:




void create_DijkstraMap(void){
 801121c:	b590      	push	{r4, r7, lr}
 801121e:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8011222:	b081      	sub	sp, #4
 8011224:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 8011226:	23b4      	movs	r3, #180	; 0xb4
 8011228:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801122c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011230:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011232:	237f      	movs	r3, #127	; 0x7f
 8011234:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011238:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801123c:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 801123e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011242:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011246:	4a1d      	ldr	r2, [pc, #116]	; (80112bc <create_DijkstraMap+0xa0>)
 8011248:	ca07      	ldmia	r2, {r0, r1, r2}
 801124a:	c303      	stmia	r3!, {r0, r1}
 801124c:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 801124e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011252:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011256:	4a1a      	ldr	r2, [pc, #104]	; (80112c0 <create_DijkstraMap+0xa4>)
 8011258:	ca07      	ldmia	r2, {r0, r1, r2}
 801125a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 801125e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011262:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011266:	4618      	mov	r0, r3
 8011268:	f003 fad4 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_y);
 801126c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011270:	f103 0320 	add.w	r3, r3, #32
 8011274:	3b0c      	subs	r3, #12
 8011276:	4618      	mov	r0, r3
 8011278:	f003 facc 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_matrix);
 801127c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011280:	3b14      	subs	r3, #20
 8011282:	4618      	mov	r0, r3
 8011284:	f003 fac6 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_direction);
 8011288:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801128c:	3b3c      	subs	r3, #60	; 0x3c
 801128e:	4618      	mov	r0, r3
 8011290:	f003 fac0 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_cost);
 8011294:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011298:	3b64      	subs	r3, #100	; 0x64
 801129a:	4618      	mov	r0, r3
 801129c:	f003 faba 	bl	8014814 <initStack_walk>
	for(int i=0;i<=15;i++){
 80112a0:	2300      	movs	r3, #0
 80112a2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80112a6:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80112aa:	6013      	str	r3, [r2, #0]
 80112ac:	e04e      	b.n	801134c <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 80112ae:	2300      	movs	r3, #0
 80112b0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80112b4:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80112b8:	6013      	str	r3, [r2, #0]
 80112ba:	e035      	b.n	8011328 <create_DijkstraMap+0x10c>
 80112bc:	08024254 	.word	0x08024254
 80112c0:	08024260 	.word	0x08024260
			Dijkstra.column_count[i][j]=65535;
 80112c4:	49c7      	ldr	r1, [pc, #796]	; (80115e4 <create_DijkstraMap+0x3c8>)
 80112c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80112ca:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80112ce:	681a      	ldr	r2, [r3, #0]
 80112d0:	4613      	mov	r3, r2
 80112d2:	011b      	lsls	r3, r3, #4
 80112d4:	1a9b      	subs	r3, r3, r2
 80112d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80112da:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80112de:	6812      	ldr	r2, [r2, #0]
 80112e0:	4413      	add	r3, r2
 80112e2:	33f0      	adds	r3, #240	; 0xf0
 80112e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 80112ec:	49bd      	ldr	r1, [pc, #756]	; (80115e4 <create_DijkstraMap+0x3c8>)
 80112ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80112f2:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	4613      	mov	r3, r2
 80112fa:	011b      	lsls	r3, r3, #4
 80112fc:	1a9b      	subs	r3, r3, r2
 80112fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011302:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011306:	6812      	ldr	r2, [r2, #0]
 8011308:	4413      	add	r3, r2
 801130a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801130e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8011312:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011316:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	3301      	adds	r3, #1
 801131e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011322:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011326:	6013      	str	r3, [r2, #0]
 8011328:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801132c:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b0e      	cmp	r3, #14
 8011334:	ddc6      	ble.n	80112c4 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 8011336:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801133a:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	3301      	adds	r3, #1
 8011342:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011346:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801134a:	6013      	str	r3, [r2, #0]
 801134c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011350:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	2b0f      	cmp	r3, #15
 8011358:	dda9      	ble.n	80112ae <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 801135a:	4ba2      	ldr	r3, [pc, #648]	; (80115e4 <create_DijkstraMap+0x3c8>)
 801135c:	2200      	movs	r2, #0
 801135e:	f8a3 227e 	strh.w	r2, [r3, #638]	; 0x27e
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 8011362:	4ba0      	ldr	r3, [pc, #640]	; (80115e4 <create_DijkstraMap+0x3c8>)
 8011364:	2200      	movs	r2, #0
 8011366:	f8a3 229c 	strh.w	r2, [r3, #668]	; 0x29c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 801136a:	4b9e      	ldr	r3, [pc, #632]	; (80115e4 <create_DijkstraMap+0x3c8>)
 801136c:	2200      	movs	r2, #0
 801136e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 8011372:	4b9c      	ldr	r3, [pc, #624]	; (80115e4 <create_DijkstraMap+0x3c8>)
 8011374:	2200      	movs	r2, #0
 8011376:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801137a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801137e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011382:	2105      	movs	r1, #5
 8011384:	4618      	mov	r0, r3
 8011386:	f003 fa55 	bl	8014834 <pushStack_walk>
 801138a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801138e:	f103 0320 	add.w	r3, r3, #32
 8011392:	3b0c      	subs	r3, #12
 8011394:	2104      	movs	r1, #4
 8011396:	4618      	mov	r0, r3
 8011398:	f003 fa4c 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801139c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80113a0:	3b14      	subs	r3, #20
 80113a2:	2100      	movs	r1, #0
 80113a4:	4618      	mov	r0, r3
 80113a6:	f003 fa45 	bl	8014834 <pushStack_walk>
 80113aa:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80113ae:	3b3c      	subs	r3, #60	; 0x3c
 80113b0:	2108      	movs	r1, #8
 80113b2:	4618      	mov	r0, r3
 80113b4:	f003 fa3e 	bl	8014834 <pushStack_walk>
 80113b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80113bc:	3b64      	subs	r3, #100	; 0x64
 80113be:	2100      	movs	r1, #0
 80113c0:	4618      	mov	r0, r3
 80113c2:	f003 fa37 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 80113c6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80113ca:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80113ce:	2106      	movs	r1, #6
 80113d0:	4618      	mov	r0, r3
 80113d2:	f003 fa2f 	bl	8014834 <pushStack_walk>
 80113d6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80113da:	f103 0320 	add.w	r3, r3, #32
 80113de:	3b0c      	subs	r3, #12
 80113e0:	2104      	movs	r1, #4
 80113e2:	4618      	mov	r0, r3
 80113e4:	f003 fa26 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80113e8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80113ec:	3b14      	subs	r3, #20
 80113ee:	2100      	movs	r1, #0
 80113f0:	4618      	mov	r0, r3
 80113f2:	f003 fa1f 	bl	8014834 <pushStack_walk>
 80113f6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80113fa:	3b3c      	subs	r3, #60	; 0x3c
 80113fc:	2108      	movs	r1, #8
 80113fe:	4618      	mov	r0, r3
 8011400:	f003 fa18 	bl	8014834 <pushStack_walk>
 8011404:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011408:	3b64      	subs	r3, #100	; 0x64
 801140a:	2100      	movs	r1, #0
 801140c:	4618      	mov	r0, r3
 801140e:	f003 fa11 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011412:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011416:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801141a:	2105      	movs	r1, #5
 801141c:	4618      	mov	r0, r3
 801141e:	f003 fa09 	bl	8014834 <pushStack_walk>
 8011422:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011426:	f103 0320 	add.w	r3, r3, #32
 801142a:	3b0c      	subs	r3, #12
 801142c:	2104      	movs	r1, #4
 801142e:	4618      	mov	r0, r3
 8011430:	f003 fa00 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011434:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011438:	3b14      	subs	r3, #20
 801143a:	2101      	movs	r1, #1
 801143c:	4618      	mov	r0, r3
 801143e:	f003 f9f9 	bl	8014834 <pushStack_walk>
 8011442:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011446:	3b3c      	subs	r3, #60	; 0x3c
 8011448:	2108      	movs	r1, #8
 801144a:	4618      	mov	r0, r3
 801144c:	f003 f9f2 	bl	8014834 <pushStack_walk>
 8011450:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011454:	3b64      	subs	r3, #100	; 0x64
 8011456:	2100      	movs	r1, #0
 8011458:	4618      	mov	r0, r3
 801145a:	f003 f9eb 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 801145e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011462:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011466:	2105      	movs	r1, #5
 8011468:	4618      	mov	r0, r3
 801146a:	f003 f9e3 	bl	8014834 <pushStack_walk>
 801146e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011472:	f103 0320 	add.w	r3, r3, #32
 8011476:	3b0c      	subs	r3, #12
 8011478:	2105      	movs	r1, #5
 801147a:	4618      	mov	r0, r3
 801147c:	f003 f9da 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011480:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011484:	3b14      	subs	r3, #20
 8011486:	2101      	movs	r1, #1
 8011488:	4618      	mov	r0, r3
 801148a:	f003 f9d3 	bl	8014834 <pushStack_walk>
 801148e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011492:	3b3c      	subs	r3, #60	; 0x3c
 8011494:	2108      	movs	r1, #8
 8011496:	4618      	mov	r0, r3
 8011498:	f003 f9cc 	bl	8014834 <pushStack_walk>
 801149c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80114a0:	3b64      	subs	r3, #100	; 0x64
 80114a2:	2100      	movs	r1, #0
 80114a4:	4618      	mov	r0, r3
 80114a6:	f003 f9c5 	bl	8014834 <pushStack_walk>



	unsigned short count_number = 1;
 80114aa:	2301      	movs	r3, #1
 80114ac:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114b0:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80114b4:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80114b6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80114ba:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80114be:	4618      	mov	r0, r3
 80114c0:	f003 f9e2 	bl	8014888 <popStack_walk>
 80114c4:	4603      	mov	r3, r0
 80114c6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114ca:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80114ce:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80114d0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80114d4:	f103 0320 	add.w	r3, r3, #32
 80114d8:	3b0c      	subs	r3, #12
 80114da:	4618      	mov	r0, r3
 80114dc:	f003 f9d4 	bl	8014888 <popStack_walk>
 80114e0:	4603      	mov	r3, r0
 80114e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114e6:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80114ea:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 80114ec:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80114f0:	3b14      	subs	r3, #20
 80114f2:	4618      	mov	r0, r3
 80114f4:	f003 f9c8 	bl	8014888 <popStack_walk>
 80114f8:	4603      	mov	r3, r0
 80114fa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80114fe:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8011502:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011504:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011508:	3b3c      	subs	r3, #60	; 0x3c
 801150a:	4618      	mov	r0, r3
 801150c:	f003 f9bc 	bl	8014888 <popStack_walk>
 8011510:	4603      	mov	r3, r0
 8011512:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011516:	f102 0266 	add.w	r2, r2, #102	; 0x66
 801151a:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 801151c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011520:	3b64      	subs	r3, #100	; 0x64
 8011522:	4618      	mov	r0, r3
 8011524:	f003 f9b0 	bl	8014888 <popStack_walk>
 8011528:	4603      	mov	r3, r0
 801152a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801152e:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8011532:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8011534:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011538:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801153c:	881b      	ldrh	r3, [r3, #0]
 801153e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011542:	4293      	cmp	r3, r2
 8011544:	f001 83a9 	beq.w	8012c9a <create_DijkstraMap+0x1a7e>
 8011548:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801154c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011550:	881b      	ldrh	r3, [r3, #0]
 8011552:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011556:	4293      	cmp	r3, r2
 8011558:	f001 839f 	beq.w	8012c9a <create_DijkstraMap+0x1a7e>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 801155c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011560:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8011564:	881b      	ldrh	r3, [r3, #0]
 8011566:	2b00      	cmp	r3, #0
 8011568:	f040 85c5 	bne.w	80120f6 <create_DijkstraMap+0xeda>
			if(Ycoordinate <= 13){
 801156c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011570:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011574:	881b      	ldrh	r3, [r3, #0]
 8011576:	2b0d      	cmp	r3, #13
 8011578:	f200 80f2 	bhi.w	8011760 <create_DijkstraMap+0x544>
				if(Direction==SLANT_NORTH){
 801157c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011580:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011584:	881b      	ldrh	r3, [r3, #0]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d12e      	bne.n	80115e8 <create_DijkstraMap+0x3cc>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801158a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801158e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011592:	881b      	ldrh	r3, [r3, #0]
 8011594:	3301      	adds	r3, #1
 8011596:	b29b      	uxth	r3, r3
 8011598:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801159c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80115a0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80115a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80115a6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80115aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115ae:	2b04      	cmp	r3, #4
 80115b0:	dd05      	ble.n	80115be <create_DijkstraMap+0x3a2>
 80115b2:	2304      	movs	r3, #4
 80115b4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80115b8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80115bc:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80115be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80115c2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80115c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80115ca:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80115ce:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80115d2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80115d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80115da:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80115de:	8013      	strh	r3, [r2, #0]
 80115e0:	e012      	b.n	8011608 <create_DijkstraMap+0x3ec>
 80115e2:	bf00      	nop
 80115e4:	20000f24 	.word	0x20000f24
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80115e8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80115ec:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80115f0:	881b      	ldrh	r3, [r3, #0]
 80115f2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80115f6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80115fa:	8013      	strh	r3, [r2, #0]
 80115fc:	2300      	movs	r3, #0
 80115fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011602:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011606:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011608:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801160c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011610:	881b      	ldrh	r3, [r3, #0]
 8011612:	3301      	adds	r3, #1
 8011614:	4a70      	ldr	r2, [pc, #448]	; (80117d8 <create_DijkstraMap+0x5bc>)
 8011616:	330c      	adds	r3, #12
 8011618:	005b      	lsls	r3, r3, #1
 801161a:	4413      	add	r3, r2
 801161c:	88db      	ldrh	r3, [r3, #6]
 801161e:	461a      	mov	r2, r3
 8011620:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011624:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011628:	881b      	ldrh	r3, [r3, #0]
 801162a:	fa42 f303 	asr.w	r3, r2, r3
 801162e:	f003 0301 	and.w	r3, r3, #1
 8011632:	2b00      	cmp	r3, #0
 8011634:	f040 8094 	bne.w	8011760 <create_DijkstraMap+0x544>
 8011638:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801163c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011640:	881a      	ldrh	r2, [r3, #0]
 8011642:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011646:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801164a:	881b      	ldrh	r3, [r3, #0]
 801164c:	1c59      	adds	r1, r3, #1
 801164e:	4863      	ldr	r0, [pc, #396]	; (80117dc <create_DijkstraMap+0x5c0>)
 8011650:	4613      	mov	r3, r2
 8011652:	011b      	lsls	r3, r3, #4
 8011654:	1a9b      	subs	r3, r3, r2
 8011656:	440b      	add	r3, r1
 8011658:	33f0      	adds	r3, #240	; 0xf0
 801165a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801165e:	461c      	mov	r4, r3
 8011660:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011664:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011668:	881a      	ldrh	r2, [r3, #0]
 801166a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801166e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011672:	8819      	ldrh	r1, [r3, #0]
 8011674:	4859      	ldr	r0, [pc, #356]	; (80117dc <create_DijkstraMap+0x5c0>)
 8011676:	4613      	mov	r3, r2
 8011678:	011b      	lsls	r3, r3, #4
 801167a:	1a9b      	subs	r3, r3, r2
 801167c:	440b      	add	r3, r1
 801167e:	33f0      	adds	r3, #240	; 0xf0
 8011680:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011684:	461a      	mov	r2, r3
 8011686:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801168a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011692:	4413      	add	r3, r2
 8011694:	429c      	cmp	r4, r3
 8011696:	dd63      	ble.n	8011760 <create_DijkstraMap+0x544>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011698:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801169c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80116a0:	881a      	ldrh	r2, [r3, #0]
 80116a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80116a6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80116aa:	8819      	ldrh	r1, [r3, #0]
 80116ac:	484b      	ldr	r0, [pc, #300]	; (80117dc <create_DijkstraMap+0x5c0>)
 80116ae:	4613      	mov	r3, r2
 80116b0:	011b      	lsls	r3, r3, #4
 80116b2:	1a9b      	subs	r3, r3, r2
 80116b4:	440b      	add	r3, r1
 80116b6:	33f0      	adds	r3, #240	; 0xf0
 80116b8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80116bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80116c0:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116ca:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80116ce:	8812      	ldrh	r2, [r2, #0]
 80116d0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80116d4:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80116d8:	8809      	ldrh	r1, [r1, #0]
 80116da:	3101      	adds	r1, #1
 80116dc:	4403      	add	r3, r0
 80116de:	b29c      	uxth	r4, r3
 80116e0:	483e      	ldr	r0, [pc, #248]	; (80117dc <create_DijkstraMap+0x5c0>)
 80116e2:	4613      	mov	r3, r2
 80116e4:	011b      	lsls	r3, r3, #4
 80116e6:	1a9b      	subs	r3, r3, r2
 80116e8:	440b      	add	r3, r1
 80116ea:	33f0      	adds	r3, #240	; 0xf0
 80116ec:	4622      	mov	r2, r4
 80116ee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80116f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80116f6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80116fa:	881a      	ldrh	r2, [r3, #0]
 80116fc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011700:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011704:	4611      	mov	r1, r2
 8011706:	4618      	mov	r0, r3
 8011708:	f003 f894 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 801170c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011710:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011714:	881b      	ldrh	r3, [r3, #0]
 8011716:	3301      	adds	r3, #1
 8011718:	b29a      	uxth	r2, r3
 801171a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801171e:	f103 0320 	add.w	r3, r3, #32
 8011722:	3b0c      	subs	r3, #12
 8011724:	4611      	mov	r1, r2
 8011726:	4618      	mov	r0, r3
 8011728:	f003 f884 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 801172c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011730:	3b14      	subs	r3, #20
 8011732:	2100      	movs	r1, #0
 8011734:	4618      	mov	r0, r3
 8011736:	f003 f87d 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 801173a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801173e:	3b3c      	subs	r3, #60	; 0x3c
 8011740:	2100      	movs	r1, #0
 8011742:	4618      	mov	r0, r3
 8011744:	f003 f876 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011748:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801174c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011750:	881a      	ldrh	r2, [r3, #0]
 8011752:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011756:	3b64      	subs	r3, #100	; 0x64
 8011758:	4611      	mov	r1, r2
 801175a:	4618      	mov	r0, r3
 801175c:	f003 f86a 	bl	8014834 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011760:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011764:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011768:	881b      	ldrh	r3, [r3, #0]
 801176a:	2b00      	cmp	r3, #0
 801176c:	f000 80f4 	beq.w	8011958 <create_DijkstraMap+0x73c>
				if(Direction==SLANT_SOUTH){
 8011770:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011774:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011778:	881b      	ldrh	r3, [r3, #0]
 801177a:	2b04      	cmp	r3, #4
 801177c:	d130      	bne.n	80117e0 <create_DijkstraMap+0x5c4>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801177e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011782:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011786:	881b      	ldrh	r3, [r3, #0]
 8011788:	3301      	adds	r3, #1
 801178a:	b29b      	uxth	r3, r3
 801178c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011790:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011794:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011796:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801179a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801179e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117a2:	2b04      	cmp	r3, #4
 80117a4:	dd05      	ble.n	80117b2 <create_DijkstraMap+0x596>
 80117a6:	2304      	movs	r3, #4
 80117a8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117ac:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80117b0:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80117b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117b6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80117ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80117be:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80117c2:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80117c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80117ca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117ce:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80117d2:	8013      	strh	r3, [r2, #0]
 80117d4:	e014      	b.n	8011800 <create_DijkstraMap+0x5e4>
 80117d6:	bf00      	nop
 80117d8:	20000c30 	.word	0x20000c30
 80117dc:	20000f24 	.word	0x20000f24
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80117e0:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80117e4:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80117e8:	881b      	ldrh	r3, [r3, #0]
 80117ea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117ee:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80117f2:	8013      	strh	r3, [r2, #0]
 80117f4:	2300      	movs	r3, #0
 80117f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117fa:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80117fe:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011800:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011804:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011808:	881b      	ldrh	r3, [r3, #0]
 801180a:	3b01      	subs	r3, #1
 801180c:	4a70      	ldr	r2, [pc, #448]	; (80119d0 <create_DijkstraMap+0x7b4>)
 801180e:	330c      	adds	r3, #12
 8011810:	005b      	lsls	r3, r3, #1
 8011812:	4413      	add	r3, r2
 8011814:	88db      	ldrh	r3, [r3, #6]
 8011816:	461a      	mov	r2, r3
 8011818:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801181c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	fa42 f303 	asr.w	r3, r2, r3
 8011826:	f003 0301 	and.w	r3, r3, #1
 801182a:	2b00      	cmp	r3, #0
 801182c:	f040 8094 	bne.w	8011958 <create_DijkstraMap+0x73c>
 8011830:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011834:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011838:	881a      	ldrh	r2, [r3, #0]
 801183a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801183e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011842:	881b      	ldrh	r3, [r3, #0]
 8011844:	1e59      	subs	r1, r3, #1
 8011846:	4863      	ldr	r0, [pc, #396]	; (80119d4 <create_DijkstraMap+0x7b8>)
 8011848:	4613      	mov	r3, r2
 801184a:	011b      	lsls	r3, r3, #4
 801184c:	1a9b      	subs	r3, r3, r2
 801184e:	440b      	add	r3, r1
 8011850:	33f0      	adds	r3, #240	; 0xf0
 8011852:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011856:	461c      	mov	r4, r3
 8011858:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801185c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011860:	881a      	ldrh	r2, [r3, #0]
 8011862:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011866:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801186a:	8819      	ldrh	r1, [r3, #0]
 801186c:	4859      	ldr	r0, [pc, #356]	; (80119d4 <create_DijkstraMap+0x7b8>)
 801186e:	4613      	mov	r3, r2
 8011870:	011b      	lsls	r3, r3, #4
 8011872:	1a9b      	subs	r3, r3, r2
 8011874:	440b      	add	r3, r1
 8011876:	33f0      	adds	r3, #240	; 0xf0
 8011878:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801187c:	461a      	mov	r2, r3
 801187e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011882:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011886:	f9b3 3000 	ldrsh.w	r3, [r3]
 801188a:	4413      	add	r3, r2
 801188c:	429c      	cmp	r4, r3
 801188e:	dd63      	ble.n	8011958 <create_DijkstraMap+0x73c>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011890:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011894:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011898:	881a      	ldrh	r2, [r3, #0]
 801189a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801189e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80118a2:	8819      	ldrh	r1, [r3, #0]
 80118a4:	484b      	ldr	r0, [pc, #300]	; (80119d4 <create_DijkstraMap+0x7b8>)
 80118a6:	4613      	mov	r3, r2
 80118a8:	011b      	lsls	r3, r3, #4
 80118aa:	1a9b      	subs	r3, r3, r2
 80118ac:	440b      	add	r3, r1
 80118ae:	33f0      	adds	r3, #240	; 0xf0
 80118b0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80118b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118b8:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80118c2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80118c6:	8812      	ldrh	r2, [r2, #0]
 80118c8:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80118cc:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80118d0:	8809      	ldrh	r1, [r1, #0]
 80118d2:	3901      	subs	r1, #1
 80118d4:	4403      	add	r3, r0
 80118d6:	b29c      	uxth	r4, r3
 80118d8:	483e      	ldr	r0, [pc, #248]	; (80119d4 <create_DijkstraMap+0x7b8>)
 80118da:	4613      	mov	r3, r2
 80118dc:	011b      	lsls	r3, r3, #4
 80118de:	1a9b      	subs	r3, r3, r2
 80118e0:	440b      	add	r3, r1
 80118e2:	33f0      	adds	r3, #240	; 0xf0
 80118e4:	4622      	mov	r2, r4
 80118e6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80118ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80118ee:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80118f2:	881a      	ldrh	r2, [r3, #0]
 80118f4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118f8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118fc:	4611      	mov	r1, r2
 80118fe:	4618      	mov	r0, r3
 8011900:	f002 ff98 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011904:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011908:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801190c:	881b      	ldrh	r3, [r3, #0]
 801190e:	3b01      	subs	r3, #1
 8011910:	b29a      	uxth	r2, r3
 8011912:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011916:	f103 0320 	add.w	r3, r3, #32
 801191a:	3b0c      	subs	r3, #12
 801191c:	4611      	mov	r1, r2
 801191e:	4618      	mov	r0, r3
 8011920:	f002 ff88 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011924:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011928:	3b14      	subs	r3, #20
 801192a:	2100      	movs	r1, #0
 801192c:	4618      	mov	r0, r3
 801192e:	f002 ff81 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011932:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011936:	3b3c      	subs	r3, #60	; 0x3c
 8011938:	2104      	movs	r1, #4
 801193a:	4618      	mov	r0, r3
 801193c:	f002 ff7a 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011940:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011944:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011948:	881a      	ldrh	r2, [r3, #0]
 801194a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801194e:	3b64      	subs	r3, #100	; 0x64
 8011950:	4611      	mov	r1, r2
 8011952:	4618      	mov	r0, r3
 8011954:	f002 ff6e 	bl	8014834 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011958:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801195c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011960:	881b      	ldrh	r3, [r3, #0]
 8011962:	2b0e      	cmp	r3, #14
 8011964:	f200 81da 	bhi.w	8011d1c <create_DijkstraMap+0xb00>
				if(Direction==SLANT_SOUTH_EAST){
 8011968:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801196c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	2b03      	cmp	r3, #3
 8011974:	d130      	bne.n	80119d8 <create_DijkstraMap+0x7bc>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011976:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801197a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801197e:	881b      	ldrh	r3, [r3, #0]
 8011980:	3301      	adds	r3, #1
 8011982:	b29b      	uxth	r3, r3
 8011984:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011988:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801198c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801198e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011992:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011996:	f9b3 3000 	ldrsh.w	r3, [r3]
 801199a:	2b05      	cmp	r3, #5
 801199c:	dd05      	ble.n	80119aa <create_DijkstraMap+0x78e>
 801199e:	2305      	movs	r3, #5
 80119a0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119a4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80119a8:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80119aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119ae:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80119b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80119b6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80119ba:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80119be:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80119c2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119c6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80119ca:	8013      	strh	r3, [r2, #0]
 80119cc:	e014      	b.n	80119f8 <create_DijkstraMap+0x7dc>
 80119ce:	bf00      	nop
 80119d0:	20000c30 	.word	0x20000c30
 80119d4:	20000f24 	.word	0x20000f24
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80119d8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80119dc:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80119e0:	881b      	ldrh	r3, [r3, #0]
 80119e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119e6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80119ea:	8013      	strh	r3, [r2, #0]
 80119ec:	2300      	movs	r3, #0
 80119ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119f2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80119f6:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80119f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119fc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a00:	881b      	ldrh	r3, [r3, #0]
 8011a02:	4a68      	ldr	r2, [pc, #416]	; (8011ba4 <create_DijkstraMap+0x988>)
 8011a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011a08:	461a      	mov	r2, r3
 8011a0a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a0e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a12:	881b      	ldrh	r3, [r3, #0]
 8011a14:	fa42 f303 	asr.w	r3, r2, r3
 8011a18:	f003 0301 	and.w	r3, r3, #1
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	f040 808e 	bne.w	8011b3e <create_DijkstraMap+0x922>
 8011a22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a26:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a2a:	881a      	ldrh	r2, [r3, #0]
 8011a2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a30:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a34:	8819      	ldrh	r1, [r3, #0]
 8011a36:	485c      	ldr	r0, [pc, #368]	; (8011ba8 <create_DijkstraMap+0x98c>)
 8011a38:	4613      	mov	r3, r2
 8011a3a:	011b      	lsls	r3, r3, #4
 8011a3c:	1a9b      	subs	r3, r3, r2
 8011a3e:	440b      	add	r3, r1
 8011a40:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a44:	461c      	mov	r4, r3
 8011a46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a4a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a4e:	881a      	ldrh	r2, [r3, #0]
 8011a50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a54:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a58:	8819      	ldrh	r1, [r3, #0]
 8011a5a:	4853      	ldr	r0, [pc, #332]	; (8011ba8 <create_DijkstraMap+0x98c>)
 8011a5c:	4613      	mov	r3, r2
 8011a5e:	011b      	lsls	r3, r3, #4
 8011a60:	1a9b      	subs	r3, r3, r2
 8011a62:	440b      	add	r3, r1
 8011a64:	33f0      	adds	r3, #240	; 0xf0
 8011a66:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a6a:	461a      	mov	r2, r3
 8011a6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a70:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a78:	4413      	add	r3, r2
 8011a7a:	429c      	cmp	r4, r3
 8011a7c:	dd5f      	ble.n	8011b3e <create_DijkstraMap+0x922>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011a7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a82:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011a86:	881a      	ldrh	r2, [r3, #0]
 8011a88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a8c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a90:	8819      	ldrh	r1, [r3, #0]
 8011a92:	4845      	ldr	r0, [pc, #276]	; (8011ba8 <create_DijkstraMap+0x98c>)
 8011a94:	4613      	mov	r3, r2
 8011a96:	011b      	lsls	r3, r3, #4
 8011a98:	1a9b      	subs	r3, r3, r2
 8011a9a:	440b      	add	r3, r1
 8011a9c:	33f0      	adds	r3, #240	; 0xf0
 8011a9e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011aa2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011aa6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011aaa:	881b      	ldrh	r3, [r3, #0]
 8011aac:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ab0:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011ab4:	8812      	ldrh	r2, [r2, #0]
 8011ab6:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011aba:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011abe:	8809      	ldrh	r1, [r1, #0]
 8011ac0:	4403      	add	r3, r0
 8011ac2:	b29c      	uxth	r4, r3
 8011ac4:	4838      	ldr	r0, [pc, #224]	; (8011ba8 <create_DijkstraMap+0x98c>)
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	011b      	lsls	r3, r3, #4
 8011aca:	1a9b      	subs	r3, r3, r2
 8011acc:	440b      	add	r3, r1
 8011ace:	4622      	mov	r2, r4
 8011ad0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011ad4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ad8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011adc:	881a      	ldrh	r2, [r3, #0]
 8011ade:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011ae2:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f002 fea3 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011aee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011af2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011af6:	881a      	ldrh	r2, [r3, #0]
 8011af8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011afc:	f103 0320 	add.w	r3, r3, #32
 8011b00:	3b0c      	subs	r3, #12
 8011b02:	4611      	mov	r1, r2
 8011b04:	4618      	mov	r0, r3
 8011b06:	f002 fe95 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011b0a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011b0e:	3b14      	subs	r3, #20
 8011b10:	2101      	movs	r1, #1
 8011b12:	4618      	mov	r0, r3
 8011b14:	f002 fe8e 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011b18:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011b1c:	3b3c      	subs	r3, #60	; 0x3c
 8011b1e:	2103      	movs	r1, #3
 8011b20:	4618      	mov	r0, r3
 8011b22:	f002 fe87 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011b26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b2a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b2e:	881a      	ldrh	r2, [r3, #0]
 8011b30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011b34:	3b64      	subs	r3, #100	; 0x64
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f002 fe7b 	bl	8014834 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011b3e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b42:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011b46:	881b      	ldrh	r3, [r3, #0]
 8011b48:	2b01      	cmp	r3, #1
 8011b4a:	d12f      	bne.n	8011bac <create_DijkstraMap+0x990>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011b4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b50:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011b54:	881b      	ldrh	r3, [r3, #0]
 8011b56:	3301      	adds	r3, #1
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b5e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b62:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011b64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b68:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b70:	2b05      	cmp	r3, #5
 8011b72:	dd05      	ble.n	8011b80 <create_DijkstraMap+0x964>
 8011b74:	2305      	movs	r3, #5
 8011b76:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b7a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011b7e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011b80:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b84:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011b88:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011b8c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011b90:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011b94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011b98:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b9c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011ba0:	8013      	strh	r3, [r2, #0]
 8011ba2:	e013      	b.n	8011bcc <create_DijkstraMap+0x9b0>
 8011ba4:	20000c30 	.word	0x20000c30
 8011ba8:	20000f24 	.word	0x20000f24
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011bac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011bb0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011bb4:	881b      	ldrh	r3, [r3, #0]
 8011bb6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011bba:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011bbe:	8013      	strh	r3, [r2, #0]
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011bc6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011bca:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011bcc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bd0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011bd4:	881b      	ldrh	r3, [r3, #0]
 8011bd6:	4a6f      	ldr	r2, [pc, #444]	; (8011d94 <create_DijkstraMap+0xb78>)
 8011bd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011bdc:	461a      	mov	r2, r3
 8011bde:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011be2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011be6:	881b      	ldrh	r3, [r3, #0]
 8011be8:	3301      	adds	r3, #1
 8011bea:	fa42 f303 	asr.w	r3, r2, r3
 8011bee:	f003 0301 	and.w	r3, r3, #1
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	f040 8092 	bne.w	8011d1c <create_DijkstraMap+0xb00>
 8011bf8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bfc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c00:	881b      	ldrh	r3, [r3, #0]
 8011c02:	1c5a      	adds	r2, r3, #1
 8011c04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c08:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c0c:	8819      	ldrh	r1, [r3, #0]
 8011c0e:	4862      	ldr	r0, [pc, #392]	; (8011d98 <create_DijkstraMap+0xb7c>)
 8011c10:	4613      	mov	r3, r2
 8011c12:	011b      	lsls	r3, r3, #4
 8011c14:	1a9b      	subs	r3, r3, r2
 8011c16:	440b      	add	r3, r1
 8011c18:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c1c:	461c      	mov	r4, r3
 8011c1e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c22:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c26:	881a      	ldrh	r2, [r3, #0]
 8011c28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c2c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c30:	8819      	ldrh	r1, [r3, #0]
 8011c32:	4859      	ldr	r0, [pc, #356]	; (8011d98 <create_DijkstraMap+0xb7c>)
 8011c34:	4613      	mov	r3, r2
 8011c36:	011b      	lsls	r3, r3, #4
 8011c38:	1a9b      	subs	r3, r3, r2
 8011c3a:	440b      	add	r3, r1
 8011c3c:	33f0      	adds	r3, #240	; 0xf0
 8011c3e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c42:	461a      	mov	r2, r3
 8011c44:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c48:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011c4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c50:	4413      	add	r3, r2
 8011c52:	429c      	cmp	r4, r3
 8011c54:	dd62      	ble.n	8011d1c <create_DijkstraMap+0xb00>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011c56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c5a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011c5e:	881a      	ldrh	r2, [r3, #0]
 8011c60:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c64:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c68:	8819      	ldrh	r1, [r3, #0]
 8011c6a:	484b      	ldr	r0, [pc, #300]	; (8011d98 <create_DijkstraMap+0xb7c>)
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	011b      	lsls	r3, r3, #4
 8011c70:	1a9b      	subs	r3, r3, r2
 8011c72:	440b      	add	r3, r1
 8011c74:	33f0      	adds	r3, #240	; 0xf0
 8011c76:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011c7a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c7e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011c82:	881b      	ldrh	r3, [r3, #0]
 8011c84:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c88:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011c8c:	8812      	ldrh	r2, [r2, #0]
 8011c8e:	3201      	adds	r2, #1
 8011c90:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011c94:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011c98:	8809      	ldrh	r1, [r1, #0]
 8011c9a:	4403      	add	r3, r0
 8011c9c:	b29c      	uxth	r4, r3
 8011c9e:	483e      	ldr	r0, [pc, #248]	; (8011d98 <create_DijkstraMap+0xb7c>)
 8011ca0:	4613      	mov	r3, r2
 8011ca2:	011b      	lsls	r3, r3, #4
 8011ca4:	1a9b      	subs	r3, r3, r2
 8011ca6:	440b      	add	r3, r1
 8011ca8:	4622      	mov	r2, r4
 8011caa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011cae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cb2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cb6:	881a      	ldrh	r2, [r3, #0]
 8011cb8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011cbc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	4618      	mov	r0, r3
 8011cc4:	f002 fdb6 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8011cc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ccc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	3301      	adds	r3, #1
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011cda:	f103 0320 	add.w	r3, r3, #32
 8011cde:	3b0c      	subs	r3, #12
 8011ce0:	4611      	mov	r1, r2
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f002 fda6 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011ce8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011cec:	3b14      	subs	r3, #20
 8011cee:	2101      	movs	r1, #1
 8011cf0:	4618      	mov	r0, r3
 8011cf2:	f002 fd9f 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8011cf6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011cfa:	3b3c      	subs	r3, #60	; 0x3c
 8011cfc:	2101      	movs	r1, #1
 8011cfe:	4618      	mov	r0, r3
 8011d00:	f002 fd98 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011d04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d08:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d0c:	881a      	ldrh	r2, [r3, #0]
 8011d0e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011d12:	3b64      	subs	r3, #100	; 0x64
 8011d14:	4611      	mov	r1, r2
 8011d16:	4618      	mov	r0, r3
 8011d18:	f002 fd8c 	bl	8014834 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8011d1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d20:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f000 81e5 	beq.w	80120f6 <create_DijkstraMap+0xeda>
				if(Direction==SLANT_SOUTH_WEST){
 8011d2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d30:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	2b05      	cmp	r3, #5
 8011d38:	d130      	bne.n	8011d9c <create_DijkstraMap+0xb80>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011d3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d3e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011d42:	881b      	ldrh	r3, [r3, #0]
 8011d44:	3301      	adds	r3, #1
 8011d46:	b29b      	uxth	r3, r3
 8011d48:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d4c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d50:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011d52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d56:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d5e:	2b05      	cmp	r3, #5
 8011d60:	dd05      	ble.n	8011d6e <create_DijkstraMap+0xb52>
 8011d62:	2305      	movs	r3, #5
 8011d64:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d68:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011d6c:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011d6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d72:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011d76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011d7a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011d7e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011d82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011d86:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d8a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011d8e:	8013      	strh	r3, [r2, #0]
 8011d90:	e014      	b.n	8011dbc <create_DijkstraMap+0xba0>
 8011d92:	bf00      	nop
 8011d94:	20000c30 	.word	0x20000c30
 8011d98:	20000f24 	.word	0x20000f24
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011d9c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011da0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011daa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011dae:	8013      	strh	r3, [r2, #0]
 8011db0:	2300      	movs	r3, #0
 8011db2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011db6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011dba:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011dbc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dc0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	4a6a      	ldr	r2, [pc, #424]	; (8011f74 <create_DijkstraMap+0xd58>)
 8011dca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dd4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dd8:	881b      	ldrh	r3, [r3, #0]
 8011dda:	fa42 f303 	asr.w	r3, r2, r3
 8011dde:	f003 0301 	and.w	r3, r3, #1
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	f040 8092 	bne.w	8011f0c <create_DijkstraMap+0xcf0>
 8011de8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011dec:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011df0:	881a      	ldrh	r2, [r3, #0]
 8011df2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011df6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011dfa:	881b      	ldrh	r3, [r3, #0]
 8011dfc:	1e59      	subs	r1, r3, #1
 8011dfe:	485e      	ldr	r0, [pc, #376]	; (8011f78 <create_DijkstraMap+0xd5c>)
 8011e00:	4613      	mov	r3, r2
 8011e02:	011b      	lsls	r3, r3, #4
 8011e04:	1a9b      	subs	r3, r3, r2
 8011e06:	440b      	add	r3, r1
 8011e08:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e0c:	461c      	mov	r4, r3
 8011e0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e12:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e16:	881a      	ldrh	r2, [r3, #0]
 8011e18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e1c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e20:	8819      	ldrh	r1, [r3, #0]
 8011e22:	4855      	ldr	r0, [pc, #340]	; (8011f78 <create_DijkstraMap+0xd5c>)
 8011e24:	4613      	mov	r3, r2
 8011e26:	011b      	lsls	r3, r3, #4
 8011e28:	1a9b      	subs	r3, r3, r2
 8011e2a:	440b      	add	r3, r1
 8011e2c:	33f0      	adds	r3, #240	; 0xf0
 8011e2e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e32:	461a      	mov	r2, r3
 8011e34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e38:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e40:	4413      	add	r3, r2
 8011e42:	429c      	cmp	r4, r3
 8011e44:	dd62      	ble.n	8011f0c <create_DijkstraMap+0xcf0>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011e46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e4a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e4e:	881a      	ldrh	r2, [r3, #0]
 8011e50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e54:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011e58:	8819      	ldrh	r1, [r3, #0]
 8011e5a:	4847      	ldr	r0, [pc, #284]	; (8011f78 <create_DijkstraMap+0xd5c>)
 8011e5c:	4613      	mov	r3, r2
 8011e5e:	011b      	lsls	r3, r3, #4
 8011e60:	1a9b      	subs	r3, r3, r2
 8011e62:	440b      	add	r3, r1
 8011e64:	33f0      	adds	r3, #240	; 0xf0
 8011e66:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011e6a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e6e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011e72:	881b      	ldrh	r3, [r3, #0]
 8011e74:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e78:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011e7c:	8812      	ldrh	r2, [r2, #0]
 8011e7e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011e82:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011e86:	8809      	ldrh	r1, [r1, #0]
 8011e88:	3901      	subs	r1, #1
 8011e8a:	4403      	add	r3, r0
 8011e8c:	b29c      	uxth	r4, r3
 8011e8e:	483a      	ldr	r0, [pc, #232]	; (8011f78 <create_DijkstraMap+0xd5c>)
 8011e90:	4613      	mov	r3, r2
 8011e92:	011b      	lsls	r3, r3, #4
 8011e94:	1a9b      	subs	r3, r3, r2
 8011e96:	440b      	add	r3, r1
 8011e98:	4622      	mov	r2, r4
 8011e9a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8011e9e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ea2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ea6:	881b      	ldrh	r3, [r3, #0]
 8011ea8:	3b01      	subs	r3, #1
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011eb0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f002 fcbc 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011ebc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ec0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ec4:	881a      	ldrh	r2, [r3, #0]
 8011ec6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011eca:	f103 0320 	add.w	r3, r3, #32
 8011ece:	3b0c      	subs	r3, #12
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f002 fcae 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011ed8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011edc:	3b14      	subs	r3, #20
 8011ede:	2101      	movs	r1, #1
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f002 fca7 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8011ee6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011eea:	3b3c      	subs	r3, #60	; 0x3c
 8011eec:	2105      	movs	r1, #5
 8011eee:	4618      	mov	r0, r3
 8011ef0:	f002 fca0 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011ef4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ef8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011efc:	881a      	ldrh	r2, [r3, #0]
 8011efe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011f02:	3b64      	subs	r3, #100	; 0x64
 8011f04:	4611      	mov	r1, r2
 8011f06:	4618      	mov	r0, r3
 8011f08:	f002 fc94 	bl	8014834 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8011f0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f10:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011f14:	881b      	ldrh	r3, [r3, #0]
 8011f16:	2b07      	cmp	r3, #7
 8011f18:	d130      	bne.n	8011f7c <create_DijkstraMap+0xd60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011f1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f1e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011f22:	881b      	ldrh	r3, [r3, #0]
 8011f24:	3301      	adds	r3, #1
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f2c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f30:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011f32:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f36:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011f3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f3e:	2b05      	cmp	r3, #5
 8011f40:	dd05      	ble.n	8011f4e <create_DijkstraMap+0xd32>
 8011f42:	2305      	movs	r3, #5
 8011f44:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f48:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f4c:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011f4e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f52:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011f56:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f5a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f5e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f62:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011f66:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f6a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f6e:	8013      	strh	r3, [r2, #0]
 8011f70:	e014      	b.n	8011f9c <create_DijkstraMap+0xd80>
 8011f72:	bf00      	nop
 8011f74:	20000c30 	.word	0x20000c30
 8011f78:	20000f24 	.word	0x20000f24
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011f7c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f80:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f84:	881b      	ldrh	r3, [r3, #0]
 8011f86:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f8a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f8e:	8013      	strh	r3, [r2, #0]
 8011f90:	2300      	movs	r3, #0
 8011f92:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f96:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011f9a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011f9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fa0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011fa4:	881b      	ldrh	r3, [r3, #0]
 8011fa6:	3b01      	subs	r3, #1
 8011fa8:	4a74      	ldr	r2, [pc, #464]	; (801217c <create_DijkstraMap+0xf60>)
 8011faa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fae:	461a      	mov	r2, r3
 8011fb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fb4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	fa42 f303 	asr.w	r3, r2, r3
 8011fc0:	f003 0301 	and.w	r3, r3, #1
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	f040 8096 	bne.w	80120f6 <create_DijkstraMap+0xeda>
 8011fca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fce:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fd2:	881b      	ldrh	r3, [r3, #0]
 8011fd4:	1c5a      	adds	r2, r3, #1
 8011fd6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fda:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011fde:	881b      	ldrh	r3, [r3, #0]
 8011fe0:	1e59      	subs	r1, r3, #1
 8011fe2:	4867      	ldr	r0, [pc, #412]	; (8012180 <create_DijkstraMap+0xf64>)
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	011b      	lsls	r3, r3, #4
 8011fe8:	1a9b      	subs	r3, r3, r2
 8011fea:	440b      	add	r3, r1
 8011fec:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ff0:	461c      	mov	r4, r3
 8011ff2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ff6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ffa:	881a      	ldrh	r2, [r3, #0]
 8011ffc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012000:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012004:	8819      	ldrh	r1, [r3, #0]
 8012006:	485e      	ldr	r0, [pc, #376]	; (8012180 <create_DijkstraMap+0xf64>)
 8012008:	4613      	mov	r3, r2
 801200a:	011b      	lsls	r3, r3, #4
 801200c:	1a9b      	subs	r3, r3, r2
 801200e:	440b      	add	r3, r1
 8012010:	33f0      	adds	r3, #240	; 0xf0
 8012012:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012016:	461a      	mov	r2, r3
 8012018:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801201c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012024:	4413      	add	r3, r2
 8012026:	429c      	cmp	r4, r3
 8012028:	dd65      	ble.n	80120f6 <create_DijkstraMap+0xeda>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801202a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801202e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012032:	881a      	ldrh	r2, [r3, #0]
 8012034:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012038:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801203c:	8819      	ldrh	r1, [r3, #0]
 801203e:	4850      	ldr	r0, [pc, #320]	; (8012180 <create_DijkstraMap+0xf64>)
 8012040:	4613      	mov	r3, r2
 8012042:	011b      	lsls	r3, r3, #4
 8012044:	1a9b      	subs	r3, r3, r2
 8012046:	440b      	add	r3, r1
 8012048:	33f0      	adds	r3, #240	; 0xf0
 801204a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801204e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012052:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012056:	881b      	ldrh	r3, [r3, #0]
 8012058:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801205c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012060:	8812      	ldrh	r2, [r2, #0]
 8012062:	3201      	adds	r2, #1
 8012064:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012068:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801206c:	8809      	ldrh	r1, [r1, #0]
 801206e:	3901      	subs	r1, #1
 8012070:	4403      	add	r3, r0
 8012072:	b29c      	uxth	r4, r3
 8012074:	4842      	ldr	r0, [pc, #264]	; (8012180 <create_DijkstraMap+0xf64>)
 8012076:	4613      	mov	r3, r2
 8012078:	011b      	lsls	r3, r3, #4
 801207a:	1a9b      	subs	r3, r3, r2
 801207c:	440b      	add	r3, r1
 801207e:	4622      	mov	r2, r4
 8012080:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012084:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012088:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	3b01      	subs	r3, #1
 8012090:	b29a      	uxth	r2, r3
 8012092:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012096:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801209a:	4611      	mov	r1, r2
 801209c:	4618      	mov	r0, r3
 801209e:	f002 fbc9 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80120a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120a6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120aa:	881b      	ldrh	r3, [r3, #0]
 80120ac:	3301      	adds	r3, #1
 80120ae:	b29a      	uxth	r2, r3
 80120b0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80120b4:	f103 0320 	add.w	r3, r3, #32
 80120b8:	3b0c      	subs	r3, #12
 80120ba:	4611      	mov	r1, r2
 80120bc:	4618      	mov	r0, r3
 80120be:	f002 fbb9 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80120c2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80120c6:	3b14      	subs	r3, #20
 80120c8:	2101      	movs	r1, #1
 80120ca:	4618      	mov	r0, r3
 80120cc:	f002 fbb2 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80120d0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80120d4:	3b3c      	subs	r3, #60	; 0x3c
 80120d6:	2107      	movs	r1, #7
 80120d8:	4618      	mov	r0, r3
 80120da:	f002 fbab 	bl	8014834 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80120de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120e2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80120e6:	881a      	ldrh	r2, [r3, #0]
 80120e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80120ec:	3b64      	subs	r3, #100	; 0x64
 80120ee:	4611      	mov	r1, r2
 80120f0:	4618      	mov	r0, r3
 80120f2:	f002 fb9f 	bl	8014834 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 80120f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120fa:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80120fe:	881b      	ldrh	r3, [r3, #0]
 8012100:	2b01      	cmp	r3, #1
 8012102:	f040 85bd 	bne.w	8012c80 <create_DijkstraMap+0x1a64>
					if(Xcoordinate <= 13){
 8012106:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801210a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	2b0d      	cmp	r3, #13
 8012112:	f200 80ed 	bhi.w	80122f0 <create_DijkstraMap+0x10d4>
						if(Direction==SLANT_EAST){
 8012116:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801211a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801211e:	881b      	ldrh	r3, [r3, #0]
 8012120:	2b02      	cmp	r3, #2
 8012122:	d12f      	bne.n	8012184 <create_DijkstraMap+0xf68>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012124:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012128:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801212c:	881b      	ldrh	r3, [r3, #0]
 801212e:	3301      	adds	r3, #1
 8012130:	b29b      	uxth	r3, r3
 8012132:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012136:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801213a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801213c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012140:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012148:	2b04      	cmp	r3, #4
 801214a:	dd05      	ble.n	8012158 <create_DijkstraMap+0xf3c>
 801214c:	2304      	movs	r3, #4
 801214e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012152:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012156:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012158:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801215c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012160:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012164:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012168:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801216c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012170:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012174:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012178:	8013      	strh	r3, [r2, #0]
 801217a:	e013      	b.n	80121a4 <create_DijkstraMap+0xf88>
 801217c:	20000c30 	.word	0x20000c30
 8012180:	20000f24 	.word	0x20000f24
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012184:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012188:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801218c:	881b      	ldrh	r3, [r3, #0]
 801218e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012192:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012196:	8013      	strh	r3, [r2, #0]
 8012198:	2300      	movs	r3, #0
 801219a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801219e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80121a2:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80121a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121a8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121ac:	881b      	ldrh	r3, [r3, #0]
 80121ae:	3301      	adds	r3, #1
 80121b0:	4a6d      	ldr	r2, [pc, #436]	; (8012368 <create_DijkstraMap+0x114c>)
 80121b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121b6:	461a      	mov	r2, r3
 80121b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121bc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121c0:	881b      	ldrh	r3, [r3, #0]
 80121c2:	fa42 f303 	asr.w	r3, r2, r3
 80121c6:	f003 0301 	and.w	r3, r3, #1
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	f040 8090 	bne.w	80122f0 <create_DijkstraMap+0x10d4>
 80121d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121d8:	881a      	ldrh	r2, [r3, #0]
 80121da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121e2:	881b      	ldrh	r3, [r3, #0]
 80121e4:	1c59      	adds	r1, r3, #1
 80121e6:	4861      	ldr	r0, [pc, #388]	; (801236c <create_DijkstraMap+0x1150>)
 80121e8:	4613      	mov	r3, r2
 80121ea:	011b      	lsls	r3, r3, #4
 80121ec:	1a9b      	subs	r3, r3, r2
 80121ee:	440b      	add	r3, r1
 80121f0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80121f4:	461c      	mov	r4, r3
 80121f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121fa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80121fe:	881a      	ldrh	r2, [r3, #0]
 8012200:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012204:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012208:	8819      	ldrh	r1, [r3, #0]
 801220a:	4858      	ldr	r0, [pc, #352]	; (801236c <create_DijkstraMap+0x1150>)
 801220c:	4613      	mov	r3, r2
 801220e:	011b      	lsls	r3, r3, #4
 8012210:	1a9b      	subs	r3, r3, r2
 8012212:	440b      	add	r3, r1
 8012214:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012218:	461a      	mov	r2, r3
 801221a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801221e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012226:	4413      	add	r3, r2
 8012228:	429c      	cmp	r4, r3
 801222a:	dd61      	ble.n	80122f0 <create_DijkstraMap+0x10d4>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 801222c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012230:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012234:	881a      	ldrh	r2, [r3, #0]
 8012236:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801223a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801223e:	8819      	ldrh	r1, [r3, #0]
 8012240:	484a      	ldr	r0, [pc, #296]	; (801236c <create_DijkstraMap+0x1150>)
 8012242:	4613      	mov	r3, r2
 8012244:	011b      	lsls	r3, r3, #4
 8012246:	1a9b      	subs	r3, r3, r2
 8012248:	440b      	add	r3, r1
 801224a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801224e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012252:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801225c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012260:	8812      	ldrh	r2, [r2, #0]
 8012262:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012266:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801226a:	8809      	ldrh	r1, [r1, #0]
 801226c:	3101      	adds	r1, #1
 801226e:	4403      	add	r3, r0
 8012270:	b29c      	uxth	r4, r3
 8012272:	483e      	ldr	r0, [pc, #248]	; (801236c <create_DijkstraMap+0x1150>)
 8012274:	4613      	mov	r3, r2
 8012276:	011b      	lsls	r3, r3, #4
 8012278:	1a9b      	subs	r3, r3, r2
 801227a:	440b      	add	r3, r1
 801227c:	4622      	mov	r2, r4
 801227e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012282:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012286:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	3301      	adds	r3, #1
 801228e:	b29a      	uxth	r2, r3
 8012290:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012294:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012298:	4611      	mov	r1, r2
 801229a:	4618      	mov	r0, r3
 801229c:	f002 faca 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80122a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122a4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122a8:	881a      	ldrh	r2, [r3, #0]
 80122aa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80122ae:	f103 0320 	add.w	r3, r3, #32
 80122b2:	3b0c      	subs	r3, #12
 80122b4:	4611      	mov	r1, r2
 80122b6:	4618      	mov	r0, r3
 80122b8:	f002 fabc 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80122bc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80122c0:	3b14      	subs	r3, #20
 80122c2:	2101      	movs	r1, #1
 80122c4:	4618      	mov	r0, r3
 80122c6:	f002 fab5 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 80122ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80122ce:	3b3c      	subs	r3, #60	; 0x3c
 80122d0:	2102      	movs	r1, #2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f002 faae 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80122d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122dc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122e0:	881a      	ldrh	r2, [r3, #0]
 80122e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80122e6:	3b64      	subs	r3, #100	; 0x64
 80122e8:	4611      	mov	r1, r2
 80122ea:	4618      	mov	r0, r3
 80122ec:	f002 faa2 	bl	8014834 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80122f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122f4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122f8:	881b      	ldrh	r3, [r3, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	f000 80ee 	beq.w	80124dc <create_DijkstraMap+0x12c0>
						if(Direction==SLANT_WEST){
 8012300:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012304:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	2b06      	cmp	r3, #6
 801230c:	d130      	bne.n	8012370 <create_DijkstraMap+0x1154>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801230e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012312:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012316:	881b      	ldrh	r3, [r3, #0]
 8012318:	3301      	adds	r3, #1
 801231a:	b29b      	uxth	r3, r3
 801231c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012320:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012324:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012326:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801232a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801232e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012332:	2b04      	cmp	r3, #4
 8012334:	dd05      	ble.n	8012342 <create_DijkstraMap+0x1126>
 8012336:	2304      	movs	r3, #4
 8012338:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801233c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012340:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012342:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012346:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801234a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801234e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012352:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801235a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801235e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012362:	8013      	strh	r3, [r2, #0]
 8012364:	e014      	b.n	8012390 <create_DijkstraMap+0x1174>
 8012366:	bf00      	nop
 8012368:	20000c30 	.word	0x20000c30
 801236c:	20000f24 	.word	0x20000f24
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012370:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012374:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012378:	881b      	ldrh	r3, [r3, #0]
 801237a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801237e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012382:	8013      	strh	r3, [r2, #0]
 8012384:	2300      	movs	r3, #0
 8012386:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801238a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801238e:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012390:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012394:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	3b01      	subs	r3, #1
 801239c:	4a6d      	ldr	r2, [pc, #436]	; (8012554 <create_DijkstraMap+0x1338>)
 801239e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123a2:	461a      	mov	r2, r3
 80123a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123ac:	881b      	ldrh	r3, [r3, #0]
 80123ae:	fa42 f303 	asr.w	r3, r2, r3
 80123b2:	f003 0301 	and.w	r3, r3, #1
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	f040 8090 	bne.w	80124dc <create_DijkstraMap+0x12c0>
 80123bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123c0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123c4:	881a      	ldrh	r2, [r3, #0]
 80123c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ca:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123ce:	881b      	ldrh	r3, [r3, #0]
 80123d0:	1e59      	subs	r1, r3, #1
 80123d2:	4861      	ldr	r0, [pc, #388]	; (8012558 <create_DijkstraMap+0x133c>)
 80123d4:	4613      	mov	r3, r2
 80123d6:	011b      	lsls	r3, r3, #4
 80123d8:	1a9b      	subs	r3, r3, r2
 80123da:	440b      	add	r3, r1
 80123dc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80123e0:	461c      	mov	r4, r3
 80123e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123e6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123ea:	881a      	ldrh	r2, [r3, #0]
 80123ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123f4:	8819      	ldrh	r1, [r3, #0]
 80123f6:	4858      	ldr	r0, [pc, #352]	; (8012558 <create_DijkstraMap+0x133c>)
 80123f8:	4613      	mov	r3, r2
 80123fa:	011b      	lsls	r3, r3, #4
 80123fc:	1a9b      	subs	r3, r3, r2
 80123fe:	440b      	add	r3, r1
 8012400:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012404:	461a      	mov	r2, r3
 8012406:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801240a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801240e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012412:	4413      	add	r3, r2
 8012414:	429c      	cmp	r4, r3
 8012416:	dd61      	ble.n	80124dc <create_DijkstraMap+0x12c0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012418:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801241c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012420:	881a      	ldrh	r2, [r3, #0]
 8012422:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012426:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801242a:	8819      	ldrh	r1, [r3, #0]
 801242c:	484a      	ldr	r0, [pc, #296]	; (8012558 <create_DijkstraMap+0x133c>)
 801242e:	4613      	mov	r3, r2
 8012430:	011b      	lsls	r3, r3, #4
 8012432:	1a9b      	subs	r3, r3, r2
 8012434:	440b      	add	r3, r1
 8012436:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801243a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801243e:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012442:	881b      	ldrh	r3, [r3, #0]
 8012444:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012448:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801244c:	8812      	ldrh	r2, [r2, #0]
 801244e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012452:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012456:	8809      	ldrh	r1, [r1, #0]
 8012458:	3901      	subs	r1, #1
 801245a:	4403      	add	r3, r0
 801245c:	b29c      	uxth	r4, r3
 801245e:	483e      	ldr	r0, [pc, #248]	; (8012558 <create_DijkstraMap+0x133c>)
 8012460:	4613      	mov	r3, r2
 8012462:	011b      	lsls	r3, r3, #4
 8012464:	1a9b      	subs	r3, r3, r2
 8012466:	440b      	add	r3, r1
 8012468:	4622      	mov	r2, r4
 801246a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 801246e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012472:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012476:	881b      	ldrh	r3, [r3, #0]
 8012478:	3b01      	subs	r3, #1
 801247a:	b29a      	uxth	r2, r3
 801247c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012480:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012484:	4611      	mov	r1, r2
 8012486:	4618      	mov	r0, r3
 8012488:	f002 f9d4 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801248c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012490:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012494:	881a      	ldrh	r2, [r3, #0]
 8012496:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801249a:	f103 0320 	add.w	r3, r3, #32
 801249e:	3b0c      	subs	r3, #12
 80124a0:	4611      	mov	r1, r2
 80124a2:	4618      	mov	r0, r3
 80124a4:	f002 f9c6 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80124a8:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80124ac:	3b14      	subs	r3, #20
 80124ae:	2101      	movs	r1, #1
 80124b0:	4618      	mov	r0, r3
 80124b2:	f002 f9bf 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80124b6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80124ba:	3b3c      	subs	r3, #60	; 0x3c
 80124bc:	2106      	movs	r1, #6
 80124be:	4618      	mov	r0, r3
 80124c0:	f002 f9b8 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80124c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124c8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124cc:	881a      	ldrh	r2, [r3, #0]
 80124ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80124d2:	3b64      	subs	r3, #100	; 0x64
 80124d4:	4611      	mov	r1, r2
 80124d6:	4618      	mov	r0, r3
 80124d8:	f002 f9ac 	bl	8014834 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80124dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124e4:	881b      	ldrh	r3, [r3, #0]
 80124e6:	2b0e      	cmp	r3, #14
 80124e8:	f200 81de 	bhi.w	80128a8 <create_DijkstraMap+0x168c>
						if(Direction==SLANT_NORTH_WEST){
 80124ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124f0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80124f4:	881b      	ldrh	r3, [r3, #0]
 80124f6:	2b07      	cmp	r3, #7
 80124f8:	d130      	bne.n	801255c <create_DijkstraMap+0x1340>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80124fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124fe:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	3301      	adds	r3, #1
 8012506:	b29b      	uxth	r3, r3
 8012508:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801250c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012510:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012512:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012516:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801251a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801251e:	2b05      	cmp	r3, #5
 8012520:	dd05      	ble.n	801252e <create_DijkstraMap+0x1312>
 8012522:	2305      	movs	r3, #5
 8012524:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012528:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801252c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801252e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012532:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012536:	f9b3 2000 	ldrsh.w	r2, [r3]
 801253a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801253e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012542:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012546:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801254a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801254e:	8013      	strh	r3, [r2, #0]
 8012550:	e014      	b.n	801257c <create_DijkstraMap+0x1360>
 8012552:	bf00      	nop
 8012554:	20000c30 	.word	0x20000c30
 8012558:	20000f24 	.word	0x20000f24
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801255c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012560:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801256a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801256e:	8013      	strh	r3, [r2, #0]
 8012570:	2300      	movs	r3, #0
 8012572:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012576:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801257a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 801257c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012580:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	4a69      	ldr	r2, [pc, #420]	; (801272c <create_DijkstraMap+0x1510>)
 8012588:	330c      	adds	r3, #12
 801258a:	005b      	lsls	r3, r3, #1
 801258c:	4413      	add	r3, r2
 801258e:	88db      	ldrh	r3, [r3, #6]
 8012590:	461a      	mov	r2, r3
 8012592:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012596:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801259a:	881b      	ldrh	r3, [r3, #0]
 801259c:	fa42 f303 	asr.w	r3, r2, r3
 80125a0:	f003 0301 	and.w	r3, r3, #1
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	f040 808e 	bne.w	80126c6 <create_DijkstraMap+0x14aa>
 80125aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125b2:	881a      	ldrh	r2, [r3, #0]
 80125b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125bc:	8819      	ldrh	r1, [r3, #0]
 80125be:	485c      	ldr	r0, [pc, #368]	; (8012730 <create_DijkstraMap+0x1514>)
 80125c0:	4613      	mov	r3, r2
 80125c2:	011b      	lsls	r3, r3, #4
 80125c4:	1a9b      	subs	r3, r3, r2
 80125c6:	440b      	add	r3, r1
 80125c8:	33f0      	adds	r3, #240	; 0xf0
 80125ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125ce:	461c      	mov	r4, r3
 80125d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80125d8:	881a      	ldrh	r2, [r3, #0]
 80125da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125e2:	8819      	ldrh	r1, [r3, #0]
 80125e4:	4852      	ldr	r0, [pc, #328]	; (8012730 <create_DijkstraMap+0x1514>)
 80125e6:	4613      	mov	r3, r2
 80125e8:	011b      	lsls	r3, r3, #4
 80125ea:	1a9b      	subs	r3, r3, r2
 80125ec:	440b      	add	r3, r1
 80125ee:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125f2:	461a      	mov	r2, r3
 80125f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80125fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012600:	4413      	add	r3, r2
 8012602:	429c      	cmp	r4, r3
 8012604:	dd5f      	ble.n	80126c6 <create_DijkstraMap+0x14aa>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012606:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801260a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801260e:	881a      	ldrh	r2, [r3, #0]
 8012610:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012614:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012618:	8819      	ldrh	r1, [r3, #0]
 801261a:	4845      	ldr	r0, [pc, #276]	; (8012730 <create_DijkstraMap+0x1514>)
 801261c:	4613      	mov	r3, r2
 801261e:	011b      	lsls	r3, r3, #4
 8012620:	1a9b      	subs	r3, r3, r2
 8012622:	440b      	add	r3, r1
 8012624:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012628:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801262c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012630:	881b      	ldrh	r3, [r3, #0]
 8012632:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012636:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801263a:	8812      	ldrh	r2, [r2, #0]
 801263c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012640:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012644:	8809      	ldrh	r1, [r1, #0]
 8012646:	4403      	add	r3, r0
 8012648:	b29c      	uxth	r4, r3
 801264a:	4839      	ldr	r0, [pc, #228]	; (8012730 <create_DijkstraMap+0x1514>)
 801264c:	4613      	mov	r3, r2
 801264e:	011b      	lsls	r3, r3, #4
 8012650:	1a9b      	subs	r3, r3, r2
 8012652:	440b      	add	r3, r1
 8012654:	33f0      	adds	r3, #240	; 0xf0
 8012656:	4622      	mov	r2, r4
 8012658:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 801265c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012660:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012664:	881a      	ldrh	r2, [r3, #0]
 8012666:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801266a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801266e:	4611      	mov	r1, r2
 8012670:	4618      	mov	r0, r3
 8012672:	f002 f8df 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012676:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801267a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801267e:	881a      	ldrh	r2, [r3, #0]
 8012680:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012684:	f103 0320 	add.w	r3, r3, #32
 8012688:	3b0c      	subs	r3, #12
 801268a:	4611      	mov	r1, r2
 801268c:	4618      	mov	r0, r3
 801268e:	f002 f8d1 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012692:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012696:	3b14      	subs	r3, #20
 8012698:	2100      	movs	r1, #0
 801269a:	4618      	mov	r0, r3
 801269c:	f002 f8ca 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80126a0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80126a4:	3b3c      	subs	r3, #60	; 0x3c
 80126a6:	2107      	movs	r1, #7
 80126a8:	4618      	mov	r0, r3
 80126aa:	f002 f8c3 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80126ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126b6:	881a      	ldrh	r2, [r3, #0]
 80126b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80126bc:	3b64      	subs	r3, #100	; 0x64
 80126be:	4611      	mov	r1, r2
 80126c0:	4618      	mov	r0, r3
 80126c2:	f002 f8b7 	bl	8014834 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 80126c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ca:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80126ce:	881b      	ldrh	r3, [r3, #0]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d12f      	bne.n	8012734 <create_DijkstraMap+0x1518>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80126d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126d8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80126dc:	881b      	ldrh	r3, [r3, #0]
 80126de:	3301      	adds	r3, #1
 80126e0:	b29b      	uxth	r3, r3
 80126e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126e6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126ea:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80126ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126f0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126f8:	2b05      	cmp	r3, #5
 80126fa:	dd05      	ble.n	8012708 <create_DijkstraMap+0x14ec>
 80126fc:	2305      	movs	r3, #5
 80126fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012702:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012706:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012708:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801270c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012710:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012714:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012718:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801271c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012720:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012724:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012728:	8013      	strh	r3, [r2, #0]
 801272a:	e013      	b.n	8012754 <create_DijkstraMap+0x1538>
 801272c:	20000c30 	.word	0x20000c30
 8012730:	20000f24 	.word	0x20000f24
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012734:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012738:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801273c:	881b      	ldrh	r3, [r3, #0]
 801273e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012742:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012746:	8013      	strh	r3, [r2, #0]
 8012748:	2300      	movs	r3, #0
 801274a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801274e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012752:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012754:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012758:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	4a70      	ldr	r2, [pc, #448]	; (8012920 <create_DijkstraMap+0x1704>)
 8012760:	330c      	adds	r3, #12
 8012762:	005b      	lsls	r3, r3, #1
 8012764:	4413      	add	r3, r2
 8012766:	88db      	ldrh	r3, [r3, #6]
 8012768:	461a      	mov	r2, r3
 801276a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801276e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012772:	881b      	ldrh	r3, [r3, #0]
 8012774:	3301      	adds	r3, #1
 8012776:	fa42 f303 	asr.w	r3, r2, r3
 801277a:	f003 0301 	and.w	r3, r3, #1
 801277e:	2b00      	cmp	r3, #0
 8012780:	f040 8092 	bne.w	80128a8 <create_DijkstraMap+0x168c>
 8012784:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012788:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	1c5a      	adds	r2, r3, #1
 8012790:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012794:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012798:	8819      	ldrh	r1, [r3, #0]
 801279a:	4862      	ldr	r0, [pc, #392]	; (8012924 <create_DijkstraMap+0x1708>)
 801279c:	4613      	mov	r3, r2
 801279e:	011b      	lsls	r3, r3, #4
 80127a0:	1a9b      	subs	r3, r3, r2
 80127a2:	440b      	add	r3, r1
 80127a4:	33f0      	adds	r3, #240	; 0xf0
 80127a6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127aa:	461c      	mov	r4, r3
 80127ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127b4:	881a      	ldrh	r2, [r3, #0]
 80127b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127be:	8819      	ldrh	r1, [r3, #0]
 80127c0:	4858      	ldr	r0, [pc, #352]	; (8012924 <create_DijkstraMap+0x1708>)
 80127c2:	4613      	mov	r3, r2
 80127c4:	011b      	lsls	r3, r3, #4
 80127c6:	1a9b      	subs	r3, r3, r2
 80127c8:	440b      	add	r3, r1
 80127ca:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127ce:	461a      	mov	r2, r3
 80127d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127d4:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80127d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127dc:	4413      	add	r3, r2
 80127de:	429c      	cmp	r4, r3
 80127e0:	dd62      	ble.n	80128a8 <create_DijkstraMap+0x168c>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80127e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127e6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127ea:	881a      	ldrh	r2, [r3, #0]
 80127ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127f4:	8819      	ldrh	r1, [r3, #0]
 80127f6:	484b      	ldr	r0, [pc, #300]	; (8012924 <create_DijkstraMap+0x1708>)
 80127f8:	4613      	mov	r3, r2
 80127fa:	011b      	lsls	r3, r3, #4
 80127fc:	1a9b      	subs	r3, r3, r2
 80127fe:	440b      	add	r3, r1
 8012800:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012804:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012808:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801280c:	881b      	ldrh	r3, [r3, #0]
 801280e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012812:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012816:	8812      	ldrh	r2, [r2, #0]
 8012818:	3201      	adds	r2, #1
 801281a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801281e:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012822:	8809      	ldrh	r1, [r1, #0]
 8012824:	4403      	add	r3, r0
 8012826:	b29c      	uxth	r4, r3
 8012828:	483e      	ldr	r0, [pc, #248]	; (8012924 <create_DijkstraMap+0x1708>)
 801282a:	4613      	mov	r3, r2
 801282c:	011b      	lsls	r3, r3, #4
 801282e:	1a9b      	subs	r3, r3, r2
 8012830:	440b      	add	r3, r1
 8012832:	33f0      	adds	r3, #240	; 0xf0
 8012834:	4622      	mov	r2, r4
 8012836:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801283a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801283e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012842:	881b      	ldrh	r3, [r3, #0]
 8012844:	3301      	adds	r3, #1
 8012846:	b29a      	uxth	r2, r3
 8012848:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801284c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012850:	4611      	mov	r1, r2
 8012852:	4618      	mov	r0, r3
 8012854:	f001 ffee 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012858:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801285c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012860:	881a      	ldrh	r2, [r3, #0]
 8012862:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012866:	f103 0320 	add.w	r3, r3, #32
 801286a:	3b0c      	subs	r3, #12
 801286c:	4611      	mov	r1, r2
 801286e:	4618      	mov	r0, r3
 8012870:	f001 ffe0 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012874:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012878:	3b14      	subs	r3, #20
 801287a:	2100      	movs	r1, #0
 801287c:	4618      	mov	r0, r3
 801287e:	f001 ffd9 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012882:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012886:	3b3c      	subs	r3, #60	; 0x3c
 8012888:	2101      	movs	r1, #1
 801288a:	4618      	mov	r0, r3
 801288c:	f001 ffd2 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012890:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012894:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012898:	881a      	ldrh	r2, [r3, #0]
 801289a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801289e:	3b64      	subs	r3, #100	; 0x64
 80128a0:	4611      	mov	r1, r2
 80128a2:	4618      	mov	r0, r3
 80128a4:	f001 ffc6 	bl	8014834 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 80128a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128ac:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128b0:	881b      	ldrh	r3, [r3, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	f000 81e4 	beq.w	8012c80 <create_DijkstraMap+0x1a64>
						if(Direction==SLANT_SOUTH_WEST){
 80128b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128bc:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80128c0:	881b      	ldrh	r3, [r3, #0]
 80128c2:	2b05      	cmp	r3, #5
 80128c4:	d130      	bne.n	8012928 <create_DijkstraMap+0x170c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80128c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128ca:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80128ce:	881b      	ldrh	r3, [r3, #0]
 80128d0:	3301      	adds	r3, #1
 80128d2:	b29b      	uxth	r3, r3
 80128d4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128d8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128dc:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80128de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128e2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80128e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128ea:	2b05      	cmp	r3, #5
 80128ec:	dd05      	ble.n	80128fa <create_DijkstraMap+0x16de>
 80128ee:	2305      	movs	r3, #5
 80128f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128f4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128f8:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80128fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128fe:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012902:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012906:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801290a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801290e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012912:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012916:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801291a:	8013      	strh	r3, [r2, #0]
 801291c:	e014      	b.n	8012948 <create_DijkstraMap+0x172c>
 801291e:	bf00      	nop
 8012920:	20000c30 	.word	0x20000c30
 8012924:	20000f24 	.word	0x20000f24
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012928:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801292c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012930:	881b      	ldrh	r3, [r3, #0]
 8012932:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012936:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801293a:	8013      	strh	r3, [r2, #0]
 801293c:	2300      	movs	r3, #0
 801293e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012942:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012946:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012948:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801294c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012950:	881b      	ldrh	r3, [r3, #0]
 8012952:	3b01      	subs	r3, #1
 8012954:	4ad4      	ldr	r2, [pc, #848]	; (8012ca8 <create_DijkstraMap+0x1a8c>)
 8012956:	330c      	adds	r3, #12
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	4413      	add	r3, r2
 801295c:	88db      	ldrh	r3, [r3, #6]
 801295e:	461a      	mov	r2, r3
 8012960:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012964:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012968:	881b      	ldrh	r3, [r3, #0]
 801296a:	fa42 f303 	asr.w	r3, r2, r3
 801296e:	f003 0301 	and.w	r3, r3, #1
 8012972:	2b00      	cmp	r3, #0
 8012974:	f040 8092 	bne.w	8012a9c <create_DijkstraMap+0x1880>
 8012978:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801297c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012980:	881a      	ldrh	r2, [r3, #0]
 8012982:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012986:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801298a:	881b      	ldrh	r3, [r3, #0]
 801298c:	1e59      	subs	r1, r3, #1
 801298e:	48c7      	ldr	r0, [pc, #796]	; (8012cac <create_DijkstraMap+0x1a90>)
 8012990:	4613      	mov	r3, r2
 8012992:	011b      	lsls	r3, r3, #4
 8012994:	1a9b      	subs	r3, r3, r2
 8012996:	440b      	add	r3, r1
 8012998:	33f0      	adds	r3, #240	; 0xf0
 801299a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801299e:	461c      	mov	r4, r3
 80129a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129a4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129a8:	881a      	ldrh	r2, [r3, #0]
 80129aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ae:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129b2:	8819      	ldrh	r1, [r3, #0]
 80129b4:	48bd      	ldr	r0, [pc, #756]	; (8012cac <create_DijkstraMap+0x1a90>)
 80129b6:	4613      	mov	r3, r2
 80129b8:	011b      	lsls	r3, r3, #4
 80129ba:	1a9b      	subs	r3, r3, r2
 80129bc:	440b      	add	r3, r1
 80129be:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80129c2:	461a      	mov	r2, r3
 80129c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129c8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80129cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129d0:	4413      	add	r3, r2
 80129d2:	429c      	cmp	r4, r3
 80129d4:	dd62      	ble.n	8012a9c <create_DijkstraMap+0x1880>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80129d6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129da:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129de:	881a      	ldrh	r2, [r3, #0]
 80129e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129e4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129e8:	8819      	ldrh	r1, [r3, #0]
 80129ea:	48b0      	ldr	r0, [pc, #704]	; (8012cac <create_DijkstraMap+0x1a90>)
 80129ec:	4613      	mov	r3, r2
 80129ee:	011b      	lsls	r3, r3, #4
 80129f0:	1a9b      	subs	r3, r3, r2
 80129f2:	440b      	add	r3, r1
 80129f4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80129f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129fc:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012a00:	881b      	ldrh	r3, [r3, #0]
 8012a02:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a06:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012a0a:	8812      	ldrh	r2, [r2, #0]
 8012a0c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012a10:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012a14:	8809      	ldrh	r1, [r1, #0]
 8012a16:	3901      	subs	r1, #1
 8012a18:	4403      	add	r3, r0
 8012a1a:	b29c      	uxth	r4, r3
 8012a1c:	48a3      	ldr	r0, [pc, #652]	; (8012cac <create_DijkstraMap+0x1a90>)
 8012a1e:	4613      	mov	r3, r2
 8012a20:	011b      	lsls	r3, r3, #4
 8012a22:	1a9b      	subs	r3, r3, r2
 8012a24:	440b      	add	r3, r1
 8012a26:	33f0      	adds	r3, #240	; 0xf0
 8012a28:	4622      	mov	r2, r4
 8012a2a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012a2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a32:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a36:	881a      	ldrh	r2, [r3, #0]
 8012a38:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012a3c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012a40:	4611      	mov	r1, r2
 8012a42:	4618      	mov	r0, r3
 8012a44:	f001 fef6 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012a48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a4c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a50:	881b      	ldrh	r3, [r3, #0]
 8012a52:	3b01      	subs	r3, #1
 8012a54:	b29a      	uxth	r2, r3
 8012a56:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012a5a:	f103 0320 	add.w	r3, r3, #32
 8012a5e:	3b0c      	subs	r3, #12
 8012a60:	4611      	mov	r1, r2
 8012a62:	4618      	mov	r0, r3
 8012a64:	f001 fee6 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012a68:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012a6c:	3b14      	subs	r3, #20
 8012a6e:	2100      	movs	r1, #0
 8012a70:	4618      	mov	r0, r3
 8012a72:	f001 fedf 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012a76:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012a7a:	3b3c      	subs	r3, #60	; 0x3c
 8012a7c:	2105      	movs	r1, #5
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f001 fed8 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012a84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a88:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a8c:	881a      	ldrh	r2, [r3, #0]
 8012a8e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012a92:	3b64      	subs	r3, #100	; 0x64
 8012a94:	4611      	mov	r1, r2
 8012a96:	4618      	mov	r0, r3
 8012a98:	f001 fecc 	bl	8014834 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012a9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aa0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012aa4:	881b      	ldrh	r3, [r3, #0]
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	d12b      	bne.n	8012b02 <create_DijkstraMap+0x18e6>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012aaa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aae:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	b29b      	uxth	r3, r3
 8012ab8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012abc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ac0:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012ac2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ace:	2b05      	cmp	r3, #5
 8012ad0:	dd05      	ble.n	8012ade <create_DijkstraMap+0x18c2>
 8012ad2:	2305      	movs	r3, #5
 8012ad4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ad8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012adc:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012ade:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ae2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ae6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012aea:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012aee:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012af2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012af6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012afa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012afe:	8013      	strh	r3, [r2, #0]
 8012b00:	e00f      	b.n	8012b22 <create_DijkstraMap+0x1906>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012b02:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012b06:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012b0a:	881b      	ldrh	r3, [r3, #0]
 8012b0c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b10:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012b14:	8013      	strh	r3, [r2, #0]
 8012b16:	2300      	movs	r3, #0
 8012b18:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b1c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012b20:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012b22:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b26:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b2a:	881b      	ldrh	r3, [r3, #0]
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	4a5e      	ldr	r2, [pc, #376]	; (8012ca8 <create_DijkstraMap+0x1a8c>)
 8012b30:	330c      	adds	r3, #12
 8012b32:	005b      	lsls	r3, r3, #1
 8012b34:	4413      	add	r3, r2
 8012b36:	88db      	ldrh	r3, [r3, #6]
 8012b38:	461a      	mov	r2, r3
 8012b3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b3e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b42:	881b      	ldrh	r3, [r3, #0]
 8012b44:	3301      	adds	r3, #1
 8012b46:	fa42 f303 	asr.w	r3, r2, r3
 8012b4a:	f003 0301 	and.w	r3, r3, #1
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	f040 8096 	bne.w	8012c80 <create_DijkstraMap+0x1a64>
 8012b54:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b58:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b5c:	881b      	ldrh	r3, [r3, #0]
 8012b5e:	1c5a      	adds	r2, r3, #1
 8012b60:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b64:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	1e59      	subs	r1, r3, #1
 8012b6c:	484f      	ldr	r0, [pc, #316]	; (8012cac <create_DijkstraMap+0x1a90>)
 8012b6e:	4613      	mov	r3, r2
 8012b70:	011b      	lsls	r3, r3, #4
 8012b72:	1a9b      	subs	r3, r3, r2
 8012b74:	440b      	add	r3, r1
 8012b76:	33f0      	adds	r3, #240	; 0xf0
 8012b78:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b7c:	461c      	mov	r4, r3
 8012b7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b82:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b86:	881a      	ldrh	r2, [r3, #0]
 8012b88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b8c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b90:	8819      	ldrh	r1, [r3, #0]
 8012b92:	4846      	ldr	r0, [pc, #280]	; (8012cac <create_DijkstraMap+0x1a90>)
 8012b94:	4613      	mov	r3, r2
 8012b96:	011b      	lsls	r3, r3, #4
 8012b98:	1a9b      	subs	r3, r3, r2
 8012b9a:	440b      	add	r3, r1
 8012b9c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ba6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bae:	4413      	add	r3, r2
 8012bb0:	429c      	cmp	r4, r3
 8012bb2:	dd65      	ble.n	8012c80 <create_DijkstraMap+0x1a64>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012bb4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bb8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012bbc:	881a      	ldrh	r2, [r3, #0]
 8012bbe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bc2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012bc6:	8819      	ldrh	r1, [r3, #0]
 8012bc8:	4838      	ldr	r0, [pc, #224]	; (8012cac <create_DijkstraMap+0x1a90>)
 8012bca:	4613      	mov	r3, r2
 8012bcc:	011b      	lsls	r3, r3, #4
 8012bce:	1a9b      	subs	r3, r3, r2
 8012bd0:	440b      	add	r3, r1
 8012bd2:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012bd6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bda:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012bde:	881b      	ldrh	r3, [r3, #0]
 8012be0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012be4:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012be8:	8812      	ldrh	r2, [r2, #0]
 8012bea:	3201      	adds	r2, #1
 8012bec:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012bf0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012bf4:	8809      	ldrh	r1, [r1, #0]
 8012bf6:	3901      	subs	r1, #1
 8012bf8:	4403      	add	r3, r0
 8012bfa:	b29c      	uxth	r4, r3
 8012bfc:	482b      	ldr	r0, [pc, #172]	; (8012cac <create_DijkstraMap+0x1a90>)
 8012bfe:	4613      	mov	r3, r2
 8012c00:	011b      	lsls	r3, r3, #4
 8012c02:	1a9b      	subs	r3, r3, r2
 8012c04:	440b      	add	r3, r1
 8012c06:	33f0      	adds	r3, #240	; 0xf0
 8012c08:	4622      	mov	r2, r4
 8012c0a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8012c0e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c12:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c16:	881b      	ldrh	r3, [r3, #0]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	b29a      	uxth	r2, r3
 8012c1c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012c20:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012c24:	4611      	mov	r1, r2
 8012c26:	4618      	mov	r0, r3
 8012c28:	f001 fe04 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8012c2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c30:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c34:	881b      	ldrh	r3, [r3, #0]
 8012c36:	3b01      	subs	r3, #1
 8012c38:	b29a      	uxth	r2, r3
 8012c3a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012c3e:	f103 0320 	add.w	r3, r3, #32
 8012c42:	3b0c      	subs	r3, #12
 8012c44:	4611      	mov	r1, r2
 8012c46:	4618      	mov	r0, r3
 8012c48:	f001 fdf4 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012c4c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012c50:	3b14      	subs	r3, #20
 8012c52:	2100      	movs	r1, #0
 8012c54:	4618      	mov	r0, r3
 8012c56:	f001 fded 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012c5a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012c5e:	3b3c      	subs	r3, #60	; 0x3c
 8012c60:	2103      	movs	r1, #3
 8012c62:	4618      	mov	r0, r3
 8012c64:	f001 fde6 	bl	8014834 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012c68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c6c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c70:	881a      	ldrh	r2, [r3, #0]
 8012c72:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012c76:	3b64      	subs	r3, #100	; 0x64
 8012c78:	4611      	mov	r1, r2
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f001 fdda 	bl	8014834 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8012c80:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c84:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8012c88:	881b      	ldrh	r3, [r3, #0]
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c90:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8012c94:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8012c96:	f7fe bc0e 	b.w	80114b6 <create_DijkstraMap+0x29a>

		}



}
 8012c9a:	bf00      	nop
 8012c9c:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8012ca0:	3704      	adds	r7, #4
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd90      	pop	{r4, r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	20000c30 	.word	0x20000c30
 8012cac:	20000f24 	.word	0x20000f24

08012cb0 <route_Dijkstra>:





void route_Dijkstra(void){
 8012cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cb2:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8012cb6:	b089      	sub	sp, #36	; 0x24
 8012cb8:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8012cba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cbe:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012cc2:	4618      	mov	r0, r3
 8012cc4:	f001 fda6 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_y);
 8012cc8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012ccc:	f103 0310 	add.w	r3, r3, #16
 8012cd0:	3b1c      	subs	r3, #28
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f001 fd9e 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_matrix);
 8012cd8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012cdc:	f103 0310 	add.w	r3, r3, #16
 8012ce0:	3b04      	subs	r3, #4
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f001 fd96 	bl	8014814 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8012ce8:	48be      	ldr	r0, [pc, #760]	; (8012fe4 <route_Dijkstra+0x334>)
 8012cea:	f001 fd93 	bl	8014814 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8012cee:	48be      	ldr	r0, [pc, #760]	; (8012fe8 <route_Dijkstra+0x338>)
 8012cf0:	f001 fd90 	bl	8014814 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8012cf4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012cfc:	2100      	movs	r1, #0
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f001 fd98 	bl	8014834 <pushStack_walk>
 8012d04:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012d08:	f103 0310 	add.w	r3, r3, #16
 8012d0c:	3b1c      	subs	r3, #28
 8012d0e:	2100      	movs	r1, #0
 8012d10:	4618      	mov	r0, r3
 8012d12:	f001 fd8f 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8012d16:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012d1a:	f103 0310 	add.w	r3, r3, #16
 8012d1e:	3b04      	subs	r3, #4
 8012d20:	2100      	movs	r1, #0
 8012d22:	4618      	mov	r0, r3
 8012d24:	f001 fd86 	bl	8014834 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8012d28:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012d2c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012d30:	2200      	movs	r2, #0
 8012d32:	601a      	str	r2, [r3, #0]
	int y = 0;
 8012d34:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012d38:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8012d40:	2301      	movs	r3, #1
 8012d42:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8012d46:	f102 020c 	add.w	r2, r2, #12
 8012d4a:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8012d4c:	f107 0110 	add.w	r1, r7, #16
 8012d50:	390c      	subs	r1, #12
 8012d52:	f107 0310 	add.w	r3, r7, #16
 8012d56:	3b08      	subs	r3, #8
 8012d58:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8012d5c:	f102 020c 	add.w	r2, r2, #12
 8012d60:	6812      	ldr	r2, [r2, #0]
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7fa ff54 	bl	800dc10 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8012d68:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012d6c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	2b05      	cmp	r3, #5
 8012d74:	d006      	beq.n	8012d84 <route_Dijkstra+0xd4>
 8012d76:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012d7a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	2b06      	cmp	r3, #6
 8012d82:	d10f      	bne.n	8012da4 <route_Dijkstra+0xf4>
 8012d84:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012d88:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	2b04      	cmp	r3, #4
 8012d90:	f000 8331 	beq.w	80133f6 <route_Dijkstra+0x746>
 8012d94:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012d98:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	2b05      	cmp	r3, #5
 8012da0:	f000 8329 	beq.w	80133f6 <route_Dijkstra+0x746>
					break;
		}


		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8012da4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012da8:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012dac:	6819      	ldr	r1, [r3, #0]
 8012dae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012db2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012db6:	681c      	ldr	r4, [r3, #0]
 8012db8:	f107 0310 	add.w	r3, r7, #16
 8012dbc:	3b04      	subs	r3, #4
 8012dbe:	f107 0210 	add.w	r2, r7, #16
 8012dc2:	3a02      	subs	r2, #2
 8012dc4:	f107 0610 	add.w	r6, r7, #16
 8012dc8:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8012dcc:	387e      	subs	r0, #126	; 0x7e
 8012dce:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8012dd2:	f105 050c 	add.w	r5, r5, #12
 8012dd6:	682d      	ldr	r5, [r5, #0]
 8012dd8:	9502      	str	r5, [sp, #8]
 8012dda:	9401      	str	r4, [sp, #4]
 8012ddc:	9100      	str	r1, [sp, #0]
 8012dde:	4631      	mov	r1, r6
 8012de0:	f7fe f982 	bl	80110e8 <search_AroundDijkstraCount>
		//get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
		//if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8012de4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012de8:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8012dec:	881b      	ldrh	r3, [r3, #0]
 8012dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012df2:	4293      	cmp	r3, r2
 8012df4:	d11b      	bne.n	8012e2e <route_Dijkstra+0x17e>
 8012df6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012dfa:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8012dfe:	881b      	ldrh	r3, [r3, #0]
 8012e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d112      	bne.n	8012e2e <route_Dijkstra+0x17e>
 8012e08:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e0c:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d109      	bne.n	8012e2e <route_Dijkstra+0x17e>
 8012e1a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e1e:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8012e22:	881b      	ldrh	r3, [r3, #0]
 8012e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	f000 82e3 	beq.w	80133f4 <route_Dijkstra+0x744>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8012e2e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e32:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8012e36:	881a      	ldrh	r2, [r3, #0]
 8012e38:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e3c:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8012e40:	881b      	ldrh	r3, [r3, #0]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	f200 80d2 	bhi.w	8012fec <route_Dijkstra+0x33c>
 8012e48:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e4c:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8012e50:	881a      	ldrh	r2, [r3, #0]
 8012e52:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e56:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8012e5a:	881b      	ldrh	r3, [r3, #0]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	f200 80c5 	bhi.w	8012fec <route_Dijkstra+0x33c>
 8012e62:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e66:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8012e6a:	881a      	ldrh	r2, [r3, #0]
 8012e6c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012e70:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	f200 80b8 	bhi.w	8012fec <route_Dijkstra+0x33c>
			// 直進
			switch (direction) {		//
 8012e7c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8012e80:	f103 030c 	add.w	r3, r3, #12
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	3b01      	subs	r3, #1
 8012e88:	2b03      	cmp	r3, #3
 8012e8a:	f200 80b0 	bhi.w	8012fee <route_Dijkstra+0x33e>
 8012e8e:	a201      	add	r2, pc, #4	; (adr r2, 8012e94 <route_Dijkstra+0x1e4>)
 8012e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e94:	08012ea5 	.word	0x08012ea5
 8012e98:	08012ef3 	.word	0x08012ef3
 8012e9c:	08012f41 	.word	0x08012f41
 8012ea0:	08012f93 	.word	0x08012f93
			case 1:
				pushStack_walk(&stack_x,x);
 8012ea4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012ea8:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eb4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012eb8:	4611      	mov	r1, r2
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f001 fcba 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8012ec0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012ec4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	b29a      	uxth	r2, r3
 8012ecc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012ed0:	f103 0310 	add.w	r3, r3, #16
 8012ed4:	3b1c      	subs	r3, #28
 8012ed6:	4611      	mov	r1, r2
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f001 fcab 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8012ede:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012ee2:	f103 0310 	add.w	r3, r3, #16
 8012ee6:	3b04      	subs	r3, #4
 8012ee8:	2100      	movs	r1, #0
 8012eea:	4618      	mov	r0, r3
 8012eec:	f001 fca2 	bl	8014834 <pushStack_walk>
				break;
 8012ef0:	e07d      	b.n	8012fee <route_Dijkstra+0x33e>
			case 2:
				pushStack_walk(&stack_x,x);
 8012ef2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012ef6:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f02:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012f06:	4611      	mov	r1, r2
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f001 fc93 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8012f0e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f12:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012f1e:	f103 0310 	add.w	r3, r3, #16
 8012f22:	3b1c      	subs	r3, #28
 8012f24:	4611      	mov	r1, r2
 8012f26:	4618      	mov	r0, r3
 8012f28:	f001 fc84 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8012f2c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012f30:	f103 0310 	add.w	r3, r3, #16
 8012f34:	3b04      	subs	r3, #4
 8012f36:	2101      	movs	r1, #1
 8012f38:	4618      	mov	r0, r3
 8012f3a:	f001 fc7b 	bl	8014834 <pushStack_walk>
				break;
 8012f3e:	e056      	b.n	8012fee <route_Dijkstra+0x33e>
			case 3:
				pushStack_walk(&stack_x,x);
 8012f40:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f44:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f50:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012f54:	4611      	mov	r1, r2
 8012f56:	4618      	mov	r0, r3
 8012f58:	f001 fc6c 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8012f5c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f60:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	3b01      	subs	r3, #1
 8012f6a:	b29a      	uxth	r2, r3
 8012f6c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012f70:	f103 0310 	add.w	r3, r3, #16
 8012f74:	3b1c      	subs	r3, #28
 8012f76:	4611      	mov	r1, r2
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f001 fc5b 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8012f7e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012f82:	f103 0310 	add.w	r3, r3, #16
 8012f86:	3b04      	subs	r3, #4
 8012f88:	2100      	movs	r1, #0
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	f001 fc52 	bl	8014834 <pushStack_walk>
				break;
 8012f90:	e02d      	b.n	8012fee <route_Dijkstra+0x33e>
			case 4:
				pushStack_walk(&stack_x,x-1);
 8012f92:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012f96:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	b29b      	uxth	r3, r3
 8012f9e:	3b01      	subs	r3, #1
 8012fa0:	b29a      	uxth	r2, r3
 8012fa2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fa6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8012faa:	4611      	mov	r1, r2
 8012fac:	4618      	mov	r0, r3
 8012fae:	f001 fc41 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8012fb2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012fb6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	b29a      	uxth	r2, r3
 8012fbe:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8012fc2:	f103 0310 	add.w	r3, r3, #16
 8012fc6:	3b1c      	subs	r3, #28
 8012fc8:	4611      	mov	r1, r2
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f001 fc32 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8012fd0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012fd4:	f103 0310 	add.w	r3, r3, #16
 8012fd8:	3b04      	subs	r3, #4
 8012fda:	2101      	movs	r1, #1
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f001 fc29 	bl	8014834 <pushStack_walk>
				break;
 8012fe2:	e004      	b.n	8012fee <route_Dijkstra+0x33e>
 8012fe4:	200012e4 	.word	0x200012e4
 8012fe8:	2000228c 	.word	0x2000228c
			}

		}
 8012fec:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8012fee:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012ff2:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8012ff6:	881a      	ldrh	r2, [r3, #0]
 8012ff8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8012ffc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	429a      	cmp	r2, r3
 8013004:	f080 80d9 	bcs.w	80131ba <route_Dijkstra+0x50a>
 8013008:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801300c:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013010:	881a      	ldrh	r2, [r3, #0]
 8013012:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013016:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801301a:	881b      	ldrh	r3, [r3, #0]
 801301c:	429a      	cmp	r2, r3
 801301e:	f200 80cc 	bhi.w	80131ba <route_Dijkstra+0x50a>
 8013022:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013026:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801302a:	881a      	ldrh	r2, [r3, #0]
 801302c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013030:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013034:	881b      	ldrh	r3, [r3, #0]
 8013036:	429a      	cmp	r2, r3
 8013038:	f200 80bf 	bhi.w	80131ba <route_Dijkstra+0x50a>
			// 右旋回
			switch (direction) {		//
 801303c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013040:	f103 030c 	add.w	r3, r3, #12
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	3b01      	subs	r3, #1
 8013048:	2b03      	cmp	r3, #3
 801304a:	f200 80ab 	bhi.w	80131a4 <route_Dijkstra+0x4f4>
 801304e:	a201      	add	r2, pc, #4	; (adr r2, 8013054 <route_Dijkstra+0x3a4>)
 8013050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013054:	08013065 	.word	0x08013065
 8013058:	080130b3 	.word	0x080130b3
 801305c:	08013105 	.word	0x08013105
 8013060:	08013157 	.word	0x08013157
			case 1:
				pushStack_walk(&stack_x,x);
 8013064:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013068:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	b29a      	uxth	r2, r3
 8013070:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013074:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013078:	4611      	mov	r1, r2
 801307a:	4618      	mov	r0, r3
 801307c:	f001 fbda 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013080:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013084:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	b29a      	uxth	r2, r3
 801308c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013090:	f103 0310 	add.w	r3, r3, #16
 8013094:	3b1c      	subs	r3, #28
 8013096:	4611      	mov	r1, r2
 8013098:	4618      	mov	r0, r3
 801309a:	f001 fbcb 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801309e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80130a2:	f103 0310 	add.w	r3, r3, #16
 80130a6:	3b04      	subs	r3, #4
 80130a8:	2101      	movs	r1, #1
 80130aa:	4618      	mov	r0, r3
 80130ac:	f001 fbc2 	bl	8014834 <pushStack_walk>
				break;
 80130b0:	e078      	b.n	80131a4 <route_Dijkstra+0x4f4>
			case 2:
				pushStack_walk(&stack_x,x);
 80130b2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130b6:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	b29a      	uxth	r2, r3
 80130be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130c2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80130c6:	4611      	mov	r1, r2
 80130c8:	4618      	mov	r0, r3
 80130ca:	f001 fbb3 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80130ce:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80130d2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	b29b      	uxth	r3, r3
 80130da:	3b01      	subs	r3, #1
 80130dc:	b29a      	uxth	r2, r3
 80130de:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80130e2:	f103 0310 	add.w	r3, r3, #16
 80130e6:	3b1c      	subs	r3, #28
 80130e8:	4611      	mov	r1, r2
 80130ea:	4618      	mov	r0, r3
 80130ec:	f001 fba2 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80130f0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80130f4:	f103 0310 	add.w	r3, r3, #16
 80130f8:	3b04      	subs	r3, #4
 80130fa:	2100      	movs	r1, #0
 80130fc:	4618      	mov	r0, r3
 80130fe:	f001 fb99 	bl	8014834 <pushStack_walk>
				break;
 8013102:	e04f      	b.n	80131a4 <route_Dijkstra+0x4f4>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013104:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013108:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	b29b      	uxth	r3, r3
 8013110:	3b01      	subs	r3, #1
 8013112:	b29a      	uxth	r2, r3
 8013114:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013118:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801311c:	4611      	mov	r1, r2
 801311e:	4618      	mov	r0, r3
 8013120:	f001 fb88 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013124:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013128:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	b29a      	uxth	r2, r3
 8013130:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013134:	f103 0310 	add.w	r3, r3, #16
 8013138:	3b1c      	subs	r3, #28
 801313a:	4611      	mov	r1, r2
 801313c:	4618      	mov	r0, r3
 801313e:	f001 fb79 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013142:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013146:	f103 0310 	add.w	r3, r3, #16
 801314a:	3b04      	subs	r3, #4
 801314c:	2101      	movs	r1, #1
 801314e:	4618      	mov	r0, r3
 8013150:	f001 fb70 	bl	8014834 <pushStack_walk>
				break;
 8013154:	e026      	b.n	80131a4 <route_Dijkstra+0x4f4>
			case 4:
				pushStack_walk(&stack_x,x);
 8013156:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801315a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	b29a      	uxth	r2, r3
 8013162:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013166:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801316a:	4611      	mov	r1, r2
 801316c:	4618      	mov	r0, r3
 801316e:	f001 fb61 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013172:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013176:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	b29a      	uxth	r2, r3
 801317e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013182:	f103 0310 	add.w	r3, r3, #16
 8013186:	3b1c      	subs	r3, #28
 8013188:	4611      	mov	r1, r2
 801318a:	4618      	mov	r0, r3
 801318c:	f001 fb52 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013190:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013194:	f103 0310 	add.w	r3, r3, #16
 8013198:	3b04      	subs	r3, #4
 801319a:	2100      	movs	r1, #0
 801319c:	4618      	mov	r0, r3
 801319e:	f001 fb49 	bl	8014834 <pushStack_walk>
				break;
 80131a2:	bf00      	nop
			}
			direction++;
 80131a4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80131a8:	f103 030c 	add.w	r3, r3, #12
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	3301      	adds	r3, #1
 80131b0:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80131b4:	f102 020c 	add.w	r2, r2, #12
 80131b8:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80131ba:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131be:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80131c2:	881a      	ldrh	r2, [r3, #0]
 80131c4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131c8:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80131cc:	881b      	ldrh	r3, [r3, #0]
 80131ce:	429a      	cmp	r2, r3
 80131d0:	f080 80d9 	bcs.w	8013386 <route_Dijkstra+0x6d6>
 80131d4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131d8:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80131dc:	881a      	ldrh	r2, [r3, #0]
 80131de:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131e2:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 80131e6:	881b      	ldrh	r3, [r3, #0]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	f080 80cc 	bcs.w	8013386 <route_Dijkstra+0x6d6>
 80131ee:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131f2:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 80131f6:	881a      	ldrh	r2, [r3, #0]
 80131f8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131fc:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013200:	881b      	ldrh	r3, [r3, #0]
 8013202:	429a      	cmp	r2, r3
 8013204:	f200 80bf 	bhi.w	8013386 <route_Dijkstra+0x6d6>
			// 左旋回
			switch (direction) {		//
 8013208:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801320c:	f103 030c 	add.w	r3, r3, #12
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	3b01      	subs	r3, #1
 8013214:	2b03      	cmp	r3, #3
 8013216:	f200 80ab 	bhi.w	8013370 <route_Dijkstra+0x6c0>
 801321a:	a201      	add	r2, pc, #4	; (adr r2, 8013220 <route_Dijkstra+0x570>)
 801321c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013220:	08013231 	.word	0x08013231
 8013224:	08013283 	.word	0x08013283
 8013228:	080132d1 	.word	0x080132d1
 801322c:	0801331f 	.word	0x0801331f
			case 1:
				pushStack_walk(&stack_x,x-1);
 8013230:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013234:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	b29b      	uxth	r3, r3
 801323c:	3b01      	subs	r3, #1
 801323e:	b29a      	uxth	r2, r3
 8013240:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013244:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013248:	4611      	mov	r1, r2
 801324a:	4618      	mov	r0, r3
 801324c:	f001 faf2 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013250:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013254:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013258:	681b      	ldr	r3, [r3, #0]
 801325a:	b29a      	uxth	r2, r3
 801325c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013260:	f103 0310 	add.w	r3, r3, #16
 8013264:	3b1c      	subs	r3, #28
 8013266:	4611      	mov	r1, r2
 8013268:	4618      	mov	r0, r3
 801326a:	f001 fae3 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801326e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013272:	f103 0310 	add.w	r3, r3, #16
 8013276:	3b04      	subs	r3, #4
 8013278:	2101      	movs	r1, #1
 801327a:	4618      	mov	r0, r3
 801327c:	f001 fada 	bl	8014834 <pushStack_walk>
				break;
 8013280:	e076      	b.n	8013370 <route_Dijkstra+0x6c0>
			case 2:
				pushStack_walk(&stack_x,x);
 8013282:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013286:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	b29a      	uxth	r2, r3
 801328e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013292:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013296:	4611      	mov	r1, r2
 8013298:	4618      	mov	r0, r3
 801329a:	f001 facb 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801329e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132a2:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	b29a      	uxth	r2, r3
 80132aa:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80132ae:	f103 0310 	add.w	r3, r3, #16
 80132b2:	3b1c      	subs	r3, #28
 80132b4:	4611      	mov	r1, r2
 80132b6:	4618      	mov	r0, r3
 80132b8:	f001 fabc 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80132bc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80132c0:	f103 0310 	add.w	r3, r3, #16
 80132c4:	3b04      	subs	r3, #4
 80132c6:	2100      	movs	r1, #0
 80132c8:	4618      	mov	r0, r3
 80132ca:	f001 fab3 	bl	8014834 <pushStack_walk>
				break;
 80132ce:	e04f      	b.n	8013370 <route_Dijkstra+0x6c0>
			case 3:
				pushStack_walk(&stack_x,x);
 80132d0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132d4:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	b29a      	uxth	r2, r3
 80132dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132e0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80132e4:	4611      	mov	r1, r2
 80132e6:	4618      	mov	r0, r3
 80132e8:	f001 faa4 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80132ec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132f0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80132fc:	f103 0310 	add.w	r3, r3, #16
 8013300:	3b1c      	subs	r3, #28
 8013302:	4611      	mov	r1, r2
 8013304:	4618      	mov	r0, r3
 8013306:	f001 fa95 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801330a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801330e:	f103 0310 	add.w	r3, r3, #16
 8013312:	3b04      	subs	r3, #4
 8013314:	2101      	movs	r1, #1
 8013316:	4618      	mov	r0, r3
 8013318:	f001 fa8c 	bl	8014834 <pushStack_walk>
				break;
 801331c:	e028      	b.n	8013370 <route_Dijkstra+0x6c0>
			case 4:
				pushStack_walk(&stack_x,x);
 801331e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013322:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	b29a      	uxth	r2, r3
 801332a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801332e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013332:	4611      	mov	r1, r2
 8013334:	4618      	mov	r0, r3
 8013336:	f001 fa7d 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801333a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801333e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	b29b      	uxth	r3, r3
 8013346:	3b01      	subs	r3, #1
 8013348:	b29a      	uxth	r2, r3
 801334a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801334e:	f103 0310 	add.w	r3, r3, #16
 8013352:	3b1c      	subs	r3, #28
 8013354:	4611      	mov	r1, r2
 8013356:	4618      	mov	r0, r3
 8013358:	f001 fa6c 	bl	8014834 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801335c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013360:	f103 0310 	add.w	r3, r3, #16
 8013364:	3b04      	subs	r3, #4
 8013366:	2100      	movs	r1, #0
 8013368:	4618      	mov	r0, r3
 801336a:	f001 fa63 	bl	8014834 <pushStack_walk>
				break;
 801336e:	bf00      	nop
			}
			direction--;
 8013370:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013374:	f103 030c 	add.w	r3, r3, #12
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	3b01      	subs	r3, #1
 801337c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013380:	f102 020c 	add.w	r2, r2, #12
 8013384:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 8013386:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801338a:	f103 030c 	add.w	r3, r3, #12
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	2b05      	cmp	r3, #5
 8013392:	d105      	bne.n	80133a0 <route_Dijkstra+0x6f0>
			direction = 1;
 8013394:	2301      	movs	r3, #1
 8013396:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801339a:	f102 020c 	add.w	r2, r2, #12
 801339e:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80133a0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133a4:	f103 030c 	add.w	r3, r3, #12
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2b06      	cmp	r3, #6
 80133ac:	d105      	bne.n	80133ba <route_Dijkstra+0x70a>
			direction = 2;
 80133ae:	2302      	movs	r3, #2
 80133b0:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80133b4:	f102 020c 	add.w	r2, r2, #12
 80133b8:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 80133ba:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133be:	f103 030c 	add.w	r3, r3, #12
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d105      	bne.n	80133d4 <route_Dijkstra+0x724>
			direction = 4;
 80133c8:	2304      	movs	r3, #4
 80133ca:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80133ce:	f102 020c 	add.w	r2, r2, #12
 80133d2:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 80133d4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133d8:	f103 030c 	add.w	r3, r3, #12
 80133dc:	681b      	ldr	r3, [r3, #0]
 80133de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133e2:	f47f acb3 	bne.w	8012d4c <route_Dijkstra+0x9c>
			direction = 3;
 80133e6:	2303      	movs	r3, #3
 80133e8:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80133ec:	f102 020c 	add.w	r2, r2, #12
 80133f0:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 80133f2:	e4ab      	b.n	8012d4c <route_Dijkstra+0x9c>
			break;
 80133f4:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 80133f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133fa:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80133fe:	4618      	mov	r0, r3
 8013400:	f001 fa42 	bl	8014888 <popStack_walk>
 8013404:	4603      	mov	r3, r0
 8013406:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801340a:	f102 020a 	add.w	r2, r2, #10
 801340e:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8013410:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013414:	f103 0310 	add.w	r3, r3, #16
 8013418:	3b1c      	subs	r3, #28
 801341a:	4618      	mov	r0, r3
 801341c:	f001 fa34 	bl	8014888 <popStack_walk>
 8013420:	4603      	mov	r3, r0
 8013422:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013426:	f102 0208 	add.w	r2, r2, #8
 801342a:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 801342c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013430:	f103 0310 	add.w	r3, r3, #16
 8013434:	3b04      	subs	r3, #4
 8013436:	4618      	mov	r0, r3
 8013438:	f001 fa26 	bl	8014888 <popStack_walk>
 801343c:	4603      	mov	r3, r0
 801343e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013442:	f102 0206 	add.w	r2, r2, #6
 8013446:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013448:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801344c:	f103 030a 	add.w	r3, r3, #10
 8013450:	881b      	ldrh	r3, [r3, #0]
 8013452:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013456:	4293      	cmp	r3, r2
 8013458:	f000 80d5 	beq.w	8013606 <route_Dijkstra+0x956>
 801345c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013460:	f103 0308 	add.w	r3, r3, #8
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801346a:	4293      	cmp	r3, r2
 801346c:	f000 80cb 	beq.w	8013606 <route_Dijkstra+0x956>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8013470:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013474:	f103 0306 	add.w	r3, r3, #6
 8013478:	881b      	ldrh	r3, [r3, #0]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d15c      	bne.n	8013538 <route_Dijkstra+0x888>
 801347e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013482:	f103 0308 	add.w	r3, r3, #8
 8013486:	881b      	ldrh	r3, [r3, #0]
 8013488:	4a62      	ldr	r2, [pc, #392]	; (8013614 <route_Dijkstra+0x964>)
 801348a:	332c      	adds	r3, #44	; 0x2c
 801348c:	005b      	lsls	r3, r3, #1
 801348e:	4413      	add	r3, r2
 8013490:	885b      	ldrh	r3, [r3, #2]
 8013492:	461a      	mov	r2, r3
 8013494:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013498:	f103 030a 	add.w	r3, r3, #10
 801349c:	881b      	ldrh	r3, [r3, #0]
 801349e:	fa42 f303 	asr.w	r3, r2, r3
 80134a2:	f003 0301 	and.w	r3, r3, #1
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d146      	bne.n	8013538 <route_Dijkstra+0x888>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80134aa:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80134ae:	f103 030a 	add.w	r3, r3, #10
 80134b2:	881a      	ldrh	r2, [r3, #0]
 80134b4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80134b8:	f103 0308 	add.w	r3, r3, #8
 80134bc:	881b      	ldrh	r3, [r3, #0]
 80134be:	4956      	ldr	r1, [pc, #344]	; (8013618 <route_Dijkstra+0x968>)
 80134c0:	0112      	lsls	r2, r2, #4
 80134c2:	4413      	add	r3, r2
 80134c4:	2200      	movs	r2, #0
 80134c6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 80134ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80134ce:	f103 030a 	add.w	r3, r3, #10
 80134d2:	881a      	ldrh	r2, [r3, #0]
 80134d4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80134d8:	f103 0308 	add.w	r3, r3, #8
 80134dc:	881b      	ldrh	r3, [r3, #0]
 80134de:	3301      	adds	r3, #1
 80134e0:	494d      	ldr	r1, [pc, #308]	; (8013618 <route_Dijkstra+0x968>)
 80134e2:	0112      	lsls	r2, r2, #4
 80134e4:	4413      	add	r3, r2
 80134e6:	2200      	movs	r2, #0
 80134e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80134ec:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80134f0:	f103 030a 	add.w	r3, r3, #10
 80134f4:	881b      	ldrh	r3, [r3, #0]
 80134f6:	4619      	mov	r1, r3
 80134f8:	4848      	ldr	r0, [pc, #288]	; (801361c <route_Dijkstra+0x96c>)
 80134fa:	f001 f99b 	bl	8014834 <pushStack_walk>
 80134fe:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013502:	f103 0308 	add.w	r3, r3, #8
 8013506:	881b      	ldrh	r3, [r3, #0]
 8013508:	4619      	mov	r1, r3
 801350a:	4845      	ldr	r0, [pc, #276]	; (8013620 <route_Dijkstra+0x970>)
 801350c:	f001 f992 	bl	8014834 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013510:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013514:	f103 030a 	add.w	r3, r3, #10
 8013518:	881b      	ldrh	r3, [r3, #0]
 801351a:	4619      	mov	r1, r3
 801351c:	483f      	ldr	r0, [pc, #252]	; (801361c <route_Dijkstra+0x96c>)
 801351e:	f001 f989 	bl	8014834 <pushStack_walk>
 8013522:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013526:	f103 0308 	add.w	r3, r3, #8
 801352a:	881b      	ldrh	r3, [r3, #0]
 801352c:	3301      	adds	r3, #1
 801352e:	b29b      	uxth	r3, r3
 8013530:	4619      	mov	r1, r3
 8013532:	483b      	ldr	r0, [pc, #236]	; (8013620 <route_Dijkstra+0x970>)
 8013534:	f001 f97e 	bl	8014834 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013538:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801353c:	f103 0306 	add.w	r3, r3, #6
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	2b01      	cmp	r3, #1
 8013544:	f47f af57 	bne.w	80133f6 <route_Dijkstra+0x746>
 8013548:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801354c:	f103 030a 	add.w	r3, r3, #10
 8013550:	881b      	ldrh	r3, [r3, #0]
 8013552:	4a30      	ldr	r2, [pc, #192]	; (8013614 <route_Dijkstra+0x964>)
 8013554:	331c      	adds	r3, #28
 8013556:	005b      	lsls	r3, r3, #1
 8013558:	4413      	add	r3, r2
 801355a:	889b      	ldrh	r3, [r3, #4]
 801355c:	461a      	mov	r2, r3
 801355e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013562:	f103 0308 	add.w	r3, r3, #8
 8013566:	881b      	ldrh	r3, [r3, #0]
 8013568:	fa42 f303 	asr.w	r3, r2, r3
 801356c:	f003 0301 	and.w	r3, r3, #1
 8013570:	2b00      	cmp	r3, #0
 8013572:	f47f af40 	bne.w	80133f6 <route_Dijkstra+0x746>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8013576:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801357a:	f103 030a 	add.w	r3, r3, #10
 801357e:	881a      	ldrh	r2, [r3, #0]
 8013580:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013584:	f103 0308 	add.w	r3, r3, #8
 8013588:	881b      	ldrh	r3, [r3, #0]
 801358a:	4923      	ldr	r1, [pc, #140]	; (8013618 <route_Dijkstra+0x968>)
 801358c:	0112      	lsls	r2, r2, #4
 801358e:	4413      	add	r3, r2
 8013590:	2200      	movs	r2, #0
 8013592:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8013596:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801359a:	f103 030a 	add.w	r3, r3, #10
 801359e:	881b      	ldrh	r3, [r3, #0]
 80135a0:	1c5a      	adds	r2, r3, #1
 80135a2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135a6:	f103 0308 	add.w	r3, r3, #8
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	491a      	ldr	r1, [pc, #104]	; (8013618 <route_Dijkstra+0x968>)
 80135ae:	0112      	lsls	r2, r2, #4
 80135b0:	4413      	add	r3, r2
 80135b2:	2200      	movs	r2, #0
 80135b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80135b8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135bc:	f103 030a 	add.w	r3, r3, #10
 80135c0:	881b      	ldrh	r3, [r3, #0]
 80135c2:	4619      	mov	r1, r3
 80135c4:	4815      	ldr	r0, [pc, #84]	; (801361c <route_Dijkstra+0x96c>)
 80135c6:	f001 f935 	bl	8014834 <pushStack_walk>
 80135ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135ce:	f103 0308 	add.w	r3, r3, #8
 80135d2:	881b      	ldrh	r3, [r3, #0]
 80135d4:	4619      	mov	r1, r3
 80135d6:	4812      	ldr	r0, [pc, #72]	; (8013620 <route_Dijkstra+0x970>)
 80135d8:	f001 f92c 	bl	8014834 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 80135dc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135e0:	f103 030a 	add.w	r3, r3, #10
 80135e4:	881b      	ldrh	r3, [r3, #0]
 80135e6:	3301      	adds	r3, #1
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	4619      	mov	r1, r3
 80135ec:	480b      	ldr	r0, [pc, #44]	; (801361c <route_Dijkstra+0x96c>)
 80135ee:	f001 f921 	bl	8014834 <pushStack_walk>
 80135f2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80135f6:	f103 0308 	add.w	r3, r3, #8
 80135fa:	881b      	ldrh	r3, [r3, #0]
 80135fc:	4619      	mov	r1, r3
 80135fe:	4808      	ldr	r0, [pc, #32]	; (8013620 <route_Dijkstra+0x970>)
 8013600:	f001 f918 	bl	8014834 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013604:	e6f7      	b.n	80133f6 <route_Dijkstra+0x746>
			}
	}


}
 8013606:	bf00      	nop
 8013608:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 801360c:	3714      	adds	r7, #20
 801360e:	46bd      	mov	sp, r7
 8013610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013612:	bf00      	nop
 8013614:	20000c30 	.word	0x20000c30
 8013618:	20000d24 	.word	0x20000d24
 801361c:	200012e4 	.word	0x200012e4
 8013620:	2000228c 	.word	0x2000228c

08013624 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013624:	b580      	push	{r7, lr}
 8013626:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801362a:	b082      	sub	sp, #8
 801362c:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801362e:	2300      	movs	r3, #0
 8013630:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013634:	f102 0207 	add.w	r2, r2, #7
 8013638:	7013      	strb	r3, [r2, #0]
 801363a:	e033      	b.n	80136a4 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 801363c:	2300      	movs	r3, #0
 801363e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013642:	f102 0206 	add.w	r2, r2, #6
 8013646:	7013      	strb	r3, [r2, #0]
 8013648:	e01a      	b.n	8013680 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 801364a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801364e:	f103 0307 	add.w	r3, r3, #7
 8013652:	781a      	ldrb	r2, [r3, #0]
 8013654:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013658:	f103 0306 	add.w	r3, r3, #6
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	4966      	ldr	r1, [pc, #408]	; (80137f8 <create_StepCountMap_unknown+0x1d4>)
 8013660:	0112      	lsls	r2, r2, #4
 8013662:	4413      	add	r3, r2
 8013664:	22ff      	movs	r2, #255	; 0xff
 8013666:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 801366a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801366e:	f103 0306 	add.w	r3, r3, #6
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	3301      	adds	r3, #1
 8013676:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801367a:	f102 0206 	add.w	r2, r2, #6
 801367e:	7013      	strb	r3, [r2, #0]
 8013680:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013684:	f103 0306 	add.w	r3, r3, #6
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	2b0f      	cmp	r3, #15
 801368c:	d9dd      	bls.n	801364a <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 801368e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013692:	f103 0307 	add.w	r3, r3, #7
 8013696:	781b      	ldrb	r3, [r3, #0]
 8013698:	3301      	adds	r3, #1
 801369a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801369e:	f102 0207 	add.w	r2, r2, #7
 80136a2:	7013      	strb	r3, [r2, #0]
 80136a4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80136a8:	f103 0307 	add.w	r3, r3, #7
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	2b0f      	cmp	r3, #15
 80136b0:	d9c4      	bls.n	801363c <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 80136b2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80136b6:	4618      	mov	r0, r3
 80136b8:	f001 f8ac 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_y);
 80136bc:	f107 0308 	add.w	r3, r7, #8
 80136c0:	3b04      	subs	r3, #4
 80136c2:	4618      	mov	r0, r3
 80136c4:	f001 f8a6 	bl	8014814 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 80136c8:	484c      	ldr	r0, [pc, #304]	; (80137fc <create_StepCountMap_unknown+0x1d8>)
 80136ca:	f001 f8dd 	bl	8014888 <popStack_walk>
 80136ce:	4603      	mov	r3, r0
 80136d0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80136d4:	f102 021a 	add.w	r2, r2, #26
 80136d8:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 80136da:	4849      	ldr	r0, [pc, #292]	; (8013800 <create_StepCountMap_unknown+0x1dc>)
 80136dc:	f001 f8d4 	bl	8014888 <popStack_walk>
 80136e0:	4603      	mov	r3, r0
 80136e2:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80136e6:	f102 0218 	add.w	r2, r2, #24
 80136ea:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 80136ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80136f0:	f103 031a 	add.w	r3, r3, #26
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136fa:	4293      	cmp	r3, r2
 80136fc:	d030      	beq.n	8013760 <create_StepCountMap_unknown+0x13c>
 80136fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013702:	f103 0318 	add.w	r3, r3, #24
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801370c:	4293      	cmp	r3, r2
 801370e:	d027      	beq.n	8013760 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8013710:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013714:	f103 031a 	add.w	r3, r3, #26
 8013718:	881a      	ldrh	r2, [r3, #0]
 801371a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801371e:	f103 0318 	add.w	r3, r3, #24
 8013722:	881b      	ldrh	r3, [r3, #0]
 8013724:	4934      	ldr	r1, [pc, #208]	; (80137f8 <create_StepCountMap_unknown+0x1d4>)
 8013726:	0112      	lsls	r2, r2, #4
 8013728:	4413      	add	r3, r2
 801372a:	2200      	movs	r2, #0
 801372c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013730:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013734:	f103 031a 	add.w	r3, r3, #26
 8013738:	881a      	ldrh	r2, [r3, #0]
 801373a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801373e:	4611      	mov	r1, r2
 8013740:	4618      	mov	r0, r3
 8013742:	f001 f877 	bl	8014834 <pushStack_walk>
 8013746:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801374a:	f103 0318 	add.w	r3, r3, #24
 801374e:	881a      	ldrh	r2, [r3, #0]
 8013750:	f107 0308 	add.w	r3, r7, #8
 8013754:	3b04      	subs	r3, #4
 8013756:	4611      	mov	r1, r2
 8013758:	4618      	mov	r0, r3
 801375a:	f001 f86b 	bl	8014834 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 801375e:	e7b3      	b.n	80136c8 <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013760:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013764:	f103 0308 	add.w	r3, r3, #8
 8013768:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 801376c:	685a      	ldr	r2, [r3, #4]
 801376e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013772:	f103 0308 	add.w	r3, r3, #8
 8013776:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 801377a:	681b      	ldr	r3, [r3, #0]
 801377c:	429a      	cmp	r2, r3
 801377e:	d11b      	bne.n	80137b8 <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013780:	4b1d      	ldr	r3, [pc, #116]	; (80137f8 <create_StepCountMap_unknown+0x1d4>)
 8013782:	2200      	movs	r2, #0
 8013784:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013786:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801378a:	2100      	movs	r1, #0
 801378c:	4618      	mov	r0, r3
 801378e:	f001 f851 	bl	8014834 <pushStack_walk>
 8013792:	f107 0308 	add.w	r3, r7, #8
 8013796:	3b04      	subs	r3, #4
 8013798:	2100      	movs	r1, #0
 801379a:	4618      	mov	r0, r3
 801379c:	f001 f84a 	bl	8014834 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 80137a0:	4b18      	ldr	r3, [pc, #96]	; (8013804 <create_StepCountMap_unknown+0x1e0>)
 80137a2:	781b      	ldrb	r3, [r3, #0]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d003      	beq.n	80137b0 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 80137a8:	4b16      	ldr	r3, [pc, #88]	; (8013804 <create_StepCountMap_unknown+0x1e0>)
 80137aa:	2202      	movs	r2, #2
 80137ac:	701a      	strb	r2, [r3, #0]
 80137ae:	e006      	b.n	80137be <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 80137b0:	4b14      	ldr	r3, [pc, #80]	; (8013804 <create_StepCountMap_unknown+0x1e0>)
 80137b2:	2201      	movs	r2, #1
 80137b4:	701a      	strb	r2, [r3, #0]
 80137b6:	e002      	b.n	80137be <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 80137b8:	4b12      	ldr	r3, [pc, #72]	; (8013804 <create_StepCountMap_unknown+0x1e0>)
 80137ba:	2200      	movs	r2, #0
 80137bc:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80137be:	2301      	movs	r3, #1
 80137c0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80137c4:	f102 0204 	add.w	r2, r2, #4
 80137c8:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80137ca:	2301      	movs	r3, #1
 80137cc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80137d0:	f102 0202 	add.w	r2, r2, #2
 80137d4:	8013      	strh	r3, [r2, #0]
 80137d6:	2301      	movs	r3, #1
 80137d8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80137dc:	8013      	strh	r3, [r2, #0]
 80137de:	2301      	movs	r3, #1
 80137e0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80137e4:	f102 021e 	add.w	r2, r2, #30
 80137e8:	8013      	strh	r3, [r2, #0]
 80137ea:	2301      	movs	r3, #1
 80137ec:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80137f0:	f102 021c 	add.w	r2, r2, #28
 80137f4:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80137f6:	e23b      	b.n	8013c70 <create_StepCountMap_unknown+0x64c>
 80137f8:	20000d24 	.word	0x20000d24
 80137fc:	200012e4 	.word	0x200012e4
 8013800:	2000228c 	.word	0x2000228c
 8013804:	20000d20 	.word	0x20000d20

		Xcoordinate = popStack_walk(&stack_x);
 8013808:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801380c:	4618      	mov	r0, r3
 801380e:	f001 f83b 	bl	8014888 <popStack_walk>
 8013812:	4603      	mov	r3, r0
 8013814:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013818:	f102 0216 	add.w	r2, r2, #22
 801381c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801381e:	f107 0308 	add.w	r3, r7, #8
 8013822:	3b04      	subs	r3, #4
 8013824:	4618      	mov	r0, r3
 8013826:	f001 f82f 	bl	8014888 <popStack_walk>
 801382a:	4603      	mov	r3, r0
 801382c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013830:	f102 0214 	add.w	r2, r2, #20
 8013834:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013836:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801383a:	f103 0316 	add.w	r3, r3, #22
 801383e:	881b      	ldrh	r3, [r3, #0]
 8013840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013844:	4293      	cmp	r3, r2
 8013846:	f000 821b 	beq.w	8013c80 <create_StepCountMap_unknown+0x65c>
 801384a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801384e:	f103 0314 	add.w	r3, r3, #20
 8013852:	881b      	ldrh	r3, [r3, #0]
 8013854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013858:	4293      	cmp	r3, r2
 801385a:	f000 8211 	beq.w	8013c80 <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 801385e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013862:	f103 0314 	add.w	r3, r3, #20
 8013866:	881b      	ldrh	r3, [r3, #0]
 8013868:	2b0e      	cmp	r3, #14
 801386a:	d81a      	bhi.n	80138a2 <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 801386c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013870:	f103 0314 	add.w	r3, r3, #20
 8013874:	881b      	ldrh	r3, [r3, #0]
 8013876:	4ac4      	ldr	r2, [pc, #784]	; (8013b88 <create_StepCountMap_unknown+0x564>)
 8013878:	330c      	adds	r3, #12
 801387a:	005b      	lsls	r3, r3, #1
 801387c:	4413      	add	r3, r2
 801387e:	88db      	ldrh	r3, [r3, #6]
 8013880:	b21a      	sxth	r2, r3
 8013882:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013886:	f103 0316 	add.w	r3, r3, #22
 801388a:	881b      	ldrh	r3, [r3, #0]
 801388c:	2101      	movs	r1, #1
 801388e:	fa01 f303 	lsl.w	r3, r1, r3
 8013892:	b21b      	sxth	r3, r3
 8013894:	4013      	ands	r3, r2
 8013896:	b21b      	sxth	r3, r3
 8013898:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801389c:	f102 0202 	add.w	r2, r2, #2
 80138a0:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80138a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138a6:	f103 0314 	add.w	r3, r3, #20
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d019      	beq.n	80138e4 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80138b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138b4:	f103 0314 	add.w	r3, r3, #20
 80138b8:	881b      	ldrh	r3, [r3, #0]
 80138ba:	3b01      	subs	r3, #1
 80138bc:	4ab2      	ldr	r2, [pc, #712]	; (8013b88 <create_StepCountMap_unknown+0x564>)
 80138be:	330c      	adds	r3, #12
 80138c0:	005b      	lsls	r3, r3, #1
 80138c2:	4413      	add	r3, r2
 80138c4:	88db      	ldrh	r3, [r3, #6]
 80138c6:	b21a      	sxth	r2, r3
 80138c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138cc:	f103 0316 	add.w	r3, r3, #22
 80138d0:	881b      	ldrh	r3, [r3, #0]
 80138d2:	2101      	movs	r1, #1
 80138d4:	fa01 f303 	lsl.w	r3, r1, r3
 80138d8:	b21b      	sxth	r3, r3
 80138da:	4013      	ands	r3, r2
 80138dc:	b21b      	sxth	r3, r3
 80138de:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80138e2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80138e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138e8:	f103 0316 	add.w	r3, r3, #22
 80138ec:	881b      	ldrh	r3, [r3, #0]
 80138ee:	2b0e      	cmp	r3, #14
 80138f0:	d818      	bhi.n	8013924 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80138f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80138f6:	f103 0316 	add.w	r3, r3, #22
 80138fa:	881b      	ldrh	r3, [r3, #0]
 80138fc:	4aa2      	ldr	r2, [pc, #648]	; (8013b88 <create_StepCountMap_unknown+0x564>)
 80138fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013902:	b21a      	sxth	r2, r3
 8013904:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013908:	f103 0314 	add.w	r3, r3, #20
 801390c:	881b      	ldrh	r3, [r3, #0]
 801390e:	2101      	movs	r1, #1
 8013910:	fa01 f303 	lsl.w	r3, r1, r3
 8013914:	b21b      	sxth	r3, r3
 8013916:	4013      	ands	r3, r2
 8013918:	b21b      	sxth	r3, r3
 801391a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801391e:	f102 021e 	add.w	r2, r2, #30
 8013922:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013924:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013928:	f103 0316 	add.w	r3, r3, #22
 801392c:	881b      	ldrh	r3, [r3, #0]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d019      	beq.n	8013966 <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013932:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013936:	f103 0316 	add.w	r3, r3, #22
 801393a:	881b      	ldrh	r3, [r3, #0]
 801393c:	3b01      	subs	r3, #1
 801393e:	4a92      	ldr	r2, [pc, #584]	; (8013b88 <create_StepCountMap_unknown+0x564>)
 8013940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013944:	b21a      	sxth	r2, r3
 8013946:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801394a:	f103 0314 	add.w	r3, r3, #20
 801394e:	881b      	ldrh	r3, [r3, #0]
 8013950:	2101      	movs	r1, #1
 8013952:	fa01 f303 	lsl.w	r3, r1, r3
 8013956:	b21b      	sxth	r3, r3
 8013958:	4013      	ands	r3, r2
 801395a:	b21b      	sxth	r3, r3
 801395c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013960:	f102 021c 	add.w	r2, r2, #28
 8013964:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013966:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801396a:	f103 0316 	add.w	r3, r3, #22
 801396e:	881a      	ldrh	r2, [r3, #0]
 8013970:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013974:	f103 0314 	add.w	r3, r3, #20
 8013978:	881b      	ldrh	r3, [r3, #0]
 801397a:	3301      	adds	r3, #1
 801397c:	4983      	ldr	r1, [pc, #524]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 801397e:	0112      	lsls	r2, r2, #4
 8013980:	4413      	add	r3, r2
 8013982:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013986:	2bff      	cmp	r3, #255	; 0xff
 8013988:	d148      	bne.n	8013a1c <create_StepCountMap_unknown+0x3f8>
 801398a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801398e:	f103 0314 	add.w	r3, r3, #20
 8013992:	881b      	ldrh	r3, [r3, #0]
 8013994:	2b0f      	cmp	r3, #15
 8013996:	d041      	beq.n	8013a1c <create_StepCountMap_unknown+0x3f8>
 8013998:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801399c:	f103 0302 	add.w	r3, r3, #2
 80139a0:	881b      	ldrh	r3, [r3, #0]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d13a      	bne.n	8013a1c <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80139a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80139aa:	f103 0316 	add.w	r3, r3, #22
 80139ae:	881a      	ldrh	r2, [r3, #0]
 80139b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80139b4:	f103 0314 	add.w	r3, r3, #20
 80139b8:	881b      	ldrh	r3, [r3, #0]
 80139ba:	4974      	ldr	r1, [pc, #464]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 80139bc:	0112      	lsls	r2, r2, #4
 80139be:	4413      	add	r3, r2
 80139c0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80139c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80139c8:	f103 0316 	add.w	r3, r3, #22
 80139cc:	881a      	ldrh	r2, [r3, #0]
 80139ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80139d2:	f103 0314 	add.w	r3, r3, #20
 80139d6:	881b      	ldrh	r3, [r3, #0]
 80139d8:	3301      	adds	r3, #1
 80139da:	3101      	adds	r1, #1
 80139dc:	b288      	uxth	r0, r1
 80139de:	496b      	ldr	r1, [pc, #428]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 80139e0:	0112      	lsls	r2, r2, #4
 80139e2:	4413      	add	r3, r2
 80139e4:	4602      	mov	r2, r0
 80139e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80139ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80139ee:	f103 0316 	add.w	r3, r3, #22
 80139f2:	881a      	ldrh	r2, [r3, #0]
 80139f4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80139f8:	4611      	mov	r1, r2
 80139fa:	4618      	mov	r0, r3
 80139fc:	f000 ff1a 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013a00:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a04:	f103 0314 	add.w	r3, r3, #20
 8013a08:	881b      	ldrh	r3, [r3, #0]
 8013a0a:	3301      	adds	r3, #1
 8013a0c:	b29a      	uxth	r2, r3
 8013a0e:	f107 0308 	add.w	r3, r7, #8
 8013a12:	3b04      	subs	r3, #4
 8013a14:	4611      	mov	r1, r2
 8013a16:	4618      	mov	r0, r3
 8013a18:	f000 ff0c 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013a1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a20:	f103 0316 	add.w	r3, r3, #22
 8013a24:	881a      	ldrh	r2, [r3, #0]
 8013a26:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a2a:	f103 0314 	add.w	r3, r3, #20
 8013a2e:	881b      	ldrh	r3, [r3, #0]
 8013a30:	3b01      	subs	r3, #1
 8013a32:	4956      	ldr	r1, [pc, #344]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 8013a34:	0112      	lsls	r2, r2, #4
 8013a36:	4413      	add	r3, r2
 8013a38:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013a3c:	2bff      	cmp	r3, #255	; 0xff
 8013a3e:	d146      	bne.n	8013ace <create_StepCountMap_unknown+0x4aa>
 8013a40:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a44:	f103 0314 	add.w	r3, r3, #20
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d03f      	beq.n	8013ace <create_StepCountMap_unknown+0x4aa>
 8013a4e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013a52:	881b      	ldrh	r3, [r3, #0]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d13a      	bne.n	8013ace <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013a58:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a5c:	f103 0316 	add.w	r3, r3, #22
 8013a60:	881a      	ldrh	r2, [r3, #0]
 8013a62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a66:	f103 0314 	add.w	r3, r3, #20
 8013a6a:	881b      	ldrh	r3, [r3, #0]
 8013a6c:	4947      	ldr	r1, [pc, #284]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 8013a6e:	0112      	lsls	r2, r2, #4
 8013a70:	4413      	add	r3, r2
 8013a72:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013a76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a7a:	f103 0316 	add.w	r3, r3, #22
 8013a7e:	881a      	ldrh	r2, [r3, #0]
 8013a80:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013a84:	f103 0314 	add.w	r3, r3, #20
 8013a88:	881b      	ldrh	r3, [r3, #0]
 8013a8a:	3b01      	subs	r3, #1
 8013a8c:	3101      	adds	r1, #1
 8013a8e:	b288      	uxth	r0, r1
 8013a90:	493e      	ldr	r1, [pc, #248]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 8013a92:	0112      	lsls	r2, r2, #4
 8013a94:	4413      	add	r3, r2
 8013a96:	4602      	mov	r2, r0
 8013a98:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013a9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013aa0:	f103 0316 	add.w	r3, r3, #22
 8013aa4:	881a      	ldrh	r2, [r3, #0]
 8013aa6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013aaa:	4611      	mov	r1, r2
 8013aac:	4618      	mov	r0, r3
 8013aae:	f000 fec1 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013ab2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ab6:	f103 0314 	add.w	r3, r3, #20
 8013aba:	881b      	ldrh	r3, [r3, #0]
 8013abc:	3b01      	subs	r3, #1
 8013abe:	b29a      	uxth	r2, r3
 8013ac0:	f107 0308 	add.w	r3, r7, #8
 8013ac4:	3b04      	subs	r3, #4
 8013ac6:	4611      	mov	r1, r2
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f000 feb3 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013ace:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ad2:	f103 0316 	add.w	r3, r3, #22
 8013ad6:	881b      	ldrh	r3, [r3, #0]
 8013ad8:	1c5a      	adds	r2, r3, #1
 8013ada:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ade:	f103 0314 	add.w	r3, r3, #20
 8013ae2:	881b      	ldrh	r3, [r3, #0]
 8013ae4:	4929      	ldr	r1, [pc, #164]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 8013ae6:	0112      	lsls	r2, r2, #4
 8013ae8:	4413      	add	r3, r2
 8013aea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013aee:	2bff      	cmp	r3, #255	; 0xff
 8013af0:	d14e      	bne.n	8013b90 <create_StepCountMap_unknown+0x56c>
 8013af2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013af6:	f103 0316 	add.w	r3, r3, #22
 8013afa:	881b      	ldrh	r3, [r3, #0]
 8013afc:	2b0f      	cmp	r3, #15
 8013afe:	d047      	beq.n	8013b90 <create_StepCountMap_unknown+0x56c>
 8013b00:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b04:	f103 031e 	add.w	r3, r3, #30
 8013b08:	881b      	ldrh	r3, [r3, #0]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d140      	bne.n	8013b90 <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013b0e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b12:	f103 0316 	add.w	r3, r3, #22
 8013b16:	881a      	ldrh	r2, [r3, #0]
 8013b18:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b1c:	f103 0314 	add.w	r3, r3, #20
 8013b20:	881b      	ldrh	r3, [r3, #0]
 8013b22:	491a      	ldr	r1, [pc, #104]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 8013b24:	0112      	lsls	r2, r2, #4
 8013b26:	4413      	add	r3, r2
 8013b28:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013b2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b30:	f103 0316 	add.w	r3, r3, #22
 8013b34:	881b      	ldrh	r3, [r3, #0]
 8013b36:	1c5a      	adds	r2, r3, #1
 8013b38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b3c:	f103 0314 	add.w	r3, r3, #20
 8013b40:	881b      	ldrh	r3, [r3, #0]
 8013b42:	3101      	adds	r1, #1
 8013b44:	b288      	uxth	r0, r1
 8013b46:	4911      	ldr	r1, [pc, #68]	; (8013b8c <create_StepCountMap_unknown+0x568>)
 8013b48:	0112      	lsls	r2, r2, #4
 8013b4a:	4413      	add	r3, r2
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013b52:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b56:	f103 0316 	add.w	r3, r3, #22
 8013b5a:	881b      	ldrh	r3, [r3, #0]
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	b29a      	uxth	r2, r3
 8013b60:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013b64:	4611      	mov	r1, r2
 8013b66:	4618      	mov	r0, r3
 8013b68:	f000 fe64 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013b6c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b70:	f103 0314 	add.w	r3, r3, #20
 8013b74:	881a      	ldrh	r2, [r3, #0]
 8013b76:	f107 0308 	add.w	r3, r7, #8
 8013b7a:	3b04      	subs	r3, #4
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 fe58 	bl	8014834 <pushStack_walk>
 8013b84:	e004      	b.n	8013b90 <create_StepCountMap_unknown+0x56c>
 8013b86:	bf00      	nop
 8013b88:	20000c30 	.word	0x20000c30
 8013b8c:	20000d24 	.word	0x20000d24
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013b90:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013b94:	f103 0316 	add.w	r3, r3, #22
 8013b98:	881b      	ldrh	r3, [r3, #0]
 8013b9a:	1e5a      	subs	r2, r3, #1
 8013b9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ba0:	f103 0314 	add.w	r3, r3, #20
 8013ba4:	881b      	ldrh	r3, [r3, #0]
 8013ba6:	4939      	ldr	r1, [pc, #228]	; (8013c8c <create_StepCountMap_unknown+0x668>)
 8013ba8:	0112      	lsls	r2, r2, #4
 8013baa:	4413      	add	r3, r2
 8013bac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013bb0:	2bff      	cmp	r3, #255	; 0xff
 8013bb2:	d148      	bne.n	8013c46 <create_StepCountMap_unknown+0x622>
 8013bb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bb8:	f103 0316 	add.w	r3, r3, #22
 8013bbc:	881b      	ldrh	r3, [r3, #0]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d041      	beq.n	8013c46 <create_StepCountMap_unknown+0x622>
 8013bc2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bc6:	f103 031c 	add.w	r3, r3, #28
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d13a      	bne.n	8013c46 <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013bd0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bd4:	f103 0316 	add.w	r3, r3, #22
 8013bd8:	881a      	ldrh	r2, [r3, #0]
 8013bda:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bde:	f103 0314 	add.w	r3, r3, #20
 8013be2:	881b      	ldrh	r3, [r3, #0]
 8013be4:	4929      	ldr	r1, [pc, #164]	; (8013c8c <create_StepCountMap_unknown+0x668>)
 8013be6:	0112      	lsls	r2, r2, #4
 8013be8:	4413      	add	r3, r2
 8013bea:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013bee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bf2:	f103 0316 	add.w	r3, r3, #22
 8013bf6:	881b      	ldrh	r3, [r3, #0]
 8013bf8:	1e5a      	subs	r2, r3, #1
 8013bfa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013bfe:	f103 0314 	add.w	r3, r3, #20
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	3101      	adds	r1, #1
 8013c06:	b288      	uxth	r0, r1
 8013c08:	4920      	ldr	r1, [pc, #128]	; (8013c8c <create_StepCountMap_unknown+0x668>)
 8013c0a:	0112      	lsls	r2, r2, #4
 8013c0c:	4413      	add	r3, r2
 8013c0e:	4602      	mov	r2, r0
 8013c10:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013c14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c18:	f103 0316 	add.w	r3, r3, #22
 8013c1c:	881b      	ldrh	r3, [r3, #0]
 8013c1e:	3b01      	subs	r3, #1
 8013c20:	b29a      	uxth	r2, r3
 8013c22:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c26:	4611      	mov	r1, r2
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f000 fe03 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013c2e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c32:	f103 0314 	add.w	r3, r3, #20
 8013c36:	881a      	ldrh	r2, [r3, #0]
 8013c38:	f107 0308 	add.w	r3, r7, #8
 8013c3c:	3b04      	subs	r3, #4
 8013c3e:	4611      	mov	r1, r2
 8013c40:	4618      	mov	r0, r3
 8013c42:	f000 fdf7 	bl	8014834 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8013c46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c4a:	f103 0316 	add.w	r3, r3, #22
 8013c4e:	881a      	ldrh	r2, [r3, #0]
 8013c50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c54:	f103 0314 	add.w	r3, r3, #20
 8013c58:	881b      	ldrh	r3, [r3, #0]
 8013c5a:	490c      	ldr	r1, [pc, #48]	; (8013c8c <create_StepCountMap_unknown+0x668>)
 8013c5c:	0112      	lsls	r2, r2, #4
 8013c5e:	4413      	add	r3, r2
 8013c60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013c64:	3301      	adds	r3, #1
 8013c66:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013c6a:	f102 0204 	add.w	r2, r2, #4
 8013c6e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013c70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013c74:	f103 0304 	add.w	r3, r3, #4
 8013c78:	881b      	ldrh	r3, [r3, #0]
 8013c7a:	2bfe      	cmp	r3, #254	; 0xfe
 8013c7c:	f67f adc4 	bls.w	8013808 <create_StepCountMap_unknown+0x1e4>

		}

}
 8013c80:	bf00      	nop
 8013c82:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8013c86:	3708      	adds	r7, #8
 8013c88:	46bd      	mov	sp, r7
 8013c8a:	bd80      	pop	{r7, pc}
 8013c8c:	20000d24 	.word	0x20000d24

08013c90 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8013c90:	b580      	push	{r7, lr}
 8013c92:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013c96:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013c98:	2300      	movs	r3, #0
 8013c9a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c9e:	f102 021f 	add.w	r2, r2, #31
 8013ca2:	7013      	strb	r3, [r2, #0]
 8013ca4:	e033      	b.n	8013d0e <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013cac:	f102 021e 	add.w	r2, r2, #30
 8013cb0:	7013      	strb	r3, [r2, #0]
 8013cb2:	e01a      	b.n	8013cea <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 8013cb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cb8:	f103 031f 	add.w	r3, r3, #31
 8013cbc:	781a      	ldrb	r2, [r3, #0]
 8013cbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cc2:	f103 031e 	add.w	r3, r3, #30
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	4946      	ldr	r1, [pc, #280]	; (8013de4 <create_StepCountMap_queue+0x154>)
 8013cca:	0112      	lsls	r2, r2, #4
 8013ccc:	4413      	add	r3, r2
 8013cce:	22ff      	movs	r2, #255	; 0xff
 8013cd0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013cd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cd8:	f103 031e 	add.w	r3, r3, #30
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	3301      	adds	r3, #1
 8013ce0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013ce4:	f102 021e 	add.w	r2, r2, #30
 8013ce8:	7013      	strb	r3, [r2, #0]
 8013cea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cee:	f103 031e 	add.w	r3, r3, #30
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	2b0f      	cmp	r3, #15
 8013cf6:	d9dd      	bls.n	8013cb4 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013cf8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013cfc:	f103 031f 	add.w	r3, r3, #31
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	3301      	adds	r3, #1
 8013d04:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d08:	f102 021f 	add.w	r2, r2, #31
 8013d0c:	7013      	strb	r3, [r2, #0]
 8013d0e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d12:	f103 031f 	add.w	r3, r3, #31
 8013d16:	781b      	ldrb	r3, [r3, #0]
 8013d18:	2b0f      	cmp	r3, #15
 8013d1a:	d9c4      	bls.n	8013ca6 <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8013d1c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013d20:	4618      	mov	r0, r3
 8013d22:	f000 fd77 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_y);
 8013d26:	463b      	mov	r3, r7
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f000 fd73 	bl	8014814 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8013d2e:	4b2d      	ldr	r3, [pc, #180]	; (8013de4 <create_StepCountMap_queue+0x154>)
 8013d30:	2200      	movs	r2, #0
 8013d32:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8013d36:	4b2b      	ldr	r3, [pc, #172]	; (8013de4 <create_StepCountMap_queue+0x154>)
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8013d3e:	4b29      	ldr	r3, [pc, #164]	; (8013de4 <create_StepCountMap_queue+0x154>)
 8013d40:	2200      	movs	r2, #0
 8013d42:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8013d46:	4b27      	ldr	r3, [pc, #156]	; (8013de4 <create_StepCountMap_queue+0x154>)
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013d4e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013d52:	2105      	movs	r1, #5
 8013d54:	4618      	mov	r0, r3
 8013d56:	f000 fd6d 	bl	8014834 <pushStack_walk>
 8013d5a:	463b      	mov	r3, r7
 8013d5c:	2104      	movs	r1, #4
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f000 fd68 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8013d64:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013d68:	2106      	movs	r1, #6
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 fd62 	bl	8014834 <pushStack_walk>
 8013d70:	463b      	mov	r3, r7
 8013d72:	2104      	movs	r1, #4
 8013d74:	4618      	mov	r0, r3
 8013d76:	f000 fd5d 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013d7a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013d7e:	2105      	movs	r1, #5
 8013d80:	4618      	mov	r0, r3
 8013d82:	f000 fd57 	bl	8014834 <pushStack_walk>
 8013d86:	463b      	mov	r3, r7
 8013d88:	2105      	movs	r1, #5
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f000 fd52 	bl	8014834 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013d90:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013d94:	2106      	movs	r1, #6
 8013d96:	4618      	mov	r0, r3
 8013d98:	f000 fd4c 	bl	8014834 <pushStack_walk>
 8013d9c:	463b      	mov	r3, r7
 8013d9e:	2105      	movs	r1, #5
 8013da0:	4618      	mov	r0, r3
 8013da2:	f000 fd47 	bl	8014834 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013da6:	2301      	movs	r3, #1
 8013da8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013dac:	f102 021c 	add.w	r2, r2, #28
 8013db0:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013db2:	2301      	movs	r3, #1
 8013db4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013db8:	f102 021a 	add.w	r2, r2, #26
 8013dbc:	8013      	strh	r3, [r2, #0]
 8013dbe:	2301      	movs	r3, #1
 8013dc0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013dc4:	f102 0218 	add.w	r2, r2, #24
 8013dc8:	8013      	strh	r3, [r2, #0]
 8013dca:	2301      	movs	r3, #1
 8013dcc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013dd0:	f102 0216 	add.w	r2, r2, #22
 8013dd4:	8013      	strh	r3, [r2, #0]
 8013dd6:	2301      	movs	r3, #1
 8013dd8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013ddc:	f102 0214 	add.w	r2, r2, #20
 8013de0:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013de2:	e22f      	b.n	8014244 <create_StepCountMap_queue+0x5b4>
 8013de4:	20000d24 	.word	0x20000d24

		Xcoordinate = popStack_walk(&stack_x);
 8013de8:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013dec:	4618      	mov	r0, r3
 8013dee:	f000 fd4b 	bl	8014888 <popStack_walk>
 8013df2:	4603      	mov	r3, r0
 8013df4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013df8:	f102 0212 	add.w	r2, r2, #18
 8013dfc:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013dfe:	463b      	mov	r3, r7
 8013e00:	4618      	mov	r0, r3
 8013e02:	f000 fd41 	bl	8014888 <popStack_walk>
 8013e06:	4603      	mov	r3, r0
 8013e08:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e0c:	f102 0210 	add.w	r2, r2, #16
 8013e10:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013e12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e16:	f103 0312 	add.w	r3, r3, #18
 8013e1a:	881b      	ldrh	r3, [r3, #0]
 8013e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e20:	4293      	cmp	r3, r2
 8013e22:	f000 8217 	beq.w	8014254 <create_StepCountMap_queue+0x5c4>
 8013e26:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e2a:	f103 0310 	add.w	r3, r3, #16
 8013e2e:	881b      	ldrh	r3, [r3, #0]
 8013e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e34:	4293      	cmp	r3, r2
 8013e36:	f000 820d 	beq.w	8014254 <create_StepCountMap_queue+0x5c4>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013e3a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e3e:	f103 0310 	add.w	r3, r3, #16
 8013e42:	881b      	ldrh	r3, [r3, #0]
 8013e44:	2b0e      	cmp	r3, #14
 8013e46:	d81a      	bhi.n	8013e7e <create_StepCountMap_queue+0x1ee>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013e48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e4c:	f103 0310 	add.w	r3, r3, #16
 8013e50:	881b      	ldrh	r3, [r3, #0]
 8013e52:	4aca      	ldr	r2, [pc, #808]	; (801417c <create_StepCountMap_queue+0x4ec>)
 8013e54:	330c      	adds	r3, #12
 8013e56:	005b      	lsls	r3, r3, #1
 8013e58:	4413      	add	r3, r2
 8013e5a:	88db      	ldrh	r3, [r3, #6]
 8013e5c:	b21a      	sxth	r2, r3
 8013e5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e62:	f103 0312 	add.w	r3, r3, #18
 8013e66:	881b      	ldrh	r3, [r3, #0]
 8013e68:	2101      	movs	r1, #1
 8013e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8013e6e:	b21b      	sxth	r3, r3
 8013e70:	4013      	ands	r3, r2
 8013e72:	b21b      	sxth	r3, r3
 8013e74:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e78:	f102 021a 	add.w	r2, r2, #26
 8013e7c:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013e7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e82:	f103 0310 	add.w	r3, r3, #16
 8013e86:	881b      	ldrh	r3, [r3, #0]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d01b      	beq.n	8013ec4 <create_StepCountMap_queue+0x234>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013e8c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e90:	f103 0310 	add.w	r3, r3, #16
 8013e94:	881b      	ldrh	r3, [r3, #0]
 8013e96:	3b01      	subs	r3, #1
 8013e98:	4ab8      	ldr	r2, [pc, #736]	; (801417c <create_StepCountMap_queue+0x4ec>)
 8013e9a:	330c      	adds	r3, #12
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	4413      	add	r3, r2
 8013ea0:	88db      	ldrh	r3, [r3, #6]
 8013ea2:	b21a      	sxth	r2, r3
 8013ea4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ea8:	f103 0312 	add.w	r3, r3, #18
 8013eac:	881b      	ldrh	r3, [r3, #0]
 8013eae:	2101      	movs	r1, #1
 8013eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8013eb4:	b21b      	sxth	r3, r3
 8013eb6:	4013      	ands	r3, r2
 8013eb8:	b21b      	sxth	r3, r3
 8013eba:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013ebe:	f102 0218 	add.w	r2, r2, #24
 8013ec2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013ec4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ec8:	f103 0312 	add.w	r3, r3, #18
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	2b0e      	cmp	r3, #14
 8013ed0:	d818      	bhi.n	8013f04 <create_StepCountMap_queue+0x274>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013ed2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ed6:	f103 0312 	add.w	r3, r3, #18
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	4aa7      	ldr	r2, [pc, #668]	; (801417c <create_StepCountMap_queue+0x4ec>)
 8013ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ee2:	b21a      	sxth	r2, r3
 8013ee4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ee8:	f103 0310 	add.w	r3, r3, #16
 8013eec:	881b      	ldrh	r3, [r3, #0]
 8013eee:	2101      	movs	r1, #1
 8013ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8013ef4:	b21b      	sxth	r3, r3
 8013ef6:	4013      	ands	r3, r2
 8013ef8:	b21b      	sxth	r3, r3
 8013efa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013efe:	f102 0216 	add.w	r2, r2, #22
 8013f02:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013f04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f08:	f103 0312 	add.w	r3, r3, #18
 8013f0c:	881b      	ldrh	r3, [r3, #0]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d019      	beq.n	8013f46 <create_StepCountMap_queue+0x2b6>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013f12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f16:	f103 0312 	add.w	r3, r3, #18
 8013f1a:	881b      	ldrh	r3, [r3, #0]
 8013f1c:	3b01      	subs	r3, #1
 8013f1e:	4a97      	ldr	r2, [pc, #604]	; (801417c <create_StepCountMap_queue+0x4ec>)
 8013f20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f24:	b21a      	sxth	r2, r3
 8013f26:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f2a:	f103 0310 	add.w	r3, r3, #16
 8013f2e:	881b      	ldrh	r3, [r3, #0]
 8013f30:	2101      	movs	r1, #1
 8013f32:	fa01 f303 	lsl.w	r3, r1, r3
 8013f36:	b21b      	sxth	r3, r3
 8013f38:	4013      	ands	r3, r2
 8013f3a:	b21b      	sxth	r3, r3
 8013f3c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013f40:	f102 0214 	add.w	r2, r2, #20
 8013f44:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013f46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f4a:	f103 0312 	add.w	r3, r3, #18
 8013f4e:	881a      	ldrh	r2, [r3, #0]
 8013f50:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f54:	f103 0310 	add.w	r3, r3, #16
 8013f58:	881b      	ldrh	r3, [r3, #0]
 8013f5a:	3301      	adds	r3, #1
 8013f5c:	4988      	ldr	r1, [pc, #544]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8013f5e:	0112      	lsls	r2, r2, #4
 8013f60:	4413      	add	r3, r2
 8013f62:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f66:	2bff      	cmp	r3, #255	; 0xff
 8013f68:	d146      	bne.n	8013ff8 <create_StepCountMap_queue+0x368>
 8013f6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f6e:	f103 0310 	add.w	r3, r3, #16
 8013f72:	881b      	ldrh	r3, [r3, #0]
 8013f74:	2b0f      	cmp	r3, #15
 8013f76:	d03f      	beq.n	8013ff8 <create_StepCountMap_queue+0x368>
 8013f78:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f7c:	f103 031a 	add.w	r3, r3, #26
 8013f80:	881b      	ldrh	r3, [r3, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d138      	bne.n	8013ff8 <create_StepCountMap_queue+0x368>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013f86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f8a:	f103 0312 	add.w	r3, r3, #18
 8013f8e:	881a      	ldrh	r2, [r3, #0]
 8013f90:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f94:	f103 0310 	add.w	r3, r3, #16
 8013f98:	881b      	ldrh	r3, [r3, #0]
 8013f9a:	4979      	ldr	r1, [pc, #484]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8013f9c:	0112      	lsls	r2, r2, #4
 8013f9e:	4413      	add	r3, r2
 8013fa0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013fa4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fa8:	f103 0312 	add.w	r3, r3, #18
 8013fac:	881a      	ldrh	r2, [r3, #0]
 8013fae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fb2:	f103 0310 	add.w	r3, r3, #16
 8013fb6:	881b      	ldrh	r3, [r3, #0]
 8013fb8:	3301      	adds	r3, #1
 8013fba:	3101      	adds	r1, #1
 8013fbc:	b288      	uxth	r0, r1
 8013fbe:	4970      	ldr	r1, [pc, #448]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8013fc0:	0112      	lsls	r2, r2, #4
 8013fc2:	4413      	add	r3, r2
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013fca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fce:	f103 0312 	add.w	r3, r3, #18
 8013fd2:	881a      	ldrh	r2, [r3, #0]
 8013fd4:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8013fd8:	4611      	mov	r1, r2
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f000 fc2a 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013fe0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fe4:	f103 0310 	add.w	r3, r3, #16
 8013fe8:	881b      	ldrh	r3, [r3, #0]
 8013fea:	3301      	adds	r3, #1
 8013fec:	b29a      	uxth	r2, r3
 8013fee:	463b      	mov	r3, r7
 8013ff0:	4611      	mov	r1, r2
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f000 fc1e 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013ff8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ffc:	f103 0312 	add.w	r3, r3, #18
 8014000:	881a      	ldrh	r2, [r3, #0]
 8014002:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014006:	f103 0310 	add.w	r3, r3, #16
 801400a:	881b      	ldrh	r3, [r3, #0]
 801400c:	3b01      	subs	r3, #1
 801400e:	495c      	ldr	r1, [pc, #368]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8014010:	0112      	lsls	r2, r2, #4
 8014012:	4413      	add	r3, r2
 8014014:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014018:	2bff      	cmp	r3, #255	; 0xff
 801401a:	d146      	bne.n	80140aa <create_StepCountMap_queue+0x41a>
 801401c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014020:	f103 0310 	add.w	r3, r3, #16
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d03f      	beq.n	80140aa <create_StepCountMap_queue+0x41a>
 801402a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801402e:	f103 0318 	add.w	r3, r3, #24
 8014032:	881b      	ldrh	r3, [r3, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d138      	bne.n	80140aa <create_StepCountMap_queue+0x41a>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014038:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801403c:	f103 0312 	add.w	r3, r3, #18
 8014040:	881a      	ldrh	r2, [r3, #0]
 8014042:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014046:	f103 0310 	add.w	r3, r3, #16
 801404a:	881b      	ldrh	r3, [r3, #0]
 801404c:	494c      	ldr	r1, [pc, #304]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 801404e:	0112      	lsls	r2, r2, #4
 8014050:	4413      	add	r3, r2
 8014052:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014056:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801405a:	f103 0312 	add.w	r3, r3, #18
 801405e:	881a      	ldrh	r2, [r3, #0]
 8014060:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014064:	f103 0310 	add.w	r3, r3, #16
 8014068:	881b      	ldrh	r3, [r3, #0]
 801406a:	3b01      	subs	r3, #1
 801406c:	3101      	adds	r1, #1
 801406e:	b288      	uxth	r0, r1
 8014070:	4943      	ldr	r1, [pc, #268]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8014072:	0112      	lsls	r2, r2, #4
 8014074:	4413      	add	r3, r2
 8014076:	4602      	mov	r2, r0
 8014078:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801407c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014080:	f103 0312 	add.w	r3, r3, #18
 8014084:	881a      	ldrh	r2, [r3, #0]
 8014086:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801408a:	4611      	mov	r1, r2
 801408c:	4618      	mov	r0, r3
 801408e:	f000 fbd1 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014092:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014096:	f103 0310 	add.w	r3, r3, #16
 801409a:	881b      	ldrh	r3, [r3, #0]
 801409c:	3b01      	subs	r3, #1
 801409e:	b29a      	uxth	r2, r3
 80140a0:	463b      	mov	r3, r7
 80140a2:	4611      	mov	r1, r2
 80140a4:	4618      	mov	r0, r3
 80140a6:	f000 fbc5 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80140aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140ae:	f103 0312 	add.w	r3, r3, #18
 80140b2:	881b      	ldrh	r3, [r3, #0]
 80140b4:	1c5a      	adds	r2, r3, #1
 80140b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140ba:	f103 0310 	add.w	r3, r3, #16
 80140be:	881b      	ldrh	r3, [r3, #0]
 80140c0:	492f      	ldr	r1, [pc, #188]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 80140c2:	0112      	lsls	r2, r2, #4
 80140c4:	4413      	add	r3, r2
 80140c6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80140ca:	2bff      	cmp	r3, #255	; 0xff
 80140cc:	d146      	bne.n	801415c <create_StepCountMap_queue+0x4cc>
 80140ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140d2:	f103 0312 	add.w	r3, r3, #18
 80140d6:	881b      	ldrh	r3, [r3, #0]
 80140d8:	2b0f      	cmp	r3, #15
 80140da:	d03f      	beq.n	801415c <create_StepCountMap_queue+0x4cc>
 80140dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140e0:	f103 0316 	add.w	r3, r3, #22
 80140e4:	881b      	ldrh	r3, [r3, #0]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d138      	bne.n	801415c <create_StepCountMap_queue+0x4cc>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80140ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140ee:	f103 0312 	add.w	r3, r3, #18
 80140f2:	881a      	ldrh	r2, [r3, #0]
 80140f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140f8:	f103 0310 	add.w	r3, r3, #16
 80140fc:	881b      	ldrh	r3, [r3, #0]
 80140fe:	4920      	ldr	r1, [pc, #128]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8014100:	0112      	lsls	r2, r2, #4
 8014102:	4413      	add	r3, r2
 8014104:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014108:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801410c:	f103 0312 	add.w	r3, r3, #18
 8014110:	881b      	ldrh	r3, [r3, #0]
 8014112:	1c5a      	adds	r2, r3, #1
 8014114:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014118:	f103 0310 	add.w	r3, r3, #16
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	3101      	adds	r1, #1
 8014120:	b288      	uxth	r0, r1
 8014122:	4917      	ldr	r1, [pc, #92]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8014124:	0112      	lsls	r2, r2, #4
 8014126:	4413      	add	r3, r2
 8014128:	4602      	mov	r2, r0
 801412a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801412e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014132:	f103 0312 	add.w	r3, r3, #18
 8014136:	881b      	ldrh	r3, [r3, #0]
 8014138:	3301      	adds	r3, #1
 801413a:	b29a      	uxth	r2, r3
 801413c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014140:	4611      	mov	r1, r2
 8014142:	4618      	mov	r0, r3
 8014144:	f000 fb76 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014148:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801414c:	f103 0310 	add.w	r3, r3, #16
 8014150:	881a      	ldrh	r2, [r3, #0]
 8014152:	463b      	mov	r3, r7
 8014154:	4611      	mov	r1, r2
 8014156:	4618      	mov	r0, r3
 8014158:	f000 fb6c 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 801415c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014160:	f103 0312 	add.w	r3, r3, #18
 8014164:	881b      	ldrh	r3, [r3, #0]
 8014166:	1e5a      	subs	r2, r3, #1
 8014168:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801416c:	f103 0310 	add.w	r3, r3, #16
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	4903      	ldr	r1, [pc, #12]	; (8014180 <create_StepCountMap_queue+0x4f0>)
 8014174:	0112      	lsls	r2, r2, #4
 8014176:	4413      	add	r3, r2
 8014178:	e004      	b.n	8014184 <create_StepCountMap_queue+0x4f4>
 801417a:	bf00      	nop
 801417c:	20000c30 	.word	0x20000c30
 8014180:	20000d24 	.word	0x20000d24
 8014184:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014188:	2bff      	cmp	r3, #255	; 0xff
 801418a:	d146      	bne.n	801421a <create_StepCountMap_queue+0x58a>
 801418c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014190:	f103 0312 	add.w	r3, r3, #18
 8014194:	881b      	ldrh	r3, [r3, #0]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d03f      	beq.n	801421a <create_StepCountMap_queue+0x58a>
 801419a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801419e:	f103 0314 	add.w	r3, r3, #20
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d138      	bne.n	801421a <create_StepCountMap_queue+0x58a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80141a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141ac:	f103 0312 	add.w	r3, r3, #18
 80141b0:	881a      	ldrh	r2, [r3, #0]
 80141b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141b6:	f103 0310 	add.w	r3, r3, #16
 80141ba:	881b      	ldrh	r3, [r3, #0]
 80141bc:	4928      	ldr	r1, [pc, #160]	; (8014260 <create_StepCountMap_queue+0x5d0>)
 80141be:	0112      	lsls	r2, r2, #4
 80141c0:	4413      	add	r3, r2
 80141c2:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80141c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141ca:	f103 0312 	add.w	r3, r3, #18
 80141ce:	881b      	ldrh	r3, [r3, #0]
 80141d0:	1e5a      	subs	r2, r3, #1
 80141d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141d6:	f103 0310 	add.w	r3, r3, #16
 80141da:	881b      	ldrh	r3, [r3, #0]
 80141dc:	3101      	adds	r1, #1
 80141de:	b288      	uxth	r0, r1
 80141e0:	491f      	ldr	r1, [pc, #124]	; (8014260 <create_StepCountMap_queue+0x5d0>)
 80141e2:	0112      	lsls	r2, r2, #4
 80141e4:	4413      	add	r3, r2
 80141e6:	4602      	mov	r2, r0
 80141e8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80141ec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141f0:	f103 0312 	add.w	r3, r3, #18
 80141f4:	881b      	ldrh	r3, [r3, #0]
 80141f6:	3b01      	subs	r3, #1
 80141f8:	b29a      	uxth	r2, r3
 80141fa:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80141fe:	4611      	mov	r1, r2
 8014200:	4618      	mov	r0, r3
 8014202:	f000 fb17 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014206:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801420a:	f103 0310 	add.w	r3, r3, #16
 801420e:	881a      	ldrh	r2, [r3, #0]
 8014210:	463b      	mov	r3, r7
 8014212:	4611      	mov	r1, r2
 8014214:	4618      	mov	r0, r3
 8014216:	f000 fb0d 	bl	8014834 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801421a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801421e:	f103 0312 	add.w	r3, r3, #18
 8014222:	881a      	ldrh	r2, [r3, #0]
 8014224:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014228:	f103 0310 	add.w	r3, r3, #16
 801422c:	881b      	ldrh	r3, [r3, #0]
 801422e:	490c      	ldr	r1, [pc, #48]	; (8014260 <create_StepCountMap_queue+0x5d0>)
 8014230:	0112      	lsls	r2, r2, #4
 8014232:	4413      	add	r3, r2
 8014234:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014238:	3301      	adds	r3, #1
 801423a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801423e:	f102 021c 	add.w	r2, r2, #28
 8014242:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014244:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014248:	f103 031c 	add.w	r3, r3, #28
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	2bfe      	cmp	r3, #254	; 0xfe
 8014250:	f67f adca 	bls.w	8013de8 <create_StepCountMap_queue+0x158>

		}

}
 8014254:	bf00      	nop
 8014256:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
 801425e:	bf00      	nop
 8014260:	20000d24 	.word	0x20000d24

08014264 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014264:	b580      	push	{r7, lr}
 8014266:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801426e:	2300      	movs	r3, #0
 8014270:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014274:	f102 0207 	add.w	r2, r2, #7
 8014278:	7013      	strb	r3, [r2, #0]
 801427a:	e033      	b.n	80142e4 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 801427c:	2300      	movs	r3, #0
 801427e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014282:	f102 0206 	add.w	r2, r2, #6
 8014286:	7013      	strb	r3, [r2, #0]
 8014288:	e01a      	b.n	80142c0 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 801428a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801428e:	f103 0307 	add.w	r3, r3, #7
 8014292:	781a      	ldrb	r2, [r3, #0]
 8014294:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014298:	f103 0306 	add.w	r3, r3, #6
 801429c:	781b      	ldrb	r3, [r3, #0]
 801429e:	4931      	ldr	r1, [pc, #196]	; (8014364 <create_StepCountMapBack_queue+0x100>)
 80142a0:	0112      	lsls	r2, r2, #4
 80142a2:	4413      	add	r3, r2
 80142a4:	22ff      	movs	r2, #255	; 0xff
 80142a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80142aa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80142ae:	f103 0306 	add.w	r3, r3, #6
 80142b2:	781b      	ldrb	r3, [r3, #0]
 80142b4:	3301      	adds	r3, #1
 80142b6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80142ba:	f102 0206 	add.w	r2, r2, #6
 80142be:	7013      	strb	r3, [r2, #0]
 80142c0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80142c4:	f103 0306 	add.w	r3, r3, #6
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	2b0f      	cmp	r3, #15
 80142cc:	d9dd      	bls.n	801428a <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80142ce:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80142d2:	f103 0307 	add.w	r3, r3, #7
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	3301      	adds	r3, #1
 80142da:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80142de:	f102 0207 	add.w	r2, r2, #7
 80142e2:	7013      	strb	r3, [r2, #0]
 80142e4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80142e8:	f103 0307 	add.w	r3, r3, #7
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	2b0f      	cmp	r3, #15
 80142f0:	d9c4      	bls.n	801427c <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 80142f2:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80142f6:	4618      	mov	r0, r3
 80142f8:	f000 fa8c 	bl	8014814 <initStack_walk>
	initStack_walk(&stack_y);
 80142fc:	f107 0308 	add.w	r3, r7, #8
 8014300:	3b04      	subs	r3, #4
 8014302:	4618      	mov	r0, r3
 8014304:	f000 fa86 	bl	8014814 <initStack_walk>


	walk_count[0][0] = 0;
 8014308:	4b16      	ldr	r3, [pc, #88]	; (8014364 <create_StepCountMapBack_queue+0x100>)
 801430a:	2200      	movs	r2, #0
 801430c:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801430e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014312:	2100      	movs	r1, #0
 8014314:	4618      	mov	r0, r3
 8014316:	f000 fa8d 	bl	8014834 <pushStack_walk>
 801431a:	f107 0308 	add.w	r3, r7, #8
 801431e:	3b04      	subs	r3, #4
 8014320:	2100      	movs	r1, #0
 8014322:	4618      	mov	r0, r3
 8014324:	f000 fa86 	bl	8014834 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014328:	2301      	movs	r3, #1
 801432a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801432e:	f102 0204 	add.w	r2, r2, #4
 8014332:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014334:	2301      	movs	r3, #1
 8014336:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801433a:	f102 0202 	add.w	r2, r2, #2
 801433e:	8013      	strh	r3, [r2, #0]
 8014340:	2301      	movs	r3, #1
 8014342:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014346:	8013      	strh	r3, [r2, #0]
 8014348:	2301      	movs	r3, #1
 801434a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801434e:	f102 021e 	add.w	r2, r2, #30
 8014352:	8013      	strh	r3, [r2, #0]
 8014354:	2301      	movs	r3, #1
 8014356:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801435a:	f102 021c 	add.w	r2, r2, #28
 801435e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014360:	e248      	b.n	80147f4 <create_StepCountMapBack_queue+0x590>
 8014362:	bf00      	nop
 8014364:	20000d24 	.word	0x20000d24

		Xcoordinate = popStack_walk(&stack_x);
 8014368:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801436c:	4618      	mov	r0, r3
 801436e:	f000 fa8b 	bl	8014888 <popStack_walk>
 8014372:	4603      	mov	r3, r0
 8014374:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014378:	f102 021a 	add.w	r2, r2, #26
 801437c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801437e:	f107 0308 	add.w	r3, r7, #8
 8014382:	3b04      	subs	r3, #4
 8014384:	4618      	mov	r0, r3
 8014386:	f000 fa7f 	bl	8014888 <popStack_walk>
 801438a:	4603      	mov	r3, r0
 801438c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014390:	f102 0218 	add.w	r2, r2, #24
 8014394:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014396:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801439a:	f103 031a 	add.w	r3, r3, #26
 801439e:	881b      	ldrh	r3, [r3, #0]
 80143a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143a4:	4293      	cmp	r3, r2
 80143a6:	f000 822d 	beq.w	8014804 <create_StepCountMapBack_queue+0x5a0>
 80143aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143ae:	f103 0318 	add.w	r3, r3, #24
 80143b2:	881b      	ldrh	r3, [r3, #0]
 80143b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143b8:	4293      	cmp	r3, r2
 80143ba:	f000 8223 	beq.w	8014804 <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80143be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143c2:	f103 031a 	add.w	r3, r3, #26
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	011b      	lsls	r3, r3, #4
 80143ca:	b29a      	uxth	r2, r3
 80143cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143d0:	f103 0318 	add.w	r3, r3, #24
 80143d4:	881b      	ldrh	r3, [r3, #0]
 80143d6:	4413      	add	r3, r2
 80143d8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143dc:	f102 0216 	add.w	r2, r2, #22
 80143e0:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 80143e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143e6:	f103 0318 	add.w	r3, r3, #24
 80143ea:	881b      	ldrh	r3, [r3, #0]
 80143ec:	2b0e      	cmp	r3, #14
 80143ee:	d81a      	bhi.n	8014426 <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 80143f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143f4:	f103 0318 	add.w	r3, r3, #24
 80143f8:	881b      	ldrh	r3, [r3, #0]
 80143fa:	4ac4      	ldr	r2, [pc, #784]	; (801470c <create_StepCountMapBack_queue+0x4a8>)
 80143fc:	330c      	adds	r3, #12
 80143fe:	005b      	lsls	r3, r3, #1
 8014400:	4413      	add	r3, r2
 8014402:	88db      	ldrh	r3, [r3, #6]
 8014404:	b21a      	sxth	r2, r3
 8014406:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801440a:	f103 031a 	add.w	r3, r3, #26
 801440e:	881b      	ldrh	r3, [r3, #0]
 8014410:	2101      	movs	r1, #1
 8014412:	fa01 f303 	lsl.w	r3, r1, r3
 8014416:	b21b      	sxth	r3, r3
 8014418:	4013      	ands	r3, r2
 801441a:	b21b      	sxth	r3, r3
 801441c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014420:	f102 0202 	add.w	r2, r2, #2
 8014424:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014426:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801442a:	f103 0318 	add.w	r3, r3, #24
 801442e:	881b      	ldrh	r3, [r3, #0]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d019      	beq.n	8014468 <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014434:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014438:	f103 0318 	add.w	r3, r3, #24
 801443c:	881b      	ldrh	r3, [r3, #0]
 801443e:	3b01      	subs	r3, #1
 8014440:	4ab2      	ldr	r2, [pc, #712]	; (801470c <create_StepCountMapBack_queue+0x4a8>)
 8014442:	330c      	adds	r3, #12
 8014444:	005b      	lsls	r3, r3, #1
 8014446:	4413      	add	r3, r2
 8014448:	88db      	ldrh	r3, [r3, #6]
 801444a:	b21a      	sxth	r2, r3
 801444c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014450:	f103 031a 	add.w	r3, r3, #26
 8014454:	881b      	ldrh	r3, [r3, #0]
 8014456:	2101      	movs	r1, #1
 8014458:	fa01 f303 	lsl.w	r3, r1, r3
 801445c:	b21b      	sxth	r3, r3
 801445e:	4013      	ands	r3, r2
 8014460:	b21b      	sxth	r3, r3
 8014462:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014466:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014468:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801446c:	f103 031a 	add.w	r3, r3, #26
 8014470:	881b      	ldrh	r3, [r3, #0]
 8014472:	2b0e      	cmp	r3, #14
 8014474:	d818      	bhi.n	80144a8 <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8014476:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801447a:	f103 031a 	add.w	r3, r3, #26
 801447e:	881b      	ldrh	r3, [r3, #0]
 8014480:	4aa2      	ldr	r2, [pc, #648]	; (801470c <create_StepCountMapBack_queue+0x4a8>)
 8014482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014486:	b21a      	sxth	r2, r3
 8014488:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801448c:	f103 0318 	add.w	r3, r3, #24
 8014490:	881b      	ldrh	r3, [r3, #0]
 8014492:	2101      	movs	r1, #1
 8014494:	fa01 f303 	lsl.w	r3, r1, r3
 8014498:	b21b      	sxth	r3, r3
 801449a:	4013      	ands	r3, r2
 801449c:	b21b      	sxth	r3, r3
 801449e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80144a2:	f102 021e 	add.w	r2, r2, #30
 80144a6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80144a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ac:	f103 031a 	add.w	r3, r3, #26
 80144b0:	881b      	ldrh	r3, [r3, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d019      	beq.n	80144ea <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80144b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ba:	f103 031a 	add.w	r3, r3, #26
 80144be:	881b      	ldrh	r3, [r3, #0]
 80144c0:	3b01      	subs	r3, #1
 80144c2:	4a92      	ldr	r2, [pc, #584]	; (801470c <create_StepCountMapBack_queue+0x4a8>)
 80144c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144c8:	b21a      	sxth	r2, r3
 80144ca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ce:	f103 0318 	add.w	r3, r3, #24
 80144d2:	881b      	ldrh	r3, [r3, #0]
 80144d4:	2101      	movs	r1, #1
 80144d6:	fa01 f303 	lsl.w	r3, r1, r3
 80144da:	b21b      	sxth	r3, r3
 80144dc:	4013      	ands	r3, r2
 80144de:	b21b      	sxth	r3, r3
 80144e0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80144e4:	f102 021c 	add.w	r2, r2, #28
 80144e8:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 80144ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ee:	f103 031a 	add.w	r3, r3, #26
 80144f2:	881a      	ldrh	r2, [r3, #0]
 80144f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144f8:	f103 0318 	add.w	r3, r3, #24
 80144fc:	881b      	ldrh	r3, [r3, #0]
 80144fe:	3301      	adds	r3, #1
 8014500:	4983      	ldr	r1, [pc, #524]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 8014502:	0112      	lsls	r2, r2, #4
 8014504:	4413      	add	r3, r2
 8014506:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801450a:	2bff      	cmp	r3, #255	; 0xff
 801450c:	d148      	bne.n	80145a0 <create_StepCountMapBack_queue+0x33c>
 801450e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014512:	f103 0318 	add.w	r3, r3, #24
 8014516:	881b      	ldrh	r3, [r3, #0]
 8014518:	2b0f      	cmp	r3, #15
 801451a:	d041      	beq.n	80145a0 <create_StepCountMapBack_queue+0x33c>
 801451c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014520:	f103 0302 	add.w	r3, r3, #2
 8014524:	881b      	ldrh	r3, [r3, #0]
 8014526:	2b00      	cmp	r3, #0
 8014528:	d13a      	bne.n	80145a0 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801452a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801452e:	f103 031a 	add.w	r3, r3, #26
 8014532:	881a      	ldrh	r2, [r3, #0]
 8014534:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014538:	f103 0318 	add.w	r3, r3, #24
 801453c:	881b      	ldrh	r3, [r3, #0]
 801453e:	4974      	ldr	r1, [pc, #464]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 8014540:	0112      	lsls	r2, r2, #4
 8014542:	4413      	add	r3, r2
 8014544:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014548:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801454c:	f103 031a 	add.w	r3, r3, #26
 8014550:	881a      	ldrh	r2, [r3, #0]
 8014552:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014556:	f103 0318 	add.w	r3, r3, #24
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	3301      	adds	r3, #1
 801455e:	3101      	adds	r1, #1
 8014560:	b288      	uxth	r0, r1
 8014562:	496b      	ldr	r1, [pc, #428]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 8014564:	0112      	lsls	r2, r2, #4
 8014566:	4413      	add	r3, r2
 8014568:	4602      	mov	r2, r0
 801456a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801456e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014572:	f103 031a 	add.w	r3, r3, #26
 8014576:	881a      	ldrh	r2, [r3, #0]
 8014578:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801457c:	4611      	mov	r1, r2
 801457e:	4618      	mov	r0, r3
 8014580:	f000 f958 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014584:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014588:	f103 0318 	add.w	r3, r3, #24
 801458c:	881b      	ldrh	r3, [r3, #0]
 801458e:	3301      	adds	r3, #1
 8014590:	b29a      	uxth	r2, r3
 8014592:	f107 0308 	add.w	r3, r7, #8
 8014596:	3b04      	subs	r3, #4
 8014598:	4611      	mov	r1, r2
 801459a:	4618      	mov	r0, r3
 801459c:	f000 f94a 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 80145a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a4:	f103 031a 	add.w	r3, r3, #26
 80145a8:	881a      	ldrh	r2, [r3, #0]
 80145aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ae:	f103 0318 	add.w	r3, r3, #24
 80145b2:	881b      	ldrh	r3, [r3, #0]
 80145b4:	3b01      	subs	r3, #1
 80145b6:	4956      	ldr	r1, [pc, #344]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 80145b8:	0112      	lsls	r2, r2, #4
 80145ba:	4413      	add	r3, r2
 80145bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145c0:	2bff      	cmp	r3, #255	; 0xff
 80145c2:	d146      	bne.n	8014652 <create_StepCountMapBack_queue+0x3ee>
 80145c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c8:	f103 0318 	add.w	r3, r3, #24
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d03f      	beq.n	8014652 <create_StepCountMapBack_queue+0x3ee>
 80145d2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d13a      	bne.n	8014652 <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80145dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145e0:	f103 031a 	add.w	r3, r3, #26
 80145e4:	881a      	ldrh	r2, [r3, #0]
 80145e6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ea:	f103 0318 	add.w	r3, r3, #24
 80145ee:	881b      	ldrh	r3, [r3, #0]
 80145f0:	4947      	ldr	r1, [pc, #284]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 80145f2:	0112      	lsls	r2, r2, #4
 80145f4:	4413      	add	r3, r2
 80145f6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80145fa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145fe:	f103 031a 	add.w	r3, r3, #26
 8014602:	881a      	ldrh	r2, [r3, #0]
 8014604:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014608:	f103 0318 	add.w	r3, r3, #24
 801460c:	881b      	ldrh	r3, [r3, #0]
 801460e:	3b01      	subs	r3, #1
 8014610:	3101      	adds	r1, #1
 8014612:	b288      	uxth	r0, r1
 8014614:	493e      	ldr	r1, [pc, #248]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 8014616:	0112      	lsls	r2, r2, #4
 8014618:	4413      	add	r3, r2
 801461a:	4602      	mov	r2, r0
 801461c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014620:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014624:	f103 031a 	add.w	r3, r3, #26
 8014628:	881a      	ldrh	r2, [r3, #0]
 801462a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801462e:	4611      	mov	r1, r2
 8014630:	4618      	mov	r0, r3
 8014632:	f000 f8ff 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014636:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801463a:	f103 0318 	add.w	r3, r3, #24
 801463e:	881b      	ldrh	r3, [r3, #0]
 8014640:	3b01      	subs	r3, #1
 8014642:	b29a      	uxth	r2, r3
 8014644:	f107 0308 	add.w	r3, r7, #8
 8014648:	3b04      	subs	r3, #4
 801464a:	4611      	mov	r1, r2
 801464c:	4618      	mov	r0, r3
 801464e:	f000 f8f1 	bl	8014834 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014652:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014656:	f103 031a 	add.w	r3, r3, #26
 801465a:	881b      	ldrh	r3, [r3, #0]
 801465c:	1c5a      	adds	r2, r3, #1
 801465e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014662:	f103 0318 	add.w	r3, r3, #24
 8014666:	881b      	ldrh	r3, [r3, #0]
 8014668:	4929      	ldr	r1, [pc, #164]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 801466a:	0112      	lsls	r2, r2, #4
 801466c:	4413      	add	r3, r2
 801466e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014672:	2bff      	cmp	r3, #255	; 0xff
 8014674:	d14e      	bne.n	8014714 <create_StepCountMapBack_queue+0x4b0>
 8014676:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801467a:	f103 031a 	add.w	r3, r3, #26
 801467e:	881b      	ldrh	r3, [r3, #0]
 8014680:	2b0f      	cmp	r3, #15
 8014682:	d047      	beq.n	8014714 <create_StepCountMapBack_queue+0x4b0>
 8014684:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014688:	f103 031e 	add.w	r3, r3, #30
 801468c:	881b      	ldrh	r3, [r3, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d140      	bne.n	8014714 <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014692:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014696:	f103 031a 	add.w	r3, r3, #26
 801469a:	881a      	ldrh	r2, [r3, #0]
 801469c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146a0:	f103 0318 	add.w	r3, r3, #24
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	491a      	ldr	r1, [pc, #104]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 80146a8:	0112      	lsls	r2, r2, #4
 80146aa:	4413      	add	r3, r2
 80146ac:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80146b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146b4:	f103 031a 	add.w	r3, r3, #26
 80146b8:	881b      	ldrh	r3, [r3, #0]
 80146ba:	1c5a      	adds	r2, r3, #1
 80146bc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146c0:	f103 0318 	add.w	r3, r3, #24
 80146c4:	881b      	ldrh	r3, [r3, #0]
 80146c6:	3101      	adds	r1, #1
 80146c8:	b288      	uxth	r0, r1
 80146ca:	4911      	ldr	r1, [pc, #68]	; (8014710 <create_StepCountMapBack_queue+0x4ac>)
 80146cc:	0112      	lsls	r2, r2, #4
 80146ce:	4413      	add	r3, r2
 80146d0:	4602      	mov	r2, r0
 80146d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80146d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146da:	f103 031a 	add.w	r3, r3, #26
 80146de:	881b      	ldrh	r3, [r3, #0]
 80146e0:	3301      	adds	r3, #1
 80146e2:	b29a      	uxth	r2, r3
 80146e4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80146e8:	4611      	mov	r1, r2
 80146ea:	4618      	mov	r0, r3
 80146ec:	f000 f8a2 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80146f0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146f4:	f103 0318 	add.w	r3, r3, #24
 80146f8:	881a      	ldrh	r2, [r3, #0]
 80146fa:	f107 0308 	add.w	r3, r7, #8
 80146fe:	3b04      	subs	r3, #4
 8014700:	4611      	mov	r1, r2
 8014702:	4618      	mov	r0, r3
 8014704:	f000 f896 	bl	8014834 <pushStack_walk>
 8014708:	e004      	b.n	8014714 <create_StepCountMapBack_queue+0x4b0>
 801470a:	bf00      	nop
 801470c:	20000c30 	.word	0x20000c30
 8014710:	20000d24 	.word	0x20000d24
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014714:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014718:	f103 031a 	add.w	r3, r3, #26
 801471c:	881b      	ldrh	r3, [r3, #0]
 801471e:	1e5a      	subs	r2, r3, #1
 8014720:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014724:	f103 0318 	add.w	r3, r3, #24
 8014728:	881b      	ldrh	r3, [r3, #0]
 801472a:	4939      	ldr	r1, [pc, #228]	; (8014810 <create_StepCountMapBack_queue+0x5ac>)
 801472c:	0112      	lsls	r2, r2, #4
 801472e:	4413      	add	r3, r2
 8014730:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014734:	2bff      	cmp	r3, #255	; 0xff
 8014736:	d148      	bne.n	80147ca <create_StepCountMapBack_queue+0x566>
 8014738:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801473c:	f103 031a 	add.w	r3, r3, #26
 8014740:	881b      	ldrh	r3, [r3, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d041      	beq.n	80147ca <create_StepCountMapBack_queue+0x566>
 8014746:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801474a:	f103 031c 	add.w	r3, r3, #28
 801474e:	881b      	ldrh	r3, [r3, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d13a      	bne.n	80147ca <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014754:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014758:	f103 031a 	add.w	r3, r3, #26
 801475c:	881a      	ldrh	r2, [r3, #0]
 801475e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014762:	f103 0318 	add.w	r3, r3, #24
 8014766:	881b      	ldrh	r3, [r3, #0]
 8014768:	4929      	ldr	r1, [pc, #164]	; (8014810 <create_StepCountMapBack_queue+0x5ac>)
 801476a:	0112      	lsls	r2, r2, #4
 801476c:	4413      	add	r3, r2
 801476e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014772:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014776:	f103 031a 	add.w	r3, r3, #26
 801477a:	881b      	ldrh	r3, [r3, #0]
 801477c:	1e5a      	subs	r2, r3, #1
 801477e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014782:	f103 0318 	add.w	r3, r3, #24
 8014786:	881b      	ldrh	r3, [r3, #0]
 8014788:	3101      	adds	r1, #1
 801478a:	b288      	uxth	r0, r1
 801478c:	4920      	ldr	r1, [pc, #128]	; (8014810 <create_StepCountMapBack_queue+0x5ac>)
 801478e:	0112      	lsls	r2, r2, #4
 8014790:	4413      	add	r3, r2
 8014792:	4602      	mov	r2, r0
 8014794:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014798:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801479c:	f103 031a 	add.w	r3, r3, #26
 80147a0:	881b      	ldrh	r3, [r3, #0]
 80147a2:	3b01      	subs	r3, #1
 80147a4:	b29a      	uxth	r2, r3
 80147a6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f000 f841 	bl	8014834 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80147b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147b6:	f103 0318 	add.w	r3, r3, #24
 80147ba:	881a      	ldrh	r2, [r3, #0]
 80147bc:	f107 0308 	add.w	r3, r7, #8
 80147c0:	3b04      	subs	r3, #4
 80147c2:	4611      	mov	r1, r2
 80147c4:	4618      	mov	r0, r3
 80147c6:	f000 f835 	bl	8014834 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 80147ca:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147ce:	f103 031a 	add.w	r3, r3, #26
 80147d2:	881a      	ldrh	r2, [r3, #0]
 80147d4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147d8:	f103 0318 	add.w	r3, r3, #24
 80147dc:	881b      	ldrh	r3, [r3, #0]
 80147de:	490c      	ldr	r1, [pc, #48]	; (8014810 <create_StepCountMapBack_queue+0x5ac>)
 80147e0:	0112      	lsls	r2, r2, #4
 80147e2:	4413      	add	r3, r2
 80147e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80147e8:	3301      	adds	r3, #1
 80147ea:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147ee:	f102 0204 	add.w	r2, r2, #4
 80147f2:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80147f4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147f8:	f103 0304 	add.w	r3, r3, #4
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	2bfe      	cmp	r3, #254	; 0xfe
 8014800:	f67f adb2 	bls.w	8014368 <create_StepCountMapBack_queue+0x104>

		}

}
 8014804:	bf00      	nop
 8014806:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801480a:	3708      	adds	r7, #8
 801480c:	46bd      	mov	sp, r7
 801480e:	bd80      	pop	{r7, pc}
 8014810:	20000d24 	.word	0x20000d24

08014814 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014814:	b480      	push	{r7}
 8014816:	b083      	sub	sp, #12
 8014818:	af00      	add	r7, sp, #0
 801481a:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	2200      	movs	r2, #0
 8014820:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2200      	movs	r2, #0
 8014826:	605a      	str	r2, [r3, #4]
}
 8014828:	bf00      	nop
 801482a:	370c      	adds	r7, #12
 801482c:	46bd      	mov	sp, r7
 801482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014832:	4770      	bx	lr

08014834 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	685a      	ldr	r2, [r3, #4]
 8014844:	8879      	ldrh	r1, [r7, #2]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	3202      	adds	r2, #2
 801484a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	685b      	ldr	r3, [r3, #4]
 8014852:	1c5a      	adds	r2, r3, #1
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	685b      	ldr	r3, [r3, #4]
 801485c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014860:	d102      	bne.n	8014868 <pushStack_walk+0x34>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2200      	movs	r2, #0
 8014866:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	685a      	ldr	r2, [r3, #4]
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	429a      	cmp	r2, r3
 8014872:	d103      	bne.n	801487c <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014874:	4803      	ldr	r0, [pc, #12]	; (8014884 <pushStack_walk+0x50>)
 8014876:	f00c f849 	bl	802090c <puts>
        return;
 801487a:	bf00      	nop
    }
}
 801487c:	3708      	adds	r7, #8
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
 8014882:	bf00      	nop
 8014884:	0802426c 	.word	0x0802426c

08014888 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014888:	b480      	push	{r7}
 801488a:	b085      	sub	sp, #20
 801488c:	af00      	add	r7, sp, #0
 801488e:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014890:	2300      	movs	r3, #0
 8014892:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	685a      	ldr	r2, [r3, #4]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	429a      	cmp	r2, r3
 801489e:	d102      	bne.n	80148a6 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 80148a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148a4:	e014      	b.n	80148d0 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681a      	ldr	r2, [r3, #0]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	3202      	adds	r2, #2
 80148ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148b2:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	1c5a      	adds	r2, r3, #1
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80148c6:	d102      	bne.n	80148ce <popStack_walk+0x46>
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	2200      	movs	r2, #0
 80148cc:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 80148ce:	89fb      	ldrh	r3, [r7, #14]
}
 80148d0:	4618      	mov	r0, r3
 80148d2:	3714      	adds	r7, #20
 80148d4:	46bd      	mov	sp, r7
 80148d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148da:	4770      	bx	lr

080148dc <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 80148dc:	b580      	push	{r7, lr}
 80148de:	b082      	sub	sp, #8
 80148e0:	af00      	add	r7, sp, #0

	int tt = 14;
 80148e2:	230e      	movs	r3, #14
 80148e4:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80148e6:	2300      	movs	r3, #0
 80148e8:	603b      	str	r3, [r7, #0]

	printf(
 80148ea:	4881      	ldr	r0, [pc, #516]	; (8014af0 <maze_display+0x214>)
 80148ec:	f00c f80e 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80148f0:	230e      	movs	r3, #14
 80148f2:	607b      	str	r3, [r7, #4]
 80148f4:	e06e      	b.n	80149d4 <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	3301      	adds	r3, #1
 80148fa:	4a7e      	ldr	r2, [pc, #504]	; (8014af4 <maze_display+0x218>)
 80148fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014900:	4619      	mov	r1, r3
 8014902:	487d      	ldr	r0, [pc, #500]	; (8014af8 <maze_display+0x21c>)
 8014904:	f00b ff66 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014908:	2300      	movs	r3, #0
 801490a:	603b      	str	r3, [r7, #0]
 801490c:	e030      	b.n	8014970 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801490e:	4a7b      	ldr	r2, [pc, #492]	; (8014afc <maze_display+0x220>)
 8014910:	683b      	ldr	r3, [r7, #0]
 8014912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014916:	4619      	mov	r1, r3
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	3301      	adds	r3, #1
 801491c:	2201      	movs	r2, #1
 801491e:	fa02 f303 	lsl.w	r3, r2, r3
 8014922:	ea01 0203 	and.w	r2, r1, r3
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	3301      	adds	r3, #1
 801492a:	2101      	movs	r1, #1
 801492c:	fa01 f303 	lsl.w	r3, r1, r3
 8014930:	429a      	cmp	r2, r3
 8014932:	d10d      	bne.n	8014950 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	1c5a      	adds	r2, r3, #1
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	3301      	adds	r3, #1
 801493c:	496d      	ldr	r1, [pc, #436]	; (8014af4 <maze_display+0x218>)
 801493e:	0112      	lsls	r2, r2, #4
 8014940:	4413      	add	r3, r2
 8014942:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014946:	4619      	mov	r1, r3
 8014948:	486b      	ldr	r0, [pc, #428]	; (8014af8 <maze_display+0x21c>)
 801494a:	f00b ff43 	bl	80207d4 <iprintf>
 801494e:	e00c      	b.n	801496a <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	1c5a      	adds	r2, r3, #1
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	3301      	adds	r3, #1
 8014958:	4966      	ldr	r1, [pc, #408]	; (8014af4 <maze_display+0x218>)
 801495a:	0112      	lsls	r2, r2, #4
 801495c:	4413      	add	r3, r2
 801495e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014962:	4619      	mov	r1, r3
 8014964:	4866      	ldr	r0, [pc, #408]	; (8014b00 <maze_display+0x224>)
 8014966:	f00b ff35 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	3301      	adds	r3, #1
 801496e:	603b      	str	r3, [r7, #0]
 8014970:	683b      	ldr	r3, [r7, #0]
 8014972:	2b0e      	cmp	r3, #14
 8014974:	ddcb      	ble.n	801490e <maze_display+0x32>
			}
		}
		printf("|\n");
 8014976:	4863      	ldr	r0, [pc, #396]	; (8014b04 <maze_display+0x228>)
 8014978:	f00b ffc8 	bl	802090c <puts>
		if (tt <= -1) {
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	db2d      	blt.n	80149de <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014982:	2300      	movs	r3, #0
 8014984:	603b      	str	r3, [r7, #0]
 8014986:	e01c      	b.n	80149c2 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014988:	4a5c      	ldr	r2, [pc, #368]	; (8014afc <maze_display+0x220>)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	330c      	adds	r3, #12
 801498e:	005b      	lsls	r3, r3, #1
 8014990:	4413      	add	r3, r2
 8014992:	88db      	ldrh	r3, [r3, #6]
 8014994:	4619      	mov	r1, r3
 8014996:	2201      	movs	r2, #1
 8014998:	683b      	ldr	r3, [r7, #0]
 801499a:	fa02 f303 	lsl.w	r3, r2, r3
 801499e:	ea01 0203 	and.w	r2, r1, r3
 80149a2:	2101      	movs	r1, #1
 80149a4:	683b      	ldr	r3, [r7, #0]
 80149a6:	fa01 f303 	lsl.w	r3, r1, r3
 80149aa:	429a      	cmp	r2, r3
 80149ac:	d103      	bne.n	80149b6 <maze_display+0xda>
				printf("+-----");
 80149ae:	4856      	ldr	r0, [pc, #344]	; (8014b08 <maze_display+0x22c>)
 80149b0:	f00b ff10 	bl	80207d4 <iprintf>
 80149b4:	e002      	b.n	80149bc <maze_display+0xe0>
			}else{
				printf("+     ");
 80149b6:	4855      	ldr	r0, [pc, #340]	; (8014b0c <maze_display+0x230>)
 80149b8:	f00b ff0c 	bl	80207d4 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80149bc:	683b      	ldr	r3, [r7, #0]
 80149be:	3301      	adds	r3, #1
 80149c0:	603b      	str	r3, [r7, #0]
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	2b0f      	cmp	r3, #15
 80149c6:	dddf      	ble.n	8014988 <maze_display+0xac>
			}
		}

		printf("+\n");
 80149c8:	4851      	ldr	r0, [pc, #324]	; (8014b10 <maze_display+0x234>)
 80149ca:	f00b ff9f 	bl	802090c <puts>
	for (tt = 14;tt >= -1;tt--){
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	3b01      	subs	r3, #1
 80149d2:	607b      	str	r3, [r7, #4]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80149da:	da8c      	bge.n	80148f6 <maze_display+0x1a>
 80149dc:	e000      	b.n	80149e0 <maze_display+0x104>
			break;
 80149de:	bf00      	nop

	}

	printf(
 80149e0:	484c      	ldr	r0, [pc, #304]	; (8014b14 <maze_display+0x238>)
 80149e2:	f00b ff93 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80149e6:	4842      	ldr	r0, [pc, #264]	; (8014af0 <maze_display+0x214>)
 80149e8:	f00b ff90 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 80149ec:	230e      	movs	r3, #14
 80149ee:	607b      	str	r3, [r7, #4]
 80149f0:	e070      	b.n	8014ad4 <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	3301      	adds	r3, #1
 80149f6:	4a3f      	ldr	r2, [pc, #252]	; (8014af4 <maze_display+0x218>)
 80149f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149fc:	4619      	mov	r1, r3
 80149fe:	483e      	ldr	r0, [pc, #248]	; (8014af8 <maze_display+0x21c>)
 8014a00:	f00b fee8 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014a04:	2300      	movs	r3, #0
 8014a06:	603b      	str	r3, [r7, #0]
 8014a08:	e032      	b.n	8014a70 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014a0a:	4a3c      	ldr	r2, [pc, #240]	; (8014afc <maze_display+0x220>)
 8014a0c:	683b      	ldr	r3, [r7, #0]
 8014a0e:	331c      	adds	r3, #28
 8014a10:	005b      	lsls	r3, r3, #1
 8014a12:	4413      	add	r3, r2
 8014a14:	889b      	ldrh	r3, [r3, #4]
 8014a16:	4619      	mov	r1, r3
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	3301      	adds	r3, #1
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014a22:	ea01 0203 	and.w	r2, r1, r3
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	3301      	adds	r3, #1
 8014a2a:	2101      	movs	r1, #1
 8014a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d10d      	bne.n	8014a50 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	1c5a      	adds	r2, r3, #1
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	3301      	adds	r3, #1
 8014a3c:	492d      	ldr	r1, [pc, #180]	; (8014af4 <maze_display+0x218>)
 8014a3e:	0112      	lsls	r2, r2, #4
 8014a40:	4413      	add	r3, r2
 8014a42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a46:	4619      	mov	r1, r3
 8014a48:	482b      	ldr	r0, [pc, #172]	; (8014af8 <maze_display+0x21c>)
 8014a4a:	f00b fec3 	bl	80207d4 <iprintf>
 8014a4e:	e00c      	b.n	8014a6a <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	1c5a      	adds	r2, r3, #1
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	3301      	adds	r3, #1
 8014a58:	4926      	ldr	r1, [pc, #152]	; (8014af4 <maze_display+0x218>)
 8014a5a:	0112      	lsls	r2, r2, #4
 8014a5c:	4413      	add	r3, r2
 8014a5e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a62:	4619      	mov	r1, r3
 8014a64:	4826      	ldr	r0, [pc, #152]	; (8014b00 <maze_display+0x224>)
 8014a66:	f00b feb5 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	603b      	str	r3, [r7, #0]
 8014a70:	683b      	ldr	r3, [r7, #0]
 8014a72:	2b0e      	cmp	r3, #14
 8014a74:	ddc9      	ble.n	8014a0a <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014a76:	4823      	ldr	r0, [pc, #140]	; (8014b04 <maze_display+0x228>)
 8014a78:	f00b ff48 	bl	802090c <puts>
		if (tt <= -1) {
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	db2d      	blt.n	8014ade <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014a82:	2300      	movs	r3, #0
 8014a84:	603b      	str	r3, [r7, #0]
 8014a86:	e01c      	b.n	8014ac2 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014a88:	4a1c      	ldr	r2, [pc, #112]	; (8014afc <maze_display+0x220>)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	332c      	adds	r3, #44	; 0x2c
 8014a8e:	005b      	lsls	r3, r3, #1
 8014a90:	4413      	add	r3, r2
 8014a92:	885b      	ldrh	r3, [r3, #2]
 8014a94:	4619      	mov	r1, r3
 8014a96:	2201      	movs	r2, #1
 8014a98:	683b      	ldr	r3, [r7, #0]
 8014a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8014a9e:	ea01 0203 	and.w	r2, r1, r3
 8014aa2:	2101      	movs	r1, #1
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d103      	bne.n	8014ab6 <maze_display+0x1da>
				printf("+-----");
 8014aae:	4816      	ldr	r0, [pc, #88]	; (8014b08 <maze_display+0x22c>)
 8014ab0:	f00b fe90 	bl	80207d4 <iprintf>
 8014ab4:	e002      	b.n	8014abc <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014ab6:	4815      	ldr	r0, [pc, #84]	; (8014b0c <maze_display+0x230>)
 8014ab8:	f00b fe8c 	bl	80207d4 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	3301      	adds	r3, #1
 8014ac0:	603b      	str	r3, [r7, #0]
 8014ac2:	683b      	ldr	r3, [r7, #0]
 8014ac4:	2b0f      	cmp	r3, #15
 8014ac6:	dddf      	ble.n	8014a88 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014ac8:	4811      	ldr	r0, [pc, #68]	; (8014b10 <maze_display+0x234>)
 8014aca:	f00b ff1f 	bl	802090c <puts>
	for (tt = 14;tt >= -1;tt--){
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	3b01      	subs	r3, #1
 8014ad2:	607b      	str	r3, [r7, #4]
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ada:	da8a      	bge.n	80149f2 <maze_display+0x116>
 8014adc:	e000      	b.n	8014ae0 <maze_display+0x204>
			break;
 8014ade:	bf00      	nop
	}

	printf(
 8014ae0:	480c      	ldr	r0, [pc, #48]	; (8014b14 <maze_display+0x238>)
 8014ae2:	f00b ff13 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8014ae6:	bf00      	nop
 8014ae8:	3708      	adds	r7, #8
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	08024278 	.word	0x08024278
 8014af4:	20000d24 	.word	0x20000d24
 8014af8:	080242dc 	.word	0x080242dc
 8014afc:	20000c30 	.word	0x20000c30
 8014b00:	080242e4 	.word	0x080242e4
 8014b04:	080242ec 	.word	0x080242ec
 8014b08:	080242f0 	.word	0x080242f0
 8014b0c:	080242f8 	.word	0x080242f8
 8014b10:	08024300 	.word	0x08024300
 8014b14:	08024304 	.word	0x08024304

08014b18 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0

	int tt = 14;
 8014b1e:	230e      	movs	r3, #14
 8014b20:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014b22:	2300      	movs	r3, #0
 8014b24:	603b      	str	r3, [r7, #0]

	printf(
 8014b26:	4865      	ldr	r0, [pc, #404]	; (8014cbc <maze_display_Dijkstra+0x1a4>)
 8014b28:	f00b fef0 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014b2c:	230e      	movs	r3, #14
 8014b2e:	607b      	str	r3, [r7, #4]
 8014b30:	e06a      	b.n	8014c08 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 8014b32:	4863      	ldr	r0, [pc, #396]	; (8014cc0 <maze_display_Dijkstra+0x1a8>)
 8014b34:	f00b fe4e 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014b38:	2300      	movs	r3, #0
 8014b3a:	603b      	str	r3, [r7, #0]
 8014b3c:	e027      	b.n	8014b8e <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014b3e:	4a61      	ldr	r2, [pc, #388]	; (8014cc4 <maze_display_Dijkstra+0x1ac>)
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014b46:	4619      	mov	r1, r3
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	2201      	movs	r2, #1
 8014b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8014b52:	ea01 0203 	and.w	r2, r1, r3
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d103      	bne.n	8014b6c <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8014b64:	4858      	ldr	r0, [pc, #352]	; (8014cc8 <maze_display_Dijkstra+0x1b0>)
 8014b66:	f00b fe35 	bl	80207d4 <iprintf>
 8014b6a:	e00d      	b.n	8014b88 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	1c5a      	adds	r2, r3, #1
 8014b70:	4956      	ldr	r1, [pc, #344]	; (8014ccc <maze_display_Dijkstra+0x1b4>)
 8014b72:	4613      	mov	r3, r2
 8014b74:	011b      	lsls	r3, r3, #4
 8014b76:	1a9b      	subs	r3, r3, r2
 8014b78:	683a      	ldr	r2, [r7, #0]
 8014b7a:	4413      	add	r3, r2
 8014b7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b80:	4619      	mov	r1, r3
 8014b82:	4853      	ldr	r0, [pc, #332]	; (8014cd0 <maze_display_Dijkstra+0x1b8>)
 8014b84:	f00b fe26 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	3301      	adds	r3, #1
 8014b8c:	603b      	str	r3, [r7, #0]
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	2b0e      	cmp	r3, #14
 8014b92:	ddd4      	ble.n	8014b3e <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8014b94:	484f      	ldr	r0, [pc, #316]	; (8014cd4 <maze_display_Dijkstra+0x1bc>)
 8014b96:	f00b feb9 	bl	802090c <puts>
		if (tt <= -1) {
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	db38      	blt.n	8014c12 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	603b      	str	r3, [r7, #0]
 8014ba4:	e027      	b.n	8014bf6 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014ba6:	4a47      	ldr	r2, [pc, #284]	; (8014cc4 <maze_display_Dijkstra+0x1ac>)
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	330c      	adds	r3, #12
 8014bac:	005b      	lsls	r3, r3, #1
 8014bae:	4413      	add	r3, r2
 8014bb0:	88db      	ldrh	r3, [r3, #6]
 8014bb2:	4619      	mov	r1, r3
 8014bb4:	2201      	movs	r2, #1
 8014bb6:	683b      	ldr	r3, [r7, #0]
 8014bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8014bbc:	ea01 0203 	and.w	r2, r1, r3
 8014bc0:	2101      	movs	r1, #1
 8014bc2:	683b      	ldr	r3, [r7, #0]
 8014bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8014bc8:	429a      	cmp	r2, r3
 8014bca:	d103      	bne.n	8014bd4 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014bcc:	4842      	ldr	r0, [pc, #264]	; (8014cd8 <maze_display_Dijkstra+0x1c0>)
 8014bce:	f00b fe01 	bl	80207d4 <iprintf>
 8014bd2:	e00d      	b.n	8014bf0 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014bd4:	493d      	ldr	r1, [pc, #244]	; (8014ccc <maze_display_Dijkstra+0x1b4>)
 8014bd6:	683a      	ldr	r2, [r7, #0]
 8014bd8:	4613      	mov	r3, r2
 8014bda:	011b      	lsls	r3, r3, #4
 8014bdc:	1a9b      	subs	r3, r3, r2
 8014bde:	687a      	ldr	r2, [r7, #4]
 8014be0:	4413      	add	r3, r2
 8014be2:	33f0      	adds	r3, #240	; 0xf0
 8014be4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014be8:	4619      	mov	r1, r3
 8014bea:	483c      	ldr	r0, [pc, #240]	; (8014cdc <maze_display_Dijkstra+0x1c4>)
 8014bec:	f00b fdf2 	bl	80207d4 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014bf0:	683b      	ldr	r3, [r7, #0]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	603b      	str	r3, [r7, #0]
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	2b0f      	cmp	r3, #15
 8014bfa:	ddd4      	ble.n	8014ba6 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8014bfc:	4838      	ldr	r0, [pc, #224]	; (8014ce0 <maze_display_Dijkstra+0x1c8>)
 8014bfe:	f00b fe85 	bl	802090c <puts>
	for (tt = 14;tt >= -1;tt--){
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	3b01      	subs	r3, #1
 8014c06:	607b      	str	r3, [r7, #4]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c0e:	da90      	bge.n	8014b32 <maze_display_Dijkstra+0x1a>
 8014c10:	e000      	b.n	8014c14 <maze_display_Dijkstra+0xfc>
			break;
 8014c12:	bf00      	nop

	}

	printf(
 8014c14:	4833      	ldr	r0, [pc, #204]	; (8014ce4 <maze_display_Dijkstra+0x1cc>)
 8014c16:	f00b fe79 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014c1a:	4828      	ldr	r0, [pc, #160]	; (8014cbc <maze_display_Dijkstra+0x1a4>)
 8014c1c:	f00b fe76 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014c20:	230e      	movs	r3, #14
 8014c22:	607b      	str	r3, [r7, #4]
 8014c24:	e03c      	b.n	8014ca0 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8014c26:	4826      	ldr	r0, [pc, #152]	; (8014cc0 <maze_display_Dijkstra+0x1a8>)
 8014c28:	f00b fdd4 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	603b      	str	r3, [r7, #0]
 8014c30:	e010      	b.n	8014c54 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	1c5a      	adds	r2, r3, #1
 8014c36:	4925      	ldr	r1, [pc, #148]	; (8014ccc <maze_display_Dijkstra+0x1b4>)
 8014c38:	4613      	mov	r3, r2
 8014c3a:	011b      	lsls	r3, r3, #4
 8014c3c:	1a9b      	subs	r3, r3, r2
 8014c3e:	683a      	ldr	r2, [r7, #0]
 8014c40:	4413      	add	r3, r2
 8014c42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c46:	4619      	mov	r1, r3
 8014c48:	4821      	ldr	r0, [pc, #132]	; (8014cd0 <maze_display_Dijkstra+0x1b8>)
 8014c4a:	f00b fdc3 	bl	80207d4 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	3301      	adds	r3, #1
 8014c52:	603b      	str	r3, [r7, #0]
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	2b0e      	cmp	r3, #14
 8014c58:	ddeb      	ble.n	8014c32 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 8014c5a:	481e      	ldr	r0, [pc, #120]	; (8014cd4 <maze_display_Dijkstra+0x1bc>)
 8014c5c:	f00b fe56 	bl	802090c <puts>
		if (tt <= -1) {
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	db21      	blt.n	8014caa <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014c66:	2300      	movs	r3, #0
 8014c68:	603b      	str	r3, [r7, #0]
 8014c6a:	e010      	b.n	8014c8e <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014c6c:	4917      	ldr	r1, [pc, #92]	; (8014ccc <maze_display_Dijkstra+0x1b4>)
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	4613      	mov	r3, r2
 8014c72:	011b      	lsls	r3, r3, #4
 8014c74:	1a9b      	subs	r3, r3, r2
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	4413      	add	r3, r2
 8014c7a:	33f0      	adds	r3, #240	; 0xf0
 8014c7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c80:	4619      	mov	r1, r3
 8014c82:	4816      	ldr	r0, [pc, #88]	; (8014cdc <maze_display_Dijkstra+0x1c4>)
 8014c84:	f00b fda6 	bl	80207d4 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014c88:	683b      	ldr	r3, [r7, #0]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	603b      	str	r3, [r7, #0]
 8014c8e:	683b      	ldr	r3, [r7, #0]
 8014c90:	2b0f      	cmp	r3, #15
 8014c92:	ddeb      	ble.n	8014c6c <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 8014c94:	4812      	ldr	r0, [pc, #72]	; (8014ce0 <maze_display_Dijkstra+0x1c8>)
 8014c96:	f00b fe39 	bl	802090c <puts>
	for (tt = 14;tt >= -1;tt--){
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	3b01      	subs	r3, #1
 8014c9e:	607b      	str	r3, [r7, #4]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ca6:	dabe      	bge.n	8014c26 <maze_display_Dijkstra+0x10e>
 8014ca8:	e000      	b.n	8014cac <maze_display_Dijkstra+0x194>
			break;
 8014caa:	bf00      	nop

	}

	printf(
 8014cac:	480d      	ldr	r0, [pc, #52]	; (8014ce4 <maze_display_Dijkstra+0x1cc>)
 8014cae:	f00b fe2d 	bl	802090c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 8014cb2:	bf00      	nop
 8014cb4:	3708      	adds	r7, #8
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	08024278 	.word	0x08024278
 8014cc0:	08024368 	.word	0x08024368
 8014cc4:	20000c30 	.word	0x20000c30
 8014cc8:	08024370 	.word	0x08024370
 8014ccc:	20000f24 	.word	0x20000f24
 8014cd0:	08024378 	.word	0x08024378
 8014cd4:	08024380 	.word	0x08024380
 8014cd8:	080242f0 	.word	0x080242f0
 8014cdc:	08024388 	.word	0x08024388
 8014ce0:	08024300 	.word	0x08024300
 8014ce4:	08024304 	.word	0x08024304

08014ce8 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8014ce8:	b580      	push	{r7, lr}
 8014cea:	b084      	sub	sp, #16
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	4603      	mov	r3, r0
 8014cf0:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014cf2:	2300      	movs	r3, #0
 8014cf4:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 8014cfe:	4b71      	ldr	r3, [pc, #452]	; (8014ec4 <mode_decision+0x1dc>)
 8014d00:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8014d02:	79fb      	ldrb	r3, [r7, #7]
 8014d04:	f003 030f 	and.w	r3, r3, #15
 8014d08:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014d0a:	79fb      	ldrb	r3, [r7, #7]
 8014d0c:	091b      	lsrs	r3, r3, #4
 8014d0e:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014d10:	7bbb      	ldrb	r3, [r7, #14]
 8014d12:	011b      	lsls	r3, r3, #4
 8014d14:	b2da      	uxtb	r2, r3
 8014d16:	7bfb      	ldrb	r3, [r7, #15]
 8014d18:	4413      	add	r3, r2
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7f2 fad7 	bl	80072d0 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8014d22:	e07f      	b.n	8014e24 <mode_decision+0x13c>
				HAL_Delay(1);
 8014d24:	2001      	movs	r0, #1
 8014d26:	f003 fe03 	bl	8018930 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8014d2a:	4b67      	ldr	r3, [pc, #412]	; (8014ec8 <mode_decision+0x1e0>)
 8014d2c:	edd3 7a00 	vldr	s15, [r3]
 8014d30:	ed97 7a02 	vldr	s14, [r7, #8]
 8014d34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d3c:	d813      	bhi.n	8014d66 <mode_decision+0x7e>
					if (main_modeR == 15) {
 8014d3e:	7bfb      	ldrb	r3, [r7, #15]
 8014d40:	2b0f      	cmp	r3, #15
 8014d42:	d102      	bne.n	8014d4a <mode_decision+0x62>
						main_modeR = 0;
 8014d44:	2300      	movs	r3, #0
 8014d46:	73fb      	strb	r3, [r7, #15]
 8014d48:	e002      	b.n	8014d50 <mode_decision+0x68>
					} else {
						main_modeR++;
 8014d4a:	7bfb      	ldrb	r3, [r7, #15]
 8014d4c:	3301      	adds	r3, #1
 8014d4e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014d50:	f7ec f924 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014d54:	7bbb      	ldrb	r3, [r7, #14]
 8014d56:	011b      	lsls	r3, r3, #4
 8014d58:	b2da      	uxtb	r2, r3
 8014d5a:	7bfb      	ldrb	r3, [r7, #15]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7f2 fab5 	bl	80072d0 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8014d66:	edd7 7a02 	vldr	s15, [r7, #8]
 8014d6a:	eeb1 7a67 	vneg.f32	s14, s15
 8014d6e:	4b56      	ldr	r3, [pc, #344]	; (8014ec8 <mode_decision+0x1e0>)
 8014d70:	edd3 7a00 	vldr	s15, [r3]
 8014d74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d7c:	db13      	blt.n	8014da6 <mode_decision+0xbe>
					if (main_modeR == 0) {
 8014d7e:	7bfb      	ldrb	r3, [r7, #15]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d102      	bne.n	8014d8a <mode_decision+0xa2>
						main_modeR = 15;
 8014d84:	230f      	movs	r3, #15
 8014d86:	73fb      	strb	r3, [r7, #15]
 8014d88:	e002      	b.n	8014d90 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8014d8a:	7bfb      	ldrb	r3, [r7, #15]
 8014d8c:	3b01      	subs	r3, #1
 8014d8e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8014d90:	f7ec f904 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014d94:	7bbb      	ldrb	r3, [r7, #14]
 8014d96:	011b      	lsls	r3, r3, #4
 8014d98:	b2da      	uxtb	r2, r3
 8014d9a:	7bfb      	ldrb	r3, [r7, #15]
 8014d9c:	4413      	add	r3, r2
 8014d9e:	b2db      	uxtb	r3, r3
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7f2 fa95 	bl	80072d0 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014da6:	4b49      	ldr	r3, [pc, #292]	; (8014ecc <mode_decision+0x1e4>)
 8014da8:	edd3 7a00 	vldr	s15, [r3]
 8014dac:	ed97 7a02 	vldr	s14, [r7, #8]
 8014db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014db8:	d813      	bhi.n	8014de2 <mode_decision+0xfa>
					if (main_modeL == 15) {
 8014dba:	7bbb      	ldrb	r3, [r7, #14]
 8014dbc:	2b0f      	cmp	r3, #15
 8014dbe:	d102      	bne.n	8014dc6 <mode_decision+0xde>
						main_modeL = 0;
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	73bb      	strb	r3, [r7, #14]
 8014dc4:	e002      	b.n	8014dcc <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014dc6:	7bbb      	ldrb	r3, [r7, #14]
 8014dc8:	3301      	adds	r3, #1
 8014dca:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014dcc:	f7ec f8e6 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014dd0:	7bbb      	ldrb	r3, [r7, #14]
 8014dd2:	011b      	lsls	r3, r3, #4
 8014dd4:	b2da      	uxtb	r2, r3
 8014dd6:	7bfb      	ldrb	r3, [r7, #15]
 8014dd8:	4413      	add	r3, r2
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	4618      	mov	r0, r3
 8014dde:	f7f2 fa77 	bl	80072d0 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8014de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8014de6:	eeb1 7a67 	vneg.f32	s14, s15
 8014dea:	4b38      	ldr	r3, [pc, #224]	; (8014ecc <mode_decision+0x1e4>)
 8014dec:	edd3 7a00 	vldr	s15, [r3]
 8014df0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014df8:	da00      	bge.n	8014dfc <mode_decision+0x114>
 8014dfa:	e013      	b.n	8014e24 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8014dfc:	7bbb      	ldrb	r3, [r7, #14]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d102      	bne.n	8014e08 <mode_decision+0x120>
						main_modeL = 15;
 8014e02:	230f      	movs	r3, #15
 8014e04:	73bb      	strb	r3, [r7, #14]
 8014e06:	e002      	b.n	8014e0e <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014e08:	7bbb      	ldrb	r3, [r7, #14]
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014e0e:	f7ec f8c5 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8014e12:	7bbb      	ldrb	r3, [r7, #14]
 8014e14:	011b      	lsls	r3, r3, #4
 8014e16:	b2da      	uxtb	r2, r3
 8014e18:	7bfb      	ldrb	r3, [r7, #15]
 8014e1a:	4413      	add	r3, r2
 8014e1c:	b2db      	uxtb	r3, r3
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f7f2 fa56 	bl	80072d0 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014e24:	4b2a      	ldr	r3, [pc, #168]	; (8014ed0 <mode_decision+0x1e8>)
 8014e26:	edd3 7a00 	vldr	s15, [r3]
 8014e2a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8014ed4 <mode_decision+0x1ec>
 8014e2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e36:	f67f af75 	bls.w	8014d24 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8014e3a:	f7f2 fa0f 	bl	800725c <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8014e3e:	2001      	movs	r0, #1
 8014e40:	f7f2 faf6 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014e44:	2001      	movs	r0, #1
 8014e46:	f7f2 fb05 	bl	8007454 <pl_l_blue_LED>
			HAL_Delay(1000);
 8014e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014e4e:	f003 fd6f 	bl	8018930 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014e52:	e011      	b.n	8014e78 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8014e54:	4b1e      	ldr	r3, [pc, #120]	; (8014ed0 <mode_decision+0x1e8>)
 8014e56:	edd3 7a00 	vldr	s15, [r3]
 8014e5a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8014ed4 <mode_decision+0x1ec>
 8014e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e66:	db04      	blt.n	8014e72 <mode_decision+0x18a>
					main_modeL = 0;
 8014e68:	2300      	movs	r3, #0
 8014e6a:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	73fb      	strb	r3, [r7, #15]
					break;
 8014e70:	e013      	b.n	8014e9a <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8014e72:	2001      	movs	r0, #1
 8014e74:	f003 fd5c 	bl	8018930 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8014e78:	4b17      	ldr	r3, [pc, #92]	; (8014ed8 <mode_decision+0x1f0>)
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014e80:	dde8      	ble.n	8014e54 <mode_decision+0x16c>
 8014e82:	4b15      	ldr	r3, [pc, #84]	; (8014ed8 <mode_decision+0x1f0>)
 8014e84:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014e88:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014e8c:	dde2      	ble.n	8014e54 <mode_decision+0x16c>
 8014e8e:	4b12      	ldr	r3, [pc, #72]	; (8014ed8 <mode_decision+0x1f0>)
 8014e90:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014e94:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014e98:	dddc      	ble.n	8014e54 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8014e9a:	2000      	movs	r0, #0
 8014e9c:	f7f2 fac8 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014ea0:	2000      	movs	r0, #0
 8014ea2:	f7f2 fad7 	bl	8007454 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8014ea6:	f7f2 f9d9 	bl	800725c <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8014eaa:	7bbb      	ldrb	r3, [r7, #14]
 8014eac:	011b      	lsls	r3, r3, #4
 8014eae:	b25a      	sxtb	r2, r3
 8014eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014eb4:	4313      	orrs	r3, r2
 8014eb6:	b25b      	sxtb	r3, r3
 8014eb8:	737b      	strb	r3, [r7, #13]

return main_mode;
 8014eba:	7b7b      	ldrb	r3, [r7, #13]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3710      	adds	r7, #16
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	41200000 	.word	0x41200000
 8014ec8:	20000224 	.word	0x20000224
 8014ecc:	20000220 	.word	0x20000220
 8014ed0:	20000274 	.word	0x20000274
 8014ed4:	43c80000 	.word	0x43c80000
 8014ed8:	200002bc 	.word	0x200002bc

08014edc <mode_execution>:


void mode_execution(unsigned char now_mode){
 8014edc:	b590      	push	{r4, r7, lr}
 8014ede:	b0d7      	sub	sp, #348	; 0x15c
 8014ee0:	af52      	add	r7, sp, #328	; 0x148
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014eea:	2300      	movs	r3, #0
 8014eec:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8014eee:	79fb      	ldrb	r3, [r7, #7]
 8014ef0:	f003 030f 	and.w	r3, r3, #15
 8014ef4:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014ef6:	79fb      	ldrb	r3, [r7, #7]
 8014ef8:	091b      	lsrs	r3, r3, #4
 8014efa:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8014efc:	7bbb      	ldrb	r3, [r7, #14]
 8014efe:	2b0f      	cmp	r3, #15
 8014f00:	f200 809e 	bhi.w	8015040 <mode_execution+0x164>
 8014f04:	a201      	add	r2, pc, #4	; (adr r2, 8014f0c <mode_execution+0x30>)
 8014f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f0a:	bf00      	nop
 8014f0c:	08014f4d 	.word	0x08014f4d
 8014f10:	08014f57 	.word	0x08014f57
 8014f14:	0801503f 	.word	0x0801503f
 8014f18:	08014f61 	.word	0x08014f61
 8014f1c:	08014f6b 	.word	0x08014f6b
 8014f20:	08014f75 	.word	0x08014f75
 8014f24:	08014fa5 	.word	0x08014fa5
 8014f28:	08014faf 	.word	0x08014faf
 8014f2c:	08014fdf 	.word	0x08014fdf
 8014f30:	0801500f 	.word	0x0801500f
 8014f34:	0801503f 	.word	0x0801503f
 8014f38:	0801503f 	.word	0x0801503f
 8014f3c:	0801503f 	.word	0x0801503f
 8014f40:	0801503f 	.word	0x0801503f
 8014f44:	0801503f 	.word	0x0801503f
 8014f48:	0801503f 	.word	0x0801503f
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8014f4c:	7bfb      	ldrb	r3, [r7, #15]
 8014f4e:	4618      	mov	r0, r3
 8014f50:	f000 f886 	bl	8015060 <mode_PLtest>
	break;
 8014f54:	e074      	b.n	8015040 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8014f56:	7bfb      	ldrb	r3, [r7, #15]
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f000 fa41 	bl	80153e0 <mode_Running>
	break;
 8014f5e:	e06f      	b.n	8015040 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8014f60:	7bfb      	ldrb	r3, [r7, #15]
 8014f62:	4618      	mov	r0, r3
 8014f64:	f000 fc6a 	bl	801583c <mode_Tuning0>
	break;
 8014f68:	e06a      	b.n	8015040 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8014f6a:	7bfb      	ldrb	r3, [r7, #15]
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	f000 fffd 	bl	8015f6c <mode_WallSensorTuning>
	break;
 8014f72:	e065      	b.n	8015040 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8014f74:	7bfb      	ldrb	r3, [r7, #15]
 8014f76:	4c34      	ldr	r4, [pc, #208]	; (8015048 <mode_execution+0x16c>)
 8014f78:	2201      	movs	r2, #1
 8014f7a:	9251      	str	r2, [sp, #324]	; 0x144
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	9250      	str	r2, [sp, #320]	; 0x140
 8014f80:	2201      	movs	r2, #1
 8014f82:	924f      	str	r2, [sp, #316]	; 0x13c
 8014f84:	934e      	str	r3, [sp, #312]	; 0x138
 8014f86:	4668      	mov	r0, sp
 8014f88:	f104 0310 	add.w	r3, r4, #16
 8014f8c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014f90:	4619      	mov	r1, r3
 8014f92:	f00a ff9f 	bl	801fed4 <memcpy>
 8014f96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014f9a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801504c <mode_execution+0x170>
 8014f9e:	f7f8 fc83 	bl	800d8a8 <testturning>
	break;
 8014fa2:	e04d      	b.n	8015040 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8014fa4:	7bfb      	ldrb	r3, [r7, #15]
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f001 fa18 	bl	80163dc <mode_WallSensorTuning_fast>
	break;
 8014fac:	e048      	b.n	8015040 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8014fae:	7bfb      	ldrb	r3, [r7, #15]
 8014fb0:	4c27      	ldr	r4, [pc, #156]	; (8015050 <mode_execution+0x174>)
 8014fb2:	2201      	movs	r2, #1
 8014fb4:	9251      	str	r2, [sp, #324]	; 0x144
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	9250      	str	r2, [sp, #320]	; 0x140
 8014fba:	2201      	movs	r2, #1
 8014fbc:	924f      	str	r2, [sp, #316]	; 0x13c
 8014fbe:	934e      	str	r3, [sp, #312]	; 0x138
 8014fc0:	4668      	mov	r0, sp
 8014fc2:	f104 0310 	add.w	r3, r4, #16
 8014fc6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014fca:	4619      	mov	r1, r3
 8014fcc:	f00a ff82 	bl	801fed4 <memcpy>
 8014fd0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014fd4:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015054 <mode_execution+0x178>
 8014fd8:	f7f8 fc66 	bl	800d8a8 <testturning>
	break;
 8014fdc:	e030      	b.n	8015040 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8014fde:	7bfb      	ldrb	r3, [r7, #15]
 8014fe0:	4c1d      	ldr	r4, [pc, #116]	; (8015058 <mode_execution+0x17c>)
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	9251      	str	r2, [sp, #324]	; 0x144
 8014fe6:	2201      	movs	r2, #1
 8014fe8:	9250      	str	r2, [sp, #320]	; 0x140
 8014fea:	2201      	movs	r2, #1
 8014fec:	924f      	str	r2, [sp, #316]	; 0x13c
 8014fee:	934e      	str	r3, [sp, #312]	; 0x138
 8014ff0:	4668      	mov	r0, sp
 8014ff2:	f104 0310 	add.w	r3, r4, #16
 8014ff6:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014ffa:	4619      	mov	r1, r3
 8014ffc:	f00a ff6a 	bl	801fed4 <memcpy>
 8015000:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015004:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015054 <mode_execution+0x178>
 8015008:	f7f8 fc4e 	bl	800d8a8 <testturning>
	break;
 801500c:	e018      	b.n	8015040 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 801500e:	7bfb      	ldrb	r3, [r7, #15]
 8015010:	4c12      	ldr	r4, [pc, #72]	; (801505c <mode_execution+0x180>)
 8015012:	2201      	movs	r2, #1
 8015014:	9251      	str	r2, [sp, #324]	; 0x144
 8015016:	2201      	movs	r2, #1
 8015018:	9250      	str	r2, [sp, #320]	; 0x140
 801501a:	2201      	movs	r2, #1
 801501c:	924f      	str	r2, [sp, #316]	; 0x13c
 801501e:	934e      	str	r3, [sp, #312]	; 0x138
 8015020:	4668      	mov	r0, sp
 8015022:	f104 0310 	add.w	r3, r4, #16
 8015026:	f44f 729c 	mov.w	r2, #312	; 0x138
 801502a:	4619      	mov	r1, r3
 801502c:	f00a ff52 	bl	801fed4 <memcpy>
 8015030:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015034:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015054 <mode_execution+0x178>
 8015038:	f7f8 fc36 	bl	800d8a8 <testturning>
	break;
 801503c:	e000      	b.n	8015040 <mode_execution+0x164>
	break;
 801503e:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015040:	bf00      	nop
 8015042:	3714      	adds	r7, #20
 8015044:	46bd      	mov	sp, r7
 8015046:	bd90      	pop	{r4, r7, pc}
 8015048:	2000f34c 	.word	0x2000f34c
 801504c:	3f028f5c 	.word	0x3f028f5c
 8015050:	2000f494 	.word	0x2000f494
 8015054:	3f7d70a4 	.word	0x3f7d70a4
 8015058:	2000f5dc 	.word	0x2000f5dc
 801505c:	2000f724 	.word	0x2000f724

08015060 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015064:	b092      	sub	sp, #72	; 0x48
 8015066:	af0a      	add	r7, sp, #40	; 0x28
 8015068:	4603      	mov	r3, r0
 801506a:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 801506c:	2300      	movs	r3, #0
 801506e:	61fb      	str	r3, [r7, #28]
 8015070:	2300      	movs	r3, #0
 8015072:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015074:	7dfb      	ldrb	r3, [r7, #23]
 8015076:	2b0f      	cmp	r3, #15
 8015078:	f200 819f 	bhi.w	80153ba <mode_PLtest+0x35a>
 801507c:	a201      	add	r2, pc, #4	; (adr r2, 8015084 <mode_PLtest+0x24>)
 801507e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015082:	bf00      	nop
 8015084:	080153b9 	.word	0x080153b9
 8015088:	080150c5 	.word	0x080150c5
 801508c:	080150f7 	.word	0x080150f7
 8015090:	08015173 	.word	0x08015173
 8015094:	080151d7 	.word	0x080151d7
 8015098:	08015257 	.word	0x08015257
 801509c:	0801525d 	.word	0x0801525d
 80150a0:	080153bb 	.word	0x080153bb
 80150a4:	080153bb 	.word	0x080153bb
 80150a8:	080152e3 	.word	0x080152e3
 80150ac:	0801534b 	.word	0x0801534b
 80150b0:	080153bb 	.word	0x080153bb
 80150b4:	080153bb 	.word	0x080153bb
 80150b8:	080153bb 	.word	0x080153bb
 80150bc:	080153bb 	.word	0x080153bb
 80150c0:	080153b3 	.word	0x080153b3
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80150c4:	4bbf      	ldr	r3, [pc, #764]	; (80153c4 <mode_PLtest+0x364>)
 80150c6:	6819      	ldr	r1, [r3, #0]
 80150c8:	4bbe      	ldr	r3, [pc, #760]	; (80153c4 <mode_PLtest+0x364>)
 80150ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80150cc:	4bbd      	ldr	r3, [pc, #756]	; (80153c4 <mode_PLtest+0x364>)
 80150ce:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 80150d2:	4bbc      	ldr	r3, [pc, #752]	; (80153c4 <mode_PLtest+0x364>)
 80150d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80150d8:	4aba      	ldr	r2, [pc, #744]	; (80153c4 <mode_PLtest+0x364>)
 80150da:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 80150de:	9201      	str	r2, [sp, #4]
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	4623      	mov	r3, r4
 80150e4:	4602      	mov	r2, r0
 80150e6:	48b8      	ldr	r0, [pc, #736]	; (80153c8 <mode_PLtest+0x368>)
 80150e8:	f00b fb74 	bl	80207d4 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 80150ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80150f0:	f7f3 f92e 	bl	8008350 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80150f4:	e7e6      	b.n	80150c4 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 80150f6:	2001      	movs	r0, #1
 80150f8:	f7f2 f99a 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80150fc:	2001      	movs	r0, #1
 80150fe:	f7f2 f9a9 	bl	8007454 <pl_l_blue_LED>
		record_mode = 1;
 8015102:	4bb2      	ldr	r3, [pc, #712]	; (80153cc <mode_PLtest+0x36c>)
 8015104:	2201      	movs	r2, #1
 8015106:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015108:	f44f 7161 	mov.w	r1, #900	; 0x384
 801510c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015110:	f7f2 fea6 	bl	8007e60 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8015114:	2001      	movs	r0, #1
 8015116:	f7f2 fe61 	bl	8007ddc <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 801511a:	2001      	movs	r0, #1
 801511c:	f7f2 fe36 	bl	8007d8c <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015120:	f7f2 fe82 	bl	8007e28 <pl_DriveMotor_start>
		wait_ms(2500);
 8015124:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015128:	f7f3 f912 	bl	8008350 <wait_ms>
		pl_DriveMotor_stop();
 801512c:	f7f2 fe8a 	bl	8007e44 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015130:	2000      	movs	r0, #0
 8015132:	f7f2 f97d 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015136:	2000      	movs	r0, #0
 8015138:	f7f2 f98c 	bl	8007454 <pl_l_blue_LED>
		record_mode = 0;
 801513c:	4ba3      	ldr	r3, [pc, #652]	; (80153cc <mode_PLtest+0x36c>)
 801513e:	2200      	movs	r2, #0
 8015140:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015142:	e002      	b.n	801514a <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015144:	2001      	movs	r0, #1
 8015146:	f7f3 f903 	bl	8008350 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801514a:	4b9e      	ldr	r3, [pc, #632]	; (80153c4 <mode_PLtest+0x364>)
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015152:	ddf7      	ble.n	8015144 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015154:	4b9b      	ldr	r3, [pc, #620]	; (80153c4 <mode_PLtest+0x364>)
 8015156:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801515a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801515e:	ddf1      	ble.n	8015144 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015160:	4b98      	ldr	r3, [pc, #608]	; (80153c4 <mode_PLtest+0x364>)
 8015162:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015166:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801516a:	ddeb      	ble.n	8015144 <mode_PLtest+0xe4>
		}
		record_print();
 801516c:	f001 fc26 	bl	80169bc <record_print>
		break;
 8015170:	e123      	b.n	80153ba <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8015172:	f7ec fd21 	bl	8001bb8 <reset_gyro>
		reset_speed();
 8015176:	f7eb ff55 	bl	8001024 <reset_speed>
		pl_r_blue_LED(ON);
 801517a:	2001      	movs	r0, #1
 801517c:	f7f2 f958 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015180:	2001      	movs	r0, #1
 8015182:	f7f2 f967 	bl	8007454 <pl_l_blue_LED>
		record_mode = 2;
 8015186:	4b91      	ldr	r3, [pc, #580]	; (80153cc <mode_PLtest+0x36c>)
 8015188:	2202      	movs	r2, #2
 801518a:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 801518c:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015190:	f7f3 f8de 	bl	8008350 <wait_ms>
		pl_r_blue_LED(OFF);
 8015194:	2000      	movs	r0, #0
 8015196:	f7f2 f94b 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801519a:	2000      	movs	r0, #0
 801519c:	f7f2 f95a 	bl	8007454 <pl_l_blue_LED>
		record_mode = 0;
 80151a0:	4b8a      	ldr	r3, [pc, #552]	; (80153cc <mode_PLtest+0x36c>)
 80151a2:	2200      	movs	r2, #0
 80151a4:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80151a6:	e002      	b.n	80151ae <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80151a8:	2001      	movs	r0, #1
 80151aa:	f7f3 f8d1 	bl	8008350 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80151ae:	4b85      	ldr	r3, [pc, #532]	; (80153c4 <mode_PLtest+0x364>)
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80151b6:	ddf7      	ble.n	80151a8 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 80151b8:	4b82      	ldr	r3, [pc, #520]	; (80153c4 <mode_PLtest+0x364>)
 80151ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80151be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80151c2:	ddf1      	ble.n	80151a8 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 80151c4:	4b7f      	ldr	r3, [pc, #508]	; (80153c4 <mode_PLtest+0x364>)
 80151c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80151ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80151ce:	ddeb      	ble.n	80151a8 <mode_PLtest+0x148>
		}
		record_print();
 80151d0:	f001 fbf4 	bl	80169bc <record_print>
		break;
 80151d4:	e0f1      	b.n	80153ba <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80151d6:	4b7e      	ldr	r3, [pc, #504]	; (80153d0 <mode_PLtest+0x370>)
 80151d8:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80151da:	4618      	mov	r0, r3
 80151dc:	f7eb f9dc 	bl	8000598 <__aeabi_f2d>
 80151e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80151e4:	4b7a      	ldr	r3, [pc, #488]	; (80153d0 <mode_PLtest+0x370>)
 80151e6:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7eb f9d5 	bl	8000598 <__aeabi_f2d>
 80151ee:	4604      	mov	r4, r0
 80151f0:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80151f2:	4b77      	ldr	r3, [pc, #476]	; (80153d0 <mode_PLtest+0x370>)
 80151f4:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7eb f9ce 	bl	8000598 <__aeabi_f2d>
 80151fc:	4680      	mov	r8, r0
 80151fe:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015200:	4b73      	ldr	r3, [pc, #460]	; (80153d0 <mode_PLtest+0x370>)
 8015202:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015204:	4618      	mov	r0, r3
 8015206:	f7eb f9c7 	bl	8000598 <__aeabi_f2d>
 801520a:	4682      	mov	sl, r0
 801520c:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801520e:	4b70      	ldr	r3, [pc, #448]	; (80153d0 <mode_PLtest+0x370>)
 8015210:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015212:	4618      	mov	r0, r3
 8015214:	f7eb f9c0 	bl	8000598 <__aeabi_f2d>
 8015218:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801521c:	4b6c      	ldr	r3, [pc, #432]	; (80153d0 <mode_PLtest+0x370>)
 801521e:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015220:	4618      	mov	r0, r3
 8015222:	f7eb f9b9 	bl	8000598 <__aeabi_f2d>
 8015226:	4602      	mov	r2, r0
 8015228:	460b      	mov	r3, r1
 801522a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801522e:	ed97 7b00 	vldr	d7, [r7]
 8015232:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015236:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801523a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801523e:	e9cd 4500 	strd	r4, r5, [sp]
 8015242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015246:	4863      	ldr	r0, [pc, #396]	; (80153d4 <mode_PLtest+0x374>)
 8015248:	f00b fac4 	bl	80207d4 <iprintf>
			wait_ms(500);
 801524c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015250:	f7f3 f87e 	bl	8008350 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015254:	e7bf      	b.n	80151d6 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8015256:	f7f2 fa3b 	bl	80076d0 <test_flash>
		break;
 801525a:	e0ae      	b.n	80153ba <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 801525c:	4b5b      	ldr	r3, [pc, #364]	; (80153cc <mode_PLtest+0x36c>)
 801525e:	2206      	movs	r2, #6
 8015260:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8015262:	2001      	movs	r0, #1
 8015264:	f7f2 f8e4 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015268:	2001      	movs	r0, #1
 801526a:	f7f2 f8f3 	bl	8007454 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 801526e:	f107 0218 	add.w	r2, r7, #24
 8015272:	f107 031c 	add.w	r3, r7, #28
 8015276:	4611      	mov	r1, r2
 8015278:	4618      	mov	r0, r3
 801527a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 801527e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015282:	f7ec ffff 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	69ba      	ldr	r2, [r7, #24]
 801528a:	4611      	mov	r1, r2
 801528c:	4618      	mov	r0, r3
 801528e:	f7f2 fde7 	bl	8007e60 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8015292:	f7f2 fdc9 	bl	8007e28 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015296:	e00a      	b.n	80152ae <mode_PLtest+0x24e>
			wait_ms(1);
 8015298:	2001      	movs	r0, #1
 801529a:	f7f3 f859 	bl	8008350 <wait_ms>
			if(record_rupe_flag==1){
 801529e:	4b4e      	ldr	r3, [pc, #312]	; (80153d8 <mode_PLtest+0x378>)
 80152a0:	781b      	ldrb	r3, [r3, #0]
 80152a2:	2b01      	cmp	r3, #1
 80152a4:	d103      	bne.n	80152ae <mode_PLtest+0x24e>
				record_mode=0;
 80152a6:	4b49      	ldr	r3, [pc, #292]	; (80153cc <mode_PLtest+0x36c>)
 80152a8:	2200      	movs	r2, #0
 80152aa:	701a      	strb	r2, [r3, #0]
				break;
 80152ac:	e010      	b.n	80152d0 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80152ae:	4b45      	ldr	r3, [pc, #276]	; (80153c4 <mode_PLtest+0x364>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80152b6:	ddef      	ble.n	8015298 <mode_PLtest+0x238>
 80152b8:	4b42      	ldr	r3, [pc, #264]	; (80153c4 <mode_PLtest+0x364>)
 80152ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80152be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80152c2:	dde9      	ble.n	8015298 <mode_PLtest+0x238>
 80152c4:	4b3f      	ldr	r3, [pc, #252]	; (80153c4 <mode_PLtest+0x364>)
 80152c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80152ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80152ce:	dde3      	ble.n	8015298 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 80152d0:	f7f2 fdb8 	bl	8007e44 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80152d4:	2000      	movs	r0, #0
 80152d6:	f7f2 f8ab 	bl	8007430 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80152da:	2000      	movs	r0, #0
 80152dc:	f7f2 f8ba 	bl	8007454 <pl_l_blue_LED>

		break;
 80152e0:	e06b      	b.n	80153ba <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 80152e2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80152e6:	f7f2 fde5 	bl	8007eb4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80152ea:	f7f2 fdcf 	bl	8007e8c <pl_FunMotor_start>
			HAL_Delay(2000);
 80152ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80152f2:	f003 fb1d 	bl	8018930 <HAL_Delay>
			reset_gyro();
 80152f6:	f7ec fc5f 	bl	8001bb8 <reset_gyro>
			reset_speed();
 80152fa:	f7eb fe93 	bl	8001024 <reset_speed>
			clear_Ierror();
 80152fe:	f7ef fba7 	bl	8004a50 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015302:	2001      	movs	r0, #1
 8015304:	f7f2 f894 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015308:	2001      	movs	r0, #1
 801530a:	f7f2 f8a3 	bl	8007454 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801530e:	e002      	b.n	8015316 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8015310:	2001      	movs	r0, #1
 8015312:	f003 fb0d 	bl	8018930 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015316:	4b2b      	ldr	r3, [pc, #172]	; (80153c4 <mode_PLtest+0x364>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801531e:	ddf7      	ble.n	8015310 <mode_PLtest+0x2b0>
 8015320:	4b28      	ldr	r3, [pc, #160]	; (80153c4 <mode_PLtest+0x364>)
 8015322:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015326:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801532a:	ddf1      	ble.n	8015310 <mode_PLtest+0x2b0>
 801532c:	4b25      	ldr	r3, [pc, #148]	; (80153c4 <mode_PLtest+0x364>)
 801532e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015332:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015336:	ddeb      	ble.n	8015310 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015338:	2000      	movs	r0, #0
 801533a:	f7f2 f879 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801533e:	2000      	movs	r0, #0
 8015340:	f7f2 f888 	bl	8007454 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015344:	f7f2 fdac 	bl	8007ea0 <pl_FunMotor_stop>
		break;
 8015348:	e037      	b.n	80153ba <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 801534a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80153dc <mode_PLtest+0x37c>
 801534e:	f7f2 fdb1 	bl	8007eb4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015352:	f7f2 fd9b 	bl	8007e8c <pl_FunMotor_start>
			HAL_Delay(2000);
 8015356:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801535a:	f003 fae9 	bl	8018930 <HAL_Delay>
			reset_gyro();
 801535e:	f7ec fc2b 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8015362:	f7eb fe5f 	bl	8001024 <reset_speed>
			clear_Ierror();
 8015366:	f7ef fb73 	bl	8004a50 <clear_Ierror>
			pl_r_blue_LED(ON);
 801536a:	2001      	movs	r0, #1
 801536c:	f7f2 f860 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015370:	2001      	movs	r0, #1
 8015372:	f7f2 f86f 	bl	8007454 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015376:	e002      	b.n	801537e <mode_PLtest+0x31e>
				HAL_Delay(1);
 8015378:	2001      	movs	r0, #1
 801537a:	f003 fad9 	bl	8018930 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801537e:	4b11      	ldr	r3, [pc, #68]	; (80153c4 <mode_PLtest+0x364>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015386:	ddf7      	ble.n	8015378 <mode_PLtest+0x318>
 8015388:	4b0e      	ldr	r3, [pc, #56]	; (80153c4 <mode_PLtest+0x364>)
 801538a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801538e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015392:	ddf1      	ble.n	8015378 <mode_PLtest+0x318>
 8015394:	4b0b      	ldr	r3, [pc, #44]	; (80153c4 <mode_PLtest+0x364>)
 8015396:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801539a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801539e:	ddeb      	ble.n	8015378 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 80153a0:	2000      	movs	r0, #0
 80153a2:	f7f2 f845 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80153a6:	2000      	movs	r0, #0
 80153a8:	f7f2 f854 	bl	8007454 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80153ac:	f7f2 fd78 	bl	8007ea0 <pl_FunMotor_stop>
		break;
 80153b0:	e003      	b.n	80153ba <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 80153b2:	f001 fb03 	bl	80169bc <record_print>
		break;
 80153b6:	e000      	b.n	80153ba <mode_PLtest+0x35a>
		break;
 80153b8:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80153ba:	bf00      	nop
 80153bc:	3720      	adds	r7, #32
 80153be:	46bd      	mov	sp, r7
 80153c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80153c4:	200002bc 	.word	0x200002bc
 80153c8:	08024390 	.word	0x08024390
 80153cc:	2000edb4 	.word	0x2000edb4
 80153d0:	200006e8 	.word	0x200006e8
 80153d4:	080243bc 	.word	0x080243bc
 80153d8:	2000edc0 	.word	0x2000edc0
 80153dc:	3f7d70a4 	.word	0x3f7d70a4

080153e0 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 80153e0:	b5b0      	push	{r4, r5, r7, lr}
 80153e2:	b0da      	sub	sp, #360	; 0x168
 80153e4:	af54      	add	r7, sp, #336	; 0x150
 80153e6:	4603      	mov	r3, r0
 80153e8:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80153ea:	2003      	movs	r0, #3
 80153ec:	f7f2 fcce 	bl	8007d8c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80153f0:	2003      	movs	r0, #3
 80153f2:	f7f2 fcf3 	bl	8007ddc <pl_R_DriveMotor_mode>
	reset_gyro();
 80153f6:	f7ec fbdf 	bl	8001bb8 <reset_gyro>
	reset_speed();
 80153fa:	f7eb fe13 	bl	8001024 <reset_speed>
	reset_distance();
 80153fe:	f7eb fdcd 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015402:	f7ef fb25 	bl	8004a50 <clear_Ierror>
	switch (main_modeR) {
 8015406:	79fb      	ldrb	r3, [r7, #7]
 8015408:	2b0f      	cmp	r3, #15
 801540a:	f200 81e3 	bhi.w	80157d4 <mode_Running+0x3f4>
 801540e:	a201      	add	r2, pc, #4	; (adr r2, 8015414 <mode_Running+0x34>)
 8015410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015414:	08015455 	.word	0x08015455
 8015418:	08015505 	.word	0x08015505
 801541c:	0801553d 	.word	0x0801553d
 8015420:	08015543 	.word	0x08015543
 8015424:	0801557b 	.word	0x0801557b
 8015428:	080155ad 	.word	0x080155ad
 801542c:	080155df 	.word	0x080155df
 8015430:	08015611 	.word	0x08015611
 8015434:	08015643 	.word	0x08015643
 8015438:	08015675 	.word	0x08015675
 801543c:	080156a7 	.word	0x080156a7
 8015440:	080156d9 	.word	0x080156d9
 8015444:	0801570b 	.word	0x0801570b
 8015448:	0801573d 	.word	0x0801573d
 801544c:	0801576f 	.word	0x0801576f
 8015450:	080157a1 	.word	0x080157a1
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 8015454:	f7fe fc1c 	bl	8013c90 <create_StepCountMap_queue>
			maze_display();
 8015458:	f7ff fa40 	bl	80148dc <maze_display>

			create_DijkstraMap();
 801545c:	f7fb fede 	bl	801121c <create_DijkstraMap>
			maze_display_Dijkstra();
 8015460:	f7ff fb5a 	bl	8014b18 <maze_display_Dijkstra>

			route_Dijkstra();
 8015464:	f7fd fc24 	bl	8012cb0 <route_Dijkstra>
			create_StepCountMap_unknown();
 8015468:	f7fe f8dc 	bl	8013624 <create_StepCountMap_unknown>
			maze_display();
 801546c:	f7ff fa36 	bl	80148dc <maze_display>

			tic_timer();
 8015470:	f7f2 ff40 	bl	80082f4 <tic_timer>
			for(int j=0;j<5000;j++){
 8015474:	2300      	movs	r3, #0
 8015476:	617b      	str	r3, [r7, #20]
 8015478:	e004      	b.n	8015484 <mode_Running+0xa4>
			create_StepCountMap_queue();
 801547a:	f7fe fc09 	bl	8013c90 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	3301      	adds	r3, #1
 8015482:	617b      	str	r3, [r7, #20]
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	f241 3287 	movw	r2, #4999	; 0x1387
 801548a:	4293      	cmp	r3, r2
 801548c:	ddf5      	ble.n	801547a <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 801548e:	f7f2 ff43 	bl	8008318 <toc_timer>
 8015492:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 8015496:	f7ff fa21 	bl	80148dc <maze_display>
			printf("tim2=%f\n", tim2);
 801549a:	68f8      	ldr	r0, [r7, #12]
 801549c:	f7eb f87c 	bl	8000598 <__aeabi_f2d>
 80154a0:	4602      	mov	r2, r0
 80154a2:	460b      	mov	r3, r1
 80154a4:	48cd      	ldr	r0, [pc, #820]	; (80157dc <mode_Running+0x3fc>)
 80154a6:	f00b f995 	bl	80207d4 <iprintf>
			tic_timer();
 80154aa:	f7f2 ff23 	bl	80082f4 <tic_timer>
			create_DijkstraMap();
 80154ae:	f7fb feb5 	bl	801121c <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80154b2:	2300      	movs	r3, #0
 80154b4:	613b      	str	r3, [r7, #16]
 80154b6:	e006      	b.n	80154c6 <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80154b8:	f7fd fbfa 	bl	8012cb0 <route_Dijkstra>
			create_StepCountMap_unknown();
 80154bc:	f7fe f8b2 	bl	8013624 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	3301      	adds	r3, #1
 80154c4:	613b      	str	r3, [r7, #16]
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	f241 3287 	movw	r2, #4999	; 0x1387
 80154cc:	4293      	cmp	r3, r2
 80154ce:	ddf3      	ble.n	80154b8 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 80154d0:	f7f2 ff22 	bl	8008318 <toc_timer>
 80154d4:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 80154d8:	f7ff fa00 	bl	80148dc <maze_display>
			maze_display_Dijkstra();
 80154dc:	f7ff fb1c 	bl	8014b18 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 80154e0:	68b8      	ldr	r0, [r7, #8]
 80154e2:	f7eb f859 	bl	8000598 <__aeabi_f2d>
 80154e6:	4604      	mov	r4, r0
 80154e8:	460d      	mov	r5, r1
 80154ea:	68f8      	ldr	r0, [r7, #12]
 80154ec:	f7eb f854 	bl	8000598 <__aeabi_f2d>
 80154f0:	4602      	mov	r2, r0
 80154f2:	460b      	mov	r3, r1
 80154f4:	e9cd 2300 	strd	r2, r3, [sp]
 80154f8:	4622      	mov	r2, r4
 80154fa:	462b      	mov	r3, r5
 80154fc:	48b8      	ldr	r0, [pc, #736]	; (80157e0 <mode_Running+0x400>)
 80154fe:	f00b f969 	bl	80207d4 <iprintf>
		break;
 8015502:	e167      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0001://足立法(遅い)
			tic_timer();
 8015504:	f7f2 fef6 	bl	80082f4 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015508:	4cb6      	ldr	r4, [pc, #728]	; (80157e4 <mode_Running+0x404>)
 801550a:	2300      	movs	r3, #0
 801550c:	934f      	str	r3, [sp, #316]	; 0x13c
 801550e:	2301      	movs	r3, #1
 8015510:	934e      	str	r3, [sp, #312]	; 0x138
 8015512:	4668      	mov	r0, sp
 8015514:	f104 0310 	add.w	r3, r4, #16
 8015518:	f44f 729c 	mov.w	r2, #312	; 0x138
 801551c:	4619      	mov	r1, r3
 801551e:	f00a fcd9 	bl	801fed4 <memcpy>
 8015522:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015526:	eddf 1ab0 	vldr	s3, [pc, #704]	; 80157e8 <mode_Running+0x408>
 801552a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 80157ec <mode_Running+0x40c>
 801552e:	eddf 0ab0 	vldr	s1, [pc, #704]	; 80157f0 <mode_Running+0x410>
 8015532:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80157f4 <mode_Running+0x414>
 8015536:	f7f8 fb9f 	bl	800dc78 <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 801553a:	e14b      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0010://Flashから
			record_out();
 801553c:	f7f2 f9e6 	bl	800790c <record_out>
		break;
 8015540:	e148      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0011://ゴミ
			tic_timer();
 8015542:	f7f2 fed7 	bl	80082f4 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015546:	4ca7      	ldr	r4, [pc, #668]	; (80157e4 <mode_Running+0x404>)
 8015548:	2301      	movs	r3, #1
 801554a:	934f      	str	r3, [sp, #316]	; 0x13c
 801554c:	2301      	movs	r3, #1
 801554e:	934e      	str	r3, [sp, #312]	; 0x138
 8015550:	4668      	mov	r0, sp
 8015552:	f104 0310 	add.w	r3, r4, #16
 8015556:	f44f 729c 	mov.w	r2, #312	; 0x138
 801555a:	4619      	mov	r1, r3
 801555c:	f00a fcba 	bl	801fed4 <memcpy>
 8015560:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015564:	eddf 1aa0 	vldr	s3, [pc, #640]	; 80157e8 <mode_Running+0x408>
 8015568:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80157ec <mode_Running+0x40c>
 801556c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 80157f0 <mode_Running+0x410>
 8015570:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 80157f4 <mode_Running+0x414>
 8015574:	f7f8 fb80 	bl	800dc78 <AdatiWayReturn>
		break;
 8015578:	e12c      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0100://ゴミ
			record_out();
 801557a:	f7f2 f9c7 	bl	800790c <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 801557e:	2300      	movs	r3, #0
 8015580:	9352      	str	r3, [sp, #328]	; 0x148
 8015582:	4a9d      	ldr	r2, [pc, #628]	; (80157f8 <mode_Running+0x418>)
 8015584:	466b      	mov	r3, sp
 8015586:	4611      	mov	r1, r2
 8015588:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801558c:	4618      	mov	r0, r3
 801558e:	f00a fca1 	bl	801fed4 <memcpy>
 8015592:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 80157fc <mode_Running+0x41c>
 8015596:	2300      	movs	r3, #0
 8015598:	2200      	movs	r2, #0
 801559a:	2100      	movs	r1, #0
 801559c:	2000      	movs	r0, #0
 801559e:	eddf 0a92 	vldr	s1, [pc, #584]	; 80157e8 <mode_Running+0x408>
 80155a2:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015800 <mode_Running+0x420>
 80155a6:	f7f9 fb93 	bl	800ecd0 <run_shortest>
		break;
 80155aa:	e113      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0101://
			record_out();
 80155ac:	f7f2 f9ae 	bl	800790c <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 80155b0:	2301      	movs	r3, #1
 80155b2:	9352      	str	r3, [sp, #328]	; 0x148
 80155b4:	4a93      	ldr	r2, [pc, #588]	; (8015804 <mode_Running+0x424>)
 80155b6:	466b      	mov	r3, sp
 80155b8:	4611      	mov	r1, r2
 80155ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80155be:	4618      	mov	r0, r3
 80155c0:	f00a fc88 	bl	801fed4 <memcpy>
 80155c4:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 80157fc <mode_Running+0x41c>
 80155c8:	2300      	movs	r3, #0
 80155ca:	2200      	movs	r2, #0
 80155cc:	2101      	movs	r1, #1
 80155ce:	2000      	movs	r0, #0
 80155d0:	eddf 0a85 	vldr	s1, [pc, #532]	; 80157e8 <mode_Running+0x408>
 80155d4:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8015800 <mode_Running+0x420>
 80155d8:	f7f9 fb7a 	bl	800ecd0 <run_shortest>
		break;
 80155dc:	e0fa      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0110://吸引なしで斜め走行
			record_out();
 80155de:	f7f2 f995 	bl	800790c <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 80155e2:	2301      	movs	r3, #1
 80155e4:	9352      	str	r3, [sp, #328]	; 0x148
 80155e6:	4a87      	ldr	r2, [pc, #540]	; (8015804 <mode_Running+0x424>)
 80155e8:	466b      	mov	r3, sp
 80155ea:	4611      	mov	r1, r2
 80155ec:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80155f0:	4618      	mov	r0, r3
 80155f2:	f00a fc6f 	bl	801fed4 <memcpy>
 80155f6:	ed9f 1a81 	vldr	s2, [pc, #516]	; 80157fc <mode_Running+0x41c>
 80155fa:	2301      	movs	r3, #1
 80155fc:	2200      	movs	r2, #0
 80155fe:	2101      	movs	r1, #1
 8015600:	2000      	movs	r0, #0
 8015602:	eddf 0a79 	vldr	s1, [pc, #484]	; 80157e8 <mode_Running+0x408>
 8015606:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8015800 <mode_Running+0x420>
 801560a:	f7f9 fb61 	bl	800ecd0 <run_shortest>
		break;
 801560e:	e0e1      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8015610:	f7f2 f97c 	bl	800790c <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015614:	2301      	movs	r3, #1
 8015616:	9352      	str	r3, [sp, #328]	; 0x148
 8015618:	4a7b      	ldr	r2, [pc, #492]	; (8015808 <mode_Running+0x428>)
 801561a:	466b      	mov	r3, sp
 801561c:	4611      	mov	r1, r2
 801561e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015622:	4618      	mov	r0, r3
 8015624:	f00a fc56 	bl	801fed4 <memcpy>
 8015628:	ed9f 1a78 	vldr	s2, [pc, #480]	; 801580c <mode_Running+0x42c>
 801562c:	2301      	movs	r3, #1
 801562e:	2201      	movs	r2, #1
 8015630:	2101      	movs	r1, #1
 8015632:	2000      	movs	r0, #0
 8015634:	eddf 0a76 	vldr	s1, [pc, #472]	; 8015810 <mode_Running+0x430>
 8015638:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80157e8 <mode_Running+0x408>
 801563c:	f7f9 fb48 	bl	800ecd0 <run_shortest>
		break;
 8015640:	e0c8      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1000://
			record_out();
 8015642:	f7f2 f963 	bl	800790c <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015646:	2301      	movs	r3, #1
 8015648:	9352      	str	r3, [sp, #328]	; 0x148
 801564a:	4a6f      	ldr	r2, [pc, #444]	; (8015808 <mode_Running+0x428>)
 801564c:	466b      	mov	r3, sp
 801564e:	4611      	mov	r1, r2
 8015650:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015654:	4618      	mov	r0, r3
 8015656:	f00a fc3d 	bl	801fed4 <memcpy>
 801565a:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 801580c <mode_Running+0x42c>
 801565e:	2301      	movs	r3, #1
 8015660:	2201      	movs	r2, #1
 8015662:	2101      	movs	r1, #1
 8015664:	2000      	movs	r0, #0
 8015666:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8015814 <mode_Running+0x434>
 801566a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015818 <mode_Running+0x438>
 801566e:	f7f9 fb2f 	bl	800ecd0 <run_shortest>
		break;
 8015672:	e0af      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1001:
			record_out();
 8015674:	f7f2 f94a 	bl	800790c <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015678:	2301      	movs	r3, #1
 801567a:	9352      	str	r3, [sp, #328]	; 0x148
 801567c:	4a67      	ldr	r2, [pc, #412]	; (801581c <mode_Running+0x43c>)
 801567e:	466b      	mov	r3, sp
 8015680:	4611      	mov	r1, r2
 8015682:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015686:	4618      	mov	r0, r3
 8015688:	f00a fc24 	bl	801fed4 <memcpy>
 801568c:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 801580c <mode_Running+0x42c>
 8015690:	2301      	movs	r3, #1
 8015692:	2201      	movs	r2, #1
 8015694:	2101      	movs	r1, #1
 8015696:	2000      	movs	r0, #0
 8015698:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8015810 <mode_Running+0x430>
 801569c:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80157e8 <mode_Running+0x408>
 80156a0:	f7f9 fb16 	bl	800ecd0 <run_shortest>
		break;
 80156a4:	e096      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1010:
			record_out();
 80156a6:	f7f2 f931 	bl	800790c <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 80156aa:	2301      	movs	r3, #1
 80156ac:	9352      	str	r3, [sp, #328]	; 0x148
 80156ae:	4a5b      	ldr	r2, [pc, #364]	; (801581c <mode_Running+0x43c>)
 80156b0:	466b      	mov	r3, sp
 80156b2:	4611      	mov	r1, r2
 80156b4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80156b8:	4618      	mov	r0, r3
 80156ba:	f00a fc0b 	bl	801fed4 <memcpy>
 80156be:	ed9f 1a53 	vldr	s2, [pc, #332]	; 801580c <mode_Running+0x42c>
 80156c2:	2301      	movs	r3, #1
 80156c4:	2201      	movs	r2, #1
 80156c6:	2101      	movs	r1, #1
 80156c8:	2000      	movs	r0, #0
 80156ca:	eddf 0a52 	vldr	s1, [pc, #328]	; 8015814 <mode_Running+0x434>
 80156ce:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015818 <mode_Running+0x438>
 80156d2:	f7f9 fafd 	bl	800ecd0 <run_shortest>
		break;
 80156d6:	e07d      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1011:
			record_out();
 80156d8:	f7f2 f918 	bl	800790c <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 80156dc:	2301      	movs	r3, #1
 80156de:	9352      	str	r3, [sp, #328]	; 0x148
 80156e0:	4a49      	ldr	r2, [pc, #292]	; (8015808 <mode_Running+0x428>)
 80156e2:	466b      	mov	r3, sp
 80156e4:	4611      	mov	r1, r2
 80156e6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80156ea:	4618      	mov	r0, r3
 80156ec:	f00a fbf2 	bl	801fed4 <memcpy>
 80156f0:	ed9f 1a46 	vldr	s2, [pc, #280]	; 801580c <mode_Running+0x42c>
 80156f4:	2301      	movs	r3, #1
 80156f6:	2201      	movs	r2, #1
 80156f8:	2101      	movs	r1, #1
 80156fa:	2000      	movs	r0, #0
 80156fc:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015820 <mode_Running+0x440>
 8015700:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8015824 <mode_Running+0x444>
 8015704:	f7f9 fae4 	bl	800ecd0 <run_shortest>
		break;
 8015708:	e064      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1100:
			record_out();
 801570a:	f7f2 f8ff 	bl	800790c <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 801570e:	2301      	movs	r3, #1
 8015710:	9352      	str	r3, [sp, #328]	; 0x148
 8015712:	4a42      	ldr	r2, [pc, #264]	; (801581c <mode_Running+0x43c>)
 8015714:	466b      	mov	r3, sp
 8015716:	4611      	mov	r1, r2
 8015718:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801571c:	4618      	mov	r0, r3
 801571e:	f00a fbd9 	bl	801fed4 <memcpy>
 8015722:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 801580c <mode_Running+0x42c>
 8015726:	2301      	movs	r3, #1
 8015728:	2201      	movs	r2, #1
 801572a:	2101      	movs	r1, #1
 801572c:	2000      	movs	r0, #0
 801572e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015820 <mode_Running+0x440>
 8015732:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8015824 <mode_Running+0x444>
 8015736:	f7f9 facb 	bl	800ecd0 <run_shortest>
		break;
 801573a:	e04b      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1101:
			record_out();
 801573c:	f7f2 f8e6 	bl	800790c <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015740:	2301      	movs	r3, #1
 8015742:	9352      	str	r3, [sp, #328]	; 0x148
 8015744:	4a38      	ldr	r2, [pc, #224]	; (8015828 <mode_Running+0x448>)
 8015746:	466b      	mov	r3, sp
 8015748:	4611      	mov	r1, r2
 801574a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801574e:	4618      	mov	r0, r3
 8015750:	f00a fbc0 	bl	801fed4 <memcpy>
 8015754:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 801580c <mode_Running+0x42c>
 8015758:	2301      	movs	r3, #1
 801575a:	2201      	movs	r2, #1
 801575c:	2101      	movs	r1, #1
 801575e:	2000      	movs	r0, #0
 8015760:	eddf 0a32 	vldr	s1, [pc, #200]	; 801582c <mode_Running+0x44c>
 8015764:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8015830 <mode_Running+0x450>
 8015768:	f7f9 fab2 	bl	800ecd0 <run_shortest>
		break;
 801576c:	e032      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1110:
			record_out();
 801576e:	f7f2 f8cd 	bl	800790c <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8015772:	2301      	movs	r3, #1
 8015774:	9352      	str	r3, [sp, #328]	; 0x148
 8015776:	4a2c      	ldr	r2, [pc, #176]	; (8015828 <mode_Running+0x448>)
 8015778:	466b      	mov	r3, sp
 801577a:	4611      	mov	r1, r2
 801577c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015780:	4618      	mov	r0, r3
 8015782:	f00a fba7 	bl	801fed4 <memcpy>
 8015786:	ed9f 1a21 	vldr	s2, [pc, #132]	; 801580c <mode_Running+0x42c>
 801578a:	2301      	movs	r3, #1
 801578c:	2201      	movs	r2, #1
 801578e:	2101      	movs	r1, #1
 8015790:	2000      	movs	r0, #0
 8015792:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015820 <mode_Running+0x440>
 8015796:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8015824 <mode_Running+0x444>
 801579a:	f7f9 fa99 	bl	800ecd0 <run_shortest>
		break;
 801579e:	e019      	b.n	80157d4 <mode_Running+0x3f4>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 80157a0:	4c24      	ldr	r4, [pc, #144]	; (8015834 <mode_Running+0x454>)
 80157a2:	2300      	movs	r3, #0
 80157a4:	934f      	str	r3, [sp, #316]	; 0x13c
 80157a6:	2301      	movs	r3, #1
 80157a8:	934e      	str	r3, [sp, #312]	; 0x138
 80157aa:	4668      	mov	r0, sp
 80157ac:	f104 0310 	add.w	r3, r4, #16
 80157b0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80157b4:	4619      	mov	r1, r3
 80157b6:	f00a fb8d 	bl	801fed4 <memcpy>
 80157ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80157be:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80157e8 <mode_Running+0x408>
 80157c2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80157ec <mode_Running+0x40c>
 80157c6:	eddf 0a0a 	vldr	s1, [pc, #40]	; 80157f0 <mode_Running+0x410>
 80157ca:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8015838 <mode_Running+0x458>
 80157ce:	f7f8 fa53 	bl	800dc78 <AdatiWayReturn>
		break;
 80157d2:	bf00      	nop
	}


}
 80157d4:	bf00      	nop
 80157d6:	3718      	adds	r7, #24
 80157d8:	46bd      	mov	sp, r7
 80157da:	bdb0      	pop	{r4, r5, r7, pc}
 80157dc:	08024408 	.word	0x08024408
 80157e0:	08024414 	.word	0x08024414
 80157e4:	2000ef74 	.word	0x2000ef74
 80157e8:	453b8000 	.word	0x453b8000
 80157ec:	44fa0000 	.word	0x44fa0000
 80157f0:	43c80000 	.word	0x43c80000
 80157f4:	43960000 	.word	0x43960000
 80157f8:	2000f204 	.word	0x2000f204
 80157fc:	3e99999a 	.word	0x3e99999a
 8015800:	447a0000 	.word	0x447a0000
 8015804:	2000f34c 	.word	0x2000f34c
 8015808:	2000f494 	.word	0x2000f494
 801580c:	3f7d70a4 	.word	0x3f7d70a4
 8015810:	461c4000 	.word	0x461c4000
 8015814:	464b2000 	.word	0x464b2000
 8015818:	45480000 	.word	0x45480000
 801581c:	2000f5dc 	.word	0x2000f5dc
 8015820:	4684d000 	.word	0x4684d000
 8015824:	457a0000 	.word	0x457a0000
 8015828:	2000f724 	.word	0x2000f724
 801582c:	462be000 	.word	0x462be000
 8015830:	4541c000 	.word	0x4541c000
 8015834:	2000f0bc 	.word	0x2000f0bc
 8015838:	437a0000 	.word	0x437a0000

0801583c <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 801583c:	b590      	push	{r4, r7, lr}
 801583e:	b0db      	sub	sp, #364	; 0x16c
 8015840:	af52      	add	r7, sp, #328	; 0x148
 8015842:	4603      	mov	r3, r0
 8015844:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015846:	2300      	movs	r3, #0
 8015848:	613b      	str	r3, [r7, #16]
 801584a:	2300      	movs	r3, #0
 801584c:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 801584e:	2300      	movs	r3, #0
 8015850:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015852:	2300      	movs	r3, #0
 8015854:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015856:	2300      	movs	r3, #0
 8015858:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 801585a:	2300      	movs	r3, #0
 801585c:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801585e:	2003      	movs	r0, #3
 8015860:	f7f2 fa94 	bl	8007d8c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015864:	2003      	movs	r0, #3
 8015866:	f7f2 fab9 	bl	8007ddc <pl_R_DriveMotor_mode>
	reset_gyro();
 801586a:	f7ec f9a5 	bl	8001bb8 <reset_gyro>
	reset_speed();
 801586e:	f7eb fbd9 	bl	8001024 <reset_speed>
	reset_distance();
 8015872:	f7eb fb93 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015876:	f7ef f8eb 	bl	8004a50 <clear_Ierror>

	switch (main_modeR) {
 801587a:	79fb      	ldrb	r3, [r7, #7]
 801587c:	2b0f      	cmp	r3, #15
 801587e:	f200 8315 	bhi.w	8015eac <mode_Tuning0+0x670>
 8015882:	a201      	add	r2, pc, #4	; (adr r2, 8015888 <mode_Tuning0+0x4c>)
 8015884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015888:	080158c9 	.word	0x080158c9
 801588c:	08015953 	.word	0x08015953
 8015890:	08015979 	.word	0x08015979
 8015894:	0801599f 	.word	0x0801599f
 8015898:	080159cf 	.word	0x080159cf
 801589c:	080159ff 	.word	0x080159ff
 80158a0:	08015ac9 	.word	0x08015ac9
 80158a4:	08015aef 	.word	0x08015aef
 80158a8:	08015b15 	.word	0x08015b15
 80158ac:	08015b39 	.word	0x08015b39
 80158b0:	08015b95 	.word	0x08015b95
 80158b4:	08015c9d 	.word	0x08015c9d
 80158b8:	08015cc3 	.word	0x08015cc3
 80158bc:	08015cf5 	.word	0x08015cf5
 80158c0:	08015e0d 	.word	0x08015e0d
 80158c4:	08015e5d 	.word	0x08015e5d
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 80158c8:	4bd4      	ldr	r3, [pc, #848]	; (8015c1c <mode_Tuning0+0x3e0>)
 80158ca:	2203      	movs	r2, #3
 80158cc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80158ce:	2300      	movs	r3, #0
 80158d0:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 80158d2:	6978      	ldr	r0, [r7, #20]
 80158d4:	ed9f 2ad2 	vldr	s4, [pc, #840]	; 8015c20 <mode_Tuning0+0x3e4>
 80158d8:	eddf 1ad2 	vldr	s3, [pc, #840]	; 8015c24 <mode_Tuning0+0x3e8>
 80158dc:	ed9f 1ad2 	vldr	s2, [pc, #840]	; 8015c28 <mode_Tuning0+0x3ec>
 80158e0:	eddf 0ad1 	vldr	s1, [pc, #836]	; 8015c28 <mode_Tuning0+0x3ec>
 80158e4:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 8015c2c <mode_Tuning0+0x3f0>
 80158e8:	f7ed fda0 	bl	800342c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80158ec:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015c30 <mode_Tuning0+0x3f4>
 80158f0:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015c34 <mode_Tuning0+0x3f8>
 80158f4:	ed9f 1acc 	vldr	s2, [pc, #816]	; 8015c28 <mode_Tuning0+0x3ec>
 80158f8:	eddf 0acb 	vldr	s1, [pc, #812]	; 8015c28 <mode_Tuning0+0x3ec>
 80158fc:	ed9f 0ace 	vldr	s0, [pc, #824]	; 8015c38 <mode_Tuning0+0x3fc>
 8015900:	f7ee fabe 	bl	8003e80 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015904:	6978      	ldr	r0, [r7, #20]
 8015906:	ed9f 2acd 	vldr	s4, [pc, #820]	; 8015c3c <mode_Tuning0+0x400>
 801590a:	eddf 1acd 	vldr	s3, [pc, #820]	; 8015c40 <mode_Tuning0+0x404>
 801590e:	ed9f 1ac6 	vldr	s2, [pc, #792]	; 8015c28 <mode_Tuning0+0x3ec>
 8015912:	eddf 0ac5 	vldr	s1, [pc, #788]	; 8015c28 <mode_Tuning0+0x3ec>
 8015916:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8015c2c <mode_Tuning0+0x3f0>
 801591a:	f7ed fd87 	bl	800342c <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 801591e:	ed9f 2ac4 	vldr	s4, [pc, #784]	; 8015c30 <mode_Tuning0+0x3f4>
 8015922:	eddf 1ac4 	vldr	s3, [pc, #784]	; 8015c34 <mode_Tuning0+0x3f8>
 8015926:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 8015c28 <mode_Tuning0+0x3ec>
 801592a:	eddf 0abf 	vldr	s1, [pc, #764]	; 8015c28 <mode_Tuning0+0x3ec>
 801592e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8015c38 <mode_Tuning0+0x3fc>
 8015932:	f7ee faa5 	bl	8003e80 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015936:	6978      	ldr	r0, [r7, #20]
 8015938:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015c44 <mode_Tuning0+0x408>
 801593c:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015c48 <mode_Tuning0+0x40c>
 8015940:	ed9f 1ab9 	vldr	s2, [pc, #740]	; 8015c28 <mode_Tuning0+0x3ec>
 8015944:	eddf 0ab8 	vldr	s1, [pc, #736]	; 8015c28 <mode_Tuning0+0x3ec>
 8015948:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015c2c <mode_Tuning0+0x3f0>
 801594c:	f7ed fd6e 	bl	800342c <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015950:	e2ac      	b.n	8015eac <mode_Tuning0+0x670>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015952:	4bb2      	ldr	r3, [pc, #712]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015954:	2205      	movs	r2, #5
 8015956:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015958:	2300      	movs	r3, #0
 801595a:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 801595c:	6978      	ldr	r0, [r7, #20]
 801595e:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8015c4c <mode_Tuning0+0x410>
 8015962:	eddf 1abb 	vldr	s3, [pc, #748]	; 8015c50 <mode_Tuning0+0x414>
 8015966:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8015c28 <mode_Tuning0+0x3ec>
 801596a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015c28 <mode_Tuning0+0x3ec>
 801596e:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8015c54 <mode_Tuning0+0x418>
 8015972:	f7ed fd5b 	bl	800342c <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015976:	e299      	b.n	8015eac <mode_Tuning0+0x670>
		case 2://壁制御
			record_mode=6;
 8015978:	4ba8      	ldr	r3, [pc, #672]	; (8015c1c <mode_Tuning0+0x3e0>)
 801597a:	2206      	movs	r2, #6
 801597c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801597e:	2301      	movs	r3, #1
 8015980:	753b      	strb	r3, [r7, #20]
			straight_table2(90*15, 0, 0, 300, 6000,mode);
 8015982:	6978      	ldr	r0, [r7, #20]
 8015984:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 8015c58 <mode_Tuning0+0x41c>
 8015988:	eddf 1ab4 	vldr	s3, [pc, #720]	; 8015c5c <mode_Tuning0+0x420>
 801598c:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 8015c28 <mode_Tuning0+0x3ec>
 8015990:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015c28 <mode_Tuning0+0x3ec>
 8015994:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8015c60 <mode_Tuning0+0x424>
 8015998:	f7ed fd48 	bl	800342c <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 801599c:	e286      	b.n	8015eac <mode_Tuning0+0x670>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 801599e:	4cb1      	ldr	r4, [pc, #708]	; (8015c64 <mode_Tuning0+0x428>)
 80159a0:	2300      	movs	r3, #0
 80159a2:	9351      	str	r3, [sp, #324]	; 0x144
 80159a4:	2300      	movs	r3, #0
 80159a6:	9350      	str	r3, [sp, #320]	; 0x140
 80159a8:	2300      	movs	r3, #0
 80159aa:	934f      	str	r3, [sp, #316]	; 0x13c
 80159ac:	2300      	movs	r3, #0
 80159ae:	934e      	str	r3, [sp, #312]	; 0x138
 80159b0:	4668      	mov	r0, sp
 80159b2:	f104 0310 	add.w	r3, r4, #16
 80159b6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80159ba:	4619      	mov	r1, r3
 80159bc:	f00a fa8a 	bl	801fed4 <memcpy>
 80159c0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80159c4:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8015c28 <mode_Tuning0+0x3ec>
 80159c8:	f7f7 ff6e 	bl	800d8a8 <testturning>
		break;
 80159cc:	e26e      	b.n	8015eac <mode_Tuning0+0x670>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 80159ce:	4ca5      	ldr	r4, [pc, #660]	; (8015c64 <mode_Tuning0+0x428>)
 80159d0:	2300      	movs	r3, #0
 80159d2:	9351      	str	r3, [sp, #324]	; 0x144
 80159d4:	2300      	movs	r3, #0
 80159d6:	9350      	str	r3, [sp, #320]	; 0x140
 80159d8:	2300      	movs	r3, #0
 80159da:	934f      	str	r3, [sp, #316]	; 0x13c
 80159dc:	2301      	movs	r3, #1
 80159de:	934e      	str	r3, [sp, #312]	; 0x138
 80159e0:	4668      	mov	r0, sp
 80159e2:	f104 0310 	add.w	r3, r4, #16
 80159e6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80159ea:	4619      	mov	r1, r3
 80159ec:	f00a fa72 	bl	801fed4 <memcpy>
 80159f0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80159f4:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8015c28 <mode_Tuning0+0x3ec>
 80159f8:	f7f7 ff56 	bl	800d8a8 <testturning>
		break;
 80159fc:	e256      	b.n	8015eac <mode_Tuning0+0x670>
		case 5://直進(制御なし)
			highspeed_mode = 1;
 80159fe:	4b9a      	ldr	r3, [pc, #616]	; (8015c68 <mode_Tuning0+0x42c>)
 8015a00:	2201      	movs	r2, #1
 8015a02:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8015a04:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8015c6c <mode_Tuning0+0x430>
 8015a08:	f7f2 fa54 	bl	8007eb4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015a0c:	f7f2 fa3e 	bl	8007e8c <pl_FunMotor_start>
			HAL_Delay(600);
 8015a10:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015a14:	f002 ff8c 	bl	8018930 <HAL_Delay>
			reset_gyro();
 8015a18:	f7ec f8ce 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8015a1c:	f7eb fb02 	bl	8001024 <reset_speed>
			reset_distance();
 8015a20:	f7eb fabc 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8015a24:	f7ef f814 	bl	8004a50 <clear_Ierror>
			record_mode=6;
 8015a28:	4b7c      	ldr	r3, [pc, #496]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015a2a:	2206      	movs	r2, #6
 8015a2c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015a2e:	2301      	movs	r3, #1
 8015a30:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 8015a32:	4b8f      	ldr	r3, [pc, #572]	; (8015c70 <mode_Tuning0+0x434>)
 8015a34:	f04f 0200 	mov.w	r2, #0
 8015a38:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 8015a3a:	6978      	ldr	r0, [r7, #20]
 8015a3c:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 8015c74 <mode_Tuning0+0x438>
 8015a40:	eddf 1a8d 	vldr	s3, [pc, #564]	; 8015c78 <mode_Tuning0+0x43c>
 8015a44:	ed9f 1a78 	vldr	s2, [pc, #480]	; 8015c28 <mode_Tuning0+0x3ec>
 8015a48:	eddf 0a77 	vldr	s1, [pc, #476]	; 8015c28 <mode_Tuning0+0x3ec>
 8015a4c:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8015c7c <mode_Tuning0+0x440>
 8015a50:	f7ed fcec 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 8015a54:	2300      	movs	r3, #0
 8015a56:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 8015a58:	4b85      	ldr	r3, [pc, #532]	; (8015c70 <mode_Tuning0+0x434>)
 8015a5a:	f04f 0200 	mov.w	r2, #0
 8015a5e:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 8015a60:	6978      	ldr	r0, [r7, #20]
 8015a62:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015c80 <mode_Tuning0+0x444>
 8015a66:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015c84 <mode_Tuning0+0x448>
 8015a6a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 8015c28 <mode_Tuning0+0x3ec>
 8015a6e:	eddf 0a6e 	vldr	s1, [pc, #440]	; 8015c28 <mode_Tuning0+0x3ec>
 8015a72:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8015c88 <mode_Tuning0+0x44c>
 8015a76:	f7ed fcd9 	bl	800342c <straight_table2>
			mode.WallControlMode=1;
 8015a7a:	2301      	movs	r3, #1
 8015a7c:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 8015a7e:	4b7c      	ldr	r3, [pc, #496]	; (8015c70 <mode_Tuning0+0x434>)
 8015a80:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8015a84:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 8015a86:	6978      	ldr	r0, [r7, #20]
 8015a88:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8015c74 <mode_Tuning0+0x438>
 8015a8c:	eddf 1a7a 	vldr	s3, [pc, #488]	; 8015c78 <mode_Tuning0+0x43c>
 8015a90:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8015c28 <mode_Tuning0+0x3ec>
 8015a94:	eddf 0a64 	vldr	s1, [pc, #400]	; 8015c28 <mode_Tuning0+0x3ec>
 8015a98:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8015c7c <mode_Tuning0+0x440>
 8015a9c:	f7ed fcc6 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 8015aa0:	2300      	movs	r3, #0
 8015aa2:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 8015aa4:	4b72      	ldr	r3, [pc, #456]	; (8015c70 <mode_Tuning0+0x434>)
 8015aa6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8015aaa:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 8015aac:	6978      	ldr	r0, [r7, #20]
 8015aae:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8015c80 <mode_Tuning0+0x444>
 8015ab2:	eddf 1a74 	vldr	s3, [pc, #464]	; 8015c84 <mode_Tuning0+0x448>
 8015ab6:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8015c28 <mode_Tuning0+0x3ec>
 8015aba:	eddf 0a5b 	vldr	s1, [pc, #364]	; 8015c28 <mode_Tuning0+0x3ec>
 8015abe:	ed9f 0a72 	vldr	s0, [pc, #456]	; 8015c88 <mode_Tuning0+0x44c>
 8015ac2:	f7ed fcb3 	bl	800342c <straight_table2>

		break;
 8015ac6:	e1f1      	b.n	8015eac <mode_Tuning0+0x670>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015ac8:	4b54      	ldr	r3, [pc, #336]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015aca:	2207      	movs	r2, #7
 8015acc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ace:	2300      	movs	r3, #0
 8015ad0:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015ad2:	6978      	ldr	r0, [r7, #20]
 8015ad4:	ed9f 2a60 	vldr	s4, [pc, #384]	; 8015c58 <mode_Tuning0+0x41c>
 8015ad8:	eddf 1a6c 	vldr	s3, [pc, #432]	; 8015c8c <mode_Tuning0+0x450>
 8015adc:	ed9f 1a52 	vldr	s2, [pc, #328]	; 8015c28 <mode_Tuning0+0x3ec>
 8015ae0:	eddf 0a51 	vldr	s1, [pc, #324]	; 8015c28 <mode_Tuning0+0x3ec>
 8015ae4:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8015c90 <mode_Tuning0+0x454>
 8015ae8:	f7ed fca0 	bl	800342c <straight_table2>
		break;
 8015aec:	e1de      	b.n	8015eac <mode_Tuning0+0x670>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015aee:	4b4b      	ldr	r3, [pc, #300]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015af0:	2207      	movs	r2, #7
 8015af2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015af4:	2303      	movs	r3, #3
 8015af6:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015af8:	6978      	ldr	r0, [r7, #20]
 8015afa:	ed9f 2a57 	vldr	s4, [pc, #348]	; 8015c58 <mode_Tuning0+0x41c>
 8015afe:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015c40 <mode_Tuning0+0x404>
 8015b02:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8015c28 <mode_Tuning0+0x3ec>
 8015b06:	eddf 0a48 	vldr	s1, [pc, #288]	; 8015c28 <mode_Tuning0+0x3ec>
 8015b0a:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8015c90 <mode_Tuning0+0x454>
 8015b0e:	f7ed fc8d 	bl	800342c <straight_table2>
		break;
 8015b12:	e1cb      	b.n	8015eac <mode_Tuning0+0x670>
		case 8://宴会芸
			record_mode=2;
 8015b14:	4b41      	ldr	r3, [pc, #260]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015b16:	2202      	movs	r2, #2
 8015b18:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015b1a:	2001      	movs	r0, #1
 8015b1c:	f7f1 fc88 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015b20:	2001      	movs	r0, #1
 8015b22:	f7f1 fc97 	bl	8007454 <pl_l_blue_LED>
			no_angle();
 8015b26:	f7ee fbc9 	bl	80042bc <no_angle>
			pl_r_blue_LED(OFF);
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	f7f1 fc80 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015b30:	2000      	movs	r0, #0
 8015b32:	f7f1 fc8f 	bl	8007454 <pl_l_blue_LED>
		break;
 8015b36:	e1b9      	b.n	8015eac <mode_Tuning0+0x670>
		case 9://システム同定enc

			pl_r_blue_LED(ON);
 8015b38:	2001      	movs	r0, #1
 8015b3a:	f7f1 fc79 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015b3e:	2001      	movs	r0, #1
 8015b40:	f7f1 fc88 	bl	8007454 <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8015b44:	f107 020c 	add.w	r2, r7, #12
 8015b48:	f107 0310 	add.w	r3, r7, #16
 8015b4c:	4611      	mov	r1, r2
 8015b4e:	4618      	mov	r0, r3
 8015b50:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015b54:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015b58:	f7ec fb94 	bl	8002284 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015b5c:	693b      	ldr	r3, [r7, #16]
 8015b5e:	68fa      	ldr	r2, [r7, #12]
 8015b60:	4611      	mov	r1, r2
 8015b62:	4618      	mov	r0, r3
 8015b64:	f7f2 f97c 	bl	8007e60 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015b68:	f7f2 f95e 	bl	8007e28 <pl_DriveMotor_start>
			wait_ms(3000);
 8015b6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8015b70:	f7f2 fbee 	bl	8008350 <wait_ms>
			record_mode=11;
 8015b74:	4b29      	ldr	r3, [pc, #164]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015b76:	220b      	movs	r2, #11
 8015b78:	701a      	strb	r2, [r3, #0]
			wait_ms(2000);
 8015b7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015b7e:	f7f2 fbe7 	bl	8008350 <wait_ms>
//				wait_ms(1);
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
			pl_DriveMotor_stop();
 8015b82:	f7f2 f95f 	bl	8007e44 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015b86:	2000      	movs	r0, #0
 8015b88:	f7f1 fc52 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015b8c:	2000      	movs	r0, #0
 8015b8e:	f7f1 fc61 	bl	8007454 <pl_l_blue_LED>
		break;
 8015b92:	e18b      	b.n	8015eac <mode_Tuning0+0x670>
		case 10://システム同定gyro
			record_mode=6;
 8015b94:	4b21      	ldr	r3, [pc, #132]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015b96:	2206      	movs	r2, #6
 8015b98:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015b9a:	2001      	movs	r0, #1
 8015b9c:	f7f1 fc48 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015ba0:	2001      	movs	r0, #1
 8015ba2:	f7f1 fc57 	bl	8007454 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8015ba6:	f107 020c 	add.w	r2, r7, #12
 8015baa:	f107 0310 	add.w	r3, r7, #16
 8015bae:	4611      	mov	r1, r2
 8015bb0:	4618      	mov	r0, r3
 8015bb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015bb6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015bba:	f7ec fb63 	bl	8002284 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015bbe:	693b      	ldr	r3, [r7, #16]
 8015bc0:	68fa      	ldr	r2, [r7, #12]
 8015bc2:	4611      	mov	r1, r2
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7f2 f94b 	bl	8007e60 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015bca:	f7f2 f92d 	bl	8007e28 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015bce:	e00a      	b.n	8015be6 <mode_Tuning0+0x3aa>
				wait_ms(1);
 8015bd0:	2001      	movs	r0, #1
 8015bd2:	f7f2 fbbd 	bl	8008350 <wait_ms>
				if(record_rupe_flag==1){
 8015bd6:	4b2f      	ldr	r3, [pc, #188]	; (8015c94 <mode_Tuning0+0x458>)
 8015bd8:	781b      	ldrb	r3, [r3, #0]
 8015bda:	2b01      	cmp	r3, #1
 8015bdc:	d103      	bne.n	8015be6 <mode_Tuning0+0x3aa>
					record_mode=0;
 8015bde:	4b0f      	ldr	r3, [pc, #60]	; (8015c1c <mode_Tuning0+0x3e0>)
 8015be0:	2200      	movs	r2, #0
 8015be2:	701a      	strb	r2, [r3, #0]
					break;
 8015be4:	e010      	b.n	8015c08 <mode_Tuning0+0x3cc>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015be6:	4b2c      	ldr	r3, [pc, #176]	; (8015c98 <mode_Tuning0+0x45c>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015bee:	ddef      	ble.n	8015bd0 <mode_Tuning0+0x394>
 8015bf0:	4b29      	ldr	r3, [pc, #164]	; (8015c98 <mode_Tuning0+0x45c>)
 8015bf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015bf6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015bfa:	dde9      	ble.n	8015bd0 <mode_Tuning0+0x394>
 8015bfc:	4b26      	ldr	r3, [pc, #152]	; (8015c98 <mode_Tuning0+0x45c>)
 8015bfe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015c02:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015c06:	dde3      	ble.n	8015bd0 <mode_Tuning0+0x394>
				}
			}
			pl_DriveMotor_stop();
 8015c08:	f7f2 f91c 	bl	8007e44 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015c0c:	2000      	movs	r0, #0
 8015c0e:	f7f1 fc0f 	bl	8007430 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015c12:	2000      	movs	r0, #0
 8015c14:	f7f1 fc1e 	bl	8007454 <pl_l_blue_LED>
		break;
 8015c18:	e148      	b.n	8015eac <mode_Tuning0+0x670>
 8015c1a:	bf00      	nop
 8015c1c:	2000edb4 	.word	0x2000edb4
 8015c20:	464b2000 	.word	0x464b2000
 8015c24:	44c80000 	.word	0x44c80000
 8015c28:	00000000 	.word	0x00000000
 8015c2c:	44070000 	.word	0x44070000
 8015c30:	457a0000 	.word	0x457a0000
 8015c34:	43c80000 	.word	0x43c80000
 8015c38:	43340000 	.word	0x43340000
 8015c3c:	466a6000 	.word	0x466a6000
 8015c40:	44fa0000 	.word	0x44fa0000
 8015c44:	469c4000 	.word	0x469c4000
 8015c48:	45160000 	.word	0x45160000
 8015c4c:	447a0000 	.word	0x447a0000
 8015c50:	c3160000 	.word	0xc3160000
 8015c54:	c1a40000 	.word	0xc1a40000
 8015c58:	45bb8000 	.word	0x45bb8000
 8015c5c:	43960000 	.word	0x43960000
 8015c60:	44a8c000 	.word	0x44a8c000
 8015c64:	2000ef74 	.word	0x2000ef74
 8015c68:	2000080c 	.word	0x2000080c
 8015c6c:	3f7d70a4 	.word	0x3f7d70a4
 8015c70:	20000264 	.word	0x20000264
 8015c74:	468ca000 	.word	0x468ca000
 8015c78:	452f0000 	.word	0x452f0000
 8015c7c:	44340000 	.word	0x44340000
 8015c80:	465ac000 	.word	0x465ac000
 8015c84:	c4fa0000 	.word	0xc4fa0000
 8015c88:	c4340000 	.word	0xc4340000
 8015c8c:	43fa0000 	.word	0x43fa0000
 8015c90:	443eeb39 	.word	0x443eeb39
 8015c94:	2000edc0 	.word	0x2000edc0
 8015c98:	200002bc 	.word	0x200002bc
		case 11:
		record_mode=1;
 8015c9c:	4ba0      	ldr	r3, [pc, #640]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8015ca6:	6978      	ldr	r0, [r7, #20]
 8015ca8:	ed9f 2a9e 	vldr	s4, [pc, #632]	; 8015f24 <mode_Tuning0+0x6e8>
 8015cac:	eddf 1a9e 	vldr	s3, [pc, #632]	; 8015f28 <mode_Tuning0+0x6ec>
 8015cb0:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8015f2c <mode_Tuning0+0x6f0>
 8015cb4:	eddf 0a9d 	vldr	s1, [pc, #628]	; 8015f2c <mode_Tuning0+0x6f0>
 8015cb8:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8015f30 <mode_Tuning0+0x6f4>
 8015cbc:	f7ed fbb6 	bl	800342c <straight_table2>
		break;
 8015cc0:	e0f4      	b.n	8015eac <mode_Tuning0+0x670>
		case 12:
		record_mode=2;
 8015cc2:	4b97      	ldr	r3, [pc, #604]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015cc4:	2202      	movs	r2, #2
 8015cc6:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8015cc8:	2300      	movs	r3, #0
 8015cca:	61fb      	str	r3, [r7, #28]
 8015ccc:	e00e      	b.n	8015cec <mode_Tuning0+0x4b0>
		turning_table2(90, 0, 0, 400, 3000);
 8015cce:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8015f34 <mode_Tuning0+0x6f8>
 8015cd2:	eddf 1a99 	vldr	s3, [pc, #612]	; 8015f38 <mode_Tuning0+0x6fc>
 8015cd6:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8015f2c <mode_Tuning0+0x6f0>
 8015cda:	eddf 0a94 	vldr	s1, [pc, #592]	; 8015f2c <mode_Tuning0+0x6f0>
 8015cde:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8015f3c <mode_Tuning0+0x700>
 8015ce2:	f7ee f8cd 	bl	8003e80 <turning_table2>
		for(int i=0;i<40;i++){
 8015ce6:	69fb      	ldr	r3, [r7, #28]
 8015ce8:	3301      	adds	r3, #1
 8015cea:	61fb      	str	r3, [r7, #28]
 8015cec:	69fb      	ldr	r3, [r7, #28]
 8015cee:	2b27      	cmp	r3, #39	; 0x27
 8015cf0:	dded      	ble.n	8015cce <mode_Tuning0+0x492>
		}
		break;
 8015cf2:	e0db      	b.n	8015eac <mode_Tuning0+0x670>
		case 13:
			record_mode=2;
 8015cf4:	4b8a      	ldr	r3, [pc, #552]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015cf6:	2202      	movs	r2, #2
 8015cf8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015cfa:	2301      	movs	r3, #1
 8015cfc:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015cfe:	4b90      	ldr	r3, [pc, #576]	; (8015f40 <mode_Tuning0+0x704>)
 8015d00:	edd3 6a02 	vldr	s13, [r3, #8]
 8015d04:	4b8e      	ldr	r3, [pc, #568]	; (8015f40 <mode_Tuning0+0x704>)
 8015d06:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015d0a:	4b8d      	ldr	r3, [pc, #564]	; (8015f40 <mode_Tuning0+0x704>)
 8015d0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8015d10:	4b8b      	ldr	r3, [pc, #556]	; (8015f40 <mode_Tuning0+0x704>)
 8015d12:	edd3 7a02 	vldr	s15, [r3, #8]
 8015d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015d1a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015d1e:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015d22:	eddf 5a88 	vldr	s11, [pc, #544]	; 8015f44 <mode_Tuning0+0x708>
 8015d26:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015d2a:	6978      	ldr	r0, [r7, #20]
 8015d2c:	eeb0 2a47 	vmov.f32	s4, s14
 8015d30:	eef0 1a46 	vmov.f32	s3, s12
 8015d34:	eeb0 1a66 	vmov.f32	s2, s13
 8015d38:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015f2c <mode_Tuning0+0x6f0>
 8015d3c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8015f48 <mode_Tuning0+0x70c>
 8015d40:	f7ed fb74 	bl	800342c <straight_table2>
			for(int i=0;i<40;i++){
 8015d44:	2300      	movs	r3, #0
 8015d46:	61bb      	str	r3, [r7, #24]
 8015d48:	e037      	b.n	8015dba <mode_Tuning0+0x57e>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015d4a:	4b7d      	ldr	r3, [pc, #500]	; (8015f40 <mode_Tuning0+0x704>)
 8015d4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8015d50:	4b7b      	ldr	r3, [pc, #492]	; (8015f40 <mode_Tuning0+0x704>)
 8015d52:	ed93 6a02 	vldr	s12, [r3, #8]
 8015d56:	4b7a      	ldr	r3, [pc, #488]	; (8015f40 <mode_Tuning0+0x704>)
 8015d58:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015d5c:	4b78      	ldr	r3, [pc, #480]	; (8015f40 <mode_Tuning0+0x704>)
 8015d5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8015d62:	4b77      	ldr	r3, [pc, #476]	; (8015f40 <mode_Tuning0+0x704>)
 8015d64:	edd3 7a02 	vldr	s15, [r3, #8]
 8015d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015d6c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015d70:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8015d74:	ed9f 5a73 	vldr	s10, [pc, #460]	; 8015f44 <mode_Tuning0+0x708>
 8015d78:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8015d7c:	6978      	ldr	r0, [r7, #20]
 8015d7e:	eeb0 2a47 	vmov.f32	s4, s14
 8015d82:	eef0 1a65 	vmov.f32	s3, s11
 8015d86:	eeb0 1a46 	vmov.f32	s2, s12
 8015d8a:	eef0 0a66 	vmov.f32	s1, s13
 8015d8e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8015d92:	f7ed fb4b 	bl	800342c <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8015d96:	4b6a      	ldr	r3, [pc, #424]	; (8015f40 <mode_Tuning0+0x704>)
 8015d98:	2200      	movs	r2, #0
 8015d9a:	9203      	str	r2, [sp, #12]
 8015d9c:	2200      	movs	r2, #0
 8015d9e:	9202      	str	r2, [sp, #8]
 8015da0:	2200      	movs	r2, #0
 8015da2:	9201      	str	r2, [sp, #4]
 8015da4:	699a      	ldr	r2, [r3, #24]
 8015da6:	9200      	str	r2, [sp, #0]
 8015da8:	3308      	adds	r3, #8
 8015daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015dac:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015f28 <mode_Tuning0+0x6ec>
 8015db0:	f7f3 ff38 	bl	8009c24 <slalomR>
			for(int i=0;i<40;i++){
 8015db4:	69bb      	ldr	r3, [r7, #24]
 8015db6:	3301      	adds	r3, #1
 8015db8:	61bb      	str	r3, [r7, #24]
 8015dba:	69bb      	ldr	r3, [r7, #24]
 8015dbc:	2b27      	cmp	r3, #39	; 0x27
 8015dbe:	ddc4      	ble.n	8015d4a <mode_Tuning0+0x50e>
			}
			mode.WallControlMode=0;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015dc4:	4b5e      	ldr	r3, [pc, #376]	; (8015f40 <mode_Tuning0+0x704>)
 8015dc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8015dca:	4b5d      	ldr	r3, [pc, #372]	; (8015f40 <mode_Tuning0+0x704>)
 8015dcc:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8015dd0:	4b5b      	ldr	r3, [pc, #364]	; (8015f40 <mode_Tuning0+0x704>)
 8015dd2:	ed93 7a02 	vldr	s14, [r3, #8]
 8015dd6:	4b5a      	ldr	r3, [pc, #360]	; (8015f40 <mode_Tuning0+0x704>)
 8015dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8015ddc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015de0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015de4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015de8:	eddf 5a56 	vldr	s11, [pc, #344]	; 8015f44 <mode_Tuning0+0x708>
 8015dec:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8015df0:	6978      	ldr	r0, [r7, #20]
 8015df2:	eeb0 2a47 	vmov.f32	s4, s14
 8015df6:	eef0 1a46 	vmov.f32	s3, s12
 8015dfa:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015f2c <mode_Tuning0+0x6f0>
 8015dfe:	eef0 0a66 	vmov.f32	s1, s13
 8015e02:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8015f44 <mode_Tuning0+0x708>
 8015e06:	f7ed fb11 	bl	800342c <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8015e0a:	e04f      	b.n	8015eac <mode_Tuning0+0x670>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8015e0c:	4b4f      	ldr	r3, [pc, #316]	; (8015f4c <mode_Tuning0+0x710>)
 8015e0e:	2201      	movs	r2, #1
 8015e10:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8015e12:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8015f50 <mode_Tuning0+0x714>
 8015e16:	f7f2 f84d 	bl	8007eb4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015e1a:	f7f2 f837 	bl	8007e8c <pl_FunMotor_start>
			HAL_Delay(600);
 8015e1e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015e22:	f002 fd85 	bl	8018930 <HAL_Delay>
			reset_gyro();
 8015e26:	f7eb fec7 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8015e2a:	f7eb f8fb 	bl	8001024 <reset_speed>
			reset_distance();
 8015e2e:	f7eb f8b5 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8015e32:	f7ee fe0d 	bl	8004a50 <clear_Ierror>
			record_mode=3;
 8015e36:	4b3a      	ldr	r3, [pc, #232]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015e38:	2203      	movs	r2, #3
 8015e3a:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8015e3c:	2301      	movs	r3, #1
 8015e3e:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8015e40:	6978      	ldr	r0, [r7, #20]
 8015e42:	ed9f 2a44 	vldr	s4, [pc, #272]	; 8015f54 <mode_Tuning0+0x718>
 8015e46:	eddf 1a44 	vldr	s3, [pc, #272]	; 8015f58 <mode_Tuning0+0x71c>
 8015e4a:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8015f2c <mode_Tuning0+0x6f0>
 8015e4e:	eddf 0a37 	vldr	s1, [pc, #220]	; 8015f2c <mode_Tuning0+0x6f0>
 8015e52:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8015f5c <mode_Tuning0+0x720>
 8015e56:	f7ed fae9 	bl	800342c <straight_table2>
		break;
 8015e5a:	e027      	b.n	8015eac <mode_Tuning0+0x670>
		case 15:
			highspeed_mode = 1;
 8015e5c:	4b3b      	ldr	r3, [pc, #236]	; (8015f4c <mode_Tuning0+0x710>)
 8015e5e:	2201      	movs	r2, #1
 8015e60:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8015e62:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8015f50 <mode_Tuning0+0x714>
 8015e66:	f7f2 f825 	bl	8007eb4 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015e6a:	f7f2 f80f 	bl	8007e8c <pl_FunMotor_start>
			HAL_Delay(600);
 8015e6e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015e72:	f002 fd5d 	bl	8018930 <HAL_Delay>
			reset_gyro();
 8015e76:	f7eb fe9f 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8015e7a:	f7eb f8d3 	bl	8001024 <reset_speed>
			reset_distance();
 8015e7e:	f7eb f88d 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8015e82:	f7ee fde5 	bl	8004a50 <clear_Ierror>
			record_mode=3;
 8015e86:	4b26      	ldr	r3, [pc, #152]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015e88:	2203      	movs	r2, #3
 8015e8a:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8015e8c:	2303      	movs	r3, #3
 8015e8e:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8015e90:	6978      	ldr	r0, [r7, #20]
 8015e92:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8015f60 <mode_Tuning0+0x724>
 8015e96:	eddf 1a30 	vldr	s3, [pc, #192]	; 8015f58 <mode_Tuning0+0x71c>
 8015e9a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015f2c <mode_Tuning0+0x6f0>
 8015e9e:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015f2c <mode_Tuning0+0x6f0>
 8015ea2:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8015f64 <mode_Tuning0+0x728>
 8015ea6:	f7ed fac1 	bl	800342c <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8015eaa:	bf00      	nop
	}
	record_mode=0;
 8015eac:	4b1c      	ldr	r3, [pc, #112]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015eae:	2200      	movs	r2, #0
 8015eb0:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015eb2:	2003      	movs	r0, #3
 8015eb4:	f7f1 ff92 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015eb8:	2003      	movs	r0, #3
 8015eba:	f7f1 ff67 	bl	8007d8c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015ebe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015ec2:	f7f2 fa89 	bl	80083d8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015ec6:	f7f1 ffeb 	bl	8007ea0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8015eca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015ece:	f7f2 fa83 	bl	80083d8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015ed2:	2000      	movs	r0, #0
 8015ed4:	f7f1 ff50 	bl	8007d78 <pl_DriveMotor_standby>
	record_mode=0;
 8015ed8:	4b11      	ldr	r3, [pc, #68]	; (8015f20 <mode_Tuning0+0x6e4>)
 8015eda:	2200      	movs	r2, #0
 8015edc:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015ede:	e002      	b.n	8015ee6 <mode_Tuning0+0x6aa>
		HAL_Delay(1);
 8015ee0:	2001      	movs	r0, #1
 8015ee2:	f002 fd25 	bl	8018930 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015ee6:	4b20      	ldr	r3, [pc, #128]	; (8015f68 <mode_Tuning0+0x72c>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015eee:	ddf7      	ble.n	8015ee0 <mode_Tuning0+0x6a4>
 8015ef0:	4b1d      	ldr	r3, [pc, #116]	; (8015f68 <mode_Tuning0+0x72c>)
 8015ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015ef6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015efa:	ddf1      	ble.n	8015ee0 <mode_Tuning0+0x6a4>
 8015efc:	4b1a      	ldr	r3, [pc, #104]	; (8015f68 <mode_Tuning0+0x72c>)
 8015efe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015f02:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f06:	ddeb      	ble.n	8015ee0 <mode_Tuning0+0x6a4>
	}
	pl_r_blue_LED(ON);
 8015f08:	2001      	movs	r0, #1
 8015f0a:	f7f1 fa91 	bl	8007430 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015f0e:	2001      	movs	r0, #1
 8015f10:	f7f1 faa0 	bl	8007454 <pl_l_blue_LED>
	record_print();
 8015f14:	f000 fd52 	bl	80169bc <record_print>



}
 8015f18:	bf00      	nop
 8015f1a:	3724      	adds	r7, #36	; 0x24
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd90      	pop	{r4, r7, pc}
 8015f20:	2000edb4 	.word	0x2000edb4
 8015f24:	45bb8000 	.word	0x45bb8000
 8015f28:	43960000 	.word	0x43960000
 8015f2c:	00000000 	.word	0x00000000
 8015f30:	420a0000 	.word	0x420a0000
 8015f34:	453b8000 	.word	0x453b8000
 8015f38:	43c80000 	.word	0x43c80000
 8015f3c:	42b40000 	.word	0x42b40000
 8015f40:	2000ef74 	.word	0x2000ef74
 8015f44:	42340000 	.word	0x42340000
 8015f48:	431b8000 	.word	0x431b8000
 8015f4c:	2000080c 	.word	0x2000080c
 8015f50:	3f7d70a4 	.word	0x3f7d70a4
 8015f54:	4684d000 	.word	0x4684d000
 8015f58:	457a0000 	.word	0x457a0000
 8015f5c:	44340000 	.word	0x44340000
 8015f60:	469c4000 	.word	0x469c4000
 8015f64:	446ea607 	.word	0x446ea607
 8015f68:	200002bc 	.word	0x200002bc

08015f6c <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	4603      	mov	r3, r0
 8015f74:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015f76:	2300      	movs	r3, #0
 8015f78:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8015f82:	2300      	movs	r3, #0
 8015f84:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015f86:	2001      	movs	r0, #1
 8015f88:	f7f1 fef6 	bl	8007d78 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015f8c:	2003      	movs	r0, #3
 8015f8e:	f7f1 fefd 	bl	8007d8c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015f92:	2003      	movs	r0, #3
 8015f94:	f7f1 ff22 	bl	8007ddc <pl_R_DriveMotor_mode>
	reset_gyro();
 8015f98:	f7eb fe0e 	bl	8001bb8 <reset_gyro>
	reset_speed();
 8015f9c:	f7eb f842 	bl	8001024 <reset_speed>
	clear_Ierror();
 8015fa0:	f7ee fd56 	bl	8004a50 <clear_Ierror>

	switch (main_modeR) {
 8015fa4:	79fb      	ldrb	r3, [r7, #7]
 8015fa6:	2b0f      	cmp	r3, #15
 8015fa8:	f200 81b0 	bhi.w	801630c <mode_WallSensorTuning+0x3a0>
 8015fac:	a201      	add	r2, pc, #4	; (adr r2, 8015fb4 <mode_WallSensorTuning+0x48>)
 8015fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fb2:	bf00      	nop
 8015fb4:	08015ff5 	.word	0x08015ff5
 8015fb8:	0801601b 	.word	0x0801601b
 8015fbc:	08016033 	.word	0x08016033
 8015fc0:	080160a9 	.word	0x080160a9
 8015fc4:	0801611f 	.word	0x0801611f
 8015fc8:	08016195 	.word	0x08016195
 8015fcc:	08016205 	.word	0x08016205
 8015fd0:	0801622b 	.word	0x0801622b
 8015fd4:	08016251 	.word	0x08016251
 8015fd8:	08016277 	.word	0x08016277
 8015fdc:	0801630d 	.word	0x0801630d
 8015fe0:	0801630d 	.word	0x0801630d
 8015fe4:	0801630d 	.word	0x0801630d
 8015fe8:	0801630d 	.word	0x0801630d
 8015fec:	0801630d 	.word	0x0801630d
 8015ff0:	0801629d 	.word	0x0801629d
		case 0://横壁追従制御
			record_mode=16;
 8015ff4:	4bd2      	ldr	r3, [pc, #840]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 8015ff6:	2210      	movs	r2, #16
 8015ff8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015ffa:	2301      	movs	r3, #1
 8015ffc:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 8015ffe:	68b8      	ldr	r0, [r7, #8]
 8016000:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016344 <mode_WallSensorTuning+0x3d8>
 8016004:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8016348 <mode_WallSensorTuning+0x3dc>
 8016008:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 801634c <mode_WallSensorTuning+0x3e0>
 801600c:	eddf 0acf 	vldr	s1, [pc, #828]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016010:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8016350 <mode_WallSensorTuning+0x3e4>
 8016014:	f7ed fa0a 	bl	800342c <straight_table2>
		break;
 8016018:	e178      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 801601a:	2300      	movs	r3, #0
 801601c:	60fb      	str	r3, [r7, #12]
 801601e:	e004      	b.n	801602a <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8016020:	f7ee fa36 	bl	8004490 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	3301      	adds	r3, #1
 8016028:	60fb      	str	r3, [r7, #12]
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	2b14      	cmp	r3, #20
 801602e:	ddf7      	ble.n	8016020 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016030:	e16c      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016032:	4bc3      	ldr	r3, [pc, #780]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 8016034:	2207      	movs	r2, #7
 8016036:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016038:	2300      	movs	r3, #0
 801603a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801603c:	2300      	movs	r3, #0
 801603e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016040:	2300      	movs	r3, #0
 8016042:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016044:	2300      	movs	r3, #0
 8016046:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8016048:	68b8      	ldr	r0, [r7, #8]
 801604a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016354 <mode_WallSensorTuning+0x3e8>
 801604e:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016052:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016056:	eddf 0abd 	vldr	s1, [pc, #756]	; 801634c <mode_WallSensorTuning+0x3e0>
 801605a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 801635c <mode_WallSensorTuning+0x3f0>
 801605e:	f7ed f9e5 	bl	800342c <straight_table2>
			mode.WallCutMode=1;
 8016062:	2301      	movs	r3, #1
 8016064:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016066:	2300      	movs	r3, #0
 8016068:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801606a:	68b8      	ldr	r0, [r7, #8]
 801606c:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8016354 <mode_WallSensorTuning+0x3e8>
 8016070:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016074:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016078:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8016358 <mode_WallSensorTuning+0x3ec>
 801607c:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016360 <mode_WallSensorTuning+0x3f4>
 8016080:	f7ed f9d4 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 8016084:	2300      	movs	r3, #0
 8016086:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016088:	2300      	movs	r3, #0
 801608a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 801608c:	68b8      	ldr	r0, [r7, #8]
 801608e:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016354 <mode_WallSensorTuning+0x3e8>
 8016092:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016096:	ed9f 1aad 	vldr	s2, [pc, #692]	; 801634c <mode_WallSensorTuning+0x3e0>
 801609a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8016358 <mode_WallSensorTuning+0x3ec>
 801609e:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016364 <mode_WallSensorTuning+0x3f8>
 80160a2:	f7ed f9c3 	bl	800342c <straight_table2>
		break;
 80160a6:	e131      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 80160a8:	4ba5      	ldr	r3, [pc, #660]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 80160aa:	2208      	movs	r2, #8
 80160ac:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80160ae:	2300      	movs	r3, #0
 80160b0:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80160b2:	2300      	movs	r3, #0
 80160b4:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80160ba:	2300      	movs	r3, #0
 80160bc:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 80160be:	68b8      	ldr	r0, [r7, #8]
 80160c0:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8016354 <mode_WallSensorTuning+0x3e8>
 80160c4:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80160c8:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80160cc:	eddf 0a9f 	vldr	s1, [pc, #636]	; 801634c <mode_WallSensorTuning+0x3e0>
 80160d0:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8016368 <mode_WallSensorTuning+0x3fc>
 80160d4:	f7ed f9aa 	bl	800342c <straight_table2>
			mode.WallCutMode=2;
 80160d8:	2302      	movs	r3, #2
 80160da:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80160dc:	2300      	movs	r3, #0
 80160de:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80160e0:	68b8      	ldr	r0, [r7, #8]
 80160e2:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8016354 <mode_WallSensorTuning+0x3e8>
 80160e6:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80160ea:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80160ee:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80160f2:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016360 <mode_WallSensorTuning+0x3f4>
 80160f6:	f7ed f999 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 80160fa:	2300      	movs	r3, #0
 80160fc:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80160fe:	2300      	movs	r3, #0
 8016100:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8016102:	68b8      	ldr	r0, [r7, #8]
 8016104:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8016354 <mode_WallSensorTuning+0x3e8>
 8016108:	eddf 1a93 	vldr	s3, [pc, #588]	; 8016358 <mode_WallSensorTuning+0x3ec>
 801610c:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016110:	eddf 0a91 	vldr	s1, [pc, #580]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016114:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016364 <mode_WallSensorTuning+0x3f8>
 8016118:	f7ed f988 	bl	800342c <straight_table2>
		break;
 801611c:	e0f6      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 801611e:	4b88      	ldr	r3, [pc, #544]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 8016120:	2208      	movs	r2, #8
 8016122:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016124:	2300      	movs	r3, #0
 8016126:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016128:	2300      	movs	r3, #0
 801612a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801612c:	2300      	movs	r3, #0
 801612e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016130:	2300      	movs	r3, #0
 8016132:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016134:	68b8      	ldr	r0, [r7, #8]
 8016136:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8016354 <mode_WallSensorTuning+0x3e8>
 801613a:	eddf 1a87 	vldr	s3, [pc, #540]	; 8016358 <mode_WallSensorTuning+0x3ec>
 801613e:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016142:	eddf 0a82 	vldr	s1, [pc, #520]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016146:	ed9f 0a89 	vldr	s0, [pc, #548]	; 801636c <mode_WallSensorTuning+0x400>
 801614a:	f7ed f96f 	bl	800342c <straight_table2>
			mode.WallCutMode=3;
 801614e:	2303      	movs	r3, #3
 8016150:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016152:	2300      	movs	r3, #0
 8016154:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016156:	68b8      	ldr	r0, [r7, #8]
 8016158:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8016354 <mode_WallSensorTuning+0x3e8>
 801615c:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016160:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016164:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016168:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8016370 <mode_WallSensorTuning+0x404>
 801616c:	f7ed f95e 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 8016170:	2300      	movs	r3, #0
 8016172:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016174:	2300      	movs	r3, #0
 8016176:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016178:	68b8      	ldr	r0, [r7, #8]
 801617a:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016354 <mode_WallSensorTuning+0x3e8>
 801617e:	eddf 1a76 	vldr	s3, [pc, #472]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016182:	ed9f 1a72 	vldr	s2, [pc, #456]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016186:	eddf 0a74 	vldr	s1, [pc, #464]	; 8016358 <mode_WallSensorTuning+0x3ec>
 801618a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8016374 <mode_WallSensorTuning+0x408>
 801618e:	f7ed f94d 	bl	800342c <straight_table2>
		break;
 8016192:	e0bb      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016194:	2300      	movs	r3, #0
 8016196:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016198:	2300      	movs	r3, #0
 801619a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801619c:	2300      	movs	r3, #0
 801619e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80161a0:	2300      	movs	r3, #0
 80161a2:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 80161a4:	68b8      	ldr	r0, [r7, #8]
 80161a6:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016354 <mode_WallSensorTuning+0x3e8>
 80161aa:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161ae:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161b2:	eddf 0a66 	vldr	s1, [pc, #408]	; 801634c <mode_WallSensorTuning+0x3e0>
 80161b6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801636c <mode_WallSensorTuning+0x400>
 80161ba:	f7ed f937 	bl	800342c <straight_table2>
			mode.WallCutMode=4;
 80161be:	2304      	movs	r3, #4
 80161c0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80161c2:	2300      	movs	r3, #0
 80161c4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80161c6:	68b8      	ldr	r0, [r7, #8]
 80161c8:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016354 <mode_WallSensorTuning+0x3e8>
 80161cc:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161d0:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161d4:	eddf 0a60 	vldr	s1, [pc, #384]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161d8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8016370 <mode_WallSensorTuning+0x404>
 80161dc:	f7ed f926 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 80161e0:	2300      	movs	r3, #0
 80161e2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80161e4:	2300      	movs	r3, #0
 80161e6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80161e8:	68b8      	ldr	r0, [r7, #8]
 80161ea:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016354 <mode_WallSensorTuning+0x3e8>
 80161ee:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161f2:	ed9f 1a56 	vldr	s2, [pc, #344]	; 801634c <mode_WallSensorTuning+0x3e0>
 80161f6:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016358 <mode_WallSensorTuning+0x3ec>
 80161fa:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8016374 <mode_WallSensorTuning+0x408>
 80161fe:	f7ed f915 	bl	800342c <straight_table2>
		break;
 8016202:	e083      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 8016204:	4b4e      	ldr	r3, [pc, #312]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 8016206:	2209      	movs	r2, #9
 8016208:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801620a:	2300      	movs	r3, #0
 801620c:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801620e:	68b8      	ldr	r0, [r7, #8]
 8016210:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8016354 <mode_WallSensorTuning+0x3e8>
 8016214:	eddf 1a50 	vldr	s3, [pc, #320]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016218:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 801634c <mode_WallSensorTuning+0x3e0>
 801621c:	eddf 0a4b 	vldr	s1, [pc, #300]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016220:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8016378 <mode_WallSensorTuning+0x40c>
 8016224:	f7ed f902 	bl	800342c <straight_table2>
		break;
 8016228:	e070      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 801622a:	4b45      	ldr	r3, [pc, #276]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 801622c:	220a      	movs	r2, #10
 801622e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016230:	2300      	movs	r3, #0
 8016232:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016234:	68b8      	ldr	r0, [r7, #8]
 8016236:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8016354 <mode_WallSensorTuning+0x3e8>
 801623a:	eddf 1a47 	vldr	s3, [pc, #284]	; 8016358 <mode_WallSensorTuning+0x3ec>
 801623e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016242:	eddf 0a42 	vldr	s1, [pc, #264]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016246:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8016378 <mode_WallSensorTuning+0x40c>
 801624a:	f7ed f8ef 	bl	800342c <straight_table2>

		break;
 801624e:	e05d      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016250:	4b3b      	ldr	r3, [pc, #236]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 8016252:	2207      	movs	r2, #7
 8016254:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016256:	2303      	movs	r3, #3
 8016258:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801625a:	68b8      	ldr	r0, [r7, #8]
 801625c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8016354 <mode_WallSensorTuning+0x3e8>
 8016260:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8016358 <mode_WallSensorTuning+0x3ec>
 8016264:	ed9f 1a39 	vldr	s2, [pc, #228]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016268:	eddf 0a38 	vldr	s1, [pc, #224]	; 801634c <mode_WallSensorTuning+0x3e0>
 801626c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8016378 <mode_WallSensorTuning+0x40c>
 8016270:	f7ed f8dc 	bl	800342c <straight_table2>
		break;
 8016274:	e04a      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8016276:	4b32      	ldr	r3, [pc, #200]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 8016278:	2208      	movs	r2, #8
 801627a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801627c:	2303      	movs	r3, #3
 801627e:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8016280:	68b8      	ldr	r0, [r7, #8]
 8016282:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 801637c <mode_WallSensorTuning+0x410>
 8016286:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016380 <mode_WallSensorTuning+0x414>
 801628a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 801634c <mode_WallSensorTuning+0x3e0>
 801628e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 801634c <mode_WallSensorTuning+0x3e0>
 8016292:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016384 <mode_WallSensorTuning+0x418>
 8016296:	f7ed f8c9 	bl	800342c <straight_table2>
		break;
 801629a:	e037      	b.n	801630c <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 801629c:	2305      	movs	r3, #5
 801629e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80162a0:	2300      	movs	r3, #0
 80162a2:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80162a4:	2300      	movs	r3, #0
 80162a6:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80162a8:	2300      	movs	r3, #0
 80162aa:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 80162ac:	68b8      	ldr	r0, [r7, #8]
 80162ae:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8016388 <mode_WallSensorTuning+0x41c>
 80162b2:	eddf 1a25 	vldr	s3, [pc, #148]	; 8016348 <mode_WallSensorTuning+0x3dc>
 80162b6:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016348 <mode_WallSensorTuning+0x3dc>
 80162ba:	eddf 0a24 	vldr	s1, [pc, #144]	; 801634c <mode_WallSensorTuning+0x3e0>
 80162be:	ed9f 0a33 	vldr	s0, [pc, #204]	; 801638c <mode_WallSensorTuning+0x420>
 80162c2:	f7ed f8b3 	bl	800342c <straight_table2>
			mode.WallCutMode=2;
 80162c6:	2302      	movs	r3, #2
 80162c8:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80162ca:	2300      	movs	r3, #0
 80162cc:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 80162ce:	68b8      	ldr	r0, [r7, #8]
 80162d0:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8016388 <mode_WallSensorTuning+0x41c>
 80162d4:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8016348 <mode_WallSensorTuning+0x3dc>
 80162d8:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8016348 <mode_WallSensorTuning+0x3dc>
 80162dc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8016348 <mode_WallSensorTuning+0x3dc>
 80162e0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016390 <mode_WallSensorTuning+0x424>
 80162e4:	f7ed f8a2 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 80162e8:	2300      	movs	r3, #0
 80162ea:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80162ec:	2300      	movs	r3, #0
 80162ee:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 80162f0:	68b8      	ldr	r0, [r7, #8]
 80162f2:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8016388 <mode_WallSensorTuning+0x41c>
 80162f6:	eddf 1a14 	vldr	s3, [pc, #80]	; 8016348 <mode_WallSensorTuning+0x3dc>
 80162fa:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801634c <mode_WallSensorTuning+0x3e0>
 80162fe:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016348 <mode_WallSensorTuning+0x3dc>
 8016302:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016394 <mode_WallSensorTuning+0x428>
 8016306:	f7ed f891 	bl	800342c <straight_table2>
		break;
 801630a:	bf00      	nop
	}
	record_mode=0;
 801630c:	4b0c      	ldr	r3, [pc, #48]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 801630e:	2200      	movs	r2, #0
 8016310:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016312:	2003      	movs	r0, #3
 8016314:	f7f1 fd62 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016318:	2003      	movs	r0, #3
 801631a:	f7f1 fd37 	bl	8007d8c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801631e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016322:	f7f2 f859 	bl	80083d8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016326:	f7f1 fdbb 	bl	8007ea0 <pl_FunMotor_stop>
	record_mode=0;
 801632a:	4b05      	ldr	r3, [pc, #20]	; (8016340 <mode_WallSensorTuning+0x3d4>)
 801632c:	2200      	movs	r2, #0
 801632e:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016334:	f7f2 f850 	bl	80083d8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016338:	2000      	movs	r0, #0
 801633a:	f7f1 fd1d 	bl	8007d78 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801633e:	e02e      	b.n	801639e <mode_WallSensorTuning+0x432>
 8016340:	2000edb4 	.word	0x2000edb4
 8016344:	459c4000 	.word	0x459c4000
 8016348:	43fa0000 	.word	0x43fa0000
 801634c:	00000000 	.word	0x00000000
 8016350:	44b40000 	.word	0x44b40000
 8016354:	453b8000 	.word	0x453b8000
 8016358:	43960000 	.word	0x43960000
 801635c:	431b8000 	.word	0x431b8000
 8016360:	41b40000 	.word	0x41b40000
 8016364:	42870000 	.word	0x42870000
 8016368:	42cd0000 	.word	0x42cd0000
 801636c:	4329c77b 	.word	0x4329c77b
 8016370:	41fe8ef6 	.word	0x41fe8ef6
 8016374:	42beeb39 	.word	0x42beeb39
 8016378:	43beeb39 	.word	0x43beeb39
 801637c:	461c4000 	.word	0x461c4000
 8016380:	442f0000 	.word	0x442f0000
 8016384:	4484977b 	.word	0x4484977b
 8016388:	44bb8000 	.word	0x44bb8000
 801638c:	43488000 	.word	0x43488000
 8016390:	42340000 	.word	0x42340000
 8016394:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8016398:	2001      	movs	r0, #1
 801639a:	f002 fac9 	bl	8018930 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801639e:	4b0e      	ldr	r3, [pc, #56]	; (80163d8 <mode_WallSensorTuning+0x46c>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80163a6:	ddf7      	ble.n	8016398 <mode_WallSensorTuning+0x42c>
 80163a8:	4b0b      	ldr	r3, [pc, #44]	; (80163d8 <mode_WallSensorTuning+0x46c>)
 80163aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80163ae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80163b2:	ddf1      	ble.n	8016398 <mode_WallSensorTuning+0x42c>
 80163b4:	4b08      	ldr	r3, [pc, #32]	; (80163d8 <mode_WallSensorTuning+0x46c>)
 80163b6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80163ba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80163be:	ddeb      	ble.n	8016398 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 80163c0:	2001      	movs	r0, #1
 80163c2:	f7f1 f835 	bl	8007430 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80163c6:	2001      	movs	r0, #1
 80163c8:	f7f1 f844 	bl	8007454 <pl_l_blue_LED>
	record_print();
 80163cc:	f000 faf6 	bl	80169bc <record_print>



}
 80163d0:	bf00      	nop
 80163d2:	3710      	adds	r7, #16
 80163d4:	46bd      	mov	sp, r7
 80163d6:	bd80      	pop	{r7, pc}
 80163d8:	200002bc 	.word	0x200002bc

080163dc <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	4603      	mov	r3, r0
 80163e4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80163e6:	2300      	movs	r3, #0
 80163e8:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 80163ea:	2300      	movs	r3, #0
 80163ec:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 80163ee:	2300      	movs	r3, #0
 80163f0:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 80163f2:	2300      	movs	r3, #0
 80163f4:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80163f6:	2001      	movs	r0, #1
 80163f8:	f7f1 fcbe 	bl	8007d78 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80163fc:	2003      	movs	r0, #3
 80163fe:	f7f1 fcc5 	bl	8007d8c <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016402:	2003      	movs	r0, #3
 8016404:	f7f1 fcea 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 8016408:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 8016798 <mode_WallSensorTuning_fast+0x3bc>
 801640c:	f7f1 fd52 	bl	8007eb4 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8016410:	f7f1 fd3c 	bl	8007e8c <pl_FunMotor_start>
	HAL_Delay(600);
 8016414:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016418:	f002 fa8a 	bl	8018930 <HAL_Delay>
	reset_gyro();
 801641c:	f7eb fbcc 	bl	8001bb8 <reset_gyro>
	reset_speed();
 8016420:	f7ea fe00 	bl	8001024 <reset_speed>
	clear_Ierror();
 8016424:	f7ee fb14 	bl	8004a50 <clear_Ierror>
	angle=0;
 8016428:	4bdc      	ldr	r3, [pc, #880]	; (801679c <mode_WallSensorTuning_fast+0x3c0>)
 801642a:	f04f 0200 	mov.w	r2, #0
 801642e:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8016430:	79fb      	ldrb	r3, [r7, #7]
 8016432:	2b0f      	cmp	r3, #15
 8016434:	f200 821b 	bhi.w	801686e <mode_WallSensorTuning_fast+0x492>
 8016438:	a201      	add	r2, pc, #4	; (adr r2, 8016440 <mode_WallSensorTuning_fast+0x64>)
 801643a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801643e:	bf00      	nop
 8016440:	08016481 	.word	0x08016481
 8016444:	080164b3 	.word	0x080164b3
 8016448:	08016529 	.word	0x08016529
 801644c:	0801659f 	.word	0x0801659f
 8016450:	08016615 	.word	0x08016615
 8016454:	0801668b 	.word	0x0801668b
 8016458:	08016701 	.word	0x08016701
 801645c:	08016727 	.word	0x08016727
 8016460:	0801674d 	.word	0x0801674d
 8016464:	08016773 	.word	0x08016773
 8016468:	080167fd 	.word	0x080167fd
 801646c:	08016823 	.word	0x08016823
 8016470:	08016849 	.word	0x08016849
 8016474:	0801686f 	.word	0x0801686f
 8016478:	0801686f 	.word	0x0801686f
 801647c:	0801686f 	.word	0x0801686f
		case 0://横壁追従制御
			record_mode=15;
 8016480:	4bc7      	ldr	r3, [pc, #796]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 8016482:	220f      	movs	r2, #15
 8016484:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016486:	2301      	movs	r3, #1
 8016488:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 801648a:	4bc6      	ldr	r3, [pc, #792]	; (80167a4 <mode_WallSensorTuning_fast+0x3c8>)
 801648c:	2201      	movs	r2, #1
 801648e:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8016490:	68f8      	ldr	r0, [r7, #12]
 8016492:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 80167a8 <mode_WallSensorTuning_fast+0x3cc>
 8016496:	eddf 1ac5 	vldr	s3, [pc, #788]	; 80167ac <mode_WallSensorTuning_fast+0x3d0>
 801649a:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801649e:	eddf 0ac4 	vldr	s1, [pc, #784]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 80164a2:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 80167b4 <mode_WallSensorTuning_fast+0x3d8>
 80164a6:	f7ec ffc1 	bl	800342c <straight_table2>
			highspeed_mode=0;
 80164aa:	4bbe      	ldr	r3, [pc, #760]	; (80167a4 <mode_WallSensorTuning_fast+0x3c8>)
 80164ac:	2200      	movs	r2, #0
 80164ae:	701a      	strb	r2, [r3, #0]
		break;
 80164b0:	e1dd      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 80164b2:	4bbb      	ldr	r3, [pc, #748]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 80164b4:	2208      	movs	r2, #8
 80164b6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80164b8:	2301      	movs	r3, #1
 80164ba:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80164bc:	2300      	movs	r3, #0
 80164be:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80164c0:	2300      	movs	r3, #0
 80164c2:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80164c4:	2300      	movs	r3, #0
 80164c6:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 80164c8:	68f8      	ldr	r0, [r7, #12]
 80164ca:	ed9f 2abb 	vldr	s4, [pc, #748]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 80164ce:	eddf 1abb 	vldr	s3, [pc, #748]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80164d2:	ed9f 1aba 	vldr	s2, [pc, #744]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80164d6:	eddf 0ab6 	vldr	s1, [pc, #728]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 80164da:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80167c0 <mode_WallSensorTuning_fast+0x3e4>
 80164de:	f7ec ffa5 	bl	800342c <straight_table2>
			mode.WallCutMode=2;
 80164e2:	2302      	movs	r3, #2
 80164e4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 80164ea:	68f8      	ldr	r0, [r7, #12]
 80164ec:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 80164f0:	eddf 1ab2 	vldr	s3, [pc, #712]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80164f4:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80164f8:	eddf 0ab0 	vldr	s1, [pc, #704]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80164fc:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80167c4 <mode_WallSensorTuning_fast+0x3e8>
 8016500:	f7ec ff94 	bl	800342c <straight_table2>
			mode.WallControlMode=1;
 8016504:	2301      	movs	r3, #1
 8016506:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016508:	2300      	movs	r3, #0
 801650a:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 801650c:	68f8      	ldr	r0, [r7, #12]
 801650e:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016512:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 8016516:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801651a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 801651e:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 80167c8 <mode_WallSensorTuning_fast+0x3ec>
 8016522:	f7ec ff83 	bl	800342c <straight_table2>
		break;
 8016526:	e1a2      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 8016528:	4b9d      	ldr	r3, [pc, #628]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 801652a:	2208      	movs	r2, #8
 801652c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801652e:	2301      	movs	r3, #1
 8016530:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016532:	2300      	movs	r3, #0
 8016534:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016536:	2300      	movs	r3, #0
 8016538:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801653a:	2300      	movs	r3, #0
 801653c:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 801653e:	68f8      	ldr	r0, [r7, #12]
 8016540:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016544:	eddf 1aa1 	vldr	s3, [pc, #644]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 8016548:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 801654c:	eddf 0a98 	vldr	s1, [pc, #608]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016550:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80167c0 <mode_WallSensorTuning_fast+0x3e4>
 8016554:	f7ec ff6a 	bl	800342c <straight_table2>
			mode.WallCutMode=2;
 8016558:	2302      	movs	r3, #2
 801655a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801655c:	2300      	movs	r3, #0
 801655e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 8016560:	68f8      	ldr	r0, [r7, #12]
 8016562:	ed9f 2a95 	vldr	s4, [pc, #596]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016566:	eddf 1a99 	vldr	s3, [pc, #612]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 801656a:	ed9f 1a98 	vldr	s2, [pc, #608]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 801656e:	eddf 0a97 	vldr	s1, [pc, #604]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 8016572:	ed9f 0a94 	vldr	s0, [pc, #592]	; 80167c4 <mode_WallSensorTuning_fast+0x3e8>
 8016576:	f7ec ff59 	bl	800342c <straight_table2>
			mode.WallControlMode=1;
 801657a:	2301      	movs	r3, #1
 801657c:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801657e:	2300      	movs	r3, #0
 8016580:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016588:	eddf 1a90 	vldr	s3, [pc, #576]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 801658c:	ed9f 1a88 	vldr	s2, [pc, #544]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016590:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80167cc <mode_WallSensorTuning_fast+0x3f0>
 8016594:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 80167c8 <mode_WallSensorTuning_fast+0x3ec>
 8016598:	f7ec ff48 	bl	800342c <straight_table2>
		break;
 801659c:	e167      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 801659e:	4b80      	ldr	r3, [pc, #512]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 80165a0:	2208      	movs	r2, #8
 80165a2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80165a4:	2301      	movs	r3, #1
 80165a6:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80165a8:	2300      	movs	r3, #0
 80165aa:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80165ac:	2300      	movs	r3, #0
 80165ae:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 80165b4:	68f8      	ldr	r0, [r7, #12]
 80165b6:	ed9f 2a86 	vldr	s4, [pc, #536]	; 80167d0 <mode_WallSensorTuning_fast+0x3f4>
 80165ba:	eddf 1a86 	vldr	s3, [pc, #536]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 80165be:	ed9f 1a85 	vldr	s2, [pc, #532]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 80165c2:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 80165c6:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80167c0 <mode_WallSensorTuning_fast+0x3e4>
 80165ca:	f7ec ff2f 	bl	800342c <straight_table2>
			mode.WallCutMode=2;
 80165ce:	2302      	movs	r3, #2
 80165d0:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80165d2:	2300      	movs	r3, #0
 80165d4:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 80165d6:	68f8      	ldr	r0, [r7, #12]
 80165d8:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 80167d0 <mode_WallSensorTuning_fast+0x3f4>
 80165dc:	eddf 1a7d 	vldr	s3, [pc, #500]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 80165e0:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 80165e4:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 80165e8:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80167c4 <mode_WallSensorTuning_fast+0x3e8>
 80165ec:	f7ec ff1e 	bl	800342c <straight_table2>
			mode.WallControlMode=1;
 80165f0:	2301      	movs	r3, #1
 80165f2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80165f4:	2300      	movs	r3, #0
 80165f6:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 80165f8:	68f8      	ldr	r0, [r7, #12]
 80165fa:	ed9f 2a75 	vldr	s4, [pc, #468]	; 80167d0 <mode_WallSensorTuning_fast+0x3f4>
 80165fe:	eddf 1a75 	vldr	s3, [pc, #468]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 8016602:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016606:	eddf 0a73 	vldr	s1, [pc, #460]	; 80167d4 <mode_WallSensorTuning_fast+0x3f8>
 801660a:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80167c8 <mode_WallSensorTuning_fast+0x3ec>
 801660e:	f7ec ff0d 	bl	800342c <straight_table2>
		break;
 8016612:	e12c      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8016614:	4b62      	ldr	r3, [pc, #392]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 8016616:	2208      	movs	r2, #8
 8016618:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 801661a:	2300      	movs	r3, #0
 801661c:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801661e:	2300      	movs	r3, #0
 8016620:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016622:	2300      	movs	r3, #0
 8016624:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016626:	2300      	movs	r3, #0
 8016628:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 801662a:	68f8      	ldr	r0, [r7, #12]
 801662c:	ed9f 2a62 	vldr	s4, [pc, #392]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016630:	eddf 1a62 	vldr	s3, [pc, #392]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 8016634:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 8016638:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801663c:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80167d8 <mode_WallSensorTuning_fast+0x3fc>
 8016640:	f7ec fef4 	bl	800342c <straight_table2>
			mode.WallCutMode=3;
 8016644:	2303      	movs	r3, #3
 8016646:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016648:	2300      	movs	r3, #0
 801664a:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 801664c:	68f8      	ldr	r0, [r7, #12]
 801664e:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016652:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 8016656:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 801665a:	eddf 0a58 	vldr	s1, [pc, #352]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 801665e:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 80167dc <mode_WallSensorTuning_fast+0x400>
 8016662:	f7ec fee3 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 8016666:	2300      	movs	r3, #0
 8016668:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801666a:	2300      	movs	r3, #0
 801666c:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 801666e:	68f8      	ldr	r0, [r7, #12]
 8016670:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 8016674:	eddf 1a51 	vldr	s3, [pc, #324]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 8016678:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801667c:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 8016680:	ed9f 0a57 	vldr	s0, [pc, #348]	; 80167e0 <mode_WallSensorTuning_fast+0x404>
 8016684:	f7ec fed2 	bl	800342c <straight_table2>
		break;
 8016688:	e0f1      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 801668a:	4b45      	ldr	r3, [pc, #276]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 801668c:	2208      	movs	r2, #8
 801668e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016690:	2300      	movs	r3, #0
 8016692:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016694:	2300      	movs	r3, #0
 8016696:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016698:	2300      	movs	r3, #0
 801669a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801669c:	2300      	movs	r3, #0
 801669e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 80166a0:	68f8      	ldr	r0, [r7, #12]
 80166a2:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 80166a6:	eddf 1a45 	vldr	s3, [pc, #276]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166aa:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166ae:	eddf 0a40 	vldr	s1, [pc, #256]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 80166b2:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80167d8 <mode_WallSensorTuning_fast+0x3fc>
 80166b6:	f7ec feb9 	bl	800342c <straight_table2>
			mode.WallCutMode=4;
 80166ba:	2304      	movs	r3, #4
 80166bc:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80166be:	2300      	movs	r3, #0
 80166c0:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 80166c8:	eddf 1a3c 	vldr	s3, [pc, #240]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166cc:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166d0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166d4:	ed9f 0a41 	vldr	s0, [pc, #260]	; 80167dc <mode_WallSensorTuning_fast+0x400>
 80166d8:	f7ec fea8 	bl	800342c <straight_table2>
			mode.WallControlMode=0;
 80166dc:	2300      	movs	r3, #0
 80166de:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80166e0:	2300      	movs	r3, #0
 80166e2:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	ed9f 2a34 	vldr	s4, [pc, #208]	; 80167b8 <mode_WallSensorTuning_fast+0x3dc>
 80166ea:	eddf 1a34 	vldr	s3, [pc, #208]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166ee:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 80166f2:	eddf 0a32 	vldr	s1, [pc, #200]	; 80167bc <mode_WallSensorTuning_fast+0x3e0>
 80166f6:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 80167e0 <mode_WallSensorTuning_fast+0x404>
 80166fa:	f7ec fe97 	bl	800342c <straight_table2>
		break;
 80166fe:	e0b6      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 8016700:	4b27      	ldr	r3, [pc, #156]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 8016702:	2207      	movs	r2, #7
 8016704:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016706:	2300      	movs	r3, #0
 8016708:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 801670a:	68f8      	ldr	r0, [r7, #12]
 801670c:	ed9f 2a35 	vldr	s4, [pc, #212]	; 80167e4 <mode_WallSensorTuning_fast+0x408>
 8016710:	eddf 1a35 	vldr	s3, [pc, #212]	; 80167e8 <mode_WallSensorTuning_fast+0x40c>
 8016714:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016718:	eddf 0a25 	vldr	s1, [pc, #148]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801671c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80167ec <mode_WallSensorTuning_fast+0x410>
 8016720:	f7ec fe84 	bl	800342c <straight_table2>
		break;
 8016724:	e0a3      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8016726:	4b1e      	ldr	r3, [pc, #120]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 8016728:	2209      	movs	r2, #9
 801672a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801672c:	2300      	movs	r3, #0
 801672e:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016730:	68f8      	ldr	r0, [r7, #12]
 8016732:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 80167e4 <mode_WallSensorTuning_fast+0x408>
 8016736:	eddf 1a2c 	vldr	s3, [pc, #176]	; 80167e8 <mode_WallSensorTuning_fast+0x40c>
 801673a:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801673e:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016742:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 80167ec <mode_WallSensorTuning_fast+0x410>
 8016746:	f7ec fe71 	bl	800342c <straight_table2>

		break;
 801674a:	e090      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 801674c:	4b14      	ldr	r3, [pc, #80]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 801674e:	2207      	movs	r2, #7
 8016750:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016752:	2303      	movs	r3, #3
 8016754:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016756:	68f8      	ldr	r0, [r7, #12]
 8016758:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80167e4 <mode_WallSensorTuning_fast+0x408>
 801675c:	eddf 1a24 	vldr	s3, [pc, #144]	; 80167f0 <mode_WallSensorTuning_fast+0x414>
 8016760:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016764:	eddf 0a12 	vldr	s1, [pc, #72]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 8016768:	ed9f 0a22 	vldr	s0, [pc, #136]	; 80167f4 <mode_WallSensorTuning_fast+0x418>
 801676c:	f7ec fe5e 	bl	800342c <straight_table2>
		break;
 8016770:	e07d      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 8016772:	4b0b      	ldr	r3, [pc, #44]	; (80167a0 <mode_WallSensorTuning_fast+0x3c4>)
 8016774:	2208      	movs	r2, #8
 8016776:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016778:	2303      	movs	r3, #3
 801677a:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 801677c:	68f8      	ldr	r0, [r7, #12]
 801677e:	ed9f 2a19 	vldr	s4, [pc, #100]	; 80167e4 <mode_WallSensorTuning_fast+0x408>
 8016782:	eddf 1a1b 	vldr	s3, [pc, #108]	; 80167f0 <mode_WallSensorTuning_fast+0x414>
 8016786:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801678a:	eddf 0a09 	vldr	s1, [pc, #36]	; 80167b0 <mode_WallSensorTuning_fast+0x3d4>
 801678e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 80167f8 <mode_WallSensorTuning_fast+0x41c>
 8016792:	f7ec fe4b 	bl	800342c <straight_table2>
		break;
 8016796:	e06a      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
 8016798:	3f7d70a4 	.word	0x3f7d70a4
 801679c:	20000268 	.word	0x20000268
 80167a0:	2000edb4 	.word	0x2000edb4
 80167a4:	2000080c 	.word	0x2000080c
 80167a8:	46bb8000 	.word	0x46bb8000
 80167ac:	459c4000 	.word	0x459c4000
 80167b0:	00000000 	.word	0x00000000
 80167b4:	44e39000 	.word	0x44e39000
 80167b8:	461c4000 	.word	0x461c4000
 80167bc:	447a0000 	.word	0x447a0000
 80167c0:	42cd0000 	.word	0x42cd0000
 80167c4:	41b40000 	.word	0x41b40000
 80167c8:	42e10000 	.word	0x42e10000
 80167cc:	44960000 	.word	0x44960000
 80167d0:	464b2000 	.word	0x464b2000
 80167d4:	44bb8000 	.word	0x44bb8000
 80167d8:	4321c77b 	.word	0x4321c77b
 80167dc:	41fe8ef6 	.word	0x41fe8ef6
 80167e0:	42beeb39 	.word	0x42beeb39
 80167e4:	469c4000 	.word	0x469c4000
 80167e8:	44fa0000 	.word	0x44fa0000
 80167ec:	445ebd17 	.word	0x445ebd17
 80167f0:	455ac000 	.word	0x455ac000
 80167f4:	443eeb39 	.word	0x443eeb39
 80167f8:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 80167fc:	4b39      	ldr	r3, [pc, #228]	; (80168e4 <mode_WallSensorTuning_fast+0x508>)
 80167fe:	220a      	movs	r2, #10
 8016800:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016802:	2303      	movs	r3, #3
 8016804:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	ed9f 2a37 	vldr	s4, [pc, #220]	; 80168e8 <mode_WallSensorTuning_fast+0x50c>
 801680c:	eddf 1a37 	vldr	s3, [pc, #220]	; 80168ec <mode_WallSensorTuning_fast+0x510>
 8016810:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80168f0 <mode_WallSensorTuning_fast+0x514>
 8016814:	eddf 0a36 	vldr	s1, [pc, #216]	; 80168f0 <mode_WallSensorTuning_fast+0x514>
 8016818:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80168f4 <mode_WallSensorTuning_fast+0x518>
 801681c:	f7ec fe06 	bl	800342c <straight_table2>
		break;
 8016820:	e025      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 8016822:	4b30      	ldr	r3, [pc, #192]	; (80168e4 <mode_WallSensorTuning_fast+0x508>)
 8016824:	220b      	movs	r2, #11
 8016826:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016828:	2303      	movs	r3, #3
 801682a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 801682c:	68f8      	ldr	r0, [r7, #12]
 801682e:	ed9f 2a32 	vldr	s4, [pc, #200]	; 80168f8 <mode_WallSensorTuning_fast+0x51c>
 8016832:	eddf 1a32 	vldr	s3, [pc, #200]	; 80168fc <mode_WallSensorTuning_fast+0x520>
 8016836:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80168f0 <mode_WallSensorTuning_fast+0x514>
 801683a:	eddf 0a2d 	vldr	s1, [pc, #180]	; 80168f0 <mode_WallSensorTuning_fast+0x514>
 801683e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80168f4 <mode_WallSensorTuning_fast+0x518>
 8016842:	f7ec fdf3 	bl	800342c <straight_table2>
		break;
 8016846:	e012      	b.n	801686e <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8016848:	4b26      	ldr	r3, [pc, #152]	; (80168e4 <mode_WallSensorTuning_fast+0x508>)
 801684a:	220c      	movs	r2, #12
 801684c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801684e:	2303      	movs	r3, #3
 8016850:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016852:	68f8      	ldr	r0, [r7, #12]
 8016854:	ed9f 2a28 	vldr	s4, [pc, #160]	; 80168f8 <mode_WallSensorTuning_fast+0x51c>
 8016858:	eddf 1a28 	vldr	s3, [pc, #160]	; 80168fc <mode_WallSensorTuning_fast+0x520>
 801685c:	ed9f 1a24 	vldr	s2, [pc, #144]	; 80168f0 <mode_WallSensorTuning_fast+0x514>
 8016860:	eddf 0a23 	vldr	s1, [pc, #140]	; 80168f0 <mode_WallSensorTuning_fast+0x514>
 8016864:	ed9f 0a23 	vldr	s0, [pc, #140]	; 80168f4 <mode_WallSensorTuning_fast+0x518>
 8016868:	f7ec fde0 	bl	800342c <straight_table2>
		break;
 801686c:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 801686e:	4b1d      	ldr	r3, [pc, #116]	; (80168e4 <mode_WallSensorTuning_fast+0x508>)
 8016870:	2200      	movs	r2, #0
 8016872:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016874:	2003      	movs	r0, #3
 8016876:	f7f1 fab1 	bl	8007ddc <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801687a:	2003      	movs	r0, #3
 801687c:	f7f1 fa86 	bl	8007d8c <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016884:	f7f1 fda8 	bl	80083d8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016888:	f7f1 fb0a 	bl	8007ea0 <pl_FunMotor_stop>
	record_mode=0;
 801688c:	4b15      	ldr	r3, [pc, #84]	; (80168e4 <mode_WallSensorTuning_fast+0x508>)
 801688e:	2200      	movs	r2, #0
 8016890:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016896:	f7f1 fd9f 	bl	80083d8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801689a:	2000      	movs	r0, #0
 801689c:	f7f1 fa6c 	bl	8007d78 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80168a0:	e002      	b.n	80168a8 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 80168a2:	2001      	movs	r0, #1
 80168a4:	f002 f844 	bl	8018930 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80168a8:	4b15      	ldr	r3, [pc, #84]	; (8016900 <mode_WallSensorTuning_fast+0x524>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80168b0:	ddf7      	ble.n	80168a2 <mode_WallSensorTuning_fast+0x4c6>
 80168b2:	4b13      	ldr	r3, [pc, #76]	; (8016900 <mode_WallSensorTuning_fast+0x524>)
 80168b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80168b8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80168bc:	ddf1      	ble.n	80168a2 <mode_WallSensorTuning_fast+0x4c6>
 80168be:	4b10      	ldr	r3, [pc, #64]	; (8016900 <mode_WallSensorTuning_fast+0x524>)
 80168c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80168c4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80168c8:	ddeb      	ble.n	80168a2 <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 80168ca:	2001      	movs	r0, #1
 80168cc:	f7f0 fdb0 	bl	8007430 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80168d0:	2001      	movs	r0, #1
 80168d2:	f7f0 fdbf 	bl	8007454 <pl_l_blue_LED>
	record_print();
 80168d6:	f000 f871 	bl	80169bc <record_print>



}
 80168da:	bf00      	nop
 80168dc:	3710      	adds	r7, #16
 80168de:	46bd      	mov	sp, r7
 80168e0:	bd80      	pop	{r7, pc}
 80168e2:	bf00      	nop
 80168e4:	2000edb4 	.word	0x2000edb4
 80168e8:	469c4000 	.word	0x469c4000
 80168ec:	455ac000 	.word	0x455ac000
 80168f0:	00000000 	.word	0x00000000
 80168f4:	443eeb39 	.word	0x443eeb39
 80168f8:	466a6000 	.word	0x466a6000
 80168fc:	453b8000 	.word	0x453b8000
 8016900:	200002bc 	.word	0x200002bc

08016904 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016904:	b480      	push	{r7}
 8016906:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016908:	4b06      	ldr	r3, [pc, #24]	; (8016924 <record_reset+0x20>)
 801690a:	2200      	movs	r2, #0
 801690c:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 801690e:	4b06      	ldr	r3, [pc, #24]	; (8016928 <record_reset+0x24>)
 8016910:	2200      	movs	r2, #0
 8016912:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016914:	4b05      	ldr	r3, [pc, #20]	; (801692c <record_reset+0x28>)
 8016916:	2200      	movs	r2, #0
 8016918:	701a      	strb	r2, [r3, #0]
}
 801691a:	bf00      	nop
 801691c:	46bd      	mov	sp, r7
 801691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016922:	4770      	bx	lr
 8016924:	2000edb4 	.word	0x2000edb4
 8016928:	2000edb8 	.word	0x2000edb8
 801692c:	2000edc0 	.word	0x2000edc0

08016930 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016930:	b490      	push	{r4, r7}
 8016932:	b084      	sub	sp, #16
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 801693a:	2300      	movs	r3, #0
 801693c:	60fb      	str	r3, [r7, #12]
 801693e:	e013      	b.n	8016968 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	009b      	lsls	r3, r3, #2
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016948:	4b18      	ldr	r3, [pc, #96]	; (80169ac <record_data+0x7c>)
 801694a:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 801694c:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 801694e:	4818      	ldr	r0, [pc, #96]	; (80169b0 <record_data+0x80>)
 8016950:	68f9      	ldr	r1, [r7, #12]
 8016952:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016956:	fb04 f101 	mul.w	r1, r4, r1
 801695a:	440b      	add	r3, r1
 801695c:	009b      	lsls	r3, r3, #2
 801695e:	4403      	add	r3, r0
 8016960:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	3301      	adds	r3, #1
 8016966:	60fb      	str	r3, [r7, #12]
 8016968:	68fa      	ldr	r2, [r7, #12]
 801696a:	683b      	ldr	r3, [r7, #0]
 801696c:	429a      	cmp	r2, r3
 801696e:	dbe7      	blt.n	8016940 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016970:	4b10      	ldr	r3, [pc, #64]	; (80169b4 <record_data+0x84>)
 8016972:	781b      	ldrb	r3, [r3, #0]
 8016974:	2b01      	cmp	r3, #1
 8016976:	d103      	bne.n	8016980 <record_data+0x50>
		record_end_point = record_time;
 8016978:	4b0c      	ldr	r3, [pc, #48]	; (80169ac <record_data+0x7c>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	4a0e      	ldr	r2, [pc, #56]	; (80169b8 <record_data+0x88>)
 801697e:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016980:	4b0a      	ldr	r3, [pc, #40]	; (80169ac <record_data+0x7c>)
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	3301      	adds	r3, #1
 8016986:	4a09      	ldr	r2, [pc, #36]	; (80169ac <record_data+0x7c>)
 8016988:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 801698a:	4b08      	ldr	r3, [pc, #32]	; (80169ac <record_data+0x7c>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016992:	4293      	cmp	r3, r2
 8016994:	dd05      	ble.n	80169a2 <record_data+0x72>
		record_time = 0;
 8016996:	4b05      	ldr	r3, [pc, #20]	; (80169ac <record_data+0x7c>)
 8016998:	2200      	movs	r2, #0
 801699a:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 801699c:	4b05      	ldr	r3, [pc, #20]	; (80169b4 <record_data+0x84>)
 801699e:	2201      	movs	r2, #1
 80169a0:	701a      	strb	r2, [r3, #0]
	}

}
 80169a2:	bf00      	nop
 80169a4:	3710      	adds	r7, #16
 80169a6:	46bd      	mov	sp, r7
 80169a8:	bc90      	pop	{r4, r7}
 80169aa:	4770      	bx	lr
 80169ac:	2000edb8 	.word	0x2000edb8
 80169b0:	20003234 	.word	0x20003234
 80169b4:	2000edc0 	.word	0x2000edc0
 80169b8:	2000edbc 	.word	0x2000edbc

080169bc <record_print>:

void record_print(void) {
 80169bc:	b580      	push	{r7, lr}
 80169be:	b084      	sub	sp, #16
 80169c0:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 80169c2:	4b3a      	ldr	r3, [pc, #232]	; (8016aac <record_print+0xf0>)
 80169c4:	781b      	ldrb	r3, [r3, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d12e      	bne.n	8016a28 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 80169ca:	2300      	movs	r3, #0
 80169cc:	60fb      	str	r3, [r7, #12]
 80169ce:	e025      	b.n	8016a1c <record_print+0x60>

			printf("%d", a);
 80169d0:	68f9      	ldr	r1, [r7, #12]
 80169d2:	4837      	ldr	r0, [pc, #220]	; (8016ab0 <record_print+0xf4>)
 80169d4:	f009 fefe 	bl	80207d4 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80169d8:	2300      	movs	r3, #0
 80169da:	607b      	str	r3, [r7, #4]
 80169dc:	e015      	b.n	8016a0a <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 80169de:	4935      	ldr	r1, [pc, #212]	; (8016ab4 <record_print+0xf8>)
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80169e6:	fb03 f202 	mul.w	r2, r3, r2
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	4413      	add	r3, r2
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	440b      	add	r3, r1
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7e9 fdcf 	bl	8000598 <__aeabi_f2d>
 80169fa:	4602      	mov	r2, r0
 80169fc:	460b      	mov	r3, r1
 80169fe:	482e      	ldr	r0, [pc, #184]	; (8016ab8 <record_print+0xfc>)
 8016a00:	f009 fee8 	bl	80207d4 <iprintf>
					record_count++) {
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	3301      	adds	r3, #1
 8016a08:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2b03      	cmp	r3, #3
 8016a0e:	dde6      	ble.n	80169de <record_print+0x22>
			}
			printf("\n");
 8016a10:	200a      	movs	r0, #10
 8016a12:	f009 fef7 	bl	8020804 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	3301      	adds	r3, #1
 8016a1a:	60fb      	str	r3, [r7, #12]
 8016a1c:	4b27      	ldr	r3, [pc, #156]	; (8016abc <record_print+0x100>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	68fa      	ldr	r2, [r7, #12]
 8016a22:	429a      	cmp	r2, r3
 8016a24:	dbd4      	blt.n	80169d0 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016a26:	e03c      	b.n	8016aa2 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016a28:	2300      	movs	r3, #0
 8016a2a:	60fb      	str	r3, [r7, #12]
 8016a2c:	e034      	b.n	8016a98 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016a2e:	4b24      	ldr	r3, [pc, #144]	; (8016ac0 <record_print+0x104>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	3301      	adds	r3, #1
 8016a34:	68fa      	ldr	r2, [r7, #12]
 8016a36:	4413      	add	r3, r2
 8016a38:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016a40:	4293      	cmp	r3, r2
 8016a42:	dd03      	ble.n	8016a4c <record_print+0x90>
				time_index -= max_record_time;
 8016a44:	68bb      	ldr	r3, [r7, #8]
 8016a46:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016a4a:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016a4c:	68f9      	ldr	r1, [r7, #12]
 8016a4e:	4818      	ldr	r0, [pc, #96]	; (8016ab0 <record_print+0xf4>)
 8016a50:	f009 fec0 	bl	80207d4 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016a54:	2300      	movs	r3, #0
 8016a56:	603b      	str	r3, [r7, #0]
 8016a58:	e015      	b.n	8016a86 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016a5a:	4916      	ldr	r1, [pc, #88]	; (8016ab4 <record_print+0xf8>)
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016a62:	fb03 f202 	mul.w	r2, r3, r2
 8016a66:	68bb      	ldr	r3, [r7, #8]
 8016a68:	4413      	add	r3, r2
 8016a6a:	009b      	lsls	r3, r3, #2
 8016a6c:	440b      	add	r3, r1
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7e9 fd91 	bl	8000598 <__aeabi_f2d>
 8016a76:	4602      	mov	r2, r0
 8016a78:	460b      	mov	r3, r1
 8016a7a:	480f      	ldr	r0, [pc, #60]	; (8016ab8 <record_print+0xfc>)
 8016a7c:	f009 feaa 	bl	80207d4 <iprintf>
					record_count++) {
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	3301      	adds	r3, #1
 8016a84:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	2b03      	cmp	r3, #3
 8016a8a:	dde6      	ble.n	8016a5a <record_print+0x9e>
			printf("\n");
 8016a8c:	200a      	movs	r0, #10
 8016a8e:	f009 feb9 	bl	8020804 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	3301      	adds	r3, #1
 8016a96:	60fb      	str	r3, [r7, #12]
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	ddc5      	ble.n	8016a2e <record_print+0x72>
}
 8016aa2:	bf00      	nop
 8016aa4:	3710      	adds	r7, #16
 8016aa6:	46bd      	mov	sp, r7
 8016aa8:	bd80      	pop	{r7, pc}
 8016aaa:	bf00      	nop
 8016aac:	2000edc0 	.word	0x2000edc0
 8016ab0:	08024428 	.word	0x08024428
 8016ab4:	20003234 	.word	0x20003234
 8016ab8:	0802442c 	.word	0x0802442c
 8016abc:	2000edb8 	.word	0x2000edb8
 8016ac0:	2000edbc 	.word	0x2000edbc

08016ac4 <interrupt_record>:

void interrupt_record(void) {
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b084      	sub	sp, #16
 8016ac8:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016aca:	4baf      	ldr	r3, [pc, #700]	; (8016d88 <interrupt_record+0x2c4>)
 8016acc:	781b      	ldrb	r3, [r3, #0]
 8016ace:	2b01      	cmp	r3, #1
 8016ad0:	d110      	bne.n	8016af4 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016ad2:	4bae      	ldr	r3, [pc, #696]	; (8016d8c <interrupt_record+0x2c8>)
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016ad8:	4bad      	ldr	r3, [pc, #692]	; (8016d90 <interrupt_record+0x2cc>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016ade:	4bad      	ldr	r3, [pc, #692]	; (8016d94 <interrupt_record+0x2d0>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016ae4:	4bac      	ldr	r3, [pc, #688]	; (8016d98 <interrupt_record+0x2d4>)
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016aea:	463b      	mov	r3, r7
 8016aec:	2104      	movs	r1, #4
 8016aee:	4618      	mov	r0, r3
 8016af0:	f7ff ff1e 	bl	8016930 <record_data>
		}
	if (record_mode == 2) {
 8016af4:	4ba4      	ldr	r3, [pc, #656]	; (8016d88 <interrupt_record+0x2c4>)
 8016af6:	781b      	ldrb	r3, [r3, #0]
 8016af8:	2b02      	cmp	r3, #2
 8016afa:	d11b      	bne.n	8016b34 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016afc:	4ba7      	ldr	r3, [pc, #668]	; (8016d9c <interrupt_record+0x2d8>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016b02:	4ba7      	ldr	r3, [pc, #668]	; (8016da0 <interrupt_record+0x2dc>)
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016b08:	4ba6      	ldr	r3, [pc, #664]	; (8016da4 <interrupt_record+0x2e0>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8016b0e:	4ba6      	ldr	r3, [pc, #664]	; (8016da8 <interrupt_record+0x2e4>)
 8016b10:	ed93 7a00 	vldr	s14, [r3]
 8016b14:	4ba5      	ldr	r3, [pc, #660]	; (8016dac <interrupt_record+0x2e8>)
 8016b16:	edd3 7a00 	vldr	s15, [r3]
 8016b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016b26:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016b2a:	463b      	mov	r3, r7
 8016b2c:	2104      	movs	r1, #4
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7ff fefe 	bl	8016930 <record_data>
		}
	if (record_mode == 3) {
 8016b34:	4b94      	ldr	r3, [pc, #592]	; (8016d88 <interrupt_record+0x2c4>)
 8016b36:	781b      	ldrb	r3, [r3, #0]
 8016b38:	2b03      	cmp	r3, #3
 8016b3a:	d126      	bne.n	8016b8a <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016b3c:	4b99      	ldr	r3, [pc, #612]	; (8016da4 <interrupt_record+0x2e0>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8016b42:	4b98      	ldr	r3, [pc, #608]	; (8016da4 <interrupt_record+0x2e0>)
 8016b44:	689b      	ldr	r3, [r3, #8]
 8016b46:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016b48:	4b97      	ldr	r3, [pc, #604]	; (8016da8 <interrupt_record+0x2e4>)
 8016b4a:	ed93 7a00 	vldr	s14, [r3]
 8016b4e:	4b97      	ldr	r3, [pc, #604]	; (8016dac <interrupt_record+0x2e8>)
 8016b50:	edd3 7a00 	vldr	s15, [r3]
 8016b54:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b58:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016b5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016b60:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016b64:	4b92      	ldr	r3, [pc, #584]	; (8016db0 <interrupt_record+0x2ec>)
 8016b66:	ed93 7a00 	vldr	s14, [r3]
 8016b6a:	4b92      	ldr	r3, [pc, #584]	; (8016db4 <interrupt_record+0x2f0>)
 8016b6c:	edd3 7a00 	vldr	s15, [r3]
 8016b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016b74:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016b78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016b7c:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016b80:	463b      	mov	r3, r7
 8016b82:	2104      	movs	r1, #4
 8016b84:	4618      	mov	r0, r3
 8016b86:	f7ff fed3 	bl	8016930 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8016b8a:	4b7f      	ldr	r3, [pc, #508]	; (8016d88 <interrupt_record+0x2c4>)
 8016b8c:	781b      	ldrb	r3, [r3, #0]
 8016b8e:	2b04      	cmp	r3, #4
 8016b90:	d126      	bne.n	8016be0 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8016b92:	4b84      	ldr	r3, [pc, #528]	; (8016da4 <interrupt_record+0x2e0>)
 8016b94:	689b      	ldr	r3, [r3, #8]
 8016b96:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016b98:	4b7e      	ldr	r3, [pc, #504]	; (8016d94 <interrupt_record+0x2d0>)
 8016b9a:	ed93 7a00 	vldr	s14, [r3]
 8016b9e:	4b7e      	ldr	r3, [pc, #504]	; (8016d98 <interrupt_record+0x2d4>)
 8016ba0:	edd3 7a00 	vldr	s15, [r3]
 8016ba4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ba8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016bac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016bb0:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016bb4:	4b80      	ldr	r3, [pc, #512]	; (8016db8 <interrupt_record+0x2f4>)
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016bba:	4b7d      	ldr	r3, [pc, #500]	; (8016db0 <interrupt_record+0x2ec>)
 8016bbc:	ed93 7a00 	vldr	s14, [r3]
 8016bc0:	4b7c      	ldr	r3, [pc, #496]	; (8016db4 <interrupt_record+0x2f0>)
 8016bc2:	edd3 7a00 	vldr	s15, [r3]
 8016bc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016bca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016bd2:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016bd6:	463b      	mov	r3, r7
 8016bd8:	2104      	movs	r1, #4
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7ff fea8 	bl	8016930 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016be0:	4b69      	ldr	r3, [pc, #420]	; (8016d88 <interrupt_record+0x2c4>)
 8016be2:	781b      	ldrb	r3, [r3, #0]
 8016be4:	2b05      	cmp	r3, #5
 8016be6:	d110      	bne.n	8016c0a <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016be8:	4b6e      	ldr	r3, [pc, #440]	; (8016da4 <interrupt_record+0x2e0>)
 8016bea:	689b      	ldr	r3, [r3, #8]
 8016bec:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016bee:	4b69      	ldr	r3, [pc, #420]	; (8016d94 <interrupt_record+0x2d0>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016bf4:	4b68      	ldr	r3, [pc, #416]	; (8016d98 <interrupt_record+0x2d4>)
 8016bf6:	681b      	ldr	r3, [r3, #0]
 8016bf8:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016bfa:	4b6f      	ldr	r3, [pc, #444]	; (8016db8 <interrupt_record+0x2f4>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016c00:	463b      	mov	r3, r7
 8016c02:	2104      	movs	r1, #4
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7ff fe93 	bl	8016930 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016c0a:	4b5f      	ldr	r3, [pc, #380]	; (8016d88 <interrupt_record+0x2c4>)
 8016c0c:	781b      	ldrb	r3, [r3, #0]
 8016c0e:	2b05      	cmp	r3, #5
 8016c10:	d110      	bne.n	8016c34 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8016c12:	4b6a      	ldr	r3, [pc, #424]	; (8016dbc <interrupt_record+0x2f8>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016c18:	4b5e      	ldr	r3, [pc, #376]	; (8016d94 <interrupt_record+0x2d0>)
 8016c1a:	681b      	ldr	r3, [r3, #0]
 8016c1c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016c1e:	4b5e      	ldr	r3, [pc, #376]	; (8016d98 <interrupt_record+0x2d4>)
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016c24:	4b64      	ldr	r3, [pc, #400]	; (8016db8 <interrupt_record+0x2f4>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016c2a:	463b      	mov	r3, r7
 8016c2c:	2104      	movs	r1, #4
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f7ff fe7e 	bl	8016930 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8016c34:	4b54      	ldr	r3, [pc, #336]	; (8016d88 <interrupt_record+0x2c4>)
 8016c36:	781b      	ldrb	r3, [r3, #0]
 8016c38:	2b06      	cmp	r3, #6
 8016c3a:	d110      	bne.n	8016c5e <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8016c3c:	4b59      	ldr	r3, [pc, #356]	; (8016da4 <interrupt_record+0x2e0>)
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8016c42:	4b5f      	ldr	r3, [pc, #380]	; (8016dc0 <interrupt_record+0x2fc>)
 8016c44:	681b      	ldr	r3, [r3, #0]
 8016c46:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8016c48:	4b5e      	ldr	r3, [pc, #376]	; (8016dc4 <interrupt_record+0x300>)
 8016c4a:	681b      	ldr	r3, [r3, #0]
 8016c4c:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8016c4e:	4b5e      	ldr	r3, [pc, #376]	; (8016dc8 <interrupt_record+0x304>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016c54:	463b      	mov	r3, r7
 8016c56:	2104      	movs	r1, #4
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7ff fe69 	bl	8016930 <record_data>
			}
	if (record_mode == 7) {
 8016c5e:	4b4a      	ldr	r3, [pc, #296]	; (8016d88 <interrupt_record+0x2c4>)
 8016c60:	781b      	ldrb	r3, [r3, #0]
 8016c62:	2b07      	cmp	r3, #7
 8016c64:	d125      	bne.n	8016cb2 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016c66:	4b59      	ldr	r3, [pc, #356]	; (8016dcc <interrupt_record+0x308>)
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	ee07 3a90 	vmov	s15, r3
 8016c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c72:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8016c76:	4b56      	ldr	r3, [pc, #344]	; (8016dd0 <interrupt_record+0x30c>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	ee07 3a90 	vmov	s15, r3
 8016c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c82:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8016c86:	4b51      	ldr	r3, [pc, #324]	; (8016dcc <interrupt_record+0x308>)
 8016c88:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016c8c:	ee07 3a90 	vmov	s15, r3
 8016c90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016c94:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016c98:	4b4d      	ldr	r3, [pc, #308]	; (8016dd0 <interrupt_record+0x30c>)
 8016c9a:	691b      	ldr	r3, [r3, #16]
 8016c9c:	ee07 3a90 	vmov	s15, r3
 8016ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ca4:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016ca8:	463b      	mov	r3, r7
 8016caa:	2104      	movs	r1, #4
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7ff fe3f 	bl	8016930 <record_data>
		}
	if (record_mode == 8) {
 8016cb2:	4b35      	ldr	r3, [pc, #212]	; (8016d88 <interrupt_record+0x2c4>)
 8016cb4:	781b      	ldrb	r3, [r3, #0]
 8016cb6:	2b08      	cmp	r3, #8
 8016cb8:	d125      	bne.n	8016d06 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016cba:	4b44      	ldr	r3, [pc, #272]	; (8016dcc <interrupt_record+0x308>)
 8016cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016cbe:	ee07 3a90 	vmov	s15, r3
 8016cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cc6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8016cca:	4b42      	ldr	r3, [pc, #264]	; (8016dd4 <interrupt_record+0x310>)
 8016ccc:	685b      	ldr	r3, [r3, #4]
 8016cce:	ee07 3a90 	vmov	s15, r3
 8016cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cd6:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016cda:	4b3c      	ldr	r3, [pc, #240]	; (8016dcc <interrupt_record+0x308>)
 8016cdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016ce0:	ee07 3a90 	vmov	s15, r3
 8016ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ce8:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8016cec:	4b39      	ldr	r3, [pc, #228]	; (8016dd4 <interrupt_record+0x310>)
 8016cee:	68db      	ldr	r3, [r3, #12]
 8016cf0:	ee07 3a90 	vmov	s15, r3
 8016cf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016cf8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016cfc:	463b      	mov	r3, r7
 8016cfe:	2104      	movs	r1, #4
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7ff fe15 	bl	8016930 <record_data>
		}
	if (record_mode == 9) { //90
 8016d06:	4b20      	ldr	r3, [pc, #128]	; (8016d88 <interrupt_record+0x2c4>)
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	2b09      	cmp	r3, #9
 8016d0c:	d11b      	bne.n	8016d46 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016d0e:	4b2f      	ldr	r3, [pc, #188]	; (8016dcc <interrupt_record+0x308>)
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	ee07 3a90 	vmov	s15, r3
 8016d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d1a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8016d1e:	4b2b      	ldr	r3, [pc, #172]	; (8016dcc <interrupt_record+0x308>)
 8016d20:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016d24:	ee07 3a90 	vmov	s15, r3
 8016d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d2c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016d30:	4b29      	ldr	r3, [pc, #164]	; (8016dd8 <interrupt_record+0x314>)
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016d36:	4b29      	ldr	r3, [pc, #164]	; (8016ddc <interrupt_record+0x318>)
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016d3c:	463b      	mov	r3, r7
 8016d3e:	2104      	movs	r1, #4
 8016d40:	4618      	mov	r0, r3
 8016d42:	f7ff fdf5 	bl	8016930 <record_data>
		}
	if (record_mode == 10) { //90
 8016d46:	4b10      	ldr	r3, [pc, #64]	; (8016d88 <interrupt_record+0x2c4>)
 8016d48:	781b      	ldrb	r3, [r3, #0]
 8016d4a:	2b0a      	cmp	r3, #10
 8016d4c:	d148      	bne.n	8016de0 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016d4e:	4b1f      	ldr	r3, [pc, #124]	; (8016dcc <interrupt_record+0x308>)
 8016d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016d52:	ee07 3a90 	vmov	s15, r3
 8016d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d5a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016d5e:	4b1b      	ldr	r3, [pc, #108]	; (8016dcc <interrupt_record+0x308>)
 8016d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8016d64:	ee07 3a90 	vmov	s15, r3
 8016d68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016d6c:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8016d70:	4b19      	ldr	r3, [pc, #100]	; (8016dd8 <interrupt_record+0x314>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016d76:	4b19      	ldr	r3, [pc, #100]	; (8016ddc <interrupt_record+0x318>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016d7c:	463b      	mov	r3, r7
 8016d7e:	2104      	movs	r1, #4
 8016d80:	4618      	mov	r0, r3
 8016d82:	f7ff fdd5 	bl	8016930 <record_data>
 8016d86:	e02b      	b.n	8016de0 <interrupt_record+0x31c>
 8016d88:	2000edb4 	.word	0x2000edb4
 8016d8c:	2000022c 	.word	0x2000022c
 8016d90:	20000228 	.word	0x20000228
 8016d94:	20000224 	.word	0x20000224
 8016d98:	20000220 	.word	0x20000220
 8016d9c:	200004e8 	.word	0x200004e8
 8016da0:	2000026c 	.word	0x2000026c
 8016da4:	200004dc 	.word	0x200004dc
 8016da8:	2000025c 	.word	0x2000025c
 8016dac:	20000258 	.word	0x20000258
 8016db0:	20000254 	.word	0x20000254
 8016db4:	20000250 	.word	0x20000250
 8016db8:	20000280 	.word	0x20000280
 8016dbc:	20000530 	.word	0x20000530
 8016dc0:	20000238 	.word	0x20000238
 8016dc4:	2000023c 	.word	0x2000023c
 8016dc8:	2000027c 	.word	0x2000027c
 8016dcc:	200002bc 	.word	0x200002bc
 8016dd0:	2000044c 	.word	0x2000044c
 8016dd4:	20000460 	.word	0x20000460
 8016dd8:	200005e4 	.word	0x200005e4
 8016ddc:	200005e0 	.word	0x200005e0
		}
	if (record_mode == 11) { //距離の比較
 8016de0:	4b16      	ldr	r3, [pc, #88]	; (8016e3c <interrupt_record+0x378>)
 8016de2:	781b      	ldrb	r3, [r3, #0]
 8016de4:	2b0b      	cmp	r3, #11
 8016de6:	d110      	bne.n	8016e0a <interrupt_record+0x346>
				r_data[0] = E_speedL;
 8016de8:	4b15      	ldr	r3, [pc, #84]	; (8016e40 <interrupt_record+0x37c>)
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	603b      	str	r3, [r7, #0]
				r_data[1] = encoder_L;
 8016dee:	4b15      	ldr	r3, [pc, #84]	; (8016e44 <interrupt_record+0x380>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	607b      	str	r3, [r7, #4]
				r_data[2] = E_speedR;
 8016df4:	4b14      	ldr	r3, [pc, #80]	; (8016e48 <interrupt_record+0x384>)
 8016df6:	681b      	ldr	r3, [r3, #0]
 8016df8:	60bb      	str	r3, [r7, #8]
				r_data[3] = encoder_R;
 8016dfa:	4b14      	ldr	r3, [pc, #80]	; (8016e4c <interrupt_record+0x388>)
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016e00:	463b      	mov	r3, r7
 8016e02:	2104      	movs	r1, #4
 8016e04:	4618      	mov	r0, r3
 8016e06:	f7ff fd93 	bl	8016930 <record_data>
			}
	if (record_mode == 12) {
 8016e0a:	4b0c      	ldr	r3, [pc, #48]	; (8016e3c <interrupt_record+0x378>)
 8016e0c:	781b      	ldrb	r3, [r3, #0]
 8016e0e:	2b0c      	cmp	r3, #12
 8016e10:	d110      	bne.n	8016e34 <interrupt_record+0x370>
		r_data[0] = turning.velocity;
 8016e12:	4b0f      	ldr	r3, [pc, #60]	; (8016e50 <interrupt_record+0x38c>)
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016e18:	4b0e      	ldr	r3, [pc, #56]	; (8016e54 <interrupt_record+0x390>)
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	607b      	str	r3, [r7, #4]
		r_data[2] = g_V_L;
 8016e1e:	4b0e      	ldr	r3, [pc, #56]	; (8016e58 <interrupt_record+0x394>)
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	60bb      	str	r3, [r7, #8]
		r_data[3] = g_V_R;
 8016e24:	4b0d      	ldr	r3, [pc, #52]	; (8016e5c <interrupt_record+0x398>)
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016e2a:	463b      	mov	r3, r7
 8016e2c:	2104      	movs	r1, #4
 8016e2e:	4618      	mov	r0, r3
 8016e30:	f7ff fd7e 	bl	8016930 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8016e34:	bf00      	nop
 8016e36:	3710      	adds	r7, #16
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}
 8016e3c:	2000edb4 	.word	0x2000edb4
 8016e40:	20000228 	.word	0x20000228
 8016e44:	200006e0 	.word	0x200006e0
 8016e48:	2000022c 	.word	0x2000022c
 8016e4c:	200006dc 	.word	0x200006dc
 8016e50:	200004e8 	.word	0x200004e8
 8016e54:	2000026c 	.word	0x2000026c
 8016e58:	20000530 	.word	0x20000530
 8016e5c:	20000534 	.word	0x20000534

08016e60 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016e60:	b580      	push	{r7, lr}
 8016e62:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8016e64:	4b1b      	ldr	r3, [pc, #108]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e66:	4a1c      	ldr	r2, [pc, #112]	; (8016ed8 <MX_SPI1_Init+0x78>)
 8016e68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8016e6a:	4b1a      	ldr	r3, [pc, #104]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016e70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016e72:	4b18      	ldr	r3, [pc, #96]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e74:	2200      	movs	r2, #0
 8016e76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8016e78:	4b16      	ldr	r3, [pc, #88]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016e7e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016e80:	4b14      	ldr	r3, [pc, #80]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e82:	2200      	movs	r2, #0
 8016e84:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8016e86:	4b13      	ldr	r3, [pc, #76]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e88:	2200      	movs	r2, #0
 8016e8a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8016e8c:	4b11      	ldr	r3, [pc, #68]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016e92:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016e94:	4b0f      	ldr	r3, [pc, #60]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e96:	2210      	movs	r2, #16
 8016e98:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016e9a:	4b0e      	ldr	r3, [pc, #56]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016ea0:	4b0c      	ldr	r3, [pc, #48]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016ea6:	4b0b      	ldr	r3, [pc, #44]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8016eac:	4b09      	ldr	r3, [pc, #36]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016eae:	2207      	movs	r2, #7
 8016eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016eb2:	4b08      	ldr	r3, [pc, #32]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8016eb8:	4b06      	ldr	r3, [pc, #24]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016eba:	2208      	movs	r2, #8
 8016ebc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8016ebe:	4805      	ldr	r0, [pc, #20]	; (8016ed4 <MX_SPI1_Init+0x74>)
 8016ec0:	f005 ff2a 	bl	801cd18 <HAL_SPI_Init>
 8016ec4:	4603      	mov	r3, r0
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d001      	beq.n	8016ece <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8016eca:	f7f2 fdd4 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8016ece:	bf00      	nop
 8016ed0:	bd80      	pop	{r7, pc}
 8016ed2:	bf00      	nop
 8016ed4:	2000edc4 	.word	0x2000edc4
 8016ed8:	40013000 	.word	0x40013000

08016edc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8016ee0:	4b1b      	ldr	r3, [pc, #108]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016ee2:	4a1c      	ldr	r2, [pc, #112]	; (8016f54 <MX_SPI3_Init+0x78>)
 8016ee4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8016ee6:	4b1a      	ldr	r3, [pc, #104]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016ee8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016eec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8016eee:	4b18      	ldr	r3, [pc, #96]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8016ef4:	4b16      	ldr	r3, [pc, #88]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016ef6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016efa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016efc:	4b14      	ldr	r3, [pc, #80]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016efe:	2200      	movs	r2, #0
 8016f00:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8016f02:	4b13      	ldr	r3, [pc, #76]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f04:	2201      	movs	r2, #1
 8016f06:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8016f08:	4b11      	ldr	r3, [pc, #68]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f0e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8016f10:	4b0f      	ldr	r3, [pc, #60]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f12:	2208      	movs	r2, #8
 8016f14:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8016f16:	4b0e      	ldr	r3, [pc, #56]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f18:	2200      	movs	r2, #0
 8016f1a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8016f1c:	4b0c      	ldr	r3, [pc, #48]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f1e:	2200      	movs	r2, #0
 8016f20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8016f22:	4b0b      	ldr	r3, [pc, #44]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f24:	2200      	movs	r2, #0
 8016f26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8016f28:	4b09      	ldr	r3, [pc, #36]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f2a:	2207      	movs	r2, #7
 8016f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016f2e:	4b08      	ldr	r3, [pc, #32]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f30:	2200      	movs	r2, #0
 8016f32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8016f34:	4b06      	ldr	r3, [pc, #24]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f36:	2200      	movs	r2, #0
 8016f38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8016f3a:	4805      	ldr	r0, [pc, #20]	; (8016f50 <MX_SPI3_Init+0x74>)
 8016f3c:	f005 feec 	bl	801cd18 <HAL_SPI_Init>
 8016f40:	4603      	mov	r3, r0
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d001      	beq.n	8016f4a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8016f46:	f7f2 fd96 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8016f4a:	bf00      	nop
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	2000ee28 	.word	0x2000ee28
 8016f54:	40003c00 	.word	0x40003c00

08016f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8016f58:	b580      	push	{r7, lr}
 8016f5a:	b08c      	sub	sp, #48	; 0x30
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016f60:	f107 031c 	add.w	r3, r7, #28
 8016f64:	2200      	movs	r2, #0
 8016f66:	601a      	str	r2, [r3, #0]
 8016f68:	605a      	str	r2, [r3, #4]
 8016f6a:	609a      	str	r2, [r3, #8]
 8016f6c:	60da      	str	r2, [r3, #12]
 8016f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	4a3d      	ldr	r2, [pc, #244]	; (801706c <HAL_SPI_MspInit+0x114>)
 8016f76:	4293      	cmp	r3, r2
 8016f78:	d129      	bne.n	8016fce <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8016f7a:	4b3d      	ldr	r3, [pc, #244]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f7e:	4a3c      	ldr	r2, [pc, #240]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016f84:	6613      	str	r3, [r2, #96]	; 0x60
 8016f86:	4b3a      	ldr	r3, [pc, #232]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016f8e:	61bb      	str	r3, [r7, #24]
 8016f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016f92:	4b37      	ldr	r3, [pc, #220]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f96:	4a36      	ldr	r2, [pc, #216]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016f98:	f043 0301 	orr.w	r3, r3, #1
 8016f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016f9e:	4b34      	ldr	r3, [pc, #208]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016fa2:	f003 0301 	and.w	r3, r3, #1
 8016fa6:	617b      	str	r3, [r7, #20]
 8016fa8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8016faa:	23e0      	movs	r3, #224	; 0xe0
 8016fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016fae:	2302      	movs	r3, #2
 8016fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8016fba:	2305      	movs	r3, #5
 8016fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016fbe:	f107 031c 	add.w	r3, r7, #28
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016fc8:	f004 fcec 	bl	801b9a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8016fcc:	e049      	b.n	8017062 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	4a28      	ldr	r2, [pc, #160]	; (8017074 <HAL_SPI_MspInit+0x11c>)
 8016fd4:	4293      	cmp	r3, r2
 8016fd6:	d144      	bne.n	8017062 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8016fd8:	4b25      	ldr	r3, [pc, #148]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fdc:	4a24      	ldr	r2, [pc, #144]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8016fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8016fe4:	4b22      	ldr	r3, [pc, #136]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016fec:	613b      	str	r3, [r7, #16]
 8016fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016ff0:	4b1f      	ldr	r3, [pc, #124]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ff4:	4a1e      	ldr	r2, [pc, #120]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016ff6:	f043 0304 	orr.w	r3, r3, #4
 8016ffa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016ffc:	4b1c      	ldr	r3, [pc, #112]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8016ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017000:	f003 0304 	and.w	r3, r3, #4
 8017004:	60fb      	str	r3, [r7, #12]
 8017006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017008:	4b19      	ldr	r3, [pc, #100]	; (8017070 <HAL_SPI_MspInit+0x118>)
 801700a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801700c:	4a18      	ldr	r2, [pc, #96]	; (8017070 <HAL_SPI_MspInit+0x118>)
 801700e:	f043 0302 	orr.w	r3, r3, #2
 8017012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017014:	4b16      	ldr	r3, [pc, #88]	; (8017070 <HAL_SPI_MspInit+0x118>)
 8017016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017018:	f003 0302 	and.w	r3, r3, #2
 801701c:	60bb      	str	r3, [r7, #8]
 801701e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8017020:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017026:	2302      	movs	r3, #2
 8017028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801702a:	2300      	movs	r3, #0
 801702c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801702e:	2300      	movs	r3, #0
 8017030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017032:	2306      	movs	r3, #6
 8017034:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017036:	f107 031c 	add.w	r3, r7, #28
 801703a:	4619      	mov	r1, r3
 801703c:	480e      	ldr	r0, [pc, #56]	; (8017078 <HAL_SPI_MspInit+0x120>)
 801703e:	f004 fcb1 	bl	801b9a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8017042:	2320      	movs	r3, #32
 8017044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017046:	2302      	movs	r3, #2
 8017048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801704a:	2300      	movs	r3, #0
 801704c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801704e:	2300      	movs	r3, #0
 8017050:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017052:	2306      	movs	r3, #6
 8017054:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017056:	f107 031c 	add.w	r3, r7, #28
 801705a:	4619      	mov	r1, r3
 801705c:	4807      	ldr	r0, [pc, #28]	; (801707c <HAL_SPI_MspInit+0x124>)
 801705e:	f004 fca1 	bl	801b9a4 <HAL_GPIO_Init>
}
 8017062:	bf00      	nop
 8017064:	3730      	adds	r7, #48	; 0x30
 8017066:	46bd      	mov	sp, r7
 8017068:	bd80      	pop	{r7, pc}
 801706a:	bf00      	nop
 801706c:	40013000 	.word	0x40013000
 8017070:	40021000 	.word	0x40021000
 8017074:	40003c00 	.word	0x40003c00
 8017078:	48000800 	.word	0x48000800
 801707c:	48000400 	.word	0x48000400

08017080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b082      	sub	sp, #8
 8017084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017086:	4b0f      	ldr	r3, [pc, #60]	; (80170c4 <HAL_MspInit+0x44>)
 8017088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801708a:	4a0e      	ldr	r2, [pc, #56]	; (80170c4 <HAL_MspInit+0x44>)
 801708c:	f043 0301 	orr.w	r3, r3, #1
 8017090:	6613      	str	r3, [r2, #96]	; 0x60
 8017092:	4b0c      	ldr	r3, [pc, #48]	; (80170c4 <HAL_MspInit+0x44>)
 8017094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017096:	f003 0301 	and.w	r3, r3, #1
 801709a:	607b      	str	r3, [r7, #4]
 801709c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801709e:	4b09      	ldr	r3, [pc, #36]	; (80170c4 <HAL_MspInit+0x44>)
 80170a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80170a2:	4a08      	ldr	r2, [pc, #32]	; (80170c4 <HAL_MspInit+0x44>)
 80170a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80170a8:	6593      	str	r3, [r2, #88]	; 0x58
 80170aa:	4b06      	ldr	r3, [pc, #24]	; (80170c4 <HAL_MspInit+0x44>)
 80170ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80170ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80170b2:	603b      	str	r3, [r7, #0]
 80170b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80170b6:	f004 feb3 	bl	801be20 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80170ba:	bf00      	nop
 80170bc:	3708      	adds	r7, #8
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	40021000 	.word	0x40021000

080170c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80170c8:	b480      	push	{r7}
 80170ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80170cc:	e7fe      	b.n	80170cc <NMI_Handler+0x4>

080170ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80170ce:	b480      	push	{r7}
 80170d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80170d2:	e7fe      	b.n	80170d2 <HardFault_Handler+0x4>

080170d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80170d4:	b480      	push	{r7}
 80170d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80170d8:	e7fe      	b.n	80170d8 <MemManage_Handler+0x4>

080170da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80170da:	b480      	push	{r7}
 80170dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80170de:	e7fe      	b.n	80170de <BusFault_Handler+0x4>

080170e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80170e0:	b480      	push	{r7}
 80170e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80170e4:	e7fe      	b.n	80170e4 <UsageFault_Handler+0x4>

080170e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80170e6:	b480      	push	{r7}
 80170e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80170ea:	bf00      	nop
 80170ec:	46bd      	mov	sp, r7
 80170ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f2:	4770      	bx	lr

080170f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80170f4:	b480      	push	{r7}
 80170f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80170f8:	bf00      	nop
 80170fa:	46bd      	mov	sp, r7
 80170fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017100:	4770      	bx	lr

08017102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017102:	b480      	push	{r7}
 8017104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017106:	bf00      	nop
 8017108:	46bd      	mov	sp, r7
 801710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801710e:	4770      	bx	lr

08017110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017114:	f001 fbee 	bl	80188f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017118:	bf00      	nop
 801711a:	bd80      	pop	{r7, pc}

0801711c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 801711c:	b580      	push	{r7, lr}
 801711e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017120:	4802      	ldr	r0, [pc, #8]	; (801712c <DMA1_Channel1_IRQHandler+0x10>)
 8017122:	f004 f887 	bl	801b234 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8017126:	bf00      	nop
 8017128:	bd80      	pop	{r7, pc}
 801712a:	bf00      	nop
 801712c:	200007a4 	.word	0x200007a4

08017130 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017134:	4802      	ldr	r0, [pc, #8]	; (8017140 <ADC1_2_IRQHandler+0x10>)
 8017136:	f002 fb8d 	bl	8019854 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 801713a:	bf00      	nop
 801713c:	bd80      	pop	{r7, pc}
 801713e:	bf00      	nop
 8017140:	20000738 	.word	0x20000738

08017144 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017144:	b580      	push	{r7, lr}
 8017146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017148:	480d      	ldr	r0, [pc, #52]	; (8017180 <TIM6_DAC_IRQHandler+0x3c>)
 801714a:	f006 ffc5 	bl	801e0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 801714e:	f7f1 f8a7 	bl	80082a0 <interrupt_timer>
  interupt_calSensor();
 8017152:	f7ea ffb7 	bl	80020c4 <interupt_calSensor>
  ICM20602_DataUpdate();
 8017156:	f7f0 fdc5 	bl	8007ce4 <ICM20602_DataUpdate>
  interrupt_calGyro();
 801715a:	f7ea fdc1 	bl	8001ce0 <interrupt_calGyro>
  AS5047_DataUpdate();
 801715e:	f7f0 fa7d 	bl	800765c <AS5047_DataUpdate>
  interupt_calEncoder();
 8017162:	f7e9 ff99 	bl	8001098 <interupt_calEncoder>
  interupt_calFusion();
 8017166:	f7ea fbc3 	bl	80018f0 <interupt_calFusion>
  interrupt_WallCut();
 801716a:	f7ef f9e1 	bl	8006530 <interrupt_WallCut>
  interupt_DriveMotor();
 801716e:	f7eb f91b 	bl	80023a8 <interupt_DriveMotor>

  interrupt_FailSafe();
 8017172:	f7f2 f9d5 	bl	8009520 <interrupt_FailSafe>
  interrupt_record();
 8017176:	f7ff fca5 	bl	8016ac4 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801717a:	bf00      	nop
 801717c:	bd80      	pop	{r7, pc}
 801717e:	bf00      	nop
 8017180:	2000ee90 	.word	0x2000ee90

08017184 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017184:	b480      	push	{r7}
 8017186:	af00      	add	r7, sp, #0
	return 1;
 8017188:	2301      	movs	r3, #1
}
 801718a:	4618      	mov	r0, r3
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr

08017194 <_kill>:

int _kill(int pid, int sig)
{
 8017194:	b580      	push	{r7, lr}
 8017196:	b082      	sub	sp, #8
 8017198:	af00      	add	r7, sp, #0
 801719a:	6078      	str	r0, [r7, #4]
 801719c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801719e:	f008 fe6f 	bl	801fe80 <__errno>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2216      	movs	r2, #22
 80171a6:	601a      	str	r2, [r3, #0]
	return -1;
 80171a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	3708      	adds	r7, #8
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}

080171b4 <_exit>:

void _exit (int status)
{
 80171b4:	b580      	push	{r7, lr}
 80171b6:	b082      	sub	sp, #8
 80171b8:	af00      	add	r7, sp, #0
 80171ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80171bc:	f04f 31ff 	mov.w	r1, #4294967295
 80171c0:	6878      	ldr	r0, [r7, #4]
 80171c2:	f7ff ffe7 	bl	8017194 <_kill>
	while (1) {}		/* Make sure we hang here */
 80171c6:	e7fe      	b.n	80171c6 <_exit+0x12>

080171c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b086      	sub	sp, #24
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80171d4:	2300      	movs	r3, #0
 80171d6:	617b      	str	r3, [r7, #20]
 80171d8:	e00a      	b.n	80171f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80171da:	f3af 8000 	nop.w
 80171de:	4601      	mov	r1, r0
 80171e0:	68bb      	ldr	r3, [r7, #8]
 80171e2:	1c5a      	adds	r2, r3, #1
 80171e4:	60ba      	str	r2, [r7, #8]
 80171e6:	b2ca      	uxtb	r2, r1
 80171e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80171ea:	697b      	ldr	r3, [r7, #20]
 80171ec:	3301      	adds	r3, #1
 80171ee:	617b      	str	r3, [r7, #20]
 80171f0:	697a      	ldr	r2, [r7, #20]
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	429a      	cmp	r2, r3
 80171f6:	dbf0      	blt.n	80171da <_read+0x12>
	}

return len;
 80171f8:	687b      	ldr	r3, [r7, #4]
}
 80171fa:	4618      	mov	r0, r3
 80171fc:	3718      	adds	r7, #24
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}
	...

08017204 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b086      	sub	sp, #24
 8017208:	af00      	add	r7, sp, #0
 801720a:	60f8      	str	r0, [r7, #12]
 801720c:	60b9      	str	r1, [r7, #8]
 801720e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017210:	2300      	movs	r3, #0
 8017212:	617b      	str	r3, [r7, #20]
 8017214:	e00a      	b.n	801722c <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8017216:	68b9      	ldr	r1, [r7, #8]
 8017218:	1c4b      	adds	r3, r1, #1
 801721a:	60bb      	str	r3, [r7, #8]
 801721c:	2301      	movs	r3, #1
 801721e:	2201      	movs	r2, #1
 8017220:	4807      	ldr	r0, [pc, #28]	; (8017240 <_write+0x3c>)
 8017222:	f007 ffe3 	bl	801f1ec <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017226:	697b      	ldr	r3, [r7, #20]
 8017228:	3301      	adds	r3, #1
 801722a:	617b      	str	r3, [r7, #20]
 801722c:	697a      	ldr	r2, [r7, #20]
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	429a      	cmp	r2, r3
 8017232:	dbf0      	blt.n	8017216 <_write+0x12>
	}
	return len;
 8017234:	687b      	ldr	r3, [r7, #4]
}
 8017236:	4618      	mov	r0, r3
 8017238:	3718      	adds	r7, #24
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
 801723e:	bf00      	nop
 8017240:	2000f86c 	.word	0x2000f86c

08017244 <_close>:

int _close(int file)
{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
	return -1;
 801724c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017250:	4618      	mov	r0, r3
 8017252:	370c      	adds	r7, #12
 8017254:	46bd      	mov	sp, r7
 8017256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725a:	4770      	bx	lr

0801725c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801725c:	b480      	push	{r7}
 801725e:	b083      	sub	sp, #12
 8017260:	af00      	add	r7, sp, #0
 8017262:	6078      	str	r0, [r7, #4]
 8017264:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801726c:	605a      	str	r2, [r3, #4]
	return 0;
 801726e:	2300      	movs	r3, #0
}
 8017270:	4618      	mov	r0, r3
 8017272:	370c      	adds	r7, #12
 8017274:	46bd      	mov	sp, r7
 8017276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727a:	4770      	bx	lr

0801727c <_isatty>:

int _isatty(int file)
{
 801727c:	b480      	push	{r7}
 801727e:	b083      	sub	sp, #12
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
	return 1;
 8017284:	2301      	movs	r3, #1
}
 8017286:	4618      	mov	r0, r3
 8017288:	370c      	adds	r7, #12
 801728a:	46bd      	mov	sp, r7
 801728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017290:	4770      	bx	lr

08017292 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017292:	b480      	push	{r7}
 8017294:	b085      	sub	sp, #20
 8017296:	af00      	add	r7, sp, #0
 8017298:	60f8      	str	r0, [r7, #12]
 801729a:	60b9      	str	r1, [r7, #8]
 801729c:	607a      	str	r2, [r7, #4]
	return 0;
 801729e:	2300      	movs	r3, #0
}
 80172a0:	4618      	mov	r0, r3
 80172a2:	3714      	adds	r7, #20
 80172a4:	46bd      	mov	sp, r7
 80172a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172aa:	4770      	bx	lr

080172ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80172ac:	b580      	push	{r7, lr}
 80172ae:	b086      	sub	sp, #24
 80172b0:	af00      	add	r7, sp, #0
 80172b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80172b4:	4a14      	ldr	r2, [pc, #80]	; (8017308 <_sbrk+0x5c>)
 80172b6:	4b15      	ldr	r3, [pc, #84]	; (801730c <_sbrk+0x60>)
 80172b8:	1ad3      	subs	r3, r2, r3
 80172ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80172c0:	4b13      	ldr	r3, [pc, #76]	; (8017310 <_sbrk+0x64>)
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d102      	bne.n	80172ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80172c8:	4b11      	ldr	r3, [pc, #68]	; (8017310 <_sbrk+0x64>)
 80172ca:	4a12      	ldr	r2, [pc, #72]	; (8017314 <_sbrk+0x68>)
 80172cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80172ce:	4b10      	ldr	r3, [pc, #64]	; (8017310 <_sbrk+0x64>)
 80172d0:	681a      	ldr	r2, [r3, #0]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	4413      	add	r3, r2
 80172d6:	693a      	ldr	r2, [r7, #16]
 80172d8:	429a      	cmp	r2, r3
 80172da:	d207      	bcs.n	80172ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80172dc:	f008 fdd0 	bl	801fe80 <__errno>
 80172e0:	4603      	mov	r3, r0
 80172e2:	220c      	movs	r2, #12
 80172e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80172e6:	f04f 33ff 	mov.w	r3, #4294967295
 80172ea:	e009      	b.n	8017300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80172ec:	4b08      	ldr	r3, [pc, #32]	; (8017310 <_sbrk+0x64>)
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80172f2:	4b07      	ldr	r3, [pc, #28]	; (8017310 <_sbrk+0x64>)
 80172f4:	681a      	ldr	r2, [r3, #0]
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	4413      	add	r3, r2
 80172fa:	4a05      	ldr	r2, [pc, #20]	; (8017310 <_sbrk+0x64>)
 80172fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80172fe:	68fb      	ldr	r3, [r7, #12]
}
 8017300:	4618      	mov	r0, r3
 8017302:	3718      	adds	r7, #24
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}
 8017308:	2001c000 	.word	0x2001c000
 801730c:	00000400 	.word	0x00000400
 8017310:	2000ee8c 	.word	0x2000ee8c
 8017314:	2000f910 	.word	0x2000f910

08017318 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8017318:	b480      	push	{r7}
 801731a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801731c:	4b06      	ldr	r3, [pc, #24]	; (8017338 <SystemInit+0x20>)
 801731e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017322:	4a05      	ldr	r2, [pc, #20]	; (8017338 <SystemInit+0x20>)
 8017324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 801732c:	bf00      	nop
 801732e:	46bd      	mov	sp, r7
 8017330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017334:	4770      	bx	lr
 8017336:	bf00      	nop
 8017338:	e000ed00 	.word	0xe000ed00

0801733c <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b084      	sub	sp, #16
 8017340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017342:	1d3b      	adds	r3, r7, #4
 8017344:	2200      	movs	r2, #0
 8017346:	601a      	str	r2, [r3, #0]
 8017348:	605a      	str	r2, [r3, #4]
 801734a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 801734c:	4b14      	ldr	r3, [pc, #80]	; (80173a0 <MX_TIM6_Init+0x64>)
 801734e:	4a15      	ldr	r2, [pc, #84]	; (80173a4 <MX_TIM6_Init+0x68>)
 8017350:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 8017352:	4b13      	ldr	r3, [pc, #76]	; (80173a0 <MX_TIM6_Init+0x64>)
 8017354:	2254      	movs	r2, #84	; 0x54
 8017356:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017358:	4b11      	ldr	r3, [pc, #68]	; (80173a0 <MX_TIM6_Init+0x64>)
 801735a:	2200      	movs	r2, #0
 801735c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 801735e:	4b10      	ldr	r3, [pc, #64]	; (80173a0 <MX_TIM6_Init+0x64>)
 8017360:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017364:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017366:	4b0e      	ldr	r3, [pc, #56]	; (80173a0 <MX_TIM6_Init+0x64>)
 8017368:	2200      	movs	r2, #0
 801736a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801736c:	480c      	ldr	r0, [pc, #48]	; (80173a0 <MX_TIM6_Init+0x64>)
 801736e:	f006 fbeb 	bl	801db48 <HAL_TIM_Base_Init>
 8017372:	4603      	mov	r3, r0
 8017374:	2b00      	cmp	r3, #0
 8017376:	d001      	beq.n	801737c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8017378:	f7f2 fb7d 	bl	8009a76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801737c:	2300      	movs	r3, #0
 801737e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017380:	2300      	movs	r3, #0
 8017382:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8017384:	1d3b      	adds	r3, r7, #4
 8017386:	4619      	mov	r1, r3
 8017388:	4805      	ldr	r0, [pc, #20]	; (80173a0 <MX_TIM6_Init+0x64>)
 801738a:	f007 fd59 	bl	801ee40 <HAL_TIMEx_MasterConfigSynchronization>
 801738e:	4603      	mov	r3, r0
 8017390:	2b00      	cmp	r3, #0
 8017392:	d001      	beq.n	8017398 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8017394:	f7f2 fb6f 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8017398:	bf00      	nop
 801739a:	3710      	adds	r7, #16
 801739c:	46bd      	mov	sp, r7
 801739e:	bd80      	pop	{r7, pc}
 80173a0:	2000ee90 	.word	0x2000ee90
 80173a4:	40001000 	.word	0x40001000

080173a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b098      	sub	sp, #96	; 0x60
 80173ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80173ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80173b2:	2200      	movs	r2, #0
 80173b4:	601a      	str	r2, [r3, #0]
 80173b6:	605a      	str	r2, [r3, #4]
 80173b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80173ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80173be:	2200      	movs	r2, #0
 80173c0:	601a      	str	r2, [r3, #0]
 80173c2:	605a      	str	r2, [r3, #4]
 80173c4:	609a      	str	r2, [r3, #8]
 80173c6:	60da      	str	r2, [r3, #12]
 80173c8:	611a      	str	r2, [r3, #16]
 80173ca:	615a      	str	r2, [r3, #20]
 80173cc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80173ce:	1d3b      	adds	r3, r7, #4
 80173d0:	2234      	movs	r2, #52	; 0x34
 80173d2:	2100      	movs	r1, #0
 80173d4:	4618      	mov	r0, r3
 80173d6:	f008 fd8b 	bl	801fef0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80173da:	4b41      	ldr	r3, [pc, #260]	; (80174e0 <MX_TIM8_Init+0x138>)
 80173dc:	4a41      	ldr	r2, [pc, #260]	; (80174e4 <MX_TIM8_Init+0x13c>)
 80173de:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80173e0:	4b3f      	ldr	r3, [pc, #252]	; (80174e0 <MX_TIM8_Init+0x138>)
 80173e2:	2201      	movs	r2, #1
 80173e4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80173e6:	4b3e      	ldr	r3, [pc, #248]	; (80174e0 <MX_TIM8_Init+0x138>)
 80173e8:	2200      	movs	r2, #0
 80173ea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80173ec:	4b3c      	ldr	r3, [pc, #240]	; (80174e0 <MX_TIM8_Init+0x138>)
 80173ee:	f240 628f 	movw	r2, #1679	; 0x68f
 80173f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80173f4:	4b3a      	ldr	r3, [pc, #232]	; (80174e0 <MX_TIM8_Init+0x138>)
 80173f6:	2200      	movs	r2, #0
 80173f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80173fa:	4b39      	ldr	r3, [pc, #228]	; (80174e0 <MX_TIM8_Init+0x138>)
 80173fc:	2200      	movs	r2, #0
 80173fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017400:	4b37      	ldr	r3, [pc, #220]	; (80174e0 <MX_TIM8_Init+0x138>)
 8017402:	2200      	movs	r2, #0
 8017404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8017406:	4836      	ldr	r0, [pc, #216]	; (80174e0 <MX_TIM8_Init+0x138>)
 8017408:	f006 fc66 	bl	801dcd8 <HAL_TIM_PWM_Init>
 801740c:	4603      	mov	r3, r0
 801740e:	2b00      	cmp	r3, #0
 8017410:	d001      	beq.n	8017416 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8017412:	f7f2 fb30 	bl	8009a76 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017416:	2300      	movs	r3, #0
 8017418:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 801741a:	2300      	movs	r3, #0
 801741c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801741e:	2300      	movs	r3, #0
 8017420:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8017422:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017426:	4619      	mov	r1, r3
 8017428:	482d      	ldr	r0, [pc, #180]	; (80174e0 <MX_TIM8_Init+0x138>)
 801742a:	f007 fd09 	bl	801ee40 <HAL_TIMEx_MasterConfigSynchronization>
 801742e:	4603      	mov	r3, r0
 8017430:	2b00      	cmp	r3, #0
 8017432:	d001      	beq.n	8017438 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8017434:	f7f2 fb1f 	bl	8009a76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017438:	2360      	movs	r3, #96	; 0x60
 801743a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 801743c:	f240 13a3 	movw	r3, #419	; 0x1a3
 8017440:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017442:	2300      	movs	r3, #0
 8017444:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017446:	2300      	movs	r3, #0
 8017448:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801744a:	2300      	movs	r3, #0
 801744c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801744e:	2300      	movs	r3, #0
 8017450:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017452:	2300      	movs	r3, #0
 8017454:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017456:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801745a:	2200      	movs	r2, #0
 801745c:	4619      	mov	r1, r3
 801745e:	4820      	ldr	r0, [pc, #128]	; (80174e0 <MX_TIM8_Init+0x138>)
 8017460:	f006 ffba 	bl	801e3d8 <HAL_TIM_PWM_ConfigChannel>
 8017464:	4603      	mov	r3, r0
 8017466:	2b00      	cmp	r3, #0
 8017468:	d001      	beq.n	801746e <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 801746a:	f7f2 fb04 	bl	8009a76 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801746e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017472:	2208      	movs	r2, #8
 8017474:	4619      	mov	r1, r3
 8017476:	481a      	ldr	r0, [pc, #104]	; (80174e0 <MX_TIM8_Init+0x138>)
 8017478:	f006 ffae 	bl	801e3d8 <HAL_TIM_PWM_ConfigChannel>
 801747c:	4603      	mov	r3, r0
 801747e:	2b00      	cmp	r3, #0
 8017480:	d001      	beq.n	8017486 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8017482:	f7f2 faf8 	bl	8009a76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017486:	2300      	movs	r3, #0
 8017488:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801748a:	2300      	movs	r3, #0
 801748c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801748e:	2300      	movs	r3, #0
 8017490:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017492:	2300      	movs	r3, #0
 8017494:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017496:	2300      	movs	r3, #0
 8017498:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801749a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801749e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80174a0:	2300      	movs	r3, #0
 80174a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80174a4:	2300      	movs	r3, #0
 80174a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80174a8:	2300      	movs	r3, #0
 80174aa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80174ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80174b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80174b2:	2300      	movs	r3, #0
 80174b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80174b6:	2300      	movs	r3, #0
 80174b8:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80174ba:	2300      	movs	r3, #0
 80174bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80174be:	1d3b      	adds	r3, r7, #4
 80174c0:	4619      	mov	r1, r3
 80174c2:	4807      	ldr	r0, [pc, #28]	; (80174e0 <MX_TIM8_Init+0x138>)
 80174c4:	f007 fd4a 	bl	801ef5c <HAL_TIMEx_ConfigBreakDeadTime>
 80174c8:	4603      	mov	r3, r0
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d001      	beq.n	80174d2 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80174ce:	f7f2 fad2 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80174d2:	4803      	ldr	r0, [pc, #12]	; (80174e0 <MX_TIM8_Init+0x138>)
 80174d4:	f000 f8da 	bl	801768c <HAL_TIM_MspPostInit>

}
 80174d8:	bf00      	nop
 80174da:	3760      	adds	r7, #96	; 0x60
 80174dc:	46bd      	mov	sp, r7
 80174de:	bd80      	pop	{r7, pc}
 80174e0:	2000eedc 	.word	0x2000eedc
 80174e4:	40013400 	.word	0x40013400

080174e8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80174e8:	b580      	push	{r7, lr}
 80174ea:	b094      	sub	sp, #80	; 0x50
 80174ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80174ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80174f2:	2200      	movs	r2, #0
 80174f4:	601a      	str	r2, [r3, #0]
 80174f6:	605a      	str	r2, [r3, #4]
 80174f8:	609a      	str	r2, [r3, #8]
 80174fa:	60da      	str	r2, [r3, #12]
 80174fc:	611a      	str	r2, [r3, #16]
 80174fe:	615a      	str	r2, [r3, #20]
 8017500:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8017502:	463b      	mov	r3, r7
 8017504:	2234      	movs	r2, #52	; 0x34
 8017506:	2100      	movs	r1, #0
 8017508:	4618      	mov	r0, r3
 801750a:	f008 fcf1 	bl	801fef0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 801750e:	4b30      	ldr	r3, [pc, #192]	; (80175d0 <MX_TIM16_Init+0xe8>)
 8017510:	4a30      	ldr	r2, [pc, #192]	; (80175d4 <MX_TIM16_Init+0xec>)
 8017512:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8017514:	4b2e      	ldr	r3, [pc, #184]	; (80175d0 <MX_TIM16_Init+0xe8>)
 8017516:	2201      	movs	r2, #1
 8017518:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 801751a:	4b2d      	ldr	r3, [pc, #180]	; (80175d0 <MX_TIM16_Init+0xe8>)
 801751c:	2200      	movs	r2, #0
 801751e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8017520:	4b2b      	ldr	r3, [pc, #172]	; (80175d0 <MX_TIM16_Init+0xe8>)
 8017522:	2264      	movs	r2, #100	; 0x64
 8017524:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017526:	4b2a      	ldr	r3, [pc, #168]	; (80175d0 <MX_TIM16_Init+0xe8>)
 8017528:	2200      	movs	r2, #0
 801752a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 801752c:	4b28      	ldr	r3, [pc, #160]	; (80175d0 <MX_TIM16_Init+0xe8>)
 801752e:	2200      	movs	r2, #0
 8017530:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017532:	4b27      	ldr	r3, [pc, #156]	; (80175d0 <MX_TIM16_Init+0xe8>)
 8017534:	2200      	movs	r2, #0
 8017536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8017538:	4825      	ldr	r0, [pc, #148]	; (80175d0 <MX_TIM16_Init+0xe8>)
 801753a:	f006 fb05 	bl	801db48 <HAL_TIM_Base_Init>
 801753e:	4603      	mov	r3, r0
 8017540:	2b00      	cmp	r3, #0
 8017542:	d001      	beq.n	8017548 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8017544:	f7f2 fa97 	bl	8009a76 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8017548:	4821      	ldr	r0, [pc, #132]	; (80175d0 <MX_TIM16_Init+0xe8>)
 801754a:	f006 fbc5 	bl	801dcd8 <HAL_TIM_PWM_Init>
 801754e:	4603      	mov	r3, r0
 8017550:	2b00      	cmp	r3, #0
 8017552:	d001      	beq.n	8017558 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8017554:	f7f2 fa8f 	bl	8009a76 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017558:	2360      	movs	r3, #96	; 0x60
 801755a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 801755c:	231e      	movs	r3, #30
 801755e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017560:	2300      	movs	r3, #0
 8017562:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017564:	2300      	movs	r3, #0
 8017566:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017568:	2300      	movs	r3, #0
 801756a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801756c:	2300      	movs	r3, #0
 801756e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8017570:	2300      	movs	r3, #0
 8017572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017574:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017578:	2200      	movs	r2, #0
 801757a:	4619      	mov	r1, r3
 801757c:	4814      	ldr	r0, [pc, #80]	; (80175d0 <MX_TIM16_Init+0xe8>)
 801757e:	f006 ff2b 	bl	801e3d8 <HAL_TIM_PWM_ConfigChannel>
 8017582:	4603      	mov	r3, r0
 8017584:	2b00      	cmp	r3, #0
 8017586:	d001      	beq.n	801758c <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8017588:	f7f2 fa75 	bl	8009a76 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801758c:	2300      	movs	r3, #0
 801758e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017590:	2300      	movs	r3, #0
 8017592:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017594:	2300      	movs	r3, #0
 8017596:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017598:	2300      	movs	r3, #0
 801759a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801759c:	2300      	movs	r3, #0
 801759e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80175a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80175a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80175a6:	2300      	movs	r3, #0
 80175a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80175aa:	2300      	movs	r3, #0
 80175ac:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80175ae:	463b      	mov	r3, r7
 80175b0:	4619      	mov	r1, r3
 80175b2:	4807      	ldr	r0, [pc, #28]	; (80175d0 <MX_TIM16_Init+0xe8>)
 80175b4:	f007 fcd2 	bl	801ef5c <HAL_TIMEx_ConfigBreakDeadTime>
 80175b8:	4603      	mov	r3, r0
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80175be:	f7f2 fa5a 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80175c2:	4803      	ldr	r0, [pc, #12]	; (80175d0 <MX_TIM16_Init+0xe8>)
 80175c4:	f000 f862 	bl	801768c <HAL_TIM_MspPostInit>

}
 80175c8:	bf00      	nop
 80175ca:	3750      	adds	r7, #80	; 0x50
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	2000ef28 	.word	0x2000ef28
 80175d4:	40014400 	.word	0x40014400

080175d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	b084      	sub	sp, #16
 80175dc:	af00      	add	r7, sp, #0
 80175de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	4a16      	ldr	r2, [pc, #88]	; (8017640 <HAL_TIM_Base_MspInit+0x68>)
 80175e6:	4293      	cmp	r3, r2
 80175e8:	d114      	bne.n	8017614 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80175ea:	4b16      	ldr	r3, [pc, #88]	; (8017644 <HAL_TIM_Base_MspInit+0x6c>)
 80175ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80175ee:	4a15      	ldr	r2, [pc, #84]	; (8017644 <HAL_TIM_Base_MspInit+0x6c>)
 80175f0:	f043 0310 	orr.w	r3, r3, #16
 80175f4:	6593      	str	r3, [r2, #88]	; 0x58
 80175f6:	4b13      	ldr	r3, [pc, #76]	; (8017644 <HAL_TIM_Base_MspInit+0x6c>)
 80175f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80175fa:	f003 0310 	and.w	r3, r3, #16
 80175fe:	60fb      	str	r3, [r7, #12]
 8017600:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8017602:	2200      	movs	r2, #0
 8017604:	2103      	movs	r1, #3
 8017606:	2036      	movs	r0, #54	; 0x36
 8017608:	f003 fc63 	bl	801aed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801760c:	2036      	movs	r0, #54	; 0x36
 801760e:	f003 fc7a 	bl	801af06 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8017612:	e010      	b.n	8017636 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	4a0b      	ldr	r2, [pc, #44]	; (8017648 <HAL_TIM_Base_MspInit+0x70>)
 801761a:	4293      	cmp	r3, r2
 801761c:	d10b      	bne.n	8017636 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 801761e:	4b09      	ldr	r3, [pc, #36]	; (8017644 <HAL_TIM_Base_MspInit+0x6c>)
 8017620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017622:	4a08      	ldr	r2, [pc, #32]	; (8017644 <HAL_TIM_Base_MspInit+0x6c>)
 8017624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017628:	6613      	str	r3, [r2, #96]	; 0x60
 801762a:	4b06      	ldr	r3, [pc, #24]	; (8017644 <HAL_TIM_Base_MspInit+0x6c>)
 801762c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801762e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017632:	60bb      	str	r3, [r7, #8]
 8017634:	68bb      	ldr	r3, [r7, #8]
}
 8017636:	bf00      	nop
 8017638:	3710      	adds	r7, #16
 801763a:	46bd      	mov	sp, r7
 801763c:	bd80      	pop	{r7, pc}
 801763e:	bf00      	nop
 8017640:	40001000 	.word	0x40001000
 8017644:	40021000 	.word	0x40021000
 8017648:	40014400 	.word	0x40014400

0801764c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4a0a      	ldr	r2, [pc, #40]	; (8017684 <HAL_TIM_PWM_MspInit+0x38>)
 801765a:	4293      	cmp	r3, r2
 801765c:	d10b      	bne.n	8017676 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801765e:	4b0a      	ldr	r3, [pc, #40]	; (8017688 <HAL_TIM_PWM_MspInit+0x3c>)
 8017660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017662:	4a09      	ldr	r2, [pc, #36]	; (8017688 <HAL_TIM_PWM_MspInit+0x3c>)
 8017664:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017668:	6613      	str	r3, [r2, #96]	; 0x60
 801766a:	4b07      	ldr	r3, [pc, #28]	; (8017688 <HAL_TIM_PWM_MspInit+0x3c>)
 801766c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801766e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017672:	60fb      	str	r3, [r7, #12]
 8017674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8017676:	bf00      	nop
 8017678:	3714      	adds	r7, #20
 801767a:	46bd      	mov	sp, r7
 801767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017680:	4770      	bx	lr
 8017682:	bf00      	nop
 8017684:	40013400 	.word	0x40013400
 8017688:	40021000 	.word	0x40021000

0801768c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 801768c:	b580      	push	{r7, lr}
 801768e:	b08a      	sub	sp, #40	; 0x28
 8017690:	af00      	add	r7, sp, #0
 8017692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017694:	f107 0314 	add.w	r3, r7, #20
 8017698:	2200      	movs	r2, #0
 801769a:	601a      	str	r2, [r3, #0]
 801769c:	605a      	str	r2, [r3, #4]
 801769e:	609a      	str	r2, [r3, #8]
 80176a0:	60da      	str	r2, [r3, #12]
 80176a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4a2b      	ldr	r2, [pc, #172]	; (8017758 <HAL_TIM_MspPostInit+0xcc>)
 80176aa:	4293      	cmp	r3, r2
 80176ac:	d12d      	bne.n	801770a <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80176ae:	4b2b      	ldr	r3, [pc, #172]	; (801775c <HAL_TIM_MspPostInit+0xd0>)
 80176b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176b2:	4a2a      	ldr	r2, [pc, #168]	; (801775c <HAL_TIM_MspPostInit+0xd0>)
 80176b4:	f043 0302 	orr.w	r3, r3, #2
 80176b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80176ba:	4b28      	ldr	r3, [pc, #160]	; (801775c <HAL_TIM_MspPostInit+0xd0>)
 80176bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176be:	f003 0302 	and.w	r3, r3, #2
 80176c2:	613b      	str	r3, [r7, #16]
 80176c4:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 80176c6:	2340      	movs	r3, #64	; 0x40
 80176c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176ca:	2302      	movs	r3, #2
 80176cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80176d2:	2300      	movs	r3, #0
 80176d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80176d6:	2305      	movs	r3, #5
 80176d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80176da:	f107 0314 	add.w	r3, r7, #20
 80176de:	4619      	mov	r1, r3
 80176e0:	481f      	ldr	r0, [pc, #124]	; (8017760 <HAL_TIM_MspPostInit+0xd4>)
 80176e2:	f004 f95f 	bl	801b9a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 80176e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80176ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176ec:	2302      	movs	r3, #2
 80176ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176f0:	2300      	movs	r3, #0
 80176f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80176f4:	2300      	movs	r3, #0
 80176f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80176f8:	230a      	movs	r3, #10
 80176fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80176fc:	f107 0314 	add.w	r3, r7, #20
 8017700:	4619      	mov	r1, r3
 8017702:	4817      	ldr	r0, [pc, #92]	; (8017760 <HAL_TIM_MspPostInit+0xd4>)
 8017704:	f004 f94e 	bl	801b9a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8017708:	e022      	b.n	8017750 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	4a15      	ldr	r2, [pc, #84]	; (8017764 <HAL_TIM_MspPostInit+0xd8>)
 8017710:	4293      	cmp	r3, r2
 8017712:	d11d      	bne.n	8017750 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017714:	4b11      	ldr	r3, [pc, #68]	; (801775c <HAL_TIM_MspPostInit+0xd0>)
 8017716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017718:	4a10      	ldr	r2, [pc, #64]	; (801775c <HAL_TIM_MspPostInit+0xd0>)
 801771a:	f043 0301 	orr.w	r3, r3, #1
 801771e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017720:	4b0e      	ldr	r3, [pc, #56]	; (801775c <HAL_TIM_MspPostInit+0xd0>)
 8017722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017724:	f003 0301 	and.w	r3, r3, #1
 8017728:	60fb      	str	r3, [r7, #12]
 801772a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 801772c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017732:	2302      	movs	r3, #2
 8017734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017736:	2300      	movs	r3, #0
 8017738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801773a:	2300      	movs	r3, #0
 801773c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 801773e:	2301      	movs	r3, #1
 8017740:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8017742:	f107 0314 	add.w	r3, r7, #20
 8017746:	4619      	mov	r1, r3
 8017748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801774c:	f004 f92a 	bl	801b9a4 <HAL_GPIO_Init>
}
 8017750:	bf00      	nop
 8017752:	3728      	adds	r7, #40	; 0x28
 8017754:	46bd      	mov	sp, r7
 8017756:	bd80      	pop	{r7, pc}
 8017758:	40013400 	.word	0x40013400
 801775c:	40021000 	.word	0x40021000
 8017760:	48000400 	.word	0x48000400
 8017764:	40014400 	.word	0x40014400

08017768 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8017768:	b084      	sub	sp, #16
 801776a:	b480      	push	{r7}
 801776c:	b083      	sub	sp, #12
 801776e:	af00      	add	r7, sp, #0
 8017770:	f107 0c10 	add.w	ip, r7, #16
 8017774:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8017778:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801777c:	f113 0f02 	cmn.w	r3, #2
 8017780:	d102      	bne.n	8017788 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	607b      	str	r3, [r7, #4]
 8017786:	e083      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8017788:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801778c:	f113 0f03 	cmn.w	r3, #3
 8017790:	d102      	bne.n	8017798 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8017792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017794:	607b      	str	r3, [r7, #4]
 8017796:	e07b      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8017798:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801779c:	f113 0f04 	cmn.w	r3, #4
 80177a0:	d102      	bne.n	80177a8 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 80177a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80177a4:	607b      	str	r3, [r7, #4]
 80177a6:	e073      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 80177a8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80177ac:	f113 0f05 	cmn.w	r3, #5
 80177b0:	d102      	bne.n	80177b8 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 80177b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80177b4:	607b      	str	r3, [r7, #4]
 80177b6:	e06b      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 80177b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80177bc:	f113 0f06 	cmn.w	r3, #6
 80177c0:	d102      	bne.n	80177c8 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 80177c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80177c4:	607b      	str	r3, [r7, #4]
 80177c6:	e063      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 80177c8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80177cc:	f113 0f07 	cmn.w	r3, #7
 80177d0:	d102      	bne.n	80177d8 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 80177d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80177d4:	607b      	str	r3, [r7, #4]
 80177d6:	e05b      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 80177d8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80177dc:	f113 0f08 	cmn.w	r3, #8
 80177e0:	d103      	bne.n	80177ea <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 80177e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80177e6:	607b      	str	r3, [r7, #4]
 80177e8:	e052      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 80177ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80177ee:	f113 0f09 	cmn.w	r3, #9
 80177f2:	d103      	bne.n	80177fc <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 80177f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80177f8:	607b      	str	r3, [r7, #4]
 80177fa:	e049      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 80177fc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017800:	f113 0f0a 	cmn.w	r3, #10
 8017804:	d103      	bne.n	801780e <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017806:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801780a:	607b      	str	r3, [r7, #4]
 801780c:	e040      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 801780e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017812:	f113 0f0b 	cmn.w	r3, #11
 8017816:	d103      	bne.n	8017820 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801781c:	607b      	str	r3, [r7, #4]
 801781e:	e037      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017820:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017824:	f113 0f0c 	cmn.w	r3, #12
 8017828:	d103      	bne.n	8017832 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 801782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801782e:	607b      	str	r3, [r7, #4]
 8017830:	e02e      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017832:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017836:	f113 0f0d 	cmn.w	r3, #13
 801783a:	d103      	bne.n	8017844 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 801783c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017840:	607b      	str	r3, [r7, #4]
 8017842:	e025      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017844:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017848:	f113 0f0e 	cmn.w	r3, #14
 801784c:	d103      	bne.n	8017856 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 801784e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017852:	607b      	str	r3, [r7, #4]
 8017854:	e01c      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8017856:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801785a:	f113 0f0f 	cmn.w	r3, #15
 801785e:	d103      	bne.n	8017868 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8017860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017864:	607b      	str	r3, [r7, #4]
 8017866:	e013      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8017868:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801786c:	f113 0f10 	cmn.w	r3, #16
 8017870:	d103      	bne.n	801787a <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017872:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017876:	607b      	str	r3, [r7, #4]
 8017878:	e00a      	b.n	8017890 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 801787a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801787e:	f113 0f11 	cmn.w	r3, #17
 8017882:	d103      	bne.n	801788c <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017884:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017888:	607b      	str	r3, [r7, #4]
 801788a:	e001      	b.n	8017890 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	ee07 3a90 	vmov	s15, r3
}
 8017896:	eeb0 0a67 	vmov.f32	s0, s15
 801789a:	370c      	adds	r7, #12
 801789c:	46bd      	mov	sp, r7
 801789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178a2:	b004      	add	sp, #16
 80178a4:	4770      	bx	lr
	...

080178a8 <input_parameter>:

void input_parameter(void) {
 80178a8:	b480      	push	{r7}
 80178aa:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 80178ac:	4b8f      	ldr	r3, [pc, #572]	; (8017aec <input_parameter+0x244>)
 80178ae:	4a90      	ldr	r2, [pc, #576]	; (8017af0 <input_parameter+0x248>)
 80178b0:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 80178b2:	4b8e      	ldr	r3, [pc, #568]	; (8017aec <input_parameter+0x244>)
 80178b4:	4a8e      	ldr	r2, [pc, #568]	; (8017af0 <input_parameter+0x248>)
 80178b6:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80178b8:	4b8c      	ldr	r3, [pc, #560]	; (8017aec <input_parameter+0x244>)
 80178ba:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 80178bc:	4a8b      	ldr	r2, [pc, #556]	; (8017aec <input_parameter+0x244>)
 80178be:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 80178c0:	4b8a      	ldr	r3, [pc, #552]	; (8017aec <input_parameter+0x244>)
 80178c2:	4a8c      	ldr	r2, [pc, #560]	; (8017af4 <input_parameter+0x24c>)
 80178c4:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 80178c6:	4b89      	ldr	r3, [pc, #548]	; (8017aec <input_parameter+0x244>)
 80178c8:	4a8b      	ldr	r2, [pc, #556]	; (8017af8 <input_parameter+0x250>)
 80178ca:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 80178cc:	4b87      	ldr	r3, [pc, #540]	; (8017aec <input_parameter+0x244>)
 80178ce:	4a8b      	ldr	r2, [pc, #556]	; (8017afc <input_parameter+0x254>)
 80178d0:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 80178d2:	4b86      	ldr	r3, [pc, #536]	; (8017aec <input_parameter+0x244>)
 80178d4:	4a8a      	ldr	r2, [pc, #552]	; (8017b00 <input_parameter+0x258>)
 80178d6:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80178d8:	4b84      	ldr	r3, [pc, #528]	; (8017aec <input_parameter+0x244>)
 80178da:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 80178dc:	4a83      	ldr	r2, [pc, #524]	; (8017aec <input_parameter+0x244>)
 80178de:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 80178e0:	4b82      	ldr	r3, [pc, #520]	; (8017aec <input_parameter+0x244>)
 80178e2:	4a84      	ldr	r2, [pc, #528]	; (8017af4 <input_parameter+0x24c>)
 80178e4:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 80178e6:	4b81      	ldr	r3, [pc, #516]	; (8017aec <input_parameter+0x244>)
 80178e8:	4a83      	ldr	r2, [pc, #524]	; (8017af8 <input_parameter+0x250>)
 80178ea:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 80178ec:	4b7f      	ldr	r3, [pc, #508]	; (8017aec <input_parameter+0x244>)
 80178ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80178f2:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 80178f4:	4b7d      	ldr	r3, [pc, #500]	; (8017aec <input_parameter+0x244>)
 80178f6:	4a83      	ldr	r2, [pc, #524]	; (8017b04 <input_parameter+0x25c>)
 80178f8:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 80178fa:	4b83      	ldr	r3, [pc, #524]	; (8017b08 <input_parameter+0x260>)
 80178fc:	4a83      	ldr	r2, [pc, #524]	; (8017b0c <input_parameter+0x264>)
 80178fe:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017900:	4b81      	ldr	r3, [pc, #516]	; (8017b08 <input_parameter+0x260>)
 8017902:	4a82      	ldr	r2, [pc, #520]	; (8017b0c <input_parameter+0x264>)
 8017904:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017906:	4b80      	ldr	r3, [pc, #512]	; (8017b08 <input_parameter+0x260>)
 8017908:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 801790a:	4a7f      	ldr	r2, [pc, #508]	; (8017b08 <input_parameter+0x260>)
 801790c:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 801790e:	4b7e      	ldr	r3, [pc, #504]	; (8017b08 <input_parameter+0x260>)
 8017910:	4a7f      	ldr	r2, [pc, #508]	; (8017b10 <input_parameter+0x268>)
 8017912:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017914:	4b7c      	ldr	r3, [pc, #496]	; (8017b08 <input_parameter+0x260>)
 8017916:	4a7f      	ldr	r2, [pc, #508]	; (8017b14 <input_parameter+0x26c>)
 8017918:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 801791a:	4b7b      	ldr	r3, [pc, #492]	; (8017b08 <input_parameter+0x260>)
 801791c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017920:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017922:	4b79      	ldr	r3, [pc, #484]	; (8017b08 <input_parameter+0x260>)
 8017924:	4a76      	ldr	r2, [pc, #472]	; (8017b00 <input_parameter+0x258>)
 8017926:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017928:	4b77      	ldr	r3, [pc, #476]	; (8017b08 <input_parameter+0x260>)
 801792a:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 801792c:	4a76      	ldr	r2, [pc, #472]	; (8017b08 <input_parameter+0x260>)
 801792e:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017930:	4b75      	ldr	r3, [pc, #468]	; (8017b08 <input_parameter+0x260>)
 8017932:	4a79      	ldr	r2, [pc, #484]	; (8017b18 <input_parameter+0x270>)
 8017934:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017936:	4b74      	ldr	r3, [pc, #464]	; (8017b08 <input_parameter+0x260>)
 8017938:	4a76      	ldr	r2, [pc, #472]	; (8017b14 <input_parameter+0x26c>)
 801793a:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 801793c:	4b72      	ldr	r3, [pc, #456]	; (8017b08 <input_parameter+0x260>)
 801793e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017942:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017944:	4b70      	ldr	r3, [pc, #448]	; (8017b08 <input_parameter+0x260>)
 8017946:	4a6f      	ldr	r2, [pc, #444]	; (8017b04 <input_parameter+0x25c>)
 8017948:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 801794a:	4b68      	ldr	r3, [pc, #416]	; (8017aec <input_parameter+0x244>)
 801794c:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 801794e:	4a73      	ldr	r2, [pc, #460]	; (8017b1c <input_parameter+0x274>)
 8017950:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017952:	4b66      	ldr	r3, [pc, #408]	; (8017aec <input_parameter+0x244>)
 8017954:	edd3 7a01 	vldr	s15, [r3, #4]
 8017958:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017b20 <input_parameter+0x278>
 801795c:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017960:	4b6e      	ldr	r3, [pc, #440]	; (8017b1c <input_parameter+0x274>)
 8017962:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017966:	4b61      	ldr	r3, [pc, #388]	; (8017aec <input_parameter+0x244>)
 8017968:	689b      	ldr	r3, [r3, #8]
 801796a:	4a6c      	ldr	r2, [pc, #432]	; (8017b1c <input_parameter+0x274>)
 801796c:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 801796e:	4b5f      	ldr	r3, [pc, #380]	; (8017aec <input_parameter+0x244>)
 8017970:	695b      	ldr	r3, [r3, #20]
 8017972:	4a6a      	ldr	r2, [pc, #424]	; (8017b1c <input_parameter+0x274>)
 8017974:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017976:	4b5d      	ldr	r3, [pc, #372]	; (8017aec <input_parameter+0x244>)
 8017978:	699b      	ldr	r3, [r3, #24]
 801797a:	4a68      	ldr	r2, [pc, #416]	; (8017b1c <input_parameter+0x274>)
 801797c:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 801797e:	4b5b      	ldr	r3, [pc, #364]	; (8017aec <input_parameter+0x244>)
 8017980:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017984:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017988:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 801798c:	4b63      	ldr	r3, [pc, #396]	; (8017b1c <input_parameter+0x274>)
 801798e:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017992:	4b56      	ldr	r3, [pc, #344]	; (8017aec <input_parameter+0x244>)
 8017994:	691b      	ldr	r3, [r3, #16]
 8017996:	4a61      	ldr	r2, [pc, #388]	; (8017b1c <input_parameter+0x274>)
 8017998:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 801799a:	4b54      	ldr	r3, [pc, #336]	; (8017aec <input_parameter+0x244>)
 801799c:	69db      	ldr	r3, [r3, #28]
 801799e:	4a5f      	ldr	r2, [pc, #380]	; (8017b1c <input_parameter+0x274>)
 80179a0:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 80179a2:	4b52      	ldr	r3, [pc, #328]	; (8017aec <input_parameter+0x244>)
 80179a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179a6:	4a5d      	ldr	r2, [pc, #372]	; (8017b1c <input_parameter+0x274>)
 80179a8:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 80179aa:	4b50      	ldr	r3, [pc, #320]	; (8017aec <input_parameter+0x244>)
 80179ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179ae:	4a5b      	ldr	r2, [pc, #364]	; (8017b1c <input_parameter+0x274>)
 80179b0:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80179b2:	4b4e      	ldr	r3, [pc, #312]	; (8017aec <input_parameter+0x244>)
 80179b4:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 80179b8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80179bc:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80179c0:	4b56      	ldr	r3, [pc, #344]	; (8017b1c <input_parameter+0x274>)
 80179c2:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 80179c6:	4b49      	ldr	r3, [pc, #292]	; (8017aec <input_parameter+0x244>)
 80179c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179ca:	4a54      	ldr	r2, [pc, #336]	; (8017b1c <input_parameter+0x274>)
 80179cc:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 80179ce:	4b53      	ldr	r3, [pc, #332]	; (8017b1c <input_parameter+0x274>)
 80179d0:	685b      	ldr	r3, [r3, #4]
 80179d2:	4a52      	ldr	r2, [pc, #328]	; (8017b1c <input_parameter+0x274>)
 80179d4:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 80179d6:	4b51      	ldr	r3, [pc, #324]	; (8017b1c <input_parameter+0x274>)
 80179d8:	4a52      	ldr	r2, [pc, #328]	; (8017b24 <input_parameter+0x27c>)
 80179da:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 80179dc:	4b4f      	ldr	r3, [pc, #316]	; (8017b1c <input_parameter+0x274>)
 80179de:	4a52      	ldr	r2, [pc, #328]	; (8017b28 <input_parameter+0x280>)
 80179e0:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 80179e2:	4b4e      	ldr	r3, [pc, #312]	; (8017b1c <input_parameter+0x274>)
 80179e4:	4a51      	ldr	r2, [pc, #324]	; (8017b2c <input_parameter+0x284>)
 80179e6:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 80179e8:	4b4c      	ldr	r3, [pc, #304]	; (8017b1c <input_parameter+0x274>)
 80179ea:	4a51      	ldr	r2, [pc, #324]	; (8017b30 <input_parameter+0x288>)
 80179ec:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 80179ee:	4b4b      	ldr	r3, [pc, #300]	; (8017b1c <input_parameter+0x274>)
 80179f0:	685b      	ldr	r3, [r3, #4]
 80179f2:	4a4a      	ldr	r2, [pc, #296]	; (8017b1c <input_parameter+0x274>)
 80179f4:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 80179f6:	4b49      	ldr	r3, [pc, #292]	; (8017b1c <input_parameter+0x274>)
 80179f8:	4a4a      	ldr	r2, [pc, #296]	; (8017b24 <input_parameter+0x27c>)
 80179fa:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 80179fc:	4b47      	ldr	r3, [pc, #284]	; (8017b1c <input_parameter+0x274>)
 80179fe:	4a4a      	ldr	r2, [pc, #296]	; (8017b28 <input_parameter+0x280>)
 8017a00:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017a02:	4b46      	ldr	r3, [pc, #280]	; (8017b1c <input_parameter+0x274>)
 8017a04:	4a4b      	ldr	r2, [pc, #300]	; (8017b34 <input_parameter+0x28c>)
 8017a06:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017a08:	4b44      	ldr	r3, [pc, #272]	; (8017b1c <input_parameter+0x274>)
 8017a0a:	4a4b      	ldr	r2, [pc, #300]	; (8017b38 <input_parameter+0x290>)
 8017a0c:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017a0e:	4b43      	ldr	r3, [pc, #268]	; (8017b1c <input_parameter+0x274>)
 8017a10:	685b      	ldr	r3, [r3, #4]
 8017a12:	4a42      	ldr	r2, [pc, #264]	; (8017b1c <input_parameter+0x274>)
 8017a14:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017a16:	4b41      	ldr	r3, [pc, #260]	; (8017b1c <input_parameter+0x274>)
 8017a18:	4a48      	ldr	r2, [pc, #288]	; (8017b3c <input_parameter+0x294>)
 8017a1a:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017a1c:	4b3f      	ldr	r3, [pc, #252]	; (8017b1c <input_parameter+0x274>)
 8017a1e:	4a48      	ldr	r2, [pc, #288]	; (8017b40 <input_parameter+0x298>)
 8017a20:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017a22:	4b3e      	ldr	r3, [pc, #248]	; (8017b1c <input_parameter+0x274>)
 8017a24:	4a47      	ldr	r2, [pc, #284]	; (8017b44 <input_parameter+0x29c>)
 8017a26:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017a28:	4b3c      	ldr	r3, [pc, #240]	; (8017b1c <input_parameter+0x274>)
 8017a2a:	4a47      	ldr	r2, [pc, #284]	; (8017b48 <input_parameter+0x2a0>)
 8017a2c:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017a2e:	4b3b      	ldr	r3, [pc, #236]	; (8017b1c <input_parameter+0x274>)
 8017a30:	685b      	ldr	r3, [r3, #4]
 8017a32:	4a3a      	ldr	r2, [pc, #232]	; (8017b1c <input_parameter+0x274>)
 8017a34:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017a36:	4b39      	ldr	r3, [pc, #228]	; (8017b1c <input_parameter+0x274>)
 8017a38:	4a44      	ldr	r2, [pc, #272]	; (8017b4c <input_parameter+0x2a4>)
 8017a3a:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017a3c:	4b37      	ldr	r3, [pc, #220]	; (8017b1c <input_parameter+0x274>)
 8017a3e:	4a40      	ldr	r2, [pc, #256]	; (8017b40 <input_parameter+0x298>)
 8017a40:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017a42:	4b36      	ldr	r3, [pc, #216]	; (8017b1c <input_parameter+0x274>)
 8017a44:	4a42      	ldr	r2, [pc, #264]	; (8017b50 <input_parameter+0x2a8>)
 8017a46:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017a48:	4b34      	ldr	r3, [pc, #208]	; (8017b1c <input_parameter+0x274>)
 8017a4a:	4a42      	ldr	r2, [pc, #264]	; (8017b54 <input_parameter+0x2ac>)
 8017a4c:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017a4e:	4b33      	ldr	r3, [pc, #204]	; (8017b1c <input_parameter+0x274>)
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	4a32      	ldr	r2, [pc, #200]	; (8017b1c <input_parameter+0x274>)
 8017a54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017a58:	4b30      	ldr	r3, [pc, #192]	; (8017b1c <input_parameter+0x274>)
 8017a5a:	4a32      	ldr	r2, [pc, #200]	; (8017b24 <input_parameter+0x27c>)
 8017a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017a60:	4b2e      	ldr	r3, [pc, #184]	; (8017b1c <input_parameter+0x274>)
 8017a62:	4a31      	ldr	r2, [pc, #196]	; (8017b28 <input_parameter+0x280>)
 8017a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017a68:	4b2c      	ldr	r3, [pc, #176]	; (8017b1c <input_parameter+0x274>)
 8017a6a:	4a3b      	ldr	r2, [pc, #236]	; (8017b58 <input_parameter+0x2b0>)
 8017a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017a70:	4b2a      	ldr	r3, [pc, #168]	; (8017b1c <input_parameter+0x274>)
 8017a72:	4a3a      	ldr	r2, [pc, #232]	; (8017b5c <input_parameter+0x2b4>)
 8017a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017a78:	4b28      	ldr	r3, [pc, #160]	; (8017b1c <input_parameter+0x274>)
 8017a7a:	685b      	ldr	r3, [r3, #4]
 8017a7c:	4a27      	ldr	r2, [pc, #156]	; (8017b1c <input_parameter+0x274>)
 8017a7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017a82:	4b26      	ldr	r3, [pc, #152]	; (8017b1c <input_parameter+0x274>)
 8017a84:	4a27      	ldr	r2, [pc, #156]	; (8017b24 <input_parameter+0x27c>)
 8017a86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017a8a:	4b24      	ldr	r3, [pc, #144]	; (8017b1c <input_parameter+0x274>)
 8017a8c:	4a26      	ldr	r2, [pc, #152]	; (8017b28 <input_parameter+0x280>)
 8017a8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017a92:	4b22      	ldr	r3, [pc, #136]	; (8017b1c <input_parameter+0x274>)
 8017a94:	4a32      	ldr	r2, [pc, #200]	; (8017b60 <input_parameter+0x2b8>)
 8017a96:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017a9a:	4b20      	ldr	r3, [pc, #128]	; (8017b1c <input_parameter+0x274>)
 8017a9c:	4a31      	ldr	r2, [pc, #196]	; (8017b64 <input_parameter+0x2bc>)
 8017a9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017aa2:	4b1e      	ldr	r3, [pc, #120]	; (8017b1c <input_parameter+0x274>)
 8017aa4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017aa6:	4a1d      	ldr	r2, [pc, #116]	; (8017b1c <input_parameter+0x274>)
 8017aa8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017aac:	4b1b      	ldr	r3, [pc, #108]	; (8017b1c <input_parameter+0x274>)
 8017aae:	4a2e      	ldr	r2, [pc, #184]	; (8017b68 <input_parameter+0x2c0>)
 8017ab0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017ab4:	4b19      	ldr	r3, [pc, #100]	; (8017b1c <input_parameter+0x274>)
 8017ab6:	4a22      	ldr	r2, [pc, #136]	; (8017b40 <input_parameter+0x298>)
 8017ab8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017abc:	4b17      	ldr	r3, [pc, #92]	; (8017b1c <input_parameter+0x274>)
 8017abe:	4a2b      	ldr	r2, [pc, #172]	; (8017b6c <input_parameter+0x2c4>)
 8017ac0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017ac4:	4b15      	ldr	r3, [pc, #84]	; (8017b1c <input_parameter+0x274>)
 8017ac6:	4a2a      	ldr	r2, [pc, #168]	; (8017b70 <input_parameter+0x2c8>)
 8017ac8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017acc:	4b13      	ldr	r3, [pc, #76]	; (8017b1c <input_parameter+0x274>)
 8017ace:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017ad0:	4a12      	ldr	r2, [pc, #72]	; (8017b1c <input_parameter+0x274>)
 8017ad2:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017ad6:	4b11      	ldr	r3, [pc, #68]	; (8017b1c <input_parameter+0x274>)
 8017ad8:	4a23      	ldr	r2, [pc, #140]	; (8017b68 <input_parameter+0x2c0>)
 8017ada:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017ade:	4b0f      	ldr	r3, [pc, #60]	; (8017b1c <input_parameter+0x274>)
 8017ae0:	4a17      	ldr	r2, [pc, #92]	; (8017b40 <input_parameter+0x298>)
 8017ae2:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017ae6:	4b0d      	ldr	r3, [pc, #52]	; (8017b1c <input_parameter+0x274>)
 8017ae8:	e044      	b.n	8017b74 <input_parameter+0x2cc>
 8017aea:	bf00      	nop
 8017aec:	2000ef74 	.word	0x2000ef74
 8017af0:	43960000 	.word	0x43960000
 8017af4:	44750000 	.word	0x44750000
 8017af8:	464b2000 	.word	0x464b2000
 8017afc:	40400000 	.word	0x40400000
 8017b00:	41a00000 	.word	0x41a00000
 8017b04:	41980000 	.word	0x41980000
 8017b08:	2000f0bc 	.word	0x2000f0bc
 8017b0c:	437a0000 	.word	0x437a0000
 8017b10:	444f8000 	.word	0x444f8000
 8017b14:	460ca000 	.word	0x460ca000
 8017b18:	44368000 	.word	0x44368000
 8017b1c:	2000f204 	.word	0x2000f204
 8017b20:	43480000 	.word	0x43480000
 8017b24:	44160000 	.word	0x44160000
 8017b28:	461c4000 	.word	0x461c4000
 8017b2c:	42980000 	.word	0x42980000
 8017b30:	42d60000 	.word	0x42d60000
 8017b34:	429a0000 	.word	0x429a0000
 8017b38:	42ce0000 	.word	0x42ce0000
 8017b3c:	43d70000 	.word	0x43d70000
 8017b40:	45fa0000 	.word	0x45fa0000
 8017b44:	42820000 	.word	0x42820000
 8017b48:	42a00000 	.word	0x42a00000
 8017b4c:	43e10000 	.word	0x43e10000
 8017b50:	42700000 	.word	0x42700000
 8017b54:	428e0000 	.word	0x428e0000
 8017b58:	41d80000 	.word	0x41d80000
 8017b5c:	42b20000 	.word	0x42b20000
 8017b60:	42040000 	.word	0x42040000
 8017b64:	42b40000 	.word	0x42b40000
 8017b68:	44188000 	.word	0x44188000
 8017b6c:	42860000 	.word	0x42860000
 8017b70:	42920000 	.word	0x42920000
 8017b74:	4a99      	ldr	r2, [pc, #612]	; (8017ddc <input_parameter+0x534>)
 8017b76:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017b7a:	4b99      	ldr	r3, [pc, #612]	; (8017de0 <input_parameter+0x538>)
 8017b7c:	4a99      	ldr	r2, [pc, #612]	; (8017de4 <input_parameter+0x53c>)
 8017b7e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017b82:	4b97      	ldr	r3, [pc, #604]	; (8017de0 <input_parameter+0x538>)
 8017b84:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017b86:	4a96      	ldr	r2, [pc, #600]	; (8017de0 <input_parameter+0x538>)
 8017b88:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017b8c:	4b94      	ldr	r3, [pc, #592]	; (8017de0 <input_parameter+0x538>)
 8017b8e:	4a96      	ldr	r2, [pc, #600]	; (8017de8 <input_parameter+0x540>)
 8017b90:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017b94:	4b92      	ldr	r3, [pc, #584]	; (8017de0 <input_parameter+0x538>)
 8017b96:	4a95      	ldr	r2, [pc, #596]	; (8017dec <input_parameter+0x544>)
 8017b98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8017b9c:	4b90      	ldr	r3, [pc, #576]	; (8017de0 <input_parameter+0x538>)
 8017b9e:	4a94      	ldr	r2, [pc, #592]	; (8017df0 <input_parameter+0x548>)
 8017ba0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017ba4:	4b8e      	ldr	r3, [pc, #568]	; (8017de0 <input_parameter+0x538>)
 8017ba6:	4a92      	ldr	r2, [pc, #584]	; (8017df0 <input_parameter+0x548>)
 8017ba8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017bac:	4b8c      	ldr	r3, [pc, #560]	; (8017de0 <input_parameter+0x538>)
 8017bae:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8017bb0:	4a8b      	ldr	r2, [pc, #556]	; (8017de0 <input_parameter+0x538>)
 8017bb2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017bb6:	4b8a      	ldr	r3, [pc, #552]	; (8017de0 <input_parameter+0x538>)
 8017bb8:	4a8b      	ldr	r2, [pc, #556]	; (8017de8 <input_parameter+0x540>)
 8017bba:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8017bbe:	4b88      	ldr	r3, [pc, #544]	; (8017de0 <input_parameter+0x538>)
 8017bc0:	4a8a      	ldr	r2, [pc, #552]	; (8017dec <input_parameter+0x544>)
 8017bc2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017bc6:	4b86      	ldr	r3, [pc, #536]	; (8017de0 <input_parameter+0x538>)
 8017bc8:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017bcc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8017bd0:	4b83      	ldr	r3, [pc, #524]	; (8017de0 <input_parameter+0x538>)
 8017bd2:	4a88      	ldr	r2, [pc, #544]	; (8017df4 <input_parameter+0x54c>)
 8017bd4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017bd8:	4b81      	ldr	r3, [pc, #516]	; (8017de0 <input_parameter+0x538>)
 8017bda:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8017bdc:	4a80      	ldr	r2, [pc, #512]	; (8017de0 <input_parameter+0x538>)
 8017bde:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8017be2:	4b7f      	ldr	r3, [pc, #508]	; (8017de0 <input_parameter+0x538>)
 8017be4:	4a84      	ldr	r2, [pc, #528]	; (8017df8 <input_parameter+0x550>)
 8017be6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8017bea:	4b7d      	ldr	r3, [pc, #500]	; (8017de0 <input_parameter+0x538>)
 8017bec:	4a83      	ldr	r2, [pc, #524]	; (8017dfc <input_parameter+0x554>)
 8017bee:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8017bf2:	4b7b      	ldr	r3, [pc, #492]	; (8017de0 <input_parameter+0x538>)
 8017bf4:	4a82      	ldr	r2, [pc, #520]	; (8017e00 <input_parameter+0x558>)
 8017bf6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8017bfa:	4b79      	ldr	r3, [pc, #484]	; (8017de0 <input_parameter+0x538>)
 8017bfc:	4a81      	ldr	r2, [pc, #516]	; (8017e04 <input_parameter+0x55c>)
 8017bfe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017c02:	4b77      	ldr	r3, [pc, #476]	; (8017de0 <input_parameter+0x538>)
 8017c04:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8017c06:	4a76      	ldr	r2, [pc, #472]	; (8017de0 <input_parameter+0x538>)
 8017c08:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8017c0c:	4b74      	ldr	r3, [pc, #464]	; (8017de0 <input_parameter+0x538>)
 8017c0e:	4a7a      	ldr	r2, [pc, #488]	; (8017df8 <input_parameter+0x550>)
 8017c10:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017c14:	4b72      	ldr	r3, [pc, #456]	; (8017de0 <input_parameter+0x538>)
 8017c16:	4a79      	ldr	r2, [pc, #484]	; (8017dfc <input_parameter+0x554>)
 8017c18:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017c1c:	4b70      	ldr	r3, [pc, #448]	; (8017de0 <input_parameter+0x538>)
 8017c1e:	4a78      	ldr	r2, [pc, #480]	; (8017e00 <input_parameter+0x558>)
 8017c20:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017c24:	4b6e      	ldr	r3, [pc, #440]	; (8017de0 <input_parameter+0x538>)
 8017c26:	4a78      	ldr	r2, [pc, #480]	; (8017e08 <input_parameter+0x560>)
 8017c28:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017c2c:	4b6c      	ldr	r3, [pc, #432]	; (8017de0 <input_parameter+0x538>)
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	4a6b      	ldr	r2, [pc, #428]	; (8017de0 <input_parameter+0x538>)
 8017c32:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017c36:	4b6a      	ldr	r3, [pc, #424]	; (8017de0 <input_parameter+0x538>)
 8017c38:	4a74      	ldr	r2, [pc, #464]	; (8017e0c <input_parameter+0x564>)
 8017c3a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8017c3e:	4b68      	ldr	r3, [pc, #416]	; (8017de0 <input_parameter+0x538>)
 8017c40:	4a73      	ldr	r2, [pc, #460]	; (8017e10 <input_parameter+0x568>)
 8017c42:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017c46:	4b66      	ldr	r3, [pc, #408]	; (8017de0 <input_parameter+0x538>)
 8017c48:	4a72      	ldr	r2, [pc, #456]	; (8017e14 <input_parameter+0x56c>)
 8017c4a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8017c4e:	4b64      	ldr	r3, [pc, #400]	; (8017de0 <input_parameter+0x538>)
 8017c50:	4a71      	ldr	r2, [pc, #452]	; (8017e18 <input_parameter+0x570>)
 8017c52:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017c56:	4b62      	ldr	r3, [pc, #392]	; (8017de0 <input_parameter+0x538>)
 8017c58:	685b      	ldr	r3, [r3, #4]
 8017c5a:	4a61      	ldr	r2, [pc, #388]	; (8017de0 <input_parameter+0x538>)
 8017c5c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017c60:	4b5f      	ldr	r3, [pc, #380]	; (8017de0 <input_parameter+0x538>)
 8017c62:	4a6a      	ldr	r2, [pc, #424]	; (8017e0c <input_parameter+0x564>)
 8017c64:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017c68:	4b5d      	ldr	r3, [pc, #372]	; (8017de0 <input_parameter+0x538>)
 8017c6a:	4a69      	ldr	r2, [pc, #420]	; (8017e10 <input_parameter+0x568>)
 8017c6c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017c70:	4b5b      	ldr	r3, [pc, #364]	; (8017de0 <input_parameter+0x538>)
 8017c72:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017c76:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8017c7a:	4b59      	ldr	r3, [pc, #356]	; (8017de0 <input_parameter+0x538>)
 8017c7c:	4a67      	ldr	r2, [pc, #412]	; (8017e1c <input_parameter+0x574>)
 8017c7e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017c82:	4b67      	ldr	r3, [pc, #412]	; (8017e20 <input_parameter+0x578>)
 8017c84:	4a58      	ldr	r2, [pc, #352]	; (8017de8 <input_parameter+0x540>)
 8017c86:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017c88:	4b65      	ldr	r3, [pc, #404]	; (8017e20 <input_parameter+0x578>)
 8017c8a:	4a57      	ldr	r2, [pc, #348]	; (8017de8 <input_parameter+0x540>)
 8017c8c:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017c8e:	4b64      	ldr	r3, [pc, #400]	; (8017e20 <input_parameter+0x578>)
 8017c90:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017c92:	4a63      	ldr	r2, [pc, #396]	; (8017e20 <input_parameter+0x578>)
 8017c94:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8017c96:	4b62      	ldr	r3, [pc, #392]	; (8017e20 <input_parameter+0x578>)
 8017c98:	4a62      	ldr	r2, [pc, #392]	; (8017e24 <input_parameter+0x57c>)
 8017c9a:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8017c9c:	4b60      	ldr	r3, [pc, #384]	; (8017e20 <input_parameter+0x578>)
 8017c9e:	4a62      	ldr	r2, [pc, #392]	; (8017e28 <input_parameter+0x580>)
 8017ca0:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8017ca2:	4b5f      	ldr	r3, [pc, #380]	; (8017e20 <input_parameter+0x578>)
 8017ca4:	4a61      	ldr	r2, [pc, #388]	; (8017e2c <input_parameter+0x584>)
 8017ca6:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017ca8:	4b5d      	ldr	r3, [pc, #372]	; (8017e20 <input_parameter+0x578>)
 8017caa:	4a61      	ldr	r2, [pc, #388]	; (8017e30 <input_parameter+0x588>)
 8017cac:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017cae:	4b5c      	ldr	r3, [pc, #368]	; (8017e20 <input_parameter+0x578>)
 8017cb0:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8017cb2:	4a5b      	ldr	r2, [pc, #364]	; (8017e20 <input_parameter+0x578>)
 8017cb4:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8017cb6:	4b5a      	ldr	r3, [pc, #360]	; (8017e20 <input_parameter+0x578>)
 8017cb8:	4a5a      	ldr	r2, [pc, #360]	; (8017e24 <input_parameter+0x57c>)
 8017cba:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8017cbc:	4b58      	ldr	r3, [pc, #352]	; (8017e20 <input_parameter+0x578>)
 8017cbe:	4a5a      	ldr	r2, [pc, #360]	; (8017e28 <input_parameter+0x580>)
 8017cc0:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8017cc2:	4b57      	ldr	r3, [pc, #348]	; (8017e20 <input_parameter+0x578>)
 8017cc4:	4a59      	ldr	r2, [pc, #356]	; (8017e2c <input_parameter+0x584>)
 8017cc6:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8017cc8:	4b55      	ldr	r3, [pc, #340]	; (8017e20 <input_parameter+0x578>)
 8017cca:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017cce:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8017cd0:	4b53      	ldr	r3, [pc, #332]	; (8017e20 <input_parameter+0x578>)
 8017cd2:	4a45      	ldr	r2, [pc, #276]	; (8017de8 <input_parameter+0x540>)
 8017cd4:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8017cd6:	4b52      	ldr	r3, [pc, #328]	; (8017e20 <input_parameter+0x578>)
 8017cd8:	4a56      	ldr	r2, [pc, #344]	; (8017e34 <input_parameter+0x58c>)
 8017cda:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8017cdc:	4b50      	ldr	r3, [pc, #320]	; (8017e20 <input_parameter+0x578>)
 8017cde:	4a56      	ldr	r2, [pc, #344]	; (8017e38 <input_parameter+0x590>)
 8017ce0:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8017ce2:	4b4f      	ldr	r3, [pc, #316]	; (8017e20 <input_parameter+0x578>)
 8017ce4:	4a55      	ldr	r2, [pc, #340]	; (8017e3c <input_parameter+0x594>)
 8017ce6:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8017ce8:	4b4d      	ldr	r3, [pc, #308]	; (8017e20 <input_parameter+0x578>)
 8017cea:	4a54      	ldr	r2, [pc, #336]	; (8017e3c <input_parameter+0x594>)
 8017cec:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8017cee:	4b4c      	ldr	r3, [pc, #304]	; (8017e20 <input_parameter+0x578>)
 8017cf0:	4a3d      	ldr	r2, [pc, #244]	; (8017de8 <input_parameter+0x540>)
 8017cf2:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8017cf4:	4b4a      	ldr	r3, [pc, #296]	; (8017e20 <input_parameter+0x578>)
 8017cf6:	4a4f      	ldr	r2, [pc, #316]	; (8017e34 <input_parameter+0x58c>)
 8017cf8:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8017cfa:	4b49      	ldr	r3, [pc, #292]	; (8017e20 <input_parameter+0x578>)
 8017cfc:	4a4e      	ldr	r2, [pc, #312]	; (8017e38 <input_parameter+0x590>)
 8017cfe:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8017d00:	4b47      	ldr	r3, [pc, #284]	; (8017e20 <input_parameter+0x578>)
 8017d02:	4a4e      	ldr	r2, [pc, #312]	; (8017e3c <input_parameter+0x594>)
 8017d04:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8017d06:	4b46      	ldr	r3, [pc, #280]	; (8017e20 <input_parameter+0x578>)
 8017d08:	4a42      	ldr	r2, [pc, #264]	; (8017e14 <input_parameter+0x56c>)
 8017d0a:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8017d0c:	4b44      	ldr	r3, [pc, #272]	; (8017e20 <input_parameter+0x578>)
 8017d0e:	4a36      	ldr	r2, [pc, #216]	; (8017de8 <input_parameter+0x540>)
 8017d10:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017d12:	4b43      	ldr	r3, [pc, #268]	; (8017e20 <input_parameter+0x578>)
 8017d14:	4a4a      	ldr	r2, [pc, #296]	; (8017e40 <input_parameter+0x598>)
 8017d16:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017d18:	4b41      	ldr	r3, [pc, #260]	; (8017e20 <input_parameter+0x578>)
 8017d1a:	4a4a      	ldr	r2, [pc, #296]	; (8017e44 <input_parameter+0x59c>)
 8017d1c:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8017d1e:	4b40      	ldr	r3, [pc, #256]	; (8017e20 <input_parameter+0x578>)
 8017d20:	4a49      	ldr	r2, [pc, #292]	; (8017e48 <input_parameter+0x5a0>)
 8017d22:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017d24:	4b3e      	ldr	r3, [pc, #248]	; (8017e20 <input_parameter+0x578>)
 8017d26:	4a49      	ldr	r2, [pc, #292]	; (8017e4c <input_parameter+0x5a4>)
 8017d28:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8017d2a:	4b3d      	ldr	r3, [pc, #244]	; (8017e20 <input_parameter+0x578>)
 8017d2c:	4a2e      	ldr	r2, [pc, #184]	; (8017de8 <input_parameter+0x540>)
 8017d2e:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017d30:	4b3b      	ldr	r3, [pc, #236]	; (8017e20 <input_parameter+0x578>)
 8017d32:	4a47      	ldr	r2, [pc, #284]	; (8017e50 <input_parameter+0x5a8>)
 8017d34:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8017d36:	4b3a      	ldr	r3, [pc, #232]	; (8017e20 <input_parameter+0x578>)
 8017d38:	4a42      	ldr	r2, [pc, #264]	; (8017e44 <input_parameter+0x59c>)
 8017d3a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8017d3c:	4b38      	ldr	r3, [pc, #224]	; (8017e20 <input_parameter+0x578>)
 8017d3e:	4a42      	ldr	r2, [pc, #264]	; (8017e48 <input_parameter+0x5a0>)
 8017d40:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8017d42:	4b37      	ldr	r3, [pc, #220]	; (8017e20 <input_parameter+0x578>)
 8017d44:	4a43      	ldr	r2, [pc, #268]	; (8017e54 <input_parameter+0x5ac>)
 8017d46:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017d48:	4b35      	ldr	r3, [pc, #212]	; (8017e20 <input_parameter+0x578>)
 8017d4a:	4a27      	ldr	r2, [pc, #156]	; (8017de8 <input_parameter+0x540>)
 8017d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017d50:	4b33      	ldr	r3, [pc, #204]	; (8017e20 <input_parameter+0x578>)
 8017d52:	4a41      	ldr	r2, [pc, #260]	; (8017e58 <input_parameter+0x5b0>)
 8017d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8017d58:	4b31      	ldr	r3, [pc, #196]	; (8017e20 <input_parameter+0x578>)
 8017d5a:	4a40      	ldr	r2, [pc, #256]	; (8017e5c <input_parameter+0x5b4>)
 8017d5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017d60:	4b2f      	ldr	r3, [pc, #188]	; (8017e20 <input_parameter+0x578>)
 8017d62:	4a3f      	ldr	r2, [pc, #252]	; (8017e60 <input_parameter+0x5b8>)
 8017d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8017d68:	4b2d      	ldr	r3, [pc, #180]	; (8017e20 <input_parameter+0x578>)
 8017d6a:	4a3e      	ldr	r2, [pc, #248]	; (8017e64 <input_parameter+0x5bc>)
 8017d6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017d70:	4b2b      	ldr	r3, [pc, #172]	; (8017e20 <input_parameter+0x578>)
 8017d72:	4a1d      	ldr	r2, [pc, #116]	; (8017de8 <input_parameter+0x540>)
 8017d74:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8017d78:	4b29      	ldr	r3, [pc, #164]	; (8017e20 <input_parameter+0x578>)
 8017d7a:	4a3b      	ldr	r2, [pc, #236]	; (8017e68 <input_parameter+0x5c0>)
 8017d7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017d80:	4b27      	ldr	r3, [pc, #156]	; (8017e20 <input_parameter+0x578>)
 8017d82:	4a36      	ldr	r2, [pc, #216]	; (8017e5c <input_parameter+0x5b4>)
 8017d84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8017d88:	4b25      	ldr	r3, [pc, #148]	; (8017e20 <input_parameter+0x578>)
 8017d8a:	4a38      	ldr	r2, [pc, #224]	; (8017e6c <input_parameter+0x5c4>)
 8017d8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017d90:	4b23      	ldr	r3, [pc, #140]	; (8017e20 <input_parameter+0x578>)
 8017d92:	4a37      	ldr	r2, [pc, #220]	; (8017e70 <input_parameter+0x5c8>)
 8017d94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8017d98:	4b21      	ldr	r3, [pc, #132]	; (8017e20 <input_parameter+0x578>)
 8017d9a:	4a13      	ldr	r2, [pc, #76]	; (8017de8 <input_parameter+0x540>)
 8017d9c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8017da0:	4b1f      	ldr	r3, [pc, #124]	; (8017e20 <input_parameter+0x578>)
 8017da2:	4a34      	ldr	r2, [pc, #208]	; (8017e74 <input_parameter+0x5cc>)
 8017da4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8017da8:	4b1d      	ldr	r3, [pc, #116]	; (8017e20 <input_parameter+0x578>)
 8017daa:	4a26      	ldr	r2, [pc, #152]	; (8017e44 <input_parameter+0x59c>)
 8017dac:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8017db0:	4b1b      	ldr	r3, [pc, #108]	; (8017e20 <input_parameter+0x578>)
 8017db2:	4a31      	ldr	r2, [pc, #196]	; (8017e78 <input_parameter+0x5d0>)
 8017db4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8017db8:	4b19      	ldr	r3, [pc, #100]	; (8017e20 <input_parameter+0x578>)
 8017dba:	4a2d      	ldr	r2, [pc, #180]	; (8017e70 <input_parameter+0x5c8>)
 8017dbc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8017dc0:	4b17      	ldr	r3, [pc, #92]	; (8017e20 <input_parameter+0x578>)
 8017dc2:	4a09      	ldr	r2, [pc, #36]	; (8017de8 <input_parameter+0x540>)
 8017dc4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8017dc8:	4b15      	ldr	r3, [pc, #84]	; (8017e20 <input_parameter+0x578>)
 8017dca:	4a2c      	ldr	r2, [pc, #176]	; (8017e7c <input_parameter+0x5d4>)
 8017dcc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8017dd0:	4b13      	ldr	r3, [pc, #76]	; (8017e20 <input_parameter+0x578>)
 8017dd2:	4a1c      	ldr	r2, [pc, #112]	; (8017e44 <input_parameter+0x59c>)
 8017dd4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8017dd8:	e052      	b.n	8017e80 <input_parameter+0x5d8>
 8017dda:	bf00      	nop
 8017ddc:	42860000 	.word	0x42860000
 8017de0:	2000f204 	.word	0x2000f204
 8017de4:	42920000 	.word	0x42920000
 8017de8:	44160000 	.word	0x44160000
 8017dec:	461c4000 	.word	0x461c4000
 8017df0:	42640000 	.word	0x42640000
 8017df4:	42500000 	.word	0x42500000
 8017df8:	44250000 	.word	0x44250000
 8017dfc:	45fa0000 	.word	0x45fa0000
 8017e00:	425c0000 	.word	0x425c0000
 8017e04:	42c80000 	.word	0x42c80000
 8017e08:	42ce0000 	.word	0x42ce0000
 8017e0c:	442f0000 	.word	0x442f0000
 8017e10:	462be000 	.word	0x462be000
 8017e14:	420c0000 	.word	0x420c0000
 8017e18:	42600000 	.word	0x42600000
 8017e1c:	42700000 	.word	0x42700000
 8017e20:	2000f34c 	.word	0x2000f34c
 8017e24:	44898000 	.word	0x44898000
 8017e28:	476a6000 	.word	0x476a6000
 8017e2c:	40a00000 	.word	0x40a00000
 8017e30:	41e00000 	.word	0x41e00000
 8017e34:	446d8000 	.word	0x446d8000
 8017e38:	466a6000 	.word	0x466a6000
 8017e3c:	41f80000 	.word	0x41f80000
 8017e40:	44520000 	.word	0x44520000
 8017e44:	465ac000 	.word	0x465ac000
 8017e48:	40e00000 	.word	0x40e00000
 8017e4c:	41a00000 	.word	0x41a00000
 8017e50:	444d0000 	.word	0x444d0000
 8017e54:	41900000 	.word	0x41900000
 8017e58:	444f8000 	.word	0x444f8000
 8017e5c:	463b8000 	.word	0x463b8000
 8017e60:	41500000 	.word	0x41500000
 8017e64:	42180000 	.word	0x42180000
 8017e68:	44608000 	.word	0x44608000
 8017e6c:	41400000 	.word	0x41400000
 8017e70:	42100000 	.word	0x42100000
 8017e74:	446b0000 	.word	0x446b0000
 8017e78:	41180000 	.word	0x41180000
 8017e7c:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8017e80:	4b9d      	ldr	r3, [pc, #628]	; (80180f8 <input_parameter+0x850>)
 8017e82:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017e86:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8017e8a:	4b9b      	ldr	r3, [pc, #620]	; (80180f8 <input_parameter+0x850>)
 8017e8c:	4a9b      	ldr	r2, [pc, #620]	; (80180fc <input_parameter+0x854>)
 8017e8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8017e92:	4b99      	ldr	r3, [pc, #612]	; (80180f8 <input_parameter+0x850>)
 8017e94:	4a9a      	ldr	r2, [pc, #616]	; (8018100 <input_parameter+0x858>)
 8017e96:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8017e9a:	4b97      	ldr	r3, [pc, #604]	; (80180f8 <input_parameter+0x850>)
 8017e9c:	4a99      	ldr	r2, [pc, #612]	; (8018104 <input_parameter+0x85c>)
 8017e9e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8017ea2:	4b95      	ldr	r3, [pc, #596]	; (80180f8 <input_parameter+0x850>)
 8017ea4:	4a98      	ldr	r2, [pc, #608]	; (8018108 <input_parameter+0x860>)
 8017ea6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8017eaa:	4b93      	ldr	r3, [pc, #588]	; (80180f8 <input_parameter+0x850>)
 8017eac:	4a97      	ldr	r2, [pc, #604]	; (801810c <input_parameter+0x864>)
 8017eae:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8017eb2:	4b91      	ldr	r3, [pc, #580]	; (80180f8 <input_parameter+0x850>)
 8017eb4:	4a96      	ldr	r2, [pc, #600]	; (8018110 <input_parameter+0x868>)
 8017eb6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8017eba:	4b8f      	ldr	r3, [pc, #572]	; (80180f8 <input_parameter+0x850>)
 8017ebc:	4a90      	ldr	r2, [pc, #576]	; (8018100 <input_parameter+0x858>)
 8017ebe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8017ec2:	4b8d      	ldr	r3, [pc, #564]	; (80180f8 <input_parameter+0x850>)
 8017ec4:	4a93      	ldr	r2, [pc, #588]	; (8018114 <input_parameter+0x86c>)
 8017ec6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8017eca:	4b8b      	ldr	r3, [pc, #556]	; (80180f8 <input_parameter+0x850>)
 8017ecc:	4a8e      	ldr	r2, [pc, #568]	; (8018108 <input_parameter+0x860>)
 8017ece:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 8017ed2:	4b89      	ldr	r3, [pc, #548]	; (80180f8 <input_parameter+0x850>)
 8017ed4:	4a90      	ldr	r2, [pc, #576]	; (8018118 <input_parameter+0x870>)
 8017ed6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8017eda:	4b87      	ldr	r3, [pc, #540]	; (80180f8 <input_parameter+0x850>)
 8017edc:	4a8f      	ldr	r2, [pc, #572]	; (801811c <input_parameter+0x874>)
 8017ede:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8017ee2:	4b85      	ldr	r3, [pc, #532]	; (80180f8 <input_parameter+0x850>)
 8017ee4:	4a86      	ldr	r2, [pc, #536]	; (8018100 <input_parameter+0x858>)
 8017ee6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8017eea:	4b83      	ldr	r3, [pc, #524]	; (80180f8 <input_parameter+0x850>)
 8017eec:	4a8c      	ldr	r2, [pc, #560]	; (8018120 <input_parameter+0x878>)
 8017eee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 8017ef2:	4b81      	ldr	r3, [pc, #516]	; (80180f8 <input_parameter+0x850>)
 8017ef4:	4a8b      	ldr	r2, [pc, #556]	; (8018124 <input_parameter+0x87c>)
 8017ef6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8017efa:	4b7f      	ldr	r3, [pc, #508]	; (80180f8 <input_parameter+0x850>)
 8017efc:	4a8a      	ldr	r2, [pc, #552]	; (8018128 <input_parameter+0x880>)
 8017efe:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8017f02:	4b7d      	ldr	r3, [pc, #500]	; (80180f8 <input_parameter+0x850>)
 8017f04:	4a82      	ldr	r2, [pc, #520]	; (8018110 <input_parameter+0x868>)
 8017f06:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8017f0a:	4b7b      	ldr	r3, [pc, #492]	; (80180f8 <input_parameter+0x850>)
 8017f0c:	4a7c      	ldr	r2, [pc, #496]	; (8018100 <input_parameter+0x858>)
 8017f0e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8017f12:	4b79      	ldr	r3, [pc, #484]	; (80180f8 <input_parameter+0x850>)
 8017f14:	4a85      	ldr	r2, [pc, #532]	; (801812c <input_parameter+0x884>)
 8017f16:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8017f1a:	4b77      	ldr	r3, [pc, #476]	; (80180f8 <input_parameter+0x850>)
 8017f1c:	4a84      	ldr	r2, [pc, #528]	; (8018130 <input_parameter+0x888>)
 8017f1e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8017f22:	4b75      	ldr	r3, [pc, #468]	; (80180f8 <input_parameter+0x850>)
 8017f24:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017f28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8017f2c:	4b72      	ldr	r3, [pc, #456]	; (80180f8 <input_parameter+0x850>)
 8017f2e:	4a81      	ldr	r2, [pc, #516]	; (8018134 <input_parameter+0x88c>)
 8017f30:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8017f34:	4b70      	ldr	r3, [pc, #448]	; (80180f8 <input_parameter+0x850>)
 8017f36:	4a72      	ldr	r2, [pc, #456]	; (8018100 <input_parameter+0x858>)
 8017f38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8017f3c:	4b6e      	ldr	r3, [pc, #440]	; (80180f8 <input_parameter+0x850>)
 8017f3e:	4a7e      	ldr	r2, [pc, #504]	; (8018138 <input_parameter+0x890>)
 8017f40:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8017f44:	4b6c      	ldr	r3, [pc, #432]	; (80180f8 <input_parameter+0x850>)
 8017f46:	4a77      	ldr	r2, [pc, #476]	; (8018124 <input_parameter+0x87c>)
 8017f48:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8017f4c:	4b6a      	ldr	r3, [pc, #424]	; (80180f8 <input_parameter+0x850>)
 8017f4e:	4a7b      	ldr	r2, [pc, #492]	; (801813c <input_parameter+0x894>)
 8017f50:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8017f54:	4b68      	ldr	r3, [pc, #416]	; (80180f8 <input_parameter+0x850>)
 8017f56:	4a7a      	ldr	r2, [pc, #488]	; (8018140 <input_parameter+0x898>)
 8017f58:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8017f5c:	4b66      	ldr	r3, [pc, #408]	; (80180f8 <input_parameter+0x850>)
 8017f5e:	4a68      	ldr	r2, [pc, #416]	; (8018100 <input_parameter+0x858>)
 8017f60:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8017f64:	4b64      	ldr	r3, [pc, #400]	; (80180f8 <input_parameter+0x850>)
 8017f66:	4a77      	ldr	r2, [pc, #476]	; (8018144 <input_parameter+0x89c>)
 8017f68:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8017f6c:	4b62      	ldr	r3, [pc, #392]	; (80180f8 <input_parameter+0x850>)
 8017f6e:	4a76      	ldr	r2, [pc, #472]	; (8018148 <input_parameter+0x8a0>)
 8017f70:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8017f74:	4b60      	ldr	r3, [pc, #384]	; (80180f8 <input_parameter+0x850>)
 8017f76:	4a75      	ldr	r2, [pc, #468]	; (801814c <input_parameter+0x8a4>)
 8017f78:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8017f7c:	4b5e      	ldr	r3, [pc, #376]	; (80180f8 <input_parameter+0x850>)
 8017f7e:	4a70      	ldr	r2, [pc, #448]	; (8018140 <input_parameter+0x898>)
 8017f80:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8017f84:	4b72      	ldr	r3, [pc, #456]	; (8018150 <input_parameter+0x8a8>)
 8017f86:	4a73      	ldr	r2, [pc, #460]	; (8018154 <input_parameter+0x8ac>)
 8017f88:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8017f8a:	4b71      	ldr	r3, [pc, #452]	; (8018150 <input_parameter+0x8a8>)
 8017f8c:	4a71      	ldr	r2, [pc, #452]	; (8018154 <input_parameter+0x8ac>)
 8017f8e:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8017f90:	4b6f      	ldr	r3, [pc, #444]	; (8018150 <input_parameter+0x8a8>)
 8017f92:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8017f94:	4a6e      	ldr	r2, [pc, #440]	; (8018150 <input_parameter+0x8a8>)
 8017f96:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8017f98:	4b6d      	ldr	r3, [pc, #436]	; (8018150 <input_parameter+0x8a8>)
 8017f9a:	4a6f      	ldr	r2, [pc, #444]	; (8018158 <input_parameter+0x8b0>)
 8017f9c:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 8017f9e:	4b6c      	ldr	r3, [pc, #432]	; (8018150 <input_parameter+0x8a8>)
 8017fa0:	4a61      	ldr	r2, [pc, #388]	; (8018128 <input_parameter+0x880>)
 8017fa2:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8017fa4:	4b6a      	ldr	r3, [pc, #424]	; (8018150 <input_parameter+0x8a8>)
 8017fa6:	4a6d      	ldr	r2, [pc, #436]	; (801815c <input_parameter+0x8b4>)
 8017fa8:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8017faa:	4b69      	ldr	r3, [pc, #420]	; (8018150 <input_parameter+0x8a8>)
 8017fac:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 8017fae:	4a68      	ldr	r2, [pc, #416]	; (8018150 <input_parameter+0x8a8>)
 8017fb0:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 8017fb2:	4b67      	ldr	r3, [pc, #412]	; (8018150 <input_parameter+0x8a8>)
 8017fb4:	4a68      	ldr	r2, [pc, #416]	; (8018158 <input_parameter+0x8b0>)
 8017fb6:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8017fb8:	4b65      	ldr	r3, [pc, #404]	; (8018150 <input_parameter+0x8a8>)
 8017fba:	4a5b      	ldr	r2, [pc, #364]	; (8018128 <input_parameter+0x880>)
 8017fbc:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 8017fbe:	4b64      	ldr	r3, [pc, #400]	; (8018150 <input_parameter+0x8a8>)
 8017fc0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017fc4:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8017fc6:	4b62      	ldr	r3, [pc, #392]	; (8018150 <input_parameter+0x8a8>)
 8017fc8:	4a62      	ldr	r2, [pc, #392]	; (8018154 <input_parameter+0x8ac>)
 8017fca:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8017fcc:	4b60      	ldr	r3, [pc, #384]	; (8018150 <input_parameter+0x8a8>)
 8017fce:	4a64      	ldr	r2, [pc, #400]	; (8018160 <input_parameter+0x8b8>)
 8017fd0:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 8017fd2:	4b5f      	ldr	r3, [pc, #380]	; (8018150 <input_parameter+0x8a8>)
 8017fd4:	4a63      	ldr	r2, [pc, #396]	; (8018164 <input_parameter+0x8bc>)
 8017fd6:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8017fd8:	4b5d      	ldr	r3, [pc, #372]	; (8018150 <input_parameter+0x8a8>)
 8017fda:	4a63      	ldr	r2, [pc, #396]	; (8018168 <input_parameter+0x8c0>)
 8017fdc:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 8017fde:	4b5c      	ldr	r3, [pc, #368]	; (8018150 <input_parameter+0x8a8>)
 8017fe0:	4a5c      	ldr	r2, [pc, #368]	; (8018154 <input_parameter+0x8ac>)
 8017fe2:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8017fe4:	4b5a      	ldr	r3, [pc, #360]	; (8018150 <input_parameter+0x8a8>)
 8017fe6:	4a5e      	ldr	r2, [pc, #376]	; (8018160 <input_parameter+0x8b8>)
 8017fe8:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 8017fea:	4b59      	ldr	r3, [pc, #356]	; (8018150 <input_parameter+0x8a8>)
 8017fec:	4a5d      	ldr	r2, [pc, #372]	; (8018164 <input_parameter+0x8bc>)
 8017fee:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 8017ff0:	4b57      	ldr	r3, [pc, #348]	; (8018150 <input_parameter+0x8a8>)
 8017ff2:	4a5e      	ldr	r2, [pc, #376]	; (801816c <input_parameter+0x8c4>)
 8017ff4:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8017ff6:	4b56      	ldr	r3, [pc, #344]	; (8018150 <input_parameter+0x8a8>)
 8017ff8:	4a56      	ldr	r2, [pc, #344]	; (8018154 <input_parameter+0x8ac>)
 8017ffa:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8017ffc:	4b54      	ldr	r3, [pc, #336]	; (8018150 <input_parameter+0x8a8>)
 8017ffe:	4a5c      	ldr	r2, [pc, #368]	; (8018170 <input_parameter+0x8c8>)
 8018000:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 8018002:	4b53      	ldr	r3, [pc, #332]	; (8018150 <input_parameter+0x8a8>)
 8018004:	4a4d      	ldr	r2, [pc, #308]	; (801813c <input_parameter+0x894>)
 8018006:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 8018008:	4b51      	ldr	r3, [pc, #324]	; (8018150 <input_parameter+0x8a8>)
 801800a:	4a4d      	ldr	r2, [pc, #308]	; (8018140 <input_parameter+0x898>)
 801800c:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 801800e:	4b50      	ldr	r3, [pc, #320]	; (8018150 <input_parameter+0x8a8>)
 8018010:	4a50      	ldr	r2, [pc, #320]	; (8018154 <input_parameter+0x8ac>)
 8018012:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018014:	4b4e      	ldr	r3, [pc, #312]	; (8018150 <input_parameter+0x8a8>)
 8018016:	4a56      	ldr	r2, [pc, #344]	; (8018170 <input_parameter+0x8c8>)
 8018018:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 801801a:	4b4d      	ldr	r3, [pc, #308]	; (8018150 <input_parameter+0x8a8>)
 801801c:	4a47      	ldr	r2, [pc, #284]	; (801813c <input_parameter+0x894>)
 801801e:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018020:	4b4b      	ldr	r3, [pc, #300]	; (8018150 <input_parameter+0x8a8>)
 8018022:	4a54      	ldr	r2, [pc, #336]	; (8018174 <input_parameter+0x8cc>)
 8018024:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 8018026:	4b4a      	ldr	r3, [pc, #296]	; (8018150 <input_parameter+0x8a8>)
 8018028:	4a4a      	ldr	r2, [pc, #296]	; (8018154 <input_parameter+0x8ac>)
 801802a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 801802e:	4b48      	ldr	r3, [pc, #288]	; (8018150 <input_parameter+0x8a8>)
 8018030:	4a51      	ldr	r2, [pc, #324]	; (8018178 <input_parameter+0x8d0>)
 8018032:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 8018036:	4b46      	ldr	r3, [pc, #280]	; (8018150 <input_parameter+0x8a8>)
 8018038:	4a4e      	ldr	r2, [pc, #312]	; (8018174 <input_parameter+0x8cc>)
 801803a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 801803e:	4b44      	ldr	r3, [pc, #272]	; (8018150 <input_parameter+0x8a8>)
 8018040:	4a4e      	ldr	r2, [pc, #312]	; (801817c <input_parameter+0x8d4>)
 8018042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 8018046:	4b42      	ldr	r3, [pc, #264]	; (8018150 <input_parameter+0x8a8>)
 8018048:	4a42      	ldr	r2, [pc, #264]	; (8018154 <input_parameter+0x8ac>)
 801804a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 801804e:	4b40      	ldr	r3, [pc, #256]	; (8018150 <input_parameter+0x8a8>)
 8018050:	4a49      	ldr	r2, [pc, #292]	; (8018178 <input_parameter+0x8d0>)
 8018052:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 8018056:	4b3e      	ldr	r3, [pc, #248]	; (8018150 <input_parameter+0x8a8>)
 8018058:	4a38      	ldr	r2, [pc, #224]	; (801813c <input_parameter+0x894>)
 801805a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 801805e:	4b3c      	ldr	r3, [pc, #240]	; (8018150 <input_parameter+0x8a8>)
 8018060:	4a34      	ldr	r2, [pc, #208]	; (8018134 <input_parameter+0x88c>)
 8018062:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 8018066:	4b3a      	ldr	r3, [pc, #232]	; (8018150 <input_parameter+0x8a8>)
 8018068:	4a3a      	ldr	r2, [pc, #232]	; (8018154 <input_parameter+0x8ac>)
 801806a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 801806e:	4b38      	ldr	r3, [pc, #224]	; (8018150 <input_parameter+0x8a8>)
 8018070:	4a43      	ldr	r2, [pc, #268]	; (8018180 <input_parameter+0x8d8>)
 8018072:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 8018076:	4b36      	ldr	r3, [pc, #216]	; (8018150 <input_parameter+0x8a8>)
 8018078:	4a30      	ldr	r2, [pc, #192]	; (801813c <input_parameter+0x894>)
 801807a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 801807e:	4b34      	ldr	r3, [pc, #208]	; (8018150 <input_parameter+0x8a8>)
 8018080:	4a40      	ldr	r2, [pc, #256]	; (8018184 <input_parameter+0x8dc>)
 8018082:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018086:	4b32      	ldr	r3, [pc, #200]	; (8018150 <input_parameter+0x8a8>)
 8018088:	4a32      	ldr	r2, [pc, #200]	; (8018154 <input_parameter+0x8ac>)
 801808a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 801808e:	4b30      	ldr	r3, [pc, #192]	; (8018150 <input_parameter+0x8a8>)
 8018090:	4a3d      	ldr	r2, [pc, #244]	; (8018188 <input_parameter+0x8e0>)
 8018092:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 8018096:	4b2e      	ldr	r3, [pc, #184]	; (8018150 <input_parameter+0x8a8>)
 8018098:	4a3c      	ldr	r2, [pc, #240]	; (801818c <input_parameter+0x8e4>)
 801809a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 801809e:	4b2c      	ldr	r3, [pc, #176]	; (8018150 <input_parameter+0x8a8>)
 80180a0:	4a3b      	ldr	r2, [pc, #236]	; (8018190 <input_parameter+0x8e8>)
 80180a2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 80180a6:	4b2a      	ldr	r3, [pc, #168]	; (8018150 <input_parameter+0x8a8>)
 80180a8:	4a2a      	ldr	r2, [pc, #168]	; (8018154 <input_parameter+0x8ac>)
 80180aa:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 80180ae:	4b28      	ldr	r3, [pc, #160]	; (8018150 <input_parameter+0x8a8>)
 80180b0:	4a31      	ldr	r2, [pc, #196]	; (8018178 <input_parameter+0x8d0>)
 80180b2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 80180b6:	4b26      	ldr	r3, [pc, #152]	; (8018150 <input_parameter+0x8a8>)
 80180b8:	4a30      	ldr	r2, [pc, #192]	; (801817c <input_parameter+0x8d4>)
 80180ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 80180be:	4b24      	ldr	r3, [pc, #144]	; (8018150 <input_parameter+0x8a8>)
 80180c0:	4a13      	ldr	r2, [pc, #76]	; (8018110 <input_parameter+0x868>)
 80180c2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 80180c6:	4b22      	ldr	r3, [pc, #136]	; (8018150 <input_parameter+0x8a8>)
 80180c8:	4a22      	ldr	r2, [pc, #136]	; (8018154 <input_parameter+0x8ac>)
 80180ca:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 80180ce:	4b20      	ldr	r3, [pc, #128]	; (8018150 <input_parameter+0x8a8>)
 80180d0:	4a29      	ldr	r2, [pc, #164]	; (8018178 <input_parameter+0x8d0>)
 80180d2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 80180d6:	4b1e      	ldr	r3, [pc, #120]	; (8018150 <input_parameter+0x8a8>)
 80180d8:	4a2e      	ldr	r2, [pc, #184]	; (8018194 <input_parameter+0x8ec>)
 80180da:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 80180de:	4b1c      	ldr	r3, [pc, #112]	; (8018150 <input_parameter+0x8a8>)
 80180e0:	4a0e      	ldr	r2, [pc, #56]	; (801811c <input_parameter+0x874>)
 80180e2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 80180e6:	4b1a      	ldr	r3, [pc, #104]	; (8018150 <input_parameter+0x8a8>)
 80180e8:	4a1a      	ldr	r2, [pc, #104]	; (8018154 <input_parameter+0x8ac>)
 80180ea:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 80180ee:	4b18      	ldr	r3, [pc, #96]	; (8018150 <input_parameter+0x8a8>)
 80180f0:	4a29      	ldr	r2, [pc, #164]	; (8018198 <input_parameter+0x8f0>)
 80180f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80180f6:	e051      	b.n	801819c <input_parameter+0x8f4>
 80180f8:	2000f34c 	.word	0x2000f34c
 80180fc:	42080000 	.word	0x42080000
 8018100:	44160000 	.word	0x44160000
 8018104:	44340000 	.word	0x44340000
 8018108:	463b8000 	.word	0x463b8000
 801810c:	422c0000 	.word	0x422c0000
 8018110:	41b00000 	.word	0x41b00000
 8018114:	443b8000 	.word	0x443b8000
 8018118:	42200000 	.word	0x42200000
 801811c:	41c00000 	.word	0x41c00000
 8018120:	44660000 	.word	0x44660000
 8018124:	466a6000 	.word	0x466a6000
 8018128:	40a00000 	.word	0x40a00000
 801812c:	445e8000 	.word	0x445e8000
 8018130:	465ac000 	.word	0x465ac000
 8018134:	42100000 	.word	0x42100000
 8018138:	446b0000 	.word	0x446b0000
 801813c:	41880000 	.word	0x41880000
 8018140:	41a00000 	.word	0x41a00000
 8018144:	44700000 	.word	0x44700000
 8018148:	467a0000 	.word	0x467a0000
 801814c:	41200000 	.word	0x41200000
 8018150:	2000f494 	.word	0x2000f494
 8018154:	447a0000 	.word	0x447a0000
 8018158:	44898000 	.word	0x44898000
 801815c:	41e00000 	.word	0x41e00000
 8018160:	44b54000 	.word	0x44b54000
 8018164:	41e80000 	.word	0x41e80000
 8018168:	41f80000 	.word	0x41f80000
 801816c:	420c0000 	.word	0x420c0000
 8018170:	44af0000 	.word	0x44af0000
 8018174:	41900000 	.word	0x41900000
 8018178:	44a28000 	.word	0x44a28000
 801817c:	42180000 	.word	0x42180000
 8018180:	44c6c000 	.word	0x44c6c000
 8018184:	41700000 	.word	0x41700000
 8018188:	44c30000 	.word	0x44c30000
 801818c:	41600000 	.word	0x41600000
 8018190:	41400000 	.word	0x41400000
 8018194:	41f00000 	.word	0x41f00000
 8018198:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 801819c:	4b9e      	ldr	r3, [pc, #632]	; (8018418 <input_parameter+0xb70>)
 801819e:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80181a2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 80181a6:	4b9c      	ldr	r3, [pc, #624]	; (8018418 <input_parameter+0xb70>)
 80181a8:	4a9c      	ldr	r2, [pc, #624]	; (801841c <input_parameter+0xb74>)
 80181aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 80181ae:	4b9a      	ldr	r3, [pc, #616]	; (8018418 <input_parameter+0xb70>)
 80181b0:	4a9b      	ldr	r2, [pc, #620]	; (8018420 <input_parameter+0xb78>)
 80181b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 80181b6:	4b98      	ldr	r3, [pc, #608]	; (8018418 <input_parameter+0xb70>)
 80181b8:	4a9a      	ldr	r2, [pc, #616]	; (8018424 <input_parameter+0xb7c>)
 80181ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 80181be:	4b96      	ldr	r3, [pc, #600]	; (8018418 <input_parameter+0xb70>)
 80181c0:	4a99      	ldr	r2, [pc, #612]	; (8018428 <input_parameter+0xb80>)
 80181c2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 80181c6:	4b94      	ldr	r3, [pc, #592]	; (8018418 <input_parameter+0xb70>)
 80181c8:	4a98      	ldr	r2, [pc, #608]	; (801842c <input_parameter+0xb84>)
 80181ca:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 80181ce:	4b92      	ldr	r3, [pc, #584]	; (8018418 <input_parameter+0xb70>)
 80181d0:	4a93      	ldr	r2, [pc, #588]	; (8018420 <input_parameter+0xb78>)
 80181d2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 80181d6:	4b90      	ldr	r3, [pc, #576]	; (8018418 <input_parameter+0xb70>)
 80181d8:	4a95      	ldr	r2, [pc, #596]	; (8018430 <input_parameter+0xb88>)
 80181da:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 80181de:	4b8e      	ldr	r3, [pc, #568]	; (8018418 <input_parameter+0xb70>)
 80181e0:	4a94      	ldr	r2, [pc, #592]	; (8018434 <input_parameter+0xb8c>)
 80181e2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 21;
 80181e6:	4b8c      	ldr	r3, [pc, #560]	; (8018418 <input_parameter+0xb70>)
 80181e8:	4a93      	ldr	r2, [pc, #588]	; (8018438 <input_parameter+0xb90>)
 80181ea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 80181ee:	4b8a      	ldr	r3, [pc, #552]	; (8018418 <input_parameter+0xb70>)
 80181f0:	4a8b      	ldr	r2, [pc, #556]	; (8018420 <input_parameter+0xb78>)
 80181f2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 80181f6:	4b88      	ldr	r3, [pc, #544]	; (8018418 <input_parameter+0xb70>)
 80181f8:	4a8d      	ldr	r2, [pc, #564]	; (8018430 <input_parameter+0xb88>)
 80181fa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 80181fe:	4b86      	ldr	r3, [pc, #536]	; (8018418 <input_parameter+0xb70>)
 8018200:	4a8e      	ldr	r2, [pc, #568]	; (801843c <input_parameter+0xb94>)
 8018202:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 21;
 8018206:	4b84      	ldr	r3, [pc, #528]	; (8018418 <input_parameter+0xb70>)
 8018208:	4a8b      	ldr	r2, [pc, #556]	; (8018438 <input_parameter+0xb90>)
 801820a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 801820e:	4b8c      	ldr	r3, [pc, #560]	; (8018440 <input_parameter+0xb98>)
 8018210:	4a8c      	ldr	r2, [pc, #560]	; (8018444 <input_parameter+0xb9c>)
 8018212:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018214:	4b8a      	ldr	r3, [pc, #552]	; (8018440 <input_parameter+0xb98>)
 8018216:	4a8b      	ldr	r2, [pc, #556]	; (8018444 <input_parameter+0xb9c>)
 8018218:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 801821a:	4b89      	ldr	r3, [pc, #548]	; (8018440 <input_parameter+0xb98>)
 801821c:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 801821e:	4a88      	ldr	r2, [pc, #544]	; (8018440 <input_parameter+0xb98>)
 8018220:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018222:	4b87      	ldr	r3, [pc, #540]	; (8018440 <input_parameter+0xb98>)
 8018224:	4a88      	ldr	r2, [pc, #544]	; (8018448 <input_parameter+0xba0>)
 8018226:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 8018228:	4b85      	ldr	r3, [pc, #532]	; (8018440 <input_parameter+0xb98>)
 801822a:	4a88      	ldr	r2, [pc, #544]	; (801844c <input_parameter+0xba4>)
 801822c:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 801822e:	4b84      	ldr	r3, [pc, #528]	; (8018440 <input_parameter+0xb98>)
 8018230:	4a87      	ldr	r2, [pc, #540]	; (8018450 <input_parameter+0xba8>)
 8018232:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018234:	4b82      	ldr	r3, [pc, #520]	; (8018440 <input_parameter+0xb98>)
 8018236:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 8018238:	4a81      	ldr	r2, [pc, #516]	; (8018440 <input_parameter+0xb98>)
 801823a:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 801823c:	4b80      	ldr	r3, [pc, #512]	; (8018440 <input_parameter+0xb98>)
 801823e:	4a82      	ldr	r2, [pc, #520]	; (8018448 <input_parameter+0xba0>)
 8018240:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018242:	4b7f      	ldr	r3, [pc, #508]	; (8018440 <input_parameter+0xb98>)
 8018244:	4a81      	ldr	r2, [pc, #516]	; (801844c <input_parameter+0xba4>)
 8018246:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 8018248:	4b7d      	ldr	r3, [pc, #500]	; (8018440 <input_parameter+0xb98>)
 801824a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 801824e:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018250:	4b7b      	ldr	r3, [pc, #492]	; (8018440 <input_parameter+0xb98>)
 8018252:	4a7c      	ldr	r2, [pc, #496]	; (8018444 <input_parameter+0xb9c>)
 8018254:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 8018256:	4b7a      	ldr	r3, [pc, #488]	; (8018440 <input_parameter+0xb98>)
 8018258:	4a7e      	ldr	r2, [pc, #504]	; (8018454 <input_parameter+0xbac>)
 801825a:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 801825c:	4b78      	ldr	r3, [pc, #480]	; (8018440 <input_parameter+0xb98>)
 801825e:	4a76      	ldr	r2, [pc, #472]	; (8018438 <input_parameter+0xb90>)
 8018260:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8018262:	4b77      	ldr	r3, [pc, #476]	; (8018440 <input_parameter+0xb98>)
 8018264:	4a7c      	ldr	r2, [pc, #496]	; (8018458 <input_parameter+0xbb0>)
 8018266:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 8018268:	4b75      	ldr	r3, [pc, #468]	; (8018440 <input_parameter+0xb98>)
 801826a:	4a76      	ldr	r2, [pc, #472]	; (8018444 <input_parameter+0xb9c>)
 801826c:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 801826e:	4b74      	ldr	r3, [pc, #464]	; (8018440 <input_parameter+0xb98>)
 8018270:	4a78      	ldr	r2, [pc, #480]	; (8018454 <input_parameter+0xbac>)
 8018272:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 8018274:	4b72      	ldr	r3, [pc, #456]	; (8018440 <input_parameter+0xb98>)
 8018276:	4a78      	ldr	r2, [pc, #480]	; (8018458 <input_parameter+0xbb0>)
 8018278:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 801827a:	4b71      	ldr	r3, [pc, #452]	; (8018440 <input_parameter+0xb98>)
 801827c:	4a77      	ldr	r2, [pc, #476]	; (801845c <input_parameter+0xbb4>)
 801827e:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 8018280:	4b6f      	ldr	r3, [pc, #444]	; (8018440 <input_parameter+0xb98>)
 8018282:	4a70      	ldr	r2, [pc, #448]	; (8018444 <input_parameter+0xb9c>)
 8018284:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 8018286:	4b6e      	ldr	r3, [pc, #440]	; (8018440 <input_parameter+0xb98>)
 8018288:	4a75      	ldr	r2, [pc, #468]	; (8018460 <input_parameter+0xbb8>)
 801828a:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 801828c:	4b6c      	ldr	r3, [pc, #432]	; (8018440 <input_parameter+0xb98>)
 801828e:	4a75      	ldr	r2, [pc, #468]	; (8018464 <input_parameter+0xbbc>)
 8018290:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 8018292:	4b6b      	ldr	r3, [pc, #428]	; (8018440 <input_parameter+0xb98>)
 8018294:	4a70      	ldr	r2, [pc, #448]	; (8018458 <input_parameter+0xbb0>)
 8018296:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 8018298:	4b69      	ldr	r3, [pc, #420]	; (8018440 <input_parameter+0xb98>)
 801829a:	4a6a      	ldr	r2, [pc, #424]	; (8018444 <input_parameter+0xb9c>)
 801829c:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 801829e:	4b68      	ldr	r3, [pc, #416]	; (8018440 <input_parameter+0xb98>)
 80182a0:	4a6f      	ldr	r2, [pc, #444]	; (8018460 <input_parameter+0xbb8>)
 80182a2:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 80182a4:	4b66      	ldr	r3, [pc, #408]	; (8018440 <input_parameter+0xb98>)
 80182a6:	4a70      	ldr	r2, [pc, #448]	; (8018468 <input_parameter+0xbc0>)
 80182a8:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 80182aa:	4b65      	ldr	r3, [pc, #404]	; (8018440 <input_parameter+0xb98>)
 80182ac:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80182b0:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 80182b2:	4b63      	ldr	r3, [pc, #396]	; (8018440 <input_parameter+0xb98>)
 80182b4:	4a63      	ldr	r2, [pc, #396]	; (8018444 <input_parameter+0xb9c>)
 80182b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 80182ba:	4b61      	ldr	r3, [pc, #388]	; (8018440 <input_parameter+0xb98>)
 80182bc:	4a6b      	ldr	r2, [pc, #428]	; (801846c <input_parameter+0xbc4>)
 80182be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 80182c2:	4b5f      	ldr	r3, [pc, #380]	; (8018440 <input_parameter+0xb98>)
 80182c4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80182c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 80182cc:	4b5c      	ldr	r3, [pc, #368]	; (8018440 <input_parameter+0xb98>)
 80182ce:	4a68      	ldr	r2, [pc, #416]	; (8018470 <input_parameter+0xbc8>)
 80182d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 80182d4:	4b5a      	ldr	r3, [pc, #360]	; (8018440 <input_parameter+0xb98>)
 80182d6:	4a5b      	ldr	r2, [pc, #364]	; (8018444 <input_parameter+0xb9c>)
 80182d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 80182dc:	4b58      	ldr	r3, [pc, #352]	; (8018440 <input_parameter+0xb98>)
 80182de:	4a63      	ldr	r2, [pc, #396]	; (801846c <input_parameter+0xbc4>)
 80182e0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 80182e4:	4b56      	ldr	r3, [pc, #344]	; (8018440 <input_parameter+0xb98>)
 80182e6:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80182ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 80182ee:	4b54      	ldr	r3, [pc, #336]	; (8018440 <input_parameter+0xb98>)
 80182f0:	4a5f      	ldr	r2, [pc, #380]	; (8018470 <input_parameter+0xbc8>)
 80182f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 80182f6:	4b52      	ldr	r3, [pc, #328]	; (8018440 <input_parameter+0xb98>)
 80182f8:	4a52      	ldr	r2, [pc, #328]	; (8018444 <input_parameter+0xb9c>)
 80182fa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 80182fe:	4b50      	ldr	r3, [pc, #320]	; (8018440 <input_parameter+0xb98>)
 8018300:	4a5c      	ldr	r2, [pc, #368]	; (8018474 <input_parameter+0xbcc>)
 8018302:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 8018306:	4b4e      	ldr	r3, [pc, #312]	; (8018440 <input_parameter+0xb98>)
 8018308:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801830c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 8018310:	4b4b      	ldr	r3, [pc, #300]	; (8018440 <input_parameter+0xb98>)
 8018312:	4a42      	ldr	r2, [pc, #264]	; (801841c <input_parameter+0xb74>)
 8018314:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 8018318:	4b49      	ldr	r3, [pc, #292]	; (8018440 <input_parameter+0xb98>)
 801831a:	4a4a      	ldr	r2, [pc, #296]	; (8018444 <input_parameter+0xb9c>)
 801831c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 8018320:	4b47      	ldr	r3, [pc, #284]	; (8018440 <input_parameter+0xb98>)
 8018322:	4a54      	ldr	r2, [pc, #336]	; (8018474 <input_parameter+0xbcc>)
 8018324:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 8018328:	4b45      	ldr	r3, [pc, #276]	; (8018440 <input_parameter+0xb98>)
 801832a:	4a4f      	ldr	r2, [pc, #316]	; (8018468 <input_parameter+0xbc0>)
 801832c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 8018330:	4b43      	ldr	r3, [pc, #268]	; (8018440 <input_parameter+0xb98>)
 8018332:	4a49      	ldr	r2, [pc, #292]	; (8018458 <input_parameter+0xbb0>)
 8018334:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 8018338:	4b41      	ldr	r3, [pc, #260]	; (8018440 <input_parameter+0xb98>)
 801833a:	4a42      	ldr	r2, [pc, #264]	; (8018444 <input_parameter+0xb9c>)
 801833c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 8018340:	4b3f      	ldr	r3, [pc, #252]	; (8018440 <input_parameter+0xb98>)
 8018342:	4a4d      	ldr	r2, [pc, #308]	; (8018478 <input_parameter+0xbd0>)
 8018344:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 8018348:	4b3d      	ldr	r3, [pc, #244]	; (8018440 <input_parameter+0xb98>)
 801834a:	4a4c      	ldr	r2, [pc, #304]	; (801847c <input_parameter+0xbd4>)
 801834c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 8018350:	4b3b      	ldr	r3, [pc, #236]	; (8018440 <input_parameter+0xb98>)
 8018352:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018356:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 801835a:	4b39      	ldr	r3, [pc, #228]	; (8018440 <input_parameter+0xb98>)
 801835c:	4a39      	ldr	r2, [pc, #228]	; (8018444 <input_parameter+0xb9c>)
 801835e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 8018362:	4b37      	ldr	r3, [pc, #220]	; (8018440 <input_parameter+0xb98>)
 8018364:	4a44      	ldr	r2, [pc, #272]	; (8018478 <input_parameter+0xbd0>)
 8018366:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 801836a:	4b35      	ldr	r3, [pc, #212]	; (8018440 <input_parameter+0xb98>)
 801836c:	4a44      	ldr	r2, [pc, #272]	; (8018480 <input_parameter+0xbd8>)
 801836e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 8018372:	4b33      	ldr	r3, [pc, #204]	; (8018440 <input_parameter+0xb98>)
 8018374:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018378:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 801837c:	4b30      	ldr	r3, [pc, #192]	; (8018440 <input_parameter+0xb98>)
 801837e:	4a31      	ldr	r2, [pc, #196]	; (8018444 <input_parameter+0xb9c>)
 8018380:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 8018384:	4b2e      	ldr	r3, [pc, #184]	; (8018440 <input_parameter+0xb98>)
 8018386:	4a3b      	ldr	r2, [pc, #236]	; (8018474 <input_parameter+0xbcc>)
 8018388:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 801838c:	4b2c      	ldr	r3, [pc, #176]	; (8018440 <input_parameter+0xb98>)
 801838e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018392:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 8018396:	4b2a      	ldr	r3, [pc, #168]	; (8018440 <input_parameter+0xb98>)
 8018398:	4a24      	ldr	r2, [pc, #144]	; (801842c <input_parameter+0xb84>)
 801839a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 801839e:	4b28      	ldr	r3, [pc, #160]	; (8018440 <input_parameter+0xb98>)
 80183a0:	4a28      	ldr	r2, [pc, #160]	; (8018444 <input_parameter+0xb9c>)
 80183a2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 80183a6:	4b26      	ldr	r3, [pc, #152]	; (8018440 <input_parameter+0xb98>)
 80183a8:	4a32      	ldr	r2, [pc, #200]	; (8018474 <input_parameter+0xbcc>)
 80183aa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 80183ae:	4b24      	ldr	r3, [pc, #144]	; (8018440 <input_parameter+0xb98>)
 80183b0:	4a1d      	ldr	r2, [pc, #116]	; (8018428 <input_parameter+0xb80>)
 80183b2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 80183b6:	4b22      	ldr	r3, [pc, #136]	; (8018440 <input_parameter+0xb98>)
 80183b8:	4a1c      	ldr	r2, [pc, #112]	; (801842c <input_parameter+0xb84>)
 80183ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 80183be:	4b20      	ldr	r3, [pc, #128]	; (8018440 <input_parameter+0xb98>)
 80183c0:	4a20      	ldr	r2, [pc, #128]	; (8018444 <input_parameter+0xb9c>)
 80183c2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 80183c6:	4b1e      	ldr	r3, [pc, #120]	; (8018440 <input_parameter+0xb98>)
 80183c8:	4a2e      	ldr	r2, [pc, #184]	; (8018484 <input_parameter+0xbdc>)
 80183ca:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 80183ce:	4b1c      	ldr	r3, [pc, #112]	; (8018440 <input_parameter+0xb98>)
 80183d0:	4a1a      	ldr	r2, [pc, #104]	; (801843c <input_parameter+0xb94>)
 80183d2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 25;
 80183d6:	4b1a      	ldr	r3, [pc, #104]	; (8018440 <input_parameter+0xb98>)
 80183d8:	4a20      	ldr	r2, [pc, #128]	; (801845c <input_parameter+0xbb4>)
 80183da:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 80183de:	4b18      	ldr	r3, [pc, #96]	; (8018440 <input_parameter+0xb98>)
 80183e0:	4a18      	ldr	r2, [pc, #96]	; (8018444 <input_parameter+0xb9c>)
 80183e2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 80183e6:	4b16      	ldr	r3, [pc, #88]	; (8018440 <input_parameter+0xb98>)
 80183e8:	4a26      	ldr	r2, [pc, #152]	; (8018484 <input_parameter+0xbdc>)
 80183ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 80183ee:	4b14      	ldr	r3, [pc, #80]	; (8018440 <input_parameter+0xb98>)
 80183f0:	4a25      	ldr	r2, [pc, #148]	; (8018488 <input_parameter+0xbe0>)
 80183f2:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 25;
 80183f6:	4b12      	ldr	r3, [pc, #72]	; (8018440 <input_parameter+0xb98>)
 80183f8:	4a18      	ldr	r2, [pc, #96]	; (801845c <input_parameter+0xbb4>)
 80183fa:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 80183fe:	4b23      	ldr	r3, [pc, #140]	; (801848c <input_parameter+0xbe4>)
 8018400:	4a23      	ldr	r2, [pc, #140]	; (8018490 <input_parameter+0xbe8>)
 8018402:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 8018404:	4b21      	ldr	r3, [pc, #132]	; (801848c <input_parameter+0xbe4>)
 8018406:	4a22      	ldr	r2, [pc, #136]	; (8018490 <input_parameter+0xbe8>)
 8018408:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 801840a:	4b20      	ldr	r3, [pc, #128]	; (801848c <input_parameter+0xbe4>)
 801840c:	4a20      	ldr	r2, [pc, #128]	; (8018490 <input_parameter+0xbe8>)
 801840e:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 8018410:	4b1e      	ldr	r3, [pc, #120]	; (801848c <input_parameter+0xbe4>)
 8018412:	4a20      	ldr	r2, [pc, #128]	; (8018494 <input_parameter+0xbec>)
 8018414:	63da      	str	r2, [r3, #60]	; 0x3c
 8018416:	e03f      	b.n	8018498 <input_parameter+0xbf0>
 8018418:	2000f494 	.word	0x2000f494
 801841c:	41b00000 	.word	0x41b00000
 8018420:	447a0000 	.word	0x447a0000
 8018424:	44cf8000 	.word	0x44cf8000
 8018428:	41200000 	.word	0x41200000
 801842c:	41f00000 	.word	0x41f00000
 8018430:	44dac000 	.word	0x44dac000
 8018434:	41840000 	.word	0x41840000
 8018438:	41a80000 	.word	0x41a80000
 801843c:	41600000 	.word	0x41600000
 8018440:	2000f5dc 	.word	0x2000f5dc
 8018444:	44960000 	.word	0x44960000
 8018448:	44898000 	.word	0x44898000
 801844c:	40a00000 	.word	0x40a00000
 8018450:	41e00000 	.word	0x41e00000
 8018454:	44bcc000 	.word	0x44bcc000
 8018458:	41a00000 	.word	0x41a00000
 801845c:	41c80000 	.word	0x41c80000
 8018460:	44ce4000 	.word	0x44ce4000
 8018464:	41880000 	.word	0x41880000
 8018468:	41700000 	.word	0x41700000
 801846c:	44c1c000 	.word	0x44c1c000
 8018470:	421c0000 	.word	0x421c0000
 8018474:	44e74000 	.word	0x44e74000
 8018478:	44af0000 	.word	0x44af0000
 801847c:	42040000 	.word	0x42040000
 8018480:	41c00000 	.word	0x41c00000
 8018484:	44f3c000 	.word	0x44f3c000
 8018488:	41080000 	.word	0x41080000
 801848c:	2000f724 	.word	0x2000f724
 8018490:	44bb8000 	.word	0x44bb8000
 8018494:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 8018498:	4b67      	ldr	r3, [pc, #412]	; (8018638 <input_parameter+0xd90>)
 801849a:	4a68      	ldr	r2, [pc, #416]	; (801863c <input_parameter+0xd94>)
 801849c:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 801849e:	4b66      	ldr	r3, [pc, #408]	; (8018638 <input_parameter+0xd90>)
 80184a0:	4a67      	ldr	r2, [pc, #412]	; (8018640 <input_parameter+0xd98>)
 80184a2:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 80184a4:	4b64      	ldr	r3, [pc, #400]	; (8018638 <input_parameter+0xd90>)
 80184a6:	4a67      	ldr	r2, [pc, #412]	; (8018644 <input_parameter+0xd9c>)
 80184a8:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 80184aa:	4b63      	ldr	r3, [pc, #396]	; (8018638 <input_parameter+0xd90>)
 80184ac:	4a66      	ldr	r2, [pc, #408]	; (8018648 <input_parameter+0xda0>)
 80184ae:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 80184b0:	4b61      	ldr	r3, [pc, #388]	; (8018638 <input_parameter+0xd90>)
 80184b2:	4a66      	ldr	r2, [pc, #408]	; (801864c <input_parameter+0xda4>)
 80184b4:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 80184b6:	4b60      	ldr	r3, [pc, #384]	; (8018638 <input_parameter+0xd90>)
 80184b8:	4a65      	ldr	r2, [pc, #404]	; (8018650 <input_parameter+0xda8>)
 80184ba:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 80184bc:	4b5e      	ldr	r3, [pc, #376]	; (8018638 <input_parameter+0xd90>)
 80184be:	4a61      	ldr	r2, [pc, #388]	; (8018644 <input_parameter+0xd9c>)
 80184c0:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 80184c2:	4b5d      	ldr	r3, [pc, #372]	; (8018638 <input_parameter+0xd90>)
 80184c4:	4a63      	ldr	r2, [pc, #396]	; (8018654 <input_parameter+0xdac>)
 80184c6:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 80184c8:	4b5b      	ldr	r3, [pc, #364]	; (8018638 <input_parameter+0xd90>)
 80184ca:	4a63      	ldr	r2, [pc, #396]	; (8018658 <input_parameter+0xdb0>)
 80184cc:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 80184ce:	4b5a      	ldr	r3, [pc, #360]	; (8018638 <input_parameter+0xd90>)
 80184d0:	4a62      	ldr	r2, [pc, #392]	; (801865c <input_parameter+0xdb4>)
 80184d2:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 80184d4:	4b58      	ldr	r3, [pc, #352]	; (8018638 <input_parameter+0xd90>)
 80184d6:	4a5b      	ldr	r2, [pc, #364]	; (8018644 <input_parameter+0xd9c>)
 80184d8:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 80184da:	4b57      	ldr	r3, [pc, #348]	; (8018638 <input_parameter+0xd90>)
 80184dc:	4a5d      	ldr	r2, [pc, #372]	; (8018654 <input_parameter+0xdac>)
 80184de:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 80184e0:	4b55      	ldr	r3, [pc, #340]	; (8018638 <input_parameter+0xd90>)
 80184e2:	4a5d      	ldr	r2, [pc, #372]	; (8018658 <input_parameter+0xdb0>)
 80184e4:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 80184e6:	4b54      	ldr	r3, [pc, #336]	; (8018638 <input_parameter+0xd90>)
 80184e8:	4a5d      	ldr	r2, [pc, #372]	; (8018660 <input_parameter+0xdb8>)
 80184ea:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 80184ec:	4b52      	ldr	r3, [pc, #328]	; (8018638 <input_parameter+0xd90>)
 80184ee:	4a55      	ldr	r2, [pc, #340]	; (8018644 <input_parameter+0xd9c>)
 80184f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 80184f4:	4b50      	ldr	r3, [pc, #320]	; (8018638 <input_parameter+0xd90>)
 80184f6:	4a5b      	ldr	r2, [pc, #364]	; (8018664 <input_parameter+0xdbc>)
 80184f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 80184fc:	4b4e      	ldr	r3, [pc, #312]	; (8018638 <input_parameter+0xd90>)
 80184fe:	4a5a      	ldr	r2, [pc, #360]	; (8018668 <input_parameter+0xdc0>)
 8018500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018504:	4b4c      	ldr	r3, [pc, #304]	; (8018638 <input_parameter+0xd90>)
 8018506:	4a59      	ldr	r2, [pc, #356]	; (801866c <input_parameter+0xdc4>)
 8018508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 801850c:	4b4a      	ldr	r3, [pc, #296]	; (8018638 <input_parameter+0xd90>)
 801850e:	4a4d      	ldr	r2, [pc, #308]	; (8018644 <input_parameter+0xd9c>)
 8018510:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 8018514:	4b48      	ldr	r3, [pc, #288]	; (8018638 <input_parameter+0xd90>)
 8018516:	4a53      	ldr	r2, [pc, #332]	; (8018664 <input_parameter+0xdbc>)
 8018518:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 801851c:	4b46      	ldr	r3, [pc, #280]	; (8018638 <input_parameter+0xd90>)
 801851e:	4a52      	ldr	r2, [pc, #328]	; (8018668 <input_parameter+0xdc0>)
 8018520:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018524:	4b44      	ldr	r3, [pc, #272]	; (8018638 <input_parameter+0xd90>)
 8018526:	4a52      	ldr	r2, [pc, #328]	; (8018670 <input_parameter+0xdc8>)
 8018528:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 801852c:	4b42      	ldr	r3, [pc, #264]	; (8018638 <input_parameter+0xd90>)
 801852e:	4a45      	ldr	r2, [pc, #276]	; (8018644 <input_parameter+0xd9c>)
 8018530:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 8018534:	4b40      	ldr	r3, [pc, #256]	; (8018638 <input_parameter+0xd90>)
 8018536:	4a4f      	ldr	r2, [pc, #316]	; (8018674 <input_parameter+0xdcc>)
 8018538:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 801853c:	4b3e      	ldr	r3, [pc, #248]	; (8018638 <input_parameter+0xd90>)
 801853e:	4a4e      	ldr	r2, [pc, #312]	; (8018678 <input_parameter+0xdd0>)
 8018540:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018544:	4b3c      	ldr	r3, [pc, #240]	; (8018638 <input_parameter+0xd90>)
 8018546:	4a4a      	ldr	r2, [pc, #296]	; (8018670 <input_parameter+0xdc8>)
 8018548:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 801854c:	4b3a      	ldr	r3, [pc, #232]	; (8018638 <input_parameter+0xd90>)
 801854e:	4a3d      	ldr	r2, [pc, #244]	; (8018644 <input_parameter+0xd9c>)
 8018550:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 8018554:	4b38      	ldr	r3, [pc, #224]	; (8018638 <input_parameter+0xd90>)
 8018556:	4a47      	ldr	r2, [pc, #284]	; (8018674 <input_parameter+0xdcc>)
 8018558:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 801855c:	4b36      	ldr	r3, [pc, #216]	; (8018638 <input_parameter+0xd90>)
 801855e:	4a46      	ldr	r2, [pc, #280]	; (8018678 <input_parameter+0xdd0>)
 8018560:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018564:	4b34      	ldr	r3, [pc, #208]	; (8018638 <input_parameter+0xd90>)
 8018566:	4a45      	ldr	r2, [pc, #276]	; (801867c <input_parameter+0xdd4>)
 8018568:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 801856c:	4b32      	ldr	r3, [pc, #200]	; (8018638 <input_parameter+0xd90>)
 801856e:	4a35      	ldr	r2, [pc, #212]	; (8018644 <input_parameter+0xd9c>)
 8018570:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 8018574:	4b30      	ldr	r3, [pc, #192]	; (8018638 <input_parameter+0xd90>)
 8018576:	4a42      	ldr	r2, [pc, #264]	; (8018680 <input_parameter+0xdd8>)
 8018578:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 801857c:	4b2e      	ldr	r3, [pc, #184]	; (8018638 <input_parameter+0xd90>)
 801857e:	4a41      	ldr	r2, [pc, #260]	; (8018684 <input_parameter+0xddc>)
 8018580:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018584:	4b2c      	ldr	r3, [pc, #176]	; (8018638 <input_parameter+0xd90>)
 8018586:	4a40      	ldr	r2, [pc, #256]	; (8018688 <input_parameter+0xde0>)
 8018588:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 801858c:	4b2a      	ldr	r3, [pc, #168]	; (8018638 <input_parameter+0xd90>)
 801858e:	4a2d      	ldr	r2, [pc, #180]	; (8018644 <input_parameter+0xd9c>)
 8018590:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 8018594:	4b28      	ldr	r3, [pc, #160]	; (8018638 <input_parameter+0xd90>)
 8018596:	4a3a      	ldr	r2, [pc, #232]	; (8018680 <input_parameter+0xdd8>)
 8018598:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 801859c:	4b26      	ldr	r3, [pc, #152]	; (8018638 <input_parameter+0xd90>)
 801859e:	4a30      	ldr	r2, [pc, #192]	; (8018660 <input_parameter+0xdb8>)
 80185a0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80185a4:	4b24      	ldr	r3, [pc, #144]	; (8018638 <input_parameter+0xd90>)
 80185a6:	4a39      	ldr	r2, [pc, #228]	; (801868c <input_parameter+0xde4>)
 80185a8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 80185ac:	4b22      	ldr	r3, [pc, #136]	; (8018638 <input_parameter+0xd90>)
 80185ae:	4a25      	ldr	r2, [pc, #148]	; (8018644 <input_parameter+0xd9c>)
 80185b0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 80185b4:	4b20      	ldr	r3, [pc, #128]	; (8018638 <input_parameter+0xd90>)
 80185b6:	4a36      	ldr	r2, [pc, #216]	; (8018690 <input_parameter+0xde8>)
 80185b8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 80185bc:	4b1e      	ldr	r3, [pc, #120]	; (8018638 <input_parameter+0xd90>)
 80185be:	4a35      	ldr	r2, [pc, #212]	; (8018694 <input_parameter+0xdec>)
 80185c0:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 80185c4:	4b1c      	ldr	r3, [pc, #112]	; (8018638 <input_parameter+0xd90>)
 80185c6:	4a30      	ldr	r2, [pc, #192]	; (8018688 <input_parameter+0xde0>)
 80185c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 80185cc:	4b1a      	ldr	r3, [pc, #104]	; (8018638 <input_parameter+0xd90>)
 80185ce:	4a1d      	ldr	r2, [pc, #116]	; (8018644 <input_parameter+0xd9c>)
 80185d0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 80185d4:	4b18      	ldr	r3, [pc, #96]	; (8018638 <input_parameter+0xd90>)
 80185d6:	4a2e      	ldr	r2, [pc, #184]	; (8018690 <input_parameter+0xde8>)
 80185d8:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 80185dc:	4b16      	ldr	r3, [pc, #88]	; (8018638 <input_parameter+0xd90>)
 80185de:	4a2d      	ldr	r2, [pc, #180]	; (8018694 <input_parameter+0xdec>)
 80185e0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 80185e4:	4b14      	ldr	r3, [pc, #80]	; (8018638 <input_parameter+0xd90>)
 80185e6:	4a2c      	ldr	r2, [pc, #176]	; (8018698 <input_parameter+0xdf0>)
 80185e8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 80185ec:	4b12      	ldr	r3, [pc, #72]	; (8018638 <input_parameter+0xd90>)
 80185ee:	4a15      	ldr	r2, [pc, #84]	; (8018644 <input_parameter+0xd9c>)
 80185f0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 80185f4:	4b10      	ldr	r3, [pc, #64]	; (8018638 <input_parameter+0xd90>)
 80185f6:	4a29      	ldr	r2, [pc, #164]	; (801869c <input_parameter+0xdf4>)
 80185f8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 80185fc:	4b0e      	ldr	r3, [pc, #56]	; (8018638 <input_parameter+0xd90>)
 80185fe:	4a28      	ldr	r2, [pc, #160]	; (80186a0 <input_parameter+0xdf8>)
 8018600:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 8018604:	4b0c      	ldr	r3, [pc, #48]	; (8018638 <input_parameter+0xd90>)
 8018606:	4a15      	ldr	r2, [pc, #84]	; (801865c <input_parameter+0xdb4>)
 8018608:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 801860c:	4b0a      	ldr	r3, [pc, #40]	; (8018638 <input_parameter+0xd90>)
 801860e:	4a0d      	ldr	r2, [pc, #52]	; (8018644 <input_parameter+0xd9c>)
 8018610:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 8018614:	4b08      	ldr	r3, [pc, #32]	; (8018638 <input_parameter+0xd90>)
 8018616:	4a21      	ldr	r2, [pc, #132]	; (801869c <input_parameter+0xdf4>)
 8018618:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 801861c:	4b06      	ldr	r3, [pc, #24]	; (8018638 <input_parameter+0xd90>)
 801861e:	4a20      	ldr	r2, [pc, #128]	; (80186a0 <input_parameter+0xdf8>)
 8018620:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 8018624:	4b04      	ldr	r3, [pc, #16]	; (8018638 <input_parameter+0xd90>)
 8018626:	4a0d      	ldr	r2, [pc, #52]	; (801865c <input_parameter+0xdb4>)
 8018628:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 801862c:	bf00      	nop
 801862e:	46bd      	mov	sp, r7
 8018630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018634:	4770      	bx	lr
 8018636:	bf00      	nop
 8018638:	2000f724 	.word	0x2000f724
 801863c:	41880000 	.word	0x41880000
 8018640:	41f80000 	.word	0x41f80000
 8018644:	44bb8000 	.word	0x44bb8000
 8018648:	44e4c000 	.word	0x44e4c000
 801864c:	41700000 	.word	0x41700000
 8018650:	420c0000 	.word	0x420c0000
 8018654:	44fa0000 	.word	0x44fa0000
 8018658:	41200000 	.word	0x41200000
 801865c:	41a00000 	.word	0x41a00000
 8018660:	41900000 	.word	0x41900000
 8018664:	44e74000 	.word	0x44e74000
 8018668:	41400000 	.word	0x41400000
 801866c:	42180000 	.word	0x42180000
 8018670:	42100000 	.word	0x42100000
 8018674:	45034000 	.word	0x45034000
 8018678:	41500000 	.word	0x41500000
 801867c:	42080000 	.word	0x42080000
 8018680:	44e10000 	.word	0x44e10000
 8018684:	41a80000 	.word	0x41a80000
 8018688:	41b00000 	.word	0x41b00000
 801868c:	41c00000 	.word	0x41c00000
 8018690:	45098000 	.word	0x45098000
 8018694:	40e00000 	.word	0x40e00000
 8018698:	41f00000 	.word	0x41f00000
 801869c:	45066000 	.word	0x45066000
 80186a0:	40400000 	.word	0x40400000

080186a4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80186a4:	b580      	push	{r7, lr}
 80186a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80186a8:	4b22      	ldr	r3, [pc, #136]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186aa:	4a23      	ldr	r2, [pc, #140]	; (8018738 <MX_USART1_UART_Init+0x94>)
 80186ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80186ae:	4b21      	ldr	r3, [pc, #132]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80186b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80186b6:	4b1f      	ldr	r3, [pc, #124]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186b8:	2200      	movs	r2, #0
 80186ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80186bc:	4b1d      	ldr	r3, [pc, #116]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186be:	2200      	movs	r2, #0
 80186c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80186c2:	4b1c      	ldr	r3, [pc, #112]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186c4:	2200      	movs	r2, #0
 80186c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80186c8:	4b1a      	ldr	r3, [pc, #104]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186ca:	220c      	movs	r2, #12
 80186cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80186ce:	4b19      	ldr	r3, [pc, #100]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186d0:	2200      	movs	r2, #0
 80186d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80186d4:	4b17      	ldr	r3, [pc, #92]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186d6:	2200      	movs	r2, #0
 80186d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80186da:	4b16      	ldr	r3, [pc, #88]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186dc:	2200      	movs	r2, #0
 80186de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80186e0:	4b14      	ldr	r3, [pc, #80]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186e2:	2200      	movs	r2, #0
 80186e4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80186e6:	4b13      	ldr	r3, [pc, #76]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186e8:	2200      	movs	r2, #0
 80186ea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80186ec:	4811      	ldr	r0, [pc, #68]	; (8018734 <MX_USART1_UART_Init+0x90>)
 80186ee:	f006 fd2d 	bl	801f14c <HAL_UART_Init>
 80186f2:	4603      	mov	r3, r0
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d001      	beq.n	80186fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80186f8:	f7f1 f9bd 	bl	8009a76 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80186fc:	2100      	movs	r1, #0
 80186fe:	480d      	ldr	r0, [pc, #52]	; (8018734 <MX_USART1_UART_Init+0x90>)
 8018700:	f007 faf4 	bl	801fcec <HAL_UARTEx_SetTxFifoThreshold>
 8018704:	4603      	mov	r3, r0
 8018706:	2b00      	cmp	r3, #0
 8018708:	d001      	beq.n	801870e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801870a:	f7f1 f9b4 	bl	8009a76 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801870e:	2100      	movs	r1, #0
 8018710:	4808      	ldr	r0, [pc, #32]	; (8018734 <MX_USART1_UART_Init+0x90>)
 8018712:	f007 fb29 	bl	801fd68 <HAL_UARTEx_SetRxFifoThreshold>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 801871c:	f7f1 f9ab 	bl	8009a76 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8018720:	4804      	ldr	r0, [pc, #16]	; (8018734 <MX_USART1_UART_Init+0x90>)
 8018722:	f007 faaa 	bl	801fc7a <HAL_UARTEx_DisableFifoMode>
 8018726:	4603      	mov	r3, r0
 8018728:	2b00      	cmp	r3, #0
 801872a:	d001      	beq.n	8018730 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 801872c:	f7f1 f9a3 	bl	8009a76 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8018730:	bf00      	nop
 8018732:	bd80      	pop	{r7, pc}
 8018734:	2000f86c 	.word	0x2000f86c
 8018738:	40013800 	.word	0x40013800

0801873c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b09e      	sub	sp, #120	; 0x78
 8018740:	af00      	add	r7, sp, #0
 8018742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018744:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018748:	2200      	movs	r2, #0
 801874a:	601a      	str	r2, [r3, #0]
 801874c:	605a      	str	r2, [r3, #4]
 801874e:	609a      	str	r2, [r3, #8]
 8018750:	60da      	str	r2, [r3, #12]
 8018752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018754:	f107 0314 	add.w	r3, r7, #20
 8018758:	2250      	movs	r2, #80	; 0x50
 801875a:	2100      	movs	r1, #0
 801875c:	4618      	mov	r0, r3
 801875e:	f007 fbc7 	bl	801fef0 <memset>
  if(uartHandle->Instance==USART1)
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	4a1f      	ldr	r2, [pc, #124]	; (80187e4 <HAL_UART_MspInit+0xa8>)
 8018768:	4293      	cmp	r3, r2
 801876a:	d137      	bne.n	80187dc <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801876c:	2301      	movs	r3, #1
 801876e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018770:	2300      	movs	r3, #0
 8018772:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018774:	f107 0314 	add.w	r3, r7, #20
 8018778:	4618      	mov	r0, r3
 801877a:	f004 f891 	bl	801c8a0 <HAL_RCCEx_PeriphCLKConfig>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d001      	beq.n	8018788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018784:	f7f1 f977 	bl	8009a76 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018788:	4b17      	ldr	r3, [pc, #92]	; (80187e8 <HAL_UART_MspInit+0xac>)
 801878a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801878c:	4a16      	ldr	r2, [pc, #88]	; (80187e8 <HAL_UART_MspInit+0xac>)
 801878e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018792:	6613      	str	r3, [r2, #96]	; 0x60
 8018794:	4b14      	ldr	r3, [pc, #80]	; (80187e8 <HAL_UART_MspInit+0xac>)
 8018796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801879c:	613b      	str	r3, [r7, #16]
 801879e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80187a0:	4b11      	ldr	r3, [pc, #68]	; (80187e8 <HAL_UART_MspInit+0xac>)
 80187a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80187a4:	4a10      	ldr	r2, [pc, #64]	; (80187e8 <HAL_UART_MspInit+0xac>)
 80187a6:	f043 0301 	orr.w	r3, r3, #1
 80187aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80187ac:	4b0e      	ldr	r3, [pc, #56]	; (80187e8 <HAL_UART_MspInit+0xac>)
 80187ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80187b0:	f003 0301 	and.w	r3, r3, #1
 80187b4:	60fb      	str	r3, [r7, #12]
 80187b6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80187b8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80187bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187be:	2302      	movs	r3, #2
 80187c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187c2:	2300      	movs	r3, #0
 80187c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80187c6:	2300      	movs	r3, #0
 80187c8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80187ca:	2307      	movs	r3, #7
 80187cc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80187ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80187d2:	4619      	mov	r1, r3
 80187d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80187d8:	f003 f8e4 	bl	801b9a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80187dc:	bf00      	nop
 80187de:	3778      	adds	r7, #120	; 0x78
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd80      	pop	{r7, pc}
 80187e4:	40013800 	.word	0x40013800
 80187e8:	40021000 	.word	0x40021000

080187ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80187ec:	480d      	ldr	r0, [pc, #52]	; (8018824 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80187ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80187f0:	480d      	ldr	r0, [pc, #52]	; (8018828 <LoopForever+0x6>)
  ldr r1, =_edata
 80187f2:	490e      	ldr	r1, [pc, #56]	; (801882c <LoopForever+0xa>)
  ldr r2, =_sidata
 80187f4:	4a0e      	ldr	r2, [pc, #56]	; (8018830 <LoopForever+0xe>)
  movs r3, #0
 80187f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80187f8:	e002      	b.n	8018800 <LoopCopyDataInit>

080187fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80187fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80187fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80187fe:	3304      	adds	r3, #4

08018800 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018800:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018802:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018804:	d3f9      	bcc.n	80187fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018806:	4a0b      	ldr	r2, [pc, #44]	; (8018834 <LoopForever+0x12>)
  ldr r4, =_ebss
 8018808:	4c0b      	ldr	r4, [pc, #44]	; (8018838 <LoopForever+0x16>)
  movs r3, #0
 801880a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801880c:	e001      	b.n	8018812 <LoopFillZerobss>

0801880e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801880e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018810:	3204      	adds	r2, #4

08018812 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018812:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018814:	d3fb      	bcc.n	801880e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8018816:	f7fe fd7f 	bl	8017318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801881a:	f007 fb37 	bl	801fe8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801881e:	f7f1 f82f 	bl	8009880 <main>

08018822 <LoopForever>:

LoopForever:
    b LoopForever
 8018822:	e7fe      	b.n	8018822 <LoopForever>
  ldr   r0, =_estack
 8018824:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8018828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801882c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8018830:	08024a68 	.word	0x08024a68
  ldr r2, =_sbss
 8018834:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8018838:	2000f910 	.word	0x2000f910

0801883c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801883c:	e7fe      	b.n	801883c <ADC3_IRQHandler>
	...

08018840 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b082      	sub	sp, #8
 8018844:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018846:	2300      	movs	r3, #0
 8018848:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801884a:	4b0c      	ldr	r3, [pc, #48]	; (801887c <HAL_Init+0x3c>)
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	4a0b      	ldr	r2, [pc, #44]	; (801887c <HAL_Init+0x3c>)
 8018850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018854:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018856:	2003      	movs	r0, #3
 8018858:	f002 fb30 	bl	801aebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801885c:	2000      	movs	r0, #0
 801885e:	f000 f80f 	bl	8018880 <HAL_InitTick>
 8018862:	4603      	mov	r3, r0
 8018864:	2b00      	cmp	r3, #0
 8018866:	d002      	beq.n	801886e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018868:	2301      	movs	r3, #1
 801886a:	71fb      	strb	r3, [r7, #7]
 801886c:	e001      	b.n	8018872 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801886e:	f7fe fc07 	bl	8017080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018872:	79fb      	ldrb	r3, [r7, #7]

}
 8018874:	4618      	mov	r0, r3
 8018876:	3708      	adds	r7, #8
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	40022000 	.word	0x40022000

08018880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018880:	b580      	push	{r7, lr}
 8018882:	b084      	sub	sp, #16
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018888:	2300      	movs	r3, #0
 801888a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 801888c:	4b16      	ldr	r3, [pc, #88]	; (80188e8 <HAL_InitTick+0x68>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	2b00      	cmp	r3, #0
 8018892:	d022      	beq.n	80188da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8018894:	4b15      	ldr	r3, [pc, #84]	; (80188ec <HAL_InitTick+0x6c>)
 8018896:	681a      	ldr	r2, [r3, #0]
 8018898:	4b13      	ldr	r3, [pc, #76]	; (80188e8 <HAL_InitTick+0x68>)
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80188a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80188a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80188a8:	4618      	mov	r0, r3
 80188aa:	f002 fb3a 	bl	801af22 <HAL_SYSTICK_Config>
 80188ae:	4603      	mov	r3, r0
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d10f      	bne.n	80188d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2b0f      	cmp	r3, #15
 80188b8:	d809      	bhi.n	80188ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80188ba:	2200      	movs	r2, #0
 80188bc:	6879      	ldr	r1, [r7, #4]
 80188be:	f04f 30ff 	mov.w	r0, #4294967295
 80188c2:	f002 fb06 	bl	801aed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80188c6:	4a0a      	ldr	r2, [pc, #40]	; (80188f0 <HAL_InitTick+0x70>)
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6013      	str	r3, [r2, #0]
 80188cc:	e007      	b.n	80188de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80188ce:	2301      	movs	r3, #1
 80188d0:	73fb      	strb	r3, [r7, #15]
 80188d2:	e004      	b.n	80188de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80188d4:	2301      	movs	r3, #1
 80188d6:	73fb      	strb	r3, [r7, #15]
 80188d8:	e001      	b.n	80188de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80188da:	2301      	movs	r3, #1
 80188dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80188de:	7bfb      	ldrb	r3, [r7, #15]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3710      	adds	r7, #16
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}
 80188e8:	20000008 	.word	0x20000008
 80188ec:	20000000 	.word	0x20000000
 80188f0:	20000004 	.word	0x20000004

080188f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80188f4:	b480      	push	{r7}
 80188f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80188f8:	4b05      	ldr	r3, [pc, #20]	; (8018910 <HAL_IncTick+0x1c>)
 80188fa:	681a      	ldr	r2, [r3, #0]
 80188fc:	4b05      	ldr	r3, [pc, #20]	; (8018914 <HAL_IncTick+0x20>)
 80188fe:	681b      	ldr	r3, [r3, #0]
 8018900:	4413      	add	r3, r2
 8018902:	4a03      	ldr	r2, [pc, #12]	; (8018910 <HAL_IncTick+0x1c>)
 8018904:	6013      	str	r3, [r2, #0]
}
 8018906:	bf00      	nop
 8018908:	46bd      	mov	sp, r7
 801890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890e:	4770      	bx	lr
 8018910:	2000f8fc 	.word	0x2000f8fc
 8018914:	20000008 	.word	0x20000008

08018918 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018918:	b480      	push	{r7}
 801891a:	af00      	add	r7, sp, #0
  return uwTick;
 801891c:	4b03      	ldr	r3, [pc, #12]	; (801892c <HAL_GetTick+0x14>)
 801891e:	681b      	ldr	r3, [r3, #0]
}
 8018920:	4618      	mov	r0, r3
 8018922:	46bd      	mov	sp, r7
 8018924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018928:	4770      	bx	lr
 801892a:	bf00      	nop
 801892c:	2000f8fc 	.word	0x2000f8fc

08018930 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018930:	b580      	push	{r7, lr}
 8018932:	b084      	sub	sp, #16
 8018934:	af00      	add	r7, sp, #0
 8018936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018938:	f7ff ffee 	bl	8018918 <HAL_GetTick>
 801893c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018948:	d004      	beq.n	8018954 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801894a:	4b09      	ldr	r3, [pc, #36]	; (8018970 <HAL_Delay+0x40>)
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	68fa      	ldr	r2, [r7, #12]
 8018950:	4413      	add	r3, r2
 8018952:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018954:	bf00      	nop
 8018956:	f7ff ffdf 	bl	8018918 <HAL_GetTick>
 801895a:	4602      	mov	r2, r0
 801895c:	68bb      	ldr	r3, [r7, #8]
 801895e:	1ad3      	subs	r3, r2, r3
 8018960:	68fa      	ldr	r2, [r7, #12]
 8018962:	429a      	cmp	r2, r3
 8018964:	d8f7      	bhi.n	8018956 <HAL_Delay+0x26>
  {
  }
}
 8018966:	bf00      	nop
 8018968:	bf00      	nop
 801896a:	3710      	adds	r7, #16
 801896c:	46bd      	mov	sp, r7
 801896e:	bd80      	pop	{r7, pc}
 8018970:	20000008 	.word	0x20000008

08018974 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018974:	b480      	push	{r7}
 8018976:	b083      	sub	sp, #12
 8018978:	af00      	add	r7, sp, #0
 801897a:	6078      	str	r0, [r7, #4]
 801897c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	689b      	ldr	r3, [r3, #8]
 8018982:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018986:	683b      	ldr	r3, [r7, #0]
 8018988:	431a      	orrs	r2, r3
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	609a      	str	r2, [r3, #8]
}
 801898e:	bf00      	nop
 8018990:	370c      	adds	r7, #12
 8018992:	46bd      	mov	sp, r7
 8018994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018998:	4770      	bx	lr

0801899a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 801899a:	b480      	push	{r7}
 801899c:	b083      	sub	sp, #12
 801899e:	af00      	add	r7, sp, #0
 80189a0:	6078      	str	r0, [r7, #4]
 80189a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	689b      	ldr	r3, [r3, #8]
 80189a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80189ac:	683b      	ldr	r3, [r7, #0]
 80189ae:	431a      	orrs	r2, r3
 80189b0:	687b      	ldr	r3, [r7, #4]
 80189b2:	609a      	str	r2, [r3, #8]
}
 80189b4:	bf00      	nop
 80189b6:	370c      	adds	r7, #12
 80189b8:	46bd      	mov	sp, r7
 80189ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189be:	4770      	bx	lr

080189c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80189c0:	b480      	push	{r7}
 80189c2:	b083      	sub	sp, #12
 80189c4:	af00      	add	r7, sp, #0
 80189c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	689b      	ldr	r3, [r3, #8]
 80189cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80189d0:	4618      	mov	r0, r3
 80189d2:	370c      	adds	r7, #12
 80189d4:	46bd      	mov	sp, r7
 80189d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189da:	4770      	bx	lr

080189dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80189dc:	b480      	push	{r7}
 80189de:	b087      	sub	sp, #28
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	60f8      	str	r0, [r7, #12]
 80189e4:	60b9      	str	r1, [r7, #8]
 80189e6:	607a      	str	r2, [r7, #4]
 80189e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80189ea:	68fb      	ldr	r3, [r7, #12]
 80189ec:	3360      	adds	r3, #96	; 0x60
 80189ee:	461a      	mov	r2, r3
 80189f0:	68bb      	ldr	r3, [r7, #8]
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	4413      	add	r3, r2
 80189f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	681a      	ldr	r2, [r3, #0]
 80189fc:	4b08      	ldr	r3, [pc, #32]	; (8018a20 <LL_ADC_SetOffset+0x44>)
 80189fe:	4013      	ands	r3, r2
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018a06:	683a      	ldr	r2, [r7, #0]
 8018a08:	430a      	orrs	r2, r1
 8018a0a:	4313      	orrs	r3, r2
 8018a0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018a10:	697b      	ldr	r3, [r7, #20]
 8018a12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018a14:	bf00      	nop
 8018a16:	371c      	adds	r7, #28
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a1e:	4770      	bx	lr
 8018a20:	03fff000 	.word	0x03fff000

08018a24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018a24:	b480      	push	{r7}
 8018a26:	b085      	sub	sp, #20
 8018a28:	af00      	add	r7, sp, #0
 8018a2a:	6078      	str	r0, [r7, #4]
 8018a2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	3360      	adds	r3, #96	; 0x60
 8018a32:	461a      	mov	r2, r3
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	009b      	lsls	r3, r3, #2
 8018a38:	4413      	add	r3, r2
 8018a3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018a3c:	68fb      	ldr	r3, [r7, #12]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018a44:	4618      	mov	r0, r3
 8018a46:	3714      	adds	r7, #20
 8018a48:	46bd      	mov	sp, r7
 8018a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a4e:	4770      	bx	lr

08018a50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018a50:	b480      	push	{r7}
 8018a52:	b087      	sub	sp, #28
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	3360      	adds	r3, #96	; 0x60
 8018a60:	461a      	mov	r2, r3
 8018a62:	68bb      	ldr	r3, [r7, #8]
 8018a64:	009b      	lsls	r3, r3, #2
 8018a66:	4413      	add	r3, r2
 8018a68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018a6a:	697b      	ldr	r3, [r7, #20]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	431a      	orrs	r2, r3
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018a7a:	bf00      	nop
 8018a7c:	371c      	adds	r7, #28
 8018a7e:	46bd      	mov	sp, r7
 8018a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a84:	4770      	bx	lr

08018a86 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8018a86:	b480      	push	{r7}
 8018a88:	b087      	sub	sp, #28
 8018a8a:	af00      	add	r7, sp, #0
 8018a8c:	60f8      	str	r0, [r7, #12]
 8018a8e:	60b9      	str	r1, [r7, #8]
 8018a90:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	3360      	adds	r3, #96	; 0x60
 8018a96:	461a      	mov	r2, r3
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	009b      	lsls	r3, r3, #2
 8018a9c:	4413      	add	r3, r2
 8018a9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018aa0:	697b      	ldr	r3, [r7, #20]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	431a      	orrs	r2, r3
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8018ab0:	bf00      	nop
 8018ab2:	371c      	adds	r7, #28
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aba:	4770      	bx	lr

08018abc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8018abc:	b480      	push	{r7}
 8018abe:	b087      	sub	sp, #28
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	60f8      	str	r0, [r7, #12]
 8018ac4:	60b9      	str	r1, [r7, #8]
 8018ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	3360      	adds	r3, #96	; 0x60
 8018acc:	461a      	mov	r2, r3
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	009b      	lsls	r3, r3, #2
 8018ad2:	4413      	add	r3, r2
 8018ad4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018ad6:	697b      	ldr	r3, [r7, #20]
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	431a      	orrs	r2, r3
 8018ae2:	697b      	ldr	r3, [r7, #20]
 8018ae4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8018ae6:	bf00      	nop
 8018ae8:	371c      	adds	r7, #28
 8018aea:	46bd      	mov	sp, r7
 8018aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018af0:	4770      	bx	lr

08018af2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018af2:	b480      	push	{r7}
 8018af4:	b083      	sub	sp, #12
 8018af6:	af00      	add	r7, sp, #0
 8018af8:	6078      	str	r0, [r7, #4]
 8018afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	695b      	ldr	r3, [r3, #20]
 8018b00:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018b04:	683b      	ldr	r3, [r7, #0]
 8018b06:	431a      	orrs	r2, r3
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	615a      	str	r2, [r3, #20]
}
 8018b0c:	bf00      	nop
 8018b0e:	370c      	adds	r7, #12
 8018b10:	46bd      	mov	sp, r7
 8018b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b16:	4770      	bx	lr

08018b18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018b18:	b480      	push	{r7}
 8018b1a:	b083      	sub	sp, #12
 8018b1c:	af00      	add	r7, sp, #0
 8018b1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	68db      	ldr	r3, [r3, #12]
 8018b24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d101      	bne.n	8018b30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	e000      	b.n	8018b32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018b30:	2300      	movs	r3, #0
}
 8018b32:	4618      	mov	r0, r3
 8018b34:	370c      	adds	r7, #12
 8018b36:	46bd      	mov	sp, r7
 8018b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3c:	4770      	bx	lr

08018b3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018b3e:	b480      	push	{r7}
 8018b40:	b087      	sub	sp, #28
 8018b42:	af00      	add	r7, sp, #0
 8018b44:	60f8      	str	r0, [r7, #12]
 8018b46:	60b9      	str	r1, [r7, #8]
 8018b48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	3330      	adds	r3, #48	; 0x30
 8018b4e:	461a      	mov	r2, r3
 8018b50:	68bb      	ldr	r3, [r7, #8]
 8018b52:	0a1b      	lsrs	r3, r3, #8
 8018b54:	009b      	lsls	r3, r3, #2
 8018b56:	f003 030c 	and.w	r3, r3, #12
 8018b5a:	4413      	add	r3, r2
 8018b5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018b5e:	697b      	ldr	r3, [r7, #20]
 8018b60:	681a      	ldr	r2, [r3, #0]
 8018b62:	68bb      	ldr	r3, [r7, #8]
 8018b64:	f003 031f 	and.w	r3, r3, #31
 8018b68:	211f      	movs	r1, #31
 8018b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8018b6e:	43db      	mvns	r3, r3
 8018b70:	401a      	ands	r2, r3
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	0e9b      	lsrs	r3, r3, #26
 8018b76:	f003 011f 	and.w	r1, r3, #31
 8018b7a:	68bb      	ldr	r3, [r7, #8]
 8018b7c:	f003 031f 	and.w	r3, r3, #31
 8018b80:	fa01 f303 	lsl.w	r3, r1, r3
 8018b84:	431a      	orrs	r2, r3
 8018b86:	697b      	ldr	r3, [r7, #20]
 8018b88:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018b8a:	bf00      	nop
 8018b8c:	371c      	adds	r7, #28
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b94:	4770      	bx	lr

08018b96 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018b96:	b480      	push	{r7}
 8018b98:	b083      	sub	sp, #12
 8018b9a:	af00      	add	r7, sp, #0
 8018b9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018b9e:	687b      	ldr	r3, [r7, #4]
 8018ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ba2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d101      	bne.n	8018bae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018baa:	2301      	movs	r3, #1
 8018bac:	e000      	b.n	8018bb0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018bae:	2300      	movs	r3, #0
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	370c      	adds	r7, #12
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bba:	4770      	bx	lr

08018bbc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018bbc:	b480      	push	{r7}
 8018bbe:	b087      	sub	sp, #28
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	60f8      	str	r0, [r7, #12]
 8018bc4:	60b9      	str	r1, [r7, #8]
 8018bc6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	3314      	adds	r3, #20
 8018bcc:	461a      	mov	r2, r3
 8018bce:	68bb      	ldr	r3, [r7, #8]
 8018bd0:	0e5b      	lsrs	r3, r3, #25
 8018bd2:	009b      	lsls	r3, r3, #2
 8018bd4:	f003 0304 	and.w	r3, r3, #4
 8018bd8:	4413      	add	r3, r2
 8018bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018bdc:	697b      	ldr	r3, [r7, #20]
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	68bb      	ldr	r3, [r7, #8]
 8018be2:	0d1b      	lsrs	r3, r3, #20
 8018be4:	f003 031f 	and.w	r3, r3, #31
 8018be8:	2107      	movs	r1, #7
 8018bea:	fa01 f303 	lsl.w	r3, r1, r3
 8018bee:	43db      	mvns	r3, r3
 8018bf0:	401a      	ands	r2, r3
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	0d1b      	lsrs	r3, r3, #20
 8018bf6:	f003 031f 	and.w	r3, r3, #31
 8018bfa:	6879      	ldr	r1, [r7, #4]
 8018bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8018c00:	431a      	orrs	r2, r3
 8018c02:	697b      	ldr	r3, [r7, #20]
 8018c04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8018c06:	bf00      	nop
 8018c08:	371c      	adds	r7, #28
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c10:	4770      	bx	lr
	...

08018c14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8018c14:	b480      	push	{r7}
 8018c16:	b085      	sub	sp, #20
 8018c18:	af00      	add	r7, sp, #0
 8018c1a:	60f8      	str	r0, [r7, #12]
 8018c1c:	60b9      	str	r1, [r7, #8]
 8018c1e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	4a0f      	ldr	r2, [pc, #60]	; (8018c60 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8018c24:	4293      	cmp	r3, r2
 8018c26:	d10a      	bne.n	8018c3e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018c34:	431a      	orrs	r2, r3
 8018c36:	68fb      	ldr	r3, [r7, #12]
 8018c38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8018c3c:	e00a      	b.n	8018c54 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018c44:	68bb      	ldr	r3, [r7, #8]
 8018c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018c4a:	43db      	mvns	r3, r3
 8018c4c:	401a      	ands	r2, r3
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8018c54:	bf00      	nop
 8018c56:	3714      	adds	r7, #20
 8018c58:	46bd      	mov	sp, r7
 8018c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c5e:	4770      	bx	lr
 8018c60:	407f0000 	.word	0x407f0000

08018c64 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018c64:	b480      	push	{r7}
 8018c66:	b083      	sub	sp, #12
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	689b      	ldr	r3, [r3, #8]
 8018c70:	f003 031f 	and.w	r3, r3, #31
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	370c      	adds	r7, #12
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c7e:	4770      	bx	lr

08018c80 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018c80:	b480      	push	{r7}
 8018c82:	b083      	sub	sp, #12
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	370c      	adds	r7, #12
 8018c94:	46bd      	mov	sp, r7
 8018c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c9a:	4770      	bx	lr

08018c9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8018c9c:	b480      	push	{r7}
 8018c9e:	b083      	sub	sp, #12
 8018ca0:	af00      	add	r7, sp, #0
 8018ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	689b      	ldr	r3, [r3, #8]
 8018ca8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8018cac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018cb0:	687a      	ldr	r2, [r7, #4]
 8018cb2:	6093      	str	r3, [r2, #8]
}
 8018cb4:	bf00      	nop
 8018cb6:	370c      	adds	r7, #12
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cbe:	4770      	bx	lr

08018cc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b083      	sub	sp, #12
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	689b      	ldr	r3, [r3, #8]
 8018ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018cd4:	d101      	bne.n	8018cda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	e000      	b.n	8018cdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8018cda:	2300      	movs	r3, #0
}
 8018cdc:	4618      	mov	r0, r3
 8018cde:	370c      	adds	r7, #12
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ce6:	4770      	bx	lr

08018ce8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8018ce8:	b480      	push	{r7}
 8018cea:	b083      	sub	sp, #12
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	689b      	ldr	r3, [r3, #8]
 8018cf4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8018cf8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018cfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8018d04:	bf00      	nop
 8018d06:	370c      	adds	r7, #12
 8018d08:	46bd      	mov	sp, r7
 8018d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d0e:	4770      	bx	lr

08018d10 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8018d10:	b480      	push	{r7}
 8018d12:	b083      	sub	sp, #12
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	689b      	ldr	r3, [r3, #8]
 8018d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018d20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018d24:	d101      	bne.n	8018d2a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8018d26:	2301      	movs	r3, #1
 8018d28:	e000      	b.n	8018d2c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8018d2a:	2300      	movs	r3, #0
}
 8018d2c:	4618      	mov	r0, r3
 8018d2e:	370c      	adds	r7, #12
 8018d30:	46bd      	mov	sp, r7
 8018d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d36:	4770      	bx	lr

08018d38 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8018d38:	b480      	push	{r7}
 8018d3a:	b083      	sub	sp, #12
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	689b      	ldr	r3, [r3, #8]
 8018d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018d4c:	f043 0201 	orr.w	r2, r3, #1
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8018d54:	bf00      	nop
 8018d56:	370c      	adds	r7, #12
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr

08018d60 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8018d60:	b480      	push	{r7}
 8018d62:	b083      	sub	sp, #12
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	689b      	ldr	r3, [r3, #8]
 8018d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018d70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018d74:	f043 0202 	orr.w	r2, r3, #2
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8018d7c:	bf00      	nop
 8018d7e:	370c      	adds	r7, #12
 8018d80:	46bd      	mov	sp, r7
 8018d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d86:	4770      	bx	lr

08018d88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8018d88:	b480      	push	{r7}
 8018d8a:	b083      	sub	sp, #12
 8018d8c:	af00      	add	r7, sp, #0
 8018d8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	689b      	ldr	r3, [r3, #8]
 8018d94:	f003 0301 	and.w	r3, r3, #1
 8018d98:	2b01      	cmp	r3, #1
 8018d9a:	d101      	bne.n	8018da0 <LL_ADC_IsEnabled+0x18>
 8018d9c:	2301      	movs	r3, #1
 8018d9e:	e000      	b.n	8018da2 <LL_ADC_IsEnabled+0x1a>
 8018da0:	2300      	movs	r3, #0
}
 8018da2:	4618      	mov	r0, r3
 8018da4:	370c      	adds	r7, #12
 8018da6:	46bd      	mov	sp, r7
 8018da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dac:	4770      	bx	lr

08018dae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8018dae:	b480      	push	{r7}
 8018db0:	b083      	sub	sp, #12
 8018db2:	af00      	add	r7, sp, #0
 8018db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	689b      	ldr	r3, [r3, #8]
 8018dba:	f003 0302 	and.w	r3, r3, #2
 8018dbe:	2b02      	cmp	r3, #2
 8018dc0:	d101      	bne.n	8018dc6 <LL_ADC_IsDisableOngoing+0x18>
 8018dc2:	2301      	movs	r3, #1
 8018dc4:	e000      	b.n	8018dc8 <LL_ADC_IsDisableOngoing+0x1a>
 8018dc6:	2300      	movs	r3, #0
}
 8018dc8:	4618      	mov	r0, r3
 8018dca:	370c      	adds	r7, #12
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd2:	4770      	bx	lr

08018dd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b083      	sub	sp, #12
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	689b      	ldr	r3, [r3, #8]
 8018de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018de4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018de8:	f043 0204 	orr.w	r2, r3, #4
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8018df0:	bf00      	nop
 8018df2:	370c      	adds	r7, #12
 8018df4:	46bd      	mov	sp, r7
 8018df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dfa:	4770      	bx	lr

08018dfc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	b083      	sub	sp, #12
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018e04:	687b      	ldr	r3, [r7, #4]
 8018e06:	689b      	ldr	r3, [r3, #8]
 8018e08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018e10:	f043 0210 	orr.w	r2, r3, #16
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8018e18:	bf00      	nop
 8018e1a:	370c      	adds	r7, #12
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e22:	4770      	bx	lr

08018e24 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018e24:	b480      	push	{r7}
 8018e26:	b083      	sub	sp, #12
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	689b      	ldr	r3, [r3, #8]
 8018e30:	f003 0304 	and.w	r3, r3, #4
 8018e34:	2b04      	cmp	r3, #4
 8018e36:	d101      	bne.n	8018e3c <LL_ADC_REG_IsConversionOngoing+0x18>
 8018e38:	2301      	movs	r3, #1
 8018e3a:	e000      	b.n	8018e3e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8018e3c:	2300      	movs	r3, #0
}
 8018e3e:	4618      	mov	r0, r3
 8018e40:	370c      	adds	r7, #12
 8018e42:	46bd      	mov	sp, r7
 8018e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e48:	4770      	bx	lr

08018e4a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8018e4a:	b480      	push	{r7}
 8018e4c:	b083      	sub	sp, #12
 8018e4e:	af00      	add	r7, sp, #0
 8018e50:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	689b      	ldr	r3, [r3, #8]
 8018e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018e5e:	f043 0220 	orr.w	r2, r3, #32
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8018e66:	bf00      	nop
 8018e68:	370c      	adds	r7, #12
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e70:	4770      	bx	lr

08018e72 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8018e72:	b480      	push	{r7}
 8018e74:	b083      	sub	sp, #12
 8018e76:	af00      	add	r7, sp, #0
 8018e78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	689b      	ldr	r3, [r3, #8]
 8018e7e:	f003 0308 	and.w	r3, r3, #8
 8018e82:	2b08      	cmp	r3, #8
 8018e84:	d101      	bne.n	8018e8a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8018e86:	2301      	movs	r3, #1
 8018e88:	e000      	b.n	8018e8c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8018e8a:	2300      	movs	r3, #0
}
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	370c      	adds	r7, #12
 8018e90:	46bd      	mov	sp, r7
 8018e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e96:	4770      	bx	lr

08018e98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8018e98:	b590      	push	{r4, r7, lr}
 8018e9a:	b089      	sub	sp, #36	; 0x24
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018ea0:	2300      	movs	r3, #0
 8018ea2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d101      	bne.n	8018eb2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8018eae:	2301      	movs	r3, #1
 8018eb0:	e1a1      	b.n	80191f6 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	695b      	ldr	r3, [r3, #20]
 8018eb6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d109      	bne.n	8018ed4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8018ec0:	6878      	ldr	r0, [r7, #4]
 8018ec2:	f7ef fb91 	bl	80085e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	2200      	movs	r2, #0
 8018eca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	4618      	mov	r0, r3
 8018eda:	f7ff fef1 	bl	8018cc0 <LL_ADC_IsDeepPowerDownEnabled>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d004      	beq.n	8018eee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4618      	mov	r0, r3
 8018eea:	f7ff fed7 	bl	8018c9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	4618      	mov	r0, r3
 8018ef4:	f7ff ff0c 	bl	8018d10 <LL_ADC_IsInternalRegulatorEnabled>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d115      	bne.n	8018f2a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	681b      	ldr	r3, [r3, #0]
 8018f02:	4618      	mov	r0, r3
 8018f04:	f7ff fef0 	bl	8018ce8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8018f08:	4b9a      	ldr	r3, [pc, #616]	; (8019174 <HAL_ADC_Init+0x2dc>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	099b      	lsrs	r3, r3, #6
 8018f0e:	4a9a      	ldr	r2, [pc, #616]	; (8019178 <HAL_ADC_Init+0x2e0>)
 8018f10:	fba2 2303 	umull	r2, r3, r2, r3
 8018f14:	099b      	lsrs	r3, r3, #6
 8018f16:	3301      	adds	r3, #1
 8018f18:	005b      	lsls	r3, r3, #1
 8018f1a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018f1c:	e002      	b.n	8018f24 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8018f1e:	68bb      	ldr	r3, [r7, #8]
 8018f20:	3b01      	subs	r3, #1
 8018f22:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	d1f9      	bne.n	8018f1e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4618      	mov	r0, r3
 8018f30:	f7ff feee 	bl	8018d10 <LL_ADC_IsInternalRegulatorEnabled>
 8018f34:	4603      	mov	r3, r0
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d10d      	bne.n	8018f56 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f3e:	f043 0210 	orr.w	r2, r3, #16
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018f4a:	f043 0201 	orr.w	r2, r3, #1
 8018f4e:	687b      	ldr	r3, [r7, #4]
 8018f50:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8018f52:	2301      	movs	r3, #1
 8018f54:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7ff ff62 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 8018f60:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018f62:	687b      	ldr	r3, [r7, #4]
 8018f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f66:	f003 0310 	and.w	r3, r3, #16
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f040 813a 	bne.w	80191e4 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8018f70:	697b      	ldr	r3, [r7, #20]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	f040 8136 	bne.w	80191e4 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8018f80:	f043 0202 	orr.w	r2, r3, #2
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	f7ff fefb 	bl	8018d88 <LL_ADC_IsEnabled>
 8018f92:	4603      	mov	r3, r0
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d137      	bne.n	8019008 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018fa0:	d004      	beq.n	8018fac <HAL_ADC_Init+0x114>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	4a75      	ldr	r2, [pc, #468]	; (801917c <HAL_ADC_Init+0x2e4>)
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	d10f      	bne.n	8018fcc <HAL_ADC_Init+0x134>
 8018fac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8018fb0:	f7ff feea 	bl	8018d88 <LL_ADC_IsEnabled>
 8018fb4:	4604      	mov	r4, r0
 8018fb6:	4871      	ldr	r0, [pc, #452]	; (801917c <HAL_ADC_Init+0x2e4>)
 8018fb8:	f7ff fee6 	bl	8018d88 <LL_ADC_IsEnabled>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	4323      	orrs	r3, r4
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	bf0c      	ite	eq
 8018fc4:	2301      	moveq	r3, #1
 8018fc6:	2300      	movne	r3, #0
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	e008      	b.n	8018fde <HAL_ADC_Init+0x146>
 8018fcc:	486c      	ldr	r0, [pc, #432]	; (8019180 <HAL_ADC_Init+0x2e8>)
 8018fce:	f7ff fedb 	bl	8018d88 <LL_ADC_IsEnabled>
 8018fd2:	4603      	mov	r3, r0
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	bf0c      	ite	eq
 8018fd8:	2301      	moveq	r3, #1
 8018fda:	2300      	movne	r3, #0
 8018fdc:	b2db      	uxtb	r3, r3
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	d012      	beq.n	8019008 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018fea:	d004      	beq.n	8018ff6 <HAL_ADC_Init+0x15e>
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a62      	ldr	r2, [pc, #392]	; (801917c <HAL_ADC_Init+0x2e4>)
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d101      	bne.n	8018ffa <HAL_ADC_Init+0x162>
 8018ff6:	4a63      	ldr	r2, [pc, #396]	; (8019184 <HAL_ADC_Init+0x2ec>)
 8018ff8:	e000      	b.n	8018ffc <HAL_ADC_Init+0x164>
 8018ffa:	4a63      	ldr	r2, [pc, #396]	; (8019188 <HAL_ADC_Init+0x2f0>)
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	685b      	ldr	r3, [r3, #4]
 8019000:	4619      	mov	r1, r3
 8019002:	4610      	mov	r0, r2
 8019004:	f7ff fcb6 	bl	8018974 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	7f5b      	ldrb	r3, [r3, #29]
 801900c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019012:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8019014:	687b      	ldr	r3, [r7, #4]
 8019016:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019018:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 801901e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019026:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019028:	4313      	orrs	r3, r2
 801902a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019032:	2b01      	cmp	r3, #1
 8019034:	d106      	bne.n	8019044 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801903a:	3b01      	subs	r3, #1
 801903c:	045b      	lsls	r3, r3, #17
 801903e:	69ba      	ldr	r2, [r7, #24]
 8019040:	4313      	orrs	r3, r2
 8019042:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019048:	2b00      	cmp	r3, #0
 801904a:	d009      	beq.n	8019060 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019050:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019058:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801905a:	69ba      	ldr	r2, [r7, #24]
 801905c:	4313      	orrs	r3, r2
 801905e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	68da      	ldr	r2, [r3, #12]
 8019066:	4b49      	ldr	r3, [pc, #292]	; (801918c <HAL_ADC_Init+0x2f4>)
 8019068:	4013      	ands	r3, r2
 801906a:	687a      	ldr	r2, [r7, #4]
 801906c:	6812      	ldr	r2, [r2, #0]
 801906e:	69b9      	ldr	r1, [r7, #24]
 8019070:	430b      	orrs	r3, r1
 8019072:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	691b      	ldr	r3, [r3, #16]
 801907a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	430a      	orrs	r2, r1
 8019088:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	4618      	mov	r0, r3
 8019090:	f7ff fec8 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 8019094:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	4618      	mov	r0, r3
 801909c:	f7ff fee9 	bl	8018e72 <LL_ADC_INJ_IsConversionOngoing>
 80190a0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80190a2:	693b      	ldr	r3, [r7, #16]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d17b      	bne.n	80191a0 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d178      	bne.n	80191a0 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80190b2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80190ba:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80190bc:	4313      	orrs	r3, r2
 80190be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80190ca:	f023 0302 	bic.w	r3, r3, #2
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	6812      	ldr	r2, [r2, #0]
 80190d2:	69b9      	ldr	r1, [r7, #24]
 80190d4:	430b      	orrs	r3, r1
 80190d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	691b      	ldr	r3, [r3, #16]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d017      	beq.n	8019110 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	691a      	ldr	r2, [r3, #16]
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80190ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80190f0:	687b      	ldr	r3, [r7, #4]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80190f8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80190fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019100:	687a      	ldr	r2, [r7, #4]
 8019102:	6911      	ldr	r1, [r2, #16]
 8019104:	687a      	ldr	r2, [r7, #4]
 8019106:	6812      	ldr	r2, [r2, #0]
 8019108:	430b      	orrs	r3, r1
 801910a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 801910e:	e013      	b.n	8019138 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	691a      	ldr	r2, [r3, #16]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 801911e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019128:	687a      	ldr	r2, [r7, #4]
 801912a:	6812      	ldr	r2, [r2, #0]
 801912c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019130:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019134:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019138:	687b      	ldr	r3, [r7, #4]
 801913a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801913e:	2b01      	cmp	r3, #1
 8019140:	d126      	bne.n	8019190 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	691b      	ldr	r3, [r3, #16]
 8019148:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801914c:	f023 0304 	bic.w	r3, r3, #4
 8019150:	687a      	ldr	r2, [r7, #4]
 8019152:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8019154:	687a      	ldr	r2, [r7, #4]
 8019156:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019158:	4311      	orrs	r1, r2
 801915a:	687a      	ldr	r2, [r7, #4]
 801915c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801915e:	4311      	orrs	r1, r2
 8019160:	687a      	ldr	r2, [r7, #4]
 8019162:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019164:	430a      	orrs	r2, r1
 8019166:	431a      	orrs	r2, r3
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	f042 0201 	orr.w	r2, r2, #1
 8019170:	611a      	str	r2, [r3, #16]
 8019172:	e015      	b.n	80191a0 <HAL_ADC_Init+0x308>
 8019174:	20000000 	.word	0x20000000
 8019178:	053e2d63 	.word	0x053e2d63
 801917c:	50000100 	.word	0x50000100
 8019180:	50000400 	.word	0x50000400
 8019184:	50000300 	.word	0x50000300
 8019188:	50000700 	.word	0x50000700
 801918c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	691a      	ldr	r2, [r3, #16]
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	f022 0201 	bic.w	r2, r2, #1
 801919e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	695b      	ldr	r3, [r3, #20]
 80191a4:	2b01      	cmp	r3, #1
 80191a6:	d10c      	bne.n	80191c2 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	681b      	ldr	r3, [r3, #0]
 80191ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191ae:	f023 010f 	bic.w	r1, r3, #15
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	6a1b      	ldr	r3, [r3, #32]
 80191b6:	1e5a      	subs	r2, r3, #1
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	430a      	orrs	r2, r1
 80191be:	631a      	str	r2, [r3, #48]	; 0x30
 80191c0:	e007      	b.n	80191d2 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	681b      	ldr	r3, [r3, #0]
 80191cc:	f022 020f 	bic.w	r2, r2, #15
 80191d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191d6:	f023 0303 	bic.w	r3, r3, #3
 80191da:	f043 0201 	orr.w	r2, r3, #1
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80191e2:	e007      	b.n	80191f4 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191e8:	f043 0210 	orr.w	r2, r3, #16
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80191f0:	2301      	movs	r3, #1
 80191f2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80191f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80191f6:	4618      	mov	r0, r3
 80191f8:	3724      	adds	r7, #36	; 0x24
 80191fa:	46bd      	mov	sp, r7
 80191fc:	bd90      	pop	{r4, r7, pc}
 80191fe:	bf00      	nop

08019200 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b086      	sub	sp, #24
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019210:	d004      	beq.n	801921c <HAL_ADC_Start+0x1c>
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	4a5c      	ldr	r2, [pc, #368]	; (8019388 <HAL_ADC_Start+0x188>)
 8019218:	4293      	cmp	r3, r2
 801921a:	d101      	bne.n	8019220 <HAL_ADC_Start+0x20>
 801921c:	4b5b      	ldr	r3, [pc, #364]	; (801938c <HAL_ADC_Start+0x18c>)
 801921e:	e000      	b.n	8019222 <HAL_ADC_Start+0x22>
 8019220:	4b5b      	ldr	r3, [pc, #364]	; (8019390 <HAL_ADC_Start+0x190>)
 8019222:	4618      	mov	r0, r3
 8019224:	f7ff fd1e 	bl	8018c64 <LL_ADC_GetMultimode>
 8019228:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	4618      	mov	r0, r3
 8019230:	f7ff fdf8 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 8019234:	4603      	mov	r3, r0
 8019236:	2b00      	cmp	r3, #0
 8019238:	f040 809f 	bne.w	801937a <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019242:	2b01      	cmp	r3, #1
 8019244:	d101      	bne.n	801924a <HAL_ADC_Start+0x4a>
 8019246:	2302      	movs	r3, #2
 8019248:	e09a      	b.n	8019380 <HAL_ADC_Start+0x180>
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	2201      	movs	r2, #1
 801924e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	f001 fa3e 	bl	801a6d4 <ADC_Enable>
 8019258:	4603      	mov	r3, r0
 801925a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 801925c:	7dfb      	ldrb	r3, [r7, #23]
 801925e:	2b00      	cmp	r3, #0
 8019260:	f040 8086 	bne.w	8019370 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8019264:	687b      	ldr	r3, [r7, #4]
 8019266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019268:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801926c:	f023 0301 	bic.w	r3, r3, #1
 8019270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	4a42      	ldr	r2, [pc, #264]	; (8019388 <HAL_ADC_Start+0x188>)
 801927e:	4293      	cmp	r3, r2
 8019280:	d002      	beq.n	8019288 <HAL_ADC_Start+0x88>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	e001      	b.n	801928c <HAL_ADC_Start+0x8c>
 8019288:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801928c:	687a      	ldr	r2, [r7, #4]
 801928e:	6812      	ldr	r2, [r2, #0]
 8019290:	4293      	cmp	r3, r2
 8019292:	d002      	beq.n	801929a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019294:	693b      	ldr	r3, [r7, #16]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d105      	bne.n	80192a6 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801929e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80192a2:	687b      	ldr	r3, [r7, #4]
 80192a4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80192ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80192b2:	d106      	bne.n	80192c2 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80192b8:	f023 0206 	bic.w	r2, r3, #6
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	661a      	str	r2, [r3, #96]	; 0x60
 80192c0:	e002      	b.n	80192c8 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	2200      	movs	r2, #0
 80192c6:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	221c      	movs	r2, #28
 80192ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	2200      	movs	r2, #0
 80192d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	4a2a      	ldr	r2, [pc, #168]	; (8019388 <HAL_ADC_Start+0x188>)
 80192de:	4293      	cmp	r3, r2
 80192e0:	d002      	beq.n	80192e8 <HAL_ADC_Start+0xe8>
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	e001      	b.n	80192ec <HAL_ADC_Start+0xec>
 80192e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80192ec:	687a      	ldr	r2, [r7, #4]
 80192ee:	6812      	ldr	r2, [r2, #0]
 80192f0:	4293      	cmp	r3, r2
 80192f2:	d008      	beq.n	8019306 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80192f4:	693b      	ldr	r3, [r7, #16]
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d005      	beq.n	8019306 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	2b05      	cmp	r3, #5
 80192fe:	d002      	beq.n	8019306 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019300:	693b      	ldr	r3, [r7, #16]
 8019302:	2b09      	cmp	r3, #9
 8019304:	d114      	bne.n	8019330 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	68db      	ldr	r3, [r3, #12]
 801930c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019310:	2b00      	cmp	r3, #0
 8019312:	d007      	beq.n	8019324 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019318:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801931c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	4618      	mov	r0, r3
 801932a:	f7ff fd53 	bl	8018dd4 <LL_ADC_REG_StartConversion>
 801932e:	e026      	b.n	801937e <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019334:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	4a11      	ldr	r2, [pc, #68]	; (8019388 <HAL_ADC_Start+0x188>)
 8019342:	4293      	cmp	r3, r2
 8019344:	d002      	beq.n	801934c <HAL_ADC_Start+0x14c>
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	e001      	b.n	8019350 <HAL_ADC_Start+0x150>
 801934c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019350:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	68db      	ldr	r3, [r3, #12]
 8019356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801935a:	2b00      	cmp	r3, #0
 801935c:	d00f      	beq.n	801937e <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019362:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8019366:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	65da      	str	r2, [r3, #92]	; 0x5c
 801936e:	e006      	b.n	801937e <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	2200      	movs	r2, #0
 8019374:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8019378:	e001      	b.n	801937e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801937a:	2302      	movs	r3, #2
 801937c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801937e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019380:	4618      	mov	r0, r3
 8019382:	3718      	adds	r7, #24
 8019384:	46bd      	mov	sp, r7
 8019386:	bd80      	pop	{r7, pc}
 8019388:	50000100 	.word	0x50000100
 801938c:	50000300 	.word	0x50000300
 8019390:	50000700 	.word	0x50000700

08019394 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8019394:	b580      	push	{r7, lr}
 8019396:	b084      	sub	sp, #16
 8019398:	af00      	add	r7, sp, #0
 801939a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80193a2:	2b01      	cmp	r3, #1
 80193a4:	d101      	bne.n	80193aa <HAL_ADC_Stop+0x16>
 80193a6:	2302      	movs	r3, #2
 80193a8:	e023      	b.n	80193f2 <HAL_ADC_Stop+0x5e>
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	2201      	movs	r2, #1
 80193ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80193b2:	2103      	movs	r1, #3
 80193b4:	6878      	ldr	r0, [r7, #4]
 80193b6:	f001 f8d1 	bl	801a55c <ADC_ConversionStop>
 80193ba:	4603      	mov	r3, r0
 80193bc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80193be:	7bfb      	ldrb	r3, [r7, #15]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d111      	bne.n	80193e8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80193c4:	6878      	ldr	r0, [r7, #4]
 80193c6:	f001 f9e7 	bl	801a798 <ADC_Disable>
 80193ca:	4603      	mov	r3, r0
 80193cc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80193ce:	7bfb      	ldrb	r3, [r7, #15]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d109      	bne.n	80193e8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80193d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80193dc:	f023 0301 	bic.w	r3, r3, #1
 80193e0:	f043 0201 	orr.w	r2, r3, #1
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2200      	movs	r2, #0
 80193ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80193f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80193f2:	4618      	mov	r0, r3
 80193f4:	3710      	adds	r7, #16
 80193f6:	46bd      	mov	sp, r7
 80193f8:	bd80      	pop	{r7, pc}
	...

080193fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80193fc:	b580      	push	{r7, lr}
 80193fe:	b088      	sub	sp, #32
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
 8019404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801940e:	d004      	beq.n	801941a <HAL_ADC_PollForConversion+0x1e>
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	4a70      	ldr	r2, [pc, #448]	; (80195d8 <HAL_ADC_PollForConversion+0x1dc>)
 8019416:	4293      	cmp	r3, r2
 8019418:	d101      	bne.n	801941e <HAL_ADC_PollForConversion+0x22>
 801941a:	4b70      	ldr	r3, [pc, #448]	; (80195dc <HAL_ADC_PollForConversion+0x1e0>)
 801941c:	e000      	b.n	8019420 <HAL_ADC_PollForConversion+0x24>
 801941e:	4b70      	ldr	r3, [pc, #448]	; (80195e0 <HAL_ADC_PollForConversion+0x1e4>)
 8019420:	4618      	mov	r0, r3
 8019422:	f7ff fc1f 	bl	8018c64 <LL_ADC_GetMultimode>
 8019426:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	699b      	ldr	r3, [r3, #24]
 801942c:	2b08      	cmp	r3, #8
 801942e:	d102      	bne.n	8019436 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8019430:	2308      	movs	r3, #8
 8019432:	61fb      	str	r3, [r7, #28]
 8019434:	e037      	b.n	80194a6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019436:	697b      	ldr	r3, [r7, #20]
 8019438:	2b00      	cmp	r3, #0
 801943a:	d005      	beq.n	8019448 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801943c:	697b      	ldr	r3, [r7, #20]
 801943e:	2b05      	cmp	r3, #5
 8019440:	d002      	beq.n	8019448 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019442:	697b      	ldr	r3, [r7, #20]
 8019444:	2b09      	cmp	r3, #9
 8019446:	d111      	bne.n	801946c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	68db      	ldr	r3, [r3, #12]
 801944e:	f003 0301 	and.w	r3, r3, #1
 8019452:	2b00      	cmp	r3, #0
 8019454:	d007      	beq.n	8019466 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801945a:	f043 0220 	orr.w	r2, r3, #32
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8019462:	2301      	movs	r3, #1
 8019464:	e0b3      	b.n	80195ce <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8019466:	2304      	movs	r3, #4
 8019468:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801946a:	e01c      	b.n	80194a6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019474:	d004      	beq.n	8019480 <HAL_ADC_PollForConversion+0x84>
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	4a57      	ldr	r2, [pc, #348]	; (80195d8 <HAL_ADC_PollForConversion+0x1dc>)
 801947c:	4293      	cmp	r3, r2
 801947e:	d101      	bne.n	8019484 <HAL_ADC_PollForConversion+0x88>
 8019480:	4b56      	ldr	r3, [pc, #344]	; (80195dc <HAL_ADC_PollForConversion+0x1e0>)
 8019482:	e000      	b.n	8019486 <HAL_ADC_PollForConversion+0x8a>
 8019484:	4b56      	ldr	r3, [pc, #344]	; (80195e0 <HAL_ADC_PollForConversion+0x1e4>)
 8019486:	4618      	mov	r0, r3
 8019488:	f7ff fbfa 	bl	8018c80 <LL_ADC_GetMultiDMATransfer>
 801948c:	4603      	mov	r3, r0
 801948e:	2b00      	cmp	r3, #0
 8019490:	d007      	beq.n	80194a2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019496:	f043 0220 	orr.w	r2, r3, #32
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801949e:	2301      	movs	r3, #1
 80194a0:	e095      	b.n	80195ce <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80194a2:	2304      	movs	r3, #4
 80194a4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80194a6:	f7ff fa37 	bl	8018918 <HAL_GetTick>
 80194aa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80194ac:	e021      	b.n	80194f2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80194ae:	683b      	ldr	r3, [r7, #0]
 80194b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80194b4:	d01d      	beq.n	80194f2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80194b6:	f7ff fa2f 	bl	8018918 <HAL_GetTick>
 80194ba:	4602      	mov	r2, r0
 80194bc:	693b      	ldr	r3, [r7, #16]
 80194be:	1ad3      	subs	r3, r2, r3
 80194c0:	683a      	ldr	r2, [r7, #0]
 80194c2:	429a      	cmp	r2, r3
 80194c4:	d302      	bcc.n	80194cc <HAL_ADC_PollForConversion+0xd0>
 80194c6:	683b      	ldr	r3, [r7, #0]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d112      	bne.n	80194f2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	681a      	ldr	r2, [r3, #0]
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	4013      	ands	r3, r2
 80194d6:	2b00      	cmp	r3, #0
 80194d8:	d10b      	bne.n	80194f2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194de:	f043 0204 	orr.w	r2, r3, #4
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2200      	movs	r2, #0
 80194ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80194ee:	2303      	movs	r3, #3
 80194f0:	e06d      	b.n	80195ce <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	69fb      	ldr	r3, [r7, #28]
 80194fa:	4013      	ands	r3, r2
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d0d6      	beq.n	80194ae <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019504:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	4618      	mov	r0, r3
 8019512:	f7ff fb01 	bl	8018b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019516:	4603      	mov	r3, r0
 8019518:	2b00      	cmp	r3, #0
 801951a:	d01c      	beq.n	8019556 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	7f5b      	ldrb	r3, [r3, #29]
 8019520:	2b00      	cmp	r3, #0
 8019522:	d118      	bne.n	8019556 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	681b      	ldr	r3, [r3, #0]
 801952a:	f003 0308 	and.w	r3, r3, #8
 801952e:	2b08      	cmp	r3, #8
 8019530:	d111      	bne.n	8019556 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019546:	2b00      	cmp	r3, #0
 8019548:	d105      	bne.n	8019556 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801954a:	687b      	ldr	r3, [r7, #4]
 801954c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801954e:	f043 0201 	orr.w	r2, r3, #1
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4a1f      	ldr	r2, [pc, #124]	; (80195d8 <HAL_ADC_PollForConversion+0x1dc>)
 801955c:	4293      	cmp	r3, r2
 801955e:	d002      	beq.n	8019566 <HAL_ADC_PollForConversion+0x16a>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	e001      	b.n	801956a <HAL_ADC_PollForConversion+0x16e>
 8019566:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801956a:	687a      	ldr	r2, [r7, #4]
 801956c:	6812      	ldr	r2, [r2, #0]
 801956e:	4293      	cmp	r3, r2
 8019570:	d008      	beq.n	8019584 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019572:	697b      	ldr	r3, [r7, #20]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d005      	beq.n	8019584 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019578:	697b      	ldr	r3, [r7, #20]
 801957a:	2b05      	cmp	r3, #5
 801957c:	d002      	beq.n	8019584 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801957e:	697b      	ldr	r3, [r7, #20]
 8019580:	2b09      	cmp	r3, #9
 8019582:	d104      	bne.n	801958e <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	68db      	ldr	r3, [r3, #12]
 801958a:	61bb      	str	r3, [r7, #24]
 801958c:	e00d      	b.n	80195aa <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801958e:	687b      	ldr	r3, [r7, #4]
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	4a11      	ldr	r2, [pc, #68]	; (80195d8 <HAL_ADC_PollForConversion+0x1dc>)
 8019594:	4293      	cmp	r3, r2
 8019596:	d002      	beq.n	801959e <HAL_ADC_PollForConversion+0x1a2>
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	681b      	ldr	r3, [r3, #0]
 801959c:	e001      	b.n	80195a2 <HAL_ADC_PollForConversion+0x1a6>
 801959e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80195a2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80195a4:	68fb      	ldr	r3, [r7, #12]
 80195a6:	68db      	ldr	r3, [r3, #12]
 80195a8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80195aa:	69fb      	ldr	r3, [r7, #28]
 80195ac:	2b08      	cmp	r3, #8
 80195ae:	d104      	bne.n	80195ba <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	2208      	movs	r2, #8
 80195b6:	601a      	str	r2, [r3, #0]
 80195b8:	e008      	b.n	80195cc <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80195ba:	69bb      	ldr	r3, [r7, #24]
 80195bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d103      	bne.n	80195cc <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	220c      	movs	r2, #12
 80195ca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80195cc:	2300      	movs	r3, #0
}
 80195ce:	4618      	mov	r0, r3
 80195d0:	3720      	adds	r7, #32
 80195d2:	46bd      	mov	sp, r7
 80195d4:	bd80      	pop	{r7, pc}
 80195d6:	bf00      	nop
 80195d8:	50000100 	.word	0x50000100
 80195dc:	50000300 	.word	0x50000300
 80195e0:	50000700 	.word	0x50000700

080195e4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80195e4:	b580      	push	{r7, lr}
 80195e6:	b086      	sub	sp, #24
 80195e8:	af00      	add	r7, sp, #0
 80195ea:	60f8      	str	r0, [r7, #12]
 80195ec:	60b9      	str	r1, [r7, #8]
 80195ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80195f8:	d004      	beq.n	8019604 <HAL_ADC_Start_DMA+0x20>
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	4a57      	ldr	r2, [pc, #348]	; (801975c <HAL_ADC_Start_DMA+0x178>)
 8019600:	4293      	cmp	r3, r2
 8019602:	d101      	bne.n	8019608 <HAL_ADC_Start_DMA+0x24>
 8019604:	4b56      	ldr	r3, [pc, #344]	; (8019760 <HAL_ADC_Start_DMA+0x17c>)
 8019606:	e000      	b.n	801960a <HAL_ADC_Start_DMA+0x26>
 8019608:	4b56      	ldr	r3, [pc, #344]	; (8019764 <HAL_ADC_Start_DMA+0x180>)
 801960a:	4618      	mov	r0, r3
 801960c:	f7ff fb2a 	bl	8018c64 <LL_ADC_GetMultimode>
 8019610:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	681b      	ldr	r3, [r3, #0]
 8019616:	4618      	mov	r0, r3
 8019618:	f7ff fc04 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 801961c:	4603      	mov	r3, r0
 801961e:	2b00      	cmp	r3, #0
 8019620:	f040 8094 	bne.w	801974c <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019624:	68fb      	ldr	r3, [r7, #12]
 8019626:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801962a:	2b01      	cmp	r3, #1
 801962c:	d101      	bne.n	8019632 <HAL_ADC_Start_DMA+0x4e>
 801962e:	2302      	movs	r3, #2
 8019630:	e08f      	b.n	8019752 <HAL_ADC_Start_DMA+0x16e>
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	2201      	movs	r2, #1
 8019636:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	681b      	ldr	r3, [r3, #0]
 801963e:	4a4a      	ldr	r2, [pc, #296]	; (8019768 <HAL_ADC_Start_DMA+0x184>)
 8019640:	4293      	cmp	r3, r2
 8019642:	d008      	beq.n	8019656 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019644:	693b      	ldr	r3, [r7, #16]
 8019646:	2b00      	cmp	r3, #0
 8019648:	d005      	beq.n	8019656 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	2b05      	cmp	r3, #5
 801964e:	d002      	beq.n	8019656 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019650:	693b      	ldr	r3, [r7, #16]
 8019652:	2b09      	cmp	r3, #9
 8019654:	d173      	bne.n	801973e <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8019656:	68f8      	ldr	r0, [r7, #12]
 8019658:	f001 f83c 	bl	801a6d4 <ADC_Enable>
 801965c:	4603      	mov	r3, r0
 801965e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019660:	7dfb      	ldrb	r3, [r7, #23]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d166      	bne.n	8019734 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801966a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801966e:	f023 0301 	bic.w	r3, r3, #1
 8019672:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	4a37      	ldr	r2, [pc, #220]	; (801975c <HAL_ADC_Start_DMA+0x178>)
 8019680:	4293      	cmp	r3, r2
 8019682:	d002      	beq.n	801968a <HAL_ADC_Start_DMA+0xa6>
 8019684:	68fb      	ldr	r3, [r7, #12]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	e001      	b.n	801968e <HAL_ADC_Start_DMA+0xaa>
 801968a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801968e:	68fa      	ldr	r2, [r7, #12]
 8019690:	6812      	ldr	r2, [r2, #0]
 8019692:	4293      	cmp	r3, r2
 8019694:	d002      	beq.n	801969c <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019696:	693b      	ldr	r3, [r7, #16]
 8019698:	2b00      	cmp	r3, #0
 801969a:	d105      	bne.n	80196a8 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80196a4:	68fb      	ldr	r3, [r7, #12]
 80196a6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80196ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80196b0:	2b00      	cmp	r3, #0
 80196b2:	d006      	beq.n	80196c2 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196b8:	f023 0206 	bic.w	r2, r3, #6
 80196bc:	68fb      	ldr	r3, [r7, #12]
 80196be:	661a      	str	r2, [r3, #96]	; 0x60
 80196c0:	e002      	b.n	80196c8 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	2200      	movs	r2, #0
 80196c6:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80196c8:	68fb      	ldr	r3, [r7, #12]
 80196ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196cc:	4a27      	ldr	r2, [pc, #156]	; (801976c <HAL_ADC_Start_DMA+0x188>)
 80196ce:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196d4:	4a26      	ldr	r2, [pc, #152]	; (8019770 <HAL_ADC_Start_DMA+0x18c>)
 80196d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80196dc:	4a25      	ldr	r2, [pc, #148]	; (8019774 <HAL_ADC_Start_DMA+0x190>)
 80196de:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80196e0:	68fb      	ldr	r3, [r7, #12]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	221c      	movs	r2, #28
 80196e6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	2200      	movs	r2, #0
 80196ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	685a      	ldr	r2, [r3, #4]
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	f042 0210 	orr.w	r2, r2, #16
 80196fe:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	68da      	ldr	r2, [r3, #12]
 8019706:	68fb      	ldr	r3, [r7, #12]
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	f042 0201 	orr.w	r2, r2, #1
 801970e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8019710:	68fb      	ldr	r3, [r7, #12]
 8019712:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	3340      	adds	r3, #64	; 0x40
 801971a:	4619      	mov	r1, r3
 801971c:	68ba      	ldr	r2, [r7, #8]
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	f001 fcb4 	bl	801b08c <HAL_DMA_Start_IT>
 8019724:	4603      	mov	r3, r0
 8019726:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4618      	mov	r0, r3
 801972e:	f7ff fb51 	bl	8018dd4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8019732:	e00d      	b.n	8019750 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	2200      	movs	r2, #0
 8019738:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 801973c:	e008      	b.n	8019750 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801973e:	2301      	movs	r3, #1
 8019740:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019742:	68fb      	ldr	r3, [r7, #12]
 8019744:	2200      	movs	r2, #0
 8019746:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801974a:	e001      	b.n	8019750 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801974c:	2302      	movs	r3, #2
 801974e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019750:	7dfb      	ldrb	r3, [r7, #23]
}
 8019752:	4618      	mov	r0, r3
 8019754:	3718      	adds	r7, #24
 8019756:	46bd      	mov	sp, r7
 8019758:	bd80      	pop	{r7, pc}
 801975a:	bf00      	nop
 801975c:	50000100 	.word	0x50000100
 8019760:	50000300 	.word	0x50000300
 8019764:	50000700 	.word	0x50000700
 8019768:	50000400 	.word	0x50000400
 801976c:	0801a857 	.word	0x0801a857
 8019770:	0801a92f 	.word	0x0801a92f
 8019774:	0801a94b 	.word	0x0801a94b

08019778 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	b084      	sub	sp, #16
 801977c:	af00      	add	r7, sp, #0
 801977e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019786:	2b01      	cmp	r3, #1
 8019788:	d101      	bne.n	801978e <HAL_ADC_Stop_DMA+0x16>
 801978a:	2302      	movs	r3, #2
 801978c:	e051      	b.n	8019832 <HAL_ADC_Stop_DMA+0xba>
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	2201      	movs	r2, #1
 8019792:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019796:	2103      	movs	r1, #3
 8019798:	6878      	ldr	r0, [r7, #4]
 801979a:	f000 fedf 	bl	801a55c <ADC_ConversionStop>
 801979e:	4603      	mov	r3, r0
 80197a0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80197a2:	7bfb      	ldrb	r3, [r7, #15]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	d13f      	bne.n	8019828 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	68da      	ldr	r2, [r3, #12]
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	681b      	ldr	r3, [r3, #0]
 80197b2:	f022 0201 	bic.w	r2, r2, #1
 80197b6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80197bc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80197c0:	b2db      	uxtb	r3, r3
 80197c2:	2b02      	cmp	r3, #2
 80197c4:	d10f      	bne.n	80197e6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80197ca:	4618      	mov	r0, r3
 80197cc:	f001 fcd9 	bl	801b182 <HAL_DMA_Abort>
 80197d0:	4603      	mov	r3, r0
 80197d2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80197d4:	7bfb      	ldrb	r3, [r7, #15]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d005      	beq.n	80197e6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	685a      	ldr	r2, [r3, #4]
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	681b      	ldr	r3, [r3, #0]
 80197f0:	f022 0210 	bic.w	r2, r2, #16
 80197f4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80197f6:	7bfb      	ldrb	r3, [r7, #15]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d105      	bne.n	8019808 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80197fc:	6878      	ldr	r0, [r7, #4]
 80197fe:	f000 ffcb 	bl	801a798 <ADC_Disable>
 8019802:	4603      	mov	r3, r0
 8019804:	73fb      	strb	r3, [r7, #15]
 8019806:	e002      	b.n	801980e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8019808:	6878      	ldr	r0, [r7, #4]
 801980a:	f000 ffc5 	bl	801a798 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801980e:	7bfb      	ldrb	r3, [r7, #15]
 8019810:	2b00      	cmp	r3, #0
 8019812:	d109      	bne.n	8019828 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019818:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801981c:	f023 0301 	bic.w	r3, r3, #1
 8019820:	f043 0201 	orr.w	r2, r3, #1
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	2200      	movs	r2, #0
 801982c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019830:	7bfb      	ldrb	r3, [r7, #15]
}
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}

0801983a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801983a:	b480      	push	{r7}
 801983c:	b083      	sub	sp, #12
 801983e:	af00      	add	r7, sp, #0
 8019840:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8019848:	4618      	mov	r0, r3
 801984a:	370c      	adds	r7, #12
 801984c:	46bd      	mov	sp, r7
 801984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019852:	4770      	bx	lr

08019854 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8019854:	b580      	push	{r7, lr}
 8019856:	b08a      	sub	sp, #40	; 0x28
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 801985c:	2300      	movs	r3, #0
 801985e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	681b      	ldr	r3, [r3, #0]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	685b      	ldr	r3, [r3, #4]
 801986e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019878:	d004      	beq.n	8019884 <HAL_ADC_IRQHandler+0x30>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	681b      	ldr	r3, [r3, #0]
 801987e:	4a87      	ldr	r2, [pc, #540]	; (8019a9c <HAL_ADC_IRQHandler+0x248>)
 8019880:	4293      	cmp	r3, r2
 8019882:	d101      	bne.n	8019888 <HAL_ADC_IRQHandler+0x34>
 8019884:	4b86      	ldr	r3, [pc, #536]	; (8019aa0 <HAL_ADC_IRQHandler+0x24c>)
 8019886:	e000      	b.n	801988a <HAL_ADC_IRQHandler+0x36>
 8019888:	4b86      	ldr	r3, [pc, #536]	; (8019aa4 <HAL_ADC_IRQHandler+0x250>)
 801988a:	4618      	mov	r0, r3
 801988c:	f7ff f9ea 	bl	8018c64 <LL_ADC_GetMultimode>
 8019890:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8019892:	69fb      	ldr	r3, [r7, #28]
 8019894:	f003 0302 	and.w	r3, r3, #2
 8019898:	2b00      	cmp	r3, #0
 801989a:	d017      	beq.n	80198cc <HAL_ADC_IRQHandler+0x78>
 801989c:	69bb      	ldr	r3, [r7, #24]
 801989e:	f003 0302 	and.w	r3, r3, #2
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d012      	beq.n	80198cc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198aa:	f003 0310 	and.w	r3, r3, #16
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	d105      	bne.n	80198be <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198b6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80198be:	6878      	ldr	r0, [r7, #4]
 80198c0:	f001 f93a 	bl	801ab38 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	2202      	movs	r2, #2
 80198ca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80198cc:	69fb      	ldr	r3, [r7, #28]
 80198ce:	f003 0304 	and.w	r3, r3, #4
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d004      	beq.n	80198e0 <HAL_ADC_IRQHandler+0x8c>
 80198d6:	69bb      	ldr	r3, [r7, #24]
 80198d8:	f003 0304 	and.w	r3, r3, #4
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d10a      	bne.n	80198f6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80198e0:	69fb      	ldr	r3, [r7, #28]
 80198e2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	f000 8085 	beq.w	80199f6 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80198ec:	69bb      	ldr	r3, [r7, #24]
 80198ee:	f003 0308 	and.w	r3, r3, #8
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d07f      	beq.n	80199f6 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198fa:	f003 0310 	and.w	r3, r3, #16
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d105      	bne.n	801990e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019906:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	4618      	mov	r0, r3
 8019914:	f7ff f900 	bl	8018b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019918:	4603      	mov	r3, r0
 801991a:	2b00      	cmp	r3, #0
 801991c:	d064      	beq.n	80199e8 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	681b      	ldr	r3, [r3, #0]
 8019922:	4a5e      	ldr	r2, [pc, #376]	; (8019a9c <HAL_ADC_IRQHandler+0x248>)
 8019924:	4293      	cmp	r3, r2
 8019926:	d002      	beq.n	801992e <HAL_ADC_IRQHandler+0xda>
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	e001      	b.n	8019932 <HAL_ADC_IRQHandler+0xde>
 801992e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019932:	687a      	ldr	r2, [r7, #4]
 8019934:	6812      	ldr	r2, [r2, #0]
 8019936:	4293      	cmp	r3, r2
 8019938:	d008      	beq.n	801994c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801993a:	697b      	ldr	r3, [r7, #20]
 801993c:	2b00      	cmp	r3, #0
 801993e:	d005      	beq.n	801994c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019940:	697b      	ldr	r3, [r7, #20]
 8019942:	2b05      	cmp	r3, #5
 8019944:	d002      	beq.n	801994c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	2b09      	cmp	r3, #9
 801994a:	d104      	bne.n	8019956 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	68db      	ldr	r3, [r3, #12]
 8019952:	623b      	str	r3, [r7, #32]
 8019954:	e00d      	b.n	8019972 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	4a50      	ldr	r2, [pc, #320]	; (8019a9c <HAL_ADC_IRQHandler+0x248>)
 801995c:	4293      	cmp	r3, r2
 801995e:	d002      	beq.n	8019966 <HAL_ADC_IRQHandler+0x112>
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	681b      	ldr	r3, [r3, #0]
 8019964:	e001      	b.n	801996a <HAL_ADC_IRQHandler+0x116>
 8019966:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801996a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801996c:	693b      	ldr	r3, [r7, #16]
 801996e:	68db      	ldr	r3, [r3, #12]
 8019970:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019972:	6a3b      	ldr	r3, [r7, #32]
 8019974:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019978:	2b00      	cmp	r3, #0
 801997a:	d135      	bne.n	80199e8 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	681b      	ldr	r3, [r3, #0]
 8019982:	f003 0308 	and.w	r3, r3, #8
 8019986:	2b08      	cmp	r3, #8
 8019988:	d12e      	bne.n	80199e8 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	4618      	mov	r0, r3
 8019990:	f7ff fa48 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 8019994:	4603      	mov	r3, r0
 8019996:	2b00      	cmp	r3, #0
 8019998:	d11a      	bne.n	80199d0 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	685a      	ldr	r2, [r3, #4]
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	f022 020c 	bic.w	r2, r2, #12
 80199a8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80199be:	2b00      	cmp	r3, #0
 80199c0:	d112      	bne.n	80199e8 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199c6:	f043 0201 	orr.w	r2, r3, #1
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80199ce:	e00b      	b.n	80199e8 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199d4:	f043 0210 	orr.w	r2, r3, #16
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80199e0:	f043 0201 	orr.w	r2, r3, #1
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f7ee fea5 	bl	8008738 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	220c      	movs	r2, #12
 80199f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80199f6:	69fb      	ldr	r3, [r7, #28]
 80199f8:	f003 0320 	and.w	r3, r3, #32
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d004      	beq.n	8019a0a <HAL_ADC_IRQHandler+0x1b6>
 8019a00:	69bb      	ldr	r3, [r7, #24]
 8019a02:	f003 0320 	and.w	r3, r3, #32
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d10b      	bne.n	8019a22 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019a0a:	69fb      	ldr	r3, [r7, #28]
 8019a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	f000 80a1 	beq.w	8019b58 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	f000 809b 	beq.w	8019b58 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a26:	f003 0310 	and.w	r3, r3, #16
 8019a2a:	2b00      	cmp	r3, #0
 8019a2c:	d105      	bne.n	8019a3a <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	4618      	mov	r0, r3
 8019a40:	f7ff f8a9 	bl	8018b96 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019a44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	f7ff f864 	bl	8018b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 8019a50:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681b      	ldr	r3, [r3, #0]
 8019a56:	4a11      	ldr	r2, [pc, #68]	; (8019a9c <HAL_ADC_IRQHandler+0x248>)
 8019a58:	4293      	cmp	r3, r2
 8019a5a:	d002      	beq.n	8019a62 <HAL_ADC_IRQHandler+0x20e>
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	e001      	b.n	8019a66 <HAL_ADC_IRQHandler+0x212>
 8019a62:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019a66:	687a      	ldr	r2, [r7, #4]
 8019a68:	6812      	ldr	r2, [r2, #0]
 8019a6a:	4293      	cmp	r3, r2
 8019a6c:	d008      	beq.n	8019a80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019a6e:	697b      	ldr	r3, [r7, #20]
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d005      	beq.n	8019a80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019a74:	697b      	ldr	r3, [r7, #20]
 8019a76:	2b06      	cmp	r3, #6
 8019a78:	d002      	beq.n	8019a80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019a7a:	697b      	ldr	r3, [r7, #20]
 8019a7c:	2b07      	cmp	r3, #7
 8019a7e:	d104      	bne.n	8019a8a <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	68db      	ldr	r3, [r3, #12]
 8019a86:	623b      	str	r3, [r7, #32]
 8019a88:	e014      	b.n	8019ab4 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	681b      	ldr	r3, [r3, #0]
 8019a8e:	4a03      	ldr	r2, [pc, #12]	; (8019a9c <HAL_ADC_IRQHandler+0x248>)
 8019a90:	4293      	cmp	r3, r2
 8019a92:	d009      	beq.n	8019aa8 <HAL_ADC_IRQHandler+0x254>
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	681b      	ldr	r3, [r3, #0]
 8019a98:	e008      	b.n	8019aac <HAL_ADC_IRQHandler+0x258>
 8019a9a:	bf00      	nop
 8019a9c:	50000100 	.word	0x50000100
 8019aa0:	50000300 	.word	0x50000300
 8019aa4:	50000700 	.word	0x50000700
 8019aa8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019aac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019aae:	693b      	ldr	r3, [r7, #16]
 8019ab0:	68db      	ldr	r3, [r3, #12]
 8019ab2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8019ab4:	68fb      	ldr	r3, [r7, #12]
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d047      	beq.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8019aba:	6a3b      	ldr	r3, [r7, #32]
 8019abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d007      	beq.n	8019ad4 <HAL_ADC_IRQHandler+0x280>
 8019ac4:	68bb      	ldr	r3, [r7, #8]
 8019ac6:	2b00      	cmp	r3, #0
 8019ac8:	d03f      	beq.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8019aca:	6a3b      	ldr	r3, [r7, #32]
 8019acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d13a      	bne.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019ade:	2b40      	cmp	r3, #64	; 0x40
 8019ae0:	d133      	bne.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8019ae2:	6a3b      	ldr	r3, [r7, #32]
 8019ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d12e      	bne.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	4618      	mov	r0, r3
 8019af2:	f7ff f9be 	bl	8018e72 <LL_ADC_INJ_IsConversionOngoing>
 8019af6:	4603      	mov	r3, r0
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d11a      	bne.n	8019b32 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	685a      	ldr	r2, [r3, #4]
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019b0a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b20:	2b00      	cmp	r3, #0
 8019b22:	d112      	bne.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b28:	f043 0201 	orr.w	r2, r3, #1
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8019b30:	e00b      	b.n	8019b4a <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b36:	f043 0210 	orr.w	r2, r3, #16
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b42:	f043 0201 	orr.w	r2, r3, #1
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019b4a:	6878      	ldr	r0, [r7, #4]
 8019b4c:	f000 ffcc 	bl	801aae8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019b50:	687b      	ldr	r3, [r7, #4]
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	2260      	movs	r2, #96	; 0x60
 8019b56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019b58:	69fb      	ldr	r3, [r7, #28]
 8019b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d011      	beq.n	8019b86 <HAL_ADC_IRQHandler+0x332>
 8019b62:	69bb      	ldr	r3, [r7, #24]
 8019b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d00c      	beq.n	8019b86 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b70:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019b78:	6878      	ldr	r0, [r7, #4]
 8019b7a:	f000 f8af 	bl	8019cdc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2280      	movs	r2, #128	; 0x80
 8019b84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019b86:	69fb      	ldr	r3, [r7, #28]
 8019b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d012      	beq.n	8019bb6 <HAL_ADC_IRQHandler+0x362>
 8019b90:	69bb      	ldr	r3, [r7, #24]
 8019b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b96:	2b00      	cmp	r3, #0
 8019b98:	d00d      	beq.n	8019bb6 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8019ba6:	6878      	ldr	r0, [r7, #4]
 8019ba8:	f000 ffb2 	bl	801ab10 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019bb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8019bb6:	69fb      	ldr	r3, [r7, #28]
 8019bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d012      	beq.n	8019be6 <HAL_ADC_IRQHandler+0x392>
 8019bc0:	69bb      	ldr	r3, [r7, #24]
 8019bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d00d      	beq.n	8019be6 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8019bd6:	6878      	ldr	r0, [r7, #4]
 8019bd8:	f000 ffa4 	bl	801ab24 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019be4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8019be6:	69fb      	ldr	r3, [r7, #28]
 8019be8:	f003 0310 	and.w	r3, r3, #16
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d043      	beq.n	8019c78 <HAL_ADC_IRQHandler+0x424>
 8019bf0:	69bb      	ldr	r3, [r7, #24]
 8019bf2:	f003 0310 	and.w	r3, r3, #16
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d03e      	beq.n	8019c78 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d102      	bne.n	8019c08 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8019c02:	2301      	movs	r3, #1
 8019c04:	627b      	str	r3, [r7, #36]	; 0x24
 8019c06:	e021      	b.n	8019c4c <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8019c08:	697b      	ldr	r3, [r7, #20]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d015      	beq.n	8019c3a <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019c16:	d004      	beq.n	8019c22 <HAL_ADC_IRQHandler+0x3ce>
 8019c18:	687b      	ldr	r3, [r7, #4]
 8019c1a:	681b      	ldr	r3, [r3, #0]
 8019c1c:	4a27      	ldr	r2, [pc, #156]	; (8019cbc <HAL_ADC_IRQHandler+0x468>)
 8019c1e:	4293      	cmp	r3, r2
 8019c20:	d101      	bne.n	8019c26 <HAL_ADC_IRQHandler+0x3d2>
 8019c22:	4b27      	ldr	r3, [pc, #156]	; (8019cc0 <HAL_ADC_IRQHandler+0x46c>)
 8019c24:	e000      	b.n	8019c28 <HAL_ADC_IRQHandler+0x3d4>
 8019c26:	4b27      	ldr	r3, [pc, #156]	; (8019cc4 <HAL_ADC_IRQHandler+0x470>)
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f7ff f829 	bl	8018c80 <LL_ADC_GetMultiDMATransfer>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d00b      	beq.n	8019c4c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019c34:	2301      	movs	r3, #1
 8019c36:	627b      	str	r3, [r7, #36]	; 0x24
 8019c38:	e008      	b.n	8019c4c <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	68db      	ldr	r3, [r3, #12]
 8019c40:	f003 0301 	and.w	r3, r3, #1
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d001      	beq.n	8019c4c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019c48:	2301      	movs	r3, #1
 8019c4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8019c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c4e:	2b01      	cmp	r3, #1
 8019c50:	d10e      	bne.n	8019c70 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c56:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c62:	f043 0202 	orr.w	r2, r3, #2
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8019c6a:	6878      	ldr	r0, [r7, #4]
 8019c6c:	f000 f840 	bl	8019cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	2210      	movs	r2, #16
 8019c76:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8019c78:	69fb      	ldr	r3, [r7, #28]
 8019c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019c7e:	2b00      	cmp	r3, #0
 8019c80:	d018      	beq.n	8019cb4 <HAL_ADC_IRQHandler+0x460>
 8019c82:	69bb      	ldr	r3, [r7, #24]
 8019c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d013      	beq.n	8019cb4 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c90:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c9c:	f043 0208 	orr.w	r2, r3, #8
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	681b      	ldr	r3, [r3, #0]
 8019ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019cac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8019cae:	6878      	ldr	r0, [r7, #4]
 8019cb0:	f000 ff24 	bl	801aafc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8019cb4:	bf00      	nop
 8019cb6:	3728      	adds	r7, #40	; 0x28
 8019cb8:	46bd      	mov	sp, r7
 8019cba:	bd80      	pop	{r7, pc}
 8019cbc:	50000100 	.word	0x50000100
 8019cc0:	50000300 	.word	0x50000300
 8019cc4:	50000700 	.word	0x50000700

08019cc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019cc8:	b480      	push	{r7}
 8019cca:	b083      	sub	sp, #12
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8019cd0:	bf00      	nop
 8019cd2:	370c      	adds	r7, #12
 8019cd4:	46bd      	mov	sp, r7
 8019cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cda:	4770      	bx	lr

08019cdc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8019cdc:	b480      	push	{r7}
 8019cde:	b083      	sub	sp, #12
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8019ce4:	bf00      	nop
 8019ce6:	370c      	adds	r7, #12
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cee:	4770      	bx	lr

08019cf0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8019cf0:	b480      	push	{r7}
 8019cf2:	b083      	sub	sp, #12
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8019cf8:	bf00      	nop
 8019cfa:	370c      	adds	r7, #12
 8019cfc:	46bd      	mov	sp, r7
 8019cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d02:	4770      	bx	lr

08019d04 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b0b6      	sub	sp, #216	; 0xd8
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	6078      	str	r0, [r7, #4]
 8019d0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019d0e:	2300      	movs	r3, #0
 8019d10:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8019d14:	2300      	movs	r3, #0
 8019d16:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019d1e:	2b01      	cmp	r3, #1
 8019d20:	d102      	bne.n	8019d28 <HAL_ADC_ConfigChannel+0x24>
 8019d22:	2302      	movs	r3, #2
 8019d24:	f000 bc04 	b.w	801a530 <HAL_ADC_ConfigChannel+0x82c>
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	2201      	movs	r2, #1
 8019d2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	4618      	mov	r0, r3
 8019d36:	f7ff f875 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 8019d3a:	4603      	mov	r3, r0
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	f040 83e8 	bne.w	801a512 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	6818      	ldr	r0, [r3, #0]
 8019d46:	683b      	ldr	r3, [r7, #0]
 8019d48:	6859      	ldr	r1, [r3, #4]
 8019d4a:	683b      	ldr	r3, [r7, #0]
 8019d4c:	681b      	ldr	r3, [r3, #0]
 8019d4e:	461a      	mov	r2, r3
 8019d50:	f7fe fef5 	bl	8018b3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	4618      	mov	r0, r3
 8019d5a:	f7ff f863 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 8019d5e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	681b      	ldr	r3, [r3, #0]
 8019d66:	4618      	mov	r0, r3
 8019d68:	f7ff f883 	bl	8018e72 <LL_ADC_INJ_IsConversionOngoing>
 8019d6c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019d70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	f040 81d9 	bne.w	801a12c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019d7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	f040 81d4 	bne.w	801a12c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8019d84:	683b      	ldr	r3, [r7, #0]
 8019d86:	689b      	ldr	r3, [r3, #8]
 8019d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019d8c:	d10f      	bne.n	8019dae <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	6818      	ldr	r0, [r3, #0]
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	2200      	movs	r2, #0
 8019d98:	4619      	mov	r1, r3
 8019d9a:	f7fe ff0f 	bl	8018bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8019da6:	4618      	mov	r0, r3
 8019da8:	f7fe fea3 	bl	8018af2 <LL_ADC_SetSamplingTimeCommonConfig>
 8019dac:	e00e      	b.n	8019dcc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	6818      	ldr	r0, [r3, #0]
 8019db2:	683b      	ldr	r3, [r7, #0]
 8019db4:	6819      	ldr	r1, [r3, #0]
 8019db6:	683b      	ldr	r3, [r7, #0]
 8019db8:	689b      	ldr	r3, [r3, #8]
 8019dba:	461a      	mov	r2, r3
 8019dbc:	f7fe fefe 	bl	8018bbc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	2100      	movs	r1, #0
 8019dc6:	4618      	mov	r0, r3
 8019dc8:	f7fe fe93 	bl	8018af2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8019dcc:	683b      	ldr	r3, [r7, #0]
 8019dce:	695a      	ldr	r2, [r3, #20]
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	68db      	ldr	r3, [r3, #12]
 8019dd6:	08db      	lsrs	r3, r3, #3
 8019dd8:	f003 0303 	and.w	r3, r3, #3
 8019ddc:	005b      	lsls	r3, r3, #1
 8019dde:	fa02 f303 	lsl.w	r3, r2, r3
 8019de2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8019de6:	683b      	ldr	r3, [r7, #0]
 8019de8:	691b      	ldr	r3, [r3, #16]
 8019dea:	2b04      	cmp	r3, #4
 8019dec:	d022      	beq.n	8019e34 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	6818      	ldr	r0, [r3, #0]
 8019df2:	683b      	ldr	r3, [r7, #0]
 8019df4:	6919      	ldr	r1, [r3, #16]
 8019df6:	683b      	ldr	r3, [r7, #0]
 8019df8:	681a      	ldr	r2, [r3, #0]
 8019dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8019dfe:	f7fe fded 	bl	80189dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	6818      	ldr	r0, [r3, #0]
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	6919      	ldr	r1, [r3, #16]
 8019e0a:	683b      	ldr	r3, [r7, #0]
 8019e0c:	699b      	ldr	r3, [r3, #24]
 8019e0e:	461a      	mov	r2, r3
 8019e10:	f7fe fe39 	bl	8018a86 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	6818      	ldr	r0, [r3, #0]
 8019e18:	683b      	ldr	r3, [r7, #0]
 8019e1a:	6919      	ldr	r1, [r3, #16]
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	7f1b      	ldrb	r3, [r3, #28]
 8019e20:	2b01      	cmp	r3, #1
 8019e22:	d102      	bne.n	8019e2a <HAL_ADC_ConfigChannel+0x126>
 8019e24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8019e28:	e000      	b.n	8019e2c <HAL_ADC_ConfigChannel+0x128>
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	f7fe fe45 	bl	8018abc <LL_ADC_SetOffsetSaturation>
 8019e32:	e17b      	b.n	801a12c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	2100      	movs	r1, #0
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	f7fe fdf2 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019e40:	4603      	mov	r3, r0
 8019e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d10a      	bne.n	8019e60 <HAL_ADC_ConfigChannel+0x15c>
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	681b      	ldr	r3, [r3, #0]
 8019e4e:	2100      	movs	r1, #0
 8019e50:	4618      	mov	r0, r3
 8019e52:	f7fe fde7 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019e56:	4603      	mov	r3, r0
 8019e58:	0e9b      	lsrs	r3, r3, #26
 8019e5a:	f003 021f 	and.w	r2, r3, #31
 8019e5e:	e01e      	b.n	8019e9e <HAL_ADC_ConfigChannel+0x19a>
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	2100      	movs	r1, #0
 8019e66:	4618      	mov	r0, r3
 8019e68:	f7fe fddc 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019e6c:	4603      	mov	r3, r0
 8019e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019e72:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8019e76:	fa93 f3a3 	rbit	r3, r3
 8019e7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8019e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8019e82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8019e86:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019e8a:	2b00      	cmp	r3, #0
 8019e8c:	d101      	bne.n	8019e92 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8019e8e:	2320      	movs	r3, #32
 8019e90:	e004      	b.n	8019e9c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8019e92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8019e96:	fab3 f383 	clz	r3, r3
 8019e9a:	b2db      	uxtb	r3, r3
 8019e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d105      	bne.n	8019eb6 <HAL_ADC_ConfigChannel+0x1b2>
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	0e9b      	lsrs	r3, r3, #26
 8019eb0:	f003 031f 	and.w	r3, r3, #31
 8019eb4:	e018      	b.n	8019ee8 <HAL_ADC_ConfigChannel+0x1e4>
 8019eb6:	683b      	ldr	r3, [r7, #0]
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019ebe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8019ec2:	fa93 f3a3 	rbit	r3, r3
 8019ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8019eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8019ece:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8019ed2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d101      	bne.n	8019ede <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8019eda:	2320      	movs	r3, #32
 8019edc:	e004      	b.n	8019ee8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8019ede:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8019ee2:	fab3 f383 	clz	r3, r3
 8019ee6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8019ee8:	429a      	cmp	r2, r3
 8019eea:	d106      	bne.n	8019efa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	2200      	movs	r2, #0
 8019ef2:	2100      	movs	r1, #0
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7fe fdab 	bl	8018a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8019efa:	687b      	ldr	r3, [r7, #4]
 8019efc:	681b      	ldr	r3, [r3, #0]
 8019efe:	2101      	movs	r1, #1
 8019f00:	4618      	mov	r0, r3
 8019f02:	f7fe fd8f 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019f06:	4603      	mov	r3, r0
 8019f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d10a      	bne.n	8019f26 <HAL_ADC_ConfigChannel+0x222>
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	2101      	movs	r1, #1
 8019f16:	4618      	mov	r0, r3
 8019f18:	f7fe fd84 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019f1c:	4603      	mov	r3, r0
 8019f1e:	0e9b      	lsrs	r3, r3, #26
 8019f20:	f003 021f 	and.w	r2, r3, #31
 8019f24:	e01e      	b.n	8019f64 <HAL_ADC_ConfigChannel+0x260>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	2101      	movs	r1, #1
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	f7fe fd79 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019f32:	4603      	mov	r3, r0
 8019f34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019f38:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8019f3c:	fa93 f3a3 	rbit	r3, r3
 8019f40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8019f44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8019f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8019f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d101      	bne.n	8019f58 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8019f54:	2320      	movs	r3, #32
 8019f56:	e004      	b.n	8019f62 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8019f58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8019f5c:	fab3 f383 	clz	r3, r3
 8019f60:	b2db      	uxtb	r3, r3
 8019f62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019f64:	683b      	ldr	r3, [r7, #0]
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d105      	bne.n	8019f7c <HAL_ADC_ConfigChannel+0x278>
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	0e9b      	lsrs	r3, r3, #26
 8019f76:	f003 031f 	and.w	r3, r3, #31
 8019f7a:	e018      	b.n	8019fae <HAL_ADC_ConfigChannel+0x2aa>
 8019f7c:	683b      	ldr	r3, [r7, #0]
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019f84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8019f88:	fa93 f3a3 	rbit	r3, r3
 8019f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8019f90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8019f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d101      	bne.n	8019fa4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8019fa0:	2320      	movs	r3, #32
 8019fa2:	e004      	b.n	8019fae <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8019fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8019fa8:	fab3 f383 	clz	r3, r3
 8019fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8019fae:	429a      	cmp	r2, r3
 8019fb0:	d106      	bne.n	8019fc0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8019fb2:	687b      	ldr	r3, [r7, #4]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	2101      	movs	r1, #1
 8019fba:	4618      	mov	r0, r3
 8019fbc:	f7fe fd48 	bl	8018a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	2102      	movs	r1, #2
 8019fc6:	4618      	mov	r0, r3
 8019fc8:	f7fe fd2c 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019fcc:	4603      	mov	r3, r0
 8019fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d10a      	bne.n	8019fec <HAL_ADC_ConfigChannel+0x2e8>
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	681b      	ldr	r3, [r3, #0]
 8019fda:	2102      	movs	r1, #2
 8019fdc:	4618      	mov	r0, r3
 8019fde:	f7fe fd21 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	0e9b      	lsrs	r3, r3, #26
 8019fe6:	f003 021f 	and.w	r2, r3, #31
 8019fea:	e01e      	b.n	801a02a <HAL_ADC_ConfigChannel+0x326>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	2102      	movs	r1, #2
 8019ff2:	4618      	mov	r0, r3
 8019ff4:	f7fe fd16 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019ffe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a002:	fa93 f3a3 	rbit	r3, r3
 801a006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801a00a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a00e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801a012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a016:	2b00      	cmp	r3, #0
 801a018:	d101      	bne.n	801a01e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801a01a:	2320      	movs	r3, #32
 801a01c:	e004      	b.n	801a028 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801a01e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a022:	fab3 f383 	clz	r3, r3
 801a026:	b2db      	uxtb	r3, r3
 801a028:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a032:	2b00      	cmp	r3, #0
 801a034:	d105      	bne.n	801a042 <HAL_ADC_ConfigChannel+0x33e>
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	0e9b      	lsrs	r3, r3, #26
 801a03c:	f003 031f 	and.w	r3, r3, #31
 801a040:	e016      	b.n	801a070 <HAL_ADC_ConfigChannel+0x36c>
 801a042:	683b      	ldr	r3, [r7, #0]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a04a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a04e:	fa93 f3a3 	rbit	r3, r3
 801a052:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801a054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a056:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801a05a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a05e:	2b00      	cmp	r3, #0
 801a060:	d101      	bne.n	801a066 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801a062:	2320      	movs	r3, #32
 801a064:	e004      	b.n	801a070 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801a066:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a06a:	fab3 f383 	clz	r3, r3
 801a06e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a070:	429a      	cmp	r2, r3
 801a072:	d106      	bne.n	801a082 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	2200      	movs	r2, #0
 801a07a:	2102      	movs	r1, #2
 801a07c:	4618      	mov	r0, r3
 801a07e:	f7fe fce7 	bl	8018a50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	2103      	movs	r1, #3
 801a088:	4618      	mov	r0, r3
 801a08a:	f7fe fccb 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 801a08e:	4603      	mov	r3, r0
 801a090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a094:	2b00      	cmp	r3, #0
 801a096:	d10a      	bne.n	801a0ae <HAL_ADC_ConfigChannel+0x3aa>
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	2103      	movs	r1, #3
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7fe fcc0 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 801a0a4:	4603      	mov	r3, r0
 801a0a6:	0e9b      	lsrs	r3, r3, #26
 801a0a8:	f003 021f 	and.w	r2, r3, #31
 801a0ac:	e017      	b.n	801a0de <HAL_ADC_ConfigChannel+0x3da>
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	681b      	ldr	r3, [r3, #0]
 801a0b2:	2103      	movs	r1, #3
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7fe fcb5 	bl	8018a24 <LL_ADC_GetOffsetChannel>
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a0be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a0c0:	fa93 f3a3 	rbit	r3, r3
 801a0c4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801a0c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a0c8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801a0ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d101      	bne.n	801a0d4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801a0d0:	2320      	movs	r3, #32
 801a0d2:	e003      	b.n	801a0dc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801a0d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a0d6:	fab3 f383 	clz	r3, r3
 801a0da:	b2db      	uxtb	r3, r3
 801a0dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d105      	bne.n	801a0f6 <HAL_ADC_ConfigChannel+0x3f2>
 801a0ea:	683b      	ldr	r3, [r7, #0]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	0e9b      	lsrs	r3, r3, #26
 801a0f0:	f003 031f 	and.w	r3, r3, #31
 801a0f4:	e011      	b.n	801a11a <HAL_ADC_ConfigChannel+0x416>
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a0fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a0fe:	fa93 f3a3 	rbit	r3, r3
 801a102:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801a104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a106:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d101      	bne.n	801a112 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a10e:	2320      	movs	r3, #32
 801a110:	e003      	b.n	801a11a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a114:	fab3 f383 	clz	r3, r3
 801a118:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a11a:	429a      	cmp	r2, r3
 801a11c:	d106      	bne.n	801a12c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	2200      	movs	r2, #0
 801a124:	2103      	movs	r1, #3
 801a126:	4618      	mov	r0, r3
 801a128:	f7fe fc92 	bl	8018a50 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	4618      	mov	r0, r3
 801a132:	f7fe fe29 	bl	8018d88 <LL_ADC_IsEnabled>
 801a136:	4603      	mov	r3, r0
 801a138:	2b00      	cmp	r3, #0
 801a13a:	f040 813d 	bne.w	801a3b8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	6818      	ldr	r0, [r3, #0]
 801a142:	683b      	ldr	r3, [r7, #0]
 801a144:	6819      	ldr	r1, [r3, #0]
 801a146:	683b      	ldr	r3, [r7, #0]
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	461a      	mov	r2, r3
 801a14c:	f7fe fd62 	bl	8018c14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a150:	683b      	ldr	r3, [r7, #0]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	4aa2      	ldr	r2, [pc, #648]	; (801a3e0 <HAL_ADC_ConfigChannel+0x6dc>)
 801a156:	4293      	cmp	r3, r2
 801a158:	f040 812e 	bne.w	801a3b8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a160:	683b      	ldr	r3, [r7, #0]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a168:	2b00      	cmp	r3, #0
 801a16a:	d10b      	bne.n	801a184 <HAL_ADC_ConfigChannel+0x480>
 801a16c:	683b      	ldr	r3, [r7, #0]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	0e9b      	lsrs	r3, r3, #26
 801a172:	3301      	adds	r3, #1
 801a174:	f003 031f 	and.w	r3, r3, #31
 801a178:	2b09      	cmp	r3, #9
 801a17a:	bf94      	ite	ls
 801a17c:	2301      	movls	r3, #1
 801a17e:	2300      	movhi	r3, #0
 801a180:	b2db      	uxtb	r3, r3
 801a182:	e019      	b.n	801a1b8 <HAL_ADC_ConfigChannel+0x4b4>
 801a184:	683b      	ldr	r3, [r7, #0]
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a18a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a18c:	fa93 f3a3 	rbit	r3, r3
 801a190:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a194:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a196:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a198:	2b00      	cmp	r3, #0
 801a19a:	d101      	bne.n	801a1a0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a19c:	2320      	movs	r3, #32
 801a19e:	e003      	b.n	801a1a8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a1a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a1a2:	fab3 f383 	clz	r3, r3
 801a1a6:	b2db      	uxtb	r3, r3
 801a1a8:	3301      	adds	r3, #1
 801a1aa:	f003 031f 	and.w	r3, r3, #31
 801a1ae:	2b09      	cmp	r3, #9
 801a1b0:	bf94      	ite	ls
 801a1b2:	2301      	movls	r3, #1
 801a1b4:	2300      	movhi	r3, #0
 801a1b6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d079      	beq.n	801a2b0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a1bc:	683b      	ldr	r3, [r7, #0]
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d107      	bne.n	801a1d8 <HAL_ADC_ConfigChannel+0x4d4>
 801a1c8:	683b      	ldr	r3, [r7, #0]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	0e9b      	lsrs	r3, r3, #26
 801a1ce:	3301      	adds	r3, #1
 801a1d0:	069b      	lsls	r3, r3, #26
 801a1d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a1d6:	e015      	b.n	801a204 <HAL_ADC_ConfigChannel+0x500>
 801a1d8:	683b      	ldr	r3, [r7, #0]
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a1de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1e0:	fa93 f3a3 	rbit	r3, r3
 801a1e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a1ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d101      	bne.n	801a1f4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a1f0:	2320      	movs	r3, #32
 801a1f2:	e003      	b.n	801a1fc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f6:	fab3 f383 	clz	r3, r3
 801a1fa:	b2db      	uxtb	r3, r3
 801a1fc:	3301      	adds	r3, #1
 801a1fe:	069b      	lsls	r3, r3, #26
 801a200:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a204:	683b      	ldr	r3, [r7, #0]
 801a206:	681b      	ldr	r3, [r3, #0]
 801a208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a20c:	2b00      	cmp	r3, #0
 801a20e:	d109      	bne.n	801a224 <HAL_ADC_ConfigChannel+0x520>
 801a210:	683b      	ldr	r3, [r7, #0]
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	0e9b      	lsrs	r3, r3, #26
 801a216:	3301      	adds	r3, #1
 801a218:	f003 031f 	and.w	r3, r3, #31
 801a21c:	2101      	movs	r1, #1
 801a21e:	fa01 f303 	lsl.w	r3, r1, r3
 801a222:	e017      	b.n	801a254 <HAL_ADC_ConfigChannel+0x550>
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a22c:	fa93 f3a3 	rbit	r3, r3
 801a230:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a234:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a238:	2b00      	cmp	r3, #0
 801a23a:	d101      	bne.n	801a240 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a23c:	2320      	movs	r3, #32
 801a23e:	e003      	b.n	801a248 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a240:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a242:	fab3 f383 	clz	r3, r3
 801a246:	b2db      	uxtb	r3, r3
 801a248:	3301      	adds	r3, #1
 801a24a:	f003 031f 	and.w	r3, r3, #31
 801a24e:	2101      	movs	r1, #1
 801a250:	fa01 f303 	lsl.w	r3, r1, r3
 801a254:	ea42 0103 	orr.w	r1, r2, r3
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a260:	2b00      	cmp	r3, #0
 801a262:	d10a      	bne.n	801a27a <HAL_ADC_ConfigChannel+0x576>
 801a264:	683b      	ldr	r3, [r7, #0]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	0e9b      	lsrs	r3, r3, #26
 801a26a:	3301      	adds	r3, #1
 801a26c:	f003 021f 	and.w	r2, r3, #31
 801a270:	4613      	mov	r3, r2
 801a272:	005b      	lsls	r3, r3, #1
 801a274:	4413      	add	r3, r2
 801a276:	051b      	lsls	r3, r3, #20
 801a278:	e018      	b.n	801a2ac <HAL_ADC_ConfigChannel+0x5a8>
 801a27a:	683b      	ldr	r3, [r7, #0]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a282:	fa93 f3a3 	rbit	r3, r3
 801a286:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d101      	bne.n	801a296 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a292:	2320      	movs	r3, #32
 801a294:	e003      	b.n	801a29e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a298:	fab3 f383 	clz	r3, r3
 801a29c:	b2db      	uxtb	r3, r3
 801a29e:	3301      	adds	r3, #1
 801a2a0:	f003 021f 	and.w	r2, r3, #31
 801a2a4:	4613      	mov	r3, r2
 801a2a6:	005b      	lsls	r3, r3, #1
 801a2a8:	4413      	add	r3, r2
 801a2aa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a2ac:	430b      	orrs	r3, r1
 801a2ae:	e07e      	b.n	801a3ae <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d107      	bne.n	801a2cc <HAL_ADC_ConfigChannel+0x5c8>
 801a2bc:	683b      	ldr	r3, [r7, #0]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	0e9b      	lsrs	r3, r3, #26
 801a2c2:	3301      	adds	r3, #1
 801a2c4:	069b      	lsls	r3, r3, #26
 801a2c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a2ca:	e015      	b.n	801a2f8 <HAL_ADC_ConfigChannel+0x5f4>
 801a2cc:	683b      	ldr	r3, [r7, #0]
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d4:	fa93 f3a3 	rbit	r3, r3
 801a2d8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2dc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d101      	bne.n	801a2e8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a2e4:	2320      	movs	r3, #32
 801a2e6:	e003      	b.n	801a2f0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a2e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2ea:	fab3 f383 	clz	r3, r3
 801a2ee:	b2db      	uxtb	r3, r3
 801a2f0:	3301      	adds	r3, #1
 801a2f2:	069b      	lsls	r3, r3, #26
 801a2f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a2f8:	683b      	ldr	r3, [r7, #0]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a300:	2b00      	cmp	r3, #0
 801a302:	d109      	bne.n	801a318 <HAL_ADC_ConfigChannel+0x614>
 801a304:	683b      	ldr	r3, [r7, #0]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	0e9b      	lsrs	r3, r3, #26
 801a30a:	3301      	adds	r3, #1
 801a30c:	f003 031f 	and.w	r3, r3, #31
 801a310:	2101      	movs	r1, #1
 801a312:	fa01 f303 	lsl.w	r3, r1, r3
 801a316:	e017      	b.n	801a348 <HAL_ADC_ConfigChannel+0x644>
 801a318:	683b      	ldr	r3, [r7, #0]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a31e:	6a3b      	ldr	r3, [r7, #32]
 801a320:	fa93 f3a3 	rbit	r3, r3
 801a324:	61fb      	str	r3, [r7, #28]
  return result;
 801a326:	69fb      	ldr	r3, [r7, #28]
 801a328:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d101      	bne.n	801a334 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a330:	2320      	movs	r3, #32
 801a332:	e003      	b.n	801a33c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a336:	fab3 f383 	clz	r3, r3
 801a33a:	b2db      	uxtb	r3, r3
 801a33c:	3301      	adds	r3, #1
 801a33e:	f003 031f 	and.w	r3, r3, #31
 801a342:	2101      	movs	r1, #1
 801a344:	fa01 f303 	lsl.w	r3, r1, r3
 801a348:	ea42 0103 	orr.w	r1, r2, r3
 801a34c:	683b      	ldr	r3, [r7, #0]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a354:	2b00      	cmp	r3, #0
 801a356:	d10d      	bne.n	801a374 <HAL_ADC_ConfigChannel+0x670>
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	0e9b      	lsrs	r3, r3, #26
 801a35e:	3301      	adds	r3, #1
 801a360:	f003 021f 	and.w	r2, r3, #31
 801a364:	4613      	mov	r3, r2
 801a366:	005b      	lsls	r3, r3, #1
 801a368:	4413      	add	r3, r2
 801a36a:	3b1e      	subs	r3, #30
 801a36c:	051b      	lsls	r3, r3, #20
 801a36e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a372:	e01b      	b.n	801a3ac <HAL_ADC_ConfigChannel+0x6a8>
 801a374:	683b      	ldr	r3, [r7, #0]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	fa93 f3a3 	rbit	r3, r3
 801a380:	613b      	str	r3, [r7, #16]
  return result;
 801a382:	693b      	ldr	r3, [r7, #16]
 801a384:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a386:	69bb      	ldr	r3, [r7, #24]
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d101      	bne.n	801a390 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a38c:	2320      	movs	r3, #32
 801a38e:	e003      	b.n	801a398 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a390:	69bb      	ldr	r3, [r7, #24]
 801a392:	fab3 f383 	clz	r3, r3
 801a396:	b2db      	uxtb	r3, r3
 801a398:	3301      	adds	r3, #1
 801a39a:	f003 021f 	and.w	r2, r3, #31
 801a39e:	4613      	mov	r3, r2
 801a3a0:	005b      	lsls	r3, r3, #1
 801a3a2:	4413      	add	r3, r2
 801a3a4:	3b1e      	subs	r3, #30
 801a3a6:	051b      	lsls	r3, r3, #20
 801a3a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a3ac:	430b      	orrs	r3, r1
 801a3ae:	683a      	ldr	r2, [r7, #0]
 801a3b0:	6892      	ldr	r2, [r2, #8]
 801a3b2:	4619      	mov	r1, r3
 801a3b4:	f7fe fc02 	bl	8018bbc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a3b8:	683b      	ldr	r3, [r7, #0]
 801a3ba:	681a      	ldr	r2, [r3, #0]
 801a3bc:	4b09      	ldr	r3, [pc, #36]	; (801a3e4 <HAL_ADC_ConfigChannel+0x6e0>)
 801a3be:	4013      	ands	r3, r2
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	f000 80af 	beq.w	801a524 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	681b      	ldr	r3, [r3, #0]
 801a3ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a3ce:	d004      	beq.n	801a3da <HAL_ADC_ConfigChannel+0x6d6>
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	681b      	ldr	r3, [r3, #0]
 801a3d4:	4a04      	ldr	r2, [pc, #16]	; (801a3e8 <HAL_ADC_ConfigChannel+0x6e4>)
 801a3d6:	4293      	cmp	r3, r2
 801a3d8:	d10a      	bne.n	801a3f0 <HAL_ADC_ConfigChannel+0x6ec>
 801a3da:	4b04      	ldr	r3, [pc, #16]	; (801a3ec <HAL_ADC_ConfigChannel+0x6e8>)
 801a3dc:	e009      	b.n	801a3f2 <HAL_ADC_ConfigChannel+0x6ee>
 801a3de:	bf00      	nop
 801a3e0:	407f0000 	.word	0x407f0000
 801a3e4:	80080000 	.word	0x80080000
 801a3e8:	50000100 	.word	0x50000100
 801a3ec:	50000300 	.word	0x50000300
 801a3f0:	4b51      	ldr	r3, [pc, #324]	; (801a538 <HAL_ADC_ConfigChannel+0x834>)
 801a3f2:	4618      	mov	r0, r3
 801a3f4:	f7fe fae4 	bl	80189c0 <LL_ADC_GetCommonPathInternalCh>
 801a3f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a3fc:	683b      	ldr	r3, [r7, #0]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	4a4e      	ldr	r2, [pc, #312]	; (801a53c <HAL_ADC_ConfigChannel+0x838>)
 801a402:	4293      	cmp	r3, r2
 801a404:	d004      	beq.n	801a410 <HAL_ADC_ConfigChannel+0x70c>
 801a406:	683b      	ldr	r3, [r7, #0]
 801a408:	681b      	ldr	r3, [r3, #0]
 801a40a:	4a4d      	ldr	r2, [pc, #308]	; (801a540 <HAL_ADC_ConfigChannel+0x83c>)
 801a40c:	4293      	cmp	r3, r2
 801a40e:	d134      	bne.n	801a47a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a410:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a418:	2b00      	cmp	r3, #0
 801a41a:	d12e      	bne.n	801a47a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a424:	d17e      	bne.n	801a524 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	681b      	ldr	r3, [r3, #0]
 801a42a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a42e:	d004      	beq.n	801a43a <HAL_ADC_ConfigChannel+0x736>
 801a430:	687b      	ldr	r3, [r7, #4]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	4a43      	ldr	r2, [pc, #268]	; (801a544 <HAL_ADC_ConfigChannel+0x840>)
 801a436:	4293      	cmp	r3, r2
 801a438:	d101      	bne.n	801a43e <HAL_ADC_ConfigChannel+0x73a>
 801a43a:	4a43      	ldr	r2, [pc, #268]	; (801a548 <HAL_ADC_ConfigChannel+0x844>)
 801a43c:	e000      	b.n	801a440 <HAL_ADC_ConfigChannel+0x73c>
 801a43e:	4a3e      	ldr	r2, [pc, #248]	; (801a538 <HAL_ADC_ConfigChannel+0x834>)
 801a440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a448:	4619      	mov	r1, r3
 801a44a:	4610      	mov	r0, r2
 801a44c:	f7fe faa5 	bl	801899a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a450:	4b3e      	ldr	r3, [pc, #248]	; (801a54c <HAL_ADC_ConfigChannel+0x848>)
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	099b      	lsrs	r3, r3, #6
 801a456:	4a3e      	ldr	r2, [pc, #248]	; (801a550 <HAL_ADC_ConfigChannel+0x84c>)
 801a458:	fba2 2303 	umull	r2, r3, r2, r3
 801a45c:	099b      	lsrs	r3, r3, #6
 801a45e:	1c5a      	adds	r2, r3, #1
 801a460:	4613      	mov	r3, r2
 801a462:	005b      	lsls	r3, r3, #1
 801a464:	4413      	add	r3, r2
 801a466:	009b      	lsls	r3, r3, #2
 801a468:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a46a:	e002      	b.n	801a472 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a46c:	68fb      	ldr	r3, [r7, #12]
 801a46e:	3b01      	subs	r3, #1
 801a470:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	d1f9      	bne.n	801a46c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a478:	e054      	b.n	801a524 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a47a:	683b      	ldr	r3, [r7, #0]
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4a35      	ldr	r2, [pc, #212]	; (801a554 <HAL_ADC_ConfigChannel+0x850>)
 801a480:	4293      	cmp	r3, r2
 801a482:	d120      	bne.n	801a4c6 <HAL_ADC_ConfigChannel+0x7c2>
 801a484:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a48c:	2b00      	cmp	r3, #0
 801a48e:	d11a      	bne.n	801a4c6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a498:	d144      	bne.n	801a524 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a4a2:	d004      	beq.n	801a4ae <HAL_ADC_ConfigChannel+0x7aa>
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	681b      	ldr	r3, [r3, #0]
 801a4a8:	4a26      	ldr	r2, [pc, #152]	; (801a544 <HAL_ADC_ConfigChannel+0x840>)
 801a4aa:	4293      	cmp	r3, r2
 801a4ac:	d101      	bne.n	801a4b2 <HAL_ADC_ConfigChannel+0x7ae>
 801a4ae:	4a26      	ldr	r2, [pc, #152]	; (801a548 <HAL_ADC_ConfigChannel+0x844>)
 801a4b0:	e000      	b.n	801a4b4 <HAL_ADC_ConfigChannel+0x7b0>
 801a4b2:	4a21      	ldr	r2, [pc, #132]	; (801a538 <HAL_ADC_ConfigChannel+0x834>)
 801a4b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a4b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a4bc:	4619      	mov	r1, r3
 801a4be:	4610      	mov	r0, r2
 801a4c0:	f7fe fa6b 	bl	801899a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a4c4:	e02e      	b.n	801a524 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a4c6:	683b      	ldr	r3, [r7, #0]
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	4a23      	ldr	r2, [pc, #140]	; (801a558 <HAL_ADC_ConfigChannel+0x854>)
 801a4cc:	4293      	cmp	r3, r2
 801a4ce:	d129      	bne.n	801a524 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a4d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a4d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a4d8:	2b00      	cmp	r3, #0
 801a4da:	d123      	bne.n	801a524 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	4a18      	ldr	r2, [pc, #96]	; (801a544 <HAL_ADC_ConfigChannel+0x840>)
 801a4e2:	4293      	cmp	r3, r2
 801a4e4:	d01e      	beq.n	801a524 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a4ee:	d004      	beq.n	801a4fa <HAL_ADC_ConfigChannel+0x7f6>
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	4a13      	ldr	r2, [pc, #76]	; (801a544 <HAL_ADC_ConfigChannel+0x840>)
 801a4f6:	4293      	cmp	r3, r2
 801a4f8:	d101      	bne.n	801a4fe <HAL_ADC_ConfigChannel+0x7fa>
 801a4fa:	4a13      	ldr	r2, [pc, #76]	; (801a548 <HAL_ADC_ConfigChannel+0x844>)
 801a4fc:	e000      	b.n	801a500 <HAL_ADC_ConfigChannel+0x7fc>
 801a4fe:	4a0e      	ldr	r2, [pc, #56]	; (801a538 <HAL_ADC_ConfigChannel+0x834>)
 801a500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a508:	4619      	mov	r1, r3
 801a50a:	4610      	mov	r0, r2
 801a50c:	f7fe fa45 	bl	801899a <LL_ADC_SetCommonPathInternalCh>
 801a510:	e008      	b.n	801a524 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a516:	f043 0220 	orr.w	r2, r3, #32
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a51e:	2301      	movs	r3, #1
 801a520:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	2200      	movs	r2, #0
 801a528:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a52c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a530:	4618      	mov	r0, r3
 801a532:	37d8      	adds	r7, #216	; 0xd8
 801a534:	46bd      	mov	sp, r7
 801a536:	bd80      	pop	{r7, pc}
 801a538:	50000700 	.word	0x50000700
 801a53c:	c3210000 	.word	0xc3210000
 801a540:	90c00010 	.word	0x90c00010
 801a544:	50000100 	.word	0x50000100
 801a548:	50000300 	.word	0x50000300
 801a54c:	20000000 	.word	0x20000000
 801a550:	053e2d63 	.word	0x053e2d63
 801a554:	c7520000 	.word	0xc7520000
 801a558:	cb840000 	.word	0xcb840000

0801a55c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	b088      	sub	sp, #32
 801a560:	af00      	add	r7, sp, #0
 801a562:	6078      	str	r0, [r7, #4]
 801a564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a566:	2300      	movs	r3, #0
 801a568:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a56a:	683b      	ldr	r3, [r7, #0]
 801a56c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	681b      	ldr	r3, [r3, #0]
 801a572:	4618      	mov	r0, r3
 801a574:	f7fe fc56 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 801a578:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	4618      	mov	r0, r3
 801a580:	f7fe fc77 	bl	8018e72 <LL_ADC_INJ_IsConversionOngoing>
 801a584:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d103      	bne.n	801a594 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801a58c:	68fb      	ldr	r3, [r7, #12]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	f000 8098 	beq.w	801a6c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	68db      	ldr	r3, [r3, #12]
 801a59a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d02a      	beq.n	801a5f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	7f5b      	ldrb	r3, [r3, #29]
 801a5a6:	2b01      	cmp	r3, #1
 801a5a8:	d126      	bne.n	801a5f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	7f1b      	ldrb	r3, [r3, #28]
 801a5ae:	2b01      	cmp	r3, #1
 801a5b0:	d122      	bne.n	801a5f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801a5b2:	2301      	movs	r3, #1
 801a5b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a5b6:	e014      	b.n	801a5e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801a5b8:	69fb      	ldr	r3, [r7, #28]
 801a5ba:	4a45      	ldr	r2, [pc, #276]	; (801a6d0 <ADC_ConversionStop+0x174>)
 801a5bc:	4293      	cmp	r3, r2
 801a5be:	d90d      	bls.n	801a5dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5c4:	f043 0210 	orr.w	r2, r3, #16
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a5d0:	f043 0201 	orr.w	r2, r3, #1
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a5d8:	2301      	movs	r3, #1
 801a5da:	e074      	b.n	801a6c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801a5dc:	69fb      	ldr	r3, [r7, #28]
 801a5de:	3301      	adds	r3, #1
 801a5e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a5ec:	2b40      	cmp	r3, #64	; 0x40
 801a5ee:	d1e3      	bne.n	801a5b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	2240      	movs	r2, #64	; 0x40
 801a5f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801a5f8:	69bb      	ldr	r3, [r7, #24]
 801a5fa:	2b02      	cmp	r3, #2
 801a5fc:	d014      	beq.n	801a628 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	4618      	mov	r0, r3
 801a604:	f7fe fc0e 	bl	8018e24 <LL_ADC_REG_IsConversionOngoing>
 801a608:	4603      	mov	r3, r0
 801a60a:	2b00      	cmp	r3, #0
 801a60c:	d00c      	beq.n	801a628 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	4618      	mov	r0, r3
 801a614:	f7fe fbcb 	bl	8018dae <LL_ADC_IsDisableOngoing>
 801a618:	4603      	mov	r3, r0
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d104      	bne.n	801a628 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4618      	mov	r0, r3
 801a624:	f7fe fbea 	bl	8018dfc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801a628:	69bb      	ldr	r3, [r7, #24]
 801a62a:	2b01      	cmp	r3, #1
 801a62c:	d014      	beq.n	801a658 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	4618      	mov	r0, r3
 801a634:	f7fe fc1d 	bl	8018e72 <LL_ADC_INJ_IsConversionOngoing>
 801a638:	4603      	mov	r3, r0
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d00c      	beq.n	801a658 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	681b      	ldr	r3, [r3, #0]
 801a642:	4618      	mov	r0, r3
 801a644:	f7fe fbb3 	bl	8018dae <LL_ADC_IsDisableOngoing>
 801a648:	4603      	mov	r3, r0
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d104      	bne.n	801a658 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	4618      	mov	r0, r3
 801a654:	f7fe fbf9 	bl	8018e4a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801a658:	69bb      	ldr	r3, [r7, #24]
 801a65a:	2b02      	cmp	r3, #2
 801a65c:	d005      	beq.n	801a66a <ADC_ConversionStop+0x10e>
 801a65e:	69bb      	ldr	r3, [r7, #24]
 801a660:	2b03      	cmp	r3, #3
 801a662:	d105      	bne.n	801a670 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801a664:	230c      	movs	r3, #12
 801a666:	617b      	str	r3, [r7, #20]
        break;
 801a668:	e005      	b.n	801a676 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801a66a:	2308      	movs	r3, #8
 801a66c:	617b      	str	r3, [r7, #20]
        break;
 801a66e:	e002      	b.n	801a676 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801a670:	2304      	movs	r3, #4
 801a672:	617b      	str	r3, [r7, #20]
        break;
 801a674:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801a676:	f7fe f94f 	bl	8018918 <HAL_GetTick>
 801a67a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a67c:	e01b      	b.n	801a6b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801a67e:	f7fe f94b 	bl	8018918 <HAL_GetTick>
 801a682:	4602      	mov	r2, r0
 801a684:	68bb      	ldr	r3, [r7, #8]
 801a686:	1ad3      	subs	r3, r2, r3
 801a688:	2b05      	cmp	r3, #5
 801a68a:	d914      	bls.n	801a6b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	689a      	ldr	r2, [r3, #8]
 801a692:	697b      	ldr	r3, [r7, #20]
 801a694:	4013      	ands	r3, r2
 801a696:	2b00      	cmp	r3, #0
 801a698:	d00d      	beq.n	801a6b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a69e:	f043 0210 	orr.w	r2, r3, #16
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a6aa:	f043 0201 	orr.w	r2, r3, #1
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a6b2:	2301      	movs	r3, #1
 801a6b4:	e007      	b.n	801a6c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	689a      	ldr	r2, [r3, #8]
 801a6bc:	697b      	ldr	r3, [r7, #20]
 801a6be:	4013      	ands	r3, r2
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d1dc      	bne.n	801a67e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801a6c4:	2300      	movs	r3, #0
}
 801a6c6:	4618      	mov	r0, r3
 801a6c8:	3720      	adds	r7, #32
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	a33fffff 	.word	0xa33fffff

0801a6d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801a6d4:	b580      	push	{r7, lr}
 801a6d6:	b084      	sub	sp, #16
 801a6d8:	af00      	add	r7, sp, #0
 801a6da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	681b      	ldr	r3, [r3, #0]
 801a6e0:	4618      	mov	r0, r3
 801a6e2:	f7fe fb51 	bl	8018d88 <LL_ADC_IsEnabled>
 801a6e6:	4603      	mov	r3, r0
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d14d      	bne.n	801a788 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	681b      	ldr	r3, [r3, #0]
 801a6f0:	689a      	ldr	r2, [r3, #8]
 801a6f2:	4b28      	ldr	r3, [pc, #160]	; (801a794 <ADC_Enable+0xc0>)
 801a6f4:	4013      	ands	r3, r2
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d00d      	beq.n	801a716 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6fe:	f043 0210 	orr.w	r2, r3, #16
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a70a:	f043 0201 	orr.w	r2, r3, #1
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801a712:	2301      	movs	r3, #1
 801a714:	e039      	b.n	801a78a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	4618      	mov	r0, r3
 801a71c:	f7fe fb0c 	bl	8018d38 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801a720:	f7fe f8fa 	bl	8018918 <HAL_GetTick>
 801a724:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a726:	e028      	b.n	801a77a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	681b      	ldr	r3, [r3, #0]
 801a72c:	4618      	mov	r0, r3
 801a72e:	f7fe fb2b 	bl	8018d88 <LL_ADC_IsEnabled>
 801a732:	4603      	mov	r3, r0
 801a734:	2b00      	cmp	r3, #0
 801a736:	d104      	bne.n	801a742 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	4618      	mov	r0, r3
 801a73e:	f7fe fafb 	bl	8018d38 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801a742:	f7fe f8e9 	bl	8018918 <HAL_GetTick>
 801a746:	4602      	mov	r2, r0
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	1ad3      	subs	r3, r2, r3
 801a74c:	2b02      	cmp	r3, #2
 801a74e:	d914      	bls.n	801a77a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	f003 0301 	and.w	r3, r3, #1
 801a75a:	2b01      	cmp	r3, #1
 801a75c:	d00d      	beq.n	801a77a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a762:	f043 0210 	orr.w	r2, r3, #16
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a76e:	f043 0201 	orr.w	r2, r3, #1
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a776:	2301      	movs	r3, #1
 801a778:	e007      	b.n	801a78a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	f003 0301 	and.w	r3, r3, #1
 801a784:	2b01      	cmp	r3, #1
 801a786:	d1cf      	bne.n	801a728 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a788:	2300      	movs	r3, #0
}
 801a78a:	4618      	mov	r0, r3
 801a78c:	3710      	adds	r7, #16
 801a78e:	46bd      	mov	sp, r7
 801a790:	bd80      	pop	{r7, pc}
 801a792:	bf00      	nop
 801a794:	8000003f 	.word	0x8000003f

0801a798 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b084      	sub	sp, #16
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	681b      	ldr	r3, [r3, #0]
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	f7fe fb02 	bl	8018dae <LL_ADC_IsDisableOngoing>
 801a7aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	4618      	mov	r0, r3
 801a7b2:	f7fe fae9 	bl	8018d88 <LL_ADC_IsEnabled>
 801a7b6:	4603      	mov	r3, r0
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d047      	beq.n	801a84c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d144      	bne.n	801a84c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	689b      	ldr	r3, [r3, #8]
 801a7c8:	f003 030d 	and.w	r3, r3, #13
 801a7cc:	2b01      	cmp	r3, #1
 801a7ce:	d10c      	bne.n	801a7ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	4618      	mov	r0, r3
 801a7d6:	f7fe fac3 	bl	8018d60 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	2203      	movs	r2, #3
 801a7e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801a7e2:	f7fe f899 	bl	8018918 <HAL_GetTick>
 801a7e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a7e8:	e029      	b.n	801a83e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7ee:	f043 0210 	orr.w	r2, r3, #16
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a7fa:	f043 0201 	orr.w	r2, r3, #1
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801a802:	2301      	movs	r3, #1
 801a804:	e023      	b.n	801a84e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801a806:	f7fe f887 	bl	8018918 <HAL_GetTick>
 801a80a:	4602      	mov	r2, r0
 801a80c:	68bb      	ldr	r3, [r7, #8]
 801a80e:	1ad3      	subs	r3, r2, r3
 801a810:	2b02      	cmp	r3, #2
 801a812:	d914      	bls.n	801a83e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	689b      	ldr	r3, [r3, #8]
 801a81a:	f003 0301 	and.w	r3, r3, #1
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d00d      	beq.n	801a83e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a826:	f043 0210 	orr.w	r2, r3, #16
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a832:	f043 0201 	orr.w	r2, r3, #1
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a83a:	2301      	movs	r3, #1
 801a83c:	e007      	b.n	801a84e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	681b      	ldr	r3, [r3, #0]
 801a842:	689b      	ldr	r3, [r3, #8]
 801a844:	f003 0301 	and.w	r3, r3, #1
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d1dc      	bne.n	801a806 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801a84c:	2300      	movs	r3, #0
}
 801a84e:	4618      	mov	r0, r3
 801a850:	3710      	adds	r7, #16
 801a852:	46bd      	mov	sp, r7
 801a854:	bd80      	pop	{r7, pc}

0801a856 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801a856:	b580      	push	{r7, lr}
 801a858:	b084      	sub	sp, #16
 801a85a:	af00      	add	r7, sp, #0
 801a85c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a862:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a868:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d14b      	bne.n	801a908 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a874:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801a87c:	68fb      	ldr	r3, [r7, #12]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	f003 0308 	and.w	r3, r3, #8
 801a886:	2b00      	cmp	r3, #0
 801a888:	d021      	beq.n	801a8ce <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	4618      	mov	r0, r3
 801a890:	f7fe f942 	bl	8018b18 <LL_ADC_REG_IsTriggerSourceSWStart>
 801a894:	4603      	mov	r3, r0
 801a896:	2b00      	cmp	r3, #0
 801a898:	d032      	beq.n	801a900 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801a89a:	68fb      	ldr	r3, [r7, #12]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	68db      	ldr	r3, [r3, #12]
 801a8a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d12b      	bne.n	801a900 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a8b0:	68fb      	ldr	r3, [r7, #12]
 801a8b2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a8b4:	68fb      	ldr	r3, [r7, #12]
 801a8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d11f      	bne.n	801a900 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a8c0:	68fb      	ldr	r3, [r7, #12]
 801a8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8c4:	f043 0201 	orr.w	r2, r3, #1
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	65da      	str	r2, [r3, #92]	; 0x5c
 801a8cc:	e018      	b.n	801a900 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	68db      	ldr	r3, [r3, #12]
 801a8d4:	f003 0302 	and.w	r3, r3, #2
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d111      	bne.n	801a900 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d105      	bne.n	801a900 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8f8:	f043 0201 	orr.w	r2, r3, #1
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801a900:	68f8      	ldr	r0, [r7, #12]
 801a902:	f7ed ff19 	bl	8008738 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801a906:	e00e      	b.n	801a926 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a90c:	f003 0310 	and.w	r3, r3, #16
 801a910:	2b00      	cmp	r3, #0
 801a912:	d003      	beq.n	801a91c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801a914:	68f8      	ldr	r0, [r7, #12]
 801a916:	f7ff f9eb 	bl	8019cf0 <HAL_ADC_ErrorCallback>
}
 801a91a:	e004      	b.n	801a926 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a922:	6878      	ldr	r0, [r7, #4]
 801a924:	4798      	blx	r3
}
 801a926:	bf00      	nop
 801a928:	3710      	adds	r7, #16
 801a92a:	46bd      	mov	sp, r7
 801a92c:	bd80      	pop	{r7, pc}

0801a92e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801a92e:	b580      	push	{r7, lr}
 801a930:	b084      	sub	sp, #16
 801a932:	af00      	add	r7, sp, #0
 801a934:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a93a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801a93c:	68f8      	ldr	r0, [r7, #12]
 801a93e:	f7ff f9c3 	bl	8019cc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801a942:	bf00      	nop
 801a944:	3710      	adds	r7, #16
 801a946:	46bd      	mov	sp, r7
 801a948:	bd80      	pop	{r7, pc}

0801a94a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801a94a:	b580      	push	{r7, lr}
 801a94c:	b084      	sub	sp, #16
 801a94e:	af00      	add	r7, sp, #0
 801a950:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a956:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a95c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a968:	f043 0204 	orr.w	r2, r3, #4
 801a96c:	68fb      	ldr	r3, [r7, #12]
 801a96e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801a970:	68f8      	ldr	r0, [r7, #12]
 801a972:	f7ff f9bd 	bl	8019cf0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801a976:	bf00      	nop
 801a978:	3710      	adds	r7, #16
 801a97a:	46bd      	mov	sp, r7
 801a97c:	bd80      	pop	{r7, pc}

0801a97e <LL_ADC_IsEnabled>:
{
 801a97e:	b480      	push	{r7}
 801a980:	b083      	sub	sp, #12
 801a982:	af00      	add	r7, sp, #0
 801a984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	689b      	ldr	r3, [r3, #8]
 801a98a:	f003 0301 	and.w	r3, r3, #1
 801a98e:	2b01      	cmp	r3, #1
 801a990:	d101      	bne.n	801a996 <LL_ADC_IsEnabled+0x18>
 801a992:	2301      	movs	r3, #1
 801a994:	e000      	b.n	801a998 <LL_ADC_IsEnabled+0x1a>
 801a996:	2300      	movs	r3, #0
}
 801a998:	4618      	mov	r0, r3
 801a99a:	370c      	adds	r7, #12
 801a99c:	46bd      	mov	sp, r7
 801a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a2:	4770      	bx	lr

0801a9a4 <LL_ADC_StartCalibration>:
{
 801a9a4:	b480      	push	{r7}
 801a9a6:	b083      	sub	sp, #12
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	689b      	ldr	r3, [r3, #8]
 801a9b2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a9b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801a9ba:	683a      	ldr	r2, [r7, #0]
 801a9bc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801a9c0:	4313      	orrs	r3, r2
 801a9c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	609a      	str	r2, [r3, #8]
}
 801a9ca:	bf00      	nop
 801a9cc:	370c      	adds	r7, #12
 801a9ce:	46bd      	mov	sp, r7
 801a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9d4:	4770      	bx	lr

0801a9d6 <LL_ADC_IsCalibrationOnGoing>:
{
 801a9d6:	b480      	push	{r7}
 801a9d8:	b083      	sub	sp, #12
 801a9da:	af00      	add	r7, sp, #0
 801a9dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801a9de:	687b      	ldr	r3, [r7, #4]
 801a9e0:	689b      	ldr	r3, [r3, #8]
 801a9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801a9e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a9ea:	d101      	bne.n	801a9f0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801a9ec:	2301      	movs	r3, #1
 801a9ee:	e000      	b.n	801a9f2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801a9f0:	2300      	movs	r3, #0
}
 801a9f2:	4618      	mov	r0, r3
 801a9f4:	370c      	adds	r7, #12
 801a9f6:	46bd      	mov	sp, r7
 801a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9fc:	4770      	bx	lr

0801a9fe <LL_ADC_REG_IsConversionOngoing>:
{
 801a9fe:	b480      	push	{r7}
 801aa00:	b083      	sub	sp, #12
 801aa02:	af00      	add	r7, sp, #0
 801aa04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	689b      	ldr	r3, [r3, #8]
 801aa0a:	f003 0304 	and.w	r3, r3, #4
 801aa0e:	2b04      	cmp	r3, #4
 801aa10:	d101      	bne.n	801aa16 <LL_ADC_REG_IsConversionOngoing+0x18>
 801aa12:	2301      	movs	r3, #1
 801aa14:	e000      	b.n	801aa18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801aa16:	2300      	movs	r3, #0
}
 801aa18:	4618      	mov	r0, r3
 801aa1a:	370c      	adds	r7, #12
 801aa1c:	46bd      	mov	sp, r7
 801aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa22:	4770      	bx	lr

0801aa24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b084      	sub	sp, #16
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
 801aa2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801aa2e:	2300      	movs	r3, #0
 801aa30:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	d101      	bne.n	801aa40 <HAL_ADCEx_Calibration_Start+0x1c>
 801aa3c:	2302      	movs	r3, #2
 801aa3e:	e04d      	b.n	801aadc <HAL_ADCEx_Calibration_Start+0xb8>
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	2201      	movs	r2, #1
 801aa44:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801aa48:	6878      	ldr	r0, [r7, #4]
 801aa4a:	f7ff fea5 	bl	801a798 <ADC_Disable>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801aa52:	7bfb      	ldrb	r3, [r7, #15]
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d136      	bne.n	801aac6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801aa60:	f023 0302 	bic.w	r3, r3, #2
 801aa64:	f043 0202 	orr.w	r2, r3, #2
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	6839      	ldr	r1, [r7, #0]
 801aa72:	4618      	mov	r0, r3
 801aa74:	f7ff ff96 	bl	801a9a4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801aa78:	e014      	b.n	801aaa4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801aa7a:	68bb      	ldr	r3, [r7, #8]
 801aa7c:	3301      	adds	r3, #1
 801aa7e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801aa80:	68bb      	ldr	r3, [r7, #8]
 801aa82:	4a18      	ldr	r2, [pc, #96]	; (801aae4 <HAL_ADCEx_Calibration_Start+0xc0>)
 801aa84:	4293      	cmp	r3, r2
 801aa86:	d90d      	bls.n	801aaa4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa8c:	f023 0312 	bic.w	r3, r3, #18
 801aa90:	f043 0210 	orr.w	r2, r3, #16
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	2200      	movs	r2, #0
 801aa9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	e01b      	b.n	801aadc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	f7ff ff94 	bl	801a9d6 <LL_ADC_IsCalibrationOnGoing>
 801aaae:	4603      	mov	r3, r0
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d1e2      	bne.n	801aa7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801aab4:	687b      	ldr	r3, [r7, #4]
 801aab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aab8:	f023 0303 	bic.w	r3, r3, #3
 801aabc:	f043 0201 	orr.w	r2, r3, #1
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	65da      	str	r2, [r3, #92]	; 0x5c
 801aac4:	e005      	b.n	801aad2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aaca:	f043 0210 	orr.w	r2, r3, #16
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	2200      	movs	r2, #0
 801aad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801aada:	7bfb      	ldrb	r3, [r7, #15]
}
 801aadc:	4618      	mov	r0, r3
 801aade:	3710      	adds	r7, #16
 801aae0:	46bd      	mov	sp, r7
 801aae2:	bd80      	pop	{r7, pc}
 801aae4:	0004de01 	.word	0x0004de01

0801aae8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801aae8:	b480      	push	{r7}
 801aaea:	b083      	sub	sp, #12
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801aaf0:	bf00      	nop
 801aaf2:	370c      	adds	r7, #12
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aafa:	4770      	bx	lr

0801aafc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801aafc:	b480      	push	{r7}
 801aafe:	b083      	sub	sp, #12
 801ab00:	af00      	add	r7, sp, #0
 801ab02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801ab04:	bf00      	nop
 801ab06:	370c      	adds	r7, #12
 801ab08:	46bd      	mov	sp, r7
 801ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab0e:	4770      	bx	lr

0801ab10 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801ab10:	b480      	push	{r7}
 801ab12:	b083      	sub	sp, #12
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801ab18:	bf00      	nop
 801ab1a:	370c      	adds	r7, #12
 801ab1c:	46bd      	mov	sp, r7
 801ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab22:	4770      	bx	lr

0801ab24 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801ab24:	b480      	push	{r7}
 801ab26:	b083      	sub	sp, #12
 801ab28:	af00      	add	r7, sp, #0
 801ab2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801ab2c:	bf00      	nop
 801ab2e:	370c      	adds	r7, #12
 801ab30:	46bd      	mov	sp, r7
 801ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab36:	4770      	bx	lr

0801ab38 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801ab38:	b480      	push	{r7}
 801ab3a:	b083      	sub	sp, #12
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801ab40:	bf00      	nop
 801ab42:	370c      	adds	r7, #12
 801ab44:	46bd      	mov	sp, r7
 801ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab4a:	4770      	bx	lr

0801ab4c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801ab4c:	b590      	push	{r4, r7, lr}
 801ab4e:	b0a1      	sub	sp, #132	; 0x84
 801ab50:	af00      	add	r7, sp, #0
 801ab52:	6078      	str	r0, [r7, #4]
 801ab54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801ab56:	2300      	movs	r3, #0
 801ab58:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ab62:	2b01      	cmp	r3, #1
 801ab64:	d101      	bne.n	801ab6a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801ab66:	2302      	movs	r3, #2
 801ab68:	e0cb      	b.n	801ad02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	2201      	movs	r2, #1
 801ab6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801ab72:	2300      	movs	r3, #0
 801ab74:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801ab76:	2300      	movs	r3, #0
 801ab78:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ab82:	d102      	bne.n	801ab8a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801ab84:	4b61      	ldr	r3, [pc, #388]	; (801ad0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ab86:	60bb      	str	r3, [r7, #8]
 801ab88:	e001      	b.n	801ab8e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801ab8e:	68bb      	ldr	r3, [r7, #8]
 801ab90:	2b00      	cmp	r3, #0
 801ab92:	d10b      	bne.n	801abac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab98:	f043 0220 	orr.w	r2, r3, #32
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	2200      	movs	r2, #0
 801aba4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801aba8:	2301      	movs	r3, #1
 801abaa:	e0aa      	b.n	801ad02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801abac:	68bb      	ldr	r3, [r7, #8]
 801abae:	4618      	mov	r0, r3
 801abb0:	f7ff ff25 	bl	801a9fe <LL_ADC_REG_IsConversionOngoing>
 801abb4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	4618      	mov	r0, r3
 801abbc:	f7ff ff1f 	bl	801a9fe <LL_ADC_REG_IsConversionOngoing>
 801abc0:	4603      	mov	r3, r0
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	f040 808c 	bne.w	801ace0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801abc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801abca:	2b00      	cmp	r3, #0
 801abcc:	f040 8088 	bne.w	801ace0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801abd8:	d004      	beq.n	801abe4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	4a4b      	ldr	r2, [pc, #300]	; (801ad0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801abe0:	4293      	cmp	r3, r2
 801abe2:	d101      	bne.n	801abe8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801abe4:	4b4a      	ldr	r3, [pc, #296]	; (801ad10 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801abe6:	e000      	b.n	801abea <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801abe8:	4b4a      	ldr	r3, [pc, #296]	; (801ad14 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801abea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801abec:	683b      	ldr	r3, [r7, #0]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	d041      	beq.n	801ac78 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801abf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801abf6:	689b      	ldr	r3, [r3, #8]
 801abf8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	6859      	ldr	r1, [r3, #4]
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801ac06:	035b      	lsls	r3, r3, #13
 801ac08:	430b      	orrs	r3, r1
 801ac0a:	431a      	orrs	r2, r3
 801ac0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ac0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ac18:	d004      	beq.n	801ac24 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	4a3b      	ldr	r2, [pc, #236]	; (801ad0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d10f      	bne.n	801ac44 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801ac24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ac28:	f7ff fea9 	bl	801a97e <LL_ADC_IsEnabled>
 801ac2c:	4604      	mov	r4, r0
 801ac2e:	4837      	ldr	r0, [pc, #220]	; (801ad0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ac30:	f7ff fea5 	bl	801a97e <LL_ADC_IsEnabled>
 801ac34:	4603      	mov	r3, r0
 801ac36:	4323      	orrs	r3, r4
 801ac38:	2b00      	cmp	r3, #0
 801ac3a:	bf0c      	ite	eq
 801ac3c:	2301      	moveq	r3, #1
 801ac3e:	2300      	movne	r3, #0
 801ac40:	b2db      	uxtb	r3, r3
 801ac42:	e008      	b.n	801ac56 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801ac44:	4834      	ldr	r0, [pc, #208]	; (801ad18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801ac46:	f7ff fe9a 	bl	801a97e <LL_ADC_IsEnabled>
 801ac4a:	4603      	mov	r3, r0
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	bf0c      	ite	eq
 801ac50:	2301      	moveq	r3, #1
 801ac52:	2300      	movne	r3, #0
 801ac54:	b2db      	uxtb	r3, r3
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d04c      	beq.n	801acf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801ac5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ac5c:	689b      	ldr	r3, [r3, #8]
 801ac5e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ac62:	f023 030f 	bic.w	r3, r3, #15
 801ac66:	683a      	ldr	r2, [r7, #0]
 801ac68:	6811      	ldr	r1, [r2, #0]
 801ac6a:	683a      	ldr	r2, [r7, #0]
 801ac6c:	6892      	ldr	r2, [r2, #8]
 801ac6e:	430a      	orrs	r2, r1
 801ac70:	431a      	orrs	r2, r3
 801ac72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ac74:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ac76:	e03d      	b.n	801acf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801ac78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ac7a:	689b      	ldr	r3, [r3, #8]
 801ac7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801ac80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ac82:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ac8c:	d004      	beq.n	801ac98 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	4a1e      	ldr	r2, [pc, #120]	; (801ad0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ac94:	4293      	cmp	r3, r2
 801ac96:	d10f      	bne.n	801acb8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801ac98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ac9c:	f7ff fe6f 	bl	801a97e <LL_ADC_IsEnabled>
 801aca0:	4604      	mov	r4, r0
 801aca2:	481a      	ldr	r0, [pc, #104]	; (801ad0c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801aca4:	f7ff fe6b 	bl	801a97e <LL_ADC_IsEnabled>
 801aca8:	4603      	mov	r3, r0
 801acaa:	4323      	orrs	r3, r4
 801acac:	2b00      	cmp	r3, #0
 801acae:	bf0c      	ite	eq
 801acb0:	2301      	moveq	r3, #1
 801acb2:	2300      	movne	r3, #0
 801acb4:	b2db      	uxtb	r3, r3
 801acb6:	e008      	b.n	801acca <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801acb8:	4817      	ldr	r0, [pc, #92]	; (801ad18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801acba:	f7ff fe60 	bl	801a97e <LL_ADC_IsEnabled>
 801acbe:	4603      	mov	r3, r0
 801acc0:	2b00      	cmp	r3, #0
 801acc2:	bf0c      	ite	eq
 801acc4:	2301      	moveq	r3, #1
 801acc6:	2300      	movne	r3, #0
 801acc8:	b2db      	uxtb	r3, r3
 801acca:	2b00      	cmp	r3, #0
 801accc:	d012      	beq.n	801acf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801acce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801acd0:	689b      	ldr	r3, [r3, #8]
 801acd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801acd6:	f023 030f 	bic.w	r3, r3, #15
 801acda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801acdc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801acde:	e009      	b.n	801acf4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ace4:	f043 0220 	orr.w	r2, r3, #32
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801acec:	2301      	movs	r3, #1
 801acee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801acf2:	e000      	b.n	801acf6 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801acf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	2200      	movs	r2, #0
 801acfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801acfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801ad02:	4618      	mov	r0, r3
 801ad04:	3784      	adds	r7, #132	; 0x84
 801ad06:	46bd      	mov	sp, r7
 801ad08:	bd90      	pop	{r4, r7, pc}
 801ad0a:	bf00      	nop
 801ad0c:	50000100 	.word	0x50000100
 801ad10:	50000300 	.word	0x50000300
 801ad14:	50000700 	.word	0x50000700
 801ad18:	50000400 	.word	0x50000400

0801ad1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ad1c:	b480      	push	{r7}
 801ad1e:	b085      	sub	sp, #20
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	f003 0307 	and.w	r3, r3, #7
 801ad2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801ad2c:	4b0c      	ldr	r3, [pc, #48]	; (801ad60 <__NVIC_SetPriorityGrouping+0x44>)
 801ad2e:	68db      	ldr	r3, [r3, #12]
 801ad30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801ad32:	68ba      	ldr	r2, [r7, #8]
 801ad34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801ad38:	4013      	ands	r3, r2
 801ad3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801ad40:	68bb      	ldr	r3, [r7, #8]
 801ad42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801ad44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801ad48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ad4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801ad4e:	4a04      	ldr	r2, [pc, #16]	; (801ad60 <__NVIC_SetPriorityGrouping+0x44>)
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	60d3      	str	r3, [r2, #12]
}
 801ad54:	bf00      	nop
 801ad56:	3714      	adds	r7, #20
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad5e:	4770      	bx	lr
 801ad60:	e000ed00 	.word	0xe000ed00

0801ad64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801ad64:	b480      	push	{r7}
 801ad66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801ad68:	4b04      	ldr	r3, [pc, #16]	; (801ad7c <__NVIC_GetPriorityGrouping+0x18>)
 801ad6a:	68db      	ldr	r3, [r3, #12]
 801ad6c:	0a1b      	lsrs	r3, r3, #8
 801ad6e:	f003 0307 	and.w	r3, r3, #7
}
 801ad72:	4618      	mov	r0, r3
 801ad74:	46bd      	mov	sp, r7
 801ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7a:	4770      	bx	lr
 801ad7c:	e000ed00 	.word	0xe000ed00

0801ad80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801ad80:	b480      	push	{r7}
 801ad82:	b083      	sub	sp, #12
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	4603      	mov	r3, r0
 801ad88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801ad8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	db0b      	blt.n	801adaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801ad92:	79fb      	ldrb	r3, [r7, #7]
 801ad94:	f003 021f 	and.w	r2, r3, #31
 801ad98:	4907      	ldr	r1, [pc, #28]	; (801adb8 <__NVIC_EnableIRQ+0x38>)
 801ad9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801ad9e:	095b      	lsrs	r3, r3, #5
 801ada0:	2001      	movs	r0, #1
 801ada2:	fa00 f202 	lsl.w	r2, r0, r2
 801ada6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801adaa:	bf00      	nop
 801adac:	370c      	adds	r7, #12
 801adae:	46bd      	mov	sp, r7
 801adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adb4:	4770      	bx	lr
 801adb6:	bf00      	nop
 801adb8:	e000e100 	.word	0xe000e100

0801adbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801adbc:	b480      	push	{r7}
 801adbe:	b083      	sub	sp, #12
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	4603      	mov	r3, r0
 801adc4:	6039      	str	r1, [r7, #0]
 801adc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801adc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	db0a      	blt.n	801ade6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801add0:	683b      	ldr	r3, [r7, #0]
 801add2:	b2da      	uxtb	r2, r3
 801add4:	490c      	ldr	r1, [pc, #48]	; (801ae08 <__NVIC_SetPriority+0x4c>)
 801add6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801adda:	0112      	lsls	r2, r2, #4
 801addc:	b2d2      	uxtb	r2, r2
 801adde:	440b      	add	r3, r1
 801ade0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801ade4:	e00a      	b.n	801adfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801ade6:	683b      	ldr	r3, [r7, #0]
 801ade8:	b2da      	uxtb	r2, r3
 801adea:	4908      	ldr	r1, [pc, #32]	; (801ae0c <__NVIC_SetPriority+0x50>)
 801adec:	79fb      	ldrb	r3, [r7, #7]
 801adee:	f003 030f 	and.w	r3, r3, #15
 801adf2:	3b04      	subs	r3, #4
 801adf4:	0112      	lsls	r2, r2, #4
 801adf6:	b2d2      	uxtb	r2, r2
 801adf8:	440b      	add	r3, r1
 801adfa:	761a      	strb	r2, [r3, #24]
}
 801adfc:	bf00      	nop
 801adfe:	370c      	adds	r7, #12
 801ae00:	46bd      	mov	sp, r7
 801ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae06:	4770      	bx	lr
 801ae08:	e000e100 	.word	0xe000e100
 801ae0c:	e000ed00 	.word	0xe000ed00

0801ae10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801ae10:	b480      	push	{r7}
 801ae12:	b089      	sub	sp, #36	; 0x24
 801ae14:	af00      	add	r7, sp, #0
 801ae16:	60f8      	str	r0, [r7, #12]
 801ae18:	60b9      	str	r1, [r7, #8]
 801ae1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801ae1c:	68fb      	ldr	r3, [r7, #12]
 801ae1e:	f003 0307 	and.w	r3, r3, #7
 801ae22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801ae24:	69fb      	ldr	r3, [r7, #28]
 801ae26:	f1c3 0307 	rsb	r3, r3, #7
 801ae2a:	2b04      	cmp	r3, #4
 801ae2c:	bf28      	it	cs
 801ae2e:	2304      	movcs	r3, #4
 801ae30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801ae32:	69fb      	ldr	r3, [r7, #28]
 801ae34:	3304      	adds	r3, #4
 801ae36:	2b06      	cmp	r3, #6
 801ae38:	d902      	bls.n	801ae40 <NVIC_EncodePriority+0x30>
 801ae3a:	69fb      	ldr	r3, [r7, #28]
 801ae3c:	3b03      	subs	r3, #3
 801ae3e:	e000      	b.n	801ae42 <NVIC_EncodePriority+0x32>
 801ae40:	2300      	movs	r3, #0
 801ae42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ae44:	f04f 32ff 	mov.w	r2, #4294967295
 801ae48:	69bb      	ldr	r3, [r7, #24]
 801ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae4e:	43da      	mvns	r2, r3
 801ae50:	68bb      	ldr	r3, [r7, #8]
 801ae52:	401a      	ands	r2, r3
 801ae54:	697b      	ldr	r3, [r7, #20]
 801ae56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801ae58:	f04f 31ff 	mov.w	r1, #4294967295
 801ae5c:	697b      	ldr	r3, [r7, #20]
 801ae5e:	fa01 f303 	lsl.w	r3, r1, r3
 801ae62:	43d9      	mvns	r1, r3
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801ae68:	4313      	orrs	r3, r2
         );
}
 801ae6a:	4618      	mov	r0, r3
 801ae6c:	3724      	adds	r7, #36	; 0x24
 801ae6e:	46bd      	mov	sp, r7
 801ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae74:	4770      	bx	lr
	...

0801ae78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b082      	sub	sp, #8
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	3b01      	subs	r3, #1
 801ae84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ae88:	d301      	bcc.n	801ae8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	e00f      	b.n	801aeae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801ae8e:	4a0a      	ldr	r2, [pc, #40]	; (801aeb8 <SysTick_Config+0x40>)
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	3b01      	subs	r3, #1
 801ae94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801ae96:	210f      	movs	r1, #15
 801ae98:	f04f 30ff 	mov.w	r0, #4294967295
 801ae9c:	f7ff ff8e 	bl	801adbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801aea0:	4b05      	ldr	r3, [pc, #20]	; (801aeb8 <SysTick_Config+0x40>)
 801aea2:	2200      	movs	r2, #0
 801aea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801aea6:	4b04      	ldr	r3, [pc, #16]	; (801aeb8 <SysTick_Config+0x40>)
 801aea8:	2207      	movs	r2, #7
 801aeaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801aeac:	2300      	movs	r3, #0
}
 801aeae:	4618      	mov	r0, r3
 801aeb0:	3708      	adds	r7, #8
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}
 801aeb6:	bf00      	nop
 801aeb8:	e000e010 	.word	0xe000e010

0801aebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b082      	sub	sp, #8
 801aec0:	af00      	add	r7, sp, #0
 801aec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801aec4:	6878      	ldr	r0, [r7, #4]
 801aec6:	f7ff ff29 	bl	801ad1c <__NVIC_SetPriorityGrouping>
}
 801aeca:	bf00      	nop
 801aecc:	3708      	adds	r7, #8
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}

0801aed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801aed2:	b580      	push	{r7, lr}
 801aed4:	b086      	sub	sp, #24
 801aed6:	af00      	add	r7, sp, #0
 801aed8:	4603      	mov	r3, r0
 801aeda:	60b9      	str	r1, [r7, #8]
 801aedc:	607a      	str	r2, [r7, #4]
 801aede:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801aee0:	f7ff ff40 	bl	801ad64 <__NVIC_GetPriorityGrouping>
 801aee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801aee6:	687a      	ldr	r2, [r7, #4]
 801aee8:	68b9      	ldr	r1, [r7, #8]
 801aeea:	6978      	ldr	r0, [r7, #20]
 801aeec:	f7ff ff90 	bl	801ae10 <NVIC_EncodePriority>
 801aef0:	4602      	mov	r2, r0
 801aef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801aef6:	4611      	mov	r1, r2
 801aef8:	4618      	mov	r0, r3
 801aefa:	f7ff ff5f 	bl	801adbc <__NVIC_SetPriority>
}
 801aefe:	bf00      	nop
 801af00:	3718      	adds	r7, #24
 801af02:	46bd      	mov	sp, r7
 801af04:	bd80      	pop	{r7, pc}

0801af06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801af06:	b580      	push	{r7, lr}
 801af08:	b082      	sub	sp, #8
 801af0a:	af00      	add	r7, sp, #0
 801af0c:	4603      	mov	r3, r0
 801af0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801af10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af14:	4618      	mov	r0, r3
 801af16:	f7ff ff33 	bl	801ad80 <__NVIC_EnableIRQ>
}
 801af1a:	bf00      	nop
 801af1c:	3708      	adds	r7, #8
 801af1e:	46bd      	mov	sp, r7
 801af20:	bd80      	pop	{r7, pc}

0801af22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801af22:	b580      	push	{r7, lr}
 801af24:	b082      	sub	sp, #8
 801af26:	af00      	add	r7, sp, #0
 801af28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801af2a:	6878      	ldr	r0, [r7, #4]
 801af2c:	f7ff ffa4 	bl	801ae78 <SysTick_Config>
 801af30:	4603      	mov	r3, r0
}
 801af32:	4618      	mov	r0, r3
 801af34:	3708      	adds	r7, #8
 801af36:	46bd      	mov	sp, r7
 801af38:	bd80      	pop	{r7, pc}
	...

0801af3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801af3c:	b580      	push	{r7, lr}
 801af3e:	b084      	sub	sp, #16
 801af40:	af00      	add	r7, sp, #0
 801af42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	2b00      	cmp	r3, #0
 801af48:	d101      	bne.n	801af4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801af4a:	2301      	movs	r3, #1
 801af4c:	e08d      	b.n	801b06a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	461a      	mov	r2, r3
 801af54:	4b47      	ldr	r3, [pc, #284]	; (801b074 <HAL_DMA_Init+0x138>)
 801af56:	429a      	cmp	r2, r3
 801af58:	d80f      	bhi.n	801af7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	461a      	mov	r2, r3
 801af60:	4b45      	ldr	r3, [pc, #276]	; (801b078 <HAL_DMA_Init+0x13c>)
 801af62:	4413      	add	r3, r2
 801af64:	4a45      	ldr	r2, [pc, #276]	; (801b07c <HAL_DMA_Init+0x140>)
 801af66:	fba2 2303 	umull	r2, r3, r2, r3
 801af6a:	091b      	lsrs	r3, r3, #4
 801af6c:	009a      	lsls	r2, r3, #2
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	4a42      	ldr	r2, [pc, #264]	; (801b080 <HAL_DMA_Init+0x144>)
 801af76:	641a      	str	r2, [r3, #64]	; 0x40
 801af78:	e00e      	b.n	801af98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	461a      	mov	r2, r3
 801af80:	4b40      	ldr	r3, [pc, #256]	; (801b084 <HAL_DMA_Init+0x148>)
 801af82:	4413      	add	r3, r2
 801af84:	4a3d      	ldr	r2, [pc, #244]	; (801b07c <HAL_DMA_Init+0x140>)
 801af86:	fba2 2303 	umull	r2, r3, r2, r3
 801af8a:	091b      	lsrs	r3, r3, #4
 801af8c:	009a      	lsls	r2, r3, #2
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	4a3c      	ldr	r2, [pc, #240]	; (801b088 <HAL_DMA_Init+0x14c>)
 801af96:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	2202      	movs	r2, #2
 801af9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801afa0:	687b      	ldr	r3, [r7, #4]
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801afa8:	68fb      	ldr	r3, [r7, #12]
 801afaa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801afae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801afb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801afb4:	687b      	ldr	r3, [r7, #4]
 801afb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801afbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	691b      	ldr	r3, [r3, #16]
 801afc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801afc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	699b      	ldr	r3, [r3, #24]
 801afce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801afd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	6a1b      	ldr	r3, [r3, #32]
 801afda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801afdc:	68fa      	ldr	r2, [r7, #12]
 801afde:	4313      	orrs	r3, r2
 801afe0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	68fa      	ldr	r2, [r7, #12]
 801afe8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801afea:	6878      	ldr	r0, [r7, #4]
 801afec:	f000 fa10 	bl	801b410 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801aff0:	687b      	ldr	r3, [r7, #4]
 801aff2:	689b      	ldr	r3, [r3, #8]
 801aff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801aff8:	d102      	bne.n	801b000 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801affa:	687b      	ldr	r3, [r7, #4]
 801affc:	2200      	movs	r2, #0
 801affe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	685a      	ldr	r2, [r3, #4]
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b008:	b2d2      	uxtb	r2, r2
 801b00a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b010:	687a      	ldr	r2, [r7, #4]
 801b012:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b014:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	685b      	ldr	r3, [r3, #4]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d010      	beq.n	801b040 <HAL_DMA_Init+0x104>
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	685b      	ldr	r3, [r3, #4]
 801b022:	2b04      	cmp	r3, #4
 801b024:	d80c      	bhi.n	801b040 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b026:	6878      	ldr	r0, [r7, #4]
 801b028:	f000 fa30 	bl	801b48c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b030:	2200      	movs	r2, #0
 801b032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b038:	687a      	ldr	r2, [r7, #4]
 801b03a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b03c:	605a      	str	r2, [r3, #4]
 801b03e:	e008      	b.n	801b052 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	2200      	movs	r2, #0
 801b044:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	2200      	movs	r2, #0
 801b04a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	2200      	movs	r2, #0
 801b050:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	2200      	movs	r2, #0
 801b056:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2201      	movs	r2, #1
 801b05c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	2200      	movs	r2, #0
 801b064:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b068:	2300      	movs	r3, #0
}
 801b06a:	4618      	mov	r0, r3
 801b06c:	3710      	adds	r7, #16
 801b06e:	46bd      	mov	sp, r7
 801b070:	bd80      	pop	{r7, pc}
 801b072:	bf00      	nop
 801b074:	40020407 	.word	0x40020407
 801b078:	bffdfff8 	.word	0xbffdfff8
 801b07c:	cccccccd 	.word	0xcccccccd
 801b080:	40020000 	.word	0x40020000
 801b084:	bffdfbf8 	.word	0xbffdfbf8
 801b088:	40020400 	.word	0x40020400

0801b08c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801b08c:	b580      	push	{r7, lr}
 801b08e:	b086      	sub	sp, #24
 801b090:	af00      	add	r7, sp, #0
 801b092:	60f8      	str	r0, [r7, #12]
 801b094:	60b9      	str	r1, [r7, #8]
 801b096:	607a      	str	r2, [r7, #4]
 801b098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b09a:	2300      	movs	r3, #0
 801b09c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801b09e:	68fb      	ldr	r3, [r7, #12]
 801b0a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b0a4:	2b01      	cmp	r3, #1
 801b0a6:	d101      	bne.n	801b0ac <HAL_DMA_Start_IT+0x20>
 801b0a8:	2302      	movs	r3, #2
 801b0aa:	e066      	b.n	801b17a <HAL_DMA_Start_IT+0xee>
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	2201      	movs	r2, #1
 801b0b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b0ba:	b2db      	uxtb	r3, r3
 801b0bc:	2b01      	cmp	r3, #1
 801b0be:	d155      	bne.n	801b16c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b0c0:	68fb      	ldr	r3, [r7, #12]
 801b0c2:	2202      	movs	r2, #2
 801b0c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	2200      	movs	r2, #0
 801b0cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801b0ce:	68fb      	ldr	r3, [r7, #12]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	f022 0201 	bic.w	r2, r2, #1
 801b0dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b0de:	683b      	ldr	r3, [r7, #0]
 801b0e0:	687a      	ldr	r2, [r7, #4]
 801b0e2:	68b9      	ldr	r1, [r7, #8]
 801b0e4:	68f8      	ldr	r0, [r7, #12]
 801b0e6:	f000 f954 	bl	801b392 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801b0ea:	68fb      	ldr	r3, [r7, #12]
 801b0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d008      	beq.n	801b104 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	681a      	ldr	r2, [r3, #0]
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	f042 020e 	orr.w	r2, r2, #14
 801b100:	601a      	str	r2, [r3, #0]
 801b102:	e00f      	b.n	801b124 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	681a      	ldr	r2, [r3, #0]
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	f022 0204 	bic.w	r2, r2, #4
 801b112:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b114:	68fb      	ldr	r3, [r7, #12]
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	681a      	ldr	r2, [r3, #0]
 801b11a:	68fb      	ldr	r3, [r7, #12]
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	f042 020a 	orr.w	r2, r2, #10
 801b122:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b124:	68fb      	ldr	r3, [r7, #12]
 801b126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d007      	beq.n	801b142 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b132:	68fb      	ldr	r3, [r7, #12]
 801b134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b136:	681a      	ldr	r2, [r3, #0]
 801b138:	68fb      	ldr	r3, [r7, #12]
 801b13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b13c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b140:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b142:	68fb      	ldr	r3, [r7, #12]
 801b144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b146:	2b00      	cmp	r3, #0
 801b148:	d007      	beq.n	801b15a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b14e:	681a      	ldr	r2, [r3, #0]
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b158:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	681a      	ldr	r2, [r3, #0]
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	f042 0201 	orr.w	r2, r2, #1
 801b168:	601a      	str	r2, [r3, #0]
 801b16a:	e005      	b.n	801b178 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	2200      	movs	r2, #0
 801b170:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b174:	2302      	movs	r3, #2
 801b176:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b178:	7dfb      	ldrb	r3, [r7, #23]
}
 801b17a:	4618      	mov	r0, r3
 801b17c:	3718      	adds	r7, #24
 801b17e:	46bd      	mov	sp, r7
 801b180:	bd80      	pop	{r7, pc}

0801b182 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b182:	b480      	push	{r7}
 801b184:	b085      	sub	sp, #20
 801b186:	af00      	add	r7, sp, #0
 801b188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b18a:	2300      	movs	r3, #0
 801b18c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b194:	b2db      	uxtb	r3, r3
 801b196:	2b02      	cmp	r3, #2
 801b198:	d005      	beq.n	801b1a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	2204      	movs	r2, #4
 801b19e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b1a0:	2301      	movs	r3, #1
 801b1a2:	73fb      	strb	r3, [r7, #15]
 801b1a4:	e037      	b.n	801b216 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b1a6:	687b      	ldr	r3, [r7, #4]
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	681a      	ldr	r2, [r3, #0]
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	681b      	ldr	r3, [r3, #0]
 801b1b0:	f022 020e 	bic.w	r2, r2, #14
 801b1b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b1b6:	687b      	ldr	r3, [r7, #4]
 801b1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b1ba:	681a      	ldr	r2, [r3, #0]
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b1c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b1c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	681a      	ldr	r2, [r3, #0]
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	681b      	ldr	r3, [r3, #0]
 801b1d0:	f022 0201 	bic.w	r2, r2, #1
 801b1d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1da:	f003 021f 	and.w	r2, r3, #31
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b1e2:	2101      	movs	r1, #1
 801b1e4:	fa01 f202 	lsl.w	r2, r1, r2
 801b1e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b1ea:	687b      	ldr	r3, [r7, #4]
 801b1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b1ee:	687a      	ldr	r2, [r7, #4]
 801b1f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b1f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d00c      	beq.n	801b216 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b200:	681a      	ldr	r2, [r3, #0]
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b206:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b20a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b210:	687a      	ldr	r2, [r7, #4]
 801b212:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b214:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	2201      	movs	r2, #1
 801b21a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	2200      	movs	r2, #0
 801b222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b226:	7bfb      	ldrb	r3, [r7, #15]
}
 801b228:	4618      	mov	r0, r3
 801b22a:	3714      	adds	r7, #20
 801b22c:	46bd      	mov	sp, r7
 801b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b232:	4770      	bx	lr

0801b234 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b234:	b580      	push	{r7, lr}
 801b236:	b084      	sub	sp, #16
 801b238:	af00      	add	r7, sp, #0
 801b23a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b250:	f003 031f 	and.w	r3, r3, #31
 801b254:	2204      	movs	r2, #4
 801b256:	409a      	lsls	r2, r3
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	4013      	ands	r3, r2
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d026      	beq.n	801b2ae <HAL_DMA_IRQHandler+0x7a>
 801b260:	68bb      	ldr	r3, [r7, #8]
 801b262:	f003 0304 	and.w	r3, r3, #4
 801b266:	2b00      	cmp	r3, #0
 801b268:	d021      	beq.n	801b2ae <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	f003 0320 	and.w	r3, r3, #32
 801b274:	2b00      	cmp	r3, #0
 801b276:	d107      	bne.n	801b288 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	681a      	ldr	r2, [r3, #0]
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	f022 0204 	bic.w	r2, r2, #4
 801b286:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b28c:	f003 021f 	and.w	r2, r3, #31
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b294:	2104      	movs	r1, #4
 801b296:	fa01 f202 	lsl.w	r2, r1, r2
 801b29a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d071      	beq.n	801b388 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b2a8:	6878      	ldr	r0, [r7, #4]
 801b2aa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b2ac:	e06c      	b.n	801b388 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2b2:	f003 031f 	and.w	r3, r3, #31
 801b2b6:	2202      	movs	r2, #2
 801b2b8:	409a      	lsls	r2, r3
 801b2ba:	68fb      	ldr	r3, [r7, #12]
 801b2bc:	4013      	ands	r3, r2
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d02e      	beq.n	801b320 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b2c2:	68bb      	ldr	r3, [r7, #8]
 801b2c4:	f003 0302 	and.w	r3, r3, #2
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d029      	beq.n	801b320 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	f003 0320 	and.w	r3, r3, #32
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d10b      	bne.n	801b2f2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	681a      	ldr	r2, [r3, #0]
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	f022 020a 	bic.w	r2, r2, #10
 801b2e8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	2201      	movs	r2, #1
 801b2ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b2f6:	f003 021f 	and.w	r2, r3, #31
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b2fe:	2102      	movs	r1, #2
 801b300:	fa01 f202 	lsl.w	r2, r1, r2
 801b304:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2200      	movs	r2, #0
 801b30a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b312:	2b00      	cmp	r3, #0
 801b314:	d038      	beq.n	801b388 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b31a:	6878      	ldr	r0, [r7, #4]
 801b31c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b31e:	e033      	b.n	801b388 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b324:	f003 031f 	and.w	r3, r3, #31
 801b328:	2208      	movs	r2, #8
 801b32a:	409a      	lsls	r2, r3
 801b32c:	68fb      	ldr	r3, [r7, #12]
 801b32e:	4013      	ands	r3, r2
 801b330:	2b00      	cmp	r3, #0
 801b332:	d02a      	beq.n	801b38a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b334:	68bb      	ldr	r3, [r7, #8]
 801b336:	f003 0308 	and.w	r3, r3, #8
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	d025      	beq.n	801b38a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	681a      	ldr	r2, [r3, #0]
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	681b      	ldr	r3, [r3, #0]
 801b348:	f022 020e 	bic.w	r2, r2, #14
 801b34c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b352:	f003 021f 	and.w	r2, r3, #31
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b35a:	2101      	movs	r1, #1
 801b35c:	fa01 f202 	lsl.w	r2, r1, r2
 801b360:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	2201      	movs	r2, #1
 801b366:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b368:	687b      	ldr	r3, [r7, #4]
 801b36a:	2201      	movs	r2, #1
 801b36c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	2200      	movs	r2, #0
 801b374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d004      	beq.n	801b38a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b388:	bf00      	nop
 801b38a:	bf00      	nop
}
 801b38c:	3710      	adds	r7, #16
 801b38e:	46bd      	mov	sp, r7
 801b390:	bd80      	pop	{r7, pc}

0801b392 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b392:	b480      	push	{r7}
 801b394:	b085      	sub	sp, #20
 801b396:	af00      	add	r7, sp, #0
 801b398:	60f8      	str	r0, [r7, #12]
 801b39a:	60b9      	str	r1, [r7, #8]
 801b39c:	607a      	str	r2, [r7, #4]
 801b39e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b3a4:	68fa      	ldr	r2, [r7, #12]
 801b3a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b3a8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b3aa:	68fb      	ldr	r3, [r7, #12]
 801b3ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	d004      	beq.n	801b3bc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3b6:	68fa      	ldr	r2, [r7, #12]
 801b3b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b3ba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b3bc:	68fb      	ldr	r3, [r7, #12]
 801b3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b3c0:	f003 021f 	and.w	r2, r3, #31
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b3c8:	2101      	movs	r1, #1
 801b3ca:	fa01 f202 	lsl.w	r2, r1, r2
 801b3ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b3d0:	68fb      	ldr	r3, [r7, #12]
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	683a      	ldr	r2, [r7, #0]
 801b3d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	689b      	ldr	r3, [r3, #8]
 801b3dc:	2b10      	cmp	r3, #16
 801b3de:	d108      	bne.n	801b3f2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b3e0:	68fb      	ldr	r3, [r7, #12]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	687a      	ldr	r2, [r7, #4]
 801b3e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	68ba      	ldr	r2, [r7, #8]
 801b3ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b3f0:	e007      	b.n	801b402 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b3f2:	68fb      	ldr	r3, [r7, #12]
 801b3f4:	681b      	ldr	r3, [r3, #0]
 801b3f6:	68ba      	ldr	r2, [r7, #8]
 801b3f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b3fa:	68fb      	ldr	r3, [r7, #12]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	687a      	ldr	r2, [r7, #4]
 801b400:	60da      	str	r2, [r3, #12]
}
 801b402:	bf00      	nop
 801b404:	3714      	adds	r7, #20
 801b406:	46bd      	mov	sp, r7
 801b408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b40c:	4770      	bx	lr
	...

0801b410 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b410:	b480      	push	{r7}
 801b412:	b087      	sub	sp, #28
 801b414:	af00      	add	r7, sp, #0
 801b416:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	461a      	mov	r2, r3
 801b41e:	4b16      	ldr	r3, [pc, #88]	; (801b478 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b420:	429a      	cmp	r2, r3
 801b422:	d802      	bhi.n	801b42a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b424:	4b15      	ldr	r3, [pc, #84]	; (801b47c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b426:	617b      	str	r3, [r7, #20]
 801b428:	e001      	b.n	801b42e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b42a:	4b15      	ldr	r3, [pc, #84]	; (801b480 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b42c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b42e:	697b      	ldr	r3, [r7, #20]
 801b430:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	b2db      	uxtb	r3, r3
 801b438:	3b08      	subs	r3, #8
 801b43a:	4a12      	ldr	r2, [pc, #72]	; (801b484 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b43c:	fba2 2303 	umull	r2, r3, r2, r3
 801b440:	091b      	lsrs	r3, r3, #4
 801b442:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b448:	089b      	lsrs	r3, r3, #2
 801b44a:	009a      	lsls	r2, r3, #2
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	4413      	add	r3, r2
 801b450:	461a      	mov	r2, r3
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	4a0b      	ldr	r2, [pc, #44]	; (801b488 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b45a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	f003 031f 	and.w	r3, r3, #31
 801b462:	2201      	movs	r2, #1
 801b464:	409a      	lsls	r2, r3
 801b466:	687b      	ldr	r3, [r7, #4]
 801b468:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b46a:	bf00      	nop
 801b46c:	371c      	adds	r7, #28
 801b46e:	46bd      	mov	sp, r7
 801b470:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b474:	4770      	bx	lr
 801b476:	bf00      	nop
 801b478:	40020407 	.word	0x40020407
 801b47c:	40020800 	.word	0x40020800
 801b480:	40020820 	.word	0x40020820
 801b484:	cccccccd 	.word	0xcccccccd
 801b488:	40020880 	.word	0x40020880

0801b48c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b48c:	b480      	push	{r7}
 801b48e:	b085      	sub	sp, #20
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	685b      	ldr	r3, [r3, #4]
 801b498:	b2db      	uxtb	r3, r3
 801b49a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b49c:	68fa      	ldr	r2, [r7, #12]
 801b49e:	4b0b      	ldr	r3, [pc, #44]	; (801b4cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b4a0:	4413      	add	r3, r2
 801b4a2:	009b      	lsls	r3, r3, #2
 801b4a4:	461a      	mov	r2, r3
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	4a08      	ldr	r2, [pc, #32]	; (801b4d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b4ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	3b01      	subs	r3, #1
 801b4b4:	f003 031f 	and.w	r3, r3, #31
 801b4b8:	2201      	movs	r2, #1
 801b4ba:	409a      	lsls	r2, r3
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b4c0:	bf00      	nop
 801b4c2:	3714      	adds	r7, #20
 801b4c4:	46bd      	mov	sp, r7
 801b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4ca:	4770      	bx	lr
 801b4cc:	1000823f 	.word	0x1000823f
 801b4d0:	40020940 	.word	0x40020940

0801b4d4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b4d4:	b580      	push	{r7, lr}
 801b4d6:	b086      	sub	sp, #24
 801b4d8:	af00      	add	r7, sp, #0
 801b4da:	60f8      	str	r0, [r7, #12]
 801b4dc:	60b9      	str	r1, [r7, #8]
 801b4de:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b4e6:	4b24      	ldr	r3, [pc, #144]	; (801b578 <HAL_FLASH_Program+0xa4>)
 801b4e8:	781b      	ldrb	r3, [r3, #0]
 801b4ea:	2b01      	cmp	r3, #1
 801b4ec:	d101      	bne.n	801b4f2 <HAL_FLASH_Program+0x1e>
 801b4ee:	2302      	movs	r3, #2
 801b4f0:	e03e      	b.n	801b570 <HAL_FLASH_Program+0x9c>
 801b4f2:	4b21      	ldr	r3, [pc, #132]	; (801b578 <HAL_FLASH_Program+0xa4>)
 801b4f4:	2201      	movs	r2, #1
 801b4f6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b4f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b4fc:	f000 f87c 	bl	801b5f8 <FLASH_WaitForLastOperation>
 801b500:	4603      	mov	r3, r0
 801b502:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b504:	7dfb      	ldrb	r3, [r7, #23]
 801b506:	2b00      	cmp	r3, #0
 801b508:	d12e      	bne.n	801b568 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b50a:	4b1b      	ldr	r3, [pc, #108]	; (801b578 <HAL_FLASH_Program+0xa4>)
 801b50c:	2200      	movs	r2, #0
 801b50e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b510:	68fb      	ldr	r3, [r7, #12]
 801b512:	2b00      	cmp	r3, #0
 801b514:	d107      	bne.n	801b526 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b51a:	68b8      	ldr	r0, [r7, #8]
 801b51c:	f000 f8c0 	bl	801b6a0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b520:	2301      	movs	r3, #1
 801b522:	613b      	str	r3, [r7, #16]
 801b524:	e010      	b.n	801b548 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b526:	68fb      	ldr	r3, [r7, #12]
 801b528:	2b01      	cmp	r3, #1
 801b52a:	d002      	beq.n	801b532 <HAL_FLASH_Program+0x5e>
 801b52c:	68fb      	ldr	r3, [r7, #12]
 801b52e:	2b02      	cmp	r3, #2
 801b530:	d10a      	bne.n	801b548 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b532:	683b      	ldr	r3, [r7, #0]
 801b534:	4619      	mov	r1, r3
 801b536:	68b8      	ldr	r0, [r7, #8]
 801b538:	f000 f8d8 	bl	801b6ec <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b53c:	68fb      	ldr	r3, [r7, #12]
 801b53e:	2b02      	cmp	r3, #2
 801b540:	d102      	bne.n	801b548 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b542:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b546:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b548:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b54c:	f000 f854 	bl	801b5f8 <FLASH_WaitForLastOperation>
 801b550:	4603      	mov	r3, r0
 801b552:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b554:	693b      	ldr	r3, [r7, #16]
 801b556:	2b00      	cmp	r3, #0
 801b558:	d006      	beq.n	801b568 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b55a:	4b08      	ldr	r3, [pc, #32]	; (801b57c <HAL_FLASH_Program+0xa8>)
 801b55c:	695a      	ldr	r2, [r3, #20]
 801b55e:	693b      	ldr	r3, [r7, #16]
 801b560:	43db      	mvns	r3, r3
 801b562:	4906      	ldr	r1, [pc, #24]	; (801b57c <HAL_FLASH_Program+0xa8>)
 801b564:	4013      	ands	r3, r2
 801b566:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b568:	4b03      	ldr	r3, [pc, #12]	; (801b578 <HAL_FLASH_Program+0xa4>)
 801b56a:	2200      	movs	r2, #0
 801b56c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b56e:	7dfb      	ldrb	r3, [r7, #23]
}
 801b570:	4618      	mov	r0, r3
 801b572:	3718      	adds	r7, #24
 801b574:	46bd      	mov	sp, r7
 801b576:	bd80      	pop	{r7, pc}
 801b578:	2000000c 	.word	0x2000000c
 801b57c:	40022000 	.word	0x40022000

0801b580 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b580:	b480      	push	{r7}
 801b582:	b083      	sub	sp, #12
 801b584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b586:	2300      	movs	r3, #0
 801b588:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b58a:	4b0b      	ldr	r3, [pc, #44]	; (801b5b8 <HAL_FLASH_Unlock+0x38>)
 801b58c:	695b      	ldr	r3, [r3, #20]
 801b58e:	2b00      	cmp	r3, #0
 801b590:	da0b      	bge.n	801b5aa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b592:	4b09      	ldr	r3, [pc, #36]	; (801b5b8 <HAL_FLASH_Unlock+0x38>)
 801b594:	4a09      	ldr	r2, [pc, #36]	; (801b5bc <HAL_FLASH_Unlock+0x3c>)
 801b596:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b598:	4b07      	ldr	r3, [pc, #28]	; (801b5b8 <HAL_FLASH_Unlock+0x38>)
 801b59a:	4a09      	ldr	r2, [pc, #36]	; (801b5c0 <HAL_FLASH_Unlock+0x40>)
 801b59c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b59e:	4b06      	ldr	r3, [pc, #24]	; (801b5b8 <HAL_FLASH_Unlock+0x38>)
 801b5a0:	695b      	ldr	r3, [r3, #20]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	da01      	bge.n	801b5aa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b5a6:	2301      	movs	r3, #1
 801b5a8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b5aa:	79fb      	ldrb	r3, [r7, #7]
}
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	370c      	adds	r7, #12
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b6:	4770      	bx	lr
 801b5b8:	40022000 	.word	0x40022000
 801b5bc:	45670123 	.word	0x45670123
 801b5c0:	cdef89ab 	.word	0xcdef89ab

0801b5c4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b5c4:	b480      	push	{r7}
 801b5c6:	b083      	sub	sp, #12
 801b5c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801b5ca:	2301      	movs	r3, #1
 801b5cc:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b5ce:	4b09      	ldr	r3, [pc, #36]	; (801b5f4 <HAL_FLASH_Lock+0x30>)
 801b5d0:	695b      	ldr	r3, [r3, #20]
 801b5d2:	4a08      	ldr	r2, [pc, #32]	; (801b5f4 <HAL_FLASH_Lock+0x30>)
 801b5d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b5d8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b5da:	4b06      	ldr	r3, [pc, #24]	; (801b5f4 <HAL_FLASH_Lock+0x30>)
 801b5dc:	695b      	ldr	r3, [r3, #20]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	da01      	bge.n	801b5e6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801b5e2:	2300      	movs	r3, #0
 801b5e4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801b5e6:	79fb      	ldrb	r3, [r7, #7]
}
 801b5e8:	4618      	mov	r0, r3
 801b5ea:	370c      	adds	r7, #12
 801b5ec:	46bd      	mov	sp, r7
 801b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5f2:	4770      	bx	lr
 801b5f4:	40022000 	.word	0x40022000

0801b5f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b084      	sub	sp, #16
 801b5fc:	af00      	add	r7, sp, #0
 801b5fe:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b600:	f7fd f98a 	bl	8018918 <HAL_GetTick>
 801b604:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b606:	e009      	b.n	801b61c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801b608:	f7fd f986 	bl	8018918 <HAL_GetTick>
 801b60c:	4602      	mov	r2, r0
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	1ad3      	subs	r3, r2, r3
 801b612:	687a      	ldr	r2, [r7, #4]
 801b614:	429a      	cmp	r2, r3
 801b616:	d201      	bcs.n	801b61c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801b618:	2303      	movs	r3, #3
 801b61a:	e038      	b.n	801b68e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b61c:	4b1e      	ldr	r3, [pc, #120]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b61e:	691b      	ldr	r3, [r3, #16]
 801b620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b628:	d0ee      	beq.n	801b608 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801b62a:	4b1b      	ldr	r3, [pc, #108]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b62c:	691a      	ldr	r2, [r3, #16]
 801b62e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801b632:	4013      	ands	r3, r2
 801b634:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801b636:	68bb      	ldr	r3, [r7, #8]
 801b638:	2b00      	cmp	r3, #0
 801b63a:	d01e      	beq.n	801b67a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801b63c:	4b17      	ldr	r3, [pc, #92]	; (801b69c <FLASH_WaitForLastOperation+0xa4>)
 801b63e:	685a      	ldr	r2, [r3, #4]
 801b640:	68bb      	ldr	r3, [r7, #8]
 801b642:	4313      	orrs	r3, r2
 801b644:	4a15      	ldr	r2, [pc, #84]	; (801b69c <FLASH_WaitForLastOperation+0xa4>)
 801b646:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801b648:	68bb      	ldr	r3, [r7, #8]
 801b64a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b64e:	2b00      	cmp	r3, #0
 801b650:	d007      	beq.n	801b662 <FLASH_WaitForLastOperation+0x6a>
 801b652:	4b11      	ldr	r3, [pc, #68]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b654:	699a      	ldr	r2, [r3, #24]
 801b656:	68bb      	ldr	r3, [r7, #8]
 801b658:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b65c:	490e      	ldr	r1, [pc, #56]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b65e:	4313      	orrs	r3, r2
 801b660:	618b      	str	r3, [r1, #24]
 801b662:	68bb      	ldr	r3, [r7, #8]
 801b664:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d004      	beq.n	801b676 <FLASH_WaitForLastOperation+0x7e>
 801b66c:	4a0a      	ldr	r2, [pc, #40]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b66e:	68bb      	ldr	r3, [r7, #8]
 801b670:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b674:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801b676:	2301      	movs	r3, #1
 801b678:	e009      	b.n	801b68e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801b67a:	4b07      	ldr	r3, [pc, #28]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b67c:	691b      	ldr	r3, [r3, #16]
 801b67e:	f003 0301 	and.w	r3, r3, #1
 801b682:	2b01      	cmp	r3, #1
 801b684:	d102      	bne.n	801b68c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801b686:	4b04      	ldr	r3, [pc, #16]	; (801b698 <FLASH_WaitForLastOperation+0xa0>)
 801b688:	2201      	movs	r2, #1
 801b68a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801b68c:	2300      	movs	r3, #0
}
 801b68e:	4618      	mov	r0, r3
 801b690:	3710      	adds	r7, #16
 801b692:	46bd      	mov	sp, r7
 801b694:	bd80      	pop	{r7, pc}
 801b696:	bf00      	nop
 801b698:	40022000 	.word	0x40022000
 801b69c:	2000000c 	.word	0x2000000c

0801b6a0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b085      	sub	sp, #20
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	60f8      	str	r0, [r7, #12]
 801b6a8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801b6ac:	4b0e      	ldr	r3, [pc, #56]	; (801b6e8 <FLASH_Program_DoubleWord+0x48>)
 801b6ae:	695b      	ldr	r3, [r3, #20]
 801b6b0:	4a0d      	ldr	r2, [pc, #52]	; (801b6e8 <FLASH_Program_DoubleWord+0x48>)
 801b6b2:	f043 0301 	orr.w	r3, r3, #1
 801b6b6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	683a      	ldr	r2, [r7, #0]
 801b6bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b6be:	f3bf 8f6f 	isb	sy
}
 801b6c2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801b6c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b6c8:	f04f 0200 	mov.w	r2, #0
 801b6cc:	f04f 0300 	mov.w	r3, #0
 801b6d0:	000a      	movs	r2, r1
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	68f9      	ldr	r1, [r7, #12]
 801b6d6:	3104      	adds	r1, #4
 801b6d8:	4613      	mov	r3, r2
 801b6da:	600b      	str	r3, [r1, #0]
}
 801b6dc:	bf00      	nop
 801b6de:	3714      	adds	r7, #20
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e6:	4770      	bx	lr
 801b6e8:	40022000 	.word	0x40022000

0801b6ec <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801b6ec:	b480      	push	{r7}
 801b6ee:	b089      	sub	sp, #36	; 0x24
 801b6f0:	af00      	add	r7, sp, #0
 801b6f2:	6078      	str	r0, [r7, #4]
 801b6f4:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801b6f6:	2340      	movs	r3, #64	; 0x40
 801b6f8:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801b6fe:	683b      	ldr	r3, [r7, #0]
 801b700:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801b702:	4b14      	ldr	r3, [pc, #80]	; (801b754 <FLASH_Program_Fast+0x68>)
 801b704:	695b      	ldr	r3, [r3, #20]
 801b706:	4a13      	ldr	r2, [pc, #76]	; (801b754 <FLASH_Program_Fast+0x68>)
 801b708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b70c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b70e:	f3ef 8310 	mrs	r3, PRIMASK
 801b712:	60fb      	str	r3, [r7, #12]
  return(result);
 801b714:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801b716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b718:	b672      	cpsid	i
}
 801b71a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801b71c:	697b      	ldr	r3, [r7, #20]
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	69bb      	ldr	r3, [r7, #24]
 801b722:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801b724:	69bb      	ldr	r3, [r7, #24]
 801b726:	3304      	adds	r3, #4
 801b728:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	3304      	adds	r3, #4
 801b72e:	617b      	str	r3, [r7, #20]
    row_index--;
 801b730:	7ffb      	ldrb	r3, [r7, #31]
 801b732:	3b01      	subs	r3, #1
 801b734:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801b736:	7ffb      	ldrb	r3, [r7, #31]
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d1ef      	bne.n	801b71c <FLASH_Program_Fast+0x30>
 801b73c:	693b      	ldr	r3, [r7, #16]
 801b73e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	f383 8810 	msr	PRIMASK, r3
}
 801b746:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801b748:	bf00      	nop
 801b74a:	3724      	adds	r7, #36	; 0x24
 801b74c:	46bd      	mov	sp, r7
 801b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b752:	4770      	bx	lr
 801b754:	40022000 	.word	0x40022000

0801b758 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801b758:	b580      	push	{r7, lr}
 801b75a:	b084      	sub	sp, #16
 801b75c:	af00      	add	r7, sp, #0
 801b75e:	6078      	str	r0, [r7, #4]
 801b760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b762:	4b48      	ldr	r3, [pc, #288]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b764:	781b      	ldrb	r3, [r3, #0]
 801b766:	2b01      	cmp	r3, #1
 801b768:	d101      	bne.n	801b76e <HAL_FLASHEx_Erase+0x16>
 801b76a:	2302      	movs	r3, #2
 801b76c:	e085      	b.n	801b87a <HAL_FLASHEx_Erase+0x122>
 801b76e:	4b45      	ldr	r3, [pc, #276]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b770:	2201      	movs	r2, #1
 801b772:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b774:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b778:	f7ff ff3e 	bl	801b5f8 <FLASH_WaitForLastOperation>
 801b77c:	4603      	mov	r3, r0
 801b77e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801b780:	7bfb      	ldrb	r3, [r7, #15]
 801b782:	2b00      	cmp	r3, #0
 801b784:	d175      	bne.n	801b872 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b786:	4b3f      	ldr	r3, [pc, #252]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b788:	2200      	movs	r2, #0
 801b78a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801b78c:	4b3e      	ldr	r3, [pc, #248]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801b794:	2b00      	cmp	r3, #0
 801b796:	d013      	beq.n	801b7c0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b798:	4b3b      	ldr	r3, [pc, #236]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b79a:	681b      	ldr	r3, [r3, #0]
 801b79c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d009      	beq.n	801b7b8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801b7a4:	4b38      	ldr	r3, [pc, #224]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b7a6:	681b      	ldr	r3, [r3, #0]
 801b7a8:	4a37      	ldr	r2, [pc, #220]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b7aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b7ae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801b7b0:	4b34      	ldr	r3, [pc, #208]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b7b2:	2203      	movs	r2, #3
 801b7b4:	771a      	strb	r2, [r3, #28]
 801b7b6:	e016      	b.n	801b7e6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801b7b8:	4b32      	ldr	r3, [pc, #200]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b7ba:	2201      	movs	r2, #1
 801b7bc:	771a      	strb	r2, [r3, #28]
 801b7be:	e012      	b.n	801b7e6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801b7c0:	4b31      	ldr	r3, [pc, #196]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b7c8:	2b00      	cmp	r3, #0
 801b7ca:	d009      	beq.n	801b7e0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801b7cc:	4b2e      	ldr	r3, [pc, #184]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b7ce:	681b      	ldr	r3, [r3, #0]
 801b7d0:	4a2d      	ldr	r2, [pc, #180]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b7d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b7d6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801b7d8:	4b2a      	ldr	r3, [pc, #168]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b7da:	2202      	movs	r2, #2
 801b7dc:	771a      	strb	r2, [r3, #28]
 801b7de:	e002      	b.n	801b7e6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b7e0:	4b28      	ldr	r3, [pc, #160]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b7e2:	2200      	movs	r2, #0
 801b7e4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801b7e6:	687b      	ldr	r3, [r7, #4]
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	2b01      	cmp	r3, #1
 801b7ec:	d111      	bne.n	801b812 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	685b      	ldr	r3, [r3, #4]
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f000 f84a 	bl	801b88c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b7f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b7fc:	f7ff fefc 	bl	801b5f8 <FLASH_WaitForLastOperation>
 801b800:	4603      	mov	r3, r0
 801b802:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801b804:	4b20      	ldr	r3, [pc, #128]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b806:	695b      	ldr	r3, [r3, #20]
 801b808:	4a1f      	ldr	r2, [pc, #124]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b80a:	f023 0304 	bic.w	r3, r3, #4
 801b80e:	6153      	str	r3, [r2, #20]
 801b810:	e02d      	b.n	801b86e <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801b812:	683b      	ldr	r3, [r7, #0]
 801b814:	f04f 32ff 	mov.w	r2, #4294967295
 801b818:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	689b      	ldr	r3, [r3, #8]
 801b81e:	60bb      	str	r3, [r7, #8]
 801b820:	e01d      	b.n	801b85e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	4619      	mov	r1, r3
 801b828:	68b8      	ldr	r0, [r7, #8]
 801b82a:	f000 f84d 	bl	801b8c8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b82e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b832:	f7ff fee1 	bl	801b5f8 <FLASH_WaitForLastOperation>
 801b836:	4603      	mov	r3, r0
 801b838:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801b83a:	4b13      	ldr	r3, [pc, #76]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b83c:	695b      	ldr	r3, [r3, #20]
 801b83e:	4a12      	ldr	r2, [pc, #72]	; (801b888 <HAL_FLASHEx_Erase+0x130>)
 801b840:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801b844:	f023 0302 	bic.w	r3, r3, #2
 801b848:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801b84a:	7bfb      	ldrb	r3, [r7, #15]
 801b84c:	2b00      	cmp	r3, #0
 801b84e:	d003      	beq.n	801b858 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801b850:	683b      	ldr	r3, [r7, #0]
 801b852:	68ba      	ldr	r2, [r7, #8]
 801b854:	601a      	str	r2, [r3, #0]
          break;
 801b856:	e00a      	b.n	801b86e <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	3301      	adds	r3, #1
 801b85c:	60bb      	str	r3, [r7, #8]
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	689a      	ldr	r2, [r3, #8]
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	68db      	ldr	r3, [r3, #12]
 801b866:	4413      	add	r3, r2
 801b868:	68ba      	ldr	r2, [r7, #8]
 801b86a:	429a      	cmp	r2, r3
 801b86c:	d3d9      	bcc.n	801b822 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801b86e:	f000 f84f 	bl	801b910 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b872:	4b04      	ldr	r3, [pc, #16]	; (801b884 <HAL_FLASHEx_Erase+0x12c>)
 801b874:	2200      	movs	r2, #0
 801b876:	701a      	strb	r2, [r3, #0]

  return status;
 801b878:	7bfb      	ldrb	r3, [r7, #15]
}
 801b87a:	4618      	mov	r0, r3
 801b87c:	3710      	adds	r7, #16
 801b87e:	46bd      	mov	sp, r7
 801b880:	bd80      	pop	{r7, pc}
 801b882:	bf00      	nop
 801b884:	2000000c 	.word	0x2000000c
 801b888:	40022000 	.word	0x40022000

0801b88c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801b88c:	b480      	push	{r7}
 801b88e:	b083      	sub	sp, #12
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	f003 0301 	and.w	r3, r3, #1
 801b89a:	2b00      	cmp	r3, #0
 801b89c:	d005      	beq.n	801b8aa <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801b89e:	4b09      	ldr	r3, [pc, #36]	; (801b8c4 <FLASH_MassErase+0x38>)
 801b8a0:	695b      	ldr	r3, [r3, #20]
 801b8a2:	4a08      	ldr	r2, [pc, #32]	; (801b8c4 <FLASH_MassErase+0x38>)
 801b8a4:	f043 0304 	orr.w	r3, r3, #4
 801b8a8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801b8aa:	4b06      	ldr	r3, [pc, #24]	; (801b8c4 <FLASH_MassErase+0x38>)
 801b8ac:	695b      	ldr	r3, [r3, #20]
 801b8ae:	4a05      	ldr	r2, [pc, #20]	; (801b8c4 <FLASH_MassErase+0x38>)
 801b8b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b8b4:	6153      	str	r3, [r2, #20]
}
 801b8b6:	bf00      	nop
 801b8b8:	370c      	adds	r7, #12
 801b8ba:	46bd      	mov	sp, r7
 801b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8c0:	4770      	bx	lr
 801b8c2:	bf00      	nop
 801b8c4:	40022000 	.word	0x40022000

0801b8c8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801b8c8:	b480      	push	{r7}
 801b8ca:	b083      	sub	sp, #12
 801b8cc:	af00      	add	r7, sp, #0
 801b8ce:	6078      	str	r0, [r7, #4]
 801b8d0:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801b8d2:	4b0e      	ldr	r3, [pc, #56]	; (801b90c <FLASH_PageErase+0x44>)
 801b8d4:	695b      	ldr	r3, [r3, #20]
 801b8d6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	00db      	lsls	r3, r3, #3
 801b8de:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801b8e2:	490a      	ldr	r1, [pc, #40]	; (801b90c <FLASH_PageErase+0x44>)
 801b8e4:	4313      	orrs	r3, r2
 801b8e6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801b8e8:	4b08      	ldr	r3, [pc, #32]	; (801b90c <FLASH_PageErase+0x44>)
 801b8ea:	695b      	ldr	r3, [r3, #20]
 801b8ec:	4a07      	ldr	r2, [pc, #28]	; (801b90c <FLASH_PageErase+0x44>)
 801b8ee:	f043 0302 	orr.w	r3, r3, #2
 801b8f2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801b8f4:	4b05      	ldr	r3, [pc, #20]	; (801b90c <FLASH_PageErase+0x44>)
 801b8f6:	695b      	ldr	r3, [r3, #20]
 801b8f8:	4a04      	ldr	r2, [pc, #16]	; (801b90c <FLASH_PageErase+0x44>)
 801b8fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b8fe:	6153      	str	r3, [r2, #20]
}
 801b900:	bf00      	nop
 801b902:	370c      	adds	r7, #12
 801b904:	46bd      	mov	sp, r7
 801b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90a:	4770      	bx	lr
 801b90c:	40022000 	.word	0x40022000

0801b910 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801b910:	b480      	push	{r7}
 801b912:	b083      	sub	sp, #12
 801b914:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801b916:	4b21      	ldr	r3, [pc, #132]	; (801b99c <FLASH_FlushCaches+0x8c>)
 801b918:	7f1b      	ldrb	r3, [r3, #28]
 801b91a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801b91c:	79fb      	ldrb	r3, [r7, #7]
 801b91e:	2b01      	cmp	r3, #1
 801b920:	d002      	beq.n	801b928 <FLASH_FlushCaches+0x18>
 801b922:	79fb      	ldrb	r3, [r7, #7]
 801b924:	2b03      	cmp	r3, #3
 801b926:	d117      	bne.n	801b958 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801b928:	4b1d      	ldr	r3, [pc, #116]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	4a1c      	ldr	r2, [pc, #112]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b92e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801b932:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801b934:	4b1a      	ldr	r3, [pc, #104]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	4a19      	ldr	r2, [pc, #100]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b93a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801b93e:	6013      	str	r3, [r2, #0]
 801b940:	4b17      	ldr	r3, [pc, #92]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b942:	681b      	ldr	r3, [r3, #0]
 801b944:	4a16      	ldr	r2, [pc, #88]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801b94a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801b94c:	4b14      	ldr	r3, [pc, #80]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b94e:	681b      	ldr	r3, [r3, #0]
 801b950:	4a13      	ldr	r2, [pc, #76]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801b956:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801b958:	79fb      	ldrb	r3, [r7, #7]
 801b95a:	2b02      	cmp	r3, #2
 801b95c:	d002      	beq.n	801b964 <FLASH_FlushCaches+0x54>
 801b95e:	79fb      	ldrb	r3, [r7, #7]
 801b960:	2b03      	cmp	r3, #3
 801b962:	d111      	bne.n	801b988 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801b964:	4b0e      	ldr	r3, [pc, #56]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b966:	681b      	ldr	r3, [r3, #0]
 801b968:	4a0d      	ldr	r2, [pc, #52]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b96a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b96e:	6013      	str	r3, [r2, #0]
 801b970:	4b0b      	ldr	r3, [pc, #44]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b972:	681b      	ldr	r3, [r3, #0]
 801b974:	4a0a      	ldr	r2, [pc, #40]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b976:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b97a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801b97c:	4b08      	ldr	r3, [pc, #32]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b97e:	681b      	ldr	r3, [r3, #0]
 801b980:	4a07      	ldr	r2, [pc, #28]	; (801b9a0 <FLASH_FlushCaches+0x90>)
 801b982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b986:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801b988:	4b04      	ldr	r3, [pc, #16]	; (801b99c <FLASH_FlushCaches+0x8c>)
 801b98a:	2200      	movs	r2, #0
 801b98c:	771a      	strb	r2, [r3, #28]
}
 801b98e:	bf00      	nop
 801b990:	370c      	adds	r7, #12
 801b992:	46bd      	mov	sp, r7
 801b994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b998:	4770      	bx	lr
 801b99a:	bf00      	nop
 801b99c:	2000000c 	.word	0x2000000c
 801b9a0:	40022000 	.word	0x40022000

0801b9a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b9a4:	b480      	push	{r7}
 801b9a6:	b087      	sub	sp, #28
 801b9a8:	af00      	add	r7, sp, #0
 801b9aa:	6078      	str	r0, [r7, #4]
 801b9ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801b9b2:	e15a      	b.n	801bc6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	681a      	ldr	r2, [r3, #0]
 801b9b8:	2101      	movs	r1, #1
 801b9ba:	697b      	ldr	r3, [r7, #20]
 801b9bc:	fa01 f303 	lsl.w	r3, r1, r3
 801b9c0:	4013      	ands	r3, r2
 801b9c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801b9c4:	68fb      	ldr	r3, [r7, #12]
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	f000 814c 	beq.w	801bc64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801b9cc:	683b      	ldr	r3, [r7, #0]
 801b9ce:	685b      	ldr	r3, [r3, #4]
 801b9d0:	f003 0303 	and.w	r3, r3, #3
 801b9d4:	2b01      	cmp	r3, #1
 801b9d6:	d005      	beq.n	801b9e4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b9d8:	683b      	ldr	r3, [r7, #0]
 801b9da:	685b      	ldr	r3, [r3, #4]
 801b9dc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801b9e0:	2b02      	cmp	r3, #2
 801b9e2:	d130      	bne.n	801ba46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	689b      	ldr	r3, [r3, #8]
 801b9e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	005b      	lsls	r3, r3, #1
 801b9ee:	2203      	movs	r2, #3
 801b9f0:	fa02 f303 	lsl.w	r3, r2, r3
 801b9f4:	43db      	mvns	r3, r3
 801b9f6:	693a      	ldr	r2, [r7, #16]
 801b9f8:	4013      	ands	r3, r2
 801b9fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b9fc:	683b      	ldr	r3, [r7, #0]
 801b9fe:	68da      	ldr	r2, [r3, #12]
 801ba00:	697b      	ldr	r3, [r7, #20]
 801ba02:	005b      	lsls	r3, r3, #1
 801ba04:	fa02 f303 	lsl.w	r3, r2, r3
 801ba08:	693a      	ldr	r2, [r7, #16]
 801ba0a:	4313      	orrs	r3, r2
 801ba0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	693a      	ldr	r2, [r7, #16]
 801ba12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ba14:	687b      	ldr	r3, [r7, #4]
 801ba16:	685b      	ldr	r3, [r3, #4]
 801ba18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ba1a:	2201      	movs	r2, #1
 801ba1c:	697b      	ldr	r3, [r7, #20]
 801ba1e:	fa02 f303 	lsl.w	r3, r2, r3
 801ba22:	43db      	mvns	r3, r3
 801ba24:	693a      	ldr	r2, [r7, #16]
 801ba26:	4013      	ands	r3, r2
 801ba28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ba2a:	683b      	ldr	r3, [r7, #0]
 801ba2c:	685b      	ldr	r3, [r3, #4]
 801ba2e:	091b      	lsrs	r3, r3, #4
 801ba30:	f003 0201 	and.w	r2, r3, #1
 801ba34:	697b      	ldr	r3, [r7, #20]
 801ba36:	fa02 f303 	lsl.w	r3, r2, r3
 801ba3a:	693a      	ldr	r2, [r7, #16]
 801ba3c:	4313      	orrs	r3, r2
 801ba3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	693a      	ldr	r2, [r7, #16]
 801ba44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ba46:	683b      	ldr	r3, [r7, #0]
 801ba48:	685b      	ldr	r3, [r3, #4]
 801ba4a:	f003 0303 	and.w	r3, r3, #3
 801ba4e:	2b03      	cmp	r3, #3
 801ba50:	d017      	beq.n	801ba82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	68db      	ldr	r3, [r3, #12]
 801ba56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ba58:	697b      	ldr	r3, [r7, #20]
 801ba5a:	005b      	lsls	r3, r3, #1
 801ba5c:	2203      	movs	r2, #3
 801ba5e:	fa02 f303 	lsl.w	r3, r2, r3
 801ba62:	43db      	mvns	r3, r3
 801ba64:	693a      	ldr	r2, [r7, #16]
 801ba66:	4013      	ands	r3, r2
 801ba68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ba6a:	683b      	ldr	r3, [r7, #0]
 801ba6c:	689a      	ldr	r2, [r3, #8]
 801ba6e:	697b      	ldr	r3, [r7, #20]
 801ba70:	005b      	lsls	r3, r3, #1
 801ba72:	fa02 f303 	lsl.w	r3, r2, r3
 801ba76:	693a      	ldr	r2, [r7, #16]
 801ba78:	4313      	orrs	r3, r2
 801ba7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	693a      	ldr	r2, [r7, #16]
 801ba80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ba82:	683b      	ldr	r3, [r7, #0]
 801ba84:	685b      	ldr	r3, [r3, #4]
 801ba86:	f003 0303 	and.w	r3, r3, #3
 801ba8a:	2b02      	cmp	r3, #2
 801ba8c:	d123      	bne.n	801bad6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ba8e:	697b      	ldr	r3, [r7, #20]
 801ba90:	08da      	lsrs	r2, r3, #3
 801ba92:	687b      	ldr	r3, [r7, #4]
 801ba94:	3208      	adds	r2, #8
 801ba96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ba9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801ba9c:	697b      	ldr	r3, [r7, #20]
 801ba9e:	f003 0307 	and.w	r3, r3, #7
 801baa2:	009b      	lsls	r3, r3, #2
 801baa4:	220f      	movs	r2, #15
 801baa6:	fa02 f303 	lsl.w	r3, r2, r3
 801baaa:	43db      	mvns	r3, r3
 801baac:	693a      	ldr	r2, [r7, #16]
 801baae:	4013      	ands	r3, r2
 801bab0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bab2:	683b      	ldr	r3, [r7, #0]
 801bab4:	691a      	ldr	r2, [r3, #16]
 801bab6:	697b      	ldr	r3, [r7, #20]
 801bab8:	f003 0307 	and.w	r3, r3, #7
 801babc:	009b      	lsls	r3, r3, #2
 801babe:	fa02 f303 	lsl.w	r3, r2, r3
 801bac2:	693a      	ldr	r2, [r7, #16]
 801bac4:	4313      	orrs	r3, r2
 801bac6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801bac8:	697b      	ldr	r3, [r7, #20]
 801baca:	08da      	lsrs	r2, r3, #3
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	3208      	adds	r2, #8
 801bad0:	6939      	ldr	r1, [r7, #16]
 801bad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801badc:	697b      	ldr	r3, [r7, #20]
 801bade:	005b      	lsls	r3, r3, #1
 801bae0:	2203      	movs	r2, #3
 801bae2:	fa02 f303 	lsl.w	r3, r2, r3
 801bae6:	43db      	mvns	r3, r3
 801bae8:	693a      	ldr	r2, [r7, #16]
 801baea:	4013      	ands	r3, r2
 801baec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801baee:	683b      	ldr	r3, [r7, #0]
 801baf0:	685b      	ldr	r3, [r3, #4]
 801baf2:	f003 0203 	and.w	r2, r3, #3
 801baf6:	697b      	ldr	r3, [r7, #20]
 801baf8:	005b      	lsls	r3, r3, #1
 801bafa:	fa02 f303 	lsl.w	r3, r2, r3
 801bafe:	693a      	ldr	r2, [r7, #16]
 801bb00:	4313      	orrs	r3, r2
 801bb02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	693a      	ldr	r2, [r7, #16]
 801bb08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bb0a:	683b      	ldr	r3, [r7, #0]
 801bb0c:	685b      	ldr	r3, [r3, #4]
 801bb0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	f000 80a6 	beq.w	801bc64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bb18:	4b5b      	ldr	r3, [pc, #364]	; (801bc88 <HAL_GPIO_Init+0x2e4>)
 801bb1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bb1c:	4a5a      	ldr	r2, [pc, #360]	; (801bc88 <HAL_GPIO_Init+0x2e4>)
 801bb1e:	f043 0301 	orr.w	r3, r3, #1
 801bb22:	6613      	str	r3, [r2, #96]	; 0x60
 801bb24:	4b58      	ldr	r3, [pc, #352]	; (801bc88 <HAL_GPIO_Init+0x2e4>)
 801bb26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bb28:	f003 0301 	and.w	r3, r3, #1
 801bb2c:	60bb      	str	r3, [r7, #8]
 801bb2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bb30:	4a56      	ldr	r2, [pc, #344]	; (801bc8c <HAL_GPIO_Init+0x2e8>)
 801bb32:	697b      	ldr	r3, [r7, #20]
 801bb34:	089b      	lsrs	r3, r3, #2
 801bb36:	3302      	adds	r3, #2
 801bb38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bb3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bb3e:	697b      	ldr	r3, [r7, #20]
 801bb40:	f003 0303 	and.w	r3, r3, #3
 801bb44:	009b      	lsls	r3, r3, #2
 801bb46:	220f      	movs	r2, #15
 801bb48:	fa02 f303 	lsl.w	r3, r2, r3
 801bb4c:	43db      	mvns	r3, r3
 801bb4e:	693a      	ldr	r2, [r7, #16]
 801bb50:	4013      	ands	r3, r2
 801bb52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801bb5a:	d01f      	beq.n	801bb9c <HAL_GPIO_Init+0x1f8>
 801bb5c:	687b      	ldr	r3, [r7, #4]
 801bb5e:	4a4c      	ldr	r2, [pc, #304]	; (801bc90 <HAL_GPIO_Init+0x2ec>)
 801bb60:	4293      	cmp	r3, r2
 801bb62:	d019      	beq.n	801bb98 <HAL_GPIO_Init+0x1f4>
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	4a4b      	ldr	r2, [pc, #300]	; (801bc94 <HAL_GPIO_Init+0x2f0>)
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d013      	beq.n	801bb94 <HAL_GPIO_Init+0x1f0>
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	4a4a      	ldr	r2, [pc, #296]	; (801bc98 <HAL_GPIO_Init+0x2f4>)
 801bb70:	4293      	cmp	r3, r2
 801bb72:	d00d      	beq.n	801bb90 <HAL_GPIO_Init+0x1ec>
 801bb74:	687b      	ldr	r3, [r7, #4]
 801bb76:	4a49      	ldr	r2, [pc, #292]	; (801bc9c <HAL_GPIO_Init+0x2f8>)
 801bb78:	4293      	cmp	r3, r2
 801bb7a:	d007      	beq.n	801bb8c <HAL_GPIO_Init+0x1e8>
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	4a48      	ldr	r2, [pc, #288]	; (801bca0 <HAL_GPIO_Init+0x2fc>)
 801bb80:	4293      	cmp	r3, r2
 801bb82:	d101      	bne.n	801bb88 <HAL_GPIO_Init+0x1e4>
 801bb84:	2305      	movs	r3, #5
 801bb86:	e00a      	b.n	801bb9e <HAL_GPIO_Init+0x1fa>
 801bb88:	2306      	movs	r3, #6
 801bb8a:	e008      	b.n	801bb9e <HAL_GPIO_Init+0x1fa>
 801bb8c:	2304      	movs	r3, #4
 801bb8e:	e006      	b.n	801bb9e <HAL_GPIO_Init+0x1fa>
 801bb90:	2303      	movs	r3, #3
 801bb92:	e004      	b.n	801bb9e <HAL_GPIO_Init+0x1fa>
 801bb94:	2302      	movs	r3, #2
 801bb96:	e002      	b.n	801bb9e <HAL_GPIO_Init+0x1fa>
 801bb98:	2301      	movs	r3, #1
 801bb9a:	e000      	b.n	801bb9e <HAL_GPIO_Init+0x1fa>
 801bb9c:	2300      	movs	r3, #0
 801bb9e:	697a      	ldr	r2, [r7, #20]
 801bba0:	f002 0203 	and.w	r2, r2, #3
 801bba4:	0092      	lsls	r2, r2, #2
 801bba6:	4093      	lsls	r3, r2
 801bba8:	693a      	ldr	r2, [r7, #16]
 801bbaa:	4313      	orrs	r3, r2
 801bbac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801bbae:	4937      	ldr	r1, [pc, #220]	; (801bc8c <HAL_GPIO_Init+0x2e8>)
 801bbb0:	697b      	ldr	r3, [r7, #20]
 801bbb2:	089b      	lsrs	r3, r3, #2
 801bbb4:	3302      	adds	r3, #2
 801bbb6:	693a      	ldr	r2, [r7, #16]
 801bbb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801bbbc:	4b39      	ldr	r3, [pc, #228]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bbbe:	689b      	ldr	r3, [r3, #8]
 801bbc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bbc2:	68fb      	ldr	r3, [r7, #12]
 801bbc4:	43db      	mvns	r3, r3
 801bbc6:	693a      	ldr	r2, [r7, #16]
 801bbc8:	4013      	ands	r3, r2
 801bbca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801bbcc:	683b      	ldr	r3, [r7, #0]
 801bbce:	685b      	ldr	r3, [r3, #4]
 801bbd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d003      	beq.n	801bbe0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801bbd8:	693a      	ldr	r2, [r7, #16]
 801bbda:	68fb      	ldr	r3, [r7, #12]
 801bbdc:	4313      	orrs	r3, r2
 801bbde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801bbe0:	4a30      	ldr	r2, [pc, #192]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bbe2:	693b      	ldr	r3, [r7, #16]
 801bbe4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801bbe6:	4b2f      	ldr	r3, [pc, #188]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bbe8:	68db      	ldr	r3, [r3, #12]
 801bbea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bbec:	68fb      	ldr	r3, [r7, #12]
 801bbee:	43db      	mvns	r3, r3
 801bbf0:	693a      	ldr	r2, [r7, #16]
 801bbf2:	4013      	ands	r3, r2
 801bbf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801bbf6:	683b      	ldr	r3, [r7, #0]
 801bbf8:	685b      	ldr	r3, [r3, #4]
 801bbfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d003      	beq.n	801bc0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801bc02:	693a      	ldr	r2, [r7, #16]
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	4313      	orrs	r3, r2
 801bc08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801bc0a:	4a26      	ldr	r2, [pc, #152]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bc0c:	693b      	ldr	r3, [r7, #16]
 801bc0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801bc10:	4b24      	ldr	r3, [pc, #144]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bc12:	685b      	ldr	r3, [r3, #4]
 801bc14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	43db      	mvns	r3, r3
 801bc1a:	693a      	ldr	r2, [r7, #16]
 801bc1c:	4013      	ands	r3, r2
 801bc1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bc20:	683b      	ldr	r3, [r7, #0]
 801bc22:	685b      	ldr	r3, [r3, #4]
 801bc24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bc28:	2b00      	cmp	r3, #0
 801bc2a:	d003      	beq.n	801bc34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801bc2c:	693a      	ldr	r2, [r7, #16]
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	4313      	orrs	r3, r2
 801bc32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801bc34:	4a1b      	ldr	r2, [pc, #108]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bc36:	693b      	ldr	r3, [r7, #16]
 801bc38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801bc3a:	4b1a      	ldr	r3, [pc, #104]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bc3c:	681b      	ldr	r3, [r3, #0]
 801bc3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	43db      	mvns	r3, r3
 801bc44:	693a      	ldr	r2, [r7, #16]
 801bc46:	4013      	ands	r3, r2
 801bc48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801bc4a:	683b      	ldr	r3, [r7, #0]
 801bc4c:	685b      	ldr	r3, [r3, #4]
 801bc4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bc52:	2b00      	cmp	r3, #0
 801bc54:	d003      	beq.n	801bc5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801bc56:	693a      	ldr	r2, [r7, #16]
 801bc58:	68fb      	ldr	r3, [r7, #12]
 801bc5a:	4313      	orrs	r3, r2
 801bc5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801bc5e:	4a11      	ldr	r2, [pc, #68]	; (801bca4 <HAL_GPIO_Init+0x300>)
 801bc60:	693b      	ldr	r3, [r7, #16]
 801bc62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801bc64:	697b      	ldr	r3, [r7, #20]
 801bc66:	3301      	adds	r3, #1
 801bc68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bc6a:	683b      	ldr	r3, [r7, #0]
 801bc6c:	681a      	ldr	r2, [r3, #0]
 801bc6e:	697b      	ldr	r3, [r7, #20]
 801bc70:	fa22 f303 	lsr.w	r3, r2, r3
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	f47f ae9d 	bne.w	801b9b4 <HAL_GPIO_Init+0x10>
  }
}
 801bc7a:	bf00      	nop
 801bc7c:	bf00      	nop
 801bc7e:	371c      	adds	r7, #28
 801bc80:	46bd      	mov	sp, r7
 801bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc86:	4770      	bx	lr
 801bc88:	40021000 	.word	0x40021000
 801bc8c:	40010000 	.word	0x40010000
 801bc90:	48000400 	.word	0x48000400
 801bc94:	48000800 	.word	0x48000800
 801bc98:	48000c00 	.word	0x48000c00
 801bc9c:	48001000 	.word	0x48001000
 801bca0:	48001400 	.word	0x48001400
 801bca4:	40010400 	.word	0x40010400

0801bca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bca8:	b480      	push	{r7}
 801bcaa:	b083      	sub	sp, #12
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
 801bcb0:	460b      	mov	r3, r1
 801bcb2:	807b      	strh	r3, [r7, #2]
 801bcb4:	4613      	mov	r3, r2
 801bcb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bcb8:	787b      	ldrb	r3, [r7, #1]
 801bcba:	2b00      	cmp	r3, #0
 801bcbc:	d003      	beq.n	801bcc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801bcbe:	887a      	ldrh	r2, [r7, #2]
 801bcc0:	687b      	ldr	r3, [r7, #4]
 801bcc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801bcc4:	e002      	b.n	801bccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801bcc6:	887a      	ldrh	r2, [r7, #2]
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bccc:	bf00      	nop
 801bcce:	370c      	adds	r7, #12
 801bcd0:	46bd      	mov	sp, r7
 801bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcd6:	4770      	bx	lr

0801bcd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801bcd8:	b480      	push	{r7}
 801bcda:	b085      	sub	sp, #20
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d141      	bne.n	801bd6a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801bce6:	4b4b      	ldr	r3, [pc, #300]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bce8:	681b      	ldr	r3, [r3, #0]
 801bcea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bcee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bcf2:	d131      	bne.n	801bd58 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bcf4:	4b47      	ldr	r3, [pc, #284]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bcf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bcfa:	4a46      	ldr	r2, [pc, #280]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bcfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bd00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bd04:	4b43      	ldr	r3, [pc, #268]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bd0c:	4a41      	ldr	r2, [pc, #260]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bd12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bd14:	4b40      	ldr	r3, [pc, #256]	; (801be18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	2232      	movs	r2, #50	; 0x32
 801bd1a:	fb02 f303 	mul.w	r3, r2, r3
 801bd1e:	4a3f      	ldr	r2, [pc, #252]	; (801be1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bd20:	fba2 2303 	umull	r2, r3, r2, r3
 801bd24:	0c9b      	lsrs	r3, r3, #18
 801bd26:	3301      	adds	r3, #1
 801bd28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bd2a:	e002      	b.n	801bd32 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801bd2c:	68fb      	ldr	r3, [r7, #12]
 801bd2e:	3b01      	subs	r3, #1
 801bd30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bd32:	4b38      	ldr	r3, [pc, #224]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd34:	695b      	ldr	r3, [r3, #20]
 801bd36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd3e:	d102      	bne.n	801bd46 <HAL_PWREx_ControlVoltageScaling+0x6e>
 801bd40:	68fb      	ldr	r3, [r7, #12]
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d1f2      	bne.n	801bd2c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bd46:	4b33      	ldr	r3, [pc, #204]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd48:	695b      	ldr	r3, [r3, #20]
 801bd4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bd4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd52:	d158      	bne.n	801be06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801bd54:	2303      	movs	r3, #3
 801bd56:	e057      	b.n	801be08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bd58:	4b2e      	ldr	r3, [pc, #184]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bd5e:	4a2d      	ldr	r2, [pc, #180]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bd64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801bd68:	e04d      	b.n	801be06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801bd6a:	687b      	ldr	r3, [r7, #4]
 801bd6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bd70:	d141      	bne.n	801bdf6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801bd72:	4b28      	ldr	r3, [pc, #160]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bd7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bd7e:	d131      	bne.n	801bde4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bd80:	4b24      	ldr	r3, [pc, #144]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bd86:	4a23      	ldr	r2, [pc, #140]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bd8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bd90:	4b20      	ldr	r3, [pc, #128]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd92:	681b      	ldr	r3, [r3, #0]
 801bd94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bd98:	4a1e      	ldr	r2, [pc, #120]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bd9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bd9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bda0:	4b1d      	ldr	r3, [pc, #116]	; (801be18 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801bda2:	681b      	ldr	r3, [r3, #0]
 801bda4:	2232      	movs	r2, #50	; 0x32
 801bda6:	fb02 f303 	mul.w	r3, r2, r3
 801bdaa:	4a1c      	ldr	r2, [pc, #112]	; (801be1c <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bdac:	fba2 2303 	umull	r2, r3, r2, r3
 801bdb0:	0c9b      	lsrs	r3, r3, #18
 801bdb2:	3301      	adds	r3, #1
 801bdb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bdb6:	e002      	b.n	801bdbe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801bdb8:	68fb      	ldr	r3, [r7, #12]
 801bdba:	3b01      	subs	r3, #1
 801bdbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bdbe:	4b15      	ldr	r3, [pc, #84]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bdc0:	695b      	ldr	r3, [r3, #20]
 801bdc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bdc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bdca:	d102      	bne.n	801bdd2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d1f2      	bne.n	801bdb8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bdd2:	4b10      	ldr	r3, [pc, #64]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bdd4:	695b      	ldr	r3, [r3, #20]
 801bdd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bdda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bdde:	d112      	bne.n	801be06 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801bde0:	2303      	movs	r3, #3
 801bde2:	e011      	b.n	801be08 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bde4:	4b0b      	ldr	r3, [pc, #44]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bde6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bdea:	4a0a      	ldr	r2, [pc, #40]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bdec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bdf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801bdf4:	e007      	b.n	801be06 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801bdf6:	4b07      	ldr	r3, [pc, #28]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bdfe:	4a05      	ldr	r2, [pc, #20]	; (801be14 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801be00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801be04:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801be06:	2300      	movs	r3, #0
}
 801be08:	4618      	mov	r0, r3
 801be0a:	3714      	adds	r7, #20
 801be0c:	46bd      	mov	sp, r7
 801be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be12:	4770      	bx	lr
 801be14:	40007000 	.word	0x40007000
 801be18:	20000000 	.word	0x20000000
 801be1c:	431bde83 	.word	0x431bde83

0801be20 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801be20:	b480      	push	{r7}
 801be22:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801be24:	4b05      	ldr	r3, [pc, #20]	; (801be3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801be26:	689b      	ldr	r3, [r3, #8]
 801be28:	4a04      	ldr	r2, [pc, #16]	; (801be3c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801be2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801be2e:	6093      	str	r3, [r2, #8]
}
 801be30:	bf00      	nop
 801be32:	46bd      	mov	sp, r7
 801be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be38:	4770      	bx	lr
 801be3a:	bf00      	nop
 801be3c:	40007000 	.word	0x40007000

0801be40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801be40:	b580      	push	{r7, lr}
 801be42:	b088      	sub	sp, #32
 801be44:	af00      	add	r7, sp, #0
 801be46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	2b00      	cmp	r3, #0
 801be4c:	d101      	bne.n	801be52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801be4e:	2301      	movs	r3, #1
 801be50:	e306      	b.n	801c460 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801be52:	687b      	ldr	r3, [r7, #4]
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	f003 0301 	and.w	r3, r3, #1
 801be5a:	2b00      	cmp	r3, #0
 801be5c:	d075      	beq.n	801bf4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801be5e:	4b97      	ldr	r3, [pc, #604]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801be60:	689b      	ldr	r3, [r3, #8]
 801be62:	f003 030c 	and.w	r3, r3, #12
 801be66:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801be68:	4b94      	ldr	r3, [pc, #592]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801be6a:	68db      	ldr	r3, [r3, #12]
 801be6c:	f003 0303 	and.w	r3, r3, #3
 801be70:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801be72:	69bb      	ldr	r3, [r7, #24]
 801be74:	2b0c      	cmp	r3, #12
 801be76:	d102      	bne.n	801be7e <HAL_RCC_OscConfig+0x3e>
 801be78:	697b      	ldr	r3, [r7, #20]
 801be7a:	2b03      	cmp	r3, #3
 801be7c:	d002      	beq.n	801be84 <HAL_RCC_OscConfig+0x44>
 801be7e:	69bb      	ldr	r3, [r7, #24]
 801be80:	2b08      	cmp	r3, #8
 801be82:	d10b      	bne.n	801be9c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801be84:	4b8d      	ldr	r3, [pc, #564]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801be8c:	2b00      	cmp	r3, #0
 801be8e:	d05b      	beq.n	801bf48 <HAL_RCC_OscConfig+0x108>
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	685b      	ldr	r3, [r3, #4]
 801be94:	2b00      	cmp	r3, #0
 801be96:	d157      	bne.n	801bf48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801be98:	2301      	movs	r3, #1
 801be9a:	e2e1      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801be9c:	687b      	ldr	r3, [r7, #4]
 801be9e:	685b      	ldr	r3, [r3, #4]
 801bea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bea4:	d106      	bne.n	801beb4 <HAL_RCC_OscConfig+0x74>
 801bea6:	4b85      	ldr	r3, [pc, #532]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	4a84      	ldr	r2, [pc, #528]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801beac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801beb0:	6013      	str	r3, [r2, #0]
 801beb2:	e01d      	b.n	801bef0 <HAL_RCC_OscConfig+0xb0>
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	685b      	ldr	r3, [r3, #4]
 801beb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801bebc:	d10c      	bne.n	801bed8 <HAL_RCC_OscConfig+0x98>
 801bebe:	4b7f      	ldr	r3, [pc, #508]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	4a7e      	ldr	r2, [pc, #504]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801bec8:	6013      	str	r3, [r2, #0]
 801beca:	4b7c      	ldr	r3, [pc, #496]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801becc:	681b      	ldr	r3, [r3, #0]
 801bece:	4a7b      	ldr	r2, [pc, #492]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bed4:	6013      	str	r3, [r2, #0]
 801bed6:	e00b      	b.n	801bef0 <HAL_RCC_OscConfig+0xb0>
 801bed8:	4b78      	ldr	r3, [pc, #480]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801beda:	681b      	ldr	r3, [r3, #0]
 801bedc:	4a77      	ldr	r2, [pc, #476]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801bee2:	6013      	str	r3, [r2, #0]
 801bee4:	4b75      	ldr	r3, [pc, #468]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	4a74      	ldr	r2, [pc, #464]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801beea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801beee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	685b      	ldr	r3, [r3, #4]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d013      	beq.n	801bf20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bef8:	f7fc fd0e 	bl	8018918 <HAL_GetTick>
 801befc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801befe:	e008      	b.n	801bf12 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bf00:	f7fc fd0a 	bl	8018918 <HAL_GetTick>
 801bf04:	4602      	mov	r2, r0
 801bf06:	693b      	ldr	r3, [r7, #16]
 801bf08:	1ad3      	subs	r3, r2, r3
 801bf0a:	2b64      	cmp	r3, #100	; 0x64
 801bf0c:	d901      	bls.n	801bf12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801bf0e:	2303      	movs	r3, #3
 801bf10:	e2a6      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801bf12:	4b6a      	ldr	r3, [pc, #424]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bf14:	681b      	ldr	r3, [r3, #0]
 801bf16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d0f0      	beq.n	801bf00 <HAL_RCC_OscConfig+0xc0>
 801bf1e:	e014      	b.n	801bf4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf20:	f7fc fcfa 	bl	8018918 <HAL_GetTick>
 801bf24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801bf26:	e008      	b.n	801bf3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801bf28:	f7fc fcf6 	bl	8018918 <HAL_GetTick>
 801bf2c:	4602      	mov	r2, r0
 801bf2e:	693b      	ldr	r3, [r7, #16]
 801bf30:	1ad3      	subs	r3, r2, r3
 801bf32:	2b64      	cmp	r3, #100	; 0x64
 801bf34:	d901      	bls.n	801bf3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801bf36:	2303      	movs	r3, #3
 801bf38:	e292      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801bf3a:	4b60      	ldr	r3, [pc, #384]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d1f0      	bne.n	801bf28 <HAL_RCC_OscConfig+0xe8>
 801bf46:	e000      	b.n	801bf4a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bf48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	681b      	ldr	r3, [r3, #0]
 801bf4e:	f003 0302 	and.w	r3, r3, #2
 801bf52:	2b00      	cmp	r3, #0
 801bf54:	d075      	beq.n	801c042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bf56:	4b59      	ldr	r3, [pc, #356]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bf58:	689b      	ldr	r3, [r3, #8]
 801bf5a:	f003 030c 	and.w	r3, r3, #12
 801bf5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801bf60:	4b56      	ldr	r3, [pc, #344]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bf62:	68db      	ldr	r3, [r3, #12]
 801bf64:	f003 0303 	and.w	r3, r3, #3
 801bf68:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801bf6a:	69bb      	ldr	r3, [r7, #24]
 801bf6c:	2b0c      	cmp	r3, #12
 801bf6e:	d102      	bne.n	801bf76 <HAL_RCC_OscConfig+0x136>
 801bf70:	697b      	ldr	r3, [r7, #20]
 801bf72:	2b02      	cmp	r3, #2
 801bf74:	d002      	beq.n	801bf7c <HAL_RCC_OscConfig+0x13c>
 801bf76:	69bb      	ldr	r3, [r7, #24]
 801bf78:	2b04      	cmp	r3, #4
 801bf7a:	d11f      	bne.n	801bfbc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bf7c:	4b4f      	ldr	r3, [pc, #316]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	d005      	beq.n	801bf94 <HAL_RCC_OscConfig+0x154>
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	68db      	ldr	r3, [r3, #12]
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d101      	bne.n	801bf94 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801bf90:	2301      	movs	r3, #1
 801bf92:	e265      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bf94:	4b49      	ldr	r3, [pc, #292]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bf96:	685b      	ldr	r3, [r3, #4]
 801bf98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	691b      	ldr	r3, [r3, #16]
 801bfa0:	061b      	lsls	r3, r3, #24
 801bfa2:	4946      	ldr	r1, [pc, #280]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bfa4:	4313      	orrs	r3, r2
 801bfa6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801bfa8:	4b45      	ldr	r3, [pc, #276]	; (801c0c0 <HAL_RCC_OscConfig+0x280>)
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	4618      	mov	r0, r3
 801bfae:	f7fc fc67 	bl	8018880 <HAL_InitTick>
 801bfb2:	4603      	mov	r3, r0
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d043      	beq.n	801c040 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801bfb8:	2301      	movs	r3, #1
 801bfba:	e251      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	68db      	ldr	r3, [r3, #12]
 801bfc0:	2b00      	cmp	r3, #0
 801bfc2:	d023      	beq.n	801c00c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801bfc4:	4b3d      	ldr	r3, [pc, #244]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	4a3c      	ldr	r2, [pc, #240]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bfca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bfce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfd0:	f7fc fca2 	bl	8018918 <HAL_GetTick>
 801bfd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801bfd6:	e008      	b.n	801bfea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bfd8:	f7fc fc9e 	bl	8018918 <HAL_GetTick>
 801bfdc:	4602      	mov	r2, r0
 801bfde:	693b      	ldr	r3, [r7, #16]
 801bfe0:	1ad3      	subs	r3, r2, r3
 801bfe2:	2b02      	cmp	r3, #2
 801bfe4:	d901      	bls.n	801bfea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801bfe6:	2303      	movs	r3, #3
 801bfe8:	e23a      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801bfea:	4b34      	ldr	r3, [pc, #208]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bff2:	2b00      	cmp	r3, #0
 801bff4:	d0f0      	beq.n	801bfd8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bff6:	4b31      	ldr	r3, [pc, #196]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801bff8:	685b      	ldr	r3, [r3, #4]
 801bffa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	691b      	ldr	r3, [r3, #16]
 801c002:	061b      	lsls	r3, r3, #24
 801c004:	492d      	ldr	r1, [pc, #180]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c006:	4313      	orrs	r3, r2
 801c008:	604b      	str	r3, [r1, #4]
 801c00a:	e01a      	b.n	801c042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c00c:	4b2b      	ldr	r3, [pc, #172]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	4a2a      	ldr	r2, [pc, #168]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c012:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c016:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c018:	f7fc fc7e 	bl	8018918 <HAL_GetTick>
 801c01c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c01e:	e008      	b.n	801c032 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c020:	f7fc fc7a 	bl	8018918 <HAL_GetTick>
 801c024:	4602      	mov	r2, r0
 801c026:	693b      	ldr	r3, [r7, #16]
 801c028:	1ad3      	subs	r3, r2, r3
 801c02a:	2b02      	cmp	r3, #2
 801c02c:	d901      	bls.n	801c032 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801c02e:	2303      	movs	r3, #3
 801c030:	e216      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c032:	4b22      	ldr	r3, [pc, #136]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c034:	681b      	ldr	r3, [r3, #0]
 801c036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d1f0      	bne.n	801c020 <HAL_RCC_OscConfig+0x1e0>
 801c03e:	e000      	b.n	801c042 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c040:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c042:	687b      	ldr	r3, [r7, #4]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	f003 0308 	and.w	r3, r3, #8
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	d041      	beq.n	801c0d2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	695b      	ldr	r3, [r3, #20]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d01c      	beq.n	801c090 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c056:	4b19      	ldr	r3, [pc, #100]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c058:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c05c:	4a17      	ldr	r2, [pc, #92]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c05e:	f043 0301 	orr.w	r3, r3, #1
 801c062:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c066:	f7fc fc57 	bl	8018918 <HAL_GetTick>
 801c06a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c06c:	e008      	b.n	801c080 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c06e:	f7fc fc53 	bl	8018918 <HAL_GetTick>
 801c072:	4602      	mov	r2, r0
 801c074:	693b      	ldr	r3, [r7, #16]
 801c076:	1ad3      	subs	r3, r2, r3
 801c078:	2b02      	cmp	r3, #2
 801c07a:	d901      	bls.n	801c080 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801c07c:	2303      	movs	r3, #3
 801c07e:	e1ef      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c080:	4b0e      	ldr	r3, [pc, #56]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c086:	f003 0302 	and.w	r3, r3, #2
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d0ef      	beq.n	801c06e <HAL_RCC_OscConfig+0x22e>
 801c08e:	e020      	b.n	801c0d2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c090:	4b0a      	ldr	r3, [pc, #40]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c096:	4a09      	ldr	r2, [pc, #36]	; (801c0bc <HAL_RCC_OscConfig+0x27c>)
 801c098:	f023 0301 	bic.w	r3, r3, #1
 801c09c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c0a0:	f7fc fc3a 	bl	8018918 <HAL_GetTick>
 801c0a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c0a6:	e00d      	b.n	801c0c4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c0a8:	f7fc fc36 	bl	8018918 <HAL_GetTick>
 801c0ac:	4602      	mov	r2, r0
 801c0ae:	693b      	ldr	r3, [r7, #16]
 801c0b0:	1ad3      	subs	r3, r2, r3
 801c0b2:	2b02      	cmp	r3, #2
 801c0b4:	d906      	bls.n	801c0c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c0b6:	2303      	movs	r3, #3
 801c0b8:	e1d2      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
 801c0ba:	bf00      	nop
 801c0bc:	40021000 	.word	0x40021000
 801c0c0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c0c4:	4b8c      	ldr	r3, [pc, #560]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c0c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c0ca:	f003 0302 	and.w	r3, r3, #2
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d1ea      	bne.n	801c0a8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c0d2:	687b      	ldr	r3, [r7, #4]
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	f003 0304 	and.w	r3, r3, #4
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	f000 80a6 	beq.w	801c22c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c0e0:	2300      	movs	r3, #0
 801c0e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801c0e4:	4b84      	ldr	r3, [pc, #528]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c0e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d101      	bne.n	801c0f4 <HAL_RCC_OscConfig+0x2b4>
 801c0f0:	2301      	movs	r3, #1
 801c0f2:	e000      	b.n	801c0f6 <HAL_RCC_OscConfig+0x2b6>
 801c0f4:	2300      	movs	r3, #0
 801c0f6:	2b00      	cmp	r3, #0
 801c0f8:	d00d      	beq.n	801c116 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c0fa:	4b7f      	ldr	r3, [pc, #508]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0fe:	4a7e      	ldr	r2, [pc, #504]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c104:	6593      	str	r3, [r2, #88]	; 0x58
 801c106:	4b7c      	ldr	r3, [pc, #496]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c10a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c10e:	60fb      	str	r3, [r7, #12]
 801c110:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c112:	2301      	movs	r3, #1
 801c114:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c116:	4b79      	ldr	r3, [pc, #484]	; (801c2fc <HAL_RCC_OscConfig+0x4bc>)
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d118      	bne.n	801c154 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c122:	4b76      	ldr	r3, [pc, #472]	; (801c2fc <HAL_RCC_OscConfig+0x4bc>)
 801c124:	681b      	ldr	r3, [r3, #0]
 801c126:	4a75      	ldr	r2, [pc, #468]	; (801c2fc <HAL_RCC_OscConfig+0x4bc>)
 801c128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c12c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c12e:	f7fc fbf3 	bl	8018918 <HAL_GetTick>
 801c132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c134:	e008      	b.n	801c148 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c136:	f7fc fbef 	bl	8018918 <HAL_GetTick>
 801c13a:	4602      	mov	r2, r0
 801c13c:	693b      	ldr	r3, [r7, #16]
 801c13e:	1ad3      	subs	r3, r2, r3
 801c140:	2b02      	cmp	r3, #2
 801c142:	d901      	bls.n	801c148 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c144:	2303      	movs	r3, #3
 801c146:	e18b      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c148:	4b6c      	ldr	r3, [pc, #432]	; (801c2fc <HAL_RCC_OscConfig+0x4bc>)
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c150:	2b00      	cmp	r3, #0
 801c152:	d0f0      	beq.n	801c136 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	689b      	ldr	r3, [r3, #8]
 801c158:	2b01      	cmp	r3, #1
 801c15a:	d108      	bne.n	801c16e <HAL_RCC_OscConfig+0x32e>
 801c15c:	4b66      	ldr	r3, [pc, #408]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c162:	4a65      	ldr	r2, [pc, #404]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c164:	f043 0301 	orr.w	r3, r3, #1
 801c168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c16c:	e024      	b.n	801c1b8 <HAL_RCC_OscConfig+0x378>
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	689b      	ldr	r3, [r3, #8]
 801c172:	2b05      	cmp	r3, #5
 801c174:	d110      	bne.n	801c198 <HAL_RCC_OscConfig+0x358>
 801c176:	4b60      	ldr	r3, [pc, #384]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c17c:	4a5e      	ldr	r2, [pc, #376]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c17e:	f043 0304 	orr.w	r3, r3, #4
 801c182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c186:	4b5c      	ldr	r3, [pc, #368]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c18c:	4a5a      	ldr	r2, [pc, #360]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c18e:	f043 0301 	orr.w	r3, r3, #1
 801c192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c196:	e00f      	b.n	801c1b8 <HAL_RCC_OscConfig+0x378>
 801c198:	4b57      	ldr	r3, [pc, #348]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c19a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c19e:	4a56      	ldr	r2, [pc, #344]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c1a0:	f023 0301 	bic.w	r3, r3, #1
 801c1a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c1a8:	4b53      	ldr	r3, [pc, #332]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c1ae:	4a52      	ldr	r2, [pc, #328]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c1b0:	f023 0304 	bic.w	r3, r3, #4
 801c1b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	689b      	ldr	r3, [r3, #8]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d016      	beq.n	801c1ee <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c1c0:	f7fc fbaa 	bl	8018918 <HAL_GetTick>
 801c1c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c1c6:	e00a      	b.n	801c1de <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c1c8:	f7fc fba6 	bl	8018918 <HAL_GetTick>
 801c1cc:	4602      	mov	r2, r0
 801c1ce:	693b      	ldr	r3, [r7, #16]
 801c1d0:	1ad3      	subs	r3, r2, r3
 801c1d2:	f241 3288 	movw	r2, #5000	; 0x1388
 801c1d6:	4293      	cmp	r3, r2
 801c1d8:	d901      	bls.n	801c1de <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c1da:	2303      	movs	r3, #3
 801c1dc:	e140      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c1de:	4b46      	ldr	r3, [pc, #280]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c1e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c1e4:	f003 0302 	and.w	r3, r3, #2
 801c1e8:	2b00      	cmp	r3, #0
 801c1ea:	d0ed      	beq.n	801c1c8 <HAL_RCC_OscConfig+0x388>
 801c1ec:	e015      	b.n	801c21a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c1ee:	f7fc fb93 	bl	8018918 <HAL_GetTick>
 801c1f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c1f4:	e00a      	b.n	801c20c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c1f6:	f7fc fb8f 	bl	8018918 <HAL_GetTick>
 801c1fa:	4602      	mov	r2, r0
 801c1fc:	693b      	ldr	r3, [r7, #16]
 801c1fe:	1ad3      	subs	r3, r2, r3
 801c200:	f241 3288 	movw	r2, #5000	; 0x1388
 801c204:	4293      	cmp	r3, r2
 801c206:	d901      	bls.n	801c20c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c208:	2303      	movs	r3, #3
 801c20a:	e129      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c20c:	4b3a      	ldr	r3, [pc, #232]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c20e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c212:	f003 0302 	and.w	r3, r3, #2
 801c216:	2b00      	cmp	r3, #0
 801c218:	d1ed      	bne.n	801c1f6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c21a:	7ffb      	ldrb	r3, [r7, #31]
 801c21c:	2b01      	cmp	r3, #1
 801c21e:	d105      	bne.n	801c22c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c220:	4b35      	ldr	r3, [pc, #212]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c224:	4a34      	ldr	r2, [pc, #208]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c22a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	681b      	ldr	r3, [r3, #0]
 801c230:	f003 0320 	and.w	r3, r3, #32
 801c234:	2b00      	cmp	r3, #0
 801c236:	d03c      	beq.n	801c2b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	699b      	ldr	r3, [r3, #24]
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d01c      	beq.n	801c27a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c240:	4b2d      	ldr	r3, [pc, #180]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c246:	4a2c      	ldr	r2, [pc, #176]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c248:	f043 0301 	orr.w	r3, r3, #1
 801c24c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c250:	f7fc fb62 	bl	8018918 <HAL_GetTick>
 801c254:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c256:	e008      	b.n	801c26a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c258:	f7fc fb5e 	bl	8018918 <HAL_GetTick>
 801c25c:	4602      	mov	r2, r0
 801c25e:	693b      	ldr	r3, [r7, #16]
 801c260:	1ad3      	subs	r3, r2, r3
 801c262:	2b02      	cmp	r3, #2
 801c264:	d901      	bls.n	801c26a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c266:	2303      	movs	r3, #3
 801c268:	e0fa      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c26a:	4b23      	ldr	r3, [pc, #140]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c26c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c270:	f003 0302 	and.w	r3, r3, #2
 801c274:	2b00      	cmp	r3, #0
 801c276:	d0ef      	beq.n	801c258 <HAL_RCC_OscConfig+0x418>
 801c278:	e01b      	b.n	801c2b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c27a:	4b1f      	ldr	r3, [pc, #124]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c27c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c280:	4a1d      	ldr	r2, [pc, #116]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c282:	f023 0301 	bic.w	r3, r3, #1
 801c286:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c28a:	f7fc fb45 	bl	8018918 <HAL_GetTick>
 801c28e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c290:	e008      	b.n	801c2a4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c292:	f7fc fb41 	bl	8018918 <HAL_GetTick>
 801c296:	4602      	mov	r2, r0
 801c298:	693b      	ldr	r3, [r7, #16]
 801c29a:	1ad3      	subs	r3, r2, r3
 801c29c:	2b02      	cmp	r3, #2
 801c29e:	d901      	bls.n	801c2a4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c2a0:	2303      	movs	r3, #3
 801c2a2:	e0dd      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c2a4:	4b14      	ldr	r3, [pc, #80]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c2a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c2aa:	f003 0302 	and.w	r3, r3, #2
 801c2ae:	2b00      	cmp	r3, #0
 801c2b0:	d1ef      	bne.n	801c292 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	69db      	ldr	r3, [r3, #28]
 801c2b6:	2b00      	cmp	r3, #0
 801c2b8:	f000 80d1 	beq.w	801c45e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c2bc:	4b0e      	ldr	r3, [pc, #56]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c2be:	689b      	ldr	r3, [r3, #8]
 801c2c0:	f003 030c 	and.w	r3, r3, #12
 801c2c4:	2b0c      	cmp	r3, #12
 801c2c6:	f000 808b 	beq.w	801c3e0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	69db      	ldr	r3, [r3, #28]
 801c2ce:	2b02      	cmp	r3, #2
 801c2d0:	d15e      	bne.n	801c390 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c2d2:	4b09      	ldr	r3, [pc, #36]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	4a08      	ldr	r2, [pc, #32]	; (801c2f8 <HAL_RCC_OscConfig+0x4b8>)
 801c2d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c2dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2de:	f7fc fb1b 	bl	8018918 <HAL_GetTick>
 801c2e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c2e4:	e00c      	b.n	801c300 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c2e6:	f7fc fb17 	bl	8018918 <HAL_GetTick>
 801c2ea:	4602      	mov	r2, r0
 801c2ec:	693b      	ldr	r3, [r7, #16]
 801c2ee:	1ad3      	subs	r3, r2, r3
 801c2f0:	2b02      	cmp	r3, #2
 801c2f2:	d905      	bls.n	801c300 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c2f4:	2303      	movs	r3, #3
 801c2f6:	e0b3      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
 801c2f8:	40021000 	.word	0x40021000
 801c2fc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c300:	4b59      	ldr	r3, [pc, #356]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c308:	2b00      	cmp	r3, #0
 801c30a:	d1ec      	bne.n	801c2e6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c30c:	4b56      	ldr	r3, [pc, #344]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c30e:	68da      	ldr	r2, [r3, #12]
 801c310:	4b56      	ldr	r3, [pc, #344]	; (801c46c <HAL_RCC_OscConfig+0x62c>)
 801c312:	4013      	ands	r3, r2
 801c314:	687a      	ldr	r2, [r7, #4]
 801c316:	6a11      	ldr	r1, [r2, #32]
 801c318:	687a      	ldr	r2, [r7, #4]
 801c31a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c31c:	3a01      	subs	r2, #1
 801c31e:	0112      	lsls	r2, r2, #4
 801c320:	4311      	orrs	r1, r2
 801c322:	687a      	ldr	r2, [r7, #4]
 801c324:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c326:	0212      	lsls	r2, r2, #8
 801c328:	4311      	orrs	r1, r2
 801c32a:	687a      	ldr	r2, [r7, #4]
 801c32c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c32e:	0852      	lsrs	r2, r2, #1
 801c330:	3a01      	subs	r2, #1
 801c332:	0552      	lsls	r2, r2, #21
 801c334:	4311      	orrs	r1, r2
 801c336:	687a      	ldr	r2, [r7, #4]
 801c338:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c33a:	0852      	lsrs	r2, r2, #1
 801c33c:	3a01      	subs	r2, #1
 801c33e:	0652      	lsls	r2, r2, #25
 801c340:	4311      	orrs	r1, r2
 801c342:	687a      	ldr	r2, [r7, #4]
 801c344:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c346:	06d2      	lsls	r2, r2, #27
 801c348:	430a      	orrs	r2, r1
 801c34a:	4947      	ldr	r1, [pc, #284]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c34c:	4313      	orrs	r3, r2
 801c34e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c350:	4b45      	ldr	r3, [pc, #276]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	4a44      	ldr	r2, [pc, #272]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c35a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c35c:	4b42      	ldr	r3, [pc, #264]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c35e:	68db      	ldr	r3, [r3, #12]
 801c360:	4a41      	ldr	r2, [pc, #260]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c366:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c368:	f7fc fad6 	bl	8018918 <HAL_GetTick>
 801c36c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c36e:	e008      	b.n	801c382 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c370:	f7fc fad2 	bl	8018918 <HAL_GetTick>
 801c374:	4602      	mov	r2, r0
 801c376:	693b      	ldr	r3, [r7, #16]
 801c378:	1ad3      	subs	r3, r2, r3
 801c37a:	2b02      	cmp	r3, #2
 801c37c:	d901      	bls.n	801c382 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c37e:	2303      	movs	r3, #3
 801c380:	e06e      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c382:	4b39      	ldr	r3, [pc, #228]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	d0f0      	beq.n	801c370 <HAL_RCC_OscConfig+0x530>
 801c38e:	e066      	b.n	801c45e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c390:	4b35      	ldr	r3, [pc, #212]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c392:	681b      	ldr	r3, [r3, #0]
 801c394:	4a34      	ldr	r2, [pc, #208]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c39a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c39c:	4b32      	ldr	r3, [pc, #200]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c39e:	68db      	ldr	r3, [r3, #12]
 801c3a0:	4a31      	ldr	r2, [pc, #196]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c3a2:	f023 0303 	bic.w	r3, r3, #3
 801c3a6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c3a8:	4b2f      	ldr	r3, [pc, #188]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c3aa:	68db      	ldr	r3, [r3, #12]
 801c3ac:	4a2e      	ldr	r2, [pc, #184]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c3ae:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c3b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c3b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c3b8:	f7fc faae 	bl	8018918 <HAL_GetTick>
 801c3bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c3be:	e008      	b.n	801c3d2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c3c0:	f7fc faaa 	bl	8018918 <HAL_GetTick>
 801c3c4:	4602      	mov	r2, r0
 801c3c6:	693b      	ldr	r3, [r7, #16]
 801c3c8:	1ad3      	subs	r3, r2, r3
 801c3ca:	2b02      	cmp	r3, #2
 801c3cc:	d901      	bls.n	801c3d2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c3ce:	2303      	movs	r3, #3
 801c3d0:	e046      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c3d2:	4b25      	ldr	r3, [pc, #148]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d1f0      	bne.n	801c3c0 <HAL_RCC_OscConfig+0x580>
 801c3de:	e03e      	b.n	801c45e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c3e0:	687b      	ldr	r3, [r7, #4]
 801c3e2:	69db      	ldr	r3, [r3, #28]
 801c3e4:	2b01      	cmp	r3, #1
 801c3e6:	d101      	bne.n	801c3ec <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	e039      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c3ec:	4b1e      	ldr	r3, [pc, #120]	; (801c468 <HAL_RCC_OscConfig+0x628>)
 801c3ee:	68db      	ldr	r3, [r3, #12]
 801c3f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c3f2:	697b      	ldr	r3, [r7, #20]
 801c3f4:	f003 0203 	and.w	r2, r3, #3
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	6a1b      	ldr	r3, [r3, #32]
 801c3fc:	429a      	cmp	r2, r3
 801c3fe:	d12c      	bne.n	801c45a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c400:	697b      	ldr	r3, [r7, #20]
 801c402:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c40a:	3b01      	subs	r3, #1
 801c40c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c40e:	429a      	cmp	r2, r3
 801c410:	d123      	bne.n	801c45a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c412:	697b      	ldr	r3, [r7, #20]
 801c414:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c41c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c41e:	429a      	cmp	r2, r3
 801c420:	d11b      	bne.n	801c45a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c422:	697b      	ldr	r3, [r7, #20]
 801c424:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c428:	687b      	ldr	r3, [r7, #4]
 801c42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c42c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c42e:	429a      	cmp	r2, r3
 801c430:	d113      	bne.n	801c45a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c432:	697b      	ldr	r3, [r7, #20]
 801c434:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c43c:	085b      	lsrs	r3, r3, #1
 801c43e:	3b01      	subs	r3, #1
 801c440:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c442:	429a      	cmp	r2, r3
 801c444:	d109      	bne.n	801c45a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c446:	697b      	ldr	r3, [r7, #20]
 801c448:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c44c:	687b      	ldr	r3, [r7, #4]
 801c44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c450:	085b      	lsrs	r3, r3, #1
 801c452:	3b01      	subs	r3, #1
 801c454:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c456:	429a      	cmp	r2, r3
 801c458:	d001      	beq.n	801c45e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c45a:	2301      	movs	r3, #1
 801c45c:	e000      	b.n	801c460 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c45e:	2300      	movs	r3, #0
}
 801c460:	4618      	mov	r0, r3
 801c462:	3720      	adds	r7, #32
 801c464:	46bd      	mov	sp, r7
 801c466:	bd80      	pop	{r7, pc}
 801c468:	40021000 	.word	0x40021000
 801c46c:	019f800c 	.word	0x019f800c

0801c470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c470:	b580      	push	{r7, lr}
 801c472:	b086      	sub	sp, #24
 801c474:	af00      	add	r7, sp, #0
 801c476:	6078      	str	r0, [r7, #4]
 801c478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c47a:	2300      	movs	r3, #0
 801c47c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	2b00      	cmp	r3, #0
 801c482:	d101      	bne.n	801c488 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c484:	2301      	movs	r3, #1
 801c486:	e11e      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c488:	4b91      	ldr	r3, [pc, #580]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	f003 030f 	and.w	r3, r3, #15
 801c490:	683a      	ldr	r2, [r7, #0]
 801c492:	429a      	cmp	r2, r3
 801c494:	d910      	bls.n	801c4b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c496:	4b8e      	ldr	r3, [pc, #568]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c498:	681b      	ldr	r3, [r3, #0]
 801c49a:	f023 020f 	bic.w	r2, r3, #15
 801c49e:	498c      	ldr	r1, [pc, #560]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c4a0:	683b      	ldr	r3, [r7, #0]
 801c4a2:	4313      	orrs	r3, r2
 801c4a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c4a6:	4b8a      	ldr	r3, [pc, #552]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c4a8:	681b      	ldr	r3, [r3, #0]
 801c4aa:	f003 030f 	and.w	r3, r3, #15
 801c4ae:	683a      	ldr	r2, [r7, #0]
 801c4b0:	429a      	cmp	r2, r3
 801c4b2:	d001      	beq.n	801c4b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c4b4:	2301      	movs	r3, #1
 801c4b6:	e106      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	f003 0301 	and.w	r3, r3, #1
 801c4c0:	2b00      	cmp	r3, #0
 801c4c2:	d073      	beq.n	801c5ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	685b      	ldr	r3, [r3, #4]
 801c4c8:	2b03      	cmp	r3, #3
 801c4ca:	d129      	bne.n	801c520 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c4cc:	4b81      	ldr	r3, [pc, #516]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d101      	bne.n	801c4dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c4d8:	2301      	movs	r3, #1
 801c4da:	e0f4      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c4dc:	f000 f99c 	bl	801c818 <RCC_GetSysClockFreqFromPLLSource>
 801c4e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c4e2:	693b      	ldr	r3, [r7, #16]
 801c4e4:	4a7c      	ldr	r2, [pc, #496]	; (801c6d8 <HAL_RCC_ClockConfig+0x268>)
 801c4e6:	4293      	cmp	r3, r2
 801c4e8:	d93f      	bls.n	801c56a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c4ea:	4b7a      	ldr	r3, [pc, #488]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c4ec:	689b      	ldr	r3, [r3, #8]
 801c4ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d009      	beq.n	801c50a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d033      	beq.n	801c56a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c506:	2b00      	cmp	r3, #0
 801c508:	d12f      	bne.n	801c56a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c50a:	4b72      	ldr	r3, [pc, #456]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c50c:	689b      	ldr	r3, [r3, #8]
 801c50e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c512:	4a70      	ldr	r2, [pc, #448]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c518:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c51a:	2380      	movs	r3, #128	; 0x80
 801c51c:	617b      	str	r3, [r7, #20]
 801c51e:	e024      	b.n	801c56a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	685b      	ldr	r3, [r3, #4]
 801c524:	2b02      	cmp	r3, #2
 801c526:	d107      	bne.n	801c538 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c528:	4b6a      	ldr	r3, [pc, #424]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c530:	2b00      	cmp	r3, #0
 801c532:	d109      	bne.n	801c548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c534:	2301      	movs	r3, #1
 801c536:	e0c6      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c538:	4b66      	ldr	r3, [pc, #408]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c540:	2b00      	cmp	r3, #0
 801c542:	d101      	bne.n	801c548 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c544:	2301      	movs	r3, #1
 801c546:	e0be      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c548:	f000 f8ce 	bl	801c6e8 <HAL_RCC_GetSysClockFreq>
 801c54c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c54e:	693b      	ldr	r3, [r7, #16]
 801c550:	4a61      	ldr	r2, [pc, #388]	; (801c6d8 <HAL_RCC_ClockConfig+0x268>)
 801c552:	4293      	cmp	r3, r2
 801c554:	d909      	bls.n	801c56a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c556:	4b5f      	ldr	r3, [pc, #380]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c558:	689b      	ldr	r3, [r3, #8]
 801c55a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c55e:	4a5d      	ldr	r2, [pc, #372]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c564:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c566:	2380      	movs	r3, #128	; 0x80
 801c568:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c56a:	4b5a      	ldr	r3, [pc, #360]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c56c:	689b      	ldr	r3, [r3, #8]
 801c56e:	f023 0203 	bic.w	r2, r3, #3
 801c572:	687b      	ldr	r3, [r7, #4]
 801c574:	685b      	ldr	r3, [r3, #4]
 801c576:	4957      	ldr	r1, [pc, #348]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c578:	4313      	orrs	r3, r2
 801c57a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c57c:	f7fc f9cc 	bl	8018918 <HAL_GetTick>
 801c580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c582:	e00a      	b.n	801c59a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c584:	f7fc f9c8 	bl	8018918 <HAL_GetTick>
 801c588:	4602      	mov	r2, r0
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	1ad3      	subs	r3, r2, r3
 801c58e:	f241 3288 	movw	r2, #5000	; 0x1388
 801c592:	4293      	cmp	r3, r2
 801c594:	d901      	bls.n	801c59a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801c596:	2303      	movs	r3, #3
 801c598:	e095      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c59a:	4b4e      	ldr	r3, [pc, #312]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c59c:	689b      	ldr	r3, [r3, #8]
 801c59e:	f003 020c 	and.w	r2, r3, #12
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	685b      	ldr	r3, [r3, #4]
 801c5a6:	009b      	lsls	r3, r3, #2
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d1eb      	bne.n	801c584 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	f003 0302 	and.w	r3, r3, #2
 801c5b4:	2b00      	cmp	r3, #0
 801c5b6:	d023      	beq.n	801c600 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	f003 0304 	and.w	r3, r3, #4
 801c5c0:	2b00      	cmp	r3, #0
 801c5c2:	d005      	beq.n	801c5d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c5c4:	4b43      	ldr	r3, [pc, #268]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c5c6:	689b      	ldr	r3, [r3, #8]
 801c5c8:	4a42      	ldr	r2, [pc, #264]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c5ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c5ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	f003 0308 	and.w	r3, r3, #8
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d007      	beq.n	801c5ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801c5dc:	4b3d      	ldr	r3, [pc, #244]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c5de:	689b      	ldr	r3, [r3, #8]
 801c5e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c5e4:	4a3b      	ldr	r2, [pc, #236]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c5e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c5ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c5ec:	4b39      	ldr	r3, [pc, #228]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c5ee:	689b      	ldr	r3, [r3, #8]
 801c5f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	689b      	ldr	r3, [r3, #8]
 801c5f8:	4936      	ldr	r1, [pc, #216]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c5fa:	4313      	orrs	r3, r2
 801c5fc:	608b      	str	r3, [r1, #8]
 801c5fe:	e008      	b.n	801c612 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801c600:	697b      	ldr	r3, [r7, #20]
 801c602:	2b80      	cmp	r3, #128	; 0x80
 801c604:	d105      	bne.n	801c612 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801c606:	4b33      	ldr	r3, [pc, #204]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c608:	689b      	ldr	r3, [r3, #8]
 801c60a:	4a32      	ldr	r2, [pc, #200]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c60c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c610:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c612:	4b2f      	ldr	r3, [pc, #188]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c614:	681b      	ldr	r3, [r3, #0]
 801c616:	f003 030f 	and.w	r3, r3, #15
 801c61a:	683a      	ldr	r2, [r7, #0]
 801c61c:	429a      	cmp	r2, r3
 801c61e:	d21d      	bcs.n	801c65c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c620:	4b2b      	ldr	r3, [pc, #172]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	f023 020f 	bic.w	r2, r3, #15
 801c628:	4929      	ldr	r1, [pc, #164]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c62a:	683b      	ldr	r3, [r7, #0]
 801c62c:	4313      	orrs	r3, r2
 801c62e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801c630:	f7fc f972 	bl	8018918 <HAL_GetTick>
 801c634:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c636:	e00a      	b.n	801c64e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c638:	f7fc f96e 	bl	8018918 <HAL_GetTick>
 801c63c:	4602      	mov	r2, r0
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	1ad3      	subs	r3, r2, r3
 801c642:	f241 3288 	movw	r2, #5000	; 0x1388
 801c646:	4293      	cmp	r3, r2
 801c648:	d901      	bls.n	801c64e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801c64a:	2303      	movs	r3, #3
 801c64c:	e03b      	b.n	801c6c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c64e:	4b20      	ldr	r3, [pc, #128]	; (801c6d0 <HAL_RCC_ClockConfig+0x260>)
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	f003 030f 	and.w	r3, r3, #15
 801c656:	683a      	ldr	r2, [r7, #0]
 801c658:	429a      	cmp	r2, r3
 801c65a:	d1ed      	bne.n	801c638 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	681b      	ldr	r3, [r3, #0]
 801c660:	f003 0304 	and.w	r3, r3, #4
 801c664:	2b00      	cmp	r3, #0
 801c666:	d008      	beq.n	801c67a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c668:	4b1a      	ldr	r3, [pc, #104]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c66a:	689b      	ldr	r3, [r3, #8]
 801c66c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	68db      	ldr	r3, [r3, #12]
 801c674:	4917      	ldr	r1, [pc, #92]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c676:	4313      	orrs	r3, r2
 801c678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	f003 0308 	and.w	r3, r3, #8
 801c682:	2b00      	cmp	r3, #0
 801c684:	d009      	beq.n	801c69a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c686:	4b13      	ldr	r3, [pc, #76]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c688:	689b      	ldr	r3, [r3, #8]
 801c68a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	691b      	ldr	r3, [r3, #16]
 801c692:	00db      	lsls	r3, r3, #3
 801c694:	490f      	ldr	r1, [pc, #60]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c696:	4313      	orrs	r3, r2
 801c698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c69a:	f000 f825 	bl	801c6e8 <HAL_RCC_GetSysClockFreq>
 801c69e:	4602      	mov	r2, r0
 801c6a0:	4b0c      	ldr	r3, [pc, #48]	; (801c6d4 <HAL_RCC_ClockConfig+0x264>)
 801c6a2:	689b      	ldr	r3, [r3, #8]
 801c6a4:	091b      	lsrs	r3, r3, #4
 801c6a6:	f003 030f 	and.w	r3, r3, #15
 801c6aa:	490c      	ldr	r1, [pc, #48]	; (801c6dc <HAL_RCC_ClockConfig+0x26c>)
 801c6ac:	5ccb      	ldrb	r3, [r1, r3]
 801c6ae:	f003 031f 	and.w	r3, r3, #31
 801c6b2:	fa22 f303 	lsr.w	r3, r2, r3
 801c6b6:	4a0a      	ldr	r2, [pc, #40]	; (801c6e0 <HAL_RCC_ClockConfig+0x270>)
 801c6b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801c6ba:	4b0a      	ldr	r3, [pc, #40]	; (801c6e4 <HAL_RCC_ClockConfig+0x274>)
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	4618      	mov	r0, r3
 801c6c0:	f7fc f8de 	bl	8018880 <HAL_InitTick>
 801c6c4:	4603      	mov	r3, r0
}
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	3718      	adds	r7, #24
 801c6ca:	46bd      	mov	sp, r7
 801c6cc:	bd80      	pop	{r7, pc}
 801c6ce:	bf00      	nop
 801c6d0:	40022000 	.word	0x40022000
 801c6d4:	40021000 	.word	0x40021000
 801c6d8:	04c4b400 	.word	0x04c4b400
 801c6dc:	08024430 	.word	0x08024430
 801c6e0:	20000000 	.word	0x20000000
 801c6e4:	20000004 	.word	0x20000004

0801c6e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c6e8:	b480      	push	{r7}
 801c6ea:	b087      	sub	sp, #28
 801c6ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801c6ee:	4b2c      	ldr	r3, [pc, #176]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c6f0:	689b      	ldr	r3, [r3, #8]
 801c6f2:	f003 030c 	and.w	r3, r3, #12
 801c6f6:	2b04      	cmp	r3, #4
 801c6f8:	d102      	bne.n	801c700 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801c6fa:	4b2a      	ldr	r3, [pc, #168]	; (801c7a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c6fc:	613b      	str	r3, [r7, #16]
 801c6fe:	e047      	b.n	801c790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801c700:	4b27      	ldr	r3, [pc, #156]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c702:	689b      	ldr	r3, [r3, #8]
 801c704:	f003 030c 	and.w	r3, r3, #12
 801c708:	2b08      	cmp	r3, #8
 801c70a:	d102      	bne.n	801c712 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801c70c:	4b25      	ldr	r3, [pc, #148]	; (801c7a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c70e:	613b      	str	r3, [r7, #16]
 801c710:	e03e      	b.n	801c790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801c712:	4b23      	ldr	r3, [pc, #140]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c714:	689b      	ldr	r3, [r3, #8]
 801c716:	f003 030c 	and.w	r3, r3, #12
 801c71a:	2b0c      	cmp	r3, #12
 801c71c:	d136      	bne.n	801c78c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c71e:	4b20      	ldr	r3, [pc, #128]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c720:	68db      	ldr	r3, [r3, #12]
 801c722:	f003 0303 	and.w	r3, r3, #3
 801c726:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c728:	4b1d      	ldr	r3, [pc, #116]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c72a:	68db      	ldr	r3, [r3, #12]
 801c72c:	091b      	lsrs	r3, r3, #4
 801c72e:	f003 030f 	and.w	r3, r3, #15
 801c732:	3301      	adds	r3, #1
 801c734:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	2b03      	cmp	r3, #3
 801c73a:	d10c      	bne.n	801c756 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c73c:	4a19      	ldr	r2, [pc, #100]	; (801c7a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c73e:	68bb      	ldr	r3, [r7, #8]
 801c740:	fbb2 f3f3 	udiv	r3, r2, r3
 801c744:	4a16      	ldr	r2, [pc, #88]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c746:	68d2      	ldr	r2, [r2, #12]
 801c748:	0a12      	lsrs	r2, r2, #8
 801c74a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c74e:	fb02 f303 	mul.w	r3, r2, r3
 801c752:	617b      	str	r3, [r7, #20]
      break;
 801c754:	e00c      	b.n	801c770 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c756:	4a13      	ldr	r2, [pc, #76]	; (801c7a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c758:	68bb      	ldr	r3, [r7, #8]
 801c75a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c75e:	4a10      	ldr	r2, [pc, #64]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c760:	68d2      	ldr	r2, [r2, #12]
 801c762:	0a12      	lsrs	r2, r2, #8
 801c764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c768:	fb02 f303 	mul.w	r3, r2, r3
 801c76c:	617b      	str	r3, [r7, #20]
      break;
 801c76e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c770:	4b0b      	ldr	r3, [pc, #44]	; (801c7a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c772:	68db      	ldr	r3, [r3, #12]
 801c774:	0e5b      	lsrs	r3, r3, #25
 801c776:	f003 0303 	and.w	r3, r3, #3
 801c77a:	3301      	adds	r3, #1
 801c77c:	005b      	lsls	r3, r3, #1
 801c77e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801c780:	697a      	ldr	r2, [r7, #20]
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	fbb2 f3f3 	udiv	r3, r2, r3
 801c788:	613b      	str	r3, [r7, #16]
 801c78a:	e001      	b.n	801c790 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801c78c:	2300      	movs	r3, #0
 801c78e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801c790:	693b      	ldr	r3, [r7, #16]
}
 801c792:	4618      	mov	r0, r3
 801c794:	371c      	adds	r7, #28
 801c796:	46bd      	mov	sp, r7
 801c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c79c:	4770      	bx	lr
 801c79e:	bf00      	nop
 801c7a0:	40021000 	.word	0x40021000
 801c7a4:	00f42400 	.word	0x00f42400

0801c7a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c7a8:	b480      	push	{r7}
 801c7aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c7ac:	4b03      	ldr	r3, [pc, #12]	; (801c7bc <HAL_RCC_GetHCLKFreq+0x14>)
 801c7ae:	681b      	ldr	r3, [r3, #0]
}
 801c7b0:	4618      	mov	r0, r3
 801c7b2:	46bd      	mov	sp, r7
 801c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7b8:	4770      	bx	lr
 801c7ba:	bf00      	nop
 801c7bc:	20000000 	.word	0x20000000

0801c7c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c7c0:	b580      	push	{r7, lr}
 801c7c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801c7c4:	f7ff fff0 	bl	801c7a8 <HAL_RCC_GetHCLKFreq>
 801c7c8:	4602      	mov	r2, r0
 801c7ca:	4b06      	ldr	r3, [pc, #24]	; (801c7e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 801c7cc:	689b      	ldr	r3, [r3, #8]
 801c7ce:	0a1b      	lsrs	r3, r3, #8
 801c7d0:	f003 0307 	and.w	r3, r3, #7
 801c7d4:	4904      	ldr	r1, [pc, #16]	; (801c7e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c7d6:	5ccb      	ldrb	r3, [r1, r3]
 801c7d8:	f003 031f 	and.w	r3, r3, #31
 801c7dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c7e0:	4618      	mov	r0, r3
 801c7e2:	bd80      	pop	{r7, pc}
 801c7e4:	40021000 	.word	0x40021000
 801c7e8:	08024440 	.word	0x08024440

0801c7ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801c7f0:	f7ff ffda 	bl	801c7a8 <HAL_RCC_GetHCLKFreq>
 801c7f4:	4602      	mov	r2, r0
 801c7f6:	4b06      	ldr	r3, [pc, #24]	; (801c810 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c7f8:	689b      	ldr	r3, [r3, #8]
 801c7fa:	0adb      	lsrs	r3, r3, #11
 801c7fc:	f003 0307 	and.w	r3, r3, #7
 801c800:	4904      	ldr	r1, [pc, #16]	; (801c814 <HAL_RCC_GetPCLK2Freq+0x28>)
 801c802:	5ccb      	ldrb	r3, [r1, r3]
 801c804:	f003 031f 	and.w	r3, r3, #31
 801c808:	fa22 f303 	lsr.w	r3, r2, r3
}
 801c80c:	4618      	mov	r0, r3
 801c80e:	bd80      	pop	{r7, pc}
 801c810:	40021000 	.word	0x40021000
 801c814:	08024440 	.word	0x08024440

0801c818 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801c818:	b480      	push	{r7}
 801c81a:	b087      	sub	sp, #28
 801c81c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c81e:	4b1e      	ldr	r3, [pc, #120]	; (801c898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c820:	68db      	ldr	r3, [r3, #12]
 801c822:	f003 0303 	and.w	r3, r3, #3
 801c826:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c828:	4b1b      	ldr	r3, [pc, #108]	; (801c898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c82a:	68db      	ldr	r3, [r3, #12]
 801c82c:	091b      	lsrs	r3, r3, #4
 801c82e:	f003 030f 	and.w	r3, r3, #15
 801c832:	3301      	adds	r3, #1
 801c834:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801c836:	693b      	ldr	r3, [r7, #16]
 801c838:	2b03      	cmp	r3, #3
 801c83a:	d10c      	bne.n	801c856 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c83c:	4a17      	ldr	r2, [pc, #92]	; (801c89c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	fbb2 f3f3 	udiv	r3, r2, r3
 801c844:	4a14      	ldr	r2, [pc, #80]	; (801c898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c846:	68d2      	ldr	r2, [r2, #12]
 801c848:	0a12      	lsrs	r2, r2, #8
 801c84a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c84e:	fb02 f303 	mul.w	r3, r2, r3
 801c852:	617b      	str	r3, [r7, #20]
    break;
 801c854:	e00c      	b.n	801c870 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c856:	4a11      	ldr	r2, [pc, #68]	; (801c89c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	fbb2 f3f3 	udiv	r3, r2, r3
 801c85e:	4a0e      	ldr	r2, [pc, #56]	; (801c898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c860:	68d2      	ldr	r2, [r2, #12]
 801c862:	0a12      	lsrs	r2, r2, #8
 801c864:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801c868:	fb02 f303 	mul.w	r3, r2, r3
 801c86c:	617b      	str	r3, [r7, #20]
    break;
 801c86e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801c870:	4b09      	ldr	r3, [pc, #36]	; (801c898 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801c872:	68db      	ldr	r3, [r3, #12]
 801c874:	0e5b      	lsrs	r3, r3, #25
 801c876:	f003 0303 	and.w	r3, r3, #3
 801c87a:	3301      	adds	r3, #1
 801c87c:	005b      	lsls	r3, r3, #1
 801c87e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801c880:	697a      	ldr	r2, [r7, #20]
 801c882:	68bb      	ldr	r3, [r7, #8]
 801c884:	fbb2 f3f3 	udiv	r3, r2, r3
 801c888:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801c88a:	687b      	ldr	r3, [r7, #4]
}
 801c88c:	4618      	mov	r0, r3
 801c88e:	371c      	adds	r7, #28
 801c890:	46bd      	mov	sp, r7
 801c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c896:	4770      	bx	lr
 801c898:	40021000 	.word	0x40021000
 801c89c:	00f42400 	.word	0x00f42400

0801c8a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c8a0:	b580      	push	{r7, lr}
 801c8a2:	b086      	sub	sp, #24
 801c8a4:	af00      	add	r7, sp, #0
 801c8a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c8ac:	2300      	movs	r3, #0
 801c8ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	681b      	ldr	r3, [r3, #0]
 801c8b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	f000 8098 	beq.w	801c9ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c8be:	2300      	movs	r3, #0
 801c8c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c8c2:	4b43      	ldr	r3, [pc, #268]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c8c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	d10d      	bne.n	801c8ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c8ce:	4b40      	ldr	r3, [pc, #256]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8d2:	4a3f      	ldr	r2, [pc, #252]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c8d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c8d8:	6593      	str	r3, [r2, #88]	; 0x58
 801c8da:	4b3d      	ldr	r3, [pc, #244]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c8dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c8e2:	60bb      	str	r3, [r7, #8]
 801c8e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c8e6:	2301      	movs	r3, #1
 801c8e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c8ea:	4b3a      	ldr	r3, [pc, #232]	; (801c9d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801c8ec:	681b      	ldr	r3, [r3, #0]
 801c8ee:	4a39      	ldr	r2, [pc, #228]	; (801c9d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801c8f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c8f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c8f6:	f7fc f80f 	bl	8018918 <HAL_GetTick>
 801c8fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c8fc:	e009      	b.n	801c912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c8fe:	f7fc f80b 	bl	8018918 <HAL_GetTick>
 801c902:	4602      	mov	r2, r0
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	1ad3      	subs	r3, r2, r3
 801c908:	2b02      	cmp	r3, #2
 801c90a:	d902      	bls.n	801c912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801c90c:	2303      	movs	r3, #3
 801c90e:	74fb      	strb	r3, [r7, #19]
        break;
 801c910:	e005      	b.n	801c91e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c912:	4b30      	ldr	r3, [pc, #192]	; (801c9d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d0ef      	beq.n	801c8fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801c91e:	7cfb      	ldrb	r3, [r7, #19]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d159      	bne.n	801c9d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801c924:	4b2a      	ldr	r3, [pc, #168]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c92a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c92e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801c930:	697b      	ldr	r3, [r7, #20]
 801c932:	2b00      	cmp	r3, #0
 801c934:	d01e      	beq.n	801c974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c93a:	697a      	ldr	r2, [r7, #20]
 801c93c:	429a      	cmp	r2, r3
 801c93e:	d019      	beq.n	801c974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801c940:	4b23      	ldr	r3, [pc, #140]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c94a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c94c:	4b20      	ldr	r3, [pc, #128]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c952:	4a1f      	ldr	r2, [pc, #124]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c95c:	4b1c      	ldr	r3, [pc, #112]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c962:	4a1b      	ldr	r2, [pc, #108]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801c96c:	4a18      	ldr	r2, [pc, #96]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c96e:	697b      	ldr	r3, [r7, #20]
 801c970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	f003 0301 	and.w	r3, r3, #1
 801c97a:	2b00      	cmp	r3, #0
 801c97c:	d016      	beq.n	801c9ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c97e:	f7fb ffcb 	bl	8018918 <HAL_GetTick>
 801c982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c984:	e00b      	b.n	801c99e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c986:	f7fb ffc7 	bl	8018918 <HAL_GetTick>
 801c98a:	4602      	mov	r2, r0
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	1ad3      	subs	r3, r2, r3
 801c990:	f241 3288 	movw	r2, #5000	; 0x1388
 801c994:	4293      	cmp	r3, r2
 801c996:	d902      	bls.n	801c99e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801c998:	2303      	movs	r3, #3
 801c99a:	74fb      	strb	r3, [r7, #19]
            break;
 801c99c:	e006      	b.n	801c9ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c99e:	4b0c      	ldr	r3, [pc, #48]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c9a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c9a4:	f003 0302 	and.w	r3, r3, #2
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d0ec      	beq.n	801c986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801c9ac:	7cfb      	ldrb	r3, [r7, #19]
 801c9ae:	2b00      	cmp	r3, #0
 801c9b0:	d10b      	bne.n	801c9ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c9b2:	4b07      	ldr	r3, [pc, #28]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c9b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c9b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c9c0:	4903      	ldr	r1, [pc, #12]	; (801c9d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801c9c2:	4313      	orrs	r3, r2
 801c9c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801c9c8:	e008      	b.n	801c9dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c9ca:	7cfb      	ldrb	r3, [r7, #19]
 801c9cc:	74bb      	strb	r3, [r7, #18]
 801c9ce:	e005      	b.n	801c9dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801c9d0:	40021000 	.word	0x40021000
 801c9d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9d8:	7cfb      	ldrb	r3, [r7, #19]
 801c9da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801c9dc:	7c7b      	ldrb	r3, [r7, #17]
 801c9de:	2b01      	cmp	r3, #1
 801c9e0:	d105      	bne.n	801c9ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c9e2:	4ba7      	ldr	r3, [pc, #668]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9e6:	4aa6      	ldr	r2, [pc, #664]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c9ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	681b      	ldr	r3, [r3, #0]
 801c9f2:	f003 0301 	and.w	r3, r3, #1
 801c9f6:	2b00      	cmp	r3, #0
 801c9f8:	d00a      	beq.n	801ca10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801c9fa:	4ba1      	ldr	r3, [pc, #644]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801c9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca00:	f023 0203 	bic.w	r2, r3, #3
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	685b      	ldr	r3, [r3, #4]
 801ca08:	499d      	ldr	r1, [pc, #628]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca0a:	4313      	orrs	r3, r2
 801ca0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801ca10:	687b      	ldr	r3, [r7, #4]
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	f003 0302 	and.w	r3, r3, #2
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d00a      	beq.n	801ca32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ca1c:	4b98      	ldr	r3, [pc, #608]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca22:	f023 020c 	bic.w	r2, r3, #12
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	689b      	ldr	r3, [r3, #8]
 801ca2a:	4995      	ldr	r1, [pc, #596]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca2c:	4313      	orrs	r3, r2
 801ca2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	f003 0304 	and.w	r3, r3, #4
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d00a      	beq.n	801ca54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801ca3e:	4b90      	ldr	r3, [pc, #576]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	68db      	ldr	r3, [r3, #12]
 801ca4c:	498c      	ldr	r1, [pc, #560]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca4e:	4313      	orrs	r3, r2
 801ca50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801ca54:	687b      	ldr	r3, [r7, #4]
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	f003 0308 	and.w	r3, r3, #8
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d00a      	beq.n	801ca76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801ca60:	4b87      	ldr	r3, [pc, #540]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801ca6a:	687b      	ldr	r3, [r7, #4]
 801ca6c:	691b      	ldr	r3, [r3, #16]
 801ca6e:	4984      	ldr	r1, [pc, #528]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca70:	4313      	orrs	r3, r2
 801ca72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801ca76:	687b      	ldr	r3, [r7, #4]
 801ca78:	681b      	ldr	r3, [r3, #0]
 801ca7a:	f003 0310 	and.w	r3, r3, #16
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	d00a      	beq.n	801ca98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801ca82:	4b7f      	ldr	r3, [pc, #508]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ca88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	695b      	ldr	r3, [r3, #20]
 801ca90:	497b      	ldr	r1, [pc, #492]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ca92:	4313      	orrs	r3, r2
 801ca94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ca98:	687b      	ldr	r3, [r7, #4]
 801ca9a:	681b      	ldr	r3, [r3, #0]
 801ca9c:	f003 0320 	and.w	r3, r3, #32
 801caa0:	2b00      	cmp	r3, #0
 801caa2:	d00a      	beq.n	801caba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801caa4:	4b76      	ldr	r3, [pc, #472]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801caa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801caaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	699b      	ldr	r3, [r3, #24]
 801cab2:	4973      	ldr	r1, [pc, #460]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cab4:	4313      	orrs	r3, r2
 801cab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d00a      	beq.n	801cadc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cac6:	4b6e      	ldr	r3, [pc, #440]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cacc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	69db      	ldr	r3, [r3, #28]
 801cad4:	496a      	ldr	r1, [pc, #424]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cad6:	4313      	orrs	r3, r2
 801cad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cadc:	687b      	ldr	r3, [r7, #4]
 801cade:	681b      	ldr	r3, [r3, #0]
 801cae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d00a      	beq.n	801cafe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cae8:	4b65      	ldr	r3, [pc, #404]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801caea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801caee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	6a1b      	ldr	r3, [r3, #32]
 801caf6:	4962      	ldr	r1, [pc, #392]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801caf8:	4313      	orrs	r3, r2
 801cafa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	681b      	ldr	r3, [r3, #0]
 801cb02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d00a      	beq.n	801cb20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cb0a:	4b5d      	ldr	r3, [pc, #372]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cb18:	4959      	ldr	r1, [pc, #356]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb1a:	4313      	orrs	r3, r2
 801cb1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cb20:	687b      	ldr	r3, [r7, #4]
 801cb22:	681b      	ldr	r3, [r3, #0]
 801cb24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d00a      	beq.n	801cb42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cb2c:	4b54      	ldr	r3, [pc, #336]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb3a:	4951      	ldr	r1, [pc, #324]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb3c:	4313      	orrs	r3, r2
 801cb3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	681b      	ldr	r3, [r3, #0]
 801cb46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d015      	beq.n	801cb7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cb4e:	4b4c      	ldr	r3, [pc, #304]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb5c:	4948      	ldr	r1, [pc, #288]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb5e:	4313      	orrs	r3, r2
 801cb60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cb6c:	d105      	bne.n	801cb7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cb6e:	4b44      	ldr	r3, [pc, #272]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb70:	68db      	ldr	r3, [r3, #12]
 801cb72:	4a43      	ldr	r2, [pc, #268]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cb78:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d015      	beq.n	801cbb2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801cb86:	4b3e      	ldr	r3, [pc, #248]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cb8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb94:	493a      	ldr	r1, [pc, #232]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cb96:	4313      	orrs	r3, r2
 801cb98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801cb9c:	687b      	ldr	r3, [r7, #4]
 801cb9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cba4:	d105      	bne.n	801cbb2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cba6:	4b36      	ldr	r3, [pc, #216]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cba8:	68db      	ldr	r3, [r3, #12]
 801cbaa:	4a35      	ldr	r2, [pc, #212]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cbb0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	681b      	ldr	r3, [r3, #0]
 801cbb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cbba:	2b00      	cmp	r3, #0
 801cbbc:	d015      	beq.n	801cbea <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cbbe:	4b30      	ldr	r3, [pc, #192]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cbc4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cbcc:	492c      	ldr	r1, [pc, #176]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbce:	4313      	orrs	r3, r2
 801cbd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cbd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801cbdc:	d105      	bne.n	801cbea <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cbde:	4b28      	ldr	r3, [pc, #160]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbe0:	68db      	ldr	r3, [r3, #12]
 801cbe2:	4a27      	ldr	r2, [pc, #156]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbe4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cbe8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	681b      	ldr	r3, [r3, #0]
 801cbee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cbf2:	2b00      	cmp	r3, #0
 801cbf4:	d015      	beq.n	801cc22 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cbf6:	4b22      	ldr	r3, [pc, #136]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cbf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cbfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cc00:	687b      	ldr	r3, [r7, #4]
 801cc02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc04:	491e      	ldr	r1, [pc, #120]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc06:	4313      	orrs	r3, r2
 801cc08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cc14:	d105      	bne.n	801cc22 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cc16:	4b1a      	ldr	r3, [pc, #104]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc18:	68db      	ldr	r3, [r3, #12]
 801cc1a:	4a19      	ldr	r2, [pc, #100]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cc20:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	681b      	ldr	r3, [r3, #0]
 801cc26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cc2a:	2b00      	cmp	r3, #0
 801cc2c:	d015      	beq.n	801cc5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cc2e:	4b14      	ldr	r3, [pc, #80]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc3c:	4910      	ldr	r1, [pc, #64]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc3e:	4313      	orrs	r3, r2
 801cc40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cc48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cc4c:	d105      	bne.n	801cc5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cc4e:	4b0c      	ldr	r3, [pc, #48]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc50:	68db      	ldr	r3, [r3, #12]
 801cc52:	4a0b      	ldr	r2, [pc, #44]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cc58:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801cc5a:	687b      	ldr	r3, [r7, #4]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d018      	beq.n	801cc98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801cc66:	4b06      	ldr	r3, [pc, #24]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cc6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc74:	4902      	ldr	r1, [pc, #8]	; (801cc80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc76:	4313      	orrs	r3, r2
 801cc78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	e001      	b.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801cc80:	40021000 	.word	0x40021000
 801cc84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cc86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cc8a:	d105      	bne.n	801cc98 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801cc8c:	4b21      	ldr	r3, [pc, #132]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cc8e:	68db      	ldr	r3, [r3, #12]
 801cc90:	4a20      	ldr	r2, [pc, #128]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cc92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc96:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	681b      	ldr	r3, [r3, #0]
 801cc9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cca0:	2b00      	cmp	r3, #0
 801cca2:	d015      	beq.n	801ccd0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801cca4:	4b1b      	ldr	r3, [pc, #108]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccaa:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ccb2:	4918      	ldr	r1, [pc, #96]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ccb4:	4313      	orrs	r3, r2
 801ccb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ccbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ccc2:	d105      	bne.n	801ccd0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801ccc4:	4b13      	ldr	r3, [pc, #76]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ccc6:	68db      	ldr	r3, [r3, #12]
 801ccc8:	4a12      	ldr	r2, [pc, #72]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ccca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ccce:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	d015      	beq.n	801cd08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801ccdc:	4b0d      	ldr	r3, [pc, #52]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ccde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ccea:	490a      	ldr	r1, [pc, #40]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ccec:	4313      	orrs	r3, r2
 801ccee:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ccf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ccfa:	d105      	bne.n	801cd08 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ccfc:	4b05      	ldr	r3, [pc, #20]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801ccfe:	68db      	ldr	r3, [r3, #12]
 801cd00:	4a04      	ldr	r2, [pc, #16]	; (801cd14 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cd02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cd06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801cd08:	7cbb      	ldrb	r3, [r7, #18]
}
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	3718      	adds	r7, #24
 801cd0e:	46bd      	mov	sp, r7
 801cd10:	bd80      	pop	{r7, pc}
 801cd12:	bf00      	nop
 801cd14:	40021000 	.word	0x40021000

0801cd18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801cd18:	b580      	push	{r7, lr}
 801cd1a:	b084      	sub	sp, #16
 801cd1c:	af00      	add	r7, sp, #0
 801cd1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801cd20:	687b      	ldr	r3, [r7, #4]
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d101      	bne.n	801cd2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801cd26:	2301      	movs	r3, #1
 801cd28:	e09d      	b.n	801ce66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d108      	bne.n	801cd44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cd32:	687b      	ldr	r3, [r7, #4]
 801cd34:	685b      	ldr	r3, [r3, #4]
 801cd36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cd3a:	d009      	beq.n	801cd50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801cd3c:	687b      	ldr	r3, [r7, #4]
 801cd3e:	2200      	movs	r2, #0
 801cd40:	61da      	str	r2, [r3, #28]
 801cd42:	e005      	b.n	801cd50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	2200      	movs	r2, #0
 801cd48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	2200      	movs	r2, #0
 801cd4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	2200      	movs	r2, #0
 801cd54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801cd5c:	b2db      	uxtb	r3, r3
 801cd5e:	2b00      	cmp	r3, #0
 801cd60:	d106      	bne.n	801cd70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	2200      	movs	r2, #0
 801cd66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801cd6a:	6878      	ldr	r0, [r7, #4]
 801cd6c:	f7fa f8f4 	bl	8016f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	2202      	movs	r2, #2
 801cd74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	681b      	ldr	r3, [r3, #0]
 801cd7c:	681a      	ldr	r2, [r3, #0]
 801cd7e:	687b      	ldr	r3, [r7, #4]
 801cd80:	681b      	ldr	r3, [r3, #0]
 801cd82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cd86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	68db      	ldr	r3, [r3, #12]
 801cd8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cd90:	d902      	bls.n	801cd98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801cd92:	2300      	movs	r3, #0
 801cd94:	60fb      	str	r3, [r7, #12]
 801cd96:	e002      	b.n	801cd9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801cd98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801cd9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801cd9e:	687b      	ldr	r3, [r7, #4]
 801cda0:	68db      	ldr	r3, [r3, #12]
 801cda2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801cda6:	d007      	beq.n	801cdb8 <HAL_SPI_Init+0xa0>
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	68db      	ldr	r3, [r3, #12]
 801cdac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cdb0:	d002      	beq.n	801cdb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	2200      	movs	r2, #0
 801cdb6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801cdb8:	687b      	ldr	r3, [r7, #4]
 801cdba:	685b      	ldr	r3, [r3, #4]
 801cdbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801cdc0:	687b      	ldr	r3, [r7, #4]
 801cdc2:	689b      	ldr	r3, [r3, #8]
 801cdc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801cdc8:	431a      	orrs	r2, r3
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	691b      	ldr	r3, [r3, #16]
 801cdce:	f003 0302 	and.w	r3, r3, #2
 801cdd2:	431a      	orrs	r2, r3
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	695b      	ldr	r3, [r3, #20]
 801cdd8:	f003 0301 	and.w	r3, r3, #1
 801cddc:	431a      	orrs	r2, r3
 801cdde:	687b      	ldr	r3, [r7, #4]
 801cde0:	699b      	ldr	r3, [r3, #24]
 801cde2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cde6:	431a      	orrs	r2, r3
 801cde8:	687b      	ldr	r3, [r7, #4]
 801cdea:	69db      	ldr	r3, [r3, #28]
 801cdec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801cdf0:	431a      	orrs	r2, r3
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	6a1b      	ldr	r3, [r3, #32]
 801cdf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cdfa:	ea42 0103 	orr.w	r1, r2, r3
 801cdfe:	687b      	ldr	r3, [r7, #4]
 801ce00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ce02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801ce06:	687b      	ldr	r3, [r7, #4]
 801ce08:	681b      	ldr	r3, [r3, #0]
 801ce0a:	430a      	orrs	r2, r1
 801ce0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	699b      	ldr	r3, [r3, #24]
 801ce12:	0c1b      	lsrs	r3, r3, #16
 801ce14:	f003 0204 	and.w	r2, r3, #4
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce1c:	f003 0310 	and.w	r3, r3, #16
 801ce20:	431a      	orrs	r2, r3
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce26:	f003 0308 	and.w	r3, r3, #8
 801ce2a:	431a      	orrs	r2, r3
 801ce2c:	687b      	ldr	r3, [r7, #4]
 801ce2e:	68db      	ldr	r3, [r3, #12]
 801ce30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801ce34:	ea42 0103 	orr.w	r1, r2, r3
 801ce38:	68fb      	ldr	r3, [r7, #12]
 801ce3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	430a      	orrs	r2, r1
 801ce44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	69da      	ldr	r2, [r3, #28]
 801ce4c:	687b      	ldr	r3, [r7, #4]
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801ce54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	2200      	movs	r2, #0
 801ce5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	2201      	movs	r2, #1
 801ce60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801ce64:	2300      	movs	r3, #0
}
 801ce66:	4618      	mov	r0, r3
 801ce68:	3710      	adds	r7, #16
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	bd80      	pop	{r7, pc}

0801ce6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ce6e:	b580      	push	{r7, lr}
 801ce70:	b088      	sub	sp, #32
 801ce72:	af00      	add	r7, sp, #0
 801ce74:	60f8      	str	r0, [r7, #12]
 801ce76:	60b9      	str	r1, [r7, #8]
 801ce78:	603b      	str	r3, [r7, #0]
 801ce7a:	4613      	mov	r3, r2
 801ce7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801ce7e:	2300      	movs	r3, #0
 801ce80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ce82:	68fb      	ldr	r3, [r7, #12]
 801ce84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ce88:	2b01      	cmp	r3, #1
 801ce8a:	d101      	bne.n	801ce90 <HAL_SPI_Transmit+0x22>
 801ce8c:	2302      	movs	r3, #2
 801ce8e:	e158      	b.n	801d142 <HAL_SPI_Transmit+0x2d4>
 801ce90:	68fb      	ldr	r3, [r7, #12]
 801ce92:	2201      	movs	r2, #1
 801ce94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ce98:	f7fb fd3e 	bl	8018918 <HAL_GetTick>
 801ce9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801ce9e:	88fb      	ldrh	r3, [r7, #6]
 801cea0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801cea8:	b2db      	uxtb	r3, r3
 801ceaa:	2b01      	cmp	r3, #1
 801ceac:	d002      	beq.n	801ceb4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801ceae:	2302      	movs	r3, #2
 801ceb0:	77fb      	strb	r3, [r7, #31]
    goto error;
 801ceb2:	e13d      	b.n	801d130 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801ceb4:	68bb      	ldr	r3, [r7, #8]
 801ceb6:	2b00      	cmp	r3, #0
 801ceb8:	d002      	beq.n	801cec0 <HAL_SPI_Transmit+0x52>
 801ceba:	88fb      	ldrh	r3, [r7, #6]
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d102      	bne.n	801cec6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801cec0:	2301      	movs	r3, #1
 801cec2:	77fb      	strb	r3, [r7, #31]
    goto error;
 801cec4:	e134      	b.n	801d130 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801cec6:	68fb      	ldr	r3, [r7, #12]
 801cec8:	2203      	movs	r2, #3
 801ceca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801cece:	68fb      	ldr	r3, [r7, #12]
 801ced0:	2200      	movs	r2, #0
 801ced2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801ced4:	68fb      	ldr	r3, [r7, #12]
 801ced6:	68ba      	ldr	r2, [r7, #8]
 801ced8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	88fa      	ldrh	r2, [r7, #6]
 801cede:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801cee0:	68fb      	ldr	r3, [r7, #12]
 801cee2:	88fa      	ldrh	r2, [r7, #6]
 801cee4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	2200      	movs	r2, #0
 801ceea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	2200      	movs	r2, #0
 801cef0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801cef4:	68fb      	ldr	r3, [r7, #12]
 801cef6:	2200      	movs	r2, #0
 801cef8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801cefc:	68fb      	ldr	r3, [r7, #12]
 801cefe:	2200      	movs	r2, #0
 801cf00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801cf02:	68fb      	ldr	r3, [r7, #12]
 801cf04:	2200      	movs	r2, #0
 801cf06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	689b      	ldr	r3, [r3, #8]
 801cf0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cf10:	d10f      	bne.n	801cf32 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	681b      	ldr	r3, [r3, #0]
 801cf16:	681a      	ldr	r2, [r3, #0]
 801cf18:	68fb      	ldr	r3, [r7, #12]
 801cf1a:	681b      	ldr	r3, [r3, #0]
 801cf1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801cf20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801cf22:	68fb      	ldr	r3, [r7, #12]
 801cf24:	681b      	ldr	r3, [r3, #0]
 801cf26:	681a      	ldr	r2, [r3, #0]
 801cf28:	68fb      	ldr	r3, [r7, #12]
 801cf2a:	681b      	ldr	r3, [r3, #0]
 801cf2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801cf30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801cf32:	68fb      	ldr	r3, [r7, #12]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	681b      	ldr	r3, [r3, #0]
 801cf38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cf3c:	2b40      	cmp	r3, #64	; 0x40
 801cf3e:	d007      	beq.n	801cf50 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	681a      	ldr	r2, [r3, #0]
 801cf46:	68fb      	ldr	r3, [r7, #12]
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801cf4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	68db      	ldr	r3, [r3, #12]
 801cf54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801cf58:	d94b      	bls.n	801cff2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cf5a:	68fb      	ldr	r3, [r7, #12]
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	d002      	beq.n	801cf68 <HAL_SPI_Transmit+0xfa>
 801cf62:	8afb      	ldrh	r3, [r7, #22]
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	d13e      	bne.n	801cfe6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf68:	68fb      	ldr	r3, [r7, #12]
 801cf6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf6c:	881a      	ldrh	r2, [r3, #0]
 801cf6e:	68fb      	ldr	r3, [r7, #12]
 801cf70:	681b      	ldr	r3, [r3, #0]
 801cf72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801cf74:	68fb      	ldr	r3, [r7, #12]
 801cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cf78:	1c9a      	adds	r2, r3, #2
 801cf7a:	68fb      	ldr	r3, [r7, #12]
 801cf7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801cf7e:	68fb      	ldr	r3, [r7, #12]
 801cf80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cf82:	b29b      	uxth	r3, r3
 801cf84:	3b01      	subs	r3, #1
 801cf86:	b29a      	uxth	r2, r3
 801cf88:	68fb      	ldr	r3, [r7, #12]
 801cf8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801cf8c:	e02b      	b.n	801cfe6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801cf8e:	68fb      	ldr	r3, [r7, #12]
 801cf90:	681b      	ldr	r3, [r3, #0]
 801cf92:	689b      	ldr	r3, [r3, #8]
 801cf94:	f003 0302 	and.w	r3, r3, #2
 801cf98:	2b02      	cmp	r3, #2
 801cf9a:	d112      	bne.n	801cfc2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801cf9c:	68fb      	ldr	r3, [r7, #12]
 801cf9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfa0:	881a      	ldrh	r2, [r3, #0]
 801cfa2:	68fb      	ldr	r3, [r7, #12]
 801cfa4:	681b      	ldr	r3, [r3, #0]
 801cfa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801cfa8:	68fb      	ldr	r3, [r7, #12]
 801cfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cfac:	1c9a      	adds	r2, r3, #2
 801cfae:	68fb      	ldr	r3, [r7, #12]
 801cfb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801cfb2:	68fb      	ldr	r3, [r7, #12]
 801cfb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfb6:	b29b      	uxth	r3, r3
 801cfb8:	3b01      	subs	r3, #1
 801cfba:	b29a      	uxth	r2, r3
 801cfbc:	68fb      	ldr	r3, [r7, #12]
 801cfbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 801cfc0:	e011      	b.n	801cfe6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801cfc2:	f7fb fca9 	bl	8018918 <HAL_GetTick>
 801cfc6:	4602      	mov	r2, r0
 801cfc8:	69bb      	ldr	r3, [r7, #24]
 801cfca:	1ad3      	subs	r3, r2, r3
 801cfcc:	683a      	ldr	r2, [r7, #0]
 801cfce:	429a      	cmp	r2, r3
 801cfd0:	d803      	bhi.n	801cfda <HAL_SPI_Transmit+0x16c>
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cfd8:	d102      	bne.n	801cfe0 <HAL_SPI_Transmit+0x172>
 801cfda:	683b      	ldr	r3, [r7, #0]
 801cfdc:	2b00      	cmp	r3, #0
 801cfde:	d102      	bne.n	801cfe6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801cfe0:	2303      	movs	r3, #3
 801cfe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 801cfe4:	e0a4      	b.n	801d130 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801cfe6:	68fb      	ldr	r3, [r7, #12]
 801cfe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801cfea:	b29b      	uxth	r3, r3
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d1ce      	bne.n	801cf8e <HAL_SPI_Transmit+0x120>
 801cff0:	e07c      	b.n	801d0ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801cff2:	68fb      	ldr	r3, [r7, #12]
 801cff4:	685b      	ldr	r3, [r3, #4]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	d002      	beq.n	801d000 <HAL_SPI_Transmit+0x192>
 801cffa:	8afb      	ldrh	r3, [r7, #22]
 801cffc:	2b01      	cmp	r3, #1
 801cffe:	d170      	bne.n	801d0e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d000:	68fb      	ldr	r3, [r7, #12]
 801d002:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d004:	b29b      	uxth	r3, r3
 801d006:	2b01      	cmp	r3, #1
 801d008:	d912      	bls.n	801d030 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d00a:	68fb      	ldr	r3, [r7, #12]
 801d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d00e:	881a      	ldrh	r2, [r3, #0]
 801d010:	68fb      	ldr	r3, [r7, #12]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d016:	68fb      	ldr	r3, [r7, #12]
 801d018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d01a:	1c9a      	adds	r2, r3, #2
 801d01c:	68fb      	ldr	r3, [r7, #12]
 801d01e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d020:	68fb      	ldr	r3, [r7, #12]
 801d022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d024:	b29b      	uxth	r3, r3
 801d026:	3b02      	subs	r3, #2
 801d028:	b29a      	uxth	r2, r3
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d02e:	e058      	b.n	801d0e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d030:	68fb      	ldr	r3, [r7, #12]
 801d032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d034:	68fb      	ldr	r3, [r7, #12]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	330c      	adds	r3, #12
 801d03a:	7812      	ldrb	r2, [r2, #0]
 801d03c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d03e:	68fb      	ldr	r3, [r7, #12]
 801d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d042:	1c5a      	adds	r2, r3, #1
 801d044:	68fb      	ldr	r3, [r7, #12]
 801d046:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d048:	68fb      	ldr	r3, [r7, #12]
 801d04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d04c:	b29b      	uxth	r3, r3
 801d04e:	3b01      	subs	r3, #1
 801d050:	b29a      	uxth	r2, r3
 801d052:	68fb      	ldr	r3, [r7, #12]
 801d054:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d056:	e044      	b.n	801d0e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d058:	68fb      	ldr	r3, [r7, #12]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	689b      	ldr	r3, [r3, #8]
 801d05e:	f003 0302 	and.w	r3, r3, #2
 801d062:	2b02      	cmp	r3, #2
 801d064:	d12b      	bne.n	801d0be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d066:	68fb      	ldr	r3, [r7, #12]
 801d068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d06a:	b29b      	uxth	r3, r3
 801d06c:	2b01      	cmp	r3, #1
 801d06e:	d912      	bls.n	801d096 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d070:	68fb      	ldr	r3, [r7, #12]
 801d072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d074:	881a      	ldrh	r2, [r3, #0]
 801d076:	68fb      	ldr	r3, [r7, #12]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d07c:	68fb      	ldr	r3, [r7, #12]
 801d07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d080:	1c9a      	adds	r2, r3, #2
 801d082:	68fb      	ldr	r3, [r7, #12]
 801d084:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d08a:	b29b      	uxth	r3, r3
 801d08c:	3b02      	subs	r3, #2
 801d08e:	b29a      	uxth	r2, r3
 801d090:	68fb      	ldr	r3, [r7, #12]
 801d092:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d094:	e025      	b.n	801d0e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d096:	68fb      	ldr	r3, [r7, #12]
 801d098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d09a:	68fb      	ldr	r3, [r7, #12]
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	330c      	adds	r3, #12
 801d0a0:	7812      	ldrb	r2, [r2, #0]
 801d0a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d0a4:	68fb      	ldr	r3, [r7, #12]
 801d0a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d0a8:	1c5a      	adds	r2, r3, #1
 801d0aa:	68fb      	ldr	r3, [r7, #12]
 801d0ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d0ae:	68fb      	ldr	r3, [r7, #12]
 801d0b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d0b2:	b29b      	uxth	r3, r3
 801d0b4:	3b01      	subs	r3, #1
 801d0b6:	b29a      	uxth	r2, r3
 801d0b8:	68fb      	ldr	r3, [r7, #12]
 801d0ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d0bc:	e011      	b.n	801d0e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d0be:	f7fb fc2b 	bl	8018918 <HAL_GetTick>
 801d0c2:	4602      	mov	r2, r0
 801d0c4:	69bb      	ldr	r3, [r7, #24]
 801d0c6:	1ad3      	subs	r3, r2, r3
 801d0c8:	683a      	ldr	r2, [r7, #0]
 801d0ca:	429a      	cmp	r2, r3
 801d0cc:	d803      	bhi.n	801d0d6 <HAL_SPI_Transmit+0x268>
 801d0ce:	683b      	ldr	r3, [r7, #0]
 801d0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d0d4:	d102      	bne.n	801d0dc <HAL_SPI_Transmit+0x26e>
 801d0d6:	683b      	ldr	r3, [r7, #0]
 801d0d8:	2b00      	cmp	r3, #0
 801d0da:	d102      	bne.n	801d0e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d0dc:	2303      	movs	r3, #3
 801d0de:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d0e0:	e026      	b.n	801d130 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d0e2:	68fb      	ldr	r3, [r7, #12]
 801d0e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d0e6:	b29b      	uxth	r3, r3
 801d0e8:	2b00      	cmp	r3, #0
 801d0ea:	d1b5      	bne.n	801d058 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d0ec:	69ba      	ldr	r2, [r7, #24]
 801d0ee:	6839      	ldr	r1, [r7, #0]
 801d0f0:	68f8      	ldr	r0, [r7, #12]
 801d0f2:	f000 fce3 	bl	801dabc <SPI_EndRxTxTransaction>
 801d0f6:	4603      	mov	r3, r0
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d002      	beq.n	801d102 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d0fc:	68fb      	ldr	r3, [r7, #12]
 801d0fe:	2220      	movs	r2, #32
 801d100:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d102:	68fb      	ldr	r3, [r7, #12]
 801d104:	689b      	ldr	r3, [r3, #8]
 801d106:	2b00      	cmp	r3, #0
 801d108:	d10a      	bne.n	801d120 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d10a:	2300      	movs	r3, #0
 801d10c:	613b      	str	r3, [r7, #16]
 801d10e:	68fb      	ldr	r3, [r7, #12]
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	68db      	ldr	r3, [r3, #12]
 801d114:	613b      	str	r3, [r7, #16]
 801d116:	68fb      	ldr	r3, [r7, #12]
 801d118:	681b      	ldr	r3, [r3, #0]
 801d11a:	689b      	ldr	r3, [r3, #8]
 801d11c:	613b      	str	r3, [r7, #16]
 801d11e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d120:	68fb      	ldr	r3, [r7, #12]
 801d122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d124:	2b00      	cmp	r3, #0
 801d126:	d002      	beq.n	801d12e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d128:	2301      	movs	r3, #1
 801d12a:	77fb      	strb	r3, [r7, #31]
 801d12c:	e000      	b.n	801d130 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d12e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	2201      	movs	r2, #1
 801d134:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d138:	68fb      	ldr	r3, [r7, #12]
 801d13a:	2200      	movs	r2, #0
 801d13c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d140:	7ffb      	ldrb	r3, [r7, #31]
}
 801d142:	4618      	mov	r0, r3
 801d144:	3720      	adds	r7, #32
 801d146:	46bd      	mov	sp, r7
 801d148:	bd80      	pop	{r7, pc}

0801d14a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d14a:	b580      	push	{r7, lr}
 801d14c:	b088      	sub	sp, #32
 801d14e:	af02      	add	r7, sp, #8
 801d150:	60f8      	str	r0, [r7, #12]
 801d152:	60b9      	str	r1, [r7, #8]
 801d154:	603b      	str	r3, [r7, #0]
 801d156:	4613      	mov	r3, r2
 801d158:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d15a:	2300      	movs	r3, #0
 801d15c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d15e:	68fb      	ldr	r3, [r7, #12]
 801d160:	685b      	ldr	r3, [r3, #4]
 801d162:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d166:	d112      	bne.n	801d18e <HAL_SPI_Receive+0x44>
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	689b      	ldr	r3, [r3, #8]
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d10e      	bne.n	801d18e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d170:	68fb      	ldr	r3, [r7, #12]
 801d172:	2204      	movs	r2, #4
 801d174:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d178:	88fa      	ldrh	r2, [r7, #6]
 801d17a:	683b      	ldr	r3, [r7, #0]
 801d17c:	9300      	str	r3, [sp, #0]
 801d17e:	4613      	mov	r3, r2
 801d180:	68ba      	ldr	r2, [r7, #8]
 801d182:	68b9      	ldr	r1, [r7, #8]
 801d184:	68f8      	ldr	r0, [r7, #12]
 801d186:	f000 f910 	bl	801d3aa <HAL_SPI_TransmitReceive>
 801d18a:	4603      	mov	r3, r0
 801d18c:	e109      	b.n	801d3a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d194:	2b01      	cmp	r3, #1
 801d196:	d101      	bne.n	801d19c <HAL_SPI_Receive+0x52>
 801d198:	2302      	movs	r3, #2
 801d19a:	e102      	b.n	801d3a2 <HAL_SPI_Receive+0x258>
 801d19c:	68fb      	ldr	r3, [r7, #12]
 801d19e:	2201      	movs	r2, #1
 801d1a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d1a4:	f7fb fbb8 	bl	8018918 <HAL_GetTick>
 801d1a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d1aa:	68fb      	ldr	r3, [r7, #12]
 801d1ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d1b0:	b2db      	uxtb	r3, r3
 801d1b2:	2b01      	cmp	r3, #1
 801d1b4:	d002      	beq.n	801d1bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d1b6:	2302      	movs	r3, #2
 801d1b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d1ba:	e0e9      	b.n	801d390 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d1bc:	68bb      	ldr	r3, [r7, #8]
 801d1be:	2b00      	cmp	r3, #0
 801d1c0:	d002      	beq.n	801d1c8 <HAL_SPI_Receive+0x7e>
 801d1c2:	88fb      	ldrh	r3, [r7, #6]
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d102      	bne.n	801d1ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d1c8:	2301      	movs	r3, #1
 801d1ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d1cc:	e0e0      	b.n	801d390 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d1ce:	68fb      	ldr	r3, [r7, #12]
 801d1d0:	2204      	movs	r2, #4
 801d1d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	2200      	movs	r2, #0
 801d1da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	68ba      	ldr	r2, [r7, #8]
 801d1e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d1e2:	68fb      	ldr	r3, [r7, #12]
 801d1e4:	88fa      	ldrh	r2, [r7, #6]
 801d1e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d1ea:	68fb      	ldr	r3, [r7, #12]
 801d1ec:	88fa      	ldrh	r2, [r7, #6]
 801d1ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d1f2:	68fb      	ldr	r3, [r7, #12]
 801d1f4:	2200      	movs	r2, #0
 801d1f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d1f8:	68fb      	ldr	r3, [r7, #12]
 801d1fa:	2200      	movs	r2, #0
 801d1fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	2200      	movs	r2, #0
 801d202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	2200      	movs	r2, #0
 801d208:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d20a:	68fb      	ldr	r3, [r7, #12]
 801d20c:	2200      	movs	r2, #0
 801d20e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d210:	68fb      	ldr	r3, [r7, #12]
 801d212:	68db      	ldr	r3, [r3, #12]
 801d214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d218:	d908      	bls.n	801d22c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d21a:	68fb      	ldr	r3, [r7, #12]
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	685a      	ldr	r2, [r3, #4]
 801d220:	68fb      	ldr	r3, [r7, #12]
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d228:	605a      	str	r2, [r3, #4]
 801d22a:	e007      	b.n	801d23c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	685a      	ldr	r2, [r3, #4]
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d23a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	689b      	ldr	r3, [r3, #8]
 801d240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d244:	d10f      	bne.n	801d266 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d246:	68fb      	ldr	r3, [r7, #12]
 801d248:	681b      	ldr	r3, [r3, #0]
 801d24a:	681a      	ldr	r2, [r3, #0]
 801d24c:	68fb      	ldr	r3, [r7, #12]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d254:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	681a      	ldr	r2, [r3, #0]
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	681b      	ldr	r3, [r3, #0]
 801d260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d264:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	681b      	ldr	r3, [r3, #0]
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d270:	2b40      	cmp	r3, #64	; 0x40
 801d272:	d007      	beq.n	801d284 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d274:	68fb      	ldr	r3, [r7, #12]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	681a      	ldr	r2, [r3, #0]
 801d27a:	68fb      	ldr	r3, [r7, #12]
 801d27c:	681b      	ldr	r3, [r3, #0]
 801d27e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d282:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d284:	68fb      	ldr	r3, [r7, #12]
 801d286:	68db      	ldr	r3, [r3, #12]
 801d288:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d28c:	d867      	bhi.n	801d35e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d28e:	e030      	b.n	801d2f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d290:	68fb      	ldr	r3, [r7, #12]
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	689b      	ldr	r3, [r3, #8]
 801d296:	f003 0301 	and.w	r3, r3, #1
 801d29a:	2b01      	cmp	r3, #1
 801d29c:	d117      	bne.n	801d2ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	f103 020c 	add.w	r2, r3, #12
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2aa:	7812      	ldrb	r2, [r2, #0]
 801d2ac:	b2d2      	uxtb	r2, r2
 801d2ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d2b0:	68fb      	ldr	r3, [r7, #12]
 801d2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d2b4:	1c5a      	adds	r2, r3, #1
 801d2b6:	68fb      	ldr	r3, [r7, #12]
 801d2b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d2c0:	b29b      	uxth	r3, r3
 801d2c2:	3b01      	subs	r3, #1
 801d2c4:	b29a      	uxth	r2, r3
 801d2c6:	68fb      	ldr	r3, [r7, #12]
 801d2c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d2cc:	e011      	b.n	801d2f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d2ce:	f7fb fb23 	bl	8018918 <HAL_GetTick>
 801d2d2:	4602      	mov	r2, r0
 801d2d4:	693b      	ldr	r3, [r7, #16]
 801d2d6:	1ad3      	subs	r3, r2, r3
 801d2d8:	683a      	ldr	r2, [r7, #0]
 801d2da:	429a      	cmp	r2, r3
 801d2dc:	d803      	bhi.n	801d2e6 <HAL_SPI_Receive+0x19c>
 801d2de:	683b      	ldr	r3, [r7, #0]
 801d2e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d2e4:	d102      	bne.n	801d2ec <HAL_SPI_Receive+0x1a2>
 801d2e6:	683b      	ldr	r3, [r7, #0]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d102      	bne.n	801d2f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d2ec:	2303      	movs	r3, #3
 801d2ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d2f0:	e04e      	b.n	801d390 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d2f8:	b29b      	uxth	r3, r3
 801d2fa:	2b00      	cmp	r3, #0
 801d2fc:	d1c8      	bne.n	801d290 <HAL_SPI_Receive+0x146>
 801d2fe:	e034      	b.n	801d36a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d300:	68fb      	ldr	r3, [r7, #12]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	689b      	ldr	r3, [r3, #8]
 801d306:	f003 0301 	and.w	r3, r3, #1
 801d30a:	2b01      	cmp	r3, #1
 801d30c:	d115      	bne.n	801d33a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d30e:	68fb      	ldr	r3, [r7, #12]
 801d310:	681b      	ldr	r3, [r3, #0]
 801d312:	68da      	ldr	r2, [r3, #12]
 801d314:	68fb      	ldr	r3, [r7, #12]
 801d316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d318:	b292      	uxth	r2, r2
 801d31a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d320:	1c9a      	adds	r2, r3, #2
 801d322:	68fb      	ldr	r3, [r7, #12]
 801d324:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d326:	68fb      	ldr	r3, [r7, #12]
 801d328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d32c:	b29b      	uxth	r3, r3
 801d32e:	3b01      	subs	r3, #1
 801d330:	b29a      	uxth	r2, r3
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d338:	e011      	b.n	801d35e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d33a:	f7fb faed 	bl	8018918 <HAL_GetTick>
 801d33e:	4602      	mov	r2, r0
 801d340:	693b      	ldr	r3, [r7, #16]
 801d342:	1ad3      	subs	r3, r2, r3
 801d344:	683a      	ldr	r2, [r7, #0]
 801d346:	429a      	cmp	r2, r3
 801d348:	d803      	bhi.n	801d352 <HAL_SPI_Receive+0x208>
 801d34a:	683b      	ldr	r3, [r7, #0]
 801d34c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d350:	d102      	bne.n	801d358 <HAL_SPI_Receive+0x20e>
 801d352:	683b      	ldr	r3, [r7, #0]
 801d354:	2b00      	cmp	r3, #0
 801d356:	d102      	bne.n	801d35e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d358:	2303      	movs	r3, #3
 801d35a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d35c:	e018      	b.n	801d390 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d364:	b29b      	uxth	r3, r3
 801d366:	2b00      	cmp	r3, #0
 801d368:	d1ca      	bne.n	801d300 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d36a:	693a      	ldr	r2, [r7, #16]
 801d36c:	6839      	ldr	r1, [r7, #0]
 801d36e:	68f8      	ldr	r0, [r7, #12]
 801d370:	f000 fb4c 	bl	801da0c <SPI_EndRxTransaction>
 801d374:	4603      	mov	r3, r0
 801d376:	2b00      	cmp	r3, #0
 801d378:	d002      	beq.n	801d380 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d37a:	68fb      	ldr	r3, [r7, #12]
 801d37c:	2220      	movs	r2, #32
 801d37e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d380:	68fb      	ldr	r3, [r7, #12]
 801d382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d384:	2b00      	cmp	r3, #0
 801d386:	d002      	beq.n	801d38e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d388:	2301      	movs	r3, #1
 801d38a:	75fb      	strb	r3, [r7, #23]
 801d38c:	e000      	b.n	801d390 <HAL_SPI_Receive+0x246>
  }

error :
 801d38e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d390:	68fb      	ldr	r3, [r7, #12]
 801d392:	2201      	movs	r2, #1
 801d394:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d398:	68fb      	ldr	r3, [r7, #12]
 801d39a:	2200      	movs	r2, #0
 801d39c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 801d3a2:	4618      	mov	r0, r3
 801d3a4:	3718      	adds	r7, #24
 801d3a6:	46bd      	mov	sp, r7
 801d3a8:	bd80      	pop	{r7, pc}

0801d3aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d3aa:	b580      	push	{r7, lr}
 801d3ac:	b08a      	sub	sp, #40	; 0x28
 801d3ae:	af00      	add	r7, sp, #0
 801d3b0:	60f8      	str	r0, [r7, #12]
 801d3b2:	60b9      	str	r1, [r7, #8]
 801d3b4:	607a      	str	r2, [r7, #4]
 801d3b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d3b8:	2301      	movs	r3, #1
 801d3ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d3bc:	2300      	movs	r3, #0
 801d3be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d3c8:	2b01      	cmp	r3, #1
 801d3ca:	d101      	bne.n	801d3d0 <HAL_SPI_TransmitReceive+0x26>
 801d3cc:	2302      	movs	r3, #2
 801d3ce:	e1fb      	b.n	801d7c8 <HAL_SPI_TransmitReceive+0x41e>
 801d3d0:	68fb      	ldr	r3, [r7, #12]
 801d3d2:	2201      	movs	r2, #1
 801d3d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d3d8:	f7fb fa9e 	bl	8018918 <HAL_GetTick>
 801d3dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d3e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	685b      	ldr	r3, [r3, #4]
 801d3ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d3ec:	887b      	ldrh	r3, [r7, #2]
 801d3ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d3f0:	887b      	ldrh	r3, [r7, #2]
 801d3f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d3f4:	7efb      	ldrb	r3, [r7, #27]
 801d3f6:	2b01      	cmp	r3, #1
 801d3f8:	d00e      	beq.n	801d418 <HAL_SPI_TransmitReceive+0x6e>
 801d3fa:	697b      	ldr	r3, [r7, #20]
 801d3fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d400:	d106      	bne.n	801d410 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	689b      	ldr	r3, [r3, #8]
 801d406:	2b00      	cmp	r3, #0
 801d408:	d102      	bne.n	801d410 <HAL_SPI_TransmitReceive+0x66>
 801d40a:	7efb      	ldrb	r3, [r7, #27]
 801d40c:	2b04      	cmp	r3, #4
 801d40e:	d003      	beq.n	801d418 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d410:	2302      	movs	r3, #2
 801d412:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d416:	e1cd      	b.n	801d7b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d418:	68bb      	ldr	r3, [r7, #8]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d005      	beq.n	801d42a <HAL_SPI_TransmitReceive+0x80>
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d002      	beq.n	801d42a <HAL_SPI_TransmitReceive+0x80>
 801d424:	887b      	ldrh	r3, [r7, #2]
 801d426:	2b00      	cmp	r3, #0
 801d428:	d103      	bne.n	801d432 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d42a:	2301      	movs	r3, #1
 801d42c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d430:	e1c0      	b.n	801d7b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d438:	b2db      	uxtb	r3, r3
 801d43a:	2b04      	cmp	r3, #4
 801d43c:	d003      	beq.n	801d446 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	2205      	movs	r2, #5
 801d442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d446:	68fb      	ldr	r3, [r7, #12]
 801d448:	2200      	movs	r2, #0
 801d44a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	687a      	ldr	r2, [r7, #4]
 801d450:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d452:	68fb      	ldr	r3, [r7, #12]
 801d454:	887a      	ldrh	r2, [r7, #2]
 801d456:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	887a      	ldrh	r2, [r7, #2]
 801d45e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	68ba      	ldr	r2, [r7, #8]
 801d466:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	887a      	ldrh	r2, [r7, #2]
 801d46c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d46e:	68fb      	ldr	r3, [r7, #12]
 801d470:	887a      	ldrh	r2, [r7, #2]
 801d472:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	2200      	movs	r2, #0
 801d478:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	2200      	movs	r2, #0
 801d47e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d480:	68fb      	ldr	r3, [r7, #12]
 801d482:	68db      	ldr	r3, [r3, #12]
 801d484:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d488:	d802      	bhi.n	801d490 <HAL_SPI_TransmitReceive+0xe6>
 801d48a:	8a3b      	ldrh	r3, [r7, #16]
 801d48c:	2b01      	cmp	r3, #1
 801d48e:	d908      	bls.n	801d4a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	681b      	ldr	r3, [r3, #0]
 801d494:	685a      	ldr	r2, [r3, #4]
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	681b      	ldr	r3, [r3, #0]
 801d49a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d49e:	605a      	str	r2, [r3, #4]
 801d4a0:	e007      	b.n	801d4b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d4a2:	68fb      	ldr	r3, [r7, #12]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	685a      	ldr	r2, [r3, #4]
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d4b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	681b      	ldr	r3, [r3, #0]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d4bc:	2b40      	cmp	r3, #64	; 0x40
 801d4be:	d007      	beq.n	801d4d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d4c0:	68fb      	ldr	r3, [r7, #12]
 801d4c2:	681b      	ldr	r3, [r3, #0]
 801d4c4:	681a      	ldr	r2, [r3, #0]
 801d4c6:	68fb      	ldr	r3, [r7, #12]
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d4ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	68db      	ldr	r3, [r3, #12]
 801d4d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d4d8:	d97c      	bls.n	801d5d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d4da:	68fb      	ldr	r3, [r7, #12]
 801d4dc:	685b      	ldr	r3, [r3, #4]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d002      	beq.n	801d4e8 <HAL_SPI_TransmitReceive+0x13e>
 801d4e2:	8a7b      	ldrh	r3, [r7, #18]
 801d4e4:	2b01      	cmp	r3, #1
 801d4e6:	d169      	bne.n	801d5bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d4e8:	68fb      	ldr	r3, [r7, #12]
 801d4ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4ec:	881a      	ldrh	r2, [r3, #0]
 801d4ee:	68fb      	ldr	r3, [r7, #12]
 801d4f0:	681b      	ldr	r3, [r3, #0]
 801d4f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d4f8:	1c9a      	adds	r2, r3, #2
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d4fe:	68fb      	ldr	r3, [r7, #12]
 801d500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d502:	b29b      	uxth	r3, r3
 801d504:	3b01      	subs	r3, #1
 801d506:	b29a      	uxth	r2, r3
 801d508:	68fb      	ldr	r3, [r7, #12]
 801d50a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d50c:	e056      	b.n	801d5bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d50e:	68fb      	ldr	r3, [r7, #12]
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	689b      	ldr	r3, [r3, #8]
 801d514:	f003 0302 	and.w	r3, r3, #2
 801d518:	2b02      	cmp	r3, #2
 801d51a:	d11b      	bne.n	801d554 <HAL_SPI_TransmitReceive+0x1aa>
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d520:	b29b      	uxth	r3, r3
 801d522:	2b00      	cmp	r3, #0
 801d524:	d016      	beq.n	801d554 <HAL_SPI_TransmitReceive+0x1aa>
 801d526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d528:	2b01      	cmp	r3, #1
 801d52a:	d113      	bne.n	801d554 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d52c:	68fb      	ldr	r3, [r7, #12]
 801d52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d530:	881a      	ldrh	r2, [r3, #0]
 801d532:	68fb      	ldr	r3, [r7, #12]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d53c:	1c9a      	adds	r2, r3, #2
 801d53e:	68fb      	ldr	r3, [r7, #12]
 801d540:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d546:	b29b      	uxth	r3, r3
 801d548:	3b01      	subs	r3, #1
 801d54a:	b29a      	uxth	r2, r3
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d550:	2300      	movs	r3, #0
 801d552:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d554:	68fb      	ldr	r3, [r7, #12]
 801d556:	681b      	ldr	r3, [r3, #0]
 801d558:	689b      	ldr	r3, [r3, #8]
 801d55a:	f003 0301 	and.w	r3, r3, #1
 801d55e:	2b01      	cmp	r3, #1
 801d560:	d11c      	bne.n	801d59c <HAL_SPI_TransmitReceive+0x1f2>
 801d562:	68fb      	ldr	r3, [r7, #12]
 801d564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d568:	b29b      	uxth	r3, r3
 801d56a:	2b00      	cmp	r3, #0
 801d56c:	d016      	beq.n	801d59c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	681b      	ldr	r3, [r3, #0]
 801d572:	68da      	ldr	r2, [r3, #12]
 801d574:	68fb      	ldr	r3, [r7, #12]
 801d576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d578:	b292      	uxth	r2, r2
 801d57a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d57c:	68fb      	ldr	r3, [r7, #12]
 801d57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d580:	1c9a      	adds	r2, r3, #2
 801d582:	68fb      	ldr	r3, [r7, #12]
 801d584:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d586:	68fb      	ldr	r3, [r7, #12]
 801d588:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	3b01      	subs	r3, #1
 801d590:	b29a      	uxth	r2, r3
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d598:	2301      	movs	r3, #1
 801d59a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d59c:	f7fb f9bc 	bl	8018918 <HAL_GetTick>
 801d5a0:	4602      	mov	r2, r0
 801d5a2:	69fb      	ldr	r3, [r7, #28]
 801d5a4:	1ad3      	subs	r3, r2, r3
 801d5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d5a8:	429a      	cmp	r2, r3
 801d5aa:	d807      	bhi.n	801d5bc <HAL_SPI_TransmitReceive+0x212>
 801d5ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d5b2:	d003      	beq.n	801d5bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d5b4:	2303      	movs	r3, #3
 801d5b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d5ba:	e0fb      	b.n	801d7b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d5bc:	68fb      	ldr	r3, [r7, #12]
 801d5be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d5c0:	b29b      	uxth	r3, r3
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d1a3      	bne.n	801d50e <HAL_SPI_TransmitReceive+0x164>
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d5cc:	b29b      	uxth	r3, r3
 801d5ce:	2b00      	cmp	r3, #0
 801d5d0:	d19d      	bne.n	801d50e <HAL_SPI_TransmitReceive+0x164>
 801d5d2:	e0df      	b.n	801d794 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d5d4:	68fb      	ldr	r3, [r7, #12]
 801d5d6:	685b      	ldr	r3, [r3, #4]
 801d5d8:	2b00      	cmp	r3, #0
 801d5da:	d003      	beq.n	801d5e4 <HAL_SPI_TransmitReceive+0x23a>
 801d5dc:	8a7b      	ldrh	r3, [r7, #18]
 801d5de:	2b01      	cmp	r3, #1
 801d5e0:	f040 80cb 	bne.w	801d77a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801d5e4:	68fb      	ldr	r3, [r7, #12]
 801d5e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d5e8:	b29b      	uxth	r3, r3
 801d5ea:	2b01      	cmp	r3, #1
 801d5ec:	d912      	bls.n	801d614 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5f2:	881a      	ldrh	r2, [r3, #0]
 801d5f4:	68fb      	ldr	r3, [r7, #12]
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d5fa:	68fb      	ldr	r3, [r7, #12]
 801d5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5fe:	1c9a      	adds	r2, r3, #2
 801d600:	68fb      	ldr	r3, [r7, #12]
 801d602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d608:	b29b      	uxth	r3, r3
 801d60a:	3b02      	subs	r3, #2
 801d60c:	b29a      	uxth	r2, r3
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d612:	e0b2      	b.n	801d77a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d614:	68fb      	ldr	r3, [r7, #12]
 801d616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	330c      	adds	r3, #12
 801d61e:	7812      	ldrb	r2, [r2, #0]
 801d620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801d622:	68fb      	ldr	r3, [r7, #12]
 801d624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d626:	1c5a      	adds	r2, r3, #1
 801d628:	68fb      	ldr	r3, [r7, #12]
 801d62a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d630:	b29b      	uxth	r3, r3
 801d632:	3b01      	subs	r3, #1
 801d634:	b29a      	uxth	r2, r3
 801d636:	68fb      	ldr	r3, [r7, #12]
 801d638:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d63a:	e09e      	b.n	801d77a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	689b      	ldr	r3, [r3, #8]
 801d642:	f003 0302 	and.w	r3, r3, #2
 801d646:	2b02      	cmp	r3, #2
 801d648:	d134      	bne.n	801d6b4 <HAL_SPI_TransmitReceive+0x30a>
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d64e:	b29b      	uxth	r3, r3
 801d650:	2b00      	cmp	r3, #0
 801d652:	d02f      	beq.n	801d6b4 <HAL_SPI_TransmitReceive+0x30a>
 801d654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d656:	2b01      	cmp	r3, #1
 801d658:	d12c      	bne.n	801d6b4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d65e:	b29b      	uxth	r3, r3
 801d660:	2b01      	cmp	r3, #1
 801d662:	d912      	bls.n	801d68a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d664:	68fb      	ldr	r3, [r7, #12]
 801d666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d668:	881a      	ldrh	r2, [r3, #0]
 801d66a:	68fb      	ldr	r3, [r7, #12]
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d674:	1c9a      	adds	r2, r3, #2
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d67e:	b29b      	uxth	r3, r3
 801d680:	3b02      	subs	r3, #2
 801d682:	b29a      	uxth	r2, r3
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d688:	e012      	b.n	801d6b0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	330c      	adds	r3, #12
 801d694:	7812      	ldrb	r2, [r2, #0]
 801d696:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d698:	68fb      	ldr	r3, [r7, #12]
 801d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d69c:	1c5a      	adds	r2, r3, #1
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d6a2:	68fb      	ldr	r3, [r7, #12]
 801d6a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d6a6:	b29b      	uxth	r3, r3
 801d6a8:	3b01      	subs	r3, #1
 801d6aa:	b29a      	uxth	r2, r3
 801d6ac:	68fb      	ldr	r3, [r7, #12]
 801d6ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d6b4:	68fb      	ldr	r3, [r7, #12]
 801d6b6:	681b      	ldr	r3, [r3, #0]
 801d6b8:	689b      	ldr	r3, [r3, #8]
 801d6ba:	f003 0301 	and.w	r3, r3, #1
 801d6be:	2b01      	cmp	r3, #1
 801d6c0:	d148      	bne.n	801d754 <HAL_SPI_TransmitReceive+0x3aa>
 801d6c2:	68fb      	ldr	r3, [r7, #12]
 801d6c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6c8:	b29b      	uxth	r3, r3
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d042      	beq.n	801d754 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6d4:	b29b      	uxth	r3, r3
 801d6d6:	2b01      	cmp	r3, #1
 801d6d8:	d923      	bls.n	801d722 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	68da      	ldr	r2, [r3, #12]
 801d6e0:	68fb      	ldr	r3, [r7, #12]
 801d6e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6e4:	b292      	uxth	r2, r2
 801d6e6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6ec:	1c9a      	adds	r2, r3, #2
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d6f8:	b29b      	uxth	r3, r3
 801d6fa:	3b02      	subs	r3, #2
 801d6fc:	b29a      	uxth	r2, r3
 801d6fe:	68fb      	ldr	r3, [r7, #12]
 801d700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d70a:	b29b      	uxth	r3, r3
 801d70c:	2b01      	cmp	r3, #1
 801d70e:	d81f      	bhi.n	801d750 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	685a      	ldr	r2, [r3, #4]
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d71e:	605a      	str	r2, [r3, #4]
 801d720:	e016      	b.n	801d750 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	f103 020c 	add.w	r2, r3, #12
 801d72a:	68fb      	ldr	r3, [r7, #12]
 801d72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d72e:	7812      	ldrb	r2, [r2, #0]
 801d730:	b2d2      	uxtb	r2, r2
 801d732:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d738:	1c5a      	adds	r2, r3, #1
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801d73e:	68fb      	ldr	r3, [r7, #12]
 801d740:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d744:	b29b      	uxth	r3, r3
 801d746:	3b01      	subs	r3, #1
 801d748:	b29a      	uxth	r2, r3
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d750:	2301      	movs	r3, #1
 801d752:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801d754:	f7fb f8e0 	bl	8018918 <HAL_GetTick>
 801d758:	4602      	mov	r2, r0
 801d75a:	69fb      	ldr	r3, [r7, #28]
 801d75c:	1ad3      	subs	r3, r2, r3
 801d75e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d760:	429a      	cmp	r2, r3
 801d762:	d803      	bhi.n	801d76c <HAL_SPI_TransmitReceive+0x3c2>
 801d764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d76a:	d102      	bne.n	801d772 <HAL_SPI_TransmitReceive+0x3c8>
 801d76c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d76e:	2b00      	cmp	r3, #0
 801d770:	d103      	bne.n	801d77a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801d772:	2303      	movs	r3, #3
 801d774:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d778:	e01c      	b.n	801d7b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d77e:	b29b      	uxth	r3, r3
 801d780:	2b00      	cmp	r3, #0
 801d782:	f47f af5b 	bne.w	801d63c <HAL_SPI_TransmitReceive+0x292>
 801d786:	68fb      	ldr	r3, [r7, #12]
 801d788:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d78c:	b29b      	uxth	r3, r3
 801d78e:	2b00      	cmp	r3, #0
 801d790:	f47f af54 	bne.w	801d63c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d794:	69fa      	ldr	r2, [r7, #28]
 801d796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801d798:	68f8      	ldr	r0, [r7, #12]
 801d79a:	f000 f98f 	bl	801dabc <SPI_EndRxTxTransaction>
 801d79e:	4603      	mov	r3, r0
 801d7a0:	2b00      	cmp	r3, #0
 801d7a2:	d006      	beq.n	801d7b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801d7a4:	2301      	movs	r3, #1
 801d7a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d7aa:	68fb      	ldr	r3, [r7, #12]
 801d7ac:	2220      	movs	r2, #32
 801d7ae:	661a      	str	r2, [r3, #96]	; 0x60
 801d7b0:	e000      	b.n	801d7b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801d7b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d7b4:	68fb      	ldr	r3, [r7, #12]
 801d7b6:	2201      	movs	r2, #1
 801d7b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	2200      	movs	r2, #0
 801d7c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d7c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	3728      	adds	r7, #40	; 0x28
 801d7cc:	46bd      	mov	sp, r7
 801d7ce:	bd80      	pop	{r7, pc}

0801d7d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d7d0:	b580      	push	{r7, lr}
 801d7d2:	b088      	sub	sp, #32
 801d7d4:	af00      	add	r7, sp, #0
 801d7d6:	60f8      	str	r0, [r7, #12]
 801d7d8:	60b9      	str	r1, [r7, #8]
 801d7da:	603b      	str	r3, [r7, #0]
 801d7dc:	4613      	mov	r3, r2
 801d7de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801d7e0:	f7fb f89a 	bl	8018918 <HAL_GetTick>
 801d7e4:	4602      	mov	r2, r0
 801d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7e8:	1a9b      	subs	r3, r3, r2
 801d7ea:	683a      	ldr	r2, [r7, #0]
 801d7ec:	4413      	add	r3, r2
 801d7ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801d7f0:	f7fb f892 	bl	8018918 <HAL_GetTick>
 801d7f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801d7f6:	4b39      	ldr	r3, [pc, #228]	; (801d8dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801d7f8:	681b      	ldr	r3, [r3, #0]
 801d7fa:	015b      	lsls	r3, r3, #5
 801d7fc:	0d1b      	lsrs	r3, r3, #20
 801d7fe:	69fa      	ldr	r2, [r7, #28]
 801d800:	fb02 f303 	mul.w	r3, r2, r3
 801d804:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d806:	e054      	b.n	801d8b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801d808:	683b      	ldr	r3, [r7, #0]
 801d80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d80e:	d050      	beq.n	801d8b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d810:	f7fb f882 	bl	8018918 <HAL_GetTick>
 801d814:	4602      	mov	r2, r0
 801d816:	69bb      	ldr	r3, [r7, #24]
 801d818:	1ad3      	subs	r3, r2, r3
 801d81a:	69fa      	ldr	r2, [r7, #28]
 801d81c:	429a      	cmp	r2, r3
 801d81e:	d902      	bls.n	801d826 <SPI_WaitFlagStateUntilTimeout+0x56>
 801d820:	69fb      	ldr	r3, [r7, #28]
 801d822:	2b00      	cmp	r3, #0
 801d824:	d13d      	bne.n	801d8a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	681b      	ldr	r3, [r3, #0]
 801d82a:	685a      	ldr	r2, [r3, #4]
 801d82c:	68fb      	ldr	r3, [r7, #12]
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d834:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	685b      	ldr	r3, [r3, #4]
 801d83a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d83e:	d111      	bne.n	801d864 <SPI_WaitFlagStateUntilTimeout+0x94>
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	689b      	ldr	r3, [r3, #8]
 801d844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d848:	d004      	beq.n	801d854 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d84a:	68fb      	ldr	r3, [r7, #12]
 801d84c:	689b      	ldr	r3, [r3, #8]
 801d84e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d852:	d107      	bne.n	801d864 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d854:	68fb      	ldr	r3, [r7, #12]
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	681a      	ldr	r2, [r3, #0]
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	681b      	ldr	r3, [r3, #0]
 801d85e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d862:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d864:	68fb      	ldr	r3, [r7, #12]
 801d866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d868:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d86c:	d10f      	bne.n	801d88e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801d86e:	68fb      	ldr	r3, [r7, #12]
 801d870:	681b      	ldr	r3, [r3, #0]
 801d872:	681a      	ldr	r2, [r3, #0]
 801d874:	68fb      	ldr	r3, [r7, #12]
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d87c:	601a      	str	r2, [r3, #0]
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	681b      	ldr	r3, [r3, #0]
 801d882:	681a      	ldr	r2, [r3, #0]
 801d884:	68fb      	ldr	r3, [r7, #12]
 801d886:	681b      	ldr	r3, [r3, #0]
 801d888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d88c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d88e:	68fb      	ldr	r3, [r7, #12]
 801d890:	2201      	movs	r2, #1
 801d892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d896:	68fb      	ldr	r3, [r7, #12]
 801d898:	2200      	movs	r2, #0
 801d89a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801d89e:	2303      	movs	r3, #3
 801d8a0:	e017      	b.n	801d8d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801d8a2:	697b      	ldr	r3, [r7, #20]
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	d101      	bne.n	801d8ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801d8a8:	2300      	movs	r3, #0
 801d8aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801d8ac:	697b      	ldr	r3, [r7, #20]
 801d8ae:	3b01      	subs	r3, #1
 801d8b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801d8b2:	68fb      	ldr	r3, [r7, #12]
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	689a      	ldr	r2, [r3, #8]
 801d8b8:	68bb      	ldr	r3, [r7, #8]
 801d8ba:	4013      	ands	r3, r2
 801d8bc:	68ba      	ldr	r2, [r7, #8]
 801d8be:	429a      	cmp	r2, r3
 801d8c0:	bf0c      	ite	eq
 801d8c2:	2301      	moveq	r3, #1
 801d8c4:	2300      	movne	r3, #0
 801d8c6:	b2db      	uxtb	r3, r3
 801d8c8:	461a      	mov	r2, r3
 801d8ca:	79fb      	ldrb	r3, [r7, #7]
 801d8cc:	429a      	cmp	r2, r3
 801d8ce:	d19b      	bne.n	801d808 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801d8d0:	2300      	movs	r3, #0
}
 801d8d2:	4618      	mov	r0, r3
 801d8d4:	3720      	adds	r7, #32
 801d8d6:	46bd      	mov	sp, r7
 801d8d8:	bd80      	pop	{r7, pc}
 801d8da:	bf00      	nop
 801d8dc:	20000000 	.word	0x20000000

0801d8e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b08a      	sub	sp, #40	; 0x28
 801d8e4:	af00      	add	r7, sp, #0
 801d8e6:	60f8      	str	r0, [r7, #12]
 801d8e8:	60b9      	str	r1, [r7, #8]
 801d8ea:	607a      	str	r2, [r7, #4]
 801d8ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801d8ee:	2300      	movs	r3, #0
 801d8f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801d8f2:	f7fb f811 	bl	8018918 <HAL_GetTick>
 801d8f6:	4602      	mov	r2, r0
 801d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8fa:	1a9b      	subs	r3, r3, r2
 801d8fc:	683a      	ldr	r2, [r7, #0]
 801d8fe:	4413      	add	r3, r2
 801d900:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801d902:	f7fb f809 	bl	8018918 <HAL_GetTick>
 801d906:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801d908:	68fb      	ldr	r3, [r7, #12]
 801d90a:	681b      	ldr	r3, [r3, #0]
 801d90c:	330c      	adds	r3, #12
 801d90e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801d910:	4b3d      	ldr	r3, [pc, #244]	; (801da08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801d912:	681a      	ldr	r2, [r3, #0]
 801d914:	4613      	mov	r3, r2
 801d916:	009b      	lsls	r3, r3, #2
 801d918:	4413      	add	r3, r2
 801d91a:	00da      	lsls	r2, r3, #3
 801d91c:	1ad3      	subs	r3, r2, r3
 801d91e:	0d1b      	lsrs	r3, r3, #20
 801d920:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d922:	fb02 f303 	mul.w	r3, r2, r3
 801d926:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801d928:	e060      	b.n	801d9ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801d92a:	68bb      	ldr	r3, [r7, #8]
 801d92c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801d930:	d107      	bne.n	801d942 <SPI_WaitFifoStateUntilTimeout+0x62>
 801d932:	687b      	ldr	r3, [r7, #4]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d104      	bne.n	801d942 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801d938:	69fb      	ldr	r3, [r7, #28]
 801d93a:	781b      	ldrb	r3, [r3, #0]
 801d93c:	b2db      	uxtb	r3, r3
 801d93e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801d940:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801d942:	683b      	ldr	r3, [r7, #0]
 801d944:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d948:	d050      	beq.n	801d9ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801d94a:	f7fa ffe5 	bl	8018918 <HAL_GetTick>
 801d94e:	4602      	mov	r2, r0
 801d950:	6a3b      	ldr	r3, [r7, #32]
 801d952:	1ad3      	subs	r3, r2, r3
 801d954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d956:	429a      	cmp	r2, r3
 801d958:	d902      	bls.n	801d960 <SPI_WaitFifoStateUntilTimeout+0x80>
 801d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	d13d      	bne.n	801d9dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	681b      	ldr	r3, [r3, #0]
 801d964:	685a      	ldr	r2, [r3, #4]
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	681b      	ldr	r3, [r3, #0]
 801d96a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801d96e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	685b      	ldr	r3, [r3, #4]
 801d974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d978:	d111      	bne.n	801d99e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	689b      	ldr	r3, [r3, #8]
 801d97e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d982:	d004      	beq.n	801d98e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	689b      	ldr	r3, [r3, #8]
 801d988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d98c:	d107      	bne.n	801d99e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	681a      	ldr	r2, [r3, #0]
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	681b      	ldr	r3, [r3, #0]
 801d998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d99c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d9a6:	d10f      	bne.n	801d9c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	681a      	ldr	r2, [r3, #0]
 801d9ae:	68fb      	ldr	r3, [r7, #12]
 801d9b0:	681b      	ldr	r3, [r3, #0]
 801d9b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801d9b6:	601a      	str	r2, [r3, #0]
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	681b      	ldr	r3, [r3, #0]
 801d9bc:	681a      	ldr	r2, [r3, #0]
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	681b      	ldr	r3, [r3, #0]
 801d9c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801d9c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	2201      	movs	r2, #1
 801d9cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	2200      	movs	r2, #0
 801d9d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801d9d8:	2303      	movs	r3, #3
 801d9da:	e010      	b.n	801d9fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801d9dc:	69bb      	ldr	r3, [r7, #24]
 801d9de:	2b00      	cmp	r3, #0
 801d9e0:	d101      	bne.n	801d9e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801d9e6:	69bb      	ldr	r3, [r7, #24]
 801d9e8:	3b01      	subs	r3, #1
 801d9ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	681b      	ldr	r3, [r3, #0]
 801d9f0:	689a      	ldr	r2, [r3, #8]
 801d9f2:	68bb      	ldr	r3, [r7, #8]
 801d9f4:	4013      	ands	r3, r2
 801d9f6:	687a      	ldr	r2, [r7, #4]
 801d9f8:	429a      	cmp	r2, r3
 801d9fa:	d196      	bne.n	801d92a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801d9fc:	2300      	movs	r3, #0
}
 801d9fe:	4618      	mov	r0, r3
 801da00:	3728      	adds	r7, #40	; 0x28
 801da02:	46bd      	mov	sp, r7
 801da04:	bd80      	pop	{r7, pc}
 801da06:	bf00      	nop
 801da08:	20000000 	.word	0x20000000

0801da0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801da0c:	b580      	push	{r7, lr}
 801da0e:	b086      	sub	sp, #24
 801da10:	af02      	add	r7, sp, #8
 801da12:	60f8      	str	r0, [r7, #12]
 801da14:	60b9      	str	r1, [r7, #8]
 801da16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801da18:	68fb      	ldr	r3, [r7, #12]
 801da1a:	685b      	ldr	r3, [r3, #4]
 801da1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801da20:	d111      	bne.n	801da46 <SPI_EndRxTransaction+0x3a>
 801da22:	68fb      	ldr	r3, [r7, #12]
 801da24:	689b      	ldr	r3, [r3, #8]
 801da26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801da2a:	d004      	beq.n	801da36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801da2c:	68fb      	ldr	r3, [r7, #12]
 801da2e:	689b      	ldr	r3, [r3, #8]
 801da30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801da34:	d107      	bne.n	801da46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	681a      	ldr	r2, [r3, #0]
 801da3c:	68fb      	ldr	r3, [r7, #12]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801da44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801da46:	687b      	ldr	r3, [r7, #4]
 801da48:	9300      	str	r3, [sp, #0]
 801da4a:	68bb      	ldr	r3, [r7, #8]
 801da4c:	2200      	movs	r2, #0
 801da4e:	2180      	movs	r1, #128	; 0x80
 801da50:	68f8      	ldr	r0, [r7, #12]
 801da52:	f7ff febd 	bl	801d7d0 <SPI_WaitFlagStateUntilTimeout>
 801da56:	4603      	mov	r3, r0
 801da58:	2b00      	cmp	r3, #0
 801da5a:	d007      	beq.n	801da6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801da5c:	68fb      	ldr	r3, [r7, #12]
 801da5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da60:	f043 0220 	orr.w	r2, r3, #32
 801da64:	68fb      	ldr	r3, [r7, #12]
 801da66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801da68:	2303      	movs	r3, #3
 801da6a:	e023      	b.n	801dab4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801da6c:	68fb      	ldr	r3, [r7, #12]
 801da6e:	685b      	ldr	r3, [r3, #4]
 801da70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801da74:	d11d      	bne.n	801dab2 <SPI_EndRxTransaction+0xa6>
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	689b      	ldr	r3, [r3, #8]
 801da7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801da7e:	d004      	beq.n	801da8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	689b      	ldr	r3, [r3, #8]
 801da84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801da88:	d113      	bne.n	801dab2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	9300      	str	r3, [sp, #0]
 801da8e:	68bb      	ldr	r3, [r7, #8]
 801da90:	2200      	movs	r2, #0
 801da92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801da96:	68f8      	ldr	r0, [r7, #12]
 801da98:	f7ff ff22 	bl	801d8e0 <SPI_WaitFifoStateUntilTimeout>
 801da9c:	4603      	mov	r3, r0
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d007      	beq.n	801dab2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801daa6:	f043 0220 	orr.w	r2, r3, #32
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801daae:	2303      	movs	r3, #3
 801dab0:	e000      	b.n	801dab4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801dab2:	2300      	movs	r3, #0
}
 801dab4:	4618      	mov	r0, r3
 801dab6:	3710      	adds	r7, #16
 801dab8:	46bd      	mov	sp, r7
 801daba:	bd80      	pop	{r7, pc}

0801dabc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b086      	sub	sp, #24
 801dac0:	af02      	add	r7, sp, #8
 801dac2:	60f8      	str	r0, [r7, #12]
 801dac4:	60b9      	str	r1, [r7, #8]
 801dac6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	9300      	str	r3, [sp, #0]
 801dacc:	68bb      	ldr	r3, [r7, #8]
 801dace:	2200      	movs	r2, #0
 801dad0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801dad4:	68f8      	ldr	r0, [r7, #12]
 801dad6:	f7ff ff03 	bl	801d8e0 <SPI_WaitFifoStateUntilTimeout>
 801dada:	4603      	mov	r3, r0
 801dadc:	2b00      	cmp	r3, #0
 801dade:	d007      	beq.n	801daf0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dae4:	f043 0220 	orr.w	r2, r3, #32
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801daec:	2303      	movs	r3, #3
 801daee:	e027      	b.n	801db40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	9300      	str	r3, [sp, #0]
 801daf4:	68bb      	ldr	r3, [r7, #8]
 801daf6:	2200      	movs	r2, #0
 801daf8:	2180      	movs	r1, #128	; 0x80
 801dafa:	68f8      	ldr	r0, [r7, #12]
 801dafc:	f7ff fe68 	bl	801d7d0 <SPI_WaitFlagStateUntilTimeout>
 801db00:	4603      	mov	r3, r0
 801db02:	2b00      	cmp	r3, #0
 801db04:	d007      	beq.n	801db16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801db06:	68fb      	ldr	r3, [r7, #12]
 801db08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801db0a:	f043 0220 	orr.w	r2, r3, #32
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801db12:	2303      	movs	r3, #3
 801db14:	e014      	b.n	801db40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801db16:	687b      	ldr	r3, [r7, #4]
 801db18:	9300      	str	r3, [sp, #0]
 801db1a:	68bb      	ldr	r3, [r7, #8]
 801db1c:	2200      	movs	r2, #0
 801db1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801db22:	68f8      	ldr	r0, [r7, #12]
 801db24:	f7ff fedc 	bl	801d8e0 <SPI_WaitFifoStateUntilTimeout>
 801db28:	4603      	mov	r3, r0
 801db2a:	2b00      	cmp	r3, #0
 801db2c:	d007      	beq.n	801db3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801db2e:	68fb      	ldr	r3, [r7, #12]
 801db30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801db32:	f043 0220 	orr.w	r2, r3, #32
 801db36:	68fb      	ldr	r3, [r7, #12]
 801db38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801db3a:	2303      	movs	r3, #3
 801db3c:	e000      	b.n	801db40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801db3e:	2300      	movs	r3, #0
}
 801db40:	4618      	mov	r0, r3
 801db42:	3710      	adds	r7, #16
 801db44:	46bd      	mov	sp, r7
 801db46:	bd80      	pop	{r7, pc}

0801db48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801db48:	b580      	push	{r7, lr}
 801db4a:	b082      	sub	sp, #8
 801db4c:	af00      	add	r7, sp, #0
 801db4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d101      	bne.n	801db5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801db56:	2301      	movs	r3, #1
 801db58:	e049      	b.n	801dbee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801db5a:	687b      	ldr	r3, [r7, #4]
 801db5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801db60:	b2db      	uxtb	r3, r3
 801db62:	2b00      	cmp	r3, #0
 801db64:	d106      	bne.n	801db74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801db66:	687b      	ldr	r3, [r7, #4]
 801db68:	2200      	movs	r2, #0
 801db6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801db6e:	6878      	ldr	r0, [r7, #4]
 801db70:	f7f9 fd32 	bl	80175d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801db74:	687b      	ldr	r3, [r7, #4]
 801db76:	2202      	movs	r2, #2
 801db78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801db7c:	687b      	ldr	r3, [r7, #4]
 801db7e:	681a      	ldr	r2, [r3, #0]
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	3304      	adds	r3, #4
 801db84:	4619      	mov	r1, r3
 801db86:	4610      	mov	r0, r2
 801db88:	f000 fd6c 	bl	801e664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	2201      	movs	r2, #1
 801db90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	2201      	movs	r2, #1
 801db98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	2201      	movs	r2, #1
 801dba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dba4:	687b      	ldr	r3, [r7, #4]
 801dba6:	2201      	movs	r2, #1
 801dba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dbac:	687b      	ldr	r3, [r7, #4]
 801dbae:	2201      	movs	r2, #1
 801dbb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	2201      	movs	r2, #1
 801dbb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	2201      	movs	r2, #1
 801dbc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dbc4:	687b      	ldr	r3, [r7, #4]
 801dbc6:	2201      	movs	r2, #1
 801dbc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dbcc:	687b      	ldr	r3, [r7, #4]
 801dbce:	2201      	movs	r2, #1
 801dbd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dbd4:	687b      	ldr	r3, [r7, #4]
 801dbd6:	2201      	movs	r2, #1
 801dbd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dbdc:	687b      	ldr	r3, [r7, #4]
 801dbde:	2201      	movs	r2, #1
 801dbe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dbe4:	687b      	ldr	r3, [r7, #4]
 801dbe6:	2201      	movs	r2, #1
 801dbe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dbec:	2300      	movs	r3, #0
}
 801dbee:	4618      	mov	r0, r3
 801dbf0:	3708      	adds	r7, #8
 801dbf2:	46bd      	mov	sp, r7
 801dbf4:	bd80      	pop	{r7, pc}
	...

0801dbf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801dbf8:	b480      	push	{r7}
 801dbfa:	b085      	sub	sp, #20
 801dbfc:	af00      	add	r7, sp, #0
 801dbfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dc06:	b2db      	uxtb	r3, r3
 801dc08:	2b01      	cmp	r3, #1
 801dc0a:	d001      	beq.n	801dc10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801dc0c:	2301      	movs	r3, #1
 801dc0e:	e04f      	b.n	801dcb0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dc10:	687b      	ldr	r3, [r7, #4]
 801dc12:	2202      	movs	r2, #2
 801dc14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	68da      	ldr	r2, [r3, #12]
 801dc1e:	687b      	ldr	r3, [r7, #4]
 801dc20:	681b      	ldr	r3, [r3, #0]
 801dc22:	f042 0201 	orr.w	r2, r2, #1
 801dc26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	681b      	ldr	r3, [r3, #0]
 801dc2c:	4a23      	ldr	r2, [pc, #140]	; (801dcbc <HAL_TIM_Base_Start_IT+0xc4>)
 801dc2e:	4293      	cmp	r3, r2
 801dc30:	d01d      	beq.n	801dc6e <HAL_TIM_Base_Start_IT+0x76>
 801dc32:	687b      	ldr	r3, [r7, #4]
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801dc3a:	d018      	beq.n	801dc6e <HAL_TIM_Base_Start_IT+0x76>
 801dc3c:	687b      	ldr	r3, [r7, #4]
 801dc3e:	681b      	ldr	r3, [r3, #0]
 801dc40:	4a1f      	ldr	r2, [pc, #124]	; (801dcc0 <HAL_TIM_Base_Start_IT+0xc8>)
 801dc42:	4293      	cmp	r3, r2
 801dc44:	d013      	beq.n	801dc6e <HAL_TIM_Base_Start_IT+0x76>
 801dc46:	687b      	ldr	r3, [r7, #4]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	4a1e      	ldr	r2, [pc, #120]	; (801dcc4 <HAL_TIM_Base_Start_IT+0xcc>)
 801dc4c:	4293      	cmp	r3, r2
 801dc4e:	d00e      	beq.n	801dc6e <HAL_TIM_Base_Start_IT+0x76>
 801dc50:	687b      	ldr	r3, [r7, #4]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	4a1c      	ldr	r2, [pc, #112]	; (801dcc8 <HAL_TIM_Base_Start_IT+0xd0>)
 801dc56:	4293      	cmp	r3, r2
 801dc58:	d009      	beq.n	801dc6e <HAL_TIM_Base_Start_IT+0x76>
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	681b      	ldr	r3, [r3, #0]
 801dc5e:	4a1b      	ldr	r2, [pc, #108]	; (801dccc <HAL_TIM_Base_Start_IT+0xd4>)
 801dc60:	4293      	cmp	r3, r2
 801dc62:	d004      	beq.n	801dc6e <HAL_TIM_Base_Start_IT+0x76>
 801dc64:	687b      	ldr	r3, [r7, #4]
 801dc66:	681b      	ldr	r3, [r3, #0]
 801dc68:	4a19      	ldr	r2, [pc, #100]	; (801dcd0 <HAL_TIM_Base_Start_IT+0xd8>)
 801dc6a:	4293      	cmp	r3, r2
 801dc6c:	d115      	bne.n	801dc9a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801dc6e:	687b      	ldr	r3, [r7, #4]
 801dc70:	681b      	ldr	r3, [r3, #0]
 801dc72:	689a      	ldr	r2, [r3, #8]
 801dc74:	4b17      	ldr	r3, [pc, #92]	; (801dcd4 <HAL_TIM_Base_Start_IT+0xdc>)
 801dc76:	4013      	ands	r3, r2
 801dc78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	2b06      	cmp	r3, #6
 801dc7e:	d015      	beq.n	801dcac <HAL_TIM_Base_Start_IT+0xb4>
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801dc86:	d011      	beq.n	801dcac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801dc88:	687b      	ldr	r3, [r7, #4]
 801dc8a:	681b      	ldr	r3, [r3, #0]
 801dc8c:	681a      	ldr	r2, [r3, #0]
 801dc8e:	687b      	ldr	r3, [r7, #4]
 801dc90:	681b      	ldr	r3, [r3, #0]
 801dc92:	f042 0201 	orr.w	r2, r2, #1
 801dc96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dc98:	e008      	b.n	801dcac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	681a      	ldr	r2, [r3, #0]
 801dca0:	687b      	ldr	r3, [r7, #4]
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	f042 0201 	orr.w	r2, r2, #1
 801dca8:	601a      	str	r2, [r3, #0]
 801dcaa:	e000      	b.n	801dcae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801dcac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801dcae:	2300      	movs	r3, #0
}
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	3714      	adds	r7, #20
 801dcb4:	46bd      	mov	sp, r7
 801dcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dcba:	4770      	bx	lr
 801dcbc:	40012c00 	.word	0x40012c00
 801dcc0:	40000400 	.word	0x40000400
 801dcc4:	40000800 	.word	0x40000800
 801dcc8:	40013400 	.word	0x40013400
 801dccc:	40014000 	.word	0x40014000
 801dcd0:	40015000 	.word	0x40015000
 801dcd4:	00010007 	.word	0x00010007

0801dcd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b082      	sub	sp, #8
 801dcdc:	af00      	add	r7, sp, #0
 801dcde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801dce0:	687b      	ldr	r3, [r7, #4]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d101      	bne.n	801dcea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801dce6:	2301      	movs	r3, #1
 801dce8:	e049      	b.n	801dd7e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801dcea:	687b      	ldr	r3, [r7, #4]
 801dcec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dcf0:	b2db      	uxtb	r3, r3
 801dcf2:	2b00      	cmp	r3, #0
 801dcf4:	d106      	bne.n	801dd04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	2200      	movs	r2, #0
 801dcfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801dcfe:	6878      	ldr	r0, [r7, #4]
 801dd00:	f7f9 fca4 	bl	801764c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dd04:	687b      	ldr	r3, [r7, #4]
 801dd06:	2202      	movs	r2, #2
 801dd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	681a      	ldr	r2, [r3, #0]
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	3304      	adds	r3, #4
 801dd14:	4619      	mov	r1, r3
 801dd16:	4610      	mov	r0, r2
 801dd18:	f000 fca4 	bl	801e664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	2201      	movs	r2, #1
 801dd20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dd24:	687b      	ldr	r3, [r7, #4]
 801dd26:	2201      	movs	r2, #1
 801dd28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	2201      	movs	r2, #1
 801dd30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	2201      	movs	r2, #1
 801dd38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dd3c:	687b      	ldr	r3, [r7, #4]
 801dd3e:	2201      	movs	r2, #1
 801dd40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dd44:	687b      	ldr	r3, [r7, #4]
 801dd46:	2201      	movs	r2, #1
 801dd48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801dd4c:	687b      	ldr	r3, [r7, #4]
 801dd4e:	2201      	movs	r2, #1
 801dd50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dd54:	687b      	ldr	r3, [r7, #4]
 801dd56:	2201      	movs	r2, #1
 801dd58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801dd5c:	687b      	ldr	r3, [r7, #4]
 801dd5e:	2201      	movs	r2, #1
 801dd60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801dd64:	687b      	ldr	r3, [r7, #4]
 801dd66:	2201      	movs	r2, #1
 801dd68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801dd6c:	687b      	ldr	r3, [r7, #4]
 801dd6e:	2201      	movs	r2, #1
 801dd70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	2201      	movs	r2, #1
 801dd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dd7c:	2300      	movs	r3, #0
}
 801dd7e:	4618      	mov	r0, r3
 801dd80:	3708      	adds	r7, #8
 801dd82:	46bd      	mov	sp, r7
 801dd84:	bd80      	pop	{r7, pc}
	...

0801dd88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801dd88:	b580      	push	{r7, lr}
 801dd8a:	b084      	sub	sp, #16
 801dd8c:	af00      	add	r7, sp, #0
 801dd8e:	6078      	str	r0, [r7, #4]
 801dd90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801dd92:	683b      	ldr	r3, [r7, #0]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d109      	bne.n	801ddac <HAL_TIM_PWM_Start+0x24>
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801dd9e:	b2db      	uxtb	r3, r3
 801dda0:	2b01      	cmp	r3, #1
 801dda2:	bf14      	ite	ne
 801dda4:	2301      	movne	r3, #1
 801dda6:	2300      	moveq	r3, #0
 801dda8:	b2db      	uxtb	r3, r3
 801ddaa:	e03c      	b.n	801de26 <HAL_TIM_PWM_Start+0x9e>
 801ddac:	683b      	ldr	r3, [r7, #0]
 801ddae:	2b04      	cmp	r3, #4
 801ddb0:	d109      	bne.n	801ddc6 <HAL_TIM_PWM_Start+0x3e>
 801ddb2:	687b      	ldr	r3, [r7, #4]
 801ddb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ddb8:	b2db      	uxtb	r3, r3
 801ddba:	2b01      	cmp	r3, #1
 801ddbc:	bf14      	ite	ne
 801ddbe:	2301      	movne	r3, #1
 801ddc0:	2300      	moveq	r3, #0
 801ddc2:	b2db      	uxtb	r3, r3
 801ddc4:	e02f      	b.n	801de26 <HAL_TIM_PWM_Start+0x9e>
 801ddc6:	683b      	ldr	r3, [r7, #0]
 801ddc8:	2b08      	cmp	r3, #8
 801ddca:	d109      	bne.n	801dde0 <HAL_TIM_PWM_Start+0x58>
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ddd2:	b2db      	uxtb	r3, r3
 801ddd4:	2b01      	cmp	r3, #1
 801ddd6:	bf14      	ite	ne
 801ddd8:	2301      	movne	r3, #1
 801ddda:	2300      	moveq	r3, #0
 801dddc:	b2db      	uxtb	r3, r3
 801ddde:	e022      	b.n	801de26 <HAL_TIM_PWM_Start+0x9e>
 801dde0:	683b      	ldr	r3, [r7, #0]
 801dde2:	2b0c      	cmp	r3, #12
 801dde4:	d109      	bne.n	801ddfa <HAL_TIM_PWM_Start+0x72>
 801dde6:	687b      	ldr	r3, [r7, #4]
 801dde8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ddec:	b2db      	uxtb	r3, r3
 801ddee:	2b01      	cmp	r3, #1
 801ddf0:	bf14      	ite	ne
 801ddf2:	2301      	movne	r3, #1
 801ddf4:	2300      	moveq	r3, #0
 801ddf6:	b2db      	uxtb	r3, r3
 801ddf8:	e015      	b.n	801de26 <HAL_TIM_PWM_Start+0x9e>
 801ddfa:	683b      	ldr	r3, [r7, #0]
 801ddfc:	2b10      	cmp	r3, #16
 801ddfe:	d109      	bne.n	801de14 <HAL_TIM_PWM_Start+0x8c>
 801de00:	687b      	ldr	r3, [r7, #4]
 801de02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801de06:	b2db      	uxtb	r3, r3
 801de08:	2b01      	cmp	r3, #1
 801de0a:	bf14      	ite	ne
 801de0c:	2301      	movne	r3, #1
 801de0e:	2300      	moveq	r3, #0
 801de10:	b2db      	uxtb	r3, r3
 801de12:	e008      	b.n	801de26 <HAL_TIM_PWM_Start+0x9e>
 801de14:	687b      	ldr	r3, [r7, #4]
 801de16:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801de1a:	b2db      	uxtb	r3, r3
 801de1c:	2b01      	cmp	r3, #1
 801de1e:	bf14      	ite	ne
 801de20:	2301      	movne	r3, #1
 801de22:	2300      	moveq	r3, #0
 801de24:	b2db      	uxtb	r3, r3
 801de26:	2b00      	cmp	r3, #0
 801de28:	d001      	beq.n	801de2e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801de2a:	2301      	movs	r3, #1
 801de2c:	e0a1      	b.n	801df72 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801de2e:	683b      	ldr	r3, [r7, #0]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d104      	bne.n	801de3e <HAL_TIM_PWM_Start+0xb6>
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	2202      	movs	r2, #2
 801de38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801de3c:	e023      	b.n	801de86 <HAL_TIM_PWM_Start+0xfe>
 801de3e:	683b      	ldr	r3, [r7, #0]
 801de40:	2b04      	cmp	r3, #4
 801de42:	d104      	bne.n	801de4e <HAL_TIM_PWM_Start+0xc6>
 801de44:	687b      	ldr	r3, [r7, #4]
 801de46:	2202      	movs	r2, #2
 801de48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801de4c:	e01b      	b.n	801de86 <HAL_TIM_PWM_Start+0xfe>
 801de4e:	683b      	ldr	r3, [r7, #0]
 801de50:	2b08      	cmp	r3, #8
 801de52:	d104      	bne.n	801de5e <HAL_TIM_PWM_Start+0xd6>
 801de54:	687b      	ldr	r3, [r7, #4]
 801de56:	2202      	movs	r2, #2
 801de58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801de5c:	e013      	b.n	801de86 <HAL_TIM_PWM_Start+0xfe>
 801de5e:	683b      	ldr	r3, [r7, #0]
 801de60:	2b0c      	cmp	r3, #12
 801de62:	d104      	bne.n	801de6e <HAL_TIM_PWM_Start+0xe6>
 801de64:	687b      	ldr	r3, [r7, #4]
 801de66:	2202      	movs	r2, #2
 801de68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801de6c:	e00b      	b.n	801de86 <HAL_TIM_PWM_Start+0xfe>
 801de6e:	683b      	ldr	r3, [r7, #0]
 801de70:	2b10      	cmp	r3, #16
 801de72:	d104      	bne.n	801de7e <HAL_TIM_PWM_Start+0xf6>
 801de74:	687b      	ldr	r3, [r7, #4]
 801de76:	2202      	movs	r2, #2
 801de78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801de7c:	e003      	b.n	801de86 <HAL_TIM_PWM_Start+0xfe>
 801de7e:	687b      	ldr	r3, [r7, #4]
 801de80:	2202      	movs	r2, #2
 801de82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801de86:	687b      	ldr	r3, [r7, #4]
 801de88:	681b      	ldr	r3, [r3, #0]
 801de8a:	2201      	movs	r2, #1
 801de8c:	6839      	ldr	r1, [r7, #0]
 801de8e:	4618      	mov	r0, r3
 801de90:	f000 ffb0 	bl	801edf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	4a38      	ldr	r2, [pc, #224]	; (801df7c <HAL_TIM_PWM_Start+0x1f4>)
 801de9a:	4293      	cmp	r3, r2
 801de9c:	d018      	beq.n	801ded0 <HAL_TIM_PWM_Start+0x148>
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	4a37      	ldr	r2, [pc, #220]	; (801df80 <HAL_TIM_PWM_Start+0x1f8>)
 801dea4:	4293      	cmp	r3, r2
 801dea6:	d013      	beq.n	801ded0 <HAL_TIM_PWM_Start+0x148>
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	4a35      	ldr	r2, [pc, #212]	; (801df84 <HAL_TIM_PWM_Start+0x1fc>)
 801deae:	4293      	cmp	r3, r2
 801deb0:	d00e      	beq.n	801ded0 <HAL_TIM_PWM_Start+0x148>
 801deb2:	687b      	ldr	r3, [r7, #4]
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	4a34      	ldr	r2, [pc, #208]	; (801df88 <HAL_TIM_PWM_Start+0x200>)
 801deb8:	4293      	cmp	r3, r2
 801deba:	d009      	beq.n	801ded0 <HAL_TIM_PWM_Start+0x148>
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	4a32      	ldr	r2, [pc, #200]	; (801df8c <HAL_TIM_PWM_Start+0x204>)
 801dec2:	4293      	cmp	r3, r2
 801dec4:	d004      	beq.n	801ded0 <HAL_TIM_PWM_Start+0x148>
 801dec6:	687b      	ldr	r3, [r7, #4]
 801dec8:	681b      	ldr	r3, [r3, #0]
 801deca:	4a31      	ldr	r2, [pc, #196]	; (801df90 <HAL_TIM_PWM_Start+0x208>)
 801decc:	4293      	cmp	r3, r2
 801dece:	d101      	bne.n	801ded4 <HAL_TIM_PWM_Start+0x14c>
 801ded0:	2301      	movs	r3, #1
 801ded2:	e000      	b.n	801ded6 <HAL_TIM_PWM_Start+0x14e>
 801ded4:	2300      	movs	r3, #0
 801ded6:	2b00      	cmp	r3, #0
 801ded8:	d007      	beq.n	801deea <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801deda:	687b      	ldr	r3, [r7, #4]
 801dedc:	681b      	ldr	r3, [r3, #0]
 801dede:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801dee0:	687b      	ldr	r3, [r7, #4]
 801dee2:	681b      	ldr	r3, [r3, #0]
 801dee4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801dee8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	681b      	ldr	r3, [r3, #0]
 801deee:	4a23      	ldr	r2, [pc, #140]	; (801df7c <HAL_TIM_PWM_Start+0x1f4>)
 801def0:	4293      	cmp	r3, r2
 801def2:	d01d      	beq.n	801df30 <HAL_TIM_PWM_Start+0x1a8>
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	681b      	ldr	r3, [r3, #0]
 801def8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801defc:	d018      	beq.n	801df30 <HAL_TIM_PWM_Start+0x1a8>
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	4a24      	ldr	r2, [pc, #144]	; (801df94 <HAL_TIM_PWM_Start+0x20c>)
 801df04:	4293      	cmp	r3, r2
 801df06:	d013      	beq.n	801df30 <HAL_TIM_PWM_Start+0x1a8>
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	681b      	ldr	r3, [r3, #0]
 801df0c:	4a22      	ldr	r2, [pc, #136]	; (801df98 <HAL_TIM_PWM_Start+0x210>)
 801df0e:	4293      	cmp	r3, r2
 801df10:	d00e      	beq.n	801df30 <HAL_TIM_PWM_Start+0x1a8>
 801df12:	687b      	ldr	r3, [r7, #4]
 801df14:	681b      	ldr	r3, [r3, #0]
 801df16:	4a1a      	ldr	r2, [pc, #104]	; (801df80 <HAL_TIM_PWM_Start+0x1f8>)
 801df18:	4293      	cmp	r3, r2
 801df1a:	d009      	beq.n	801df30 <HAL_TIM_PWM_Start+0x1a8>
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	681b      	ldr	r3, [r3, #0]
 801df20:	4a18      	ldr	r2, [pc, #96]	; (801df84 <HAL_TIM_PWM_Start+0x1fc>)
 801df22:	4293      	cmp	r3, r2
 801df24:	d004      	beq.n	801df30 <HAL_TIM_PWM_Start+0x1a8>
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	4a19      	ldr	r2, [pc, #100]	; (801df90 <HAL_TIM_PWM_Start+0x208>)
 801df2c:	4293      	cmp	r3, r2
 801df2e:	d115      	bne.n	801df5c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	689a      	ldr	r2, [r3, #8]
 801df36:	4b19      	ldr	r3, [pc, #100]	; (801df9c <HAL_TIM_PWM_Start+0x214>)
 801df38:	4013      	ands	r3, r2
 801df3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801df3c:	68fb      	ldr	r3, [r7, #12]
 801df3e:	2b06      	cmp	r3, #6
 801df40:	d015      	beq.n	801df6e <HAL_TIM_PWM_Start+0x1e6>
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801df48:	d011      	beq.n	801df6e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801df4a:	687b      	ldr	r3, [r7, #4]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	681a      	ldr	r2, [r3, #0]
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	f042 0201 	orr.w	r2, r2, #1
 801df58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801df5a:	e008      	b.n	801df6e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	681a      	ldr	r2, [r3, #0]
 801df62:	687b      	ldr	r3, [r7, #4]
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	f042 0201 	orr.w	r2, r2, #1
 801df6a:	601a      	str	r2, [r3, #0]
 801df6c:	e000      	b.n	801df70 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801df6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801df70:	2300      	movs	r3, #0
}
 801df72:	4618      	mov	r0, r3
 801df74:	3710      	adds	r7, #16
 801df76:	46bd      	mov	sp, r7
 801df78:	bd80      	pop	{r7, pc}
 801df7a:	bf00      	nop
 801df7c:	40012c00 	.word	0x40012c00
 801df80:	40013400 	.word	0x40013400
 801df84:	40014000 	.word	0x40014000
 801df88:	40014400 	.word	0x40014400
 801df8c:	40014800 	.word	0x40014800
 801df90:	40015000 	.word	0x40015000
 801df94:	40000400 	.word	0x40000400
 801df98:	40000800 	.word	0x40000800
 801df9c:	00010007 	.word	0x00010007

0801dfa0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b082      	sub	sp, #8
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	6078      	str	r0, [r7, #4]
 801dfa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	681b      	ldr	r3, [r3, #0]
 801dfae:	2200      	movs	r2, #0
 801dfb0:	6839      	ldr	r1, [r7, #0]
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	f000 ff1e 	bl	801edf4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	681b      	ldr	r3, [r3, #0]
 801dfbc:	4a40      	ldr	r2, [pc, #256]	; (801e0c0 <HAL_TIM_PWM_Stop+0x120>)
 801dfbe:	4293      	cmp	r3, r2
 801dfc0:	d018      	beq.n	801dff4 <HAL_TIM_PWM_Stop+0x54>
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	681b      	ldr	r3, [r3, #0]
 801dfc6:	4a3f      	ldr	r2, [pc, #252]	; (801e0c4 <HAL_TIM_PWM_Stop+0x124>)
 801dfc8:	4293      	cmp	r3, r2
 801dfca:	d013      	beq.n	801dff4 <HAL_TIM_PWM_Stop+0x54>
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	4a3d      	ldr	r2, [pc, #244]	; (801e0c8 <HAL_TIM_PWM_Stop+0x128>)
 801dfd2:	4293      	cmp	r3, r2
 801dfd4:	d00e      	beq.n	801dff4 <HAL_TIM_PWM_Stop+0x54>
 801dfd6:	687b      	ldr	r3, [r7, #4]
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	4a3c      	ldr	r2, [pc, #240]	; (801e0cc <HAL_TIM_PWM_Stop+0x12c>)
 801dfdc:	4293      	cmp	r3, r2
 801dfde:	d009      	beq.n	801dff4 <HAL_TIM_PWM_Stop+0x54>
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	681b      	ldr	r3, [r3, #0]
 801dfe4:	4a3a      	ldr	r2, [pc, #232]	; (801e0d0 <HAL_TIM_PWM_Stop+0x130>)
 801dfe6:	4293      	cmp	r3, r2
 801dfe8:	d004      	beq.n	801dff4 <HAL_TIM_PWM_Stop+0x54>
 801dfea:	687b      	ldr	r3, [r7, #4]
 801dfec:	681b      	ldr	r3, [r3, #0]
 801dfee:	4a39      	ldr	r2, [pc, #228]	; (801e0d4 <HAL_TIM_PWM_Stop+0x134>)
 801dff0:	4293      	cmp	r3, r2
 801dff2:	d101      	bne.n	801dff8 <HAL_TIM_PWM_Stop+0x58>
 801dff4:	2301      	movs	r3, #1
 801dff6:	e000      	b.n	801dffa <HAL_TIM_PWM_Stop+0x5a>
 801dff8:	2300      	movs	r3, #0
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	d017      	beq.n	801e02e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	681b      	ldr	r3, [r3, #0]
 801e002:	6a1a      	ldr	r2, [r3, #32]
 801e004:	f241 1311 	movw	r3, #4369	; 0x1111
 801e008:	4013      	ands	r3, r2
 801e00a:	2b00      	cmp	r3, #0
 801e00c:	d10f      	bne.n	801e02e <HAL_TIM_PWM_Stop+0x8e>
 801e00e:	687b      	ldr	r3, [r7, #4]
 801e010:	681b      	ldr	r3, [r3, #0]
 801e012:	6a1a      	ldr	r2, [r3, #32]
 801e014:	f244 4344 	movw	r3, #17476	; 0x4444
 801e018:	4013      	ands	r3, r2
 801e01a:	2b00      	cmp	r3, #0
 801e01c:	d107      	bne.n	801e02e <HAL_TIM_PWM_Stop+0x8e>
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	681b      	ldr	r3, [r3, #0]
 801e022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e024:	687b      	ldr	r3, [r7, #4]
 801e026:	681b      	ldr	r3, [r3, #0]
 801e028:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e02c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e02e:	687b      	ldr	r3, [r7, #4]
 801e030:	681b      	ldr	r3, [r3, #0]
 801e032:	6a1a      	ldr	r2, [r3, #32]
 801e034:	f241 1311 	movw	r3, #4369	; 0x1111
 801e038:	4013      	ands	r3, r2
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d10f      	bne.n	801e05e <HAL_TIM_PWM_Stop+0xbe>
 801e03e:	687b      	ldr	r3, [r7, #4]
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	6a1a      	ldr	r2, [r3, #32]
 801e044:	f244 4344 	movw	r3, #17476	; 0x4444
 801e048:	4013      	ands	r3, r2
 801e04a:	2b00      	cmp	r3, #0
 801e04c:	d107      	bne.n	801e05e <HAL_TIM_PWM_Stop+0xbe>
 801e04e:	687b      	ldr	r3, [r7, #4]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	681a      	ldr	r2, [r3, #0]
 801e054:	687b      	ldr	r3, [r7, #4]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	f022 0201 	bic.w	r2, r2, #1
 801e05c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e05e:	683b      	ldr	r3, [r7, #0]
 801e060:	2b00      	cmp	r3, #0
 801e062:	d104      	bne.n	801e06e <HAL_TIM_PWM_Stop+0xce>
 801e064:	687b      	ldr	r3, [r7, #4]
 801e066:	2201      	movs	r2, #1
 801e068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e06c:	e023      	b.n	801e0b6 <HAL_TIM_PWM_Stop+0x116>
 801e06e:	683b      	ldr	r3, [r7, #0]
 801e070:	2b04      	cmp	r3, #4
 801e072:	d104      	bne.n	801e07e <HAL_TIM_PWM_Stop+0xde>
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	2201      	movs	r2, #1
 801e078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e07c:	e01b      	b.n	801e0b6 <HAL_TIM_PWM_Stop+0x116>
 801e07e:	683b      	ldr	r3, [r7, #0]
 801e080:	2b08      	cmp	r3, #8
 801e082:	d104      	bne.n	801e08e <HAL_TIM_PWM_Stop+0xee>
 801e084:	687b      	ldr	r3, [r7, #4]
 801e086:	2201      	movs	r2, #1
 801e088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e08c:	e013      	b.n	801e0b6 <HAL_TIM_PWM_Stop+0x116>
 801e08e:	683b      	ldr	r3, [r7, #0]
 801e090:	2b0c      	cmp	r3, #12
 801e092:	d104      	bne.n	801e09e <HAL_TIM_PWM_Stop+0xfe>
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	2201      	movs	r2, #1
 801e098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e09c:	e00b      	b.n	801e0b6 <HAL_TIM_PWM_Stop+0x116>
 801e09e:	683b      	ldr	r3, [r7, #0]
 801e0a0:	2b10      	cmp	r3, #16
 801e0a2:	d104      	bne.n	801e0ae <HAL_TIM_PWM_Stop+0x10e>
 801e0a4:	687b      	ldr	r3, [r7, #4]
 801e0a6:	2201      	movs	r2, #1
 801e0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e0ac:	e003      	b.n	801e0b6 <HAL_TIM_PWM_Stop+0x116>
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	2201      	movs	r2, #1
 801e0b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e0b6:	2300      	movs	r3, #0
}
 801e0b8:	4618      	mov	r0, r3
 801e0ba:	3708      	adds	r7, #8
 801e0bc:	46bd      	mov	sp, r7
 801e0be:	bd80      	pop	{r7, pc}
 801e0c0:	40012c00 	.word	0x40012c00
 801e0c4:	40013400 	.word	0x40013400
 801e0c8:	40014000 	.word	0x40014000
 801e0cc:	40014400 	.word	0x40014400
 801e0d0:	40014800 	.word	0x40014800
 801e0d4:	40015000 	.word	0x40015000

0801e0d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e0d8:	b580      	push	{r7, lr}
 801e0da:	b082      	sub	sp, #8
 801e0dc:	af00      	add	r7, sp, #0
 801e0de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	691b      	ldr	r3, [r3, #16]
 801e0e6:	f003 0302 	and.w	r3, r3, #2
 801e0ea:	2b02      	cmp	r3, #2
 801e0ec:	d122      	bne.n	801e134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e0ee:	687b      	ldr	r3, [r7, #4]
 801e0f0:	681b      	ldr	r3, [r3, #0]
 801e0f2:	68db      	ldr	r3, [r3, #12]
 801e0f4:	f003 0302 	and.w	r3, r3, #2
 801e0f8:	2b02      	cmp	r3, #2
 801e0fa:	d11b      	bne.n	801e134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	f06f 0202 	mvn.w	r2, #2
 801e104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	2201      	movs	r2, #1
 801e10a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	699b      	ldr	r3, [r3, #24]
 801e112:	f003 0303 	and.w	r3, r3, #3
 801e116:	2b00      	cmp	r3, #0
 801e118:	d003      	beq.n	801e122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e11a:	6878      	ldr	r0, [r7, #4]
 801e11c:	f000 fa84 	bl	801e628 <HAL_TIM_IC_CaptureCallback>
 801e120:	e005      	b.n	801e12e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e122:	6878      	ldr	r0, [r7, #4]
 801e124:	f000 fa76 	bl	801e614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e128:	6878      	ldr	r0, [r7, #4]
 801e12a:	f000 fa87 	bl	801e63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	2200      	movs	r2, #0
 801e132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	681b      	ldr	r3, [r3, #0]
 801e138:	691b      	ldr	r3, [r3, #16]
 801e13a:	f003 0304 	and.w	r3, r3, #4
 801e13e:	2b04      	cmp	r3, #4
 801e140:	d122      	bne.n	801e188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e142:	687b      	ldr	r3, [r7, #4]
 801e144:	681b      	ldr	r3, [r3, #0]
 801e146:	68db      	ldr	r3, [r3, #12]
 801e148:	f003 0304 	and.w	r3, r3, #4
 801e14c:	2b04      	cmp	r3, #4
 801e14e:	d11b      	bne.n	801e188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	681b      	ldr	r3, [r3, #0]
 801e154:	f06f 0204 	mvn.w	r2, #4
 801e158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e15a:	687b      	ldr	r3, [r7, #4]
 801e15c:	2202      	movs	r2, #2
 801e15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	681b      	ldr	r3, [r3, #0]
 801e164:	699b      	ldr	r3, [r3, #24]
 801e166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d003      	beq.n	801e176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e16e:	6878      	ldr	r0, [r7, #4]
 801e170:	f000 fa5a 	bl	801e628 <HAL_TIM_IC_CaptureCallback>
 801e174:	e005      	b.n	801e182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e176:	6878      	ldr	r0, [r7, #4]
 801e178:	f000 fa4c 	bl	801e614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e17c:	6878      	ldr	r0, [r7, #4]
 801e17e:	f000 fa5d 	bl	801e63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e182:	687b      	ldr	r3, [r7, #4]
 801e184:	2200      	movs	r2, #0
 801e186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	681b      	ldr	r3, [r3, #0]
 801e18c:	691b      	ldr	r3, [r3, #16]
 801e18e:	f003 0308 	and.w	r3, r3, #8
 801e192:	2b08      	cmp	r3, #8
 801e194:	d122      	bne.n	801e1dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	68db      	ldr	r3, [r3, #12]
 801e19c:	f003 0308 	and.w	r3, r3, #8
 801e1a0:	2b08      	cmp	r3, #8
 801e1a2:	d11b      	bne.n	801e1dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e1a4:	687b      	ldr	r3, [r7, #4]
 801e1a6:	681b      	ldr	r3, [r3, #0]
 801e1a8:	f06f 0208 	mvn.w	r2, #8
 801e1ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e1ae:	687b      	ldr	r3, [r7, #4]
 801e1b0:	2204      	movs	r2, #4
 801e1b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e1b4:	687b      	ldr	r3, [r7, #4]
 801e1b6:	681b      	ldr	r3, [r3, #0]
 801e1b8:	69db      	ldr	r3, [r3, #28]
 801e1ba:	f003 0303 	and.w	r3, r3, #3
 801e1be:	2b00      	cmp	r3, #0
 801e1c0:	d003      	beq.n	801e1ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e1c2:	6878      	ldr	r0, [r7, #4]
 801e1c4:	f000 fa30 	bl	801e628 <HAL_TIM_IC_CaptureCallback>
 801e1c8:	e005      	b.n	801e1d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e1ca:	6878      	ldr	r0, [r7, #4]
 801e1cc:	f000 fa22 	bl	801e614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e1d0:	6878      	ldr	r0, [r7, #4]
 801e1d2:	f000 fa33 	bl	801e63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e1d6:	687b      	ldr	r3, [r7, #4]
 801e1d8:	2200      	movs	r2, #0
 801e1da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e1dc:	687b      	ldr	r3, [r7, #4]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	691b      	ldr	r3, [r3, #16]
 801e1e2:	f003 0310 	and.w	r3, r3, #16
 801e1e6:	2b10      	cmp	r3, #16
 801e1e8:	d122      	bne.n	801e230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	681b      	ldr	r3, [r3, #0]
 801e1ee:	68db      	ldr	r3, [r3, #12]
 801e1f0:	f003 0310 	and.w	r3, r3, #16
 801e1f4:	2b10      	cmp	r3, #16
 801e1f6:	d11b      	bne.n	801e230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	f06f 0210 	mvn.w	r2, #16
 801e200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	2208      	movs	r2, #8
 801e206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	681b      	ldr	r3, [r3, #0]
 801e20c:	69db      	ldr	r3, [r3, #28]
 801e20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e212:	2b00      	cmp	r3, #0
 801e214:	d003      	beq.n	801e21e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e216:	6878      	ldr	r0, [r7, #4]
 801e218:	f000 fa06 	bl	801e628 <HAL_TIM_IC_CaptureCallback>
 801e21c:	e005      	b.n	801e22a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e21e:	6878      	ldr	r0, [r7, #4]
 801e220:	f000 f9f8 	bl	801e614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e224:	6878      	ldr	r0, [r7, #4]
 801e226:	f000 fa09 	bl	801e63c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	2200      	movs	r2, #0
 801e22e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e230:	687b      	ldr	r3, [r7, #4]
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	691b      	ldr	r3, [r3, #16]
 801e236:	f003 0301 	and.w	r3, r3, #1
 801e23a:	2b01      	cmp	r3, #1
 801e23c:	d10e      	bne.n	801e25c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e23e:	687b      	ldr	r3, [r7, #4]
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	68db      	ldr	r3, [r3, #12]
 801e244:	f003 0301 	and.w	r3, r3, #1
 801e248:	2b01      	cmp	r3, #1
 801e24a:	d107      	bne.n	801e25c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	681b      	ldr	r3, [r3, #0]
 801e250:	f06f 0201 	mvn.w	r2, #1
 801e254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e256:	6878      	ldr	r0, [r7, #4]
 801e258:	f000 f9d2 	bl	801e600 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	691b      	ldr	r3, [r3, #16]
 801e262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e266:	2b80      	cmp	r3, #128	; 0x80
 801e268:	d10e      	bne.n	801e288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	681b      	ldr	r3, [r3, #0]
 801e26e:	68db      	ldr	r3, [r3, #12]
 801e270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e274:	2b80      	cmp	r3, #128	; 0x80
 801e276:	d107      	bne.n	801e288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e278:	687b      	ldr	r3, [r7, #4]
 801e27a:	681b      	ldr	r3, [r3, #0]
 801e27c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e282:	6878      	ldr	r0, [r7, #4]
 801e284:	f000 ff26 	bl	801f0d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	691b      	ldr	r3, [r3, #16]
 801e28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e296:	d10e      	bne.n	801e2b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e298:	687b      	ldr	r3, [r7, #4]
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	68db      	ldr	r3, [r3, #12]
 801e29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e2a2:	2b80      	cmp	r3, #128	; 0x80
 801e2a4:	d107      	bne.n	801e2b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e2a6:	687b      	ldr	r3, [r7, #4]
 801e2a8:	681b      	ldr	r3, [r3, #0]
 801e2aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e2ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e2b0:	6878      	ldr	r0, [r7, #4]
 801e2b2:	f000 ff19 	bl	801f0e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	691b      	ldr	r3, [r3, #16]
 801e2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e2c0:	2b40      	cmp	r3, #64	; 0x40
 801e2c2:	d10e      	bne.n	801e2e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e2c4:	687b      	ldr	r3, [r7, #4]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	68db      	ldr	r3, [r3, #12]
 801e2ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e2ce:	2b40      	cmp	r3, #64	; 0x40
 801e2d0:	d107      	bne.n	801e2e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e2da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e2dc:	6878      	ldr	r0, [r7, #4]
 801e2de:	f000 f9b7 	bl	801e650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	691b      	ldr	r3, [r3, #16]
 801e2e8:	f003 0320 	and.w	r3, r3, #32
 801e2ec:	2b20      	cmp	r3, #32
 801e2ee:	d10e      	bne.n	801e30e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	681b      	ldr	r3, [r3, #0]
 801e2f4:	68db      	ldr	r3, [r3, #12]
 801e2f6:	f003 0320 	and.w	r3, r3, #32
 801e2fa:	2b20      	cmp	r3, #32
 801e2fc:	d107      	bne.n	801e30e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e2fe:	687b      	ldr	r3, [r7, #4]
 801e300:	681b      	ldr	r3, [r3, #0]
 801e302:	f06f 0220 	mvn.w	r2, #32
 801e306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e308:	6878      	ldr	r0, [r7, #4]
 801e30a:	f000 fed9 	bl	801f0c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	691b      	ldr	r3, [r3, #16]
 801e314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e31c:	d10f      	bne.n	801e33e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	68db      	ldr	r3, [r3, #12]
 801e324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e32c:	d107      	bne.n	801e33e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e338:	6878      	ldr	r0, [r7, #4]
 801e33a:	f000 fedf 	bl	801f0fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e33e:	687b      	ldr	r3, [r7, #4]
 801e340:	681b      	ldr	r3, [r3, #0]
 801e342:	691b      	ldr	r3, [r3, #16]
 801e344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e34c:	d10f      	bne.n	801e36e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e34e:	687b      	ldr	r3, [r7, #4]
 801e350:	681b      	ldr	r3, [r3, #0]
 801e352:	68db      	ldr	r3, [r3, #12]
 801e354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e358:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e35c:	d107      	bne.n	801e36e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	681b      	ldr	r3, [r3, #0]
 801e362:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e368:	6878      	ldr	r0, [r7, #4]
 801e36a:	f000 fed1 	bl	801f110 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	691b      	ldr	r3, [r3, #16]
 801e374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e37c:	d10f      	bne.n	801e39e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	68db      	ldr	r3, [r3, #12]
 801e384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e38c:	d107      	bne.n	801e39e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	681b      	ldr	r3, [r3, #0]
 801e392:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e398:	6878      	ldr	r0, [r7, #4]
 801e39a:	f000 fec3 	bl	801f124 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	691b      	ldr	r3, [r3, #16]
 801e3a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e3a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e3ac:	d10f      	bne.n	801e3ce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e3ae:	687b      	ldr	r3, [r7, #4]
 801e3b0:	681b      	ldr	r3, [r3, #0]
 801e3b2:	68db      	ldr	r3, [r3, #12]
 801e3b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e3b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e3bc:	d107      	bne.n	801e3ce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e3be:	687b      	ldr	r3, [r7, #4]
 801e3c0:	681b      	ldr	r3, [r3, #0]
 801e3c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e3c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e3c8:	6878      	ldr	r0, [r7, #4]
 801e3ca:	f000 feb5 	bl	801f138 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e3ce:	bf00      	nop
 801e3d0:	3708      	adds	r7, #8
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
	...

0801e3d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e3d8:	b580      	push	{r7, lr}
 801e3da:	b086      	sub	sp, #24
 801e3dc:	af00      	add	r7, sp, #0
 801e3de:	60f8      	str	r0, [r7, #12]
 801e3e0:	60b9      	str	r1, [r7, #8]
 801e3e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e3e8:	68fb      	ldr	r3, [r7, #12]
 801e3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e3ee:	2b01      	cmp	r3, #1
 801e3f0:	d101      	bne.n	801e3f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e3f2:	2302      	movs	r3, #2
 801e3f4:	e0ff      	b.n	801e5f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e3f6:	68fb      	ldr	r3, [r7, #12]
 801e3f8:	2201      	movs	r2, #1
 801e3fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e3fe:	687b      	ldr	r3, [r7, #4]
 801e400:	2b14      	cmp	r3, #20
 801e402:	f200 80f0 	bhi.w	801e5e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e406:	a201      	add	r2, pc, #4	; (adr r2, 801e40c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e40c:	0801e461 	.word	0x0801e461
 801e410:	0801e5e7 	.word	0x0801e5e7
 801e414:	0801e5e7 	.word	0x0801e5e7
 801e418:	0801e5e7 	.word	0x0801e5e7
 801e41c:	0801e4a1 	.word	0x0801e4a1
 801e420:	0801e5e7 	.word	0x0801e5e7
 801e424:	0801e5e7 	.word	0x0801e5e7
 801e428:	0801e5e7 	.word	0x0801e5e7
 801e42c:	0801e4e3 	.word	0x0801e4e3
 801e430:	0801e5e7 	.word	0x0801e5e7
 801e434:	0801e5e7 	.word	0x0801e5e7
 801e438:	0801e5e7 	.word	0x0801e5e7
 801e43c:	0801e523 	.word	0x0801e523
 801e440:	0801e5e7 	.word	0x0801e5e7
 801e444:	0801e5e7 	.word	0x0801e5e7
 801e448:	0801e5e7 	.word	0x0801e5e7
 801e44c:	0801e565 	.word	0x0801e565
 801e450:	0801e5e7 	.word	0x0801e5e7
 801e454:	0801e5e7 	.word	0x0801e5e7
 801e458:	0801e5e7 	.word	0x0801e5e7
 801e45c:	0801e5a5 	.word	0x0801e5a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e460:	68fb      	ldr	r3, [r7, #12]
 801e462:	681b      	ldr	r3, [r3, #0]
 801e464:	68b9      	ldr	r1, [r7, #8]
 801e466:	4618      	mov	r0, r3
 801e468:	f000 f99a 	bl	801e7a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e46c:	68fb      	ldr	r3, [r7, #12]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	699a      	ldr	r2, [r3, #24]
 801e472:	68fb      	ldr	r3, [r7, #12]
 801e474:	681b      	ldr	r3, [r3, #0]
 801e476:	f042 0208 	orr.w	r2, r2, #8
 801e47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e47c:	68fb      	ldr	r3, [r7, #12]
 801e47e:	681b      	ldr	r3, [r3, #0]
 801e480:	699a      	ldr	r2, [r3, #24]
 801e482:	68fb      	ldr	r3, [r7, #12]
 801e484:	681b      	ldr	r3, [r3, #0]
 801e486:	f022 0204 	bic.w	r2, r2, #4
 801e48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e48c:	68fb      	ldr	r3, [r7, #12]
 801e48e:	681b      	ldr	r3, [r3, #0]
 801e490:	6999      	ldr	r1, [r3, #24]
 801e492:	68bb      	ldr	r3, [r7, #8]
 801e494:	691a      	ldr	r2, [r3, #16]
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	681b      	ldr	r3, [r3, #0]
 801e49a:	430a      	orrs	r2, r1
 801e49c:	619a      	str	r2, [r3, #24]
      break;
 801e49e:	e0a5      	b.n	801e5ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e4a0:	68fb      	ldr	r3, [r7, #12]
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	68b9      	ldr	r1, [r7, #8]
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f000 fa14 	bl	801e8d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e4ac:	68fb      	ldr	r3, [r7, #12]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	699a      	ldr	r2, [r3, #24]
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e4ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e4bc:	68fb      	ldr	r3, [r7, #12]
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	699a      	ldr	r2, [r3, #24]
 801e4c2:	68fb      	ldr	r3, [r7, #12]
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e4ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e4cc:	68fb      	ldr	r3, [r7, #12]
 801e4ce:	681b      	ldr	r3, [r3, #0]
 801e4d0:	6999      	ldr	r1, [r3, #24]
 801e4d2:	68bb      	ldr	r3, [r7, #8]
 801e4d4:	691b      	ldr	r3, [r3, #16]
 801e4d6:	021a      	lsls	r2, r3, #8
 801e4d8:	68fb      	ldr	r3, [r7, #12]
 801e4da:	681b      	ldr	r3, [r3, #0]
 801e4dc:	430a      	orrs	r2, r1
 801e4de:	619a      	str	r2, [r3, #24]
      break;
 801e4e0:	e084      	b.n	801e5ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e4e2:	68fb      	ldr	r3, [r7, #12]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	68b9      	ldr	r1, [r7, #8]
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	f000 fa87 	bl	801e9fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e4ee:	68fb      	ldr	r3, [r7, #12]
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	69da      	ldr	r2, [r3, #28]
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	f042 0208 	orr.w	r2, r2, #8
 801e4fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e4fe:	68fb      	ldr	r3, [r7, #12]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	69da      	ldr	r2, [r3, #28]
 801e504:	68fb      	ldr	r3, [r7, #12]
 801e506:	681b      	ldr	r3, [r3, #0]
 801e508:	f022 0204 	bic.w	r2, r2, #4
 801e50c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e50e:	68fb      	ldr	r3, [r7, #12]
 801e510:	681b      	ldr	r3, [r3, #0]
 801e512:	69d9      	ldr	r1, [r3, #28]
 801e514:	68bb      	ldr	r3, [r7, #8]
 801e516:	691a      	ldr	r2, [r3, #16]
 801e518:	68fb      	ldr	r3, [r7, #12]
 801e51a:	681b      	ldr	r3, [r3, #0]
 801e51c:	430a      	orrs	r2, r1
 801e51e:	61da      	str	r2, [r3, #28]
      break;
 801e520:	e064      	b.n	801e5ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e522:	68fb      	ldr	r3, [r7, #12]
 801e524:	681b      	ldr	r3, [r3, #0]
 801e526:	68b9      	ldr	r1, [r7, #8]
 801e528:	4618      	mov	r0, r3
 801e52a:	f000 faf9 	bl	801eb20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e52e:	68fb      	ldr	r3, [r7, #12]
 801e530:	681b      	ldr	r3, [r3, #0]
 801e532:	69da      	ldr	r2, [r3, #28]
 801e534:	68fb      	ldr	r3, [r7, #12]
 801e536:	681b      	ldr	r3, [r3, #0]
 801e538:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e53c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e53e:	68fb      	ldr	r3, [r7, #12]
 801e540:	681b      	ldr	r3, [r3, #0]
 801e542:	69da      	ldr	r2, [r3, #28]
 801e544:	68fb      	ldr	r3, [r7, #12]
 801e546:	681b      	ldr	r3, [r3, #0]
 801e548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e54c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e54e:	68fb      	ldr	r3, [r7, #12]
 801e550:	681b      	ldr	r3, [r3, #0]
 801e552:	69d9      	ldr	r1, [r3, #28]
 801e554:	68bb      	ldr	r3, [r7, #8]
 801e556:	691b      	ldr	r3, [r3, #16]
 801e558:	021a      	lsls	r2, r3, #8
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	430a      	orrs	r2, r1
 801e560:	61da      	str	r2, [r3, #28]
      break;
 801e562:	e043      	b.n	801e5ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	68b9      	ldr	r1, [r7, #8]
 801e56a:	4618      	mov	r0, r3
 801e56c:	f000 fb6c 	bl	801ec48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e570:	68fb      	ldr	r3, [r7, #12]
 801e572:	681b      	ldr	r3, [r3, #0]
 801e574:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	681b      	ldr	r3, [r3, #0]
 801e57a:	f042 0208 	orr.w	r2, r2, #8
 801e57e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	681b      	ldr	r3, [r3, #0]
 801e584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	f022 0204 	bic.w	r2, r2, #4
 801e58e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e590:	68fb      	ldr	r3, [r7, #12]
 801e592:	681b      	ldr	r3, [r3, #0]
 801e594:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e596:	68bb      	ldr	r3, [r7, #8]
 801e598:	691a      	ldr	r2, [r3, #16]
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	430a      	orrs	r2, r1
 801e5a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e5a2:	e023      	b.n	801e5ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	68b9      	ldr	r1, [r7, #8]
 801e5aa:	4618      	mov	r0, r3
 801e5ac:	f000 fbb6 	bl	801ed1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e5b0:	68fb      	ldr	r3, [r7, #12]
 801e5b2:	681b      	ldr	r3, [r3, #0]
 801e5b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	681b      	ldr	r3, [r3, #0]
 801e5ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e5be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e5c6:	68fb      	ldr	r3, [r7, #12]
 801e5c8:	681b      	ldr	r3, [r3, #0]
 801e5ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e5ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	681b      	ldr	r3, [r3, #0]
 801e5d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e5d6:	68bb      	ldr	r3, [r7, #8]
 801e5d8:	691b      	ldr	r3, [r3, #16]
 801e5da:	021a      	lsls	r2, r3, #8
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	430a      	orrs	r2, r1
 801e5e2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e5e4:	e002      	b.n	801e5ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801e5e6:	2301      	movs	r3, #1
 801e5e8:	75fb      	strb	r3, [r7, #23]
      break;
 801e5ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	2200      	movs	r2, #0
 801e5f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801e5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 801e5f6:	4618      	mov	r0, r3
 801e5f8:	3718      	adds	r7, #24
 801e5fa:	46bd      	mov	sp, r7
 801e5fc:	bd80      	pop	{r7, pc}
 801e5fe:	bf00      	nop

0801e600 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e600:	b480      	push	{r7}
 801e602:	b083      	sub	sp, #12
 801e604:	af00      	add	r7, sp, #0
 801e606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801e608:	bf00      	nop
 801e60a:	370c      	adds	r7, #12
 801e60c:	46bd      	mov	sp, r7
 801e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e612:	4770      	bx	lr

0801e614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e614:	b480      	push	{r7}
 801e616:	b083      	sub	sp, #12
 801e618:	af00      	add	r7, sp, #0
 801e61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801e61c:	bf00      	nop
 801e61e:	370c      	adds	r7, #12
 801e620:	46bd      	mov	sp, r7
 801e622:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e626:	4770      	bx	lr

0801e628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801e628:	b480      	push	{r7}
 801e62a:	b083      	sub	sp, #12
 801e62c:	af00      	add	r7, sp, #0
 801e62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801e630:	bf00      	nop
 801e632:	370c      	adds	r7, #12
 801e634:	46bd      	mov	sp, r7
 801e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e63a:	4770      	bx	lr

0801e63c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801e63c:	b480      	push	{r7}
 801e63e:	b083      	sub	sp, #12
 801e640:	af00      	add	r7, sp, #0
 801e642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801e644:	bf00      	nop
 801e646:	370c      	adds	r7, #12
 801e648:	46bd      	mov	sp, r7
 801e64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e64e:	4770      	bx	lr

0801e650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801e650:	b480      	push	{r7}
 801e652:	b083      	sub	sp, #12
 801e654:	af00      	add	r7, sp, #0
 801e656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801e658:	bf00      	nop
 801e65a:	370c      	adds	r7, #12
 801e65c:	46bd      	mov	sp, r7
 801e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e662:	4770      	bx	lr

0801e664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801e664:	b480      	push	{r7}
 801e666:	b085      	sub	sp, #20
 801e668:	af00      	add	r7, sp, #0
 801e66a:	6078      	str	r0, [r7, #4]
 801e66c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801e66e:	687b      	ldr	r3, [r7, #4]
 801e670:	681b      	ldr	r3, [r3, #0]
 801e672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	4a42      	ldr	r2, [pc, #264]	; (801e780 <TIM_Base_SetConfig+0x11c>)
 801e678:	4293      	cmp	r3, r2
 801e67a:	d013      	beq.n	801e6a4 <TIM_Base_SetConfig+0x40>
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e682:	d00f      	beq.n	801e6a4 <TIM_Base_SetConfig+0x40>
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	4a3f      	ldr	r2, [pc, #252]	; (801e784 <TIM_Base_SetConfig+0x120>)
 801e688:	4293      	cmp	r3, r2
 801e68a:	d00b      	beq.n	801e6a4 <TIM_Base_SetConfig+0x40>
 801e68c:	687b      	ldr	r3, [r7, #4]
 801e68e:	4a3e      	ldr	r2, [pc, #248]	; (801e788 <TIM_Base_SetConfig+0x124>)
 801e690:	4293      	cmp	r3, r2
 801e692:	d007      	beq.n	801e6a4 <TIM_Base_SetConfig+0x40>
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	4a3d      	ldr	r2, [pc, #244]	; (801e78c <TIM_Base_SetConfig+0x128>)
 801e698:	4293      	cmp	r3, r2
 801e69a:	d003      	beq.n	801e6a4 <TIM_Base_SetConfig+0x40>
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	4a3c      	ldr	r2, [pc, #240]	; (801e790 <TIM_Base_SetConfig+0x12c>)
 801e6a0:	4293      	cmp	r3, r2
 801e6a2:	d108      	bne.n	801e6b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801e6a4:	68fb      	ldr	r3, [r7, #12]
 801e6a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e6aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801e6ac:	683b      	ldr	r3, [r7, #0]
 801e6ae:	685b      	ldr	r3, [r3, #4]
 801e6b0:	68fa      	ldr	r2, [r7, #12]
 801e6b2:	4313      	orrs	r3, r2
 801e6b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801e6b6:	687b      	ldr	r3, [r7, #4]
 801e6b8:	4a31      	ldr	r2, [pc, #196]	; (801e780 <TIM_Base_SetConfig+0x11c>)
 801e6ba:	4293      	cmp	r3, r2
 801e6bc:	d01f      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6be:	687b      	ldr	r3, [r7, #4]
 801e6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e6c4:	d01b      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	4a2e      	ldr	r2, [pc, #184]	; (801e784 <TIM_Base_SetConfig+0x120>)
 801e6ca:	4293      	cmp	r3, r2
 801e6cc:	d017      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	4a2d      	ldr	r2, [pc, #180]	; (801e788 <TIM_Base_SetConfig+0x124>)
 801e6d2:	4293      	cmp	r3, r2
 801e6d4:	d013      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	4a2c      	ldr	r2, [pc, #176]	; (801e78c <TIM_Base_SetConfig+0x128>)
 801e6da:	4293      	cmp	r3, r2
 801e6dc:	d00f      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	4a2c      	ldr	r2, [pc, #176]	; (801e794 <TIM_Base_SetConfig+0x130>)
 801e6e2:	4293      	cmp	r3, r2
 801e6e4:	d00b      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6e6:	687b      	ldr	r3, [r7, #4]
 801e6e8:	4a2b      	ldr	r2, [pc, #172]	; (801e798 <TIM_Base_SetConfig+0x134>)
 801e6ea:	4293      	cmp	r3, r2
 801e6ec:	d007      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	4a2a      	ldr	r2, [pc, #168]	; (801e79c <TIM_Base_SetConfig+0x138>)
 801e6f2:	4293      	cmp	r3, r2
 801e6f4:	d003      	beq.n	801e6fe <TIM_Base_SetConfig+0x9a>
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	4a25      	ldr	r2, [pc, #148]	; (801e790 <TIM_Base_SetConfig+0x12c>)
 801e6fa:	4293      	cmp	r3, r2
 801e6fc:	d108      	bne.n	801e710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801e706:	683b      	ldr	r3, [r7, #0]
 801e708:	68db      	ldr	r3, [r3, #12]
 801e70a:	68fa      	ldr	r2, [r7, #12]
 801e70c:	4313      	orrs	r3, r2
 801e70e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801e710:	68fb      	ldr	r3, [r7, #12]
 801e712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801e716:	683b      	ldr	r3, [r7, #0]
 801e718:	695b      	ldr	r3, [r3, #20]
 801e71a:	4313      	orrs	r3, r2
 801e71c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801e71e:	687b      	ldr	r3, [r7, #4]
 801e720:	68fa      	ldr	r2, [r7, #12]
 801e722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801e724:	683b      	ldr	r3, [r7, #0]
 801e726:	689a      	ldr	r2, [r3, #8]
 801e728:	687b      	ldr	r3, [r7, #4]
 801e72a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801e72c:	683b      	ldr	r3, [r7, #0]
 801e72e:	681a      	ldr	r2, [r3, #0]
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	4a12      	ldr	r2, [pc, #72]	; (801e780 <TIM_Base_SetConfig+0x11c>)
 801e738:	4293      	cmp	r3, r2
 801e73a:	d013      	beq.n	801e764 <TIM_Base_SetConfig+0x100>
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	4a13      	ldr	r2, [pc, #76]	; (801e78c <TIM_Base_SetConfig+0x128>)
 801e740:	4293      	cmp	r3, r2
 801e742:	d00f      	beq.n	801e764 <TIM_Base_SetConfig+0x100>
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	4a13      	ldr	r2, [pc, #76]	; (801e794 <TIM_Base_SetConfig+0x130>)
 801e748:	4293      	cmp	r3, r2
 801e74a:	d00b      	beq.n	801e764 <TIM_Base_SetConfig+0x100>
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	4a12      	ldr	r2, [pc, #72]	; (801e798 <TIM_Base_SetConfig+0x134>)
 801e750:	4293      	cmp	r3, r2
 801e752:	d007      	beq.n	801e764 <TIM_Base_SetConfig+0x100>
 801e754:	687b      	ldr	r3, [r7, #4]
 801e756:	4a11      	ldr	r2, [pc, #68]	; (801e79c <TIM_Base_SetConfig+0x138>)
 801e758:	4293      	cmp	r3, r2
 801e75a:	d003      	beq.n	801e764 <TIM_Base_SetConfig+0x100>
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	4a0c      	ldr	r2, [pc, #48]	; (801e790 <TIM_Base_SetConfig+0x12c>)
 801e760:	4293      	cmp	r3, r2
 801e762:	d103      	bne.n	801e76c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801e764:	683b      	ldr	r3, [r7, #0]
 801e766:	691a      	ldr	r2, [r3, #16]
 801e768:	687b      	ldr	r3, [r7, #4]
 801e76a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	2201      	movs	r2, #1
 801e770:	615a      	str	r2, [r3, #20]
}
 801e772:	bf00      	nop
 801e774:	3714      	adds	r7, #20
 801e776:	46bd      	mov	sp, r7
 801e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e77c:	4770      	bx	lr
 801e77e:	bf00      	nop
 801e780:	40012c00 	.word	0x40012c00
 801e784:	40000400 	.word	0x40000400
 801e788:	40000800 	.word	0x40000800
 801e78c:	40013400 	.word	0x40013400
 801e790:	40015000 	.word	0x40015000
 801e794:	40014000 	.word	0x40014000
 801e798:	40014400 	.word	0x40014400
 801e79c:	40014800 	.word	0x40014800

0801e7a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e7a0:	b480      	push	{r7}
 801e7a2:	b087      	sub	sp, #28
 801e7a4:	af00      	add	r7, sp, #0
 801e7a6:	6078      	str	r0, [r7, #4]
 801e7a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	6a1b      	ldr	r3, [r3, #32]
 801e7ae:	f023 0201 	bic.w	r2, r3, #1
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	6a1b      	ldr	r3, [r3, #32]
 801e7ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	685b      	ldr	r3, [r3, #4]
 801e7c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	699b      	ldr	r3, [r3, #24]
 801e7c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801e7c8:	68fb      	ldr	r3, [r7, #12]
 801e7ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801e7ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e7d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801e7d4:	68fb      	ldr	r3, [r7, #12]
 801e7d6:	f023 0303 	bic.w	r3, r3, #3
 801e7da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801e7dc:	683b      	ldr	r3, [r7, #0]
 801e7de:	681b      	ldr	r3, [r3, #0]
 801e7e0:	68fa      	ldr	r2, [r7, #12]
 801e7e2:	4313      	orrs	r3, r2
 801e7e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801e7e6:	697b      	ldr	r3, [r7, #20]
 801e7e8:	f023 0302 	bic.w	r3, r3, #2
 801e7ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801e7ee:	683b      	ldr	r3, [r7, #0]
 801e7f0:	689b      	ldr	r3, [r3, #8]
 801e7f2:	697a      	ldr	r2, [r7, #20]
 801e7f4:	4313      	orrs	r3, r2
 801e7f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801e7f8:	687b      	ldr	r3, [r7, #4]
 801e7fa:	4a30      	ldr	r2, [pc, #192]	; (801e8bc <TIM_OC1_SetConfig+0x11c>)
 801e7fc:	4293      	cmp	r3, r2
 801e7fe:	d013      	beq.n	801e828 <TIM_OC1_SetConfig+0x88>
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	4a2f      	ldr	r2, [pc, #188]	; (801e8c0 <TIM_OC1_SetConfig+0x120>)
 801e804:	4293      	cmp	r3, r2
 801e806:	d00f      	beq.n	801e828 <TIM_OC1_SetConfig+0x88>
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	4a2e      	ldr	r2, [pc, #184]	; (801e8c4 <TIM_OC1_SetConfig+0x124>)
 801e80c:	4293      	cmp	r3, r2
 801e80e:	d00b      	beq.n	801e828 <TIM_OC1_SetConfig+0x88>
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	4a2d      	ldr	r2, [pc, #180]	; (801e8c8 <TIM_OC1_SetConfig+0x128>)
 801e814:	4293      	cmp	r3, r2
 801e816:	d007      	beq.n	801e828 <TIM_OC1_SetConfig+0x88>
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	4a2c      	ldr	r2, [pc, #176]	; (801e8cc <TIM_OC1_SetConfig+0x12c>)
 801e81c:	4293      	cmp	r3, r2
 801e81e:	d003      	beq.n	801e828 <TIM_OC1_SetConfig+0x88>
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	4a2b      	ldr	r2, [pc, #172]	; (801e8d0 <TIM_OC1_SetConfig+0x130>)
 801e824:	4293      	cmp	r3, r2
 801e826:	d10c      	bne.n	801e842 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801e828:	697b      	ldr	r3, [r7, #20]
 801e82a:	f023 0308 	bic.w	r3, r3, #8
 801e82e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801e830:	683b      	ldr	r3, [r7, #0]
 801e832:	68db      	ldr	r3, [r3, #12]
 801e834:	697a      	ldr	r2, [r7, #20]
 801e836:	4313      	orrs	r3, r2
 801e838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801e83a:	697b      	ldr	r3, [r7, #20]
 801e83c:	f023 0304 	bic.w	r3, r3, #4
 801e840:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e842:	687b      	ldr	r3, [r7, #4]
 801e844:	4a1d      	ldr	r2, [pc, #116]	; (801e8bc <TIM_OC1_SetConfig+0x11c>)
 801e846:	4293      	cmp	r3, r2
 801e848:	d013      	beq.n	801e872 <TIM_OC1_SetConfig+0xd2>
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	4a1c      	ldr	r2, [pc, #112]	; (801e8c0 <TIM_OC1_SetConfig+0x120>)
 801e84e:	4293      	cmp	r3, r2
 801e850:	d00f      	beq.n	801e872 <TIM_OC1_SetConfig+0xd2>
 801e852:	687b      	ldr	r3, [r7, #4]
 801e854:	4a1b      	ldr	r2, [pc, #108]	; (801e8c4 <TIM_OC1_SetConfig+0x124>)
 801e856:	4293      	cmp	r3, r2
 801e858:	d00b      	beq.n	801e872 <TIM_OC1_SetConfig+0xd2>
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	4a1a      	ldr	r2, [pc, #104]	; (801e8c8 <TIM_OC1_SetConfig+0x128>)
 801e85e:	4293      	cmp	r3, r2
 801e860:	d007      	beq.n	801e872 <TIM_OC1_SetConfig+0xd2>
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	4a19      	ldr	r2, [pc, #100]	; (801e8cc <TIM_OC1_SetConfig+0x12c>)
 801e866:	4293      	cmp	r3, r2
 801e868:	d003      	beq.n	801e872 <TIM_OC1_SetConfig+0xd2>
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	4a18      	ldr	r2, [pc, #96]	; (801e8d0 <TIM_OC1_SetConfig+0x130>)
 801e86e:	4293      	cmp	r3, r2
 801e870:	d111      	bne.n	801e896 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801e872:	693b      	ldr	r3, [r7, #16]
 801e874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801e87a:	693b      	ldr	r3, [r7, #16]
 801e87c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801e880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801e882:	683b      	ldr	r3, [r7, #0]
 801e884:	695b      	ldr	r3, [r3, #20]
 801e886:	693a      	ldr	r2, [r7, #16]
 801e888:	4313      	orrs	r3, r2
 801e88a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801e88c:	683b      	ldr	r3, [r7, #0]
 801e88e:	699b      	ldr	r3, [r3, #24]
 801e890:	693a      	ldr	r2, [r7, #16]
 801e892:	4313      	orrs	r3, r2
 801e894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	693a      	ldr	r2, [r7, #16]
 801e89a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	68fa      	ldr	r2, [r7, #12]
 801e8a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801e8a2:	683b      	ldr	r3, [r7, #0]
 801e8a4:	685a      	ldr	r2, [r3, #4]
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	697a      	ldr	r2, [r7, #20]
 801e8ae:	621a      	str	r2, [r3, #32]
}
 801e8b0:	bf00      	nop
 801e8b2:	371c      	adds	r7, #28
 801e8b4:	46bd      	mov	sp, r7
 801e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ba:	4770      	bx	lr
 801e8bc:	40012c00 	.word	0x40012c00
 801e8c0:	40013400 	.word	0x40013400
 801e8c4:	40014000 	.word	0x40014000
 801e8c8:	40014400 	.word	0x40014400
 801e8cc:	40014800 	.word	0x40014800
 801e8d0:	40015000 	.word	0x40015000

0801e8d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e8d4:	b480      	push	{r7}
 801e8d6:	b087      	sub	sp, #28
 801e8d8:	af00      	add	r7, sp, #0
 801e8da:	6078      	str	r0, [r7, #4]
 801e8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	6a1b      	ldr	r3, [r3, #32]
 801e8e2:	f023 0210 	bic.w	r2, r3, #16
 801e8e6:	687b      	ldr	r3, [r7, #4]
 801e8e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	6a1b      	ldr	r3, [r3, #32]
 801e8ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	685b      	ldr	r3, [r3, #4]
 801e8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	699b      	ldr	r3, [r3, #24]
 801e8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801e8fc:	68fb      	ldr	r3, [r7, #12]
 801e8fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801e902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801e906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801e908:	68fb      	ldr	r3, [r7, #12]
 801e90a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e90e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801e910:	683b      	ldr	r3, [r7, #0]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	021b      	lsls	r3, r3, #8
 801e916:	68fa      	ldr	r2, [r7, #12]
 801e918:	4313      	orrs	r3, r2
 801e91a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801e91c:	697b      	ldr	r3, [r7, #20]
 801e91e:	f023 0320 	bic.w	r3, r3, #32
 801e922:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801e924:	683b      	ldr	r3, [r7, #0]
 801e926:	689b      	ldr	r3, [r3, #8]
 801e928:	011b      	lsls	r3, r3, #4
 801e92a:	697a      	ldr	r2, [r7, #20]
 801e92c:	4313      	orrs	r3, r2
 801e92e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	4a2c      	ldr	r2, [pc, #176]	; (801e9e4 <TIM_OC2_SetConfig+0x110>)
 801e934:	4293      	cmp	r3, r2
 801e936:	d007      	beq.n	801e948 <TIM_OC2_SetConfig+0x74>
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	4a2b      	ldr	r2, [pc, #172]	; (801e9e8 <TIM_OC2_SetConfig+0x114>)
 801e93c:	4293      	cmp	r3, r2
 801e93e:	d003      	beq.n	801e948 <TIM_OC2_SetConfig+0x74>
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	4a2a      	ldr	r2, [pc, #168]	; (801e9ec <TIM_OC2_SetConfig+0x118>)
 801e944:	4293      	cmp	r3, r2
 801e946:	d10d      	bne.n	801e964 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801e948:	697b      	ldr	r3, [r7, #20]
 801e94a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e94e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801e950:	683b      	ldr	r3, [r7, #0]
 801e952:	68db      	ldr	r3, [r3, #12]
 801e954:	011b      	lsls	r3, r3, #4
 801e956:	697a      	ldr	r2, [r7, #20]
 801e958:	4313      	orrs	r3, r2
 801e95a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801e95c:	697b      	ldr	r3, [r7, #20]
 801e95e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e962:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	4a1f      	ldr	r2, [pc, #124]	; (801e9e4 <TIM_OC2_SetConfig+0x110>)
 801e968:	4293      	cmp	r3, r2
 801e96a:	d013      	beq.n	801e994 <TIM_OC2_SetConfig+0xc0>
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	4a1e      	ldr	r2, [pc, #120]	; (801e9e8 <TIM_OC2_SetConfig+0x114>)
 801e970:	4293      	cmp	r3, r2
 801e972:	d00f      	beq.n	801e994 <TIM_OC2_SetConfig+0xc0>
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	4a1e      	ldr	r2, [pc, #120]	; (801e9f0 <TIM_OC2_SetConfig+0x11c>)
 801e978:	4293      	cmp	r3, r2
 801e97a:	d00b      	beq.n	801e994 <TIM_OC2_SetConfig+0xc0>
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	4a1d      	ldr	r2, [pc, #116]	; (801e9f4 <TIM_OC2_SetConfig+0x120>)
 801e980:	4293      	cmp	r3, r2
 801e982:	d007      	beq.n	801e994 <TIM_OC2_SetConfig+0xc0>
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	4a1c      	ldr	r2, [pc, #112]	; (801e9f8 <TIM_OC2_SetConfig+0x124>)
 801e988:	4293      	cmp	r3, r2
 801e98a:	d003      	beq.n	801e994 <TIM_OC2_SetConfig+0xc0>
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	4a17      	ldr	r2, [pc, #92]	; (801e9ec <TIM_OC2_SetConfig+0x118>)
 801e990:	4293      	cmp	r3, r2
 801e992:	d113      	bne.n	801e9bc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801e994:	693b      	ldr	r3, [r7, #16]
 801e996:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801e99a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801e99c:	693b      	ldr	r3, [r7, #16]
 801e99e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801e9a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801e9a4:	683b      	ldr	r3, [r7, #0]
 801e9a6:	695b      	ldr	r3, [r3, #20]
 801e9a8:	009b      	lsls	r3, r3, #2
 801e9aa:	693a      	ldr	r2, [r7, #16]
 801e9ac:	4313      	orrs	r3, r2
 801e9ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801e9b0:	683b      	ldr	r3, [r7, #0]
 801e9b2:	699b      	ldr	r3, [r3, #24]
 801e9b4:	009b      	lsls	r3, r3, #2
 801e9b6:	693a      	ldr	r2, [r7, #16]
 801e9b8:	4313      	orrs	r3, r2
 801e9ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801e9bc:	687b      	ldr	r3, [r7, #4]
 801e9be:	693a      	ldr	r2, [r7, #16]
 801e9c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	68fa      	ldr	r2, [r7, #12]
 801e9c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801e9c8:	683b      	ldr	r3, [r7, #0]
 801e9ca:	685a      	ldr	r2, [r3, #4]
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	697a      	ldr	r2, [r7, #20]
 801e9d4:	621a      	str	r2, [r3, #32]
}
 801e9d6:	bf00      	nop
 801e9d8:	371c      	adds	r7, #28
 801e9da:	46bd      	mov	sp, r7
 801e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9e0:	4770      	bx	lr
 801e9e2:	bf00      	nop
 801e9e4:	40012c00 	.word	0x40012c00
 801e9e8:	40013400 	.word	0x40013400
 801e9ec:	40015000 	.word	0x40015000
 801e9f0:	40014000 	.word	0x40014000
 801e9f4:	40014400 	.word	0x40014400
 801e9f8:	40014800 	.word	0x40014800

0801e9fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801e9fc:	b480      	push	{r7}
 801e9fe:	b087      	sub	sp, #28
 801ea00:	af00      	add	r7, sp, #0
 801ea02:	6078      	str	r0, [r7, #4]
 801ea04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	6a1b      	ldr	r3, [r3, #32]
 801ea0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ea12:	687b      	ldr	r3, [r7, #4]
 801ea14:	6a1b      	ldr	r3, [r3, #32]
 801ea16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	685b      	ldr	r3, [r3, #4]
 801ea1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	69db      	ldr	r3, [r3, #28]
 801ea22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ea2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ea2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ea30:	68fb      	ldr	r3, [r7, #12]
 801ea32:	f023 0303 	bic.w	r3, r3, #3
 801ea36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ea38:	683b      	ldr	r3, [r7, #0]
 801ea3a:	681b      	ldr	r3, [r3, #0]
 801ea3c:	68fa      	ldr	r2, [r7, #12]
 801ea3e:	4313      	orrs	r3, r2
 801ea40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ea42:	697b      	ldr	r3, [r7, #20]
 801ea44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ea48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ea4a:	683b      	ldr	r3, [r7, #0]
 801ea4c:	689b      	ldr	r3, [r3, #8]
 801ea4e:	021b      	lsls	r3, r3, #8
 801ea50:	697a      	ldr	r2, [r7, #20]
 801ea52:	4313      	orrs	r3, r2
 801ea54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	4a2b      	ldr	r2, [pc, #172]	; (801eb08 <TIM_OC3_SetConfig+0x10c>)
 801ea5a:	4293      	cmp	r3, r2
 801ea5c:	d007      	beq.n	801ea6e <TIM_OC3_SetConfig+0x72>
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	4a2a      	ldr	r2, [pc, #168]	; (801eb0c <TIM_OC3_SetConfig+0x110>)
 801ea62:	4293      	cmp	r3, r2
 801ea64:	d003      	beq.n	801ea6e <TIM_OC3_SetConfig+0x72>
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	4a29      	ldr	r2, [pc, #164]	; (801eb10 <TIM_OC3_SetConfig+0x114>)
 801ea6a:	4293      	cmp	r3, r2
 801ea6c:	d10d      	bne.n	801ea8a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ea6e:	697b      	ldr	r3, [r7, #20]
 801ea70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ea74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ea76:	683b      	ldr	r3, [r7, #0]
 801ea78:	68db      	ldr	r3, [r3, #12]
 801ea7a:	021b      	lsls	r3, r3, #8
 801ea7c:	697a      	ldr	r2, [r7, #20]
 801ea7e:	4313      	orrs	r3, r2
 801ea80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ea82:	697b      	ldr	r3, [r7, #20]
 801ea84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ea88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	4a1e      	ldr	r2, [pc, #120]	; (801eb08 <TIM_OC3_SetConfig+0x10c>)
 801ea8e:	4293      	cmp	r3, r2
 801ea90:	d013      	beq.n	801eaba <TIM_OC3_SetConfig+0xbe>
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	4a1d      	ldr	r2, [pc, #116]	; (801eb0c <TIM_OC3_SetConfig+0x110>)
 801ea96:	4293      	cmp	r3, r2
 801ea98:	d00f      	beq.n	801eaba <TIM_OC3_SetConfig+0xbe>
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	4a1d      	ldr	r2, [pc, #116]	; (801eb14 <TIM_OC3_SetConfig+0x118>)
 801ea9e:	4293      	cmp	r3, r2
 801eaa0:	d00b      	beq.n	801eaba <TIM_OC3_SetConfig+0xbe>
 801eaa2:	687b      	ldr	r3, [r7, #4]
 801eaa4:	4a1c      	ldr	r2, [pc, #112]	; (801eb18 <TIM_OC3_SetConfig+0x11c>)
 801eaa6:	4293      	cmp	r3, r2
 801eaa8:	d007      	beq.n	801eaba <TIM_OC3_SetConfig+0xbe>
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	4a1b      	ldr	r2, [pc, #108]	; (801eb1c <TIM_OC3_SetConfig+0x120>)
 801eaae:	4293      	cmp	r3, r2
 801eab0:	d003      	beq.n	801eaba <TIM_OC3_SetConfig+0xbe>
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	4a16      	ldr	r2, [pc, #88]	; (801eb10 <TIM_OC3_SetConfig+0x114>)
 801eab6:	4293      	cmp	r3, r2
 801eab8:	d113      	bne.n	801eae2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801eaba:	693b      	ldr	r3, [r7, #16]
 801eabc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801eac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801eac2:	693b      	ldr	r3, [r7, #16]
 801eac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801eac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801eaca:	683b      	ldr	r3, [r7, #0]
 801eacc:	695b      	ldr	r3, [r3, #20]
 801eace:	011b      	lsls	r3, r3, #4
 801ead0:	693a      	ldr	r2, [r7, #16]
 801ead2:	4313      	orrs	r3, r2
 801ead4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ead6:	683b      	ldr	r3, [r7, #0]
 801ead8:	699b      	ldr	r3, [r3, #24]
 801eada:	011b      	lsls	r3, r3, #4
 801eadc:	693a      	ldr	r2, [r7, #16]
 801eade:	4313      	orrs	r3, r2
 801eae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eae2:	687b      	ldr	r3, [r7, #4]
 801eae4:	693a      	ldr	r2, [r7, #16]
 801eae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	68fa      	ldr	r2, [r7, #12]
 801eaec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801eaee:	683b      	ldr	r3, [r7, #0]
 801eaf0:	685a      	ldr	r2, [r3, #4]
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	697a      	ldr	r2, [r7, #20]
 801eafa:	621a      	str	r2, [r3, #32]
}
 801eafc:	bf00      	nop
 801eafe:	371c      	adds	r7, #28
 801eb00:	46bd      	mov	sp, r7
 801eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb06:	4770      	bx	lr
 801eb08:	40012c00 	.word	0x40012c00
 801eb0c:	40013400 	.word	0x40013400
 801eb10:	40015000 	.word	0x40015000
 801eb14:	40014000 	.word	0x40014000
 801eb18:	40014400 	.word	0x40014400
 801eb1c:	40014800 	.word	0x40014800

0801eb20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801eb20:	b480      	push	{r7}
 801eb22:	b087      	sub	sp, #28
 801eb24:	af00      	add	r7, sp, #0
 801eb26:	6078      	str	r0, [r7, #4]
 801eb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801eb2a:	687b      	ldr	r3, [r7, #4]
 801eb2c:	6a1b      	ldr	r3, [r3, #32]
 801eb2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	6a1b      	ldr	r3, [r3, #32]
 801eb3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	685b      	ldr	r3, [r3, #4]
 801eb40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801eb42:	687b      	ldr	r3, [r7, #4]
 801eb44:	69db      	ldr	r3, [r3, #28]
 801eb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801eb48:	68fb      	ldr	r3, [r7, #12]
 801eb4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801eb4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801eb52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801eb5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801eb5c:	683b      	ldr	r3, [r7, #0]
 801eb5e:	681b      	ldr	r3, [r3, #0]
 801eb60:	021b      	lsls	r3, r3, #8
 801eb62:	68fa      	ldr	r2, [r7, #12]
 801eb64:	4313      	orrs	r3, r2
 801eb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801eb68:	697b      	ldr	r3, [r7, #20]
 801eb6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801eb6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801eb70:	683b      	ldr	r3, [r7, #0]
 801eb72:	689b      	ldr	r3, [r3, #8]
 801eb74:	031b      	lsls	r3, r3, #12
 801eb76:	697a      	ldr	r2, [r7, #20]
 801eb78:	4313      	orrs	r3, r2
 801eb7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801eb7c:	687b      	ldr	r3, [r7, #4]
 801eb7e:	4a2c      	ldr	r2, [pc, #176]	; (801ec30 <TIM_OC4_SetConfig+0x110>)
 801eb80:	4293      	cmp	r3, r2
 801eb82:	d007      	beq.n	801eb94 <TIM_OC4_SetConfig+0x74>
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	4a2b      	ldr	r2, [pc, #172]	; (801ec34 <TIM_OC4_SetConfig+0x114>)
 801eb88:	4293      	cmp	r3, r2
 801eb8a:	d003      	beq.n	801eb94 <TIM_OC4_SetConfig+0x74>
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	4a2a      	ldr	r2, [pc, #168]	; (801ec38 <TIM_OC4_SetConfig+0x118>)
 801eb90:	4293      	cmp	r3, r2
 801eb92:	d10d      	bne.n	801ebb0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801eb94:	697b      	ldr	r3, [r7, #20]
 801eb96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801eb9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801eb9c:	683b      	ldr	r3, [r7, #0]
 801eb9e:	68db      	ldr	r3, [r3, #12]
 801eba0:	031b      	lsls	r3, r3, #12
 801eba2:	697a      	ldr	r2, [r7, #20]
 801eba4:	4313      	orrs	r3, r2
 801eba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801eba8:	697b      	ldr	r3, [r7, #20]
 801ebaa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ebae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	4a1f      	ldr	r2, [pc, #124]	; (801ec30 <TIM_OC4_SetConfig+0x110>)
 801ebb4:	4293      	cmp	r3, r2
 801ebb6:	d013      	beq.n	801ebe0 <TIM_OC4_SetConfig+0xc0>
 801ebb8:	687b      	ldr	r3, [r7, #4]
 801ebba:	4a1e      	ldr	r2, [pc, #120]	; (801ec34 <TIM_OC4_SetConfig+0x114>)
 801ebbc:	4293      	cmp	r3, r2
 801ebbe:	d00f      	beq.n	801ebe0 <TIM_OC4_SetConfig+0xc0>
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	4a1e      	ldr	r2, [pc, #120]	; (801ec3c <TIM_OC4_SetConfig+0x11c>)
 801ebc4:	4293      	cmp	r3, r2
 801ebc6:	d00b      	beq.n	801ebe0 <TIM_OC4_SetConfig+0xc0>
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	4a1d      	ldr	r2, [pc, #116]	; (801ec40 <TIM_OC4_SetConfig+0x120>)
 801ebcc:	4293      	cmp	r3, r2
 801ebce:	d007      	beq.n	801ebe0 <TIM_OC4_SetConfig+0xc0>
 801ebd0:	687b      	ldr	r3, [r7, #4]
 801ebd2:	4a1c      	ldr	r2, [pc, #112]	; (801ec44 <TIM_OC4_SetConfig+0x124>)
 801ebd4:	4293      	cmp	r3, r2
 801ebd6:	d003      	beq.n	801ebe0 <TIM_OC4_SetConfig+0xc0>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	4a17      	ldr	r2, [pc, #92]	; (801ec38 <TIM_OC4_SetConfig+0x118>)
 801ebdc:	4293      	cmp	r3, r2
 801ebde:	d113      	bne.n	801ec08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ebe0:	693b      	ldr	r3, [r7, #16]
 801ebe2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ebe6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801ebe8:	693b      	ldr	r3, [r7, #16]
 801ebea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ebee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801ebf0:	683b      	ldr	r3, [r7, #0]
 801ebf2:	695b      	ldr	r3, [r3, #20]
 801ebf4:	019b      	lsls	r3, r3, #6
 801ebf6:	693a      	ldr	r2, [r7, #16]
 801ebf8:	4313      	orrs	r3, r2
 801ebfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801ebfc:	683b      	ldr	r3, [r7, #0]
 801ebfe:	699b      	ldr	r3, [r3, #24]
 801ec00:	019b      	lsls	r3, r3, #6
 801ec02:	693a      	ldr	r2, [r7, #16]
 801ec04:	4313      	orrs	r3, r2
 801ec06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	693a      	ldr	r2, [r7, #16]
 801ec0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ec0e:	687b      	ldr	r3, [r7, #4]
 801ec10:	68fa      	ldr	r2, [r7, #12]
 801ec12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ec14:	683b      	ldr	r3, [r7, #0]
 801ec16:	685a      	ldr	r2, [r3, #4]
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	697a      	ldr	r2, [r7, #20]
 801ec20:	621a      	str	r2, [r3, #32]
}
 801ec22:	bf00      	nop
 801ec24:	371c      	adds	r7, #28
 801ec26:	46bd      	mov	sp, r7
 801ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec2c:	4770      	bx	lr
 801ec2e:	bf00      	nop
 801ec30:	40012c00 	.word	0x40012c00
 801ec34:	40013400 	.word	0x40013400
 801ec38:	40015000 	.word	0x40015000
 801ec3c:	40014000 	.word	0x40014000
 801ec40:	40014400 	.word	0x40014400
 801ec44:	40014800 	.word	0x40014800

0801ec48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801ec48:	b480      	push	{r7}
 801ec4a:	b087      	sub	sp, #28
 801ec4c:	af00      	add	r7, sp, #0
 801ec4e:	6078      	str	r0, [r7, #4]
 801ec50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801ec52:	687b      	ldr	r3, [r7, #4]
 801ec54:	6a1b      	ldr	r3, [r3, #32]
 801ec56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ec5a:	687b      	ldr	r3, [r7, #4]
 801ec5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ec5e:	687b      	ldr	r3, [r7, #4]
 801ec60:	6a1b      	ldr	r3, [r3, #32]
 801ec62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	685b      	ldr	r3, [r3, #4]
 801ec68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ec6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ec70:	68fb      	ldr	r3, [r7, #12]
 801ec72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ec76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ec7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ec7c:	683b      	ldr	r3, [r7, #0]
 801ec7e:	681b      	ldr	r3, [r3, #0]
 801ec80:	68fa      	ldr	r2, [r7, #12]
 801ec82:	4313      	orrs	r3, r2
 801ec84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801ec86:	693b      	ldr	r3, [r7, #16]
 801ec88:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ec8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801ec8e:	683b      	ldr	r3, [r7, #0]
 801ec90:	689b      	ldr	r3, [r3, #8]
 801ec92:	041b      	lsls	r3, r3, #16
 801ec94:	693a      	ldr	r2, [r7, #16]
 801ec96:	4313      	orrs	r3, r2
 801ec98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec9a:	687b      	ldr	r3, [r7, #4]
 801ec9c:	4a19      	ldr	r2, [pc, #100]	; (801ed04 <TIM_OC5_SetConfig+0xbc>)
 801ec9e:	4293      	cmp	r3, r2
 801eca0:	d013      	beq.n	801ecca <TIM_OC5_SetConfig+0x82>
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	4a18      	ldr	r2, [pc, #96]	; (801ed08 <TIM_OC5_SetConfig+0xc0>)
 801eca6:	4293      	cmp	r3, r2
 801eca8:	d00f      	beq.n	801ecca <TIM_OC5_SetConfig+0x82>
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	4a17      	ldr	r2, [pc, #92]	; (801ed0c <TIM_OC5_SetConfig+0xc4>)
 801ecae:	4293      	cmp	r3, r2
 801ecb0:	d00b      	beq.n	801ecca <TIM_OC5_SetConfig+0x82>
 801ecb2:	687b      	ldr	r3, [r7, #4]
 801ecb4:	4a16      	ldr	r2, [pc, #88]	; (801ed10 <TIM_OC5_SetConfig+0xc8>)
 801ecb6:	4293      	cmp	r3, r2
 801ecb8:	d007      	beq.n	801ecca <TIM_OC5_SetConfig+0x82>
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	4a15      	ldr	r2, [pc, #84]	; (801ed14 <TIM_OC5_SetConfig+0xcc>)
 801ecbe:	4293      	cmp	r3, r2
 801ecc0:	d003      	beq.n	801ecca <TIM_OC5_SetConfig+0x82>
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	4a14      	ldr	r2, [pc, #80]	; (801ed18 <TIM_OC5_SetConfig+0xd0>)
 801ecc6:	4293      	cmp	r3, r2
 801ecc8:	d109      	bne.n	801ecde <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ecca:	697b      	ldr	r3, [r7, #20]
 801eccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ecd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	695b      	ldr	r3, [r3, #20]
 801ecd6:	021b      	lsls	r3, r3, #8
 801ecd8:	697a      	ldr	r2, [r7, #20]
 801ecda:	4313      	orrs	r3, r2
 801ecdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	697a      	ldr	r2, [r7, #20]
 801ece2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ece4:	687b      	ldr	r3, [r7, #4]
 801ece6:	68fa      	ldr	r2, [r7, #12]
 801ece8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ecea:	683b      	ldr	r3, [r7, #0]
 801ecec:	685a      	ldr	r2, [r3, #4]
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	693a      	ldr	r2, [r7, #16]
 801ecf6:	621a      	str	r2, [r3, #32]
}
 801ecf8:	bf00      	nop
 801ecfa:	371c      	adds	r7, #28
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed02:	4770      	bx	lr
 801ed04:	40012c00 	.word	0x40012c00
 801ed08:	40013400 	.word	0x40013400
 801ed0c:	40014000 	.word	0x40014000
 801ed10:	40014400 	.word	0x40014400
 801ed14:	40014800 	.word	0x40014800
 801ed18:	40015000 	.word	0x40015000

0801ed1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801ed1c:	b480      	push	{r7}
 801ed1e:	b087      	sub	sp, #28
 801ed20:	af00      	add	r7, sp, #0
 801ed22:	6078      	str	r0, [r7, #4]
 801ed24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	6a1b      	ldr	r3, [r3, #32]
 801ed2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	6a1b      	ldr	r3, [r3, #32]
 801ed36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	685b      	ldr	r3, [r3, #4]
 801ed3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ed42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801ed44:	68fb      	ldr	r3, [r7, #12]
 801ed46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ed4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ed4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ed50:	683b      	ldr	r3, [r7, #0]
 801ed52:	681b      	ldr	r3, [r3, #0]
 801ed54:	021b      	lsls	r3, r3, #8
 801ed56:	68fa      	ldr	r2, [r7, #12]
 801ed58:	4313      	orrs	r3, r2
 801ed5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801ed5c:	693b      	ldr	r3, [r7, #16]
 801ed5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ed62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801ed64:	683b      	ldr	r3, [r7, #0]
 801ed66:	689b      	ldr	r3, [r3, #8]
 801ed68:	051b      	lsls	r3, r3, #20
 801ed6a:	693a      	ldr	r2, [r7, #16]
 801ed6c:	4313      	orrs	r3, r2
 801ed6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	4a1a      	ldr	r2, [pc, #104]	; (801eddc <TIM_OC6_SetConfig+0xc0>)
 801ed74:	4293      	cmp	r3, r2
 801ed76:	d013      	beq.n	801eda0 <TIM_OC6_SetConfig+0x84>
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	4a19      	ldr	r2, [pc, #100]	; (801ede0 <TIM_OC6_SetConfig+0xc4>)
 801ed7c:	4293      	cmp	r3, r2
 801ed7e:	d00f      	beq.n	801eda0 <TIM_OC6_SetConfig+0x84>
 801ed80:	687b      	ldr	r3, [r7, #4]
 801ed82:	4a18      	ldr	r2, [pc, #96]	; (801ede4 <TIM_OC6_SetConfig+0xc8>)
 801ed84:	4293      	cmp	r3, r2
 801ed86:	d00b      	beq.n	801eda0 <TIM_OC6_SetConfig+0x84>
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	4a17      	ldr	r2, [pc, #92]	; (801ede8 <TIM_OC6_SetConfig+0xcc>)
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	d007      	beq.n	801eda0 <TIM_OC6_SetConfig+0x84>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	4a16      	ldr	r2, [pc, #88]	; (801edec <TIM_OC6_SetConfig+0xd0>)
 801ed94:	4293      	cmp	r3, r2
 801ed96:	d003      	beq.n	801eda0 <TIM_OC6_SetConfig+0x84>
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	4a15      	ldr	r2, [pc, #84]	; (801edf0 <TIM_OC6_SetConfig+0xd4>)
 801ed9c:	4293      	cmp	r3, r2
 801ed9e:	d109      	bne.n	801edb4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801eda0:	697b      	ldr	r3, [r7, #20]
 801eda2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801eda6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801eda8:	683b      	ldr	r3, [r7, #0]
 801edaa:	695b      	ldr	r3, [r3, #20]
 801edac:	029b      	lsls	r3, r3, #10
 801edae:	697a      	ldr	r2, [r7, #20]
 801edb0:	4313      	orrs	r3, r2
 801edb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	697a      	ldr	r2, [r7, #20]
 801edb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801edba:	687b      	ldr	r3, [r7, #4]
 801edbc:	68fa      	ldr	r2, [r7, #12]
 801edbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801edc0:	683b      	ldr	r3, [r7, #0]
 801edc2:	685a      	ldr	r2, [r3, #4]
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	693a      	ldr	r2, [r7, #16]
 801edcc:	621a      	str	r2, [r3, #32]
}
 801edce:	bf00      	nop
 801edd0:	371c      	adds	r7, #28
 801edd2:	46bd      	mov	sp, r7
 801edd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edd8:	4770      	bx	lr
 801edda:	bf00      	nop
 801eddc:	40012c00 	.word	0x40012c00
 801ede0:	40013400 	.word	0x40013400
 801ede4:	40014000 	.word	0x40014000
 801ede8:	40014400 	.word	0x40014400
 801edec:	40014800 	.word	0x40014800
 801edf0:	40015000 	.word	0x40015000

0801edf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801edf4:	b480      	push	{r7}
 801edf6:	b087      	sub	sp, #28
 801edf8:	af00      	add	r7, sp, #0
 801edfa:	60f8      	str	r0, [r7, #12]
 801edfc:	60b9      	str	r1, [r7, #8]
 801edfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801ee00:	68bb      	ldr	r3, [r7, #8]
 801ee02:	f003 031f 	and.w	r3, r3, #31
 801ee06:	2201      	movs	r2, #1
 801ee08:	fa02 f303 	lsl.w	r3, r2, r3
 801ee0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801ee0e:	68fb      	ldr	r3, [r7, #12]
 801ee10:	6a1a      	ldr	r2, [r3, #32]
 801ee12:	697b      	ldr	r3, [r7, #20]
 801ee14:	43db      	mvns	r3, r3
 801ee16:	401a      	ands	r2, r3
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801ee1c:	68fb      	ldr	r3, [r7, #12]
 801ee1e:	6a1a      	ldr	r2, [r3, #32]
 801ee20:	68bb      	ldr	r3, [r7, #8]
 801ee22:	f003 031f 	and.w	r3, r3, #31
 801ee26:	6879      	ldr	r1, [r7, #4]
 801ee28:	fa01 f303 	lsl.w	r3, r1, r3
 801ee2c:	431a      	orrs	r2, r3
 801ee2e:	68fb      	ldr	r3, [r7, #12]
 801ee30:	621a      	str	r2, [r3, #32]
}
 801ee32:	bf00      	nop
 801ee34:	371c      	adds	r7, #28
 801ee36:	46bd      	mov	sp, r7
 801ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee3c:	4770      	bx	lr
	...

0801ee40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801ee40:	b480      	push	{r7}
 801ee42:	b085      	sub	sp, #20
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	6078      	str	r0, [r7, #4]
 801ee48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ee50:	2b01      	cmp	r3, #1
 801ee52:	d101      	bne.n	801ee58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801ee54:	2302      	movs	r3, #2
 801ee56:	e06f      	b.n	801ef38 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801ee58:	687b      	ldr	r3, [r7, #4]
 801ee5a:	2201      	movs	r2, #1
 801ee5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	2202      	movs	r2, #2
 801ee64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	685b      	ldr	r3, [r3, #4]
 801ee6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	689b      	ldr	r3, [r3, #8]
 801ee76:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801ee78:	687b      	ldr	r3, [r7, #4]
 801ee7a:	681b      	ldr	r3, [r3, #0]
 801ee7c:	4a31      	ldr	r2, [pc, #196]	; (801ef44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801ee7e:	4293      	cmp	r3, r2
 801ee80:	d009      	beq.n	801ee96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	4a30      	ldr	r2, [pc, #192]	; (801ef48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801ee88:	4293      	cmp	r3, r2
 801ee8a:	d004      	beq.n	801ee96 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	681b      	ldr	r3, [r3, #0]
 801ee90:	4a2e      	ldr	r2, [pc, #184]	; (801ef4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801ee92:	4293      	cmp	r3, r2
 801ee94:	d108      	bne.n	801eea8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801ee96:	68fb      	ldr	r3, [r7, #12]
 801ee98:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801ee9c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801ee9e:	683b      	ldr	r3, [r7, #0]
 801eea0:	685b      	ldr	r3, [r3, #4]
 801eea2:	68fa      	ldr	r2, [r7, #12]
 801eea4:	4313      	orrs	r3, r2
 801eea6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801eeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801eeb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801eeb4:	683b      	ldr	r3, [r7, #0]
 801eeb6:	681b      	ldr	r3, [r3, #0]
 801eeb8:	68fa      	ldr	r2, [r7, #12]
 801eeba:	4313      	orrs	r3, r2
 801eebc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	681b      	ldr	r3, [r3, #0]
 801eec2:	68fa      	ldr	r2, [r7, #12]
 801eec4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	4a1e      	ldr	r2, [pc, #120]	; (801ef44 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801eecc:	4293      	cmp	r3, r2
 801eece:	d01d      	beq.n	801ef0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	681b      	ldr	r3, [r3, #0]
 801eed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eed8:	d018      	beq.n	801ef0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801eeda:	687b      	ldr	r3, [r7, #4]
 801eedc:	681b      	ldr	r3, [r3, #0]
 801eede:	4a1c      	ldr	r2, [pc, #112]	; (801ef50 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801eee0:	4293      	cmp	r3, r2
 801eee2:	d013      	beq.n	801ef0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	681b      	ldr	r3, [r3, #0]
 801eee8:	4a1a      	ldr	r2, [pc, #104]	; (801ef54 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801eeea:	4293      	cmp	r3, r2
 801eeec:	d00e      	beq.n	801ef0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	4a15      	ldr	r2, [pc, #84]	; (801ef48 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801eef4:	4293      	cmp	r3, r2
 801eef6:	d009      	beq.n	801ef0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	681b      	ldr	r3, [r3, #0]
 801eefc:	4a16      	ldr	r2, [pc, #88]	; (801ef58 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801eefe:	4293      	cmp	r3, r2
 801ef00:	d004      	beq.n	801ef0c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801ef02:	687b      	ldr	r3, [r7, #4]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	4a11      	ldr	r2, [pc, #68]	; (801ef4c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801ef08:	4293      	cmp	r3, r2
 801ef0a:	d10c      	bne.n	801ef26 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801ef0c:	68bb      	ldr	r3, [r7, #8]
 801ef0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ef12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801ef14:	683b      	ldr	r3, [r7, #0]
 801ef16:	689b      	ldr	r3, [r3, #8]
 801ef18:	68ba      	ldr	r2, [r7, #8]
 801ef1a:	4313      	orrs	r3, r2
 801ef1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	68ba      	ldr	r2, [r7, #8]
 801ef24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801ef26:	687b      	ldr	r3, [r7, #4]
 801ef28:	2201      	movs	r2, #1
 801ef2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	2200      	movs	r2, #0
 801ef32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801ef36:	2300      	movs	r3, #0
}
 801ef38:	4618      	mov	r0, r3
 801ef3a:	3714      	adds	r7, #20
 801ef3c:	46bd      	mov	sp, r7
 801ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef42:	4770      	bx	lr
 801ef44:	40012c00 	.word	0x40012c00
 801ef48:	40013400 	.word	0x40013400
 801ef4c:	40015000 	.word	0x40015000
 801ef50:	40000400 	.word	0x40000400
 801ef54:	40000800 	.word	0x40000800
 801ef58:	40014000 	.word	0x40014000

0801ef5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801ef5c:	b480      	push	{r7}
 801ef5e:	b085      	sub	sp, #20
 801ef60:	af00      	add	r7, sp, #0
 801ef62:	6078      	str	r0, [r7, #4]
 801ef64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801ef66:	2300      	movs	r3, #0
 801ef68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801ef70:	2b01      	cmp	r3, #1
 801ef72:	d101      	bne.n	801ef78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801ef74:	2302      	movs	r3, #2
 801ef76:	e096      	b.n	801f0a6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801ef78:	687b      	ldr	r3, [r7, #4]
 801ef7a:	2201      	movs	r2, #1
 801ef7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801ef80:	68fb      	ldr	r3, [r7, #12]
 801ef82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801ef86:	683b      	ldr	r3, [r7, #0]
 801ef88:	68db      	ldr	r3, [r3, #12]
 801ef8a:	4313      	orrs	r3, r2
 801ef8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801ef94:	683b      	ldr	r3, [r7, #0]
 801ef96:	689b      	ldr	r3, [r3, #8]
 801ef98:	4313      	orrs	r3, r2
 801ef9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801ef9c:	68fb      	ldr	r3, [r7, #12]
 801ef9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801efa2:	683b      	ldr	r3, [r7, #0]
 801efa4:	685b      	ldr	r3, [r3, #4]
 801efa6:	4313      	orrs	r3, r2
 801efa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801efaa:	68fb      	ldr	r3, [r7, #12]
 801efac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801efb0:	683b      	ldr	r3, [r7, #0]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	4313      	orrs	r3, r2
 801efb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801efb8:	68fb      	ldr	r3, [r7, #12]
 801efba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801efbe:	683b      	ldr	r3, [r7, #0]
 801efc0:	691b      	ldr	r3, [r3, #16]
 801efc2:	4313      	orrs	r3, r2
 801efc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801efcc:	683b      	ldr	r3, [r7, #0]
 801efce:	695b      	ldr	r3, [r3, #20]
 801efd0:	4313      	orrs	r3, r2
 801efd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801efd4:	68fb      	ldr	r3, [r7, #12]
 801efd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801efda:	683b      	ldr	r3, [r7, #0]
 801efdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801efde:	4313      	orrs	r3, r2
 801efe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801efe2:	68fb      	ldr	r3, [r7, #12]
 801efe4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801efe8:	683b      	ldr	r3, [r7, #0]
 801efea:	699b      	ldr	r3, [r3, #24]
 801efec:	041b      	lsls	r3, r3, #16
 801efee:	4313      	orrs	r3, r2
 801eff0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	4a2f      	ldr	r2, [pc, #188]	; (801f0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801eff8:	4293      	cmp	r3, r2
 801effa:	d009      	beq.n	801f010 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	681b      	ldr	r3, [r3, #0]
 801f000:	4a2d      	ldr	r2, [pc, #180]	; (801f0b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f002:	4293      	cmp	r3, r2
 801f004:	d004      	beq.n	801f010 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f006:	687b      	ldr	r3, [r7, #4]
 801f008:	681b      	ldr	r3, [r3, #0]
 801f00a:	4a2c      	ldr	r2, [pc, #176]	; (801f0bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f00c:	4293      	cmp	r3, r2
 801f00e:	d106      	bne.n	801f01e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801f016:	683b      	ldr	r3, [r7, #0]
 801f018:	69db      	ldr	r3, [r3, #28]
 801f01a:	4313      	orrs	r3, r2
 801f01c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	4a24      	ldr	r2, [pc, #144]	; (801f0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f024:	4293      	cmp	r3, r2
 801f026:	d009      	beq.n	801f03c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	4a22      	ldr	r2, [pc, #136]	; (801f0b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f02e:	4293      	cmp	r3, r2
 801f030:	d004      	beq.n	801f03c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	681b      	ldr	r3, [r3, #0]
 801f036:	4a21      	ldr	r2, [pc, #132]	; (801f0bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f038:	4293      	cmp	r3, r2
 801f03a:	d12b      	bne.n	801f094 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f03c:	68fb      	ldr	r3, [r7, #12]
 801f03e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f042:	683b      	ldr	r3, [r7, #0]
 801f044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f046:	051b      	lsls	r3, r3, #20
 801f048:	4313      	orrs	r3, r2
 801f04a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f04c:	68fb      	ldr	r3, [r7, #12]
 801f04e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f052:	683b      	ldr	r3, [r7, #0]
 801f054:	6a1b      	ldr	r3, [r3, #32]
 801f056:	4313      	orrs	r3, r2
 801f058:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f05a:	68fb      	ldr	r3, [r7, #12]
 801f05c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f060:	683b      	ldr	r3, [r7, #0]
 801f062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f064:	4313      	orrs	r3, r2
 801f066:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	681b      	ldr	r3, [r3, #0]
 801f06c:	4a11      	ldr	r2, [pc, #68]	; (801f0b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f06e:	4293      	cmp	r3, r2
 801f070:	d009      	beq.n	801f086 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f072:	687b      	ldr	r3, [r7, #4]
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	4a10      	ldr	r2, [pc, #64]	; (801f0b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f078:	4293      	cmp	r3, r2
 801f07a:	d004      	beq.n	801f086 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	4a0e      	ldr	r2, [pc, #56]	; (801f0bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f082:	4293      	cmp	r3, r2
 801f084:	d106      	bne.n	801f094 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801f08c:	683b      	ldr	r3, [r7, #0]
 801f08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f090:	4313      	orrs	r3, r2
 801f092:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f094:	687b      	ldr	r3, [r7, #4]
 801f096:	681b      	ldr	r3, [r3, #0]
 801f098:	68fa      	ldr	r2, [r7, #12]
 801f09a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f09c:	687b      	ldr	r3, [r7, #4]
 801f09e:	2200      	movs	r2, #0
 801f0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f0a4:	2300      	movs	r3, #0
}
 801f0a6:	4618      	mov	r0, r3
 801f0a8:	3714      	adds	r7, #20
 801f0aa:	46bd      	mov	sp, r7
 801f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0b0:	4770      	bx	lr
 801f0b2:	bf00      	nop
 801f0b4:	40012c00 	.word	0x40012c00
 801f0b8:	40013400 	.word	0x40013400
 801f0bc:	40015000 	.word	0x40015000

0801f0c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f0c0:	b480      	push	{r7}
 801f0c2:	b083      	sub	sp, #12
 801f0c4:	af00      	add	r7, sp, #0
 801f0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f0c8:	bf00      	nop
 801f0ca:	370c      	adds	r7, #12
 801f0cc:	46bd      	mov	sp, r7
 801f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0d2:	4770      	bx	lr

0801f0d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f0d4:	b480      	push	{r7}
 801f0d6:	b083      	sub	sp, #12
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f0dc:	bf00      	nop
 801f0de:	370c      	adds	r7, #12
 801f0e0:	46bd      	mov	sp, r7
 801f0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0e6:	4770      	bx	lr

0801f0e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f0e8:	b480      	push	{r7}
 801f0ea:	b083      	sub	sp, #12
 801f0ec:	af00      	add	r7, sp, #0
 801f0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f0f0:	bf00      	nop
 801f0f2:	370c      	adds	r7, #12
 801f0f4:	46bd      	mov	sp, r7
 801f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0fa:	4770      	bx	lr

0801f0fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801f0fc:	b480      	push	{r7}
 801f0fe:	b083      	sub	sp, #12
 801f100:	af00      	add	r7, sp, #0
 801f102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801f104:	bf00      	nop
 801f106:	370c      	adds	r7, #12
 801f108:	46bd      	mov	sp, r7
 801f10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f10e:	4770      	bx	lr

0801f110 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f110:	b480      	push	{r7}
 801f112:	b083      	sub	sp, #12
 801f114:	af00      	add	r7, sp, #0
 801f116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f118:	bf00      	nop
 801f11a:	370c      	adds	r7, #12
 801f11c:	46bd      	mov	sp, r7
 801f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f122:	4770      	bx	lr

0801f124 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f124:	b480      	push	{r7}
 801f126:	b083      	sub	sp, #12
 801f128:	af00      	add	r7, sp, #0
 801f12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f12c:	bf00      	nop
 801f12e:	370c      	adds	r7, #12
 801f130:	46bd      	mov	sp, r7
 801f132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f136:	4770      	bx	lr

0801f138 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f138:	b480      	push	{r7}
 801f13a:	b083      	sub	sp, #12
 801f13c:	af00      	add	r7, sp, #0
 801f13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f140:	bf00      	nop
 801f142:	370c      	adds	r7, #12
 801f144:	46bd      	mov	sp, r7
 801f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f14a:	4770      	bx	lr

0801f14c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f14c:	b580      	push	{r7, lr}
 801f14e:	b082      	sub	sp, #8
 801f150:	af00      	add	r7, sp, #0
 801f152:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f154:	687b      	ldr	r3, [r7, #4]
 801f156:	2b00      	cmp	r3, #0
 801f158:	d101      	bne.n	801f15e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f15a:	2301      	movs	r3, #1
 801f15c:	e042      	b.n	801f1e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f164:	2b00      	cmp	r3, #0
 801f166:	d106      	bne.n	801f176 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	2200      	movs	r2, #0
 801f16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f170:	6878      	ldr	r0, [r7, #4]
 801f172:	f7f9 fae3 	bl	801873c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	2224      	movs	r2, #36	; 0x24
 801f17a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	681b      	ldr	r3, [r3, #0]
 801f182:	681a      	ldr	r2, [r3, #0]
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	f022 0201 	bic.w	r2, r2, #1
 801f18c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f18e:	6878      	ldr	r0, [r7, #4]
 801f190:	f000 f8c2 	bl	801f318 <UART_SetConfig>
 801f194:	4603      	mov	r3, r0
 801f196:	2b01      	cmp	r3, #1
 801f198:	d101      	bne.n	801f19e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f19a:	2301      	movs	r3, #1
 801f19c:	e022      	b.n	801f1e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f19e:	687b      	ldr	r3, [r7, #4]
 801f1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d002      	beq.n	801f1ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f1a6:	6878      	ldr	r0, [r7, #4]
 801f1a8:	f000 fbb2 	bl	801f910 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	685a      	ldr	r2, [r3, #4]
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f1ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	689a      	ldr	r2, [r3, #8]
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f1ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f1cc:	687b      	ldr	r3, [r7, #4]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	681a      	ldr	r2, [r3, #0]
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	f042 0201 	orr.w	r2, r2, #1
 801f1da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f1dc:	6878      	ldr	r0, [r7, #4]
 801f1de:	f000 fc39 	bl	801fa54 <UART_CheckIdleState>
 801f1e2:	4603      	mov	r3, r0
}
 801f1e4:	4618      	mov	r0, r3
 801f1e6:	3708      	adds	r7, #8
 801f1e8:	46bd      	mov	sp, r7
 801f1ea:	bd80      	pop	{r7, pc}

0801f1ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f1ec:	b580      	push	{r7, lr}
 801f1ee:	b08a      	sub	sp, #40	; 0x28
 801f1f0:	af02      	add	r7, sp, #8
 801f1f2:	60f8      	str	r0, [r7, #12]
 801f1f4:	60b9      	str	r1, [r7, #8]
 801f1f6:	603b      	str	r3, [r7, #0]
 801f1f8:	4613      	mov	r3, r2
 801f1fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f1fc:	68fb      	ldr	r3, [r7, #12]
 801f1fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f202:	2b20      	cmp	r3, #32
 801f204:	f040 8083 	bne.w	801f30e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f208:	68bb      	ldr	r3, [r7, #8]
 801f20a:	2b00      	cmp	r3, #0
 801f20c:	d002      	beq.n	801f214 <HAL_UART_Transmit+0x28>
 801f20e:	88fb      	ldrh	r3, [r7, #6]
 801f210:	2b00      	cmp	r3, #0
 801f212:	d101      	bne.n	801f218 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f214:	2301      	movs	r3, #1
 801f216:	e07b      	b.n	801f310 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f21e:	2b01      	cmp	r3, #1
 801f220:	d101      	bne.n	801f226 <HAL_UART_Transmit+0x3a>
 801f222:	2302      	movs	r3, #2
 801f224:	e074      	b.n	801f310 <HAL_UART_Transmit+0x124>
 801f226:	68fb      	ldr	r3, [r7, #12]
 801f228:	2201      	movs	r2, #1
 801f22a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f22e:	68fb      	ldr	r3, [r7, #12]
 801f230:	2200      	movs	r2, #0
 801f232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f236:	68fb      	ldr	r3, [r7, #12]
 801f238:	2221      	movs	r2, #33	; 0x21
 801f23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f23e:	f7f9 fb6b 	bl	8018918 <HAL_GetTick>
 801f242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	88fa      	ldrh	r2, [r7, #6]
 801f248:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	88fa      	ldrh	r2, [r7, #6]
 801f250:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f254:	68fb      	ldr	r3, [r7, #12]
 801f256:	689b      	ldr	r3, [r3, #8]
 801f258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f25c:	d108      	bne.n	801f270 <HAL_UART_Transmit+0x84>
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	691b      	ldr	r3, [r3, #16]
 801f262:	2b00      	cmp	r3, #0
 801f264:	d104      	bne.n	801f270 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f266:	2300      	movs	r3, #0
 801f268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f26a:	68bb      	ldr	r3, [r7, #8]
 801f26c:	61bb      	str	r3, [r7, #24]
 801f26e:	e003      	b.n	801f278 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f270:	68bb      	ldr	r3, [r7, #8]
 801f272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f274:	2300      	movs	r3, #0
 801f276:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	2200      	movs	r2, #0
 801f27c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f280:	e02c      	b.n	801f2dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f282:	683b      	ldr	r3, [r7, #0]
 801f284:	9300      	str	r3, [sp, #0]
 801f286:	697b      	ldr	r3, [r7, #20]
 801f288:	2200      	movs	r2, #0
 801f28a:	2180      	movs	r1, #128	; 0x80
 801f28c:	68f8      	ldr	r0, [r7, #12]
 801f28e:	f000 fc2c 	bl	801faea <UART_WaitOnFlagUntilTimeout>
 801f292:	4603      	mov	r3, r0
 801f294:	2b00      	cmp	r3, #0
 801f296:	d001      	beq.n	801f29c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f298:	2303      	movs	r3, #3
 801f29a:	e039      	b.n	801f310 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f29c:	69fb      	ldr	r3, [r7, #28]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d10b      	bne.n	801f2ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f2a2:	69bb      	ldr	r3, [r7, #24]
 801f2a4:	881b      	ldrh	r3, [r3, #0]
 801f2a6:	461a      	mov	r2, r3
 801f2a8:	68fb      	ldr	r3, [r7, #12]
 801f2aa:	681b      	ldr	r3, [r3, #0]
 801f2ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f2b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f2b2:	69bb      	ldr	r3, [r7, #24]
 801f2b4:	3302      	adds	r3, #2
 801f2b6:	61bb      	str	r3, [r7, #24]
 801f2b8:	e007      	b.n	801f2ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f2ba:	69fb      	ldr	r3, [r7, #28]
 801f2bc:	781a      	ldrb	r2, [r3, #0]
 801f2be:	68fb      	ldr	r3, [r7, #12]
 801f2c0:	681b      	ldr	r3, [r3, #0]
 801f2c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f2c4:	69fb      	ldr	r3, [r7, #28]
 801f2c6:	3301      	adds	r3, #1
 801f2c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f2ca:	68fb      	ldr	r3, [r7, #12]
 801f2cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f2d0:	b29b      	uxth	r3, r3
 801f2d2:	3b01      	subs	r3, #1
 801f2d4:	b29a      	uxth	r2, r3
 801f2d6:	68fb      	ldr	r3, [r7, #12]
 801f2d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f2e2:	b29b      	uxth	r3, r3
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	d1cc      	bne.n	801f282 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f2e8:	683b      	ldr	r3, [r7, #0]
 801f2ea:	9300      	str	r3, [sp, #0]
 801f2ec:	697b      	ldr	r3, [r7, #20]
 801f2ee:	2200      	movs	r2, #0
 801f2f0:	2140      	movs	r1, #64	; 0x40
 801f2f2:	68f8      	ldr	r0, [r7, #12]
 801f2f4:	f000 fbf9 	bl	801faea <UART_WaitOnFlagUntilTimeout>
 801f2f8:	4603      	mov	r3, r0
 801f2fa:	2b00      	cmp	r3, #0
 801f2fc:	d001      	beq.n	801f302 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f2fe:	2303      	movs	r3, #3
 801f300:	e006      	b.n	801f310 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	2220      	movs	r2, #32
 801f306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f30a:	2300      	movs	r3, #0
 801f30c:	e000      	b.n	801f310 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f30e:	2302      	movs	r3, #2
  }
}
 801f310:	4618      	mov	r0, r3
 801f312:	3720      	adds	r7, #32
 801f314:	46bd      	mov	sp, r7
 801f316:	bd80      	pop	{r7, pc}

0801f318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f31c:	b08c      	sub	sp, #48	; 0x30
 801f31e:	af00      	add	r7, sp, #0
 801f320:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f322:	2300      	movs	r3, #0
 801f324:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f328:	697b      	ldr	r3, [r7, #20]
 801f32a:	689a      	ldr	r2, [r3, #8]
 801f32c:	697b      	ldr	r3, [r7, #20]
 801f32e:	691b      	ldr	r3, [r3, #16]
 801f330:	431a      	orrs	r2, r3
 801f332:	697b      	ldr	r3, [r7, #20]
 801f334:	695b      	ldr	r3, [r3, #20]
 801f336:	431a      	orrs	r2, r3
 801f338:	697b      	ldr	r3, [r7, #20]
 801f33a:	69db      	ldr	r3, [r3, #28]
 801f33c:	4313      	orrs	r3, r2
 801f33e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f340:	697b      	ldr	r3, [r7, #20]
 801f342:	681b      	ldr	r3, [r3, #0]
 801f344:	681a      	ldr	r2, [r3, #0]
 801f346:	4baa      	ldr	r3, [pc, #680]	; (801f5f0 <UART_SetConfig+0x2d8>)
 801f348:	4013      	ands	r3, r2
 801f34a:	697a      	ldr	r2, [r7, #20]
 801f34c:	6812      	ldr	r2, [r2, #0]
 801f34e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f350:	430b      	orrs	r3, r1
 801f352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f354:	697b      	ldr	r3, [r7, #20]
 801f356:	681b      	ldr	r3, [r3, #0]
 801f358:	685b      	ldr	r3, [r3, #4]
 801f35a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f35e:	697b      	ldr	r3, [r7, #20]
 801f360:	68da      	ldr	r2, [r3, #12]
 801f362:	697b      	ldr	r3, [r7, #20]
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	430a      	orrs	r2, r1
 801f368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f36a:	697b      	ldr	r3, [r7, #20]
 801f36c:	699b      	ldr	r3, [r3, #24]
 801f36e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f370:	697b      	ldr	r3, [r7, #20]
 801f372:	681b      	ldr	r3, [r3, #0]
 801f374:	4a9f      	ldr	r2, [pc, #636]	; (801f5f4 <UART_SetConfig+0x2dc>)
 801f376:	4293      	cmp	r3, r2
 801f378:	d004      	beq.n	801f384 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f37a:	697b      	ldr	r3, [r7, #20]
 801f37c:	6a1b      	ldr	r3, [r3, #32]
 801f37e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f380:	4313      	orrs	r3, r2
 801f382:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f384:	697b      	ldr	r3, [r7, #20]
 801f386:	681b      	ldr	r3, [r3, #0]
 801f388:	689b      	ldr	r3, [r3, #8]
 801f38a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f38e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f392:	697a      	ldr	r2, [r7, #20]
 801f394:	6812      	ldr	r2, [r2, #0]
 801f396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f398:	430b      	orrs	r3, r1
 801f39a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f39c:	697b      	ldr	r3, [r7, #20]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f3a2:	f023 010f 	bic.w	r1, r3, #15
 801f3a6:	697b      	ldr	r3, [r7, #20]
 801f3a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f3aa:	697b      	ldr	r3, [r7, #20]
 801f3ac:	681b      	ldr	r3, [r3, #0]
 801f3ae:	430a      	orrs	r2, r1
 801f3b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f3b2:	697b      	ldr	r3, [r7, #20]
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	4a90      	ldr	r2, [pc, #576]	; (801f5f8 <UART_SetConfig+0x2e0>)
 801f3b8:	4293      	cmp	r3, r2
 801f3ba:	d125      	bne.n	801f408 <UART_SetConfig+0xf0>
 801f3bc:	4b8f      	ldr	r3, [pc, #572]	; (801f5fc <UART_SetConfig+0x2e4>)
 801f3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f3c2:	f003 0303 	and.w	r3, r3, #3
 801f3c6:	2b03      	cmp	r3, #3
 801f3c8:	d81a      	bhi.n	801f400 <UART_SetConfig+0xe8>
 801f3ca:	a201      	add	r2, pc, #4	; (adr r2, 801f3d0 <UART_SetConfig+0xb8>)
 801f3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3d0:	0801f3e1 	.word	0x0801f3e1
 801f3d4:	0801f3f1 	.word	0x0801f3f1
 801f3d8:	0801f3e9 	.word	0x0801f3e9
 801f3dc:	0801f3f9 	.word	0x0801f3f9
 801f3e0:	2301      	movs	r3, #1
 801f3e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3e6:	e116      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f3e8:	2302      	movs	r3, #2
 801f3ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3ee:	e112      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f3f0:	2304      	movs	r3, #4
 801f3f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3f6:	e10e      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f3f8:	2308      	movs	r3, #8
 801f3fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f3fe:	e10a      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f400:	2310      	movs	r3, #16
 801f402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f406:	e106      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f408:	697b      	ldr	r3, [r7, #20]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	4a7c      	ldr	r2, [pc, #496]	; (801f600 <UART_SetConfig+0x2e8>)
 801f40e:	4293      	cmp	r3, r2
 801f410:	d138      	bne.n	801f484 <UART_SetConfig+0x16c>
 801f412:	4b7a      	ldr	r3, [pc, #488]	; (801f5fc <UART_SetConfig+0x2e4>)
 801f414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f418:	f003 030c 	and.w	r3, r3, #12
 801f41c:	2b0c      	cmp	r3, #12
 801f41e:	d82d      	bhi.n	801f47c <UART_SetConfig+0x164>
 801f420:	a201      	add	r2, pc, #4	; (adr r2, 801f428 <UART_SetConfig+0x110>)
 801f422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f426:	bf00      	nop
 801f428:	0801f45d 	.word	0x0801f45d
 801f42c:	0801f47d 	.word	0x0801f47d
 801f430:	0801f47d 	.word	0x0801f47d
 801f434:	0801f47d 	.word	0x0801f47d
 801f438:	0801f46d 	.word	0x0801f46d
 801f43c:	0801f47d 	.word	0x0801f47d
 801f440:	0801f47d 	.word	0x0801f47d
 801f444:	0801f47d 	.word	0x0801f47d
 801f448:	0801f465 	.word	0x0801f465
 801f44c:	0801f47d 	.word	0x0801f47d
 801f450:	0801f47d 	.word	0x0801f47d
 801f454:	0801f47d 	.word	0x0801f47d
 801f458:	0801f475 	.word	0x0801f475
 801f45c:	2300      	movs	r3, #0
 801f45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f462:	e0d8      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f464:	2302      	movs	r3, #2
 801f466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f46a:	e0d4      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f46c:	2304      	movs	r3, #4
 801f46e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f472:	e0d0      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f474:	2308      	movs	r3, #8
 801f476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f47a:	e0cc      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f47c:	2310      	movs	r3, #16
 801f47e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f482:	e0c8      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f484:	697b      	ldr	r3, [r7, #20]
 801f486:	681b      	ldr	r3, [r3, #0]
 801f488:	4a5e      	ldr	r2, [pc, #376]	; (801f604 <UART_SetConfig+0x2ec>)
 801f48a:	4293      	cmp	r3, r2
 801f48c:	d125      	bne.n	801f4da <UART_SetConfig+0x1c2>
 801f48e:	4b5b      	ldr	r3, [pc, #364]	; (801f5fc <UART_SetConfig+0x2e4>)
 801f490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f494:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f498:	2b30      	cmp	r3, #48	; 0x30
 801f49a:	d016      	beq.n	801f4ca <UART_SetConfig+0x1b2>
 801f49c:	2b30      	cmp	r3, #48	; 0x30
 801f49e:	d818      	bhi.n	801f4d2 <UART_SetConfig+0x1ba>
 801f4a0:	2b20      	cmp	r3, #32
 801f4a2:	d00a      	beq.n	801f4ba <UART_SetConfig+0x1a2>
 801f4a4:	2b20      	cmp	r3, #32
 801f4a6:	d814      	bhi.n	801f4d2 <UART_SetConfig+0x1ba>
 801f4a8:	2b00      	cmp	r3, #0
 801f4aa:	d002      	beq.n	801f4b2 <UART_SetConfig+0x19a>
 801f4ac:	2b10      	cmp	r3, #16
 801f4ae:	d008      	beq.n	801f4c2 <UART_SetConfig+0x1aa>
 801f4b0:	e00f      	b.n	801f4d2 <UART_SetConfig+0x1ba>
 801f4b2:	2300      	movs	r3, #0
 801f4b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4b8:	e0ad      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f4ba:	2302      	movs	r3, #2
 801f4bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4c0:	e0a9      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f4c2:	2304      	movs	r3, #4
 801f4c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4c8:	e0a5      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f4ca:	2308      	movs	r3, #8
 801f4cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4d0:	e0a1      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f4d2:	2310      	movs	r3, #16
 801f4d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f4d8:	e09d      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f4da:	697b      	ldr	r3, [r7, #20]
 801f4dc:	681b      	ldr	r3, [r3, #0]
 801f4de:	4a4a      	ldr	r2, [pc, #296]	; (801f608 <UART_SetConfig+0x2f0>)
 801f4e0:	4293      	cmp	r3, r2
 801f4e2:	d125      	bne.n	801f530 <UART_SetConfig+0x218>
 801f4e4:	4b45      	ldr	r3, [pc, #276]	; (801f5fc <UART_SetConfig+0x2e4>)
 801f4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f4ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f4ee:	2bc0      	cmp	r3, #192	; 0xc0
 801f4f0:	d016      	beq.n	801f520 <UART_SetConfig+0x208>
 801f4f2:	2bc0      	cmp	r3, #192	; 0xc0
 801f4f4:	d818      	bhi.n	801f528 <UART_SetConfig+0x210>
 801f4f6:	2b80      	cmp	r3, #128	; 0x80
 801f4f8:	d00a      	beq.n	801f510 <UART_SetConfig+0x1f8>
 801f4fa:	2b80      	cmp	r3, #128	; 0x80
 801f4fc:	d814      	bhi.n	801f528 <UART_SetConfig+0x210>
 801f4fe:	2b00      	cmp	r3, #0
 801f500:	d002      	beq.n	801f508 <UART_SetConfig+0x1f0>
 801f502:	2b40      	cmp	r3, #64	; 0x40
 801f504:	d008      	beq.n	801f518 <UART_SetConfig+0x200>
 801f506:	e00f      	b.n	801f528 <UART_SetConfig+0x210>
 801f508:	2300      	movs	r3, #0
 801f50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f50e:	e082      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f510:	2302      	movs	r3, #2
 801f512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f516:	e07e      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f518:	2304      	movs	r3, #4
 801f51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f51e:	e07a      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f520:	2308      	movs	r3, #8
 801f522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f526:	e076      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f528:	2310      	movs	r3, #16
 801f52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f52e:	e072      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f530:	697b      	ldr	r3, [r7, #20]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	4a35      	ldr	r2, [pc, #212]	; (801f60c <UART_SetConfig+0x2f4>)
 801f536:	4293      	cmp	r3, r2
 801f538:	d12a      	bne.n	801f590 <UART_SetConfig+0x278>
 801f53a:	4b30      	ldr	r3, [pc, #192]	; (801f5fc <UART_SetConfig+0x2e4>)
 801f53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f548:	d01a      	beq.n	801f580 <UART_SetConfig+0x268>
 801f54a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f54e:	d81b      	bhi.n	801f588 <UART_SetConfig+0x270>
 801f550:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f554:	d00c      	beq.n	801f570 <UART_SetConfig+0x258>
 801f556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f55a:	d815      	bhi.n	801f588 <UART_SetConfig+0x270>
 801f55c:	2b00      	cmp	r3, #0
 801f55e:	d003      	beq.n	801f568 <UART_SetConfig+0x250>
 801f560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f564:	d008      	beq.n	801f578 <UART_SetConfig+0x260>
 801f566:	e00f      	b.n	801f588 <UART_SetConfig+0x270>
 801f568:	2300      	movs	r3, #0
 801f56a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f56e:	e052      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f570:	2302      	movs	r3, #2
 801f572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f576:	e04e      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f578:	2304      	movs	r3, #4
 801f57a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f57e:	e04a      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f580:	2308      	movs	r3, #8
 801f582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f586:	e046      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f588:	2310      	movs	r3, #16
 801f58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f58e:	e042      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f590:	697b      	ldr	r3, [r7, #20]
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	4a17      	ldr	r2, [pc, #92]	; (801f5f4 <UART_SetConfig+0x2dc>)
 801f596:	4293      	cmp	r3, r2
 801f598:	d13a      	bne.n	801f610 <UART_SetConfig+0x2f8>
 801f59a:	4b18      	ldr	r3, [pc, #96]	; (801f5fc <UART_SetConfig+0x2e4>)
 801f59c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f5a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f5a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f5a8:	d01a      	beq.n	801f5e0 <UART_SetConfig+0x2c8>
 801f5aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f5ae:	d81b      	bhi.n	801f5e8 <UART_SetConfig+0x2d0>
 801f5b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f5b4:	d00c      	beq.n	801f5d0 <UART_SetConfig+0x2b8>
 801f5b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f5ba:	d815      	bhi.n	801f5e8 <UART_SetConfig+0x2d0>
 801f5bc:	2b00      	cmp	r3, #0
 801f5be:	d003      	beq.n	801f5c8 <UART_SetConfig+0x2b0>
 801f5c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f5c4:	d008      	beq.n	801f5d8 <UART_SetConfig+0x2c0>
 801f5c6:	e00f      	b.n	801f5e8 <UART_SetConfig+0x2d0>
 801f5c8:	2300      	movs	r3, #0
 801f5ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5ce:	e022      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f5d0:	2302      	movs	r3, #2
 801f5d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5d6:	e01e      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f5d8:	2304      	movs	r3, #4
 801f5da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5de:	e01a      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f5e0:	2308      	movs	r3, #8
 801f5e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5e6:	e016      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f5e8:	2310      	movs	r3, #16
 801f5ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f5ee:	e012      	b.n	801f616 <UART_SetConfig+0x2fe>
 801f5f0:	cfff69f3 	.word	0xcfff69f3
 801f5f4:	40008000 	.word	0x40008000
 801f5f8:	40013800 	.word	0x40013800
 801f5fc:	40021000 	.word	0x40021000
 801f600:	40004400 	.word	0x40004400
 801f604:	40004800 	.word	0x40004800
 801f608:	40004c00 	.word	0x40004c00
 801f60c:	40005000 	.word	0x40005000
 801f610:	2310      	movs	r3, #16
 801f612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801f616:	697b      	ldr	r3, [r7, #20]
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	4aae      	ldr	r2, [pc, #696]	; (801f8d4 <UART_SetConfig+0x5bc>)
 801f61c:	4293      	cmp	r3, r2
 801f61e:	f040 8097 	bne.w	801f750 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801f622:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f626:	2b08      	cmp	r3, #8
 801f628:	d823      	bhi.n	801f672 <UART_SetConfig+0x35a>
 801f62a:	a201      	add	r2, pc, #4	; (adr r2, 801f630 <UART_SetConfig+0x318>)
 801f62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f630:	0801f655 	.word	0x0801f655
 801f634:	0801f673 	.word	0x0801f673
 801f638:	0801f65d 	.word	0x0801f65d
 801f63c:	0801f673 	.word	0x0801f673
 801f640:	0801f663 	.word	0x0801f663
 801f644:	0801f673 	.word	0x0801f673
 801f648:	0801f673 	.word	0x0801f673
 801f64c:	0801f673 	.word	0x0801f673
 801f650:	0801f66b 	.word	0x0801f66b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f654:	f7fd f8b4 	bl	801c7c0 <HAL_RCC_GetPCLK1Freq>
 801f658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f65a:	e010      	b.n	801f67e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f65c:	4b9e      	ldr	r3, [pc, #632]	; (801f8d8 <UART_SetConfig+0x5c0>)
 801f65e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f660:	e00d      	b.n	801f67e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f662:	f7fd f841 	bl	801c6e8 <HAL_RCC_GetSysClockFreq>
 801f666:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f668:	e009      	b.n	801f67e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f66a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f66e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f670:	e005      	b.n	801f67e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801f672:	2300      	movs	r3, #0
 801f674:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f676:	2301      	movs	r3, #1
 801f678:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f67c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801f67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f680:	2b00      	cmp	r3, #0
 801f682:	f000 8130 	beq.w	801f8e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801f686:	697b      	ldr	r3, [r7, #20]
 801f688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f68a:	4a94      	ldr	r2, [pc, #592]	; (801f8dc <UART_SetConfig+0x5c4>)
 801f68c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f690:	461a      	mov	r2, r3
 801f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f694:	fbb3 f3f2 	udiv	r3, r3, r2
 801f698:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f69a:	697b      	ldr	r3, [r7, #20]
 801f69c:	685a      	ldr	r2, [r3, #4]
 801f69e:	4613      	mov	r3, r2
 801f6a0:	005b      	lsls	r3, r3, #1
 801f6a2:	4413      	add	r3, r2
 801f6a4:	69ba      	ldr	r2, [r7, #24]
 801f6a6:	429a      	cmp	r2, r3
 801f6a8:	d305      	bcc.n	801f6b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801f6aa:	697b      	ldr	r3, [r7, #20]
 801f6ac:	685b      	ldr	r3, [r3, #4]
 801f6ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f6b0:	69ba      	ldr	r2, [r7, #24]
 801f6b2:	429a      	cmp	r2, r3
 801f6b4:	d903      	bls.n	801f6be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801f6b6:	2301      	movs	r3, #1
 801f6b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f6bc:	e113      	b.n	801f8e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6c0:	2200      	movs	r2, #0
 801f6c2:	60bb      	str	r3, [r7, #8]
 801f6c4:	60fa      	str	r2, [r7, #12]
 801f6c6:	697b      	ldr	r3, [r7, #20]
 801f6c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f6ca:	4a84      	ldr	r2, [pc, #528]	; (801f8dc <UART_SetConfig+0x5c4>)
 801f6cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f6d0:	b29b      	uxth	r3, r3
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	603b      	str	r3, [r7, #0]
 801f6d6:	607a      	str	r2, [r7, #4]
 801f6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f6dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f6e0:	f7e1 fada 	bl	8000c98 <__aeabi_uldivmod>
 801f6e4:	4602      	mov	r2, r0
 801f6e6:	460b      	mov	r3, r1
 801f6e8:	4610      	mov	r0, r2
 801f6ea:	4619      	mov	r1, r3
 801f6ec:	f04f 0200 	mov.w	r2, #0
 801f6f0:	f04f 0300 	mov.w	r3, #0
 801f6f4:	020b      	lsls	r3, r1, #8
 801f6f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801f6fa:	0202      	lsls	r2, r0, #8
 801f6fc:	6979      	ldr	r1, [r7, #20]
 801f6fe:	6849      	ldr	r1, [r1, #4]
 801f700:	0849      	lsrs	r1, r1, #1
 801f702:	2000      	movs	r0, #0
 801f704:	460c      	mov	r4, r1
 801f706:	4605      	mov	r5, r0
 801f708:	eb12 0804 	adds.w	r8, r2, r4
 801f70c:	eb43 0905 	adc.w	r9, r3, r5
 801f710:	697b      	ldr	r3, [r7, #20]
 801f712:	685b      	ldr	r3, [r3, #4]
 801f714:	2200      	movs	r2, #0
 801f716:	469a      	mov	sl, r3
 801f718:	4693      	mov	fp, r2
 801f71a:	4652      	mov	r2, sl
 801f71c:	465b      	mov	r3, fp
 801f71e:	4640      	mov	r0, r8
 801f720:	4649      	mov	r1, r9
 801f722:	f7e1 fab9 	bl	8000c98 <__aeabi_uldivmod>
 801f726:	4602      	mov	r2, r0
 801f728:	460b      	mov	r3, r1
 801f72a:	4613      	mov	r3, r2
 801f72c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801f72e:	6a3b      	ldr	r3, [r7, #32]
 801f730:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f734:	d308      	bcc.n	801f748 <UART_SetConfig+0x430>
 801f736:	6a3b      	ldr	r3, [r7, #32]
 801f738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f73c:	d204      	bcs.n	801f748 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801f73e:	697b      	ldr	r3, [r7, #20]
 801f740:	681b      	ldr	r3, [r3, #0]
 801f742:	6a3a      	ldr	r2, [r7, #32]
 801f744:	60da      	str	r2, [r3, #12]
 801f746:	e0ce      	b.n	801f8e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801f748:	2301      	movs	r3, #1
 801f74a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f74e:	e0ca      	b.n	801f8e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f750:	697b      	ldr	r3, [r7, #20]
 801f752:	69db      	ldr	r3, [r3, #28]
 801f754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f758:	d166      	bne.n	801f828 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801f75a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f75e:	2b08      	cmp	r3, #8
 801f760:	d827      	bhi.n	801f7b2 <UART_SetConfig+0x49a>
 801f762:	a201      	add	r2, pc, #4	; (adr r2, 801f768 <UART_SetConfig+0x450>)
 801f764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f768:	0801f78d 	.word	0x0801f78d
 801f76c:	0801f795 	.word	0x0801f795
 801f770:	0801f79d 	.word	0x0801f79d
 801f774:	0801f7b3 	.word	0x0801f7b3
 801f778:	0801f7a3 	.word	0x0801f7a3
 801f77c:	0801f7b3 	.word	0x0801f7b3
 801f780:	0801f7b3 	.word	0x0801f7b3
 801f784:	0801f7b3 	.word	0x0801f7b3
 801f788:	0801f7ab 	.word	0x0801f7ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f78c:	f7fd f818 	bl	801c7c0 <HAL_RCC_GetPCLK1Freq>
 801f790:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f792:	e014      	b.n	801f7be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f794:	f7fd f82a 	bl	801c7ec <HAL_RCC_GetPCLK2Freq>
 801f798:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f79a:	e010      	b.n	801f7be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f79c:	4b4e      	ldr	r3, [pc, #312]	; (801f8d8 <UART_SetConfig+0x5c0>)
 801f79e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f7a0:	e00d      	b.n	801f7be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f7a2:	f7fc ffa1 	bl	801c6e8 <HAL_RCC_GetSysClockFreq>
 801f7a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f7a8:	e009      	b.n	801f7be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f7aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f7ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f7b0:	e005      	b.n	801f7be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801f7b2:	2300      	movs	r3, #0
 801f7b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f7b6:	2301      	movs	r3, #1
 801f7b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f7bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7c0:	2b00      	cmp	r3, #0
 801f7c2:	f000 8090 	beq.w	801f8e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f7c6:	697b      	ldr	r3, [r7, #20]
 801f7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f7ca:	4a44      	ldr	r2, [pc, #272]	; (801f8dc <UART_SetConfig+0x5c4>)
 801f7cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f7d0:	461a      	mov	r2, r3
 801f7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7d4:	fbb3 f3f2 	udiv	r3, r3, r2
 801f7d8:	005a      	lsls	r2, r3, #1
 801f7da:	697b      	ldr	r3, [r7, #20]
 801f7dc:	685b      	ldr	r3, [r3, #4]
 801f7de:	085b      	lsrs	r3, r3, #1
 801f7e0:	441a      	add	r2, r3
 801f7e2:	697b      	ldr	r3, [r7, #20]
 801f7e4:	685b      	ldr	r3, [r3, #4]
 801f7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 801f7ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f7ec:	6a3b      	ldr	r3, [r7, #32]
 801f7ee:	2b0f      	cmp	r3, #15
 801f7f0:	d916      	bls.n	801f820 <UART_SetConfig+0x508>
 801f7f2:	6a3b      	ldr	r3, [r7, #32]
 801f7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f7f8:	d212      	bcs.n	801f820 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801f7fa:	6a3b      	ldr	r3, [r7, #32]
 801f7fc:	b29b      	uxth	r3, r3
 801f7fe:	f023 030f 	bic.w	r3, r3, #15
 801f802:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801f804:	6a3b      	ldr	r3, [r7, #32]
 801f806:	085b      	lsrs	r3, r3, #1
 801f808:	b29b      	uxth	r3, r3
 801f80a:	f003 0307 	and.w	r3, r3, #7
 801f80e:	b29a      	uxth	r2, r3
 801f810:	8bfb      	ldrh	r3, [r7, #30]
 801f812:	4313      	orrs	r3, r2
 801f814:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801f816:	697b      	ldr	r3, [r7, #20]
 801f818:	681b      	ldr	r3, [r3, #0]
 801f81a:	8bfa      	ldrh	r2, [r7, #30]
 801f81c:	60da      	str	r2, [r3, #12]
 801f81e:	e062      	b.n	801f8e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801f820:	2301      	movs	r3, #1
 801f822:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f826:	e05e      	b.n	801f8e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801f828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f82c:	2b08      	cmp	r3, #8
 801f82e:	d828      	bhi.n	801f882 <UART_SetConfig+0x56a>
 801f830:	a201      	add	r2, pc, #4	; (adr r2, 801f838 <UART_SetConfig+0x520>)
 801f832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f836:	bf00      	nop
 801f838:	0801f85d 	.word	0x0801f85d
 801f83c:	0801f865 	.word	0x0801f865
 801f840:	0801f86d 	.word	0x0801f86d
 801f844:	0801f883 	.word	0x0801f883
 801f848:	0801f873 	.word	0x0801f873
 801f84c:	0801f883 	.word	0x0801f883
 801f850:	0801f883 	.word	0x0801f883
 801f854:	0801f883 	.word	0x0801f883
 801f858:	0801f87b 	.word	0x0801f87b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f85c:	f7fc ffb0 	bl	801c7c0 <HAL_RCC_GetPCLK1Freq>
 801f860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f862:	e014      	b.n	801f88e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f864:	f7fc ffc2 	bl	801c7ec <HAL_RCC_GetPCLK2Freq>
 801f868:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f86a:	e010      	b.n	801f88e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f86c:	4b1a      	ldr	r3, [pc, #104]	; (801f8d8 <UART_SetConfig+0x5c0>)
 801f86e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f870:	e00d      	b.n	801f88e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f872:	f7fc ff39 	bl	801c6e8 <HAL_RCC_GetSysClockFreq>
 801f876:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f878:	e009      	b.n	801f88e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f87a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f87e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f880:	e005      	b.n	801f88e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801f882:	2300      	movs	r3, #0
 801f884:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f886:	2301      	movs	r3, #1
 801f888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f88c:	bf00      	nop
    }

    if (pclk != 0U)
 801f88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f890:	2b00      	cmp	r3, #0
 801f892:	d028      	beq.n	801f8e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f894:	697b      	ldr	r3, [r7, #20]
 801f896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f898:	4a10      	ldr	r2, [pc, #64]	; (801f8dc <UART_SetConfig+0x5c4>)
 801f89a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f89e:	461a      	mov	r2, r3
 801f8a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f8a2:	fbb3 f2f2 	udiv	r2, r3, r2
 801f8a6:	697b      	ldr	r3, [r7, #20]
 801f8a8:	685b      	ldr	r3, [r3, #4]
 801f8aa:	085b      	lsrs	r3, r3, #1
 801f8ac:	441a      	add	r2, r3
 801f8ae:	697b      	ldr	r3, [r7, #20]
 801f8b0:	685b      	ldr	r3, [r3, #4]
 801f8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 801f8b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f8b8:	6a3b      	ldr	r3, [r7, #32]
 801f8ba:	2b0f      	cmp	r3, #15
 801f8bc:	d910      	bls.n	801f8e0 <UART_SetConfig+0x5c8>
 801f8be:	6a3b      	ldr	r3, [r7, #32]
 801f8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f8c4:	d20c      	bcs.n	801f8e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801f8c6:	6a3b      	ldr	r3, [r7, #32]
 801f8c8:	b29a      	uxth	r2, r3
 801f8ca:	697b      	ldr	r3, [r7, #20]
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	60da      	str	r2, [r3, #12]
 801f8d0:	e009      	b.n	801f8e6 <UART_SetConfig+0x5ce>
 801f8d2:	bf00      	nop
 801f8d4:	40008000 	.word	0x40008000
 801f8d8:	00f42400 	.word	0x00f42400
 801f8dc:	08024448 	.word	0x08024448
      }
      else
      {
        ret = HAL_ERROR;
 801f8e0:	2301      	movs	r3, #1
 801f8e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801f8e6:	697b      	ldr	r3, [r7, #20]
 801f8e8:	2201      	movs	r2, #1
 801f8ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801f8ee:	697b      	ldr	r3, [r7, #20]
 801f8f0:	2201      	movs	r2, #1
 801f8f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801f8f6:	697b      	ldr	r3, [r7, #20]
 801f8f8:	2200      	movs	r2, #0
 801f8fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801f8fc:	697b      	ldr	r3, [r7, #20]
 801f8fe:	2200      	movs	r2, #0
 801f900:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801f902:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801f906:	4618      	mov	r0, r3
 801f908:	3730      	adds	r7, #48	; 0x30
 801f90a:	46bd      	mov	sp, r7
 801f90c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801f910 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801f910:	b480      	push	{r7}
 801f912:	b083      	sub	sp, #12
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f91c:	f003 0301 	and.w	r3, r3, #1
 801f920:	2b00      	cmp	r3, #0
 801f922:	d00a      	beq.n	801f93a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	681b      	ldr	r3, [r3, #0]
 801f928:	685b      	ldr	r3, [r3, #4]
 801f92a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f932:	687b      	ldr	r3, [r7, #4]
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	430a      	orrs	r2, r1
 801f938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f93e:	f003 0302 	and.w	r3, r3, #2
 801f942:	2b00      	cmp	r3, #0
 801f944:	d00a      	beq.n	801f95c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	681b      	ldr	r3, [r3, #0]
 801f94a:	685b      	ldr	r3, [r3, #4]
 801f94c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	430a      	orrs	r2, r1
 801f95a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f960:	f003 0304 	and.w	r3, r3, #4
 801f964:	2b00      	cmp	r3, #0
 801f966:	d00a      	beq.n	801f97e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801f968:	687b      	ldr	r3, [r7, #4]
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	685b      	ldr	r3, [r3, #4]
 801f96e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f976:	687b      	ldr	r3, [r7, #4]
 801f978:	681b      	ldr	r3, [r3, #0]
 801f97a:	430a      	orrs	r2, r1
 801f97c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f982:	f003 0308 	and.w	r3, r3, #8
 801f986:	2b00      	cmp	r3, #0
 801f988:	d00a      	beq.n	801f9a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801f98a:	687b      	ldr	r3, [r7, #4]
 801f98c:	681b      	ldr	r3, [r3, #0]
 801f98e:	685b      	ldr	r3, [r3, #4]
 801f990:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f998:	687b      	ldr	r3, [r7, #4]
 801f99a:	681b      	ldr	r3, [r3, #0]
 801f99c:	430a      	orrs	r2, r1
 801f99e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801f9a0:	687b      	ldr	r3, [r7, #4]
 801f9a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9a4:	f003 0310 	and.w	r3, r3, #16
 801f9a8:	2b00      	cmp	r3, #0
 801f9aa:	d00a      	beq.n	801f9c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801f9ac:	687b      	ldr	r3, [r7, #4]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	689b      	ldr	r3, [r3, #8]
 801f9b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801f9b6:	687b      	ldr	r3, [r7, #4]
 801f9b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	430a      	orrs	r2, r1
 801f9c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801f9c2:	687b      	ldr	r3, [r7, #4]
 801f9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9c6:	f003 0320 	and.w	r3, r3, #32
 801f9ca:	2b00      	cmp	r3, #0
 801f9cc:	d00a      	beq.n	801f9e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	689b      	ldr	r3, [r3, #8]
 801f9d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	681b      	ldr	r3, [r3, #0]
 801f9e0:	430a      	orrs	r2, r1
 801f9e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f9ec:	2b00      	cmp	r3, #0
 801f9ee:	d01a      	beq.n	801fa26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801f9f0:	687b      	ldr	r3, [r7, #4]
 801f9f2:	681b      	ldr	r3, [r3, #0]
 801f9f4:	685b      	ldr	r3, [r3, #4]
 801f9f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	430a      	orrs	r2, r1
 801fa04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fa0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fa0e:	d10a      	bne.n	801fa26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fa10:	687b      	ldr	r3, [r7, #4]
 801fa12:	681b      	ldr	r3, [r3, #0]
 801fa14:	685b      	ldr	r3, [r3, #4]
 801fa16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	681b      	ldr	r3, [r3, #0]
 801fa22:	430a      	orrs	r2, r1
 801fa24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d00a      	beq.n	801fa48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	685b      	ldr	r3, [r3, #4]
 801fa38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801fa3c:	687b      	ldr	r3, [r7, #4]
 801fa3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa40:	687b      	ldr	r3, [r7, #4]
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	430a      	orrs	r2, r1
 801fa46:	605a      	str	r2, [r3, #4]
  }
}
 801fa48:	bf00      	nop
 801fa4a:	370c      	adds	r7, #12
 801fa4c:	46bd      	mov	sp, r7
 801fa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa52:	4770      	bx	lr

0801fa54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fa54:	b580      	push	{r7, lr}
 801fa56:	b086      	sub	sp, #24
 801fa58:	af02      	add	r7, sp, #8
 801fa5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fa5c:	687b      	ldr	r3, [r7, #4]
 801fa5e:	2200      	movs	r2, #0
 801fa60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fa64:	f7f8 ff58 	bl	8018918 <HAL_GetTick>
 801fa68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	681b      	ldr	r3, [r3, #0]
 801fa6e:	681b      	ldr	r3, [r3, #0]
 801fa70:	f003 0308 	and.w	r3, r3, #8
 801fa74:	2b08      	cmp	r3, #8
 801fa76:	d10e      	bne.n	801fa96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fa78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fa7c:	9300      	str	r3, [sp, #0]
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	2200      	movs	r2, #0
 801fa82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fa86:	6878      	ldr	r0, [r7, #4]
 801fa88:	f000 f82f 	bl	801faea <UART_WaitOnFlagUntilTimeout>
 801fa8c:	4603      	mov	r3, r0
 801fa8e:	2b00      	cmp	r3, #0
 801fa90:	d001      	beq.n	801fa96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fa92:	2303      	movs	r3, #3
 801fa94:	e025      	b.n	801fae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	681b      	ldr	r3, [r3, #0]
 801fa9c:	f003 0304 	and.w	r3, r3, #4
 801faa0:	2b04      	cmp	r3, #4
 801faa2:	d10e      	bne.n	801fac2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801faa4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801faa8:	9300      	str	r3, [sp, #0]
 801faaa:	68fb      	ldr	r3, [r7, #12]
 801faac:	2200      	movs	r2, #0
 801faae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801fab2:	6878      	ldr	r0, [r7, #4]
 801fab4:	f000 f819 	bl	801faea <UART_WaitOnFlagUntilTimeout>
 801fab8:	4603      	mov	r3, r0
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d001      	beq.n	801fac2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fabe:	2303      	movs	r3, #3
 801fac0:	e00f      	b.n	801fae2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801fac2:	687b      	ldr	r3, [r7, #4]
 801fac4:	2220      	movs	r2, #32
 801fac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	2220      	movs	r2, #32
 801face:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fad2:	687b      	ldr	r3, [r7, #4]
 801fad4:	2200      	movs	r2, #0
 801fad6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	2200      	movs	r2, #0
 801fadc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fae0:	2300      	movs	r3, #0
}
 801fae2:	4618      	mov	r0, r3
 801fae4:	3710      	adds	r7, #16
 801fae6:	46bd      	mov	sp, r7
 801fae8:	bd80      	pop	{r7, pc}

0801faea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801faea:	b580      	push	{r7, lr}
 801faec:	b09c      	sub	sp, #112	; 0x70
 801faee:	af00      	add	r7, sp, #0
 801faf0:	60f8      	str	r0, [r7, #12]
 801faf2:	60b9      	str	r1, [r7, #8]
 801faf4:	603b      	str	r3, [r7, #0]
 801faf6:	4613      	mov	r3, r2
 801faf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fafa:	e0a9      	b.n	801fc50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fafc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fafe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fb02:	f000 80a5 	beq.w	801fc50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801fb06:	f7f8 ff07 	bl	8018918 <HAL_GetTick>
 801fb0a:	4602      	mov	r2, r0
 801fb0c:	683b      	ldr	r3, [r7, #0]
 801fb0e:	1ad3      	subs	r3, r2, r3
 801fb10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801fb12:	429a      	cmp	r2, r3
 801fb14:	d302      	bcc.n	801fb1c <UART_WaitOnFlagUntilTimeout+0x32>
 801fb16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	d140      	bne.n	801fb9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fb1c:	68fb      	ldr	r3, [r7, #12]
 801fb1e:	681b      	ldr	r3, [r3, #0]
 801fb20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fb24:	e853 3f00 	ldrex	r3, [r3]
 801fb28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801fb2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fb2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fb30:	667b      	str	r3, [r7, #100]	; 0x64
 801fb32:	68fb      	ldr	r3, [r7, #12]
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	461a      	mov	r2, r3
 801fb38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fb3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fb3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801fb40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fb42:	e841 2300 	strex	r3, r2, [r1]
 801fb46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801fb48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fb4a:	2b00      	cmp	r3, #0
 801fb4c:	d1e6      	bne.n	801fb1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fb4e:	68fb      	ldr	r3, [r7, #12]
 801fb50:	681b      	ldr	r3, [r3, #0]
 801fb52:	3308      	adds	r3, #8
 801fb54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fb58:	e853 3f00 	ldrex	r3, [r3]
 801fb5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb60:	f023 0301 	bic.w	r3, r3, #1
 801fb64:	663b      	str	r3, [r7, #96]	; 0x60
 801fb66:	68fb      	ldr	r3, [r7, #12]
 801fb68:	681b      	ldr	r3, [r3, #0]
 801fb6a:	3308      	adds	r3, #8
 801fb6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fb6e:	64ba      	str	r2, [r7, #72]	; 0x48
 801fb70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fb74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fb76:	e841 2300 	strex	r3, r2, [r1]
 801fb7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801fb7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fb7e:	2b00      	cmp	r3, #0
 801fb80:	d1e5      	bne.n	801fb4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801fb82:	68fb      	ldr	r3, [r7, #12]
 801fb84:	2220      	movs	r2, #32
 801fb86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801fb8a:	68fb      	ldr	r3, [r7, #12]
 801fb8c:	2220      	movs	r2, #32
 801fb8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801fb92:	68fb      	ldr	r3, [r7, #12]
 801fb94:	2200      	movs	r2, #0
 801fb96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801fb9a:	2303      	movs	r3, #3
 801fb9c:	e069      	b.n	801fc72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801fb9e:	68fb      	ldr	r3, [r7, #12]
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	f003 0304 	and.w	r3, r3, #4
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d051      	beq.n	801fc50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801fbac:	68fb      	ldr	r3, [r7, #12]
 801fbae:	681b      	ldr	r3, [r3, #0]
 801fbb0:	69db      	ldr	r3, [r3, #28]
 801fbb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fbb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fbba:	d149      	bne.n	801fc50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fbc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fbc6:	68fb      	ldr	r3, [r7, #12]
 801fbc8:	681b      	ldr	r3, [r3, #0]
 801fbca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fbcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fbce:	e853 3f00 	ldrex	r3, [r3]
 801fbd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbd6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fbda:	66fb      	str	r3, [r7, #108]	; 0x6c
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	461a      	mov	r2, r3
 801fbe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fbe4:	637b      	str	r3, [r7, #52]	; 0x34
 801fbe6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fbe8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fbea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fbec:	e841 2300 	strex	r3, r2, [r1]
 801fbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fbf4:	2b00      	cmp	r3, #0
 801fbf6:	d1e6      	bne.n	801fbc6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fbf8:	68fb      	ldr	r3, [r7, #12]
 801fbfa:	681b      	ldr	r3, [r3, #0]
 801fbfc:	3308      	adds	r3, #8
 801fbfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc00:	697b      	ldr	r3, [r7, #20]
 801fc02:	e853 3f00 	ldrex	r3, [r3]
 801fc06:	613b      	str	r3, [r7, #16]
   return(result);
 801fc08:	693b      	ldr	r3, [r7, #16]
 801fc0a:	f023 0301 	bic.w	r3, r3, #1
 801fc0e:	66bb      	str	r3, [r7, #104]	; 0x68
 801fc10:	68fb      	ldr	r3, [r7, #12]
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	3308      	adds	r3, #8
 801fc16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fc18:	623a      	str	r2, [r7, #32]
 801fc1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc1c:	69f9      	ldr	r1, [r7, #28]
 801fc1e:	6a3a      	ldr	r2, [r7, #32]
 801fc20:	e841 2300 	strex	r3, r2, [r1]
 801fc24:	61bb      	str	r3, [r7, #24]
   return(result);
 801fc26:	69bb      	ldr	r3, [r7, #24]
 801fc28:	2b00      	cmp	r3, #0
 801fc2a:	d1e5      	bne.n	801fbf8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801fc2c:	68fb      	ldr	r3, [r7, #12]
 801fc2e:	2220      	movs	r2, #32
 801fc30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801fc34:	68fb      	ldr	r3, [r7, #12]
 801fc36:	2220      	movs	r2, #32
 801fc38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	2220      	movs	r2, #32
 801fc40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	2200      	movs	r2, #0
 801fc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801fc4c:	2303      	movs	r3, #3
 801fc4e:	e010      	b.n	801fc72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fc50:	68fb      	ldr	r3, [r7, #12]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	69da      	ldr	r2, [r3, #28]
 801fc56:	68bb      	ldr	r3, [r7, #8]
 801fc58:	4013      	ands	r3, r2
 801fc5a:	68ba      	ldr	r2, [r7, #8]
 801fc5c:	429a      	cmp	r2, r3
 801fc5e:	bf0c      	ite	eq
 801fc60:	2301      	moveq	r3, #1
 801fc62:	2300      	movne	r3, #0
 801fc64:	b2db      	uxtb	r3, r3
 801fc66:	461a      	mov	r2, r3
 801fc68:	79fb      	ldrb	r3, [r7, #7]
 801fc6a:	429a      	cmp	r2, r3
 801fc6c:	f43f af46 	beq.w	801fafc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801fc70:	2300      	movs	r3, #0
}
 801fc72:	4618      	mov	r0, r3
 801fc74:	3770      	adds	r7, #112	; 0x70
 801fc76:	46bd      	mov	sp, r7
 801fc78:	bd80      	pop	{r7, pc}

0801fc7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801fc7a:	b480      	push	{r7}
 801fc7c:	b085      	sub	sp, #20
 801fc7e:	af00      	add	r7, sp, #0
 801fc80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fc88:	2b01      	cmp	r3, #1
 801fc8a:	d101      	bne.n	801fc90 <HAL_UARTEx_DisableFifoMode+0x16>
 801fc8c:	2302      	movs	r3, #2
 801fc8e:	e027      	b.n	801fce0 <HAL_UARTEx_DisableFifoMode+0x66>
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	2201      	movs	r2, #1
 801fc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	2224      	movs	r2, #36	; 0x24
 801fc9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fca8:	687b      	ldr	r3, [r7, #4]
 801fcaa:	681b      	ldr	r3, [r3, #0]
 801fcac:	681a      	ldr	r2, [r3, #0]
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	f022 0201 	bic.w	r2, r2, #1
 801fcb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801fcb8:	68fb      	ldr	r3, [r7, #12]
 801fcba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801fcbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801fcc0:	687b      	ldr	r3, [r7, #4]
 801fcc2:	2200      	movs	r2, #0
 801fcc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	68fa      	ldr	r2, [r7, #12]
 801fccc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	2220      	movs	r2, #32
 801fcd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	2200      	movs	r2, #0
 801fcda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fcde:	2300      	movs	r3, #0
}
 801fce0:	4618      	mov	r0, r3
 801fce2:	3714      	adds	r7, #20
 801fce4:	46bd      	mov	sp, r7
 801fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcea:	4770      	bx	lr

0801fcec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801fcec:	b580      	push	{r7, lr}
 801fcee:	b084      	sub	sp, #16
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	6078      	str	r0, [r7, #4]
 801fcf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fcf6:	687b      	ldr	r3, [r7, #4]
 801fcf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fcfc:	2b01      	cmp	r3, #1
 801fcfe:	d101      	bne.n	801fd04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801fd00:	2302      	movs	r3, #2
 801fd02:	e02d      	b.n	801fd60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801fd04:	687b      	ldr	r3, [r7, #4]
 801fd06:	2201      	movs	r2, #1
 801fd08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	2224      	movs	r2, #36	; 0x24
 801fd10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	681b      	ldr	r3, [r3, #0]
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fd1c:	687b      	ldr	r3, [r7, #4]
 801fd1e:	681b      	ldr	r3, [r3, #0]
 801fd20:	681a      	ldr	r2, [r3, #0]
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	f022 0201 	bic.w	r2, r2, #1
 801fd2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	689b      	ldr	r3, [r3, #8]
 801fd32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801fd36:	687b      	ldr	r3, [r7, #4]
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	683a      	ldr	r2, [r7, #0]
 801fd3c:	430a      	orrs	r2, r1
 801fd3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801fd40:	6878      	ldr	r0, [r7, #4]
 801fd42:	f000 f84f 	bl	801fde4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	68fa      	ldr	r2, [r7, #12]
 801fd4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	2220      	movs	r2, #32
 801fd52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	2200      	movs	r2, #0
 801fd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fd5e:	2300      	movs	r3, #0
}
 801fd60:	4618      	mov	r0, r3
 801fd62:	3710      	adds	r7, #16
 801fd64:	46bd      	mov	sp, r7
 801fd66:	bd80      	pop	{r7, pc}

0801fd68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801fd68:	b580      	push	{r7, lr}
 801fd6a:	b084      	sub	sp, #16
 801fd6c:	af00      	add	r7, sp, #0
 801fd6e:	6078      	str	r0, [r7, #4]
 801fd70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801fd78:	2b01      	cmp	r3, #1
 801fd7a:	d101      	bne.n	801fd80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801fd7c:	2302      	movs	r3, #2
 801fd7e:	e02d      	b.n	801fddc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801fd80:	687b      	ldr	r3, [r7, #4]
 801fd82:	2201      	movs	r2, #1
 801fd84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	2224      	movs	r2, #36	; 0x24
 801fd8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801fd90:	687b      	ldr	r3, [r7, #4]
 801fd92:	681b      	ldr	r3, [r3, #0]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	681b      	ldr	r3, [r3, #0]
 801fd9c:	681a      	ldr	r2, [r3, #0]
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	681b      	ldr	r3, [r3, #0]
 801fda2:	f022 0201 	bic.w	r2, r2, #1
 801fda6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	689b      	ldr	r3, [r3, #8]
 801fdae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	683a      	ldr	r2, [r7, #0]
 801fdb8:	430a      	orrs	r2, r1
 801fdba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801fdbc:	6878      	ldr	r0, [r7, #4]
 801fdbe:	f000 f811 	bl	801fde4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fdc2:	687b      	ldr	r3, [r7, #4]
 801fdc4:	681b      	ldr	r3, [r3, #0]
 801fdc6:	68fa      	ldr	r2, [r7, #12]
 801fdc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801fdca:	687b      	ldr	r3, [r7, #4]
 801fdcc:	2220      	movs	r2, #32
 801fdce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	2200      	movs	r2, #0
 801fdd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fdda:	2300      	movs	r3, #0
}
 801fddc:	4618      	mov	r0, r3
 801fdde:	3710      	adds	r7, #16
 801fde0:	46bd      	mov	sp, r7
 801fde2:	bd80      	pop	{r7, pc}

0801fde4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801fde4:	b480      	push	{r7}
 801fde6:	b085      	sub	sp, #20
 801fde8:	af00      	add	r7, sp, #0
 801fdea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d108      	bne.n	801fe06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	2201      	movs	r2, #1
 801fdf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	2201      	movs	r2, #1
 801fe00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801fe04:	e031      	b.n	801fe6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801fe06:	2308      	movs	r3, #8
 801fe08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801fe0a:	2308      	movs	r3, #8
 801fe0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	689b      	ldr	r3, [r3, #8]
 801fe14:	0e5b      	lsrs	r3, r3, #25
 801fe16:	b2db      	uxtb	r3, r3
 801fe18:	f003 0307 	and.w	r3, r3, #7
 801fe1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	689b      	ldr	r3, [r3, #8]
 801fe24:	0f5b      	lsrs	r3, r3, #29
 801fe26:	b2db      	uxtb	r3, r3
 801fe28:	f003 0307 	and.w	r3, r3, #7
 801fe2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801fe2e:	7bbb      	ldrb	r3, [r7, #14]
 801fe30:	7b3a      	ldrb	r2, [r7, #12]
 801fe32:	4911      	ldr	r1, [pc, #68]	; (801fe78 <UARTEx_SetNbDataToProcess+0x94>)
 801fe34:	5c8a      	ldrb	r2, [r1, r2]
 801fe36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801fe3a:	7b3a      	ldrb	r2, [r7, #12]
 801fe3c:	490f      	ldr	r1, [pc, #60]	; (801fe7c <UARTEx_SetNbDataToProcess+0x98>)
 801fe3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801fe40:	fb93 f3f2 	sdiv	r3, r3, r2
 801fe44:	b29a      	uxth	r2, r3
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801fe4c:	7bfb      	ldrb	r3, [r7, #15]
 801fe4e:	7b7a      	ldrb	r2, [r7, #13]
 801fe50:	4909      	ldr	r1, [pc, #36]	; (801fe78 <UARTEx_SetNbDataToProcess+0x94>)
 801fe52:	5c8a      	ldrb	r2, [r1, r2]
 801fe54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801fe58:	7b7a      	ldrb	r2, [r7, #13]
 801fe5a:	4908      	ldr	r1, [pc, #32]	; (801fe7c <UARTEx_SetNbDataToProcess+0x98>)
 801fe5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801fe5e:	fb93 f3f2 	sdiv	r3, r3, r2
 801fe62:	b29a      	uxth	r2, r3
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801fe6a:	bf00      	nop
 801fe6c:	3714      	adds	r7, #20
 801fe6e:	46bd      	mov	sp, r7
 801fe70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe74:	4770      	bx	lr
 801fe76:	bf00      	nop
 801fe78:	08024460 	.word	0x08024460
 801fe7c:	08024468 	.word	0x08024468

0801fe80 <__errno>:
 801fe80:	4b01      	ldr	r3, [pc, #4]	; (801fe88 <__errno+0x8>)
 801fe82:	6818      	ldr	r0, [r3, #0]
 801fe84:	4770      	bx	lr
 801fe86:	bf00      	nop
 801fe88:	2000002c 	.word	0x2000002c

0801fe8c <__libc_init_array>:
 801fe8c:	b570      	push	{r4, r5, r6, lr}
 801fe8e:	4d0d      	ldr	r5, [pc, #52]	; (801fec4 <__libc_init_array+0x38>)
 801fe90:	4c0d      	ldr	r4, [pc, #52]	; (801fec8 <__libc_init_array+0x3c>)
 801fe92:	1b64      	subs	r4, r4, r5
 801fe94:	10a4      	asrs	r4, r4, #2
 801fe96:	2600      	movs	r6, #0
 801fe98:	42a6      	cmp	r6, r4
 801fe9a:	d109      	bne.n	801feb0 <__libc_init_array+0x24>
 801fe9c:	4d0b      	ldr	r5, [pc, #44]	; (801fecc <__libc_init_array+0x40>)
 801fe9e:	4c0c      	ldr	r4, [pc, #48]	; (801fed0 <__libc_init_array+0x44>)
 801fea0:	f004 f94c 	bl	802413c <_init>
 801fea4:	1b64      	subs	r4, r4, r5
 801fea6:	10a4      	asrs	r4, r4, #2
 801fea8:	2600      	movs	r6, #0
 801feaa:	42a6      	cmp	r6, r4
 801feac:	d105      	bne.n	801feba <__libc_init_array+0x2e>
 801feae:	bd70      	pop	{r4, r5, r6, pc}
 801feb0:	f855 3b04 	ldr.w	r3, [r5], #4
 801feb4:	4798      	blx	r3
 801feb6:	3601      	adds	r6, #1
 801feb8:	e7ee      	b.n	801fe98 <__libc_init_array+0xc>
 801feba:	f855 3b04 	ldr.w	r3, [r5], #4
 801febe:	4798      	blx	r3
 801fec0:	3601      	adds	r6, #1
 801fec2:	e7f2      	b.n	801feaa <__libc_init_array+0x1e>
 801fec4:	08024a60 	.word	0x08024a60
 801fec8:	08024a60 	.word	0x08024a60
 801fecc:	08024a60 	.word	0x08024a60
 801fed0:	08024a64 	.word	0x08024a64

0801fed4 <memcpy>:
 801fed4:	440a      	add	r2, r1
 801fed6:	4291      	cmp	r1, r2
 801fed8:	f100 33ff 	add.w	r3, r0, #4294967295
 801fedc:	d100      	bne.n	801fee0 <memcpy+0xc>
 801fede:	4770      	bx	lr
 801fee0:	b510      	push	{r4, lr}
 801fee2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801fee6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801feea:	4291      	cmp	r1, r2
 801feec:	d1f9      	bne.n	801fee2 <memcpy+0xe>
 801feee:	bd10      	pop	{r4, pc}

0801fef0 <memset>:
 801fef0:	4402      	add	r2, r0
 801fef2:	4603      	mov	r3, r0
 801fef4:	4293      	cmp	r3, r2
 801fef6:	d100      	bne.n	801fefa <memset+0xa>
 801fef8:	4770      	bx	lr
 801fefa:	f803 1b01 	strb.w	r1, [r3], #1
 801fefe:	e7f9      	b.n	801fef4 <memset+0x4>

0801ff00 <__cvt>:
 801ff00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ff04:	ec55 4b10 	vmov	r4, r5, d0
 801ff08:	2d00      	cmp	r5, #0
 801ff0a:	460e      	mov	r6, r1
 801ff0c:	4619      	mov	r1, r3
 801ff0e:	462b      	mov	r3, r5
 801ff10:	bfbb      	ittet	lt
 801ff12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ff16:	461d      	movlt	r5, r3
 801ff18:	2300      	movge	r3, #0
 801ff1a:	232d      	movlt	r3, #45	; 0x2d
 801ff1c:	700b      	strb	r3, [r1, #0]
 801ff1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ff24:	4691      	mov	r9, r2
 801ff26:	f023 0820 	bic.w	r8, r3, #32
 801ff2a:	bfbc      	itt	lt
 801ff2c:	4622      	movlt	r2, r4
 801ff2e:	4614      	movlt	r4, r2
 801ff30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ff34:	d005      	beq.n	801ff42 <__cvt+0x42>
 801ff36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ff3a:	d100      	bne.n	801ff3e <__cvt+0x3e>
 801ff3c:	3601      	adds	r6, #1
 801ff3e:	2102      	movs	r1, #2
 801ff40:	e000      	b.n	801ff44 <__cvt+0x44>
 801ff42:	2103      	movs	r1, #3
 801ff44:	ab03      	add	r3, sp, #12
 801ff46:	9301      	str	r3, [sp, #4]
 801ff48:	ab02      	add	r3, sp, #8
 801ff4a:	9300      	str	r3, [sp, #0]
 801ff4c:	ec45 4b10 	vmov	d0, r4, r5
 801ff50:	4653      	mov	r3, sl
 801ff52:	4632      	mov	r2, r6
 801ff54:	f000 fe30 	bl	8020bb8 <_dtoa_r>
 801ff58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ff5c:	4607      	mov	r7, r0
 801ff5e:	d102      	bne.n	801ff66 <__cvt+0x66>
 801ff60:	f019 0f01 	tst.w	r9, #1
 801ff64:	d022      	beq.n	801ffac <__cvt+0xac>
 801ff66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ff6a:	eb07 0906 	add.w	r9, r7, r6
 801ff6e:	d110      	bne.n	801ff92 <__cvt+0x92>
 801ff70:	783b      	ldrb	r3, [r7, #0]
 801ff72:	2b30      	cmp	r3, #48	; 0x30
 801ff74:	d10a      	bne.n	801ff8c <__cvt+0x8c>
 801ff76:	2200      	movs	r2, #0
 801ff78:	2300      	movs	r3, #0
 801ff7a:	4620      	mov	r0, r4
 801ff7c:	4629      	mov	r1, r5
 801ff7e:	f7e0 fdcb 	bl	8000b18 <__aeabi_dcmpeq>
 801ff82:	b918      	cbnz	r0, 801ff8c <__cvt+0x8c>
 801ff84:	f1c6 0601 	rsb	r6, r6, #1
 801ff88:	f8ca 6000 	str.w	r6, [sl]
 801ff8c:	f8da 3000 	ldr.w	r3, [sl]
 801ff90:	4499      	add	r9, r3
 801ff92:	2200      	movs	r2, #0
 801ff94:	2300      	movs	r3, #0
 801ff96:	4620      	mov	r0, r4
 801ff98:	4629      	mov	r1, r5
 801ff9a:	f7e0 fdbd 	bl	8000b18 <__aeabi_dcmpeq>
 801ff9e:	b108      	cbz	r0, 801ffa4 <__cvt+0xa4>
 801ffa0:	f8cd 900c 	str.w	r9, [sp, #12]
 801ffa4:	2230      	movs	r2, #48	; 0x30
 801ffa6:	9b03      	ldr	r3, [sp, #12]
 801ffa8:	454b      	cmp	r3, r9
 801ffaa:	d307      	bcc.n	801ffbc <__cvt+0xbc>
 801ffac:	9b03      	ldr	r3, [sp, #12]
 801ffae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ffb0:	1bdb      	subs	r3, r3, r7
 801ffb2:	4638      	mov	r0, r7
 801ffb4:	6013      	str	r3, [r2, #0]
 801ffb6:	b004      	add	sp, #16
 801ffb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ffbc:	1c59      	adds	r1, r3, #1
 801ffbe:	9103      	str	r1, [sp, #12]
 801ffc0:	701a      	strb	r2, [r3, #0]
 801ffc2:	e7f0      	b.n	801ffa6 <__cvt+0xa6>

0801ffc4 <__exponent>:
 801ffc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ffc6:	4603      	mov	r3, r0
 801ffc8:	2900      	cmp	r1, #0
 801ffca:	bfb8      	it	lt
 801ffcc:	4249      	neglt	r1, r1
 801ffce:	f803 2b02 	strb.w	r2, [r3], #2
 801ffd2:	bfb4      	ite	lt
 801ffd4:	222d      	movlt	r2, #45	; 0x2d
 801ffd6:	222b      	movge	r2, #43	; 0x2b
 801ffd8:	2909      	cmp	r1, #9
 801ffda:	7042      	strb	r2, [r0, #1]
 801ffdc:	dd2a      	ble.n	8020034 <__exponent+0x70>
 801ffde:	f10d 0407 	add.w	r4, sp, #7
 801ffe2:	46a4      	mov	ip, r4
 801ffe4:	270a      	movs	r7, #10
 801ffe6:	46a6      	mov	lr, r4
 801ffe8:	460a      	mov	r2, r1
 801ffea:	fb91 f6f7 	sdiv	r6, r1, r7
 801ffee:	fb07 1516 	mls	r5, r7, r6, r1
 801fff2:	3530      	adds	r5, #48	; 0x30
 801fff4:	2a63      	cmp	r2, #99	; 0x63
 801fff6:	f104 34ff 	add.w	r4, r4, #4294967295
 801fffa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801fffe:	4631      	mov	r1, r6
 8020000:	dcf1      	bgt.n	801ffe6 <__exponent+0x22>
 8020002:	3130      	adds	r1, #48	; 0x30
 8020004:	f1ae 0502 	sub.w	r5, lr, #2
 8020008:	f804 1c01 	strb.w	r1, [r4, #-1]
 802000c:	1c44      	adds	r4, r0, #1
 802000e:	4629      	mov	r1, r5
 8020010:	4561      	cmp	r1, ip
 8020012:	d30a      	bcc.n	802002a <__exponent+0x66>
 8020014:	f10d 0209 	add.w	r2, sp, #9
 8020018:	eba2 020e 	sub.w	r2, r2, lr
 802001c:	4565      	cmp	r5, ip
 802001e:	bf88      	it	hi
 8020020:	2200      	movhi	r2, #0
 8020022:	4413      	add	r3, r2
 8020024:	1a18      	subs	r0, r3, r0
 8020026:	b003      	add	sp, #12
 8020028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802002a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802002e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8020032:	e7ed      	b.n	8020010 <__exponent+0x4c>
 8020034:	2330      	movs	r3, #48	; 0x30
 8020036:	3130      	adds	r1, #48	; 0x30
 8020038:	7083      	strb	r3, [r0, #2]
 802003a:	70c1      	strb	r1, [r0, #3]
 802003c:	1d03      	adds	r3, r0, #4
 802003e:	e7f1      	b.n	8020024 <__exponent+0x60>

08020040 <_printf_float>:
 8020040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020044:	ed2d 8b02 	vpush	{d8}
 8020048:	b08d      	sub	sp, #52	; 0x34
 802004a:	460c      	mov	r4, r1
 802004c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020050:	4616      	mov	r6, r2
 8020052:	461f      	mov	r7, r3
 8020054:	4605      	mov	r5, r0
 8020056:	f001 fd55 	bl	8021b04 <_localeconv_r>
 802005a:	f8d0 a000 	ldr.w	sl, [r0]
 802005e:	4650      	mov	r0, sl
 8020060:	f7e0 f8de 	bl	8000220 <strlen>
 8020064:	2300      	movs	r3, #0
 8020066:	930a      	str	r3, [sp, #40]	; 0x28
 8020068:	6823      	ldr	r3, [r4, #0]
 802006a:	9305      	str	r3, [sp, #20]
 802006c:	f8d8 3000 	ldr.w	r3, [r8]
 8020070:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020074:	3307      	adds	r3, #7
 8020076:	f023 0307 	bic.w	r3, r3, #7
 802007a:	f103 0208 	add.w	r2, r3, #8
 802007e:	f8c8 2000 	str.w	r2, [r8]
 8020082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020086:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802008a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 802008e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020092:	9307      	str	r3, [sp, #28]
 8020094:	f8cd 8018 	str.w	r8, [sp, #24]
 8020098:	ee08 0a10 	vmov	s16, r0
 802009c:	4b9f      	ldr	r3, [pc, #636]	; (802031c <_printf_float+0x2dc>)
 802009e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80200a2:	f04f 32ff 	mov.w	r2, #4294967295
 80200a6:	f7e0 fd69 	bl	8000b7c <__aeabi_dcmpun>
 80200aa:	bb88      	cbnz	r0, 8020110 <_printf_float+0xd0>
 80200ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80200b0:	4b9a      	ldr	r3, [pc, #616]	; (802031c <_printf_float+0x2dc>)
 80200b2:	f04f 32ff 	mov.w	r2, #4294967295
 80200b6:	f7e0 fd43 	bl	8000b40 <__aeabi_dcmple>
 80200ba:	bb48      	cbnz	r0, 8020110 <_printf_float+0xd0>
 80200bc:	2200      	movs	r2, #0
 80200be:	2300      	movs	r3, #0
 80200c0:	4640      	mov	r0, r8
 80200c2:	4649      	mov	r1, r9
 80200c4:	f7e0 fd32 	bl	8000b2c <__aeabi_dcmplt>
 80200c8:	b110      	cbz	r0, 80200d0 <_printf_float+0x90>
 80200ca:	232d      	movs	r3, #45	; 0x2d
 80200cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80200d0:	4b93      	ldr	r3, [pc, #588]	; (8020320 <_printf_float+0x2e0>)
 80200d2:	4894      	ldr	r0, [pc, #592]	; (8020324 <_printf_float+0x2e4>)
 80200d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80200d8:	bf94      	ite	ls
 80200da:	4698      	movls	r8, r3
 80200dc:	4680      	movhi	r8, r0
 80200de:	2303      	movs	r3, #3
 80200e0:	6123      	str	r3, [r4, #16]
 80200e2:	9b05      	ldr	r3, [sp, #20]
 80200e4:	f023 0204 	bic.w	r2, r3, #4
 80200e8:	6022      	str	r2, [r4, #0]
 80200ea:	f04f 0900 	mov.w	r9, #0
 80200ee:	9700      	str	r7, [sp, #0]
 80200f0:	4633      	mov	r3, r6
 80200f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80200f4:	4621      	mov	r1, r4
 80200f6:	4628      	mov	r0, r5
 80200f8:	f000 f9d8 	bl	80204ac <_printf_common>
 80200fc:	3001      	adds	r0, #1
 80200fe:	f040 8090 	bne.w	8020222 <_printf_float+0x1e2>
 8020102:	f04f 30ff 	mov.w	r0, #4294967295
 8020106:	b00d      	add	sp, #52	; 0x34
 8020108:	ecbd 8b02 	vpop	{d8}
 802010c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020110:	4642      	mov	r2, r8
 8020112:	464b      	mov	r3, r9
 8020114:	4640      	mov	r0, r8
 8020116:	4649      	mov	r1, r9
 8020118:	f7e0 fd30 	bl	8000b7c <__aeabi_dcmpun>
 802011c:	b140      	cbz	r0, 8020130 <_printf_float+0xf0>
 802011e:	464b      	mov	r3, r9
 8020120:	2b00      	cmp	r3, #0
 8020122:	bfbc      	itt	lt
 8020124:	232d      	movlt	r3, #45	; 0x2d
 8020126:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 802012a:	487f      	ldr	r0, [pc, #508]	; (8020328 <_printf_float+0x2e8>)
 802012c:	4b7f      	ldr	r3, [pc, #508]	; (802032c <_printf_float+0x2ec>)
 802012e:	e7d1      	b.n	80200d4 <_printf_float+0x94>
 8020130:	6863      	ldr	r3, [r4, #4]
 8020132:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8020136:	9206      	str	r2, [sp, #24]
 8020138:	1c5a      	adds	r2, r3, #1
 802013a:	d13f      	bne.n	80201bc <_printf_float+0x17c>
 802013c:	2306      	movs	r3, #6
 802013e:	6063      	str	r3, [r4, #4]
 8020140:	9b05      	ldr	r3, [sp, #20]
 8020142:	6861      	ldr	r1, [r4, #4]
 8020144:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020148:	2300      	movs	r3, #0
 802014a:	9303      	str	r3, [sp, #12]
 802014c:	ab0a      	add	r3, sp, #40	; 0x28
 802014e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8020152:	ab09      	add	r3, sp, #36	; 0x24
 8020154:	ec49 8b10 	vmov	d0, r8, r9
 8020158:	9300      	str	r3, [sp, #0]
 802015a:	6022      	str	r2, [r4, #0]
 802015c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020160:	4628      	mov	r0, r5
 8020162:	f7ff fecd 	bl	801ff00 <__cvt>
 8020166:	9b06      	ldr	r3, [sp, #24]
 8020168:	9909      	ldr	r1, [sp, #36]	; 0x24
 802016a:	2b47      	cmp	r3, #71	; 0x47
 802016c:	4680      	mov	r8, r0
 802016e:	d108      	bne.n	8020182 <_printf_float+0x142>
 8020170:	1cc8      	adds	r0, r1, #3
 8020172:	db02      	blt.n	802017a <_printf_float+0x13a>
 8020174:	6863      	ldr	r3, [r4, #4]
 8020176:	4299      	cmp	r1, r3
 8020178:	dd41      	ble.n	80201fe <_printf_float+0x1be>
 802017a:	f1ab 0b02 	sub.w	fp, fp, #2
 802017e:	fa5f fb8b 	uxtb.w	fp, fp
 8020182:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020186:	d820      	bhi.n	80201ca <_printf_float+0x18a>
 8020188:	3901      	subs	r1, #1
 802018a:	465a      	mov	r2, fp
 802018c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020190:	9109      	str	r1, [sp, #36]	; 0x24
 8020192:	f7ff ff17 	bl	801ffc4 <__exponent>
 8020196:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020198:	1813      	adds	r3, r2, r0
 802019a:	2a01      	cmp	r2, #1
 802019c:	4681      	mov	r9, r0
 802019e:	6123      	str	r3, [r4, #16]
 80201a0:	dc02      	bgt.n	80201a8 <_printf_float+0x168>
 80201a2:	6822      	ldr	r2, [r4, #0]
 80201a4:	07d2      	lsls	r2, r2, #31
 80201a6:	d501      	bpl.n	80201ac <_printf_float+0x16c>
 80201a8:	3301      	adds	r3, #1
 80201aa:	6123      	str	r3, [r4, #16]
 80201ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80201b0:	2b00      	cmp	r3, #0
 80201b2:	d09c      	beq.n	80200ee <_printf_float+0xae>
 80201b4:	232d      	movs	r3, #45	; 0x2d
 80201b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80201ba:	e798      	b.n	80200ee <_printf_float+0xae>
 80201bc:	9a06      	ldr	r2, [sp, #24]
 80201be:	2a47      	cmp	r2, #71	; 0x47
 80201c0:	d1be      	bne.n	8020140 <_printf_float+0x100>
 80201c2:	2b00      	cmp	r3, #0
 80201c4:	d1bc      	bne.n	8020140 <_printf_float+0x100>
 80201c6:	2301      	movs	r3, #1
 80201c8:	e7b9      	b.n	802013e <_printf_float+0xfe>
 80201ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80201ce:	d118      	bne.n	8020202 <_printf_float+0x1c2>
 80201d0:	2900      	cmp	r1, #0
 80201d2:	6863      	ldr	r3, [r4, #4]
 80201d4:	dd0b      	ble.n	80201ee <_printf_float+0x1ae>
 80201d6:	6121      	str	r1, [r4, #16]
 80201d8:	b913      	cbnz	r3, 80201e0 <_printf_float+0x1a0>
 80201da:	6822      	ldr	r2, [r4, #0]
 80201dc:	07d0      	lsls	r0, r2, #31
 80201de:	d502      	bpl.n	80201e6 <_printf_float+0x1a6>
 80201e0:	3301      	adds	r3, #1
 80201e2:	440b      	add	r3, r1
 80201e4:	6123      	str	r3, [r4, #16]
 80201e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80201e8:	f04f 0900 	mov.w	r9, #0
 80201ec:	e7de      	b.n	80201ac <_printf_float+0x16c>
 80201ee:	b913      	cbnz	r3, 80201f6 <_printf_float+0x1b6>
 80201f0:	6822      	ldr	r2, [r4, #0]
 80201f2:	07d2      	lsls	r2, r2, #31
 80201f4:	d501      	bpl.n	80201fa <_printf_float+0x1ba>
 80201f6:	3302      	adds	r3, #2
 80201f8:	e7f4      	b.n	80201e4 <_printf_float+0x1a4>
 80201fa:	2301      	movs	r3, #1
 80201fc:	e7f2      	b.n	80201e4 <_printf_float+0x1a4>
 80201fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8020202:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020204:	4299      	cmp	r1, r3
 8020206:	db05      	blt.n	8020214 <_printf_float+0x1d4>
 8020208:	6823      	ldr	r3, [r4, #0]
 802020a:	6121      	str	r1, [r4, #16]
 802020c:	07d8      	lsls	r0, r3, #31
 802020e:	d5ea      	bpl.n	80201e6 <_printf_float+0x1a6>
 8020210:	1c4b      	adds	r3, r1, #1
 8020212:	e7e7      	b.n	80201e4 <_printf_float+0x1a4>
 8020214:	2900      	cmp	r1, #0
 8020216:	bfd4      	ite	le
 8020218:	f1c1 0202 	rsble	r2, r1, #2
 802021c:	2201      	movgt	r2, #1
 802021e:	4413      	add	r3, r2
 8020220:	e7e0      	b.n	80201e4 <_printf_float+0x1a4>
 8020222:	6823      	ldr	r3, [r4, #0]
 8020224:	055a      	lsls	r2, r3, #21
 8020226:	d407      	bmi.n	8020238 <_printf_float+0x1f8>
 8020228:	6923      	ldr	r3, [r4, #16]
 802022a:	4642      	mov	r2, r8
 802022c:	4631      	mov	r1, r6
 802022e:	4628      	mov	r0, r5
 8020230:	47b8      	blx	r7
 8020232:	3001      	adds	r0, #1
 8020234:	d12c      	bne.n	8020290 <_printf_float+0x250>
 8020236:	e764      	b.n	8020102 <_printf_float+0xc2>
 8020238:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802023c:	f240 80e0 	bls.w	8020400 <_printf_float+0x3c0>
 8020240:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020244:	2200      	movs	r2, #0
 8020246:	2300      	movs	r3, #0
 8020248:	f7e0 fc66 	bl	8000b18 <__aeabi_dcmpeq>
 802024c:	2800      	cmp	r0, #0
 802024e:	d034      	beq.n	80202ba <_printf_float+0x27a>
 8020250:	4a37      	ldr	r2, [pc, #220]	; (8020330 <_printf_float+0x2f0>)
 8020252:	2301      	movs	r3, #1
 8020254:	4631      	mov	r1, r6
 8020256:	4628      	mov	r0, r5
 8020258:	47b8      	blx	r7
 802025a:	3001      	adds	r0, #1
 802025c:	f43f af51 	beq.w	8020102 <_printf_float+0xc2>
 8020260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020264:	429a      	cmp	r2, r3
 8020266:	db02      	blt.n	802026e <_printf_float+0x22e>
 8020268:	6823      	ldr	r3, [r4, #0]
 802026a:	07d8      	lsls	r0, r3, #31
 802026c:	d510      	bpl.n	8020290 <_printf_float+0x250>
 802026e:	ee18 3a10 	vmov	r3, s16
 8020272:	4652      	mov	r2, sl
 8020274:	4631      	mov	r1, r6
 8020276:	4628      	mov	r0, r5
 8020278:	47b8      	blx	r7
 802027a:	3001      	adds	r0, #1
 802027c:	f43f af41 	beq.w	8020102 <_printf_float+0xc2>
 8020280:	f04f 0800 	mov.w	r8, #0
 8020284:	f104 091a 	add.w	r9, r4, #26
 8020288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802028a:	3b01      	subs	r3, #1
 802028c:	4543      	cmp	r3, r8
 802028e:	dc09      	bgt.n	80202a4 <_printf_float+0x264>
 8020290:	6823      	ldr	r3, [r4, #0]
 8020292:	079b      	lsls	r3, r3, #30
 8020294:	f100 8105 	bmi.w	80204a2 <_printf_float+0x462>
 8020298:	68e0      	ldr	r0, [r4, #12]
 802029a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802029c:	4298      	cmp	r0, r3
 802029e:	bfb8      	it	lt
 80202a0:	4618      	movlt	r0, r3
 80202a2:	e730      	b.n	8020106 <_printf_float+0xc6>
 80202a4:	2301      	movs	r3, #1
 80202a6:	464a      	mov	r2, r9
 80202a8:	4631      	mov	r1, r6
 80202aa:	4628      	mov	r0, r5
 80202ac:	47b8      	blx	r7
 80202ae:	3001      	adds	r0, #1
 80202b0:	f43f af27 	beq.w	8020102 <_printf_float+0xc2>
 80202b4:	f108 0801 	add.w	r8, r8, #1
 80202b8:	e7e6      	b.n	8020288 <_printf_float+0x248>
 80202ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202bc:	2b00      	cmp	r3, #0
 80202be:	dc39      	bgt.n	8020334 <_printf_float+0x2f4>
 80202c0:	4a1b      	ldr	r2, [pc, #108]	; (8020330 <_printf_float+0x2f0>)
 80202c2:	2301      	movs	r3, #1
 80202c4:	4631      	mov	r1, r6
 80202c6:	4628      	mov	r0, r5
 80202c8:	47b8      	blx	r7
 80202ca:	3001      	adds	r0, #1
 80202cc:	f43f af19 	beq.w	8020102 <_printf_float+0xc2>
 80202d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80202d4:	4313      	orrs	r3, r2
 80202d6:	d102      	bne.n	80202de <_printf_float+0x29e>
 80202d8:	6823      	ldr	r3, [r4, #0]
 80202da:	07d9      	lsls	r1, r3, #31
 80202dc:	d5d8      	bpl.n	8020290 <_printf_float+0x250>
 80202de:	ee18 3a10 	vmov	r3, s16
 80202e2:	4652      	mov	r2, sl
 80202e4:	4631      	mov	r1, r6
 80202e6:	4628      	mov	r0, r5
 80202e8:	47b8      	blx	r7
 80202ea:	3001      	adds	r0, #1
 80202ec:	f43f af09 	beq.w	8020102 <_printf_float+0xc2>
 80202f0:	f04f 0900 	mov.w	r9, #0
 80202f4:	f104 0a1a 	add.w	sl, r4, #26
 80202f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202fa:	425b      	negs	r3, r3
 80202fc:	454b      	cmp	r3, r9
 80202fe:	dc01      	bgt.n	8020304 <_printf_float+0x2c4>
 8020300:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020302:	e792      	b.n	802022a <_printf_float+0x1ea>
 8020304:	2301      	movs	r3, #1
 8020306:	4652      	mov	r2, sl
 8020308:	4631      	mov	r1, r6
 802030a:	4628      	mov	r0, r5
 802030c:	47b8      	blx	r7
 802030e:	3001      	adds	r0, #1
 8020310:	f43f aef7 	beq.w	8020102 <_printf_float+0xc2>
 8020314:	f109 0901 	add.w	r9, r9, #1
 8020318:	e7ee      	b.n	80202f8 <_printf_float+0x2b8>
 802031a:	bf00      	nop
 802031c:	7fefffff 	.word	0x7fefffff
 8020320:	08024474 	.word	0x08024474
 8020324:	08024478 	.word	0x08024478
 8020328:	08024480 	.word	0x08024480
 802032c:	0802447c 	.word	0x0802447c
 8020330:	08024484 	.word	0x08024484
 8020334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020338:	429a      	cmp	r2, r3
 802033a:	bfa8      	it	ge
 802033c:	461a      	movge	r2, r3
 802033e:	2a00      	cmp	r2, #0
 8020340:	4691      	mov	r9, r2
 8020342:	dc37      	bgt.n	80203b4 <_printf_float+0x374>
 8020344:	f04f 0b00 	mov.w	fp, #0
 8020348:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802034c:	f104 021a 	add.w	r2, r4, #26
 8020350:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020352:	9305      	str	r3, [sp, #20]
 8020354:	eba3 0309 	sub.w	r3, r3, r9
 8020358:	455b      	cmp	r3, fp
 802035a:	dc33      	bgt.n	80203c4 <_printf_float+0x384>
 802035c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020360:	429a      	cmp	r2, r3
 8020362:	db3b      	blt.n	80203dc <_printf_float+0x39c>
 8020364:	6823      	ldr	r3, [r4, #0]
 8020366:	07da      	lsls	r2, r3, #31
 8020368:	d438      	bmi.n	80203dc <_printf_float+0x39c>
 802036a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802036c:	9a05      	ldr	r2, [sp, #20]
 802036e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020370:	1a9a      	subs	r2, r3, r2
 8020372:	eba3 0901 	sub.w	r9, r3, r1
 8020376:	4591      	cmp	r9, r2
 8020378:	bfa8      	it	ge
 802037a:	4691      	movge	r9, r2
 802037c:	f1b9 0f00 	cmp.w	r9, #0
 8020380:	dc35      	bgt.n	80203ee <_printf_float+0x3ae>
 8020382:	f04f 0800 	mov.w	r8, #0
 8020386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802038a:	f104 0a1a 	add.w	sl, r4, #26
 802038e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020392:	1a9b      	subs	r3, r3, r2
 8020394:	eba3 0309 	sub.w	r3, r3, r9
 8020398:	4543      	cmp	r3, r8
 802039a:	f77f af79 	ble.w	8020290 <_printf_float+0x250>
 802039e:	2301      	movs	r3, #1
 80203a0:	4652      	mov	r2, sl
 80203a2:	4631      	mov	r1, r6
 80203a4:	4628      	mov	r0, r5
 80203a6:	47b8      	blx	r7
 80203a8:	3001      	adds	r0, #1
 80203aa:	f43f aeaa 	beq.w	8020102 <_printf_float+0xc2>
 80203ae:	f108 0801 	add.w	r8, r8, #1
 80203b2:	e7ec      	b.n	802038e <_printf_float+0x34e>
 80203b4:	4613      	mov	r3, r2
 80203b6:	4631      	mov	r1, r6
 80203b8:	4642      	mov	r2, r8
 80203ba:	4628      	mov	r0, r5
 80203bc:	47b8      	blx	r7
 80203be:	3001      	adds	r0, #1
 80203c0:	d1c0      	bne.n	8020344 <_printf_float+0x304>
 80203c2:	e69e      	b.n	8020102 <_printf_float+0xc2>
 80203c4:	2301      	movs	r3, #1
 80203c6:	4631      	mov	r1, r6
 80203c8:	4628      	mov	r0, r5
 80203ca:	9205      	str	r2, [sp, #20]
 80203cc:	47b8      	blx	r7
 80203ce:	3001      	adds	r0, #1
 80203d0:	f43f ae97 	beq.w	8020102 <_printf_float+0xc2>
 80203d4:	9a05      	ldr	r2, [sp, #20]
 80203d6:	f10b 0b01 	add.w	fp, fp, #1
 80203da:	e7b9      	b.n	8020350 <_printf_float+0x310>
 80203dc:	ee18 3a10 	vmov	r3, s16
 80203e0:	4652      	mov	r2, sl
 80203e2:	4631      	mov	r1, r6
 80203e4:	4628      	mov	r0, r5
 80203e6:	47b8      	blx	r7
 80203e8:	3001      	adds	r0, #1
 80203ea:	d1be      	bne.n	802036a <_printf_float+0x32a>
 80203ec:	e689      	b.n	8020102 <_printf_float+0xc2>
 80203ee:	9a05      	ldr	r2, [sp, #20]
 80203f0:	464b      	mov	r3, r9
 80203f2:	4442      	add	r2, r8
 80203f4:	4631      	mov	r1, r6
 80203f6:	4628      	mov	r0, r5
 80203f8:	47b8      	blx	r7
 80203fa:	3001      	adds	r0, #1
 80203fc:	d1c1      	bne.n	8020382 <_printf_float+0x342>
 80203fe:	e680      	b.n	8020102 <_printf_float+0xc2>
 8020400:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020402:	2a01      	cmp	r2, #1
 8020404:	dc01      	bgt.n	802040a <_printf_float+0x3ca>
 8020406:	07db      	lsls	r3, r3, #31
 8020408:	d538      	bpl.n	802047c <_printf_float+0x43c>
 802040a:	2301      	movs	r3, #1
 802040c:	4642      	mov	r2, r8
 802040e:	4631      	mov	r1, r6
 8020410:	4628      	mov	r0, r5
 8020412:	47b8      	blx	r7
 8020414:	3001      	adds	r0, #1
 8020416:	f43f ae74 	beq.w	8020102 <_printf_float+0xc2>
 802041a:	ee18 3a10 	vmov	r3, s16
 802041e:	4652      	mov	r2, sl
 8020420:	4631      	mov	r1, r6
 8020422:	4628      	mov	r0, r5
 8020424:	47b8      	blx	r7
 8020426:	3001      	adds	r0, #1
 8020428:	f43f ae6b 	beq.w	8020102 <_printf_float+0xc2>
 802042c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020430:	2200      	movs	r2, #0
 8020432:	2300      	movs	r3, #0
 8020434:	f7e0 fb70 	bl	8000b18 <__aeabi_dcmpeq>
 8020438:	b9d8      	cbnz	r0, 8020472 <_printf_float+0x432>
 802043a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802043c:	f108 0201 	add.w	r2, r8, #1
 8020440:	3b01      	subs	r3, #1
 8020442:	4631      	mov	r1, r6
 8020444:	4628      	mov	r0, r5
 8020446:	47b8      	blx	r7
 8020448:	3001      	adds	r0, #1
 802044a:	d10e      	bne.n	802046a <_printf_float+0x42a>
 802044c:	e659      	b.n	8020102 <_printf_float+0xc2>
 802044e:	2301      	movs	r3, #1
 8020450:	4652      	mov	r2, sl
 8020452:	4631      	mov	r1, r6
 8020454:	4628      	mov	r0, r5
 8020456:	47b8      	blx	r7
 8020458:	3001      	adds	r0, #1
 802045a:	f43f ae52 	beq.w	8020102 <_printf_float+0xc2>
 802045e:	f108 0801 	add.w	r8, r8, #1
 8020462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020464:	3b01      	subs	r3, #1
 8020466:	4543      	cmp	r3, r8
 8020468:	dcf1      	bgt.n	802044e <_printf_float+0x40e>
 802046a:	464b      	mov	r3, r9
 802046c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020470:	e6dc      	b.n	802022c <_printf_float+0x1ec>
 8020472:	f04f 0800 	mov.w	r8, #0
 8020476:	f104 0a1a 	add.w	sl, r4, #26
 802047a:	e7f2      	b.n	8020462 <_printf_float+0x422>
 802047c:	2301      	movs	r3, #1
 802047e:	4642      	mov	r2, r8
 8020480:	e7df      	b.n	8020442 <_printf_float+0x402>
 8020482:	2301      	movs	r3, #1
 8020484:	464a      	mov	r2, r9
 8020486:	4631      	mov	r1, r6
 8020488:	4628      	mov	r0, r5
 802048a:	47b8      	blx	r7
 802048c:	3001      	adds	r0, #1
 802048e:	f43f ae38 	beq.w	8020102 <_printf_float+0xc2>
 8020492:	f108 0801 	add.w	r8, r8, #1
 8020496:	68e3      	ldr	r3, [r4, #12]
 8020498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802049a:	1a5b      	subs	r3, r3, r1
 802049c:	4543      	cmp	r3, r8
 802049e:	dcf0      	bgt.n	8020482 <_printf_float+0x442>
 80204a0:	e6fa      	b.n	8020298 <_printf_float+0x258>
 80204a2:	f04f 0800 	mov.w	r8, #0
 80204a6:	f104 0919 	add.w	r9, r4, #25
 80204aa:	e7f4      	b.n	8020496 <_printf_float+0x456>

080204ac <_printf_common>:
 80204ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80204b0:	4616      	mov	r6, r2
 80204b2:	4699      	mov	r9, r3
 80204b4:	688a      	ldr	r2, [r1, #8]
 80204b6:	690b      	ldr	r3, [r1, #16]
 80204b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80204bc:	4293      	cmp	r3, r2
 80204be:	bfb8      	it	lt
 80204c0:	4613      	movlt	r3, r2
 80204c2:	6033      	str	r3, [r6, #0]
 80204c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80204c8:	4607      	mov	r7, r0
 80204ca:	460c      	mov	r4, r1
 80204cc:	b10a      	cbz	r2, 80204d2 <_printf_common+0x26>
 80204ce:	3301      	adds	r3, #1
 80204d0:	6033      	str	r3, [r6, #0]
 80204d2:	6823      	ldr	r3, [r4, #0]
 80204d4:	0699      	lsls	r1, r3, #26
 80204d6:	bf42      	ittt	mi
 80204d8:	6833      	ldrmi	r3, [r6, #0]
 80204da:	3302      	addmi	r3, #2
 80204dc:	6033      	strmi	r3, [r6, #0]
 80204de:	6825      	ldr	r5, [r4, #0]
 80204e0:	f015 0506 	ands.w	r5, r5, #6
 80204e4:	d106      	bne.n	80204f4 <_printf_common+0x48>
 80204e6:	f104 0a19 	add.w	sl, r4, #25
 80204ea:	68e3      	ldr	r3, [r4, #12]
 80204ec:	6832      	ldr	r2, [r6, #0]
 80204ee:	1a9b      	subs	r3, r3, r2
 80204f0:	42ab      	cmp	r3, r5
 80204f2:	dc26      	bgt.n	8020542 <_printf_common+0x96>
 80204f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80204f8:	1e13      	subs	r3, r2, #0
 80204fa:	6822      	ldr	r2, [r4, #0]
 80204fc:	bf18      	it	ne
 80204fe:	2301      	movne	r3, #1
 8020500:	0692      	lsls	r2, r2, #26
 8020502:	d42b      	bmi.n	802055c <_printf_common+0xb0>
 8020504:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8020508:	4649      	mov	r1, r9
 802050a:	4638      	mov	r0, r7
 802050c:	47c0      	blx	r8
 802050e:	3001      	adds	r0, #1
 8020510:	d01e      	beq.n	8020550 <_printf_common+0xa4>
 8020512:	6823      	ldr	r3, [r4, #0]
 8020514:	68e5      	ldr	r5, [r4, #12]
 8020516:	6832      	ldr	r2, [r6, #0]
 8020518:	f003 0306 	and.w	r3, r3, #6
 802051c:	2b04      	cmp	r3, #4
 802051e:	bf08      	it	eq
 8020520:	1aad      	subeq	r5, r5, r2
 8020522:	68a3      	ldr	r3, [r4, #8]
 8020524:	6922      	ldr	r2, [r4, #16]
 8020526:	bf0c      	ite	eq
 8020528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802052c:	2500      	movne	r5, #0
 802052e:	4293      	cmp	r3, r2
 8020530:	bfc4      	itt	gt
 8020532:	1a9b      	subgt	r3, r3, r2
 8020534:	18ed      	addgt	r5, r5, r3
 8020536:	2600      	movs	r6, #0
 8020538:	341a      	adds	r4, #26
 802053a:	42b5      	cmp	r5, r6
 802053c:	d11a      	bne.n	8020574 <_printf_common+0xc8>
 802053e:	2000      	movs	r0, #0
 8020540:	e008      	b.n	8020554 <_printf_common+0xa8>
 8020542:	2301      	movs	r3, #1
 8020544:	4652      	mov	r2, sl
 8020546:	4649      	mov	r1, r9
 8020548:	4638      	mov	r0, r7
 802054a:	47c0      	blx	r8
 802054c:	3001      	adds	r0, #1
 802054e:	d103      	bne.n	8020558 <_printf_common+0xac>
 8020550:	f04f 30ff 	mov.w	r0, #4294967295
 8020554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020558:	3501      	adds	r5, #1
 802055a:	e7c6      	b.n	80204ea <_printf_common+0x3e>
 802055c:	18e1      	adds	r1, r4, r3
 802055e:	1c5a      	adds	r2, r3, #1
 8020560:	2030      	movs	r0, #48	; 0x30
 8020562:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8020566:	4422      	add	r2, r4
 8020568:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802056c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020570:	3302      	adds	r3, #2
 8020572:	e7c7      	b.n	8020504 <_printf_common+0x58>
 8020574:	2301      	movs	r3, #1
 8020576:	4622      	mov	r2, r4
 8020578:	4649      	mov	r1, r9
 802057a:	4638      	mov	r0, r7
 802057c:	47c0      	blx	r8
 802057e:	3001      	adds	r0, #1
 8020580:	d0e6      	beq.n	8020550 <_printf_common+0xa4>
 8020582:	3601      	adds	r6, #1
 8020584:	e7d9      	b.n	802053a <_printf_common+0x8e>
	...

08020588 <_printf_i>:
 8020588:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802058c:	7e0f      	ldrb	r7, [r1, #24]
 802058e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020590:	2f78      	cmp	r7, #120	; 0x78
 8020592:	4691      	mov	r9, r2
 8020594:	4680      	mov	r8, r0
 8020596:	460c      	mov	r4, r1
 8020598:	469a      	mov	sl, r3
 802059a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802059e:	d807      	bhi.n	80205b0 <_printf_i+0x28>
 80205a0:	2f62      	cmp	r7, #98	; 0x62
 80205a2:	d80a      	bhi.n	80205ba <_printf_i+0x32>
 80205a4:	2f00      	cmp	r7, #0
 80205a6:	f000 80d8 	beq.w	802075a <_printf_i+0x1d2>
 80205aa:	2f58      	cmp	r7, #88	; 0x58
 80205ac:	f000 80a3 	beq.w	80206f6 <_printf_i+0x16e>
 80205b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80205b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80205b8:	e03a      	b.n	8020630 <_printf_i+0xa8>
 80205ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80205be:	2b15      	cmp	r3, #21
 80205c0:	d8f6      	bhi.n	80205b0 <_printf_i+0x28>
 80205c2:	a101      	add	r1, pc, #4	; (adr r1, 80205c8 <_printf_i+0x40>)
 80205c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80205c8:	08020621 	.word	0x08020621
 80205cc:	08020635 	.word	0x08020635
 80205d0:	080205b1 	.word	0x080205b1
 80205d4:	080205b1 	.word	0x080205b1
 80205d8:	080205b1 	.word	0x080205b1
 80205dc:	080205b1 	.word	0x080205b1
 80205e0:	08020635 	.word	0x08020635
 80205e4:	080205b1 	.word	0x080205b1
 80205e8:	080205b1 	.word	0x080205b1
 80205ec:	080205b1 	.word	0x080205b1
 80205f0:	080205b1 	.word	0x080205b1
 80205f4:	08020741 	.word	0x08020741
 80205f8:	08020665 	.word	0x08020665
 80205fc:	08020723 	.word	0x08020723
 8020600:	080205b1 	.word	0x080205b1
 8020604:	080205b1 	.word	0x080205b1
 8020608:	08020763 	.word	0x08020763
 802060c:	080205b1 	.word	0x080205b1
 8020610:	08020665 	.word	0x08020665
 8020614:	080205b1 	.word	0x080205b1
 8020618:	080205b1 	.word	0x080205b1
 802061c:	0802072b 	.word	0x0802072b
 8020620:	682b      	ldr	r3, [r5, #0]
 8020622:	1d1a      	adds	r2, r3, #4
 8020624:	681b      	ldr	r3, [r3, #0]
 8020626:	602a      	str	r2, [r5, #0]
 8020628:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802062c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8020630:	2301      	movs	r3, #1
 8020632:	e0a3      	b.n	802077c <_printf_i+0x1f4>
 8020634:	6820      	ldr	r0, [r4, #0]
 8020636:	6829      	ldr	r1, [r5, #0]
 8020638:	0606      	lsls	r6, r0, #24
 802063a:	f101 0304 	add.w	r3, r1, #4
 802063e:	d50a      	bpl.n	8020656 <_printf_i+0xce>
 8020640:	680e      	ldr	r6, [r1, #0]
 8020642:	602b      	str	r3, [r5, #0]
 8020644:	2e00      	cmp	r6, #0
 8020646:	da03      	bge.n	8020650 <_printf_i+0xc8>
 8020648:	232d      	movs	r3, #45	; 0x2d
 802064a:	4276      	negs	r6, r6
 802064c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020650:	485e      	ldr	r0, [pc, #376]	; (80207cc <_printf_i+0x244>)
 8020652:	230a      	movs	r3, #10
 8020654:	e019      	b.n	802068a <_printf_i+0x102>
 8020656:	680e      	ldr	r6, [r1, #0]
 8020658:	602b      	str	r3, [r5, #0]
 802065a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802065e:	bf18      	it	ne
 8020660:	b236      	sxthne	r6, r6
 8020662:	e7ef      	b.n	8020644 <_printf_i+0xbc>
 8020664:	682b      	ldr	r3, [r5, #0]
 8020666:	6820      	ldr	r0, [r4, #0]
 8020668:	1d19      	adds	r1, r3, #4
 802066a:	6029      	str	r1, [r5, #0]
 802066c:	0601      	lsls	r1, r0, #24
 802066e:	d501      	bpl.n	8020674 <_printf_i+0xec>
 8020670:	681e      	ldr	r6, [r3, #0]
 8020672:	e002      	b.n	802067a <_printf_i+0xf2>
 8020674:	0646      	lsls	r6, r0, #25
 8020676:	d5fb      	bpl.n	8020670 <_printf_i+0xe8>
 8020678:	881e      	ldrh	r6, [r3, #0]
 802067a:	4854      	ldr	r0, [pc, #336]	; (80207cc <_printf_i+0x244>)
 802067c:	2f6f      	cmp	r7, #111	; 0x6f
 802067e:	bf0c      	ite	eq
 8020680:	2308      	moveq	r3, #8
 8020682:	230a      	movne	r3, #10
 8020684:	2100      	movs	r1, #0
 8020686:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802068a:	6865      	ldr	r5, [r4, #4]
 802068c:	60a5      	str	r5, [r4, #8]
 802068e:	2d00      	cmp	r5, #0
 8020690:	bfa2      	ittt	ge
 8020692:	6821      	ldrge	r1, [r4, #0]
 8020694:	f021 0104 	bicge.w	r1, r1, #4
 8020698:	6021      	strge	r1, [r4, #0]
 802069a:	b90e      	cbnz	r6, 80206a0 <_printf_i+0x118>
 802069c:	2d00      	cmp	r5, #0
 802069e:	d04d      	beq.n	802073c <_printf_i+0x1b4>
 80206a0:	4615      	mov	r5, r2
 80206a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80206a6:	fb03 6711 	mls	r7, r3, r1, r6
 80206aa:	5dc7      	ldrb	r7, [r0, r7]
 80206ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80206b0:	4637      	mov	r7, r6
 80206b2:	42bb      	cmp	r3, r7
 80206b4:	460e      	mov	r6, r1
 80206b6:	d9f4      	bls.n	80206a2 <_printf_i+0x11a>
 80206b8:	2b08      	cmp	r3, #8
 80206ba:	d10b      	bne.n	80206d4 <_printf_i+0x14c>
 80206bc:	6823      	ldr	r3, [r4, #0]
 80206be:	07de      	lsls	r6, r3, #31
 80206c0:	d508      	bpl.n	80206d4 <_printf_i+0x14c>
 80206c2:	6923      	ldr	r3, [r4, #16]
 80206c4:	6861      	ldr	r1, [r4, #4]
 80206c6:	4299      	cmp	r1, r3
 80206c8:	bfde      	ittt	le
 80206ca:	2330      	movle	r3, #48	; 0x30
 80206cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80206d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80206d4:	1b52      	subs	r2, r2, r5
 80206d6:	6122      	str	r2, [r4, #16]
 80206d8:	f8cd a000 	str.w	sl, [sp]
 80206dc:	464b      	mov	r3, r9
 80206de:	aa03      	add	r2, sp, #12
 80206e0:	4621      	mov	r1, r4
 80206e2:	4640      	mov	r0, r8
 80206e4:	f7ff fee2 	bl	80204ac <_printf_common>
 80206e8:	3001      	adds	r0, #1
 80206ea:	d14c      	bne.n	8020786 <_printf_i+0x1fe>
 80206ec:	f04f 30ff 	mov.w	r0, #4294967295
 80206f0:	b004      	add	sp, #16
 80206f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80206f6:	4835      	ldr	r0, [pc, #212]	; (80207cc <_printf_i+0x244>)
 80206f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80206fc:	6829      	ldr	r1, [r5, #0]
 80206fe:	6823      	ldr	r3, [r4, #0]
 8020700:	f851 6b04 	ldr.w	r6, [r1], #4
 8020704:	6029      	str	r1, [r5, #0]
 8020706:	061d      	lsls	r5, r3, #24
 8020708:	d514      	bpl.n	8020734 <_printf_i+0x1ac>
 802070a:	07df      	lsls	r7, r3, #31
 802070c:	bf44      	itt	mi
 802070e:	f043 0320 	orrmi.w	r3, r3, #32
 8020712:	6023      	strmi	r3, [r4, #0]
 8020714:	b91e      	cbnz	r6, 802071e <_printf_i+0x196>
 8020716:	6823      	ldr	r3, [r4, #0]
 8020718:	f023 0320 	bic.w	r3, r3, #32
 802071c:	6023      	str	r3, [r4, #0]
 802071e:	2310      	movs	r3, #16
 8020720:	e7b0      	b.n	8020684 <_printf_i+0xfc>
 8020722:	6823      	ldr	r3, [r4, #0]
 8020724:	f043 0320 	orr.w	r3, r3, #32
 8020728:	6023      	str	r3, [r4, #0]
 802072a:	2378      	movs	r3, #120	; 0x78
 802072c:	4828      	ldr	r0, [pc, #160]	; (80207d0 <_printf_i+0x248>)
 802072e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8020732:	e7e3      	b.n	80206fc <_printf_i+0x174>
 8020734:	0659      	lsls	r1, r3, #25
 8020736:	bf48      	it	mi
 8020738:	b2b6      	uxthmi	r6, r6
 802073a:	e7e6      	b.n	802070a <_printf_i+0x182>
 802073c:	4615      	mov	r5, r2
 802073e:	e7bb      	b.n	80206b8 <_printf_i+0x130>
 8020740:	682b      	ldr	r3, [r5, #0]
 8020742:	6826      	ldr	r6, [r4, #0]
 8020744:	6961      	ldr	r1, [r4, #20]
 8020746:	1d18      	adds	r0, r3, #4
 8020748:	6028      	str	r0, [r5, #0]
 802074a:	0635      	lsls	r5, r6, #24
 802074c:	681b      	ldr	r3, [r3, #0]
 802074e:	d501      	bpl.n	8020754 <_printf_i+0x1cc>
 8020750:	6019      	str	r1, [r3, #0]
 8020752:	e002      	b.n	802075a <_printf_i+0x1d2>
 8020754:	0670      	lsls	r0, r6, #25
 8020756:	d5fb      	bpl.n	8020750 <_printf_i+0x1c8>
 8020758:	8019      	strh	r1, [r3, #0]
 802075a:	2300      	movs	r3, #0
 802075c:	6123      	str	r3, [r4, #16]
 802075e:	4615      	mov	r5, r2
 8020760:	e7ba      	b.n	80206d8 <_printf_i+0x150>
 8020762:	682b      	ldr	r3, [r5, #0]
 8020764:	1d1a      	adds	r2, r3, #4
 8020766:	602a      	str	r2, [r5, #0]
 8020768:	681d      	ldr	r5, [r3, #0]
 802076a:	6862      	ldr	r2, [r4, #4]
 802076c:	2100      	movs	r1, #0
 802076e:	4628      	mov	r0, r5
 8020770:	f7df fd5e 	bl	8000230 <memchr>
 8020774:	b108      	cbz	r0, 802077a <_printf_i+0x1f2>
 8020776:	1b40      	subs	r0, r0, r5
 8020778:	6060      	str	r0, [r4, #4]
 802077a:	6863      	ldr	r3, [r4, #4]
 802077c:	6123      	str	r3, [r4, #16]
 802077e:	2300      	movs	r3, #0
 8020780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020784:	e7a8      	b.n	80206d8 <_printf_i+0x150>
 8020786:	6923      	ldr	r3, [r4, #16]
 8020788:	462a      	mov	r2, r5
 802078a:	4649      	mov	r1, r9
 802078c:	4640      	mov	r0, r8
 802078e:	47d0      	blx	sl
 8020790:	3001      	adds	r0, #1
 8020792:	d0ab      	beq.n	80206ec <_printf_i+0x164>
 8020794:	6823      	ldr	r3, [r4, #0]
 8020796:	079b      	lsls	r3, r3, #30
 8020798:	d413      	bmi.n	80207c2 <_printf_i+0x23a>
 802079a:	68e0      	ldr	r0, [r4, #12]
 802079c:	9b03      	ldr	r3, [sp, #12]
 802079e:	4298      	cmp	r0, r3
 80207a0:	bfb8      	it	lt
 80207a2:	4618      	movlt	r0, r3
 80207a4:	e7a4      	b.n	80206f0 <_printf_i+0x168>
 80207a6:	2301      	movs	r3, #1
 80207a8:	4632      	mov	r2, r6
 80207aa:	4649      	mov	r1, r9
 80207ac:	4640      	mov	r0, r8
 80207ae:	47d0      	blx	sl
 80207b0:	3001      	adds	r0, #1
 80207b2:	d09b      	beq.n	80206ec <_printf_i+0x164>
 80207b4:	3501      	adds	r5, #1
 80207b6:	68e3      	ldr	r3, [r4, #12]
 80207b8:	9903      	ldr	r1, [sp, #12]
 80207ba:	1a5b      	subs	r3, r3, r1
 80207bc:	42ab      	cmp	r3, r5
 80207be:	dcf2      	bgt.n	80207a6 <_printf_i+0x21e>
 80207c0:	e7eb      	b.n	802079a <_printf_i+0x212>
 80207c2:	2500      	movs	r5, #0
 80207c4:	f104 0619 	add.w	r6, r4, #25
 80207c8:	e7f5      	b.n	80207b6 <_printf_i+0x22e>
 80207ca:	bf00      	nop
 80207cc:	08024486 	.word	0x08024486
 80207d0:	08024497 	.word	0x08024497

080207d4 <iprintf>:
 80207d4:	b40f      	push	{r0, r1, r2, r3}
 80207d6:	4b0a      	ldr	r3, [pc, #40]	; (8020800 <iprintf+0x2c>)
 80207d8:	b513      	push	{r0, r1, r4, lr}
 80207da:	681c      	ldr	r4, [r3, #0]
 80207dc:	b124      	cbz	r4, 80207e8 <iprintf+0x14>
 80207de:	69a3      	ldr	r3, [r4, #24]
 80207e0:	b913      	cbnz	r3, 80207e8 <iprintf+0x14>
 80207e2:	4620      	mov	r0, r4
 80207e4:	f001 f8f0 	bl	80219c8 <__sinit>
 80207e8:	ab05      	add	r3, sp, #20
 80207ea:	9a04      	ldr	r2, [sp, #16]
 80207ec:	68a1      	ldr	r1, [r4, #8]
 80207ee:	9301      	str	r3, [sp, #4]
 80207f0:	4620      	mov	r0, r4
 80207f2:	f001 fe9f 	bl	8022534 <_vfiprintf_r>
 80207f6:	b002      	add	sp, #8
 80207f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80207fc:	b004      	add	sp, #16
 80207fe:	4770      	bx	lr
 8020800:	2000002c 	.word	0x2000002c

08020804 <putchar>:
 8020804:	4b09      	ldr	r3, [pc, #36]	; (802082c <putchar+0x28>)
 8020806:	b513      	push	{r0, r1, r4, lr}
 8020808:	681c      	ldr	r4, [r3, #0]
 802080a:	4601      	mov	r1, r0
 802080c:	b134      	cbz	r4, 802081c <putchar+0x18>
 802080e:	69a3      	ldr	r3, [r4, #24]
 8020810:	b923      	cbnz	r3, 802081c <putchar+0x18>
 8020812:	9001      	str	r0, [sp, #4]
 8020814:	4620      	mov	r0, r4
 8020816:	f001 f8d7 	bl	80219c8 <__sinit>
 802081a:	9901      	ldr	r1, [sp, #4]
 802081c:	68a2      	ldr	r2, [r4, #8]
 802081e:	4620      	mov	r0, r4
 8020820:	b002      	add	sp, #8
 8020822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020826:	f001 bfb5 	b.w	8022794 <_putc_r>
 802082a:	bf00      	nop
 802082c:	2000002c 	.word	0x2000002c

08020830 <_puts_r>:
 8020830:	b570      	push	{r4, r5, r6, lr}
 8020832:	460e      	mov	r6, r1
 8020834:	4605      	mov	r5, r0
 8020836:	b118      	cbz	r0, 8020840 <_puts_r+0x10>
 8020838:	6983      	ldr	r3, [r0, #24]
 802083a:	b90b      	cbnz	r3, 8020840 <_puts_r+0x10>
 802083c:	f001 f8c4 	bl	80219c8 <__sinit>
 8020840:	69ab      	ldr	r3, [r5, #24]
 8020842:	68ac      	ldr	r4, [r5, #8]
 8020844:	b913      	cbnz	r3, 802084c <_puts_r+0x1c>
 8020846:	4628      	mov	r0, r5
 8020848:	f001 f8be 	bl	80219c8 <__sinit>
 802084c:	4b2c      	ldr	r3, [pc, #176]	; (8020900 <_puts_r+0xd0>)
 802084e:	429c      	cmp	r4, r3
 8020850:	d120      	bne.n	8020894 <_puts_r+0x64>
 8020852:	686c      	ldr	r4, [r5, #4]
 8020854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020856:	07db      	lsls	r3, r3, #31
 8020858:	d405      	bmi.n	8020866 <_puts_r+0x36>
 802085a:	89a3      	ldrh	r3, [r4, #12]
 802085c:	0598      	lsls	r0, r3, #22
 802085e:	d402      	bmi.n	8020866 <_puts_r+0x36>
 8020860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020862:	f001 f954 	bl	8021b0e <__retarget_lock_acquire_recursive>
 8020866:	89a3      	ldrh	r3, [r4, #12]
 8020868:	0719      	lsls	r1, r3, #28
 802086a:	d51d      	bpl.n	80208a8 <_puts_r+0x78>
 802086c:	6923      	ldr	r3, [r4, #16]
 802086e:	b1db      	cbz	r3, 80208a8 <_puts_r+0x78>
 8020870:	3e01      	subs	r6, #1
 8020872:	68a3      	ldr	r3, [r4, #8]
 8020874:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020878:	3b01      	subs	r3, #1
 802087a:	60a3      	str	r3, [r4, #8]
 802087c:	bb39      	cbnz	r1, 80208ce <_puts_r+0x9e>
 802087e:	2b00      	cmp	r3, #0
 8020880:	da38      	bge.n	80208f4 <_puts_r+0xc4>
 8020882:	4622      	mov	r2, r4
 8020884:	210a      	movs	r1, #10
 8020886:	4628      	mov	r0, r5
 8020888:	f000 f848 	bl	802091c <__swbuf_r>
 802088c:	3001      	adds	r0, #1
 802088e:	d011      	beq.n	80208b4 <_puts_r+0x84>
 8020890:	250a      	movs	r5, #10
 8020892:	e011      	b.n	80208b8 <_puts_r+0x88>
 8020894:	4b1b      	ldr	r3, [pc, #108]	; (8020904 <_puts_r+0xd4>)
 8020896:	429c      	cmp	r4, r3
 8020898:	d101      	bne.n	802089e <_puts_r+0x6e>
 802089a:	68ac      	ldr	r4, [r5, #8]
 802089c:	e7da      	b.n	8020854 <_puts_r+0x24>
 802089e:	4b1a      	ldr	r3, [pc, #104]	; (8020908 <_puts_r+0xd8>)
 80208a0:	429c      	cmp	r4, r3
 80208a2:	bf08      	it	eq
 80208a4:	68ec      	ldreq	r4, [r5, #12]
 80208a6:	e7d5      	b.n	8020854 <_puts_r+0x24>
 80208a8:	4621      	mov	r1, r4
 80208aa:	4628      	mov	r0, r5
 80208ac:	f000 f888 	bl	80209c0 <__swsetup_r>
 80208b0:	2800      	cmp	r0, #0
 80208b2:	d0dd      	beq.n	8020870 <_puts_r+0x40>
 80208b4:	f04f 35ff 	mov.w	r5, #4294967295
 80208b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80208ba:	07da      	lsls	r2, r3, #31
 80208bc:	d405      	bmi.n	80208ca <_puts_r+0x9a>
 80208be:	89a3      	ldrh	r3, [r4, #12]
 80208c0:	059b      	lsls	r3, r3, #22
 80208c2:	d402      	bmi.n	80208ca <_puts_r+0x9a>
 80208c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80208c6:	f001 f923 	bl	8021b10 <__retarget_lock_release_recursive>
 80208ca:	4628      	mov	r0, r5
 80208cc:	bd70      	pop	{r4, r5, r6, pc}
 80208ce:	2b00      	cmp	r3, #0
 80208d0:	da04      	bge.n	80208dc <_puts_r+0xac>
 80208d2:	69a2      	ldr	r2, [r4, #24]
 80208d4:	429a      	cmp	r2, r3
 80208d6:	dc06      	bgt.n	80208e6 <_puts_r+0xb6>
 80208d8:	290a      	cmp	r1, #10
 80208da:	d004      	beq.n	80208e6 <_puts_r+0xb6>
 80208dc:	6823      	ldr	r3, [r4, #0]
 80208de:	1c5a      	adds	r2, r3, #1
 80208e0:	6022      	str	r2, [r4, #0]
 80208e2:	7019      	strb	r1, [r3, #0]
 80208e4:	e7c5      	b.n	8020872 <_puts_r+0x42>
 80208e6:	4622      	mov	r2, r4
 80208e8:	4628      	mov	r0, r5
 80208ea:	f000 f817 	bl	802091c <__swbuf_r>
 80208ee:	3001      	adds	r0, #1
 80208f0:	d1bf      	bne.n	8020872 <_puts_r+0x42>
 80208f2:	e7df      	b.n	80208b4 <_puts_r+0x84>
 80208f4:	6823      	ldr	r3, [r4, #0]
 80208f6:	250a      	movs	r5, #10
 80208f8:	1c5a      	adds	r2, r3, #1
 80208fa:	6022      	str	r2, [r4, #0]
 80208fc:	701d      	strb	r5, [r3, #0]
 80208fe:	e7db      	b.n	80208b8 <_puts_r+0x88>
 8020900:	08024558 	.word	0x08024558
 8020904:	08024578 	.word	0x08024578
 8020908:	08024538 	.word	0x08024538

0802090c <puts>:
 802090c:	4b02      	ldr	r3, [pc, #8]	; (8020918 <puts+0xc>)
 802090e:	4601      	mov	r1, r0
 8020910:	6818      	ldr	r0, [r3, #0]
 8020912:	f7ff bf8d 	b.w	8020830 <_puts_r>
 8020916:	bf00      	nop
 8020918:	2000002c 	.word	0x2000002c

0802091c <__swbuf_r>:
 802091c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802091e:	460e      	mov	r6, r1
 8020920:	4614      	mov	r4, r2
 8020922:	4605      	mov	r5, r0
 8020924:	b118      	cbz	r0, 802092e <__swbuf_r+0x12>
 8020926:	6983      	ldr	r3, [r0, #24]
 8020928:	b90b      	cbnz	r3, 802092e <__swbuf_r+0x12>
 802092a:	f001 f84d 	bl	80219c8 <__sinit>
 802092e:	4b21      	ldr	r3, [pc, #132]	; (80209b4 <__swbuf_r+0x98>)
 8020930:	429c      	cmp	r4, r3
 8020932:	d12b      	bne.n	802098c <__swbuf_r+0x70>
 8020934:	686c      	ldr	r4, [r5, #4]
 8020936:	69a3      	ldr	r3, [r4, #24]
 8020938:	60a3      	str	r3, [r4, #8]
 802093a:	89a3      	ldrh	r3, [r4, #12]
 802093c:	071a      	lsls	r2, r3, #28
 802093e:	d52f      	bpl.n	80209a0 <__swbuf_r+0x84>
 8020940:	6923      	ldr	r3, [r4, #16]
 8020942:	b36b      	cbz	r3, 80209a0 <__swbuf_r+0x84>
 8020944:	6923      	ldr	r3, [r4, #16]
 8020946:	6820      	ldr	r0, [r4, #0]
 8020948:	1ac0      	subs	r0, r0, r3
 802094a:	6963      	ldr	r3, [r4, #20]
 802094c:	b2f6      	uxtb	r6, r6
 802094e:	4283      	cmp	r3, r0
 8020950:	4637      	mov	r7, r6
 8020952:	dc04      	bgt.n	802095e <__swbuf_r+0x42>
 8020954:	4621      	mov	r1, r4
 8020956:	4628      	mov	r0, r5
 8020958:	f000 ffa2 	bl	80218a0 <_fflush_r>
 802095c:	bb30      	cbnz	r0, 80209ac <__swbuf_r+0x90>
 802095e:	68a3      	ldr	r3, [r4, #8]
 8020960:	3b01      	subs	r3, #1
 8020962:	60a3      	str	r3, [r4, #8]
 8020964:	6823      	ldr	r3, [r4, #0]
 8020966:	1c5a      	adds	r2, r3, #1
 8020968:	6022      	str	r2, [r4, #0]
 802096a:	701e      	strb	r6, [r3, #0]
 802096c:	6963      	ldr	r3, [r4, #20]
 802096e:	3001      	adds	r0, #1
 8020970:	4283      	cmp	r3, r0
 8020972:	d004      	beq.n	802097e <__swbuf_r+0x62>
 8020974:	89a3      	ldrh	r3, [r4, #12]
 8020976:	07db      	lsls	r3, r3, #31
 8020978:	d506      	bpl.n	8020988 <__swbuf_r+0x6c>
 802097a:	2e0a      	cmp	r6, #10
 802097c:	d104      	bne.n	8020988 <__swbuf_r+0x6c>
 802097e:	4621      	mov	r1, r4
 8020980:	4628      	mov	r0, r5
 8020982:	f000 ff8d 	bl	80218a0 <_fflush_r>
 8020986:	b988      	cbnz	r0, 80209ac <__swbuf_r+0x90>
 8020988:	4638      	mov	r0, r7
 802098a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802098c:	4b0a      	ldr	r3, [pc, #40]	; (80209b8 <__swbuf_r+0x9c>)
 802098e:	429c      	cmp	r4, r3
 8020990:	d101      	bne.n	8020996 <__swbuf_r+0x7a>
 8020992:	68ac      	ldr	r4, [r5, #8]
 8020994:	e7cf      	b.n	8020936 <__swbuf_r+0x1a>
 8020996:	4b09      	ldr	r3, [pc, #36]	; (80209bc <__swbuf_r+0xa0>)
 8020998:	429c      	cmp	r4, r3
 802099a:	bf08      	it	eq
 802099c:	68ec      	ldreq	r4, [r5, #12]
 802099e:	e7ca      	b.n	8020936 <__swbuf_r+0x1a>
 80209a0:	4621      	mov	r1, r4
 80209a2:	4628      	mov	r0, r5
 80209a4:	f000 f80c 	bl	80209c0 <__swsetup_r>
 80209a8:	2800      	cmp	r0, #0
 80209aa:	d0cb      	beq.n	8020944 <__swbuf_r+0x28>
 80209ac:	f04f 37ff 	mov.w	r7, #4294967295
 80209b0:	e7ea      	b.n	8020988 <__swbuf_r+0x6c>
 80209b2:	bf00      	nop
 80209b4:	08024558 	.word	0x08024558
 80209b8:	08024578 	.word	0x08024578
 80209bc:	08024538 	.word	0x08024538

080209c0 <__swsetup_r>:
 80209c0:	4b32      	ldr	r3, [pc, #200]	; (8020a8c <__swsetup_r+0xcc>)
 80209c2:	b570      	push	{r4, r5, r6, lr}
 80209c4:	681d      	ldr	r5, [r3, #0]
 80209c6:	4606      	mov	r6, r0
 80209c8:	460c      	mov	r4, r1
 80209ca:	b125      	cbz	r5, 80209d6 <__swsetup_r+0x16>
 80209cc:	69ab      	ldr	r3, [r5, #24]
 80209ce:	b913      	cbnz	r3, 80209d6 <__swsetup_r+0x16>
 80209d0:	4628      	mov	r0, r5
 80209d2:	f000 fff9 	bl	80219c8 <__sinit>
 80209d6:	4b2e      	ldr	r3, [pc, #184]	; (8020a90 <__swsetup_r+0xd0>)
 80209d8:	429c      	cmp	r4, r3
 80209da:	d10f      	bne.n	80209fc <__swsetup_r+0x3c>
 80209dc:	686c      	ldr	r4, [r5, #4]
 80209de:	89a3      	ldrh	r3, [r4, #12]
 80209e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80209e4:	0719      	lsls	r1, r3, #28
 80209e6:	d42c      	bmi.n	8020a42 <__swsetup_r+0x82>
 80209e8:	06dd      	lsls	r5, r3, #27
 80209ea:	d411      	bmi.n	8020a10 <__swsetup_r+0x50>
 80209ec:	2309      	movs	r3, #9
 80209ee:	6033      	str	r3, [r6, #0]
 80209f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80209f4:	81a3      	strh	r3, [r4, #12]
 80209f6:	f04f 30ff 	mov.w	r0, #4294967295
 80209fa:	e03e      	b.n	8020a7a <__swsetup_r+0xba>
 80209fc:	4b25      	ldr	r3, [pc, #148]	; (8020a94 <__swsetup_r+0xd4>)
 80209fe:	429c      	cmp	r4, r3
 8020a00:	d101      	bne.n	8020a06 <__swsetup_r+0x46>
 8020a02:	68ac      	ldr	r4, [r5, #8]
 8020a04:	e7eb      	b.n	80209de <__swsetup_r+0x1e>
 8020a06:	4b24      	ldr	r3, [pc, #144]	; (8020a98 <__swsetup_r+0xd8>)
 8020a08:	429c      	cmp	r4, r3
 8020a0a:	bf08      	it	eq
 8020a0c:	68ec      	ldreq	r4, [r5, #12]
 8020a0e:	e7e6      	b.n	80209de <__swsetup_r+0x1e>
 8020a10:	0758      	lsls	r0, r3, #29
 8020a12:	d512      	bpl.n	8020a3a <__swsetup_r+0x7a>
 8020a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020a16:	b141      	cbz	r1, 8020a2a <__swsetup_r+0x6a>
 8020a18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020a1c:	4299      	cmp	r1, r3
 8020a1e:	d002      	beq.n	8020a26 <__swsetup_r+0x66>
 8020a20:	4630      	mov	r0, r6
 8020a22:	f001 fc7d 	bl	8022320 <_free_r>
 8020a26:	2300      	movs	r3, #0
 8020a28:	6363      	str	r3, [r4, #52]	; 0x34
 8020a2a:	89a3      	ldrh	r3, [r4, #12]
 8020a2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020a30:	81a3      	strh	r3, [r4, #12]
 8020a32:	2300      	movs	r3, #0
 8020a34:	6063      	str	r3, [r4, #4]
 8020a36:	6923      	ldr	r3, [r4, #16]
 8020a38:	6023      	str	r3, [r4, #0]
 8020a3a:	89a3      	ldrh	r3, [r4, #12]
 8020a3c:	f043 0308 	orr.w	r3, r3, #8
 8020a40:	81a3      	strh	r3, [r4, #12]
 8020a42:	6923      	ldr	r3, [r4, #16]
 8020a44:	b94b      	cbnz	r3, 8020a5a <__swsetup_r+0x9a>
 8020a46:	89a3      	ldrh	r3, [r4, #12]
 8020a48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020a50:	d003      	beq.n	8020a5a <__swsetup_r+0x9a>
 8020a52:	4621      	mov	r1, r4
 8020a54:	4630      	mov	r0, r6
 8020a56:	f001 f881 	bl	8021b5c <__smakebuf_r>
 8020a5a:	89a0      	ldrh	r0, [r4, #12]
 8020a5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020a60:	f010 0301 	ands.w	r3, r0, #1
 8020a64:	d00a      	beq.n	8020a7c <__swsetup_r+0xbc>
 8020a66:	2300      	movs	r3, #0
 8020a68:	60a3      	str	r3, [r4, #8]
 8020a6a:	6963      	ldr	r3, [r4, #20]
 8020a6c:	425b      	negs	r3, r3
 8020a6e:	61a3      	str	r3, [r4, #24]
 8020a70:	6923      	ldr	r3, [r4, #16]
 8020a72:	b943      	cbnz	r3, 8020a86 <__swsetup_r+0xc6>
 8020a74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020a78:	d1ba      	bne.n	80209f0 <__swsetup_r+0x30>
 8020a7a:	bd70      	pop	{r4, r5, r6, pc}
 8020a7c:	0781      	lsls	r1, r0, #30
 8020a7e:	bf58      	it	pl
 8020a80:	6963      	ldrpl	r3, [r4, #20]
 8020a82:	60a3      	str	r3, [r4, #8]
 8020a84:	e7f4      	b.n	8020a70 <__swsetup_r+0xb0>
 8020a86:	2000      	movs	r0, #0
 8020a88:	e7f7      	b.n	8020a7a <__swsetup_r+0xba>
 8020a8a:	bf00      	nop
 8020a8c:	2000002c 	.word	0x2000002c
 8020a90:	08024558 	.word	0x08024558
 8020a94:	08024578 	.word	0x08024578
 8020a98:	08024538 	.word	0x08024538

08020a9c <quorem>:
 8020a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020aa0:	6903      	ldr	r3, [r0, #16]
 8020aa2:	690c      	ldr	r4, [r1, #16]
 8020aa4:	42a3      	cmp	r3, r4
 8020aa6:	4607      	mov	r7, r0
 8020aa8:	f2c0 8081 	blt.w	8020bae <quorem+0x112>
 8020aac:	3c01      	subs	r4, #1
 8020aae:	f101 0814 	add.w	r8, r1, #20
 8020ab2:	f100 0514 	add.w	r5, r0, #20
 8020ab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020aba:	9301      	str	r3, [sp, #4]
 8020abc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020ac0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020ac4:	3301      	adds	r3, #1
 8020ac6:	429a      	cmp	r2, r3
 8020ac8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020acc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020ad0:	fbb2 f6f3 	udiv	r6, r2, r3
 8020ad4:	d331      	bcc.n	8020b3a <quorem+0x9e>
 8020ad6:	f04f 0e00 	mov.w	lr, #0
 8020ada:	4640      	mov	r0, r8
 8020adc:	46ac      	mov	ip, r5
 8020ade:	46f2      	mov	sl, lr
 8020ae0:	f850 2b04 	ldr.w	r2, [r0], #4
 8020ae4:	b293      	uxth	r3, r2
 8020ae6:	fb06 e303 	mla	r3, r6, r3, lr
 8020aea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020aee:	b29b      	uxth	r3, r3
 8020af0:	ebaa 0303 	sub.w	r3, sl, r3
 8020af4:	f8dc a000 	ldr.w	sl, [ip]
 8020af8:	0c12      	lsrs	r2, r2, #16
 8020afa:	fa13 f38a 	uxtah	r3, r3, sl
 8020afe:	fb06 e202 	mla	r2, r6, r2, lr
 8020b02:	9300      	str	r3, [sp, #0]
 8020b04:	9b00      	ldr	r3, [sp, #0]
 8020b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020b0a:	b292      	uxth	r2, r2
 8020b0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020b14:	f8bd 3000 	ldrh.w	r3, [sp]
 8020b18:	4581      	cmp	r9, r0
 8020b1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020b1e:	f84c 3b04 	str.w	r3, [ip], #4
 8020b22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020b26:	d2db      	bcs.n	8020ae0 <quorem+0x44>
 8020b28:	f855 300b 	ldr.w	r3, [r5, fp]
 8020b2c:	b92b      	cbnz	r3, 8020b3a <quorem+0x9e>
 8020b2e:	9b01      	ldr	r3, [sp, #4]
 8020b30:	3b04      	subs	r3, #4
 8020b32:	429d      	cmp	r5, r3
 8020b34:	461a      	mov	r2, r3
 8020b36:	d32e      	bcc.n	8020b96 <quorem+0xfa>
 8020b38:	613c      	str	r4, [r7, #16]
 8020b3a:	4638      	mov	r0, r7
 8020b3c:	f001 fad8 	bl	80220f0 <__mcmp>
 8020b40:	2800      	cmp	r0, #0
 8020b42:	db24      	blt.n	8020b8e <quorem+0xf2>
 8020b44:	3601      	adds	r6, #1
 8020b46:	4628      	mov	r0, r5
 8020b48:	f04f 0c00 	mov.w	ip, #0
 8020b4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8020b50:	f8d0 e000 	ldr.w	lr, [r0]
 8020b54:	b293      	uxth	r3, r2
 8020b56:	ebac 0303 	sub.w	r3, ip, r3
 8020b5a:	0c12      	lsrs	r2, r2, #16
 8020b5c:	fa13 f38e 	uxtah	r3, r3, lr
 8020b60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020b64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020b68:	b29b      	uxth	r3, r3
 8020b6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020b6e:	45c1      	cmp	r9, r8
 8020b70:	f840 3b04 	str.w	r3, [r0], #4
 8020b74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020b78:	d2e8      	bcs.n	8020b4c <quorem+0xb0>
 8020b7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020b7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020b82:	b922      	cbnz	r2, 8020b8e <quorem+0xf2>
 8020b84:	3b04      	subs	r3, #4
 8020b86:	429d      	cmp	r5, r3
 8020b88:	461a      	mov	r2, r3
 8020b8a:	d30a      	bcc.n	8020ba2 <quorem+0x106>
 8020b8c:	613c      	str	r4, [r7, #16]
 8020b8e:	4630      	mov	r0, r6
 8020b90:	b003      	add	sp, #12
 8020b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b96:	6812      	ldr	r2, [r2, #0]
 8020b98:	3b04      	subs	r3, #4
 8020b9a:	2a00      	cmp	r2, #0
 8020b9c:	d1cc      	bne.n	8020b38 <quorem+0x9c>
 8020b9e:	3c01      	subs	r4, #1
 8020ba0:	e7c7      	b.n	8020b32 <quorem+0x96>
 8020ba2:	6812      	ldr	r2, [r2, #0]
 8020ba4:	3b04      	subs	r3, #4
 8020ba6:	2a00      	cmp	r2, #0
 8020ba8:	d1f0      	bne.n	8020b8c <quorem+0xf0>
 8020baa:	3c01      	subs	r4, #1
 8020bac:	e7eb      	b.n	8020b86 <quorem+0xea>
 8020bae:	2000      	movs	r0, #0
 8020bb0:	e7ee      	b.n	8020b90 <quorem+0xf4>
 8020bb2:	0000      	movs	r0, r0
 8020bb4:	0000      	movs	r0, r0
	...

08020bb8 <_dtoa_r>:
 8020bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020bbc:	ed2d 8b04 	vpush	{d8-d9}
 8020bc0:	ec57 6b10 	vmov	r6, r7, d0
 8020bc4:	b093      	sub	sp, #76	; 0x4c
 8020bc6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020bc8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020bcc:	9106      	str	r1, [sp, #24]
 8020bce:	ee10 aa10 	vmov	sl, s0
 8020bd2:	4604      	mov	r4, r0
 8020bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8020bd6:	930c      	str	r3, [sp, #48]	; 0x30
 8020bd8:	46bb      	mov	fp, r7
 8020bda:	b975      	cbnz	r5, 8020bfa <_dtoa_r+0x42>
 8020bdc:	2010      	movs	r0, #16
 8020bde:	f000 fffd 	bl	8021bdc <malloc>
 8020be2:	4602      	mov	r2, r0
 8020be4:	6260      	str	r0, [r4, #36]	; 0x24
 8020be6:	b920      	cbnz	r0, 8020bf2 <_dtoa_r+0x3a>
 8020be8:	4ba7      	ldr	r3, [pc, #668]	; (8020e88 <_dtoa_r+0x2d0>)
 8020bea:	21ea      	movs	r1, #234	; 0xea
 8020bec:	48a7      	ldr	r0, [pc, #668]	; (8020e8c <_dtoa_r+0x2d4>)
 8020bee:	f001 fe7f 	bl	80228f0 <__assert_func>
 8020bf2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020bf6:	6005      	str	r5, [r0, #0]
 8020bf8:	60c5      	str	r5, [r0, #12]
 8020bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020bfc:	6819      	ldr	r1, [r3, #0]
 8020bfe:	b151      	cbz	r1, 8020c16 <_dtoa_r+0x5e>
 8020c00:	685a      	ldr	r2, [r3, #4]
 8020c02:	604a      	str	r2, [r1, #4]
 8020c04:	2301      	movs	r3, #1
 8020c06:	4093      	lsls	r3, r2
 8020c08:	608b      	str	r3, [r1, #8]
 8020c0a:	4620      	mov	r0, r4
 8020c0c:	f001 f82e 	bl	8021c6c <_Bfree>
 8020c10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020c12:	2200      	movs	r2, #0
 8020c14:	601a      	str	r2, [r3, #0]
 8020c16:	1e3b      	subs	r3, r7, #0
 8020c18:	bfaa      	itet	ge
 8020c1a:	2300      	movge	r3, #0
 8020c1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020c20:	f8c8 3000 	strge.w	r3, [r8]
 8020c24:	4b9a      	ldr	r3, [pc, #616]	; (8020e90 <_dtoa_r+0x2d8>)
 8020c26:	bfbc      	itt	lt
 8020c28:	2201      	movlt	r2, #1
 8020c2a:	f8c8 2000 	strlt.w	r2, [r8]
 8020c2e:	ea33 030b 	bics.w	r3, r3, fp
 8020c32:	d11b      	bne.n	8020c6c <_dtoa_r+0xb4>
 8020c34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c36:	f242 730f 	movw	r3, #9999	; 0x270f
 8020c3a:	6013      	str	r3, [r2, #0]
 8020c3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020c40:	4333      	orrs	r3, r6
 8020c42:	f000 8592 	beq.w	802176a <_dtoa_r+0xbb2>
 8020c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c48:	b963      	cbnz	r3, 8020c64 <_dtoa_r+0xac>
 8020c4a:	4b92      	ldr	r3, [pc, #584]	; (8020e94 <_dtoa_r+0x2dc>)
 8020c4c:	e022      	b.n	8020c94 <_dtoa_r+0xdc>
 8020c4e:	4b92      	ldr	r3, [pc, #584]	; (8020e98 <_dtoa_r+0x2e0>)
 8020c50:	9301      	str	r3, [sp, #4]
 8020c52:	3308      	adds	r3, #8
 8020c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020c56:	6013      	str	r3, [r2, #0]
 8020c58:	9801      	ldr	r0, [sp, #4]
 8020c5a:	b013      	add	sp, #76	; 0x4c
 8020c5c:	ecbd 8b04 	vpop	{d8-d9}
 8020c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c64:	4b8b      	ldr	r3, [pc, #556]	; (8020e94 <_dtoa_r+0x2dc>)
 8020c66:	9301      	str	r3, [sp, #4]
 8020c68:	3303      	adds	r3, #3
 8020c6a:	e7f3      	b.n	8020c54 <_dtoa_r+0x9c>
 8020c6c:	2200      	movs	r2, #0
 8020c6e:	2300      	movs	r3, #0
 8020c70:	4650      	mov	r0, sl
 8020c72:	4659      	mov	r1, fp
 8020c74:	f7df ff50 	bl	8000b18 <__aeabi_dcmpeq>
 8020c78:	ec4b ab19 	vmov	d9, sl, fp
 8020c7c:	4680      	mov	r8, r0
 8020c7e:	b158      	cbz	r0, 8020c98 <_dtoa_r+0xe0>
 8020c80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020c82:	2301      	movs	r3, #1
 8020c84:	6013      	str	r3, [r2, #0]
 8020c86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c88:	2b00      	cmp	r3, #0
 8020c8a:	f000 856b 	beq.w	8021764 <_dtoa_r+0xbac>
 8020c8e:	4883      	ldr	r0, [pc, #524]	; (8020e9c <_dtoa_r+0x2e4>)
 8020c90:	6018      	str	r0, [r3, #0]
 8020c92:	1e43      	subs	r3, r0, #1
 8020c94:	9301      	str	r3, [sp, #4]
 8020c96:	e7df      	b.n	8020c58 <_dtoa_r+0xa0>
 8020c98:	ec4b ab10 	vmov	d0, sl, fp
 8020c9c:	aa10      	add	r2, sp, #64	; 0x40
 8020c9e:	a911      	add	r1, sp, #68	; 0x44
 8020ca0:	4620      	mov	r0, r4
 8020ca2:	f001 facb 	bl	802223c <__d2b>
 8020ca6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8020caa:	ee08 0a10 	vmov	s16, r0
 8020cae:	2d00      	cmp	r5, #0
 8020cb0:	f000 8084 	beq.w	8020dbc <_dtoa_r+0x204>
 8020cb4:	ee19 3a90 	vmov	r3, s19
 8020cb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020cbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020cc0:	4656      	mov	r6, sl
 8020cc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020cc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020cca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020cce:	4b74      	ldr	r3, [pc, #464]	; (8020ea0 <_dtoa_r+0x2e8>)
 8020cd0:	2200      	movs	r2, #0
 8020cd2:	4630      	mov	r0, r6
 8020cd4:	4639      	mov	r1, r7
 8020cd6:	f7df faff 	bl	80002d8 <__aeabi_dsub>
 8020cda:	a365      	add	r3, pc, #404	; (adr r3, 8020e70 <_dtoa_r+0x2b8>)
 8020cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ce0:	f7df fcb2 	bl	8000648 <__aeabi_dmul>
 8020ce4:	a364      	add	r3, pc, #400	; (adr r3, 8020e78 <_dtoa_r+0x2c0>)
 8020ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cea:	f7df faf7 	bl	80002dc <__adddf3>
 8020cee:	4606      	mov	r6, r0
 8020cf0:	4628      	mov	r0, r5
 8020cf2:	460f      	mov	r7, r1
 8020cf4:	f7df fc3e 	bl	8000574 <__aeabi_i2d>
 8020cf8:	a361      	add	r3, pc, #388	; (adr r3, 8020e80 <_dtoa_r+0x2c8>)
 8020cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020cfe:	f7df fca3 	bl	8000648 <__aeabi_dmul>
 8020d02:	4602      	mov	r2, r0
 8020d04:	460b      	mov	r3, r1
 8020d06:	4630      	mov	r0, r6
 8020d08:	4639      	mov	r1, r7
 8020d0a:	f7df fae7 	bl	80002dc <__adddf3>
 8020d0e:	4606      	mov	r6, r0
 8020d10:	460f      	mov	r7, r1
 8020d12:	f7df ff49 	bl	8000ba8 <__aeabi_d2iz>
 8020d16:	2200      	movs	r2, #0
 8020d18:	9000      	str	r0, [sp, #0]
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	4630      	mov	r0, r6
 8020d1e:	4639      	mov	r1, r7
 8020d20:	f7df ff04 	bl	8000b2c <__aeabi_dcmplt>
 8020d24:	b150      	cbz	r0, 8020d3c <_dtoa_r+0x184>
 8020d26:	9800      	ldr	r0, [sp, #0]
 8020d28:	f7df fc24 	bl	8000574 <__aeabi_i2d>
 8020d2c:	4632      	mov	r2, r6
 8020d2e:	463b      	mov	r3, r7
 8020d30:	f7df fef2 	bl	8000b18 <__aeabi_dcmpeq>
 8020d34:	b910      	cbnz	r0, 8020d3c <_dtoa_r+0x184>
 8020d36:	9b00      	ldr	r3, [sp, #0]
 8020d38:	3b01      	subs	r3, #1
 8020d3a:	9300      	str	r3, [sp, #0]
 8020d3c:	9b00      	ldr	r3, [sp, #0]
 8020d3e:	2b16      	cmp	r3, #22
 8020d40:	d85a      	bhi.n	8020df8 <_dtoa_r+0x240>
 8020d42:	9a00      	ldr	r2, [sp, #0]
 8020d44:	4b57      	ldr	r3, [pc, #348]	; (8020ea4 <_dtoa_r+0x2ec>)
 8020d46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020d4e:	ec51 0b19 	vmov	r0, r1, d9
 8020d52:	f7df feeb 	bl	8000b2c <__aeabi_dcmplt>
 8020d56:	2800      	cmp	r0, #0
 8020d58:	d050      	beq.n	8020dfc <_dtoa_r+0x244>
 8020d5a:	9b00      	ldr	r3, [sp, #0]
 8020d5c:	3b01      	subs	r3, #1
 8020d5e:	9300      	str	r3, [sp, #0]
 8020d60:	2300      	movs	r3, #0
 8020d62:	930b      	str	r3, [sp, #44]	; 0x2c
 8020d64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020d66:	1b5d      	subs	r5, r3, r5
 8020d68:	1e6b      	subs	r3, r5, #1
 8020d6a:	9305      	str	r3, [sp, #20]
 8020d6c:	bf45      	ittet	mi
 8020d6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8020d72:	9304      	strmi	r3, [sp, #16]
 8020d74:	2300      	movpl	r3, #0
 8020d76:	2300      	movmi	r3, #0
 8020d78:	bf4c      	ite	mi
 8020d7a:	9305      	strmi	r3, [sp, #20]
 8020d7c:	9304      	strpl	r3, [sp, #16]
 8020d7e:	9b00      	ldr	r3, [sp, #0]
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	db3d      	blt.n	8020e00 <_dtoa_r+0x248>
 8020d84:	9b05      	ldr	r3, [sp, #20]
 8020d86:	9a00      	ldr	r2, [sp, #0]
 8020d88:	920a      	str	r2, [sp, #40]	; 0x28
 8020d8a:	4413      	add	r3, r2
 8020d8c:	9305      	str	r3, [sp, #20]
 8020d8e:	2300      	movs	r3, #0
 8020d90:	9307      	str	r3, [sp, #28]
 8020d92:	9b06      	ldr	r3, [sp, #24]
 8020d94:	2b09      	cmp	r3, #9
 8020d96:	f200 8089 	bhi.w	8020eac <_dtoa_r+0x2f4>
 8020d9a:	2b05      	cmp	r3, #5
 8020d9c:	bfc4      	itt	gt
 8020d9e:	3b04      	subgt	r3, #4
 8020da0:	9306      	strgt	r3, [sp, #24]
 8020da2:	9b06      	ldr	r3, [sp, #24]
 8020da4:	f1a3 0302 	sub.w	r3, r3, #2
 8020da8:	bfcc      	ite	gt
 8020daa:	2500      	movgt	r5, #0
 8020dac:	2501      	movle	r5, #1
 8020dae:	2b03      	cmp	r3, #3
 8020db0:	f200 8087 	bhi.w	8020ec2 <_dtoa_r+0x30a>
 8020db4:	e8df f003 	tbb	[pc, r3]
 8020db8:	59383a2d 	.word	0x59383a2d
 8020dbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8020dc0:	441d      	add	r5, r3
 8020dc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8020dc6:	2b20      	cmp	r3, #32
 8020dc8:	bfc1      	itttt	gt
 8020dca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8020dce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8020dd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8020dd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020dda:	bfda      	itte	le
 8020ddc:	f1c3 0320 	rsble	r3, r3, #32
 8020de0:	fa06 f003 	lslle.w	r0, r6, r3
 8020de4:	4318      	orrgt	r0, r3
 8020de6:	f7df fbb5 	bl	8000554 <__aeabi_ui2d>
 8020dea:	2301      	movs	r3, #1
 8020dec:	4606      	mov	r6, r0
 8020dee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020df2:	3d01      	subs	r5, #1
 8020df4:	930e      	str	r3, [sp, #56]	; 0x38
 8020df6:	e76a      	b.n	8020cce <_dtoa_r+0x116>
 8020df8:	2301      	movs	r3, #1
 8020dfa:	e7b2      	b.n	8020d62 <_dtoa_r+0x1aa>
 8020dfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8020dfe:	e7b1      	b.n	8020d64 <_dtoa_r+0x1ac>
 8020e00:	9b04      	ldr	r3, [sp, #16]
 8020e02:	9a00      	ldr	r2, [sp, #0]
 8020e04:	1a9b      	subs	r3, r3, r2
 8020e06:	9304      	str	r3, [sp, #16]
 8020e08:	4253      	negs	r3, r2
 8020e0a:	9307      	str	r3, [sp, #28]
 8020e0c:	2300      	movs	r3, #0
 8020e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8020e10:	e7bf      	b.n	8020d92 <_dtoa_r+0x1da>
 8020e12:	2300      	movs	r3, #0
 8020e14:	9308      	str	r3, [sp, #32]
 8020e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	dc55      	bgt.n	8020ec8 <_dtoa_r+0x310>
 8020e1c:	2301      	movs	r3, #1
 8020e1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020e22:	461a      	mov	r2, r3
 8020e24:	9209      	str	r2, [sp, #36]	; 0x24
 8020e26:	e00c      	b.n	8020e42 <_dtoa_r+0x28a>
 8020e28:	2301      	movs	r3, #1
 8020e2a:	e7f3      	b.n	8020e14 <_dtoa_r+0x25c>
 8020e2c:	2300      	movs	r3, #0
 8020e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e30:	9308      	str	r3, [sp, #32]
 8020e32:	9b00      	ldr	r3, [sp, #0]
 8020e34:	4413      	add	r3, r2
 8020e36:	9302      	str	r3, [sp, #8]
 8020e38:	3301      	adds	r3, #1
 8020e3a:	2b01      	cmp	r3, #1
 8020e3c:	9303      	str	r3, [sp, #12]
 8020e3e:	bfb8      	it	lt
 8020e40:	2301      	movlt	r3, #1
 8020e42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020e44:	2200      	movs	r2, #0
 8020e46:	6042      	str	r2, [r0, #4]
 8020e48:	2204      	movs	r2, #4
 8020e4a:	f102 0614 	add.w	r6, r2, #20
 8020e4e:	429e      	cmp	r6, r3
 8020e50:	6841      	ldr	r1, [r0, #4]
 8020e52:	d93d      	bls.n	8020ed0 <_dtoa_r+0x318>
 8020e54:	4620      	mov	r0, r4
 8020e56:	f000 fec9 	bl	8021bec <_Balloc>
 8020e5a:	9001      	str	r0, [sp, #4]
 8020e5c:	2800      	cmp	r0, #0
 8020e5e:	d13b      	bne.n	8020ed8 <_dtoa_r+0x320>
 8020e60:	4b11      	ldr	r3, [pc, #68]	; (8020ea8 <_dtoa_r+0x2f0>)
 8020e62:	4602      	mov	r2, r0
 8020e64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020e68:	e6c0      	b.n	8020bec <_dtoa_r+0x34>
 8020e6a:	2301      	movs	r3, #1
 8020e6c:	e7df      	b.n	8020e2e <_dtoa_r+0x276>
 8020e6e:	bf00      	nop
 8020e70:	636f4361 	.word	0x636f4361
 8020e74:	3fd287a7 	.word	0x3fd287a7
 8020e78:	8b60c8b3 	.word	0x8b60c8b3
 8020e7c:	3fc68a28 	.word	0x3fc68a28
 8020e80:	509f79fb 	.word	0x509f79fb
 8020e84:	3fd34413 	.word	0x3fd34413
 8020e88:	080244b5 	.word	0x080244b5
 8020e8c:	080244cc 	.word	0x080244cc
 8020e90:	7ff00000 	.word	0x7ff00000
 8020e94:	080244b1 	.word	0x080244b1
 8020e98:	080244a8 	.word	0x080244a8
 8020e9c:	08024485 	.word	0x08024485
 8020ea0:	3ff80000 	.word	0x3ff80000
 8020ea4:	08024620 	.word	0x08024620
 8020ea8:	08024527 	.word	0x08024527
 8020eac:	2501      	movs	r5, #1
 8020eae:	2300      	movs	r3, #0
 8020eb0:	9306      	str	r3, [sp, #24]
 8020eb2:	9508      	str	r5, [sp, #32]
 8020eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8020eb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020ebc:	2200      	movs	r2, #0
 8020ebe:	2312      	movs	r3, #18
 8020ec0:	e7b0      	b.n	8020e24 <_dtoa_r+0x26c>
 8020ec2:	2301      	movs	r3, #1
 8020ec4:	9308      	str	r3, [sp, #32]
 8020ec6:	e7f5      	b.n	8020eb4 <_dtoa_r+0x2fc>
 8020ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8020ece:	e7b8      	b.n	8020e42 <_dtoa_r+0x28a>
 8020ed0:	3101      	adds	r1, #1
 8020ed2:	6041      	str	r1, [r0, #4]
 8020ed4:	0052      	lsls	r2, r2, #1
 8020ed6:	e7b8      	b.n	8020e4a <_dtoa_r+0x292>
 8020ed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020eda:	9a01      	ldr	r2, [sp, #4]
 8020edc:	601a      	str	r2, [r3, #0]
 8020ede:	9b03      	ldr	r3, [sp, #12]
 8020ee0:	2b0e      	cmp	r3, #14
 8020ee2:	f200 809d 	bhi.w	8021020 <_dtoa_r+0x468>
 8020ee6:	2d00      	cmp	r5, #0
 8020ee8:	f000 809a 	beq.w	8021020 <_dtoa_r+0x468>
 8020eec:	9b00      	ldr	r3, [sp, #0]
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	dd32      	ble.n	8020f58 <_dtoa_r+0x3a0>
 8020ef2:	4ab7      	ldr	r2, [pc, #732]	; (80211d0 <_dtoa_r+0x618>)
 8020ef4:	f003 030f 	and.w	r3, r3, #15
 8020ef8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020f00:	9b00      	ldr	r3, [sp, #0]
 8020f02:	05d8      	lsls	r0, r3, #23
 8020f04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8020f08:	d516      	bpl.n	8020f38 <_dtoa_r+0x380>
 8020f0a:	4bb2      	ldr	r3, [pc, #712]	; (80211d4 <_dtoa_r+0x61c>)
 8020f0c:	ec51 0b19 	vmov	r0, r1, d9
 8020f10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020f14:	f7df fcc2 	bl	800089c <__aeabi_ddiv>
 8020f18:	f007 070f 	and.w	r7, r7, #15
 8020f1c:	4682      	mov	sl, r0
 8020f1e:	468b      	mov	fp, r1
 8020f20:	2503      	movs	r5, #3
 8020f22:	4eac      	ldr	r6, [pc, #688]	; (80211d4 <_dtoa_r+0x61c>)
 8020f24:	b957      	cbnz	r7, 8020f3c <_dtoa_r+0x384>
 8020f26:	4642      	mov	r2, r8
 8020f28:	464b      	mov	r3, r9
 8020f2a:	4650      	mov	r0, sl
 8020f2c:	4659      	mov	r1, fp
 8020f2e:	f7df fcb5 	bl	800089c <__aeabi_ddiv>
 8020f32:	4682      	mov	sl, r0
 8020f34:	468b      	mov	fp, r1
 8020f36:	e028      	b.n	8020f8a <_dtoa_r+0x3d2>
 8020f38:	2502      	movs	r5, #2
 8020f3a:	e7f2      	b.n	8020f22 <_dtoa_r+0x36a>
 8020f3c:	07f9      	lsls	r1, r7, #31
 8020f3e:	d508      	bpl.n	8020f52 <_dtoa_r+0x39a>
 8020f40:	4640      	mov	r0, r8
 8020f42:	4649      	mov	r1, r9
 8020f44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020f48:	f7df fb7e 	bl	8000648 <__aeabi_dmul>
 8020f4c:	3501      	adds	r5, #1
 8020f4e:	4680      	mov	r8, r0
 8020f50:	4689      	mov	r9, r1
 8020f52:	107f      	asrs	r7, r7, #1
 8020f54:	3608      	adds	r6, #8
 8020f56:	e7e5      	b.n	8020f24 <_dtoa_r+0x36c>
 8020f58:	f000 809b 	beq.w	8021092 <_dtoa_r+0x4da>
 8020f5c:	9b00      	ldr	r3, [sp, #0]
 8020f5e:	4f9d      	ldr	r7, [pc, #628]	; (80211d4 <_dtoa_r+0x61c>)
 8020f60:	425e      	negs	r6, r3
 8020f62:	4b9b      	ldr	r3, [pc, #620]	; (80211d0 <_dtoa_r+0x618>)
 8020f64:	f006 020f 	and.w	r2, r6, #15
 8020f68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f70:	ec51 0b19 	vmov	r0, r1, d9
 8020f74:	f7df fb68 	bl	8000648 <__aeabi_dmul>
 8020f78:	1136      	asrs	r6, r6, #4
 8020f7a:	4682      	mov	sl, r0
 8020f7c:	468b      	mov	fp, r1
 8020f7e:	2300      	movs	r3, #0
 8020f80:	2502      	movs	r5, #2
 8020f82:	2e00      	cmp	r6, #0
 8020f84:	d17a      	bne.n	802107c <_dtoa_r+0x4c4>
 8020f86:	2b00      	cmp	r3, #0
 8020f88:	d1d3      	bne.n	8020f32 <_dtoa_r+0x37a>
 8020f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020f8c:	2b00      	cmp	r3, #0
 8020f8e:	f000 8082 	beq.w	8021096 <_dtoa_r+0x4de>
 8020f92:	4b91      	ldr	r3, [pc, #580]	; (80211d8 <_dtoa_r+0x620>)
 8020f94:	2200      	movs	r2, #0
 8020f96:	4650      	mov	r0, sl
 8020f98:	4659      	mov	r1, fp
 8020f9a:	f7df fdc7 	bl	8000b2c <__aeabi_dcmplt>
 8020f9e:	2800      	cmp	r0, #0
 8020fa0:	d079      	beq.n	8021096 <_dtoa_r+0x4de>
 8020fa2:	9b03      	ldr	r3, [sp, #12]
 8020fa4:	2b00      	cmp	r3, #0
 8020fa6:	d076      	beq.n	8021096 <_dtoa_r+0x4de>
 8020fa8:	9b02      	ldr	r3, [sp, #8]
 8020faa:	2b00      	cmp	r3, #0
 8020fac:	dd36      	ble.n	802101c <_dtoa_r+0x464>
 8020fae:	9b00      	ldr	r3, [sp, #0]
 8020fb0:	4650      	mov	r0, sl
 8020fb2:	4659      	mov	r1, fp
 8020fb4:	1e5f      	subs	r7, r3, #1
 8020fb6:	2200      	movs	r2, #0
 8020fb8:	4b88      	ldr	r3, [pc, #544]	; (80211dc <_dtoa_r+0x624>)
 8020fba:	f7df fb45 	bl	8000648 <__aeabi_dmul>
 8020fbe:	9e02      	ldr	r6, [sp, #8]
 8020fc0:	4682      	mov	sl, r0
 8020fc2:	468b      	mov	fp, r1
 8020fc4:	3501      	adds	r5, #1
 8020fc6:	4628      	mov	r0, r5
 8020fc8:	f7df fad4 	bl	8000574 <__aeabi_i2d>
 8020fcc:	4652      	mov	r2, sl
 8020fce:	465b      	mov	r3, fp
 8020fd0:	f7df fb3a 	bl	8000648 <__aeabi_dmul>
 8020fd4:	4b82      	ldr	r3, [pc, #520]	; (80211e0 <_dtoa_r+0x628>)
 8020fd6:	2200      	movs	r2, #0
 8020fd8:	f7df f980 	bl	80002dc <__adddf3>
 8020fdc:	46d0      	mov	r8, sl
 8020fde:	46d9      	mov	r9, fp
 8020fe0:	4682      	mov	sl, r0
 8020fe2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8020fe6:	2e00      	cmp	r6, #0
 8020fe8:	d158      	bne.n	802109c <_dtoa_r+0x4e4>
 8020fea:	4b7e      	ldr	r3, [pc, #504]	; (80211e4 <_dtoa_r+0x62c>)
 8020fec:	2200      	movs	r2, #0
 8020fee:	4640      	mov	r0, r8
 8020ff0:	4649      	mov	r1, r9
 8020ff2:	f7df f971 	bl	80002d8 <__aeabi_dsub>
 8020ff6:	4652      	mov	r2, sl
 8020ff8:	465b      	mov	r3, fp
 8020ffa:	4680      	mov	r8, r0
 8020ffc:	4689      	mov	r9, r1
 8020ffe:	f7df fdb3 	bl	8000b68 <__aeabi_dcmpgt>
 8021002:	2800      	cmp	r0, #0
 8021004:	f040 8295 	bne.w	8021532 <_dtoa_r+0x97a>
 8021008:	4652      	mov	r2, sl
 802100a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 802100e:	4640      	mov	r0, r8
 8021010:	4649      	mov	r1, r9
 8021012:	f7df fd8b 	bl	8000b2c <__aeabi_dcmplt>
 8021016:	2800      	cmp	r0, #0
 8021018:	f040 8289 	bne.w	802152e <_dtoa_r+0x976>
 802101c:	ec5b ab19 	vmov	sl, fp, d9
 8021020:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021022:	2b00      	cmp	r3, #0
 8021024:	f2c0 8148 	blt.w	80212b8 <_dtoa_r+0x700>
 8021028:	9a00      	ldr	r2, [sp, #0]
 802102a:	2a0e      	cmp	r2, #14
 802102c:	f300 8144 	bgt.w	80212b8 <_dtoa_r+0x700>
 8021030:	4b67      	ldr	r3, [pc, #412]	; (80211d0 <_dtoa_r+0x618>)
 8021032:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021036:	e9d3 8900 	ldrd	r8, r9, [r3]
 802103a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802103c:	2b00      	cmp	r3, #0
 802103e:	f280 80d5 	bge.w	80211ec <_dtoa_r+0x634>
 8021042:	9b03      	ldr	r3, [sp, #12]
 8021044:	2b00      	cmp	r3, #0
 8021046:	f300 80d1 	bgt.w	80211ec <_dtoa_r+0x634>
 802104a:	f040 826f 	bne.w	802152c <_dtoa_r+0x974>
 802104e:	4b65      	ldr	r3, [pc, #404]	; (80211e4 <_dtoa_r+0x62c>)
 8021050:	2200      	movs	r2, #0
 8021052:	4640      	mov	r0, r8
 8021054:	4649      	mov	r1, r9
 8021056:	f7df faf7 	bl	8000648 <__aeabi_dmul>
 802105a:	4652      	mov	r2, sl
 802105c:	465b      	mov	r3, fp
 802105e:	f7df fd79 	bl	8000b54 <__aeabi_dcmpge>
 8021062:	9e03      	ldr	r6, [sp, #12]
 8021064:	4637      	mov	r7, r6
 8021066:	2800      	cmp	r0, #0
 8021068:	f040 8245 	bne.w	80214f6 <_dtoa_r+0x93e>
 802106c:	9d01      	ldr	r5, [sp, #4]
 802106e:	2331      	movs	r3, #49	; 0x31
 8021070:	f805 3b01 	strb.w	r3, [r5], #1
 8021074:	9b00      	ldr	r3, [sp, #0]
 8021076:	3301      	adds	r3, #1
 8021078:	9300      	str	r3, [sp, #0]
 802107a:	e240      	b.n	80214fe <_dtoa_r+0x946>
 802107c:	07f2      	lsls	r2, r6, #31
 802107e:	d505      	bpl.n	802108c <_dtoa_r+0x4d4>
 8021080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021084:	f7df fae0 	bl	8000648 <__aeabi_dmul>
 8021088:	3501      	adds	r5, #1
 802108a:	2301      	movs	r3, #1
 802108c:	1076      	asrs	r6, r6, #1
 802108e:	3708      	adds	r7, #8
 8021090:	e777      	b.n	8020f82 <_dtoa_r+0x3ca>
 8021092:	2502      	movs	r5, #2
 8021094:	e779      	b.n	8020f8a <_dtoa_r+0x3d2>
 8021096:	9f00      	ldr	r7, [sp, #0]
 8021098:	9e03      	ldr	r6, [sp, #12]
 802109a:	e794      	b.n	8020fc6 <_dtoa_r+0x40e>
 802109c:	9901      	ldr	r1, [sp, #4]
 802109e:	4b4c      	ldr	r3, [pc, #304]	; (80211d0 <_dtoa_r+0x618>)
 80210a0:	4431      	add	r1, r6
 80210a2:	910d      	str	r1, [sp, #52]	; 0x34
 80210a4:	9908      	ldr	r1, [sp, #32]
 80210a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80210aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80210ae:	2900      	cmp	r1, #0
 80210b0:	d043      	beq.n	802113a <_dtoa_r+0x582>
 80210b2:	494d      	ldr	r1, [pc, #308]	; (80211e8 <_dtoa_r+0x630>)
 80210b4:	2000      	movs	r0, #0
 80210b6:	f7df fbf1 	bl	800089c <__aeabi_ddiv>
 80210ba:	4652      	mov	r2, sl
 80210bc:	465b      	mov	r3, fp
 80210be:	f7df f90b 	bl	80002d8 <__aeabi_dsub>
 80210c2:	9d01      	ldr	r5, [sp, #4]
 80210c4:	4682      	mov	sl, r0
 80210c6:	468b      	mov	fp, r1
 80210c8:	4649      	mov	r1, r9
 80210ca:	4640      	mov	r0, r8
 80210cc:	f7df fd6c 	bl	8000ba8 <__aeabi_d2iz>
 80210d0:	4606      	mov	r6, r0
 80210d2:	f7df fa4f 	bl	8000574 <__aeabi_i2d>
 80210d6:	4602      	mov	r2, r0
 80210d8:	460b      	mov	r3, r1
 80210da:	4640      	mov	r0, r8
 80210dc:	4649      	mov	r1, r9
 80210de:	f7df f8fb 	bl	80002d8 <__aeabi_dsub>
 80210e2:	3630      	adds	r6, #48	; 0x30
 80210e4:	f805 6b01 	strb.w	r6, [r5], #1
 80210e8:	4652      	mov	r2, sl
 80210ea:	465b      	mov	r3, fp
 80210ec:	4680      	mov	r8, r0
 80210ee:	4689      	mov	r9, r1
 80210f0:	f7df fd1c 	bl	8000b2c <__aeabi_dcmplt>
 80210f4:	2800      	cmp	r0, #0
 80210f6:	d163      	bne.n	80211c0 <_dtoa_r+0x608>
 80210f8:	4642      	mov	r2, r8
 80210fa:	464b      	mov	r3, r9
 80210fc:	4936      	ldr	r1, [pc, #216]	; (80211d8 <_dtoa_r+0x620>)
 80210fe:	2000      	movs	r0, #0
 8021100:	f7df f8ea 	bl	80002d8 <__aeabi_dsub>
 8021104:	4652      	mov	r2, sl
 8021106:	465b      	mov	r3, fp
 8021108:	f7df fd10 	bl	8000b2c <__aeabi_dcmplt>
 802110c:	2800      	cmp	r0, #0
 802110e:	f040 80b5 	bne.w	802127c <_dtoa_r+0x6c4>
 8021112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021114:	429d      	cmp	r5, r3
 8021116:	d081      	beq.n	802101c <_dtoa_r+0x464>
 8021118:	4b30      	ldr	r3, [pc, #192]	; (80211dc <_dtoa_r+0x624>)
 802111a:	2200      	movs	r2, #0
 802111c:	4650      	mov	r0, sl
 802111e:	4659      	mov	r1, fp
 8021120:	f7df fa92 	bl	8000648 <__aeabi_dmul>
 8021124:	4b2d      	ldr	r3, [pc, #180]	; (80211dc <_dtoa_r+0x624>)
 8021126:	4682      	mov	sl, r0
 8021128:	468b      	mov	fp, r1
 802112a:	4640      	mov	r0, r8
 802112c:	4649      	mov	r1, r9
 802112e:	2200      	movs	r2, #0
 8021130:	f7df fa8a 	bl	8000648 <__aeabi_dmul>
 8021134:	4680      	mov	r8, r0
 8021136:	4689      	mov	r9, r1
 8021138:	e7c6      	b.n	80210c8 <_dtoa_r+0x510>
 802113a:	4650      	mov	r0, sl
 802113c:	4659      	mov	r1, fp
 802113e:	f7df fa83 	bl	8000648 <__aeabi_dmul>
 8021142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021144:	9d01      	ldr	r5, [sp, #4]
 8021146:	930f      	str	r3, [sp, #60]	; 0x3c
 8021148:	4682      	mov	sl, r0
 802114a:	468b      	mov	fp, r1
 802114c:	4649      	mov	r1, r9
 802114e:	4640      	mov	r0, r8
 8021150:	f7df fd2a 	bl	8000ba8 <__aeabi_d2iz>
 8021154:	4606      	mov	r6, r0
 8021156:	f7df fa0d 	bl	8000574 <__aeabi_i2d>
 802115a:	3630      	adds	r6, #48	; 0x30
 802115c:	4602      	mov	r2, r0
 802115e:	460b      	mov	r3, r1
 8021160:	4640      	mov	r0, r8
 8021162:	4649      	mov	r1, r9
 8021164:	f7df f8b8 	bl	80002d8 <__aeabi_dsub>
 8021168:	f805 6b01 	strb.w	r6, [r5], #1
 802116c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802116e:	429d      	cmp	r5, r3
 8021170:	4680      	mov	r8, r0
 8021172:	4689      	mov	r9, r1
 8021174:	f04f 0200 	mov.w	r2, #0
 8021178:	d124      	bne.n	80211c4 <_dtoa_r+0x60c>
 802117a:	4b1b      	ldr	r3, [pc, #108]	; (80211e8 <_dtoa_r+0x630>)
 802117c:	4650      	mov	r0, sl
 802117e:	4659      	mov	r1, fp
 8021180:	f7df f8ac 	bl	80002dc <__adddf3>
 8021184:	4602      	mov	r2, r0
 8021186:	460b      	mov	r3, r1
 8021188:	4640      	mov	r0, r8
 802118a:	4649      	mov	r1, r9
 802118c:	f7df fcec 	bl	8000b68 <__aeabi_dcmpgt>
 8021190:	2800      	cmp	r0, #0
 8021192:	d173      	bne.n	802127c <_dtoa_r+0x6c4>
 8021194:	4652      	mov	r2, sl
 8021196:	465b      	mov	r3, fp
 8021198:	4913      	ldr	r1, [pc, #76]	; (80211e8 <_dtoa_r+0x630>)
 802119a:	2000      	movs	r0, #0
 802119c:	f7df f89c 	bl	80002d8 <__aeabi_dsub>
 80211a0:	4602      	mov	r2, r0
 80211a2:	460b      	mov	r3, r1
 80211a4:	4640      	mov	r0, r8
 80211a6:	4649      	mov	r1, r9
 80211a8:	f7df fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80211ac:	2800      	cmp	r0, #0
 80211ae:	f43f af35 	beq.w	802101c <_dtoa_r+0x464>
 80211b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80211b4:	1e6b      	subs	r3, r5, #1
 80211b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80211b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80211bc:	2b30      	cmp	r3, #48	; 0x30
 80211be:	d0f8      	beq.n	80211b2 <_dtoa_r+0x5fa>
 80211c0:	9700      	str	r7, [sp, #0]
 80211c2:	e049      	b.n	8021258 <_dtoa_r+0x6a0>
 80211c4:	4b05      	ldr	r3, [pc, #20]	; (80211dc <_dtoa_r+0x624>)
 80211c6:	f7df fa3f 	bl	8000648 <__aeabi_dmul>
 80211ca:	4680      	mov	r8, r0
 80211cc:	4689      	mov	r9, r1
 80211ce:	e7bd      	b.n	802114c <_dtoa_r+0x594>
 80211d0:	08024620 	.word	0x08024620
 80211d4:	080245f8 	.word	0x080245f8
 80211d8:	3ff00000 	.word	0x3ff00000
 80211dc:	40240000 	.word	0x40240000
 80211e0:	401c0000 	.word	0x401c0000
 80211e4:	40140000 	.word	0x40140000
 80211e8:	3fe00000 	.word	0x3fe00000
 80211ec:	9d01      	ldr	r5, [sp, #4]
 80211ee:	4656      	mov	r6, sl
 80211f0:	465f      	mov	r7, fp
 80211f2:	4642      	mov	r2, r8
 80211f4:	464b      	mov	r3, r9
 80211f6:	4630      	mov	r0, r6
 80211f8:	4639      	mov	r1, r7
 80211fa:	f7df fb4f 	bl	800089c <__aeabi_ddiv>
 80211fe:	f7df fcd3 	bl	8000ba8 <__aeabi_d2iz>
 8021202:	4682      	mov	sl, r0
 8021204:	f7df f9b6 	bl	8000574 <__aeabi_i2d>
 8021208:	4642      	mov	r2, r8
 802120a:	464b      	mov	r3, r9
 802120c:	f7df fa1c 	bl	8000648 <__aeabi_dmul>
 8021210:	4602      	mov	r2, r0
 8021212:	460b      	mov	r3, r1
 8021214:	4630      	mov	r0, r6
 8021216:	4639      	mov	r1, r7
 8021218:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802121c:	f7df f85c 	bl	80002d8 <__aeabi_dsub>
 8021220:	f805 6b01 	strb.w	r6, [r5], #1
 8021224:	9e01      	ldr	r6, [sp, #4]
 8021226:	9f03      	ldr	r7, [sp, #12]
 8021228:	1bae      	subs	r6, r5, r6
 802122a:	42b7      	cmp	r7, r6
 802122c:	4602      	mov	r2, r0
 802122e:	460b      	mov	r3, r1
 8021230:	d135      	bne.n	802129e <_dtoa_r+0x6e6>
 8021232:	f7df f853 	bl	80002dc <__adddf3>
 8021236:	4642      	mov	r2, r8
 8021238:	464b      	mov	r3, r9
 802123a:	4606      	mov	r6, r0
 802123c:	460f      	mov	r7, r1
 802123e:	f7df fc93 	bl	8000b68 <__aeabi_dcmpgt>
 8021242:	b9d0      	cbnz	r0, 802127a <_dtoa_r+0x6c2>
 8021244:	4642      	mov	r2, r8
 8021246:	464b      	mov	r3, r9
 8021248:	4630      	mov	r0, r6
 802124a:	4639      	mov	r1, r7
 802124c:	f7df fc64 	bl	8000b18 <__aeabi_dcmpeq>
 8021250:	b110      	cbz	r0, 8021258 <_dtoa_r+0x6a0>
 8021252:	f01a 0f01 	tst.w	sl, #1
 8021256:	d110      	bne.n	802127a <_dtoa_r+0x6c2>
 8021258:	4620      	mov	r0, r4
 802125a:	ee18 1a10 	vmov	r1, s16
 802125e:	f000 fd05 	bl	8021c6c <_Bfree>
 8021262:	2300      	movs	r3, #0
 8021264:	9800      	ldr	r0, [sp, #0]
 8021266:	702b      	strb	r3, [r5, #0]
 8021268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802126a:	3001      	adds	r0, #1
 802126c:	6018      	str	r0, [r3, #0]
 802126e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021270:	2b00      	cmp	r3, #0
 8021272:	f43f acf1 	beq.w	8020c58 <_dtoa_r+0xa0>
 8021276:	601d      	str	r5, [r3, #0]
 8021278:	e4ee      	b.n	8020c58 <_dtoa_r+0xa0>
 802127a:	9f00      	ldr	r7, [sp, #0]
 802127c:	462b      	mov	r3, r5
 802127e:	461d      	mov	r5, r3
 8021280:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021284:	2a39      	cmp	r2, #57	; 0x39
 8021286:	d106      	bne.n	8021296 <_dtoa_r+0x6de>
 8021288:	9a01      	ldr	r2, [sp, #4]
 802128a:	429a      	cmp	r2, r3
 802128c:	d1f7      	bne.n	802127e <_dtoa_r+0x6c6>
 802128e:	9901      	ldr	r1, [sp, #4]
 8021290:	2230      	movs	r2, #48	; 0x30
 8021292:	3701      	adds	r7, #1
 8021294:	700a      	strb	r2, [r1, #0]
 8021296:	781a      	ldrb	r2, [r3, #0]
 8021298:	3201      	adds	r2, #1
 802129a:	701a      	strb	r2, [r3, #0]
 802129c:	e790      	b.n	80211c0 <_dtoa_r+0x608>
 802129e:	4ba6      	ldr	r3, [pc, #664]	; (8021538 <_dtoa_r+0x980>)
 80212a0:	2200      	movs	r2, #0
 80212a2:	f7df f9d1 	bl	8000648 <__aeabi_dmul>
 80212a6:	2200      	movs	r2, #0
 80212a8:	2300      	movs	r3, #0
 80212aa:	4606      	mov	r6, r0
 80212ac:	460f      	mov	r7, r1
 80212ae:	f7df fc33 	bl	8000b18 <__aeabi_dcmpeq>
 80212b2:	2800      	cmp	r0, #0
 80212b4:	d09d      	beq.n	80211f2 <_dtoa_r+0x63a>
 80212b6:	e7cf      	b.n	8021258 <_dtoa_r+0x6a0>
 80212b8:	9a08      	ldr	r2, [sp, #32]
 80212ba:	2a00      	cmp	r2, #0
 80212bc:	f000 80d7 	beq.w	802146e <_dtoa_r+0x8b6>
 80212c0:	9a06      	ldr	r2, [sp, #24]
 80212c2:	2a01      	cmp	r2, #1
 80212c4:	f300 80ba 	bgt.w	802143c <_dtoa_r+0x884>
 80212c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80212ca:	2a00      	cmp	r2, #0
 80212cc:	f000 80b2 	beq.w	8021434 <_dtoa_r+0x87c>
 80212d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80212d4:	9e07      	ldr	r6, [sp, #28]
 80212d6:	9d04      	ldr	r5, [sp, #16]
 80212d8:	9a04      	ldr	r2, [sp, #16]
 80212da:	441a      	add	r2, r3
 80212dc:	9204      	str	r2, [sp, #16]
 80212de:	9a05      	ldr	r2, [sp, #20]
 80212e0:	2101      	movs	r1, #1
 80212e2:	441a      	add	r2, r3
 80212e4:	4620      	mov	r0, r4
 80212e6:	9205      	str	r2, [sp, #20]
 80212e8:	f000 fd78 	bl	8021ddc <__i2b>
 80212ec:	4607      	mov	r7, r0
 80212ee:	2d00      	cmp	r5, #0
 80212f0:	dd0c      	ble.n	802130c <_dtoa_r+0x754>
 80212f2:	9b05      	ldr	r3, [sp, #20]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	dd09      	ble.n	802130c <_dtoa_r+0x754>
 80212f8:	42ab      	cmp	r3, r5
 80212fa:	9a04      	ldr	r2, [sp, #16]
 80212fc:	bfa8      	it	ge
 80212fe:	462b      	movge	r3, r5
 8021300:	1ad2      	subs	r2, r2, r3
 8021302:	9204      	str	r2, [sp, #16]
 8021304:	9a05      	ldr	r2, [sp, #20]
 8021306:	1aed      	subs	r5, r5, r3
 8021308:	1ad3      	subs	r3, r2, r3
 802130a:	9305      	str	r3, [sp, #20]
 802130c:	9b07      	ldr	r3, [sp, #28]
 802130e:	b31b      	cbz	r3, 8021358 <_dtoa_r+0x7a0>
 8021310:	9b08      	ldr	r3, [sp, #32]
 8021312:	2b00      	cmp	r3, #0
 8021314:	f000 80af 	beq.w	8021476 <_dtoa_r+0x8be>
 8021318:	2e00      	cmp	r6, #0
 802131a:	dd13      	ble.n	8021344 <_dtoa_r+0x78c>
 802131c:	4639      	mov	r1, r7
 802131e:	4632      	mov	r2, r6
 8021320:	4620      	mov	r0, r4
 8021322:	f000 fe1b 	bl	8021f5c <__pow5mult>
 8021326:	ee18 2a10 	vmov	r2, s16
 802132a:	4601      	mov	r1, r0
 802132c:	4607      	mov	r7, r0
 802132e:	4620      	mov	r0, r4
 8021330:	f000 fd6a 	bl	8021e08 <__multiply>
 8021334:	ee18 1a10 	vmov	r1, s16
 8021338:	4680      	mov	r8, r0
 802133a:	4620      	mov	r0, r4
 802133c:	f000 fc96 	bl	8021c6c <_Bfree>
 8021340:	ee08 8a10 	vmov	s16, r8
 8021344:	9b07      	ldr	r3, [sp, #28]
 8021346:	1b9a      	subs	r2, r3, r6
 8021348:	d006      	beq.n	8021358 <_dtoa_r+0x7a0>
 802134a:	ee18 1a10 	vmov	r1, s16
 802134e:	4620      	mov	r0, r4
 8021350:	f000 fe04 	bl	8021f5c <__pow5mult>
 8021354:	ee08 0a10 	vmov	s16, r0
 8021358:	2101      	movs	r1, #1
 802135a:	4620      	mov	r0, r4
 802135c:	f000 fd3e 	bl	8021ddc <__i2b>
 8021360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021362:	2b00      	cmp	r3, #0
 8021364:	4606      	mov	r6, r0
 8021366:	f340 8088 	ble.w	802147a <_dtoa_r+0x8c2>
 802136a:	461a      	mov	r2, r3
 802136c:	4601      	mov	r1, r0
 802136e:	4620      	mov	r0, r4
 8021370:	f000 fdf4 	bl	8021f5c <__pow5mult>
 8021374:	9b06      	ldr	r3, [sp, #24]
 8021376:	2b01      	cmp	r3, #1
 8021378:	4606      	mov	r6, r0
 802137a:	f340 8081 	ble.w	8021480 <_dtoa_r+0x8c8>
 802137e:	f04f 0800 	mov.w	r8, #0
 8021382:	6933      	ldr	r3, [r6, #16]
 8021384:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021388:	6918      	ldr	r0, [r3, #16]
 802138a:	f000 fcd7 	bl	8021d3c <__hi0bits>
 802138e:	f1c0 0020 	rsb	r0, r0, #32
 8021392:	9b05      	ldr	r3, [sp, #20]
 8021394:	4418      	add	r0, r3
 8021396:	f010 001f 	ands.w	r0, r0, #31
 802139a:	f000 8092 	beq.w	80214c2 <_dtoa_r+0x90a>
 802139e:	f1c0 0320 	rsb	r3, r0, #32
 80213a2:	2b04      	cmp	r3, #4
 80213a4:	f340 808a 	ble.w	80214bc <_dtoa_r+0x904>
 80213a8:	f1c0 001c 	rsb	r0, r0, #28
 80213ac:	9b04      	ldr	r3, [sp, #16]
 80213ae:	4403      	add	r3, r0
 80213b0:	9304      	str	r3, [sp, #16]
 80213b2:	9b05      	ldr	r3, [sp, #20]
 80213b4:	4403      	add	r3, r0
 80213b6:	4405      	add	r5, r0
 80213b8:	9305      	str	r3, [sp, #20]
 80213ba:	9b04      	ldr	r3, [sp, #16]
 80213bc:	2b00      	cmp	r3, #0
 80213be:	dd07      	ble.n	80213d0 <_dtoa_r+0x818>
 80213c0:	ee18 1a10 	vmov	r1, s16
 80213c4:	461a      	mov	r2, r3
 80213c6:	4620      	mov	r0, r4
 80213c8:	f000 fe22 	bl	8022010 <__lshift>
 80213cc:	ee08 0a10 	vmov	s16, r0
 80213d0:	9b05      	ldr	r3, [sp, #20]
 80213d2:	2b00      	cmp	r3, #0
 80213d4:	dd05      	ble.n	80213e2 <_dtoa_r+0x82a>
 80213d6:	4631      	mov	r1, r6
 80213d8:	461a      	mov	r2, r3
 80213da:	4620      	mov	r0, r4
 80213dc:	f000 fe18 	bl	8022010 <__lshift>
 80213e0:	4606      	mov	r6, r0
 80213e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80213e4:	2b00      	cmp	r3, #0
 80213e6:	d06e      	beq.n	80214c6 <_dtoa_r+0x90e>
 80213e8:	ee18 0a10 	vmov	r0, s16
 80213ec:	4631      	mov	r1, r6
 80213ee:	f000 fe7f 	bl	80220f0 <__mcmp>
 80213f2:	2800      	cmp	r0, #0
 80213f4:	da67      	bge.n	80214c6 <_dtoa_r+0x90e>
 80213f6:	9b00      	ldr	r3, [sp, #0]
 80213f8:	3b01      	subs	r3, #1
 80213fa:	ee18 1a10 	vmov	r1, s16
 80213fe:	9300      	str	r3, [sp, #0]
 8021400:	220a      	movs	r2, #10
 8021402:	2300      	movs	r3, #0
 8021404:	4620      	mov	r0, r4
 8021406:	f000 fc53 	bl	8021cb0 <__multadd>
 802140a:	9b08      	ldr	r3, [sp, #32]
 802140c:	ee08 0a10 	vmov	s16, r0
 8021410:	2b00      	cmp	r3, #0
 8021412:	f000 81b1 	beq.w	8021778 <_dtoa_r+0xbc0>
 8021416:	2300      	movs	r3, #0
 8021418:	4639      	mov	r1, r7
 802141a:	220a      	movs	r2, #10
 802141c:	4620      	mov	r0, r4
 802141e:	f000 fc47 	bl	8021cb0 <__multadd>
 8021422:	9b02      	ldr	r3, [sp, #8]
 8021424:	2b00      	cmp	r3, #0
 8021426:	4607      	mov	r7, r0
 8021428:	f300 808e 	bgt.w	8021548 <_dtoa_r+0x990>
 802142c:	9b06      	ldr	r3, [sp, #24]
 802142e:	2b02      	cmp	r3, #2
 8021430:	dc51      	bgt.n	80214d6 <_dtoa_r+0x91e>
 8021432:	e089      	b.n	8021548 <_dtoa_r+0x990>
 8021434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021436:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802143a:	e74b      	b.n	80212d4 <_dtoa_r+0x71c>
 802143c:	9b03      	ldr	r3, [sp, #12]
 802143e:	1e5e      	subs	r6, r3, #1
 8021440:	9b07      	ldr	r3, [sp, #28]
 8021442:	42b3      	cmp	r3, r6
 8021444:	bfbf      	itttt	lt
 8021446:	9b07      	ldrlt	r3, [sp, #28]
 8021448:	9607      	strlt	r6, [sp, #28]
 802144a:	1af2      	sublt	r2, r6, r3
 802144c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802144e:	bfb6      	itet	lt
 8021450:	189b      	addlt	r3, r3, r2
 8021452:	1b9e      	subge	r6, r3, r6
 8021454:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021456:	9b03      	ldr	r3, [sp, #12]
 8021458:	bfb8      	it	lt
 802145a:	2600      	movlt	r6, #0
 802145c:	2b00      	cmp	r3, #0
 802145e:	bfb7      	itett	lt
 8021460:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8021464:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021468:	1a9d      	sublt	r5, r3, r2
 802146a:	2300      	movlt	r3, #0
 802146c:	e734      	b.n	80212d8 <_dtoa_r+0x720>
 802146e:	9e07      	ldr	r6, [sp, #28]
 8021470:	9d04      	ldr	r5, [sp, #16]
 8021472:	9f08      	ldr	r7, [sp, #32]
 8021474:	e73b      	b.n	80212ee <_dtoa_r+0x736>
 8021476:	9a07      	ldr	r2, [sp, #28]
 8021478:	e767      	b.n	802134a <_dtoa_r+0x792>
 802147a:	9b06      	ldr	r3, [sp, #24]
 802147c:	2b01      	cmp	r3, #1
 802147e:	dc18      	bgt.n	80214b2 <_dtoa_r+0x8fa>
 8021480:	f1ba 0f00 	cmp.w	sl, #0
 8021484:	d115      	bne.n	80214b2 <_dtoa_r+0x8fa>
 8021486:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802148a:	b993      	cbnz	r3, 80214b2 <_dtoa_r+0x8fa>
 802148c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021490:	0d1b      	lsrs	r3, r3, #20
 8021492:	051b      	lsls	r3, r3, #20
 8021494:	b183      	cbz	r3, 80214b8 <_dtoa_r+0x900>
 8021496:	9b04      	ldr	r3, [sp, #16]
 8021498:	3301      	adds	r3, #1
 802149a:	9304      	str	r3, [sp, #16]
 802149c:	9b05      	ldr	r3, [sp, #20]
 802149e:	3301      	adds	r3, #1
 80214a0:	9305      	str	r3, [sp, #20]
 80214a2:	f04f 0801 	mov.w	r8, #1
 80214a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	f47f af6a 	bne.w	8021382 <_dtoa_r+0x7ca>
 80214ae:	2001      	movs	r0, #1
 80214b0:	e76f      	b.n	8021392 <_dtoa_r+0x7da>
 80214b2:	f04f 0800 	mov.w	r8, #0
 80214b6:	e7f6      	b.n	80214a6 <_dtoa_r+0x8ee>
 80214b8:	4698      	mov	r8, r3
 80214ba:	e7f4      	b.n	80214a6 <_dtoa_r+0x8ee>
 80214bc:	f43f af7d 	beq.w	80213ba <_dtoa_r+0x802>
 80214c0:	4618      	mov	r0, r3
 80214c2:	301c      	adds	r0, #28
 80214c4:	e772      	b.n	80213ac <_dtoa_r+0x7f4>
 80214c6:	9b03      	ldr	r3, [sp, #12]
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	dc37      	bgt.n	802153c <_dtoa_r+0x984>
 80214cc:	9b06      	ldr	r3, [sp, #24]
 80214ce:	2b02      	cmp	r3, #2
 80214d0:	dd34      	ble.n	802153c <_dtoa_r+0x984>
 80214d2:	9b03      	ldr	r3, [sp, #12]
 80214d4:	9302      	str	r3, [sp, #8]
 80214d6:	9b02      	ldr	r3, [sp, #8]
 80214d8:	b96b      	cbnz	r3, 80214f6 <_dtoa_r+0x93e>
 80214da:	4631      	mov	r1, r6
 80214dc:	2205      	movs	r2, #5
 80214de:	4620      	mov	r0, r4
 80214e0:	f000 fbe6 	bl	8021cb0 <__multadd>
 80214e4:	4601      	mov	r1, r0
 80214e6:	4606      	mov	r6, r0
 80214e8:	ee18 0a10 	vmov	r0, s16
 80214ec:	f000 fe00 	bl	80220f0 <__mcmp>
 80214f0:	2800      	cmp	r0, #0
 80214f2:	f73f adbb 	bgt.w	802106c <_dtoa_r+0x4b4>
 80214f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80214f8:	9d01      	ldr	r5, [sp, #4]
 80214fa:	43db      	mvns	r3, r3
 80214fc:	9300      	str	r3, [sp, #0]
 80214fe:	f04f 0800 	mov.w	r8, #0
 8021502:	4631      	mov	r1, r6
 8021504:	4620      	mov	r0, r4
 8021506:	f000 fbb1 	bl	8021c6c <_Bfree>
 802150a:	2f00      	cmp	r7, #0
 802150c:	f43f aea4 	beq.w	8021258 <_dtoa_r+0x6a0>
 8021510:	f1b8 0f00 	cmp.w	r8, #0
 8021514:	d005      	beq.n	8021522 <_dtoa_r+0x96a>
 8021516:	45b8      	cmp	r8, r7
 8021518:	d003      	beq.n	8021522 <_dtoa_r+0x96a>
 802151a:	4641      	mov	r1, r8
 802151c:	4620      	mov	r0, r4
 802151e:	f000 fba5 	bl	8021c6c <_Bfree>
 8021522:	4639      	mov	r1, r7
 8021524:	4620      	mov	r0, r4
 8021526:	f000 fba1 	bl	8021c6c <_Bfree>
 802152a:	e695      	b.n	8021258 <_dtoa_r+0x6a0>
 802152c:	2600      	movs	r6, #0
 802152e:	4637      	mov	r7, r6
 8021530:	e7e1      	b.n	80214f6 <_dtoa_r+0x93e>
 8021532:	9700      	str	r7, [sp, #0]
 8021534:	4637      	mov	r7, r6
 8021536:	e599      	b.n	802106c <_dtoa_r+0x4b4>
 8021538:	40240000 	.word	0x40240000
 802153c:	9b08      	ldr	r3, [sp, #32]
 802153e:	2b00      	cmp	r3, #0
 8021540:	f000 80ca 	beq.w	80216d8 <_dtoa_r+0xb20>
 8021544:	9b03      	ldr	r3, [sp, #12]
 8021546:	9302      	str	r3, [sp, #8]
 8021548:	2d00      	cmp	r5, #0
 802154a:	dd05      	ble.n	8021558 <_dtoa_r+0x9a0>
 802154c:	4639      	mov	r1, r7
 802154e:	462a      	mov	r2, r5
 8021550:	4620      	mov	r0, r4
 8021552:	f000 fd5d 	bl	8022010 <__lshift>
 8021556:	4607      	mov	r7, r0
 8021558:	f1b8 0f00 	cmp.w	r8, #0
 802155c:	d05b      	beq.n	8021616 <_dtoa_r+0xa5e>
 802155e:	6879      	ldr	r1, [r7, #4]
 8021560:	4620      	mov	r0, r4
 8021562:	f000 fb43 	bl	8021bec <_Balloc>
 8021566:	4605      	mov	r5, r0
 8021568:	b928      	cbnz	r0, 8021576 <_dtoa_r+0x9be>
 802156a:	4b87      	ldr	r3, [pc, #540]	; (8021788 <_dtoa_r+0xbd0>)
 802156c:	4602      	mov	r2, r0
 802156e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021572:	f7ff bb3b 	b.w	8020bec <_dtoa_r+0x34>
 8021576:	693a      	ldr	r2, [r7, #16]
 8021578:	3202      	adds	r2, #2
 802157a:	0092      	lsls	r2, r2, #2
 802157c:	f107 010c 	add.w	r1, r7, #12
 8021580:	300c      	adds	r0, #12
 8021582:	f7fe fca7 	bl	801fed4 <memcpy>
 8021586:	2201      	movs	r2, #1
 8021588:	4629      	mov	r1, r5
 802158a:	4620      	mov	r0, r4
 802158c:	f000 fd40 	bl	8022010 <__lshift>
 8021590:	9b01      	ldr	r3, [sp, #4]
 8021592:	f103 0901 	add.w	r9, r3, #1
 8021596:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802159a:	4413      	add	r3, r2
 802159c:	9305      	str	r3, [sp, #20]
 802159e:	f00a 0301 	and.w	r3, sl, #1
 80215a2:	46b8      	mov	r8, r7
 80215a4:	9304      	str	r3, [sp, #16]
 80215a6:	4607      	mov	r7, r0
 80215a8:	4631      	mov	r1, r6
 80215aa:	ee18 0a10 	vmov	r0, s16
 80215ae:	f7ff fa75 	bl	8020a9c <quorem>
 80215b2:	4641      	mov	r1, r8
 80215b4:	9002      	str	r0, [sp, #8]
 80215b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80215ba:	ee18 0a10 	vmov	r0, s16
 80215be:	f000 fd97 	bl	80220f0 <__mcmp>
 80215c2:	463a      	mov	r2, r7
 80215c4:	9003      	str	r0, [sp, #12]
 80215c6:	4631      	mov	r1, r6
 80215c8:	4620      	mov	r0, r4
 80215ca:	f000 fdad 	bl	8022128 <__mdiff>
 80215ce:	68c2      	ldr	r2, [r0, #12]
 80215d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80215d4:	4605      	mov	r5, r0
 80215d6:	bb02      	cbnz	r2, 802161a <_dtoa_r+0xa62>
 80215d8:	4601      	mov	r1, r0
 80215da:	ee18 0a10 	vmov	r0, s16
 80215de:	f000 fd87 	bl	80220f0 <__mcmp>
 80215e2:	4602      	mov	r2, r0
 80215e4:	4629      	mov	r1, r5
 80215e6:	4620      	mov	r0, r4
 80215e8:	9207      	str	r2, [sp, #28]
 80215ea:	f000 fb3f 	bl	8021c6c <_Bfree>
 80215ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80215f2:	ea43 0102 	orr.w	r1, r3, r2
 80215f6:	9b04      	ldr	r3, [sp, #16]
 80215f8:	430b      	orrs	r3, r1
 80215fa:	464d      	mov	r5, r9
 80215fc:	d10f      	bne.n	802161e <_dtoa_r+0xa66>
 80215fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021602:	d02a      	beq.n	802165a <_dtoa_r+0xaa2>
 8021604:	9b03      	ldr	r3, [sp, #12]
 8021606:	2b00      	cmp	r3, #0
 8021608:	dd02      	ble.n	8021610 <_dtoa_r+0xa58>
 802160a:	9b02      	ldr	r3, [sp, #8]
 802160c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8021610:	f88b a000 	strb.w	sl, [fp]
 8021614:	e775      	b.n	8021502 <_dtoa_r+0x94a>
 8021616:	4638      	mov	r0, r7
 8021618:	e7ba      	b.n	8021590 <_dtoa_r+0x9d8>
 802161a:	2201      	movs	r2, #1
 802161c:	e7e2      	b.n	80215e4 <_dtoa_r+0xa2c>
 802161e:	9b03      	ldr	r3, [sp, #12]
 8021620:	2b00      	cmp	r3, #0
 8021622:	db04      	blt.n	802162e <_dtoa_r+0xa76>
 8021624:	9906      	ldr	r1, [sp, #24]
 8021626:	430b      	orrs	r3, r1
 8021628:	9904      	ldr	r1, [sp, #16]
 802162a:	430b      	orrs	r3, r1
 802162c:	d122      	bne.n	8021674 <_dtoa_r+0xabc>
 802162e:	2a00      	cmp	r2, #0
 8021630:	ddee      	ble.n	8021610 <_dtoa_r+0xa58>
 8021632:	ee18 1a10 	vmov	r1, s16
 8021636:	2201      	movs	r2, #1
 8021638:	4620      	mov	r0, r4
 802163a:	f000 fce9 	bl	8022010 <__lshift>
 802163e:	4631      	mov	r1, r6
 8021640:	ee08 0a10 	vmov	s16, r0
 8021644:	f000 fd54 	bl	80220f0 <__mcmp>
 8021648:	2800      	cmp	r0, #0
 802164a:	dc03      	bgt.n	8021654 <_dtoa_r+0xa9c>
 802164c:	d1e0      	bne.n	8021610 <_dtoa_r+0xa58>
 802164e:	f01a 0f01 	tst.w	sl, #1
 8021652:	d0dd      	beq.n	8021610 <_dtoa_r+0xa58>
 8021654:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021658:	d1d7      	bne.n	802160a <_dtoa_r+0xa52>
 802165a:	2339      	movs	r3, #57	; 0x39
 802165c:	f88b 3000 	strb.w	r3, [fp]
 8021660:	462b      	mov	r3, r5
 8021662:	461d      	mov	r5, r3
 8021664:	3b01      	subs	r3, #1
 8021666:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802166a:	2a39      	cmp	r2, #57	; 0x39
 802166c:	d071      	beq.n	8021752 <_dtoa_r+0xb9a>
 802166e:	3201      	adds	r2, #1
 8021670:	701a      	strb	r2, [r3, #0]
 8021672:	e746      	b.n	8021502 <_dtoa_r+0x94a>
 8021674:	2a00      	cmp	r2, #0
 8021676:	dd07      	ble.n	8021688 <_dtoa_r+0xad0>
 8021678:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802167c:	d0ed      	beq.n	802165a <_dtoa_r+0xaa2>
 802167e:	f10a 0301 	add.w	r3, sl, #1
 8021682:	f88b 3000 	strb.w	r3, [fp]
 8021686:	e73c      	b.n	8021502 <_dtoa_r+0x94a>
 8021688:	9b05      	ldr	r3, [sp, #20]
 802168a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802168e:	4599      	cmp	r9, r3
 8021690:	d047      	beq.n	8021722 <_dtoa_r+0xb6a>
 8021692:	ee18 1a10 	vmov	r1, s16
 8021696:	2300      	movs	r3, #0
 8021698:	220a      	movs	r2, #10
 802169a:	4620      	mov	r0, r4
 802169c:	f000 fb08 	bl	8021cb0 <__multadd>
 80216a0:	45b8      	cmp	r8, r7
 80216a2:	ee08 0a10 	vmov	s16, r0
 80216a6:	f04f 0300 	mov.w	r3, #0
 80216aa:	f04f 020a 	mov.w	r2, #10
 80216ae:	4641      	mov	r1, r8
 80216b0:	4620      	mov	r0, r4
 80216b2:	d106      	bne.n	80216c2 <_dtoa_r+0xb0a>
 80216b4:	f000 fafc 	bl	8021cb0 <__multadd>
 80216b8:	4680      	mov	r8, r0
 80216ba:	4607      	mov	r7, r0
 80216bc:	f109 0901 	add.w	r9, r9, #1
 80216c0:	e772      	b.n	80215a8 <_dtoa_r+0x9f0>
 80216c2:	f000 faf5 	bl	8021cb0 <__multadd>
 80216c6:	4639      	mov	r1, r7
 80216c8:	4680      	mov	r8, r0
 80216ca:	2300      	movs	r3, #0
 80216cc:	220a      	movs	r2, #10
 80216ce:	4620      	mov	r0, r4
 80216d0:	f000 faee 	bl	8021cb0 <__multadd>
 80216d4:	4607      	mov	r7, r0
 80216d6:	e7f1      	b.n	80216bc <_dtoa_r+0xb04>
 80216d8:	9b03      	ldr	r3, [sp, #12]
 80216da:	9302      	str	r3, [sp, #8]
 80216dc:	9d01      	ldr	r5, [sp, #4]
 80216de:	ee18 0a10 	vmov	r0, s16
 80216e2:	4631      	mov	r1, r6
 80216e4:	f7ff f9da 	bl	8020a9c <quorem>
 80216e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80216ec:	9b01      	ldr	r3, [sp, #4]
 80216ee:	f805 ab01 	strb.w	sl, [r5], #1
 80216f2:	1aea      	subs	r2, r5, r3
 80216f4:	9b02      	ldr	r3, [sp, #8]
 80216f6:	4293      	cmp	r3, r2
 80216f8:	dd09      	ble.n	802170e <_dtoa_r+0xb56>
 80216fa:	ee18 1a10 	vmov	r1, s16
 80216fe:	2300      	movs	r3, #0
 8021700:	220a      	movs	r2, #10
 8021702:	4620      	mov	r0, r4
 8021704:	f000 fad4 	bl	8021cb0 <__multadd>
 8021708:	ee08 0a10 	vmov	s16, r0
 802170c:	e7e7      	b.n	80216de <_dtoa_r+0xb26>
 802170e:	9b02      	ldr	r3, [sp, #8]
 8021710:	2b00      	cmp	r3, #0
 8021712:	bfc8      	it	gt
 8021714:	461d      	movgt	r5, r3
 8021716:	9b01      	ldr	r3, [sp, #4]
 8021718:	bfd8      	it	le
 802171a:	2501      	movle	r5, #1
 802171c:	441d      	add	r5, r3
 802171e:	f04f 0800 	mov.w	r8, #0
 8021722:	ee18 1a10 	vmov	r1, s16
 8021726:	2201      	movs	r2, #1
 8021728:	4620      	mov	r0, r4
 802172a:	f000 fc71 	bl	8022010 <__lshift>
 802172e:	4631      	mov	r1, r6
 8021730:	ee08 0a10 	vmov	s16, r0
 8021734:	f000 fcdc 	bl	80220f0 <__mcmp>
 8021738:	2800      	cmp	r0, #0
 802173a:	dc91      	bgt.n	8021660 <_dtoa_r+0xaa8>
 802173c:	d102      	bne.n	8021744 <_dtoa_r+0xb8c>
 802173e:	f01a 0f01 	tst.w	sl, #1
 8021742:	d18d      	bne.n	8021660 <_dtoa_r+0xaa8>
 8021744:	462b      	mov	r3, r5
 8021746:	461d      	mov	r5, r3
 8021748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802174c:	2a30      	cmp	r2, #48	; 0x30
 802174e:	d0fa      	beq.n	8021746 <_dtoa_r+0xb8e>
 8021750:	e6d7      	b.n	8021502 <_dtoa_r+0x94a>
 8021752:	9a01      	ldr	r2, [sp, #4]
 8021754:	429a      	cmp	r2, r3
 8021756:	d184      	bne.n	8021662 <_dtoa_r+0xaaa>
 8021758:	9b00      	ldr	r3, [sp, #0]
 802175a:	3301      	adds	r3, #1
 802175c:	9300      	str	r3, [sp, #0]
 802175e:	2331      	movs	r3, #49	; 0x31
 8021760:	7013      	strb	r3, [r2, #0]
 8021762:	e6ce      	b.n	8021502 <_dtoa_r+0x94a>
 8021764:	4b09      	ldr	r3, [pc, #36]	; (802178c <_dtoa_r+0xbd4>)
 8021766:	f7ff ba95 	b.w	8020c94 <_dtoa_r+0xdc>
 802176a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802176c:	2b00      	cmp	r3, #0
 802176e:	f47f aa6e 	bne.w	8020c4e <_dtoa_r+0x96>
 8021772:	4b07      	ldr	r3, [pc, #28]	; (8021790 <_dtoa_r+0xbd8>)
 8021774:	f7ff ba8e 	b.w	8020c94 <_dtoa_r+0xdc>
 8021778:	9b02      	ldr	r3, [sp, #8]
 802177a:	2b00      	cmp	r3, #0
 802177c:	dcae      	bgt.n	80216dc <_dtoa_r+0xb24>
 802177e:	9b06      	ldr	r3, [sp, #24]
 8021780:	2b02      	cmp	r3, #2
 8021782:	f73f aea8 	bgt.w	80214d6 <_dtoa_r+0x91e>
 8021786:	e7a9      	b.n	80216dc <_dtoa_r+0xb24>
 8021788:	08024527 	.word	0x08024527
 802178c:	08024484 	.word	0x08024484
 8021790:	080244a8 	.word	0x080244a8

08021794 <__sflush_r>:
 8021794:	898a      	ldrh	r2, [r1, #12]
 8021796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802179a:	4605      	mov	r5, r0
 802179c:	0710      	lsls	r0, r2, #28
 802179e:	460c      	mov	r4, r1
 80217a0:	d458      	bmi.n	8021854 <__sflush_r+0xc0>
 80217a2:	684b      	ldr	r3, [r1, #4]
 80217a4:	2b00      	cmp	r3, #0
 80217a6:	dc05      	bgt.n	80217b4 <__sflush_r+0x20>
 80217a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	dc02      	bgt.n	80217b4 <__sflush_r+0x20>
 80217ae:	2000      	movs	r0, #0
 80217b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80217b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80217b6:	2e00      	cmp	r6, #0
 80217b8:	d0f9      	beq.n	80217ae <__sflush_r+0x1a>
 80217ba:	2300      	movs	r3, #0
 80217bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80217c0:	682f      	ldr	r7, [r5, #0]
 80217c2:	602b      	str	r3, [r5, #0]
 80217c4:	d032      	beq.n	802182c <__sflush_r+0x98>
 80217c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80217c8:	89a3      	ldrh	r3, [r4, #12]
 80217ca:	075a      	lsls	r2, r3, #29
 80217cc:	d505      	bpl.n	80217da <__sflush_r+0x46>
 80217ce:	6863      	ldr	r3, [r4, #4]
 80217d0:	1ac0      	subs	r0, r0, r3
 80217d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80217d4:	b10b      	cbz	r3, 80217da <__sflush_r+0x46>
 80217d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80217d8:	1ac0      	subs	r0, r0, r3
 80217da:	2300      	movs	r3, #0
 80217dc:	4602      	mov	r2, r0
 80217de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80217e0:	6a21      	ldr	r1, [r4, #32]
 80217e2:	4628      	mov	r0, r5
 80217e4:	47b0      	blx	r6
 80217e6:	1c43      	adds	r3, r0, #1
 80217e8:	89a3      	ldrh	r3, [r4, #12]
 80217ea:	d106      	bne.n	80217fa <__sflush_r+0x66>
 80217ec:	6829      	ldr	r1, [r5, #0]
 80217ee:	291d      	cmp	r1, #29
 80217f0:	d82c      	bhi.n	802184c <__sflush_r+0xb8>
 80217f2:	4a2a      	ldr	r2, [pc, #168]	; (802189c <__sflush_r+0x108>)
 80217f4:	40ca      	lsrs	r2, r1
 80217f6:	07d6      	lsls	r6, r2, #31
 80217f8:	d528      	bpl.n	802184c <__sflush_r+0xb8>
 80217fa:	2200      	movs	r2, #0
 80217fc:	6062      	str	r2, [r4, #4]
 80217fe:	04d9      	lsls	r1, r3, #19
 8021800:	6922      	ldr	r2, [r4, #16]
 8021802:	6022      	str	r2, [r4, #0]
 8021804:	d504      	bpl.n	8021810 <__sflush_r+0x7c>
 8021806:	1c42      	adds	r2, r0, #1
 8021808:	d101      	bne.n	802180e <__sflush_r+0x7a>
 802180a:	682b      	ldr	r3, [r5, #0]
 802180c:	b903      	cbnz	r3, 8021810 <__sflush_r+0x7c>
 802180e:	6560      	str	r0, [r4, #84]	; 0x54
 8021810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021812:	602f      	str	r7, [r5, #0]
 8021814:	2900      	cmp	r1, #0
 8021816:	d0ca      	beq.n	80217ae <__sflush_r+0x1a>
 8021818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802181c:	4299      	cmp	r1, r3
 802181e:	d002      	beq.n	8021826 <__sflush_r+0x92>
 8021820:	4628      	mov	r0, r5
 8021822:	f000 fd7d 	bl	8022320 <_free_r>
 8021826:	2000      	movs	r0, #0
 8021828:	6360      	str	r0, [r4, #52]	; 0x34
 802182a:	e7c1      	b.n	80217b0 <__sflush_r+0x1c>
 802182c:	6a21      	ldr	r1, [r4, #32]
 802182e:	2301      	movs	r3, #1
 8021830:	4628      	mov	r0, r5
 8021832:	47b0      	blx	r6
 8021834:	1c41      	adds	r1, r0, #1
 8021836:	d1c7      	bne.n	80217c8 <__sflush_r+0x34>
 8021838:	682b      	ldr	r3, [r5, #0]
 802183a:	2b00      	cmp	r3, #0
 802183c:	d0c4      	beq.n	80217c8 <__sflush_r+0x34>
 802183e:	2b1d      	cmp	r3, #29
 8021840:	d001      	beq.n	8021846 <__sflush_r+0xb2>
 8021842:	2b16      	cmp	r3, #22
 8021844:	d101      	bne.n	802184a <__sflush_r+0xb6>
 8021846:	602f      	str	r7, [r5, #0]
 8021848:	e7b1      	b.n	80217ae <__sflush_r+0x1a>
 802184a:	89a3      	ldrh	r3, [r4, #12]
 802184c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021850:	81a3      	strh	r3, [r4, #12]
 8021852:	e7ad      	b.n	80217b0 <__sflush_r+0x1c>
 8021854:	690f      	ldr	r7, [r1, #16]
 8021856:	2f00      	cmp	r7, #0
 8021858:	d0a9      	beq.n	80217ae <__sflush_r+0x1a>
 802185a:	0793      	lsls	r3, r2, #30
 802185c:	680e      	ldr	r6, [r1, #0]
 802185e:	bf08      	it	eq
 8021860:	694b      	ldreq	r3, [r1, #20]
 8021862:	600f      	str	r7, [r1, #0]
 8021864:	bf18      	it	ne
 8021866:	2300      	movne	r3, #0
 8021868:	eba6 0807 	sub.w	r8, r6, r7
 802186c:	608b      	str	r3, [r1, #8]
 802186e:	f1b8 0f00 	cmp.w	r8, #0
 8021872:	dd9c      	ble.n	80217ae <__sflush_r+0x1a>
 8021874:	6a21      	ldr	r1, [r4, #32]
 8021876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021878:	4643      	mov	r3, r8
 802187a:	463a      	mov	r2, r7
 802187c:	4628      	mov	r0, r5
 802187e:	47b0      	blx	r6
 8021880:	2800      	cmp	r0, #0
 8021882:	dc06      	bgt.n	8021892 <__sflush_r+0xfe>
 8021884:	89a3      	ldrh	r3, [r4, #12]
 8021886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802188a:	81a3      	strh	r3, [r4, #12]
 802188c:	f04f 30ff 	mov.w	r0, #4294967295
 8021890:	e78e      	b.n	80217b0 <__sflush_r+0x1c>
 8021892:	4407      	add	r7, r0
 8021894:	eba8 0800 	sub.w	r8, r8, r0
 8021898:	e7e9      	b.n	802186e <__sflush_r+0xda>
 802189a:	bf00      	nop
 802189c:	20400001 	.word	0x20400001

080218a0 <_fflush_r>:
 80218a0:	b538      	push	{r3, r4, r5, lr}
 80218a2:	690b      	ldr	r3, [r1, #16]
 80218a4:	4605      	mov	r5, r0
 80218a6:	460c      	mov	r4, r1
 80218a8:	b913      	cbnz	r3, 80218b0 <_fflush_r+0x10>
 80218aa:	2500      	movs	r5, #0
 80218ac:	4628      	mov	r0, r5
 80218ae:	bd38      	pop	{r3, r4, r5, pc}
 80218b0:	b118      	cbz	r0, 80218ba <_fflush_r+0x1a>
 80218b2:	6983      	ldr	r3, [r0, #24]
 80218b4:	b90b      	cbnz	r3, 80218ba <_fflush_r+0x1a>
 80218b6:	f000 f887 	bl	80219c8 <__sinit>
 80218ba:	4b14      	ldr	r3, [pc, #80]	; (802190c <_fflush_r+0x6c>)
 80218bc:	429c      	cmp	r4, r3
 80218be:	d11b      	bne.n	80218f8 <_fflush_r+0x58>
 80218c0:	686c      	ldr	r4, [r5, #4]
 80218c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80218c6:	2b00      	cmp	r3, #0
 80218c8:	d0ef      	beq.n	80218aa <_fflush_r+0xa>
 80218ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80218cc:	07d0      	lsls	r0, r2, #31
 80218ce:	d404      	bmi.n	80218da <_fflush_r+0x3a>
 80218d0:	0599      	lsls	r1, r3, #22
 80218d2:	d402      	bmi.n	80218da <_fflush_r+0x3a>
 80218d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80218d6:	f000 f91a 	bl	8021b0e <__retarget_lock_acquire_recursive>
 80218da:	4628      	mov	r0, r5
 80218dc:	4621      	mov	r1, r4
 80218de:	f7ff ff59 	bl	8021794 <__sflush_r>
 80218e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80218e4:	07da      	lsls	r2, r3, #31
 80218e6:	4605      	mov	r5, r0
 80218e8:	d4e0      	bmi.n	80218ac <_fflush_r+0xc>
 80218ea:	89a3      	ldrh	r3, [r4, #12]
 80218ec:	059b      	lsls	r3, r3, #22
 80218ee:	d4dd      	bmi.n	80218ac <_fflush_r+0xc>
 80218f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80218f2:	f000 f90d 	bl	8021b10 <__retarget_lock_release_recursive>
 80218f6:	e7d9      	b.n	80218ac <_fflush_r+0xc>
 80218f8:	4b05      	ldr	r3, [pc, #20]	; (8021910 <_fflush_r+0x70>)
 80218fa:	429c      	cmp	r4, r3
 80218fc:	d101      	bne.n	8021902 <_fflush_r+0x62>
 80218fe:	68ac      	ldr	r4, [r5, #8]
 8021900:	e7df      	b.n	80218c2 <_fflush_r+0x22>
 8021902:	4b04      	ldr	r3, [pc, #16]	; (8021914 <_fflush_r+0x74>)
 8021904:	429c      	cmp	r4, r3
 8021906:	bf08      	it	eq
 8021908:	68ec      	ldreq	r4, [r5, #12]
 802190a:	e7da      	b.n	80218c2 <_fflush_r+0x22>
 802190c:	08024558 	.word	0x08024558
 8021910:	08024578 	.word	0x08024578
 8021914:	08024538 	.word	0x08024538

08021918 <std>:
 8021918:	2300      	movs	r3, #0
 802191a:	b510      	push	{r4, lr}
 802191c:	4604      	mov	r4, r0
 802191e:	e9c0 3300 	strd	r3, r3, [r0]
 8021922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021926:	6083      	str	r3, [r0, #8]
 8021928:	8181      	strh	r1, [r0, #12]
 802192a:	6643      	str	r3, [r0, #100]	; 0x64
 802192c:	81c2      	strh	r2, [r0, #14]
 802192e:	6183      	str	r3, [r0, #24]
 8021930:	4619      	mov	r1, r3
 8021932:	2208      	movs	r2, #8
 8021934:	305c      	adds	r0, #92	; 0x5c
 8021936:	f7fe fadb 	bl	801fef0 <memset>
 802193a:	4b05      	ldr	r3, [pc, #20]	; (8021950 <std+0x38>)
 802193c:	6263      	str	r3, [r4, #36]	; 0x24
 802193e:	4b05      	ldr	r3, [pc, #20]	; (8021954 <std+0x3c>)
 8021940:	62a3      	str	r3, [r4, #40]	; 0x28
 8021942:	4b05      	ldr	r3, [pc, #20]	; (8021958 <std+0x40>)
 8021944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021946:	4b05      	ldr	r3, [pc, #20]	; (802195c <std+0x44>)
 8021948:	6224      	str	r4, [r4, #32]
 802194a:	6323      	str	r3, [r4, #48]	; 0x30
 802194c:	bd10      	pop	{r4, pc}
 802194e:	bf00      	nop
 8021950:	08022845 	.word	0x08022845
 8021954:	08022867 	.word	0x08022867
 8021958:	0802289f 	.word	0x0802289f
 802195c:	080228c3 	.word	0x080228c3

08021960 <_cleanup_r>:
 8021960:	4901      	ldr	r1, [pc, #4]	; (8021968 <_cleanup_r+0x8>)
 8021962:	f000 b8af 	b.w	8021ac4 <_fwalk_reent>
 8021966:	bf00      	nop
 8021968:	080218a1 	.word	0x080218a1

0802196c <__sfmoreglue>:
 802196c:	b570      	push	{r4, r5, r6, lr}
 802196e:	2268      	movs	r2, #104	; 0x68
 8021970:	1e4d      	subs	r5, r1, #1
 8021972:	4355      	muls	r5, r2
 8021974:	460e      	mov	r6, r1
 8021976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802197a:	f000 fd3d 	bl	80223f8 <_malloc_r>
 802197e:	4604      	mov	r4, r0
 8021980:	b140      	cbz	r0, 8021994 <__sfmoreglue+0x28>
 8021982:	2100      	movs	r1, #0
 8021984:	e9c0 1600 	strd	r1, r6, [r0]
 8021988:	300c      	adds	r0, #12
 802198a:	60a0      	str	r0, [r4, #8]
 802198c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021990:	f7fe faae 	bl	801fef0 <memset>
 8021994:	4620      	mov	r0, r4
 8021996:	bd70      	pop	{r4, r5, r6, pc}

08021998 <__sfp_lock_acquire>:
 8021998:	4801      	ldr	r0, [pc, #4]	; (80219a0 <__sfp_lock_acquire+0x8>)
 802199a:	f000 b8b8 	b.w	8021b0e <__retarget_lock_acquire_recursive>
 802199e:	bf00      	nop
 80219a0:	2000f901 	.word	0x2000f901

080219a4 <__sfp_lock_release>:
 80219a4:	4801      	ldr	r0, [pc, #4]	; (80219ac <__sfp_lock_release+0x8>)
 80219a6:	f000 b8b3 	b.w	8021b10 <__retarget_lock_release_recursive>
 80219aa:	bf00      	nop
 80219ac:	2000f901 	.word	0x2000f901

080219b0 <__sinit_lock_acquire>:
 80219b0:	4801      	ldr	r0, [pc, #4]	; (80219b8 <__sinit_lock_acquire+0x8>)
 80219b2:	f000 b8ac 	b.w	8021b0e <__retarget_lock_acquire_recursive>
 80219b6:	bf00      	nop
 80219b8:	2000f902 	.word	0x2000f902

080219bc <__sinit_lock_release>:
 80219bc:	4801      	ldr	r0, [pc, #4]	; (80219c4 <__sinit_lock_release+0x8>)
 80219be:	f000 b8a7 	b.w	8021b10 <__retarget_lock_release_recursive>
 80219c2:	bf00      	nop
 80219c4:	2000f902 	.word	0x2000f902

080219c8 <__sinit>:
 80219c8:	b510      	push	{r4, lr}
 80219ca:	4604      	mov	r4, r0
 80219cc:	f7ff fff0 	bl	80219b0 <__sinit_lock_acquire>
 80219d0:	69a3      	ldr	r3, [r4, #24]
 80219d2:	b11b      	cbz	r3, 80219dc <__sinit+0x14>
 80219d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219d8:	f7ff bff0 	b.w	80219bc <__sinit_lock_release>
 80219dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80219e0:	6523      	str	r3, [r4, #80]	; 0x50
 80219e2:	4b13      	ldr	r3, [pc, #76]	; (8021a30 <__sinit+0x68>)
 80219e4:	4a13      	ldr	r2, [pc, #76]	; (8021a34 <__sinit+0x6c>)
 80219e6:	681b      	ldr	r3, [r3, #0]
 80219e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80219ea:	42a3      	cmp	r3, r4
 80219ec:	bf04      	itt	eq
 80219ee:	2301      	moveq	r3, #1
 80219f0:	61a3      	streq	r3, [r4, #24]
 80219f2:	4620      	mov	r0, r4
 80219f4:	f000 f820 	bl	8021a38 <__sfp>
 80219f8:	6060      	str	r0, [r4, #4]
 80219fa:	4620      	mov	r0, r4
 80219fc:	f000 f81c 	bl	8021a38 <__sfp>
 8021a00:	60a0      	str	r0, [r4, #8]
 8021a02:	4620      	mov	r0, r4
 8021a04:	f000 f818 	bl	8021a38 <__sfp>
 8021a08:	2200      	movs	r2, #0
 8021a0a:	60e0      	str	r0, [r4, #12]
 8021a0c:	2104      	movs	r1, #4
 8021a0e:	6860      	ldr	r0, [r4, #4]
 8021a10:	f7ff ff82 	bl	8021918 <std>
 8021a14:	68a0      	ldr	r0, [r4, #8]
 8021a16:	2201      	movs	r2, #1
 8021a18:	2109      	movs	r1, #9
 8021a1a:	f7ff ff7d 	bl	8021918 <std>
 8021a1e:	68e0      	ldr	r0, [r4, #12]
 8021a20:	2202      	movs	r2, #2
 8021a22:	2112      	movs	r1, #18
 8021a24:	f7ff ff78 	bl	8021918 <std>
 8021a28:	2301      	movs	r3, #1
 8021a2a:	61a3      	str	r3, [r4, #24]
 8021a2c:	e7d2      	b.n	80219d4 <__sinit+0xc>
 8021a2e:	bf00      	nop
 8021a30:	08024470 	.word	0x08024470
 8021a34:	08021961 	.word	0x08021961

08021a38 <__sfp>:
 8021a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a3a:	4607      	mov	r7, r0
 8021a3c:	f7ff ffac 	bl	8021998 <__sfp_lock_acquire>
 8021a40:	4b1e      	ldr	r3, [pc, #120]	; (8021abc <__sfp+0x84>)
 8021a42:	681e      	ldr	r6, [r3, #0]
 8021a44:	69b3      	ldr	r3, [r6, #24]
 8021a46:	b913      	cbnz	r3, 8021a4e <__sfp+0x16>
 8021a48:	4630      	mov	r0, r6
 8021a4a:	f7ff ffbd 	bl	80219c8 <__sinit>
 8021a4e:	3648      	adds	r6, #72	; 0x48
 8021a50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021a54:	3b01      	subs	r3, #1
 8021a56:	d503      	bpl.n	8021a60 <__sfp+0x28>
 8021a58:	6833      	ldr	r3, [r6, #0]
 8021a5a:	b30b      	cbz	r3, 8021aa0 <__sfp+0x68>
 8021a5c:	6836      	ldr	r6, [r6, #0]
 8021a5e:	e7f7      	b.n	8021a50 <__sfp+0x18>
 8021a60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021a64:	b9d5      	cbnz	r5, 8021a9c <__sfp+0x64>
 8021a66:	4b16      	ldr	r3, [pc, #88]	; (8021ac0 <__sfp+0x88>)
 8021a68:	60e3      	str	r3, [r4, #12]
 8021a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021a6e:	6665      	str	r5, [r4, #100]	; 0x64
 8021a70:	f000 f84c 	bl	8021b0c <__retarget_lock_init_recursive>
 8021a74:	f7ff ff96 	bl	80219a4 <__sfp_lock_release>
 8021a78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021a7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021a80:	6025      	str	r5, [r4, #0]
 8021a82:	61a5      	str	r5, [r4, #24]
 8021a84:	2208      	movs	r2, #8
 8021a86:	4629      	mov	r1, r5
 8021a88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021a8c:	f7fe fa30 	bl	801fef0 <memset>
 8021a90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021a94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021a98:	4620      	mov	r0, r4
 8021a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021a9c:	3468      	adds	r4, #104	; 0x68
 8021a9e:	e7d9      	b.n	8021a54 <__sfp+0x1c>
 8021aa0:	2104      	movs	r1, #4
 8021aa2:	4638      	mov	r0, r7
 8021aa4:	f7ff ff62 	bl	802196c <__sfmoreglue>
 8021aa8:	4604      	mov	r4, r0
 8021aaa:	6030      	str	r0, [r6, #0]
 8021aac:	2800      	cmp	r0, #0
 8021aae:	d1d5      	bne.n	8021a5c <__sfp+0x24>
 8021ab0:	f7ff ff78 	bl	80219a4 <__sfp_lock_release>
 8021ab4:	230c      	movs	r3, #12
 8021ab6:	603b      	str	r3, [r7, #0]
 8021ab8:	e7ee      	b.n	8021a98 <__sfp+0x60>
 8021aba:	bf00      	nop
 8021abc:	08024470 	.word	0x08024470
 8021ac0:	ffff0001 	.word	0xffff0001

08021ac4 <_fwalk_reent>:
 8021ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ac8:	4606      	mov	r6, r0
 8021aca:	4688      	mov	r8, r1
 8021acc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021ad0:	2700      	movs	r7, #0
 8021ad2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021ad6:	f1b9 0901 	subs.w	r9, r9, #1
 8021ada:	d505      	bpl.n	8021ae8 <_fwalk_reent+0x24>
 8021adc:	6824      	ldr	r4, [r4, #0]
 8021ade:	2c00      	cmp	r4, #0
 8021ae0:	d1f7      	bne.n	8021ad2 <_fwalk_reent+0xe>
 8021ae2:	4638      	mov	r0, r7
 8021ae4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021ae8:	89ab      	ldrh	r3, [r5, #12]
 8021aea:	2b01      	cmp	r3, #1
 8021aec:	d907      	bls.n	8021afe <_fwalk_reent+0x3a>
 8021aee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021af2:	3301      	adds	r3, #1
 8021af4:	d003      	beq.n	8021afe <_fwalk_reent+0x3a>
 8021af6:	4629      	mov	r1, r5
 8021af8:	4630      	mov	r0, r6
 8021afa:	47c0      	blx	r8
 8021afc:	4307      	orrs	r7, r0
 8021afe:	3568      	adds	r5, #104	; 0x68
 8021b00:	e7e9      	b.n	8021ad6 <_fwalk_reent+0x12>
	...

08021b04 <_localeconv_r>:
 8021b04:	4800      	ldr	r0, [pc, #0]	; (8021b08 <_localeconv_r+0x4>)
 8021b06:	4770      	bx	lr
 8021b08:	20000180 	.word	0x20000180

08021b0c <__retarget_lock_init_recursive>:
 8021b0c:	4770      	bx	lr

08021b0e <__retarget_lock_acquire_recursive>:
 8021b0e:	4770      	bx	lr

08021b10 <__retarget_lock_release_recursive>:
 8021b10:	4770      	bx	lr

08021b12 <__swhatbuf_r>:
 8021b12:	b570      	push	{r4, r5, r6, lr}
 8021b14:	460e      	mov	r6, r1
 8021b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b1a:	2900      	cmp	r1, #0
 8021b1c:	b096      	sub	sp, #88	; 0x58
 8021b1e:	4614      	mov	r4, r2
 8021b20:	461d      	mov	r5, r3
 8021b22:	da08      	bge.n	8021b36 <__swhatbuf_r+0x24>
 8021b24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021b28:	2200      	movs	r2, #0
 8021b2a:	602a      	str	r2, [r5, #0]
 8021b2c:	061a      	lsls	r2, r3, #24
 8021b2e:	d410      	bmi.n	8021b52 <__swhatbuf_r+0x40>
 8021b30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021b34:	e00e      	b.n	8021b54 <__swhatbuf_r+0x42>
 8021b36:	466a      	mov	r2, sp
 8021b38:	f000 ff1a 	bl	8022970 <_fstat_r>
 8021b3c:	2800      	cmp	r0, #0
 8021b3e:	dbf1      	blt.n	8021b24 <__swhatbuf_r+0x12>
 8021b40:	9a01      	ldr	r2, [sp, #4]
 8021b42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021b46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021b4a:	425a      	negs	r2, r3
 8021b4c:	415a      	adcs	r2, r3
 8021b4e:	602a      	str	r2, [r5, #0]
 8021b50:	e7ee      	b.n	8021b30 <__swhatbuf_r+0x1e>
 8021b52:	2340      	movs	r3, #64	; 0x40
 8021b54:	2000      	movs	r0, #0
 8021b56:	6023      	str	r3, [r4, #0]
 8021b58:	b016      	add	sp, #88	; 0x58
 8021b5a:	bd70      	pop	{r4, r5, r6, pc}

08021b5c <__smakebuf_r>:
 8021b5c:	898b      	ldrh	r3, [r1, #12]
 8021b5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021b60:	079d      	lsls	r5, r3, #30
 8021b62:	4606      	mov	r6, r0
 8021b64:	460c      	mov	r4, r1
 8021b66:	d507      	bpl.n	8021b78 <__smakebuf_r+0x1c>
 8021b68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021b6c:	6023      	str	r3, [r4, #0]
 8021b6e:	6123      	str	r3, [r4, #16]
 8021b70:	2301      	movs	r3, #1
 8021b72:	6163      	str	r3, [r4, #20]
 8021b74:	b002      	add	sp, #8
 8021b76:	bd70      	pop	{r4, r5, r6, pc}
 8021b78:	ab01      	add	r3, sp, #4
 8021b7a:	466a      	mov	r2, sp
 8021b7c:	f7ff ffc9 	bl	8021b12 <__swhatbuf_r>
 8021b80:	9900      	ldr	r1, [sp, #0]
 8021b82:	4605      	mov	r5, r0
 8021b84:	4630      	mov	r0, r6
 8021b86:	f000 fc37 	bl	80223f8 <_malloc_r>
 8021b8a:	b948      	cbnz	r0, 8021ba0 <__smakebuf_r+0x44>
 8021b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b90:	059a      	lsls	r2, r3, #22
 8021b92:	d4ef      	bmi.n	8021b74 <__smakebuf_r+0x18>
 8021b94:	f023 0303 	bic.w	r3, r3, #3
 8021b98:	f043 0302 	orr.w	r3, r3, #2
 8021b9c:	81a3      	strh	r3, [r4, #12]
 8021b9e:	e7e3      	b.n	8021b68 <__smakebuf_r+0xc>
 8021ba0:	4b0d      	ldr	r3, [pc, #52]	; (8021bd8 <__smakebuf_r+0x7c>)
 8021ba2:	62b3      	str	r3, [r6, #40]	; 0x28
 8021ba4:	89a3      	ldrh	r3, [r4, #12]
 8021ba6:	6020      	str	r0, [r4, #0]
 8021ba8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021bac:	81a3      	strh	r3, [r4, #12]
 8021bae:	9b00      	ldr	r3, [sp, #0]
 8021bb0:	6163      	str	r3, [r4, #20]
 8021bb2:	9b01      	ldr	r3, [sp, #4]
 8021bb4:	6120      	str	r0, [r4, #16]
 8021bb6:	b15b      	cbz	r3, 8021bd0 <__smakebuf_r+0x74>
 8021bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021bbc:	4630      	mov	r0, r6
 8021bbe:	f000 fee9 	bl	8022994 <_isatty_r>
 8021bc2:	b128      	cbz	r0, 8021bd0 <__smakebuf_r+0x74>
 8021bc4:	89a3      	ldrh	r3, [r4, #12]
 8021bc6:	f023 0303 	bic.w	r3, r3, #3
 8021bca:	f043 0301 	orr.w	r3, r3, #1
 8021bce:	81a3      	strh	r3, [r4, #12]
 8021bd0:	89a0      	ldrh	r0, [r4, #12]
 8021bd2:	4305      	orrs	r5, r0
 8021bd4:	81a5      	strh	r5, [r4, #12]
 8021bd6:	e7cd      	b.n	8021b74 <__smakebuf_r+0x18>
 8021bd8:	08021961 	.word	0x08021961

08021bdc <malloc>:
 8021bdc:	4b02      	ldr	r3, [pc, #8]	; (8021be8 <malloc+0xc>)
 8021bde:	4601      	mov	r1, r0
 8021be0:	6818      	ldr	r0, [r3, #0]
 8021be2:	f000 bc09 	b.w	80223f8 <_malloc_r>
 8021be6:	bf00      	nop
 8021be8:	2000002c 	.word	0x2000002c

08021bec <_Balloc>:
 8021bec:	b570      	push	{r4, r5, r6, lr}
 8021bee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021bf0:	4604      	mov	r4, r0
 8021bf2:	460d      	mov	r5, r1
 8021bf4:	b976      	cbnz	r6, 8021c14 <_Balloc+0x28>
 8021bf6:	2010      	movs	r0, #16
 8021bf8:	f7ff fff0 	bl	8021bdc <malloc>
 8021bfc:	4602      	mov	r2, r0
 8021bfe:	6260      	str	r0, [r4, #36]	; 0x24
 8021c00:	b920      	cbnz	r0, 8021c0c <_Balloc+0x20>
 8021c02:	4b18      	ldr	r3, [pc, #96]	; (8021c64 <_Balloc+0x78>)
 8021c04:	4818      	ldr	r0, [pc, #96]	; (8021c68 <_Balloc+0x7c>)
 8021c06:	2166      	movs	r1, #102	; 0x66
 8021c08:	f000 fe72 	bl	80228f0 <__assert_func>
 8021c0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021c10:	6006      	str	r6, [r0, #0]
 8021c12:	60c6      	str	r6, [r0, #12]
 8021c14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021c16:	68f3      	ldr	r3, [r6, #12]
 8021c18:	b183      	cbz	r3, 8021c3c <_Balloc+0x50>
 8021c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021c1c:	68db      	ldr	r3, [r3, #12]
 8021c1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021c22:	b9b8      	cbnz	r0, 8021c54 <_Balloc+0x68>
 8021c24:	2101      	movs	r1, #1
 8021c26:	fa01 f605 	lsl.w	r6, r1, r5
 8021c2a:	1d72      	adds	r2, r6, #5
 8021c2c:	0092      	lsls	r2, r2, #2
 8021c2e:	4620      	mov	r0, r4
 8021c30:	f000 fb60 	bl	80222f4 <_calloc_r>
 8021c34:	b160      	cbz	r0, 8021c50 <_Balloc+0x64>
 8021c36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021c3a:	e00e      	b.n	8021c5a <_Balloc+0x6e>
 8021c3c:	2221      	movs	r2, #33	; 0x21
 8021c3e:	2104      	movs	r1, #4
 8021c40:	4620      	mov	r0, r4
 8021c42:	f000 fb57 	bl	80222f4 <_calloc_r>
 8021c46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021c48:	60f0      	str	r0, [r6, #12]
 8021c4a:	68db      	ldr	r3, [r3, #12]
 8021c4c:	2b00      	cmp	r3, #0
 8021c4e:	d1e4      	bne.n	8021c1a <_Balloc+0x2e>
 8021c50:	2000      	movs	r0, #0
 8021c52:	bd70      	pop	{r4, r5, r6, pc}
 8021c54:	6802      	ldr	r2, [r0, #0]
 8021c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021c5a:	2300      	movs	r3, #0
 8021c5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021c60:	e7f7      	b.n	8021c52 <_Balloc+0x66>
 8021c62:	bf00      	nop
 8021c64:	080244b5 	.word	0x080244b5
 8021c68:	08024598 	.word	0x08024598

08021c6c <_Bfree>:
 8021c6c:	b570      	push	{r4, r5, r6, lr}
 8021c6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021c70:	4605      	mov	r5, r0
 8021c72:	460c      	mov	r4, r1
 8021c74:	b976      	cbnz	r6, 8021c94 <_Bfree+0x28>
 8021c76:	2010      	movs	r0, #16
 8021c78:	f7ff ffb0 	bl	8021bdc <malloc>
 8021c7c:	4602      	mov	r2, r0
 8021c7e:	6268      	str	r0, [r5, #36]	; 0x24
 8021c80:	b920      	cbnz	r0, 8021c8c <_Bfree+0x20>
 8021c82:	4b09      	ldr	r3, [pc, #36]	; (8021ca8 <_Bfree+0x3c>)
 8021c84:	4809      	ldr	r0, [pc, #36]	; (8021cac <_Bfree+0x40>)
 8021c86:	218a      	movs	r1, #138	; 0x8a
 8021c88:	f000 fe32 	bl	80228f0 <__assert_func>
 8021c8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021c90:	6006      	str	r6, [r0, #0]
 8021c92:	60c6      	str	r6, [r0, #12]
 8021c94:	b13c      	cbz	r4, 8021ca6 <_Bfree+0x3a>
 8021c96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021c98:	6862      	ldr	r2, [r4, #4]
 8021c9a:	68db      	ldr	r3, [r3, #12]
 8021c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021ca0:	6021      	str	r1, [r4, #0]
 8021ca2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021ca6:	bd70      	pop	{r4, r5, r6, pc}
 8021ca8:	080244b5 	.word	0x080244b5
 8021cac:	08024598 	.word	0x08024598

08021cb0 <__multadd>:
 8021cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021cb4:	690d      	ldr	r5, [r1, #16]
 8021cb6:	4607      	mov	r7, r0
 8021cb8:	460c      	mov	r4, r1
 8021cba:	461e      	mov	r6, r3
 8021cbc:	f101 0c14 	add.w	ip, r1, #20
 8021cc0:	2000      	movs	r0, #0
 8021cc2:	f8dc 3000 	ldr.w	r3, [ip]
 8021cc6:	b299      	uxth	r1, r3
 8021cc8:	fb02 6101 	mla	r1, r2, r1, r6
 8021ccc:	0c1e      	lsrs	r6, r3, #16
 8021cce:	0c0b      	lsrs	r3, r1, #16
 8021cd0:	fb02 3306 	mla	r3, r2, r6, r3
 8021cd4:	b289      	uxth	r1, r1
 8021cd6:	3001      	adds	r0, #1
 8021cd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021cdc:	4285      	cmp	r5, r0
 8021cde:	f84c 1b04 	str.w	r1, [ip], #4
 8021ce2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021ce6:	dcec      	bgt.n	8021cc2 <__multadd+0x12>
 8021ce8:	b30e      	cbz	r6, 8021d2e <__multadd+0x7e>
 8021cea:	68a3      	ldr	r3, [r4, #8]
 8021cec:	42ab      	cmp	r3, r5
 8021cee:	dc19      	bgt.n	8021d24 <__multadd+0x74>
 8021cf0:	6861      	ldr	r1, [r4, #4]
 8021cf2:	4638      	mov	r0, r7
 8021cf4:	3101      	adds	r1, #1
 8021cf6:	f7ff ff79 	bl	8021bec <_Balloc>
 8021cfa:	4680      	mov	r8, r0
 8021cfc:	b928      	cbnz	r0, 8021d0a <__multadd+0x5a>
 8021cfe:	4602      	mov	r2, r0
 8021d00:	4b0c      	ldr	r3, [pc, #48]	; (8021d34 <__multadd+0x84>)
 8021d02:	480d      	ldr	r0, [pc, #52]	; (8021d38 <__multadd+0x88>)
 8021d04:	21b5      	movs	r1, #181	; 0xb5
 8021d06:	f000 fdf3 	bl	80228f0 <__assert_func>
 8021d0a:	6922      	ldr	r2, [r4, #16]
 8021d0c:	3202      	adds	r2, #2
 8021d0e:	f104 010c 	add.w	r1, r4, #12
 8021d12:	0092      	lsls	r2, r2, #2
 8021d14:	300c      	adds	r0, #12
 8021d16:	f7fe f8dd 	bl	801fed4 <memcpy>
 8021d1a:	4621      	mov	r1, r4
 8021d1c:	4638      	mov	r0, r7
 8021d1e:	f7ff ffa5 	bl	8021c6c <_Bfree>
 8021d22:	4644      	mov	r4, r8
 8021d24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021d28:	3501      	adds	r5, #1
 8021d2a:	615e      	str	r6, [r3, #20]
 8021d2c:	6125      	str	r5, [r4, #16]
 8021d2e:	4620      	mov	r0, r4
 8021d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021d34:	08024527 	.word	0x08024527
 8021d38:	08024598 	.word	0x08024598

08021d3c <__hi0bits>:
 8021d3c:	0c03      	lsrs	r3, r0, #16
 8021d3e:	041b      	lsls	r3, r3, #16
 8021d40:	b9d3      	cbnz	r3, 8021d78 <__hi0bits+0x3c>
 8021d42:	0400      	lsls	r0, r0, #16
 8021d44:	2310      	movs	r3, #16
 8021d46:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021d4a:	bf04      	itt	eq
 8021d4c:	0200      	lsleq	r0, r0, #8
 8021d4e:	3308      	addeq	r3, #8
 8021d50:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021d54:	bf04      	itt	eq
 8021d56:	0100      	lsleq	r0, r0, #4
 8021d58:	3304      	addeq	r3, #4
 8021d5a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021d5e:	bf04      	itt	eq
 8021d60:	0080      	lsleq	r0, r0, #2
 8021d62:	3302      	addeq	r3, #2
 8021d64:	2800      	cmp	r0, #0
 8021d66:	db05      	blt.n	8021d74 <__hi0bits+0x38>
 8021d68:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021d6c:	f103 0301 	add.w	r3, r3, #1
 8021d70:	bf08      	it	eq
 8021d72:	2320      	moveq	r3, #32
 8021d74:	4618      	mov	r0, r3
 8021d76:	4770      	bx	lr
 8021d78:	2300      	movs	r3, #0
 8021d7a:	e7e4      	b.n	8021d46 <__hi0bits+0xa>

08021d7c <__lo0bits>:
 8021d7c:	6803      	ldr	r3, [r0, #0]
 8021d7e:	f013 0207 	ands.w	r2, r3, #7
 8021d82:	4601      	mov	r1, r0
 8021d84:	d00b      	beq.n	8021d9e <__lo0bits+0x22>
 8021d86:	07da      	lsls	r2, r3, #31
 8021d88:	d423      	bmi.n	8021dd2 <__lo0bits+0x56>
 8021d8a:	0798      	lsls	r0, r3, #30
 8021d8c:	bf49      	itett	mi
 8021d8e:	085b      	lsrmi	r3, r3, #1
 8021d90:	089b      	lsrpl	r3, r3, #2
 8021d92:	2001      	movmi	r0, #1
 8021d94:	600b      	strmi	r3, [r1, #0]
 8021d96:	bf5c      	itt	pl
 8021d98:	600b      	strpl	r3, [r1, #0]
 8021d9a:	2002      	movpl	r0, #2
 8021d9c:	4770      	bx	lr
 8021d9e:	b298      	uxth	r0, r3
 8021da0:	b9a8      	cbnz	r0, 8021dce <__lo0bits+0x52>
 8021da2:	0c1b      	lsrs	r3, r3, #16
 8021da4:	2010      	movs	r0, #16
 8021da6:	b2da      	uxtb	r2, r3
 8021da8:	b90a      	cbnz	r2, 8021dae <__lo0bits+0x32>
 8021daa:	3008      	adds	r0, #8
 8021dac:	0a1b      	lsrs	r3, r3, #8
 8021dae:	071a      	lsls	r2, r3, #28
 8021db0:	bf04      	itt	eq
 8021db2:	091b      	lsreq	r3, r3, #4
 8021db4:	3004      	addeq	r0, #4
 8021db6:	079a      	lsls	r2, r3, #30
 8021db8:	bf04      	itt	eq
 8021dba:	089b      	lsreq	r3, r3, #2
 8021dbc:	3002      	addeq	r0, #2
 8021dbe:	07da      	lsls	r2, r3, #31
 8021dc0:	d403      	bmi.n	8021dca <__lo0bits+0x4e>
 8021dc2:	085b      	lsrs	r3, r3, #1
 8021dc4:	f100 0001 	add.w	r0, r0, #1
 8021dc8:	d005      	beq.n	8021dd6 <__lo0bits+0x5a>
 8021dca:	600b      	str	r3, [r1, #0]
 8021dcc:	4770      	bx	lr
 8021dce:	4610      	mov	r0, r2
 8021dd0:	e7e9      	b.n	8021da6 <__lo0bits+0x2a>
 8021dd2:	2000      	movs	r0, #0
 8021dd4:	4770      	bx	lr
 8021dd6:	2020      	movs	r0, #32
 8021dd8:	4770      	bx	lr
	...

08021ddc <__i2b>:
 8021ddc:	b510      	push	{r4, lr}
 8021dde:	460c      	mov	r4, r1
 8021de0:	2101      	movs	r1, #1
 8021de2:	f7ff ff03 	bl	8021bec <_Balloc>
 8021de6:	4602      	mov	r2, r0
 8021de8:	b928      	cbnz	r0, 8021df6 <__i2b+0x1a>
 8021dea:	4b05      	ldr	r3, [pc, #20]	; (8021e00 <__i2b+0x24>)
 8021dec:	4805      	ldr	r0, [pc, #20]	; (8021e04 <__i2b+0x28>)
 8021dee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021df2:	f000 fd7d 	bl	80228f0 <__assert_func>
 8021df6:	2301      	movs	r3, #1
 8021df8:	6144      	str	r4, [r0, #20]
 8021dfa:	6103      	str	r3, [r0, #16]
 8021dfc:	bd10      	pop	{r4, pc}
 8021dfe:	bf00      	nop
 8021e00:	08024527 	.word	0x08024527
 8021e04:	08024598 	.word	0x08024598

08021e08 <__multiply>:
 8021e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e0c:	4691      	mov	r9, r2
 8021e0e:	690a      	ldr	r2, [r1, #16]
 8021e10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8021e14:	429a      	cmp	r2, r3
 8021e16:	bfb8      	it	lt
 8021e18:	460b      	movlt	r3, r1
 8021e1a:	460c      	mov	r4, r1
 8021e1c:	bfbc      	itt	lt
 8021e1e:	464c      	movlt	r4, r9
 8021e20:	4699      	movlt	r9, r3
 8021e22:	6927      	ldr	r7, [r4, #16]
 8021e24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8021e28:	68a3      	ldr	r3, [r4, #8]
 8021e2a:	6861      	ldr	r1, [r4, #4]
 8021e2c:	eb07 060a 	add.w	r6, r7, sl
 8021e30:	42b3      	cmp	r3, r6
 8021e32:	b085      	sub	sp, #20
 8021e34:	bfb8      	it	lt
 8021e36:	3101      	addlt	r1, #1
 8021e38:	f7ff fed8 	bl	8021bec <_Balloc>
 8021e3c:	b930      	cbnz	r0, 8021e4c <__multiply+0x44>
 8021e3e:	4602      	mov	r2, r0
 8021e40:	4b44      	ldr	r3, [pc, #272]	; (8021f54 <__multiply+0x14c>)
 8021e42:	4845      	ldr	r0, [pc, #276]	; (8021f58 <__multiply+0x150>)
 8021e44:	f240 115d 	movw	r1, #349	; 0x15d
 8021e48:	f000 fd52 	bl	80228f0 <__assert_func>
 8021e4c:	f100 0514 	add.w	r5, r0, #20
 8021e50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8021e54:	462b      	mov	r3, r5
 8021e56:	2200      	movs	r2, #0
 8021e58:	4543      	cmp	r3, r8
 8021e5a:	d321      	bcc.n	8021ea0 <__multiply+0x98>
 8021e5c:	f104 0314 	add.w	r3, r4, #20
 8021e60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8021e64:	f109 0314 	add.w	r3, r9, #20
 8021e68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8021e6c:	9202      	str	r2, [sp, #8]
 8021e6e:	1b3a      	subs	r2, r7, r4
 8021e70:	3a15      	subs	r2, #21
 8021e72:	f022 0203 	bic.w	r2, r2, #3
 8021e76:	3204      	adds	r2, #4
 8021e78:	f104 0115 	add.w	r1, r4, #21
 8021e7c:	428f      	cmp	r7, r1
 8021e7e:	bf38      	it	cc
 8021e80:	2204      	movcc	r2, #4
 8021e82:	9201      	str	r2, [sp, #4]
 8021e84:	9a02      	ldr	r2, [sp, #8]
 8021e86:	9303      	str	r3, [sp, #12]
 8021e88:	429a      	cmp	r2, r3
 8021e8a:	d80c      	bhi.n	8021ea6 <__multiply+0x9e>
 8021e8c:	2e00      	cmp	r6, #0
 8021e8e:	dd03      	ble.n	8021e98 <__multiply+0x90>
 8021e90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021e94:	2b00      	cmp	r3, #0
 8021e96:	d05a      	beq.n	8021f4e <__multiply+0x146>
 8021e98:	6106      	str	r6, [r0, #16]
 8021e9a:	b005      	add	sp, #20
 8021e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ea0:	f843 2b04 	str.w	r2, [r3], #4
 8021ea4:	e7d8      	b.n	8021e58 <__multiply+0x50>
 8021ea6:	f8b3 a000 	ldrh.w	sl, [r3]
 8021eaa:	f1ba 0f00 	cmp.w	sl, #0
 8021eae:	d024      	beq.n	8021efa <__multiply+0xf2>
 8021eb0:	f104 0e14 	add.w	lr, r4, #20
 8021eb4:	46a9      	mov	r9, r5
 8021eb6:	f04f 0c00 	mov.w	ip, #0
 8021eba:	f85e 2b04 	ldr.w	r2, [lr], #4
 8021ebe:	f8d9 1000 	ldr.w	r1, [r9]
 8021ec2:	fa1f fb82 	uxth.w	fp, r2
 8021ec6:	b289      	uxth	r1, r1
 8021ec8:	fb0a 110b 	mla	r1, sl, fp, r1
 8021ecc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8021ed0:	f8d9 2000 	ldr.w	r2, [r9]
 8021ed4:	4461      	add	r1, ip
 8021ed6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021eda:	fb0a c20b 	mla	r2, sl, fp, ip
 8021ede:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8021ee2:	b289      	uxth	r1, r1
 8021ee4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8021ee8:	4577      	cmp	r7, lr
 8021eea:	f849 1b04 	str.w	r1, [r9], #4
 8021eee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8021ef2:	d8e2      	bhi.n	8021eba <__multiply+0xb2>
 8021ef4:	9a01      	ldr	r2, [sp, #4]
 8021ef6:	f845 c002 	str.w	ip, [r5, r2]
 8021efa:	9a03      	ldr	r2, [sp, #12]
 8021efc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021f00:	3304      	adds	r3, #4
 8021f02:	f1b9 0f00 	cmp.w	r9, #0
 8021f06:	d020      	beq.n	8021f4a <__multiply+0x142>
 8021f08:	6829      	ldr	r1, [r5, #0]
 8021f0a:	f104 0c14 	add.w	ip, r4, #20
 8021f0e:	46ae      	mov	lr, r5
 8021f10:	f04f 0a00 	mov.w	sl, #0
 8021f14:	f8bc b000 	ldrh.w	fp, [ip]
 8021f18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8021f1c:	fb09 220b 	mla	r2, r9, fp, r2
 8021f20:	4492      	add	sl, r2
 8021f22:	b289      	uxth	r1, r1
 8021f24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8021f28:	f84e 1b04 	str.w	r1, [lr], #4
 8021f2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8021f30:	f8be 1000 	ldrh.w	r1, [lr]
 8021f34:	0c12      	lsrs	r2, r2, #16
 8021f36:	fb09 1102 	mla	r1, r9, r2, r1
 8021f3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8021f3e:	4567      	cmp	r7, ip
 8021f40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8021f44:	d8e6      	bhi.n	8021f14 <__multiply+0x10c>
 8021f46:	9a01      	ldr	r2, [sp, #4]
 8021f48:	50a9      	str	r1, [r5, r2]
 8021f4a:	3504      	adds	r5, #4
 8021f4c:	e79a      	b.n	8021e84 <__multiply+0x7c>
 8021f4e:	3e01      	subs	r6, #1
 8021f50:	e79c      	b.n	8021e8c <__multiply+0x84>
 8021f52:	bf00      	nop
 8021f54:	08024527 	.word	0x08024527
 8021f58:	08024598 	.word	0x08024598

08021f5c <__pow5mult>:
 8021f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f60:	4615      	mov	r5, r2
 8021f62:	f012 0203 	ands.w	r2, r2, #3
 8021f66:	4606      	mov	r6, r0
 8021f68:	460f      	mov	r7, r1
 8021f6a:	d007      	beq.n	8021f7c <__pow5mult+0x20>
 8021f6c:	4c25      	ldr	r4, [pc, #148]	; (8022004 <__pow5mult+0xa8>)
 8021f6e:	3a01      	subs	r2, #1
 8021f70:	2300      	movs	r3, #0
 8021f72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021f76:	f7ff fe9b 	bl	8021cb0 <__multadd>
 8021f7a:	4607      	mov	r7, r0
 8021f7c:	10ad      	asrs	r5, r5, #2
 8021f7e:	d03d      	beq.n	8021ffc <__pow5mult+0xa0>
 8021f80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021f82:	b97c      	cbnz	r4, 8021fa4 <__pow5mult+0x48>
 8021f84:	2010      	movs	r0, #16
 8021f86:	f7ff fe29 	bl	8021bdc <malloc>
 8021f8a:	4602      	mov	r2, r0
 8021f8c:	6270      	str	r0, [r6, #36]	; 0x24
 8021f8e:	b928      	cbnz	r0, 8021f9c <__pow5mult+0x40>
 8021f90:	4b1d      	ldr	r3, [pc, #116]	; (8022008 <__pow5mult+0xac>)
 8021f92:	481e      	ldr	r0, [pc, #120]	; (802200c <__pow5mult+0xb0>)
 8021f94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021f98:	f000 fcaa 	bl	80228f0 <__assert_func>
 8021f9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021fa0:	6004      	str	r4, [r0, #0]
 8021fa2:	60c4      	str	r4, [r0, #12]
 8021fa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021fa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021fac:	b94c      	cbnz	r4, 8021fc2 <__pow5mult+0x66>
 8021fae:	f240 2171 	movw	r1, #625	; 0x271
 8021fb2:	4630      	mov	r0, r6
 8021fb4:	f7ff ff12 	bl	8021ddc <__i2b>
 8021fb8:	2300      	movs	r3, #0
 8021fba:	f8c8 0008 	str.w	r0, [r8, #8]
 8021fbe:	4604      	mov	r4, r0
 8021fc0:	6003      	str	r3, [r0, #0]
 8021fc2:	f04f 0900 	mov.w	r9, #0
 8021fc6:	07eb      	lsls	r3, r5, #31
 8021fc8:	d50a      	bpl.n	8021fe0 <__pow5mult+0x84>
 8021fca:	4639      	mov	r1, r7
 8021fcc:	4622      	mov	r2, r4
 8021fce:	4630      	mov	r0, r6
 8021fd0:	f7ff ff1a 	bl	8021e08 <__multiply>
 8021fd4:	4639      	mov	r1, r7
 8021fd6:	4680      	mov	r8, r0
 8021fd8:	4630      	mov	r0, r6
 8021fda:	f7ff fe47 	bl	8021c6c <_Bfree>
 8021fde:	4647      	mov	r7, r8
 8021fe0:	106d      	asrs	r5, r5, #1
 8021fe2:	d00b      	beq.n	8021ffc <__pow5mult+0xa0>
 8021fe4:	6820      	ldr	r0, [r4, #0]
 8021fe6:	b938      	cbnz	r0, 8021ff8 <__pow5mult+0x9c>
 8021fe8:	4622      	mov	r2, r4
 8021fea:	4621      	mov	r1, r4
 8021fec:	4630      	mov	r0, r6
 8021fee:	f7ff ff0b 	bl	8021e08 <__multiply>
 8021ff2:	6020      	str	r0, [r4, #0]
 8021ff4:	f8c0 9000 	str.w	r9, [r0]
 8021ff8:	4604      	mov	r4, r0
 8021ffa:	e7e4      	b.n	8021fc6 <__pow5mult+0x6a>
 8021ffc:	4638      	mov	r0, r7
 8021ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022002:	bf00      	nop
 8022004:	080246e8 	.word	0x080246e8
 8022008:	080244b5 	.word	0x080244b5
 802200c:	08024598 	.word	0x08024598

08022010 <__lshift>:
 8022010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022014:	460c      	mov	r4, r1
 8022016:	6849      	ldr	r1, [r1, #4]
 8022018:	6923      	ldr	r3, [r4, #16]
 802201a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802201e:	68a3      	ldr	r3, [r4, #8]
 8022020:	4607      	mov	r7, r0
 8022022:	4691      	mov	r9, r2
 8022024:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022028:	f108 0601 	add.w	r6, r8, #1
 802202c:	42b3      	cmp	r3, r6
 802202e:	db0b      	blt.n	8022048 <__lshift+0x38>
 8022030:	4638      	mov	r0, r7
 8022032:	f7ff fddb 	bl	8021bec <_Balloc>
 8022036:	4605      	mov	r5, r0
 8022038:	b948      	cbnz	r0, 802204e <__lshift+0x3e>
 802203a:	4602      	mov	r2, r0
 802203c:	4b2a      	ldr	r3, [pc, #168]	; (80220e8 <__lshift+0xd8>)
 802203e:	482b      	ldr	r0, [pc, #172]	; (80220ec <__lshift+0xdc>)
 8022040:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022044:	f000 fc54 	bl	80228f0 <__assert_func>
 8022048:	3101      	adds	r1, #1
 802204a:	005b      	lsls	r3, r3, #1
 802204c:	e7ee      	b.n	802202c <__lshift+0x1c>
 802204e:	2300      	movs	r3, #0
 8022050:	f100 0114 	add.w	r1, r0, #20
 8022054:	f100 0210 	add.w	r2, r0, #16
 8022058:	4618      	mov	r0, r3
 802205a:	4553      	cmp	r3, sl
 802205c:	db37      	blt.n	80220ce <__lshift+0xbe>
 802205e:	6920      	ldr	r0, [r4, #16]
 8022060:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022064:	f104 0314 	add.w	r3, r4, #20
 8022068:	f019 091f 	ands.w	r9, r9, #31
 802206c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022070:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022074:	d02f      	beq.n	80220d6 <__lshift+0xc6>
 8022076:	f1c9 0e20 	rsb	lr, r9, #32
 802207a:	468a      	mov	sl, r1
 802207c:	f04f 0c00 	mov.w	ip, #0
 8022080:	681a      	ldr	r2, [r3, #0]
 8022082:	fa02 f209 	lsl.w	r2, r2, r9
 8022086:	ea42 020c 	orr.w	r2, r2, ip
 802208a:	f84a 2b04 	str.w	r2, [sl], #4
 802208e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022092:	4298      	cmp	r0, r3
 8022094:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022098:	d8f2      	bhi.n	8022080 <__lshift+0x70>
 802209a:	1b03      	subs	r3, r0, r4
 802209c:	3b15      	subs	r3, #21
 802209e:	f023 0303 	bic.w	r3, r3, #3
 80220a2:	3304      	adds	r3, #4
 80220a4:	f104 0215 	add.w	r2, r4, #21
 80220a8:	4290      	cmp	r0, r2
 80220aa:	bf38      	it	cc
 80220ac:	2304      	movcc	r3, #4
 80220ae:	f841 c003 	str.w	ip, [r1, r3]
 80220b2:	f1bc 0f00 	cmp.w	ip, #0
 80220b6:	d001      	beq.n	80220bc <__lshift+0xac>
 80220b8:	f108 0602 	add.w	r6, r8, #2
 80220bc:	3e01      	subs	r6, #1
 80220be:	4638      	mov	r0, r7
 80220c0:	612e      	str	r6, [r5, #16]
 80220c2:	4621      	mov	r1, r4
 80220c4:	f7ff fdd2 	bl	8021c6c <_Bfree>
 80220c8:	4628      	mov	r0, r5
 80220ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80220d2:	3301      	adds	r3, #1
 80220d4:	e7c1      	b.n	802205a <__lshift+0x4a>
 80220d6:	3904      	subs	r1, #4
 80220d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80220dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80220e0:	4298      	cmp	r0, r3
 80220e2:	d8f9      	bhi.n	80220d8 <__lshift+0xc8>
 80220e4:	e7ea      	b.n	80220bc <__lshift+0xac>
 80220e6:	bf00      	nop
 80220e8:	08024527 	.word	0x08024527
 80220ec:	08024598 	.word	0x08024598

080220f0 <__mcmp>:
 80220f0:	b530      	push	{r4, r5, lr}
 80220f2:	6902      	ldr	r2, [r0, #16]
 80220f4:	690c      	ldr	r4, [r1, #16]
 80220f6:	1b12      	subs	r2, r2, r4
 80220f8:	d10e      	bne.n	8022118 <__mcmp+0x28>
 80220fa:	f100 0314 	add.w	r3, r0, #20
 80220fe:	3114      	adds	r1, #20
 8022100:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022104:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022108:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802210c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022110:	42a5      	cmp	r5, r4
 8022112:	d003      	beq.n	802211c <__mcmp+0x2c>
 8022114:	d305      	bcc.n	8022122 <__mcmp+0x32>
 8022116:	2201      	movs	r2, #1
 8022118:	4610      	mov	r0, r2
 802211a:	bd30      	pop	{r4, r5, pc}
 802211c:	4283      	cmp	r3, r0
 802211e:	d3f3      	bcc.n	8022108 <__mcmp+0x18>
 8022120:	e7fa      	b.n	8022118 <__mcmp+0x28>
 8022122:	f04f 32ff 	mov.w	r2, #4294967295
 8022126:	e7f7      	b.n	8022118 <__mcmp+0x28>

08022128 <__mdiff>:
 8022128:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802212c:	460c      	mov	r4, r1
 802212e:	4606      	mov	r6, r0
 8022130:	4611      	mov	r1, r2
 8022132:	4620      	mov	r0, r4
 8022134:	4690      	mov	r8, r2
 8022136:	f7ff ffdb 	bl	80220f0 <__mcmp>
 802213a:	1e05      	subs	r5, r0, #0
 802213c:	d110      	bne.n	8022160 <__mdiff+0x38>
 802213e:	4629      	mov	r1, r5
 8022140:	4630      	mov	r0, r6
 8022142:	f7ff fd53 	bl	8021bec <_Balloc>
 8022146:	b930      	cbnz	r0, 8022156 <__mdiff+0x2e>
 8022148:	4b3a      	ldr	r3, [pc, #232]	; (8022234 <__mdiff+0x10c>)
 802214a:	4602      	mov	r2, r0
 802214c:	f240 2132 	movw	r1, #562	; 0x232
 8022150:	4839      	ldr	r0, [pc, #228]	; (8022238 <__mdiff+0x110>)
 8022152:	f000 fbcd 	bl	80228f0 <__assert_func>
 8022156:	2301      	movs	r3, #1
 8022158:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802215c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022160:	bfa4      	itt	ge
 8022162:	4643      	movge	r3, r8
 8022164:	46a0      	movge	r8, r4
 8022166:	4630      	mov	r0, r6
 8022168:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802216c:	bfa6      	itte	ge
 802216e:	461c      	movge	r4, r3
 8022170:	2500      	movge	r5, #0
 8022172:	2501      	movlt	r5, #1
 8022174:	f7ff fd3a 	bl	8021bec <_Balloc>
 8022178:	b920      	cbnz	r0, 8022184 <__mdiff+0x5c>
 802217a:	4b2e      	ldr	r3, [pc, #184]	; (8022234 <__mdiff+0x10c>)
 802217c:	4602      	mov	r2, r0
 802217e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022182:	e7e5      	b.n	8022150 <__mdiff+0x28>
 8022184:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022188:	6926      	ldr	r6, [r4, #16]
 802218a:	60c5      	str	r5, [r0, #12]
 802218c:	f104 0914 	add.w	r9, r4, #20
 8022190:	f108 0514 	add.w	r5, r8, #20
 8022194:	f100 0e14 	add.w	lr, r0, #20
 8022198:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802219c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80221a0:	f108 0210 	add.w	r2, r8, #16
 80221a4:	46f2      	mov	sl, lr
 80221a6:	2100      	movs	r1, #0
 80221a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80221ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80221b0:	fa1f f883 	uxth.w	r8, r3
 80221b4:	fa11 f18b 	uxtah	r1, r1, fp
 80221b8:	0c1b      	lsrs	r3, r3, #16
 80221ba:	eba1 0808 	sub.w	r8, r1, r8
 80221be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80221c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80221c6:	fa1f f888 	uxth.w	r8, r8
 80221ca:	1419      	asrs	r1, r3, #16
 80221cc:	454e      	cmp	r6, r9
 80221ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80221d2:	f84a 3b04 	str.w	r3, [sl], #4
 80221d6:	d8e7      	bhi.n	80221a8 <__mdiff+0x80>
 80221d8:	1b33      	subs	r3, r6, r4
 80221da:	3b15      	subs	r3, #21
 80221dc:	f023 0303 	bic.w	r3, r3, #3
 80221e0:	3304      	adds	r3, #4
 80221e2:	3415      	adds	r4, #21
 80221e4:	42a6      	cmp	r6, r4
 80221e6:	bf38      	it	cc
 80221e8:	2304      	movcc	r3, #4
 80221ea:	441d      	add	r5, r3
 80221ec:	4473      	add	r3, lr
 80221ee:	469e      	mov	lr, r3
 80221f0:	462e      	mov	r6, r5
 80221f2:	4566      	cmp	r6, ip
 80221f4:	d30e      	bcc.n	8022214 <__mdiff+0xec>
 80221f6:	f10c 0203 	add.w	r2, ip, #3
 80221fa:	1b52      	subs	r2, r2, r5
 80221fc:	f022 0203 	bic.w	r2, r2, #3
 8022200:	3d03      	subs	r5, #3
 8022202:	45ac      	cmp	ip, r5
 8022204:	bf38      	it	cc
 8022206:	2200      	movcc	r2, #0
 8022208:	441a      	add	r2, r3
 802220a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802220e:	b17b      	cbz	r3, 8022230 <__mdiff+0x108>
 8022210:	6107      	str	r7, [r0, #16]
 8022212:	e7a3      	b.n	802215c <__mdiff+0x34>
 8022214:	f856 8b04 	ldr.w	r8, [r6], #4
 8022218:	fa11 f288 	uxtah	r2, r1, r8
 802221c:	1414      	asrs	r4, r2, #16
 802221e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022222:	b292      	uxth	r2, r2
 8022224:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022228:	f84e 2b04 	str.w	r2, [lr], #4
 802222c:	1421      	asrs	r1, r4, #16
 802222e:	e7e0      	b.n	80221f2 <__mdiff+0xca>
 8022230:	3f01      	subs	r7, #1
 8022232:	e7ea      	b.n	802220a <__mdiff+0xe2>
 8022234:	08024527 	.word	0x08024527
 8022238:	08024598 	.word	0x08024598

0802223c <__d2b>:
 802223c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022240:	4689      	mov	r9, r1
 8022242:	2101      	movs	r1, #1
 8022244:	ec57 6b10 	vmov	r6, r7, d0
 8022248:	4690      	mov	r8, r2
 802224a:	f7ff fccf 	bl	8021bec <_Balloc>
 802224e:	4604      	mov	r4, r0
 8022250:	b930      	cbnz	r0, 8022260 <__d2b+0x24>
 8022252:	4602      	mov	r2, r0
 8022254:	4b25      	ldr	r3, [pc, #148]	; (80222ec <__d2b+0xb0>)
 8022256:	4826      	ldr	r0, [pc, #152]	; (80222f0 <__d2b+0xb4>)
 8022258:	f240 310a 	movw	r1, #778	; 0x30a
 802225c:	f000 fb48 	bl	80228f0 <__assert_func>
 8022260:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022264:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022268:	bb35      	cbnz	r5, 80222b8 <__d2b+0x7c>
 802226a:	2e00      	cmp	r6, #0
 802226c:	9301      	str	r3, [sp, #4]
 802226e:	d028      	beq.n	80222c2 <__d2b+0x86>
 8022270:	4668      	mov	r0, sp
 8022272:	9600      	str	r6, [sp, #0]
 8022274:	f7ff fd82 	bl	8021d7c <__lo0bits>
 8022278:	9900      	ldr	r1, [sp, #0]
 802227a:	b300      	cbz	r0, 80222be <__d2b+0x82>
 802227c:	9a01      	ldr	r2, [sp, #4]
 802227e:	f1c0 0320 	rsb	r3, r0, #32
 8022282:	fa02 f303 	lsl.w	r3, r2, r3
 8022286:	430b      	orrs	r3, r1
 8022288:	40c2      	lsrs	r2, r0
 802228a:	6163      	str	r3, [r4, #20]
 802228c:	9201      	str	r2, [sp, #4]
 802228e:	9b01      	ldr	r3, [sp, #4]
 8022290:	61a3      	str	r3, [r4, #24]
 8022292:	2b00      	cmp	r3, #0
 8022294:	bf14      	ite	ne
 8022296:	2202      	movne	r2, #2
 8022298:	2201      	moveq	r2, #1
 802229a:	6122      	str	r2, [r4, #16]
 802229c:	b1d5      	cbz	r5, 80222d4 <__d2b+0x98>
 802229e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80222a2:	4405      	add	r5, r0
 80222a4:	f8c9 5000 	str.w	r5, [r9]
 80222a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80222ac:	f8c8 0000 	str.w	r0, [r8]
 80222b0:	4620      	mov	r0, r4
 80222b2:	b003      	add	sp, #12
 80222b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80222b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80222bc:	e7d5      	b.n	802226a <__d2b+0x2e>
 80222be:	6161      	str	r1, [r4, #20]
 80222c0:	e7e5      	b.n	802228e <__d2b+0x52>
 80222c2:	a801      	add	r0, sp, #4
 80222c4:	f7ff fd5a 	bl	8021d7c <__lo0bits>
 80222c8:	9b01      	ldr	r3, [sp, #4]
 80222ca:	6163      	str	r3, [r4, #20]
 80222cc:	2201      	movs	r2, #1
 80222ce:	6122      	str	r2, [r4, #16]
 80222d0:	3020      	adds	r0, #32
 80222d2:	e7e3      	b.n	802229c <__d2b+0x60>
 80222d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80222d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80222dc:	f8c9 0000 	str.w	r0, [r9]
 80222e0:	6918      	ldr	r0, [r3, #16]
 80222e2:	f7ff fd2b 	bl	8021d3c <__hi0bits>
 80222e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80222ea:	e7df      	b.n	80222ac <__d2b+0x70>
 80222ec:	08024527 	.word	0x08024527
 80222f0:	08024598 	.word	0x08024598

080222f4 <_calloc_r>:
 80222f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80222f6:	fba1 2402 	umull	r2, r4, r1, r2
 80222fa:	b94c      	cbnz	r4, 8022310 <_calloc_r+0x1c>
 80222fc:	4611      	mov	r1, r2
 80222fe:	9201      	str	r2, [sp, #4]
 8022300:	f000 f87a 	bl	80223f8 <_malloc_r>
 8022304:	9a01      	ldr	r2, [sp, #4]
 8022306:	4605      	mov	r5, r0
 8022308:	b930      	cbnz	r0, 8022318 <_calloc_r+0x24>
 802230a:	4628      	mov	r0, r5
 802230c:	b003      	add	sp, #12
 802230e:	bd30      	pop	{r4, r5, pc}
 8022310:	220c      	movs	r2, #12
 8022312:	6002      	str	r2, [r0, #0]
 8022314:	2500      	movs	r5, #0
 8022316:	e7f8      	b.n	802230a <_calloc_r+0x16>
 8022318:	4621      	mov	r1, r4
 802231a:	f7fd fde9 	bl	801fef0 <memset>
 802231e:	e7f4      	b.n	802230a <_calloc_r+0x16>

08022320 <_free_r>:
 8022320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022322:	2900      	cmp	r1, #0
 8022324:	d044      	beq.n	80223b0 <_free_r+0x90>
 8022326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802232a:	9001      	str	r0, [sp, #4]
 802232c:	2b00      	cmp	r3, #0
 802232e:	f1a1 0404 	sub.w	r4, r1, #4
 8022332:	bfb8      	it	lt
 8022334:	18e4      	addlt	r4, r4, r3
 8022336:	f000 fb61 	bl	80229fc <__malloc_lock>
 802233a:	4a1e      	ldr	r2, [pc, #120]	; (80223b4 <_free_r+0x94>)
 802233c:	9801      	ldr	r0, [sp, #4]
 802233e:	6813      	ldr	r3, [r2, #0]
 8022340:	b933      	cbnz	r3, 8022350 <_free_r+0x30>
 8022342:	6063      	str	r3, [r4, #4]
 8022344:	6014      	str	r4, [r2, #0]
 8022346:	b003      	add	sp, #12
 8022348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802234c:	f000 bb5c 	b.w	8022a08 <__malloc_unlock>
 8022350:	42a3      	cmp	r3, r4
 8022352:	d908      	bls.n	8022366 <_free_r+0x46>
 8022354:	6825      	ldr	r5, [r4, #0]
 8022356:	1961      	adds	r1, r4, r5
 8022358:	428b      	cmp	r3, r1
 802235a:	bf01      	itttt	eq
 802235c:	6819      	ldreq	r1, [r3, #0]
 802235e:	685b      	ldreq	r3, [r3, #4]
 8022360:	1949      	addeq	r1, r1, r5
 8022362:	6021      	streq	r1, [r4, #0]
 8022364:	e7ed      	b.n	8022342 <_free_r+0x22>
 8022366:	461a      	mov	r2, r3
 8022368:	685b      	ldr	r3, [r3, #4]
 802236a:	b10b      	cbz	r3, 8022370 <_free_r+0x50>
 802236c:	42a3      	cmp	r3, r4
 802236e:	d9fa      	bls.n	8022366 <_free_r+0x46>
 8022370:	6811      	ldr	r1, [r2, #0]
 8022372:	1855      	adds	r5, r2, r1
 8022374:	42a5      	cmp	r5, r4
 8022376:	d10b      	bne.n	8022390 <_free_r+0x70>
 8022378:	6824      	ldr	r4, [r4, #0]
 802237a:	4421      	add	r1, r4
 802237c:	1854      	adds	r4, r2, r1
 802237e:	42a3      	cmp	r3, r4
 8022380:	6011      	str	r1, [r2, #0]
 8022382:	d1e0      	bne.n	8022346 <_free_r+0x26>
 8022384:	681c      	ldr	r4, [r3, #0]
 8022386:	685b      	ldr	r3, [r3, #4]
 8022388:	6053      	str	r3, [r2, #4]
 802238a:	4421      	add	r1, r4
 802238c:	6011      	str	r1, [r2, #0]
 802238e:	e7da      	b.n	8022346 <_free_r+0x26>
 8022390:	d902      	bls.n	8022398 <_free_r+0x78>
 8022392:	230c      	movs	r3, #12
 8022394:	6003      	str	r3, [r0, #0]
 8022396:	e7d6      	b.n	8022346 <_free_r+0x26>
 8022398:	6825      	ldr	r5, [r4, #0]
 802239a:	1961      	adds	r1, r4, r5
 802239c:	428b      	cmp	r3, r1
 802239e:	bf04      	itt	eq
 80223a0:	6819      	ldreq	r1, [r3, #0]
 80223a2:	685b      	ldreq	r3, [r3, #4]
 80223a4:	6063      	str	r3, [r4, #4]
 80223a6:	bf04      	itt	eq
 80223a8:	1949      	addeq	r1, r1, r5
 80223aa:	6021      	streq	r1, [r4, #0]
 80223ac:	6054      	str	r4, [r2, #4]
 80223ae:	e7ca      	b.n	8022346 <_free_r+0x26>
 80223b0:	b003      	add	sp, #12
 80223b2:	bd30      	pop	{r4, r5, pc}
 80223b4:	2000f904 	.word	0x2000f904

080223b8 <sbrk_aligned>:
 80223b8:	b570      	push	{r4, r5, r6, lr}
 80223ba:	4e0e      	ldr	r6, [pc, #56]	; (80223f4 <sbrk_aligned+0x3c>)
 80223bc:	460c      	mov	r4, r1
 80223be:	6831      	ldr	r1, [r6, #0]
 80223c0:	4605      	mov	r5, r0
 80223c2:	b911      	cbnz	r1, 80223ca <sbrk_aligned+0x12>
 80223c4:	f000 fa2e 	bl	8022824 <_sbrk_r>
 80223c8:	6030      	str	r0, [r6, #0]
 80223ca:	4621      	mov	r1, r4
 80223cc:	4628      	mov	r0, r5
 80223ce:	f000 fa29 	bl	8022824 <_sbrk_r>
 80223d2:	1c43      	adds	r3, r0, #1
 80223d4:	d00a      	beq.n	80223ec <sbrk_aligned+0x34>
 80223d6:	1cc4      	adds	r4, r0, #3
 80223d8:	f024 0403 	bic.w	r4, r4, #3
 80223dc:	42a0      	cmp	r0, r4
 80223de:	d007      	beq.n	80223f0 <sbrk_aligned+0x38>
 80223e0:	1a21      	subs	r1, r4, r0
 80223e2:	4628      	mov	r0, r5
 80223e4:	f000 fa1e 	bl	8022824 <_sbrk_r>
 80223e8:	3001      	adds	r0, #1
 80223ea:	d101      	bne.n	80223f0 <sbrk_aligned+0x38>
 80223ec:	f04f 34ff 	mov.w	r4, #4294967295
 80223f0:	4620      	mov	r0, r4
 80223f2:	bd70      	pop	{r4, r5, r6, pc}
 80223f4:	2000f908 	.word	0x2000f908

080223f8 <_malloc_r>:
 80223f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223fc:	1ccd      	adds	r5, r1, #3
 80223fe:	f025 0503 	bic.w	r5, r5, #3
 8022402:	3508      	adds	r5, #8
 8022404:	2d0c      	cmp	r5, #12
 8022406:	bf38      	it	cc
 8022408:	250c      	movcc	r5, #12
 802240a:	2d00      	cmp	r5, #0
 802240c:	4607      	mov	r7, r0
 802240e:	db01      	blt.n	8022414 <_malloc_r+0x1c>
 8022410:	42a9      	cmp	r1, r5
 8022412:	d905      	bls.n	8022420 <_malloc_r+0x28>
 8022414:	230c      	movs	r3, #12
 8022416:	603b      	str	r3, [r7, #0]
 8022418:	2600      	movs	r6, #0
 802241a:	4630      	mov	r0, r6
 802241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022420:	4e2e      	ldr	r6, [pc, #184]	; (80224dc <_malloc_r+0xe4>)
 8022422:	f000 faeb 	bl	80229fc <__malloc_lock>
 8022426:	6833      	ldr	r3, [r6, #0]
 8022428:	461c      	mov	r4, r3
 802242a:	bb34      	cbnz	r4, 802247a <_malloc_r+0x82>
 802242c:	4629      	mov	r1, r5
 802242e:	4638      	mov	r0, r7
 8022430:	f7ff ffc2 	bl	80223b8 <sbrk_aligned>
 8022434:	1c43      	adds	r3, r0, #1
 8022436:	4604      	mov	r4, r0
 8022438:	d14d      	bne.n	80224d6 <_malloc_r+0xde>
 802243a:	6834      	ldr	r4, [r6, #0]
 802243c:	4626      	mov	r6, r4
 802243e:	2e00      	cmp	r6, #0
 8022440:	d140      	bne.n	80224c4 <_malloc_r+0xcc>
 8022442:	6823      	ldr	r3, [r4, #0]
 8022444:	4631      	mov	r1, r6
 8022446:	4638      	mov	r0, r7
 8022448:	eb04 0803 	add.w	r8, r4, r3
 802244c:	f000 f9ea 	bl	8022824 <_sbrk_r>
 8022450:	4580      	cmp	r8, r0
 8022452:	d13a      	bne.n	80224ca <_malloc_r+0xd2>
 8022454:	6821      	ldr	r1, [r4, #0]
 8022456:	3503      	adds	r5, #3
 8022458:	1a6d      	subs	r5, r5, r1
 802245a:	f025 0503 	bic.w	r5, r5, #3
 802245e:	3508      	adds	r5, #8
 8022460:	2d0c      	cmp	r5, #12
 8022462:	bf38      	it	cc
 8022464:	250c      	movcc	r5, #12
 8022466:	4629      	mov	r1, r5
 8022468:	4638      	mov	r0, r7
 802246a:	f7ff ffa5 	bl	80223b8 <sbrk_aligned>
 802246e:	3001      	adds	r0, #1
 8022470:	d02b      	beq.n	80224ca <_malloc_r+0xd2>
 8022472:	6823      	ldr	r3, [r4, #0]
 8022474:	442b      	add	r3, r5
 8022476:	6023      	str	r3, [r4, #0]
 8022478:	e00e      	b.n	8022498 <_malloc_r+0xa0>
 802247a:	6822      	ldr	r2, [r4, #0]
 802247c:	1b52      	subs	r2, r2, r5
 802247e:	d41e      	bmi.n	80224be <_malloc_r+0xc6>
 8022480:	2a0b      	cmp	r2, #11
 8022482:	d916      	bls.n	80224b2 <_malloc_r+0xba>
 8022484:	1961      	adds	r1, r4, r5
 8022486:	42a3      	cmp	r3, r4
 8022488:	6025      	str	r5, [r4, #0]
 802248a:	bf18      	it	ne
 802248c:	6059      	strne	r1, [r3, #4]
 802248e:	6863      	ldr	r3, [r4, #4]
 8022490:	bf08      	it	eq
 8022492:	6031      	streq	r1, [r6, #0]
 8022494:	5162      	str	r2, [r4, r5]
 8022496:	604b      	str	r3, [r1, #4]
 8022498:	4638      	mov	r0, r7
 802249a:	f104 060b 	add.w	r6, r4, #11
 802249e:	f000 fab3 	bl	8022a08 <__malloc_unlock>
 80224a2:	f026 0607 	bic.w	r6, r6, #7
 80224a6:	1d23      	adds	r3, r4, #4
 80224a8:	1af2      	subs	r2, r6, r3
 80224aa:	d0b6      	beq.n	802241a <_malloc_r+0x22>
 80224ac:	1b9b      	subs	r3, r3, r6
 80224ae:	50a3      	str	r3, [r4, r2]
 80224b0:	e7b3      	b.n	802241a <_malloc_r+0x22>
 80224b2:	6862      	ldr	r2, [r4, #4]
 80224b4:	42a3      	cmp	r3, r4
 80224b6:	bf0c      	ite	eq
 80224b8:	6032      	streq	r2, [r6, #0]
 80224ba:	605a      	strne	r2, [r3, #4]
 80224bc:	e7ec      	b.n	8022498 <_malloc_r+0xa0>
 80224be:	4623      	mov	r3, r4
 80224c0:	6864      	ldr	r4, [r4, #4]
 80224c2:	e7b2      	b.n	802242a <_malloc_r+0x32>
 80224c4:	4634      	mov	r4, r6
 80224c6:	6876      	ldr	r6, [r6, #4]
 80224c8:	e7b9      	b.n	802243e <_malloc_r+0x46>
 80224ca:	230c      	movs	r3, #12
 80224cc:	603b      	str	r3, [r7, #0]
 80224ce:	4638      	mov	r0, r7
 80224d0:	f000 fa9a 	bl	8022a08 <__malloc_unlock>
 80224d4:	e7a1      	b.n	802241a <_malloc_r+0x22>
 80224d6:	6025      	str	r5, [r4, #0]
 80224d8:	e7de      	b.n	8022498 <_malloc_r+0xa0>
 80224da:	bf00      	nop
 80224dc:	2000f904 	.word	0x2000f904

080224e0 <__sfputc_r>:
 80224e0:	6893      	ldr	r3, [r2, #8]
 80224e2:	3b01      	subs	r3, #1
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	b410      	push	{r4}
 80224e8:	6093      	str	r3, [r2, #8]
 80224ea:	da08      	bge.n	80224fe <__sfputc_r+0x1e>
 80224ec:	6994      	ldr	r4, [r2, #24]
 80224ee:	42a3      	cmp	r3, r4
 80224f0:	db01      	blt.n	80224f6 <__sfputc_r+0x16>
 80224f2:	290a      	cmp	r1, #10
 80224f4:	d103      	bne.n	80224fe <__sfputc_r+0x1e>
 80224f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80224fa:	f7fe ba0f 	b.w	802091c <__swbuf_r>
 80224fe:	6813      	ldr	r3, [r2, #0]
 8022500:	1c58      	adds	r0, r3, #1
 8022502:	6010      	str	r0, [r2, #0]
 8022504:	7019      	strb	r1, [r3, #0]
 8022506:	4608      	mov	r0, r1
 8022508:	f85d 4b04 	ldr.w	r4, [sp], #4
 802250c:	4770      	bx	lr

0802250e <__sfputs_r>:
 802250e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022510:	4606      	mov	r6, r0
 8022512:	460f      	mov	r7, r1
 8022514:	4614      	mov	r4, r2
 8022516:	18d5      	adds	r5, r2, r3
 8022518:	42ac      	cmp	r4, r5
 802251a:	d101      	bne.n	8022520 <__sfputs_r+0x12>
 802251c:	2000      	movs	r0, #0
 802251e:	e007      	b.n	8022530 <__sfputs_r+0x22>
 8022520:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022524:	463a      	mov	r2, r7
 8022526:	4630      	mov	r0, r6
 8022528:	f7ff ffda 	bl	80224e0 <__sfputc_r>
 802252c:	1c43      	adds	r3, r0, #1
 802252e:	d1f3      	bne.n	8022518 <__sfputs_r+0xa>
 8022530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022534 <_vfiprintf_r>:
 8022534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022538:	460d      	mov	r5, r1
 802253a:	b09d      	sub	sp, #116	; 0x74
 802253c:	4614      	mov	r4, r2
 802253e:	4698      	mov	r8, r3
 8022540:	4606      	mov	r6, r0
 8022542:	b118      	cbz	r0, 802254c <_vfiprintf_r+0x18>
 8022544:	6983      	ldr	r3, [r0, #24]
 8022546:	b90b      	cbnz	r3, 802254c <_vfiprintf_r+0x18>
 8022548:	f7ff fa3e 	bl	80219c8 <__sinit>
 802254c:	4b89      	ldr	r3, [pc, #548]	; (8022774 <_vfiprintf_r+0x240>)
 802254e:	429d      	cmp	r5, r3
 8022550:	d11b      	bne.n	802258a <_vfiprintf_r+0x56>
 8022552:	6875      	ldr	r5, [r6, #4]
 8022554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022556:	07d9      	lsls	r1, r3, #31
 8022558:	d405      	bmi.n	8022566 <_vfiprintf_r+0x32>
 802255a:	89ab      	ldrh	r3, [r5, #12]
 802255c:	059a      	lsls	r2, r3, #22
 802255e:	d402      	bmi.n	8022566 <_vfiprintf_r+0x32>
 8022560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022562:	f7ff fad4 	bl	8021b0e <__retarget_lock_acquire_recursive>
 8022566:	89ab      	ldrh	r3, [r5, #12]
 8022568:	071b      	lsls	r3, r3, #28
 802256a:	d501      	bpl.n	8022570 <_vfiprintf_r+0x3c>
 802256c:	692b      	ldr	r3, [r5, #16]
 802256e:	b9eb      	cbnz	r3, 80225ac <_vfiprintf_r+0x78>
 8022570:	4629      	mov	r1, r5
 8022572:	4630      	mov	r0, r6
 8022574:	f7fe fa24 	bl	80209c0 <__swsetup_r>
 8022578:	b1c0      	cbz	r0, 80225ac <_vfiprintf_r+0x78>
 802257a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802257c:	07dc      	lsls	r4, r3, #31
 802257e:	d50e      	bpl.n	802259e <_vfiprintf_r+0x6a>
 8022580:	f04f 30ff 	mov.w	r0, #4294967295
 8022584:	b01d      	add	sp, #116	; 0x74
 8022586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802258a:	4b7b      	ldr	r3, [pc, #492]	; (8022778 <_vfiprintf_r+0x244>)
 802258c:	429d      	cmp	r5, r3
 802258e:	d101      	bne.n	8022594 <_vfiprintf_r+0x60>
 8022590:	68b5      	ldr	r5, [r6, #8]
 8022592:	e7df      	b.n	8022554 <_vfiprintf_r+0x20>
 8022594:	4b79      	ldr	r3, [pc, #484]	; (802277c <_vfiprintf_r+0x248>)
 8022596:	429d      	cmp	r5, r3
 8022598:	bf08      	it	eq
 802259a:	68f5      	ldreq	r5, [r6, #12]
 802259c:	e7da      	b.n	8022554 <_vfiprintf_r+0x20>
 802259e:	89ab      	ldrh	r3, [r5, #12]
 80225a0:	0598      	lsls	r0, r3, #22
 80225a2:	d4ed      	bmi.n	8022580 <_vfiprintf_r+0x4c>
 80225a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80225a6:	f7ff fab3 	bl	8021b10 <__retarget_lock_release_recursive>
 80225aa:	e7e9      	b.n	8022580 <_vfiprintf_r+0x4c>
 80225ac:	2300      	movs	r3, #0
 80225ae:	9309      	str	r3, [sp, #36]	; 0x24
 80225b0:	2320      	movs	r3, #32
 80225b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80225b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80225ba:	2330      	movs	r3, #48	; 0x30
 80225bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022780 <_vfiprintf_r+0x24c>
 80225c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80225c4:	f04f 0901 	mov.w	r9, #1
 80225c8:	4623      	mov	r3, r4
 80225ca:	469a      	mov	sl, r3
 80225cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80225d0:	b10a      	cbz	r2, 80225d6 <_vfiprintf_r+0xa2>
 80225d2:	2a25      	cmp	r2, #37	; 0x25
 80225d4:	d1f9      	bne.n	80225ca <_vfiprintf_r+0x96>
 80225d6:	ebba 0b04 	subs.w	fp, sl, r4
 80225da:	d00b      	beq.n	80225f4 <_vfiprintf_r+0xc0>
 80225dc:	465b      	mov	r3, fp
 80225de:	4622      	mov	r2, r4
 80225e0:	4629      	mov	r1, r5
 80225e2:	4630      	mov	r0, r6
 80225e4:	f7ff ff93 	bl	802250e <__sfputs_r>
 80225e8:	3001      	adds	r0, #1
 80225ea:	f000 80aa 	beq.w	8022742 <_vfiprintf_r+0x20e>
 80225ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80225f0:	445a      	add	r2, fp
 80225f2:	9209      	str	r2, [sp, #36]	; 0x24
 80225f4:	f89a 3000 	ldrb.w	r3, [sl]
 80225f8:	2b00      	cmp	r3, #0
 80225fa:	f000 80a2 	beq.w	8022742 <_vfiprintf_r+0x20e>
 80225fe:	2300      	movs	r3, #0
 8022600:	f04f 32ff 	mov.w	r2, #4294967295
 8022604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022608:	f10a 0a01 	add.w	sl, sl, #1
 802260c:	9304      	str	r3, [sp, #16]
 802260e:	9307      	str	r3, [sp, #28]
 8022610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022614:	931a      	str	r3, [sp, #104]	; 0x68
 8022616:	4654      	mov	r4, sl
 8022618:	2205      	movs	r2, #5
 802261a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802261e:	4858      	ldr	r0, [pc, #352]	; (8022780 <_vfiprintf_r+0x24c>)
 8022620:	f7dd fe06 	bl	8000230 <memchr>
 8022624:	9a04      	ldr	r2, [sp, #16]
 8022626:	b9d8      	cbnz	r0, 8022660 <_vfiprintf_r+0x12c>
 8022628:	06d1      	lsls	r1, r2, #27
 802262a:	bf44      	itt	mi
 802262c:	2320      	movmi	r3, #32
 802262e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022632:	0713      	lsls	r3, r2, #28
 8022634:	bf44      	itt	mi
 8022636:	232b      	movmi	r3, #43	; 0x2b
 8022638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802263c:	f89a 3000 	ldrb.w	r3, [sl]
 8022640:	2b2a      	cmp	r3, #42	; 0x2a
 8022642:	d015      	beq.n	8022670 <_vfiprintf_r+0x13c>
 8022644:	9a07      	ldr	r2, [sp, #28]
 8022646:	4654      	mov	r4, sl
 8022648:	2000      	movs	r0, #0
 802264a:	f04f 0c0a 	mov.w	ip, #10
 802264e:	4621      	mov	r1, r4
 8022650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022654:	3b30      	subs	r3, #48	; 0x30
 8022656:	2b09      	cmp	r3, #9
 8022658:	d94e      	bls.n	80226f8 <_vfiprintf_r+0x1c4>
 802265a:	b1b0      	cbz	r0, 802268a <_vfiprintf_r+0x156>
 802265c:	9207      	str	r2, [sp, #28]
 802265e:	e014      	b.n	802268a <_vfiprintf_r+0x156>
 8022660:	eba0 0308 	sub.w	r3, r0, r8
 8022664:	fa09 f303 	lsl.w	r3, r9, r3
 8022668:	4313      	orrs	r3, r2
 802266a:	9304      	str	r3, [sp, #16]
 802266c:	46a2      	mov	sl, r4
 802266e:	e7d2      	b.n	8022616 <_vfiprintf_r+0xe2>
 8022670:	9b03      	ldr	r3, [sp, #12]
 8022672:	1d19      	adds	r1, r3, #4
 8022674:	681b      	ldr	r3, [r3, #0]
 8022676:	9103      	str	r1, [sp, #12]
 8022678:	2b00      	cmp	r3, #0
 802267a:	bfbb      	ittet	lt
 802267c:	425b      	neglt	r3, r3
 802267e:	f042 0202 	orrlt.w	r2, r2, #2
 8022682:	9307      	strge	r3, [sp, #28]
 8022684:	9307      	strlt	r3, [sp, #28]
 8022686:	bfb8      	it	lt
 8022688:	9204      	strlt	r2, [sp, #16]
 802268a:	7823      	ldrb	r3, [r4, #0]
 802268c:	2b2e      	cmp	r3, #46	; 0x2e
 802268e:	d10c      	bne.n	80226aa <_vfiprintf_r+0x176>
 8022690:	7863      	ldrb	r3, [r4, #1]
 8022692:	2b2a      	cmp	r3, #42	; 0x2a
 8022694:	d135      	bne.n	8022702 <_vfiprintf_r+0x1ce>
 8022696:	9b03      	ldr	r3, [sp, #12]
 8022698:	1d1a      	adds	r2, r3, #4
 802269a:	681b      	ldr	r3, [r3, #0]
 802269c:	9203      	str	r2, [sp, #12]
 802269e:	2b00      	cmp	r3, #0
 80226a0:	bfb8      	it	lt
 80226a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80226a6:	3402      	adds	r4, #2
 80226a8:	9305      	str	r3, [sp, #20]
 80226aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022790 <_vfiprintf_r+0x25c>
 80226ae:	7821      	ldrb	r1, [r4, #0]
 80226b0:	2203      	movs	r2, #3
 80226b2:	4650      	mov	r0, sl
 80226b4:	f7dd fdbc 	bl	8000230 <memchr>
 80226b8:	b140      	cbz	r0, 80226cc <_vfiprintf_r+0x198>
 80226ba:	2340      	movs	r3, #64	; 0x40
 80226bc:	eba0 000a 	sub.w	r0, r0, sl
 80226c0:	fa03 f000 	lsl.w	r0, r3, r0
 80226c4:	9b04      	ldr	r3, [sp, #16]
 80226c6:	4303      	orrs	r3, r0
 80226c8:	3401      	adds	r4, #1
 80226ca:	9304      	str	r3, [sp, #16]
 80226cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226d0:	482c      	ldr	r0, [pc, #176]	; (8022784 <_vfiprintf_r+0x250>)
 80226d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80226d6:	2206      	movs	r2, #6
 80226d8:	f7dd fdaa 	bl	8000230 <memchr>
 80226dc:	2800      	cmp	r0, #0
 80226de:	d03f      	beq.n	8022760 <_vfiprintf_r+0x22c>
 80226e0:	4b29      	ldr	r3, [pc, #164]	; (8022788 <_vfiprintf_r+0x254>)
 80226e2:	bb1b      	cbnz	r3, 802272c <_vfiprintf_r+0x1f8>
 80226e4:	9b03      	ldr	r3, [sp, #12]
 80226e6:	3307      	adds	r3, #7
 80226e8:	f023 0307 	bic.w	r3, r3, #7
 80226ec:	3308      	adds	r3, #8
 80226ee:	9303      	str	r3, [sp, #12]
 80226f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226f2:	443b      	add	r3, r7
 80226f4:	9309      	str	r3, [sp, #36]	; 0x24
 80226f6:	e767      	b.n	80225c8 <_vfiprintf_r+0x94>
 80226f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80226fc:	460c      	mov	r4, r1
 80226fe:	2001      	movs	r0, #1
 8022700:	e7a5      	b.n	802264e <_vfiprintf_r+0x11a>
 8022702:	2300      	movs	r3, #0
 8022704:	3401      	adds	r4, #1
 8022706:	9305      	str	r3, [sp, #20]
 8022708:	4619      	mov	r1, r3
 802270a:	f04f 0c0a 	mov.w	ip, #10
 802270e:	4620      	mov	r0, r4
 8022710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022714:	3a30      	subs	r2, #48	; 0x30
 8022716:	2a09      	cmp	r2, #9
 8022718:	d903      	bls.n	8022722 <_vfiprintf_r+0x1ee>
 802271a:	2b00      	cmp	r3, #0
 802271c:	d0c5      	beq.n	80226aa <_vfiprintf_r+0x176>
 802271e:	9105      	str	r1, [sp, #20]
 8022720:	e7c3      	b.n	80226aa <_vfiprintf_r+0x176>
 8022722:	fb0c 2101 	mla	r1, ip, r1, r2
 8022726:	4604      	mov	r4, r0
 8022728:	2301      	movs	r3, #1
 802272a:	e7f0      	b.n	802270e <_vfiprintf_r+0x1da>
 802272c:	ab03      	add	r3, sp, #12
 802272e:	9300      	str	r3, [sp, #0]
 8022730:	462a      	mov	r2, r5
 8022732:	4b16      	ldr	r3, [pc, #88]	; (802278c <_vfiprintf_r+0x258>)
 8022734:	a904      	add	r1, sp, #16
 8022736:	4630      	mov	r0, r6
 8022738:	f7fd fc82 	bl	8020040 <_printf_float>
 802273c:	4607      	mov	r7, r0
 802273e:	1c78      	adds	r0, r7, #1
 8022740:	d1d6      	bne.n	80226f0 <_vfiprintf_r+0x1bc>
 8022742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022744:	07d9      	lsls	r1, r3, #31
 8022746:	d405      	bmi.n	8022754 <_vfiprintf_r+0x220>
 8022748:	89ab      	ldrh	r3, [r5, #12]
 802274a:	059a      	lsls	r2, r3, #22
 802274c:	d402      	bmi.n	8022754 <_vfiprintf_r+0x220>
 802274e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022750:	f7ff f9de 	bl	8021b10 <__retarget_lock_release_recursive>
 8022754:	89ab      	ldrh	r3, [r5, #12]
 8022756:	065b      	lsls	r3, r3, #25
 8022758:	f53f af12 	bmi.w	8022580 <_vfiprintf_r+0x4c>
 802275c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802275e:	e711      	b.n	8022584 <_vfiprintf_r+0x50>
 8022760:	ab03      	add	r3, sp, #12
 8022762:	9300      	str	r3, [sp, #0]
 8022764:	462a      	mov	r2, r5
 8022766:	4b09      	ldr	r3, [pc, #36]	; (802278c <_vfiprintf_r+0x258>)
 8022768:	a904      	add	r1, sp, #16
 802276a:	4630      	mov	r0, r6
 802276c:	f7fd ff0c 	bl	8020588 <_printf_i>
 8022770:	e7e4      	b.n	802273c <_vfiprintf_r+0x208>
 8022772:	bf00      	nop
 8022774:	08024558 	.word	0x08024558
 8022778:	08024578 	.word	0x08024578
 802277c:	08024538 	.word	0x08024538
 8022780:	080246f4 	.word	0x080246f4
 8022784:	080246fe 	.word	0x080246fe
 8022788:	08020041 	.word	0x08020041
 802278c:	0802250f 	.word	0x0802250f
 8022790:	080246fa 	.word	0x080246fa

08022794 <_putc_r>:
 8022794:	b570      	push	{r4, r5, r6, lr}
 8022796:	460d      	mov	r5, r1
 8022798:	4614      	mov	r4, r2
 802279a:	4606      	mov	r6, r0
 802279c:	b118      	cbz	r0, 80227a6 <_putc_r+0x12>
 802279e:	6983      	ldr	r3, [r0, #24]
 80227a0:	b90b      	cbnz	r3, 80227a6 <_putc_r+0x12>
 80227a2:	f7ff f911 	bl	80219c8 <__sinit>
 80227a6:	4b1c      	ldr	r3, [pc, #112]	; (8022818 <_putc_r+0x84>)
 80227a8:	429c      	cmp	r4, r3
 80227aa:	d124      	bne.n	80227f6 <_putc_r+0x62>
 80227ac:	6874      	ldr	r4, [r6, #4]
 80227ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80227b0:	07d8      	lsls	r0, r3, #31
 80227b2:	d405      	bmi.n	80227c0 <_putc_r+0x2c>
 80227b4:	89a3      	ldrh	r3, [r4, #12]
 80227b6:	0599      	lsls	r1, r3, #22
 80227b8:	d402      	bmi.n	80227c0 <_putc_r+0x2c>
 80227ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227bc:	f7ff f9a7 	bl	8021b0e <__retarget_lock_acquire_recursive>
 80227c0:	68a3      	ldr	r3, [r4, #8]
 80227c2:	3b01      	subs	r3, #1
 80227c4:	2b00      	cmp	r3, #0
 80227c6:	60a3      	str	r3, [r4, #8]
 80227c8:	da05      	bge.n	80227d6 <_putc_r+0x42>
 80227ca:	69a2      	ldr	r2, [r4, #24]
 80227cc:	4293      	cmp	r3, r2
 80227ce:	db1c      	blt.n	802280a <_putc_r+0x76>
 80227d0:	b2eb      	uxtb	r3, r5
 80227d2:	2b0a      	cmp	r3, #10
 80227d4:	d019      	beq.n	802280a <_putc_r+0x76>
 80227d6:	6823      	ldr	r3, [r4, #0]
 80227d8:	1c5a      	adds	r2, r3, #1
 80227da:	6022      	str	r2, [r4, #0]
 80227dc:	701d      	strb	r5, [r3, #0]
 80227de:	b2ed      	uxtb	r5, r5
 80227e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80227e2:	07da      	lsls	r2, r3, #31
 80227e4:	d405      	bmi.n	80227f2 <_putc_r+0x5e>
 80227e6:	89a3      	ldrh	r3, [r4, #12]
 80227e8:	059b      	lsls	r3, r3, #22
 80227ea:	d402      	bmi.n	80227f2 <_putc_r+0x5e>
 80227ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80227ee:	f7ff f98f 	bl	8021b10 <__retarget_lock_release_recursive>
 80227f2:	4628      	mov	r0, r5
 80227f4:	bd70      	pop	{r4, r5, r6, pc}
 80227f6:	4b09      	ldr	r3, [pc, #36]	; (802281c <_putc_r+0x88>)
 80227f8:	429c      	cmp	r4, r3
 80227fa:	d101      	bne.n	8022800 <_putc_r+0x6c>
 80227fc:	68b4      	ldr	r4, [r6, #8]
 80227fe:	e7d6      	b.n	80227ae <_putc_r+0x1a>
 8022800:	4b07      	ldr	r3, [pc, #28]	; (8022820 <_putc_r+0x8c>)
 8022802:	429c      	cmp	r4, r3
 8022804:	bf08      	it	eq
 8022806:	68f4      	ldreq	r4, [r6, #12]
 8022808:	e7d1      	b.n	80227ae <_putc_r+0x1a>
 802280a:	4629      	mov	r1, r5
 802280c:	4622      	mov	r2, r4
 802280e:	4630      	mov	r0, r6
 8022810:	f7fe f884 	bl	802091c <__swbuf_r>
 8022814:	4605      	mov	r5, r0
 8022816:	e7e3      	b.n	80227e0 <_putc_r+0x4c>
 8022818:	08024558 	.word	0x08024558
 802281c:	08024578 	.word	0x08024578
 8022820:	08024538 	.word	0x08024538

08022824 <_sbrk_r>:
 8022824:	b538      	push	{r3, r4, r5, lr}
 8022826:	4d06      	ldr	r5, [pc, #24]	; (8022840 <_sbrk_r+0x1c>)
 8022828:	2300      	movs	r3, #0
 802282a:	4604      	mov	r4, r0
 802282c:	4608      	mov	r0, r1
 802282e:	602b      	str	r3, [r5, #0]
 8022830:	f7f4 fd3c 	bl	80172ac <_sbrk>
 8022834:	1c43      	adds	r3, r0, #1
 8022836:	d102      	bne.n	802283e <_sbrk_r+0x1a>
 8022838:	682b      	ldr	r3, [r5, #0]
 802283a:	b103      	cbz	r3, 802283e <_sbrk_r+0x1a>
 802283c:	6023      	str	r3, [r4, #0]
 802283e:	bd38      	pop	{r3, r4, r5, pc}
 8022840:	2000f90c 	.word	0x2000f90c

08022844 <__sread>:
 8022844:	b510      	push	{r4, lr}
 8022846:	460c      	mov	r4, r1
 8022848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802284c:	f000 f8e2 	bl	8022a14 <_read_r>
 8022850:	2800      	cmp	r0, #0
 8022852:	bfab      	itete	ge
 8022854:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022856:	89a3      	ldrhlt	r3, [r4, #12]
 8022858:	181b      	addge	r3, r3, r0
 802285a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802285e:	bfac      	ite	ge
 8022860:	6563      	strge	r3, [r4, #84]	; 0x54
 8022862:	81a3      	strhlt	r3, [r4, #12]
 8022864:	bd10      	pop	{r4, pc}

08022866 <__swrite>:
 8022866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802286a:	461f      	mov	r7, r3
 802286c:	898b      	ldrh	r3, [r1, #12]
 802286e:	05db      	lsls	r3, r3, #23
 8022870:	4605      	mov	r5, r0
 8022872:	460c      	mov	r4, r1
 8022874:	4616      	mov	r6, r2
 8022876:	d505      	bpl.n	8022884 <__swrite+0x1e>
 8022878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802287c:	2302      	movs	r3, #2
 802287e:	2200      	movs	r2, #0
 8022880:	f000 f898 	bl	80229b4 <_lseek_r>
 8022884:	89a3      	ldrh	r3, [r4, #12]
 8022886:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802288a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802288e:	81a3      	strh	r3, [r4, #12]
 8022890:	4632      	mov	r2, r6
 8022892:	463b      	mov	r3, r7
 8022894:	4628      	mov	r0, r5
 8022896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802289a:	f000 b817 	b.w	80228cc <_write_r>

0802289e <__sseek>:
 802289e:	b510      	push	{r4, lr}
 80228a0:	460c      	mov	r4, r1
 80228a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228a6:	f000 f885 	bl	80229b4 <_lseek_r>
 80228aa:	1c43      	adds	r3, r0, #1
 80228ac:	89a3      	ldrh	r3, [r4, #12]
 80228ae:	bf15      	itete	ne
 80228b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80228b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80228b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80228ba:	81a3      	strheq	r3, [r4, #12]
 80228bc:	bf18      	it	ne
 80228be:	81a3      	strhne	r3, [r4, #12]
 80228c0:	bd10      	pop	{r4, pc}

080228c2 <__sclose>:
 80228c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80228c6:	f000 b831 	b.w	802292c <_close_r>
	...

080228cc <_write_r>:
 80228cc:	b538      	push	{r3, r4, r5, lr}
 80228ce:	4d07      	ldr	r5, [pc, #28]	; (80228ec <_write_r+0x20>)
 80228d0:	4604      	mov	r4, r0
 80228d2:	4608      	mov	r0, r1
 80228d4:	4611      	mov	r1, r2
 80228d6:	2200      	movs	r2, #0
 80228d8:	602a      	str	r2, [r5, #0]
 80228da:	461a      	mov	r2, r3
 80228dc:	f7f4 fc92 	bl	8017204 <_write>
 80228e0:	1c43      	adds	r3, r0, #1
 80228e2:	d102      	bne.n	80228ea <_write_r+0x1e>
 80228e4:	682b      	ldr	r3, [r5, #0]
 80228e6:	b103      	cbz	r3, 80228ea <_write_r+0x1e>
 80228e8:	6023      	str	r3, [r4, #0]
 80228ea:	bd38      	pop	{r3, r4, r5, pc}
 80228ec:	2000f90c 	.word	0x2000f90c

080228f0 <__assert_func>:
 80228f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80228f2:	4614      	mov	r4, r2
 80228f4:	461a      	mov	r2, r3
 80228f6:	4b09      	ldr	r3, [pc, #36]	; (802291c <__assert_func+0x2c>)
 80228f8:	681b      	ldr	r3, [r3, #0]
 80228fa:	4605      	mov	r5, r0
 80228fc:	68d8      	ldr	r0, [r3, #12]
 80228fe:	b14c      	cbz	r4, 8022914 <__assert_func+0x24>
 8022900:	4b07      	ldr	r3, [pc, #28]	; (8022920 <__assert_func+0x30>)
 8022902:	9100      	str	r1, [sp, #0]
 8022904:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022908:	4906      	ldr	r1, [pc, #24]	; (8022924 <__assert_func+0x34>)
 802290a:	462b      	mov	r3, r5
 802290c:	f000 f81e 	bl	802294c <fiprintf>
 8022910:	f000 f89f 	bl	8022a52 <abort>
 8022914:	4b04      	ldr	r3, [pc, #16]	; (8022928 <__assert_func+0x38>)
 8022916:	461c      	mov	r4, r3
 8022918:	e7f3      	b.n	8022902 <__assert_func+0x12>
 802291a:	bf00      	nop
 802291c:	2000002c 	.word	0x2000002c
 8022920:	08024705 	.word	0x08024705
 8022924:	08024712 	.word	0x08024712
 8022928:	08024740 	.word	0x08024740

0802292c <_close_r>:
 802292c:	b538      	push	{r3, r4, r5, lr}
 802292e:	4d06      	ldr	r5, [pc, #24]	; (8022948 <_close_r+0x1c>)
 8022930:	2300      	movs	r3, #0
 8022932:	4604      	mov	r4, r0
 8022934:	4608      	mov	r0, r1
 8022936:	602b      	str	r3, [r5, #0]
 8022938:	f7f4 fc84 	bl	8017244 <_close>
 802293c:	1c43      	adds	r3, r0, #1
 802293e:	d102      	bne.n	8022946 <_close_r+0x1a>
 8022940:	682b      	ldr	r3, [r5, #0]
 8022942:	b103      	cbz	r3, 8022946 <_close_r+0x1a>
 8022944:	6023      	str	r3, [r4, #0]
 8022946:	bd38      	pop	{r3, r4, r5, pc}
 8022948:	2000f90c 	.word	0x2000f90c

0802294c <fiprintf>:
 802294c:	b40e      	push	{r1, r2, r3}
 802294e:	b503      	push	{r0, r1, lr}
 8022950:	4601      	mov	r1, r0
 8022952:	ab03      	add	r3, sp, #12
 8022954:	4805      	ldr	r0, [pc, #20]	; (802296c <fiprintf+0x20>)
 8022956:	f853 2b04 	ldr.w	r2, [r3], #4
 802295a:	6800      	ldr	r0, [r0, #0]
 802295c:	9301      	str	r3, [sp, #4]
 802295e:	f7ff fde9 	bl	8022534 <_vfiprintf_r>
 8022962:	b002      	add	sp, #8
 8022964:	f85d eb04 	ldr.w	lr, [sp], #4
 8022968:	b003      	add	sp, #12
 802296a:	4770      	bx	lr
 802296c:	2000002c 	.word	0x2000002c

08022970 <_fstat_r>:
 8022970:	b538      	push	{r3, r4, r5, lr}
 8022972:	4d07      	ldr	r5, [pc, #28]	; (8022990 <_fstat_r+0x20>)
 8022974:	2300      	movs	r3, #0
 8022976:	4604      	mov	r4, r0
 8022978:	4608      	mov	r0, r1
 802297a:	4611      	mov	r1, r2
 802297c:	602b      	str	r3, [r5, #0]
 802297e:	f7f4 fc6d 	bl	801725c <_fstat>
 8022982:	1c43      	adds	r3, r0, #1
 8022984:	d102      	bne.n	802298c <_fstat_r+0x1c>
 8022986:	682b      	ldr	r3, [r5, #0]
 8022988:	b103      	cbz	r3, 802298c <_fstat_r+0x1c>
 802298a:	6023      	str	r3, [r4, #0]
 802298c:	bd38      	pop	{r3, r4, r5, pc}
 802298e:	bf00      	nop
 8022990:	2000f90c 	.word	0x2000f90c

08022994 <_isatty_r>:
 8022994:	b538      	push	{r3, r4, r5, lr}
 8022996:	4d06      	ldr	r5, [pc, #24]	; (80229b0 <_isatty_r+0x1c>)
 8022998:	2300      	movs	r3, #0
 802299a:	4604      	mov	r4, r0
 802299c:	4608      	mov	r0, r1
 802299e:	602b      	str	r3, [r5, #0]
 80229a0:	f7f4 fc6c 	bl	801727c <_isatty>
 80229a4:	1c43      	adds	r3, r0, #1
 80229a6:	d102      	bne.n	80229ae <_isatty_r+0x1a>
 80229a8:	682b      	ldr	r3, [r5, #0]
 80229aa:	b103      	cbz	r3, 80229ae <_isatty_r+0x1a>
 80229ac:	6023      	str	r3, [r4, #0]
 80229ae:	bd38      	pop	{r3, r4, r5, pc}
 80229b0:	2000f90c 	.word	0x2000f90c

080229b4 <_lseek_r>:
 80229b4:	b538      	push	{r3, r4, r5, lr}
 80229b6:	4d07      	ldr	r5, [pc, #28]	; (80229d4 <_lseek_r+0x20>)
 80229b8:	4604      	mov	r4, r0
 80229ba:	4608      	mov	r0, r1
 80229bc:	4611      	mov	r1, r2
 80229be:	2200      	movs	r2, #0
 80229c0:	602a      	str	r2, [r5, #0]
 80229c2:	461a      	mov	r2, r3
 80229c4:	f7f4 fc65 	bl	8017292 <_lseek>
 80229c8:	1c43      	adds	r3, r0, #1
 80229ca:	d102      	bne.n	80229d2 <_lseek_r+0x1e>
 80229cc:	682b      	ldr	r3, [r5, #0]
 80229ce:	b103      	cbz	r3, 80229d2 <_lseek_r+0x1e>
 80229d0:	6023      	str	r3, [r4, #0]
 80229d2:	bd38      	pop	{r3, r4, r5, pc}
 80229d4:	2000f90c 	.word	0x2000f90c

080229d8 <__ascii_mbtowc>:
 80229d8:	b082      	sub	sp, #8
 80229da:	b901      	cbnz	r1, 80229de <__ascii_mbtowc+0x6>
 80229dc:	a901      	add	r1, sp, #4
 80229de:	b142      	cbz	r2, 80229f2 <__ascii_mbtowc+0x1a>
 80229e0:	b14b      	cbz	r3, 80229f6 <__ascii_mbtowc+0x1e>
 80229e2:	7813      	ldrb	r3, [r2, #0]
 80229e4:	600b      	str	r3, [r1, #0]
 80229e6:	7812      	ldrb	r2, [r2, #0]
 80229e8:	1e10      	subs	r0, r2, #0
 80229ea:	bf18      	it	ne
 80229ec:	2001      	movne	r0, #1
 80229ee:	b002      	add	sp, #8
 80229f0:	4770      	bx	lr
 80229f2:	4610      	mov	r0, r2
 80229f4:	e7fb      	b.n	80229ee <__ascii_mbtowc+0x16>
 80229f6:	f06f 0001 	mvn.w	r0, #1
 80229fa:	e7f8      	b.n	80229ee <__ascii_mbtowc+0x16>

080229fc <__malloc_lock>:
 80229fc:	4801      	ldr	r0, [pc, #4]	; (8022a04 <__malloc_lock+0x8>)
 80229fe:	f7ff b886 	b.w	8021b0e <__retarget_lock_acquire_recursive>
 8022a02:	bf00      	nop
 8022a04:	2000f900 	.word	0x2000f900

08022a08 <__malloc_unlock>:
 8022a08:	4801      	ldr	r0, [pc, #4]	; (8022a10 <__malloc_unlock+0x8>)
 8022a0a:	f7ff b881 	b.w	8021b10 <__retarget_lock_release_recursive>
 8022a0e:	bf00      	nop
 8022a10:	2000f900 	.word	0x2000f900

08022a14 <_read_r>:
 8022a14:	b538      	push	{r3, r4, r5, lr}
 8022a16:	4d07      	ldr	r5, [pc, #28]	; (8022a34 <_read_r+0x20>)
 8022a18:	4604      	mov	r4, r0
 8022a1a:	4608      	mov	r0, r1
 8022a1c:	4611      	mov	r1, r2
 8022a1e:	2200      	movs	r2, #0
 8022a20:	602a      	str	r2, [r5, #0]
 8022a22:	461a      	mov	r2, r3
 8022a24:	f7f4 fbd0 	bl	80171c8 <_read>
 8022a28:	1c43      	adds	r3, r0, #1
 8022a2a:	d102      	bne.n	8022a32 <_read_r+0x1e>
 8022a2c:	682b      	ldr	r3, [r5, #0]
 8022a2e:	b103      	cbz	r3, 8022a32 <_read_r+0x1e>
 8022a30:	6023      	str	r3, [r4, #0]
 8022a32:	bd38      	pop	{r3, r4, r5, pc}
 8022a34:	2000f90c 	.word	0x2000f90c

08022a38 <__ascii_wctomb>:
 8022a38:	b149      	cbz	r1, 8022a4e <__ascii_wctomb+0x16>
 8022a3a:	2aff      	cmp	r2, #255	; 0xff
 8022a3c:	bf85      	ittet	hi
 8022a3e:	238a      	movhi	r3, #138	; 0x8a
 8022a40:	6003      	strhi	r3, [r0, #0]
 8022a42:	700a      	strbls	r2, [r1, #0]
 8022a44:	f04f 30ff 	movhi.w	r0, #4294967295
 8022a48:	bf98      	it	ls
 8022a4a:	2001      	movls	r0, #1
 8022a4c:	4770      	bx	lr
 8022a4e:	4608      	mov	r0, r1
 8022a50:	4770      	bx	lr

08022a52 <abort>:
 8022a52:	b508      	push	{r3, lr}
 8022a54:	2006      	movs	r0, #6
 8022a56:	f000 f82b 	bl	8022ab0 <raise>
 8022a5a:	2001      	movs	r0, #1
 8022a5c:	f7f4 fbaa 	bl	80171b4 <_exit>

08022a60 <_raise_r>:
 8022a60:	291f      	cmp	r1, #31
 8022a62:	b538      	push	{r3, r4, r5, lr}
 8022a64:	4604      	mov	r4, r0
 8022a66:	460d      	mov	r5, r1
 8022a68:	d904      	bls.n	8022a74 <_raise_r+0x14>
 8022a6a:	2316      	movs	r3, #22
 8022a6c:	6003      	str	r3, [r0, #0]
 8022a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8022a72:	bd38      	pop	{r3, r4, r5, pc}
 8022a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022a76:	b112      	cbz	r2, 8022a7e <_raise_r+0x1e>
 8022a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022a7c:	b94b      	cbnz	r3, 8022a92 <_raise_r+0x32>
 8022a7e:	4620      	mov	r0, r4
 8022a80:	f000 f830 	bl	8022ae4 <_getpid_r>
 8022a84:	462a      	mov	r2, r5
 8022a86:	4601      	mov	r1, r0
 8022a88:	4620      	mov	r0, r4
 8022a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022a8e:	f000 b817 	b.w	8022ac0 <_kill_r>
 8022a92:	2b01      	cmp	r3, #1
 8022a94:	d00a      	beq.n	8022aac <_raise_r+0x4c>
 8022a96:	1c59      	adds	r1, r3, #1
 8022a98:	d103      	bne.n	8022aa2 <_raise_r+0x42>
 8022a9a:	2316      	movs	r3, #22
 8022a9c:	6003      	str	r3, [r0, #0]
 8022a9e:	2001      	movs	r0, #1
 8022aa0:	e7e7      	b.n	8022a72 <_raise_r+0x12>
 8022aa2:	2400      	movs	r4, #0
 8022aa4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022aa8:	4628      	mov	r0, r5
 8022aaa:	4798      	blx	r3
 8022aac:	2000      	movs	r0, #0
 8022aae:	e7e0      	b.n	8022a72 <_raise_r+0x12>

08022ab0 <raise>:
 8022ab0:	4b02      	ldr	r3, [pc, #8]	; (8022abc <raise+0xc>)
 8022ab2:	4601      	mov	r1, r0
 8022ab4:	6818      	ldr	r0, [r3, #0]
 8022ab6:	f7ff bfd3 	b.w	8022a60 <_raise_r>
 8022aba:	bf00      	nop
 8022abc:	2000002c 	.word	0x2000002c

08022ac0 <_kill_r>:
 8022ac0:	b538      	push	{r3, r4, r5, lr}
 8022ac2:	4d07      	ldr	r5, [pc, #28]	; (8022ae0 <_kill_r+0x20>)
 8022ac4:	2300      	movs	r3, #0
 8022ac6:	4604      	mov	r4, r0
 8022ac8:	4608      	mov	r0, r1
 8022aca:	4611      	mov	r1, r2
 8022acc:	602b      	str	r3, [r5, #0]
 8022ace:	f7f4 fb61 	bl	8017194 <_kill>
 8022ad2:	1c43      	adds	r3, r0, #1
 8022ad4:	d102      	bne.n	8022adc <_kill_r+0x1c>
 8022ad6:	682b      	ldr	r3, [r5, #0]
 8022ad8:	b103      	cbz	r3, 8022adc <_kill_r+0x1c>
 8022ada:	6023      	str	r3, [r4, #0]
 8022adc:	bd38      	pop	{r3, r4, r5, pc}
 8022ade:	bf00      	nop
 8022ae0:	2000f90c 	.word	0x2000f90c

08022ae4 <_getpid_r>:
 8022ae4:	f7f4 bb4e 	b.w	8017184 <_getpid>

08022ae8 <ceil>:
 8022ae8:	ec51 0b10 	vmov	r0, r1, d0
 8022aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022af0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022af4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022af8:	2e13      	cmp	r6, #19
 8022afa:	ee10 5a10 	vmov	r5, s0
 8022afe:	ee10 8a10 	vmov	r8, s0
 8022b02:	460c      	mov	r4, r1
 8022b04:	dc30      	bgt.n	8022b68 <ceil+0x80>
 8022b06:	2e00      	cmp	r6, #0
 8022b08:	da12      	bge.n	8022b30 <ceil+0x48>
 8022b0a:	a335      	add	r3, pc, #212	; (adr r3, 8022be0 <ceil+0xf8>)
 8022b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b10:	f7dd fbe4 	bl	80002dc <__adddf3>
 8022b14:	2200      	movs	r2, #0
 8022b16:	2300      	movs	r3, #0
 8022b18:	f7de f826 	bl	8000b68 <__aeabi_dcmpgt>
 8022b1c:	b128      	cbz	r0, 8022b2a <ceil+0x42>
 8022b1e:	2c00      	cmp	r4, #0
 8022b20:	db55      	blt.n	8022bce <ceil+0xe6>
 8022b22:	432c      	orrs	r4, r5
 8022b24:	d057      	beq.n	8022bd6 <ceil+0xee>
 8022b26:	4c30      	ldr	r4, [pc, #192]	; (8022be8 <ceil+0x100>)
 8022b28:	2500      	movs	r5, #0
 8022b2a:	4621      	mov	r1, r4
 8022b2c:	4628      	mov	r0, r5
 8022b2e:	e025      	b.n	8022b7c <ceil+0x94>
 8022b30:	4f2e      	ldr	r7, [pc, #184]	; (8022bec <ceil+0x104>)
 8022b32:	4137      	asrs	r7, r6
 8022b34:	ea01 0307 	and.w	r3, r1, r7
 8022b38:	4303      	orrs	r3, r0
 8022b3a:	d01f      	beq.n	8022b7c <ceil+0x94>
 8022b3c:	a328      	add	r3, pc, #160	; (adr r3, 8022be0 <ceil+0xf8>)
 8022b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b42:	f7dd fbcb 	bl	80002dc <__adddf3>
 8022b46:	2200      	movs	r2, #0
 8022b48:	2300      	movs	r3, #0
 8022b4a:	f7de f80d 	bl	8000b68 <__aeabi_dcmpgt>
 8022b4e:	2800      	cmp	r0, #0
 8022b50:	d0eb      	beq.n	8022b2a <ceil+0x42>
 8022b52:	2c00      	cmp	r4, #0
 8022b54:	bfc2      	ittt	gt
 8022b56:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022b5a:	fa43 f606 	asrgt.w	r6, r3, r6
 8022b5e:	19a4      	addgt	r4, r4, r6
 8022b60:	ea24 0407 	bic.w	r4, r4, r7
 8022b64:	2500      	movs	r5, #0
 8022b66:	e7e0      	b.n	8022b2a <ceil+0x42>
 8022b68:	2e33      	cmp	r6, #51	; 0x33
 8022b6a:	dd0b      	ble.n	8022b84 <ceil+0x9c>
 8022b6c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022b70:	d104      	bne.n	8022b7c <ceil+0x94>
 8022b72:	ee10 2a10 	vmov	r2, s0
 8022b76:	460b      	mov	r3, r1
 8022b78:	f7dd fbb0 	bl	80002dc <__adddf3>
 8022b7c:	ec41 0b10 	vmov	d0, r0, r1
 8022b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022b84:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022b88:	f04f 33ff 	mov.w	r3, #4294967295
 8022b8c:	fa23 f707 	lsr.w	r7, r3, r7
 8022b90:	4207      	tst	r7, r0
 8022b92:	d0f3      	beq.n	8022b7c <ceil+0x94>
 8022b94:	a312      	add	r3, pc, #72	; (adr r3, 8022be0 <ceil+0xf8>)
 8022b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022b9a:	f7dd fb9f 	bl	80002dc <__adddf3>
 8022b9e:	2200      	movs	r2, #0
 8022ba0:	2300      	movs	r3, #0
 8022ba2:	f7dd ffe1 	bl	8000b68 <__aeabi_dcmpgt>
 8022ba6:	2800      	cmp	r0, #0
 8022ba8:	d0bf      	beq.n	8022b2a <ceil+0x42>
 8022baa:	2c00      	cmp	r4, #0
 8022bac:	dd02      	ble.n	8022bb4 <ceil+0xcc>
 8022bae:	2e14      	cmp	r6, #20
 8022bb0:	d103      	bne.n	8022bba <ceil+0xd2>
 8022bb2:	3401      	adds	r4, #1
 8022bb4:	ea25 0507 	bic.w	r5, r5, r7
 8022bb8:	e7b7      	b.n	8022b2a <ceil+0x42>
 8022bba:	2301      	movs	r3, #1
 8022bbc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022bc0:	fa03 f606 	lsl.w	r6, r3, r6
 8022bc4:	4435      	add	r5, r6
 8022bc6:	4545      	cmp	r5, r8
 8022bc8:	bf38      	it	cc
 8022bca:	18e4      	addcc	r4, r4, r3
 8022bcc:	e7f2      	b.n	8022bb4 <ceil+0xcc>
 8022bce:	2500      	movs	r5, #0
 8022bd0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8022bd4:	e7a9      	b.n	8022b2a <ceil+0x42>
 8022bd6:	4625      	mov	r5, r4
 8022bd8:	e7a7      	b.n	8022b2a <ceil+0x42>
 8022bda:	bf00      	nop
 8022bdc:	f3af 8000 	nop.w
 8022be0:	8800759c 	.word	0x8800759c
 8022be4:	7e37e43c 	.word	0x7e37e43c
 8022be8:	3ff00000 	.word	0x3ff00000
 8022bec:	000fffff 	.word	0x000fffff

08022bf0 <cos>:
 8022bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022bf2:	ec53 2b10 	vmov	r2, r3, d0
 8022bf6:	4826      	ldr	r0, [pc, #152]	; (8022c90 <cos+0xa0>)
 8022bf8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022bfc:	4281      	cmp	r1, r0
 8022bfe:	dc06      	bgt.n	8022c0e <cos+0x1e>
 8022c00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8022c88 <cos+0x98>
 8022c04:	b005      	add	sp, #20
 8022c06:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c0a:	f000 bc75 	b.w	80234f8 <__kernel_cos>
 8022c0e:	4821      	ldr	r0, [pc, #132]	; (8022c94 <cos+0xa4>)
 8022c10:	4281      	cmp	r1, r0
 8022c12:	dd09      	ble.n	8022c28 <cos+0x38>
 8022c14:	ee10 0a10 	vmov	r0, s0
 8022c18:	4619      	mov	r1, r3
 8022c1a:	f7dd fb5d 	bl	80002d8 <__aeabi_dsub>
 8022c1e:	ec41 0b10 	vmov	d0, r0, r1
 8022c22:	b005      	add	sp, #20
 8022c24:	f85d fb04 	ldr.w	pc, [sp], #4
 8022c28:	4668      	mov	r0, sp
 8022c2a:	f000 fa59 	bl	80230e0 <__ieee754_rem_pio2>
 8022c2e:	f000 0003 	and.w	r0, r0, #3
 8022c32:	2801      	cmp	r0, #1
 8022c34:	d00b      	beq.n	8022c4e <cos+0x5e>
 8022c36:	2802      	cmp	r0, #2
 8022c38:	d016      	beq.n	8022c68 <cos+0x78>
 8022c3a:	b9e0      	cbnz	r0, 8022c76 <cos+0x86>
 8022c3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022c40:	ed9d 0b00 	vldr	d0, [sp]
 8022c44:	f000 fc58 	bl	80234f8 <__kernel_cos>
 8022c48:	ec51 0b10 	vmov	r0, r1, d0
 8022c4c:	e7e7      	b.n	8022c1e <cos+0x2e>
 8022c4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022c52:	ed9d 0b00 	vldr	d0, [sp]
 8022c56:	f001 f867 	bl	8023d28 <__kernel_sin>
 8022c5a:	ec53 2b10 	vmov	r2, r3, d0
 8022c5e:	ee10 0a10 	vmov	r0, s0
 8022c62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022c66:	e7da      	b.n	8022c1e <cos+0x2e>
 8022c68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022c6c:	ed9d 0b00 	vldr	d0, [sp]
 8022c70:	f000 fc42 	bl	80234f8 <__kernel_cos>
 8022c74:	e7f1      	b.n	8022c5a <cos+0x6a>
 8022c76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022c7a:	ed9d 0b00 	vldr	d0, [sp]
 8022c7e:	2001      	movs	r0, #1
 8022c80:	f001 f852 	bl	8023d28 <__kernel_sin>
 8022c84:	e7e0      	b.n	8022c48 <cos+0x58>
 8022c86:	bf00      	nop
	...
 8022c90:	3fe921fb 	.word	0x3fe921fb
 8022c94:	7fefffff 	.word	0x7fefffff

08022c98 <sin>:
 8022c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022c9a:	ec53 2b10 	vmov	r2, r3, d0
 8022c9e:	4828      	ldr	r0, [pc, #160]	; (8022d40 <sin+0xa8>)
 8022ca0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8022ca4:	4281      	cmp	r1, r0
 8022ca6:	dc07      	bgt.n	8022cb8 <sin+0x20>
 8022ca8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8022d38 <sin+0xa0>
 8022cac:	2000      	movs	r0, #0
 8022cae:	b005      	add	sp, #20
 8022cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8022cb4:	f001 b838 	b.w	8023d28 <__kernel_sin>
 8022cb8:	4822      	ldr	r0, [pc, #136]	; (8022d44 <sin+0xac>)
 8022cba:	4281      	cmp	r1, r0
 8022cbc:	dd09      	ble.n	8022cd2 <sin+0x3a>
 8022cbe:	ee10 0a10 	vmov	r0, s0
 8022cc2:	4619      	mov	r1, r3
 8022cc4:	f7dd fb08 	bl	80002d8 <__aeabi_dsub>
 8022cc8:	ec41 0b10 	vmov	d0, r0, r1
 8022ccc:	b005      	add	sp, #20
 8022cce:	f85d fb04 	ldr.w	pc, [sp], #4
 8022cd2:	4668      	mov	r0, sp
 8022cd4:	f000 fa04 	bl	80230e0 <__ieee754_rem_pio2>
 8022cd8:	f000 0003 	and.w	r0, r0, #3
 8022cdc:	2801      	cmp	r0, #1
 8022cde:	d00c      	beq.n	8022cfa <sin+0x62>
 8022ce0:	2802      	cmp	r0, #2
 8022ce2:	d011      	beq.n	8022d08 <sin+0x70>
 8022ce4:	b9f0      	cbnz	r0, 8022d24 <sin+0x8c>
 8022ce6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022cea:	ed9d 0b00 	vldr	d0, [sp]
 8022cee:	2001      	movs	r0, #1
 8022cf0:	f001 f81a 	bl	8023d28 <__kernel_sin>
 8022cf4:	ec51 0b10 	vmov	r0, r1, d0
 8022cf8:	e7e6      	b.n	8022cc8 <sin+0x30>
 8022cfa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022cfe:	ed9d 0b00 	vldr	d0, [sp]
 8022d02:	f000 fbf9 	bl	80234f8 <__kernel_cos>
 8022d06:	e7f5      	b.n	8022cf4 <sin+0x5c>
 8022d08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022d0c:	ed9d 0b00 	vldr	d0, [sp]
 8022d10:	2001      	movs	r0, #1
 8022d12:	f001 f809 	bl	8023d28 <__kernel_sin>
 8022d16:	ec53 2b10 	vmov	r2, r3, d0
 8022d1a:	ee10 0a10 	vmov	r0, s0
 8022d1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8022d22:	e7d1      	b.n	8022cc8 <sin+0x30>
 8022d24:	ed9d 1b02 	vldr	d1, [sp, #8]
 8022d28:	ed9d 0b00 	vldr	d0, [sp]
 8022d2c:	f000 fbe4 	bl	80234f8 <__kernel_cos>
 8022d30:	e7f1      	b.n	8022d16 <sin+0x7e>
 8022d32:	bf00      	nop
 8022d34:	f3af 8000 	nop.w
	...
 8022d40:	3fe921fb 	.word	0x3fe921fb
 8022d44:	7fefffff 	.word	0x7fefffff

08022d48 <exp>:
 8022d48:	b538      	push	{r3, r4, r5, lr}
 8022d4a:	ed2d 8b02 	vpush	{d8}
 8022d4e:	ec55 4b10 	vmov	r4, r5, d0
 8022d52:	f000 f841 	bl	8022dd8 <__ieee754_exp>
 8022d56:	eeb0 8a40 	vmov.f32	s16, s0
 8022d5a:	eef0 8a60 	vmov.f32	s17, s1
 8022d5e:	ec45 4b10 	vmov	d0, r4, r5
 8022d62:	f001 f8d8 	bl	8023f16 <finite>
 8022d66:	b168      	cbz	r0, 8022d84 <exp+0x3c>
 8022d68:	a317      	add	r3, pc, #92	; (adr r3, 8022dc8 <exp+0x80>)
 8022d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d6e:	4620      	mov	r0, r4
 8022d70:	4629      	mov	r1, r5
 8022d72:	f7dd fef9 	bl	8000b68 <__aeabi_dcmpgt>
 8022d76:	b160      	cbz	r0, 8022d92 <exp+0x4a>
 8022d78:	f7fd f882 	bl	801fe80 <__errno>
 8022d7c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8022db8 <exp+0x70>
 8022d80:	2322      	movs	r3, #34	; 0x22
 8022d82:	6003      	str	r3, [r0, #0]
 8022d84:	eeb0 0a48 	vmov.f32	s0, s16
 8022d88:	eef0 0a68 	vmov.f32	s1, s17
 8022d8c:	ecbd 8b02 	vpop	{d8}
 8022d90:	bd38      	pop	{r3, r4, r5, pc}
 8022d92:	a30f      	add	r3, pc, #60	; (adr r3, 8022dd0 <exp+0x88>)
 8022d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022d98:	4620      	mov	r0, r4
 8022d9a:	4629      	mov	r1, r5
 8022d9c:	f7dd fec6 	bl	8000b2c <__aeabi_dcmplt>
 8022da0:	2800      	cmp	r0, #0
 8022da2:	d0ef      	beq.n	8022d84 <exp+0x3c>
 8022da4:	f7fd f86c 	bl	801fe80 <__errno>
 8022da8:	2322      	movs	r3, #34	; 0x22
 8022daa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8022dc0 <exp+0x78>
 8022dae:	6003      	str	r3, [r0, #0]
 8022db0:	e7e8      	b.n	8022d84 <exp+0x3c>
 8022db2:	bf00      	nop
 8022db4:	f3af 8000 	nop.w
 8022db8:	00000000 	.word	0x00000000
 8022dbc:	7ff00000 	.word	0x7ff00000
	...
 8022dc8:	fefa39ef 	.word	0xfefa39ef
 8022dcc:	40862e42 	.word	0x40862e42
 8022dd0:	d52d3051 	.word	0xd52d3051
 8022dd4:	c0874910 	.word	0xc0874910

08022dd8 <__ieee754_exp>:
 8022dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022ddc:	ec55 4b10 	vmov	r4, r5, d0
 8022de0:	49b5      	ldr	r1, [pc, #724]	; (80230b8 <__ieee754_exp+0x2e0>)
 8022de2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022de6:	428b      	cmp	r3, r1
 8022de8:	ed2d 8b04 	vpush	{d8-d9}
 8022dec:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8022df0:	d93d      	bls.n	8022e6e <__ieee754_exp+0x96>
 8022df2:	49b2      	ldr	r1, [pc, #712]	; (80230bc <__ieee754_exp+0x2e4>)
 8022df4:	428b      	cmp	r3, r1
 8022df6:	d918      	bls.n	8022e2a <__ieee754_exp+0x52>
 8022df8:	ee10 3a10 	vmov	r3, s0
 8022dfc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8022e00:	4313      	orrs	r3, r2
 8022e02:	d009      	beq.n	8022e18 <__ieee754_exp+0x40>
 8022e04:	ee10 2a10 	vmov	r2, s0
 8022e08:	462b      	mov	r3, r5
 8022e0a:	4620      	mov	r0, r4
 8022e0c:	4629      	mov	r1, r5
 8022e0e:	f7dd fa65 	bl	80002dc <__adddf3>
 8022e12:	4604      	mov	r4, r0
 8022e14:	460d      	mov	r5, r1
 8022e16:	e002      	b.n	8022e1e <__ieee754_exp+0x46>
 8022e18:	b10e      	cbz	r6, 8022e1e <__ieee754_exp+0x46>
 8022e1a:	2400      	movs	r4, #0
 8022e1c:	2500      	movs	r5, #0
 8022e1e:	ecbd 8b04 	vpop	{d8-d9}
 8022e22:	ec45 4b10 	vmov	d0, r4, r5
 8022e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e2a:	a38d      	add	r3, pc, #564	; (adr r3, 8023060 <__ieee754_exp+0x288>)
 8022e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e30:	ee10 0a10 	vmov	r0, s0
 8022e34:	4629      	mov	r1, r5
 8022e36:	f7dd fe97 	bl	8000b68 <__aeabi_dcmpgt>
 8022e3a:	4607      	mov	r7, r0
 8022e3c:	b130      	cbz	r0, 8022e4c <__ieee754_exp+0x74>
 8022e3e:	ecbd 8b04 	vpop	{d8-d9}
 8022e42:	2000      	movs	r0, #0
 8022e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e48:	f001 b853 	b.w	8023ef2 <__math_oflow>
 8022e4c:	a386      	add	r3, pc, #536	; (adr r3, 8023068 <__ieee754_exp+0x290>)
 8022e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e52:	4620      	mov	r0, r4
 8022e54:	4629      	mov	r1, r5
 8022e56:	f7dd fe69 	bl	8000b2c <__aeabi_dcmplt>
 8022e5a:	2800      	cmp	r0, #0
 8022e5c:	f000 808b 	beq.w	8022f76 <__ieee754_exp+0x19e>
 8022e60:	ecbd 8b04 	vpop	{d8-d9}
 8022e64:	4638      	mov	r0, r7
 8022e66:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022e6a:	f001 b839 	b.w	8023ee0 <__math_uflow>
 8022e6e:	4a94      	ldr	r2, [pc, #592]	; (80230c0 <__ieee754_exp+0x2e8>)
 8022e70:	4293      	cmp	r3, r2
 8022e72:	f240 80ac 	bls.w	8022fce <__ieee754_exp+0x1f6>
 8022e76:	4a93      	ldr	r2, [pc, #588]	; (80230c4 <__ieee754_exp+0x2ec>)
 8022e78:	4293      	cmp	r3, r2
 8022e7a:	d87c      	bhi.n	8022f76 <__ieee754_exp+0x19e>
 8022e7c:	4b92      	ldr	r3, [pc, #584]	; (80230c8 <__ieee754_exp+0x2f0>)
 8022e7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8022e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e86:	ee10 0a10 	vmov	r0, s0
 8022e8a:	4629      	mov	r1, r5
 8022e8c:	f7dd fa24 	bl	80002d8 <__aeabi_dsub>
 8022e90:	4b8e      	ldr	r3, [pc, #568]	; (80230cc <__ieee754_exp+0x2f4>)
 8022e92:	00f7      	lsls	r7, r6, #3
 8022e94:	443b      	add	r3, r7
 8022e96:	ed93 7b00 	vldr	d7, [r3]
 8022e9a:	f1c6 0a01 	rsb	sl, r6, #1
 8022e9e:	4680      	mov	r8, r0
 8022ea0:	4689      	mov	r9, r1
 8022ea2:	ebaa 0a06 	sub.w	sl, sl, r6
 8022ea6:	eeb0 8a47 	vmov.f32	s16, s14
 8022eaa:	eef0 8a67 	vmov.f32	s17, s15
 8022eae:	ec53 2b18 	vmov	r2, r3, d8
 8022eb2:	4640      	mov	r0, r8
 8022eb4:	4649      	mov	r1, r9
 8022eb6:	f7dd fa0f 	bl	80002d8 <__aeabi_dsub>
 8022eba:	4604      	mov	r4, r0
 8022ebc:	460d      	mov	r5, r1
 8022ebe:	4622      	mov	r2, r4
 8022ec0:	462b      	mov	r3, r5
 8022ec2:	4620      	mov	r0, r4
 8022ec4:	4629      	mov	r1, r5
 8022ec6:	f7dd fbbf 	bl	8000648 <__aeabi_dmul>
 8022eca:	a369      	add	r3, pc, #420	; (adr r3, 8023070 <__ieee754_exp+0x298>)
 8022ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ed0:	4606      	mov	r6, r0
 8022ed2:	460f      	mov	r7, r1
 8022ed4:	f7dd fbb8 	bl	8000648 <__aeabi_dmul>
 8022ed8:	a367      	add	r3, pc, #412	; (adr r3, 8023078 <__ieee754_exp+0x2a0>)
 8022eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ede:	f7dd f9fb 	bl	80002d8 <__aeabi_dsub>
 8022ee2:	4632      	mov	r2, r6
 8022ee4:	463b      	mov	r3, r7
 8022ee6:	f7dd fbaf 	bl	8000648 <__aeabi_dmul>
 8022eea:	a365      	add	r3, pc, #404	; (adr r3, 8023080 <__ieee754_exp+0x2a8>)
 8022eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef0:	f7dd f9f4 	bl	80002dc <__adddf3>
 8022ef4:	4632      	mov	r2, r6
 8022ef6:	463b      	mov	r3, r7
 8022ef8:	f7dd fba6 	bl	8000648 <__aeabi_dmul>
 8022efc:	a362      	add	r3, pc, #392	; (adr r3, 8023088 <__ieee754_exp+0x2b0>)
 8022efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f02:	f7dd f9e9 	bl	80002d8 <__aeabi_dsub>
 8022f06:	4632      	mov	r2, r6
 8022f08:	463b      	mov	r3, r7
 8022f0a:	f7dd fb9d 	bl	8000648 <__aeabi_dmul>
 8022f0e:	a360      	add	r3, pc, #384	; (adr r3, 8023090 <__ieee754_exp+0x2b8>)
 8022f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f14:	f7dd f9e2 	bl	80002dc <__adddf3>
 8022f18:	4632      	mov	r2, r6
 8022f1a:	463b      	mov	r3, r7
 8022f1c:	f7dd fb94 	bl	8000648 <__aeabi_dmul>
 8022f20:	4602      	mov	r2, r0
 8022f22:	460b      	mov	r3, r1
 8022f24:	4620      	mov	r0, r4
 8022f26:	4629      	mov	r1, r5
 8022f28:	f7dd f9d6 	bl	80002d8 <__aeabi_dsub>
 8022f2c:	4602      	mov	r2, r0
 8022f2e:	460b      	mov	r3, r1
 8022f30:	4606      	mov	r6, r0
 8022f32:	460f      	mov	r7, r1
 8022f34:	4620      	mov	r0, r4
 8022f36:	4629      	mov	r1, r5
 8022f38:	f7dd fb86 	bl	8000648 <__aeabi_dmul>
 8022f3c:	ec41 0b19 	vmov	d9, r0, r1
 8022f40:	f1ba 0f00 	cmp.w	sl, #0
 8022f44:	d15d      	bne.n	8023002 <__ieee754_exp+0x22a>
 8022f46:	2200      	movs	r2, #0
 8022f48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022f4c:	4630      	mov	r0, r6
 8022f4e:	4639      	mov	r1, r7
 8022f50:	f7dd f9c2 	bl	80002d8 <__aeabi_dsub>
 8022f54:	4602      	mov	r2, r0
 8022f56:	460b      	mov	r3, r1
 8022f58:	ec51 0b19 	vmov	r0, r1, d9
 8022f5c:	f7dd fc9e 	bl	800089c <__aeabi_ddiv>
 8022f60:	4622      	mov	r2, r4
 8022f62:	462b      	mov	r3, r5
 8022f64:	f7dd f9b8 	bl	80002d8 <__aeabi_dsub>
 8022f68:	4602      	mov	r2, r0
 8022f6a:	460b      	mov	r3, r1
 8022f6c:	2000      	movs	r0, #0
 8022f6e:	4958      	ldr	r1, [pc, #352]	; (80230d0 <__ieee754_exp+0x2f8>)
 8022f70:	f7dd f9b2 	bl	80002d8 <__aeabi_dsub>
 8022f74:	e74d      	b.n	8022e12 <__ieee754_exp+0x3a>
 8022f76:	4857      	ldr	r0, [pc, #348]	; (80230d4 <__ieee754_exp+0x2fc>)
 8022f78:	a347      	add	r3, pc, #284	; (adr r3, 8023098 <__ieee754_exp+0x2c0>)
 8022f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f7e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8022f82:	4629      	mov	r1, r5
 8022f84:	4620      	mov	r0, r4
 8022f86:	f7dd fb5f 	bl	8000648 <__aeabi_dmul>
 8022f8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8022f8e:	f7dd f9a5 	bl	80002dc <__adddf3>
 8022f92:	f7dd fe09 	bl	8000ba8 <__aeabi_d2iz>
 8022f96:	4682      	mov	sl, r0
 8022f98:	f7dd faec 	bl	8000574 <__aeabi_i2d>
 8022f9c:	a340      	add	r3, pc, #256	; (adr r3, 80230a0 <__ieee754_exp+0x2c8>)
 8022f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fa2:	4606      	mov	r6, r0
 8022fa4:	460f      	mov	r7, r1
 8022fa6:	f7dd fb4f 	bl	8000648 <__aeabi_dmul>
 8022faa:	4602      	mov	r2, r0
 8022fac:	460b      	mov	r3, r1
 8022fae:	4620      	mov	r0, r4
 8022fb0:	4629      	mov	r1, r5
 8022fb2:	f7dd f991 	bl	80002d8 <__aeabi_dsub>
 8022fb6:	a33c      	add	r3, pc, #240	; (adr r3, 80230a8 <__ieee754_exp+0x2d0>)
 8022fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fbc:	4680      	mov	r8, r0
 8022fbe:	4689      	mov	r9, r1
 8022fc0:	4630      	mov	r0, r6
 8022fc2:	4639      	mov	r1, r7
 8022fc4:	f7dd fb40 	bl	8000648 <__aeabi_dmul>
 8022fc8:	ec41 0b18 	vmov	d8, r0, r1
 8022fcc:	e76f      	b.n	8022eae <__ieee754_exp+0xd6>
 8022fce:	4a42      	ldr	r2, [pc, #264]	; (80230d8 <__ieee754_exp+0x300>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	d811      	bhi.n	8022ff8 <__ieee754_exp+0x220>
 8022fd4:	a336      	add	r3, pc, #216	; (adr r3, 80230b0 <__ieee754_exp+0x2d8>)
 8022fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fda:	ee10 0a10 	vmov	r0, s0
 8022fde:	4629      	mov	r1, r5
 8022fe0:	f7dd f97c 	bl	80002dc <__adddf3>
 8022fe4:	4b3a      	ldr	r3, [pc, #232]	; (80230d0 <__ieee754_exp+0x2f8>)
 8022fe6:	2200      	movs	r2, #0
 8022fe8:	f7dd fdbe 	bl	8000b68 <__aeabi_dcmpgt>
 8022fec:	b138      	cbz	r0, 8022ffe <__ieee754_exp+0x226>
 8022fee:	4b38      	ldr	r3, [pc, #224]	; (80230d0 <__ieee754_exp+0x2f8>)
 8022ff0:	2200      	movs	r2, #0
 8022ff2:	4620      	mov	r0, r4
 8022ff4:	4629      	mov	r1, r5
 8022ff6:	e70a      	b.n	8022e0e <__ieee754_exp+0x36>
 8022ff8:	f04f 0a00 	mov.w	sl, #0
 8022ffc:	e75f      	b.n	8022ebe <__ieee754_exp+0xe6>
 8022ffe:	4682      	mov	sl, r0
 8023000:	e75d      	b.n	8022ebe <__ieee754_exp+0xe6>
 8023002:	4632      	mov	r2, r6
 8023004:	463b      	mov	r3, r7
 8023006:	2000      	movs	r0, #0
 8023008:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 802300c:	f7dd f964 	bl	80002d8 <__aeabi_dsub>
 8023010:	4602      	mov	r2, r0
 8023012:	460b      	mov	r3, r1
 8023014:	ec51 0b19 	vmov	r0, r1, d9
 8023018:	f7dd fc40 	bl	800089c <__aeabi_ddiv>
 802301c:	4602      	mov	r2, r0
 802301e:	460b      	mov	r3, r1
 8023020:	ec51 0b18 	vmov	r0, r1, d8
 8023024:	f7dd f958 	bl	80002d8 <__aeabi_dsub>
 8023028:	4642      	mov	r2, r8
 802302a:	464b      	mov	r3, r9
 802302c:	f7dd f954 	bl	80002d8 <__aeabi_dsub>
 8023030:	4602      	mov	r2, r0
 8023032:	460b      	mov	r3, r1
 8023034:	2000      	movs	r0, #0
 8023036:	4926      	ldr	r1, [pc, #152]	; (80230d0 <__ieee754_exp+0x2f8>)
 8023038:	f7dd f94e 	bl	80002d8 <__aeabi_dsub>
 802303c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023040:	4592      	cmp	sl, r2
 8023042:	db02      	blt.n	802304a <__ieee754_exp+0x272>
 8023044:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023048:	e6e3      	b.n	8022e12 <__ieee754_exp+0x3a>
 802304a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 802304e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023052:	2200      	movs	r2, #0
 8023054:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023058:	f7dd faf6 	bl	8000648 <__aeabi_dmul>
 802305c:	e6d9      	b.n	8022e12 <__ieee754_exp+0x3a>
 802305e:	bf00      	nop
 8023060:	fefa39ef 	.word	0xfefa39ef
 8023064:	40862e42 	.word	0x40862e42
 8023068:	d52d3051 	.word	0xd52d3051
 802306c:	c0874910 	.word	0xc0874910
 8023070:	72bea4d0 	.word	0x72bea4d0
 8023074:	3e663769 	.word	0x3e663769
 8023078:	c5d26bf1 	.word	0xc5d26bf1
 802307c:	3ebbbd41 	.word	0x3ebbbd41
 8023080:	af25de2c 	.word	0xaf25de2c
 8023084:	3f11566a 	.word	0x3f11566a
 8023088:	16bebd93 	.word	0x16bebd93
 802308c:	3f66c16c 	.word	0x3f66c16c
 8023090:	5555553e 	.word	0x5555553e
 8023094:	3fc55555 	.word	0x3fc55555
 8023098:	652b82fe 	.word	0x652b82fe
 802309c:	3ff71547 	.word	0x3ff71547
 80230a0:	fee00000 	.word	0xfee00000
 80230a4:	3fe62e42 	.word	0x3fe62e42
 80230a8:	35793c76 	.word	0x35793c76
 80230ac:	3dea39ef 	.word	0x3dea39ef
 80230b0:	8800759c 	.word	0x8800759c
 80230b4:	7e37e43c 	.word	0x7e37e43c
 80230b8:	40862e41 	.word	0x40862e41
 80230bc:	7fefffff 	.word	0x7fefffff
 80230c0:	3fd62e42 	.word	0x3fd62e42
 80230c4:	3ff0a2b1 	.word	0x3ff0a2b1
 80230c8:	08024860 	.word	0x08024860
 80230cc:	08024870 	.word	0x08024870
 80230d0:	3ff00000 	.word	0x3ff00000
 80230d4:	08024850 	.word	0x08024850
 80230d8:	3defffff 	.word	0x3defffff
 80230dc:	00000000 	.word	0x00000000

080230e0 <__ieee754_rem_pio2>:
 80230e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230e4:	ed2d 8b02 	vpush	{d8}
 80230e8:	ec55 4b10 	vmov	r4, r5, d0
 80230ec:	4bca      	ldr	r3, [pc, #808]	; (8023418 <__ieee754_rem_pio2+0x338>)
 80230ee:	b08b      	sub	sp, #44	; 0x2c
 80230f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80230f4:	4598      	cmp	r8, r3
 80230f6:	4682      	mov	sl, r0
 80230f8:	9502      	str	r5, [sp, #8]
 80230fa:	dc08      	bgt.n	802310e <__ieee754_rem_pio2+0x2e>
 80230fc:	2200      	movs	r2, #0
 80230fe:	2300      	movs	r3, #0
 8023100:	ed80 0b00 	vstr	d0, [r0]
 8023104:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023108:	f04f 0b00 	mov.w	fp, #0
 802310c:	e028      	b.n	8023160 <__ieee754_rem_pio2+0x80>
 802310e:	4bc3      	ldr	r3, [pc, #780]	; (802341c <__ieee754_rem_pio2+0x33c>)
 8023110:	4598      	cmp	r8, r3
 8023112:	dc78      	bgt.n	8023206 <__ieee754_rem_pio2+0x126>
 8023114:	9b02      	ldr	r3, [sp, #8]
 8023116:	4ec2      	ldr	r6, [pc, #776]	; (8023420 <__ieee754_rem_pio2+0x340>)
 8023118:	2b00      	cmp	r3, #0
 802311a:	ee10 0a10 	vmov	r0, s0
 802311e:	a3b0      	add	r3, pc, #704	; (adr r3, 80233e0 <__ieee754_rem_pio2+0x300>)
 8023120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023124:	4629      	mov	r1, r5
 8023126:	dd39      	ble.n	802319c <__ieee754_rem_pio2+0xbc>
 8023128:	f7dd f8d6 	bl	80002d8 <__aeabi_dsub>
 802312c:	45b0      	cmp	r8, r6
 802312e:	4604      	mov	r4, r0
 8023130:	460d      	mov	r5, r1
 8023132:	d01b      	beq.n	802316c <__ieee754_rem_pio2+0x8c>
 8023134:	a3ac      	add	r3, pc, #688	; (adr r3, 80233e8 <__ieee754_rem_pio2+0x308>)
 8023136:	e9d3 2300 	ldrd	r2, r3, [r3]
 802313a:	f7dd f8cd 	bl	80002d8 <__aeabi_dsub>
 802313e:	4602      	mov	r2, r0
 8023140:	460b      	mov	r3, r1
 8023142:	e9ca 2300 	strd	r2, r3, [sl]
 8023146:	4620      	mov	r0, r4
 8023148:	4629      	mov	r1, r5
 802314a:	f7dd f8c5 	bl	80002d8 <__aeabi_dsub>
 802314e:	a3a6      	add	r3, pc, #664	; (adr r3, 80233e8 <__ieee754_rem_pio2+0x308>)
 8023150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023154:	f7dd f8c0 	bl	80002d8 <__aeabi_dsub>
 8023158:	e9ca 0102 	strd	r0, r1, [sl, #8]
 802315c:	f04f 0b01 	mov.w	fp, #1
 8023160:	4658      	mov	r0, fp
 8023162:	b00b      	add	sp, #44	; 0x2c
 8023164:	ecbd 8b02 	vpop	{d8}
 8023168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802316c:	a3a0      	add	r3, pc, #640	; (adr r3, 80233f0 <__ieee754_rem_pio2+0x310>)
 802316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023172:	f7dd f8b1 	bl	80002d8 <__aeabi_dsub>
 8023176:	a3a0      	add	r3, pc, #640	; (adr r3, 80233f8 <__ieee754_rem_pio2+0x318>)
 8023178:	e9d3 2300 	ldrd	r2, r3, [r3]
 802317c:	4604      	mov	r4, r0
 802317e:	460d      	mov	r5, r1
 8023180:	f7dd f8aa 	bl	80002d8 <__aeabi_dsub>
 8023184:	4602      	mov	r2, r0
 8023186:	460b      	mov	r3, r1
 8023188:	e9ca 2300 	strd	r2, r3, [sl]
 802318c:	4620      	mov	r0, r4
 802318e:	4629      	mov	r1, r5
 8023190:	f7dd f8a2 	bl	80002d8 <__aeabi_dsub>
 8023194:	a398      	add	r3, pc, #608	; (adr r3, 80233f8 <__ieee754_rem_pio2+0x318>)
 8023196:	e9d3 2300 	ldrd	r2, r3, [r3]
 802319a:	e7db      	b.n	8023154 <__ieee754_rem_pio2+0x74>
 802319c:	f7dd f89e 	bl	80002dc <__adddf3>
 80231a0:	45b0      	cmp	r8, r6
 80231a2:	4604      	mov	r4, r0
 80231a4:	460d      	mov	r5, r1
 80231a6:	d016      	beq.n	80231d6 <__ieee754_rem_pio2+0xf6>
 80231a8:	a38f      	add	r3, pc, #572	; (adr r3, 80233e8 <__ieee754_rem_pio2+0x308>)
 80231aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231ae:	f7dd f895 	bl	80002dc <__adddf3>
 80231b2:	4602      	mov	r2, r0
 80231b4:	460b      	mov	r3, r1
 80231b6:	e9ca 2300 	strd	r2, r3, [sl]
 80231ba:	4620      	mov	r0, r4
 80231bc:	4629      	mov	r1, r5
 80231be:	f7dd f88b 	bl	80002d8 <__aeabi_dsub>
 80231c2:	a389      	add	r3, pc, #548	; (adr r3, 80233e8 <__ieee754_rem_pio2+0x308>)
 80231c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231c8:	f7dd f888 	bl	80002dc <__adddf3>
 80231cc:	f04f 3bff 	mov.w	fp, #4294967295
 80231d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80231d4:	e7c4      	b.n	8023160 <__ieee754_rem_pio2+0x80>
 80231d6:	a386      	add	r3, pc, #536	; (adr r3, 80233f0 <__ieee754_rem_pio2+0x310>)
 80231d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231dc:	f7dd f87e 	bl	80002dc <__adddf3>
 80231e0:	a385      	add	r3, pc, #532	; (adr r3, 80233f8 <__ieee754_rem_pio2+0x318>)
 80231e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80231e6:	4604      	mov	r4, r0
 80231e8:	460d      	mov	r5, r1
 80231ea:	f7dd f877 	bl	80002dc <__adddf3>
 80231ee:	4602      	mov	r2, r0
 80231f0:	460b      	mov	r3, r1
 80231f2:	e9ca 2300 	strd	r2, r3, [sl]
 80231f6:	4620      	mov	r0, r4
 80231f8:	4629      	mov	r1, r5
 80231fa:	f7dd f86d 	bl	80002d8 <__aeabi_dsub>
 80231fe:	a37e      	add	r3, pc, #504	; (adr r3, 80233f8 <__ieee754_rem_pio2+0x318>)
 8023200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023204:	e7e0      	b.n	80231c8 <__ieee754_rem_pio2+0xe8>
 8023206:	4b87      	ldr	r3, [pc, #540]	; (8023424 <__ieee754_rem_pio2+0x344>)
 8023208:	4598      	cmp	r8, r3
 802320a:	f300 80d9 	bgt.w	80233c0 <__ieee754_rem_pio2+0x2e0>
 802320e:	f000 fe79 	bl	8023f04 <fabs>
 8023212:	ec55 4b10 	vmov	r4, r5, d0
 8023216:	ee10 0a10 	vmov	r0, s0
 802321a:	a379      	add	r3, pc, #484	; (adr r3, 8023400 <__ieee754_rem_pio2+0x320>)
 802321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023220:	4629      	mov	r1, r5
 8023222:	f7dd fa11 	bl	8000648 <__aeabi_dmul>
 8023226:	4b80      	ldr	r3, [pc, #512]	; (8023428 <__ieee754_rem_pio2+0x348>)
 8023228:	2200      	movs	r2, #0
 802322a:	f7dd f857 	bl	80002dc <__adddf3>
 802322e:	f7dd fcbb 	bl	8000ba8 <__aeabi_d2iz>
 8023232:	4683      	mov	fp, r0
 8023234:	f7dd f99e 	bl	8000574 <__aeabi_i2d>
 8023238:	4602      	mov	r2, r0
 802323a:	460b      	mov	r3, r1
 802323c:	ec43 2b18 	vmov	d8, r2, r3
 8023240:	a367      	add	r3, pc, #412	; (adr r3, 80233e0 <__ieee754_rem_pio2+0x300>)
 8023242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023246:	f7dd f9ff 	bl	8000648 <__aeabi_dmul>
 802324a:	4602      	mov	r2, r0
 802324c:	460b      	mov	r3, r1
 802324e:	4620      	mov	r0, r4
 8023250:	4629      	mov	r1, r5
 8023252:	f7dd f841 	bl	80002d8 <__aeabi_dsub>
 8023256:	a364      	add	r3, pc, #400	; (adr r3, 80233e8 <__ieee754_rem_pio2+0x308>)
 8023258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802325c:	4606      	mov	r6, r0
 802325e:	460f      	mov	r7, r1
 8023260:	ec51 0b18 	vmov	r0, r1, d8
 8023264:	f7dd f9f0 	bl	8000648 <__aeabi_dmul>
 8023268:	f1bb 0f1f 	cmp.w	fp, #31
 802326c:	4604      	mov	r4, r0
 802326e:	460d      	mov	r5, r1
 8023270:	dc0d      	bgt.n	802328e <__ieee754_rem_pio2+0x1ae>
 8023272:	4b6e      	ldr	r3, [pc, #440]	; (802342c <__ieee754_rem_pio2+0x34c>)
 8023274:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802327c:	4543      	cmp	r3, r8
 802327e:	d006      	beq.n	802328e <__ieee754_rem_pio2+0x1ae>
 8023280:	4622      	mov	r2, r4
 8023282:	462b      	mov	r3, r5
 8023284:	4630      	mov	r0, r6
 8023286:	4639      	mov	r1, r7
 8023288:	f7dd f826 	bl	80002d8 <__aeabi_dsub>
 802328c:	e00f      	b.n	80232ae <__ieee754_rem_pio2+0x1ce>
 802328e:	462b      	mov	r3, r5
 8023290:	4622      	mov	r2, r4
 8023292:	4630      	mov	r0, r6
 8023294:	4639      	mov	r1, r7
 8023296:	f7dd f81f 	bl	80002d8 <__aeabi_dsub>
 802329a:	ea4f 5328 	mov.w	r3, r8, asr #20
 802329e:	9303      	str	r3, [sp, #12]
 80232a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80232a4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80232a8:	f1b8 0f10 	cmp.w	r8, #16
 80232ac:	dc02      	bgt.n	80232b4 <__ieee754_rem_pio2+0x1d4>
 80232ae:	e9ca 0100 	strd	r0, r1, [sl]
 80232b2:	e039      	b.n	8023328 <__ieee754_rem_pio2+0x248>
 80232b4:	a34e      	add	r3, pc, #312	; (adr r3, 80233f0 <__ieee754_rem_pio2+0x310>)
 80232b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232ba:	ec51 0b18 	vmov	r0, r1, d8
 80232be:	f7dd f9c3 	bl	8000648 <__aeabi_dmul>
 80232c2:	4604      	mov	r4, r0
 80232c4:	460d      	mov	r5, r1
 80232c6:	4602      	mov	r2, r0
 80232c8:	460b      	mov	r3, r1
 80232ca:	4630      	mov	r0, r6
 80232cc:	4639      	mov	r1, r7
 80232ce:	f7dd f803 	bl	80002d8 <__aeabi_dsub>
 80232d2:	4602      	mov	r2, r0
 80232d4:	460b      	mov	r3, r1
 80232d6:	4680      	mov	r8, r0
 80232d8:	4689      	mov	r9, r1
 80232da:	4630      	mov	r0, r6
 80232dc:	4639      	mov	r1, r7
 80232de:	f7dc fffb 	bl	80002d8 <__aeabi_dsub>
 80232e2:	4622      	mov	r2, r4
 80232e4:	462b      	mov	r3, r5
 80232e6:	f7dc fff7 	bl	80002d8 <__aeabi_dsub>
 80232ea:	a343      	add	r3, pc, #268	; (adr r3, 80233f8 <__ieee754_rem_pio2+0x318>)
 80232ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232f0:	4604      	mov	r4, r0
 80232f2:	460d      	mov	r5, r1
 80232f4:	ec51 0b18 	vmov	r0, r1, d8
 80232f8:	f7dd f9a6 	bl	8000648 <__aeabi_dmul>
 80232fc:	4622      	mov	r2, r4
 80232fe:	462b      	mov	r3, r5
 8023300:	f7dc ffea 	bl	80002d8 <__aeabi_dsub>
 8023304:	4602      	mov	r2, r0
 8023306:	460b      	mov	r3, r1
 8023308:	4604      	mov	r4, r0
 802330a:	460d      	mov	r5, r1
 802330c:	4640      	mov	r0, r8
 802330e:	4649      	mov	r1, r9
 8023310:	f7dc ffe2 	bl	80002d8 <__aeabi_dsub>
 8023314:	9a03      	ldr	r2, [sp, #12]
 8023316:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802331a:	1ad3      	subs	r3, r2, r3
 802331c:	2b31      	cmp	r3, #49	; 0x31
 802331e:	dc24      	bgt.n	802336a <__ieee754_rem_pio2+0x28a>
 8023320:	e9ca 0100 	strd	r0, r1, [sl]
 8023324:	4646      	mov	r6, r8
 8023326:	464f      	mov	r7, r9
 8023328:	e9da 8900 	ldrd	r8, r9, [sl]
 802332c:	4630      	mov	r0, r6
 802332e:	4642      	mov	r2, r8
 8023330:	464b      	mov	r3, r9
 8023332:	4639      	mov	r1, r7
 8023334:	f7dc ffd0 	bl	80002d8 <__aeabi_dsub>
 8023338:	462b      	mov	r3, r5
 802333a:	4622      	mov	r2, r4
 802333c:	f7dc ffcc 	bl	80002d8 <__aeabi_dsub>
 8023340:	9b02      	ldr	r3, [sp, #8]
 8023342:	2b00      	cmp	r3, #0
 8023344:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023348:	f6bf af0a 	bge.w	8023160 <__ieee754_rem_pio2+0x80>
 802334c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023350:	f8ca 3004 	str.w	r3, [sl, #4]
 8023354:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023358:	f8ca 8000 	str.w	r8, [sl]
 802335c:	f8ca 0008 	str.w	r0, [sl, #8]
 8023360:	f8ca 300c 	str.w	r3, [sl, #12]
 8023364:	f1cb 0b00 	rsb	fp, fp, #0
 8023368:	e6fa      	b.n	8023160 <__ieee754_rem_pio2+0x80>
 802336a:	a327      	add	r3, pc, #156	; (adr r3, 8023408 <__ieee754_rem_pio2+0x328>)
 802336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023370:	ec51 0b18 	vmov	r0, r1, d8
 8023374:	f7dd f968 	bl	8000648 <__aeabi_dmul>
 8023378:	4604      	mov	r4, r0
 802337a:	460d      	mov	r5, r1
 802337c:	4602      	mov	r2, r0
 802337e:	460b      	mov	r3, r1
 8023380:	4640      	mov	r0, r8
 8023382:	4649      	mov	r1, r9
 8023384:	f7dc ffa8 	bl	80002d8 <__aeabi_dsub>
 8023388:	4602      	mov	r2, r0
 802338a:	460b      	mov	r3, r1
 802338c:	4606      	mov	r6, r0
 802338e:	460f      	mov	r7, r1
 8023390:	4640      	mov	r0, r8
 8023392:	4649      	mov	r1, r9
 8023394:	f7dc ffa0 	bl	80002d8 <__aeabi_dsub>
 8023398:	4622      	mov	r2, r4
 802339a:	462b      	mov	r3, r5
 802339c:	f7dc ff9c 	bl	80002d8 <__aeabi_dsub>
 80233a0:	a31b      	add	r3, pc, #108	; (adr r3, 8023410 <__ieee754_rem_pio2+0x330>)
 80233a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233a6:	4604      	mov	r4, r0
 80233a8:	460d      	mov	r5, r1
 80233aa:	ec51 0b18 	vmov	r0, r1, d8
 80233ae:	f7dd f94b 	bl	8000648 <__aeabi_dmul>
 80233b2:	4622      	mov	r2, r4
 80233b4:	462b      	mov	r3, r5
 80233b6:	f7dc ff8f 	bl	80002d8 <__aeabi_dsub>
 80233ba:	4604      	mov	r4, r0
 80233bc:	460d      	mov	r5, r1
 80233be:	e75f      	b.n	8023280 <__ieee754_rem_pio2+0x1a0>
 80233c0:	4b1b      	ldr	r3, [pc, #108]	; (8023430 <__ieee754_rem_pio2+0x350>)
 80233c2:	4598      	cmp	r8, r3
 80233c4:	dd36      	ble.n	8023434 <__ieee754_rem_pio2+0x354>
 80233c6:	ee10 2a10 	vmov	r2, s0
 80233ca:	462b      	mov	r3, r5
 80233cc:	4620      	mov	r0, r4
 80233ce:	4629      	mov	r1, r5
 80233d0:	f7dc ff82 	bl	80002d8 <__aeabi_dsub>
 80233d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80233d8:	e9ca 0100 	strd	r0, r1, [sl]
 80233dc:	e694      	b.n	8023108 <__ieee754_rem_pio2+0x28>
 80233de:	bf00      	nop
 80233e0:	54400000 	.word	0x54400000
 80233e4:	3ff921fb 	.word	0x3ff921fb
 80233e8:	1a626331 	.word	0x1a626331
 80233ec:	3dd0b461 	.word	0x3dd0b461
 80233f0:	1a600000 	.word	0x1a600000
 80233f4:	3dd0b461 	.word	0x3dd0b461
 80233f8:	2e037073 	.word	0x2e037073
 80233fc:	3ba3198a 	.word	0x3ba3198a
 8023400:	6dc9c883 	.word	0x6dc9c883
 8023404:	3fe45f30 	.word	0x3fe45f30
 8023408:	2e000000 	.word	0x2e000000
 802340c:	3ba3198a 	.word	0x3ba3198a
 8023410:	252049c1 	.word	0x252049c1
 8023414:	397b839a 	.word	0x397b839a
 8023418:	3fe921fb 	.word	0x3fe921fb
 802341c:	4002d97b 	.word	0x4002d97b
 8023420:	3ff921fb 	.word	0x3ff921fb
 8023424:	413921fb 	.word	0x413921fb
 8023428:	3fe00000 	.word	0x3fe00000
 802342c:	08024880 	.word	0x08024880
 8023430:	7fefffff 	.word	0x7fefffff
 8023434:	ea4f 5428 	mov.w	r4, r8, asr #20
 8023438:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 802343c:	ee10 0a10 	vmov	r0, s0
 8023440:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8023444:	ee10 6a10 	vmov	r6, s0
 8023448:	460f      	mov	r7, r1
 802344a:	f7dd fbad 	bl	8000ba8 <__aeabi_d2iz>
 802344e:	f7dd f891 	bl	8000574 <__aeabi_i2d>
 8023452:	4602      	mov	r2, r0
 8023454:	460b      	mov	r3, r1
 8023456:	4630      	mov	r0, r6
 8023458:	4639      	mov	r1, r7
 802345a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802345e:	f7dc ff3b 	bl	80002d8 <__aeabi_dsub>
 8023462:	4b23      	ldr	r3, [pc, #140]	; (80234f0 <__ieee754_rem_pio2+0x410>)
 8023464:	2200      	movs	r2, #0
 8023466:	f7dd f8ef 	bl	8000648 <__aeabi_dmul>
 802346a:	460f      	mov	r7, r1
 802346c:	4606      	mov	r6, r0
 802346e:	f7dd fb9b 	bl	8000ba8 <__aeabi_d2iz>
 8023472:	f7dd f87f 	bl	8000574 <__aeabi_i2d>
 8023476:	4602      	mov	r2, r0
 8023478:	460b      	mov	r3, r1
 802347a:	4630      	mov	r0, r6
 802347c:	4639      	mov	r1, r7
 802347e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023482:	f7dc ff29 	bl	80002d8 <__aeabi_dsub>
 8023486:	4b1a      	ldr	r3, [pc, #104]	; (80234f0 <__ieee754_rem_pio2+0x410>)
 8023488:	2200      	movs	r2, #0
 802348a:	f7dd f8dd 	bl	8000648 <__aeabi_dmul>
 802348e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023492:	ad04      	add	r5, sp, #16
 8023494:	f04f 0803 	mov.w	r8, #3
 8023498:	46a9      	mov	r9, r5
 802349a:	2600      	movs	r6, #0
 802349c:	2700      	movs	r7, #0
 802349e:	4632      	mov	r2, r6
 80234a0:	463b      	mov	r3, r7
 80234a2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80234a6:	46c3      	mov	fp, r8
 80234a8:	3d08      	subs	r5, #8
 80234aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80234ae:	f7dd fb33 	bl	8000b18 <__aeabi_dcmpeq>
 80234b2:	2800      	cmp	r0, #0
 80234b4:	d1f3      	bne.n	802349e <__ieee754_rem_pio2+0x3be>
 80234b6:	4b0f      	ldr	r3, [pc, #60]	; (80234f4 <__ieee754_rem_pio2+0x414>)
 80234b8:	9301      	str	r3, [sp, #4]
 80234ba:	2302      	movs	r3, #2
 80234bc:	9300      	str	r3, [sp, #0]
 80234be:	4622      	mov	r2, r4
 80234c0:	465b      	mov	r3, fp
 80234c2:	4651      	mov	r1, sl
 80234c4:	4648      	mov	r0, r9
 80234c6:	f000 f8df 	bl	8023688 <__kernel_rem_pio2>
 80234ca:	9b02      	ldr	r3, [sp, #8]
 80234cc:	2b00      	cmp	r3, #0
 80234ce:	4683      	mov	fp, r0
 80234d0:	f6bf ae46 	bge.w	8023160 <__ieee754_rem_pio2+0x80>
 80234d4:	e9da 2100 	ldrd	r2, r1, [sl]
 80234d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80234dc:	e9ca 2300 	strd	r2, r3, [sl]
 80234e0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80234e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80234e8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80234ec:	e73a      	b.n	8023364 <__ieee754_rem_pio2+0x284>
 80234ee:	bf00      	nop
 80234f0:	41700000 	.word	0x41700000
 80234f4:	08024900 	.word	0x08024900

080234f8 <__kernel_cos>:
 80234f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234fc:	ec57 6b10 	vmov	r6, r7, d0
 8023500:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8023504:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8023508:	ed8d 1b00 	vstr	d1, [sp]
 802350c:	da07      	bge.n	802351e <__kernel_cos+0x26>
 802350e:	ee10 0a10 	vmov	r0, s0
 8023512:	4639      	mov	r1, r7
 8023514:	f7dd fb48 	bl	8000ba8 <__aeabi_d2iz>
 8023518:	2800      	cmp	r0, #0
 802351a:	f000 8088 	beq.w	802362e <__kernel_cos+0x136>
 802351e:	4632      	mov	r2, r6
 8023520:	463b      	mov	r3, r7
 8023522:	4630      	mov	r0, r6
 8023524:	4639      	mov	r1, r7
 8023526:	f7dd f88f 	bl	8000648 <__aeabi_dmul>
 802352a:	4b51      	ldr	r3, [pc, #324]	; (8023670 <__kernel_cos+0x178>)
 802352c:	2200      	movs	r2, #0
 802352e:	4604      	mov	r4, r0
 8023530:	460d      	mov	r5, r1
 8023532:	f7dd f889 	bl	8000648 <__aeabi_dmul>
 8023536:	a340      	add	r3, pc, #256	; (adr r3, 8023638 <__kernel_cos+0x140>)
 8023538:	e9d3 2300 	ldrd	r2, r3, [r3]
 802353c:	4682      	mov	sl, r0
 802353e:	468b      	mov	fp, r1
 8023540:	4620      	mov	r0, r4
 8023542:	4629      	mov	r1, r5
 8023544:	f7dd f880 	bl	8000648 <__aeabi_dmul>
 8023548:	a33d      	add	r3, pc, #244	; (adr r3, 8023640 <__kernel_cos+0x148>)
 802354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802354e:	f7dc fec5 	bl	80002dc <__adddf3>
 8023552:	4622      	mov	r2, r4
 8023554:	462b      	mov	r3, r5
 8023556:	f7dd f877 	bl	8000648 <__aeabi_dmul>
 802355a:	a33b      	add	r3, pc, #236	; (adr r3, 8023648 <__kernel_cos+0x150>)
 802355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023560:	f7dc feba 	bl	80002d8 <__aeabi_dsub>
 8023564:	4622      	mov	r2, r4
 8023566:	462b      	mov	r3, r5
 8023568:	f7dd f86e 	bl	8000648 <__aeabi_dmul>
 802356c:	a338      	add	r3, pc, #224	; (adr r3, 8023650 <__kernel_cos+0x158>)
 802356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023572:	f7dc feb3 	bl	80002dc <__adddf3>
 8023576:	4622      	mov	r2, r4
 8023578:	462b      	mov	r3, r5
 802357a:	f7dd f865 	bl	8000648 <__aeabi_dmul>
 802357e:	a336      	add	r3, pc, #216	; (adr r3, 8023658 <__kernel_cos+0x160>)
 8023580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023584:	f7dc fea8 	bl	80002d8 <__aeabi_dsub>
 8023588:	4622      	mov	r2, r4
 802358a:	462b      	mov	r3, r5
 802358c:	f7dd f85c 	bl	8000648 <__aeabi_dmul>
 8023590:	a333      	add	r3, pc, #204	; (adr r3, 8023660 <__kernel_cos+0x168>)
 8023592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023596:	f7dc fea1 	bl	80002dc <__adddf3>
 802359a:	4622      	mov	r2, r4
 802359c:	462b      	mov	r3, r5
 802359e:	f7dd f853 	bl	8000648 <__aeabi_dmul>
 80235a2:	4622      	mov	r2, r4
 80235a4:	462b      	mov	r3, r5
 80235a6:	f7dd f84f 	bl	8000648 <__aeabi_dmul>
 80235aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80235ae:	4604      	mov	r4, r0
 80235b0:	460d      	mov	r5, r1
 80235b2:	4630      	mov	r0, r6
 80235b4:	4639      	mov	r1, r7
 80235b6:	f7dd f847 	bl	8000648 <__aeabi_dmul>
 80235ba:	460b      	mov	r3, r1
 80235bc:	4602      	mov	r2, r0
 80235be:	4629      	mov	r1, r5
 80235c0:	4620      	mov	r0, r4
 80235c2:	f7dc fe89 	bl	80002d8 <__aeabi_dsub>
 80235c6:	4b2b      	ldr	r3, [pc, #172]	; (8023674 <__kernel_cos+0x17c>)
 80235c8:	4598      	cmp	r8, r3
 80235ca:	4606      	mov	r6, r0
 80235cc:	460f      	mov	r7, r1
 80235ce:	dc10      	bgt.n	80235f2 <__kernel_cos+0xfa>
 80235d0:	4602      	mov	r2, r0
 80235d2:	460b      	mov	r3, r1
 80235d4:	4650      	mov	r0, sl
 80235d6:	4659      	mov	r1, fp
 80235d8:	f7dc fe7e 	bl	80002d8 <__aeabi_dsub>
 80235dc:	460b      	mov	r3, r1
 80235de:	4926      	ldr	r1, [pc, #152]	; (8023678 <__kernel_cos+0x180>)
 80235e0:	4602      	mov	r2, r0
 80235e2:	2000      	movs	r0, #0
 80235e4:	f7dc fe78 	bl	80002d8 <__aeabi_dsub>
 80235e8:	ec41 0b10 	vmov	d0, r0, r1
 80235ec:	b003      	add	sp, #12
 80235ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235f2:	4b22      	ldr	r3, [pc, #136]	; (802367c <__kernel_cos+0x184>)
 80235f4:	4920      	ldr	r1, [pc, #128]	; (8023678 <__kernel_cos+0x180>)
 80235f6:	4598      	cmp	r8, r3
 80235f8:	bfcc      	ite	gt
 80235fa:	4d21      	ldrgt	r5, [pc, #132]	; (8023680 <__kernel_cos+0x188>)
 80235fc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8023600:	2400      	movs	r4, #0
 8023602:	4622      	mov	r2, r4
 8023604:	462b      	mov	r3, r5
 8023606:	2000      	movs	r0, #0
 8023608:	f7dc fe66 	bl	80002d8 <__aeabi_dsub>
 802360c:	4622      	mov	r2, r4
 802360e:	4680      	mov	r8, r0
 8023610:	4689      	mov	r9, r1
 8023612:	462b      	mov	r3, r5
 8023614:	4650      	mov	r0, sl
 8023616:	4659      	mov	r1, fp
 8023618:	f7dc fe5e 	bl	80002d8 <__aeabi_dsub>
 802361c:	4632      	mov	r2, r6
 802361e:	463b      	mov	r3, r7
 8023620:	f7dc fe5a 	bl	80002d8 <__aeabi_dsub>
 8023624:	4602      	mov	r2, r0
 8023626:	460b      	mov	r3, r1
 8023628:	4640      	mov	r0, r8
 802362a:	4649      	mov	r1, r9
 802362c:	e7da      	b.n	80235e4 <__kernel_cos+0xec>
 802362e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8023668 <__kernel_cos+0x170>
 8023632:	e7db      	b.n	80235ec <__kernel_cos+0xf4>
 8023634:	f3af 8000 	nop.w
 8023638:	be8838d4 	.word	0xbe8838d4
 802363c:	bda8fae9 	.word	0xbda8fae9
 8023640:	bdb4b1c4 	.word	0xbdb4b1c4
 8023644:	3e21ee9e 	.word	0x3e21ee9e
 8023648:	809c52ad 	.word	0x809c52ad
 802364c:	3e927e4f 	.word	0x3e927e4f
 8023650:	19cb1590 	.word	0x19cb1590
 8023654:	3efa01a0 	.word	0x3efa01a0
 8023658:	16c15177 	.word	0x16c15177
 802365c:	3f56c16c 	.word	0x3f56c16c
 8023660:	5555554c 	.word	0x5555554c
 8023664:	3fa55555 	.word	0x3fa55555
 8023668:	00000000 	.word	0x00000000
 802366c:	3ff00000 	.word	0x3ff00000
 8023670:	3fe00000 	.word	0x3fe00000
 8023674:	3fd33332 	.word	0x3fd33332
 8023678:	3ff00000 	.word	0x3ff00000
 802367c:	3fe90000 	.word	0x3fe90000
 8023680:	3fd20000 	.word	0x3fd20000
 8023684:	00000000 	.word	0x00000000

08023688 <__kernel_rem_pio2>:
 8023688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802368c:	ed2d 8b02 	vpush	{d8}
 8023690:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8023694:	f112 0f14 	cmn.w	r2, #20
 8023698:	9308      	str	r3, [sp, #32]
 802369a:	9101      	str	r1, [sp, #4]
 802369c:	4bc4      	ldr	r3, [pc, #784]	; (80239b0 <__kernel_rem_pio2+0x328>)
 802369e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80236a0:	900b      	str	r0, [sp, #44]	; 0x2c
 80236a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80236a6:	9302      	str	r3, [sp, #8]
 80236a8:	9b08      	ldr	r3, [sp, #32]
 80236aa:	f103 33ff 	add.w	r3, r3, #4294967295
 80236ae:	bfa8      	it	ge
 80236b0:	1ed4      	subge	r4, r2, #3
 80236b2:	9306      	str	r3, [sp, #24]
 80236b4:	bfb2      	itee	lt
 80236b6:	2400      	movlt	r4, #0
 80236b8:	2318      	movge	r3, #24
 80236ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80236be:	f06f 0317 	mvn.w	r3, #23
 80236c2:	fb04 3303 	mla	r3, r4, r3, r3
 80236c6:	eb03 0a02 	add.w	sl, r3, r2
 80236ca:	9b02      	ldr	r3, [sp, #8]
 80236cc:	9a06      	ldr	r2, [sp, #24]
 80236ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80239a0 <__kernel_rem_pio2+0x318>
 80236d2:	eb03 0802 	add.w	r8, r3, r2
 80236d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80236d8:	1aa7      	subs	r7, r4, r2
 80236da:	ae22      	add	r6, sp, #136	; 0x88
 80236dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80236e0:	2500      	movs	r5, #0
 80236e2:	4545      	cmp	r5, r8
 80236e4:	dd13      	ble.n	802370e <__kernel_rem_pio2+0x86>
 80236e6:	9b08      	ldr	r3, [sp, #32]
 80236e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80239a0 <__kernel_rem_pio2+0x318>
 80236ec:	aa22      	add	r2, sp, #136	; 0x88
 80236ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80236f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80236f6:	f04f 0800 	mov.w	r8, #0
 80236fa:	9b02      	ldr	r3, [sp, #8]
 80236fc:	4598      	cmp	r8, r3
 80236fe:	dc2f      	bgt.n	8023760 <__kernel_rem_pio2+0xd8>
 8023700:	ed8d 8b04 	vstr	d8, [sp, #16]
 8023704:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8023708:	462f      	mov	r7, r5
 802370a:	2600      	movs	r6, #0
 802370c:	e01b      	b.n	8023746 <__kernel_rem_pio2+0xbe>
 802370e:	42ef      	cmn	r7, r5
 8023710:	d407      	bmi.n	8023722 <__kernel_rem_pio2+0x9a>
 8023712:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8023716:	f7dc ff2d 	bl	8000574 <__aeabi_i2d>
 802371a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802371e:	3501      	adds	r5, #1
 8023720:	e7df      	b.n	80236e2 <__kernel_rem_pio2+0x5a>
 8023722:	ec51 0b18 	vmov	r0, r1, d8
 8023726:	e7f8      	b.n	802371a <__kernel_rem_pio2+0x92>
 8023728:	e9d7 2300 	ldrd	r2, r3, [r7]
 802372c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8023730:	f7dc ff8a 	bl	8000648 <__aeabi_dmul>
 8023734:	4602      	mov	r2, r0
 8023736:	460b      	mov	r3, r1
 8023738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802373c:	f7dc fdce 	bl	80002dc <__adddf3>
 8023740:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023744:	3601      	adds	r6, #1
 8023746:	9b06      	ldr	r3, [sp, #24]
 8023748:	429e      	cmp	r6, r3
 802374a:	f1a7 0708 	sub.w	r7, r7, #8
 802374e:	ddeb      	ble.n	8023728 <__kernel_rem_pio2+0xa0>
 8023750:	ed9d 7b04 	vldr	d7, [sp, #16]
 8023754:	f108 0801 	add.w	r8, r8, #1
 8023758:	ecab 7b02 	vstmia	fp!, {d7}
 802375c:	3508      	adds	r5, #8
 802375e:	e7cc      	b.n	80236fa <__kernel_rem_pio2+0x72>
 8023760:	9b02      	ldr	r3, [sp, #8]
 8023762:	aa0e      	add	r2, sp, #56	; 0x38
 8023764:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023768:	930d      	str	r3, [sp, #52]	; 0x34
 802376a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 802376c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8023770:	9c02      	ldr	r4, [sp, #8]
 8023772:	930c      	str	r3, [sp, #48]	; 0x30
 8023774:	00e3      	lsls	r3, r4, #3
 8023776:	930a      	str	r3, [sp, #40]	; 0x28
 8023778:	ab9a      	add	r3, sp, #616	; 0x268
 802377a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802377e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8023782:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8023786:	ab72      	add	r3, sp, #456	; 0x1c8
 8023788:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 802378c:	46c3      	mov	fp, r8
 802378e:	46a1      	mov	r9, r4
 8023790:	f1b9 0f00 	cmp.w	r9, #0
 8023794:	f1a5 0508 	sub.w	r5, r5, #8
 8023798:	dc77      	bgt.n	802388a <__kernel_rem_pio2+0x202>
 802379a:	ec47 6b10 	vmov	d0, r6, r7
 802379e:	4650      	mov	r0, sl
 80237a0:	f000 fc46 	bl	8024030 <scalbn>
 80237a4:	ec57 6b10 	vmov	r6, r7, d0
 80237a8:	2200      	movs	r2, #0
 80237aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80237ae:	ee10 0a10 	vmov	r0, s0
 80237b2:	4639      	mov	r1, r7
 80237b4:	f7dc ff48 	bl	8000648 <__aeabi_dmul>
 80237b8:	ec41 0b10 	vmov	d0, r0, r1
 80237bc:	f000 fbb8 	bl	8023f30 <floor>
 80237c0:	4b7c      	ldr	r3, [pc, #496]	; (80239b4 <__kernel_rem_pio2+0x32c>)
 80237c2:	ec51 0b10 	vmov	r0, r1, d0
 80237c6:	2200      	movs	r2, #0
 80237c8:	f7dc ff3e 	bl	8000648 <__aeabi_dmul>
 80237cc:	4602      	mov	r2, r0
 80237ce:	460b      	mov	r3, r1
 80237d0:	4630      	mov	r0, r6
 80237d2:	4639      	mov	r1, r7
 80237d4:	f7dc fd80 	bl	80002d8 <__aeabi_dsub>
 80237d8:	460f      	mov	r7, r1
 80237da:	4606      	mov	r6, r0
 80237dc:	f7dd f9e4 	bl	8000ba8 <__aeabi_d2iz>
 80237e0:	9004      	str	r0, [sp, #16]
 80237e2:	f7dc fec7 	bl	8000574 <__aeabi_i2d>
 80237e6:	4602      	mov	r2, r0
 80237e8:	460b      	mov	r3, r1
 80237ea:	4630      	mov	r0, r6
 80237ec:	4639      	mov	r1, r7
 80237ee:	f7dc fd73 	bl	80002d8 <__aeabi_dsub>
 80237f2:	f1ba 0f00 	cmp.w	sl, #0
 80237f6:	4606      	mov	r6, r0
 80237f8:	460f      	mov	r7, r1
 80237fa:	dd6d      	ble.n	80238d8 <__kernel_rem_pio2+0x250>
 80237fc:	1e62      	subs	r2, r4, #1
 80237fe:	ab0e      	add	r3, sp, #56	; 0x38
 8023800:	9d04      	ldr	r5, [sp, #16]
 8023802:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8023806:	f1ca 0118 	rsb	r1, sl, #24
 802380a:	fa40 f301 	asr.w	r3, r0, r1
 802380e:	441d      	add	r5, r3
 8023810:	408b      	lsls	r3, r1
 8023812:	1ac0      	subs	r0, r0, r3
 8023814:	ab0e      	add	r3, sp, #56	; 0x38
 8023816:	9504      	str	r5, [sp, #16]
 8023818:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802381c:	f1ca 0317 	rsb	r3, sl, #23
 8023820:	fa40 fb03 	asr.w	fp, r0, r3
 8023824:	f1bb 0f00 	cmp.w	fp, #0
 8023828:	dd65      	ble.n	80238f6 <__kernel_rem_pio2+0x26e>
 802382a:	9b04      	ldr	r3, [sp, #16]
 802382c:	2200      	movs	r2, #0
 802382e:	3301      	adds	r3, #1
 8023830:	9304      	str	r3, [sp, #16]
 8023832:	4615      	mov	r5, r2
 8023834:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8023838:	4294      	cmp	r4, r2
 802383a:	f300 809c 	bgt.w	8023976 <__kernel_rem_pio2+0x2ee>
 802383e:	f1ba 0f00 	cmp.w	sl, #0
 8023842:	dd07      	ble.n	8023854 <__kernel_rem_pio2+0x1cc>
 8023844:	f1ba 0f01 	cmp.w	sl, #1
 8023848:	f000 80c0 	beq.w	80239cc <__kernel_rem_pio2+0x344>
 802384c:	f1ba 0f02 	cmp.w	sl, #2
 8023850:	f000 80c6 	beq.w	80239e0 <__kernel_rem_pio2+0x358>
 8023854:	f1bb 0f02 	cmp.w	fp, #2
 8023858:	d14d      	bne.n	80238f6 <__kernel_rem_pio2+0x26e>
 802385a:	4632      	mov	r2, r6
 802385c:	463b      	mov	r3, r7
 802385e:	4956      	ldr	r1, [pc, #344]	; (80239b8 <__kernel_rem_pio2+0x330>)
 8023860:	2000      	movs	r0, #0
 8023862:	f7dc fd39 	bl	80002d8 <__aeabi_dsub>
 8023866:	4606      	mov	r6, r0
 8023868:	460f      	mov	r7, r1
 802386a:	2d00      	cmp	r5, #0
 802386c:	d043      	beq.n	80238f6 <__kernel_rem_pio2+0x26e>
 802386e:	4650      	mov	r0, sl
 8023870:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80239a8 <__kernel_rem_pio2+0x320>
 8023874:	f000 fbdc 	bl	8024030 <scalbn>
 8023878:	4630      	mov	r0, r6
 802387a:	4639      	mov	r1, r7
 802387c:	ec53 2b10 	vmov	r2, r3, d0
 8023880:	f7dc fd2a 	bl	80002d8 <__aeabi_dsub>
 8023884:	4606      	mov	r6, r0
 8023886:	460f      	mov	r7, r1
 8023888:	e035      	b.n	80238f6 <__kernel_rem_pio2+0x26e>
 802388a:	4b4c      	ldr	r3, [pc, #304]	; (80239bc <__kernel_rem_pio2+0x334>)
 802388c:	2200      	movs	r2, #0
 802388e:	4630      	mov	r0, r6
 8023890:	4639      	mov	r1, r7
 8023892:	f7dc fed9 	bl	8000648 <__aeabi_dmul>
 8023896:	f7dd f987 	bl	8000ba8 <__aeabi_d2iz>
 802389a:	f7dc fe6b 	bl	8000574 <__aeabi_i2d>
 802389e:	4602      	mov	r2, r0
 80238a0:	460b      	mov	r3, r1
 80238a2:	ec43 2b18 	vmov	d8, r2, r3
 80238a6:	4b46      	ldr	r3, [pc, #280]	; (80239c0 <__kernel_rem_pio2+0x338>)
 80238a8:	2200      	movs	r2, #0
 80238aa:	f7dc fecd 	bl	8000648 <__aeabi_dmul>
 80238ae:	4602      	mov	r2, r0
 80238b0:	460b      	mov	r3, r1
 80238b2:	4630      	mov	r0, r6
 80238b4:	4639      	mov	r1, r7
 80238b6:	f7dc fd0f 	bl	80002d8 <__aeabi_dsub>
 80238ba:	f7dd f975 	bl	8000ba8 <__aeabi_d2iz>
 80238be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80238c2:	f84b 0b04 	str.w	r0, [fp], #4
 80238c6:	ec51 0b18 	vmov	r0, r1, d8
 80238ca:	f7dc fd07 	bl	80002dc <__adddf3>
 80238ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80238d2:	4606      	mov	r6, r0
 80238d4:	460f      	mov	r7, r1
 80238d6:	e75b      	b.n	8023790 <__kernel_rem_pio2+0x108>
 80238d8:	d106      	bne.n	80238e8 <__kernel_rem_pio2+0x260>
 80238da:	1e63      	subs	r3, r4, #1
 80238dc:	aa0e      	add	r2, sp, #56	; 0x38
 80238de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80238e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80238e6:	e79d      	b.n	8023824 <__kernel_rem_pio2+0x19c>
 80238e8:	4b36      	ldr	r3, [pc, #216]	; (80239c4 <__kernel_rem_pio2+0x33c>)
 80238ea:	2200      	movs	r2, #0
 80238ec:	f7dd f932 	bl	8000b54 <__aeabi_dcmpge>
 80238f0:	2800      	cmp	r0, #0
 80238f2:	d13d      	bne.n	8023970 <__kernel_rem_pio2+0x2e8>
 80238f4:	4683      	mov	fp, r0
 80238f6:	2200      	movs	r2, #0
 80238f8:	2300      	movs	r3, #0
 80238fa:	4630      	mov	r0, r6
 80238fc:	4639      	mov	r1, r7
 80238fe:	f7dd f90b 	bl	8000b18 <__aeabi_dcmpeq>
 8023902:	2800      	cmp	r0, #0
 8023904:	f000 80c0 	beq.w	8023a88 <__kernel_rem_pio2+0x400>
 8023908:	1e65      	subs	r5, r4, #1
 802390a:	462b      	mov	r3, r5
 802390c:	2200      	movs	r2, #0
 802390e:	9902      	ldr	r1, [sp, #8]
 8023910:	428b      	cmp	r3, r1
 8023912:	da6c      	bge.n	80239ee <__kernel_rem_pio2+0x366>
 8023914:	2a00      	cmp	r2, #0
 8023916:	f000 8089 	beq.w	8023a2c <__kernel_rem_pio2+0x3a4>
 802391a:	ab0e      	add	r3, sp, #56	; 0x38
 802391c:	f1aa 0a18 	sub.w	sl, sl, #24
 8023920:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8023924:	2b00      	cmp	r3, #0
 8023926:	f000 80ad 	beq.w	8023a84 <__kernel_rem_pio2+0x3fc>
 802392a:	4650      	mov	r0, sl
 802392c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80239a8 <__kernel_rem_pio2+0x320>
 8023930:	f000 fb7e 	bl	8024030 <scalbn>
 8023934:	ab9a      	add	r3, sp, #616	; 0x268
 8023936:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802393a:	ec57 6b10 	vmov	r6, r7, d0
 802393e:	00ec      	lsls	r4, r5, #3
 8023940:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8023944:	46aa      	mov	sl, r5
 8023946:	f1ba 0f00 	cmp.w	sl, #0
 802394a:	f280 80d6 	bge.w	8023afa <__kernel_rem_pio2+0x472>
 802394e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80239a0 <__kernel_rem_pio2+0x318>
 8023952:	462e      	mov	r6, r5
 8023954:	2e00      	cmp	r6, #0
 8023956:	f2c0 8104 	blt.w	8023b62 <__kernel_rem_pio2+0x4da>
 802395a:	ab72      	add	r3, sp, #456	; 0x1c8
 802395c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8023960:	f8df a064 	ldr.w	sl, [pc, #100]	; 80239c8 <__kernel_rem_pio2+0x340>
 8023964:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8023968:	f04f 0800 	mov.w	r8, #0
 802396c:	1baf      	subs	r7, r5, r6
 802396e:	e0ea      	b.n	8023b46 <__kernel_rem_pio2+0x4be>
 8023970:	f04f 0b02 	mov.w	fp, #2
 8023974:	e759      	b.n	802382a <__kernel_rem_pio2+0x1a2>
 8023976:	f8d8 3000 	ldr.w	r3, [r8]
 802397a:	b955      	cbnz	r5, 8023992 <__kernel_rem_pio2+0x30a>
 802397c:	b123      	cbz	r3, 8023988 <__kernel_rem_pio2+0x300>
 802397e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8023982:	f8c8 3000 	str.w	r3, [r8]
 8023986:	2301      	movs	r3, #1
 8023988:	3201      	adds	r2, #1
 802398a:	f108 0804 	add.w	r8, r8, #4
 802398e:	461d      	mov	r5, r3
 8023990:	e752      	b.n	8023838 <__kernel_rem_pio2+0x1b0>
 8023992:	1acb      	subs	r3, r1, r3
 8023994:	f8c8 3000 	str.w	r3, [r8]
 8023998:	462b      	mov	r3, r5
 802399a:	e7f5      	b.n	8023988 <__kernel_rem_pio2+0x300>
 802399c:	f3af 8000 	nop.w
	...
 80239ac:	3ff00000 	.word	0x3ff00000
 80239b0:	08024a48 	.word	0x08024a48
 80239b4:	40200000 	.word	0x40200000
 80239b8:	3ff00000 	.word	0x3ff00000
 80239bc:	3e700000 	.word	0x3e700000
 80239c0:	41700000 	.word	0x41700000
 80239c4:	3fe00000 	.word	0x3fe00000
 80239c8:	08024a08 	.word	0x08024a08
 80239cc:	1e62      	subs	r2, r4, #1
 80239ce:	ab0e      	add	r3, sp, #56	; 0x38
 80239d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80239d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80239d8:	a90e      	add	r1, sp, #56	; 0x38
 80239da:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80239de:	e739      	b.n	8023854 <__kernel_rem_pio2+0x1cc>
 80239e0:	1e62      	subs	r2, r4, #1
 80239e2:	ab0e      	add	r3, sp, #56	; 0x38
 80239e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80239e8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80239ec:	e7f4      	b.n	80239d8 <__kernel_rem_pio2+0x350>
 80239ee:	a90e      	add	r1, sp, #56	; 0x38
 80239f0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80239f4:	3b01      	subs	r3, #1
 80239f6:	430a      	orrs	r2, r1
 80239f8:	e789      	b.n	802390e <__kernel_rem_pio2+0x286>
 80239fa:	3301      	adds	r3, #1
 80239fc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8023a00:	2900      	cmp	r1, #0
 8023a02:	d0fa      	beq.n	80239fa <__kernel_rem_pio2+0x372>
 8023a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023a06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8023a0a:	446a      	add	r2, sp
 8023a0c:	3a98      	subs	r2, #152	; 0x98
 8023a0e:	920a      	str	r2, [sp, #40]	; 0x28
 8023a10:	9a08      	ldr	r2, [sp, #32]
 8023a12:	18e3      	adds	r3, r4, r3
 8023a14:	18a5      	adds	r5, r4, r2
 8023a16:	aa22      	add	r2, sp, #136	; 0x88
 8023a18:	f104 0801 	add.w	r8, r4, #1
 8023a1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8023a20:	9304      	str	r3, [sp, #16]
 8023a22:	9b04      	ldr	r3, [sp, #16]
 8023a24:	4543      	cmp	r3, r8
 8023a26:	da04      	bge.n	8023a32 <__kernel_rem_pio2+0x3aa>
 8023a28:	461c      	mov	r4, r3
 8023a2a:	e6a3      	b.n	8023774 <__kernel_rem_pio2+0xec>
 8023a2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023a2e:	2301      	movs	r3, #1
 8023a30:	e7e4      	b.n	80239fc <__kernel_rem_pio2+0x374>
 8023a32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023a34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8023a38:	f7dc fd9c 	bl	8000574 <__aeabi_i2d>
 8023a3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8023a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023a42:	46ab      	mov	fp, r5
 8023a44:	461c      	mov	r4, r3
 8023a46:	f04f 0900 	mov.w	r9, #0
 8023a4a:	2600      	movs	r6, #0
 8023a4c:	2700      	movs	r7, #0
 8023a4e:	9b06      	ldr	r3, [sp, #24]
 8023a50:	4599      	cmp	r9, r3
 8023a52:	dd06      	ble.n	8023a62 <__kernel_rem_pio2+0x3da>
 8023a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a56:	e8e3 6702 	strd	r6, r7, [r3], #8
 8023a5a:	f108 0801 	add.w	r8, r8, #1
 8023a5e:	930a      	str	r3, [sp, #40]	; 0x28
 8023a60:	e7df      	b.n	8023a22 <__kernel_rem_pio2+0x39a>
 8023a62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8023a66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8023a6a:	f7dc fded 	bl	8000648 <__aeabi_dmul>
 8023a6e:	4602      	mov	r2, r0
 8023a70:	460b      	mov	r3, r1
 8023a72:	4630      	mov	r0, r6
 8023a74:	4639      	mov	r1, r7
 8023a76:	f7dc fc31 	bl	80002dc <__adddf3>
 8023a7a:	f109 0901 	add.w	r9, r9, #1
 8023a7e:	4606      	mov	r6, r0
 8023a80:	460f      	mov	r7, r1
 8023a82:	e7e4      	b.n	8023a4e <__kernel_rem_pio2+0x3c6>
 8023a84:	3d01      	subs	r5, #1
 8023a86:	e748      	b.n	802391a <__kernel_rem_pio2+0x292>
 8023a88:	ec47 6b10 	vmov	d0, r6, r7
 8023a8c:	f1ca 0000 	rsb	r0, sl, #0
 8023a90:	f000 face 	bl	8024030 <scalbn>
 8023a94:	ec57 6b10 	vmov	r6, r7, d0
 8023a98:	4ba0      	ldr	r3, [pc, #640]	; (8023d1c <__kernel_rem_pio2+0x694>)
 8023a9a:	ee10 0a10 	vmov	r0, s0
 8023a9e:	2200      	movs	r2, #0
 8023aa0:	4639      	mov	r1, r7
 8023aa2:	f7dd f857 	bl	8000b54 <__aeabi_dcmpge>
 8023aa6:	b1f8      	cbz	r0, 8023ae8 <__kernel_rem_pio2+0x460>
 8023aa8:	4b9d      	ldr	r3, [pc, #628]	; (8023d20 <__kernel_rem_pio2+0x698>)
 8023aaa:	2200      	movs	r2, #0
 8023aac:	4630      	mov	r0, r6
 8023aae:	4639      	mov	r1, r7
 8023ab0:	f7dc fdca 	bl	8000648 <__aeabi_dmul>
 8023ab4:	f7dd f878 	bl	8000ba8 <__aeabi_d2iz>
 8023ab8:	4680      	mov	r8, r0
 8023aba:	f7dc fd5b 	bl	8000574 <__aeabi_i2d>
 8023abe:	4b97      	ldr	r3, [pc, #604]	; (8023d1c <__kernel_rem_pio2+0x694>)
 8023ac0:	2200      	movs	r2, #0
 8023ac2:	f7dc fdc1 	bl	8000648 <__aeabi_dmul>
 8023ac6:	460b      	mov	r3, r1
 8023ac8:	4602      	mov	r2, r0
 8023aca:	4639      	mov	r1, r7
 8023acc:	4630      	mov	r0, r6
 8023ace:	f7dc fc03 	bl	80002d8 <__aeabi_dsub>
 8023ad2:	f7dd f869 	bl	8000ba8 <__aeabi_d2iz>
 8023ad6:	1c65      	adds	r5, r4, #1
 8023ad8:	ab0e      	add	r3, sp, #56	; 0x38
 8023ada:	f10a 0a18 	add.w	sl, sl, #24
 8023ade:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023ae2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8023ae6:	e720      	b.n	802392a <__kernel_rem_pio2+0x2a2>
 8023ae8:	4630      	mov	r0, r6
 8023aea:	4639      	mov	r1, r7
 8023aec:	f7dd f85c 	bl	8000ba8 <__aeabi_d2iz>
 8023af0:	ab0e      	add	r3, sp, #56	; 0x38
 8023af2:	4625      	mov	r5, r4
 8023af4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8023af8:	e717      	b.n	802392a <__kernel_rem_pio2+0x2a2>
 8023afa:	ab0e      	add	r3, sp, #56	; 0x38
 8023afc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8023b00:	f7dc fd38 	bl	8000574 <__aeabi_i2d>
 8023b04:	4632      	mov	r2, r6
 8023b06:	463b      	mov	r3, r7
 8023b08:	f7dc fd9e 	bl	8000648 <__aeabi_dmul>
 8023b0c:	4b84      	ldr	r3, [pc, #528]	; (8023d20 <__kernel_rem_pio2+0x698>)
 8023b0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8023b12:	2200      	movs	r2, #0
 8023b14:	4630      	mov	r0, r6
 8023b16:	4639      	mov	r1, r7
 8023b18:	f7dc fd96 	bl	8000648 <__aeabi_dmul>
 8023b1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023b20:	4606      	mov	r6, r0
 8023b22:	460f      	mov	r7, r1
 8023b24:	e70f      	b.n	8023946 <__kernel_rem_pio2+0x2be>
 8023b26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8023b2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8023b2e:	f7dc fd8b 	bl	8000648 <__aeabi_dmul>
 8023b32:	4602      	mov	r2, r0
 8023b34:	460b      	mov	r3, r1
 8023b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023b3a:	f7dc fbcf 	bl	80002dc <__adddf3>
 8023b3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023b42:	f108 0801 	add.w	r8, r8, #1
 8023b46:	9b02      	ldr	r3, [sp, #8]
 8023b48:	4598      	cmp	r8, r3
 8023b4a:	dc01      	bgt.n	8023b50 <__kernel_rem_pio2+0x4c8>
 8023b4c:	45b8      	cmp	r8, r7
 8023b4e:	ddea      	ble.n	8023b26 <__kernel_rem_pio2+0x49e>
 8023b50:	ed9d 7b06 	vldr	d7, [sp, #24]
 8023b54:	ab4a      	add	r3, sp, #296	; 0x128
 8023b56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8023b5a:	ed87 7b00 	vstr	d7, [r7]
 8023b5e:	3e01      	subs	r6, #1
 8023b60:	e6f8      	b.n	8023954 <__kernel_rem_pio2+0x2cc>
 8023b62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023b64:	2b02      	cmp	r3, #2
 8023b66:	dc0b      	bgt.n	8023b80 <__kernel_rem_pio2+0x4f8>
 8023b68:	2b00      	cmp	r3, #0
 8023b6a:	dc35      	bgt.n	8023bd8 <__kernel_rem_pio2+0x550>
 8023b6c:	d059      	beq.n	8023c22 <__kernel_rem_pio2+0x59a>
 8023b6e:	9b04      	ldr	r3, [sp, #16]
 8023b70:	f003 0007 	and.w	r0, r3, #7
 8023b74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8023b78:	ecbd 8b02 	vpop	{d8}
 8023b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8023b82:	2b03      	cmp	r3, #3
 8023b84:	d1f3      	bne.n	8023b6e <__kernel_rem_pio2+0x4e6>
 8023b86:	ab4a      	add	r3, sp, #296	; 0x128
 8023b88:	4423      	add	r3, r4
 8023b8a:	9306      	str	r3, [sp, #24]
 8023b8c:	461c      	mov	r4, r3
 8023b8e:	469a      	mov	sl, r3
 8023b90:	9502      	str	r5, [sp, #8]
 8023b92:	9b02      	ldr	r3, [sp, #8]
 8023b94:	2b00      	cmp	r3, #0
 8023b96:	f1aa 0a08 	sub.w	sl, sl, #8
 8023b9a:	dc6b      	bgt.n	8023c74 <__kernel_rem_pio2+0x5ec>
 8023b9c:	46aa      	mov	sl, r5
 8023b9e:	f1ba 0f01 	cmp.w	sl, #1
 8023ba2:	f1a4 0408 	sub.w	r4, r4, #8
 8023ba6:	f300 8085 	bgt.w	8023cb4 <__kernel_rem_pio2+0x62c>
 8023baa:	9c06      	ldr	r4, [sp, #24]
 8023bac:	2000      	movs	r0, #0
 8023bae:	3408      	adds	r4, #8
 8023bb0:	2100      	movs	r1, #0
 8023bb2:	2d01      	cmp	r5, #1
 8023bb4:	f300 809d 	bgt.w	8023cf2 <__kernel_rem_pio2+0x66a>
 8023bb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8023bbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8023bc0:	f1bb 0f00 	cmp.w	fp, #0
 8023bc4:	f040 809b 	bne.w	8023cfe <__kernel_rem_pio2+0x676>
 8023bc8:	9b01      	ldr	r3, [sp, #4]
 8023bca:	e9c3 5600 	strd	r5, r6, [r3]
 8023bce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8023bd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8023bd6:	e7ca      	b.n	8023b6e <__kernel_rem_pio2+0x4e6>
 8023bd8:	3408      	adds	r4, #8
 8023bda:	ab4a      	add	r3, sp, #296	; 0x128
 8023bdc:	441c      	add	r4, r3
 8023bde:	462e      	mov	r6, r5
 8023be0:	2000      	movs	r0, #0
 8023be2:	2100      	movs	r1, #0
 8023be4:	2e00      	cmp	r6, #0
 8023be6:	da36      	bge.n	8023c56 <__kernel_rem_pio2+0x5ce>
 8023be8:	f1bb 0f00 	cmp.w	fp, #0
 8023bec:	d039      	beq.n	8023c62 <__kernel_rem_pio2+0x5da>
 8023bee:	4602      	mov	r2, r0
 8023bf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023bf4:	9c01      	ldr	r4, [sp, #4]
 8023bf6:	e9c4 2300 	strd	r2, r3, [r4]
 8023bfa:	4602      	mov	r2, r0
 8023bfc:	460b      	mov	r3, r1
 8023bfe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8023c02:	f7dc fb69 	bl	80002d8 <__aeabi_dsub>
 8023c06:	ae4c      	add	r6, sp, #304	; 0x130
 8023c08:	2401      	movs	r4, #1
 8023c0a:	42a5      	cmp	r5, r4
 8023c0c:	da2c      	bge.n	8023c68 <__kernel_rem_pio2+0x5e0>
 8023c0e:	f1bb 0f00 	cmp.w	fp, #0
 8023c12:	d002      	beq.n	8023c1a <__kernel_rem_pio2+0x592>
 8023c14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023c18:	4619      	mov	r1, r3
 8023c1a:	9b01      	ldr	r3, [sp, #4]
 8023c1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8023c20:	e7a5      	b.n	8023b6e <__kernel_rem_pio2+0x4e6>
 8023c22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8023c26:	eb0d 0403 	add.w	r4, sp, r3
 8023c2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8023c2e:	2000      	movs	r0, #0
 8023c30:	2100      	movs	r1, #0
 8023c32:	2d00      	cmp	r5, #0
 8023c34:	da09      	bge.n	8023c4a <__kernel_rem_pio2+0x5c2>
 8023c36:	f1bb 0f00 	cmp.w	fp, #0
 8023c3a:	d002      	beq.n	8023c42 <__kernel_rem_pio2+0x5ba>
 8023c3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023c40:	4619      	mov	r1, r3
 8023c42:	9b01      	ldr	r3, [sp, #4]
 8023c44:	e9c3 0100 	strd	r0, r1, [r3]
 8023c48:	e791      	b.n	8023b6e <__kernel_rem_pio2+0x4e6>
 8023c4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023c4e:	f7dc fb45 	bl	80002dc <__adddf3>
 8023c52:	3d01      	subs	r5, #1
 8023c54:	e7ed      	b.n	8023c32 <__kernel_rem_pio2+0x5aa>
 8023c56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023c5a:	f7dc fb3f 	bl	80002dc <__adddf3>
 8023c5e:	3e01      	subs	r6, #1
 8023c60:	e7c0      	b.n	8023be4 <__kernel_rem_pio2+0x55c>
 8023c62:	4602      	mov	r2, r0
 8023c64:	460b      	mov	r3, r1
 8023c66:	e7c5      	b.n	8023bf4 <__kernel_rem_pio2+0x56c>
 8023c68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8023c6c:	f7dc fb36 	bl	80002dc <__adddf3>
 8023c70:	3401      	adds	r4, #1
 8023c72:	e7ca      	b.n	8023c0a <__kernel_rem_pio2+0x582>
 8023c74:	e9da 8900 	ldrd	r8, r9, [sl]
 8023c78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8023c7c:	9b02      	ldr	r3, [sp, #8]
 8023c7e:	3b01      	subs	r3, #1
 8023c80:	9302      	str	r3, [sp, #8]
 8023c82:	4632      	mov	r2, r6
 8023c84:	463b      	mov	r3, r7
 8023c86:	4640      	mov	r0, r8
 8023c88:	4649      	mov	r1, r9
 8023c8a:	f7dc fb27 	bl	80002dc <__adddf3>
 8023c8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023c92:	4602      	mov	r2, r0
 8023c94:	460b      	mov	r3, r1
 8023c96:	4640      	mov	r0, r8
 8023c98:	4649      	mov	r1, r9
 8023c9a:	f7dc fb1d 	bl	80002d8 <__aeabi_dsub>
 8023c9e:	4632      	mov	r2, r6
 8023ca0:	463b      	mov	r3, r7
 8023ca2:	f7dc fb1b 	bl	80002dc <__adddf3>
 8023ca6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8023caa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023cae:	ed8a 7b00 	vstr	d7, [sl]
 8023cb2:	e76e      	b.n	8023b92 <__kernel_rem_pio2+0x50a>
 8023cb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8023cb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8023cbc:	4640      	mov	r0, r8
 8023cbe:	4632      	mov	r2, r6
 8023cc0:	463b      	mov	r3, r7
 8023cc2:	4649      	mov	r1, r9
 8023cc4:	f7dc fb0a 	bl	80002dc <__adddf3>
 8023cc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023ccc:	4602      	mov	r2, r0
 8023cce:	460b      	mov	r3, r1
 8023cd0:	4640      	mov	r0, r8
 8023cd2:	4649      	mov	r1, r9
 8023cd4:	f7dc fb00 	bl	80002d8 <__aeabi_dsub>
 8023cd8:	4632      	mov	r2, r6
 8023cda:	463b      	mov	r3, r7
 8023cdc:	f7dc fafe 	bl	80002dc <__adddf3>
 8023ce0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8023ce4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8023ce8:	ed84 7b00 	vstr	d7, [r4]
 8023cec:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023cf0:	e755      	b.n	8023b9e <__kernel_rem_pio2+0x516>
 8023cf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8023cf6:	f7dc faf1 	bl	80002dc <__adddf3>
 8023cfa:	3d01      	subs	r5, #1
 8023cfc:	e759      	b.n	8023bb2 <__kernel_rem_pio2+0x52a>
 8023cfe:	9b01      	ldr	r3, [sp, #4]
 8023d00:	9a01      	ldr	r2, [sp, #4]
 8023d02:	601d      	str	r5, [r3, #0]
 8023d04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8023d08:	605c      	str	r4, [r3, #4]
 8023d0a:	609f      	str	r7, [r3, #8]
 8023d0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8023d10:	60d3      	str	r3, [r2, #12]
 8023d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023d16:	6110      	str	r0, [r2, #16]
 8023d18:	6153      	str	r3, [r2, #20]
 8023d1a:	e728      	b.n	8023b6e <__kernel_rem_pio2+0x4e6>
 8023d1c:	41700000 	.word	0x41700000
 8023d20:	3e700000 	.word	0x3e700000
 8023d24:	00000000 	.word	0x00000000

08023d28 <__kernel_sin>:
 8023d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d2c:	ed2d 8b04 	vpush	{d8-d9}
 8023d30:	eeb0 8a41 	vmov.f32	s16, s2
 8023d34:	eef0 8a61 	vmov.f32	s17, s3
 8023d38:	ec55 4b10 	vmov	r4, r5, d0
 8023d3c:	b083      	sub	sp, #12
 8023d3e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023d42:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8023d46:	9001      	str	r0, [sp, #4]
 8023d48:	da06      	bge.n	8023d58 <__kernel_sin+0x30>
 8023d4a:	ee10 0a10 	vmov	r0, s0
 8023d4e:	4629      	mov	r1, r5
 8023d50:	f7dc ff2a 	bl	8000ba8 <__aeabi_d2iz>
 8023d54:	2800      	cmp	r0, #0
 8023d56:	d051      	beq.n	8023dfc <__kernel_sin+0xd4>
 8023d58:	4622      	mov	r2, r4
 8023d5a:	462b      	mov	r3, r5
 8023d5c:	4620      	mov	r0, r4
 8023d5e:	4629      	mov	r1, r5
 8023d60:	f7dc fc72 	bl	8000648 <__aeabi_dmul>
 8023d64:	4682      	mov	sl, r0
 8023d66:	468b      	mov	fp, r1
 8023d68:	4602      	mov	r2, r0
 8023d6a:	460b      	mov	r3, r1
 8023d6c:	4620      	mov	r0, r4
 8023d6e:	4629      	mov	r1, r5
 8023d70:	f7dc fc6a 	bl	8000648 <__aeabi_dmul>
 8023d74:	a341      	add	r3, pc, #260	; (adr r3, 8023e7c <__kernel_sin+0x154>)
 8023d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d7a:	4680      	mov	r8, r0
 8023d7c:	4689      	mov	r9, r1
 8023d7e:	4650      	mov	r0, sl
 8023d80:	4659      	mov	r1, fp
 8023d82:	f7dc fc61 	bl	8000648 <__aeabi_dmul>
 8023d86:	a33f      	add	r3, pc, #252	; (adr r3, 8023e84 <__kernel_sin+0x15c>)
 8023d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d8c:	f7dc faa4 	bl	80002d8 <__aeabi_dsub>
 8023d90:	4652      	mov	r2, sl
 8023d92:	465b      	mov	r3, fp
 8023d94:	f7dc fc58 	bl	8000648 <__aeabi_dmul>
 8023d98:	a33c      	add	r3, pc, #240	; (adr r3, 8023e8c <__kernel_sin+0x164>)
 8023d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d9e:	f7dc fa9d 	bl	80002dc <__adddf3>
 8023da2:	4652      	mov	r2, sl
 8023da4:	465b      	mov	r3, fp
 8023da6:	f7dc fc4f 	bl	8000648 <__aeabi_dmul>
 8023daa:	a33a      	add	r3, pc, #232	; (adr r3, 8023e94 <__kernel_sin+0x16c>)
 8023dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023db0:	f7dc fa92 	bl	80002d8 <__aeabi_dsub>
 8023db4:	4652      	mov	r2, sl
 8023db6:	465b      	mov	r3, fp
 8023db8:	f7dc fc46 	bl	8000648 <__aeabi_dmul>
 8023dbc:	a337      	add	r3, pc, #220	; (adr r3, 8023e9c <__kernel_sin+0x174>)
 8023dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dc2:	f7dc fa8b 	bl	80002dc <__adddf3>
 8023dc6:	9b01      	ldr	r3, [sp, #4]
 8023dc8:	4606      	mov	r6, r0
 8023dca:	460f      	mov	r7, r1
 8023dcc:	b9eb      	cbnz	r3, 8023e0a <__kernel_sin+0xe2>
 8023dce:	4602      	mov	r2, r0
 8023dd0:	460b      	mov	r3, r1
 8023dd2:	4650      	mov	r0, sl
 8023dd4:	4659      	mov	r1, fp
 8023dd6:	f7dc fc37 	bl	8000648 <__aeabi_dmul>
 8023dda:	a325      	add	r3, pc, #148	; (adr r3, 8023e70 <__kernel_sin+0x148>)
 8023ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023de0:	f7dc fa7a 	bl	80002d8 <__aeabi_dsub>
 8023de4:	4642      	mov	r2, r8
 8023de6:	464b      	mov	r3, r9
 8023de8:	f7dc fc2e 	bl	8000648 <__aeabi_dmul>
 8023dec:	4602      	mov	r2, r0
 8023dee:	460b      	mov	r3, r1
 8023df0:	4620      	mov	r0, r4
 8023df2:	4629      	mov	r1, r5
 8023df4:	f7dc fa72 	bl	80002dc <__adddf3>
 8023df8:	4604      	mov	r4, r0
 8023dfa:	460d      	mov	r5, r1
 8023dfc:	ec45 4b10 	vmov	d0, r4, r5
 8023e00:	b003      	add	sp, #12
 8023e02:	ecbd 8b04 	vpop	{d8-d9}
 8023e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e0a:	4b1b      	ldr	r3, [pc, #108]	; (8023e78 <__kernel_sin+0x150>)
 8023e0c:	ec51 0b18 	vmov	r0, r1, d8
 8023e10:	2200      	movs	r2, #0
 8023e12:	f7dc fc19 	bl	8000648 <__aeabi_dmul>
 8023e16:	4632      	mov	r2, r6
 8023e18:	ec41 0b19 	vmov	d9, r0, r1
 8023e1c:	463b      	mov	r3, r7
 8023e1e:	4640      	mov	r0, r8
 8023e20:	4649      	mov	r1, r9
 8023e22:	f7dc fc11 	bl	8000648 <__aeabi_dmul>
 8023e26:	4602      	mov	r2, r0
 8023e28:	460b      	mov	r3, r1
 8023e2a:	ec51 0b19 	vmov	r0, r1, d9
 8023e2e:	f7dc fa53 	bl	80002d8 <__aeabi_dsub>
 8023e32:	4652      	mov	r2, sl
 8023e34:	465b      	mov	r3, fp
 8023e36:	f7dc fc07 	bl	8000648 <__aeabi_dmul>
 8023e3a:	ec53 2b18 	vmov	r2, r3, d8
 8023e3e:	f7dc fa4b 	bl	80002d8 <__aeabi_dsub>
 8023e42:	a30b      	add	r3, pc, #44	; (adr r3, 8023e70 <__kernel_sin+0x148>)
 8023e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e48:	4606      	mov	r6, r0
 8023e4a:	460f      	mov	r7, r1
 8023e4c:	4640      	mov	r0, r8
 8023e4e:	4649      	mov	r1, r9
 8023e50:	f7dc fbfa 	bl	8000648 <__aeabi_dmul>
 8023e54:	4602      	mov	r2, r0
 8023e56:	460b      	mov	r3, r1
 8023e58:	4630      	mov	r0, r6
 8023e5a:	4639      	mov	r1, r7
 8023e5c:	f7dc fa3e 	bl	80002dc <__adddf3>
 8023e60:	4602      	mov	r2, r0
 8023e62:	460b      	mov	r3, r1
 8023e64:	4620      	mov	r0, r4
 8023e66:	4629      	mov	r1, r5
 8023e68:	f7dc fa36 	bl	80002d8 <__aeabi_dsub>
 8023e6c:	e7c4      	b.n	8023df8 <__kernel_sin+0xd0>
 8023e6e:	bf00      	nop
 8023e70:	55555549 	.word	0x55555549
 8023e74:	3fc55555 	.word	0x3fc55555
 8023e78:	3fe00000 	.word	0x3fe00000
 8023e7c:	5acfd57c 	.word	0x5acfd57c
 8023e80:	3de5d93a 	.word	0x3de5d93a
 8023e84:	8a2b9ceb 	.word	0x8a2b9ceb
 8023e88:	3e5ae5e6 	.word	0x3e5ae5e6
 8023e8c:	57b1fe7d 	.word	0x57b1fe7d
 8023e90:	3ec71de3 	.word	0x3ec71de3
 8023e94:	19c161d5 	.word	0x19c161d5
 8023e98:	3f2a01a0 	.word	0x3f2a01a0
 8023e9c:	1110f8a6 	.word	0x1110f8a6
 8023ea0:	3f811111 	.word	0x3f811111

08023ea4 <with_errno>:
 8023ea4:	b570      	push	{r4, r5, r6, lr}
 8023ea6:	4604      	mov	r4, r0
 8023ea8:	460d      	mov	r5, r1
 8023eaa:	4616      	mov	r6, r2
 8023eac:	f7fb ffe8 	bl	801fe80 <__errno>
 8023eb0:	4629      	mov	r1, r5
 8023eb2:	6006      	str	r6, [r0, #0]
 8023eb4:	4620      	mov	r0, r4
 8023eb6:	bd70      	pop	{r4, r5, r6, pc}

08023eb8 <xflow>:
 8023eb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023eba:	4614      	mov	r4, r2
 8023ebc:	461d      	mov	r5, r3
 8023ebe:	b108      	cbz	r0, 8023ec4 <xflow+0xc>
 8023ec0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023ec4:	e9cd 2300 	strd	r2, r3, [sp]
 8023ec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023ecc:	4620      	mov	r0, r4
 8023ece:	4629      	mov	r1, r5
 8023ed0:	f7dc fbba 	bl	8000648 <__aeabi_dmul>
 8023ed4:	2222      	movs	r2, #34	; 0x22
 8023ed6:	b003      	add	sp, #12
 8023ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023edc:	f7ff bfe2 	b.w	8023ea4 <with_errno>

08023ee0 <__math_uflow>:
 8023ee0:	b508      	push	{r3, lr}
 8023ee2:	2200      	movs	r2, #0
 8023ee4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8023ee8:	f7ff ffe6 	bl	8023eb8 <xflow>
 8023eec:	ec41 0b10 	vmov	d0, r0, r1
 8023ef0:	bd08      	pop	{r3, pc}

08023ef2 <__math_oflow>:
 8023ef2:	b508      	push	{r3, lr}
 8023ef4:	2200      	movs	r2, #0
 8023ef6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023efa:	f7ff ffdd 	bl	8023eb8 <xflow>
 8023efe:	ec41 0b10 	vmov	d0, r0, r1
 8023f02:	bd08      	pop	{r3, pc}

08023f04 <fabs>:
 8023f04:	ec51 0b10 	vmov	r0, r1, d0
 8023f08:	ee10 2a10 	vmov	r2, s0
 8023f0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023f10:	ec43 2b10 	vmov	d0, r2, r3
 8023f14:	4770      	bx	lr

08023f16 <finite>:
 8023f16:	b082      	sub	sp, #8
 8023f18:	ed8d 0b00 	vstr	d0, [sp]
 8023f1c:	9801      	ldr	r0, [sp, #4]
 8023f1e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8023f22:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8023f26:	0fc0      	lsrs	r0, r0, #31
 8023f28:	b002      	add	sp, #8
 8023f2a:	4770      	bx	lr
 8023f2c:	0000      	movs	r0, r0
	...

08023f30 <floor>:
 8023f30:	ec51 0b10 	vmov	r0, r1, d0
 8023f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023f3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023f40:	2e13      	cmp	r6, #19
 8023f42:	ee10 5a10 	vmov	r5, s0
 8023f46:	ee10 8a10 	vmov	r8, s0
 8023f4a:	460c      	mov	r4, r1
 8023f4c:	dc32      	bgt.n	8023fb4 <floor+0x84>
 8023f4e:	2e00      	cmp	r6, #0
 8023f50:	da14      	bge.n	8023f7c <floor+0x4c>
 8023f52:	a333      	add	r3, pc, #204	; (adr r3, 8024020 <floor+0xf0>)
 8023f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f58:	f7dc f9c0 	bl	80002dc <__adddf3>
 8023f5c:	2200      	movs	r2, #0
 8023f5e:	2300      	movs	r3, #0
 8023f60:	f7dc fe02 	bl	8000b68 <__aeabi_dcmpgt>
 8023f64:	b138      	cbz	r0, 8023f76 <floor+0x46>
 8023f66:	2c00      	cmp	r4, #0
 8023f68:	da57      	bge.n	802401a <floor+0xea>
 8023f6a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8023f6e:	431d      	orrs	r5, r3
 8023f70:	d001      	beq.n	8023f76 <floor+0x46>
 8023f72:	4c2d      	ldr	r4, [pc, #180]	; (8024028 <floor+0xf8>)
 8023f74:	2500      	movs	r5, #0
 8023f76:	4621      	mov	r1, r4
 8023f78:	4628      	mov	r0, r5
 8023f7a:	e025      	b.n	8023fc8 <floor+0x98>
 8023f7c:	4f2b      	ldr	r7, [pc, #172]	; (802402c <floor+0xfc>)
 8023f7e:	4137      	asrs	r7, r6
 8023f80:	ea01 0307 	and.w	r3, r1, r7
 8023f84:	4303      	orrs	r3, r0
 8023f86:	d01f      	beq.n	8023fc8 <floor+0x98>
 8023f88:	a325      	add	r3, pc, #148	; (adr r3, 8024020 <floor+0xf0>)
 8023f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f8e:	f7dc f9a5 	bl	80002dc <__adddf3>
 8023f92:	2200      	movs	r2, #0
 8023f94:	2300      	movs	r3, #0
 8023f96:	f7dc fde7 	bl	8000b68 <__aeabi_dcmpgt>
 8023f9a:	2800      	cmp	r0, #0
 8023f9c:	d0eb      	beq.n	8023f76 <floor+0x46>
 8023f9e:	2c00      	cmp	r4, #0
 8023fa0:	bfbe      	ittt	lt
 8023fa2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023fa6:	fa43 f606 	asrlt.w	r6, r3, r6
 8023faa:	19a4      	addlt	r4, r4, r6
 8023fac:	ea24 0407 	bic.w	r4, r4, r7
 8023fb0:	2500      	movs	r5, #0
 8023fb2:	e7e0      	b.n	8023f76 <floor+0x46>
 8023fb4:	2e33      	cmp	r6, #51	; 0x33
 8023fb6:	dd0b      	ble.n	8023fd0 <floor+0xa0>
 8023fb8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8023fbc:	d104      	bne.n	8023fc8 <floor+0x98>
 8023fbe:	ee10 2a10 	vmov	r2, s0
 8023fc2:	460b      	mov	r3, r1
 8023fc4:	f7dc f98a 	bl	80002dc <__adddf3>
 8023fc8:	ec41 0b10 	vmov	d0, r0, r1
 8023fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023fd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8023fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8023fd8:	fa23 f707 	lsr.w	r7, r3, r7
 8023fdc:	4207      	tst	r7, r0
 8023fde:	d0f3      	beq.n	8023fc8 <floor+0x98>
 8023fe0:	a30f      	add	r3, pc, #60	; (adr r3, 8024020 <floor+0xf0>)
 8023fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fe6:	f7dc f979 	bl	80002dc <__adddf3>
 8023fea:	2200      	movs	r2, #0
 8023fec:	2300      	movs	r3, #0
 8023fee:	f7dc fdbb 	bl	8000b68 <__aeabi_dcmpgt>
 8023ff2:	2800      	cmp	r0, #0
 8023ff4:	d0bf      	beq.n	8023f76 <floor+0x46>
 8023ff6:	2c00      	cmp	r4, #0
 8023ff8:	da02      	bge.n	8024000 <floor+0xd0>
 8023ffa:	2e14      	cmp	r6, #20
 8023ffc:	d103      	bne.n	8024006 <floor+0xd6>
 8023ffe:	3401      	adds	r4, #1
 8024000:	ea25 0507 	bic.w	r5, r5, r7
 8024004:	e7b7      	b.n	8023f76 <floor+0x46>
 8024006:	2301      	movs	r3, #1
 8024008:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802400c:	fa03 f606 	lsl.w	r6, r3, r6
 8024010:	4435      	add	r5, r6
 8024012:	4545      	cmp	r5, r8
 8024014:	bf38      	it	cc
 8024016:	18e4      	addcc	r4, r4, r3
 8024018:	e7f2      	b.n	8024000 <floor+0xd0>
 802401a:	2500      	movs	r5, #0
 802401c:	462c      	mov	r4, r5
 802401e:	e7aa      	b.n	8023f76 <floor+0x46>
 8024020:	8800759c 	.word	0x8800759c
 8024024:	7e37e43c 	.word	0x7e37e43c
 8024028:	bff00000 	.word	0xbff00000
 802402c:	000fffff 	.word	0x000fffff

08024030 <scalbn>:
 8024030:	b570      	push	{r4, r5, r6, lr}
 8024032:	ec55 4b10 	vmov	r4, r5, d0
 8024036:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802403a:	4606      	mov	r6, r0
 802403c:	462b      	mov	r3, r5
 802403e:	b99a      	cbnz	r2, 8024068 <scalbn+0x38>
 8024040:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024044:	4323      	orrs	r3, r4
 8024046:	d036      	beq.n	80240b6 <scalbn+0x86>
 8024048:	4b39      	ldr	r3, [pc, #228]	; (8024130 <scalbn+0x100>)
 802404a:	4629      	mov	r1, r5
 802404c:	ee10 0a10 	vmov	r0, s0
 8024050:	2200      	movs	r2, #0
 8024052:	f7dc faf9 	bl	8000648 <__aeabi_dmul>
 8024056:	4b37      	ldr	r3, [pc, #220]	; (8024134 <scalbn+0x104>)
 8024058:	429e      	cmp	r6, r3
 802405a:	4604      	mov	r4, r0
 802405c:	460d      	mov	r5, r1
 802405e:	da10      	bge.n	8024082 <scalbn+0x52>
 8024060:	a32b      	add	r3, pc, #172	; (adr r3, 8024110 <scalbn+0xe0>)
 8024062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024066:	e03a      	b.n	80240de <scalbn+0xae>
 8024068:	f240 71ff 	movw	r1, #2047	; 0x7ff
 802406c:	428a      	cmp	r2, r1
 802406e:	d10c      	bne.n	802408a <scalbn+0x5a>
 8024070:	ee10 2a10 	vmov	r2, s0
 8024074:	4620      	mov	r0, r4
 8024076:	4629      	mov	r1, r5
 8024078:	f7dc f930 	bl	80002dc <__adddf3>
 802407c:	4604      	mov	r4, r0
 802407e:	460d      	mov	r5, r1
 8024080:	e019      	b.n	80240b6 <scalbn+0x86>
 8024082:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024086:	460b      	mov	r3, r1
 8024088:	3a36      	subs	r2, #54	; 0x36
 802408a:	4432      	add	r2, r6
 802408c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024090:	428a      	cmp	r2, r1
 8024092:	dd08      	ble.n	80240a6 <scalbn+0x76>
 8024094:	2d00      	cmp	r5, #0
 8024096:	a120      	add	r1, pc, #128	; (adr r1, 8024118 <scalbn+0xe8>)
 8024098:	e9d1 0100 	ldrd	r0, r1, [r1]
 802409c:	da1c      	bge.n	80240d8 <scalbn+0xa8>
 802409e:	a120      	add	r1, pc, #128	; (adr r1, 8024120 <scalbn+0xf0>)
 80240a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80240a4:	e018      	b.n	80240d8 <scalbn+0xa8>
 80240a6:	2a00      	cmp	r2, #0
 80240a8:	dd08      	ble.n	80240bc <scalbn+0x8c>
 80240aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80240ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80240b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80240b6:	ec45 4b10 	vmov	d0, r4, r5
 80240ba:	bd70      	pop	{r4, r5, r6, pc}
 80240bc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80240c0:	da19      	bge.n	80240f6 <scalbn+0xc6>
 80240c2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80240c6:	429e      	cmp	r6, r3
 80240c8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80240cc:	dd0a      	ble.n	80240e4 <scalbn+0xb4>
 80240ce:	a112      	add	r1, pc, #72	; (adr r1, 8024118 <scalbn+0xe8>)
 80240d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80240d4:	2b00      	cmp	r3, #0
 80240d6:	d1e2      	bne.n	802409e <scalbn+0x6e>
 80240d8:	a30f      	add	r3, pc, #60	; (adr r3, 8024118 <scalbn+0xe8>)
 80240da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240de:	f7dc fab3 	bl	8000648 <__aeabi_dmul>
 80240e2:	e7cb      	b.n	802407c <scalbn+0x4c>
 80240e4:	a10a      	add	r1, pc, #40	; (adr r1, 8024110 <scalbn+0xe0>)
 80240e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80240ea:	2b00      	cmp	r3, #0
 80240ec:	d0b8      	beq.n	8024060 <scalbn+0x30>
 80240ee:	a10e      	add	r1, pc, #56	; (adr r1, 8024128 <scalbn+0xf8>)
 80240f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80240f4:	e7b4      	b.n	8024060 <scalbn+0x30>
 80240f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80240fa:	3236      	adds	r2, #54	; 0x36
 80240fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024100:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024104:	4620      	mov	r0, r4
 8024106:	4b0c      	ldr	r3, [pc, #48]	; (8024138 <scalbn+0x108>)
 8024108:	2200      	movs	r2, #0
 802410a:	e7e8      	b.n	80240de <scalbn+0xae>
 802410c:	f3af 8000 	nop.w
 8024110:	c2f8f359 	.word	0xc2f8f359
 8024114:	01a56e1f 	.word	0x01a56e1f
 8024118:	8800759c 	.word	0x8800759c
 802411c:	7e37e43c 	.word	0x7e37e43c
 8024120:	8800759c 	.word	0x8800759c
 8024124:	fe37e43c 	.word	0xfe37e43c
 8024128:	c2f8f359 	.word	0xc2f8f359
 802412c:	81a56e1f 	.word	0x81a56e1f
 8024130:	43500000 	.word	0x43500000
 8024134:	ffff3cb0 	.word	0xffff3cb0
 8024138:	3c900000 	.word	0x3c900000

0802413c <_init>:
 802413c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802413e:	bf00      	nop
 8024140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024142:	bc08      	pop	{r3}
 8024144:	469e      	mov	lr, r3
 8024146:	4770      	bx	lr

08024148 <_fini>:
 8024148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802414a:	bf00      	nop
 802414c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802414e:	bc08      	pop	{r3}
 8024150:	469e      	mov	lr, r3
 8024152:	4770      	bx	lr
