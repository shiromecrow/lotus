
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021c5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  08021e40  08021e40  00031e40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022568  08022568  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  08022568  08022568  00032568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022570  08022570  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022570  08022570  00032570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022574  08022574  00032574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08022578  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000def4  200001fc  08022774  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e0f0  08022774  0004e0f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bc2  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fef  00000000  00000000  00067dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  0006dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf8  00000000  00000000  0006fdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028533  00000000  00000000  00071ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031dd8  00000000  00000000  00099fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2d8  00000000  00000000  000cbdbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b7093  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097f8  00000000  00000000  001b70e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08021e24 	.word	0x08021e24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08021e24 	.word	0x08021e24

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000248 	.word	0x20000248
 8001050:	2000024c 	.word	0x2000024c
 8001054:	20000258 	.word	0x20000258
 8001058:	2000025c 	.word	0x2000025c
 800105c:	20000260 	.word	0x20000260
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <interupt_calEncoder+0x348>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013b8 <interupt_calEncoder+0x350>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013bc <interupt_calEncoder+0x354>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013c0 <interupt_calEncoder+0x358>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013bc <interupt_calEncoder+0x354>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <interupt_calEncoder+0x35c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bbe      	ldr	r3, [pc, #760]	; (80013c8 <interupt_calEncoder+0x360>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013b8 <interupt_calEncoder+0x350>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013bc <interupt_calEncoder+0x354>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013c0 <interupt_calEncoder+0x358>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013bc <interupt_calEncoder+0x354>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a391      	add	r3, pc, #580	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <interupt_calEncoder+0x364>)
 8001140:	f7ff fbac 	bl	800089c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	a38a      	add	r3, pc, #552	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a388      	add	r3, pc, #544	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a385      	add	r3, pc, #532	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa67 	bl	8000648 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a383      	add	r3, pc, #524	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <interupt_calEncoder+0x368>)
 800119a:	f7ff fa55 	bl	8000648 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a37c      	add	r3, pc, #496	; (adr r3, 8001398 <interupt_calEncoder+0x330>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb76 	bl	800089c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <interupt_calEncoder+0x36c>)
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a370      	add	r3, pc, #448	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd02 	bl	8000bf8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <interupt_calEncoder+0x370>)
 80011f8:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9cc 	bl	8000598 <__aeabi_f2d>
 8001200:	a35b      	add	r3, pc, #364	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <interupt_calEncoder+0x364>)
 8001218:	f7ff fb40 	bl	800089c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a354      	add	r3, pc, #336	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa0d 	bl	8000648 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a352      	add	r3, pc, #328	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a34f      	add	r3, pc, #316	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a34d      	add	r3, pc, #308	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <interupt_calEncoder+0x368>)
 8001272:	f7ff f9e9 	bl	8000648 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a34a      	add	r3, pc, #296	; (adr r3, 80013a8 <interupt_calEncoder+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb0a 	bl	800089c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	f7ff fb00 	bl	800089c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <interupt_calEncoder+0x36c>)
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <interupt_calEncoder+0x374>)
 80012d0:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <interupt_calEncoder+0x378>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <interupt_calEncoder+0x370>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	a32d      	add	r3, pc, #180	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9aa 	bl	8000648 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffee 	bl	80002dc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc76 	bl	8000bf8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <interupt_calEncoder+0x378>)
 8001310:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <interupt_calEncoder+0x374>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a31d      	add	r3, pc, #116	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f98a 	bl	8000648 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001350:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <interupt_calEncoder+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <interupt_calEncoder+0x360>)
 8001358:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <interupt_calEncoder+0x348>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	54411744 	.word	0x54411744
 8001374:	400921fb 	.word	0x400921fb
 8001378:	4e70a65b 	.word	0x4e70a65b
 800137c:	3f882f36 	.word	0x3f882f36
 8001380:	a858793e 	.word	0xa858793e
 8001384:	3ff1cd35 	.word	0x3ff1cd35
 8001388:	00000000 	.word	0x00000000
 800138c:	4078c000 	.word	0x4078c000
 8001390:	147ae148 	.word	0x147ae148
 8001394:	4078fbae 	.word	0x4078fbae
 8001398:	0a3d70a4 	.word	0x0a3d70a4
 800139c:	4078efd7 	.word	0x4078efd7
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	5c28f5c3 	.word	0x5c28f5c3
 80013ac:	40792a8f 	.word	0x40792a8f
 80013b0:	200006d8 	.word	0x200006d8
 80013b4:	20000218 	.word	0x20000218
 80013b8:	43340000 	.word	0x43340000
 80013bc:	43b40000 	.word	0x43b40000
 80013c0:	c3340000 	.word	0xc3340000
 80013c4:	200006dc 	.word	0x200006dc
 80013c8:	2000021c 	.word	0x2000021c
 80013cc:	40668000 	.word	0x40668000
 80013d0:	40790000 	.word	0x40790000
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000228 	.word	0x20000228
 80013dc:	2000022c 	.word	0x2000022c
 80013e0:	20000220 	.word	0x20000220
 80013e4:	20000224 	.word	0x20000224

080013e8 <interupt_calFusion>:


void interupt_calFusion(void) {
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80013ee:	4ba4      	ldr	r3, [pc, #656]	; (8001680 <interupt_calFusion+0x298>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4ba3      	ldr	r3, [pc, #652]	; (8001684 <interupt_calFusion+0x29c>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4ba0      	ldr	r3, [pc, #640]	; (8001680 <interupt_calFusion+0x298>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	4b9e      	ldr	r3, [pc, #632]	; (8001688 <interupt_calFusion+0x2a0>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4b9a      	ldr	r3, [pc, #616]	; (8001684 <interupt_calFusion+0x29c>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001420:	4b97      	ldr	r3, [pc, #604]	; (8001680 <interupt_calFusion+0x298>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4b99      	ldr	r3, [pc, #612]	; (800168c <interupt_calFusion+0x2a4>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4b93      	ldr	r3, [pc, #588]	; (8001680 <interupt_calFusion+0x298>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143e:	4b94      	ldr	r3, [pc, #592]	; (8001690 <interupt_calFusion+0x2a8>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4b8f      	ldr	r3, [pc, #572]	; (800168c <interupt_calFusion+0x2a4>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 8001452:	4b90      	ldr	r3, [pc, #576]	; (8001694 <interupt_calFusion+0x2ac>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4b88      	ldr	r3, [pc, #544]	; (8001684 <interupt_calFusion+0x29c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	a383      	add	r3, pc, #524	; (adr r3, 8001678 <interupt_calFusion+0x290>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8ea 	bl	8000648 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff2e 	bl	80002dc <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbb6 	bl	8000bf8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4a81      	ldr	r2, [pc, #516]	; (8001694 <interupt_calFusion+0x2ac>)
 8001490:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 8001492:	4b81      	ldr	r3, [pc, #516]	; (8001698 <interupt_calFusion+0x2b0>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87e 	bl	8000598 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4b7a      	ldr	r3, [pc, #488]	; (800168c <interupt_calFusion+0x2a4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f877 	bl	8000598 <__aeabi_f2d>
 80014aa:	a373      	add	r3, pc, #460	; (adr r3, 8001678 <interupt_calFusion+0x290>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ca 	bl	8000648 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff0e 	bl	80002dc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a72      	ldr	r2, [pc, #456]	; (8001698 <interupt_calFusion+0x2b0>)
 80014d0:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 80014d2:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <interupt_calFusion+0x298>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b6e      	ldr	r3, [pc, #440]	; (800169c <interupt_calFusion+0x2b4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	4b6c      	ldr	r3, [pc, #432]	; (80016a0 <interupt_calFusion+0x2b8>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	a35f      	add	r3, pc, #380	; (adr r3, 8001678 <interupt_calFusion+0x290>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4640      	mov	r0, r8
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fee7 	bl	80002dc <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4614      	mov	r4, r2
 8001520:	461d      	mov	r5, r3
 8001522:	4b57      	ldr	r3, [pc, #348]	; (8001680 <interupt_calFusion+0x298>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800152c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001530:	4b55      	ldr	r3, [pc, #340]	; (8001688 <interupt_calFusion+0x2a0>)
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	ee17 0a90 	vmov	r0, s15
 800153e:	f7ff f82b 	bl	8000598 <__aeabi_f2d>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4620      	mov	r0, r4
 8001548:	4629      	mov	r1, r5
 800154a:	f7fe fec7 	bl	80002dc <__adddf3>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f7ff fb4f 	bl	8000bf8 <__aeabi_d2f>
 800155a:	4603      	mov	r3, r0
 800155c:	4a4f      	ldr	r2, [pc, #316]	; (800169c <interupt_calFusion+0x2b4>)
 800155e:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <interupt_calFusion+0x298>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f817 	bl	8000598 <__aeabi_f2d>
 800156a:	4604      	mov	r4, r0
 800156c:	460d      	mov	r5, r1
 800156e:	4b4b      	ldr	r3, [pc, #300]	; (800169c <interupt_calFusion+0x2b4>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f810 	bl	8000598 <__aeabi_f2d>
 8001578:	4680      	mov	r8, r0
 800157a:	4689      	mov	r9, r1
 800157c:	4b48      	ldr	r3, [pc, #288]	; (80016a0 <interupt_calFusion+0x2b8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff f809 	bl	8000598 <__aeabi_f2d>
 8001586:	a33c      	add	r3, pc, #240	; (adr r3, 8001678 <interupt_calFusion+0x290>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	f7ff f85c 	bl	8000648 <__aeabi_dmul>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	4640      	mov	r0, r8
 8001596:	4649      	mov	r1, r9
 8001598:	f7fe fea0 	bl	80002dc <__adddf3>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4614      	mov	r4, r2
 80015ae:	461d      	mov	r5, r3
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <interupt_calFusion+0x298>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <interupt_calFusion+0x2a8>)
 80015c0:	edd3 7a00 	vldr	s15, [r3]
 80015c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c8:	ee17 0a90 	vmov	r0, s15
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7fe fe80 	bl	80002dc <__adddf3>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	4610      	mov	r0, r2
 80015e2:	4619      	mov	r1, r3
 80015e4:	f7ff fb08 	bl	8000bf8 <__aeabi_d2f>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a2e      	ldr	r2, [pc, #184]	; (80016a4 <interupt_calFusion+0x2bc>)
 80015ec:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 80015ee:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <interupt_calFusion+0x2c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffd0 	bl	8000598 <__aeabi_f2d>
 80015f8:	4604      	mov	r4, r0
 80015fa:	460d      	mov	r5, r1
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <interupt_calFusion+0x2b4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ffc9 	bl	8000598 <__aeabi_f2d>
 8001606:	a31c      	add	r3, pc, #112	; (adr r3, 8001678 <interupt_calFusion+0x290>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7ff f81c 	bl	8000648 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4620      	mov	r0, r4
 8001616:	4629      	mov	r1, r5
 8001618:	f7fe fe60 	bl	80002dc <__adddf3>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fae8 	bl	8000bf8 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	4a1f      	ldr	r2, [pc, #124]	; (80016a8 <interupt_calFusion+0x2c0>)
 800162c:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 800162e:	4b1f      	ldr	r3, [pc, #124]	; (80016ac <interupt_calFusion+0x2c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ffb0 	bl	8000598 <__aeabi_f2d>
 8001638:	4604      	mov	r4, r0
 800163a:	460d      	mov	r5, r1
 800163c:	4b19      	ldr	r3, [pc, #100]	; (80016a4 <interupt_calFusion+0x2bc>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ffa9 	bl	8000598 <__aeabi_f2d>
 8001646:	a30c      	add	r3, pc, #48	; (adr r3, 8001678 <interupt_calFusion+0x290>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fffc 	bl	8000648 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7fe fe40 	bl	80002dc <__adddf3>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4610      	mov	r0, r2
 8001662:	4619      	mov	r1, r3
 8001664:	f7ff fac8 	bl	8000bf8 <__aeabi_d2f>
 8001668:	4603      	mov	r3, r0
 800166a:	4a10      	ldr	r2, [pc, #64]	; (80016ac <interupt_calFusion+0x2c4>)
 800166c:	6013      	str	r3, [r2, #0]

}
 800166e:	bf00      	nop
 8001670:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001674:	f3af 8000 	nop.w
 8001678:	d2f1a9fc 	.word	0xd2f1a9fc
 800167c:	3f50624d 	.word	0x3f50624d
 8001680:	20000260 	.word	0x20000260
 8001684:	20000238 	.word	0x20000238
 8001688:	20000228 	.word	0x20000228
 800168c:	2000023c 	.word	0x2000023c
 8001690:	2000022c 	.word	0x2000022c
 8001694:	20000230 	.word	0x20000230
 8001698:	20000234 	.word	0x20000234
 800169c:	20000258 	.word	0x20000258
 80016a0:	20000280 	.word	0x20000280
 80016a4:	2000025c 	.word	0x2000025c
 80016a8:	20000250 	.word	0x20000250
 80016ac:	20000254 	.word	0x20000254

080016b0 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
	int s = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
	angle = 0;
 80016ba:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <reset_gyro+0xfc>)
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <reset_gyro+0x100>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 80016ca:	2301      	movs	r3, #1
 80016cc:	607b      	str	r3, [r7, #4]
 80016ce:	e026      	b.n	800171e <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 80016d0:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <reset_gyro+0x104>)
 80016d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80016d6:	4b36      	ldr	r3, [pc, #216]	; (80017b0 <reset_gyro+0x100>)
 80016d8:	edd3 7a00 	vldr	s15, [r3]
 80016dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e0:	4b33      	ldr	r3, [pc, #204]	; (80017b0 <reset_gyro+0x100>)
 80016e2:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 80016e6:	4b33      	ldr	r3, [pc, #204]	; (80017b4 <reset_gyro+0x104>)
 80016e8:	ed93 7a00 	vldr	s14, [r3]
 80016ec:	4b32      	ldr	r3, [pc, #200]	; (80017b8 <reset_gyro+0x108>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <reset_gyro+0x108>)
 80016f8:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <reset_gyro+0x104>)
 80016fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8001702:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <reset_gyro+0x10c>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	4b2b      	ldr	r3, [pc, #172]	; (80017bc <reset_gyro+0x10c>)
 800170e:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f006 fc68 	bl	8007fe8 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3301      	adds	r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001724:	ddd4      	ble.n	80016d0 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <reset_gyro+0x100>)
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80017c0 <reset_gyro+0x110>
 8001730:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001734:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <reset_gyro+0x100>)
 8001736:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 800173a:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <reset_gyro+0x108>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80017c0 <reset_gyro+0x110>
 8001744:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001748:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <reset_gyro+0x108>)
 800174a:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 800174e:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <reset_gyro+0x10c>)
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80017c0 <reset_gyro+0x110>
 8001758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <reset_gyro+0x10c>)
 800175e:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001762:	4b12      	ldr	r3, [pc, #72]	; (80017ac <reset_gyro+0xfc>)
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
	anglex = 0;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <reset_gyro+0x114>)
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001772:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <reset_gyro+0x118>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <reset_gyro+0x11c>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e009      	b.n	800179c <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <reset_gyro+0x120>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3301      	adds	r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b09      	cmp	r3, #9
 80017a0:	ddf2      	ble.n	8001788 <reset_gyro+0xd8>
	}
}
 80017a2:	bf00      	nop
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000264 	.word	0x20000264
 80017b0:	20000288 	.word	0x20000288
 80017b4:	200006e4 	.word	0x200006e4
 80017b8:	20000284 	.word	0x20000284
 80017bc:	2000028c 	.word	0x2000028c
 80017c0:	447a0000 	.word	0x447a0000
 80017c4:	2000026c 	.word	0x2000026c
 80017c8:	20000278 	.word	0x20000278
 80017cc:	2000027c 	.word	0x2000027c
 80017d0:	20000290 	.word	0x20000290
 80017d4:	00000000 	.word	0x00000000

080017d8 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
	int j = 9;
 80017de:	2309      	movs	r3, #9
 80017e0:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 80017e2:	2309      	movs	r3, #9
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	e00d      	b.n	8001804 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	4aa6      	ldr	r2, [pc, #664]	; (8001a88 <interrupt_calGyro+0x2b0>)
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	4413      	add	r3, r2
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	49a4      	ldr	r1, [pc, #656]	; (8001a88 <interrupt_calGyro+0x2b0>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3b01      	subs	r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	dcee      	bgt.n	80017e8 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 800180a:	4ba0      	ldr	r3, [pc, #640]	; (8001a8c <interrupt_calGyro+0x2b4>)
 800180c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001810:	4b9f      	ldr	r3, [pc, #636]	; (8001a90 <interrupt_calGyro+0x2b8>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	ee17 0a90 	vmov	r0, s15
 800181e:	f7fe febb 	bl	8000598 <__aeabi_f2d>
 8001822:	a387      	add	r3, pc, #540	; (adr r3, 8001a40 <interrupt_calGyro+0x268>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe ff0e 	bl	8000648 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	a384      	add	r3, pc, #528	; (adr r3, 8001a48 <interrupt_calGyro+0x270>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	f7fe ff05 	bl	8000648 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	a382      	add	r3, pc, #520	; (adr r3, 8001a50 <interrupt_calGyro+0x278>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7ff f826 	bl	800089c <__aeabi_ddiv>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9ce 	bl	8000bf8 <__aeabi_d2f>
 800185c:	4603      	mov	r3, r0
 800185e:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <interrupt_calGyro+0x2b0>)
 8001860:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001862:	4b89      	ldr	r3, [pc, #548]	; (8001a88 <interrupt_calGyro+0x2b0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a8b      	ldr	r2, [pc, #556]	; (8001a94 <interrupt_calGyro+0x2bc>)
 8001868:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 800186a:	4b88      	ldr	r3, [pc, #544]	; (8001a8c <interrupt_calGyro+0x2b4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a8a      	ldr	r2, [pc, #552]	; (8001a98 <interrupt_calGyro+0x2c0>)
 8001870:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001872:	4b86      	ldr	r3, [pc, #536]	; (8001a8c <interrupt_calGyro+0x2b4>)
 8001874:	ed93 7a00 	vldr	s14, [r3]
 8001878:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <interrupt_calGyro+0x2c4>)
 800187a:	edd3 7a00 	vldr	s15, [r3]
 800187e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001882:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <interrupt_calGyro+0x2c8>)
 8001884:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001888:	4b86      	ldr	r3, [pc, #536]	; (8001aa4 <interrupt_calGyro+0x2cc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe83 	bl	8000598 <__aeabi_f2d>
 8001892:	4604      	mov	r4, r0
 8001894:	460d      	mov	r5, r1
 8001896:	4b7f      	ldr	r3, [pc, #508]	; (8001a94 <interrupt_calGyro+0x2bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe7c 	bl	8000598 <__aeabi_f2d>
 80018a0:	a36d      	add	r3, pc, #436	; (adr r3, 8001a58 <interrupt_calGyro+0x280>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fecf 	bl	8000648 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7fe fd13 	bl	80002dc <__adddf3>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4610      	mov	r0, r2
 80018bc:	4619      	mov	r1, r3
 80018be:	f7ff f99b 	bl	8000bf8 <__aeabi_d2f>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4a77      	ldr	r2, [pc, #476]	; (8001aa4 <interrupt_calGyro+0x2cc>)
 80018c6:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 80018c8:	4b77      	ldr	r3, [pc, #476]	; (8001aa8 <interrupt_calGyro+0x2d0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fe63 	bl	8000598 <__aeabi_f2d>
 80018d2:	4604      	mov	r4, r0
 80018d4:	460d      	mov	r5, r1
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <interrupt_calGyro+0x2b4>)
 80018d8:	ed93 7a00 	vldr	s14, [r3]
 80018dc:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <interrupt_calGyro+0x2c4>)
 80018de:	edd3 7a00 	vldr	s15, [r3]
 80018e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018e6:	ee17 0a90 	vmov	r0, s15
 80018ea:	f7fe fe55 	bl	8000598 <__aeabi_f2d>
 80018ee:	a35a      	add	r3, pc, #360	; (adr r3, 8001a58 <interrupt_calGyro+0x280>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fea8 	bl	8000648 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4620      	mov	r0, r4
 80018fe:	4629      	mov	r1, r5
 8001900:	f7fe fcec 	bl	80002dc <__adddf3>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	4610      	mov	r0, r2
 800190a:	4619      	mov	r1, r3
 800190c:	f7ff f974 	bl	8000bf8 <__aeabi_d2f>
 8001910:	4603      	mov	r3, r0
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <interrupt_calGyro+0x2d0>)
 8001914:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001916:	4b5d      	ldr	r3, [pc, #372]	; (8001a8c <interrupt_calGyro+0x2b4>)
 8001918:	ed93 7a04 	vldr	s14, [r3, #16]
 800191c:	4b63      	ldr	r3, [pc, #396]	; (8001aac <interrupt_calGyro+0x2d4>)
 800191e:	edd3 7a00 	vldr	s15, [r3]
 8001922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001926:	ee17 0a90 	vmov	r0, s15
 800192a:	f7fe fe35 	bl	8000598 <__aeabi_f2d>
 800192e:	a34c      	add	r3, pc, #304	; (adr r3, 8001a60 <interrupt_calGyro+0x288>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fe88 	bl	8000648 <__aeabi_dmul>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	a349      	add	r3, pc, #292	; (adr r3, 8001a68 <interrupt_calGyro+0x290>)
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	f7fe fe7f 	bl	8000648 <__aeabi_dmul>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	4610      	mov	r0, r2
 8001950:	4619      	mov	r1, r3
 8001952:	a347      	add	r3, pc, #284	; (adr r3, 8001a70 <interrupt_calGyro+0x298>)
 8001954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001958:	f7fe ffa0 	bl	800089c <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	4b51      	ldr	r3, [pc, #324]	; (8001ab0 <interrupt_calGyro+0x2d8>)
 800196a:	f7fe fe6d 	bl	8000648 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	a340      	add	r3, pc, #256	; (adr r3, 8001a78 <interrupt_calGyro+0x2a0>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe ff8e 	bl	800089c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <interrupt_calGyro+0x2dc>)
 800198e:	f7fe fe5b 	bl	8000648 <__aeabi_dmul>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	a339      	add	r3, pc, #228	; (adr r3, 8001a80 <interrupt_calGyro+0x2a8>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fe52 	bl	8000648 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f924 	bl	8000bf8 <__aeabi_d2f>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a41      	ldr	r2, [pc, #260]	; (8001ab8 <interrupt_calGyro+0x2e0>)
 80019b4:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 80019b6:	4b41      	ldr	r3, [pc, #260]	; (8001abc <interrupt_calGyro+0x2e4>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fdec 	bl	8000598 <__aeabi_f2d>
 80019c0:	4604      	mov	r4, r0
 80019c2:	460d      	mov	r5, r1
 80019c4:	4b3c      	ldr	r3, [pc, #240]	; (8001ab8 <interrupt_calGyro+0x2e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fde5 	bl	8000598 <__aeabi_f2d>
 80019ce:	a322      	add	r3, pc, #136	; (adr r3, 8001a58 <interrupt_calGyro+0x280>)
 80019d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d4:	f7fe fe38 	bl	8000648 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4620      	mov	r0, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	f7fe fc7c 	bl	80002dc <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f904 	bl	8000bf8 <__aeabi_d2f>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4a32      	ldr	r2, [pc, #200]	; (8001abc <interrupt_calGyro+0x2e4>)
 80019f4:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <interrupt_calGyro+0x2e8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdcc 	bl	8000598 <__aeabi_f2d>
 8001a00:	4604      	mov	r4, r0
 8001a02:	460d      	mov	r5, r1
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <interrupt_calGyro+0x2e4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fdc5 	bl	8000598 <__aeabi_f2d>
 8001a0e:	a312      	add	r3, pc, #72	; (adr r3, 8001a58 <interrupt_calGyro+0x280>)
 8001a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a14:	f7fe fe18 	bl	8000648 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	4629      	mov	r1, r5
 8001a20:	f7fe fc5c 	bl	80002dc <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8e4 	bl	8000bf8 <__aeabi_d2f>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4a23      	ldr	r2, [pc, #140]	; (8001ac0 <interrupt_calGyro+0x2e8>)
 8001a34:	6013      	str	r3, [r2, #0]




}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	70a3d70a 	.word	0x70a3d70a
 8001a44:	3fef0a3d 	.word	0x3fef0a3d
 8001a48:	00000000 	.word	0x00000000
 8001a4c:	40acd400 	.word	0x40acd400
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40ac2000 	.word	0x40ac2000
 8001a58:	d2f1a9fc 	.word	0xd2f1a9fc
 8001a5c:	3f50624d 	.word	0x3f50624d
 8001a60:	0fcf80dc 	.word	0x0fcf80dc
 8001a64:	3ff0a423 	.word	0x3ff0a423
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	4078c000 	.word	0x4078c000
 8001a70:	00000000 	.word	0x00000000
 8001a74:	4077d000 	.word	0x4077d000
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	407a7000 	.word	0x407a7000
 8001a80:	3a92a305 	.word	0x3a92a305
 8001a84:	40239d01 	.word	0x40239d01
 8001a88:	20000290 	.word	0x20000290
 8001a8c:	200006e4 	.word	0x200006e4
 8001a90:	20000288 	.word	0x20000288
 8001a94:	20000268 	.word	0x20000268
 8001a98:	20000270 	.word	0x20000270
 8001a9c:	20000284 	.word	0x20000284
 8001aa0:	20000274 	.word	0x20000274
 8001aa4:	20000264 	.word	0x20000264
 8001aa8:	2000026c 	.word	0x2000026c
 8001aac:	2000028c 	.word	0x2000028c
 8001ab0:	40790000 	.word	0x40790000
 8001ab4:	408f4000 	.word	0x408f4000
 8001ab8:	20000280 	.word	0x20000280
 8001abc:	20000278 	.word	0x20000278
 8001ac0:	2000027c 	.word	0x2000027c
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	e00f      	b.n	8001af4 <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001ad4:	f006 f82c 	bl	8007b30 <pl_getbatt>
 8001ad8:	eef0 7a40 	vmov.f32	s15, s0
 8001adc:	4a34      	ldr	r2, [pc, #208]	; (8001bb0 <battcheak+0xe8>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	4413      	add	r3, r2
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ae8:	200a      	movs	r0, #10
 8001aea:	f006 fa39 	bl	8007f60 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3301      	adds	r3, #1
 8001af2:	607b      	str	r3, [r7, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b13      	cmp	r3, #19
 8001af8:	ddec      	ble.n	8001ad4 <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001afa:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <battcheak+0xec>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	e010      	b.n	8001b2a <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001b08:	4a29      	ldr	r2, [pc, #164]	; (8001bb0 <battcheak+0xe8>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	4413      	add	r3, r2
 8001b10:	ed93 7a00 	vldr	s14, [r3]
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <battcheak+0xec>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <battcheak+0xec>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3301      	adds	r3, #1
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b13      	cmp	r3, #19
 8001b2e:	ddeb      	ble.n	8001b08 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <battcheak+0xec>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001b3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <battcheak+0xec>)
 8001b40:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <battcheak+0xec>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <battcheak+0xf0>)
 8001b54:	f01d fdd8 	bl	801f708 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <battcheak+0xec>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fd1b 	bl	8000598 <__aeabi_f2d>
 8001b62:	a311      	add	r3, pc, #68	; (adr r3, 8001ba8 <battcheak+0xe0>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe ffea 	bl	8000b40 <__aeabi_dcmple>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d100      	bne.n	8001b74 <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001b72:	e014      	b.n	8001b9e <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f005 fa61 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f005 fa70 	bl	8007060 <pl_l_blue_LED>
		wait_ms(500);
 8001b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b84:	f006 f9ec 	bl	8007f60 <wait_ms>
		pl_r_blue_LED(OFF);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f005 fa57 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f005 fa66 	bl	8007060 <pl_l_blue_LED>
		wait_ms(500);
 8001b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b98:	f006 f9e2 	bl	8007f60 <wait_ms>
		pl_r_blue_LED(ON);
 8001b9c:	e7ea      	b.n	8001b74 <battcheak+0xac>
}
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	f3af 8000 	nop.w
 8001ba8:	9999999a 	.word	0x9999999a
 8001bac:	400d9999 	.word	0x400d9999
 8001bb0:	20000484 	.word	0x20000484
 8001bb4:	200004d4 	.word	0x200004d4
 8001bb8:	08021e40 	.word	0x08021e40

08001bbc <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001bc2:	f006 f953 	bl	8007e6c <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001bc6:	2313      	movs	r3, #19
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	e037      	b.n	8001c3c <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	4a61      	ldr	r2, [pc, #388]	; (8001d58 <interupt_calSensor+0x19c>)
 8001bd2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bd6:	4960      	ldr	r1, [pc, #384]	; (8001d58 <interupt_calSensor+0x19c>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	4a5d      	ldr	r2, [pc, #372]	; (8001d58 <interupt_calSensor+0x19c>)
 8001be4:	3314      	adds	r3, #20
 8001be6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001bea:	495b      	ldr	r1, [pc, #364]	; (8001d58 <interupt_calSensor+0x19c>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3314      	adds	r3, #20
 8001bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	4a57      	ldr	r2, [pc, #348]	; (8001d58 <interupt_calSensor+0x19c>)
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c00:	4955      	ldr	r1, [pc, #340]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3328      	adds	r3, #40	; 0x28
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c10:	333c      	adds	r3, #60	; 0x3c
 8001c12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c16:	4950      	ldr	r1, [pc, #320]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	333c      	adds	r3, #60	; 0x3c
 8001c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c26:	3350      	adds	r3, #80	; 0x50
 8001c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c2c:	494a      	ldr	r1, [pc, #296]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3350      	adds	r3, #80	; 0x50
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dcc4      	bgt.n	8001bcc <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001c42:	4b46      	ldr	r3, [pc, #280]	; (8001d5c <interupt_calSensor+0x1a0>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b45      	ldr	r3, [pc, #276]	; (8001d60 <interupt_calSensor+0x1a4>)
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c50:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001c52:	4b42      	ldr	r3, [pc, #264]	; (8001d5c <interupt_calSensor+0x1a0>)
 8001c54:	885b      	ldrh	r3, [r3, #2]
 8001c56:	461a      	mov	r2, r3
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <interupt_calSensor+0x1a4>)
 8001c5a:	885b      	ldrh	r3, [r3, #2]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	4a3e      	ldr	r2, [pc, #248]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c60:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001c62:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <interupt_calSensor+0x1a0>)
 8001c64:	889b      	ldrh	r3, [r3, #4]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <interupt_calSensor+0x1a4>)
 8001c6a:	889b      	ldrh	r3, [r3, #4]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	4a3a      	ldr	r2, [pc, #232]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c70:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <interupt_calSensor+0x1a0>)
 8001c76:	88db      	ldrh	r3, [r3, #6]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b39      	ldr	r3, [pc, #228]	; (8001d60 <interupt_calSensor+0x1a4>)
 8001c7c:	88db      	ldrh	r3, [r3, #6]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	4a35      	ldr	r2, [pc, #212]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c82:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001c86:	4b35      	ldr	r3, [pc, #212]	; (8001d5c <interupt_calSensor+0x1a0>)
 8001c88:	891b      	ldrh	r3, [r3, #8]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4b34      	ldr	r3, [pc, #208]	; (8001d60 <interupt_calSensor+0x1a4>)
 8001c8e:	891b      	ldrh	r3, [r3, #8]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	4a31      	ldr	r2, [pc, #196]	; (8001d58 <interupt_calSensor+0x19c>)
 8001c94:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	e053      	b.n	8001d46 <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001c9e:	492e      	ldr	r1, [pc, #184]	; (8001d58 <interupt_calSensor+0x19c>)
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	440b      	add	r3, r1
 8001cac:	6819      	ldr	r1, [r3, #0]
 8001cae:	482a      	ldr	r0, [pc, #168]	; (8001d58 <interupt_calSensor+0x19c>)
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	011b      	lsls	r3, r3, #4
 8001cba:	4403      	add	r3, r0
 8001cbc:	332c      	adds	r3, #44	; 0x2c
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	1aca      	subs	r2, r1, r3
 8001cc2:	4928      	ldr	r1, [pc, #160]	; (8001d64 <interupt_calSensor+0x1a8>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
 8001cca:	4923      	ldr	r1, [pc, #140]	; (8001d58 <interupt_calSensor+0x19c>)
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	440b      	add	r3, r1
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	481f      	ldr	r0, [pc, #124]	; (8001d58 <interupt_calSensor+0x19c>)
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4403      	add	r3, r0
 8001ce8:	3318      	adds	r3, #24
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1aca      	subs	r2, r1, r3
 8001cee:	491e      	ldr	r1, [pc, #120]	; (8001d68 <interupt_calSensor+0x1ac>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001cf6:	4918      	ldr	r1, [pc, #96]	; (8001d58 <interupt_calSensor+0x19c>)
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4413      	add	r3, r2
 8001d00:	011b      	lsls	r3, r3, #4
 8001d02:	440b      	add	r3, r1
 8001d04:	6819      	ldr	r1, [r3, #0]
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <interupt_calSensor+0x19c>)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4403      	add	r3, r0
 8001d14:	3304      	adds	r3, #4
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4419      	add	r1, r3
 8001d1a:	480f      	ldr	r0, [pc, #60]	; (8001d58 <interupt_calSensor+0x19c>)
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	4403      	add	r3, r0
 8001d28:	3308      	adds	r3, #8
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	440b      	add	r3, r1
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <interupt_calSensor+0x1b0>)
 8001d30:	fb82 1203 	smull	r1, r2, r2, r3
 8001d34:	17db      	asrs	r3, r3, #31
 8001d36:	1ad2      	subs	r2, r2, r3
 8001d38:	490d      	ldr	r1, [pc, #52]	; (8001d70 <interupt_calSensor+0x1b4>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3301      	adds	r3, #1
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	dda8      	ble.n	8001c9e <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001d4c:	bf00      	nop
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200002b8 	.word	0x200002b8
 8001d5c:	2000070c 	.word	0x2000070c
 8001d60:	20000718 	.word	0x20000718
 8001d64:	20000448 	.word	0x20000448
 8001d68:	2000045c 	.word	0x2000045c
 8001d6c:	55555556 	.word	0x55555556
 8001d70:	20000470 	.word	0x20000470

08001d74 <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <Control_mode_Init+0x28>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <Control_mode_Init+0x2c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <Control_mode_Init+0x30>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <Control_mode_Init+0x34>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]

}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	20000528 	.word	0x20000528
 8001da0:	20000805 	.word	0x20000805
 8001da4:	20000800 	.word	0x20000800
 8001da8:	20000529 	.word	0x20000529

08001dac <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	ed87 0a03 	vstr	s0, [r7, #12]
 8001db6:	edc7 0a02 	vstr	s1, [r7, #8]
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	db14      	blt.n	8001df6 <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f005 fde3 	bl	8007998 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001dd2:	4b3d      	ldr	r3, [pc, #244]	; (8001ec8 <get_duty+0x11c>)
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001ecc <get_duty+0x120>
 8001de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dec:	ee17 2a90 	vmov	r2, s15
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	e015      	b.n	8001e22 <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001df6:	2002      	movs	r0, #2
 8001df8:	f005 fdce 	bl	8007998 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e00:	eef1 6a67 	vneg.f32	s13, s15
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <get_duty+0x11c>)
 8001e06:	ed93 7a00 	vldr	s14, [r3]
 8001e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ecc <get_duty+0x120>
 8001e12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e1a:	ee17 2a90 	vmov	r2, s15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001e22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2e:	db14      	blt.n	8001e5a <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f005 fdd9 	bl	80079e8 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <get_duty+0x11c>)
 8001e38:	ed93 7a00 	vldr	s14, [r3]
 8001e3c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e44:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001ecc <get_duty+0x120>
 8001e48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e50:	ee17 2a90 	vmov	r2, s15
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e015      	b.n	8001e86 <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001e5a:	2002      	movs	r0, #2
 8001e5c:	f005 fdc4 	bl	80079e8 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	eef1 6a67 	vneg.f32	s13, s15
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <get_duty+0x11c>)
 8001e6a:	ed93 7a00 	vldr	s14, [r3]
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001ecc <get_duty+0x120>
 8001e76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7e:	ee17 2a90 	vmov	r2, s15
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f240 628c 	movw	r2, #1676	; 0x68c
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	dd03      	ble.n	8001eaa <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ea8:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f240 628c 	movw	r2, #1676	; 0x68c
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	dd03      	ble.n	8001ebe <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ebc:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200004d4 	.word	0x200004d4
 8001ecc:	44d1e000 	.word	0x44d1e000

08001ed0 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ed4:	b08c      	sub	sp, #48	; 0x30
 8001ed6:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	f04f 0300 	mov.w	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001efe:	4bd2      	ldr	r3, [pc, #840]	; (8002248 <interupt_DriveMotor+0x378>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d108      	bne.n	8001f18 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f06:	4bd1      	ldr	r3, [pc, #836]	; (800224c <interupt_DriveMotor+0x37c>)
 8001f08:	2204      	movs	r2, #4
 8001f0a:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f0c:	4bd0      	ldr	r3, [pc, #832]	; (8002250 <interupt_DriveMotor+0x380>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f12:	4bd0      	ldr	r3, [pc, #832]	; (8002254 <interupt_DriveMotor+0x384>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001f18:	4bcb      	ldr	r3, [pc, #812]	; (8002248 <interupt_DriveMotor+0x378>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 828f 	bne.w	8002440 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001f22:	4bcc      	ldr	r3, [pc, #816]	; (8002254 <interupt_DriveMotor+0x384>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001f28:	4bcb      	ldr	r3, [pc, #812]	; (8002258 <interupt_DriveMotor+0x388>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	4aca      	ldr	r2, [pc, #808]	; (8002258 <interupt_DriveMotor+0x388>)
 8001f30:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001f32:	4bca      	ldr	r3, [pc, #808]	; (800225c <interupt_DriveMotor+0x38c>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fb2e 	bl	8000598 <__aeabi_f2d>
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	460d      	mov	r5, r1
 8001f40:	4bc6      	ldr	r3, [pc, #792]	; (800225c <interupt_DriveMotor+0x38c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7fe fb27 	bl	8000598 <__aeabi_f2d>
 8001f4a:	a3bb      	add	r3, pc, #748	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 8001f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f50:	f7fe fb7a 	bl	8000648 <__aeabi_dmul>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	4690      	mov	r8, r2
 8001f5a:	4699      	mov	r9, r3
 8001f5c:	4bbf      	ldr	r3, [pc, #764]	; (800225c <interupt_DriveMotor+0x38c>)
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fb19 	bl	8000598 <__aeabi_f2d>
 8001f66:	a3b4      	add	r3, pc, #720	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fb6c 	bl	8000648 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	a3af      	add	r3, pc, #700	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 8001f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7e:	f7fe fb63 	bl	8000648 <__aeabi_dmul>
 8001f82:	4602      	mov	r2, r0
 8001f84:	460b      	mov	r3, r1
 8001f86:	4610      	mov	r0, r2
 8001f88:	4619      	mov	r1, r3
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f92:	f7fe fc83 	bl	800089c <__aeabi_ddiv>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4640      	mov	r0, r8
 8001f9c:	4649      	mov	r1, r9
 8001f9e:	f7fe f99d 	bl	80002dc <__adddf3>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	4629      	mov	r1, r5
 8001faa:	f7fe f997 	bl	80002dc <__adddf3>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	f7fe fe1f 	bl	8000bf8 <__aeabi_d2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4aa7      	ldr	r2, [pc, #668]	; (800225c <interupt_DriveMotor+0x38c>)
 8001fbe:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8001fc0:	4ba6      	ldr	r3, [pc, #664]	; (800225c <interupt_DriveMotor+0x38c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fae7 	bl	8000598 <__aeabi_f2d>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	460d      	mov	r5, r1
 8001fce:	4ba3      	ldr	r3, [pc, #652]	; (800225c <interupt_DriveMotor+0x38c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fae0 	bl	8000598 <__aeabi_f2d>
 8001fd8:	a397      	add	r3, pc, #604	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fb33 	bl	8000648 <__aeabi_dmul>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4620      	mov	r0, r4
 8001fe8:	4629      	mov	r1, r5
 8001fea:	f7fe f977 	bl	80002dc <__adddf3>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7fe fdff 	bl	8000bf8 <__aeabi_d2f>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4a97      	ldr	r2, [pc, #604]	; (800225c <interupt_DriveMotor+0x38c>)
 8001ffe:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002000:	4b97      	ldr	r3, [pc, #604]	; (8002260 <interupt_DriveMotor+0x390>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fac7 	bl	8000598 <__aeabi_f2d>
 800200a:	4604      	mov	r4, r0
 800200c:	460d      	mov	r5, r1
 800200e:	4b94      	ldr	r3, [pc, #592]	; (8002260 <interupt_DriveMotor+0x390>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fac0 	bl	8000598 <__aeabi_f2d>
 8002018:	a387      	add	r3, pc, #540	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 800201a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201e:	f7fe fb13 	bl	8000648 <__aeabi_dmul>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4690      	mov	r8, r2
 8002028:	4699      	mov	r9, r3
 800202a:	4b8d      	ldr	r3, [pc, #564]	; (8002260 <interupt_DriveMotor+0x390>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fab2 	bl	8000598 <__aeabi_f2d>
 8002034:	a380      	add	r3, pc, #512	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 8002036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203a:	f7fe fb05 	bl	8000648 <__aeabi_dmul>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	a37c      	add	r3, pc, #496	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe fafc 	bl	8000648 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002060:	f7fe fc1c 	bl	800089c <__aeabi_ddiv>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4640      	mov	r0, r8
 800206a:	4649      	mov	r1, r9
 800206c:	f7fe f936 	bl	80002dc <__adddf3>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4620      	mov	r0, r4
 8002076:	4629      	mov	r1, r5
 8002078:	f7fe f930 	bl	80002dc <__adddf3>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fdb8 	bl	8000bf8 <__aeabi_d2f>
 8002088:	4603      	mov	r3, r0
 800208a:	4a75      	ldr	r2, [pc, #468]	; (8002260 <interupt_DriveMotor+0x390>)
 800208c:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800208e:	4b74      	ldr	r3, [pc, #464]	; (8002260 <interupt_DriveMotor+0x390>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fa80 	bl	8000598 <__aeabi_f2d>
 8002098:	4604      	mov	r4, r0
 800209a:	460d      	mov	r5, r1
 800209c:	4b70      	ldr	r3, [pc, #448]	; (8002260 <interupt_DriveMotor+0x390>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe fa79 	bl	8000598 <__aeabi_f2d>
 80020a6:	a364      	add	r3, pc, #400	; (adr r3, 8002238 <interupt_DriveMotor+0x368>)
 80020a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ac:	f7fe facc 	bl	8000648 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4620      	mov	r0, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	f7fe f910 	bl	80002dc <__adddf3>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f7fe fd98 	bl	8000bf8 <__aeabi_d2f>
 80020c8:	4603      	mov	r3, r0
 80020ca:	4a65      	ldr	r2, [pc, #404]	; (8002260 <interupt_DriveMotor+0x390>)
 80020cc:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <interupt_DriveMotor+0x394>)
 80020d0:	4a62      	ldr	r2, [pc, #392]	; (800225c <interupt_DriveMotor+0x38c>)
 80020d2:	9201      	str	r2, [sp, #4]
 80020d4:	691a      	ldr	r2, [r3, #16]
 80020d6:	9200      	str	r2, [sp, #0]
 80020d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020da:	f006 f93f 	bl	800835c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80020de:	4b5f      	ldr	r3, [pc, #380]	; (800225c <interupt_DriveMotor+0x38c>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	4b5e      	ldr	r3, [pc, #376]	; (8002260 <interupt_DriveMotor+0x390>)
 80020e6:	ed93 7a00 	vldr	s14, [r3]
 80020ea:	f107 020c 	add.w	r2, r7, #12
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	eef0 0a47 	vmov.f32	s1, s14
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f002 fb59 	bl	80047b4 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002102:	4b59      	ldr	r3, [pc, #356]	; (8002268 <interupt_DriveMotor+0x398>)
 8002104:	ed93 7a00 	vldr	s14, [r3]
 8002108:	4b58      	ldr	r3, [pc, #352]	; (800226c <interupt_DriveMotor+0x39c>)
 800210a:	edd3 7a00 	vldr	s15, [r3]
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002116:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800211a:	4b50      	ldr	r3, [pc, #320]	; (800225c <interupt_DriveMotor+0x38c>)
 800211c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <interupt_DriveMotor+0x3a0>)
 8002122:	edd3 6a00 	vldr	s13, [r3]
 8002126:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <interupt_DriveMotor+0x390>)
 8002128:	ed93 6a01 	vldr	s12, [r3, #4]
 800212c:	1d3a      	adds	r2, r7, #4
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	eef0 1a46 	vmov.f32	s3, s12
 8002136:	eeb0 1a66 	vmov.f32	s2, s13
 800213a:	4611      	mov	r1, r2
 800213c:	eef0 0a67 	vmov.f32	s1, s15
 8002140:	eeb0 0a47 	vmov.f32	s0, s14
 8002144:	4618      	mov	r0, r3
 8002146:	f002 f88f 	bl	8004268 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800214a:	f002 fd29 	bl	8004ba0 <calWallConrol>
 800214e:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 8002152:	ed97 7a04 	vldr	s14, [r7, #16]
 8002156:	edd7 7a03 	vldr	s15, [r7, #12]
 800215a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800215e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002162:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002166:	edd7 7a02 	vldr	s15, [r7, #8]
 800216a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800216e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002176:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 800217a:	ed97 7a04 	vldr	s14, [r7, #16]
 800217e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002182:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002186:	edd7 7a07 	vldr	s15, [r7, #28]
 800218a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002196:	edd7 7a01 	vldr	s15, [r7, #4]
 800219a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219e:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80021a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80021a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80021aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ae:	ee17 0a90 	vmov	r0, s15
 80021b2:	f7fe f9f1 	bl	8000598 <__aeabi_f2d>
 80021b6:	4604      	mov	r4, r0
 80021b8:	460d      	mov	r5, r1
 80021ba:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <interupt_DriveMotor+0x3a4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe f9ea 	bl	8000598 <__aeabi_f2d>
 80021c4:	a31e      	add	r3, pc, #120	; (adr r3, 8002240 <interupt_DriveMotor+0x370>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa3d 	bl	8000648 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4620      	mov	r0, r4
 80021d4:	4629      	mov	r1, r5
 80021d6:	f7fe fcc7 	bl	8000b68 <__aeabi_dcmpgt>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 808d 	beq.w	80022fc <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80021e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80021e4:	f7fe f9d8 	bl	8000598 <__aeabi_f2d>
 80021e8:	4604      	mov	r4, r0
 80021ea:	460d      	mov	r5, r1
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <interupt_DriveMotor+0x3a4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9d1 	bl	8000598 <__aeabi_f2d>
 80021f6:	a312      	add	r3, pc, #72	; (adr r3, 8002240 <interupt_DriveMotor+0x370>)
 80021f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021fc:	f7fe fa24 	bl	8000648 <__aeabi_dmul>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4690      	mov	r8, r2
 8002206:	4699      	mov	r9, r3
 8002208:	ed97 7a04 	vldr	s14, [r7, #16]
 800220c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002214:	ee17 0a90 	vmov	r0, s15
 8002218:	f7fe f9be 	bl	8000598 <__aeabi_f2d>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4640      	mov	r0, r8
 8002222:	4649      	mov	r1, r9
 8002224:	f7fe f858 	bl	80002d8 <__aeabi_dsub>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4620      	mov	r0, r4
 800222e:	4629      	mov	r1, r5
 8002230:	e022      	b.n	8002278 <interupt_DriveMotor+0x3a8>
 8002232:	bf00      	nop
 8002234:	f3af 8000 	nop.w
 8002238:	d2f1a9fc 	.word	0xd2f1a9fc
 800223c:	3f50624d 	.word	0x3f50624d
 8002240:	d916872b 	.word	0xd916872b
 8002244:	3feff7ce 	.word	0x3feff7ce
 8002248:	20000528 	.word	0x20000528
 800224c:	20000804 	.word	0x20000804
 8002250:	20000590 	.word	0x20000590
 8002254:	20000592 	.word	0x20000592
 8002258:	20000524 	.word	0x20000524
 800225c:	200004d8 	.word	0x200004d8
 8002260:	200004e4 	.word	0x200004e4
 8002264:	200004f0 	.word	0x200004f0
 8002268:	20000238 	.word	0x20000238
 800226c:	2000023c 	.word	0x2000023c
 8002270:	20000268 	.word	0x20000268
 8002274:	200004d4 	.word	0x200004d4
 8002278:	f7fe f830 	bl	80002dc <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	f7fe fcb8 	bl	8000bf8 <__aeabi_d2f>
 8002288:	4603      	mov	r3, r0
 800228a:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800228c:	6a38      	ldr	r0, [r7, #32]
 800228e:	f7fe f983 	bl	8000598 <__aeabi_f2d>
 8002292:	4604      	mov	r4, r0
 8002294:	460d      	mov	r5, r1
 8002296:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <interupt_DriveMotor+0x428>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe f97c 	bl	8000598 <__aeabi_f2d>
 80022a0:	a313      	add	r3, pc, #76	; (adr r3, 80022f0 <interupt_DriveMotor+0x420>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	f7fe f9cf 	bl	8000648 <__aeabi_dmul>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4690      	mov	r8, r2
 80022b0:	4699      	mov	r9, r3
 80022b2:	ed97 7a04 	vldr	s14, [r7, #16]
 80022b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80022ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022be:	ee17 0a90 	vmov	r0, s15
 80022c2:	f7fe f969 	bl	8000598 <__aeabi_f2d>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4640      	mov	r0, r8
 80022cc:	4649      	mov	r1, r9
 80022ce:	f7fe f803 	bl	80002d8 <__aeabi_dsub>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fd ffff 	bl	80002dc <__adddf3>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4610      	mov	r0, r2
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7fe fc87 	bl	8000bf8 <__aeabi_d2f>
 80022ea:	4603      	mov	r3, r0
 80022ec:	623b      	str	r3, [r7, #32]
 80022ee:	e095      	b.n	800241c <interupt_DriveMotor+0x54c>
 80022f0:	d916872b 	.word	0xd916872b
 80022f4:	3feff7ce 	.word	0x3feff7ce
 80022f8:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80022fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002300:	edd7 7a02 	vldr	s15, [r7, #8]
 8002304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002308:	ee17 0a90 	vmov	r0, s15
 800230c:	f7fe f944 	bl	8000598 <__aeabi_f2d>
 8002310:	4604      	mov	r4, r0
 8002312:	460d      	mov	r5, r1
 8002314:	4bce      	ldr	r3, [pc, #824]	; (8002650 <interupt_DriveMotor+0x780>)
 8002316:	edd3 7a00 	vldr	s15, [r3]
 800231a:	eef1 7a67 	vneg.f32	s15, s15
 800231e:	ee17 3a90 	vmov	r3, s15
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	a3c5      	add	r3, pc, #788	; (adr r3, 8002640 <interupt_DriveMotor+0x770>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4620      	mov	r0, r4
 8002338:	4629      	mov	r1, r5
 800233a:	f7fe fbf7 	bl	8000b2c <__aeabi_dcmplt>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d06b      	beq.n	800241c <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002344:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002346:	f7fe f927 	bl	8000598 <__aeabi_f2d>
 800234a:	4604      	mov	r4, r0
 800234c:	460d      	mov	r5, r1
 800234e:	4bc0      	ldr	r3, [pc, #768]	; (8002650 <interupt_DriveMotor+0x780>)
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	eef1 7a67 	vneg.f32	s15, s15
 8002358:	ee17 3a90 	vmov	r3, s15
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f91b 	bl	8000598 <__aeabi_f2d>
 8002362:	a3b7      	add	r3, pc, #732	; (adr r3, 8002640 <interupt_DriveMotor+0x770>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f96e 	bl	8000648 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4690      	mov	r8, r2
 8002372:	4699      	mov	r9, r3
 8002374:	ed97 7a04 	vldr	s14, [r7, #16]
 8002378:	edd7 7a02 	vldr	s15, [r7, #8]
 800237c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002380:	ee17 0a90 	vmov	r0, s15
 8002384:	f7fe f908 	bl	8000598 <__aeabi_f2d>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4640      	mov	r0, r8
 800238e:	4649      	mov	r1, r9
 8002390:	f7fd ffa2 	bl	80002d8 <__aeabi_dsub>
 8002394:	4602      	mov	r2, r0
 8002396:	460b      	mov	r3, r1
 8002398:	4620      	mov	r0, r4
 800239a:	4629      	mov	r1, r5
 800239c:	f7fd ff9e 	bl	80002dc <__adddf3>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	4610      	mov	r0, r2
 80023a6:	4619      	mov	r1, r3
 80023a8:	f7fe fc26 	bl	8000bf8 <__aeabi_d2f>
 80023ac:	4603      	mov	r3, r0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023b0:	6a38      	ldr	r0, [r7, #32]
 80023b2:	f7fe f8f1 	bl	8000598 <__aeabi_f2d>
 80023b6:	4604      	mov	r4, r0
 80023b8:	460d      	mov	r5, r1
 80023ba:	4ba5      	ldr	r3, [pc, #660]	; (8002650 <interupt_DriveMotor+0x780>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	eef1 7a67 	vneg.f32	s15, s15
 80023c4:	ee17 3a90 	vmov	r3, s15
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8e5 	bl	8000598 <__aeabi_f2d>
 80023ce:	a39c      	add	r3, pc, #624	; (adr r3, 8002640 <interupt_DriveMotor+0x770>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fe f938 	bl	8000648 <__aeabi_dmul>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4690      	mov	r8, r2
 80023de:	4699      	mov	r9, r3
 80023e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80023e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ec:	ee17 0a90 	vmov	r0, s15
 80023f0:	f7fe f8d2 	bl	8000598 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4640      	mov	r0, r8
 80023fa:	4649      	mov	r1, r9
 80023fc:	f7fd ff6c 	bl	80002d8 <__aeabi_dsub>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4620      	mov	r0, r4
 8002406:	4629      	mov	r1, r5
 8002408:	f7fd ff68 	bl	80002dc <__adddf3>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4610      	mov	r0, r2
 8002412:	4619      	mov	r1, r3
 8002414:	f7fe fbf0 	bl	8000bf8 <__aeabi_d2f>
 8002418:	4603      	mov	r3, r0
 800241a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800241c:	f107 0214 	add.w	r2, r7, #20
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	edd7 0a08 	vldr	s1, [r7, #32]
 800242c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002430:	f7ff fcbc 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4611      	mov	r1, r2
 800243a:	4618      	mov	r0, r3
 800243c:	f005 fb16 	bl	8007a6c <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <interupt_DriveMotor+0x784>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d004      	beq.n	8002452 <interupt_DriveMotor+0x582>
 8002448:	4b82      	ldr	r3, [pc, #520]	; (8002654 <interupt_DriveMotor+0x784>)
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b04      	cmp	r3, #4
 800244e:	f040 8287 	bne.w	8002960 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <interupt_DriveMotor+0x788>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002458:	4b80      	ldr	r3, [pc, #512]	; (800265c <interupt_DriveMotor+0x78c>)
 800245a:	2200      	movs	r2, #0
 800245c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 800245e:	4b80      	ldr	r3, [pc, #512]	; (8002660 <interupt_DriveMotor+0x790>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	4a7e      	ldr	r2, [pc, #504]	; (8002660 <interupt_DriveMotor+0x790>)
 8002466:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002468:	4b7e      	ldr	r3, [pc, #504]	; (8002664 <interupt_DriveMotor+0x794>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f893 	bl	8000598 <__aeabi_f2d>
 8002472:	4604      	mov	r4, r0
 8002474:	460d      	mov	r5, r1
 8002476:	4b7b      	ldr	r3, [pc, #492]	; (8002664 <interupt_DriveMotor+0x794>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe f88c 	bl	8000598 <__aeabi_f2d>
 8002480:	a371      	add	r3, pc, #452	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fe f8df 	bl	8000648 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	4690      	mov	r8, r2
 8002490:	4699      	mov	r9, r3
 8002492:	4b74      	ldr	r3, [pc, #464]	; (8002664 <interupt_DriveMotor+0x794>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe f87e 	bl	8000598 <__aeabi_f2d>
 800249c:	a36a      	add	r3, pc, #424	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 800249e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a2:	f7fe f8d1 	bl	8000648 <__aeabi_dmul>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	a366      	add	r3, pc, #408	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f7fe f8c8 	bl	8000648 <__aeabi_dmul>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4610      	mov	r0, r2
 80024be:	4619      	mov	r1, r3
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024c8:	f7fe f9e8 	bl	800089c <__aeabi_ddiv>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4640      	mov	r0, r8
 80024d2:	4649      	mov	r1, r9
 80024d4:	f7fd ff02 	bl	80002dc <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4620      	mov	r0, r4
 80024de:	4629      	mov	r1, r5
 80024e0:	f7fd fefc 	bl	80002dc <__adddf3>
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	4610      	mov	r0, r2
 80024ea:	4619      	mov	r1, r3
 80024ec:	f7fe fb84 	bl	8000bf8 <__aeabi_d2f>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4a5c      	ldr	r2, [pc, #368]	; (8002664 <interupt_DriveMotor+0x794>)
 80024f4:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80024f6:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <interupt_DriveMotor+0x794>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f84c 	bl	8000598 <__aeabi_f2d>
 8002500:	4604      	mov	r4, r0
 8002502:	460d      	mov	r5, r1
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <interupt_DriveMotor+0x794>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	f7fe f845 	bl	8000598 <__aeabi_f2d>
 800250e:	a34e      	add	r3, pc, #312	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 8002510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002514:	f7fe f898 	bl	8000648 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fd fedc 	bl	80002dc <__adddf3>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe fb64 	bl	8000bf8 <__aeabi_d2f>
 8002530:	4603      	mov	r3, r0
 8002532:	4a4c      	ldr	r2, [pc, #304]	; (8002664 <interupt_DriveMotor+0x794>)
 8002534:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002536:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <interupt_DriveMotor+0x798>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe f82c 	bl	8000598 <__aeabi_f2d>
 8002540:	4604      	mov	r4, r0
 8002542:	460d      	mov	r5, r1
 8002544:	4b48      	ldr	r3, [pc, #288]	; (8002668 <interupt_DriveMotor+0x798>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4618      	mov	r0, r3
 800254a:	f7fe f825 	bl	8000598 <__aeabi_f2d>
 800254e:	a33e      	add	r3, pc, #248	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fe f878 	bl	8000648 <__aeabi_dmul>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4690      	mov	r8, r2
 800255e:	4699      	mov	r9, r3
 8002560:	4b41      	ldr	r3, [pc, #260]	; (8002668 <interupt_DriveMotor+0x798>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe f817 	bl	8000598 <__aeabi_f2d>
 800256a:	a337      	add	r3, pc, #220	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f86a 	bl	8000648 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	a332      	add	r3, pc, #200	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 800257e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002582:	f7fe f861 	bl	8000648 <__aeabi_dmul>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002596:	f7fe f981 	bl	800089c <__aeabi_ddiv>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4640      	mov	r0, r8
 80025a0:	4649      	mov	r1, r9
 80025a2:	f7fd fe9b 	bl	80002dc <__adddf3>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4620      	mov	r0, r4
 80025ac:	4629      	mov	r1, r5
 80025ae:	f7fd fe95 	bl	80002dc <__adddf3>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe fb1d 	bl	8000bf8 <__aeabi_d2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	4a29      	ldr	r2, [pc, #164]	; (8002668 <interupt_DriveMotor+0x798>)
 80025c2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80025c4:	4b28      	ldr	r3, [pc, #160]	; (8002668 <interupt_DriveMotor+0x798>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fd ffe5 	bl	8000598 <__aeabi_f2d>
 80025ce:	4604      	mov	r4, r0
 80025d0:	460d      	mov	r5, r1
 80025d2:	4b25      	ldr	r3, [pc, #148]	; (8002668 <interupt_DriveMotor+0x798>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffde 	bl	8000598 <__aeabi_f2d>
 80025dc:	a31a      	add	r3, pc, #104	; (adr r3, 8002648 <interupt_DriveMotor+0x778>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	f7fe f831 	bl	8000648 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4620      	mov	r0, r4
 80025ec:	4629      	mov	r1, r5
 80025ee:	f7fd fe75 	bl	80002dc <__adddf3>
 80025f2:	4602      	mov	r2, r0
 80025f4:	460b      	mov	r3, r1
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f7fe fafd 	bl	8000bf8 <__aeabi_d2f>
 80025fe:	4603      	mov	r3, r0
 8002600:	4a19      	ldr	r2, [pc, #100]	; (8002668 <interupt_DriveMotor+0x798>)
 8002602:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <interupt_DriveMotor+0x79c>)
 8002606:	4a18      	ldr	r2, [pc, #96]	; (8002668 <interupt_DriveMotor+0x798>)
 8002608:	9201      	str	r2, [sp, #4]
 800260a:	691a      	ldr	r2, [r3, #16]
 800260c:	9200      	str	r2, [sp, #0]
 800260e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002610:	f005 fea4 	bl	800835c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002614:	4b13      	ldr	r3, [pc, #76]	; (8002664 <interupt_DriveMotor+0x794>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <interupt_DriveMotor+0x798>)
 800261c:	ed93 7a00 	vldr	s14, [r3]
 8002620:	f107 020c 	add.w	r2, r7, #12
 8002624:	f107 0310 	add.w	r3, r7, #16
 8002628:	eef0 0a47 	vmov.f32	s1, s14
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	4611      	mov	r1, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f002 f8be 	bl	80047b4 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002638:	4b0d      	ldr	r3, [pc, #52]	; (8002670 <interupt_DriveMotor+0x7a0>)
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	e019      	b.n	8002674 <interupt_DriveMotor+0x7a4>
 8002640:	d916872b 	.word	0xd916872b
 8002644:	3feff7ce 	.word	0x3feff7ce
 8002648:	d2f1a9fc 	.word	0xd2f1a9fc
 800264c:	3f50624d 	.word	0x3f50624d
 8002650:	200004d4 	.word	0x200004d4
 8002654:	20000528 	.word	0x20000528
 8002658:	20000590 	.word	0x20000590
 800265c:	20000592 	.word	0x20000592
 8002660:	20000524 	.word	0x20000524
 8002664:	200004d8 	.word	0x200004d8
 8002668:	200004e4 	.word	0x200004e4
 800266c:	20000504 	.word	0x20000504
 8002670:	20000238 	.word	0x20000238
 8002674:	4b64      	ldr	r3, [pc, #400]	; (8002808 <interupt_DriveMotor+0x938>)
 8002676:	edd3 7a00 	vldr	s15, [r3]
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002682:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002686:	4b61      	ldr	r3, [pc, #388]	; (800280c <interupt_DriveMotor+0x93c>)
 8002688:	edd3 7a01 	vldr	s15, [r3, #4]
 800268c:	4b60      	ldr	r3, [pc, #384]	; (8002810 <interupt_DriveMotor+0x940>)
 800268e:	edd3 6a00 	vldr	s13, [r3]
 8002692:	4b60      	ldr	r3, [pc, #384]	; (8002814 <interupt_DriveMotor+0x944>)
 8002694:	ed93 6a01 	vldr	s12, [r3, #4]
 8002698:	1d3a      	adds	r2, r7, #4
 800269a:	f107 0308 	add.w	r3, r7, #8
 800269e:	eef0 1a46 	vmov.f32	s3, s12
 80026a2:	eeb0 1a66 	vmov.f32	s2, s13
 80026a6:	4611      	mov	r1, r2
 80026a8:	eef0 0a67 	vmov.f32	s1, s15
 80026ac:	eeb0 0a47 	vmov.f32	s0, s14
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 fdd9 	bl	8004268 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80026b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80026ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80026be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80026d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80026da:	edd7 7a03 	vldr	s15, [r7, #12]
 80026de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80026e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80026ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f2:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80026f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80026fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80026fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002702:	ee17 0a90 	vmov	r0, s15
 8002706:	f7fd ff47 	bl	8000598 <__aeabi_f2d>
 800270a:	4604      	mov	r4, r0
 800270c:	460d      	mov	r5, r1
 800270e:	4b42      	ldr	r3, [pc, #264]	; (8002818 <interupt_DriveMotor+0x948>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7fd ff40 	bl	8000598 <__aeabi_f2d>
 8002718:	a339      	add	r3, pc, #228	; (adr r3, 8002800 <interupt_DriveMotor+0x930>)
 800271a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800271e:	f7fd ff93 	bl	8000648 <__aeabi_dmul>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fe fa1d 	bl	8000b68 <__aeabi_dcmpgt>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d073      	beq.n	800281c <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002734:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002736:	f7fd ff2f 	bl	8000598 <__aeabi_f2d>
 800273a:	4604      	mov	r4, r0
 800273c:	460d      	mov	r5, r1
 800273e:	4b36      	ldr	r3, [pc, #216]	; (8002818 <interupt_DriveMotor+0x948>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7fd ff28 	bl	8000598 <__aeabi_f2d>
 8002748:	a32d      	add	r3, pc, #180	; (adr r3, 8002800 <interupt_DriveMotor+0x930>)
 800274a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800274e:	f7fd ff7b 	bl	8000648 <__aeabi_dmul>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4690      	mov	r8, r2
 8002758:	4699      	mov	r9, r3
 800275a:	ed97 7a04 	vldr	s14, [r7, #16]
 800275e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002766:	ee17 0a90 	vmov	r0, s15
 800276a:	f7fd ff15 	bl	8000598 <__aeabi_f2d>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4640      	mov	r0, r8
 8002774:	4649      	mov	r1, r9
 8002776:	f7fd fdaf 	bl	80002d8 <__aeabi_dsub>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4620      	mov	r0, r4
 8002780:	4629      	mov	r1, r5
 8002782:	f7fd fdab 	bl	80002dc <__adddf3>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4610      	mov	r0, r2
 800278c:	4619      	mov	r1, r3
 800278e:	f7fe fa33 	bl	8000bf8 <__aeabi_d2f>
 8002792:	4603      	mov	r3, r0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002796:	6a38      	ldr	r0, [r7, #32]
 8002798:	f7fd fefe 	bl	8000598 <__aeabi_f2d>
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <interupt_DriveMotor+0x948>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fef7 	bl	8000598 <__aeabi_f2d>
 80027aa:	a315      	add	r3, pc, #84	; (adr r3, 8002800 <interupt_DriveMotor+0x930>)
 80027ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b0:	f7fd ff4a 	bl	8000648 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4690      	mov	r8, r2
 80027ba:	4699      	mov	r9, r3
 80027bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80027c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c8:	ee17 0a90 	vmov	r0, s15
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4640      	mov	r0, r8
 80027d6:	4649      	mov	r1, r9
 80027d8:	f7fd fd7e 	bl	80002d8 <__aeabi_dsub>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4620      	mov	r0, r4
 80027e2:	4629      	mov	r1, r5
 80027e4:	f7fd fd7a 	bl	80002dc <__adddf3>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f7fe fa02 	bl	8000bf8 <__aeabi_d2f>
 80027f4:	4603      	mov	r3, r0
 80027f6:	623b      	str	r3, [r7, #32]
 80027f8:	e0a0      	b.n	800293c <interupt_DriveMotor+0xa6c>
 80027fa:	bf00      	nop
 80027fc:	f3af 8000 	nop.w
 8002800:	d916872b 	.word	0xd916872b
 8002804:	3feff7ce 	.word	0x3feff7ce
 8002808:	2000023c 	.word	0x2000023c
 800280c:	200004d8 	.word	0x200004d8
 8002810:	20000268 	.word	0x20000268
 8002814:	200004e4 	.word	0x200004e4
 8002818:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800281c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002820:	edd7 7a02 	vldr	s15, [r7, #8]
 8002824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002828:	ee17 0a90 	vmov	r0, s15
 800282c:	f7fd feb4 	bl	8000598 <__aeabi_f2d>
 8002830:	4604      	mov	r4, r0
 8002832:	460d      	mov	r5, r1
 8002834:	4bd6      	ldr	r3, [pc, #856]	; (8002b90 <interupt_DriveMotor+0xcc0>)
 8002836:	edd3 7a00 	vldr	s15, [r3]
 800283a:	eef1 7a67 	vneg.f32	s15, s15
 800283e:	ee17 3a90 	vmov	r3, s15
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fea8 	bl	8000598 <__aeabi_f2d>
 8002848:	a3cd      	add	r3, pc, #820	; (adr r3, 8002b80 <interupt_DriveMotor+0xcb0>)
 800284a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284e:	f7fd fefb 	bl	8000648 <__aeabi_dmul>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4620      	mov	r0, r4
 8002858:	4629      	mov	r1, r5
 800285a:	f7fe f967 	bl	8000b2c <__aeabi_dcmplt>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d06b      	beq.n	800293c <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002866:	f7fd fe97 	bl	8000598 <__aeabi_f2d>
 800286a:	4604      	mov	r4, r0
 800286c:	460d      	mov	r5, r1
 800286e:	4bc8      	ldr	r3, [pc, #800]	; (8002b90 <interupt_DriveMotor+0xcc0>)
 8002870:	edd3 7a00 	vldr	s15, [r3]
 8002874:	eef1 7a67 	vneg.f32	s15, s15
 8002878:	ee17 3a90 	vmov	r3, s15
 800287c:	4618      	mov	r0, r3
 800287e:	f7fd fe8b 	bl	8000598 <__aeabi_f2d>
 8002882:	a3bf      	add	r3, pc, #764	; (adr r3, 8002b80 <interupt_DriveMotor+0xcb0>)
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f7fd fede 	bl	8000648 <__aeabi_dmul>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4690      	mov	r8, r2
 8002892:	4699      	mov	r9, r3
 8002894:	ed97 7a04 	vldr	s14, [r7, #16]
 8002898:	edd7 7a02 	vldr	s15, [r7, #8]
 800289c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a0:	ee17 0a90 	vmov	r0, s15
 80028a4:	f7fd fe78 	bl	8000598 <__aeabi_f2d>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4640      	mov	r0, r8
 80028ae:	4649      	mov	r1, r9
 80028b0:	f7fd fd12 	bl	80002d8 <__aeabi_dsub>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4620      	mov	r0, r4
 80028ba:	4629      	mov	r1, r5
 80028bc:	f7fd fd0e 	bl	80002dc <__adddf3>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe f996 	bl	8000bf8 <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028d0:	6a38      	ldr	r0, [r7, #32]
 80028d2:	f7fd fe61 	bl	8000598 <__aeabi_f2d>
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
 80028da:	4bad      	ldr	r3, [pc, #692]	; (8002b90 <interupt_DriveMotor+0xcc0>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	eef1 7a67 	vneg.f32	s15, s15
 80028e4:	ee17 3a90 	vmov	r3, s15
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fe55 	bl	8000598 <__aeabi_f2d>
 80028ee:	a3a4      	add	r3, pc, #656	; (adr r3, 8002b80 <interupt_DriveMotor+0xcb0>)
 80028f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f4:	f7fd fea8 	bl	8000648 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4690      	mov	r8, r2
 80028fe:	4699      	mov	r9, r3
 8002900:	ed97 7a04 	vldr	s14, [r7, #16]
 8002904:	edd7 7a02 	vldr	s15, [r7, #8]
 8002908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290c:	ee17 0a90 	vmov	r0, s15
 8002910:	f7fd fe42 	bl	8000598 <__aeabi_f2d>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4640      	mov	r0, r8
 800291a:	4649      	mov	r1, r9
 800291c:	f7fd fcdc 	bl	80002d8 <__aeabi_dsub>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4620      	mov	r0, r4
 8002926:	4629      	mov	r1, r5
 8002928:	f7fd fcd8 	bl	80002dc <__adddf3>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f7fe f960 	bl	8000bf8 <__aeabi_d2f>
 8002938:	4603      	mov	r3, r0
 800293a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800293c:	f107 0214 	add.w	r2, r7, #20
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	edd7 0a08 	vldr	s1, [r7, #32]
 800294c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002950:	f7ff fa2c 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4611      	mov	r1, r2
 800295a:	4618      	mov	r0, r3
 800295c:	f005 f886 	bl	8007a6c <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002960:	4b8c      	ldr	r3, [pc, #560]	; (8002b94 <interupt_DriveMotor+0xcc4>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b03      	cmp	r3, #3
 8002966:	f040 8137 	bne.w	8002bd8 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <interupt_DriveMotor+0xcc8>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002970:	4b8a      	ldr	r3, [pc, #552]	; (8002b9c <interupt_DriveMotor+0xccc>)
 8002972:	2200      	movs	r2, #0
 8002974:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002976:	4b8a      	ldr	r3, [pc, #552]	; (8002ba0 <interupt_DriveMotor+0xcd0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3301      	adds	r3, #1
 800297c:	4a88      	ldr	r2, [pc, #544]	; (8002ba0 <interupt_DriveMotor+0xcd0>)
 800297e:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002980:	4b88      	ldr	r3, [pc, #544]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fe07 	bl	8000598 <__aeabi_f2d>
 800298a:	4604      	mov	r4, r0
 800298c:	460d      	mov	r5, r1
 800298e:	4b85      	ldr	r3, [pc, #532]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fd fe00 	bl	8000598 <__aeabi_f2d>
 8002998:	a37b      	add	r3, pc, #492	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 800299a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800299e:	f7fd fe53 	bl	8000648 <__aeabi_dmul>
 80029a2:	4602      	mov	r2, r0
 80029a4:	460b      	mov	r3, r1
 80029a6:	4690      	mov	r8, r2
 80029a8:	4699      	mov	r9, r3
 80029aa:	4b7e      	ldr	r3, [pc, #504]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fdf2 	bl	8000598 <__aeabi_f2d>
 80029b4:	a374      	add	r3, pc, #464	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f7fd fe45 	bl	8000648 <__aeabi_dmul>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	a370      	add	r3, pc, #448	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fe3c 	bl	8000648 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029e0:	f7fd ff5c 	bl	800089c <__aeabi_ddiv>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4640      	mov	r0, r8
 80029ea:	4649      	mov	r1, r9
 80029ec:	f7fd fc76 	bl	80002dc <__adddf3>
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4620      	mov	r0, r4
 80029f6:	4629      	mov	r1, r5
 80029f8:	f7fd fc70 	bl	80002dc <__adddf3>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4610      	mov	r0, r2
 8002a02:	4619      	mov	r1, r3
 8002a04:	f7fe f8f8 	bl	8000bf8 <__aeabi_d2f>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a66      	ldr	r2, [pc, #408]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002a0c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a0e:	4b65      	ldr	r3, [pc, #404]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fdc0 	bl	8000598 <__aeabi_f2d>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	460d      	mov	r5, r1
 8002a1c:	4b61      	ldr	r3, [pc, #388]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7fd fdb9 	bl	8000598 <__aeabi_f2d>
 8002a26:	a358      	add	r3, pc, #352	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 8002a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2c:	f7fd fe0c 	bl	8000648 <__aeabi_dmul>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fd fc50 	bl	80002dc <__adddf3>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4610      	mov	r0, r2
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7fe f8d8 	bl	8000bf8 <__aeabi_d2f>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a56      	ldr	r2, [pc, #344]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002a4c:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a4e:	4b56      	ldr	r3, [pc, #344]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fd fda0 	bl	8000598 <__aeabi_f2d>
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	4b52      	ldr	r3, [pc, #328]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd99 	bl	8000598 <__aeabi_f2d>
 8002a66:	a348      	add	r3, pc, #288	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	f7fd fdec 	bl	8000648 <__aeabi_dmul>
 8002a70:	4602      	mov	r2, r0
 8002a72:	460b      	mov	r3, r1
 8002a74:	4690      	mov	r8, r2
 8002a76:	4699      	mov	r9, r3
 8002a78:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd8b 	bl	8000598 <__aeabi_f2d>
 8002a82:	a341      	add	r3, pc, #260	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdde 	bl	8000648 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	a33c      	add	r3, pc, #240	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 8002a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9a:	f7fd fdd5 	bl	8000648 <__aeabi_dmul>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	4610      	mov	r0, r2
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aae:	f7fd fef5 	bl	800089c <__aeabi_ddiv>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	4649      	mov	r1, r9
 8002aba:	f7fd fc0f 	bl	80002dc <__adddf3>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	4629      	mov	r1, r5
 8002ac6:	f7fd fc09 	bl	80002dc <__adddf3>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	4610      	mov	r0, r2
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f7fe f891 	bl	8000bf8 <__aeabi_d2f>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002ada:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002adc:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fd59 	bl	8000598 <__aeabi_f2d>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	460d      	mov	r5, r1
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fd52 	bl	8000598 <__aeabi_f2d>
 8002af4:	a324      	add	r3, pc, #144	; (adr r3, 8002b88 <interupt_DriveMotor+0xcb8>)
 8002af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afa:	f7fd fda5 	bl	8000648 <__aeabi_dmul>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f7fd fbe9 	bl	80002dc <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f871 	bl	8000bf8 <__aeabi_d2f>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002b1a:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002b1c:	4b21      	ldr	r3, [pc, #132]	; (8002ba4 <interupt_DriveMotor+0xcd4>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <interupt_DriveMotor+0xcd8>)
 8002b24:	ed93 7a00 	vldr	s14, [r3]
 8002b28:	f107 020c 	add.w	r2, r7, #12
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	eef0 0a47 	vmov.f32	s1, s14
 8002b34:	eeb0 0a67 	vmov.f32	s0, s15
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 fe3a 	bl	80047b4 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002b40:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b54:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002b60:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b74:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b78:	e018      	b.n	8002bac <interupt_DriveMotor+0xcdc>
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	d916872b 	.word	0xd916872b
 8002b84:	3feff7ce 	.word	0x3feff7ce
 8002b88:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b8c:	3f50624d 	.word	0x3f50624d
 8002b90:	200004d4 	.word	0x200004d4
 8002b94:	20000528 	.word	0x20000528
 8002b98:	20000590 	.word	0x20000590
 8002b9c:	20000592 	.word	0x20000592
 8002ba0:	20000524 	.word	0x20000524
 8002ba4:	200004d8 	.word	0x200004d8
 8002ba8:	200004e4 	.word	0x200004e4
 8002bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002bb4:	f107 0214 	add.w	r2, r7, #20
 8002bb8:	f107 0318 	add.w	r3, r7, #24
 8002bbc:	4611      	mov	r1, r2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002bc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002bc8:	f7ff f8f0 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f004 ff4a 	bl	8007a6c <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002bd8:	4bd3      	ldr	r3, [pc, #844]	; (8002f28 <interupt_DriveMotor+0x1058>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d137      	bne.n	8002c50 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002be0:	4bd2      	ldr	r3, [pc, #840]	; (8002f2c <interupt_DriveMotor+0x105c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002be6:	4bd2      	ldr	r3, [pc, #840]	; (8002f30 <interupt_DriveMotor+0x1060>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bf0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bf8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c00:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c08:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c0c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c28:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c2c:	f107 0214 	add.w	r2, r7, #20
 8002c30:	f107 0318 	add.w	r3, r7, #24
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c3c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c40:	f7ff f8b4 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 ff0e 	bl	8007a6c <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002c50:	4bb5      	ldr	r3, [pc, #724]	; (8002f28 <interupt_DriveMotor+0x1058>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	f040 8105 	bne.w	8002e64 <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002c5a:	4bb4      	ldr	r3, [pc, #720]	; (8002f2c <interupt_DriveMotor+0x105c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c60:	4bb3      	ldr	r3, [pc, #716]	; (8002f30 <interupt_DriveMotor+0x1060>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002c66:	4bb3      	ldr	r3, [pc, #716]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc94 	bl	8000598 <__aeabi_f2d>
 8002c70:	4604      	mov	r4, r0
 8002c72:	460d      	mov	r5, r1
 8002c74:	4baf      	ldr	r3, [pc, #700]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc8d 	bl	8000598 <__aeabi_f2d>
 8002c7e:	a3a8      	add	r3, pc, #672	; (adr r3, 8002f20 <interupt_DriveMotor+0x1050>)
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f7fd fce0 	bl	8000648 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	4699      	mov	r9, r3
 8002c90:	4ba8      	ldr	r3, [pc, #672]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc7f 	bl	8000598 <__aeabi_f2d>
 8002c9a:	a3a1      	add	r3, pc, #644	; (adr r3, 8002f20 <interupt_DriveMotor+0x1050>)
 8002c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca0:	f7fd fcd2 	bl	8000648 <__aeabi_dmul>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	a39c      	add	r3, pc, #624	; (adr r3, 8002f20 <interupt_DriveMotor+0x1050>)
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	f7fd fcc9 	bl	8000648 <__aeabi_dmul>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	460b      	mov	r3, r1
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cc6:	f7fd fde9 	bl	800089c <__aeabi_ddiv>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4640      	mov	r0, r8
 8002cd0:	4649      	mov	r1, r9
 8002cd2:	f7fd fb03 	bl	80002dc <__adddf3>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4620      	mov	r0, r4
 8002cdc:	4629      	mov	r1, r5
 8002cde:	f7fd fafd 	bl	80002dc <__adddf3>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff85 	bl	8000bf8 <__aeabi_d2f>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a90      	ldr	r2, [pc, #576]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002cf2:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002cf4:	4b8f      	ldr	r3, [pc, #572]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc4d 	bl	8000598 <__aeabi_f2d>
 8002cfe:	4604      	mov	r4, r0
 8002d00:	460d      	mov	r5, r1
 8002d02:	4b8c      	ldr	r3, [pc, #560]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc46 	bl	8000598 <__aeabi_f2d>
 8002d0c:	a384      	add	r3, pc, #528	; (adr r3, 8002f20 <interupt_DriveMotor+0x1050>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fc99 	bl	8000648 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fadd 	bl	80002dc <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff65 	bl	8000bf8 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a80      	ldr	r2, [pc, #512]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002d32:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002d34:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fd fc2d 	bl	8000598 <__aeabi_f2d>
 8002d3e:	4604      	mov	r4, r0
 8002d40:	460d      	mov	r5, r1
 8002d42:	4b7d      	ldr	r3, [pc, #500]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fd fc26 	bl	8000598 <__aeabi_f2d>
 8002d4c:	a374      	add	r3, pc, #464	; (adr r3, 8002f20 <interupt_DriveMotor+0x1050>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	f7fd fc79 	bl	8000648 <__aeabi_dmul>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7fd fabd 	bl	80002dc <__adddf3>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4610      	mov	r0, r2
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f7fd ff45 	bl	8000bf8 <__aeabi_d2f>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	4a71      	ldr	r2, [pc, #452]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002d72:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002d74:	4b71      	ldr	r3, [pc, #452]	; (8002f3c <interupt_DriveMotor+0x106c>)
 8002d76:	edd3 6a00 	vldr	s13, [r3]
 8002d7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d82:	486d      	ldr	r0, [pc, #436]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002d84:	eeb0 0a66 	vmov.f32	s0, s13
 8002d88:	eef0 0a47 	vmov.f32	s1, s14
 8002d8c:	eeb0 1a67 	vmov.f32	s2, s15
 8002d90:	f005 fe3e 	bl	8008a10 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002d94:	4b67      	ldr	r3, [pc, #412]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	4b67      	ldr	r3, [pc, #412]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002d9c:	ed93 7a00 	vldr	s14, [r3]
 8002da0:	f107 020c 	add.w	r2, r7, #12
 8002da4:	f107 0310 	add.w	r3, r7, #16
 8002da8:	eef0 0a47 	vmov.f32	s1, s14
 8002dac:	eeb0 0a67 	vmov.f32	s0, s15
 8002db0:	4611      	mov	r1, r2
 8002db2:	4618      	mov	r0, r3
 8002db4:	f001 fcfe 	bl	80047b4 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002db8:	4b61      	ldr	r3, [pc, #388]	; (8002f40 <interupt_DriveMotor+0x1070>)
 8002dba:	ed93 7a00 	vldr	s14, [r3]
 8002dbe:	4b61      	ldr	r3, [pc, #388]	; (8002f44 <interupt_DriveMotor+0x1074>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dc8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002dcc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dd0:	4b58      	ldr	r3, [pc, #352]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002dd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <interupt_DriveMotor+0x1078>)
 8002dd8:	edd3 6a00 	vldr	s13, [r3]
 8002ddc:	4b56      	ldr	r3, [pc, #344]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002dde:	ed93 6a01 	vldr	s12, [r3, #4]
 8002de2:	1d3a      	adds	r2, r7, #4
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	eef0 1a46 	vmov.f32	s3, s12
 8002dec:	eeb0 1a66 	vmov.f32	s2, s13
 8002df0:	4611      	mov	r1, r2
 8002df2:	eef0 0a67 	vmov.f32	s1, s15
 8002df6:	eeb0 0a47 	vmov.f32	s0, s14
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 fa34 	bl	8004268 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e00:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e04:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002e20:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e3c:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002e40:	f107 0214 	add.w	r2, r7, #20
 8002e44:	f107 0318 	add.w	r3, r7, #24
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002e50:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e54:	f7fe ffaa 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	697a      	ldr	r2, [r7, #20]
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f004 fe04 	bl	8007a6c <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <interupt_DriveMotor+0x1058>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b64      	cmp	r3, #100	; 0x64
 8002e6a:	d14b      	bne.n	8002f04 <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002e6c:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002e74:	4b30      	ldr	r3, [pc, #192]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <interupt_DriveMotor+0x1064>)
 8002e7e:	edd3 7a00 	vldr	s15, [r3]
 8002e82:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <interupt_DriveMotor+0x1068>)
 8002e84:	ed93 7a00 	vldr	s14, [r3]
 8002e88:	f107 020c 	add.w	r2, r7, #12
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	eef0 0a47 	vmov.f32	s1, s14
 8002e94:	eeb0 0a67 	vmov.f32	s0, s15
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f001 fc8a 	bl	80047b4 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002ea0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002eac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ec0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ec4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ec8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ecc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002edc:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ee0:	f107 0214 	add.w	r2, r7, #20
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	4611      	mov	r1, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ef0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002ef4:	f7fe ff5a 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4611      	mov	r1, r2
 8002efe:	4618      	mov	r0, r3
 8002f00:	f004 fdb4 	bl	8007a6c <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f04:	4a11      	ldr	r2, [pc, #68]	; (8002f4c <interupt_DriveMotor+0x107c>)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f0a:	4a11      	ldr	r2, [pc, #68]	; (8002f50 <interupt_DriveMotor+0x1080>)
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	6013      	str	r3, [r2, #0]



}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f1a:	bf00      	nop
 8002f1c:	f3af 8000 	nop.w
 8002f20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f24:	3f50624d 	.word	0x3f50624d
 8002f28:	20000528 	.word	0x20000528
 8002f2c:	20000590 	.word	0x20000590
 8002f30:	20000592 	.word	0x20000592
 8002f34:	200004d8 	.word	0x200004d8
 8002f38:	200004e4 	.word	0x200004e4
 8002f3c:	20000518 	.word	0x20000518
 8002f40:	20000238 	.word	0x20000238
 8002f44:	2000023c 	.word	0x2000023c
 8002f48:	20000268 	.word	0x20000268
 8002f4c:	2000052c 	.word	0x2000052c
 8002f50:	20000530 	.word	0x20000530

08002f54 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f5e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002f62:	ed87 1a03 	vstr	s2, [r7, #12]
 8002f66:	edc7 1a02 	vstr	s3, [r7, #8]
 8002f6a:	ed87 2a01 	vstr	s4, [r7, #4]
 8002f6e:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f74:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8002f78:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002f80:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8002f84:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f88:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8002f8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f94:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8002f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa4:	d505      	bpl.n	8002fb2 <straight_table2+0x5e>
 8002fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002faa:	eef1 7a67 	vneg.f32	s15, s15
 8002fae:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 8002fb2:	4bb4      	ldr	r3, [pc, #720]	; (8003284 <straight_table2+0x330>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8002fbe:	4ab2      	ldr	r2, [pc, #712]	; (8003288 <straight_table2+0x334>)
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8002fc4:	4ab0      	ldr	r2, [pc, #704]	; (8003288 <straight_table2+0x334>)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8002fca:	4aaf      	ldr	r2, [pc, #700]	; (8003288 <straight_table2+0x334>)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8002fd0:	4aad      	ldr	r2, [pc, #692]	; (8003288 <straight_table2+0x334>)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8002fd6:	4aac      	ldr	r2, [pc, #688]	; (8003288 <straight_table2+0x334>)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8002fdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fe0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe8:	db03      	blt.n	8002ff2 <straight_table2+0x9e>
 8002fea:	4aa8      	ldr	r2, [pc, #672]	; (800328c <straight_table2+0x338>)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6053      	str	r3, [r2, #4]
 8002ff0:	e006      	b.n	8003000 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 8002ff2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ff6:	eef1 7a67 	vneg.f32	s15, s15
 8002ffa:	4ba4      	ldr	r3, [pc, #656]	; (800328c <straight_table2+0x338>)
 8002ffc:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003000:	4aa2      	ldr	r2, [pc, #648]	; (800328c <straight_table2+0x338>)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003006:	4ba1      	ldr	r3, [pc, #644]	; (800328c <straight_table2+0x338>)
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 800300e:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <straight_table2+0x33c>)
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003016:	4b9e      	ldr	r3, [pc, #632]	; (8003290 <straight_table2+0x33c>)
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800301e:	4b9c      	ldr	r3, [pc, #624]	; (8003290 <straight_table2+0x33c>)
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003026:	4b9b      	ldr	r3, [pc, #620]	; (8003294 <straight_table2+0x340>)
 8003028:	2200      	movs	r2, #0
 800302a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 800302c:	4b9a      	ldr	r3, [pc, #616]	; (8003298 <straight_table2+0x344>)
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003032:	edd7 7a05 	vldr	s15, [r7, #20]
 8003036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	dd0e      	ble.n	800305e <straight_table2+0x10a>
 8003040:	ed97 7a07 	vldr	s14, [r7, #28]
 8003044:	edd7 7a05 	vldr	s15, [r7, #20]
 8003048:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800304c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003050:	dd05      	ble.n	800305e <straight_table2+0x10a>
 8003052:	4b91      	ldr	r3, [pc, #580]	; (8003298 <straight_table2+0x344>)
 8003054:	2205      	movs	r2, #5
 8003056:	701a      	strb	r2, [r3, #0]
 8003058:	4a8c      	ldr	r2, [pc, #560]	; (800328c <straight_table2+0x338>)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800305e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306a:	dd14      	ble.n	8003096 <straight_table2+0x142>
 800306c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003070:	eef1 7a67 	vneg.f32	s15, s15
 8003074:	ed97 7a07 	vldr	s14, [r7, #28]
 8003078:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800307c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003080:	d509      	bpl.n	8003096 <straight_table2+0x142>
 8003082:	4b85      	ldr	r3, [pc, #532]	; (8003298 <straight_table2+0x344>)
 8003084:	2206      	movs	r2, #6
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	edd7 7a01 	vldr	s15, [r7, #4]
 800308c:	eef1 7a67 	vneg.f32	s15, s15
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <straight_table2+0x338>)
 8003092:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003096:	edd7 7a05 	vldr	s15, [r7, #20]
 800309a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800309e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a2:	d514      	bpl.n	80030ce <straight_table2+0x17a>
 80030a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030a8:	eef1 7a67 	vneg.f32	s15, s15
 80030ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80030b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b8:	dd09      	ble.n	80030ce <straight_table2+0x17a>
 80030ba:	4b77      	ldr	r3, [pc, #476]	; (8003298 <straight_table2+0x344>)
 80030bc:	2205      	movs	r2, #5
 80030be:	701a      	strb	r2, [r3, #0]
 80030c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80030c4:	eef1 7a67 	vneg.f32	s15, s15
 80030c8:	4b70      	ldr	r3, [pc, #448]	; (800328c <straight_table2+0x338>)
 80030ca:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80030ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030da:	d50e      	bpl.n	80030fa <straight_table2+0x1a6>
 80030dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80030e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ec:	d505      	bpl.n	80030fa <straight_table2+0x1a6>
 80030ee:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <straight_table2+0x344>)
 80030f0:	2206      	movs	r2, #6
 80030f2:	701a      	strb	r2, [r3, #0]
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <straight_table2+0x338>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80030fa:	4b68      	ldr	r3, [pc, #416]	; (800329c <straight_table2+0x348>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003100:	783a      	ldrb	r2, [r7, #0]
 8003102:	4b67      	ldr	r3, [pc, #412]	; (80032a0 <straight_table2+0x34c>)
 8003104:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003106:	f004 fc95 	bl	8007a34 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	2b01      	cmp	r3, #1
 800310e:	f040 80d3 	bne.w	80032b8 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003112:	4b64      	ldr	r3, [pc, #400]	; (80032a4 <straight_table2+0x350>)
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800311a:	4b5f      	ldr	r3, [pc, #380]	; (8003298 <straight_table2+0x344>)
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003120:	4b5a      	ldr	r3, [pc, #360]	; (800328c <straight_table2+0x338>)
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003128:	bf00      	nop
 800312a:	4b5f      	ldr	r3, [pc, #380]	; (80032a8 <straight_table2+0x354>)
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d409      	bmi.n	8003152 <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800313e:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <straight_table2+0x354>)
 8003140:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003144:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80032ac <straight_table2+0x358>
 8003148:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003150:	dd18      	ble.n	8003184 <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003152:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <straight_table2+0x35c>)
 8003154:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003158:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800315c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003164:	d409      	bmi.n	800317a <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003166:	4b52      	ldr	r3, [pc, #328]	; (80032b0 <straight_table2+0x35c>)
 8003168:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800316c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80032ac <straight_table2+0x358>
 8003170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	dd04      	ble.n	8003184 <straight_table2+0x230>
			  front_wall_break_90==0){}
 800317a:	4b4e      	ldr	r3, [pc, #312]	; (80032b4 <straight_table2+0x360>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0d2      	beq.n	800312a <straight_table2+0x1d6>
		straight.displacement=0;
 8003184:	4b41      	ldr	r3, [pc, #260]	; (800328c <straight_table2+0x338>)
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800318c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003190:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003198:	db03      	blt.n	80031a2 <straight_table2+0x24e>
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <straight_table2+0x338>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6053      	str	r3, [r2, #4]
 80031a0:	e006      	b.n	80031b0 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 80031a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031a6:	eef1 7a67 	vneg.f32	s15, s15
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <straight_table2+0x338>)
 80031ac:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80031b0:	4b39      	ldr	r3, [pc, #228]	; (8003298 <straight_table2+0x344>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80031b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80031ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c2:	dd0e      	ble.n	80031e2 <straight_table2+0x28e>
 80031c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80031c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80031cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d4:	dd05      	ble.n	80031e2 <straight_table2+0x28e>
 80031d6:	4b30      	ldr	r3, [pc, #192]	; (8003298 <straight_table2+0x344>)
 80031d8:	2205      	movs	r2, #5
 80031da:	701a      	strb	r2, [r3, #0]
 80031dc:	4a2b      	ldr	r2, [pc, #172]	; (800328c <straight_table2+0x338>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80031e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80031e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80031ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ee:	dd14      	ble.n	800321a <straight_table2+0x2c6>
 80031f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80031f4:	eef1 7a67 	vneg.f32	s15, s15
 80031f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80031fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	d509      	bpl.n	800321a <straight_table2+0x2c6>
 8003206:	4b24      	ldr	r3, [pc, #144]	; (8003298 <straight_table2+0x344>)
 8003208:	2206      	movs	r2, #6
 800320a:	701a      	strb	r2, [r3, #0]
 800320c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003210:	eef1 7a67 	vneg.f32	s15, s15
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <straight_table2+0x338>)
 8003216:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800321a:	edd7 7a05 	vldr	s15, [r7, #20]
 800321e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003226:	d514      	bpl.n	8003252 <straight_table2+0x2fe>
 8003228:	edd7 7a05 	vldr	s15, [r7, #20]
 800322c:	eef1 7a67 	vneg.f32	s15, s15
 8003230:	ed97 7a07 	vldr	s14, [r7, #28]
 8003234:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	dd09      	ble.n	8003252 <straight_table2+0x2fe>
 800323e:	4b16      	ldr	r3, [pc, #88]	; (8003298 <straight_table2+0x344>)
 8003240:	2205      	movs	r2, #5
 8003242:	701a      	strb	r2, [r3, #0]
 8003244:	edd7 7a01 	vldr	s15, [r7, #4]
 8003248:	eef1 7a67 	vneg.f32	s15, s15
 800324c:	4b0f      	ldr	r3, [pc, #60]	; (800328c <straight_table2+0x338>)
 800324e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003252:	edd7 7a05 	vldr	s15, [r7, #20]
 8003256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	f140 825b 	bpl.w	8003718 <straight_table2+0x7c4>
 8003262:	ed97 7a07 	vldr	s14, [r7, #28]
 8003266:	edd7 7a05 	vldr	s15, [r7, #20]
 800326a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	f140 8251 	bpl.w	8003718 <straight_table2+0x7c4>
 8003276:	4b08      	ldr	r3, [pc, #32]	; (8003298 <straight_table2+0x344>)
 8003278:	2206      	movs	r2, #6
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	4a03      	ldr	r2, [pc, #12]	; (800328c <straight_table2+0x338>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6053      	str	r3, [r2, #4]
 8003282:	e249      	b.n	8003718 <straight_table2+0x7c4>
 8003284:	20000529 	.word	0x20000529
 8003288:	200004f0 	.word	0x200004f0
 800328c:	200004d8 	.word	0x200004d8
 8003290:	200004e4 	.word	0x200004e4
 8003294:	20000805 	.word	0x20000805
 8003298:	20000804 	.word	0x20000804
 800329c:	20000528 	.word	0x20000528
 80032a0:	20000590 	.word	0x20000590
 80032a4:	20000534 	.word	0x20000534
 80032a8:	200005cc 	.word	0x200005cc
 80032ac:	425c0000 	.word	0x425c0000
 80032b0:	200005d0 	.word	0x200005d0
 80032b4:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 80032b8:	78fb      	ldrb	r3, [r7, #3]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	f040 80c9 	bne.w	8003452 <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80032c0:	4bb8      	ldr	r3, [pc, #736]	; (80035a4 <straight_table2+0x650>)
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80032c8:	4bb7      	ldr	r3, [pc, #732]	; (80035a8 <straight_table2+0x654>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80032ce:	4bb7      	ldr	r3, [pc, #732]	; (80035ac <straight_table2+0x658>)
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 80032d6:	bf00      	nop
 80032d8:	4bb5      	ldr	r3, [pc, #724]	; (80035b0 <straight_table2+0x65c>)
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	d913      	bls.n	8003310 <straight_table2+0x3bc>
 80032e8:	4bb1      	ldr	r3, [pc, #708]	; (80035b0 <straight_table2+0x65c>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80032f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	d909      	bls.n	8003310 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 80032fc:	4bac      	ldr	r3, [pc, #688]	; (80035b0 <straight_table2+0x65c>)
 80032fe:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003302:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80035b4 <straight_table2+0x660>
 8003306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800330a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800330e:	db20      	blt.n	8003352 <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003310:	4ba9      	ldr	r3, [pc, #676]	; (80035b8 <straight_table2+0x664>)
 8003312:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003316:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800331a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331e:	d913      	bls.n	8003348 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003320:	4ba5      	ldr	r3, [pc, #660]	; (80035b8 <straight_table2+0x664>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800332a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003332:	d909      	bls.n	8003348 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003334:	4ba0      	ldr	r3, [pc, #640]	; (80035b8 <straight_table2+0x664>)
 8003336:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800333a:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80035b4 <straight_table2+0x660>
 800333e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003346:	db04      	blt.n	8003352 <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003348:	4b9c      	ldr	r3, [pc, #624]	; (80035bc <straight_table2+0x668>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0c2      	beq.n	80032d8 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 8003352:	4b96      	ldr	r3, [pc, #600]	; (80035ac <straight_table2+0x658>)
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 800335a:	edd7 7a02 	vldr	s15, [r7, #8]
 800335e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003366:	db03      	blt.n	8003370 <straight_table2+0x41c>
 8003368:	4a90      	ldr	r2, [pc, #576]	; (80035ac <straight_table2+0x658>)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6053      	str	r3, [r2, #4]
 800336e:	e006      	b.n	800337e <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 8003370:	edd7 7a01 	vldr	s15, [r7, #4]
 8003374:	eef1 7a67 	vneg.f32	s15, s15
 8003378:	4b8c      	ldr	r3, [pc, #560]	; (80035ac <straight_table2+0x658>)
 800337a:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800337e:	4b8a      	ldr	r3, [pc, #552]	; (80035a8 <straight_table2+0x654>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003384:	edd7 7a05 	vldr	s15, [r7, #20]
 8003388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800338c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003390:	dd0e      	ble.n	80033b0 <straight_table2+0x45c>
 8003392:	ed97 7a07 	vldr	s14, [r7, #28]
 8003396:	edd7 7a05 	vldr	s15, [r7, #20]
 800339a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	dd05      	ble.n	80033b0 <straight_table2+0x45c>
 80033a4:	4b80      	ldr	r3, [pc, #512]	; (80035a8 <straight_table2+0x654>)
 80033a6:	2205      	movs	r2, #5
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	4a80      	ldr	r2, [pc, #512]	; (80035ac <straight_table2+0x658>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80033b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80033b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	dd14      	ble.n	80033e8 <straight_table2+0x494>
 80033be:	edd7 7a05 	vldr	s15, [r7, #20]
 80033c2:	eef1 7a67 	vneg.f32	s15, s15
 80033c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80033ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d509      	bpl.n	80033e8 <straight_table2+0x494>
 80033d4:	4b74      	ldr	r3, [pc, #464]	; (80035a8 <straight_table2+0x654>)
 80033d6:	2206      	movs	r2, #6
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	edd7 7a01 	vldr	s15, [r7, #4]
 80033de:	eef1 7a67 	vneg.f32	s15, s15
 80033e2:	4b72      	ldr	r3, [pc, #456]	; (80035ac <straight_table2+0x658>)
 80033e4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80033e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f4:	d514      	bpl.n	8003420 <straight_table2+0x4cc>
 80033f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80033fa:	eef1 7a67 	vneg.f32	s15, s15
 80033fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8003402:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	dd09      	ble.n	8003420 <straight_table2+0x4cc>
 800340c:	4b66      	ldr	r3, [pc, #408]	; (80035a8 <straight_table2+0x654>)
 800340e:	2205      	movs	r2, #5
 8003410:	701a      	strb	r2, [r3, #0]
 8003412:	edd7 7a01 	vldr	s15, [r7, #4]
 8003416:	eef1 7a67 	vneg.f32	s15, s15
 800341a:	4b64      	ldr	r3, [pc, #400]	; (80035ac <straight_table2+0x658>)
 800341c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003420:	edd7 7a05 	vldr	s15, [r7, #20]
 8003424:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342c:	f140 8174 	bpl.w	8003718 <straight_table2+0x7c4>
 8003430:	ed97 7a07 	vldr	s14, [r7, #28]
 8003434:	edd7 7a05 	vldr	s15, [r7, #20]
 8003438:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	f140 816a 	bpl.w	8003718 <straight_table2+0x7c4>
 8003444:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <straight_table2+0x654>)
 8003446:	2206      	movs	r2, #6
 8003448:	701a      	strb	r2, [r3, #0]
 800344a:	4a58      	ldr	r2, [pc, #352]	; (80035ac <straight_table2+0x658>)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6053      	str	r3, [r2, #4]
 8003450:	e162      	b.n	8003718 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	2b03      	cmp	r3, #3
 8003456:	f040 80b9 	bne.w	80035cc <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800345a:	4b52      	ldr	r3, [pc, #328]	; (80035a4 <straight_table2+0x650>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003462:	4b51      	ldr	r3, [pc, #324]	; (80035a8 <straight_table2+0x654>)
 8003464:	2200      	movs	r2, #0
 8003466:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <straight_table2+0x658>)
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003470:	bf00      	nop
 8003472:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <straight_table2+0x66c>)
 8003474:	edd3 7a00 	vldr	s15, [r3]
 8003478:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800347c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003484:	d409      	bmi.n	800349a <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003486:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <straight_table2+0x66c>)
 8003488:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 800348c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 80035c4 <straight_table2+0x670>
 8003490:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	dd04      	ble.n	80034a4 <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 800349a:	4b4b      	ldr	r3, [pc, #300]	; (80035c8 <straight_table2+0x674>)
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0e6      	beq.n	8003472 <straight_table2+0x51e>
		straight.displacement=0;
 80034a4:	4b41      	ldr	r3, [pc, #260]	; (80035ac <straight_table2+0x658>)
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80034b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b8:	db03      	blt.n	80034c2 <straight_table2+0x56e>
 80034ba:	4a3c      	ldr	r2, [pc, #240]	; (80035ac <straight_table2+0x658>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6053      	str	r3, [r2, #4]
 80034c0:	e006      	b.n	80034d0 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 80034c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80034c6:	eef1 7a67 	vneg.f32	s15, s15
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <straight_table2+0x658>)
 80034cc:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034d0:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <straight_table2+0x654>)
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80034da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e2:	dd0e      	ble.n	8003502 <straight_table2+0x5ae>
 80034e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80034e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f4:	dd05      	ble.n	8003502 <straight_table2+0x5ae>
 80034f6:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <straight_table2+0x654>)
 80034f8:	2205      	movs	r2, #5
 80034fa:	701a      	strb	r2, [r3, #0]
 80034fc:	4a2b      	ldr	r2, [pc, #172]	; (80035ac <straight_table2+0x658>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003502:	edd7 7a05 	vldr	s15, [r7, #20]
 8003506:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350e:	dd14      	ble.n	800353a <straight_table2+0x5e6>
 8003510:	edd7 7a05 	vldr	s15, [r7, #20]
 8003514:	eef1 7a67 	vneg.f32	s15, s15
 8003518:	ed97 7a07 	vldr	s14, [r7, #28]
 800351c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003524:	d509      	bpl.n	800353a <straight_table2+0x5e6>
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <straight_table2+0x654>)
 8003528:	2206      	movs	r2, #6
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003530:	eef1 7a67 	vneg.f32	s15, s15
 8003534:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <straight_table2+0x658>)
 8003536:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800353a:	edd7 7a05 	vldr	s15, [r7, #20]
 800353e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	d514      	bpl.n	8003572 <straight_table2+0x61e>
 8003548:	edd7 7a05 	vldr	s15, [r7, #20]
 800354c:	eef1 7a67 	vneg.f32	s15, s15
 8003550:	ed97 7a07 	vldr	s14, [r7, #28]
 8003554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	dd09      	ble.n	8003572 <straight_table2+0x61e>
 800355e:	4b12      	ldr	r3, [pc, #72]	; (80035a8 <straight_table2+0x654>)
 8003560:	2205      	movs	r2, #5
 8003562:	701a      	strb	r2, [r3, #0]
 8003564:	edd7 7a01 	vldr	s15, [r7, #4]
 8003568:	eef1 7a67 	vneg.f32	s15, s15
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <straight_table2+0x658>)
 800356e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003572:	edd7 7a05 	vldr	s15, [r7, #20]
 8003576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800357a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357e:	f140 80cb 	bpl.w	8003718 <straight_table2+0x7c4>
 8003582:	ed97 7a07 	vldr	s14, [r7, #28]
 8003586:	edd7 7a05 	vldr	s15, [r7, #20]
 800358a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800358e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003592:	f140 80c1 	bpl.w	8003718 <straight_table2+0x7c4>
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <straight_table2+0x654>)
 8003598:	2206      	movs	r2, #6
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	4a03      	ldr	r2, [pc, #12]	; (80035ac <straight_table2+0x658>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6053      	str	r3, [r2, #4]
 80035a2:	e0b9      	b.n	8003718 <straight_table2+0x7c4>
 80035a4:	20000534 	.word	0x20000534
 80035a8:	20000804 	.word	0x20000804
 80035ac:	200004d8 	.word	0x200004d8
 80035b0:	200005d4 	.word	0x200005d4
 80035b4:	42000000 	.word	0x42000000
 80035b8:	200005d8 	.word	0x200005d8
 80035bc:	200005f3 	.word	0x200005f3
 80035c0:	200005e4 	.word	0x200005e4
 80035c4:	420c0000 	.word	0x420c0000
 80035c8:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	f040 80a2 	bne.w	8003718 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035d4:	4ba6      	ldr	r3, [pc, #664]	; (8003870 <straight_table2+0x91c>)
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80035dc:	4ba5      	ldr	r3, [pc, #660]	; (8003874 <straight_table2+0x920>)
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80035e2:	4ba5      	ldr	r3, [pc, #660]	; (8003878 <straight_table2+0x924>)
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 80035ea:	bf00      	nop
 80035ec:	4ba3      	ldr	r3, [pc, #652]	; (800387c <straight_table2+0x928>)
 80035ee:	edd3 7a00 	vldr	s15, [r3]
 80035f2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80035f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fe:	d409      	bmi.n	8003614 <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003600:	4b9e      	ldr	r3, [pc, #632]	; (800387c <straight_table2+0x928>)
 8003602:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003606:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003880 <straight_table2+0x92c>
 800360a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	dd04      	ble.n	800361e <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 8003614:	4b9b      	ldr	r3, [pc, #620]	; (8003884 <straight_table2+0x930>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0e6      	beq.n	80035ec <straight_table2+0x698>
		straight.displacement=0;
 800361e:	4b96      	ldr	r3, [pc, #600]	; (8003878 <straight_table2+0x924>)
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003626:	edd7 7a02 	vldr	s15, [r7, #8]
 800362a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003632:	db03      	blt.n	800363c <straight_table2+0x6e8>
 8003634:	4a90      	ldr	r2, [pc, #576]	; (8003878 <straight_table2+0x924>)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6053      	str	r3, [r2, #4]
 800363a:	e006      	b.n	800364a <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 800363c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003640:	eef1 7a67 	vneg.f32	s15, s15
 8003644:	4b8c      	ldr	r3, [pc, #560]	; (8003878 <straight_table2+0x924>)
 8003646:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800364a:	4b8a      	ldr	r3, [pc, #552]	; (8003874 <straight_table2+0x920>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003650:	edd7 7a05 	vldr	s15, [r7, #20]
 8003654:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365c:	dd0e      	ble.n	800367c <straight_table2+0x728>
 800365e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003662:	edd7 7a05 	vldr	s15, [r7, #20]
 8003666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	dd05      	ble.n	800367c <straight_table2+0x728>
 8003670:	4b80      	ldr	r3, [pc, #512]	; (8003874 <straight_table2+0x920>)
 8003672:	2205      	movs	r2, #5
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	4a80      	ldr	r2, [pc, #512]	; (8003878 <straight_table2+0x924>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800367c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	dd14      	ble.n	80036b4 <straight_table2+0x760>
 800368a:	edd7 7a05 	vldr	s15, [r7, #20]
 800368e:	eef1 7a67 	vneg.f32	s15, s15
 8003692:	ed97 7a07 	vldr	s14, [r7, #28]
 8003696:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	d509      	bpl.n	80036b4 <straight_table2+0x760>
 80036a0:	4b74      	ldr	r3, [pc, #464]	; (8003874 <straight_table2+0x920>)
 80036a2:	2206      	movs	r2, #6
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80036aa:	eef1 7a67 	vneg.f32	s15, s15
 80036ae:	4b72      	ldr	r3, [pc, #456]	; (8003878 <straight_table2+0x924>)
 80036b0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80036b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80036b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c0:	d514      	bpl.n	80036ec <straight_table2+0x798>
 80036c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c6:	eef1 7a67 	vneg.f32	s15, s15
 80036ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	dd09      	ble.n	80036ec <straight_table2+0x798>
 80036d8:	4b66      	ldr	r3, [pc, #408]	; (8003874 <straight_table2+0x920>)
 80036da:	2205      	movs	r2, #5
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	edd7 7a01 	vldr	s15, [r7, #4]
 80036e2:	eef1 7a67 	vneg.f32	s15, s15
 80036e6:	4b64      	ldr	r3, [pc, #400]	; (8003878 <straight_table2+0x924>)
 80036e8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	d50e      	bpl.n	8003718 <straight_table2+0x7c4>
 80036fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80036fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003702:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370a:	d505      	bpl.n	8003718 <straight_table2+0x7c4>
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <straight_table2+0x920>)
 800370e:	2206      	movs	r2, #6
 8003710:	701a      	strb	r2, [r3, #0]
 8003712:	4a59      	ldr	r2, [pc, #356]	; (8003878 <straight_table2+0x924>)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003718:	78bb      	ldrb	r3, [r7, #2]
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 809e 	bne.w	800385c <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003720:	e074      	b.n	800380c <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d120      	bne.n	800376a <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003728:	edd7 7a05 	vldr	s15, [r7, #20]
 800372c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003730:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003734:	4b54      	ldr	r3, [pc, #336]	; (8003888 <straight_table2+0x934>)
 8003736:	edd3 7a00 	vldr	s15, [r3]
 800373a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800373e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003742:	d90e      	bls.n	8003762 <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003744:	edd7 7a05 	vldr	s15, [r7, #20]
 8003748:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800374c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003750:	4b4e      	ldr	r3, [pc, #312]	; (800388c <straight_table2+0x938>)
 8003752:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	d900      	bls.n	8003762 <straight_table2+0x80e>
 8003760:	e054      	b.n	800380c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003762:	4b44      	ldr	r3, [pc, #272]	; (8003874 <straight_table2+0x920>)
 8003764:	2204      	movs	r2, #4
 8003766:	701a      	strb	r2, [r3, #0]
				break;
 8003768:	e055      	b.n	8003816 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 800376a:	78fb      	ldrb	r3, [r7, #3]
 800376c:	2b02      	cmp	r3, #2
 800376e:	d121      	bne.n	80037b4 <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003770:	edd7 7a05 	vldr	s15, [r7, #20]
 8003774:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003778:	ee37 7a87 	vadd.f32	s14, s15, s14
 800377c:	4b44      	ldr	r3, [pc, #272]	; (8003890 <straight_table2+0x93c>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378a:	d900      	bls.n	800378e <straight_table2+0x83a>
 800378c:	e03e      	b.n	800380c <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 800378e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003792:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003796:	ee37 7a87 	vadd.f32	s14, s15, s14
 800379a:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <straight_table2+0x940>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a8:	d900      	bls.n	80037ac <straight_table2+0x858>
 80037aa:	e02f      	b.n	800380c <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ac:	4b31      	ldr	r3, [pc, #196]	; (8003874 <straight_table2+0x920>)
 80037ae:	2204      	movs	r2, #4
 80037b0:	701a      	strb	r2, [r3, #0]
				break;
 80037b2:	e030      	b.n	8003816 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d112      	bne.n	80037e0 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 80037ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80037be:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80037c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037c6:	4b34      	ldr	r3, [pc, #208]	; (8003898 <straight_table2+0x944>)
 80037c8:	edd3 7a00 	vldr	s15, [r3]
 80037cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	d900      	bls.n	80037d8 <straight_table2+0x884>
 80037d6:	e019      	b.n	800380c <straight_table2+0x8b8>
				g_acc_flag=4;
 80037d8:	4b26      	ldr	r3, [pc, #152]	; (8003874 <straight_table2+0x920>)
 80037da:	2204      	movs	r2, #4
 80037dc:	701a      	strb	r2, [r3, #0]
				break;
 80037de:	e01a      	b.n	8003816 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 80037e0:	78fb      	ldrb	r3, [r7, #3]
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d112      	bne.n	800380c <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 80037e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80037ea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80037ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <straight_table2+0x928>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	d900      	bls.n	8003804 <straight_table2+0x8b0>
 8003802:	e003      	b.n	800380c <straight_table2+0x8b8>
				g_acc_flag=4;
 8003804:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <straight_table2+0x920>)
 8003806:	2204      	movs	r2, #4
 8003808:	701a      	strb	r2, [r3, #0]
				break;
 800380a:	e004      	b.n	8003816 <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <straight_table2+0x920>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b04      	cmp	r3, #4
 8003814:	d185      	bne.n	8003722 <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003816:	edd7 7a03 	vldr	s15, [r7, #12]
 800381a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800381e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003822:	d105      	bne.n	8003830 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	f004 fbdf 	bl	8007fe8 <wait_ms_NoReset>
		modeacc = 0;
 800382a:	4b1c      	ldr	r3, [pc, #112]	; (800389c <straight_table2+0x948>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003830:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <straight_table2+0x94c>)
 8003832:	ed93 7a00 	vldr	s14, [r3]
 8003836:	edd7 7a05 	vldr	s15, [r7, #20]
 800383a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <straight_table2+0x94c>)
 8003840:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003844:	4b17      	ldr	r3, [pc, #92]	; (80038a4 <straight_table2+0x950>)
 8003846:	ed93 7a00 	vldr	s14, [r3]
 800384a:	edd7 7a05 	vldr	s15, [r7, #20]
 800384e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003852:	4b14      	ldr	r3, [pc, #80]	; (80038a4 <straight_table2+0x950>)
 8003854:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003858:	f004 f8fa 	bl	8007a50 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 800385c:	4b06      	ldr	r3, [pc, #24]	; (8003878 <straight_table2+0x924>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	ee07 3a90 	vmov	s15, r3



}
 8003864:	eeb0 0a67 	vmov.f32	s0, s15
 8003868:	3720      	adds	r7, #32
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000534 	.word	0x20000534
 8003874:	20000804 	.word	0x20000804
 8003878:	200004d8 	.word	0x200004d8
 800387c:	200005e8 	.word	0x200005e8
 8003880:	420c0000 	.word	0x420c0000
 8003884:	200005f4 	.word	0x200005f4
 8003888:	200005d0 	.word	0x200005d0
 800388c:	200005cc 	.word	0x200005cc
 8003890:	200005d8 	.word	0x200005d8
 8003894:	200005d4 	.word	0x200005d4
 8003898:	200005e4 	.word	0x200005e4
 800389c:	20000528 	.word	0x20000528
 80038a0:	20000220 	.word	0x20000220
 80038a4:	20000224 	.word	0x20000224

080038a8 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80038b2:	60b8      	str	r0, [r7, #8]
 80038b4:	460b      	mov	r3, r1
 80038b6:	71fb      	strb	r3, [r7, #7]
 80038b8:	4613      	mov	r3, r2
 80038ba:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 80038bc:	e02f      	b.n	800391e <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	f083 0301 	eor.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <End_straight+0x2e>
 80038ca:	79bb      	ldrb	r3, [r7, #6]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d023      	beq.n	800391e <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 80038d6:	7afb      	ldrb	r3, [r7, #11]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d120      	bne.n	800391e <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80038dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80038e0:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 80038e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038e8:	4b1c      	ldr	r3, [pc, #112]	; (800395c <End_straight+0xb4>)
 80038ea:	edd3 7a00 	vldr	s15, [r3]
 80038ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f6:	d90e      	bls.n	8003916 <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 80038f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038fc:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8003900:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003904:	4b16      	ldr	r3, [pc, #88]	; (8003960 <End_straight+0xb8>)
 8003906:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800390a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003912:	d900      	bls.n	8003916 <End_straight+0x6e>
 8003914:	e003      	b.n	800391e <End_straight+0x76>
						g_acc_flag=4;
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <End_straight+0xbc>)
 8003918:	2204      	movs	r2, #4
 800391a:	701a      	strb	r2, [r3, #0]
						break;
 800391c:	e004      	b.n	8003928 <End_straight+0x80>
	while (g_acc_flag!=4){
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <End_straight+0xbc>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b04      	cmp	r3, #4
 8003926:	d1ca      	bne.n	80038be <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 8003928:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <End_straight+0xc0>)
 800392a:	ed93 7a00 	vldr	s14, [r3]
 800392e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003936:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <End_straight+0xc0>)
 8003938:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 800393c:	4b0b      	ldr	r3, [pc, #44]	; (800396c <End_straight+0xc4>)
 800393e:	ed93 7a00 	vldr	s14, [r3]
 8003942:	edd7 7a03 	vldr	s15, [r7, #12]
 8003946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <End_straight+0xc4>)
 800394c:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003950:	f004 f87e 	bl	8007a50 <pl_DriveMotor_stop>
}
 8003954:	bf00      	nop
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200005d0 	.word	0x200005d0
 8003960:	200005cc 	.word	0x200005cc
 8003964:	20000804 	.word	0x20000804
 8003968:	20000220 	.word	0x20000220
 800396c:	20000224 	.word	0x20000224

08003970 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	ed87 0a05 	vstr	s0, [r7, #20]
 800397a:	edc7 0a04 	vstr	s1, [r7, #16]
 800397e:	ed87 1a03 	vstr	s2, [r7, #12]
 8003982:	edc7 1a02 	vstr	s3, [r7, #8]
 8003986:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 800398a:	edd7 7a03 	vldr	s15, [r7, #12]
 800398e:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003992:	edd7 7a04 	vldr	s15, [r7, #16]
 8003996:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800399a:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800399e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80039a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80039a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80039aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ae:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80039b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039be:	d505      	bpl.n	80039cc <turning_table2+0x5c>
 80039c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80039c4:	eef1 7a67 	vneg.f32	s15, s15
 80039c8:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 80039cc:	4a69      	ldr	r2, [pc, #420]	; (8003b74 <turning_table2+0x204>)
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 80039d2:	4a68      	ldr	r2, [pc, #416]	; (8003b74 <turning_table2+0x204>)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 80039d8:	4a66      	ldr	r2, [pc, #408]	; (8003b74 <turning_table2+0x204>)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 80039de:	4a65      	ldr	r2, [pc, #404]	; (8003b74 <turning_table2+0x204>)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 80039e4:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <turning_table2+0x204>)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 80039ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f6:	db03      	blt.n	8003a00 <turning_table2+0x90>
 80039f8:	4a5f      	ldr	r2, [pc, #380]	; (8003b78 <turning_table2+0x208>)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6053      	str	r3, [r2, #4]
 80039fe:	e006      	b.n	8003a0e <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a00:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a04:	eef1 7a67 	vneg.f32	s15, s15
 8003a08:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <turning_table2+0x208>)
 8003a0a:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a0e:	4a5a      	ldr	r2, [pc, #360]	; (8003b78 <turning_table2+0x208>)
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a14:	4b58      	ldr	r3, [pc, #352]	; (8003b78 <turning_table2+0x208>)
 8003a16:	f04f 0200 	mov.w	r2, #0
 8003a1a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003a1c:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <turning_table2+0x20c>)
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003a24:	4b55      	ldr	r3, [pc, #340]	; (8003b7c <turning_table2+0x20c>)
 8003a26:	f04f 0200 	mov.w	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <turning_table2+0x20c>)
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <turning_table2+0x210>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003a3a:	4b52      	ldr	r3, [pc, #328]	; (8003b84 <turning_table2+0x214>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	dd0e      	ble.n	8003a6c <turning_table2+0xfc>
 8003a4e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a52:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	dd05      	ble.n	8003a6c <turning_table2+0xfc>
 8003a60:	4b48      	ldr	r3, [pc, #288]	; (8003b84 <turning_table2+0x214>)
 8003a62:	2205      	movs	r2, #5
 8003a64:	701a      	strb	r2, [r3, #0]
 8003a66:	4a44      	ldr	r2, [pc, #272]	; (8003b78 <turning_table2+0x208>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a78:	dd14      	ble.n	8003aa4 <turning_table2+0x134>
 8003a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a7e:	eef1 7a67 	vneg.f32	s15, s15
 8003a82:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8e:	d509      	bpl.n	8003aa4 <turning_table2+0x134>
 8003a90:	4b3c      	ldr	r3, [pc, #240]	; (8003b84 <turning_table2+0x214>)
 8003a92:	2206      	movs	r2, #6
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a9a:	eef1 7a67 	vneg.f32	s15, s15
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <turning_table2+0x208>)
 8003aa0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003aa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab0:	d514      	bpl.n	8003adc <turning_table2+0x16c>
 8003ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ab6:	eef1 7a67 	vneg.f32	s15, s15
 8003aba:	ed97 7a07 	vldr	s14, [r7, #28]
 8003abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	dd09      	ble.n	8003adc <turning_table2+0x16c>
 8003ac8:	4b2e      	ldr	r3, [pc, #184]	; (8003b84 <turning_table2+0x214>)
 8003aca:	2205      	movs	r2, #5
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ad2:	eef1 7a67 	vneg.f32	s15, s15
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <turning_table2+0x208>)
 8003ad8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ae0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae8:	d50e      	bpl.n	8003b08 <turning_table2+0x198>
 8003aea:	ed97 7a07 	vldr	s14, [r7, #28]
 8003aee:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afa:	d505      	bpl.n	8003b08 <turning_table2+0x198>
 8003afc:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <turning_table2+0x214>)
 8003afe:	2206      	movs	r2, #6
 8003b00:	701a      	strb	r2, [r3, #0]
 8003b02:	4a1d      	ldr	r2, [pc, #116]	; (8003b78 <turning_table2+0x208>)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <turning_table2+0x218>)
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b0e:	f003 ff91 	bl	8007a34 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b12:	bf00      	nop
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <turning_table2+0x214>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d1fa      	bne.n	8003b14 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003b1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2a:	d106      	bne.n	8003b3a <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003b2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003b30:	f004 fa5a 	bl	8007fe8 <wait_ms_NoReset>
		modeacc = 0;
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <turning_table2+0x218>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <turning_table2+0x21c>)
 8003b3c:	ed93 7a00 	vldr	s14, [r3]
 8003b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <turning_table2+0x21c>)
 8003b4a:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003b4e:	f003 ff7f 	bl	8007a50 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <turning_table2+0x220>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0f      	ldr	r2, [pc, #60]	; (8003b94 <turning_table2+0x224>)
 8003b58:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <turning_table2+0x228>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a0f      	ldr	r2, [pc, #60]	; (8003b9c <turning_table2+0x22c>)
 8003b60:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <turning_table2+0x208>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	ee07 3a90 	vmov	s15, r3
}
 8003b6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000504 	.word	0x20000504
 8003b78:	200004e4 	.word	0x200004e4
 8003b7c:	200004d8 	.word	0x200004d8
 8003b80:	20000805 	.word	0x20000805
 8003b84:	20000804 	.word	0x20000804
 8003b88:	20000528 	.word	0x20000528
 8003b8c:	20000264 	.word	0x20000264
 8003b90:	20000228 	.word	0x20000228
 8003b94:	20000258 	.word	0x20000258
 8003b98:	2000022c 	.word	0x2000022c
 8003b9c:	2000025c 	.word	0x2000025c

08003ba0 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003baa:	edc7 0a04 	vstr	s1, [r7, #16]
 8003bae:	ed87 1a03 	vstr	s2, [r7, #12]
 8003bb2:	edc7 1a02 	vstr	s3, [r7, #8]
 8003bb6:	ed87 2a01 	vstr	s4, [r7, #4]
 8003bba:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003bbe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bc2:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003bc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bce:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003bd2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003bd6:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003bda:	ed97 7a00 	vldr	s14, [r7]
 8003bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be2:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003be6:	edd7 7a00 	vldr	s15, [r7]
 8003bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bf2:	d505      	bpl.n	8003c00 <slalom_table2+0x60>
 8003bf4:	edd7 7a00 	vldr	s15, [r7]
 8003bf8:	eef1 7a67 	vneg.f32	s15, s15
 8003bfc:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c00:	4a5e      	ldr	r2, [pc, #376]	; (8003d7c <slalom_table2+0x1dc>)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c06:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <slalom_table2+0x1dc>)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c0c:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <slalom_table2+0x1dc>)
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c12:	4a5a      	ldr	r2, [pc, #360]	; (8003d7c <slalom_table2+0x1dc>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003c18:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <slalom_table2+0x1dc>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c2a:	db03      	blt.n	8003c34 <slalom_table2+0x94>
 8003c2c:	4a54      	ldr	r2, [pc, #336]	; (8003d80 <slalom_table2+0x1e0>)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6053      	str	r3, [r2, #4]
 8003c32:	e006      	b.n	8003c42 <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003c34:	edd7 7a00 	vldr	s15, [r7]
 8003c38:	eef1 7a67 	vneg.f32	s15, s15
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <slalom_table2+0x1e0>)
 8003c3e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003c42:	4a4f      	ldr	r2, [pc, #316]	; (8003d80 <slalom_table2+0x1e0>)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003c48:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <slalom_table2+0x1e0>)
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003c50:	4a4c      	ldr	r2, [pc, #304]	; (8003d84 <slalom_table2+0x1e4>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003c56:	4b4b      	ldr	r3, [pc, #300]	; (8003d84 <slalom_table2+0x1e4>)
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003c5e:	4b49      	ldr	r3, [pc, #292]	; (8003d84 <slalom_table2+0x1e4>)
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003c66:	4b48      	ldr	r3, [pc, #288]	; (8003d88 <slalom_table2+0x1e8>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003c6c:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <slalom_table2+0x1ec>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003c72:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7e:	dd0e      	ble.n	8003c9e <slalom_table2+0xfe>
 8003c80:	ed97 7a07 	vldr	s14, [r7, #28]
 8003c84:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	dd05      	ble.n	8003c9e <slalom_table2+0xfe>
 8003c92:	4b3e      	ldr	r3, [pc, #248]	; (8003d8c <slalom_table2+0x1ec>)
 8003c94:	2205      	movs	r2, #5
 8003c96:	701a      	strb	r2, [r3, #0]
 8003c98:	4a39      	ldr	r2, [pc, #228]	; (8003d80 <slalom_table2+0x1e0>)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003c9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ca2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003caa:	dd14      	ble.n	8003cd6 <slalom_table2+0x136>
 8003cac:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cb0:	eef1 7a67 	vneg.f32	s15, s15
 8003cb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	d509      	bpl.n	8003cd6 <slalom_table2+0x136>
 8003cc2:	4b32      	ldr	r3, [pc, #200]	; (8003d8c <slalom_table2+0x1ec>)
 8003cc4:	2206      	movs	r2, #6
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	edd7 7a00 	vldr	s15, [r7]
 8003ccc:	eef1 7a67 	vneg.f32	s15, s15
 8003cd0:	4b2b      	ldr	r3, [pc, #172]	; (8003d80 <slalom_table2+0x1e0>)
 8003cd2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003cd6:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	d514      	bpl.n	8003d0e <slalom_table2+0x16e>
 8003ce4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ce8:	eef1 7a67 	vneg.f32	s15, s15
 8003cec:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cf8:	dd09      	ble.n	8003d0e <slalom_table2+0x16e>
 8003cfa:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <slalom_table2+0x1ec>)
 8003cfc:	2205      	movs	r2, #5
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	edd7 7a00 	vldr	s15, [r7]
 8003d04:	eef1 7a67 	vneg.f32	s15, s15
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <slalom_table2+0x1e0>)
 8003d0a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1a:	d50e      	bpl.n	8003d3a <slalom_table2+0x19a>
 8003d1c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d20:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d2c:	d505      	bpl.n	8003d3a <slalom_table2+0x19a>
 8003d2e:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <slalom_table2+0x1ec>)
 8003d30:	2206      	movs	r2, #6
 8003d32:	701a      	strb	r2, [r3, #0]
 8003d34:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <slalom_table2+0x1e0>)
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <slalom_table2+0x1f0>)
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003d40:	f003 fe78 	bl	8007a34 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003d44:	bf00      	nop
 8003d46:	4b11      	ldr	r3, [pc, #68]	; (8003d8c <slalom_table2+0x1ec>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d1fa      	bne.n	8003d46 <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <slalom_table2+0x1f4>)
 8003d52:	ed93 7a00 	vldr	s14, [r3]
 8003d56:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <slalom_table2+0x1f4>)
 8003d60:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003d64:	f003 fe74 	bl	8007a50 <pl_DriveMotor_stop>

	return turning.velocity;
 8003d68:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <slalom_table2+0x1e0>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	ee07 3a90 	vmov	s15, r3
}
 8003d70:	eeb0 0a67 	vmov.f32	s0, s15
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000504 	.word	0x20000504
 8003d80:	200004e4 	.word	0x200004e4
 8003d84:	200004d8 	.word	0x200004d8
 8003d88:	20000805 	.word	0x20000805
 8003d8c:	20000804 	.word	0x20000804
 8003d90:	20000528 	.word	0x20000528
 8003d94:	20000264 	.word	0x20000264

08003d98 <no_angle>:

void no_angle(void){
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <no_angle+0x88>)
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003da4:	4b1e      	ldr	r3, [pc, #120]	; (8003e20 <no_angle+0x88>)
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <no_angle+0x88>)
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <no_angle+0x8c>)
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003dbc:	4b19      	ldr	r3, [pc, #100]	; (8003e24 <no_angle+0x8c>)
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003dc4:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <no_angle+0x8c>)
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003dcc:	4b16      	ldr	r3, [pc, #88]	; (8003e28 <no_angle+0x90>)
 8003dce:	2203      	movs	r2, #3
 8003dd0:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003dd2:	f003 fe2f 	bl	8007a34 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003dd6:	e002      	b.n	8003dde <no_angle+0x46>
		HAL_Delay(1);
 8003dd8:	2001      	movs	r0, #1
 8003dda:	f013 fd43 	bl	8017864 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003dde:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <no_angle+0x94>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003de6:	ddf7      	ble.n	8003dd8 <no_angle+0x40>
 8003de8:	4b10      	ldr	r3, [pc, #64]	; (8003e2c <no_angle+0x94>)
 8003dea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dee:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003df2:	ddf1      	ble.n	8003dd8 <no_angle+0x40>
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <no_angle+0x94>)
 8003df6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003dfa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003dfe:	ddeb      	ble.n	8003dd8 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <no_angle+0x90>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e06:	f003 fe23 	bl	8007a50 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <no_angle+0x98>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <no_angle+0x9c>)
 8003e10:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <no_angle+0xa0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a09      	ldr	r2, [pc, #36]	; (8003e3c <no_angle+0xa4>)
 8003e18:	6013      	str	r3, [r2, #0]

}
 8003e1a:	bf00      	nop
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200004e4 	.word	0x200004e4
 8003e24:	200004d8 	.word	0x200004d8
 8003e28:	20000528 	.word	0x20000528
 8003e2c:	200002b8 	.word	0x200002b8
 8003e30:	20000228 	.word	0x20000228
 8003e34:	20000258 	.word	0x20000258
 8003e38:	2000022c 	.word	0x2000022c
 8003e3c:	2000025c 	.word	0x2000025c

08003e40 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e4a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e4e:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003e52:	4a3d      	ldr	r2, [pc, #244]	; (8003f48 <mollifier_slalom_table+0x108>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003e58:	4a3b      	ldr	r2, [pc, #236]	; (8003f48 <mollifier_slalom_table+0x108>)
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003e5e:	4a3a      	ldr	r2, [pc, #232]	; (8003f48 <mollifier_slalom_table+0x108>)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003e64:	4b39      	ldr	r3, [pc, #228]	; (8003f4c <mollifier_slalom_table+0x10c>)
 8003e66:	f04f 0200 	mov.w	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e6c:	4b37      	ldr	r3, [pc, #220]	; (8003f4c <mollifier_slalom_table+0x10c>)
 8003e6e:	f04f 0200 	mov.w	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003e74:	4a36      	ldr	r2, [pc, #216]	; (8003f50 <mollifier_slalom_table+0x110>)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003e7a:	4b35      	ldr	r3, [pc, #212]	; (8003f50 <mollifier_slalom_table+0x110>)
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e82:	4b33      	ldr	r3, [pc, #204]	; (8003f50 <mollifier_slalom_table+0x110>)
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003e8a:	4b32      	ldr	r3, [pc, #200]	; (8003f54 <mollifier_slalom_table+0x114>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003e90:	4b31      	ldr	r3, [pc, #196]	; (8003f58 <mollifier_slalom_table+0x118>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e9a:	eef0 7ae7 	vabs.f32	s15, s15
 8003e9e:	ee17 0a90 	vmov	r0, s15
 8003ea2:	f7fc fb79 	bl	8000598 <__aeabi_f2d>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4614      	mov	r4, r2
 8003eac:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003eb0:	a321      	add	r3, pc, #132	; (adr r3, 8003f38 <mollifier_slalom_table+0xf8>)
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f7fc fcef 	bl	800089c <__aeabi_ddiv>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	a31e      	add	r3, pc, #120	; (adr r3, 8003f40 <mollifier_slalom_table+0x100>)
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f7fc fbbc 	bl	8000648 <__aeabi_dmul>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4614      	mov	r4, r2
 8003ed6:	461d      	mov	r5, r3
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7fc fb5d 	bl	8000598 <__aeabi_f2d>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4620      	mov	r0, r4
 8003ee4:	4629      	mov	r1, r5
 8003ee6:	f7fc fcd9 	bl	800089c <__aeabi_ddiv>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fc fe81 	bl	8000bf8 <__aeabi_d2f>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <mollifier_slalom_table+0x11c>)
 8003efa:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003efc:	4b18      	ldr	r3, [pc, #96]	; (8003f60 <mollifier_slalom_table+0x120>)
 8003efe:	2206      	movs	r2, #6
 8003f00:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f02:	f003 fd97 	bl	8007a34 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f06:	bf00      	nop
 8003f08:	4b13      	ldr	r3, [pc, #76]	; (8003f58 <mollifier_slalom_table+0x118>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d1fa      	bne.n	8003f08 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f12:	4b14      	ldr	r3, [pc, #80]	; (8003f64 <mollifier_slalom_table+0x124>)
 8003f14:	ed93 7a00 	vldr	s14, [r3]
 8003f18:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <mollifier_slalom_table+0x124>)
 8003f22:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003f26:	f003 fd93 	bl	8007a50 <pl_DriveMotor_stop>

}
 8003f2a:	bf00      	nop
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bdb0      	pop	{r4, r5, r7, pc}
 8003f32:	bf00      	nop
 8003f34:	f3af 8000 	nop.w
 8003f38:	f9db22d1 	.word	0xf9db22d1
 8003f3c:	3fdc6a7e 	.word	0x3fdc6a7e
 8003f40:	362cef38 	.word	0x362cef38
 8003f44:	3fd78b56 	.word	0x3fd78b56
 8003f48:	20000518 	.word	0x20000518
 8003f4c:	200004e4 	.word	0x200004e4
 8003f50:	200004d8 	.word	0x200004d8
 8003f54:	20000805 	.word	0x20000805
 8003f58:	20000804 	.word	0x20000804
 8003f5c:	20000800 	.word	0x20000800
 8003f60:	20000528 	.word	0x20000528
 8003f64:	20000264 	.word	0x20000264

08003f68 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003f6c:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <no_frontwall_straight+0x70>)
 8003f6e:	f04f 0200 	mov.w	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <no_frontwall_straight+0x70>)
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003f7c:	4b16      	ldr	r3, [pc, #88]	; (8003fd8 <no_frontwall_straight+0x70>)
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003f84:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <no_frontwall_straight+0x74>)
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003f8c:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <no_frontwall_straight+0x74>)
 8003f8e:	f04f 0200 	mov.w	r2, #0
 8003f92:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <no_frontwall_straight+0x74>)
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8003f9c:	4b10      	ldr	r3, [pc, #64]	; (8003fe0 <no_frontwall_straight+0x78>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <no_frontwall_straight+0x7c>)
 8003fa4:	2205      	movs	r2, #5
 8003fa6:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003fa8:	f003 fd44 	bl	8007a34 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8003fac:	2096      	movs	r0, #150	; 0x96
 8003fae:	f004 f81b 	bl	8007fe8 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <no_frontwall_straight+0x78>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <no_frontwall_straight+0x7c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003fbe:	f003 fd47 	bl	8007a50 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003fc2:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <no_frontwall_straight+0x80>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a09      	ldr	r2, [pc, #36]	; (8003fec <no_frontwall_straight+0x84>)
 8003fc8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <no_frontwall_straight+0x88>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a09      	ldr	r2, [pc, #36]	; (8003ff4 <no_frontwall_straight+0x8c>)
 8003fd0:	6013      	str	r3, [r2, #0]

}
 8003fd2:	bf00      	nop
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	200004e4 	.word	0x200004e4
 8003fdc:	200004d8 	.word	0x200004d8
 8003fe0:	20000591 	.word	0x20000591
 8003fe4:	20000528 	.word	0x20000528
 8003fe8:	20000228 	.word	0x20000228
 8003fec:	20000258 	.word	0x20000258
 8003ff0:	2000022c 	.word	0x2000022c
 8003ff4:	2000025c 	.word	0x2000025c

08003ff8 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	ed87 0a05 	vstr	s0, [r7, #20]
 8004002:	edc7 0a04 	vstr	s1, [r7, #16]
 8004006:	ed87 1a03 	vstr	s2, [r7, #12]
 800400a:	edc7 1a02 	vstr	s3, [r7, #8]
 800400e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004012:	edd7 7a03 	vldr	s15, [r7, #12]
 8004016:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800401a:	edd7 7a04 	vldr	s15, [r7, #16]
 800401e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004022:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004026:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800402a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800402e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004036:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800403a:	edd7 7a01 	vldr	s15, [r7, #4]
 800403e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004046:	d505      	bpl.n	8004054 <straight_table_ff+0x5c>
 8004048:	edd7 7a01 	vldr	s15, [r7, #4]
 800404c:	eef1 7a67 	vneg.f32	s15, s15
 8004050:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 8004054:	4b76      	ldr	r3, [pc, #472]	; (8004230 <straight_table_ff+0x238>)
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 800405c:	4b75      	ldr	r3, [pc, #468]	; (8004234 <straight_table_ff+0x23c>)
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 8004064:	4b74      	ldr	r3, [pc, #464]	; (8004238 <straight_table_ff+0x240>)
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 800406c:	4b73      	ldr	r3, [pc, #460]	; (800423c <straight_table_ff+0x244>)
 800406e:	f04f 0200 	mov.w	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 8004074:	4b72      	ldr	r3, [pc, #456]	; (8004240 <straight_table_ff+0x248>)
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 800407c:	4b71      	ldr	r3, [pc, #452]	; (8004244 <straight_table_ff+0x24c>)
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 8004084:	4a70      	ldr	r2, [pc, #448]	; (8004248 <straight_table_ff+0x250>)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800408a:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <straight_table_ff+0x250>)
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8004090:	4a6d      	ldr	r2, [pc, #436]	; (8004248 <straight_table_ff+0x250>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8004096:	4a6c      	ldr	r2, [pc, #432]	; (8004248 <straight_table_ff+0x250>)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800409c:	4a6a      	ldr	r2, [pc, #424]	; (8004248 <straight_table_ff+0x250>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80040a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	db03      	blt.n	80040b8 <straight_table_ff+0xc0>
 80040b0:	4a66      	ldr	r2, [pc, #408]	; (800424c <straight_table_ff+0x254>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6053      	str	r3, [r2, #4]
 80040b6:	e006      	b.n	80040c6 <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 80040b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80040bc:	eef1 7a67 	vneg.f32	s15, s15
 80040c0:	4b62      	ldr	r3, [pc, #392]	; (800424c <straight_table_ff+0x254>)
 80040c2:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80040c6:	4a61      	ldr	r2, [pc, #388]	; (800424c <straight_table_ff+0x254>)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80040cc:	4b5f      	ldr	r3, [pc, #380]	; (800424c <straight_table_ff+0x254>)
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80040d4:	4b5e      	ldr	r3, [pc, #376]	; (8004250 <straight_table_ff+0x258>)
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80040dc:	4b5c      	ldr	r3, [pc, #368]	; (8004250 <straight_table_ff+0x258>)
 80040de:	f04f 0200 	mov.w	r2, #0
 80040e2:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80040e4:	4b5a      	ldr	r3, [pc, #360]	; (8004250 <straight_table_ff+0x258>)
 80040e6:	f04f 0200 	mov.w	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80040ec:	4b59      	ldr	r3, [pc, #356]	; (8004254 <straight_table_ff+0x25c>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80040f2:	4b59      	ldr	r3, [pc, #356]	; (8004258 <straight_table_ff+0x260>)
 80040f4:	2201      	movs	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80040f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004104:	dd0e      	ble.n	8004124 <straight_table_ff+0x12c>
 8004106:	ed97 7a07 	vldr	s14, [r7, #28]
 800410a:	edd7 7a05 	vldr	s15, [r7, #20]
 800410e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	dd05      	ble.n	8004124 <straight_table_ff+0x12c>
 8004118:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <straight_table_ff+0x260>)
 800411a:	2205      	movs	r2, #5
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	4a4b      	ldr	r2, [pc, #300]	; (800424c <straight_table_ff+0x254>)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004124:	edd7 7a05 	vldr	s15, [r7, #20]
 8004128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	dd14      	ble.n	800415c <straight_table_ff+0x164>
 8004132:	edd7 7a05 	vldr	s15, [r7, #20]
 8004136:	eef1 7a67 	vneg.f32	s15, s15
 800413a:	ed97 7a07 	vldr	s14, [r7, #28]
 800413e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	d509      	bpl.n	800415c <straight_table_ff+0x164>
 8004148:	4b43      	ldr	r3, [pc, #268]	; (8004258 <straight_table_ff+0x260>)
 800414a:	2206      	movs	r2, #6
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004152:	eef1 7a67 	vneg.f32	s15, s15
 8004156:	4b3d      	ldr	r3, [pc, #244]	; (800424c <straight_table_ff+0x254>)
 8004158:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800415c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004160:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004168:	d514      	bpl.n	8004194 <straight_table_ff+0x19c>
 800416a:	edd7 7a05 	vldr	s15, [r7, #20]
 800416e:	eef1 7a67 	vneg.f32	s15, s15
 8004172:	ed97 7a07 	vldr	s14, [r7, #28]
 8004176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	dd09      	ble.n	8004194 <straight_table_ff+0x19c>
 8004180:	4b35      	ldr	r3, [pc, #212]	; (8004258 <straight_table_ff+0x260>)
 8004182:	2205      	movs	r2, #5
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	edd7 7a01 	vldr	s15, [r7, #4]
 800418a:	eef1 7a67 	vneg.f32	s15, s15
 800418e:	4b2f      	ldr	r3, [pc, #188]	; (800424c <straight_table_ff+0x254>)
 8004190:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004194:	edd7 7a05 	vldr	s15, [r7, #20]
 8004198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d50e      	bpl.n	80041c0 <straight_table_ff+0x1c8>
 80041a2:	ed97 7a07 	vldr	s14, [r7, #28]
 80041a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b2:	d505      	bpl.n	80041c0 <straight_table_ff+0x1c8>
 80041b4:	4b28      	ldr	r3, [pc, #160]	; (8004258 <straight_table_ff+0x260>)
 80041b6:	2206      	movs	r2, #6
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	4a24      	ldr	r2, [pc, #144]	; (800424c <straight_table_ff+0x254>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80041c0:	4b26      	ldr	r3, [pc, #152]	; (800425c <straight_table_ff+0x264>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80041c6:	f003 fc35 	bl	8007a34 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 80041ca:	bf00      	nop
 80041cc:	4b22      	ldr	r3, [pc, #136]	; (8004258 <straight_table_ff+0x260>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d1fa      	bne.n	80041cc <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 80041d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80041da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d105      	bne.n	80041f0 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 80041e4:	2064      	movs	r0, #100	; 0x64
 80041e6:	f003 feff 	bl	8007fe8 <wait_ms_NoReset>
		modeacc = 0;
 80041ea:	4b1c      	ldr	r3, [pc, #112]	; (800425c <straight_table_ff+0x264>)
 80041ec:	2200      	movs	r2, #0
 80041ee:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80041f0:	4b1b      	ldr	r3, [pc, #108]	; (8004260 <straight_table_ff+0x268>)
 80041f2:	ed93 7a00 	vldr	s14, [r3]
 80041f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041fe:	4b18      	ldr	r3, [pc, #96]	; (8004260 <straight_table_ff+0x268>)
 8004200:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004204:	4b17      	ldr	r3, [pc, #92]	; (8004264 <straight_table_ff+0x26c>)
 8004206:	ed93 7a00 	vldr	s14, [r3]
 800420a:	edd7 7a05 	vldr	s15, [r7, #20]
 800420e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004212:	4b14      	ldr	r3, [pc, #80]	; (8004264 <straight_table_ff+0x26c>)
 8004214:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004218:	f003 fc1a 	bl	8007a50 <pl_DriveMotor_stop>



	return straight.velocity;
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <straight_table_ff+0x254>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	ee07 3a90 	vmov	s15, r3



}
 8004224:	eeb0 0a67 	vmov.f32	s0, s15
 8004228:	3720      	adds	r7, #32
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	20000554 	.word	0x20000554
 8004234:	20000558 	.word	0x20000558
 8004238:	2000055c 	.word	0x2000055c
 800423c:	20000560 	.word	0x20000560
 8004240:	20000564 	.word	0x20000564
 8004244:	20000568 	.word	0x20000568
 8004248:	200004f0 	.word	0x200004f0
 800424c:	200004d8 	.word	0x200004d8
 8004250:	200004e4 	.word	0x200004e4
 8004254:	20000805 	.word	0x20000805
 8004258:	20000804 	.word	0x20000804
 800425c:	20000528 	.word	0x20000528
 8004260:	20000220 	.word	0x20000220
 8004264:	20000224 	.word	0x20000224

08004268 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6178      	str	r0, [r7, #20]
 8004270:	ed87 0a04 	vstr	s0, [r7, #16]
 8004274:	edc7 0a03 	vstr	s1, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	ed87 1a01 	vstr	s2, [r7, #4]
 800427e:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 8004282:	edd7 7a04 	vldr	s15, [r7, #16]
 8004286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428e:	db7c      	blt.n	800438a <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7fc f981 	bl	8000598 <__aeabi_f2d>
 8004296:	a3c8      	add	r3, pc, #800	; (adr r3, 80045b8 <feedforward_const_accel+0x350>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fc f9d4 	bl	8000648 <__aeabi_dmul>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	4bc6      	ldr	r3, [pc, #792]	; (80045c8 <feedforward_const_accel+0x360>)
 80042ae:	f7fc faf5 	bl	800089c <__aeabi_ddiv>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042ba:	a3b5      	add	r3, pc, #724	; (adr r3, 8004590 <feedforward_const_accel+0x328>)
 80042bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c0:	f7fc faec 	bl	800089c <__aeabi_ddiv>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042d4:	f7fc fae2 	bl	800089c <__aeabi_ddiv>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	a3ad      	add	r3, pc, #692	; (adr r3, 8004598 <feedforward_const_accel+0x330>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fb fff9 	bl	80002dc <__adddf3>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	a3ab      	add	r3, pc, #684	; (adr r3, 80045a0 <feedforward_const_accel+0x338>)
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f7fc f9a6 	bl	8000648 <__aeabi_dmul>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	4610      	mov	r0, r2
 8004302:	4619      	mov	r1, r3
 8004304:	a3a8      	add	r3, pc, #672	; (adr r3, 80045a8 <feedforward_const_accel+0x340>)
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	f7fc fac7 	bl	800089c <__aeabi_ddiv>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4614      	mov	r4, r2
 8004314:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004316:	ed97 7a04 	vldr	s14, [r7, #16]
 800431a:	eddf 6aac 	vldr	s13, [pc, #688]	; 80045cc <feedforward_const_accel+0x364>
 800431e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004322:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80045d0 <feedforward_const_accel+0x368>
 8004326:	ee67 7a87 	vmul.f32	s15, s15, s14
 800432a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800432e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004332:	ee16 0a90 	vmov	r0, s13
 8004336:	f7fc f92f 	bl	8000598 <__aeabi_f2d>
 800433a:	a39d      	add	r3, pc, #628	; (adr r3, 80045b0 <feedforward_const_accel+0x348>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	f7fc f982 	bl	8000648 <__aeabi_dmul>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	a390      	add	r3, pc, #576	; (adr r3, 8004590 <feedforward_const_accel+0x328>)
 800434e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004352:	f7fc faa3 	bl	800089c <__aeabi_ddiv>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004366:	f7fc fa99 	bl	800089c <__aeabi_ddiv>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	4620      	mov	r0, r4
 8004370:	4629      	mov	r1, r5
 8004372:	f7fb ffb3 	bl	80002dc <__adddf3>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	f7fc fc3b 	bl	8000bf8 <__aeabi_d2f>
 8004382:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	e07b      	b.n	8004482 <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7fc f904 	bl	8000598 <__aeabi_f2d>
 8004390:	a389      	add	r3, pc, #548	; (adr r3, 80045b8 <feedforward_const_accel+0x350>)
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f7fc f957 	bl	8000648 <__aeabi_dmul>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <feedforward_const_accel+0x360>)
 80043a8:	f7fc fa78 	bl	800089c <__aeabi_ddiv>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4610      	mov	r0, r2
 80043b2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80043b4:	a376      	add	r3, pc, #472	; (adr r3, 8004590 <feedforward_const_accel+0x328>)
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f7fc fa6f 	bl	800089c <__aeabi_ddiv>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4610      	mov	r0, r2
 80043c4:	4619      	mov	r1, r3
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043ce:	f7fc fa65 	bl	800089c <__aeabi_ddiv>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4610      	mov	r0, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	a36f      	add	r3, pc, #444	; (adr r3, 8004598 <feedforward_const_accel+0x330>)
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f7fb ff7a 	bl	80002d8 <__aeabi_dsub>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	a36c      	add	r3, pc, #432	; (adr r3, 80045a0 <feedforward_const_accel+0x338>)
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	f7fc f929 	bl	8000648 <__aeabi_dmul>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	a36a      	add	r3, pc, #424	; (adr r3, 80045a8 <feedforward_const_accel+0x340>)
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f7fc fa4a 	bl	800089c <__aeabi_ddiv>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004410:	ed97 7a04 	vldr	s14, [r7, #16]
 8004414:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80045cc <feedforward_const_accel+0x364>
 8004418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800441c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80045d0 <feedforward_const_accel+0x368>
 8004420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004424:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004428:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800442c:	ee16 0a90 	vmov	r0, s13
 8004430:	f7fc f8b2 	bl	8000598 <__aeabi_f2d>
 8004434:	a35e      	add	r3, pc, #376	; (adr r3, 80045b0 <feedforward_const_accel+0x348>)
 8004436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443a:	f7fc f905 	bl	8000648 <__aeabi_dmul>
 800443e:	4602      	mov	r2, r0
 8004440:	460b      	mov	r3, r1
 8004442:	4610      	mov	r0, r2
 8004444:	4619      	mov	r1, r3
 8004446:	a352      	add	r3, pc, #328	; (adr r3, 8004590 <feedforward_const_accel+0x328>)
 8004448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444c:	f7fc fa26 	bl	800089c <__aeabi_ddiv>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4610      	mov	r0, r2
 8004456:	4619      	mov	r1, r3
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004460:	f7fc fa1c 	bl	800089c <__aeabi_ddiv>
 8004464:	4602      	mov	r2, r0
 8004466:	460b      	mov	r3, r1
 8004468:	4620      	mov	r0, r4
 800446a:	4629      	mov	r1, r5
 800446c:	f7fb ff36 	bl	80002dc <__adddf3>
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4610      	mov	r0, r2
 8004476:	4619      	mov	r1, r3
 8004478:	f7fc fbbe 	bl	8000bf8 <__aeabi_d2f>
 800447c:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8004482:	edd7 7a01 	vldr	s15, [r7, #4]
 8004486:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	f2c0 80a1 	blt.w	80045d4 <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004492:	6838      	ldr	r0, [r7, #0]
 8004494:	f7fc f880 	bl	8000598 <__aeabi_f2d>
 8004498:	a349      	add	r3, pc, #292	; (adr r3, 80045c0 <feedforward_const_accel+0x358>)
 800449a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449e:	f7fc f8d3 	bl	8000648 <__aeabi_dmul>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	f04f 0200 	mov.w	r2, #0
 80044ae:	4b46      	ldr	r3, [pc, #280]	; (80045c8 <feedforward_const_accel+0x360>)
 80044b0:	f7fc f9f4 	bl	800089c <__aeabi_ddiv>
 80044b4:	4602      	mov	r2, r0
 80044b6:	460b      	mov	r3, r1
 80044b8:	4610      	mov	r0, r2
 80044ba:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80044bc:	a334      	add	r3, pc, #208	; (adr r3, 8004590 <feedforward_const_accel+0x328>)
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	f7fc f9eb 	bl	800089c <__aeabi_ddiv>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4610      	mov	r0, r2
 80044cc:	4619      	mov	r1, r3
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044d6:	f7fc f9e1 	bl	800089c <__aeabi_ddiv>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	a32d      	add	r3, pc, #180	; (adr r3, 8004598 <feedforward_const_accel+0x330>)
 80044e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e8:	f7fb fef8 	bl	80002dc <__adddf3>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4610      	mov	r0, r2
 80044f2:	4619      	mov	r1, r3
 80044f4:	a32a      	add	r3, pc, #168	; (adr r3, 80045a0 <feedforward_const_accel+0x338>)
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f7fc f8a5 	bl	8000648 <__aeabi_dmul>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4610      	mov	r0, r2
 8004504:	4619      	mov	r1, r3
 8004506:	a328      	add	r3, pc, #160	; (adr r3, 80045a8 <feedforward_const_accel+0x340>)
 8004508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450c:	f7fc f9c6 	bl	800089c <__aeabi_ddiv>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004518:	ed97 7a01 	vldr	s14, [r7, #4]
 800451c:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80045cc <feedforward_const_accel+0x364>
 8004520:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004524:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80045d0 <feedforward_const_accel+0x368>
 8004528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800452c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004534:	ee16 0a90 	vmov	r0, s13
 8004538:	f7fc f82e 	bl	8000598 <__aeabi_f2d>
 800453c:	a31c      	add	r3, pc, #112	; (adr r3, 80045b0 <feedforward_const_accel+0x348>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f7fc f881 	bl	8000648 <__aeabi_dmul>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4610      	mov	r0, r2
 800454c:	4619      	mov	r1, r3
 800454e:	a310      	add	r3, pc, #64	; (adr r3, 8004590 <feedforward_const_accel+0x328>)
 8004550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004554:	f7fc f9a2 	bl	800089c <__aeabi_ddiv>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004568:	f7fc f998 	bl	800089c <__aeabi_ddiv>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4620      	mov	r0, r4
 8004572:	4629      	mov	r1, r5
 8004574:	f7fb feb2 	bl	80002dc <__adddf3>
 8004578:	4602      	mov	r2, r0
 800457a:	460b      	mov	r3, r1
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	f7fc fb3a 	bl	8000bf8 <__aeabi_d2f>
 8004584:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 800458a:	e09f      	b.n	80046cc <feedforward_const_accel+0x464>
 800458c:	f3af 8000 	nop.w
 8004590:	99e4ac6e 	.word	0x99e4ac6e
 8004594:	3f9a9a29 	.word	0x3f9a9a29
 8004598:	eb1c432d 	.word	0xeb1c432d
 800459c:	3f1a36e2 	.word	0x3f1a36e2
 80045a0:	51eb851f 	.word	0x51eb851f
 80045a4:	3ff11eb8 	.word	0x3ff11eb8
 80045a8:	b7952d23 	.word	0xb7952d23
 80045ac:	3f569c23 	.word	0x3f569c23
 80045b0:	761b0f50 	.word	0x761b0f50
 80045b4:	3f66bf29 	.word	0x3f66bf29
 80045b8:	7df8b79b 	.word	0x7df8b79b
 80045bc:	3ed5fdfc 	.word	0x3ed5fdfc
 80045c0:	1db94e6b 	.word	0x1db94e6b
 80045c4:	3eb5cf75 	.word	0x3eb5cf75
 80045c8:	408f4000 	.word	0x408f4000
 80045cc:	447a0000 	.word	0x447a0000
 80045d0:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80045d4:	6838      	ldr	r0, [r7, #0]
 80045d6:	f7fb ffdf 	bl	8000598 <__aeabi_f2d>
 80045da:	a34c      	add	r3, pc, #304	; (adr r3, 800470c <feedforward_const_accel+0x4a4>)
 80045dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e0:	f7fc f832 	bl	8000648 <__aeabi_dmul>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4610      	mov	r0, r2
 80045ea:	4619      	mov	r1, r3
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	4b43      	ldr	r3, [pc, #268]	; (8004700 <feedforward_const_accel+0x498>)
 80045f2:	f7fc f953 	bl	800089c <__aeabi_ddiv>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80045fe:	a336      	add	r3, pc, #216	; (adr r3, 80046d8 <feedforward_const_accel+0x470>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fc f94a 	bl	800089c <__aeabi_ddiv>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004618:	f7fc f940 	bl	800089c <__aeabi_ddiv>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	a32e      	add	r3, pc, #184	; (adr r3, 80046e0 <feedforward_const_accel+0x478>)
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f7fb fe55 	bl	80002d8 <__aeabi_dsub>
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	a32c      	add	r3, pc, #176	; (adr r3, 80046e8 <feedforward_const_accel+0x480>)
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	f7fc f804 	bl	8000648 <__aeabi_dmul>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	4610      	mov	r0, r2
 8004646:	4619      	mov	r1, r3
 8004648:	a329      	add	r3, pc, #164	; (adr r3, 80046f0 <feedforward_const_accel+0x488>)
 800464a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464e:	f7fc f925 	bl	800089c <__aeabi_ddiv>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4614      	mov	r4, r2
 8004658:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800465a:	ed97 7a01 	vldr	s14, [r7, #4]
 800465e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004704 <feedforward_const_accel+0x49c>
 8004662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004666:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004708 <feedforward_const_accel+0x4a0>
 800466a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800466e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004672:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004676:	ee16 0a90 	vmov	r0, s13
 800467a:	f7fb ff8d 	bl	8000598 <__aeabi_f2d>
 800467e:	a31e      	add	r3, pc, #120	; (adr r3, 80046f8 <feedforward_const_accel+0x490>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb ffe0 	bl	8000648 <__aeabi_dmul>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4610      	mov	r0, r2
 800468e:	4619      	mov	r1, r3
 8004690:	a311      	add	r3, pc, #68	; (adr r3, 80046d8 <feedforward_const_accel+0x470>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fc f901 	bl	800089c <__aeabi_ddiv>
 800469a:	4602      	mov	r2, r0
 800469c:	460b      	mov	r3, r1
 800469e:	4610      	mov	r0, r2
 80046a0:	4619      	mov	r1, r3
 80046a2:	f04f 0200 	mov.w	r2, #0
 80046a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046aa:	f7fc f8f7 	bl	800089c <__aeabi_ddiv>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4620      	mov	r0, r4
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7fb fe11 	bl	80002dc <__adddf3>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	f7fc fa99 	bl	8000bf8 <__aeabi_d2f>
 80046c6:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	601a      	str	r2, [r3, #0]
}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bdb0      	pop	{r4, r5, r7, pc}
 80046d4:	f3af 8000 	nop.w
 80046d8:	99e4ac6e 	.word	0x99e4ac6e
 80046dc:	3f9a9a29 	.word	0x3f9a9a29
 80046e0:	eb1c432d 	.word	0xeb1c432d
 80046e4:	3f1a36e2 	.word	0x3f1a36e2
 80046e8:	51eb851f 	.word	0x51eb851f
 80046ec:	3ff11eb8 	.word	0x3ff11eb8
 80046f0:	b7952d23 	.word	0xb7952d23
 80046f4:	3f569c23 	.word	0x3f569c23
 80046f8:	761b0f50 	.word	0x761b0f50
 80046fc:	3f66bf29 	.word	0x3f66bf29
 8004700:	408f4000 	.word	0x408f4000
 8004704:	447a0000 	.word	0x447a0000
 8004708:	421c0000 	.word	0x421c0000
 800470c:	1db94e6b 	.word	0x1db94e6b
 8004710:	3eb5cf75 	.word	0x3eb5cf75

08004714 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004718:	4b0f      	ldr	r3, [pc, #60]	; (8004758 <PID_Init+0x44>)
 800471a:	4a10      	ldr	r2, [pc, #64]	; (800475c <PID_Init+0x48>)
 800471c:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 800471e:	4b10      	ldr	r3, [pc, #64]	; (8004760 <PID_Init+0x4c>)
 8004720:	4a10      	ldr	r2, [pc, #64]	; (8004764 <PID_Init+0x50>)
 8004722:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8004724:	4b10      	ldr	r3, [pc, #64]	; (8004768 <PID_Init+0x54>)
 8004726:	f04f 0200 	mov.w	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <PID_Init+0x58>)
 800472e:	4a10      	ldr	r2, [pc, #64]	; (8004770 <PID_Init+0x5c>)
 8004730:	601a      	str	r2, [r3, #0]
	Kti = 0.05; //1//.6//I項の制御量旋回*****************************************************
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <PID_Init+0x60>)
 8004734:	4a10      	ldr	r2, [pc, #64]	; (8004778 <PID_Init+0x64>)
 8004736:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <PID_Init+0x68>)
 800473a:	4a11      	ldr	r2, [pc, #68]	; (8004780 <PID_Init+0x6c>)
 800473c:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <PID_Init+0x70>)
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004746:	4b10      	ldr	r3, [pc, #64]	; (8004788 <PID_Init+0x74>)
 8004748:	f04f 0200 	mov.w	r2, #0
 800474c:	609a      	str	r2, [r3, #8]

}
 800474e:	bf00      	nop
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	20000554 	.word	0x20000554
 800475c:	40466666 	.word	0x40466666
 8004760:	20000558 	.word	0x20000558
 8004764:	3da3d70a 	.word	0x3da3d70a
 8004768:	2000055c 	.word	0x2000055c
 800476c:	20000560 	.word	0x20000560
 8004770:	3fcccccd 	.word	0x3fcccccd
 8004774:	20000564 	.word	0x20000564
 8004778:	3d4ccccd 	.word	0x3d4ccccd
 800477c:	20000568 	.word	0x20000568
 8004780:	3b03126f 	.word	0x3b03126f
 8004784:	20000534 	.word	0x20000534
 8004788:	20000544 	.word	0x20000544

0800478c <clear_Ierror>:

void clear_Ierror(void) {
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004790:	4b06      	ldr	r3, [pc, #24]	; (80047ac <clear_Ierror+0x20>)
 8004792:	f04f 0200 	mov.w	r2, #0
 8004796:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <clear_Ierror+0x24>)
 800479a:	f04f 0200 	mov.w	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
}
 80047a0:	bf00      	nop
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	20000534 	.word	0x20000534
 80047b0:	20000544 	.word	0x20000544

080047b4 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	ed87 0a01 	vstr	s0, [r7, #4]
 80047c2:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80047cc:	f04f 0300 	mov.w	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 80047d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047de:	d101      	bne.n	80047e4 <EncoderGyro_PID+0x30>
		reset_speed();
 80047e0:	f7fc fc1a 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 80047e4:	4b70      	ldr	r3, [pc, #448]	; (80049a8 <EncoderGyro_PID+0x1f4>)
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	eef0 7ae7 	vabs.f32	s15, s15
 80047ee:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80049ac <EncoderGyro_PID+0x1f8>
 80047f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fa:	d520      	bpl.n	800483e <EncoderGyro_PID+0x8a>
 80047fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004800:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80049b0 <EncoderGyro_PID+0x1fc>
 8004804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800480c:	db17      	blt.n	800483e <EncoderGyro_PID+0x8a>
 800480e:	4b69      	ldr	r3, [pc, #420]	; (80049b4 <EncoderGyro_PID+0x200>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d013      	beq.n	800483e <EncoderGyro_PID+0x8a>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004816:	4b68      	ldr	r3, [pc, #416]	; (80049b8 <EncoderGyro_PID+0x204>)
 8004818:	ed93 7a00 	vldr	s14, [r3]
 800481c:	4b67      	ldr	r3, [pc, #412]	; (80049bc <EncoderGyro_PID+0x208>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004826:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800482a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800482e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004836:	4b62      	ldr	r3, [pc, #392]	; (80049c0 <EncoderGyro_PID+0x20c>)
 8004838:	edc3 7a00 	vstr	s15, [r3]
 800483c:	e01a      	b.n	8004874 <EncoderGyro_PID+0xc0>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 800483e:	4b61      	ldr	r3, [pc, #388]	; (80049c4 <EncoderGyro_PID+0x210>)
 8004840:	ed93 7a00 	vldr	s14, [r3]
 8004844:	4b60      	ldr	r3, [pc, #384]	; (80049c8 <EncoderGyro_PID+0x214>)
 8004846:	edd3 7a00 	vldr	s15, [r3]
 800484a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800484e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004852:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004856:	ed97 7a01 	vldr	s14, [r7, #4]
 800485a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800485e:	4b58      	ldr	r3, [pc, #352]	; (80049c0 <EncoderGyro_PID+0x20c>)
 8004860:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 8004864:	4b59      	ldr	r3, [pc, #356]	; (80049cc <EncoderGyro_PID+0x218>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a54      	ldr	r2, [pc, #336]	; (80049bc <EncoderGyro_PID+0x208>)
 800486a:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 800486c:	4b58      	ldr	r3, [pc, #352]	; (80049d0 <EncoderGyro_PID+0x21c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a51      	ldr	r2, [pc, #324]	; (80049b8 <EncoderGyro_PID+0x204>)
 8004872:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004874:	4b52      	ldr	r3, [pc, #328]	; (80049c0 <EncoderGyro_PID+0x20c>)
 8004876:	ed93 7a00 	vldr	s14, [r3]
 800487a:	4b51      	ldr	r3, [pc, #324]	; (80049c0 <EncoderGyro_PID+0x20c>)
 800487c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004880:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004884:	4b4e      	ldr	r3, [pc, #312]	; (80049c0 <EncoderGyro_PID+0x20c>)
 8004886:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 800488a:	4b4d      	ldr	r3, [pc, #308]	; (80049c0 <EncoderGyro_PID+0x20c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a4c      	ldr	r2, [pc, #304]	; (80049c0 <EncoderGyro_PID+0x20c>)
 8004890:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004892:	4b4b      	ldr	r3, [pc, #300]	; (80049c0 <EncoderGyro_PID+0x20c>)
 8004894:	ed93 7a02 	vldr	s14, [r3, #8]
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <EncoderGyro_PID+0x20c>)
 800489a:	edd3 7a00 	vldr	s15, [r3]
 800489e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a2:	4b47      	ldr	r3, [pc, #284]	; (80049c0 <EncoderGyro_PID+0x20c>)
 80048a4:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80048a8:	4b45      	ldr	r3, [pc, #276]	; (80049c0 <EncoderGyro_PID+0x20c>)
 80048aa:	ed93 7a00 	vldr	s14, [r3]
 80048ae:	4b49      	ldr	r3, [pc, #292]	; (80049d4 <EncoderGyro_PID+0x220>)
 80048b0:	edd3 7a00 	vldr	s15, [r3]
 80048b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048b8:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <EncoderGyro_PID+0x20c>)
 80048ba:	edd3 6a02 	vldr	s13, [r3, #8]
 80048be:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <EncoderGyro_PID+0x224>)
 80048c0:	edd3 7a00 	vldr	s15, [r3]
 80048c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048cc:	4b3c      	ldr	r3, [pc, #240]	; (80049c0 <EncoderGyro_PID+0x20c>)
 80048ce:	edd3 6a03 	vldr	s13, [r3, #12]
 80048d2:	4b42      	ldr	r3, [pc, #264]	; (80049dc <EncoderGyro_PID+0x228>)
 80048d4:	edd3 7a00 	vldr	s15, [r3]
 80048d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e0:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 80048e4:	4b30      	ldr	r3, [pc, #192]	; (80049a8 <EncoderGyro_PID+0x1f4>)
 80048e6:	edd3 7a00 	vldr	s15, [r3]
 80048ea:	ed97 7a00 	vldr	s14, [r7]
 80048ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <EncoderGyro_PID+0x22c>)
 80048f4:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 80048f8:	4b39      	ldr	r3, [pc, #228]	; (80049e0 <EncoderGyro_PID+0x22c>)
 80048fa:	ed93 7a00 	vldr	s14, [r3]
 80048fe:	4b38      	ldr	r3, [pc, #224]	; (80049e0 <EncoderGyro_PID+0x22c>)
 8004900:	edd3 7a01 	vldr	s15, [r3, #4]
 8004904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004908:	4b35      	ldr	r3, [pc, #212]	; (80049e0 <EncoderGyro_PID+0x22c>)
 800490a:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 800490e:	4b34      	ldr	r3, [pc, #208]	; (80049e0 <EncoderGyro_PID+0x22c>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a33      	ldr	r2, [pc, #204]	; (80049e0 <EncoderGyro_PID+0x22c>)
 8004914:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004916:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <EncoderGyro_PID+0x22c>)
 8004918:	ed93 7a02 	vldr	s14, [r3, #8]
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <EncoderGyro_PID+0x22c>)
 800491e:	edd3 7a00 	vldr	s15, [r3]
 8004922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004926:	4b2e      	ldr	r3, [pc, #184]	; (80049e0 <EncoderGyro_PID+0x22c>)
 8004928:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 800492c:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <EncoderGyro_PID+0x22c>)
 800492e:	ed93 7a00 	vldr	s14, [r3]
 8004932:	4b2c      	ldr	r3, [pc, #176]	; (80049e4 <EncoderGyro_PID+0x230>)
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800493c:	4b28      	ldr	r3, [pc, #160]	; (80049e0 <EncoderGyro_PID+0x22c>)
 800493e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004942:	4b29      	ldr	r3, [pc, #164]	; (80049e8 <EncoderGyro_PID+0x234>)
 8004944:	edd3 7a00 	vldr	s15, [r3]
 8004948:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800494c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004950:	4b23      	ldr	r3, [pc, #140]	; (80049e0 <EncoderGyro_PID+0x22c>)
 8004952:	edd3 6a03 	vldr	s13, [r3, #12]
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <EncoderGyro_PID+0x238>)
 8004958:	edd3 7a00 	vldr	s15, [r3]
 800495c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004964:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004968:	edd7 7a05 	vldr	s15, [r7, #20]
 800496c:	eddf 6a20 	vldr	s13, [pc, #128]	; 80049f0 <EncoderGyro_PID+0x23c>
 8004970:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004974:	4b1f      	ldr	r3, [pc, #124]	; (80049f4 <EncoderGyro_PID+0x240>)
 8004976:	edd3 7a00 	vldr	s15, [r3]
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004984:	edd7 7a04 	vldr	s15, [r7, #16]
 8004988:	eddf 6a19 	vldr	s13, [pc, #100]	; 80049f0 <EncoderGyro_PID+0x23c>
 800498c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004990:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <EncoderGyro_PID+0x240>)
 8004992:	edd3 7a00 	vldr	s15, [r3]
 8004996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	edc3 7a00 	vstr	s15, [r3]

}
 80049a0:	bf00      	nop
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	20000268 	.word	0x20000268
 80049ac:	42f00000 	.word	0x42f00000
 80049b0:	42c80000 	.word	0x42c80000
 80049b4:	20000528 	.word	0x20000528
 80049b8:	2000025c 	.word	0x2000025c
 80049bc:	20000258 	.word	0x20000258
 80049c0:	20000534 	.word	0x20000534
 80049c4:	2000022c 	.word	0x2000022c
 80049c8:	20000228 	.word	0x20000228
 80049cc:	20000238 	.word	0x20000238
 80049d0:	2000023c 	.word	0x2000023c
 80049d4:	20000554 	.word	0x20000554
 80049d8:	20000558 	.word	0x20000558
 80049dc:	2000055c 	.word	0x2000055c
 80049e0:	20000544 	.word	0x20000544
 80049e4:	20000560 	.word	0x20000560
 80049e8:	20000564 	.word	0x20000564
 80049ec:	20000568 	.word	0x20000568
 80049f0:	44d1e000 	.word	0x44d1e000
 80049f4:	200004d4 	.word	0x200004d4

080049f8 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 80049f8:	b480      	push	{r7}
 80049fa:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 80049fc:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <init_WallControl+0x104>)
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004a02:	4b3f      	ldr	r3, [pc, #252]	; (8004b00 <init_WallControl+0x108>)
 8004a04:	2200      	movs	r2, #0
 8004a06:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004a08:	4b3e      	ldr	r3, [pc, #248]	; (8004b04 <init_WallControl+0x10c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	; (8004b08 <init_WallControl+0x110>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004a14:	4b3d      	ldr	r3, [pc, #244]	; (8004b0c <init_WallControl+0x114>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <init_WallControl+0x118>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004a20:	4b3c      	ldr	r3, [pc, #240]	; (8004b14 <init_WallControl+0x11c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004a26:	4b3c      	ldr	r3, [pc, #240]	; (8004b18 <init_WallControl+0x120>)
 8004a28:	4a3c      	ldr	r2, [pc, #240]	; (8004b1c <init_WallControl+0x124>)
 8004a2a:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004a2c:	4b3c      	ldr	r3, [pc, #240]	; (8004b20 <init_WallControl+0x128>)
 8004a2e:	4a3d      	ldr	r2, [pc, #244]	; (8004b24 <init_WallControl+0x12c>)
 8004a30:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <init_WallControl+0x130>)
 8004a34:	4a3d      	ldr	r2, [pc, #244]	; (8004b2c <init_WallControl+0x134>)
 8004a36:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004a38:	4b3d      	ldr	r3, [pc, #244]	; (8004b30 <init_WallControl+0x138>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004a3e:	4b3d      	ldr	r3, [pc, #244]	; (8004b34 <init_WallControl+0x13c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004a44:	4b3c      	ldr	r3, [pc, #240]	; (8004b38 <init_WallControl+0x140>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004a4a:	4b3c      	ldr	r3, [pc, #240]	; (8004b3c <init_WallControl+0x144>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004a50:	4b3b      	ldr	r3, [pc, #236]	; (8004b40 <init_WallControl+0x148>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <init_WallControl+0x14c>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <init_WallControl+0x150>)
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004a64:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <init_WallControl+0x154>)
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004a6c:	4b38      	ldr	r3, [pc, #224]	; (8004b50 <init_WallControl+0x158>)
 8004a6e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a72:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004a74:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <init_WallControl+0x15c>)
 8004a76:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8004a7a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004a7c:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <init_WallControl+0x160>)
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004a84:	4b35      	ldr	r3, [pc, #212]	; (8004b5c <init_WallControl+0x164>)
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004a8c:	4b34      	ldr	r3, [pc, #208]	; (8004b60 <init_WallControl+0x168>)
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004a94:	4b33      	ldr	r3, [pc, #204]	; (8004b64 <init_WallControl+0x16c>)
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <init_WallControl+0x170>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004aa2:	4b32      	ldr	r3, [pc, #200]	; (8004b6c <init_WallControl+0x174>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004aa8:	4b31      	ldr	r3, [pc, #196]	; (8004b70 <init_WallControl+0x178>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004aae:	4b31      	ldr	r3, [pc, #196]	; (8004b74 <init_WallControl+0x17c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <init_WallControl+0x180>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004aba:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <init_WallControl+0x184>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <init_WallControl+0x188>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004ac6:	4b2f      	ldr	r3, [pc, #188]	; (8004b84 <init_WallControl+0x18c>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004acc:	4b2e      	ldr	r3, [pc, #184]	; (8004b88 <init_WallControl+0x190>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004ad2:	4b2e      	ldr	r3, [pc, #184]	; (8004b8c <init_WallControl+0x194>)
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <init_WallControl+0x198>)
 8004adc:	f04f 0200 	mov.w	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004ae2:	4b2c      	ldr	r3, [pc, #176]	; (8004b94 <init_WallControl+0x19c>)
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004aea:	4b2b      	ldr	r3, [pc, #172]	; (8004b98 <init_WallControl+0x1a0>)
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
}
 8004af2:	bf00      	nop
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	20000590 	.word	0x20000590
 8004b00:	20000591 	.word	0x20000591
 8004b04:	20000593 	.word	0x20000593
 8004b08:	20000592 	.word	0x20000592
 8004b0c:	20000595 	.word	0x20000595
 8004b10:	20000596 	.word	0x20000596
 8004b14:	20000597 	.word	0x20000597
 8004b18:	20000598 	.word	0x20000598
 8004b1c:	44d2a000 	.word	0x44d2a000
 8004b20:	2000059c 	.word	0x2000059c
 8004b24:	44b56000 	.word	0x44b56000
 8004b28:	200005a0 	.word	0x200005a0
 8004b2c:	420c0000 	.word	0x420c0000
 8004b30:	200005b8 	.word	0x200005b8
 8004b34:	200005b4 	.word	0x200005b4
 8004b38:	200005c0 	.word	0x200005c0
 8004b3c:	200005bc 	.word	0x200005bc
 8004b40:	200005c8 	.word	0x200005c8
 8004b44:	200005c4 	.word	0x200005c4
 8004b48:	200005d0 	.word	0x200005d0
 8004b4c:	200005cc 	.word	0x200005cc
 8004b50:	200005d8 	.word	0x200005d8
 8004b54:	200005d4 	.word	0x200005d4
 8004b58:	200005e0 	.word	0x200005e0
 8004b5c:	200005dc 	.word	0x200005dc
 8004b60:	200005e8 	.word	0x200005e8
 8004b64:	200005e4 	.word	0x200005e4
 8004b68:	200005ec 	.word	0x200005ec
 8004b6c:	200005ed 	.word	0x200005ed
 8004b70:	200005ee 	.word	0x200005ee
 8004b74:	200005ef 	.word	0x200005ef
 8004b78:	200005f0 	.word	0x200005f0
 8004b7c:	200005f1 	.word	0x200005f1
 8004b80:	200005f2 	.word	0x200005f2
 8004b84:	200005f3 	.word	0x200005f3
 8004b88:	200005f4 	.word	0x200005f4
 8004b8c:	200005f8 	.word	0x200005f8
 8004b90:	200005fc 	.word	0x200005fc
 8004b94:	20000600 	.word	0x20000600
 8004b98:	20000604 	.word	0x20000604
 8004b9c:	00000000 	.word	0x00000000

08004ba0 <calWallConrol>:


float calWallConrol(void) {
 8004ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ba4:	b0aa      	sub	sp, #168	; 0xa8
 8004ba6:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004ba8:	4b9b      	ldr	r3, [pc, #620]	; (8004e18 <calWallConrol+0x278>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d13d      	bne.n	8004c2c <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004bb0:	4b9a      	ldr	r3, [pc, #616]	; (8004e1c <calWallConrol+0x27c>)
 8004bb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004bb6:	4b9a      	ldr	r3, [pc, #616]	; (8004e20 <calWallConrol+0x280>)
 8004bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004bbc:	4b99      	ldr	r3, [pc, #612]	; (8004e24 <calWallConrol+0x284>)
 8004bbe:	edd3 7a00 	vldr	s15, [r3]
 8004bc2:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8004e28 <calWallConrol+0x288>
 8004bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bce:	dd06      	ble.n	8004bde <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004bd0:	4b96      	ldr	r3, [pc, #600]	; (8004e2c <calWallConrol+0x28c>)
 8004bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004bd6:	4b96      	ldr	r3, [pc, #600]	; (8004e30 <calWallConrol+0x290>)
 8004bd8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004bdc:	e048      	b.n	8004c70 <calWallConrol+0xd0>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004bde:	4b91      	ldr	r3, [pc, #580]	; (8004e24 <calWallConrol+0x284>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fb fcd8 	bl	8000598 <__aeabi_f2d>
 8004be8:	a385      	add	r3, pc, #532	; (adr r3, 8004e00 <calWallConrol+0x260>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	f7fb fd2b 	bl	8000648 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f7fb fffd 	bl	8000bf8 <__aeabi_d2f>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004c04:	4b87      	ldr	r3, [pc, #540]	; (8004e24 <calWallConrol+0x284>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fcc5 	bl	8000598 <__aeabi_f2d>
 8004c0e:	a37e      	add	r3, pc, #504	; (adr r3, 8004e08 <calWallConrol+0x268>)
 8004c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c14:	f7fb fd18 	bl	8000648 <__aeabi_dmul>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7fb ffea 	bl	8000bf8 <__aeabi_d2f>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c2a:	e021      	b.n	8004c70 <calWallConrol+0xd0>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004c2c:	4b81      	ldr	r3, [pc, #516]	; (8004e34 <calWallConrol+0x294>)
 8004c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004c32:	4b81      	ldr	r3, [pc, #516]	; (8004e38 <calWallConrol+0x298>)
 8004c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004c38:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <calWallConrol+0x284>)
 8004c3a:	edd3 7a00 	vldr	s15, [r3]
 8004c3e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c46:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <calWallConrol+0x284>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fb fca2 	bl	8000598 <__aeabi_f2d>
 8004c54:	a36e      	add	r3, pc, #440	; (adr r3, 8004e10 <calWallConrol+0x270>)
 8004c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5a:	f7fb fcf5 	bl	8000648 <__aeabi_dmul>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4610      	mov	r0, r2
 8004c64:	4619      	mov	r1, r3
 8004c66:	f7fb ffc7 	bl	8000bf8 <__aeabi_d2f>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004c70:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <calWallConrol+0x29c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004c78:	da03      	bge.n	8004c82 <calWallConrol+0xe2>
		sensorWall_L = SENSOR_L_MIN;
 8004c7a:	4b71      	ldr	r3, [pc, #452]	; (8004e40 <calWallConrol+0x2a0>)
 8004c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c80:	e011      	b.n	8004ca6 <calWallConrol+0x106>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004c82:	4b6e      	ldr	r3, [pc, #440]	; (8004e3c <calWallConrol+0x29c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	dd03      	ble.n	8004c96 <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MAX;
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <calWallConrol+0x2a4>)
 8004c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c94:	e007      	b.n	8004ca6 <calWallConrol+0x106>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004c96:	4b69      	ldr	r3, [pc, #420]	; (8004e3c <calWallConrol+0x29c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca2:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <calWallConrol+0x29c>)
 8004ca8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cac:	f240 2289 	movw	r2, #649	; 0x289
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	dc03      	bgt.n	8004cbc <calWallConrol+0x11c>
		sensorWall_R = SENSOR_R_MIN;
 8004cb4:	4b64      	ldr	r3, [pc, #400]	; (8004e48 <calWallConrol+0x2a8>)
 8004cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cba:	e012      	b.n	8004ce2 <calWallConrol+0x142>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004cbc:	4b5f      	ldr	r3, [pc, #380]	; (8004e3c <calWallConrol+0x29c>)
 8004cbe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cc2:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004cc6:	dd03      	ble.n	8004cd0 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MAX;
 8004cc8:	4b60      	ldr	r3, [pc, #384]	; (8004e4c <calWallConrol+0x2ac>)
 8004cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004cce:	e008      	b.n	8004ce2 <calWallConrol+0x142>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004cd0:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <calWallConrol+0x29c>)
 8004cd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cde:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004cf0:	4b57      	ldr	r3, [pc, #348]	; (8004e50 <calWallConrol+0x2b0>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11c      	bne.n	8004d32 <calWallConrol+0x192>
		g_WallControlStatus = 0;
 8004cf8:	4b56      	ldr	r3, [pc, #344]	; (8004e54 <calWallConrol+0x2b4>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004cfe:	4b56      	ldr	r3, [pc, #344]	; (8004e58 <calWallConrol+0x2b8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004d04:	4b55      	ldr	r3, [pc, #340]	; (8004e5c <calWallConrol+0x2bc>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004d0a:	4b55      	ldr	r3, [pc, #340]	; (8004e60 <calWallConrol+0x2c0>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004d10:	4b54      	ldr	r3, [pc, #336]	; (8004e64 <calWallConrol+0x2c4>)
 8004d12:	4a55      	ldr	r2, [pc, #340]	; (8004e68 <calWallConrol+0x2c8>)
 8004d14:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004d16:	4b55      	ldr	r3, [pc, #340]	; (8004e6c <calWallConrol+0x2cc>)
 8004d18:	4a55      	ldr	r2, [pc, #340]	; (8004e70 <calWallConrol+0x2d0>)
 8004d1a:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004d1c:	4b55      	ldr	r3, [pc, #340]	; (8004e74 <calWallConrol+0x2d4>)
 8004d1e:	4a56      	ldr	r2, [pc, #344]	; (8004e78 <calWallConrol+0x2d8>)
 8004d20:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004d2a:	f002 f89d 	bl	8006e68 <pl_yellow_LED_off>
 8004d2e:	f001 ba46 	b.w	80061be <calWallConrol+0x161e>

	} else if (g_WallControl_mode == 1) {
 8004d32:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <calWallConrol+0x2b0>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	f040 82eb 	bne.w	8005312 <calWallConrol+0x772>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004d3c:	4b45      	ldr	r3, [pc, #276]	; (8004e54 <calWallConrol+0x2b4>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 809b 	beq.w	8004e80 <calWallConrol+0x2e0>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004d4a:	4b3c      	ldr	r3, [pc, #240]	; (8004e3c <calWallConrol+0x29c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004d52:	db16      	blt.n	8004d82 <calWallConrol+0x1e2>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004d54:	4b49      	ldr	r3, [pc, #292]	; (8004e7c <calWallConrol+0x2dc>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f7fb fc0b 	bl	8000574 <__aeabi_i2d>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	460b      	mov	r3, r1
 8004d62:	4690      	mov	r8, r2
 8004d64:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004d68:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d6c:	f7fb fc14 	bl	8000598 <__aeabi_f2d>
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4640      	mov	r0, r8
 8004d76:	4649      	mov	r1, r9
 8004d78:	f7fb fef6 	bl	8000b68 <__aeabi_dcmpgt>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d037      	beq.n	8004df2 <calWallConrol+0x252>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004d82:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <calWallConrol+0x2b4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	4b32      	ldr	r3, [pc, #200]	; (8004e54 <calWallConrol+0x2b4>)
 8004d8c:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004d8e:	4b35      	ldr	r3, [pc, #212]	; (8004e64 <calWallConrol+0x2c4>)
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004d96:	2300      	movs	r3, #0
 8004d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d9c:	e021      	b.n	8004de2 <calWallConrol+0x242>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004d9e:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <calWallConrol+0x29c>)
 8004da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da8:	ee07 3a90 	vmov	s15, r3
 8004dac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <calWallConrol+0x2c4>)
 8004db2:	edd3 7a00 	vldr	s15, [r3]
 8004db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dbe:	dd0b      	ble.n	8004dd8 <calWallConrol+0x238>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004dc0:	4a1e      	ldr	r2, [pc, #120]	; (8004e3c <calWallConrol+0x29c>)
 8004dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dca:	ee07 3a90 	vmov	s15, r3
 8004dce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dd2:	4b24      	ldr	r3, [pc, #144]	; (8004e64 <calWallConrol+0x2c4>)
 8004dd4:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004dd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ddc:	3301      	adds	r3, #1
 8004dde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004de6:	2b13      	cmp	r3, #19
 8004de8:	ddd9      	ble.n	8004d9e <calWallConrol+0x1fe>
					}
				}
				g_skewer_displacement = 0;
 8004dea:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <calWallConrol+0x2d4>)
 8004dec:	f04f 0200 	mov.w	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <calWallConrol+0x2bc>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e064      	b.n	8004ec4 <calWallConrol+0x324>
 8004dfa:	bf00      	nop
 8004dfc:	f3af 8000 	nop.w
 8004e00:	9999999a 	.word	0x9999999a
 8004e04:	3fd99999 	.word	0x3fd99999
 8004e08:	47ae147b 	.word	0x47ae147b
 8004e0c:	bf847ae1 	.word	0xbf847ae1
 8004e10:	bc6a7efa 	.word	0xbc6a7efa
 8004e14:	3f789374 	.word	0x3f789374
 8004e18:	20000808 	.word	0x20000808
 8004e1c:	43340000 	.word	0x43340000
 8004e20:	43020000 	.word	0x43020000
 8004e24:	200004d8 	.word	0x200004d8
 8004e28:	44fa0000 	.word	0x44fa0000
 8004e2c:	44480000 	.word	0x44480000
 8004e30:	c1a00000 	.word	0xc1a00000
 8004e34:	431d0000 	.word	0x431d0000
 8004e38:	42dc0000 	.word	0x42dc0000
 8004e3c:	200002b8 	.word	0x200002b8
 8004e40:	44390000 	.word	0x44390000
 8004e44:	450fc000 	.word	0x450fc000
 8004e48:	44228000 	.word	0x44228000
 8004e4c:	44e10000 	.word	0x44e10000
 8004e50:	20000590 	.word	0x20000590
 8004e54:	20000593 	.word	0x20000593
 8004e58:	20000595 	.word	0x20000595
 8004e5c:	20000596 	.word	0x20000596
 8004e60:	20000597 	.word	0x20000597
 8004e64:	20000598 	.word	0x20000598
 8004e68:	44d2a000 	.word	0x44d2a000
 8004e6c:	2000059c 	.word	0x2000059c
 8004e70:	44b56000 	.word	0x44b56000
 8004e74:	200005a0 	.word	0x200005a0
 8004e78:	420c0000 	.word	0x420c0000
 8004e7c:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004e80:	4bbd      	ldr	r3, [pc, #756]	; (8005178 <calWallConrol+0x5d8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004e88:	dd1c      	ble.n	8004ec4 <calWallConrol+0x324>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004e8a:	4bbc      	ldr	r3, [pc, #752]	; (800517c <calWallConrol+0x5dc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fb70 	bl	8000574 <__aeabi_i2d>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4614      	mov	r4, r2
 8004e9a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004e9e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004ea2:	f7fb fb79 	bl	8000598 <__aeabi_f2d>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	4620      	mov	r0, r4
 8004eac:	4629      	mov	r1, r5
 8004eae:	f7fb fe3d 	bl	8000b2c <__aeabi_dcmplt>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d005      	beq.n	8004ec4 <calWallConrol+0x324>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004eb8:	4bb1      	ldr	r3, [pc, #708]	; (8005180 <calWallConrol+0x5e0>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	b2da      	uxtb	r2, r3
 8004ec0:	4baf      	ldr	r3, [pc, #700]	; (8005180 <calWallConrol+0x5e0>)
 8004ec2:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004ec4:	4bae      	ldr	r3, [pc, #696]	; (8005180 <calWallConrol+0x5e0>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <calWallConrol+0x3ec>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004ed4:	4ba8      	ldr	r3, [pc, #672]	; (8005178 <calWallConrol+0x5d8>)
 8004ed6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004eda:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004ede:	db17      	blt.n	8004f10 <calWallConrol+0x370>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004ee0:	4ba6      	ldr	r3, [pc, #664]	; (800517c <calWallConrol+0x5dc>)
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fb fb45 	bl	8000574 <__aeabi_i2d>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	613a      	str	r2, [r7, #16]
 8004ef0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ef4:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004ef6:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004efa:	f7fb fb4d 	bl	8000598 <__aeabi_f2d>
 8004efe:	4602      	mov	r2, r0
 8004f00:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004f06:	f7fb fe2f 	bl	8000b68 <__aeabi_dcmpgt>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d039      	beq.n	8004f84 <calWallConrol+0x3e4>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004f10:	4b9b      	ldr	r3, [pc, #620]	; (8005180 <calWallConrol+0x5e0>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	3b02      	subs	r3, #2
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	4b99      	ldr	r3, [pc, #612]	; (8005180 <calWallConrol+0x5e0>)
 8004f1a:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004f1c:	4b99      	ldr	r3, [pc, #612]	; (8005184 <calWallConrol+0x5e4>)
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f2a:	e023      	b.n	8004f74 <calWallConrol+0x3d4>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004f2c:	4a92      	ldr	r2, [pc, #584]	; (8005178 <calWallConrol+0x5d8>)
 8004f2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f32:	3350      	adds	r3, #80	; 0x50
 8004f34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f38:	ee07 3a90 	vmov	s15, r3
 8004f3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004f40:	4b90      	ldr	r3, [pc, #576]	; (8005184 <calWallConrol+0x5e4>)
 8004f42:	edd3 7a00 	vldr	s15, [r3]
 8004f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	dd0c      	ble.n	8004f6a <calWallConrol+0x3ca>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004f50:	4a89      	ldr	r2, [pc, #548]	; (8005178 <calWallConrol+0x5d8>)
 8004f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f56:	3350      	adds	r3, #80	; 0x50
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	ee07 3a90 	vmov	s15, r3
 8004f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f64:	4b87      	ldr	r3, [pc, #540]	; (8005184 <calWallConrol+0x5e4>)
 8004f66:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004f6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f78:	2b13      	cmp	r3, #19
 8004f7a:	ddd7      	ble.n	8004f2c <calWallConrol+0x38c>
					}
				}
				g_skewer_displacement = 0;
 8004f7c:	4b82      	ldr	r3, [pc, #520]	; (8005188 <calWallConrol+0x5e8>)
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004f84:	4b81      	ldr	r3, [pc, #516]	; (800518c <calWallConrol+0x5ec>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	e023      	b.n	8004fd4 <calWallConrol+0x434>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004f8c:	4b7a      	ldr	r3, [pc, #488]	; (8005178 <calWallConrol+0x5d8>)
 8004f8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f92:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8004f96:	dd1d      	ble.n	8004fd4 <calWallConrol+0x434>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004f98:	4b78      	ldr	r3, [pc, #480]	; (800517c <calWallConrol+0x5dc>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb fae9 	bl	8000574 <__aeabi_i2d>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	60ba      	str	r2, [r7, #8]
 8004fa8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fac:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004fae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004fb2:	f7fb faf1 	bl	8000598 <__aeabi_f2d>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004fba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fbe:	f7fb fdb5 	bl	8000b2c <__aeabi_dcmplt>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <calWallConrol+0x434>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004fc8:	4b6d      	ldr	r3, [pc, #436]	; (8005180 <calWallConrol+0x5e0>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	3302      	adds	r3, #2
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	4b6b      	ldr	r3, [pc, #428]	; (8005180 <calWallConrol+0x5e0>)
 8004fd2:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004fd4:	4b6a      	ldr	r3, [pc, #424]	; (8005180 <calWallConrol+0x5e0>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b03      	cmp	r3, #3
 8004fda:	f201 80f0 	bhi.w	80061be <calWallConrol+0x161e>
 8004fde:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <calWallConrol+0x444>)
 8004fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe4:	08004ff5 	.word	0x08004ff5
 8004fe8:	080050fb 	.word	0x080050fb
 8004fec:	080051a9 	.word	0x080051a9
 8004ff0:	08005213 	.word	0x08005213
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004ff4:	4b64      	ldr	r3, [pc, #400]	; (8005188 <calWallConrol+0x5e8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fb facd 	bl	8000598 <__aeabi_f2d>
 8004ffe:	4604      	mov	r4, r0
 8005000:	460d      	mov	r5, r1
 8005002:	4b63      	ldr	r3, [pc, #396]	; (8005190 <calWallConrol+0x5f0>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fac6 	bl	8000598 <__aeabi_f2d>
 800500c:	a356      	add	r3, pc, #344	; (adr r3, 8005168 <calWallConrol+0x5c8>)
 800500e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005012:	f7fb fb19 	bl	8000648 <__aeabi_dmul>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4620      	mov	r0, r4
 800501c:	4629      	mov	r1, r5
 800501e:	f7fb f95d 	bl	80002dc <__adddf3>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4610      	mov	r0, r2
 8005028:	4619      	mov	r1, r3
 800502a:	f7fb fde5 	bl	8000bf8 <__aeabi_d2f>
 800502e:	4603      	mov	r3, r0
 8005030:	4a55      	ldr	r2, [pc, #340]	; (8005188 <calWallConrol+0x5e8>)
 8005032:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005034:	4b54      	ldr	r3, [pc, #336]	; (8005188 <calWallConrol+0x5e8>)
 8005036:	edd3 7a00 	vldr	s15, [r3]
 800503a:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005194 <calWallConrol+0x5f4>
 800503e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005046:	d52e      	bpl.n	80050a6 <calWallConrol+0x506>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005048:	4b53      	ldr	r3, [pc, #332]	; (8005198 <calWallConrol+0x5f8>)
 800504a:	edd3 7a00 	vldr	s15, [r3]
 800504e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800519c <calWallConrol+0x5fc>
 8005052:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005056:	eef1 6a67 	vneg.f32	s13, s15
 800505a:	4b4f      	ldr	r3, [pc, #316]	; (8005198 <calWallConrol+0x5f8>)
 800505c:	edd3 7a00 	vldr	s15, [r3]
 8005060:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005064:	4b47      	ldr	r3, [pc, #284]	; (8005184 <calWallConrol+0x5e4>)
 8005066:	edd3 7a00 	vldr	s15, [r3]
 800506a:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80051a4 <calWallConrol+0x604>
 800506e:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005072:	4b44      	ldr	r3, [pc, #272]	; (8005184 <calWallConrol+0x5e4>)
 8005074:	edd3 6a00 	vldr	s13, [r3]
 8005078:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800507c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005080:	ee17 0a90 	vmov	r0, s15
 8005084:	f7fb fa88 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005088:	a339      	add	r3, pc, #228	; (adr r3, 8005170 <calWallConrol+0x5d0>)
 800508a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508e:	f7fb fadb 	bl	8000648 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	f7fb fdad 	bl	8000bf8 <__aeabi_d2f>
 800509e:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 80050a0:	4a3f      	ldr	r2, [pc, #252]	; (80051a0 <calWallConrol+0x600>)
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e003      	b.n	80050ae <calWallConrol+0x50e>
			} else {
				wall_normal.error = 0;
 80050a6:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <calWallConrol+0x600>)
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80050ae:	4b3c      	ldr	r3, [pc, #240]	; (80051a0 <calWallConrol+0x600>)
 80050b0:	ed93 7a00 	vldr	s14, [r3]
 80050b4:	4b3a      	ldr	r3, [pc, #232]	; (80051a0 <calWallConrol+0x600>)
 80050b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80050ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050be:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <calWallConrol+0x600>)
 80050c0:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050c4:	4b36      	ldr	r3, [pc, #216]	; (80051a0 <calWallConrol+0x600>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a35      	ldr	r2, [pc, #212]	; (80051a0 <calWallConrol+0x600>)
 80050ca:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050cc:	4b34      	ldr	r3, [pc, #208]	; (80051a0 <calWallConrol+0x600>)
 80050ce:	ed93 7a00 	vldr	s14, [r3]
 80050d2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050d6:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050da:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <calWallConrol+0x600>)
 80050dc:	edd3 6a02 	vldr	s13, [r3, #8]
 80050e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80050e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050ec:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 80050f0:	2000      	movs	r0, #0
 80050f2:	f001 fef3 	bl	8006edc <pl_yellow_LED_count>
			break;
 80050f6:	f001 b862 	b.w	80061be <calWallConrol+0x161e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80050fa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050fe:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800519c <calWallConrol+0x5fc>
 8005102:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005106:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 800510a:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 800510e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005112:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005116:	4b22      	ldr	r3, [pc, #136]	; (80051a0 <calWallConrol+0x600>)
 8005118:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800511c:	4b20      	ldr	r3, [pc, #128]	; (80051a0 <calWallConrol+0x600>)
 800511e:	ed93 7a00 	vldr	s14, [r3]
 8005122:	4b1f      	ldr	r3, [pc, #124]	; (80051a0 <calWallConrol+0x600>)
 8005124:	edd3 7a01 	vldr	s15, [r3, #4]
 8005128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800512c:	4b1c      	ldr	r3, [pc, #112]	; (80051a0 <calWallConrol+0x600>)
 800512e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005132:	4b1b      	ldr	r3, [pc, #108]	; (80051a0 <calWallConrol+0x600>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1a      	ldr	r2, [pc, #104]	; (80051a0 <calWallConrol+0x600>)
 8005138:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800513a:	4b19      	ldr	r3, [pc, #100]	; (80051a0 <calWallConrol+0x600>)
 800513c:	ed93 7a00 	vldr	s14, [r3]
 8005140:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005144:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005148:	4b15      	ldr	r3, [pc, #84]	; (80051a0 <calWallConrol+0x600>)
 800514a:	edd3 6a02 	vldr	s13, [r3, #8]
 800514e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005152:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800515a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 800515e:	2080      	movs	r0, #128	; 0x80
 8005160:	f001 febc 	bl	8006edc <pl_yellow_LED_count>
			break;
 8005164:	f001 b82b 	b.w	80061be <calWallConrol+0x161e>
 8005168:	d2f1a9fc 	.word	0xd2f1a9fc
 800516c:	3f50624d 	.word	0x3f50624d
 8005170:	66666666 	.word	0x66666666
 8005174:	3fe66666 	.word	0x3fe66666
 8005178:	200002b8 	.word	0x200002b8
 800517c:	20000448 	.word	0x20000448
 8005180:	20000593 	.word	0x20000593
 8005184:	2000059c 	.word	0x2000059c
 8005188:	200005a0 	.word	0x200005a0
 800518c:	20000597 	.word	0x20000597
 8005190:	200004d8 	.word	0x200004d8
 8005194:	420c0000 	.word	0x420c0000
 8005198:	20000598 	.word	0x20000598
 800519c:	44d2a000 	.word	0x44d2a000
 80051a0:	2000056c 	.word	0x2000056c
 80051a4:	44b56000 	.word	0x44b56000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80051a8:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80051ac:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 80051a4 <calWallConrol+0x604>
 80051b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051b4:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 80051b8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80051bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 80051c0:	4ba9      	ldr	r3, [pc, #676]	; (8005468 <calWallConrol+0x8c8>)
 80051c2:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80051c6:	4ba8      	ldr	r3, [pc, #672]	; (8005468 <calWallConrol+0x8c8>)
 80051c8:	ed93 7a00 	vldr	s14, [r3]
 80051cc:	4ba6      	ldr	r3, [pc, #664]	; (8005468 <calWallConrol+0x8c8>)
 80051ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80051d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051d6:	4ba4      	ldr	r3, [pc, #656]	; (8005468 <calWallConrol+0x8c8>)
 80051d8:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80051dc:	4ba2      	ldr	r3, [pc, #648]	; (8005468 <calWallConrol+0x8c8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4aa1      	ldr	r2, [pc, #644]	; (8005468 <calWallConrol+0x8c8>)
 80051e2:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80051e4:	4ba0      	ldr	r3, [pc, #640]	; (8005468 <calWallConrol+0x8c8>)
 80051e6:	ed93 7a00 	vldr	s14, [r3]
 80051ea:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80051ee:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80051f2:	4b9d      	ldr	r3, [pc, #628]	; (8005468 <calWallConrol+0x8c8>)
 80051f4:	edd3 6a02 	vldr	s13, [r3, #8]
 80051f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80051fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005204:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005208:	2001      	movs	r0, #1
 800520a:	f001 fe67 	bl	8006edc <pl_yellow_LED_count>
			break;
 800520e:	f000 bfd6 	b.w	80061be <calWallConrol+0x161e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005212:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005216:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800546c <calWallConrol+0x8cc>
 800521a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800521e:	eef1 6a67 	vneg.f32	s13, s15
 8005222:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 800522a:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800522e:	eddf 6a90 	vldr	s13, [pc, #576]	; 8005470 <calWallConrol+0x8d0>
 8005232:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005236:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 800523a:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 800523e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005242:	4b89      	ldr	r3, [pc, #548]	; (8005468 <calWallConrol+0x8c8>)
 8005244:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005248:	4b87      	ldr	r3, [pc, #540]	; (8005468 <calWallConrol+0x8c8>)
 800524a:	ed93 7a00 	vldr	s14, [r3]
 800524e:	4b86      	ldr	r3, [pc, #536]	; (8005468 <calWallConrol+0x8c8>)
 8005250:	edd3 7a01 	vldr	s15, [r3, #4]
 8005254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005258:	4b83      	ldr	r3, [pc, #524]	; (8005468 <calWallConrol+0x8c8>)
 800525a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800525e:	4b82      	ldr	r3, [pc, #520]	; (8005468 <calWallConrol+0x8c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a81      	ldr	r2, [pc, #516]	; (8005468 <calWallConrol+0x8c8>)
 8005264:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005266:	4b80      	ldr	r3, [pc, #512]	; (8005468 <calWallConrol+0x8c8>)
 8005268:	ed93 7a00 	vldr	s14, [r3]
 800526c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005270:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005274:	4b7c      	ldr	r3, [pc, #496]	; (8005468 <calWallConrol+0x8c8>)
 8005276:	edd3 6a02 	vldr	s13, [r3, #8]
 800527a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800527e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005286:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 800528a:	2081      	movs	r0, #129	; 0x81
 800528c:	f001 fe26 	bl	8006edc <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005290:	4b78      	ldr	r3, [pc, #480]	; (8005474 <calWallConrol+0x8d4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	f7fb f96d 	bl	8000574 <__aeabi_i2d>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	603a      	str	r2, [r7, #0]
 80052a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052a4:	607b      	str	r3, [r7, #4]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	4b73      	ldr	r3, [pc, #460]	; (8005478 <calWallConrol+0x8d8>)
 80052ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80052b0:	f7fb fc3c 	bl	8000b2c <__aeabi_dcmplt>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01a      	beq.n	80052f0 <calWallConrol+0x750>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 80052ba:	4b6e      	ldr	r3, [pc, #440]	; (8005474 <calWallConrol+0x8d4>)
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fb f958 	bl	8000574 <__aeabi_i2d>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4692      	mov	sl, r2
 80052ca:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	4b69      	ldr	r3, [pc, #420]	; (8005478 <calWallConrol+0x8d8>)
 80052d4:	4650      	mov	r0, sl
 80052d6:	4659      	mov	r1, fp
 80052d8:	f7fb fc28 	bl	8000b2c <__aeabi_dcmplt>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d006      	beq.n	80052f0 <calWallConrol+0x750>
				StabilityCount_reset++;
 80052e2:	4b66      	ldr	r3, [pc, #408]	; (800547c <calWallConrol+0x8dc>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	b2da      	uxtb	r2, r3
 80052ea:	4b64      	ldr	r3, [pc, #400]	; (800547c <calWallConrol+0x8dc>)
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e002      	b.n	80052f6 <calWallConrol+0x756>
			} else {
				StabilityCount_reset = 0;
 80052f0:	4b62      	ldr	r3, [pc, #392]	; (800547c <calWallConrol+0x8dc>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 80052f6:	4b61      	ldr	r3, [pc, #388]	; (800547c <calWallConrol+0x8dc>)
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b18      	cmp	r3, #24
 80052fc:	f240 875e 	bls.w	80061bc <calWallConrol+0x161c>
				Gyro.sigma_error = 0;
 8005300:	4b5f      	ldr	r3, [pc, #380]	; (8005480 <calWallConrol+0x8e0>)
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005308:	4b5c      	ldr	r3, [pc, #368]	; (800547c <calWallConrol+0x8dc>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800530e:	f000 bf55 	b.w	80061bc <calWallConrol+0x161c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005312:	4b5c      	ldr	r3, [pc, #368]	; (8005484 <calWallConrol+0x8e4>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b02      	cmp	r3, #2
 8005318:	f000 8751 	beq.w	80061be <calWallConrol+0x161e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 800531c:	4b59      	ldr	r3, [pc, #356]	; (8005484 <calWallConrol+0x8e4>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b03      	cmp	r3, #3
 8005322:	f040 874c 	bne.w	80061be <calWallConrol+0x161e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 8005326:	4b58      	ldr	r3, [pc, #352]	; (8005488 <calWallConrol+0x8e8>)
 8005328:	edd3 7a00 	vldr	s15, [r3]
 800532c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800548c <calWallConrol+0x8ec>
 8005330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005338:	dd05      	ble.n	8005346 <calWallConrol+0x7a6>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 800533a:	4b55      	ldr	r3, [pc, #340]	; (8005490 <calWallConrol+0x8f0>)
 800533c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 8005340:	4b54      	ldr	r3, [pc, #336]	; (8005494 <calWallConrol+0x8f4>)
 8005342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005344:	e024      	b.n	8005390 <calWallConrol+0x7f0>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005346:	4b50      	ldr	r3, [pc, #320]	; (8005488 <calWallConrol+0x8e8>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f7fb f924 	bl	8000598 <__aeabi_f2d>
 8005350:	a341      	add	r3, pc, #260	; (adr r3, 8005458 <calWallConrol+0x8b8>)
 8005352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005356:	f7fb f977 	bl	8000648 <__aeabi_dmul>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4610      	mov	r0, r2
 8005360:	4619      	mov	r1, r3
 8005362:	f7fb fc49 	bl	8000bf8 <__aeabi_d2f>
 8005366:	4603      	mov	r3, r0
 8005368:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 800536c:	4b46      	ldr	r3, [pc, #280]	; (8005488 <calWallConrol+0x8e8>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f7fb f911 	bl	8000598 <__aeabi_f2d>
 8005376:	a33a      	add	r3, pc, #232	; (adr r3, 8005460 <calWallConrol+0x8c0>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	f7fb f964 	bl	8000648 <__aeabi_dmul>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	f7fb fc36 	bl	8000bf8 <__aeabi_d2f>
 800538c:	4603      	mov	r3, r0
 800538e:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005390:	4b41      	ldr	r3, [pc, #260]	; (8005498 <calWallConrol+0x8f8>)
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800539a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800539e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a2:	dd12      	ble.n	80053ca <calWallConrol+0x82a>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 80053a4:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <calWallConrol+0x8f8>)
 80053a6:	edd3 7a00 	vldr	s15, [r3]
 80053aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80053ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	d808      	bhi.n	80053ca <calWallConrol+0x82a>
			coefficientR[0] = COEFFICIENT_R0_0;
 80053b8:	4b38      	ldr	r3, [pc, #224]	; (800549c <calWallConrol+0x8fc>)
 80053ba:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 80053bc:	4b38      	ldr	r3, [pc, #224]	; (80054a0 <calWallConrol+0x900>)
 80053be:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 80053c0:	4b38      	ldr	r3, [pc, #224]	; (80054a4 <calWallConrol+0x904>)
 80053c2:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 80053c4:	4b38      	ldr	r3, [pc, #224]	; (80054a8 <calWallConrol+0x908>)
 80053c6:	657b      	str	r3, [r7, #84]	; 0x54
 80053c8:	e0a5      	b.n	8005516 <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <calWallConrol+0x8f8>)
 80053cc:	edd3 7a00 	vldr	s15, [r3]
 80053d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80054ac <calWallConrol+0x90c>
 80053d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	dd12      	ble.n	8005404 <calWallConrol+0x864>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80053de:	4b2e      	ldr	r3, [pc, #184]	; (8005498 <calWallConrol+0x8f8>)
 80053e0:	edd3 7a00 	vldr	s15, [r3]
 80053e4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80054b0 <calWallConrol+0x910>
 80053e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f0:	d808      	bhi.n	8005404 <calWallConrol+0x864>
			coefficientR[0] = COEFFICIENT_R1_0;
 80053f2:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <calWallConrol+0x914>)
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 80053f6:	4b30      	ldr	r3, [pc, #192]	; (80054b8 <calWallConrol+0x918>)
 80053f8:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 80053fa:	4b30      	ldr	r3, [pc, #192]	; (80054bc <calWallConrol+0x91c>)
 80053fc:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 80053fe:	4b30      	ldr	r3, [pc, #192]	; (80054c0 <calWallConrol+0x920>)
 8005400:	657b      	str	r3, [r7, #84]	; 0x54
 8005402:	e088      	b.n	8005516 <calWallConrol+0x976>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005404:	4b24      	ldr	r3, [pc, #144]	; (8005498 <calWallConrol+0x8f8>)
 8005406:	edd3 7a00 	vldr	s15, [r3]
 800540a:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80054c4 <calWallConrol+0x924>
 800540e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005416:	dd12      	ble.n	800543e <calWallConrol+0x89e>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005418:	4b1f      	ldr	r3, [pc, #124]	; (8005498 <calWallConrol+0x8f8>)
 800541a:	edd3 7a00 	vldr	s15, [r3]
 800541e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80054c8 <calWallConrol+0x928>
 8005422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800542a:	d808      	bhi.n	800543e <calWallConrol+0x89e>
			coefficientR[0] = COEFFICIENT_R2_0;
 800542c:	4b27      	ldr	r3, [pc, #156]	; (80054cc <calWallConrol+0x92c>)
 800542e:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <calWallConrol+0x930>)
 8005432:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005434:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <calWallConrol+0x934>)
 8005436:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005438:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <calWallConrol+0x938>)
 800543a:	657b      	str	r3, [r7, #84]	; 0x54
 800543c:	e06b      	b.n	8005516 <calWallConrol+0x976>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 800543e:	4b27      	ldr	r3, [pc, #156]	; (80054dc <calWallConrol+0x93c>)
 8005440:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005444:	2b5a      	cmp	r3, #90	; 0x5a
 8005446:	dd4d      	ble.n	80054e4 <calWallConrol+0x944>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005448:	4b25      	ldr	r3, [pc, #148]	; (80054e0 <calWallConrol+0x940>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	f043 0302 	orr.w	r3, r3, #2
 8005450:	b2da      	uxtb	r2, r3
 8005452:	4b23      	ldr	r3, [pc, #140]	; (80054e0 <calWallConrol+0x940>)
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e04c      	b.n	80054f2 <calWallConrol+0x952>
 8005458:	66666666 	.word	0x66666666
 800545c:	3fee6666 	.word	0x3fee6666
 8005460:	47ae147b 	.word	0x47ae147b
 8005464:	bfb47ae1 	.word	0xbfb47ae1
 8005468:	2000056c 	.word	0x2000056c
 800546c:	44d2a000 	.word	0x44d2a000
 8005470:	44b56000 	.word	0x44b56000
 8005474:	20000448 	.word	0x20000448
 8005478:	403e0000 	.word	0x403e0000
 800547c:	20000595 	.word	0x20000595
 8005480:	20000544 	.word	0x20000544
 8005484:	20000590 	.word	0x20000590
 8005488:	200004d8 	.word	0x200004d8
 800548c:	44fa0000 	.word	0x44fa0000
 8005490:	44ed8000 	.word	0x44ed8000
 8005494:	c3200000 	.word	0xc3200000
 8005498:	200005dc 	.word	0x200005dc
 800549c:	4414c13c 	.word	0x4414c13c
 80054a0:	421e1fdd 	.word	0x421e1fdd
 80054a4:	beb05045 	.word	0xbeb05045
 80054a8:	3e051eb8 	.word	0x3e051eb8
 80054ac:	420c0000 	.word	0x420c0000
 80054b0:	42700000 	.word	0x42700000
 80054b4:	45b20ce1 	.word	0x45b20ce1
 80054b8:	c393746d 	.word	0xc393746d
 80054bc:	40afa404 	.word	0x40afa404
 80054c0:	bd0f0328 	.word	0xbd0f0328
 80054c4:	42c80000 	.word	0x42c80000
 80054c8:	42f00000 	.word	0x42f00000
 80054cc:	46e1460a 	.word	0x46e1460a
 80054d0:	c43ee954 	.word	0xc43ee954
 80054d4:	40d673d9 	.word	0x40d673d9
 80054d8:	bc9d4952 	.word	0xbc9d4952
 80054dc:	200002b8 	.word	0x200002b8
 80054e0:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80054e4:	4b79      	ldr	r3, [pc, #484]	; (80056cc <calWallConrol+0xb2c>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f023 0302 	bic.w	r3, r3, #2
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	4b77      	ldr	r3, [pc, #476]	; (80056cc <calWallConrol+0xb2c>)
 80054f0:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 80054f2:	4b77      	ldr	r3, [pc, #476]	; (80056d0 <calWallConrol+0xb30>)
 80054f4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80054f8:	ee07 3a90 	vmov	s15, r3
 80054fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005500:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005516:	4b6f      	ldr	r3, [pc, #444]	; (80056d4 <calWallConrol+0xb34>)
 8005518:	edd3 7a00 	vldr	s15, [r3]
 800551c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005520:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005528:	dd12      	ble.n	8005550 <calWallConrol+0x9b0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 800552a:	4b6a      	ldr	r3, [pc, #424]	; (80056d4 <calWallConrol+0xb34>)
 800552c:	edd3 7a00 	vldr	s15, [r3]
 8005530:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800553c:	d808      	bhi.n	8005550 <calWallConrol+0x9b0>
			coefficientL[0] = COEFFICIENT_L0_0;
 800553e:	4b66      	ldr	r3, [pc, #408]	; (80056d8 <calWallConrol+0xb38>)
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 8005542:	4b66      	ldr	r3, [pc, #408]	; (80056dc <calWallConrol+0xb3c>)
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 8005546:	4b66      	ldr	r3, [pc, #408]	; (80056e0 <calWallConrol+0xb40>)
 8005548:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 800554a:	4b66      	ldr	r3, [pc, #408]	; (80056e4 <calWallConrol+0xb44>)
 800554c:	647b      	str	r3, [r7, #68]	; 0x44
 800554e:	e05d      	b.n	800560c <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8005550:	4b60      	ldr	r3, [pc, #384]	; (80056d4 <calWallConrol+0xb34>)
 8005552:	edd3 7a00 	vldr	s15, [r3]
 8005556:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80056e8 <calWallConrol+0xb48>
 800555a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800555e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005562:	dd12      	ble.n	800558a <calWallConrol+0x9ea>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 8005564:	4b5b      	ldr	r3, [pc, #364]	; (80056d4 <calWallConrol+0xb34>)
 8005566:	edd3 7a00 	vldr	s15, [r3]
 800556a:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80056ec <calWallConrol+0xb4c>
 800556e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005576:	d808      	bhi.n	800558a <calWallConrol+0x9ea>
			coefficientL[0] = COEFFICIENT_L1_0;
 8005578:	4b5d      	ldr	r3, [pc, #372]	; (80056f0 <calWallConrol+0xb50>)
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 800557c:	4b5d      	ldr	r3, [pc, #372]	; (80056f4 <calWallConrol+0xb54>)
 800557e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005580:	4b5d      	ldr	r3, [pc, #372]	; (80056f8 <calWallConrol+0xb58>)
 8005582:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005584:	4b5d      	ldr	r3, [pc, #372]	; (80056fc <calWallConrol+0xb5c>)
 8005586:	647b      	str	r3, [r7, #68]	; 0x44
 8005588:	e040      	b.n	800560c <calWallConrol+0xa6c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800558a:	4b52      	ldr	r3, [pc, #328]	; (80056d4 <calWallConrol+0xb34>)
 800558c:	edd3 7a00 	vldr	s15, [r3]
 8005590:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005700 <calWallConrol+0xb60>
 8005594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800559c:	dd12      	ble.n	80055c4 <calWallConrol+0xa24>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800559e:	4b4d      	ldr	r3, [pc, #308]	; (80056d4 <calWallConrol+0xb34>)
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005704 <calWallConrol+0xb64>
 80055a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80055ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055b0:	d808      	bhi.n	80055c4 <calWallConrol+0xa24>
			coefficientL[0] = COEFFICIENT_L2_0;
 80055b2:	4b55      	ldr	r3, [pc, #340]	; (8005708 <calWallConrol+0xb68>)
 80055b4:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 80055b6:	4b55      	ldr	r3, [pc, #340]	; (800570c <calWallConrol+0xb6c>)
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 80055ba:	4b55      	ldr	r3, [pc, #340]	; (8005710 <calWallConrol+0xb70>)
 80055bc:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 80055be:	4b55      	ldr	r3, [pc, #340]	; (8005714 <calWallConrol+0xb74>)
 80055c0:	647b      	str	r3, [r7, #68]	; 0x44
 80055c2:	e023      	b.n	800560c <calWallConrol+0xa6c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 80055c4:	4b42      	ldr	r3, [pc, #264]	; (80056d0 <calWallConrol+0xb30>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b5a      	cmp	r3, #90	; 0x5a
 80055ca:	dd07      	ble.n	80055dc <calWallConrol+0xa3c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80055cc:	4b3f      	ldr	r3, [pc, #252]	; (80056cc <calWallConrol+0xb2c>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	f043 0301 	orr.w	r3, r3, #1
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4b3d      	ldr	r3, [pc, #244]	; (80056cc <calWallConrol+0xb2c>)
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e006      	b.n	80055ea <calWallConrol+0xa4a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80055dc:	4b3b      	ldr	r3, [pc, #236]	; (80056cc <calWallConrol+0xb2c>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f023 0301 	bic.w	r3, r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	4b39      	ldr	r3, [pc, #228]	; (80056cc <calWallConrol+0xb2c>)
 80055e8:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 80055ea:	4b39      	ldr	r3, [pc, #228]	; (80056d0 <calWallConrol+0xb30>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055f6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 80055fa:	f04f 0300 	mov.w	r3, #0
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800560c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005610:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005614:	4b40      	ldr	r3, [pc, #256]	; (8005718 <calWallConrol+0xb78>)
 8005616:	edd3 7a00 	vldr	s15, [r3]
 800561a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800561e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8005622:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 8005626:	4b3c      	ldr	r3, [pc, #240]	; (8005718 <calWallConrol+0xb78>)
 8005628:	edd3 7a00 	vldr	s15, [r3]
 800562c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005630:	4b39      	ldr	r3, [pc, #228]	; (8005718 <calWallConrol+0xb78>)
 8005632:	edd3 7a00 	vldr	s15, [r3]
 8005636:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 800563a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 800563e:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8005642:	4b35      	ldr	r3, [pc, #212]	; (8005718 <calWallConrol+0xb78>)
 8005644:	edd3 7a00 	vldr	s15, [r3]
 8005648:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 800564c:	4b32      	ldr	r3, [pc, #200]	; (8005718 <calWallConrol+0xb78>)
 800564e:	edd3 7a00 	vldr	s15, [r3]
 8005652:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005656:	4b30      	ldr	r3, [pc, #192]	; (8005718 <calWallConrol+0xb78>)
 8005658:	edd3 7a00 	vldr	s15, [r3]
 800565c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8005660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005664:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8005668:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 800566c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8005670:	4b18      	ldr	r3, [pc, #96]	; (80056d4 <calWallConrol+0xb34>)
 8005672:	edd3 7a00 	vldr	s15, [r3]
 8005676:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800567a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800567e:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005682:	4b14      	ldr	r3, [pc, #80]	; (80056d4 <calWallConrol+0xb34>)
 8005684:	edd3 7a00 	vldr	s15, [r3]
 8005688:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800568c:	4b11      	ldr	r3, [pc, #68]	; (80056d4 <calWallConrol+0xb34>)
 800568e:	edd3 7a00 	vldr	s15, [r3]
 8005692:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005696:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 800569a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800569e:	4b0d      	ldr	r3, [pc, #52]	; (80056d4 <calWallConrol+0xb34>)
 80056a0:	edd3 7a00 	vldr	s15, [r3]
 80056a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <calWallConrol+0xb34>)
 80056aa:	edd3 7a00 	vldr	s15, [r3]
 80056ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <calWallConrol+0xb34>)
 80056b4:	edd3 7a00 	vldr	s15, [r3]
 80056b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 80056bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c0:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 80056c4:	230b      	movs	r3, #11
 80056c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80056c8:	e041      	b.n	800574e <calWallConrol+0xbae>
 80056ca:	bf00      	nop
 80056cc:	20000593 	.word	0x20000593
 80056d0:	200002b8 	.word	0x200002b8
 80056d4:	200005e0 	.word	0x200005e0
 80056d8:	4423732b 	.word	0x4423732b
 80056dc:	421079e6 	.word	0x421079e6
 80056e0:	bdf88e7f 	.word	0xbdf88e7f
 80056e4:	3e11c34f 	.word	0x3e11c34f
 80056e8:	420c0000 	.word	0x420c0000
 80056ec:	42700000 	.word	0x42700000
 80056f0:	45e16e07 	.word	0x45e16e07
 80056f4:	c39f206f 	.word	0xc39f206f
 80056f8:	40a20d2f 	.word	0x40a20d2f
 80056fc:	bce5a3f5 	.word	0xbce5a3f5
 8005700:	42c80000 	.word	0x42c80000
 8005704:	42f00000 	.word	0x42f00000
 8005708:	459f8cbb 	.word	0x459f8cbb
 800570c:	c2f1ade0 	.word	0xc2f1ade0
 8005710:	3f6ae698 	.word	0x3f6ae698
 8005714:	bafba882 	.word	0xbafba882
 8005718:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 800571c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800571e:	3b01      	subs	r3, #1
 8005720:	4a9c      	ldr	r2, [pc, #624]	; (8005994 <calWallConrol+0xdf4>)
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	499a      	ldr	r1, [pc, #616]	; (8005994 <calWallConrol+0xdf4>)
 800572a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005734:	3b01      	subs	r3, #1
 8005736:	4a98      	ldr	r2, [pc, #608]	; (8005998 <calWallConrol+0xdf8>)
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4996      	ldr	r1, [pc, #600]	; (8005998 <calWallConrol+0xdf8>)
 8005740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005748:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800574a:	3b01      	subs	r3, #1
 800574c:	67bb      	str	r3, [r7, #120]	; 0x78
 800574e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005750:	2b00      	cmp	r3, #0
 8005752:	dce3      	bgt.n	800571c <calWallConrol+0xb7c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8005754:	4a8f      	ldr	r2, [pc, #572]	; (8005994 <calWallConrol+0xdf4>)
 8005756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005758:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 800575a:	4a8f      	ldr	r2, [pc, #572]	; (8005998 <calWallConrol+0xdf8>)
 800575c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800575e:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005760:	4b8c      	ldr	r3, [pc, #560]	; (8005994 <calWallConrol+0xdf4>)
 8005762:	ed93 7a00 	vldr	s14, [r3]
 8005766:	4b8b      	ldr	r3, [pc, #556]	; (8005994 <calWallConrol+0xdf4>)
 8005768:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800576c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005770:	4b8a      	ldr	r3, [pc, #552]	; (800599c <calWallConrol+0xdfc>)
 8005772:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8005776:	4b88      	ldr	r3, [pc, #544]	; (8005998 <calWallConrol+0xdf8>)
 8005778:	ed93 7a00 	vldr	s14, [r3]
 800577c:	4b86      	ldr	r3, [pc, #536]	; (8005998 <calWallConrol+0xdf8>)
 800577e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005782:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005786:	4b86      	ldr	r3, [pc, #536]	; (80059a0 <calWallConrol+0xe00>)
 8005788:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 800578c:	4b85      	ldr	r3, [pc, #532]	; (80059a4 <calWallConrol+0xe04>)
 800578e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005792:	2b5a      	cmp	r3, #90	; 0x5a
 8005794:	dd1a      	ble.n	80057cc <calWallConrol+0xc2c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005796:	4b84      	ldr	r3, [pc, #528]	; (80059a8 <calWallConrol+0xe08>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057a2:	4b7e      	ldr	r3, [pc, #504]	; (800599c <calWallConrol+0xdfc>)
 80057a4:	edd3 7a00 	vldr	s15, [r3]
 80057a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ac:	eef0 7ae7 	vabs.f32	s15, s15
 80057b0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80059ac <calWallConrol+0xe0c>
 80057b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057bc:	d506      	bpl.n	80057cc <calWallConrol+0xc2c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80057be:	4b7c      	ldr	r3, [pc, #496]	; (80059b0 <calWallConrol+0xe10>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	f043 0302 	orr.w	r3, r3, #2
 80057c6:	b2da      	uxtb	r2, r3
 80057c8:	4b79      	ldr	r3, [pc, #484]	; (80059b0 <calWallConrol+0xe10>)
 80057ca:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 80057cc:	4b75      	ldr	r3, [pc, #468]	; (80059a4 <calWallConrol+0xe04>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b5a      	cmp	r3, #90	; 0x5a
 80057d2:	dd1a      	ble.n	800580a <calWallConrol+0xc6a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80057d4:	4b74      	ldr	r3, [pc, #464]	; (80059a8 <calWallConrol+0xe08>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057e0:	4b6f      	ldr	r3, [pc, #444]	; (80059a0 <calWallConrol+0xe00>)
 80057e2:	edd3 7a00 	vldr	s15, [r3]
 80057e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057ea:	eef0 7ae7 	vabs.f32	s15, s15
 80057ee:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80059ac <calWallConrol+0xe0c>
 80057f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fa:	d506      	bpl.n	800580a <calWallConrol+0xc6a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80057fc:	4b6c      	ldr	r3, [pc, #432]	; (80059b0 <calWallConrol+0xe10>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4b6a      	ldr	r3, [pc, #424]	; (80059b0 <calWallConrol+0xe10>)
 8005808:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 800580a:	4b66      	ldr	r3, [pc, #408]	; (80059a4 <calWallConrol+0xe04>)
 800580c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005810:	2b59      	cmp	r3, #89	; 0x59
 8005812:	dd13      	ble.n	800583c <calWallConrol+0xc9c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005814:	4b64      	ldr	r3, [pc, #400]	; (80059a8 <calWallConrol+0xe08>)
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	ee07 3a90 	vmov	s15, r3
 800581c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005820:	4b5e      	ldr	r3, [pc, #376]	; (800599c <calWallConrol+0xdfc>)
 8005822:	edd3 7a00 	vldr	s15, [r3]
 8005826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800582a:	eef0 7ae7 	vabs.f32	s15, s15
 800582e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80059ac <calWallConrol+0xe0c>
 8005832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800583a:	dd06      	ble.n	800584a <calWallConrol+0xcaa>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 800583c:	4b5c      	ldr	r3, [pc, #368]	; (80059b0 <calWallConrol+0xe10>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f023 0302 	bic.w	r3, r3, #2
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4b5a      	ldr	r3, [pc, #360]	; (80059b0 <calWallConrol+0xe10>)
 8005848:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 800584a:	4b56      	ldr	r3, [pc, #344]	; (80059a4 <calWallConrol+0xe04>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b59      	cmp	r3, #89	; 0x59
 8005850:	dd13      	ble.n	800587a <calWallConrol+0xcda>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005852:	4b55      	ldr	r3, [pc, #340]	; (80059a8 <calWallConrol+0xe08>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800585e:	4b50      	ldr	r3, [pc, #320]	; (80059a0 <calWallConrol+0xe00>)
 8005860:	edd3 7a00 	vldr	s15, [r3]
 8005864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005868:	eef0 7ae7 	vabs.f32	s15, s15
 800586c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80059ac <calWallConrol+0xe0c>
 8005870:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005878:	dd06      	ble.n	8005888 <calWallConrol+0xce8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800587a:	4b4d      	ldr	r3, [pc, #308]	; (80059b0 <calWallConrol+0xe10>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	f023 0301 	bic.w	r3, r3, #1
 8005882:	b2da      	uxtb	r2, r3
 8005884:	4b4a      	ldr	r3, [pc, #296]	; (80059b0 <calWallConrol+0xe10>)
 8005886:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005888:	4b49      	ldr	r3, [pc, #292]	; (80059b0 <calWallConrol+0xe10>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b03      	cmp	r3, #3
 800588e:	f200 813d 	bhi.w	8005b0c <calWallConrol+0xf6c>
 8005892:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <calWallConrol+0xcf8>)
 8005894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005898:	080058a9 	.word	0x080058a9
 800589c:	080058fd 	.word	0x080058fd
 80058a0:	080059c1 	.word	0x080059c1
 80058a4:	08005a57 	.word	0x08005a57
		case 0:			//両壁なし
			PID_wall = 0;
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 80058b0:	2000      	movs	r0, #0
 80058b2:	f001 fa91 	bl	8006dd8 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80058b6:	2000      	movs	r0, #0
 80058b8:	f001 fac4 	bl	8006e44 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 80058bc:	4b39      	ldr	r3, [pc, #228]	; (80059a4 <calWallConrol+0xe04>)
 80058be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058ca:	4b3a      	ldr	r3, [pc, #232]	; (80059b4 <calWallConrol+0xe14>)
 80058cc:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80058d0:	4b34      	ldr	r3, [pc, #208]	; (80059a4 <calWallConrol+0xe04>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	ee07 3a90 	vmov	s15, r3
 80058d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <calWallConrol+0xe18>)
 80058de:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 80058e2:	4b36      	ldr	r3, [pc, #216]	; (80059bc <calWallConrol+0xe1c>)
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 80058ea:	4b34      	ldr	r3, [pc, #208]	; (80059bc <calWallConrol+0xe1c>)
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 80058f2:	4b32      	ldr	r3, [pc, #200]	; (80059bc <calWallConrol+0xe1c>)
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	605a      	str	r2, [r3, #4]
			break;
 80058fa:	e107      	b.n	8005b0c <calWallConrol+0xf6c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 80058fc:	2000      	movs	r0, #0
 80058fe:	f001 fa6b 	bl	8006dd8 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005902:	2001      	movs	r0, #1
 8005904:	f001 fa9e 	bl	8006e44 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005908:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <calWallConrol+0xe04>)
 800590a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800590e:	ee07 3a90 	vmov	s15, r3
 8005912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005916:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <calWallConrol+0xe14>)
 8005918:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 800591c:	4a26      	ldr	r2, [pc, #152]	; (80059b8 <calWallConrol+0xe18>)
 800591e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005920:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <calWallConrol+0xe04>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	ee07 3a90 	vmov	s15, r3
 800592a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800592e:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005936:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 800593a:	4b1a      	ldr	r3, [pc, #104]	; (80059a4 <calWallConrol+0xe04>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	ee07 3a90 	vmov	s15, r3
 8005942:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005946:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <calWallConrol+0xe1c>)
 800594c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005950:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <calWallConrol+0xe1c>)
 8005952:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005956:	4b19      	ldr	r3, [pc, #100]	; (80059bc <calWallConrol+0xe1c>)
 8005958:	edd3 7a01 	vldr	s15, [r3, #4]
 800595c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005960:	4b16      	ldr	r3, [pc, #88]	; (80059bc <calWallConrol+0xe1c>)
 8005962:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005966:	4b15      	ldr	r3, [pc, #84]	; (80059bc <calWallConrol+0xe1c>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a14      	ldr	r2, [pc, #80]	; (80059bc <calWallConrol+0xe1c>)
 800596c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <calWallConrol+0xe1c>)
 8005970:	ed93 7a00 	vldr	s14, [r3]
 8005974:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005978:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <calWallConrol+0xe1c>)
 800597e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005982:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005986:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800598a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800598e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005992:	e0bb      	b.n	8005b0c <calWallConrol+0xf6c>
 8005994:	20000608 	.word	0x20000608
 8005998:	20000638 	.word	0x20000638
 800599c:	200006c8 	.word	0x200006c8
 80059a0:	200006cc 	.word	0x200006cc
 80059a4:	200002b8 	.word	0x200002b8
 80059a8:	20000448 	.word	0x20000448
 80059ac:	42a00000 	.word	0x42a00000
 80059b0:	20000593 	.word	0x20000593
 80059b4:	200005ac 	.word	0x200005ac
 80059b8:	200005b0 	.word	0x200005b0
 80059bc:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 80059c0:	2001      	movs	r0, #1
 80059c2:	f001 fa09 	bl	8006dd8 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 80059c6:	2000      	movs	r0, #0
 80059c8:	f001 fa3c 	bl	8006e44 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80059cc:	4aa4      	ldr	r2, [pc, #656]	; (8005c60 <calWallConrol+0x10c0>)
 80059ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059d0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 80059d2:	4ba4      	ldr	r3, [pc, #656]	; (8005c64 <calWallConrol+0x10c4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059de:	4ba2      	ldr	r3, [pc, #648]	; (8005c68 <calWallConrol+0x10c8>)
 80059e0:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80059e4:	4b9f      	ldr	r3, [pc, #636]	; (8005c64 <calWallConrol+0x10c4>)
 80059e6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80059f2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80059f6:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 80059fa:	4b9a      	ldr	r3, [pc, #616]	; (8005c64 <calWallConrol+0x10c4>)
 80059fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a00:	ee07 3a90 	vmov	s15, r3
 8005a04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005a0c:	4b97      	ldr	r3, [pc, #604]	; (8005c6c <calWallConrol+0x10cc>)
 8005a0e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005a12:	4b96      	ldr	r3, [pc, #600]	; (8005c6c <calWallConrol+0x10cc>)
 8005a14:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005a18:	4b94      	ldr	r3, [pc, #592]	; (8005c6c <calWallConrol+0x10cc>)
 8005a1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a1e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005a22:	4b92      	ldr	r3, [pc, #584]	; (8005c6c <calWallConrol+0x10cc>)
 8005a24:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005a28:	4b90      	ldr	r3, [pc, #576]	; (8005c6c <calWallConrol+0x10cc>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a8f      	ldr	r2, [pc, #572]	; (8005c6c <calWallConrol+0x10cc>)
 8005a2e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005a30:	4b8e      	ldr	r3, [pc, #568]	; (8005c6c <calWallConrol+0x10cc>)
 8005a32:	ed93 7a00 	vldr	s14, [r3]
 8005a36:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005a3a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005a3e:	4b8b      	ldr	r3, [pc, #556]	; (8005c6c <calWallConrol+0x10cc>)
 8005a40:	edd3 6a02 	vldr	s13, [r3, #8]
 8005a44:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a50:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005a54:	e05a      	b.n	8005b0c <calWallConrol+0xf6c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005a56:	2001      	movs	r0, #1
 8005a58:	f001 f9be 	bl	8006dd8 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f001 f9f1 	bl	8006e44 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005a62:	4a7f      	ldr	r2, [pc, #508]	; (8005c60 <calWallConrol+0x10c0>)
 8005a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a66:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005a68:	4a7f      	ldr	r2, [pc, #508]	; (8005c68 <calWallConrol+0x10c8>)
 8005a6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a6c:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005a6e:	4b7d      	ldr	r3, [pc, #500]	; (8005c64 <calWallConrol+0x10c4>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a7a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a82:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005a86:	4b77      	ldr	r3, [pc, #476]	; (8005c64 <calWallConrol+0x10c4>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005a96:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <calWallConrol+0x10c4>)
 8005a98:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005aa4:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005aa8:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005aac:	4b6d      	ldr	r3, [pc, #436]	; (8005c64 <calWallConrol+0x10c4>)
 8005aae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005ab2:	ee07 3a90 	vmov	s15, r3
 8005ab6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005aba:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005abe:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005ac2:	4b6a      	ldr	r3, [pc, #424]	; (8005c6c <calWallConrol+0x10cc>)
 8005ac4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005ac8:	4b68      	ldr	r3, [pc, #416]	; (8005c6c <calWallConrol+0x10cc>)
 8005aca:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005ace:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <calWallConrol+0x10cc>)
 8005ad0:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ad4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005ad8:	4b64      	ldr	r3, [pc, #400]	; (8005c6c <calWallConrol+0x10cc>)
 8005ada:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005ade:	4b63      	ldr	r3, [pc, #396]	; (8005c6c <calWallConrol+0x10cc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a62      	ldr	r2, [pc, #392]	; (8005c6c <calWallConrol+0x10cc>)
 8005ae4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005ae6:	4b61      	ldr	r3, [pc, #388]	; (8005c6c <calWallConrol+0x10cc>)
 8005ae8:	ed93 7a00 	vldr	s14, [r3]
 8005aec:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005af0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005af4:	4b5d      	ldr	r3, [pc, #372]	; (8005c6c <calWallConrol+0x10cc>)
 8005af6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005afa:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005afe:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b06:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005b0a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005b0c:	4b58      	ldr	r3, [pc, #352]	; (8005c70 <calWallConrol+0x10d0>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005c74 <calWallConrol+0x10d4>
 8005b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b1e:	dd04      	ble.n	8005b2a <calWallConrol+0xf8a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005b20:	4b55      	ldr	r3, [pc, #340]	; (8005c78 <calWallConrol+0x10d8>)
 8005b22:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005b24:	4b55      	ldr	r3, [pc, #340]	; (8005c7c <calWallConrol+0x10dc>)
 8005b26:	673b      	str	r3, [r7, #112]	; 0x70
 8005b28:	e023      	b.n	8005b72 <calWallConrol+0xfd2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005b2a:	4b51      	ldr	r3, [pc, #324]	; (8005c70 <calWallConrol+0x10d0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fa fd32 	bl	8000598 <__aeabi_f2d>
 8005b34:	a346      	add	r3, pc, #280	; (adr r3, 8005c50 <calWallConrol+0x10b0>)
 8005b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3a:	f7fa fd85 	bl	8000648 <__aeabi_dmul>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4610      	mov	r0, r2
 8005b44:	4619      	mov	r1, r3
 8005b46:	f7fb f857 	bl	8000bf8 <__aeabi_d2f>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005b4e:	4b48      	ldr	r3, [pc, #288]	; (8005c70 <calWallConrol+0x10d0>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fa fd20 	bl	8000598 <__aeabi_f2d>
 8005b58:	a33f      	add	r3, pc, #252	; (adr r3, 8005c58 <calWallConrol+0x10b8>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fd73 	bl	8000648 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4610      	mov	r0, r2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	f7fb f845 	bl	8000bf8 <__aeabi_d2f>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005b72:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <calWallConrol+0x10e0>)
 8005b74:	edd3 7a00 	vldr	s15, [r3]
 8005b78:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	dd12      	ble.n	8005bac <calWallConrol+0x100c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005b86:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <calWallConrol+0x10e0>)
 8005b88:	edd3 7a00 	vldr	s15, [r3]
 8005b8c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005c84 <calWallConrol+0x10e4>
 8005b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d808      	bhi.n	8005bac <calWallConrol+0x100c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005b9a:	4b3b      	ldr	r3, [pc, #236]	; (8005c88 <calWallConrol+0x10e8>)
 8005b9c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <calWallConrol+0x10ec>)
 8005ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005ba2:	4b3b      	ldr	r3, [pc, #236]	; (8005c90 <calWallConrol+0x10f0>)
 8005ba4:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005ba6:	4b3b      	ldr	r3, [pc, #236]	; (8005c94 <calWallConrol+0x10f4>)
 8005ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8005baa:	e025      	b.n	8005bf8 <calWallConrol+0x1058>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005bac:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <calWallConrol+0x10c4>)
 8005bae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bb2:	2b82      	cmp	r3, #130	; 0x82
 8005bb4:	dd07      	ble.n	8005bc6 <calWallConrol+0x1026>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005bb6:	4b38      	ldr	r3, [pc, #224]	; (8005c98 <calWallConrol+0x10f8>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f043 0302 	orr.w	r3, r3, #2
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <calWallConrol+0x10f8>)
 8005bc2:	701a      	strb	r2, [r3, #0]
 8005bc4:	e006      	b.n	8005bd4 <calWallConrol+0x1034>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005bc6:	4b34      	ldr	r3, [pc, #208]	; (8005c98 <calWallConrol+0x10f8>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f023 0302 	bic.w	r3, r3, #2
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	4b31      	ldr	r3, [pc, #196]	; (8005c98 <calWallConrol+0x10f8>)
 8005bd2:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005bd4:	4b23      	ldr	r3, [pc, #140]	; (8005c64 <calWallConrol+0x10c4>)
 8005bd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bda:	ee07 3a90 	vmov	s15, r3
 8005bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <calWallConrol+0x10fc>)
 8005bfa:	edd3 7a00 	vldr	s15, [r3]
 8005bfe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0a:	dd12      	ble.n	8005c32 <calWallConrol+0x1092>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005c0c:	4b23      	ldr	r3, [pc, #140]	; (8005c9c <calWallConrol+0x10fc>)
 8005c0e:	edd3 7a00 	vldr	s15, [r3]
 8005c12:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c84 <calWallConrol+0x10e4>
 8005c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1e:	d808      	bhi.n	8005c32 <calWallConrol+0x1092>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005c20:	4b1f      	ldr	r3, [pc, #124]	; (8005ca0 <calWallConrol+0x1100>)
 8005c22:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005c24:	4b1f      	ldr	r3, [pc, #124]	; (8005ca4 <calWallConrol+0x1104>)
 8005c26:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005c28:	4b1f      	ldr	r3, [pc, #124]	; (8005ca8 <calWallConrol+0x1108>)
 8005c2a:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005c2c:	4b1f      	ldr	r3, [pc, #124]	; (8005cac <calWallConrol+0x110c>)
 8005c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c30:	e056      	b.n	8005ce0 <calWallConrol+0x1140>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005c32:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <calWallConrol+0x10c4>)
 8005c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c36:	2b82      	cmp	r3, #130	; 0x82
 8005c38:	dd3a      	ble.n	8005cb0 <calWallConrol+0x1110>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005c3a:	4b17      	ldr	r3, [pc, #92]	; (8005c98 <calWallConrol+0x10f8>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f043 0301 	orr.w	r3, r3, #1
 8005c42:	b2da      	uxtb	r2, r3
 8005c44:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <calWallConrol+0x10f8>)
 8005c46:	701a      	strb	r2, [r3, #0]
 8005c48:	e039      	b.n	8005cbe <calWallConrol+0x111e>
 8005c4a:	bf00      	nop
 8005c4c:	f3af 8000 	nop.w
 8005c50:	9999999a 	.word	0x9999999a
 8005c54:	3fe99999 	.word	0x3fe99999
 8005c58:	47ae147b 	.word	0x47ae147b
 8005c5c:	bfb47ae1 	.word	0xbfb47ae1
 8005c60:	200005ac 	.word	0x200005ac
 8005c64:	200002b8 	.word	0x200002b8
 8005c68:	200005b0 	.word	0x200005b0
 8005c6c:	20000578 	.word	0x20000578
 8005c70:	200004d8 	.word	0x200004d8
 8005c74:	44fa0000 	.word	0x44fa0000
 8005c78:	44c80000 	.word	0x44c80000
 8005c7c:	c3200000 	.word	0xc3200000
 8005c80:	200005dc 	.word	0x200005dc
 8005c84:	42a00000 	.word	0x42a00000
 8005c88:	438d4c33 	.word	0x438d4c33
 8005c8c:	bfa66ddb 	.word	0xbfa66ddb
 8005c90:	3d2e0737 	.word	0x3d2e0737
 8005c94:	39c521de 	.word	0x39c521de
 8005c98:	20000594 	.word	0x20000594
 8005c9c:	200005e0 	.word	0x200005e0
 8005ca0:	43774cf8 	.word	0x43774cf8
 8005ca4:	3e27920b 	.word	0x3e27920b
 8005ca8:	bd0ad094 	.word	0xbd0ad094
 8005cac:	3a5f1fa4 	.word	0x3a5f1fa4
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005cb0:	4bb5      	ldr	r3, [pc, #724]	; (8005f88 <calWallConrol+0x13e8>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4bb3      	ldr	r3, [pc, #716]	; (8005f88 <calWallConrol+0x13e8>)
 8005cbc:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005cbe:	4bb3      	ldr	r3, [pc, #716]	; (8005f8c <calWallConrol+0x13ec>)
 8005cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cca:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005cda:	f04f 0300 	mov.w	r3, #0
 8005cde:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005ce0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005ce4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005ce8:	4ba9      	ldr	r3, [pc, #676]	; (8005f90 <calWallConrol+0x13f0>)
 8005cea:	edd3 7a00 	vldr	s15, [r3]
 8005cee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005cf2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005cf6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005cfa:	4ba5      	ldr	r3, [pc, #660]	; (8005f90 <calWallConrol+0x13f0>)
 8005cfc:	edd3 7a00 	vldr	s15, [r3]
 8005d00:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005d04:	4ba2      	ldr	r3, [pc, #648]	; (8005f90 <calWallConrol+0x13f0>)
 8005d06:	edd3 7a00 	vldr	s15, [r3]
 8005d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005d12:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005d16:	4b9e      	ldr	r3, [pc, #632]	; (8005f90 <calWallConrol+0x13f0>)
 8005d18:	edd3 7a00 	vldr	s15, [r3]
 8005d1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005d20:	4b9b      	ldr	r3, [pc, #620]	; (8005f90 <calWallConrol+0x13f0>)
 8005d22:	edd3 7a00 	vldr	s15, [r3]
 8005d26:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005d2a:	4b99      	ldr	r3, [pc, #612]	; (8005f90 <calWallConrol+0x13f0>)
 8005d2c:	edd3 7a00 	vldr	s15, [r3]
 8005d30:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005d34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d38:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005d3c:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d44:	4b93      	ldr	r3, [pc, #588]	; (8005f94 <calWallConrol+0x13f4>)
 8005d46:	edd3 7a00 	vldr	s15, [r3]
 8005d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005d52:	edd7 6a08 	vldr	s13, [r7, #32]
 8005d56:	4b8f      	ldr	r3, [pc, #572]	; (8005f94 <calWallConrol+0x13f4>)
 8005d58:	edd3 7a00 	vldr	s15, [r3]
 8005d5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005d60:	4b8c      	ldr	r3, [pc, #560]	; (8005f94 <calWallConrol+0x13f4>)
 8005d62:	edd3 7a00 	vldr	s15, [r3]
 8005d66:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005d6e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005d72:	4b88      	ldr	r3, [pc, #544]	; (8005f94 <calWallConrol+0x13f4>)
 8005d74:	edd3 7a00 	vldr	s15, [r3]
 8005d78:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005d7c:	4b85      	ldr	r3, [pc, #532]	; (8005f94 <calWallConrol+0x13f4>)
 8005d7e:	edd3 7a00 	vldr	s15, [r3]
 8005d82:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005d86:	4b83      	ldr	r3, [pc, #524]	; (8005f94 <calWallConrol+0x13f4>)
 8005d88:	edd3 7a00 	vldr	s15, [r3]
 8005d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005d90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d94:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005d98:	230b      	movs	r3, #11
 8005d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d9c:	e018      	b.n	8005dd0 <calWallConrol+0x1230>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da0:	3b01      	subs	r3, #1
 8005da2:	4a7d      	ldr	r2, [pc, #500]	; (8005f98 <calWallConrol+0x13f8>)
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	497b      	ldr	r1, [pc, #492]	; (8005f98 <calWallConrol+0x13f8>)
 8005dac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	440b      	add	r3, r1
 8005db2:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db6:	3b01      	subs	r3, #1
 8005db8:	4a78      	ldr	r2, [pc, #480]	; (8005f9c <calWallConrol+0x13fc>)
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4976      	ldr	r1, [pc, #472]	; (8005f9c <calWallConrol+0x13fc>)
 8005dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	3b01      	subs	r3, #1
 8005dce:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dce3      	bgt.n	8005d9e <calWallConrol+0x11fe>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005dd6:	4a70      	ldr	r2, [pc, #448]	; (8005f98 <calWallConrol+0x13f8>)
 8005dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dda:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005ddc:	4a6f      	ldr	r2, [pc, #444]	; (8005f9c <calWallConrol+0x13fc>)
 8005dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005de0:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005de2:	4b6d      	ldr	r3, [pc, #436]	; (8005f98 <calWallConrol+0x13f8>)
 8005de4:	ed93 7a00 	vldr	s14, [r3]
 8005de8:	4b6b      	ldr	r3, [pc, #428]	; (8005f98 <calWallConrol+0x13f8>)
 8005dea:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df2:	4b6b      	ldr	r3, [pc, #428]	; (8005fa0 <calWallConrol+0x1400>)
 8005df4:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005df8:	4b68      	ldr	r3, [pc, #416]	; (8005f9c <calWallConrol+0x13fc>)
 8005dfa:	ed93 7a00 	vldr	s14, [r3]
 8005dfe:	4b67      	ldr	r3, [pc, #412]	; (8005f9c <calWallConrol+0x13fc>)
 8005e00:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e08:	4b66      	ldr	r3, [pc, #408]	; (8005fa4 <calWallConrol+0x1404>)
 8005e0a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005e0e:	4b5f      	ldr	r3, [pc, #380]	; (8005f8c <calWallConrol+0x13ec>)
 8005e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e14:	2b82      	cmp	r3, #130	; 0x82
 8005e16:	dd1a      	ble.n	8005e4e <calWallConrol+0x12ae>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005e18:	4b63      	ldr	r3, [pc, #396]	; (8005fa8 <calWallConrol+0x1408>)
 8005e1a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005e1c:	ee07 3a90 	vmov	s15, r3
 8005e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e24:	4b5e      	ldr	r3, [pc, #376]	; (8005fa0 <calWallConrol+0x1400>)
 8005e26:	edd3 7a00 	vldr	s15, [r3]
 8005e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005e2e:	eef0 7ae7 	vabs.f32	s15, s15
 8005e32:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005fac <calWallConrol+0x140c>
 8005e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	d506      	bpl.n	8005e4e <calWallConrol+0x12ae>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005e40:	4b51      	ldr	r3, [pc, #324]	; (8005f88 <calWallConrol+0x13e8>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f043 0302 	orr.w	r3, r3, #2
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b4f      	ldr	r3, [pc, #316]	; (8005f88 <calWallConrol+0x13e8>)
 8005e4c:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005e4e:	4b4f      	ldr	r3, [pc, #316]	; (8005f8c <calWallConrol+0x13ec>)
 8005e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e52:	2b82      	cmp	r3, #130	; 0x82
 8005e54:	dd1a      	ble.n	8005e8c <calWallConrol+0x12ec>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005e56:	4b54      	ldr	r3, [pc, #336]	; (8005fa8 <calWallConrol+0x1408>)
 8005e58:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e62:	4b50      	ldr	r3, [pc, #320]	; (8005fa4 <calWallConrol+0x1404>)
 8005e64:	edd3 7a00 	vldr	s15, [r3]
 8005e68:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005e6c:	eef0 7ae7 	vabs.f32	s15, s15
 8005e70:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005fac <calWallConrol+0x140c>
 8005e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	d506      	bpl.n	8005e8c <calWallConrol+0x12ec>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005e7e:	4b42      	ldr	r3, [pc, #264]	; (8005f88 <calWallConrol+0x13e8>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f043 0301 	orr.w	r3, r3, #1
 8005e86:	b2da      	uxtb	r2, r3
 8005e88:	4b3f      	ldr	r3, [pc, #252]	; (8005f88 <calWallConrol+0x13e8>)
 8005e8a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <calWallConrol+0x13ec>)
 8005e8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e92:	2b81      	cmp	r3, #129	; 0x81
 8005e94:	dd13      	ble.n	8005ebe <calWallConrol+0x131e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005e96:	4b44      	ldr	r3, [pc, #272]	; (8005fa8 <calWallConrol+0x1408>)
 8005e98:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ea2:	4b3f      	ldr	r3, [pc, #252]	; (8005fa0 <calWallConrol+0x1400>)
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005eac:	eef0 7ae7 	vabs.f32	s15, s15
 8005eb0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005fac <calWallConrol+0x140c>
 8005eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebc:	dd06      	ble.n	8005ecc <calWallConrol+0x132c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005ebe:	4b32      	ldr	r3, [pc, #200]	; (8005f88 <calWallConrol+0x13e8>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f023 0302 	bic.w	r3, r3, #2
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	4b2f      	ldr	r3, [pc, #188]	; (8005f88 <calWallConrol+0x13e8>)
 8005eca:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005ecc:	4b2f      	ldr	r3, [pc, #188]	; (8005f8c <calWallConrol+0x13ec>)
 8005ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ed0:	2b81      	cmp	r3, #129	; 0x81
 8005ed2:	dd13      	ble.n	8005efc <calWallConrol+0x135c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005ed4:	4b34      	ldr	r3, [pc, #208]	; (8005fa8 <calWallConrol+0x1408>)
 8005ed6:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005ed8:	ee07 3a90 	vmov	s15, r3
 8005edc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ee0:	4b30      	ldr	r3, [pc, #192]	; (8005fa4 <calWallConrol+0x1404>)
 8005ee2:	edd3 7a00 	vldr	s15, [r3]
 8005ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005eea:	eef0 7ae7 	vabs.f32	s15, s15
 8005eee:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005fac <calWallConrol+0x140c>
 8005ef2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	dd06      	ble.n	8005f0a <calWallConrol+0x136a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005efc:	4b22      	ldr	r3, [pc, #136]	; (8005f88 <calWallConrol+0x13e8>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f023 0301 	bic.w	r3, r3, #1
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	4b20      	ldr	r3, [pc, #128]	; (8005f88 <calWallConrol+0x13e8>)
 8005f08:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005f0a:	4b1f      	ldr	r3, [pc, #124]	; (8005f88 <calWallConrol+0x13e8>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	f200 8155 	bhi.w	80061be <calWallConrol+0x161e>
 8005f14:	a201      	add	r2, pc, #4	; (adr r2, 8005f1c <calWallConrol+0x137c>)
 8005f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f1a:	bf00      	nop
 8005f1c:	08005f2d 	.word	0x08005f2d
 8005f20:	08005fc1 	.word	0x08005fc1
 8005f24:	08006061 	.word	0x08006061
 8005f28:	080060ff 	.word	0x080060ff
		case 0:			//両壁なし
			PID_wall += 0;
 8005f2c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005f30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005fb0 <calWallConrol+0x1410>
 8005f34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f38:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f000 ff5d 	bl	8006dfc <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005f42:	2000      	movs	r0, #0
 8005f44:	f000 ff6c 	bl	8006e20 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005f48:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <calWallConrol+0x13ec>)
 8005f4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f4e:	ee07 3a90 	vmov	s15, r3
 8005f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <calWallConrol+0x1414>)
 8005f58:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005f5c:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <calWallConrol+0x13ec>)
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f68:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <calWallConrol+0x1418>)
 8005f6a:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005f6e:	4b13      	ldr	r3, [pc, #76]	; (8005fbc <calWallConrol+0x141c>)
 8005f70:	f04f 0200 	mov.w	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005f76:	4b11      	ldr	r3, [pc, #68]	; (8005fbc <calWallConrol+0x141c>)
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005f7e:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <calWallConrol+0x141c>)
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	605a      	str	r2, [r3, #4]
			break;
 8005f86:	e11a      	b.n	80061be <calWallConrol+0x161e>
 8005f88:	20000594 	.word	0x20000594
 8005f8c:	200002b8 	.word	0x200002b8
 8005f90:	200005dc 	.word	0x200005dc
 8005f94:	200005e0 	.word	0x200005e0
 8005f98:	20000668 	.word	0x20000668
 8005f9c:	20000698 	.word	0x20000698
 8005fa0:	200006d0 	.word	0x200006d0
 8005fa4:	200006d4 	.word	0x200006d4
 8005fa8:	20000448 	.word	0x20000448
 8005fac:	42a00000 	.word	0x42a00000
 8005fb0:	00000000 	.word	0x00000000
 8005fb4:	200005a4 	.word	0x200005a4
 8005fb8:	200005a8 	.word	0x200005a8
 8005fbc:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f000 ff1b 	bl	8006dfc <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005fc6:	2001      	movs	r0, #1
 8005fc8:	f000 ff2a 	bl	8006e20 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005fcc:	4b87      	ldr	r3, [pc, #540]	; (80061ec <calWallConrol+0x164c>)
 8005fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fda:	4b85      	ldr	r3, [pc, #532]	; (80061f0 <calWallConrol+0x1650>)
 8005fdc:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005fe0:	4a84      	ldr	r2, [pc, #528]	; (80061f4 <calWallConrol+0x1654>)
 8005fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe4:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005fe6:	4b81      	ldr	r3, [pc, #516]	; (80061ec <calWallConrol+0x164c>)
 8005fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ffa:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005ffe:	4b7b      	ldr	r3, [pc, #492]	; (80061ec <calWallConrol+0x164c>)
 8006000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006002:	ee07 3a90 	vmov	s15, r3
 8006006:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800600a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 800600e:	4b7a      	ldr	r3, [pc, #488]	; (80061f8 <calWallConrol+0x1658>)
 8006010:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006014:	4b78      	ldr	r3, [pc, #480]	; (80061f8 <calWallConrol+0x1658>)
 8006016:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800601a:	4b77      	ldr	r3, [pc, #476]	; (80061f8 <calWallConrol+0x1658>)
 800601c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006020:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006024:	4b74      	ldr	r3, [pc, #464]	; (80061f8 <calWallConrol+0x1658>)
 8006026:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800602a:	4b73      	ldr	r3, [pc, #460]	; (80061f8 <calWallConrol+0x1658>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a72      	ldr	r2, [pc, #456]	; (80061f8 <calWallConrol+0x1658>)
 8006030:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006032:	4b71      	ldr	r3, [pc, #452]	; (80061f8 <calWallConrol+0x1658>)
 8006034:	ed93 7a00 	vldr	s14, [r3]
 8006038:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800603c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006040:	4b6d      	ldr	r3, [pc, #436]	; (80061f8 <calWallConrol+0x1658>)
 8006042:	edd3 6a02 	vldr	s13, [r3, #8]
 8006046:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800604a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800604e:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006052:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800605a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800605e:	e0ae      	b.n	80061be <calWallConrol+0x161e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006060:	2001      	movs	r0, #1
 8006062:	f000 fecb 	bl	8006dfc <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006066:	2000      	movs	r0, #0
 8006068:	f000 feda 	bl	8006e20 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800606c:	4a60      	ldr	r2, [pc, #384]	; (80061f0 <calWallConrol+0x1650>)
 800606e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006070:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006072:	4b5e      	ldr	r3, [pc, #376]	; (80061ec <calWallConrol+0x164c>)
 8006074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800607e:	4b5d      	ldr	r3, [pc, #372]	; (80061f4 <calWallConrol+0x1654>)
 8006080:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006084:	4b59      	ldr	r3, [pc, #356]	; (80061ec <calWallConrol+0x164c>)
 8006086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800608a:	ee07 3a90 	vmov	s15, r3
 800608e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006092:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006096:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800609a:	4b54      	ldr	r3, [pc, #336]	; (80061ec <calWallConrol+0x164c>)
 800609c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80060a0:	ee07 3a90 	vmov	s15, r3
 80060a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 80060ac:	4b52      	ldr	r3, [pc, #328]	; (80061f8 <calWallConrol+0x1658>)
 80060ae:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80060b2:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <calWallConrol+0x1658>)
 80060b4:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80060b8:	4b4f      	ldr	r3, [pc, #316]	; (80061f8 <calWallConrol+0x1658>)
 80060ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80060be:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80060c2:	4b4d      	ldr	r3, [pc, #308]	; (80061f8 <calWallConrol+0x1658>)
 80060c4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80060c8:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <calWallConrol+0x1658>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a4a      	ldr	r2, [pc, #296]	; (80061f8 <calWallConrol+0x1658>)
 80060ce:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80060d0:	4b49      	ldr	r3, [pc, #292]	; (80061f8 <calWallConrol+0x1658>)
 80060d2:	ed93 7a00 	vldr	s14, [r3]
 80060d6:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80060da:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80060de:	4b46      	ldr	r3, [pc, #280]	; (80061f8 <calWallConrol+0x1658>)
 80060e0:	edd3 6a02 	vldr	s13, [r3, #8]
 80060e4:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80060e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060ec:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80060f0:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80060f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060f8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80060fc:	e05f      	b.n	80061be <calWallConrol+0x161e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 80060fe:	2001      	movs	r0, #1
 8006100:	f000 fe7c 	bl	8006dfc <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006104:	2001      	movs	r0, #1
 8006106:	f000 fe8b 	bl	8006e20 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 800610a:	4a39      	ldr	r2, [pc, #228]	; (80061f0 <calWallConrol+0x1650>)
 800610c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800610e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006110:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <calWallConrol+0x1654>)
 8006112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006114:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006116:	4b35      	ldr	r3, [pc, #212]	; (80061ec <calWallConrol+0x164c>)
 8006118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006122:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006126:	ee77 7a67 	vsub.f32	s15, s14, s15
 800612a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 800612e:	4b2f      	ldr	r3, [pc, #188]	; (80061ec <calWallConrol+0x164c>)
 8006130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800613a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800613e:	4b2b      	ldr	r3, [pc, #172]	; (80061ec <calWallConrol+0x164c>)
 8006140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800614c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006150:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006154:	4b25      	ldr	r3, [pc, #148]	; (80061ec <calWallConrol+0x164c>)
 8006156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006162:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006166:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800616a:	4b23      	ldr	r3, [pc, #140]	; (80061f8 <calWallConrol+0x1658>)
 800616c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006170:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <calWallConrol+0x1658>)
 8006172:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <calWallConrol+0x1658>)
 8006178:	edd3 7a01 	vldr	s15, [r3, #4]
 800617c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006180:	4b1d      	ldr	r3, [pc, #116]	; (80061f8 <calWallConrol+0x1658>)
 8006182:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006186:	4b1c      	ldr	r3, [pc, #112]	; (80061f8 <calWallConrol+0x1658>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <calWallConrol+0x1658>)
 800618c:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800618e:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <calWallConrol+0x1658>)
 8006190:	ed93 7a00 	vldr	s14, [r3]
 8006194:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006198:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800619c:	4b16      	ldr	r3, [pc, #88]	; (80061f8 <calWallConrol+0x1658>)
 800619e:	edd3 6a02 	vldr	s13, [r3, #8]
 80061a2:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80061a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061aa:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80061ae:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80061b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061b6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80061ba:	e000      	b.n	80061be <calWallConrol+0x161e>
			break;
 80061bc:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 80061be:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80061c2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80061fc <calWallConrol+0x165c>
 80061c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <calWallConrol+0x1660>)
 80061cc:	edd3 7a00 	vldr	s15, [r3]
 80061d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d4:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 80061d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061da:	ee07 3a90 	vmov	s15, r3
}
 80061de:	eeb0 0a67 	vmov.f32	s0, s15
 80061e2:	37a8      	adds	r7, #168	; 0xa8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ea:	bf00      	nop
 80061ec:	200002b8 	.word	0x200002b8
 80061f0:	200005a4 	.word	0x200005a4
 80061f4:	200005a8 	.word	0x200005a8
 80061f8:	20000584 	.word	0x20000584
 80061fc:	44d1e000 	.word	0x44d1e000
 8006200:	200004d4 	.word	0x200004d4
 8006204:	00000000 	.word	0x00000000

08006208 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006208:	b5b0      	push	{r4, r5, r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800620e:	4b98      	ldr	r3, [pc, #608]	; (8006470 <interrupt_WallCut+0x268>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	f040 8537 	bne.w	8006c86 <interrupt_WallCut+0xa7e>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006218:	4b96      	ldr	r3, [pc, #600]	; (8006474 <interrupt_WallCut+0x26c>)
 800621a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800621e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006222:	dd03      	ble.n	800622c <interrupt_WallCut+0x24>
			front_wall_break_90 = 1;
 8006224:	4b94      	ldr	r3, [pc, #592]	; (8006478 <interrupt_WallCut+0x270>)
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
 800622a:	e002      	b.n	8006232 <interrupt_WallCut+0x2a>
		} else {
			front_wall_break_90 = 0;
 800622c:	4b92      	ldr	r3, [pc, #584]	; (8006478 <interrupt_WallCut+0x270>)
 800622e:	2200      	movs	r2, #0
 8006230:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006232:	4b90      	ldr	r3, [pc, #576]	; (8006474 <interrupt_WallCut+0x26c>)
 8006234:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006238:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800623c:	dd03      	ble.n	8006246 <interrupt_WallCut+0x3e>
			front_wall_break_45 = 1;
 800623e:	4b8f      	ldr	r3, [pc, #572]	; (800647c <interrupt_WallCut+0x274>)
 8006240:	2201      	movs	r2, #1
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e002      	b.n	800624c <interrupt_WallCut+0x44>
		} else {
			front_wall_break_45 = 0;
 8006246:	4b8d      	ldr	r3, [pc, #564]	; (800647c <interrupt_WallCut+0x274>)
 8006248:	2200      	movs	r2, #0
 800624a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 800624c:	4b89      	ldr	r3, [pc, #548]	; (8006474 <interrupt_WallCut+0x26c>)
 800624e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006252:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006256:	dd03      	ble.n	8006260 <interrupt_WallCut+0x58>
			front_wall_break_45slant = 1;
 8006258:	4b89      	ldr	r3, [pc, #548]	; (8006480 <interrupt_WallCut+0x278>)
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	e002      	b.n	8006266 <interrupt_WallCut+0x5e>
		} else {
			front_wall_break_45slant = 0;
 8006260:	4b87      	ldr	r3, [pc, #540]	; (8006480 <interrupt_WallCut+0x278>)
 8006262:	2200      	movs	r2, #0
 8006264:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006266:	4b83      	ldr	r3, [pc, #524]	; (8006474 <interrupt_WallCut+0x26c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800626e:	da30      	bge.n	80062d2 <interrupt_WallCut+0xca>
			NoWallCountL90++;
 8006270:	4b84      	ldr	r3, [pc, #528]	; (8006484 <interrupt_WallCut+0x27c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a83      	ldr	r2, [pc, #524]	; (8006484 <interrupt_WallCut+0x27c>)
 8006278:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800627a:	4b83      	ldr	r3, [pc, #524]	; (8006488 <interrupt_WallCut+0x280>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4618      	mov	r0, r3
 8006280:	f7fa f98a 	bl	8000598 <__aeabi_f2d>
 8006284:	4604      	mov	r4, r0
 8006286:	460d      	mov	r5, r1
 8006288:	4b80      	ldr	r3, [pc, #512]	; (800648c <interrupt_WallCut+0x284>)
 800628a:	ed93 7a00 	vldr	s14, [r3]
 800628e:	4b80      	ldr	r3, [pc, #512]	; (8006490 <interrupt_WallCut+0x288>)
 8006290:	edd3 7a00 	vldr	s15, [r3]
 8006294:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006298:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800629c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062a0:	ee16 0a90 	vmov	r0, s13
 80062a4:	f7fa f978 	bl	8000598 <__aeabi_f2d>
 80062a8:	a36f      	add	r3, pc, #444	; (adr r3, 8006468 <interrupt_WallCut+0x260>)
 80062aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ae:	f7fa f9cb 	bl	8000648 <__aeabi_dmul>
 80062b2:	4602      	mov	r2, r0
 80062b4:	460b      	mov	r3, r1
 80062b6:	4620      	mov	r0, r4
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa f80f 	bl	80002dc <__adddf3>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4610      	mov	r0, r2
 80062c4:	4619      	mov	r1, r3
 80062c6:	f7fa fc97 	bl	8000bf8 <__aeabi_d2f>
 80062ca:	4603      	mov	r3, r0
 80062cc:	4a6e      	ldr	r2, [pc, #440]	; (8006488 <interrupt_WallCut+0x280>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e006      	b.n	80062e0 <interrupt_WallCut+0xd8>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80062d2:	4b6c      	ldr	r3, [pc, #432]	; (8006484 <interrupt_WallCut+0x27c>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80062d8:	4b6b      	ldr	r3, [pc, #428]	; (8006488 <interrupt_WallCut+0x280>)
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80062e0:	4b64      	ldr	r3, [pc, #400]	; (8006474 <interrupt_WallCut+0x26c>)
 80062e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80062ea:	da30      	bge.n	800634e <interrupt_WallCut+0x146>
			NoWallCountR90++;
 80062ec:	4b69      	ldr	r3, [pc, #420]	; (8006494 <interrupt_WallCut+0x28c>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	4a68      	ldr	r2, [pc, #416]	; (8006494 <interrupt_WallCut+0x28c>)
 80062f4:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80062f6:	4b68      	ldr	r3, [pc, #416]	; (8006498 <interrupt_WallCut+0x290>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa f94c 	bl	8000598 <__aeabi_f2d>
 8006300:	4604      	mov	r4, r0
 8006302:	460d      	mov	r5, r1
 8006304:	4b61      	ldr	r3, [pc, #388]	; (800648c <interrupt_WallCut+0x284>)
 8006306:	ed93 7a00 	vldr	s14, [r3]
 800630a:	4b61      	ldr	r3, [pc, #388]	; (8006490 <interrupt_WallCut+0x288>)
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006314:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006318:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800631c:	ee16 0a90 	vmov	r0, s13
 8006320:	f7fa f93a 	bl	8000598 <__aeabi_f2d>
 8006324:	a350      	add	r3, pc, #320	; (adr r3, 8006468 <interrupt_WallCut+0x260>)
 8006326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632a:	f7fa f98d 	bl	8000648 <__aeabi_dmul>
 800632e:	4602      	mov	r2, r0
 8006330:	460b      	mov	r3, r1
 8006332:	4620      	mov	r0, r4
 8006334:	4629      	mov	r1, r5
 8006336:	f7f9 ffd1 	bl	80002dc <__adddf3>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4610      	mov	r0, r2
 8006340:	4619      	mov	r1, r3
 8006342:	f7fa fc59 	bl	8000bf8 <__aeabi_d2f>
 8006346:	4603      	mov	r3, r0
 8006348:	4a53      	ldr	r2, [pc, #332]	; (8006498 <interrupt_WallCut+0x290>)
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	e006      	b.n	800635c <interrupt_WallCut+0x154>
		} else {
			NoWallCountR90 = 0;
 800634e:	4b51      	ldr	r3, [pc, #324]	; (8006494 <interrupt_WallCut+0x28c>)
 8006350:	2200      	movs	r2, #0
 8006352:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006354:	4b50      	ldr	r3, [pc, #320]	; (8006498 <interrupt_WallCut+0x290>)
 8006356:	f04f 0200 	mov.w	r2, #0
 800635a:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800635c:	4b4f      	ldr	r3, [pc, #316]	; (800649c <interrupt_WallCut+0x294>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8006364:	da03      	bge.n	800636e <interrupt_WallCut+0x166>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006366:	4b43      	ldr	r3, [pc, #268]	; (8006474 <interrupt_WallCut+0x26c>)
 8006368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800636a:	2b70      	cmp	r3, #112	; 0x70
 800636c:	dd37      	ble.n	80063de <interrupt_WallCut+0x1d6>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 800636e:	4b4c      	ldr	r3, [pc, #304]	; (80064a0 <interrupt_WallCut+0x298>)
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006376:	4b4b      	ldr	r3, [pc, #300]	; (80064a4 <interrupt_WallCut+0x29c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3301      	adds	r3, #1
 800637c:	4a49      	ldr	r2, [pc, #292]	; (80064a4 <interrupt_WallCut+0x29c>)
 800637e:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006380:	4b49      	ldr	r3, [pc, #292]	; (80064a8 <interrupt_WallCut+0x2a0>)
 8006382:	2200      	movs	r2, #0
 8006384:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006386:	4b49      	ldr	r3, [pc, #292]	; (80064ac <interrupt_WallCut+0x2a4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fa f904 	bl	8000598 <__aeabi_f2d>
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
 8006394:	4b3d      	ldr	r3, [pc, #244]	; (800648c <interrupt_WallCut+0x284>)
 8006396:	ed93 7a00 	vldr	s14, [r3]
 800639a:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <interrupt_WallCut+0x288>)
 800639c:	edd3 7a00 	vldr	s15, [r3]
 80063a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063ac:	ee16 0a90 	vmov	r0, s13
 80063b0:	f7fa f8f2 	bl	8000598 <__aeabi_f2d>
 80063b4:	a32c      	add	r3, pc, #176	; (adr r3, 8006468 <interrupt_WallCut+0x260>)
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f7fa f945 	bl	8000648 <__aeabi_dmul>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4620      	mov	r0, r4
 80063c4:	4629      	mov	r1, r5
 80063c6:	f7f9 ff89 	bl	80002dc <__adddf3>
 80063ca:	4602      	mov	r2, r0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4610      	mov	r0, r2
 80063d0:	4619      	mov	r1, r3
 80063d2:	f7fa fc11 	bl	8000bf8 <__aeabi_d2f>
 80063d6:	4603      	mov	r3, r0
 80063d8:	4a34      	ldr	r2, [pc, #208]	; (80064ac <interrupt_WallCut+0x2a4>)
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	e09c      	b.n	8006518 <interrupt_WallCut+0x310>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80063de:	4b32      	ldr	r3, [pc, #200]	; (80064a8 <interrupt_WallCut+0x2a0>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d168      	bne.n	80064b8 <interrupt_WallCut+0x2b0>
				for (int i = 0; i <= 19; i++) {
 80063e6:	2300      	movs	r3, #0
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e01f      	b.n	800642c <interrupt_WallCut+0x224>
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80063ec:	4a21      	ldr	r2, [pc, #132]	; (8006474 <interrupt_WallCut+0x26c>)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3314      	adds	r3, #20
 80063f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063fe:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <interrupt_WallCut+0x298>)
 8006400:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006404:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800640c:	dd0b      	ble.n	8006426 <interrupt_WallCut+0x21e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 800640e:	4a19      	ldr	r2, [pc, #100]	; (8006474 <interrupt_WallCut+0x26c>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3314      	adds	r3, #20
 8006414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <interrupt_WallCut+0x298>)
 8006422:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3301      	adds	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2b13      	cmp	r3, #19
 8006430:	dddc      	ble.n	80063ec <interrupt_WallCut+0x1e4>
					}
				}
				NoWallCountL45 = 0;
 8006432:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <interrupt_WallCut+0x29c>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006438:	4b1b      	ldr	r3, [pc, #108]	; (80064a8 <interrupt_WallCut+0x2a0>)
 800643a:	2201      	movs	r2, #1
 800643c:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 800643e:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <interrupt_WallCut+0x298>)
 8006440:	edd3 7a00 	vldr	s15, [r3]
 8006444:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80064b0 <interrupt_WallCut+0x2a8>
 8006448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800644c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80064b4 <interrupt_WallCut+0x2ac>
 8006450:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006454:	4b12      	ldr	r3, [pc, #72]	; (80064a0 <interrupt_WallCut+0x298>)
 8006456:	ed93 7a00 	vldr	s14, [r3]
 800645a:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 800645e:	4b13      	ldr	r3, [pc, #76]	; (80064ac <interrupt_WallCut+0x2a4>)
 8006460:	edc3 7a00 	vstr	s15, [r3]
 8006464:	e058      	b.n	8006518 <interrupt_WallCut+0x310>
 8006466:	bf00      	nop
 8006468:	d2f1a9fc 	.word	0xd2f1a9fc
 800646c:	3f50624d 	.word	0x3f50624d
 8006470:	20000592 	.word	0x20000592
 8006474:	200002b8 	.word	0x200002b8
 8006478:	200005f2 	.word	0x200005f2
 800647c:	200005f3 	.word	0x200005f3
 8006480:	200005f4 	.word	0x200005f4
 8006484:	200005b8 	.word	0x200005b8
 8006488:	200005d0 	.word	0x200005d0
 800648c:	20000258 	.word	0x20000258
 8006490:	2000025c 	.word	0x2000025c
 8006494:	200005b4 	.word	0x200005b4
 8006498:	200005cc 	.word	0x200005cc
 800649c:	2000045c 	.word	0x2000045c
 80064a0:	200005f8 	.word	0x200005f8
 80064a4:	200005c0 	.word	0x200005c0
 80064a8:	200005ec 	.word	0x200005ec
 80064ac:	200005d8 	.word	0x200005d8
 80064b0:	43f68000 	.word	0x43f68000
 80064b4:	00000000 	.word	0x00000000
			} else {
				NoWallCountL45++;
 80064b8:	4bab      	ldr	r3, [pc, #684]	; (8006768 <interrupt_WallCut+0x560>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	4aaa      	ldr	r2, [pc, #680]	; (8006768 <interrupt_WallCut+0x560>)
 80064c0:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80064c2:	4baa      	ldr	r3, [pc, #680]	; (800676c <interrupt_WallCut+0x564>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fa f866 	bl	8000598 <__aeabi_f2d>
 80064cc:	4604      	mov	r4, r0
 80064ce:	460d      	mov	r5, r1
 80064d0:	4ba7      	ldr	r3, [pc, #668]	; (8006770 <interrupt_WallCut+0x568>)
 80064d2:	ed93 7a00 	vldr	s14, [r3]
 80064d6:	4ba7      	ldr	r3, [pc, #668]	; (8006774 <interrupt_WallCut+0x56c>)
 80064d8:	edd3 7a00 	vldr	s15, [r3]
 80064dc:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80064e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80064e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064e8:	ee16 0a90 	vmov	r0, s13
 80064ec:	f7fa f854 	bl	8000598 <__aeabi_f2d>
 80064f0:	a39b      	add	r3, pc, #620	; (adr r3, 8006760 <interrupt_WallCut+0x558>)
 80064f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f6:	f7fa f8a7 	bl	8000648 <__aeabi_dmul>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80064fe:	4620      	mov	r0, r4
 8006500:	4629      	mov	r1, r5
 8006502:	f7f9 feeb 	bl	80002dc <__adddf3>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4610      	mov	r0, r2
 800650c:	4619      	mov	r1, r3
 800650e:	f7fa fb73 	bl	8000bf8 <__aeabi_d2f>
 8006512:	4603      	mov	r3, r0
 8006514:	4a95      	ldr	r2, [pc, #596]	; (800676c <interrupt_WallCut+0x564>)
 8006516:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8006518:	4b97      	ldr	r3, [pc, #604]	; (8006778 <interrupt_WallCut+0x570>)
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006520:	da04      	bge.n	800652c <interrupt_WallCut+0x324>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006522:	4b96      	ldr	r3, [pc, #600]	; (800677c <interrupt_WallCut+0x574>)
 8006524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006528:	2bc8      	cmp	r3, #200	; 0xc8
 800652a:	dd37      	ble.n	800659c <interrupt_WallCut+0x394>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 800652c:	4b94      	ldr	r3, [pc, #592]	; (8006780 <interrupt_WallCut+0x578>)
 800652e:	f04f 0200 	mov.w	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 8006534:	4b93      	ldr	r3, [pc, #588]	; (8006784 <interrupt_WallCut+0x57c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	4a92      	ldr	r2, [pc, #584]	; (8006784 <interrupt_WallCut+0x57c>)
 800653c:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 800653e:	4b92      	ldr	r3, [pc, #584]	; (8006788 <interrupt_WallCut+0x580>)
 8006540:	2200      	movs	r2, #0
 8006542:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006544:	4b91      	ldr	r3, [pc, #580]	; (800678c <interrupt_WallCut+0x584>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4618      	mov	r0, r3
 800654a:	f7fa f825 	bl	8000598 <__aeabi_f2d>
 800654e:	4604      	mov	r4, r0
 8006550:	460d      	mov	r5, r1
 8006552:	4b87      	ldr	r3, [pc, #540]	; (8006770 <interrupt_WallCut+0x568>)
 8006554:	ed93 7a00 	vldr	s14, [r3]
 8006558:	4b86      	ldr	r3, [pc, #536]	; (8006774 <interrupt_WallCut+0x56c>)
 800655a:	edd3 7a00 	vldr	s15, [r3]
 800655e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006562:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006566:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800656a:	ee16 0a90 	vmov	r0, s13
 800656e:	f7fa f813 	bl	8000598 <__aeabi_f2d>
 8006572:	a37b      	add	r3, pc, #492	; (adr r3, 8006760 <interrupt_WallCut+0x558>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	f7fa f866 	bl	8000648 <__aeabi_dmul>
 800657c:	4602      	mov	r2, r0
 800657e:	460b      	mov	r3, r1
 8006580:	4620      	mov	r0, r4
 8006582:	4629      	mov	r1, r5
 8006584:	f7f9 feaa 	bl	80002dc <__adddf3>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	f7fa fb32 	bl	8000bf8 <__aeabi_d2f>
 8006594:	4603      	mov	r3, r0
 8006596:	4a7d      	ldr	r2, [pc, #500]	; (800678c <interrupt_WallCut+0x584>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	e073      	b.n	8006684 <interrupt_WallCut+0x47c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 800659c:	4b7a      	ldr	r3, [pc, #488]	; (8006788 <interrupt_WallCut+0x580>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d13f      	bne.n	8006624 <interrupt_WallCut+0x41c>
				for (int i = 0; i <= 19; i++) {
 80065a4:	2300      	movs	r3, #0
 80065a6:	60bb      	str	r3, [r7, #8]
 80065a8:	e01f      	b.n	80065ea <interrupt_WallCut+0x3e2>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80065aa:	4a74      	ldr	r2, [pc, #464]	; (800677c <interrupt_WallCut+0x574>)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	333c      	adds	r3, #60	; 0x3c
 80065b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065b4:	ee07 3a90 	vmov	s15, r3
 80065b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065bc:	4b70      	ldr	r3, [pc, #448]	; (8006780 <interrupt_WallCut+0x578>)
 80065be:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80065c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	dd0b      	ble.n	80065e4 <interrupt_WallCut+0x3dc>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80065cc:	4a6b      	ldr	r2, [pc, #428]	; (800677c <interrupt_WallCut+0x574>)
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	333c      	adds	r3, #60	; 0x3c
 80065d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d6:	ee07 3a90 	vmov	s15, r3
 80065da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80065de:	4b68      	ldr	r3, [pc, #416]	; (8006780 <interrupt_WallCut+0x578>)
 80065e0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	3301      	adds	r3, #1
 80065e8:	60bb      	str	r3, [r7, #8]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	2b13      	cmp	r3, #19
 80065ee:	dddc      	ble.n	80065aa <interrupt_WallCut+0x3a2>
					}
				}
				NoWallCountR45 = 0;
 80065f0:	4b64      	ldr	r3, [pc, #400]	; (8006784 <interrupt_WallCut+0x57c>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 80065f6:	4b64      	ldr	r3, [pc, #400]	; (8006788 <interrupt_WallCut+0x580>)
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 80065fc:	4b60      	ldr	r3, [pc, #384]	; (8006780 <interrupt_WallCut+0x578>)
 80065fe:	edd3 7a00 	vldr	s15, [r3]
 8006602:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8006790 <interrupt_WallCut+0x588>
 8006606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800660a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8006794 <interrupt_WallCut+0x58c>
 800660e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006612:	4b5b      	ldr	r3, [pc, #364]	; (8006780 <interrupt_WallCut+0x578>)
 8006614:	ed93 7a00 	vldr	s14, [r3]
 8006618:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 800661c:	4b5b      	ldr	r3, [pc, #364]	; (800678c <interrupt_WallCut+0x584>)
 800661e:	edc3 7a00 	vstr	s15, [r3]
 8006622:	e02f      	b.n	8006684 <interrupt_WallCut+0x47c>
			} else {
				NoWallCountR45++;
 8006624:	4b57      	ldr	r3, [pc, #348]	; (8006784 <interrupt_WallCut+0x57c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3301      	adds	r3, #1
 800662a:	4a56      	ldr	r2, [pc, #344]	; (8006784 <interrupt_WallCut+0x57c>)
 800662c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800662e:	4b57      	ldr	r3, [pc, #348]	; (800678c <interrupt_WallCut+0x584>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4618      	mov	r0, r3
 8006634:	f7f9 ffb0 	bl	8000598 <__aeabi_f2d>
 8006638:	4604      	mov	r4, r0
 800663a:	460d      	mov	r5, r1
 800663c:	4b4c      	ldr	r3, [pc, #304]	; (8006770 <interrupt_WallCut+0x568>)
 800663e:	ed93 7a00 	vldr	s14, [r3]
 8006642:	4b4c      	ldr	r3, [pc, #304]	; (8006774 <interrupt_WallCut+0x56c>)
 8006644:	edd3 7a00 	vldr	s15, [r3]
 8006648:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 800664c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006650:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006654:	ee16 0a90 	vmov	r0, s13
 8006658:	f7f9 ff9e 	bl	8000598 <__aeabi_f2d>
 800665c:	a340      	add	r3, pc, #256	; (adr r3, 8006760 <interrupt_WallCut+0x558>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f7f9 fff1 	bl	8000648 <__aeabi_dmul>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800666a:	4620      	mov	r0, r4
 800666c:	4629      	mov	r1, r5
 800666e:	f7f9 fe35 	bl	80002dc <__adddf3>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	4610      	mov	r0, r2
 8006678:	4619      	mov	r1, r3
 800667a:	f7fa fabd 	bl	8000bf8 <__aeabi_d2f>
 800667e:	4603      	mov	r3, r0
 8006680:	4a42      	ldr	r2, [pc, #264]	; (800678c <interrupt_WallCut+0x584>)
 8006682:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006684:	4b3c      	ldr	r3, [pc, #240]	; (8006778 <interrupt_WallCut+0x570>)
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	f113 0fef 	cmn.w	r3, #239	; 0xef
 800668c:	db5f      	blt.n	800674e <interrupt_WallCut+0x546>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 800668e:	4b42      	ldr	r3, [pc, #264]	; (8006798 <interrupt_WallCut+0x590>)
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8006696:	4b41      	ldr	r3, [pc, #260]	; (800679c <interrupt_WallCut+0x594>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3301      	adds	r3, #1
 800669c:	4a3f      	ldr	r2, [pc, #252]	; (800679c <interrupt_WallCut+0x594>)
 800669e:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 80066a0:	2000      	movs	r0, #0
 80066a2:	f000 fcdd 	bl	8007060 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 80066a6:	4b3e      	ldr	r3, [pc, #248]	; (80067a0 <interrupt_WallCut+0x598>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80066ac:	4b3d      	ldr	r3, [pc, #244]	; (80067a4 <interrupt_WallCut+0x59c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7f9 ff71 	bl	8000598 <__aeabi_f2d>
 80066b6:	4604      	mov	r4, r0
 80066b8:	460d      	mov	r5, r1
 80066ba:	4b2d      	ldr	r3, [pc, #180]	; (8006770 <interrupt_WallCut+0x568>)
 80066bc:	ed93 7a00 	vldr	s14, [r3]
 80066c0:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <interrupt_WallCut+0x56c>)
 80066c2:	edd3 7a00 	vldr	s15, [r3]
 80066c6:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80066ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80066ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80066d2:	ee16 0a90 	vmov	r0, s13
 80066d6:	f7f9 ff5f 	bl	8000598 <__aeabi_f2d>
 80066da:	a321      	add	r3, pc, #132	; (adr r3, 8006760 <interrupt_WallCut+0x558>)
 80066dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e0:	f7f9 ffb2 	bl	8000648 <__aeabi_dmul>
 80066e4:	4602      	mov	r2, r0
 80066e6:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80066e8:	4620      	mov	r0, r4
 80066ea:	4629      	mov	r1, r5
 80066ec:	f7f9 fdf6 	bl	80002dc <__adddf3>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4610      	mov	r0, r2
 80066f6:	4619      	mov	r1, r3
 80066f8:	f7fa fa7e 	bl	8000bf8 <__aeabi_d2f>
 80066fc:	4603      	mov	r3, r0
 80066fe:	4a29      	ldr	r2, [pc, #164]	; (80067a4 <interrupt_WallCut+0x59c>)
 8006700:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006702:	4b29      	ldr	r3, [pc, #164]	; (80067a8 <interrupt_WallCut+0x5a0>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b01      	cmp	r3, #1
 8006708:	f040 8131 	bne.w	800696e <interrupt_WallCut+0x766>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800670c:	4b27      	ldr	r3, [pc, #156]	; (80067ac <interrupt_WallCut+0x5a4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f7f9 ff41 	bl	8000598 <__aeabi_f2d>
 8006716:	4604      	mov	r4, r0
 8006718:	460d      	mov	r5, r1
 800671a:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <interrupt_WallCut+0x5a8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7f9 ff3a 	bl	8000598 <__aeabi_f2d>
 8006724:	a30e      	add	r3, pc, #56	; (adr r3, 8006760 <interrupt_WallCut+0x558>)
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f7f9 ff8d 	bl	8000648 <__aeabi_dmul>
 800672e:	4602      	mov	r2, r0
 8006730:	460b      	mov	r3, r1
 8006732:	4620      	mov	r0, r4
 8006734:	4629      	mov	r1, r5
 8006736:	f7f9 fdd1 	bl	80002dc <__adddf3>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	4610      	mov	r0, r2
 8006740:	4619      	mov	r1, r3
 8006742:	f7fa fa59 	bl	8000bf8 <__aeabi_d2f>
 8006746:	4603      	mov	r3, r0
 8006748:	4a18      	ldr	r2, [pc, #96]	; (80067ac <interrupt_WallCut+0x5a4>)
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	e10f      	b.n	800696e <interrupt_WallCut+0x766>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <interrupt_WallCut+0x598>)
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 80b4 	bne.w	80068c0 <interrupt_WallCut+0x6b8>
				for (int i = 0; i <= 19; i++) {
 8006758:	2300      	movs	r3, #0
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	e04a      	b.n	80067f4 <interrupt_WallCut+0x5ec>
 800675e:	bf00      	nop
 8006760:	d2f1a9fc 	.word	0xd2f1a9fc
 8006764:	3f50624d 	.word	0x3f50624d
 8006768:	200005c0 	.word	0x200005c0
 800676c:	200005d8 	.word	0x200005d8
 8006770:	20000258 	.word	0x20000258
 8006774:	2000025c 	.word	0x2000025c
 8006778:	2000045c 	.word	0x2000045c
 800677c:	200002b8 	.word	0x200002b8
 8006780:	200005fc 	.word	0x200005fc
 8006784:	200005bc 	.word	0x200005bc
 8006788:	200005ed 	.word	0x200005ed
 800678c:	200005d4 	.word	0x200005d4
 8006790:	44484000 	.word	0x44484000
 8006794:	00000000 	.word	0x00000000
 8006798:	20000600 	.word	0x20000600
 800679c:	200005c8 	.word	0x200005c8
 80067a0:	200005ee 	.word	0x200005ee
 80067a4:	200005e8 	.word	0x200005e8
 80067a8:	200005f0 	.word	0x200005f0
 80067ac:	200005e0 	.word	0x200005e0
 80067b0:	200004d8 	.word	0x200004d8
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80067b4:	4aac      	ldr	r2, [pc, #688]	; (8006a68 <interrupt_WallCut+0x860>)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	3314      	adds	r3, #20
 80067ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067be:	ee07 3a90 	vmov	s15, r3
 80067c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067c6:	4ba9      	ldr	r3, [pc, #676]	; (8006a6c <interrupt_WallCut+0x864>)
 80067c8:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80067cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80067d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067d4:	dd0b      	ble.n	80067ee <interrupt_WallCut+0x5e6>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80067d6:	4aa4      	ldr	r2, [pc, #656]	; (8006a68 <interrupt_WallCut+0x860>)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3314      	adds	r3, #20
 80067dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e0:	ee07 3a90 	vmov	s15, r3
 80067e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 80067e8:	4ba0      	ldr	r3, [pc, #640]	; (8006a6c <interrupt_WallCut+0x864>)
 80067ea:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3301      	adds	r3, #1
 80067f2:	607b      	str	r3, [r7, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2b13      	cmp	r3, #19
 80067f8:	dddc      	ble.n	80067b4 <interrupt_WallCut+0x5ac>
					}
				}
				NoWallCountL45slant = 0;
 80067fa:	4b9d      	ldr	r3, [pc, #628]	; (8006a70 <interrupt_WallCut+0x868>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 8006800:	4b9c      	ldr	r3, [pc, #624]	; (8006a74 <interrupt_WallCut+0x86c>)
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006806:	2001      	movs	r0, #1
 8006808:	f000 fc2a 	bl	8007060 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 800680c:	4b97      	ldr	r3, [pc, #604]	; (8006a6c <interrupt_WallCut+0x864>)
 800680e:	edd3 7a00 	vldr	s15, [r3]
 8006812:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006a78 <interrupt_WallCut+0x870>
 8006816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800681a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800681e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006822:	db26      	blt.n	8006872 <interrupt_WallCut+0x66a>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006824:	4b91      	ldr	r3, [pc, #580]	; (8006a6c <interrupt_WallCut+0x864>)
 8006826:	edd3 7a00 	vldr	s15, [r3]
 800682a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006a78 <interrupt_WallCut+0x870>
 800682e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006832:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8006a7c <interrupt_WallCut+0x874>
 8006836:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800683a:	4b8c      	ldr	r3, [pc, #560]	; (8006a6c <interrupt_WallCut+0x864>)
 800683c:	ed93 7a00 	vldr	s14, [r3]
 8006840:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 8006844:	4b8e      	ldr	r3, [pc, #568]	; (8006a80 <interrupt_WallCut+0x878>)
 8006846:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800684a:	4b88      	ldr	r3, [pc, #544]	; (8006a6c <interrupt_WallCut+0x864>)
 800684c:	edd3 7a00 	vldr	s15, [r3]
 8006850:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006a78 <interrupt_WallCut+0x870>
 8006854:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006858:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006a7c <interrupt_WallCut+0x874>
 800685c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006860:	4b82      	ldr	r3, [pc, #520]	; (8006a6c <interrupt_WallCut+0x864>)
 8006862:	ed93 7a00 	vldr	s14, [r3]
 8006866:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 800686a:	4b86      	ldr	r3, [pc, #536]	; (8006a84 <interrupt_WallCut+0x87c>)
 800686c:	edc3 7a00 	vstr	s15, [r3]
 8006870:	e07a      	b.n	8006968 <interrupt_WallCut+0x760>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006872:	4b7e      	ldr	r3, [pc, #504]	; (8006a6c <interrupt_WallCut+0x864>)
 8006874:	edd3 7a00 	vldr	s15, [r3]
 8006878:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006a78 <interrupt_WallCut+0x870>
 800687c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006880:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006a7c <interrupt_WallCut+0x874>
 8006884:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006888:	4b78      	ldr	r3, [pc, #480]	; (8006a6c <interrupt_WallCut+0x864>)
 800688a:	ed93 7a00 	vldr	s14, [r3]
 800688e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 8006892:	4b7b      	ldr	r3, [pc, #492]	; (8006a80 <interrupt_WallCut+0x878>)
 8006894:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006898:	4b74      	ldr	r3, [pc, #464]	; (8006a6c <interrupt_WallCut+0x864>)
 800689a:	edd3 7a00 	vldr	s15, [r3]
 800689e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8006a78 <interrupt_WallCut+0x870>
 80068a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068a6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006a7c <interrupt_WallCut+0x874>
 80068aa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80068ae:	4b6f      	ldr	r3, [pc, #444]	; (8006a6c <interrupt_WallCut+0x864>)
 80068b0:	ed93 7a00 	vldr	s14, [r3]
 80068b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80068b8:	4b72      	ldr	r3, [pc, #456]	; (8006a84 <interrupt_WallCut+0x87c>)
 80068ba:	edc3 7a00 	vstr	s15, [r3]
 80068be:	e053      	b.n	8006968 <interrupt_WallCut+0x760>
				}

			} else {
				NoWallCountL45slant++;
 80068c0:	4b6b      	ldr	r3, [pc, #428]	; (8006a70 <interrupt_WallCut+0x868>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3301      	adds	r3, #1
 80068c6:	4a6a      	ldr	r2, [pc, #424]	; (8006a70 <interrupt_WallCut+0x868>)
 80068c8:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80068ca:	4b6e      	ldr	r3, [pc, #440]	; (8006a84 <interrupt_WallCut+0x87c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7f9 fe62 	bl	8000598 <__aeabi_f2d>
 80068d4:	4604      	mov	r4, r0
 80068d6:	460d      	mov	r5, r1
 80068d8:	4b6b      	ldr	r3, [pc, #428]	; (8006a88 <interrupt_WallCut+0x880>)
 80068da:	ed93 7a00 	vldr	s14, [r3]
 80068de:	4b6b      	ldr	r3, [pc, #428]	; (8006a8c <interrupt_WallCut+0x884>)
 80068e0:	edd3 7a00 	vldr	s15, [r3]
 80068e4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 80068e8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80068ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80068f0:	ee16 0a90 	vmov	r0, s13
 80068f4:	f7f9 fe50 	bl	8000598 <__aeabi_f2d>
 80068f8:	a359      	add	r3, pc, #356	; (adr r3, 8006a60 <interrupt_WallCut+0x858>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fea3 	bl	8000648 <__aeabi_dmul>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	f7f9 fce7 	bl	80002dc <__adddf3>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4610      	mov	r0, r2
 8006914:	4619      	mov	r1, r3
 8006916:	f7fa f96f 	bl	8000bf8 <__aeabi_d2f>
 800691a:	4603      	mov	r3, r0
 800691c:	4a59      	ldr	r2, [pc, #356]	; (8006a84 <interrupt_WallCut+0x87c>)
 800691e:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006920:	4b5b      	ldr	r3, [pc, #364]	; (8006a90 <interrupt_WallCut+0x888>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d11f      	bne.n	8006968 <interrupt_WallCut+0x760>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 8006928:	4b55      	ldr	r3, [pc, #340]	; (8006a80 <interrupt_WallCut+0x878>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7f9 fe33 	bl	8000598 <__aeabi_f2d>
 8006932:	4604      	mov	r4, r0
 8006934:	460d      	mov	r5, r1
 8006936:	4b57      	ldr	r3, [pc, #348]	; (8006a94 <interrupt_WallCut+0x88c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f7f9 fe2c 	bl	8000598 <__aeabi_f2d>
 8006940:	a347      	add	r3, pc, #284	; (adr r3, 8006a60 <interrupt_WallCut+0x858>)
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	f7f9 fe7f 	bl	8000648 <__aeabi_dmul>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7f9 fcc3 	bl	80002dc <__adddf3>
 8006956:	4602      	mov	r2, r0
 8006958:	460b      	mov	r3, r1
 800695a:	4610      	mov	r0, r2
 800695c:	4619      	mov	r1, r3
 800695e:	f7fa f94b 	bl	8000bf8 <__aeabi_d2f>
 8006962:	4603      	mov	r3, r0
 8006964:	4a46      	ldr	r2, [pc, #280]	; (8006a80 <interrupt_WallCut+0x878>)
 8006966:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 8006968:	4b49      	ldr	r3, [pc, #292]	; (8006a90 <interrupt_WallCut+0x888>)
 800696a:	2201      	movs	r2, #1
 800696c:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 800696e:	4b4a      	ldr	r3, [pc, #296]	; (8006a98 <interrupt_WallCut+0x890>)
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	f113 0fef 	cmn.w	r3, #239	; 0xef
 8006976:	db6a      	blt.n	8006a4e <interrupt_WallCut+0x846>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 8006978:	4b48      	ldr	r3, [pc, #288]	; (8006a9c <interrupt_WallCut+0x894>)
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8006980:	4b47      	ldr	r3, [pc, #284]	; (8006aa0 <interrupt_WallCut+0x898>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	4a46      	ldr	r2, [pc, #280]	; (8006aa0 <interrupt_WallCut+0x898>)
 8006988:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 800698a:	2000      	movs	r0, #0
 800698c:	f000 fb56 	bl	800703c <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8006990:	4b44      	ldr	r3, [pc, #272]	; (8006aa4 <interrupt_WallCut+0x89c>)
 8006992:	2200      	movs	r2, #0
 8006994:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006996:	4b44      	ldr	r3, [pc, #272]	; (8006aa8 <interrupt_WallCut+0x8a0>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4618      	mov	r0, r3
 800699c:	f7f9 fdfc 	bl	8000598 <__aeabi_f2d>
 80069a0:	4604      	mov	r4, r0
 80069a2:	460d      	mov	r5, r1
 80069a4:	4b38      	ldr	r3, [pc, #224]	; (8006a88 <interrupt_WallCut+0x880>)
 80069a6:	ed93 7a00 	vldr	s14, [r3]
 80069aa:	4b38      	ldr	r3, [pc, #224]	; (8006a8c <interrupt_WallCut+0x884>)
 80069ac:	edd3 7a00 	vldr	s15, [r3]
 80069b0:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 80069b4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80069b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80069bc:	ee16 0a90 	vmov	r0, s13
 80069c0:	f7f9 fdea 	bl	8000598 <__aeabi_f2d>
 80069c4:	a326      	add	r3, pc, #152	; (adr r3, 8006a60 <interrupt_WallCut+0x858>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f7f9 fe3d 	bl	8000648 <__aeabi_dmul>
 80069ce:	4602      	mov	r2, r0
 80069d0:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80069d2:	4620      	mov	r0, r4
 80069d4:	4629      	mov	r1, r5
 80069d6:	f7f9 fc81 	bl	80002dc <__adddf3>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	4610      	mov	r0, r2
 80069e0:	4619      	mov	r1, r3
 80069e2:	f7fa f909 	bl	8000bf8 <__aeabi_d2f>
 80069e6:	4603      	mov	r3, r0
 80069e8:	4a2f      	ldr	r2, [pc, #188]	; (8006aa8 <interrupt_WallCut+0x8a0>)
 80069ea:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 80069ec:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <interrupt_WallCut+0x8a4>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	f040 81a8 	bne.w	8006d46 <interrupt_WallCut+0xb3e>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 80069f6:	4b2e      	ldr	r3, [pc, #184]	; (8006ab0 <interrupt_WallCut+0x8a8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7f9 fdcc 	bl	8000598 <__aeabi_f2d>
 8006a00:	4604      	mov	r4, r0
 8006a02:	460d      	mov	r5, r1
 8006a04:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <interrupt_WallCut+0x880>)
 8006a06:	ed93 7a00 	vldr	s14, [r3]
 8006a0a:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <interrupt_WallCut+0x884>)
 8006a0c:	edd3 7a00 	vldr	s15, [r3]
 8006a10:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006a14:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006a18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006a1c:	ee16 0a90 	vmov	r0, s13
 8006a20:	f7f9 fdba 	bl	8000598 <__aeabi_f2d>
 8006a24:	a30e      	add	r3, pc, #56	; (adr r3, 8006a60 <interrupt_WallCut+0x858>)
 8006a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a2a:	f7f9 fe0d 	bl	8000648 <__aeabi_dmul>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006a32:	4620      	mov	r0, r4
 8006a34:	4629      	mov	r1, r5
 8006a36:	f7f9 fc51 	bl	80002dc <__adddf3>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4619      	mov	r1, r3
 8006a42:	f7fa f8d9 	bl	8000bf8 <__aeabi_d2f>
 8006a46:	4603      	mov	r3, r0
 8006a48:	4a19      	ldr	r2, [pc, #100]	; (8006ab0 <interrupt_WallCut+0x8a8>)
 8006a4a:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 8006a4c:	e17b      	b.n	8006d46 <interrupt_WallCut+0xb3e>
			if (NoWallCountR45slant_flag == 0) {
 8006a4e:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <interrupt_WallCut+0x89c>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 80b4 	bne.w	8006bc0 <interrupt_WallCut+0x9b8>
				for (int i = 0; i <= 19; i++) {
 8006a58:	2300      	movs	r3, #0
 8006a5a:	603b      	str	r3, [r7, #0]
 8006a5c:	e04a      	b.n	8006af4 <interrupt_WallCut+0x8ec>
 8006a5e:	bf00      	nop
 8006a60:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a64:	3f50624d 	.word	0x3f50624d
 8006a68:	200002b8 	.word	0x200002b8
 8006a6c:	20000600 	.word	0x20000600
 8006a70:	200005c8 	.word	0x200005c8
 8006a74:	200005ee 	.word	0x200005ee
 8006a78:	455ac000 	.word	0x455ac000
 8006a7c:	00000000 	.word	0x00000000
 8006a80:	200005e0 	.word	0x200005e0
 8006a84:	200005e8 	.word	0x200005e8
 8006a88:	20000258 	.word	0x20000258
 8006a8c:	2000025c 	.word	0x2000025c
 8006a90:	200005f0 	.word	0x200005f0
 8006a94:	200004d8 	.word	0x200004d8
 8006a98:	2000045c 	.word	0x2000045c
 8006a9c:	20000604 	.word	0x20000604
 8006aa0:	200005c4 	.word	0x200005c4
 8006aa4:	200005ef 	.word	0x200005ef
 8006aa8:	200005e4 	.word	0x200005e4
 8006aac:	200005f1 	.word	0x200005f1
 8006ab0:	200005dc 	.word	0x200005dc
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8006ab4:	4aa8      	ldr	r2, [pc, #672]	; (8006d58 <interrupt_WallCut+0xb50>)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	333c      	adds	r3, #60	; 0x3c
 8006aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006abe:	ee07 3a90 	vmov	s15, r3
 8006ac2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ac6:	4ba5      	ldr	r3, [pc, #660]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006ac8:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 8006acc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad4:	dd0b      	ble.n	8006aee <interrupt_WallCut+0x8e6>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8006ad6:	4aa0      	ldr	r2, [pc, #640]	; (8006d58 <interrupt_WallCut+0xb50>)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	333c      	adds	r3, #60	; 0x3c
 8006adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ae0:	ee07 3a90 	vmov	s15, r3
 8006ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8006ae8:	4b9c      	ldr	r3, [pc, #624]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006aea:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	3301      	adds	r3, #1
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	2b13      	cmp	r3, #19
 8006af8:	dddc      	ble.n	8006ab4 <interrupt_WallCut+0x8ac>
				NoWallCountR45slant = 0;
 8006afa:	4b99      	ldr	r3, [pc, #612]	; (8006d60 <interrupt_WallCut+0xb58>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 8006b00:	4b98      	ldr	r3, [pc, #608]	; (8006d64 <interrupt_WallCut+0xb5c>)
 8006b02:	2201      	movs	r2, #1
 8006b04:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006b06:	2001      	movs	r0, #1
 8006b08:	f000 fa98 	bl	800703c <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006b0c:	4b93      	ldr	r3, [pc, #588]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b0e:	edd3 7a00 	vldr	s15, [r3]
 8006b12:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006d68 <interrupt_WallCut+0xb60>
 8006b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b22:	db26      	blt.n	8006b72 <interrupt_WallCut+0x96a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b24:	4b8d      	ldr	r3, [pc, #564]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b26:	edd3 7a00 	vldr	s15, [r3]
 8006b2a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8006d68 <interrupt_WallCut+0xb60>
 8006b2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b32:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8006d6c <interrupt_WallCut+0xb64>
 8006b36:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006b3a:	4b88      	ldr	r3, [pc, #544]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b3c:	ed93 7a00 	vldr	s14, [r3]
 8006b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006b44:	4b8a      	ldr	r3, [pc, #552]	; (8006d70 <interrupt_WallCut+0xb68>)
 8006b46:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b4a:	4b84      	ldr	r3, [pc, #528]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b4c:	edd3 7a00 	vldr	s15, [r3]
 8006b50:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8006d68 <interrupt_WallCut+0xb60>
 8006b54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b58:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006d6c <interrupt_WallCut+0xb64>
 8006b5c:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006b60:	4b7e      	ldr	r3, [pc, #504]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b62:	ed93 7a00 	vldr	s14, [r3]
 8006b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006b6a:	4b82      	ldr	r3, [pc, #520]	; (8006d74 <interrupt_WallCut+0xb6c>)
 8006b6c:	edc3 7a00 	vstr	s15, [r3]
 8006b70:	e085      	b.n	8006c7e <interrupt_WallCut+0xa76>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b72:	4b7a      	ldr	r3, [pc, #488]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b74:	edd3 7a00 	vldr	s15, [r3]
 8006b78:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8006d68 <interrupt_WallCut+0xb60>
 8006b7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b80:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006d6c <interrupt_WallCut+0xb64>
 8006b84:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006b88:	4b74      	ldr	r3, [pc, #464]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b8a:	ed93 7a00 	vldr	s14, [r3]
 8006b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006b92:	4b77      	ldr	r3, [pc, #476]	; (8006d70 <interrupt_WallCut+0xb68>)
 8006b94:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006b98:	4b70      	ldr	r3, [pc, #448]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006b9a:	edd3 7a00 	vldr	s15, [r3]
 8006b9e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8006d68 <interrupt_WallCut+0xb60>
 8006ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ba6:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8006d6c <interrupt_WallCut+0xb64>
 8006baa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006bae:	4b6b      	ldr	r3, [pc, #428]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006bb0:	ed93 7a00 	vldr	s14, [r3]
 8006bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006bb8:	4b6e      	ldr	r3, [pc, #440]	; (8006d74 <interrupt_WallCut+0xb6c>)
 8006bba:	edc3 7a00 	vstr	s15, [r3]
 8006bbe:	e05e      	b.n	8006c7e <interrupt_WallCut+0xa76>
				NoWallCountR45slant++;
 8006bc0:	4b67      	ldr	r3, [pc, #412]	; (8006d60 <interrupt_WallCut+0xb58>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	4a66      	ldr	r2, [pc, #408]	; (8006d60 <interrupt_WallCut+0xb58>)
 8006bc8:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006bca:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <interrupt_WallCut+0xb6c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7f9 fce2 	bl	8000598 <__aeabi_f2d>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	460d      	mov	r5, r1
 8006bd8:	4b67      	ldr	r3, [pc, #412]	; (8006d78 <interrupt_WallCut+0xb70>)
 8006bda:	ed93 7a00 	vldr	s14, [r3]
 8006bde:	4b67      	ldr	r3, [pc, #412]	; (8006d7c <interrupt_WallCut+0xb74>)
 8006be0:	edd3 7a00 	vldr	s15, [r3]
 8006be4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006be8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006bec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006bf0:	ee16 0a90 	vmov	r0, s13
 8006bf4:	f7f9 fcd0 	bl	8000598 <__aeabi_f2d>
 8006bf8:	a355      	add	r3, pc, #340	; (adr r3, 8006d50 <interrupt_WallCut+0xb48>)
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f7f9 fd23 	bl	8000648 <__aeabi_dmul>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006c06:	4620      	mov	r0, r4
 8006c08:	4629      	mov	r1, r5
 8006c0a:	f7f9 fb67 	bl	80002dc <__adddf3>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	460b      	mov	r3, r1
 8006c12:	4610      	mov	r0, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	f7f9 ffef 	bl	8000bf8 <__aeabi_d2f>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	4a55      	ldr	r2, [pc, #340]	; (8006d74 <interrupt_WallCut+0xb6c>)
 8006c1e:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006c20:	4b57      	ldr	r3, [pc, #348]	; (8006d80 <interrupt_WallCut+0xb78>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d12a      	bne.n	8006c7e <interrupt_WallCut+0xa76>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006c28:	4b51      	ldr	r3, [pc, #324]	; (8006d70 <interrupt_WallCut+0xb68>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7f9 fcb3 	bl	8000598 <__aeabi_f2d>
 8006c32:	4604      	mov	r4, r0
 8006c34:	460d      	mov	r5, r1
 8006c36:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <interrupt_WallCut+0xb70>)
 8006c38:	ed93 7a00 	vldr	s14, [r3]
 8006c3c:	4b4f      	ldr	r3, [pc, #316]	; (8006d7c <interrupt_WallCut+0xb74>)
 8006c3e:	edd3 7a00 	vldr	s15, [r3]
 8006c42:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006c46:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006c4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c4e:	ee16 0a90 	vmov	r0, s13
 8006c52:	f7f9 fca1 	bl	8000598 <__aeabi_f2d>
 8006c56:	a33e      	add	r3, pc, #248	; (adr r3, 8006d50 <interrupt_WallCut+0xb48>)
 8006c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5c:	f7f9 fcf4 	bl	8000648 <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 fb38 	bl	80002dc <__adddf3>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	f7f9 ffc0 	bl	8000bf8 <__aeabi_d2f>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	4a3d      	ldr	r2, [pc, #244]	; (8006d70 <interrupt_WallCut+0xb68>)
 8006c7c:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006c7e:	4b40      	ldr	r3, [pc, #256]	; (8006d80 <interrupt_WallCut+0xb78>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
}
 8006c84:	e05f      	b.n	8006d46 <interrupt_WallCut+0xb3e>
		NoWallCountL90 = 0;
 8006c86:	4b3f      	ldr	r3, [pc, #252]	; (8006d84 <interrupt_WallCut+0xb7c>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006c8c:	4b3e      	ldr	r3, [pc, #248]	; (8006d88 <interrupt_WallCut+0xb80>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006c92:	4b3e      	ldr	r3, [pc, #248]	; (8006d8c <interrupt_WallCut+0xb84>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006c98:	4b3d      	ldr	r3, [pc, #244]	; (8006d90 <interrupt_WallCut+0xb88>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006c9e:	4b3d      	ldr	r3, [pc, #244]	; (8006d94 <interrupt_WallCut+0xb8c>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006ca4:	4b2e      	ldr	r3, [pc, #184]	; (8006d60 <interrupt_WallCut+0xb58>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006caa:	4b3b      	ldr	r3, [pc, #236]	; (8006d98 <interrupt_WallCut+0xb90>)
 8006cac:	f04f 0200 	mov.w	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006cb2:	4b3a      	ldr	r3, [pc, #232]	; (8006d9c <interrupt_WallCut+0xb94>)
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006cba:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <interrupt_WallCut+0xb98>)
 8006cbc:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006cc0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006cc2:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <interrupt_WallCut+0xb9c>)
 8006cc4:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006cc8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006cca:	4b37      	ldr	r3, [pc, #220]	; (8006da8 <interrupt_WallCut+0xba0>)
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006cd2:	4b27      	ldr	r3, [pc, #156]	; (8006d70 <interrupt_WallCut+0xb68>)
 8006cd4:	f04f 0200 	mov.w	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006cda:	4b34      	ldr	r3, [pc, #208]	; (8006dac <interrupt_WallCut+0xba4>)
 8006cdc:	f04f 0200 	mov.w	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <interrupt_WallCut+0xb6c>)
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006cea:	4b31      	ldr	r3, [pc, #196]	; (8006db0 <interrupt_WallCut+0xba8>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006cf0:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <interrupt_WallCut+0xbac>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006cf6:	4b30      	ldr	r3, [pc, #192]	; (8006db8 <interrupt_WallCut+0xbb0>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006cfc:	4b19      	ldr	r3, [pc, #100]	; (8006d64 <interrupt_WallCut+0xb5c>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006d02:	4b2e      	ldr	r3, [pc, #184]	; (8006dbc <interrupt_WallCut+0xbb4>)
 8006d04:	2200      	movs	r2, #0
 8006d06:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	; (8006d80 <interrupt_WallCut+0xb78>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <interrupt_WallCut+0xbb8>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006d14:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <interrupt_WallCut+0xbbc>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006d1a:	4b2b      	ldr	r3, [pc, #172]	; (8006dc8 <interrupt_WallCut+0xbc0>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006d20:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <interrupt_WallCut+0xbc0>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006d26:	4b29      	ldr	r3, [pc, #164]	; (8006dcc <interrupt_WallCut+0xbc4>)
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006d2e:	4b28      	ldr	r3, [pc, #160]	; (8006dd0 <interrupt_WallCut+0xbc8>)
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006d36:	4b27      	ldr	r3, [pc, #156]	; (8006dd4 <interrupt_WallCut+0xbcc>)
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006d3e:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <interrupt_WallCut+0xb54>)
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	d2f1a9fc 	.word	0xd2f1a9fc
 8006d54:	3f50624d 	.word	0x3f50624d
 8006d58:	200002b8 	.word	0x200002b8
 8006d5c:	20000604 	.word	0x20000604
 8006d60:	200005c4 	.word	0x200005c4
 8006d64:	200005ef 	.word	0x200005ef
 8006d68:	455ac000 	.word	0x455ac000
 8006d6c:	00000000 	.word	0x00000000
 8006d70:	200005dc 	.word	0x200005dc
 8006d74:	200005e4 	.word	0x200005e4
 8006d78:	20000258 	.word	0x20000258
 8006d7c:	2000025c 	.word	0x2000025c
 8006d80:	200005f1 	.word	0x200005f1
 8006d84:	200005b8 	.word	0x200005b8
 8006d88:	200005b4 	.word	0x200005b4
 8006d8c:	200005c0 	.word	0x200005c0
 8006d90:	200005bc 	.word	0x200005bc
 8006d94:	200005c8 	.word	0x200005c8
 8006d98:	200005d0 	.word	0x200005d0
 8006d9c:	200005cc 	.word	0x200005cc
 8006da0:	200005d8 	.word	0x200005d8
 8006da4:	200005d4 	.word	0x200005d4
 8006da8:	200005e0 	.word	0x200005e0
 8006dac:	200005e8 	.word	0x200005e8
 8006db0:	200005ec 	.word	0x200005ec
 8006db4:	200005ed 	.word	0x200005ed
 8006db8:	200005ee 	.word	0x200005ee
 8006dbc:	200005f0 	.word	0x200005f0
 8006dc0:	200005f2 	.word	0x200005f2
 8006dc4:	200005f3 	.word	0x200005f3
 8006dc8:	200005f4 	.word	0x200005f4
 8006dcc:	200005f8 	.word	0x200005f8
 8006dd0:	200005fc 	.word	0x200005fc
 8006dd4:	20000600 	.word	0x20000600

08006dd8 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	461a      	mov	r2, r3
 8006de6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dee:	f013 fef5 	bl	801abdc <HAL_GPIO_WritePin>
}
 8006df2:	bf00      	nop
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
	...

08006dfc <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b082      	sub	sp, #8
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	2140      	movs	r1, #64	; 0x40
 8006e0c:	4803      	ldr	r0, [pc, #12]	; (8006e1c <pl_yellow_LED_3+0x20>)
 8006e0e:	f013 fee5 	bl	801abdc <HAL_GPIO_WritePin>
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	48000800 	.word	0x48000800

08006e20 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e32:	4803      	ldr	r0, [pc, #12]	; (8006e40 <pl_yellow_LED_6+0x20>)
 8006e34:	f013 fed2 	bl	801abdc <HAL_GPIO_WritePin>
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	48000400 	.word	0x48000400

08006e44 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	461a      	mov	r2, r3
 8006e52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e56:	4803      	ldr	r0, [pc, #12]	; (8006e64 <pl_yellow_LED_8+0x20>)
 8006e58:	f013 fec0 	bl	801abdc <HAL_GPIO_WritePin>
}
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	48000400 	.word	0x48000400

08006e68 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e76:	f013 feb1 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e84:	f013 feaa 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2140      	movs	r1, #64	; 0x40
 8006e8c:	4811      	ldr	r0, [pc, #68]	; (8006ed4 <pl_yellow_LED_off+0x6c>)
 8006e8e:	f013 fea5 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006e92:	2200      	movs	r2, #0
 8006e94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006e98:	480f      	ldr	r0, [pc, #60]	; (8006ed8 <pl_yellow_LED_off+0x70>)
 8006e9a:	f013 fe9f 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ea4:	480c      	ldr	r0, [pc, #48]	; (8006ed8 <pl_yellow_LED_off+0x70>)
 8006ea6:	f013 fe99 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006eb0:	4809      	ldr	r0, [pc, #36]	; (8006ed8 <pl_yellow_LED_off+0x70>)
 8006eb2:	f013 fe93 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ebc:	4806      	ldr	r0, [pc, #24]	; (8006ed8 <pl_yellow_LED_off+0x70>)
 8006ebe:	f013 fe8d 	bl	801abdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ec8:	4803      	ldr	r0, [pc, #12]	; (8006ed8 <pl_yellow_LED_off+0x70>)
 8006eca:	f013 fe87 	bl	801abdc <HAL_GPIO_WritePin>
}
 8006ece:	bf00      	nop
 8006ed0:	bd80      	pop	{r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	48000800 	.word	0x48000800
 8006ed8:	48000400 	.word	0x48000400

08006edc <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b084      	sub	sp, #16
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006ee6:	79fb      	ldrb	r3, [r7, #7]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006eee:	79fb      	ldrb	r3, [r7, #7]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006ef6:	79fb      	ldrb	r3, [r7, #7]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006efe:	79fb      	ldrb	r3, [r7, #7]
 8006f00:	f003 0308 	and.w	r3, r3, #8
 8006f04:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	f003 0310 	and.w	r3, r3, #16
 8006f0c:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1c:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f24:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f36:	f013 fe51 	bl	801abdc <HAL_GPIO_WritePin>
 8006f3a:	e006      	b.n	8006f4a <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f46:	f013 fe49 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006f4a:	7bbb      	ldrb	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d007      	beq.n	8006f60 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006f50:	2201      	movs	r2, #1
 8006f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f5a:	f013 fe3f 	bl	801abdc <HAL_GPIO_WritePin>
 8006f5e:	e006      	b.n	8006f6e <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006f60:	2200      	movs	r2, #0
 8006f62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f6a:	f013 fe37 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006f6e:	7b7b      	ldrb	r3, [r7, #13]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006f74:	2201      	movs	r2, #1
 8006f76:	2140      	movs	r1, #64	; 0x40
 8006f78:	482e      	ldr	r0, [pc, #184]	; (8007034 <pl_yellow_LED_count+0x158>)
 8006f7a:	f013 fe2f 	bl	801abdc <HAL_GPIO_WritePin>
 8006f7e:	e004      	b.n	8006f8a <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006f80:	2200      	movs	r2, #0
 8006f82:	2140      	movs	r1, #64	; 0x40
 8006f84:	482b      	ldr	r0, [pc, #172]	; (8007034 <pl_yellow_LED_count+0x158>)
 8006f86:	f013 fe29 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006f8a:	7b3b      	ldrb	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d006      	beq.n	8006f9e <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006f90:	2201      	movs	r2, #1
 8006f92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f96:	4828      	ldr	r0, [pc, #160]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006f98:	f013 fe20 	bl	801abdc <HAL_GPIO_WritePin>
 8006f9c:	e005      	b.n	8006faa <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006fa4:	4824      	ldr	r0, [pc, #144]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006fa6:	f013 fe19 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006faa:	7afb      	ldrb	r3, [r7, #11]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d006      	beq.n	8006fbe <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fb6:	4820      	ldr	r0, [pc, #128]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006fb8:	f013 fe10 	bl	801abdc <HAL_GPIO_WritePin>
 8006fbc:	e005      	b.n	8006fca <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fc4:	481c      	ldr	r0, [pc, #112]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006fc6:	f013 fe09 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006fca:	7abb      	ldrb	r3, [r7, #10]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d006      	beq.n	8006fde <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fd6:	4818      	ldr	r0, [pc, #96]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006fd8:	f013 fe00 	bl	801abdc <HAL_GPIO_WritePin>
 8006fdc:	e005      	b.n	8006fea <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fe4:	4814      	ldr	r0, [pc, #80]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006fe6:	f013 fdf9 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8006fea:	7a7b      	ldrb	r3, [r7, #9]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006ff6:	4810      	ldr	r0, [pc, #64]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8006ff8:	f013 fdf0 	bl	801abdc <HAL_GPIO_WritePin>
 8006ffc:	e005      	b.n	800700a <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006ffe:	2200      	movs	r2, #0
 8007000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007004:	480c      	ldr	r0, [pc, #48]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8007006:	f013 fde9 	bl	801abdc <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 800700a:	7a3b      	ldrb	r3, [r7, #8]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d006      	beq.n	800701e <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007010:	2201      	movs	r2, #1
 8007012:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007016:	4808      	ldr	r0, [pc, #32]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8007018:	f013 fde0 	bl	801abdc <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 800701c:	e005      	b.n	800702a <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 800701e:	2200      	movs	r2, #0
 8007020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007024:	4804      	ldr	r0, [pc, #16]	; (8007038 <pl_yellow_LED_count+0x15c>)
 8007026:	f013 fdd9 	bl	801abdc <HAL_GPIO_WritePin>
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	48000800 	.word	0x48000800
 8007038:	48000400 	.word	0x48000400

0800703c <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	461a      	mov	r2, r3
 800704a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800704e:	4803      	ldr	r0, [pc, #12]	; (800705c <pl_r_blue_LED+0x20>)
 8007050:	f013 fdc4 	bl	801abdc <HAL_GPIO_WritePin>
}
 8007054:	bf00      	nop
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	48000800 	.word	0x48000800

08007060 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	461a      	mov	r2, r3
 800706e:	2104      	movs	r1, #4
 8007070:	4803      	ldr	r0, [pc, #12]	; (8007080 <pl_l_blue_LED+0x20>)
 8007072:	f013 fdb3 	bl	801abdc <HAL_GPIO_WritePin>
}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	48000400 	.word	0x48000400

08007084 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007084:	b580      	push	{r7, lr}
 8007086:	b088      	sub	sp, #32
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	460a      	mov	r2, r1
 800708e:	80fb      	strh	r3, [r7, #6]
 8007090:	4613      	mov	r3, r2
 8007092:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007094:	2200      	movs	r2, #0
 8007096:	2110      	movs	r1, #16
 8007098:	4833      	ldr	r0, [pc, #204]	; (8007168 <encoder_read_byte_R+0xe4>)
 800709a:	f013 fd9f 	bl	801abdc <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800709e:	88fb      	ldrh	r3, [r7, #6]
 80070a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070a4:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80070aa:	2300      	movs	r3, #0
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	e00d      	b.n	80070cc <encoder_read_byte_R+0x48>
 80070b0:	88fa      	ldrh	r2, [r7, #6]
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	fa42 f303 	asr.w	r3, r2, r3
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	8bfb      	ldrh	r3, [r7, #30]
 80070c2:	4413      	add	r3, r2
 80070c4:	83fb      	strh	r3, [r7, #30]
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	3301      	adds	r3, #1
 80070ca:	61bb      	str	r3, [r7, #24]
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	2b0e      	cmp	r3, #14
 80070d0:	ddee      	ble.n	80070b0 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 80070d2:	8bfb      	ldrh	r3, [r7, #30]
 80070d4:	03db      	lsls	r3, r3, #15
 80070d6:	b21a      	sxth	r2, r3
 80070d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070dc:	4313      	orrs	r3, r2
 80070de:	b21b      	sxth	r3, r3
 80070e0:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80070e2:	88fb      	ldrh	r3, [r7, #6]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80070ec:	88fb      	ldrh	r3, [r7, #6]
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80070f2:	f107 0110 	add.w	r1, r7, #16
 80070f6:	2364      	movs	r3, #100	; 0x64
 80070f8:	2202      	movs	r2, #2
 80070fa:	481c      	ldr	r0, [pc, #112]	; (800716c <encoder_read_byte_R+0xe8>)
 80070fc:	f014 fe51 	bl	801bda2 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007100:	2201      	movs	r2, #1
 8007102:	2110      	movs	r1, #16
 8007104:	4818      	ldr	r0, [pc, #96]	; (8007168 <encoder_read_byte_R+0xe4>)
 8007106:	f013 fd69 	bl	801abdc <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
 800710e:	e002      	b.n	8007116 <encoder_read_byte_R+0x92>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3301      	adds	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b95      	cmp	r3, #149	; 0x95
 800711a:	ddf9      	ble.n	8007110 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800711c:	2200      	movs	r2, #0
 800711e:	2110      	movs	r1, #16
 8007120:	4811      	ldr	r0, [pc, #68]	; (8007168 <encoder_read_byte_R+0xe4>)
 8007122:	f013 fd5b 	bl	801abdc <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007126:	88bb      	ldrh	r3, [r7, #4]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	b29b      	uxth	r3, r3
 800712c:	b2db      	uxtb	r3, r3
 800712e:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007130:	88bb      	ldrh	r3, [r7, #4]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007136:	f107 010c 	add.w	r1, r7, #12
 800713a:	2364      	movs	r3, #100	; 0x64
 800713c:	2202      	movs	r2, #2
 800713e:	480b      	ldr	r0, [pc, #44]	; (800716c <encoder_read_byte_R+0xe8>)
 8007140:	f014 ff9d 	bl	801c07e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007144:	7b3b      	ldrb	r3, [r7, #12]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	b21a      	sxth	r2, r3
 800714a:	7b7b      	ldrb	r3, [r7, #13]
 800714c:	b21b      	sxth	r3, r3
 800714e:	4313      	orrs	r3, r2
 8007150:	b21b      	sxth	r3, r3
 8007152:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007154:	2201      	movs	r2, #1
 8007156:	2110      	movs	r1, #16
 8007158:	4803      	ldr	r0, [pc, #12]	; (8007168 <encoder_read_byte_R+0xe4>)
 800715a:	f013 fd3f 	bl	801abdc <HAL_GPIO_WritePin>

	return data;
 800715e:	88bb      	ldrh	r3, [r7, #4]

}
 8007160:	4618      	mov	r0, r3
 8007162:	3720      	adds	r7, #32
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	48000400 	.word	0x48000400
 800716c:	2000d9e0 	.word	0x2000d9e0

08007170 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007170:	b580      	push	{r7, lr}
 8007172:	b088      	sub	sp, #32
 8007174:	af00      	add	r7, sp, #0
 8007176:	4603      	mov	r3, r0
 8007178:	460a      	mov	r2, r1
 800717a:	80fb      	strh	r3, [r7, #6]
 800717c:	4613      	mov	r3, r2
 800717e:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007186:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800718a:	f013 fd27 	bl	801abdc <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 800718e:	88fb      	ldrh	r3, [r7, #6]
 8007190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007194:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007196:	2300      	movs	r3, #0
 8007198:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 800719a:	2300      	movs	r3, #0
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	e00d      	b.n	80071bc <encoder_read_byte_L+0x4c>
 80071a0:	88fa      	ldrh	r2, [r7, #6]
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	fa42 f303 	asr.w	r3, r2, r3
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	8bfb      	ldrh	r3, [r7, #30]
 80071b2:	4413      	add	r3, r2
 80071b4:	83fb      	strh	r3, [r7, #30]
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	3301      	adds	r3, #1
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	2b0e      	cmp	r3, #14
 80071c0:	ddee      	ble.n	80071a0 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 80071c2:	8bfb      	ldrh	r3, [r7, #30]
 80071c4:	03db      	lsls	r3, r3, #15
 80071c6:	b21a      	sxth	r2, r3
 80071c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	b21b      	sxth	r3, r3
 80071d0:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 80071dc:	88fb      	ldrh	r3, [r7, #6]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 80071e2:	f107 0110 	add.w	r1, r7, #16
 80071e6:	2364      	movs	r3, #100	; 0x64
 80071e8:	2202      	movs	r2, #2
 80071ea:	481e      	ldr	r0, [pc, #120]	; (8007264 <encoder_read_byte_L+0xf4>)
 80071ec:	f014 fdd9 	bl	801bda2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80071f0:	2201      	movs	r2, #1
 80071f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071fa:	f013 fcef 	bl	801abdc <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e002      	b.n	800720a <encoder_read_byte_L+0x9a>
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3301      	adds	r3, #1
 8007208:	617b      	str	r3, [r7, #20]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b95      	cmp	r3, #149	; 0x95
 800720e:	ddf9      	ble.n	8007204 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007210:	2200      	movs	r2, #0
 8007212:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800721a:	f013 fcdf 	bl	801abdc <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 800721e:	88bb      	ldrh	r3, [r7, #4]
 8007220:	0a1b      	lsrs	r3, r3, #8
 8007222:	b29b      	uxth	r3, r3
 8007224:	b2db      	uxtb	r3, r3
 8007226:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007228:	88bb      	ldrh	r3, [r7, #4]
 800722a:	b2db      	uxtb	r3, r3
 800722c:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800722e:	f107 010c 	add.w	r1, r7, #12
 8007232:	2364      	movs	r3, #100	; 0x64
 8007234:	2202      	movs	r2, #2
 8007236:	480b      	ldr	r0, [pc, #44]	; (8007264 <encoder_read_byte_L+0xf4>)
 8007238:	f014 ff21 	bl	801c07e <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 800723c:	7b3b      	ldrb	r3, [r7, #12]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	b21a      	sxth	r2, r3
 8007242:	7b7b      	ldrb	r3, [r7, #13]
 8007244:	b21b      	sxth	r3, r3
 8007246:	4313      	orrs	r3, r2
 8007248:	b21b      	sxth	r3, r3
 800724a:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800724c:	2201      	movs	r2, #1
 800724e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007256:	f013 fcc1 	bl	801abdc <HAL_GPIO_WritePin>

	return data;
 800725a:	88bb      	ldrh	r3, [r7, #4]

}
 800725c:	4618      	mov	r0, r3
 800725e:	3720      	adds	r7, #32
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	2000d9e0 	.word	0x2000d9e0

08007268 <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 800726c:	2100      	movs	r1, #0
 800726e:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007272:	f7ff ff07 	bl	8007084 <encoder_read_byte_R>
 8007276:	4603      	mov	r3, r0
 8007278:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800727c:	ee07 3a90 	vmov	s15, r3
 8007280:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007284:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80072cc <AS5047_DataUpdate+0x64>
 8007288:	ee27 7a87 	vmul.f32	s14, s15, s14
 800728c:	eddf 6a10 	vldr	s13, [pc, #64]	; 80072d0 <AS5047_DataUpdate+0x68>
 8007290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007294:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <AS5047_DataUpdate+0x6c>)
 8007296:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 800729a:	2100      	movs	r1, #0
 800729c:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80072a0:	f7ff ff66 	bl	8007170 <encoder_read_byte_L>
 80072a4:	4603      	mov	r3, r0
 80072a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80072aa:	ee07 3a90 	vmov	s15, r3
 80072ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80072cc <AS5047_DataUpdate+0x64>
 80072b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80072ba:	eddf 6a05 	vldr	s13, [pc, #20]	; 80072d0 <AS5047_DataUpdate+0x68>
 80072be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <AS5047_DataUpdate+0x70>)
 80072c4:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 80072c8:	bf00      	nop
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	43b40000 	.word	0x43b40000
 80072d0:	46800000 	.word	0x46800000
 80072d4:	200006d8 	.word	0x200006d8
 80072d8:	200006dc 	.word	0x200006dc

080072dc <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
		  record_out();
 80072e0:	f000 f91a 	bl	8007518 <record_out>
		  maze_display();
 80072e4:	f00d f828 	bl	8014338 <maze_display>
		  flash_record_init();
 80072e8:	f000 f9c2 	bl	8007670 <flash_record_init>
		  record_in();
 80072ec:	f000 f858 	bl	80073a0 <record_in>
}
 80072f0:	bf00      	nop
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <eraseFlash>:


void eraseFlash( void )
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b086      	sub	sp, #24
 80072f8:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 80072fa:	2300      	movs	r3, #0
 80072fc:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 80072fe:	2301      	movs	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007302:	23fe      	movs	r3, #254	; 0xfe
 8007304:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007306:	2301      	movs	r3, #1
 8007308:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 800730a:	2300      	movs	r3, #0
 800730c:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 800730e:	1d3a      	adds	r2, r7, #4
 8007310:	f107 0308 	add.w	r3, r7, #8
 8007314:	4611      	mov	r1, r2
 8007316:	4618      	mov	r0, r3
 8007318:	f013 f9b8 	bl	801a68c <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 800731c:	bf00      	nop
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007324:	b5b0      	push	{r4, r5, r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	60f8      	str	r0, [r7, #12]
 800732c:	60b9      	str	r1, [r7, #8]
 800732e:	607a      	str	r2, [r7, #4]
 8007330:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007332:	f013 f8bf 	bl	801a4b4 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d101      	bne.n	8007340 <writeFlash+0x1c>
 800733c:	f7ff ffda 	bl	80072f4 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	e00f      	b.n	8007366 <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	17da      	asrs	r2, r3, #31
 800734a:	461c      	mov	r4, r3
 800734c:	4615      	mov	r5, r2
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	6979      	ldr	r1, [r7, #20]
 8007354:	2000      	movs	r0, #0
 8007356:	f013 f857 	bl	801a408 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	3320      	adds	r3, #32
 800735e:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	3308      	adds	r3, #8
 8007364:	617b      	str	r3, [r7, #20]
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	429a      	cmp	r2, r3
 8007370:	d3e9      	bcc.n	8007346 <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007372:	f013 f8c1 	bl	801a4f8 <HAL_FLASH_Lock>

}
 8007376:	bf00      	nop
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bdb0      	pop	{r4, r5, r7, pc}

0800737e <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4619      	mov	r1, r3
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f017 fd39 	bl	801ee08 <memcpy>

}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <record_in>:


void record_in(void) {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
	int t = 0;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80073aa:	4b58      	ldr	r3, [pc, #352]	; (800750c <record_in+0x16c>)
 80073ac:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80073ae:	e017      	b.n	80073e0 <record_in+0x40>
		record.row[t] = wall.row[t];
 80073b0:	4a57      	ldr	r2, [pc, #348]	; (8007510 <record_in+0x170>)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80073b8:	4a56      	ldr	r2, [pc, #344]	; (8007514 <record_in+0x174>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 80073c0:	4a53      	ldr	r2, [pc, #332]	; (8007510 <record_in+0x170>)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	330c      	adds	r3, #12
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	88d9      	ldrh	r1, [r3, #6]
 80073cc:	4a51      	ldr	r2, [pc, #324]	; (8007514 <record_in+0x174>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	330c      	adds	r3, #12
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	4413      	add	r3, r2
 80073d6:	460a      	mov	r2, r1
 80073d8:	80da      	strh	r2, [r3, #6]
		t++;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3301      	adds	r3, #1
 80073de:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b0e      	cmp	r3, #14
 80073e4:	dde4      	ble.n	80073b0 <record_in+0x10>
	}
	t = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073ea:	e01c      	b.n	8007426 <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 80073ec:	4a48      	ldr	r2, [pc, #288]	; (8007510 <record_in+0x170>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	331c      	adds	r3, #28
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4413      	add	r3, r2
 80073f6:	8899      	ldrh	r1, [r3, #4]
 80073f8:	4a46      	ldr	r2, [pc, #280]	; (8007514 <record_in+0x174>)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	331c      	adds	r3, #28
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	460a      	mov	r2, r1
 8007404:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 8007406:	4a42      	ldr	r2, [pc, #264]	; (8007510 <record_in+0x170>)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	332c      	adds	r3, #44	; 0x2c
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	4413      	add	r3, r2
 8007410:	8859      	ldrh	r1, [r3, #2]
 8007412:	4a40      	ldr	r2, [pc, #256]	; (8007514 <record_in+0x174>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	332c      	adds	r3, #44	; 0x2c
 8007418:	005b      	lsls	r3, r3, #1
 800741a:	4413      	add	r3, r2
 800741c:	460a      	mov	r2, r1
 800741e:	805a      	strh	r2, [r3, #2]
		t++;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	3301      	adds	r3, #1
 8007424:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b0e      	cmp	r3, #14
 800742a:	dddf      	ble.n	80073ec <record_in+0x4c>
	}
	t = 0;
 800742c:	2300      	movs	r3, #0
 800742e:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007430:	4b38      	ldr	r3, [pc, #224]	; (8007514 <record_in+0x174>)
 8007432:	881b      	ldrh	r3, [r3, #0]
 8007434:	4619      	mov	r1, r3
 8007436:	2301      	movs	r3, #1
 8007438:	2201      	movs	r2, #1
 800743a:	6838      	ldr	r0, [r7, #0]
 800743c:	f7ff ff72 	bl	8007324 <writeFlash>
	address+=16;
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	3310      	adds	r3, #16
 8007444:	603b      	str	r3, [r7, #0]
	t=1;
 8007446:	2301      	movs	r3, #1
 8007448:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800744a:	e00f      	b.n	800746c <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 800744c:	4a31      	ldr	r2, [pc, #196]	; (8007514 <record_in+0x174>)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007454:	4619      	mov	r1, r3
 8007456:	2300      	movs	r3, #0
 8007458:	2201      	movs	r2, #1
 800745a:	6838      	ldr	r0, [r7, #0]
 800745c:	f7ff ff62 	bl	8007324 <writeFlash>
	address+=16;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	3310      	adds	r3, #16
 8007464:	603b      	str	r3, [r7, #0]
	t++;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	3301      	adds	r3, #1
 800746a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b0e      	cmp	r3, #14
 8007470:	ddec      	ble.n	800744c <record_in+0xac>
	}

	t=0;
 8007472:	2300      	movs	r3, #0
 8007474:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007476:	e011      	b.n	800749c <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 8007478:	4a26      	ldr	r2, [pc, #152]	; (8007514 <record_in+0x174>)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	330c      	adds	r3, #12
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	4413      	add	r3, r2
 8007482:	88db      	ldrh	r3, [r3, #6]
 8007484:	4619      	mov	r1, r3
 8007486:	2300      	movs	r3, #0
 8007488:	2201      	movs	r2, #1
 800748a:	6838      	ldr	r0, [r7, #0]
 800748c:	f7ff ff4a 	bl	8007324 <writeFlash>
	address+=16;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	3310      	adds	r3, #16
 8007494:	603b      	str	r3, [r7, #0]
	t++;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	3301      	adds	r3, #1
 800749a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b0e      	cmp	r3, #14
 80074a0:	ddea      	ble.n	8007478 <record_in+0xd8>
	}

	t=0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074a6:	e011      	b.n	80074cc <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80074a8:	4a1a      	ldr	r2, [pc, #104]	; (8007514 <record_in+0x174>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	331c      	adds	r3, #28
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	4413      	add	r3, r2
 80074b2:	889b      	ldrh	r3, [r3, #4]
 80074b4:	4619      	mov	r1, r3
 80074b6:	2300      	movs	r3, #0
 80074b8:	2201      	movs	r2, #1
 80074ba:	6838      	ldr	r0, [r7, #0]
 80074bc:	f7ff ff32 	bl	8007324 <writeFlash>
	address+=16;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	3310      	adds	r3, #16
 80074c4:	603b      	str	r3, [r7, #0]
	t++;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3301      	adds	r3, #1
 80074ca:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b0e      	cmp	r3, #14
 80074d0:	ddea      	ble.n	80074a8 <record_in+0x108>
	}

	t=0;
 80074d2:	2300      	movs	r3, #0
 80074d4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074d6:	e011      	b.n	80074fc <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 80074d8:	4a0e      	ldr	r2, [pc, #56]	; (8007514 <record_in+0x174>)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	332c      	adds	r3, #44	; 0x2c
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	4413      	add	r3, r2
 80074e2:	885b      	ldrh	r3, [r3, #2]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2300      	movs	r3, #0
 80074e8:	2201      	movs	r2, #1
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f7ff ff1a 	bl	8007324 <writeFlash>
	address+=16;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	3310      	adds	r3, #16
 80074f4:	603b      	str	r3, [r7, #0]
	t++;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3301      	adds	r3, #1
 80074fa:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b0e      	cmp	r3, #14
 8007500:	ddea      	ble.n	80074d8 <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	0807f000 	.word	0x0807f000
 8007510:	20000c3c 	.word	0x20000c3c
 8007514:	20000cb4 	.word	0x20000cb4

08007518 <record_out>:


void record_out(void) {
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 800751e:	2300      	movs	r3, #0
 8007520:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007522:	4b50      	ldr	r3, [pc, #320]	; (8007664 <record_out+0x14c>)
 8007524:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 8007526:	e00e      	b.n	8007546 <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	005b      	lsls	r3, r3, #1
 800752c:	4a4e      	ldr	r2, [pc, #312]	; (8007668 <record_out+0x150>)
 800752e:	4413      	add	r3, r2
 8007530:	2202      	movs	r2, #2
 8007532:	4619      	mov	r1, r3
 8007534:	6838      	ldr	r0, [r7, #0]
 8007536:	f7ff ff22 	bl	800737e <loadFlash>
	address+=16;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	3310      	adds	r3, #16
 800753e:	603b      	str	r3, [r7, #0]
	t++;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3301      	adds	r3, #1
 8007544:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2b0e      	cmp	r3, #14
 800754a:	dded      	ble.n	8007528 <record_out+0x10>
	}

	t=0;
 800754c:	2300      	movs	r3, #0
 800754e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007550:	e010      	b.n	8007574 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	330c      	adds	r3, #12
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	4a43      	ldr	r2, [pc, #268]	; (8007668 <record_out+0x150>)
 800755a:	4413      	add	r3, r2
 800755c:	3306      	adds	r3, #6
 800755e:	2202      	movs	r2, #2
 8007560:	4619      	mov	r1, r3
 8007562:	6838      	ldr	r0, [r7, #0]
 8007564:	f7ff ff0b 	bl	800737e <loadFlash>
	address+=16;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	3310      	adds	r3, #16
 800756c:	603b      	str	r3, [r7, #0]
	t++;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3301      	adds	r3, #1
 8007572:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b0e      	cmp	r3, #14
 8007578:	ddeb      	ble.n	8007552 <record_out+0x3a>
	}

	t=0;
 800757a:	2300      	movs	r3, #0
 800757c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800757e:	e010      	b.n	80075a2 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	331c      	adds	r3, #28
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4a38      	ldr	r2, [pc, #224]	; (8007668 <record_out+0x150>)
 8007588:	4413      	add	r3, r2
 800758a:	3304      	adds	r3, #4
 800758c:	2202      	movs	r2, #2
 800758e:	4619      	mov	r1, r3
 8007590:	6838      	ldr	r0, [r7, #0]
 8007592:	f7ff fef4 	bl	800737e <loadFlash>
		address+=16;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	3310      	adds	r3, #16
 800759a:	603b      	str	r3, [r7, #0]
		t++;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3301      	adds	r3, #1
 80075a0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b0e      	cmp	r3, #14
 80075a6:	ddeb      	ble.n	8007580 <record_out+0x68>
	}

	t=0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075ac:	e010      	b.n	80075d0 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	332c      	adds	r3, #44	; 0x2c
 80075b2:	005b      	lsls	r3, r3, #1
 80075b4:	4a2c      	ldr	r2, [pc, #176]	; (8007668 <record_out+0x150>)
 80075b6:	4413      	add	r3, r2
 80075b8:	3302      	adds	r3, #2
 80075ba:	2202      	movs	r2, #2
 80075bc:	4619      	mov	r1, r3
 80075be:	6838      	ldr	r0, [r7, #0]
 80075c0:	f7ff fedd 	bl	800737e <loadFlash>
		address+=16;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	3310      	adds	r3, #16
 80075c8:	603b      	str	r3, [r7, #0]
		t++;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3301      	adds	r3, #1
 80075ce:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b0e      	cmp	r3, #14
 80075d4:	ddeb      	ble.n	80075ae <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075da:	e017      	b.n	800760c <record_out+0xf4>
		wall.row[t] = record.row[t];
 80075dc:	4a22      	ldr	r2, [pc, #136]	; (8007668 <record_out+0x150>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80075e4:	4a21      	ldr	r2, [pc, #132]	; (800766c <record_out+0x154>)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80075ec:	4a1e      	ldr	r2, [pc, #120]	; (8007668 <record_out+0x150>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	330c      	adds	r3, #12
 80075f2:	005b      	lsls	r3, r3, #1
 80075f4:	4413      	add	r3, r2
 80075f6:	88d9      	ldrh	r1, [r3, #6]
 80075f8:	4a1c      	ldr	r2, [pc, #112]	; (800766c <record_out+0x154>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	330c      	adds	r3, #12
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	4413      	add	r3, r2
 8007602:	460a      	mov	r2, r1
 8007604:	80da      	strh	r2, [r3, #6]
		t++;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3301      	adds	r3, #1
 800760a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b0e      	cmp	r3, #14
 8007610:	dde4      	ble.n	80075dc <record_out+0xc4>
	}
	t = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007616:	e01c      	b.n	8007652 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 8007618:	4a13      	ldr	r2, [pc, #76]	; (8007668 <record_out+0x150>)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	331c      	adds	r3, #28
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	8899      	ldrh	r1, [r3, #4]
 8007624:	4a11      	ldr	r2, [pc, #68]	; (800766c <record_out+0x154>)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	331c      	adds	r3, #28
 800762a:	005b      	lsls	r3, r3, #1
 800762c:	4413      	add	r3, r2
 800762e:	460a      	mov	r2, r1
 8007630:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 8007632:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <record_out+0x150>)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	332c      	adds	r3, #44	; 0x2c
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	4413      	add	r3, r2
 800763c:	8859      	ldrh	r1, [r3, #2]
 800763e:	4a0b      	ldr	r2, [pc, #44]	; (800766c <record_out+0x154>)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	332c      	adds	r3, #44	; 0x2c
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	460a      	mov	r2, r1
 800764a:	805a      	strh	r2, [r3, #2]
		t++;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	3301      	adds	r3, #1
 8007650:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b0e      	cmp	r3, #14
 8007656:	dddf      	ble.n	8007618 <record_out+0x100>
	}

	t = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	607b      	str	r3, [r7, #4]

}
 800765c:	bf00      	nop
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	0807f000 	.word	0x0807f000
 8007668:	20000cb4 	.word	0x20000cb4
 800766c:	20000c3c 	.word	0x20000c3c

08007670 <flash_record_init>:

void flash_record_init(void){
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
	int t = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800767a:	e013      	b.n	80076a4 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 800767c:	4a1e      	ldr	r2, [pc, #120]	; (80076f8 <flash_record_init+0x88>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f240 11e3 	movw	r1, #483	; 0x1e3
 8007684:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	b29b      	uxth	r3, r3
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	b299      	uxth	r1, r3
 8007690:	4a19      	ldr	r2, [pc, #100]	; (80076f8 <flash_record_init+0x88>)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	330c      	adds	r3, #12
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	4413      	add	r3, r2
 800769a:	460a      	mov	r2, r1
 800769c:	80da      	strh	r2, [r3, #6]
		t++;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3301      	adds	r3, #1
 80076a2:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b0e      	cmp	r3, #14
 80076a8:	dde8      	ble.n	800767c <flash_record_init+0xc>
	}
	t = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076ae:	e018      	b.n	80076e2 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	b299      	uxth	r1, r3
 80076b8:	4a0f      	ldr	r2, [pc, #60]	; (80076f8 <flash_record_init+0x88>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	331c      	adds	r3, #28
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	460a      	mov	r2, r1
 80076c4:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	b299      	uxth	r1, r3
 80076ce:	4a0a      	ldr	r2, [pc, #40]	; (80076f8 <flash_record_init+0x88>)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	332c      	adds	r3, #44	; 0x2c
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	4413      	add	r3, r2
 80076d8:	460a      	mov	r2, r1
 80076da:	805a      	strh	r2, [r3, #2]
		t++;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3301      	adds	r3, #1
 80076e0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b0e      	cmp	r3, #14
 80076e6:	dde3      	ble.n	80076b0 <flash_record_init+0x40>
	}

}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	20000c3c 	.word	0x20000c3c

080076fc <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	4603      	mov	r3, r0
 8007704:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007706:	2200      	movs	r2, #0
 8007708:	2110      	movs	r1, #16
 800770a:	4810      	ldr	r0, [pc, #64]	; (800774c <gyro_read_byte+0x50>)
 800770c:	f013 fa66 	bl	801abdc <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007710:	79fb      	ldrb	r3, [r7, #7]
 8007712:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007716:	b2db      	uxtb	r3, r3
 8007718:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800771a:	f107 010f 	add.w	r1, r7, #15
 800771e:	2364      	movs	r3, #100	; 0x64
 8007720:	2201      	movs	r2, #1
 8007722:	480b      	ldr	r0, [pc, #44]	; (8007750 <gyro_read_byte+0x54>)
 8007724:	f014 fb3d 	bl	801bda2 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8007728:	f107 010e 	add.w	r1, r7, #14
 800772c:	2364      	movs	r3, #100	; 0x64
 800772e:	2201      	movs	r2, #1
 8007730:	4807      	ldr	r0, [pc, #28]	; (8007750 <gyro_read_byte+0x54>)
 8007732:	f014 fca4 	bl	801c07e <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007736:	2201      	movs	r2, #1
 8007738:	2110      	movs	r1, #16
 800773a:	4804      	ldr	r0, [pc, #16]	; (800774c <gyro_read_byte+0x50>)
 800773c:	f013 fa4e 	bl	801abdc <HAL_GPIO_WritePin>

	return val;
 8007740:	7bbb      	ldrb	r3, [r7, #14]

}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	48000800 	.word	0x48000800
 8007750:	2000d97c 	.word	0x2000d97c

08007754 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	460a      	mov	r2, r1
 800775e:	71fb      	strb	r3, [r7, #7]
 8007760:	4613      	mov	r3, r2
 8007762:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8007764:	79fb      	ldrb	r3, [r7, #7]
 8007766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800776a:	b2db      	uxtb	r3, r3
 800776c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800776e:	2200      	movs	r2, #0
 8007770:	2110      	movs	r1, #16
 8007772:	480c      	ldr	r0, [pc, #48]	; (80077a4 <gyro_write_byte+0x50>)
 8007774:	f013 fa32 	bl	801abdc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8007778:	f107 010f 	add.w	r1, r7, #15
 800777c:	2364      	movs	r3, #100	; 0x64
 800777e:	2201      	movs	r2, #1
 8007780:	4809      	ldr	r0, [pc, #36]	; (80077a8 <gyro_write_byte+0x54>)
 8007782:	f014 fb0e 	bl	801bda2 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8007786:	1db9      	adds	r1, r7, #6
 8007788:	2364      	movs	r3, #100	; 0x64
 800778a:	2201      	movs	r2, #1
 800778c:	4806      	ldr	r0, [pc, #24]	; (80077a8 <gyro_write_byte+0x54>)
 800778e:	f014 fb08 	bl	801bda2 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8007792:	2201      	movs	r2, #1
 8007794:	2110      	movs	r1, #16
 8007796:	4803      	ldr	r0, [pc, #12]	; (80077a4 <gyro_write_byte+0x50>)
 8007798:	f013 fa20 	bl	801abdc <HAL_GPIO_WritePin>

}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	48000800 	.word	0x48000800
 80077a8:	2000d97c 	.word	0x2000d97c

080077ac <pl_gyro_init>:

void pl_gyro_init(void)

{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80077b6:	2075      	movs	r0, #117	; 0x75
 80077b8:	f7ff ffa0 	bl	80076fc <gyro_read_byte>
 80077bc:	4603      	mov	r3, r0
 80077be:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	4619      	mov	r1, r3
 80077c4:	481b      	ldr	r0, [pc, #108]	; (8007834 <pl_gyro_init+0x88>)
 80077c6:	f017 ff9f 	bl	801f708 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	2b98      	cmp	r3, #152	; 0x98
 80077ce:	d00e      	beq.n	80077ee <pl_gyro_init+0x42>

		HAL_Delay(100);
 80077d0:	2064      	movs	r0, #100	; 0x64
 80077d2:	f010 f847 	bl	8017864 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 80077d6:	2075      	movs	r0, #117	; 0x75
 80077d8:	f7ff ff90 	bl	80076fc <gyro_read_byte>
 80077dc:	4603      	mov	r3, r0
 80077de:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	2b98      	cmp	r3, #152	; 0x98
 80077e4:	d003      	beq.n	80077ee <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 80077e6:	4814      	ldr	r0, [pc, #80]	; (8007838 <pl_gyro_init+0x8c>)
 80077e8:	f017 ff8e 	bl	801f708 <iprintf>
 80077ec:	e7fb      	b.n	80077e6 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 80077ee:	2100      	movs	r1, #0
 80077f0:	206b      	movs	r0, #107	; 0x6b
 80077f2:	f7ff ffaf 	bl	8007754 <gyro_write_byte>

	HAL_Delay(50);
 80077f6:	2032      	movs	r0, #50	; 0x32
 80077f8:	f010 f834 	bl	8017864 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 80077fc:	2100      	movs	r1, #0
 80077fe:	206c      	movs	r0, #108	; 0x6c
 8007800:	f7ff ffa8 	bl	8007754 <gyro_write_byte>

	HAL_Delay(50);
 8007804:	2032      	movs	r0, #50	; 0x32
 8007806:	f010 f82d 	bl	8017864 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800780a:	2118      	movs	r1, #24
 800780c:	201b      	movs	r0, #27
 800780e:	f7ff ffa1 	bl	8007754 <gyro_write_byte>

	HAL_Delay(50);
 8007812:	2032      	movs	r0, #50	; 0x32
 8007814:	f010 f826 	bl	8017864 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8007818:	2118      	movs	r1, #24
 800781a:	201c      	movs	r0, #28
 800781c:	f7ff ff9a 	bl	8007754 <gyro_write_byte>

	HAL_Delay(50);
 8007820:	2032      	movs	r0, #50	; 0x32
 8007822:	f010 f81f 	bl	8017864 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8007826:	4b05      	ldr	r3, [pc, #20]	; (800783c <pl_gyro_init+0x90>)
 8007828:	2201      	movs	r2, #1
 800782a:	701a      	strb	r2, [r3, #0]

}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	08021ea0 	.word	0x08021ea0
 8007838:	08021eb4 	.word	0x08021eb4
 800783c:	200006e0 	.word	0x200006e0

08007840 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007840:	b590      	push	{r4, r7, lr}
 8007842:	b085      	sub	sp, #20
 8007844:	af00      	add	r7, sp, #0
 8007846:	4603      	mov	r3, r0
 8007848:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800784a:	79fb      	ldrb	r3, [r7, #7]
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff ff55 	bl	80076fc <gyro_read_byte>
 8007852:	4603      	mov	r3, r0
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	3301      	adds	r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	4618      	mov	r0, r3
 8007860:	f7ff ff4c 	bl	80076fc <gyro_read_byte>
 8007864:	4603      	mov	r3, r0
 8007866:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007868:	4323      	orrs	r3, r4
 800786a:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 800786c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007870:	ee07 3a90 	vmov	s15, r3
 8007874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007878:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007894 <ICM20602_GYRO_READ+0x54>
 800787c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007880:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	ee07 3a90 	vmov	s15, r3

}
 800788a:	eeb0 0a67 	vmov.f32	s0, s15
 800788e:	3714      	adds	r7, #20
 8007890:	46bd      	mov	sp, r7
 8007892:	bd90      	pop	{r4, r7, pc}
 8007894:	41833333 	.word	0x41833333

08007898 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8007898:	b590      	push	{r4, r7, lr}
 800789a:	b085      	sub	sp, #20
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff ff29 	bl	80076fc <gyro_read_byte>
 80078aa:	4603      	mov	r3, r0
 80078ac:	021b      	lsls	r3, r3, #8
 80078ae:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	3301      	adds	r3, #1
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff ff20 	bl	80076fc <gyro_read_byte>
 80078bc:	4603      	mov	r3, r0
 80078be:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80078c0:	4323      	orrs	r3, r4
 80078c2:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 80078c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80078c8:	ee07 3a90 	vmov	s15, r3
 80078cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80078d0:	eddf 6a06 	vldr	s13, [pc, #24]	; 80078ec <ICM20602_ACCEL_READ+0x54>
 80078d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078d8:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	ee07 3a90 	vmov	s15, r3

}
 80078e2:	eeb0 0a67 	vmov.f32	s0, s15
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd90      	pop	{r4, r7, pc}
 80078ec:	45000000 	.word	0x45000000

080078f0 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <ICM20602_DataUpdate+0x40>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d117      	bne.n	800792c <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 80078fc:	2045      	movs	r0, #69	; 0x45
 80078fe:	f7ff ff9f 	bl	8007840 <ICM20602_GYRO_READ>
 8007902:	eef0 7a40 	vmov.f32	s15, s0
 8007906:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <ICM20602_DataUpdate+0x44>)
 8007908:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 800790c:	2047      	movs	r0, #71	; 0x47
 800790e:	f7ff ff97 	bl	8007840 <ICM20602_GYRO_READ>
 8007912:	eef0 7a40 	vmov.f32	s15, s0
 8007916:	4b07      	ldr	r3, [pc, #28]	; (8007934 <ICM20602_DataUpdate+0x44>)
 8007918:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 800791c:	203b      	movs	r0, #59	; 0x3b
 800791e:	f7ff ffbb 	bl	8007898 <ICM20602_ACCEL_READ>
 8007922:	eef0 7a40 	vmov.f32	s15, s0
 8007926:	4b03      	ldr	r3, [pc, #12]	; (8007934 <ICM20602_DataUpdate+0x44>)
 8007928:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 800792c:	bf00      	nop
 800792e:	bd80      	pop	{r7, pc}
 8007930:	200006e0 	.word	0x200006e0
 8007934:	200006e4 	.word	0x200006e4

08007938 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8007938:	b580      	push	{r7, lr}
 800793a:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 800793c:	480f      	ldr	r0, [pc, #60]	; (800797c <pl_motor_init+0x44>)
 800793e:	f015 f8f5 	bl	801cb2c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007942:	480e      	ldr	r0, [pc, #56]	; (800797c <pl_motor_init+0x44>)
 8007944:	f00f f976 	bl	8016c34 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8007948:	480d      	ldr	r0, [pc, #52]	; (8007980 <pl_motor_init+0x48>)
 800794a:	f015 f8ef 	bl	801cb2c <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 800794e:	480c      	ldr	r0, [pc, #48]	; (8007980 <pl_motor_init+0x48>)
 8007950:	f00f f970 	bl	8016c34 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007954:	2001      	movs	r0, #1
 8007956:	f000 f81f 	bl	8007998 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 800795a:	4b08      	ldr	r3, [pc, #32]	; (800797c <pl_motor_init+0x44>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	225a      	movs	r2, #90	; 0x5a
 8007960:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8007962:	2001      	movs	r0, #1
 8007964:	f000 f840 	bl	80079e8 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8007968:	4b04      	ldr	r3, [pc, #16]	; (800797c <pl_motor_init+0x44>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	225a      	movs	r2, #90	; 0x5a
 800796e:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8007970:	4b03      	ldr	r3, [pc, #12]	; (8007980 <pl_motor_init+0x48>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	221e      	movs	r2, #30
 8007976:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007978:	bf00      	nop
 800797a:	bd80      	pop	{r7, pc}
 800797c:	2000da94 	.word	0x2000da94
 8007980:	2000dae0 	.word	0x2000dae0

08007984 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d819      	bhi.n	80079da <pl_L_DriveMotor_mode+0x42>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <pl_L_DriveMotor_mode+0x14>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079d9 	.word	0x080079d9
 80079b0:	080079bd 	.word	0x080079bd
 80079b4:	080079cb 	.word	0x080079cb
 80079b8:	080079d9 	.word	0x080079d9
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079c2:	4808      	ldr	r0, [pc, #32]	; (80079e4 <pl_L_DriveMotor_mode+0x4c>)
 80079c4:	f013 f90a 	bl	801abdc <HAL_GPIO_WritePin>
break;
 80079c8:	e007      	b.n	80079da <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 80079ca:	2201      	movs	r2, #1
 80079cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079d0:	4804      	ldr	r0, [pc, #16]	; (80079e4 <pl_L_DriveMotor_mode+0x4c>)
 80079d2:	f013 f903 	bl	801abdc <HAL_GPIO_WritePin>
break;
 80079d6:	e000      	b.n	80079da <pl_L_DriveMotor_mode+0x42>
break;
 80079d8:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	48000800 	.word	0x48000800

080079e8 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d817      	bhi.n	8007a26 <pl_R_DriveMotor_mode+0x3e>
 80079f6:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <pl_R_DriveMotor_mode+0x14>)
 80079f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fc:	08007a25 	.word	0x08007a25
 8007a00:	08007a0d 	.word	0x08007a0d
 8007a04:	08007a19 	.word	0x08007a19
 8007a08:	08007a25 	.word	0x08007a25
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	2180      	movs	r1, #128	; 0x80
 8007a10:	4807      	ldr	r0, [pc, #28]	; (8007a30 <pl_R_DriveMotor_mode+0x48>)
 8007a12:	f013 f8e3 	bl	801abdc <HAL_GPIO_WritePin>
break;
 8007a16:	e006      	b.n	8007a26 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2180      	movs	r1, #128	; 0x80
 8007a1c:	4804      	ldr	r0, [pc, #16]	; (8007a30 <pl_R_DriveMotor_mode+0x48>)
 8007a1e:	f013 f8dd 	bl	801abdc <HAL_GPIO_WritePin>
break;
 8007a22:	e000      	b.n	8007a26 <pl_R_DriveMotor_mode+0x3e>
break;
 8007a24:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	48000400 	.word	0x48000400

08007a34 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8007a38:	2108      	movs	r1, #8
 8007a3a:	4804      	ldr	r0, [pc, #16]	; (8007a4c <pl_DriveMotor_start+0x18>)
 8007a3c:	f015 f93e 	bl	801ccbc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007a40:	2100      	movs	r1, #0
 8007a42:	4802      	ldr	r0, [pc, #8]	; (8007a4c <pl_DriveMotor_start+0x18>)
 8007a44:	f015 f93a 	bl	801ccbc <HAL_TIM_PWM_Start>
}
 8007a48:	bf00      	nop
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	2000da94 	.word	0x2000da94

08007a50 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007a54:	2108      	movs	r1, #8
 8007a56:	4804      	ldr	r0, [pc, #16]	; (8007a68 <pl_DriveMotor_stop+0x18>)
 8007a58:	f015 fa3c 	bl	801ced4 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4802      	ldr	r0, [pc, #8]	; (8007a68 <pl_DriveMotor_stop+0x18>)
 8007a60:	f015 fa38 	bl	801ced4 <HAL_TIM_PWM_Stop>
}
 8007a64:	bf00      	nop
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	2000da94 	.word	0x2000da94

08007a6c <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8007a76:	4b07      	ldr	r3, [pc, #28]	; (8007a94 <pl_DriveMotor_duty+0x28>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8007a7e:	4b05      	ldr	r3, [pc, #20]	; (8007a94 <pl_DriveMotor_duty+0x28>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	2000da94 	.word	0x2000da94

08007a98 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4802      	ldr	r0, [pc, #8]	; (8007aa8 <pl_FunMotor_start+0x10>)
 8007aa0:	f015 f90c 	bl	801ccbc <HAL_TIM_PWM_Start>
}
 8007aa4:	bf00      	nop
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	2000dae0 	.word	0x2000dae0

08007aac <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	4802      	ldr	r0, [pc, #8]	; (8007abc <pl_FunMotor_stop+0x10>)
 8007ab4:	f015 fa0e 	bl	801ced4 <HAL_TIM_PWM_Stop>
}
 8007ab8:	bf00      	nop
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	2000dae0 	.word	0x2000dae0

08007ac0 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007ac0:	b480      	push	{r7}
 8007ac2:	b085      	sub	sp, #20
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8007ace:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007b04 <pl_FunMotor_duty+0x44>
 8007ad2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ada:	ee17 3a90 	vmov	r3, s15
 8007ade:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007ae0:	4b09      	ldr	r3, [pc, #36]	; (8007b08 <pl_FunMotor_duty+0x48>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	2264      	movs	r2, #100	; 0x64
 8007ae6:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ae8:	4b07      	ldr	r3, [pc, #28]	; (8007b08 <pl_FunMotor_duty+0x48>)
 8007aea:	2264      	movs	r2, #100	; 0x64
 8007aec:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007aee:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <pl_FunMotor_duty+0x48>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007af6:	bf00      	nop
 8007af8:	3714      	adds	r7, #20
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	42c80000 	.word	0x42c80000
 8007b08:	2000dae0 	.word	0x2000dae0

08007b0c <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	af00      	add	r7, sp, #0
	AD_step=0;
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <pl_sensor_init+0x18>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007b16:	217f      	movs	r1, #127	; 0x7f
 8007b18:	4803      	ldr	r0, [pc, #12]	; (8007b28 <pl_sensor_init+0x1c>)
 8007b1a:	f011 ff1d 	bl	8019958 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	20000708 	.word	0x20000708
 8007b28:	20000734 	.word	0x20000734
 8007b2c:	00000000 	.word	0x00000000

08007b30 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007b36:	483c      	ldr	r0, [pc, #240]	; (8007c28 <pl_getbatt+0xf8>)
 8007b38:	f010 fafc 	bl	8018134 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007b3c:	2132      	movs	r1, #50	; 0x32
 8007b3e:	483a      	ldr	r0, [pc, #232]	; (8007c28 <pl_getbatt+0xf8>)
 8007b40:	f010 fbf6 	bl	8018330 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007b44:	4838      	ldr	r0, [pc, #224]	; (8007c28 <pl_getbatt+0xf8>)
 8007b46:	f010 fe12 	bl	801876e <HAL_ADC_GetValue>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007b4e:	4836      	ldr	r0, [pc, #216]	; (8007c28 <pl_getbatt+0xf8>)
 8007b50:	f010 fbba 	bl	80182c8 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007b54:	88fb      	ldrh	r3, [r7, #6]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	ee17 0a90 	vmov	r0, s15
 8007b62:	f7f8 fd19 	bl	8000598 <__aeabi_f2d>
 8007b66:	a326      	add	r3, pc, #152	; (adr r3, 8007c00 <pl_getbatt+0xd0>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fd6c 	bl	8000648 <__aeabi_dmul>
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4610      	mov	r0, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	a323      	add	r3, pc, #140	; (adr r3, 8007c08 <pl_getbatt+0xd8>)
 8007b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7e:	f7f8 fe8d 	bl	800089c <__aeabi_ddiv>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	4610      	mov	r0, r2
 8007b88:	4619      	mov	r1, r3
 8007b8a:	f04f 0200 	mov.w	r2, #0
 8007b8e:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <pl_getbatt+0xfc>)
 8007b90:	f7f8 fd5a 	bl	8000648 <__aeabi_dmul>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	4b23      	ldr	r3, [pc, #140]	; (8007c30 <pl_getbatt+0x100>)
 8007ba2:	f7f8 fe7b 	bl	800089c <__aeabi_ddiv>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	460b      	mov	r3, r1
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	a318      	add	r3, pc, #96	; (adr r3, 8007c10 <pl_getbatt+0xe0>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fd48 	bl	8000648 <__aeabi_dmul>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	460b      	mov	r3, r1
 8007bbc:	4610      	mov	r0, r2
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	a315      	add	r3, pc, #84	; (adr r3, 8007c18 <pl_getbatt+0xe8>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fd3f 	bl	8000648 <__aeabi_dmul>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	4610      	mov	r0, r2
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	a313      	add	r3, pc, #76	; (adr r3, 8007c20 <pl_getbatt+0xf0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fe60 	bl	800089c <__aeabi_ddiv>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	460b      	mov	r3, r1
 8007be0:	4610      	mov	r0, r2
 8007be2:	4619      	mov	r1, r3
 8007be4:	f7f9 f808 	bl	8000bf8 <__aeabi_d2f>
 8007be8:	4603      	mov	r3, r0
 8007bea:	603b      	str	r3, [r7, #0]
return batt;
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	ee07 3a90 	vmov	s15, r3
}
 8007bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	f3af 8000 	nop.w
 8007c00:	66666666 	.word	0x66666666
 8007c04:	400a6666 	.word	0x400a6666
 8007c08:	00000000 	.word	0x00000000
 8007c0c:	40affe00 	.word	0x40affe00
 8007c10:	66666666 	.word	0x66666666
 8007c14:	3ff26666 	.word	0x3ff26666
 8007c18:	9999999a 	.word	0x9999999a
 8007c1c:	400d9999 	.word	0x400d9999
 8007c20:	ae147ae1 	.word	0xae147ae1
 8007c24:	400ee147 	.word	0x400ee147
 8007c28:	20000734 	.word	0x20000734
 8007c2c:	40340000 	.word	0x40340000
 8007c30:	40240000 	.word	0x40240000
 8007c34:	00000000 	.word	0x00000000

08007c38 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007c3e:	4882      	ldr	r0, [pc, #520]	; (8007e48 <pl_callback_getSensor+0x210>)
 8007c40:	f010 fd34 	bl	80186ac <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007c44:	4b81      	ldr	r3, [pc, #516]	; (8007e4c <pl_callback_getSensor+0x214>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	f200 80d9 	bhi.w	8007e00 <pl_callback_getSensor+0x1c8>
 8007c4e:	a201      	add	r2, pc, #4	; (adr r2, 8007c54 <pl_callback_getSensor+0x1c>)
 8007c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c54:	08007c69 	.word	0x08007c69
 8007c58:	08007ca1 	.word	0x08007ca1
 8007c5c:	08007d01 	.word	0x08007d01
 8007c60:	08007d41 	.word	0x08007d41
 8007c64:	08007e01 	.word	0x08007e01
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007c68:	2201      	movs	r2, #1
 8007c6a:	2102      	movs	r1, #2
 8007c6c:	4878      	ldr	r0, [pc, #480]	; (8007e50 <pl_callback_getSensor+0x218>)
 8007c6e:	f012 ffb5 	bl	801abdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c72:	2200      	movs	r2, #0
 8007c74:	2110      	movs	r1, #16
 8007c76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c7a:	f012 ffaf 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c84:	4873      	ldr	r0, [pc, #460]	; (8007e54 <pl_callback_getSensor+0x21c>)
 8007c86:	f012 ffa9 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c8e:	e002      	b.n	8007c96 <pl_callback_getSensor+0x5e>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3301      	adds	r3, #1
 8007c94:	607b      	str	r3, [r7, #4]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c9c:	ddf8      	ble.n	8007c90 <pl_callback_getSensor+0x58>
		break;
 8007c9e:	e0af      	b.n	8007e00 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007ca0:	4b6d      	ldr	r3, [pc, #436]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007ca2:	885a      	ldrh	r2, [r3, #2]
 8007ca4:	4b6d      	ldr	r3, [pc, #436]	; (8007e5c <pl_callback_getSensor+0x224>)
 8007ca6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007ca8:	4b6b      	ldr	r3, [pc, #428]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007caa:	889a      	ldrh	r2, [r3, #4]
 8007cac:	4b6b      	ldr	r3, [pc, #428]	; (8007e5c <pl_callback_getSensor+0x224>)
 8007cae:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007cb0:	4b69      	ldr	r3, [pc, #420]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007cb2:	88da      	ldrh	r2, [r3, #6]
 8007cb4:	4b6a      	ldr	r3, [pc, #424]	; (8007e60 <pl_callback_getSensor+0x228>)
 8007cb6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007cb8:	4b67      	ldr	r3, [pc, #412]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007cba:	891a      	ldrh	r2, [r3, #8]
 8007cbc:	4b68      	ldr	r3, [pc, #416]	; (8007e60 <pl_callback_getSensor+0x228>)
 8007cbe:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007cc0:	4b65      	ldr	r3, [pc, #404]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007cc2:	895a      	ldrh	r2, [r3, #10]
 8007cc4:	4b66      	ldr	r3, [pc, #408]	; (8007e60 <pl_callback_getSensor+0x228>)
 8007cc6:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2102      	movs	r1, #2
 8007ccc:	4860      	ldr	r0, [pc, #384]	; (8007e50 <pl_callback_getSensor+0x218>)
 8007cce:	f012 ff85 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	2110      	movs	r1, #16
 8007cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cda:	f012 ff7f 	bl	801abdc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ce4:	485b      	ldr	r0, [pc, #364]	; (8007e54 <pl_callback_getSensor+0x21c>)
 8007ce6:	f012 ff79 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007cee:	e002      	b.n	8007cf6 <pl_callback_getSensor+0xbe>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	607b      	str	r3, [r7, #4]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cfc:	ddf8      	ble.n	8007cf0 <pl_callback_getSensor+0xb8>
		break;
 8007cfe:	e07f      	b.n	8007e00 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007d00:	4b55      	ldr	r3, [pc, #340]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007d02:	88da      	ldrh	r2, [r3, #6]
 8007d04:	4b55      	ldr	r3, [pc, #340]	; (8007e5c <pl_callback_getSensor+0x224>)
 8007d06:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007d08:	2200      	movs	r2, #0
 8007d0a:	2102      	movs	r1, #2
 8007d0c:	4850      	ldr	r0, [pc, #320]	; (8007e50 <pl_callback_getSensor+0x218>)
 8007d0e:	f012 ff65 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007d12:	2200      	movs	r2, #0
 8007d14:	2110      	movs	r1, #16
 8007d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d1a:	f012 ff5f 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d24:	484b      	ldr	r0, [pc, #300]	; (8007e54 <pl_callback_getSensor+0x21c>)
 8007d26:	f012 ff59 	bl	801abdc <HAL_GPIO_WritePin>
		j=0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007d2e:	e002      	b.n	8007d36 <pl_callback_getSensor+0xfe>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	3301      	adds	r3, #1
 8007d34:	607b      	str	r3, [r7, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d3c:	ddf8      	ble.n	8007d30 <pl_callback_getSensor+0xf8>
		break;
 8007d3e:	e05f      	b.n	8007e00 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007d40:	4b45      	ldr	r3, [pc, #276]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007d42:	885a      	ldrh	r2, [r3, #2]
 8007d44:	4b46      	ldr	r3, [pc, #280]	; (8007e60 <pl_callback_getSensor+0x228>)
 8007d46:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007d48:	4b43      	ldr	r3, [pc, #268]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007d4a:	889a      	ldrh	r2, [r3, #4]
 8007d4c:	4b44      	ldr	r3, [pc, #272]	; (8007e60 <pl_callback_getSensor+0x228>)
 8007d4e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007d50:	4b41      	ldr	r3, [pc, #260]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007d52:	891a      	ldrh	r2, [r3, #8]
 8007d54:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <pl_callback_getSensor+0x224>)
 8007d56:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007d5a:	895a      	ldrh	r2, [r3, #10]
 8007d5c:	4b3f      	ldr	r3, [pc, #252]	; (8007e5c <pl_callback_getSensor+0x224>)
 8007d5e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007d60:	2200      	movs	r2, #0
 8007d62:	2102      	movs	r1, #2
 8007d64:	483a      	ldr	r0, [pc, #232]	; (8007e50 <pl_callback_getSensor+0x218>)
 8007d66:	f012 ff39 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	2110      	movs	r1, #16
 8007d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d72:	f012 ff33 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007d76:	2200      	movs	r2, #0
 8007d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d7c:	4835      	ldr	r0, [pc, #212]	; (8007e54 <pl_callback_getSensor+0x21c>)
 8007d7e:	f012 ff2d 	bl	801abdc <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007d86:	e002      	b.n	8007d8e <pl_callback_getSensor+0x156>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	607b      	str	r3, [r7, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b32      	cmp	r3, #50	; 0x32
 8007d92:	ddf9      	ble.n	8007d88 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007d94:	4b30      	ldr	r3, [pc, #192]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007d96:	881b      	ldrh	r3, [r3, #0]
 8007d98:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007d9a:	887b      	ldrh	r3, [r7, #2]
 8007d9c:	ee07 3a90 	vmov	s15, r3
 8007da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da4:	ee17 0a90 	vmov	r0, s15
 8007da8:	f7f8 fbf6 	bl	8000598 <__aeabi_f2d>
 8007dac:	a320      	add	r3, pc, #128	; (adr r3, 8007e30 <pl_callback_getSensor+0x1f8>)
 8007dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db2:	f7f8 fc49 	bl	8000648 <__aeabi_dmul>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4610      	mov	r0, r2
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	a31e      	add	r3, pc, #120	; (adr r3, 8007e38 <pl_callback_getSensor+0x200>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	f7f8 fd6a 	bl	800089c <__aeabi_ddiv>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	4610      	mov	r0, r2
 8007dce:	4619      	mov	r1, r3
 8007dd0:	a31b      	add	r3, pc, #108	; (adr r3, 8007e40 <pl_callback_getSensor+0x208>)
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f7f8 fc37 	bl	8000648 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4610      	mov	r0, r2
 8007de0:	4619      	mov	r1, r3
 8007de2:	f04f 0200 	mov.w	r2, #0
 8007de6:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <pl_callback_getSensor+0x22c>)
 8007de8:	f7f8 fd58 	bl	800089c <__aeabi_ddiv>
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4610      	mov	r0, r2
 8007df2:	4619      	mov	r1, r3
 8007df4:	f7f8 ff00 	bl	8000bf8 <__aeabi_d2f>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	4a1b      	ldr	r2, [pc, #108]	; (8007e68 <pl_callback_getSensor+0x230>)
 8007dfc:	6013      	str	r3, [r2, #0]
		break;
 8007dfe:	bf00      	nop

		break;
	}


	AD_step++;
 8007e00:	4b12      	ldr	r3, [pc, #72]	; (8007e4c <pl_callback_getSensor+0x214>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	3301      	adds	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <pl_callback_getSensor+0x214>)
 8007e0a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <pl_callback_getSensor+0x214>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b04      	cmp	r3, #4
 8007e12:	d005      	beq.n	8007e20 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007e14:	2206      	movs	r2, #6
 8007e16:	4910      	ldr	r1, [pc, #64]	; (8007e58 <pl_callback_getSensor+0x220>)
 8007e18:	480b      	ldr	r0, [pc, #44]	; (8007e48 <pl_callback_getSensor+0x210>)
 8007e1a:	f010 fb7d 	bl	8018518 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007e1e:	e002      	b.n	8007e26 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007e20:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <pl_callback_getSensor+0x214>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	701a      	strb	r2, [r3, #0]
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	66666666 	.word	0x66666666
 8007e34:	400a6666 	.word	0x400a6666
 8007e38:	00000000 	.word	0x00000000
 8007e3c:	40affe00 	.word	0x40affe00
 8007e40:	00000000 	.word	0x00000000
 8007e44:	4062c000 	.word	0x4062c000
 8007e48:	20000734 	.word	0x20000734
 8007e4c:	20000708 	.word	0x20000708
 8007e50:	48000400 	.word	0x48000400
 8007e54:	48000800 	.word	0x48000800
 8007e58:	200006fc 	.word	0x200006fc
 8007e5c:	2000070c 	.word	0x2000070c
 8007e60:	20000718 	.word	0x20000718
 8007e64:	40490000 	.word	0x40490000
 8007e68:	20000724 	.word	0x20000724

08007e6c <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007e70:	2206      	movs	r2, #6
 8007e72:	4903      	ldr	r1, [pc, #12]	; (8007e80 <pl_interupt_getSensor+0x14>)
 8007e74:	4803      	ldr	r0, [pc, #12]	; (8007e84 <pl_interupt_getSensor+0x18>)
 8007e76:	f010 fb4f 	bl	8018518 <HAL_ADC_Start_DMA>

}
 8007e7a:	bf00      	nop
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	200006fc 	.word	0x200006fc
 8007e84:	20000734 	.word	0x20000734

08007e88 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
	count_mode=0;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <pl_timer_init+0x1c>)
 8007e8e:	2200      	movs	r2, #0
 8007e90:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <pl_timer_init+0x20>)
 8007e94:	f04f 0200 	mov.w	r2, #0
 8007e98:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007e9a:	4804      	ldr	r0, [pc, #16]	; (8007eac <pl_timer_init+0x24>)
 8007e9c:	f014 fe46 	bl	801cb2c <HAL_TIM_Base_Start_IT>
}
 8007ea0:	bf00      	nop
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	20000730 	.word	0x20000730
 8007ea8:	2000072c 	.word	0x2000072c
 8007eac:	2000da48 	.word	0x2000da48

08007eb0 <interrupt_timer>:

void interrupt_timer(void){
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
	g_timCount++;
 8007eb4:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <interrupt_timer+0x48>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a0f      	ldr	r2, [pc, #60]	; (8007ef8 <interrupt_timer+0x48>)
 8007ebc:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007ebe:	4b0f      	ldr	r3, [pc, #60]	; (8007efc <interrupt_timer+0x4c>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d112      	bne.n	8007eec <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007ec6:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <interrupt_timer+0x50>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7f8 fb64 	bl	8000598 <__aeabi_f2d>
 8007ed0:	a307      	add	r3, pc, #28	; (adr r3, 8007ef0 <interrupt_timer+0x40>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 fa01 	bl	80002dc <__adddf3>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	4610      	mov	r0, r2
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	f7f8 fe89 	bl	8000bf8 <__aeabi_d2f>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <interrupt_timer+0x50>)
 8007eea:	6013      	str	r3, [r2, #0]
	}

}
 8007eec:	bf00      	nop
 8007eee:	bd80      	pop	{r7, pc}
 8007ef0:	d2f1a9fc 	.word	0xd2f1a9fc
 8007ef4:	3f50624d 	.word	0x3f50624d
 8007ef8:	20000728 	.word	0x20000728
 8007efc:	20000730 	.word	0x20000730
 8007f00:	2000072c 	.word	0x2000072c

08007f04 <tic_timer>:

void tic_timer(void){
 8007f04:	b480      	push	{r7}
 8007f06:	af00      	add	r7, sp, #0
	count_mode=1;
 8007f08:	4b05      	ldr	r3, [pc, #20]	; (8007f20 <tic_timer+0x1c>)
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007f0e:	4b05      	ldr	r3, [pc, #20]	; (8007f24 <tic_timer+0x20>)
 8007f10:	f04f 0200 	mov.w	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
}
 8007f16:	bf00      	nop
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	20000730 	.word	0x20000730
 8007f24:	2000072c 	.word	0x2000072c

08007f28 <toc_timer>:

float toc_timer(void){
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <toc_timer+0x30>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007f34:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <toc_timer+0x34>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <toc_timer+0x30>)
 8007f3c:	f04f 0200 	mov.w	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
	return timer;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	ee07 3a90 	vmov	s15, r3
}
 8007f48:	eeb0 0a67 	vmov.f32	s0, s15
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	2000072c 	.word	0x2000072c
 8007f5c:	20000730 	.word	0x20000730

08007f60 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007f60:	b5b0      	push	{r4, r5, r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007f68:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <wait_ms+0x80>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007f6e:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <wait_ms+0x84>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2200      	movs	r2, #0
 8007f74:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007f76:	bf00      	nop
 8007f78:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <wait_ms+0x80>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f84:	ee17 0a90 	vmov	r0, s15
 8007f88:	f7f8 fb06 	bl	8000598 <__aeabi_f2d>
 8007f8c:	a312      	add	r3, pc, #72	; (adr r3, 8007fd8 <wait_ms+0x78>)
 8007f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f92:	f7f8 fb59 	bl	8000648 <__aeabi_dmul>
 8007f96:	4602      	mov	r2, r0
 8007f98:	460b      	mov	r3, r1
 8007f9a:	4610      	mov	r0, r2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	a30e      	add	r3, pc, #56	; (adr r3, 8007fd8 <wait_ms+0x78>)
 8007fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa4:	f7f8 fc7a 	bl	800089c <__aeabi_ddiv>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4614      	mov	r4, r2
 8007fae:	461d      	mov	r5, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7f8 facf 	bl	8000554 <__aeabi_ui2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4620      	mov	r0, r4
 8007fbc:	4629      	mov	r1, r5
 8007fbe:	f7f8 fdb5 	bl	8000b2c <__aeabi_dcmplt>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1d7      	bne.n	8007f78 <wait_ms+0x18>
        }

}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	3708      	adds	r7, #8
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bdb0      	pop	{r4, r5, r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	d2f1a9fc 	.word	0xd2f1a9fc
 8007fdc:	3f50624d 	.word	0x3f50624d
 8007fe0:	20000728 	.word	0x20000728
 8007fe4:	2000da48 	.word	0x2000da48

08007fe8 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007fe8:	b5b0      	push	{r4, r5, r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007ff0:	4b1b      	ldr	r3, [pc, #108]	; (8008060 <wait_ms_NoReset+0x78>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007ff6:	bf00      	nop
 8007ff8:	4b19      	ldr	r3, [pc, #100]	; (8008060 <wait_ms_NoReset+0x78>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008004:	ee17 0a90 	vmov	r0, s15
 8008008:	f7f8 fac6 	bl	8000598 <__aeabi_f2d>
 800800c:	a312      	add	r3, pc, #72	; (adr r3, 8008058 <wait_ms_NoReset+0x70>)
 800800e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008012:	f7f8 fb19 	bl	8000648 <__aeabi_dmul>
 8008016:	4602      	mov	r2, r0
 8008018:	460b      	mov	r3, r1
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	a30e      	add	r3, pc, #56	; (adr r3, 8008058 <wait_ms_NoReset+0x70>)
 8008020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008024:	f7f8 fc3a 	bl	800089c <__aeabi_ddiv>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4614      	mov	r4, r2
 800802e:	461d      	mov	r5, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7f8 fa8f 	bl	8000554 <__aeabi_ui2d>
 8008036:	4602      	mov	r2, r0
 8008038:	460b      	mov	r3, r1
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 fd75 	bl	8000b2c <__aeabi_dcmplt>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1d7      	bne.n	8007ff8 <wait_ms_NoReset+0x10>
        }

}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bdb0      	pop	{r4, r5, r7, pc}
 8008052:	bf00      	nop
 8008054:	f3af 8000 	nop.w
 8008058:	d2f1a9fc 	.word	0xd2f1a9fc
 800805c:	3f50624d 	.word	0x3f50624d
 8008060:	20000728 	.word	0x20000728

08008064 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b08c      	sub	sp, #48	; 0x30
 8008068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800806a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800806e:	2200      	movs	r2, #0
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	605a      	str	r2, [r3, #4]
 8008074:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008076:	1d3b      	adds	r3, r7, #4
 8008078:	2220      	movs	r2, #32
 800807a:	2100      	movs	r1, #0
 800807c:	4618      	mov	r0, r3
 800807e:	f016 fed1 	bl	801ee24 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008082:	4b56      	ldr	r3, [pc, #344]	; (80081dc <MX_ADC1_Init+0x178>)
 8008084:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008088:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800808a:	4b54      	ldr	r3, [pc, #336]	; (80081dc <MX_ADC1_Init+0x178>)
 800808c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008090:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008092:	4b52      	ldr	r3, [pc, #328]	; (80081dc <MX_ADC1_Init+0x178>)
 8008094:	2200      	movs	r2, #0
 8008096:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008098:	4b50      	ldr	r3, [pc, #320]	; (80081dc <MX_ADC1_Init+0x178>)
 800809a:	2200      	movs	r2, #0
 800809c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800809e:	4b4f      	ldr	r3, [pc, #316]	; (80081dc <MX_ADC1_Init+0x178>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80080a4:	4b4d      	ldr	r3, [pc, #308]	; (80081dc <MX_ADC1_Init+0x178>)
 80080a6:	2201      	movs	r2, #1
 80080a8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80080aa:	4b4c      	ldr	r3, [pc, #304]	; (80081dc <MX_ADC1_Init+0x178>)
 80080ac:	2208      	movs	r2, #8
 80080ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80080b0:	4b4a      	ldr	r3, [pc, #296]	; (80081dc <MX_ADC1_Init+0x178>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80080b6:	4b49      	ldr	r3, [pc, #292]	; (80081dc <MX_ADC1_Init+0x178>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80080bc:	4b47      	ldr	r3, [pc, #284]	; (80081dc <MX_ADC1_Init+0x178>)
 80080be:	2206      	movs	r2, #6
 80080c0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80080c2:	4b46      	ldr	r3, [pc, #280]	; (80081dc <MX_ADC1_Init+0x178>)
 80080c4:	2200      	movs	r2, #0
 80080c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80080ca:	4b44      	ldr	r3, [pc, #272]	; (80081dc <MX_ADC1_Init+0x178>)
 80080cc:	2200      	movs	r2, #0
 80080ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80080d0:	4b42      	ldr	r3, [pc, #264]	; (80081dc <MX_ADC1_Init+0x178>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80080d6:	4b41      	ldr	r3, [pc, #260]	; (80081dc <MX_ADC1_Init+0x178>)
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80080de:	4b3f      	ldr	r3, [pc, #252]	; (80081dc <MX_ADC1_Init+0x178>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80080e4:	4b3d      	ldr	r3, [pc, #244]	; (80081dc <MX_ADC1_Init+0x178>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80080ec:	483b      	ldr	r0, [pc, #236]	; (80081dc <MX_ADC1_Init+0x178>)
 80080ee:	f00f fe6d 	bl	8017dcc <HAL_ADC_Init>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80080f8:	f001 fecd 	bl	8009e96 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80080fc:	2300      	movs	r3, #0
 80080fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008104:	4619      	mov	r1, r3
 8008106:	4835      	ldr	r0, [pc, #212]	; (80081dc <MX_ADC1_Init+0x178>)
 8008108:	f011 fcba 	bl	8019a80 <HAL_ADCEx_MultiModeConfigChannel>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d001      	beq.n	8008116 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008112:	f001 fec0 	bl	8009e96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008116:	4b32      	ldr	r3, [pc, #200]	; (80081e0 <MX_ADC1_Init+0x17c>)
 8008118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800811a:	2306      	movs	r3, #6
 800811c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800811e:	2301      	movs	r3, #1
 8008120:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008122:	237f      	movs	r3, #127	; 0x7f
 8008124:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008126:	2304      	movs	r3, #4
 8008128:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800812a:	2300      	movs	r3, #0
 800812c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800812e:	1d3b      	adds	r3, r7, #4
 8008130:	4619      	mov	r1, r3
 8008132:	482a      	ldr	r0, [pc, #168]	; (80081dc <MX_ADC1_Init+0x178>)
 8008134:	f010 fd80 	bl	8018c38 <HAL_ADC_ConfigChannel>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800813e:	f001 feaa 	bl	8009e96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008142:	4b28      	ldr	r3, [pc, #160]	; (80081e4 <MX_ADC1_Init+0x180>)
 8008144:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008146:	230c      	movs	r3, #12
 8008148:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800814a:	1d3b      	adds	r3, r7, #4
 800814c:	4619      	mov	r1, r3
 800814e:	4823      	ldr	r0, [pc, #140]	; (80081dc <MX_ADC1_Init+0x178>)
 8008150:	f010 fd72 	bl	8018c38 <HAL_ADC_ConfigChannel>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800815a:	f001 fe9c 	bl	8009e96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800815e:	4b22      	ldr	r3, [pc, #136]	; (80081e8 <MX_ADC1_Init+0x184>)
 8008160:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008162:	2312      	movs	r3, #18
 8008164:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008166:	1d3b      	adds	r3, r7, #4
 8008168:	4619      	mov	r1, r3
 800816a:	481c      	ldr	r0, [pc, #112]	; (80081dc <MX_ADC1_Init+0x178>)
 800816c:	f010 fd64 	bl	8018c38 <HAL_ADC_ConfigChannel>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8008176:	f001 fe8e 	bl	8009e96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800817a:	4b1c      	ldr	r3, [pc, #112]	; (80081ec <MX_ADC1_Init+0x188>)
 800817c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800817e:	2318      	movs	r3, #24
 8008180:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008182:	1d3b      	adds	r3, r7, #4
 8008184:	4619      	mov	r1, r3
 8008186:	4815      	ldr	r0, [pc, #84]	; (80081dc <MX_ADC1_Init+0x178>)
 8008188:	f010 fd56 	bl	8018c38 <HAL_ADC_ConfigChannel>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008192:	f001 fe80 	bl	8009e96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008196:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <MX_ADC1_Init+0x18c>)
 8008198:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800819a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800819e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081a0:	1d3b      	adds	r3, r7, #4
 80081a2:	4619      	mov	r1, r3
 80081a4:	480d      	ldr	r0, [pc, #52]	; (80081dc <MX_ADC1_Init+0x178>)
 80081a6:	f010 fd47 	bl	8018c38 <HAL_ADC_ConfigChannel>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80081b0:	f001 fe71 	bl	8009e96 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80081b4:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <MX_ADC1_Init+0x190>)
 80081b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80081b8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80081bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081be:	1d3b      	adds	r3, r7, #4
 80081c0:	4619      	mov	r1, r3
 80081c2:	4806      	ldr	r0, [pc, #24]	; (80081dc <MX_ADC1_Init+0x178>)
 80081c4:	f010 fd38 	bl	8018c38 <HAL_ADC_ConfigChannel>
 80081c8:	4603      	mov	r3, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d001      	beq.n	80081d2 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80081ce:	f001 fe62 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80081d2:	bf00      	nop
 80081d4:	3730      	adds	r7, #48	; 0x30
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	20000734 	.word	0x20000734
 80081e0:	2e300800 	.word	0x2e300800
 80081e4:	3ef08000 	.word	0x3ef08000
 80081e8:	10c00010 	.word	0x10c00010
 80081ec:	0c900008 	.word	0x0c900008
 80081f0:	08600004 	.word	0x08600004
 80081f4:	04300002 	.word	0x04300002

080081f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b09e      	sub	sp, #120	; 0x78
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008200:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	60da      	str	r2, [r3, #12]
 800820e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008210:	f107 0314 	add.w	r3, r7, #20
 8008214:	2250      	movs	r2, #80	; 0x50
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f016 fe03 	bl	801ee24 <memset>
  if(adcHandle->Instance==ADC1)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008226:	f040 8082 	bne.w	800832e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800822a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800822e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008230:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008234:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008236:	f107 0314 	add.w	r3, r7, #20
 800823a:	4618      	mov	r0, r3
 800823c:	f013 faca 	bl	801b7d4 <HAL_RCCEx_PeriphCLKConfig>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d001      	beq.n	800824a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008246:	f001 fe26 	bl	8009e96 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800824a:	4b3b      	ldr	r3, [pc, #236]	; (8008338 <HAL_ADC_MspInit+0x140>)
 800824c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824e:	4a3a      	ldr	r2, [pc, #232]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008250:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008256:	4b38      	ldr	r3, [pc, #224]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800825a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800825e:	613b      	str	r3, [r7, #16]
 8008260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008262:	4b35      	ldr	r3, [pc, #212]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008266:	4a34      	ldr	r2, [pc, #208]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008268:	f043 0301 	orr.w	r3, r3, #1
 800826c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800826e:	4b32      	ldr	r3, [pc, #200]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800827a:	4b2f      	ldr	r3, [pc, #188]	; (8008338 <HAL_ADC_MspInit+0x140>)
 800827c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800827e:	4a2e      	ldr	r2, [pc, #184]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008280:	f043 0302 	orr.w	r3, r3, #2
 8008284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008286:	4b2c      	ldr	r3, [pc, #176]	; (8008338 <HAL_ADC_MspInit+0x140>)
 8008288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800828a:	f003 0302 	and.w	r3, r3, #2
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008292:	230f      	movs	r3, #15
 8008294:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008296:	2303      	movs	r3, #3
 8008298:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800829a:	2300      	movs	r3, #0
 800829c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800829e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082a2:	4619      	mov	r1, r3
 80082a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082a8:	f012 fb16 	bl	801a8d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80082ac:	f241 0301 	movw	r3, #4097	; 0x1001
 80082b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80082b2:	2303      	movs	r3, #3
 80082b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80082be:	4619      	mov	r1, r3
 80082c0:	481e      	ldr	r0, [pc, #120]	; (800833c <HAL_ADC_MspInit+0x144>)
 80082c2:	f012 fb09 	bl	801a8d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80082c6:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082c8:	4a1e      	ldr	r2, [pc, #120]	; (8008344 <HAL_ADC_MspInit+0x14c>)
 80082ca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80082cc:	4b1c      	ldr	r3, [pc, #112]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082ce:	2205      	movs	r2, #5
 80082d0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082d2:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082d4:	2200      	movs	r2, #0
 80082d6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80082d8:	4b19      	ldr	r3, [pc, #100]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082da:	2200      	movs	r2, #0
 80082dc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80082de:	4b18      	ldr	r3, [pc, #96]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082e0:	2280      	movs	r2, #128	; 0x80
 80082e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80082e4:	4b16      	ldr	r3, [pc, #88]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80082ec:	4b14      	ldr	r3, [pc, #80]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80082f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80082f4:	4b12      	ldr	r3, [pc, #72]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082f6:	2220      	movs	r2, #32
 80082f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80082fa:	4b11      	ldr	r3, [pc, #68]	; (8008340 <HAL_ADC_MspInit+0x148>)
 80082fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008300:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008302:	480f      	ldr	r0, [pc, #60]	; (8008340 <HAL_ADC_MspInit+0x148>)
 8008304:	f011 fdb4 	bl	8019e70 <HAL_DMA_Init>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800830e:	f001 fdc2 	bl	8009e96 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a0a      	ldr	r2, [pc, #40]	; (8008340 <HAL_ADC_MspInit+0x148>)
 8008316:	655a      	str	r2, [r3, #84]	; 0x54
 8008318:	4a09      	ldr	r2, [pc, #36]	; (8008340 <HAL_ADC_MspInit+0x148>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800831e:	2200      	movs	r2, #0
 8008320:	2100      	movs	r1, #0
 8008322:	2012      	movs	r0, #18
 8008324:	f011 fd6f 	bl	8019e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008328:	2012      	movs	r0, #18
 800832a:	f011 fd86 	bl	8019e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800832e:	bf00      	nop
 8008330:	3778      	adds	r7, #120	; 0x78
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40021000 	.word	0x40021000
 800833c:	48000400 	.word	0x48000400
 8008340:	200007a0 	.word	0x200007a0
 8008344:	40020008 	.word	0x40020008

08008348 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008350:	f7ff fc72 	bl	8007c38 <pl_callback_getSensor>
}
 8008354:	bf00      	nop
 8008356:	3708      	adds	r7, #8
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 800835c:	b084      	sub	sp, #16
 800835e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	f107 0420 	add.w	r4, r7, #32
 800836a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 800836e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837a:	f2c0 819d 	blt.w	80086b8 <cal_table+0x35c>
	switch (g_acc_flag) {
 800837e:	4bcd      	ldr	r3, [pc, #820]	; (80086b4 <cal_table+0x358>)
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	b2db      	uxtb	r3, r3
 8008384:	2b06      	cmp	r3, #6
 8008386:	f200 833a 	bhi.w	80089fe <cal_table+0x6a2>
 800838a:	a201      	add	r2, pc, #4	; (adr r2, 8008390 <cal_table+0x34>)
 800838c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008390:	080089f1 	.word	0x080089f1
 8008394:	080083ad 	.word	0x080083ad
 8008398:	0800851f 	.word	0x0800851f
 800839c:	0800863d 	.word	0x0800863d
 80083a0:	080089f1 	.word	0x080089f1
 80083a4:	08008669 	.word	0x08008669
 80083a8:	0800868f 	.word	0x0800868f
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80083ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ae:	ed93 7a00 	vldr	s14, [r3]
 80083b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80083b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80083ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083be:	db0a      	blt.n	80083d6 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80083c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80083c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80083ce:	4bb9      	ldr	r3, [pc, #740]	; (80086b4 <cal_table+0x358>)
 80083d0:	2202      	movs	r2, #2
 80083d2:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80083d4:	e313      	b.n	80089fe <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80083d6:	ed97 7a08 	vldr	s14, [r7, #32]
 80083da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083dc:	edd3 7a00 	vldr	s15, [r3]
 80083e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80083e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e6:	edd3 7a00 	vldr	s15, [r3]
 80083ea:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80083ee:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80083f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80083f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80083fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80083fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008402:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008406:	ee66 7a27 	vmul.f32	s15, s12, s15
 800840a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800840e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008412:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008416:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800841a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800841e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008426:	d900      	bls.n	800842a <cal_table+0xce>
		break;
 8008428:	e2e9      	b.n	80089fe <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800842a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842c:	edd3 7a00 	vldr	s15, [r3]
 8008430:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008436:	edd3 7a00 	vldr	s15, [r3]
 800843a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800843e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008442:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800844a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800844e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008452:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008456:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800845a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800845e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008462:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008466:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800846a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008472:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008478:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 800847c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008480:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	4618      	mov	r0, r3
 800848a:	f7f8 f885 	bl	8000598 <__aeabi_f2d>
 800848e:	4604      	mov	r4, r0
 8008490:	460d      	mov	r5, r1
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	4618      	mov	r0, r3
 8008496:	f7f8 f87f 	bl	8000598 <__aeabi_f2d>
 800849a:	f04f 0200 	mov.w	r2, #0
 800849e:	f04f 0300 	mov.w	r3, #0
 80084a2:	f7f8 f8d1 	bl	8000648 <__aeabi_dmul>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4690      	mov	r8, r2
 80084ac:	4699      	mov	r9, r3
 80084ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80084b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80084b6:	ee17 0a90 	vmov	r0, s15
 80084ba:	f7f8 f86d 	bl	8000598 <__aeabi_f2d>
 80084be:	4602      	mov	r2, r0
 80084c0:	460b      	mov	r3, r1
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	f7f8 f8bf 	bl	8000648 <__aeabi_dmul>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f7 ff01 	bl	80002d8 <__aeabi_dsub>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4610      	mov	r0, r2
 80084dc:	4619      	mov	r1, r3
 80084de:	f7f8 fb8b 	bl	8000bf8 <__aeabi_d2f>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80084e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ea:	ed93 7a00 	vldr	s14, [r3]
 80084ee:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80084f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80084fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80084fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008504:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008508:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800850c:	eef1 7a67 	vneg.f32	s15, s15
 8008510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008512:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8008516:	4b67      	ldr	r3, [pc, #412]	; (80086b4 <cal_table+0x358>)
 8008518:	2203      	movs	r2, #3
 800851a:	701a      	strb	r2, [r3, #0]
		break;
 800851c:	e26f      	b.n	80089fe <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800851e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008524:	edd3 7a02 	vldr	s15, [r3, #8]
 8008528:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800852c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008530:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008534:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008538:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800853c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008540:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008544:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008548:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800854c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008550:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008554:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008560:	d900      	bls.n	8008564 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 8008562:	e24c      	b.n	80089fe <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008566:	ed93 7a02 	vldr	s14, [r3, #8]
 800856a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800856e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008572:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8008576:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800857a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800857e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008582:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008586:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800858a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800858e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008592:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8008596:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800859a:	edd7 7a08 	vldr	s15, [r7, #32]
 800859e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80085a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085a4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80085a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ac:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80085b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f7f7 ffef 	bl	8000598 <__aeabi_f2d>
 80085ba:	4604      	mov	r4, r0
 80085bc:	460d      	mov	r5, r1
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7f7 ffe9 	bl	8000598 <__aeabi_f2d>
 80085c6:	f04f 0200 	mov.w	r2, #0
 80085ca:	f04f 0300 	mov.w	r3, #0
 80085ce:	f7f8 f83b 	bl	8000648 <__aeabi_dmul>
 80085d2:	4602      	mov	r2, r0
 80085d4:	460b      	mov	r3, r1
 80085d6:	4690      	mov	r8, r2
 80085d8:	4699      	mov	r9, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7f7 ffdc 	bl	8000598 <__aeabi_f2d>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f8 f82e 	bl	8000648 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4620      	mov	r0, r4
 80085f2:	4629      	mov	r1, r5
 80085f4:	f7f7 fe70 	bl	80002d8 <__aeabi_dsub>
 80085f8:	4602      	mov	r2, r0
 80085fa:	460b      	mov	r3, r1
 80085fc:	4610      	mov	r0, r2
 80085fe:	4619      	mov	r1, r3
 8008600:	f7f8 fafa 	bl	8000bf8 <__aeabi_d2f>
 8008604:	4602      	mov	r2, r0
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800860a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860c:	ed93 7a00 	vldr	s14, [r3]
 8008610:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008614:	edd7 7a01 	vldr	s15, [r7, #4]
 8008618:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800861c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008622:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8008626:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800862a:	eef1 7a67 	vneg.f32	s15, s15
 800862e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008630:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8008634:	4b1f      	ldr	r3, [pc, #124]	; (80086b4 <cal_table+0x358>)
 8008636:	2203      	movs	r2, #3
 8008638:	701a      	strb	r2, [r3, #0]
		break;
 800863a:	e1e0      	b.n	80089fe <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800863e:	ed93 7a00 	vldr	s14, [r3]
 8008642:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800864a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864e:	d900      	bls.n	8008652 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008650:	e1d5      	b.n	80089fe <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008652:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865a:	f04f 0200 	mov.w	r2, #0
 800865e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008660:	4b14      	ldr	r3, [pc, #80]	; (80086b4 <cal_table+0x358>)
 8008662:	2204      	movs	r2, #4
 8008664:	701a      	strb	r2, [r3, #0]
		break;
 8008666:	e1ca      	b.n	80089fe <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8008668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866a:	ed93 7a02 	vldr	s14, [r3, #8]
 800866e:	edd7 7a08 	vldr	s15, [r7, #32]
 8008672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867a:	da00      	bge.n	800867e <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800867c:	e1bf      	b.n	80089fe <cal_table+0x6a2>
			target->acceleration = 0;
 800867e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008680:	f04f 0200 	mov.w	r2, #0
 8008684:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008686:	4b0b      	ldr	r3, [pc, #44]	; (80086b4 <cal_table+0x358>)
 8008688:	2204      	movs	r2, #4
 800868a:	701a      	strb	r2, [r3, #0]
		break;
 800868c:	e1b7      	b.n	80089fe <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800868e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008690:	ed93 7a02 	vldr	s14, [r3, #8]
 8008694:	edd7 7a08 	vldr	s15, [r7, #32]
 8008698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800869c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a0:	da00      	bge.n	80086a4 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80086a2:	e1ac      	b.n	80089fe <cal_table+0x6a2>
			target->acceleration = 0;
 80086a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80086ac:	4b01      	ldr	r3, [pc, #4]	; (80086b4 <cal_table+0x358>)
 80086ae:	2204      	movs	r2, #4
 80086b0:	701a      	strb	r2, [r3, #0]
		break;
 80086b2:	e1a4      	b.n	80089fe <cal_table+0x6a2>
 80086b4:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 80086b8:	4bce      	ldr	r3, [pc, #824]	; (80089f4 <cal_table+0x698>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b06      	cmp	r3, #6
 80086c0:	f200 819d 	bhi.w	80089fe <cal_table+0x6a2>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <cal_table+0x370>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080089fd 	.word	0x080089fd
 80086d0:	080086e9 	.word	0x080086e9
 80086d4:	0800885b 	.word	0x0800885b
 80086d8:	08008971 	.word	0x08008971
 80086dc:	0800899d 	.word	0x0800899d
 80086e0:	080089a5 	.word	0x080089a5
 80086e4:	080089cb 	.word	0x080089cb
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 80086e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ea:	ed93 7a00 	vldr	s14, [r3]
 80086ee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80086f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086fa:	d80a      	bhi.n	8008712 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 80086fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008700:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800870a:	4bba      	ldr	r3, [pc, #744]	; (80089f4 <cal_table+0x698>)
 800870c:	2202      	movs	r2, #2
 800870e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008710:	e175      	b.n	80089fe <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008712:	edd7 7a08 	vldr	s15, [r7, #32]
 8008716:	eeb1 7a67 	vneg.f32	s14, s15
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	edd3 7a00 	vldr	s15, [r3]
 8008720:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008726:	edd3 7a00 	vldr	s15, [r3]
 800872a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800872e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008732:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008736:	ee66 7a27 	vmul.f32	s15, s12, s15
 800873a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800873e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008742:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008746:	ee66 7a27 	vmul.f32	s15, s12, s15
 800874a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800874e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008752:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008756:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800875a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800875e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008766:	d900      	bls.n	800876a <cal_table+0x40e>
		break;
 8008768:	e149      	b.n	80089fe <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 800876a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876c:	edd3 7a00 	vldr	s15, [r3]
 8008770:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008776:	edd3 7a00 	vldr	s15, [r3]
 800877a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800877e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008782:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800878a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800878e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008792:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008796:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800879a:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 800879e:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80087a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80087a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80087aa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80087ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80087b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80087ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087bc:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 80087c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087c4:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7f7 fee3 	bl	8000598 <__aeabi_f2d>
 80087d2:	4604      	mov	r4, r0
 80087d4:	460d      	mov	r5, r1
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f7 fedd 	bl	8000598 <__aeabi_f2d>
 80087de:	f04f 0200 	mov.w	r2, #0
 80087e2:	f04f 0300 	mov.w	r3, #0
 80087e6:	f7f7 ff2f 	bl	8000648 <__aeabi_dmul>
 80087ea:	4602      	mov	r2, r0
 80087ec:	460b      	mov	r3, r1
 80087ee:	4690      	mov	r8, r2
 80087f0:	4699      	mov	r9, r3
 80087f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80087f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80087fa:	ee17 0a90 	vmov	r0, s15
 80087fe:	f7f7 fecb 	bl	8000598 <__aeabi_f2d>
 8008802:	4602      	mov	r2, r0
 8008804:	460b      	mov	r3, r1
 8008806:	4640      	mov	r0, r8
 8008808:	4649      	mov	r1, r9
 800880a:	f7f7 ff1d 	bl	8000648 <__aeabi_dmul>
 800880e:	4602      	mov	r2, r0
 8008810:	460b      	mov	r3, r1
 8008812:	4620      	mov	r0, r4
 8008814:	4629      	mov	r1, r5
 8008816:	f7f7 fd61 	bl	80002dc <__adddf3>
 800881a:	4602      	mov	r2, r0
 800881c:	460b      	mov	r3, r1
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	f7f8 f9e9 	bl	8000bf8 <__aeabi_d2f>
 8008826:	4602      	mov	r2, r0
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	ed93 7a00 	vldr	s14, [r3]
 8008832:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008836:	edd7 7a01 	vldr	s15, [r7, #4]
 800883a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800883e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008848:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 800884c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008850:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8008852:	4b68      	ldr	r3, [pc, #416]	; (80089f4 <cal_table+0x698>)
 8008854:	2203      	movs	r2, #3
 8008856:	701a      	strb	r2, [r3, #0]
		break;
 8008858:	e0d1      	b.n	80089fe <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 800885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008860:	edd7 7a08 	vldr	s15, [r7, #32]
 8008864:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8008868:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800886c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008870:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008874:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008878:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800887c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008880:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008884:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008888:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800888c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008890:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8008894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800889c:	d900      	bls.n	80088a0 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 800889e:	e0ae      	b.n	80089fe <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80088a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80088a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80088aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80088ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80088b2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80088b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80088be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80088c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80088c6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80088ca:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80088ce:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80088d2:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80088d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80088da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80088de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e0:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80088e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e8:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7f7 fe51 	bl	8000598 <__aeabi_f2d>
 80088f6:	4604      	mov	r4, r0
 80088f8:	460d      	mov	r5, r1
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7f7 fe4b 	bl	8000598 <__aeabi_f2d>
 8008902:	f04f 0200 	mov.w	r2, #0
 8008906:	f04f 0300 	mov.w	r3, #0
 800890a:	f7f7 fe9d 	bl	8000648 <__aeabi_dmul>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4690      	mov	r8, r2
 8008914:	4699      	mov	r9, r3
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7f7 fe3e 	bl	8000598 <__aeabi_f2d>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4640      	mov	r0, r8
 8008922:	4649      	mov	r1, r9
 8008924:	f7f7 fe90 	bl	8000648 <__aeabi_dmul>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4620      	mov	r0, r4
 800892e:	4629      	mov	r1, r5
 8008930:	f7f7 fcd4 	bl	80002dc <__adddf3>
 8008934:	4602      	mov	r2, r0
 8008936:	460b      	mov	r3, r1
 8008938:	4610      	mov	r0, r2
 800893a:	4619      	mov	r1, r3
 800893c:	f7f8 f95c 	bl	8000bf8 <__aeabi_d2f>
 8008940:	4602      	mov	r2, r0
 8008942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008944:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008948:	ed93 7a00 	vldr	s14, [r3]
 800894c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008950:	edd7 7a01 	vldr	s15, [r7, #4]
 8008954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800895c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8008962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008966:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8008968:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <cal_table+0x698>)
 800896a:	2203      	movs	r2, #3
 800896c:	701a      	strb	r2, [r3, #0]
		break;
 800896e:	e046      	b.n	80089fe <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8008970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008972:	ed93 7a00 	vldr	s14, [r3]
 8008976:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800897a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800897e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008982:	da00      	bge.n	8008986 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008984:	e03b      	b.n	80089fe <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 800898c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800898e:	f04f 0200 	mov.w	r2, #0
 8008992:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008994:	4b17      	ldr	r3, [pc, #92]	; (80089f4 <cal_table+0x698>)
 8008996:	2204      	movs	r2, #4
 8008998:	701a      	strb	r2, [r3, #0]
		break;
 800899a:	e030      	b.n	80089fe <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 800899c:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <cal_table+0x69c>)
 800899e:	2201      	movs	r2, #1
 80089a0:	701a      	strb	r2, [r3, #0]
		break;
 80089a2:	e02c      	b.n	80089fe <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80089a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80089aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80089ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089b6:	d900      	bls.n	80089ba <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80089b8:	e021      	b.n	80089fe <cal_table+0x6a2>
			target->acceleration = 0;
 80089ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089bc:	f04f 0200 	mov.w	r2, #0
 80089c0:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80089c2:	4b0c      	ldr	r3, [pc, #48]	; (80089f4 <cal_table+0x698>)
 80089c4:	2204      	movs	r2, #4
 80089c6:	701a      	strb	r2, [r3, #0]
		break;
 80089c8:	e019      	b.n	80089fe <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 80089ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80089d0:	edd7 7a08 	vldr	s15, [r7, #32]
 80089d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80089d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089dc:	d900      	bls.n	80089e0 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80089de:	e00e      	b.n	80089fe <cal_table+0x6a2>
			target->acceleration = 0;
 80089e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e2:	f04f 0200 	mov.w	r2, #0
 80089e6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <cal_table+0x698>)
 80089ea:	2204      	movs	r2, #4
 80089ec:	701a      	strb	r2, [r3, #0]
		break;
 80089ee:	e006      	b.n	80089fe <cal_table+0x6a2>
		break;
 80089f0:	bf00      	nop
 80089f2:	e004      	b.n	80089fe <cal_table+0x6a2>
 80089f4:	20000804 	.word	0x20000804
 80089f8:	20000805 	.word	0x20000805
		break;
 80089fc:	bf00      	nop
	}

}

}
 80089fe:	bf00      	nop
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008a08:	b004      	add	sp, #16
 8008a0a:	4770      	bx	lr
 8008a0c:	0000      	movs	r0, r0
	...

08008a10 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a14:	b08c      	sub	sp, #48	; 0x30
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	eef0 6a40 	vmov.f32	s13, s0
 8008a1c:	eeb0 7a60 	vmov.f32	s14, s1
 8008a20:	eef0 7a41 	vmov.f32	s15, s2
 8008a24:	6138      	str	r0, [r7, #16]
 8008a26:	edc7 6a05 	vstr	s13, [r7, #20]
 8008a2a:	ed87 7a06 	vstr	s14, [r7, #24]
 8008a2e:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008a32:	4be7      	ldr	r3, [pc, #924]	; (8008dd0 <cal_mollifier_table+0x3c0>)
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008a36:	4be7      	ldr	r3, [pc, #924]	; (8008dd4 <cal_mollifier_table+0x3c4>)
 8008a38:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8008a3a:	4be7      	ldr	r3, [pc, #924]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7f7 fdaa 	bl	8000598 <__aeabi_f2d>
 8008a44:	a3da      	add	r3, pc, #872	; (adr r3, 8008db0 <cal_mollifier_table+0x3a0>)
 8008a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a4a:	f7f7 fc47 	bl	80002dc <__adddf3>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4610      	mov	r0, r2
 8008a54:	4619      	mov	r1, r3
 8008a56:	f7f8 f8cf 	bl	8000bf8 <__aeabi_d2f>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	4ade      	ldr	r2, [pc, #888]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008a5e:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8008a60:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a64:	eef0 7ae7 	vabs.f32	s15, s15
 8008a68:	ee17 0a90 	vmov	r0, s15
 8008a6c:	f7f7 fd94 	bl	8000598 <__aeabi_f2d>
 8008a70:	4602      	mov	r2, r0
 8008a72:	460b      	mov	r3, r1
 8008a74:	f7f7 fc32 	bl	80002dc <__adddf3>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4619      	mov	r1, r3
 8008a80:	a3cd      	add	r3, pc, #820	; (adr r3, 8008db8 <cal_mollifier_table+0x3a8>)
 8008a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a86:	f7f7 ff09 	bl	800089c <__aeabi_ddiv>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	4610      	mov	r0, r2
 8008a90:	4619      	mov	r1, r3
 8008a92:	a3cb      	add	r3, pc, #812	; (adr r3, 8008dc0 <cal_mollifier_table+0x3b0>)
 8008a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a98:	f7f7 fdd6 	bl	8000648 <__aeabi_dmul>
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	4614      	mov	r4, r2
 8008aa2:	461d      	mov	r5, r3
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f7 fd76 	bl	8000598 <__aeabi_f2d>
 8008aac:	4602      	mov	r2, r0
 8008aae:	460b      	mov	r3, r1
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	f7f7 fef2 	bl	800089c <__aeabi_ddiv>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4610      	mov	r0, r2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	f7f8 f89a 	bl	8000bf8 <__aeabi_d2f>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008ac8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008acc:	eef1 7a67 	vneg.f32	s15, s15
 8008ad0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ad4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008ad8:	4bbf      	ldr	r3, [pc, #764]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008ada:	edd3 7a00 	vldr	s15, [r3]
 8008ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae6:	f140 8698 	bpl.w	800981a <cal_mollifier_table+0xe0a>
 8008aea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008aee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008af2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008af6:	4bb8      	ldr	r3, [pc, #736]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008af8:	edd3 7a00 	vldr	s15, [r3]
 8008afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b04:	f340 8689 	ble.w	800981a <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008b0e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b12:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b22:	ee17 0a90 	vmov	r0, s15
 8008b26:	f7f7 fd37 	bl	8000598 <__aeabi_f2d>
 8008b2a:	a3a3      	add	r3, pc, #652	; (adr r3, 8008db8 <cal_mollifier_table+0x3a8>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 feb4 	bl	800089c <__aeabi_ddiv>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4614      	mov	r4, r2
 8008b3a:	461d      	mov	r5, r3
 8008b3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b40:	eeb1 7a67 	vneg.f32	s14, s15
 8008b44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008b50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008b54:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b5c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008b60:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008b64:	4b9c      	ldr	r3, [pc, #624]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008b66:	ed93 6a00 	vldr	s12, [r3]
 8008b6a:	4b9b      	ldr	r3, [pc, #620]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008b6c:	edd3 7a00 	vldr	s15, [r3]
 8008b70:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008b74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008b78:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008b7c:	ee16 0a90 	vmov	r0, s13
 8008b80:	f7f7 fd0a 	bl	8000598 <__aeabi_f2d>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	ec43 2b10 	vmov	d0, r2, r3
 8008b8c:	f018 ff44 	bl	8021a18 <exp>
 8008b90:	ec53 2b10 	vmov	r2, r3, d0
 8008b94:	4620      	mov	r0, r4
 8008b96:	4629      	mov	r1, r5
 8008b98:	f7f7 fd56 	bl	8000648 <__aeabi_dmul>
 8008b9c:	4602      	mov	r2, r0
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	f7f8 f828 	bl	8000bf8 <__aeabi_d2f>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008bae:	4b8a      	ldr	r3, [pc, #552]	; (8008dd8 <cal_mollifier_table+0x3c8>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7f7 fcf0 	bl	8000598 <__aeabi_f2d>
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bc0:	eef1 7a67 	vneg.f32	s15, s15
 8008bc4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bcc:	ee16 0a90 	vmov	r0, s13
 8008bd0:	f7f7 fce2 	bl	8000598 <__aeabi_f2d>
 8008bd4:	a37c      	add	r3, pc, #496	; (adr r3, 8008dc8 <cal_mollifier_table+0x3b8>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	f7f7 fe5f 	bl	800089c <__aeabi_ddiv>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	4690      	mov	r8, r2
 8008be4:	4699      	mov	r9, r3
 8008be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008be8:	f7f7 fcd6 	bl	8000598 <__aeabi_f2d>
 8008bec:	a370      	add	r3, pc, #448	; (adr r3, 8008db0 <cal_mollifier_table+0x3a0>)
 8008bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf2:	f7f7 fd29 	bl	8000648 <__aeabi_dmul>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4640      	mov	r0, r8
 8008bfc:	4649      	mov	r1, r9
 8008bfe:	f7f7 fb6d 	bl	80002dc <__adddf3>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4620      	mov	r0, r4
 8008c08:	4629      	mov	r1, r5
 8008c0a:	f7f7 ff8f 	bl	8000b2c <__aeabi_dcmplt>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 8163 	beq.w	8008edc <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008c16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008c1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c22:	edd7 7a05 	vldr	s15, [r7, #20]
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	ee17 0a90 	vmov	r0, s15
 8008c2e:	f7f7 fcb3 	bl	8000598 <__aeabi_f2d>
 8008c32:	a361      	add	r3, pc, #388	; (adr r3, 8008db8 <cal_mollifier_table+0x3a8>)
 8008c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c38:	f7f7 fe30 	bl	800089c <__aeabi_ddiv>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	460b      	mov	r3, r1
 8008c40:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008c44:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c48:	eeb1 7a67 	vneg.f32	s14, s15
 8008c4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c54:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c5c:	ee16 0a90 	vmov	r0, s13
 8008c60:	f7f7 fc9a 	bl	8000598 <__aeabi_f2d>
 8008c64:	4604      	mov	r4, r0
 8008c66:	460d      	mov	r5, r1
 8008c68:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c6c:	eef1 7a67 	vneg.f32	s15, s15
 8008c70:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c78:	ee16 0a90 	vmov	r0, s13
 8008c7c:	f7f7 fc8c 	bl	8000598 <__aeabi_f2d>
 8008c80:	a351      	add	r3, pc, #324	; (adr r3, 8008dc8 <cal_mollifier_table+0x3b8>)
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	f7f7 fe09 	bl	800089c <__aeabi_ddiv>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	f7f7 fcd9 	bl	8000648 <__aeabi_dmul>
 8008c96:	4602      	mov	r2, r0
 8008c98:	460b      	mov	r3, r1
 8008c9a:	4690      	mov	r8, r2
 8008c9c:	4699      	mov	r9, r3
 8008c9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ca2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ca6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008caa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cae:	ee16 0a90 	vmov	r0, s13
 8008cb2:	f7f7 fc71 	bl	8000598 <__aeabi_f2d>
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	460d      	mov	r5, r1
 8008cba:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cbe:	eef1 7a67 	vneg.f32	s15, s15
 8008cc2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cc6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cca:	ee16 0a90 	vmov	r0, s13
 8008cce:	f7f7 fc63 	bl	8000598 <__aeabi_f2d>
 8008cd2:	a33d      	add	r3, pc, #244	; (adr r3, 8008dc8 <cal_mollifier_table+0x3b8>)
 8008cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd8:	f7f7 fde0 	bl	800089c <__aeabi_ddiv>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4692      	mov	sl, r2
 8008ce2:	469b      	mov	fp, r3
 8008ce4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ce8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cf0:	ee16 0a90 	vmov	r0, s13
 8008cf4:	f7f7 fc50 	bl	8000598 <__aeabi_f2d>
 8008cf8:	a333      	add	r3, pc, #204	; (adr r3, 8008dc8 <cal_mollifier_table+0x3b8>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	f7f7 fdcd 	bl	800089c <__aeabi_ddiv>
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	4650      	mov	r0, sl
 8008d08:	4659      	mov	r1, fp
 8008d0a:	f7f7 fc9d 	bl	8000648 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4620      	mov	r0, r4
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fae1 	bl	80002dc <__adddf3>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 fdbb 	bl	800089c <__aeabi_ddiv>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4690      	mov	r8, r2
 8008d2c:	4699      	mov	r9, r3
 8008d2e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d32:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d36:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d3a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d3e:	ee16 0a90 	vmov	r0, s13
 8008d42:	f7f7 fc29 	bl	8000598 <__aeabi_f2d>
 8008d46:	4604      	mov	r4, r0
 8008d48:	460d      	mov	r5, r1
 8008d4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d4e:	eef1 7a67 	vneg.f32	s15, s15
 8008d52:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d56:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d5a:	ee16 0a90 	vmov	r0, s13
 8008d5e:	f7f7 fc1b 	bl	8000598 <__aeabi_f2d>
 8008d62:	a319      	add	r3, pc, #100	; (adr r3, 8008dc8 <cal_mollifier_table+0x3b8>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fd98 	bl	800089c <__aeabi_ddiv>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	460b      	mov	r3, r1
 8008d70:	4692      	mov	sl, r2
 8008d72:	469b      	mov	fp, r3
 8008d74:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d78:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d80:	ee16 0a90 	vmov	r0, s13
 8008d84:	f7f7 fc08 	bl	8000598 <__aeabi_f2d>
 8008d88:	a30f      	add	r3, pc, #60	; (adr r3, 8008dc8 <cal_mollifier_table+0x3b8>)
 8008d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8e:	f7f7 fd85 	bl	800089c <__aeabi_ddiv>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4650      	mov	r0, sl
 8008d98:	4659      	mov	r1, fp
 8008d9a:	f7f7 fc55 	bl	8000648 <__aeabi_dmul>
 8008d9e:	4602      	mov	r2, r0
 8008da0:	460b      	mov	r3, r1
 8008da2:	4620      	mov	r0, r4
 8008da4:	4629      	mov	r1, r5
 8008da6:	f7f7 fa99 	bl	80002dc <__adddf3>
 8008daa:	4602      	mov	r2, r0
 8008dac:	e016      	b.n	8008ddc <cal_mollifier_table+0x3cc>
 8008dae:	bf00      	nop
 8008db0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008db4:	3f50624d 	.word	0x3f50624d
 8008db8:	f9db22d1 	.word	0xf9db22d1
 8008dbc:	3fdc6a7e 	.word	0x3fdc6a7e
 8008dc0:	362cef38 	.word	0x362cef38
 8008dc4:	3fd78b56 	.word	0x3fd78b56
 8008dc8:	04189375 	.word	0x04189375
 8008dcc:	3ff50e56 	.word	0x3ff50e56
 8008dd0:	41700000 	.word	0x41700000
 8008dd4:	c1700000 	.word	0xc1700000
 8008dd8:	20000800 	.word	0x20000800
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4640      	mov	r0, r8
 8008de0:	4649      	mov	r1, r9
 8008de2:	f7f7 fd5b 	bl	800089c <__aeabi_ddiv>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dee:	f7f7 fc2b 	bl	8000648 <__aeabi_dmul>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4692      	mov	sl, r2
 8008df8:	469b      	mov	fp, r3
 8008dfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008dfe:	eeb1 7a67 	vneg.f32	s14, s15
 8008e02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e0a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e12:	ee16 0a90 	vmov	r0, s13
 8008e16:	f7f7 fbbf 	bl	8000598 <__aeabi_f2d>
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008e26:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008e2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e2e:	ee16 0a90 	vmov	r0, s13
 8008e32:	f7f7 fbb1 	bl	8000598 <__aeabi_f2d>
 8008e36:	4680      	mov	r8, r0
 8008e38:	4689      	mov	r9, r1
 8008e3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e3e:	eef1 7a67 	vneg.f32	s15, s15
 8008e42:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e4a:	ee16 0a90 	vmov	r0, s13
 8008e4e:	f7f7 fba3 	bl	8000598 <__aeabi_f2d>
 8008e52:	a3e1      	add	r3, pc, #900	; (adr r3, 80091d8 <cal_mollifier_table+0x7c8>)
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f7f7 fd20 	bl	800089c <__aeabi_ddiv>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e70:	ee16 0a90 	vmov	r0, s13
 8008e74:	f7f7 fb90 	bl	8000598 <__aeabi_f2d>
 8008e78:	a3d7      	add	r3, pc, #860	; (adr r3, 80091d8 <cal_mollifier_table+0x7c8>)
 8008e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7e:	f7f7 fd0d 	bl	800089c <__aeabi_ddiv>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008e8a:	f7f7 fbdd 	bl	8000648 <__aeabi_dmul>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	460b      	mov	r3, r1
 8008e92:	4640      	mov	r0, r8
 8008e94:	4649      	mov	r1, r9
 8008e96:	f7f7 fa21 	bl	80002dc <__adddf3>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 fcfb 	bl	800089c <__aeabi_ddiv>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	ec43 2b17 	vmov	d7, r2, r3
 8008eae:	eeb0 0a47 	vmov.f32	s0, s14
 8008eb2:	eef0 0a67 	vmov.f32	s1, s15
 8008eb6:	f018 fdaf 	bl	8021a18 <exp>
 8008eba:	ec53 2b10 	vmov	r2, r3, d0
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	4659      	mov	r1, fp
 8008ec2:	f7f7 fbc1 	bl	8000648 <__aeabi_dmul>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4610      	mov	r0, r2
 8008ecc:	4619      	mov	r1, r3
 8008ece:	f7f7 fe93 	bl	8000bf8 <__aeabi_d2f>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008ed8:	f000 bcb4 	b.w	8009844 <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008edc:	4bc0      	ldr	r3, [pc, #768]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8008ede:	edd3 7a00 	vldr	s15, [r3]
 8008ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	f140 817b 	bpl.w	80091e4 <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008eee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008ef2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008efa:	edd7 7a05 	vldr	s15, [r7, #20]
 8008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f02:	ee17 0a90 	vmov	r0, s15
 8008f06:	f7f7 fb47 	bl	8000598 <__aeabi_f2d>
 8008f0a:	a3af      	add	r3, pc, #700	; (adr r3, 80091c8 <cal_mollifier_table+0x7b8>)
 8008f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f10:	f7f7 fcc4 	bl	800089c <__aeabi_ddiv>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f20:	eeb1 7a67 	vneg.f32	s14, s15
 8008f24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f2c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008f30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f34:	ee16 0a90 	vmov	r0, s13
 8008f38:	f7f7 fb2e 	bl	8000598 <__aeabi_f2d>
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	460d      	mov	r5, r1
 8008f40:	4ba7      	ldr	r3, [pc, #668]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f7f7 fb27 	bl	8000598 <__aeabi_f2d>
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4689      	mov	r9, r1
 8008f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f50:	f7f7 fb22 	bl	8000598 <__aeabi_f2d>
 8008f54:	a39e      	add	r3, pc, #632	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 8008f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f5a:	f7f7 fb75 	bl	8000648 <__aeabi_dmul>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	460b      	mov	r3, r1
 8008f62:	4640      	mov	r0, r8
 8008f64:	4649      	mov	r1, r9
 8008f66:	f7f7 f9b7 	bl	80002d8 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4620      	mov	r0, r4
 8008f70:	4629      	mov	r1, r5
 8008f72:	f7f7 fb69 	bl	8000648 <__aeabi_dmul>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	e9c7 2300 	strd	r2, r3, [r7]
 8008f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f86:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f8e:	ee16 0a90 	vmov	r0, s13
 8008f92:	f7f7 fb01 	bl	8000598 <__aeabi_f2d>
 8008f96:	4680      	mov	r8, r0
 8008f98:	4689      	mov	r9, r1
 8008f9a:	4b91      	ldr	r3, [pc, #580]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7f7 fafa 	bl	8000598 <__aeabi_f2d>
 8008fa4:	4604      	mov	r4, r0
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008faa:	f7f7 faf5 	bl	8000598 <__aeabi_f2d>
 8008fae:	a388      	add	r3, pc, #544	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 8008fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb4:	f7f7 fb48 	bl	8000648 <__aeabi_dmul>
 8008fb8:	4602      	mov	r2, r0
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 f98a 	bl	80002d8 <__aeabi_dsub>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4692      	mov	sl, r2
 8008fca:	469b      	mov	fp, r3
 8008fcc:	4b84      	ldr	r3, [pc, #528]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f7 fae1 	bl	8000598 <__aeabi_f2d>
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	460d      	mov	r5, r1
 8008fda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fdc:	f7f7 fadc 	bl	8000598 <__aeabi_f2d>
 8008fe0:	a37b      	add	r3, pc, #492	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f7f7 fb2f 	bl	8000648 <__aeabi_dmul>
 8008fea:	4602      	mov	r2, r0
 8008fec:	460b      	mov	r3, r1
 8008fee:	4620      	mov	r0, r4
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	f7f7 f971 	bl	80002d8 <__aeabi_dsub>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	4659      	mov	r1, fp
 8008ffe:	f7f7 fb23 	bl	8000648 <__aeabi_dmul>
 8009002:	4602      	mov	r2, r0
 8009004:	460b      	mov	r3, r1
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 f965 	bl	80002d8 <__aeabi_dsub>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009016:	f7f7 fc41 	bl	800089c <__aeabi_ddiv>
 800901a:	4602      	mov	r2, r0
 800901c:	460b      	mov	r3, r1
 800901e:	e9c7 2300 	strd	r2, r3, [r7]
 8009022:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009026:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800902a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800902e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009032:	ee16 0a90 	vmov	r0, s13
 8009036:	f7f7 faaf 	bl	8000598 <__aeabi_f2d>
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	4b68      	ldr	r3, [pc, #416]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4618      	mov	r0, r3
 8009044:	f7f7 faa8 	bl	8000598 <__aeabi_f2d>
 8009048:	4604      	mov	r4, r0
 800904a:	460d      	mov	r5, r1
 800904c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800904e:	f7f7 faa3 	bl	8000598 <__aeabi_f2d>
 8009052:	a35f      	add	r3, pc, #380	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 8009054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009058:	f7f7 faf6 	bl	8000648 <__aeabi_dmul>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	4620      	mov	r0, r4
 8009062:	4629      	mov	r1, r5
 8009064:	f7f7 f938 	bl	80002d8 <__aeabi_dsub>
 8009068:	4602      	mov	r2, r0
 800906a:	460b      	mov	r3, r1
 800906c:	4692      	mov	sl, r2
 800906e:	469b      	mov	fp, r3
 8009070:	4b5b      	ldr	r3, [pc, #364]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4618      	mov	r0, r3
 8009076:	f7f7 fa8f 	bl	8000598 <__aeabi_f2d>
 800907a:	4604      	mov	r4, r0
 800907c:	460d      	mov	r5, r1
 800907e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009080:	f7f7 fa8a 	bl	8000598 <__aeabi_f2d>
 8009084:	a352      	add	r3, pc, #328	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 fadd 	bl	8000648 <__aeabi_dmul>
 800908e:	4602      	mov	r2, r0
 8009090:	460b      	mov	r3, r1
 8009092:	4620      	mov	r0, r4
 8009094:	4629      	mov	r1, r5
 8009096:	f7f7 f91f 	bl	80002d8 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4650      	mov	r0, sl
 80090a0:	4659      	mov	r1, fp
 80090a2:	f7f7 fad1 	bl	8000648 <__aeabi_dmul>
 80090a6:	4602      	mov	r2, r0
 80090a8:	460b      	mov	r3, r1
 80090aa:	4640      	mov	r0, r8
 80090ac:	4649      	mov	r1, r9
 80090ae:	f7f7 f913 	bl	80002d8 <__aeabi_dsub>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090ba:	f7f7 fbef 	bl	800089c <__aeabi_ddiv>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090c6:	f7f7 fabf 	bl	8000648 <__aeabi_dmul>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80090d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090d6:	eeb1 7a67 	vneg.f32	s14, s15
 80090da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090e2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80090e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80090ea:	ee16 0a90 	vmov	r0, s13
 80090ee:	f7f7 fa53 	bl	8000598 <__aeabi_f2d>
 80090f2:	4680      	mov	r8, r0
 80090f4:	4689      	mov	r9, r1
 80090f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80090fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80090fe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009102:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009106:	ee16 0a90 	vmov	r0, s13
 800910a:	f7f7 fa45 	bl	8000598 <__aeabi_f2d>
 800910e:	4682      	mov	sl, r0
 8009110:	468b      	mov	fp, r1
 8009112:	4b33      	ldr	r3, [pc, #204]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	4618      	mov	r0, r3
 8009118:	f7f7 fa3e 	bl	8000598 <__aeabi_f2d>
 800911c:	4604      	mov	r4, r0
 800911e:	460d      	mov	r5, r1
 8009120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009122:	f7f7 fa39 	bl	8000598 <__aeabi_f2d>
 8009126:	a32a      	add	r3, pc, #168	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 8009128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912c:	f7f7 fa8c 	bl	8000648 <__aeabi_dmul>
 8009130:	4602      	mov	r2, r0
 8009132:	460b      	mov	r3, r1
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 f8ce 	bl	80002d8 <__aeabi_dsub>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	e9c7 2300 	strd	r2, r3, [r7]
 8009144:	4b26      	ldr	r3, [pc, #152]	; (80091e0 <cal_mollifier_table+0x7d0>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4618      	mov	r0, r3
 800914a:	f7f7 fa25 	bl	8000598 <__aeabi_f2d>
 800914e:	4604      	mov	r4, r0
 8009150:	460d      	mov	r5, r1
 8009152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009154:	f7f7 fa20 	bl	8000598 <__aeabi_f2d>
 8009158:	a31d      	add	r3, pc, #116	; (adr r3, 80091d0 <cal_mollifier_table+0x7c0>)
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	f7f7 fa73 	bl	8000648 <__aeabi_dmul>
 8009162:	4602      	mov	r2, r0
 8009164:	460b      	mov	r3, r1
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 f8b5 	bl	80002d8 <__aeabi_dsub>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009176:	f7f7 fa67 	bl	8000648 <__aeabi_dmul>
 800917a:	4602      	mov	r2, r0
 800917c:	460b      	mov	r3, r1
 800917e:	4650      	mov	r0, sl
 8009180:	4659      	mov	r1, fp
 8009182:	f7f7 f8a9 	bl	80002d8 <__aeabi_dsub>
 8009186:	4602      	mov	r2, r0
 8009188:	460b      	mov	r3, r1
 800918a:	4640      	mov	r0, r8
 800918c:	4649      	mov	r1, r9
 800918e:	f7f7 fb85 	bl	800089c <__aeabi_ddiv>
 8009192:	4602      	mov	r2, r0
 8009194:	460b      	mov	r3, r1
 8009196:	ec43 2b17 	vmov	d7, r2, r3
 800919a:	eeb0 0a47 	vmov.f32	s0, s14
 800919e:	eef0 0a67 	vmov.f32	s1, s15
 80091a2:	f018 fc39 	bl	8021a18 <exp>
 80091a6:	ec53 2b10 	vmov	r2, r3, d0
 80091aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80091ae:	f7f7 fa4b 	bl	8000648 <__aeabi_dmul>
 80091b2:	4602      	mov	r2, r0
 80091b4:	460b      	mov	r3, r1
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	f7f7 fd1d 	bl	8000bf8 <__aeabi_d2f>
 80091be:	4602      	mov	r2, r0
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80091c4:	e33e      	b.n	8009844 <cal_mollifier_table+0xe34>
 80091c6:	bf00      	nop
 80091c8:	f9db22d1 	.word	0xf9db22d1
 80091cc:	3fdc6a7e 	.word	0x3fdc6a7e
 80091d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80091d4:	3f50624d 	.word	0x3f50624d
 80091d8:	04189375 	.word	0x04189375
 80091dc:	3ff50e56 	.word	0x3ff50e56
 80091e0:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 80091e4:	4bd4      	ldr	r3, [pc, #848]	; (8009538 <cal_mollifier_table+0xb28>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f7 f9d5 	bl	8000598 <__aeabi_f2d>
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091fe:	ee16 0a90 	vmov	r0, s13
 8009202:	f7f7 f9c9 	bl	8000598 <__aeabi_f2d>
 8009206:	a3c6      	add	r3, pc, #792	; (adr r3, 8009520 <cal_mollifier_table+0xb10>)
 8009208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800920c:	f7f7 fb46 	bl	800089c <__aeabi_ddiv>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	4690      	mov	r8, r2
 8009216:	4699      	mov	r9, r3
 8009218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800921a:	f7f7 f9bd 	bl	8000598 <__aeabi_f2d>
 800921e:	a3c2      	add	r3, pc, #776	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 8009220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009224:	f7f7 fa10 	bl	8000648 <__aeabi_dmul>
 8009228:	4602      	mov	r2, r0
 800922a:	460b      	mov	r3, r1
 800922c:	4640      	mov	r0, r8
 800922e:	4649      	mov	r1, r9
 8009230:	f7f7 f854 	bl	80002dc <__adddf3>
 8009234:	4602      	mov	r2, r0
 8009236:	460b      	mov	r3, r1
 8009238:	4620      	mov	r0, r4
 800923a:	4629      	mov	r1, r5
 800923c:	f7f7 fc76 	bl	8000b2c <__aeabi_dcmplt>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 817a 	beq.w	800953c <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009248:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800924c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009254:	edd7 7a05 	vldr	s15, [r7, #20]
 8009258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800925c:	ee17 0a90 	vmov	r0, s15
 8009260:	f7f7 f99a 	bl	8000598 <__aeabi_f2d>
 8009264:	a3b2      	add	r3, pc, #712	; (adr r3, 8009530 <cal_mollifier_table+0xb20>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 fb17 	bl	800089c <__aeabi_ddiv>
 800926e:	4602      	mov	r2, r0
 8009270:	460b      	mov	r3, r1
 8009272:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009276:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800927a:	eeb1 7a67 	vneg.f32	s14, s15
 800927e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009286:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800928a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800928e:	ee16 0a90 	vmov	r0, s13
 8009292:	f7f7 f981 	bl	8000598 <__aeabi_f2d>
 8009296:	4604      	mov	r4, r0
 8009298:	460d      	mov	r5, r1
 800929a:	4ba7      	ldr	r3, [pc, #668]	; (8009538 <cal_mollifier_table+0xb28>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4618      	mov	r0, r3
 80092a0:	f7f7 f97a 	bl	8000598 <__aeabi_f2d>
 80092a4:	4680      	mov	r8, r0
 80092a6:	4689      	mov	r9, r1
 80092a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092aa:	f7f7 f975 	bl	8000598 <__aeabi_f2d>
 80092ae:	a39e      	add	r3, pc, #632	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 80092b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b4:	f7f7 f9c8 	bl	8000648 <__aeabi_dmul>
 80092b8:	4602      	mov	r2, r0
 80092ba:	460b      	mov	r3, r1
 80092bc:	4640      	mov	r0, r8
 80092be:	4649      	mov	r1, r9
 80092c0:	f7f7 f80a 	bl	80002d8 <__aeabi_dsub>
 80092c4:	4602      	mov	r2, r0
 80092c6:	460b      	mov	r3, r1
 80092c8:	4620      	mov	r0, r4
 80092ca:	4629      	mov	r1, r5
 80092cc:	f7f7 f9bc 	bl	8000648 <__aeabi_dmul>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	e9c7 2300 	strd	r2, r3, [r7]
 80092d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092e0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092e8:	ee16 0a90 	vmov	r0, s13
 80092ec:	f7f7 f954 	bl	8000598 <__aeabi_f2d>
 80092f0:	4680      	mov	r8, r0
 80092f2:	4689      	mov	r9, r1
 80092f4:	4b90      	ldr	r3, [pc, #576]	; (8009538 <cal_mollifier_table+0xb28>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f7f7 f94d 	bl	8000598 <__aeabi_f2d>
 80092fe:	4604      	mov	r4, r0
 8009300:	460d      	mov	r5, r1
 8009302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009304:	f7f7 f948 	bl	8000598 <__aeabi_f2d>
 8009308:	a387      	add	r3, pc, #540	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 800930a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930e:	f7f7 f99b 	bl	8000648 <__aeabi_dmul>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4620      	mov	r0, r4
 8009318:	4629      	mov	r1, r5
 800931a:	f7f6 ffdd 	bl	80002d8 <__aeabi_dsub>
 800931e:	4602      	mov	r2, r0
 8009320:	460b      	mov	r3, r1
 8009322:	4692      	mov	sl, r2
 8009324:	469b      	mov	fp, r3
 8009326:	4b84      	ldr	r3, [pc, #528]	; (8009538 <cal_mollifier_table+0xb28>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4618      	mov	r0, r3
 800932c:	f7f7 f934 	bl	8000598 <__aeabi_f2d>
 8009330:	4604      	mov	r4, r0
 8009332:	460d      	mov	r5, r1
 8009334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009336:	f7f7 f92f 	bl	8000598 <__aeabi_f2d>
 800933a:	a37b      	add	r3, pc, #492	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 800933c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009340:	f7f7 f982 	bl	8000648 <__aeabi_dmul>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4620      	mov	r0, r4
 800934a:	4629      	mov	r1, r5
 800934c:	f7f6 ffc4 	bl	80002d8 <__aeabi_dsub>
 8009350:	4602      	mov	r2, r0
 8009352:	460b      	mov	r3, r1
 8009354:	4650      	mov	r0, sl
 8009356:	4659      	mov	r1, fp
 8009358:	f7f7 f976 	bl	8000648 <__aeabi_dmul>
 800935c:	4602      	mov	r2, r0
 800935e:	460b      	mov	r3, r1
 8009360:	4640      	mov	r0, r8
 8009362:	4649      	mov	r1, r9
 8009364:	f7f6 ffb8 	bl	80002d8 <__aeabi_dsub>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
 800936c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009370:	f7f7 fa94 	bl	800089c <__aeabi_ddiv>
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	e9c7 2300 	strd	r2, r3, [r7]
 800937c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009380:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009384:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009388:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800938c:	ee16 0a90 	vmov	r0, s13
 8009390:	f7f7 f902 	bl	8000598 <__aeabi_f2d>
 8009394:	4680      	mov	r8, r0
 8009396:	4689      	mov	r9, r1
 8009398:	4b67      	ldr	r3, [pc, #412]	; (8009538 <cal_mollifier_table+0xb28>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f7f7 f8fb 	bl	8000598 <__aeabi_f2d>
 80093a2:	4604      	mov	r4, r0
 80093a4:	460d      	mov	r5, r1
 80093a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093a8:	f7f7 f8f6 	bl	8000598 <__aeabi_f2d>
 80093ac:	a35e      	add	r3, pc, #376	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	f7f7 f949 	bl	8000648 <__aeabi_dmul>
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4620      	mov	r0, r4
 80093bc:	4629      	mov	r1, r5
 80093be:	f7f6 ff8b 	bl	80002d8 <__aeabi_dsub>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4692      	mov	sl, r2
 80093c8:	469b      	mov	fp, r3
 80093ca:	4b5b      	ldr	r3, [pc, #364]	; (8009538 <cal_mollifier_table+0xb28>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7f7 f8e2 	bl	8000598 <__aeabi_f2d>
 80093d4:	4604      	mov	r4, r0
 80093d6:	460d      	mov	r5, r1
 80093d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093da:	f7f7 f8dd 	bl	8000598 <__aeabi_f2d>
 80093de:	a352      	add	r3, pc, #328	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 80093e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e4:	f7f7 f930 	bl	8000648 <__aeabi_dmul>
 80093e8:	4602      	mov	r2, r0
 80093ea:	460b      	mov	r3, r1
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f6 ff72 	bl	80002d8 <__aeabi_dsub>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	4650      	mov	r0, sl
 80093fa:	4659      	mov	r1, fp
 80093fc:	f7f7 f924 	bl	8000648 <__aeabi_dmul>
 8009400:	4602      	mov	r2, r0
 8009402:	460b      	mov	r3, r1
 8009404:	4640      	mov	r0, r8
 8009406:	4649      	mov	r1, r9
 8009408:	f7f6 ff66 	bl	80002d8 <__aeabi_dsub>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009414:	f7f7 fa42 	bl	800089c <__aeabi_ddiv>
 8009418:	4602      	mov	r2, r0
 800941a:	460b      	mov	r3, r1
 800941c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009420:	f7f7 f912 	bl	8000648 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800942c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009430:	eeb1 7a67 	vneg.f32	s14, s15
 8009434:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800943c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009440:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009444:	ee16 0a90 	vmov	r0, s13
 8009448:	f7f7 f8a6 	bl	8000598 <__aeabi_f2d>
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009454:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009458:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800945c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009460:	ee16 0a90 	vmov	r0, s13
 8009464:	f7f7 f898 	bl	8000598 <__aeabi_f2d>
 8009468:	4682      	mov	sl, r0
 800946a:	468b      	mov	fp, r1
 800946c:	4b32      	ldr	r3, [pc, #200]	; (8009538 <cal_mollifier_table+0xb28>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4618      	mov	r0, r3
 8009472:	f7f7 f891 	bl	8000598 <__aeabi_f2d>
 8009476:	4604      	mov	r4, r0
 8009478:	460d      	mov	r5, r1
 800947a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800947c:	f7f7 f88c 	bl	8000598 <__aeabi_f2d>
 8009480:	a329      	add	r3, pc, #164	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 8009482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009486:	f7f7 f8df 	bl	8000648 <__aeabi_dmul>
 800948a:	4602      	mov	r2, r0
 800948c:	460b      	mov	r3, r1
 800948e:	4620      	mov	r0, r4
 8009490:	4629      	mov	r1, r5
 8009492:	f7f6 ff21 	bl	80002d8 <__aeabi_dsub>
 8009496:	4602      	mov	r2, r0
 8009498:	460b      	mov	r3, r1
 800949a:	e9c7 2300 	strd	r2, r3, [r7]
 800949e:	4b26      	ldr	r3, [pc, #152]	; (8009538 <cal_mollifier_table+0xb28>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7f7 f878 	bl	8000598 <__aeabi_f2d>
 80094a8:	4604      	mov	r4, r0
 80094aa:	460d      	mov	r5, r1
 80094ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094ae:	f7f7 f873 	bl	8000598 <__aeabi_f2d>
 80094b2:	a31d      	add	r3, pc, #116	; (adr r3, 8009528 <cal_mollifier_table+0xb18>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f7 f8c6 	bl	8000648 <__aeabi_dmul>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f6 ff08 	bl	80002d8 <__aeabi_dsub>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094d0:	f7f7 f8ba 	bl	8000648 <__aeabi_dmul>
 80094d4:	4602      	mov	r2, r0
 80094d6:	460b      	mov	r3, r1
 80094d8:	4650      	mov	r0, sl
 80094da:	4659      	mov	r1, fp
 80094dc:	f7f6 fefc 	bl	80002d8 <__aeabi_dsub>
 80094e0:	4602      	mov	r2, r0
 80094e2:	460b      	mov	r3, r1
 80094e4:	4640      	mov	r0, r8
 80094e6:	4649      	mov	r1, r9
 80094e8:	f7f7 f9d8 	bl	800089c <__aeabi_ddiv>
 80094ec:	4602      	mov	r2, r0
 80094ee:	460b      	mov	r3, r1
 80094f0:	ec43 2b17 	vmov	d7, r2, r3
 80094f4:	eeb0 0a47 	vmov.f32	s0, s14
 80094f8:	eef0 0a67 	vmov.f32	s1, s15
 80094fc:	f018 fa8c 	bl	8021a18 <exp>
 8009500:	ec53 2b10 	vmov	r2, r3, d0
 8009504:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009508:	f7f7 f89e 	bl	8000648 <__aeabi_dmul>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	4610      	mov	r0, r2
 8009512:	4619      	mov	r1, r3
 8009514:	f7f7 fb70 	bl	8000bf8 <__aeabi_d2f>
 8009518:	4602      	mov	r2, r0
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800951e:	e191      	b.n	8009844 <cal_mollifier_table+0xe34>
 8009520:	04189375 	.word	0x04189375
 8009524:	3ff50e56 	.word	0x3ff50e56
 8009528:	d2f1a9fc 	.word	0xd2f1a9fc
 800952c:	3f50624d 	.word	0x3f50624d
 8009530:	f9db22d1 	.word	0xf9db22d1
 8009534:	3fdc6a7e 	.word	0x3fdc6a7e
 8009538:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009542:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009546:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009556:	ee17 0a90 	vmov	r0, s15
 800955a:	f7f7 f81d 	bl	8000598 <__aeabi_f2d>
 800955e:	a3c0      	add	r3, pc, #768	; (adr r3, 8009860 <cal_mollifier_table+0xe50>)
 8009560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009564:	f7f7 f99a 	bl	800089c <__aeabi_ddiv>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009570:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009574:	eeb1 7a67 	vneg.f32	s14, s15
 8009578:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800957c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009580:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009584:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009588:	ee16 0a90 	vmov	r0, s13
 800958c:	f7f7 f804 	bl	8000598 <__aeabi_f2d>
 8009590:	4604      	mov	r4, r0
 8009592:	460d      	mov	r5, r1
 8009594:	4bb0      	ldr	r3, [pc, #704]	; (8009858 <cal_mollifier_table+0xe48>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4618      	mov	r0, r3
 800959a:	f7f6 fffd 	bl	8000598 <__aeabi_f2d>
 800959e:	4680      	mov	r8, r0
 80095a0:	4689      	mov	r9, r1
 80095a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095a4:	f7f6 fff8 	bl	8000598 <__aeabi_f2d>
 80095a8:	a3a9      	add	r3, pc, #676	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 80095aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ae:	f7f7 f84b 	bl	8000648 <__aeabi_dmul>
 80095b2:	4602      	mov	r2, r0
 80095b4:	460b      	mov	r3, r1
 80095b6:	4640      	mov	r0, r8
 80095b8:	4649      	mov	r1, r9
 80095ba:	f7f6 fe8d 	bl	80002d8 <__aeabi_dsub>
 80095be:	4602      	mov	r2, r0
 80095c0:	460b      	mov	r3, r1
 80095c2:	4620      	mov	r0, r4
 80095c4:	4629      	mov	r1, r5
 80095c6:	f7f7 f83f 	bl	8000648 <__aeabi_dmul>
 80095ca:	4602      	mov	r2, r0
 80095cc:	460b      	mov	r3, r1
 80095ce:	e9c7 2300 	strd	r2, r3, [r7]
 80095d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095e2:	ee16 0a90 	vmov	r0, s13
 80095e6:	f7f6 ffd7 	bl	8000598 <__aeabi_f2d>
 80095ea:	4680      	mov	r8, r0
 80095ec:	4689      	mov	r9, r1
 80095ee:	4b9a      	ldr	r3, [pc, #616]	; (8009858 <cal_mollifier_table+0xe48>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7f6 ffd0 	bl	8000598 <__aeabi_f2d>
 80095f8:	4604      	mov	r4, r0
 80095fa:	460d      	mov	r5, r1
 80095fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095fe:	f7f6 ffcb 	bl	8000598 <__aeabi_f2d>
 8009602:	a393      	add	r3, pc, #588	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f7 f81e 	bl	8000648 <__aeabi_dmul>
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	4620      	mov	r0, r4
 8009612:	4629      	mov	r1, r5
 8009614:	f7f6 fe60 	bl	80002d8 <__aeabi_dsub>
 8009618:	4602      	mov	r2, r0
 800961a:	460b      	mov	r3, r1
 800961c:	4692      	mov	sl, r2
 800961e:	469b      	mov	fp, r3
 8009620:	4b8d      	ldr	r3, [pc, #564]	; (8009858 <cal_mollifier_table+0xe48>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4618      	mov	r0, r3
 8009626:	f7f6 ffb7 	bl	8000598 <__aeabi_f2d>
 800962a:	4604      	mov	r4, r0
 800962c:	460d      	mov	r5, r1
 800962e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009630:	f7f6 ffb2 	bl	8000598 <__aeabi_f2d>
 8009634:	a386      	add	r3, pc, #536	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	f7f7 f805 	bl	8000648 <__aeabi_dmul>
 800963e:	4602      	mov	r2, r0
 8009640:	460b      	mov	r3, r1
 8009642:	4620      	mov	r0, r4
 8009644:	4629      	mov	r1, r5
 8009646:	f7f6 fe47 	bl	80002d8 <__aeabi_dsub>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	4650      	mov	r0, sl
 8009650:	4659      	mov	r1, fp
 8009652:	f7f6 fff9 	bl	8000648 <__aeabi_dmul>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	f7f6 fe3b 	bl	80002d8 <__aeabi_dsub>
 8009662:	4602      	mov	r2, r0
 8009664:	460b      	mov	r3, r1
 8009666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800966a:	f7f7 f917 	bl	800089c <__aeabi_ddiv>
 800966e:	4602      	mov	r2, r0
 8009670:	460b      	mov	r3, r1
 8009672:	e9c7 2300 	strd	r2, r3, [r7]
 8009676:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800967a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800967e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009686:	ee16 0a90 	vmov	r0, s13
 800968a:	f7f6 ff85 	bl	8000598 <__aeabi_f2d>
 800968e:	4680      	mov	r8, r0
 8009690:	4689      	mov	r9, r1
 8009692:	4b71      	ldr	r3, [pc, #452]	; (8009858 <cal_mollifier_table+0xe48>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4618      	mov	r0, r3
 8009698:	f7f6 ff7e 	bl	8000598 <__aeabi_f2d>
 800969c:	4604      	mov	r4, r0
 800969e:	460d      	mov	r5, r1
 80096a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096a2:	f7f6 ff79 	bl	8000598 <__aeabi_f2d>
 80096a6:	a36a      	add	r3, pc, #424	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f7f6 ffcc 	bl	8000648 <__aeabi_dmul>
 80096b0:	4602      	mov	r2, r0
 80096b2:	460b      	mov	r3, r1
 80096b4:	4620      	mov	r0, r4
 80096b6:	4629      	mov	r1, r5
 80096b8:	f7f6 fe0e 	bl	80002d8 <__aeabi_dsub>
 80096bc:	4602      	mov	r2, r0
 80096be:	460b      	mov	r3, r1
 80096c0:	4692      	mov	sl, r2
 80096c2:	469b      	mov	fp, r3
 80096c4:	4b64      	ldr	r3, [pc, #400]	; (8009858 <cal_mollifier_table+0xe48>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7f6 ff65 	bl	8000598 <__aeabi_f2d>
 80096ce:	4604      	mov	r4, r0
 80096d0:	460d      	mov	r5, r1
 80096d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096d4:	f7f6 ff60 	bl	8000598 <__aeabi_f2d>
 80096d8:	a35d      	add	r3, pc, #372	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 80096da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096de:	f7f6 ffb3 	bl	8000648 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4620      	mov	r0, r4
 80096e8:	4629      	mov	r1, r5
 80096ea:	f7f6 fdf5 	bl	80002d8 <__aeabi_dsub>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	4650      	mov	r0, sl
 80096f4:	4659      	mov	r1, fp
 80096f6:	f7f6 ffa7 	bl	8000648 <__aeabi_dmul>
 80096fa:	4602      	mov	r2, r0
 80096fc:	460b      	mov	r3, r1
 80096fe:	4640      	mov	r0, r8
 8009700:	4649      	mov	r1, r9
 8009702:	f7f6 fde9 	bl	80002d8 <__aeabi_dsub>
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800970e:	f7f7 f8c5 	bl	800089c <__aeabi_ddiv>
 8009712:	4602      	mov	r2, r0
 8009714:	460b      	mov	r3, r1
 8009716:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800971a:	f7f6 ff95 	bl	8000648 <__aeabi_dmul>
 800971e:	4602      	mov	r2, r0
 8009720:	460b      	mov	r3, r1
 8009722:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009726:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800972a:	eeb1 7a67 	vneg.f32	s14, s15
 800972e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009736:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800973a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800973e:	ee16 0a90 	vmov	r0, s13
 8009742:	f7f6 ff29 	bl	8000598 <__aeabi_f2d>
 8009746:	4680      	mov	r8, r0
 8009748:	4689      	mov	r9, r1
 800974a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800974e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009752:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009756:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800975a:	ee16 0a90 	vmov	r0, s13
 800975e:	f7f6 ff1b 	bl	8000598 <__aeabi_f2d>
 8009762:	4682      	mov	sl, r0
 8009764:	468b      	mov	fp, r1
 8009766:	4b3c      	ldr	r3, [pc, #240]	; (8009858 <cal_mollifier_table+0xe48>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4618      	mov	r0, r3
 800976c:	f7f6 ff14 	bl	8000598 <__aeabi_f2d>
 8009770:	4604      	mov	r4, r0
 8009772:	460d      	mov	r5, r1
 8009774:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009776:	f7f6 ff0f 	bl	8000598 <__aeabi_f2d>
 800977a:	a335      	add	r3, pc, #212	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 800977c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009780:	f7f6 ff62 	bl	8000648 <__aeabi_dmul>
 8009784:	4602      	mov	r2, r0
 8009786:	460b      	mov	r3, r1
 8009788:	4620      	mov	r0, r4
 800978a:	4629      	mov	r1, r5
 800978c:	f7f6 fda4 	bl	80002d8 <__aeabi_dsub>
 8009790:	4602      	mov	r2, r0
 8009792:	460b      	mov	r3, r1
 8009794:	e9c7 2300 	strd	r2, r3, [r7]
 8009798:	4b2f      	ldr	r3, [pc, #188]	; (8009858 <cal_mollifier_table+0xe48>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4618      	mov	r0, r3
 800979e:	f7f6 fefb 	bl	8000598 <__aeabi_f2d>
 80097a2:	4604      	mov	r4, r0
 80097a4:	460d      	mov	r5, r1
 80097a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80097a8:	f7f6 fef6 	bl	8000598 <__aeabi_f2d>
 80097ac:	a328      	add	r3, pc, #160	; (adr r3, 8009850 <cal_mollifier_table+0xe40>)
 80097ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b2:	f7f6 ff49 	bl	8000648 <__aeabi_dmul>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4620      	mov	r0, r4
 80097bc:	4629      	mov	r1, r5
 80097be:	f7f6 fd8b 	bl	80002d8 <__aeabi_dsub>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80097ca:	f7f6 ff3d 	bl	8000648 <__aeabi_dmul>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4650      	mov	r0, sl
 80097d4:	4659      	mov	r1, fp
 80097d6:	f7f6 fd7f 	bl	80002d8 <__aeabi_dsub>
 80097da:	4602      	mov	r2, r0
 80097dc:	460b      	mov	r3, r1
 80097de:	4640      	mov	r0, r8
 80097e0:	4649      	mov	r1, r9
 80097e2:	f7f7 f85b 	bl	800089c <__aeabi_ddiv>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	ec43 2b17 	vmov	d7, r2, r3
 80097ee:	eeb0 0a47 	vmov.f32	s0, s14
 80097f2:	eef0 0a67 	vmov.f32	s1, s15
 80097f6:	f018 f90f 	bl	8021a18 <exp>
 80097fa:	ec53 2b10 	vmov	r2, r3, d0
 80097fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009802:	f7f6 ff21 	bl	8000648 <__aeabi_dmul>
 8009806:	4602      	mov	r2, r0
 8009808:	460b      	mov	r3, r1
 800980a:	4610      	mov	r0, r2
 800980c:	4619      	mov	r1, r3
 800980e:	f7f7 f9f3 	bl	8000bf8 <__aeabi_d2f>
 8009812:	4602      	mov	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009818:	e014      	b.n	8009844 <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	ed93 7a00 	vldr	s14, [r3]
 800982e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009832:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 800983c:	4b07      	ldr	r3, [pc, #28]	; (800985c <cal_mollifier_table+0xe4c>)
 800983e:	2204      	movs	r2, #4
 8009840:	701a      	strb	r2, [r3, #0]
		}

}
 8009842:	bf00      	nop
 8009844:	bf00      	nop
 8009846:	3730      	adds	r7, #48	; 0x30
 8009848:	46bd      	mov	sp, r7
 800984a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800984e:	bf00      	nop
 8009850:	d2f1a9fc 	.word	0xd2f1a9fc
 8009854:	3f50624d 	.word	0x3f50624d
 8009858:	20000800 	.word	0x20000800
 800985c:	20000804 	.word	0x20000804
 8009860:	f9db22d1 	.word	0xf9db22d1
 8009864:	3fdc6a7e 	.word	0x3fdc6a7e

08009868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800986e:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <MX_DMA_Init+0x50>)
 8009870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009872:	4a11      	ldr	r2, [pc, #68]	; (80098b8 <MX_DMA_Init+0x50>)
 8009874:	f043 0304 	orr.w	r3, r3, #4
 8009878:	6493      	str	r3, [r2, #72]	; 0x48
 800987a:	4b0f      	ldr	r3, [pc, #60]	; (80098b8 <MX_DMA_Init+0x50>)
 800987c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987e:	f003 0304 	and.w	r3, r3, #4
 8009882:	607b      	str	r3, [r7, #4]
 8009884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009886:	4b0c      	ldr	r3, [pc, #48]	; (80098b8 <MX_DMA_Init+0x50>)
 8009888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800988a:	4a0b      	ldr	r2, [pc, #44]	; (80098b8 <MX_DMA_Init+0x50>)
 800988c:	f043 0301 	orr.w	r3, r3, #1
 8009890:	6493      	str	r3, [r2, #72]	; 0x48
 8009892:	4b09      	ldr	r3, [pc, #36]	; (80098b8 <MX_DMA_Init+0x50>)
 8009894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009896:	f003 0301 	and.w	r3, r3, #1
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800989e:	2200      	movs	r2, #0
 80098a0:	2100      	movs	r1, #0
 80098a2:	200b      	movs	r0, #11
 80098a4:	f010 faaf 	bl	8019e06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80098a8:	200b      	movs	r0, #11
 80098aa:	f010 fac6 	bl	8019e3a <HAL_NVIC_EnableIRQ>

}
 80098ae:	bf00      	nop
 80098b0:	3708      	adds	r7, #8
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	40021000 	.word	0x40021000

080098bc <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
	error_mode=0;
 80098c0:	4b11      	ldr	r3, [pc, #68]	; (8009908 <init_FailSafe+0x4c>)
 80098c2:	2200      	movs	r2, #0
 80098c4:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 80098c6:	4b11      	ldr	r3, [pc, #68]	; (800990c <init_FailSafe+0x50>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80098cc:	4b10      	ldr	r3, [pc, #64]	; (8009910 <init_FailSafe+0x54>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 80098d2:	4b10      	ldr	r3, [pc, #64]	; (8009914 <init_FailSafe+0x58>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 80098d8:	4b0f      	ldr	r3, [pc, #60]	; (8009918 <init_FailSafe+0x5c>)
 80098da:	4a10      	ldr	r2, [pc, #64]	; (800991c <init_FailSafe+0x60>)
 80098dc:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <init_FailSafe+0x64>)
 80098e0:	4a10      	ldr	r2, [pc, #64]	; (8009924 <init_FailSafe+0x68>)
 80098e2:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 80098e4:	4b10      	ldr	r3, [pc, #64]	; (8009928 <init_FailSafe+0x6c>)
 80098e6:	4a0d      	ldr	r2, [pc, #52]	; (800991c <init_FailSafe+0x60>)
 80098e8:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=2000;//3000
 80098ea:	4b10      	ldr	r3, [pc, #64]	; (800992c <init_FailSafe+0x70>)
 80098ec:	4a10      	ldr	r2, [pc, #64]	; (8009930 <init_FailSafe+0x74>)
 80098ee:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 80098f0:	4b10      	ldr	r3, [pc, #64]	; (8009934 <init_FailSafe+0x78>)
 80098f2:	4a11      	ldr	r2, [pc, #68]	; (8009938 <init_FailSafe+0x7c>)
 80098f4:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1500;
 80098f6:	4b11      	ldr	r3, [pc, #68]	; (800993c <init_FailSafe+0x80>)
 80098f8:	4a08      	ldr	r2, [pc, #32]	; (800991c <init_FailSafe+0x60>)
 80098fa:	601a      	str	r2, [r3, #0]
}
 80098fc:	bf00      	nop
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	20000807 	.word	0x20000807
 800990c:	20000806 	.word	0x20000806
 8009910:	20000808 	.word	0x20000808
 8009914:	20000824 	.word	0x20000824
 8009918:	2000080c 	.word	0x2000080c
 800991c:	44bb8000 	.word	0x44bb8000
 8009920:	20000810 	.word	0x20000810
 8009924:	44480000 	.word	0x44480000
 8009928:	20000814 	.word	0x20000814
 800992c:	20000818 	.word	0x20000818
 8009930:	44fa0000 	.word	0x44fa0000
 8009934:	2000081c 	.word	0x2000081c
 8009938:	44ed8000 	.word	0x44ed8000
 800993c:	20000820 	.word	0x20000820

08009940 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8009946:	4b6e      	ldr	r3, [pc, #440]	; (8009b00 <interrupt_FailSafe+0x1c0>)
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800994e:	4b6d      	ldr	r3, [pc, #436]	; (8009b04 <interrupt_FailSafe+0x1c4>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009954:	4b6c      	ldr	r3, [pc, #432]	; (8009b08 <interrupt_FailSafe+0x1c8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800995a:	4b6c      	ldr	r3, [pc, #432]	; (8009b0c <interrupt_FailSafe+0x1cc>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	e008      	b.n	8009974 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8009962:	4b6b      	ldr	r3, [pc, #428]	; (8009b10 <interrupt_FailSafe+0x1d0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8009968:	4b6a      	ldr	r3, [pc, #424]	; (8009b14 <interrupt_FailSafe+0x1d4>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 800996e:	4b6a      	ldr	r3, [pc, #424]	; (8009b18 <interrupt_FailSafe+0x1d8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8009974:	4b69      	ldr	r3, [pc, #420]	; (8009b1c <interrupt_FailSafe+0x1dc>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d062      	beq.n	8009a42 <interrupt_FailSafe+0x102>
 800997c:	4b67      	ldr	r3, [pc, #412]	; (8009b1c <interrupt_FailSafe+0x1dc>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b03      	cmp	r3, #3
 8009982:	d05e      	beq.n	8009a42 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8009984:	4b66      	ldr	r3, [pc, #408]	; (8009b20 <interrupt_FailSafe+0x1e0>)
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d15a      	bne.n	8009a42 <interrupt_FailSafe+0x102>
 800998c:	4b65      	ldr	r3, [pc, #404]	; (8009b24 <interrupt_FailSafe+0x1e4>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d156      	bne.n	8009a42 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8009994:	4b64      	ldr	r3, [pc, #400]	; (8009b28 <interrupt_FailSafe+0x1e8>)
 8009996:	ed93 7a00 	vldr	s14, [r3]
 800999a:	4b64      	ldr	r3, [pc, #400]	; (8009b2c <interrupt_FailSafe+0x1ec>)
 800999c:	edd3 7a00 	vldr	s15, [r3]
 80099a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099a4:	eef0 7ae7 	vabs.f32	s15, s15
 80099a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80099ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099b4:	d809      	bhi.n	80099ca <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80099b6:	f7fe f879 	bl	8007aac <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 80099ba:	2001      	movs	r0, #1
 80099bc:	f7fd fa8e 	bl	8006edc <pl_yellow_LED_count>
						error_mode = 1;
 80099c0:	4b58      	ldr	r3, [pc, #352]	; (8009b24 <interrupt_FailSafe+0x1e4>)
 80099c2:	2201      	movs	r2, #1
 80099c4:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80099c6:	f7fa fee1 	bl	800478c <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 80099ca:	4b59      	ldr	r3, [pc, #356]	; (8009b30 <interrupt_FailSafe+0x1f0>)
 80099cc:	edd3 7a00 	vldr	s15, [r3]
 80099d0:	ed97 7a01 	vldr	s14, [r7, #4]
 80099d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80099d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099dc:	d809      	bhi.n	80099f2 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80099de:	f7fe f865 	bl	8007aac <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 80099e2:	2002      	movs	r0, #2
 80099e4:	f7fd fa7a 	bl	8006edc <pl_yellow_LED_count>
						error_mode = 1;
 80099e8:	4b4e      	ldr	r3, [pc, #312]	; (8009b24 <interrupt_FailSafe+0x1e4>)
 80099ea:	2201      	movs	r2, #1
 80099ec:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 80099ee:	f7fa fecd 	bl	800478c <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 80099f2:	4b50      	ldr	r3, [pc, #320]	; (8009b34 <interrupt_FailSafe+0x1f4>)
 80099f4:	ed93 7a00 	vldr	s14, [r3]
 80099f8:	4b4f      	ldr	r3, [pc, #316]	; (8009b38 <interrupt_FailSafe+0x1f8>)
 80099fa:	edd3 6a00 	vldr	s13, [r3]
 80099fe:	4b4f      	ldr	r3, [pc, #316]	; (8009b3c <interrupt_FailSafe+0x1fc>)
 8009a00:	edd3 7a00 	vldr	s15, [r3]
 8009a04:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009a08:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009a0c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a14:	eef0 7ae7 	vabs.f32	s15, s15
 8009a18:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a24:	d80d      	bhi.n	8009a42 <interrupt_FailSafe+0x102>
 8009a26:	4b3d      	ldr	r3, [pc, #244]	; (8009b1c <interrupt_FailSafe+0x1dc>)
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d109      	bne.n	8009a42 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8009a2e:	f7fe f83d 	bl	8007aac <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009a32:	2004      	movs	r0, #4
 8009a34:	f7fd fa52 	bl	8006edc <pl_yellow_LED_count>
						error_mode = 1;
 8009a38:	4b3a      	ldr	r3, [pc, #232]	; (8009b24 <interrupt_FailSafe+0x1e4>)
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009a3e:	f7fa fea5 	bl	800478c <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009a42:	4b38      	ldr	r3, [pc, #224]	; (8009b24 <interrupt_FailSafe+0x1e4>)
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d153      	bne.n	8009af2 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8009a4a:	4b3d      	ldr	r3, [pc, #244]	; (8009b40 <interrupt_FailSafe+0x200>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009a50:	4b3c      	ldr	r3, [pc, #240]	; (8009b44 <interrupt_FailSafe+0x204>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	4a3b      	ldr	r2, [pc, #236]	; (8009b44 <interrupt_FailSafe+0x204>)
 8009a58:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8009a5a:	4b3a      	ldr	r3, [pc, #232]	; (8009b44 <interrupt_FailSafe+0x204>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a62:	dc05      	bgt.n	8009a70 <interrupt_FailSafe+0x130>
			init_WallControl();
 8009a64:	f7fa ffc8 	bl	80049f8 <init_WallControl>
			modeacc=100;//エラー用
 8009a68:	4b2c      	ldr	r3, [pc, #176]	; (8009b1c <interrupt_FailSafe+0x1dc>)
 8009a6a:	2264      	movs	r2, #100	; 0x64
 8009a6c:	701a      	strb	r2, [r3, #0]
 8009a6e:	e009      	b.n	8009a84 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8009a70:	2000      	movs	r0, #0
 8009a72:	f7fd ff87 	bl	8007984 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8009a76:	f7fd ffeb 	bl	8007a50 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8009a7a:	f7fe f817 	bl	8007aac <pl_FunMotor_stop>
			modeacc=0;
 8009a7e:	4b27      	ldr	r3, [pc, #156]	; (8009b1c <interrupt_FailSafe+0x1dc>)
 8009a80:	2200      	movs	r2, #0
 8009a82:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8009a84:	4b30      	ldr	r3, [pc, #192]	; (8009b48 <interrupt_FailSafe+0x208>)
 8009a86:	f04f 32ff 	mov.w	r2, #4294967295
 8009a8a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8009a8c:	4b2f      	ldr	r3, [pc, #188]	; (8009b4c <interrupt_FailSafe+0x20c>)
 8009a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a92:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8009a94:	4b2e      	ldr	r3, [pc, #184]	; (8009b50 <interrupt_FailSafe+0x210>)
 8009a96:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9a:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8009a9c:	4b2d      	ldr	r3, [pc, #180]	; (8009b54 <interrupt_FailSafe+0x214>)
 8009a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009aa2:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8009aa4:	4b2c      	ldr	r3, [pc, #176]	; (8009b58 <interrupt_FailSafe+0x218>)
 8009aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8009aaa:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8009aac:	4b2b      	ldr	r3, [pc, #172]	; (8009b5c <interrupt_FailSafe+0x21c>)
 8009aae:	f04f 32ff 	mov.w	r2, #4294967295
 8009ab2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 8009ab4:	4b2a      	ldr	r3, [pc, #168]	; (8009b60 <interrupt_FailSafe+0x220>)
 8009ab6:	4a2b      	ldr	r2, [pc, #172]	; (8009b64 <interrupt_FailSafe+0x224>)
 8009ab8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 8009aba:	4b2b      	ldr	r3, [pc, #172]	; (8009b68 <interrupt_FailSafe+0x228>)
 8009abc:	4a29      	ldr	r2, [pc, #164]	; (8009b64 <interrupt_FailSafe+0x224>)
 8009abe:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009ac0:	4b2a      	ldr	r3, [pc, #168]	; (8009b6c <interrupt_FailSafe+0x22c>)
 8009ac2:	4a2b      	ldr	r2, [pc, #172]	; (8009b70 <interrupt_FailSafe+0x230>)
 8009ac4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009ac6:	4b2b      	ldr	r3, [pc, #172]	; (8009b74 <interrupt_FailSafe+0x234>)
 8009ac8:	4a29      	ldr	r2, [pc, #164]	; (8009b70 <interrupt_FailSafe+0x230>)
 8009aca:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009acc:	4b2a      	ldr	r3, [pc, #168]	; (8009b78 <interrupt_FailSafe+0x238>)
 8009ace:	4a2b      	ldr	r2, [pc, #172]	; (8009b7c <interrupt_FailSafe+0x23c>)
 8009ad0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009ad2:	4b2b      	ldr	r3, [pc, #172]	; (8009b80 <interrupt_FailSafe+0x240>)
 8009ad4:	4a29      	ldr	r2, [pc, #164]	; (8009b7c <interrupt_FailSafe+0x23c>)
 8009ad6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009ad8:	4b2a      	ldr	r3, [pc, #168]	; (8009b84 <interrupt_FailSafe+0x244>)
 8009ada:	4a28      	ldr	r2, [pc, #160]	; (8009b7c <interrupt_FailSafe+0x23c>)
 8009adc:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009ade:	4b2a      	ldr	r3, [pc, #168]	; (8009b88 <interrupt_FailSafe+0x248>)
 8009ae0:	4a26      	ldr	r2, [pc, #152]	; (8009b7c <interrupt_FailSafe+0x23c>)
 8009ae2:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009ae4:	4b29      	ldr	r3, [pc, #164]	; (8009b8c <interrupt_FailSafe+0x24c>)
 8009ae6:	2204      	movs	r2, #4
 8009ae8:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009aea:	4b29      	ldr	r3, [pc, #164]	; (8009b90 <interrupt_FailSafe+0x250>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009af0:	e002      	b.n	8009af8 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009af2:	4b14      	ldr	r3, [pc, #80]	; (8009b44 <interrupt_FailSafe+0x204>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	601a      	str	r2, [r3, #0]
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000808 	.word	0x20000808
 8009b04:	2000080c 	.word	0x2000080c
 8009b08:	20000810 	.word	0x20000810
 8009b0c:	20000814 	.word	0x20000814
 8009b10:	20000818 	.word	0x20000818
 8009b14:	2000081c 	.word	0x2000081c
 8009b18:	20000820 	.word	0x20000820
 8009b1c:	20000528 	.word	0x20000528
 8009b20:	20000806 	.word	0x20000806
 8009b24:	20000807 	.word	0x20000807
 8009b28:	200004e4 	.word	0x200004e4
 8009b2c:	20000268 	.word	0x20000268
 8009b30:	20000274 	.word	0x20000274
 8009b34:	200004d8 	.word	0x200004d8
 8009b38:	2000025c 	.word	0x2000025c
 8009b3c:	20000258 	.word	0x20000258
 8009b40:	2000d96c 	.word	0x2000d96c
 8009b44:	20000824 	.word	0x20000824
 8009b48:	200005b8 	.word	0x200005b8
 8009b4c:	200005b4 	.word	0x200005b4
 8009b50:	200005c0 	.word	0x200005c0
 8009b54:	200005bc 	.word	0x200005bc
 8009b58:	200005c8 	.word	0x200005c8
 8009b5c:	200005c4 	.word	0x200005c4
 8009b60:	200005d0 	.word	0x200005d0
 8009b64:	42480000 	.word	0x42480000
 8009b68:	200005cc 	.word	0x200005cc
 8009b6c:	200005d8 	.word	0x200005d8
 8009b70:	41a00000 	.word	0x41a00000
 8009b74:	200005d4 	.word	0x200005d4
 8009b78:	200005e0 	.word	0x200005e0
 8009b7c:	420c0000 	.word	0x420c0000
 8009b80:	200005dc 	.word	0x200005dc
 8009b84:	200005e8 	.word	0x200005e8
 8009b88:	200005e4 	.word	0x200005e4
 8009b8c:	20000804 	.word	0x20000804
 8009b90:	20000592 	.word	0x20000592

08009b94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b08a      	sub	sp, #40	; 0x28
 8009b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b9a:	f107 0314 	add.w	r3, r7, #20
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	605a      	str	r2, [r3, #4]
 8009ba4:	609a      	str	r2, [r3, #8]
 8009ba6:	60da      	str	r2, [r3, #12]
 8009ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009baa:	4b3a      	ldr	r3, [pc, #232]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bae:	4a39      	ldr	r2, [pc, #228]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bb0:	f043 0304 	orr.w	r3, r3, #4
 8009bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bb6:	4b37      	ldr	r3, [pc, #220]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bba:	f003 0304 	and.w	r3, r3, #4
 8009bbe:	613b      	str	r3, [r7, #16]
 8009bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009bc2:	4b34      	ldr	r3, [pc, #208]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc6:	4a33      	ldr	r2, [pc, #204]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bc8:	f043 0320 	orr.w	r3, r3, #32
 8009bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bce:	4b31      	ldr	r3, [pc, #196]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	60fb      	str	r3, [r7, #12]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bda:	4b2e      	ldr	r3, [pc, #184]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bde:	4a2d      	ldr	r2, [pc, #180]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009be0:	f043 0301 	orr.w	r3, r3, #1
 8009be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009be6:	4b2b      	ldr	r3, [pc, #172]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	60bb      	str	r3, [r7, #8]
 8009bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009bf2:	4b28      	ldr	r3, [pc, #160]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf6:	4a27      	ldr	r2, [pc, #156]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009bf8:	f043 0302 	orr.w	r3, r3, #2
 8009bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009bfe:	4b25      	ldr	r3, [pc, #148]	; (8009c94 <MX_GPIO_Init+0x100>)
 8009c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009c10:	4821      	ldr	r0, [pc, #132]	; (8009c98 <MX_GPIO_Init+0x104>)
 8009c12:	f010 ffe3 	bl	801abdc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009c16:	2200      	movs	r2, #0
 8009c18:	f648 1110 	movw	r1, #35088	; 0x8910
 8009c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c20:	f010 ffdc 	bl	801abdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009c24:	2200      	movs	r2, #0
 8009c26:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009c2a:	481c      	ldr	r0, [pc, #112]	; (8009c9c <MX_GPIO_Init+0x108>)
 8009c2c:	f010 ffd6 	bl	801abdc <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009c30:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009c34:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c36:	2301      	movs	r3, #1
 8009c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009c42:	f107 0314 	add.w	r3, r7, #20
 8009c46:	4619      	mov	r1, r3
 8009c48:	4813      	ldr	r0, [pc, #76]	; (8009c98 <MX_GPIO_Init+0x104>)
 8009c4a:	f010 fe45 	bl	801a8d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009c4e:	f648 1310 	movw	r3, #35088	; 0x8910
 8009c52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c54:	2301      	movs	r3, #1
 8009c56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c60:	f107 0314 	add.w	r3, r7, #20
 8009c64:	4619      	mov	r1, r3
 8009c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009c6a:	f010 fe35 	bl	801a8d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009c6e:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009c72:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009c74:	2301      	movs	r3, #1
 8009c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c80:	f107 0314 	add.w	r3, r7, #20
 8009c84:	4619      	mov	r1, r3
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <MX_GPIO_Init+0x108>)
 8009c88:	f010 fe26 	bl	801a8d8 <HAL_GPIO_Init>

}
 8009c8c:	bf00      	nop
 8009c8e:	3728      	adds	r7, #40	; 0x28
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	40021000 	.word	0x40021000
 8009c98:	48000800 	.word	0x48000800
 8009c9c:	48000400 	.word	0x48000400

08009ca0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009ca0:	b590      	push	{r4, r7, lr}
 8009ca2:	b087      	sub	sp, #28
 8009ca4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ca6:	f00d fd65 	bl	8017774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009caa:	f000 f8a9 	bl	8009e00 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009cae:	f7ff fddb 	bl	8009868 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009cb2:	f7ff ff6f 	bl	8009b94 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009cb6:	f7fe f9d5 	bl	8008064 <MX_ADC1_Init>
  MX_SPI1_Init();
 8009cba:	f00c fbbb 	bl	8016434 <MX_SPI1_Init>
  MX_TIM6_Init();
 8009cbe:	f00c fe31 	bl	8016924 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009cc2:	f00c fe65 	bl	8016990 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009cc6:	f00d fc87 	bl	80175d8 <MX_USART1_UART_Init>
  MX_DMA_Init();
 8009cca:	f7ff fdcd 	bl	8009868 <MX_DMA_Init>
  MX_SPI3_Init();
 8009cce:	f00c fbef 	bl	80164b0 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009cd2:	f00c fefd 	bl	8016ad0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009cd6:	f7fe f8d7 	bl	8007e88 <pl_timer_init>
  pl_gyro_init();
 8009cda:	f7fd fd67 	bl	80077ac <pl_gyro_init>
  pl_sensor_init();
 8009cde:	f7fd ff15 	bl	8007b0c <pl_sensor_init>
  reset_distance();
 8009ce2:	f7f7 f95b 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009ce6:	f7f7 fce3 	bl	80016b0 <reset_gyro>
  reset_speed();
 8009cea:	f7f7 f995 	bl	8001018 <reset_speed>
  record_reset();
 8009cee:	f00c f92f 	bl	8015f50 <record_reset>
  pl_motor_init();
 8009cf2:	f7fd fe21 	bl	8007938 <pl_motor_init>
  PID_Init();
 8009cf6:	f7fa fd0d 	bl	8004714 <PID_Init>
  init_WallControl();
 8009cfa:	f7fa fe7d 	bl	80049f8 <init_WallControl>
  Control_mode_Init();
 8009cfe:	f7f8 f839 	bl	8001d74 <Control_mode_Init>
  init_FailSafe();
 8009d02:	f7ff fddb 	bl	80098bc <init_FailSafe>
  input_parameter();
 8009d06:	f00d f8c9 	bl	8016e9c <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d0e:	4b37      	ldr	r3, [pc, #220]	; (8009dec <main+0x14c>)
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d14:	4b35      	ldr	r3, [pc, #212]	; (8009dec <main+0x14c>)
 8009d16:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d18:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d1a:	4b34      	ldr	r3, [pc, #208]	; (8009dec <main+0x14c>)
 8009d1c:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d1e:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d20:	4b32      	ldr	r3, [pc, #200]	; (8009dec <main+0x14c>)
 8009d22:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d24:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009d26:	4b31      	ldr	r3, [pc, #196]	; (8009dec <main+0x14c>)
 8009d28:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009d2a:	9301      	str	r3, [sp, #4]
 8009d2c:	9200      	str	r2, [sp, #0]
 8009d2e:	4623      	mov	r3, r4
 8009d30:	4602      	mov	r2, r0
 8009d32:	482f      	ldr	r0, [pc, #188]	; (8009df0 <main+0x150>)
 8009d34:	f015 fce8 	bl	801f708 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d38:	4b2e      	ldr	r3, [pc, #184]	; (8009df4 <main+0x154>)
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d3e:	4b2d      	ldr	r3, [pc, #180]	; (8009df4 <main+0x154>)
 8009d40:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d42:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d44:	4b2b      	ldr	r3, [pc, #172]	; (8009df4 <main+0x154>)
 8009d46:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d48:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d4a:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <main+0x154>)
 8009d4c:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d4e:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009d50:	4b28      	ldr	r3, [pc, #160]	; (8009df4 <main+0x154>)
 8009d52:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009d54:	9301      	str	r3, [sp, #4]
 8009d56:	9200      	str	r2, [sp, #0]
 8009d58:	4623      	mov	r3, r4
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	4826      	ldr	r0, [pc, #152]	; (8009df8 <main+0x158>)
 8009d5e:	f015 fcd3 	bl	801f708 <iprintf>
	battcheak();
 8009d62:	f7f7 feb1 	bl	8001ac8 <battcheak>

//起動cheak
	int yellow_count=1;
 8009d66:	2301      	movs	r3, #1
 8009d68:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	607b      	str	r3, [r7, #4]
 8009d6e:	e00d      	b.n	8009d8c <main+0xec>
		pl_yellow_LED_count(yellow_count);
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fd f8b1 	bl	8006edc <pl_yellow_LED_count>
		HAL_Delay(50);
 8009d7a:	2032      	movs	r0, #50	; 0x32
 8009d7c:	f00d fd72 	bl	8017864 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	005b      	lsls	r3, r3, #1
 8009d84:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b07      	cmp	r3, #7
 8009d90:	ddee      	ble.n	8009d70 <main+0xd0>
	}
	for(int i=0;i<9;i++){
 8009d92:	2300      	movs	r3, #0
 8009d94:	603b      	str	r3, [r7, #0]
 8009d96:	e00f      	b.n	8009db8 <main+0x118>
			pl_yellow_LED_count(yellow_count);
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	b2db      	uxtb	r3, r3
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f7fd f89d 	bl	8006edc <pl_yellow_LED_count>
			HAL_Delay(50);
 8009da2:	2032      	movs	r0, #50	; 0x32
 8009da4:	f00d fd5e 	bl	8017864 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	0fda      	lsrs	r2, r3, #31
 8009dac:	4413      	add	r3, r2
 8009dae:	105b      	asrs	r3, r3, #1
 8009db0:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	2b08      	cmp	r3, #8
 8009dbc:	ddec      	ble.n	8009d98 <main+0xf8>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f00a fcbe 	bl	8014744 <mode_decision>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009dcc:	f7f7 f8e6 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009dd0:	f7f7 fc6e 	bl	80016b0 <reset_gyro>
	  		reset_speed();
 8009dd4:	f7f7 f920 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f00a fdab 	bl	8014938 <mode_execution>

	  		error_mode = 0;
 8009de2:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <main+0x15c>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009de8:	e7e9      	b.n	8009dbe <main+0x11e>
 8009dea:	bf00      	nop
 8009dec:	2000070c 	.word	0x2000070c
 8009df0:	08021ec0 	.word	0x08021ec0
 8009df4:	20000718 	.word	0x20000718
 8009df8:	08021eec 	.word	0x08021eec
 8009dfc:	20000807 	.word	0x20000807

08009e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b094      	sub	sp, #80	; 0x50
 8009e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009e06:	f107 0318 	add.w	r3, r7, #24
 8009e0a:	2238      	movs	r2, #56	; 0x38
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f015 f808 	bl	801ee24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009e14:	1d3b      	adds	r3, r7, #4
 8009e16:	2200      	movs	r2, #0
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	605a      	str	r2, [r3, #4]
 8009e1c:	609a      	str	r2, [r3, #8]
 8009e1e:	60da      	str	r2, [r3, #12]
 8009e20:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009e22:	2000      	movs	r0, #0
 8009e24:	f010 fef2 	bl	801ac0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009e30:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009e32:	2302      	movs	r3, #2
 8009e34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009e36:	2303      	movs	r3, #3
 8009e38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009e3a:	2304      	movs	r3, #4
 8009e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009e3e:	2355      	movs	r3, #85	; 0x55
 8009e40:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009e42:	2302      	movs	r3, #2
 8009e44:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009e46:	2302      	movs	r3, #2
 8009e48:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009e4a:	2302      	movs	r3, #2
 8009e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009e4e:	f107 0318 	add.w	r3, r7, #24
 8009e52:	4618      	mov	r0, r3
 8009e54:	f010 ff8e 	bl	801ad74 <HAL_RCC_OscConfig>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009e5e:	f000 f81a 	bl	8009e96 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009e62:	230f      	movs	r3, #15
 8009e64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009e66:	2303      	movs	r3, #3
 8009e68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009e6e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009e7a:	1d3b      	adds	r3, r7, #4
 8009e7c:	2104      	movs	r1, #4
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f011 fa90 	bl	801b3a4 <HAL_RCC_ClockConfig>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009e8a:	f000 f804 	bl	8009e96 <Error_Handler>
  }
}
 8009e8e:	bf00      	nop
 8009e90:	3750      	adds	r7, #80	; 0x50
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009e96:	b480      	push	{r7}
 8009e98:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009e9a:	b672      	cpsid	i
}
 8009e9c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009e9e:	e7fe      	b.n	8009e9e <Error_Handler+0x8>

08009ea0 <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	ed87 0a03 	vstr	s0, [r7, #12]
 8009eaa:	edc7 0a02 	vstr	s1, [r7, #8]
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	71bb      	strb	r3, [r7, #6]
 8009eb6:	4613      	mov	r3, r2
 8009eb8:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00a      	beq.n	8009ed6 <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009ec0:	f7fa f852 	bl	8003f68 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ec4:	2003      	movs	r0, #3
 8009ec6:	f7fd fd8f 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009eca:	2003      	movs	r0, #3
 8009ecc:	f7fd fd64 	bl	8007998 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009ed0:	2032      	movs	r0, #50	; 0x32
 8009ed2:	f7fe f889 	bl	8007fe8 <wait_ms_NoReset>
	}
	if(left_wall){
 8009ed6:	79bb      	ldrb	r3, [r7, #6]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d02c      	beq.n	8009f36 <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009edc:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ee0:	edd7 1a03 	vldr	s3, [r7, #12]
 8009ee4:	ed9f 1a50 	vldr	s2, [pc, #320]	; 800a028 <backTurn_controlWall+0x188>
 8009ee8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800a028 <backTurn_controlWall+0x188>
 8009eec:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800a02c <backTurn_controlWall+0x18c>
 8009ef0:	f7f9 fd3e 	bl	8003970 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ef4:	2003      	movs	r0, #3
 8009ef6:	f7fd fd77 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009efa:	2003      	movs	r0, #3
 8009efc:	f7fd fd4c 	bl	8007998 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f00:	2032      	movs	r0, #50	; 0x32
 8009f02:	f7fe f871 	bl	8007fe8 <wait_ms_NoReset>
		no_frontwall_straight();
 8009f06:	f7fa f82f 	bl	8003f68 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f0a:	2003      	movs	r0, #3
 8009f0c:	f7fd fd6c 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f10:	2003      	movs	r0, #3
 8009f12:	f7fd fd41 	bl	8007998 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009f16:	2032      	movs	r0, #50	; 0x32
 8009f18:	f7fe f866 	bl	8007fe8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f1c:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f20:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f24:	ed9f 1a40 	vldr	s2, [pc, #256]	; 800a028 <backTurn_controlWall+0x188>
 8009f28:	eddf 0a3f 	vldr	s1, [pc, #252]	; 800a028 <backTurn_controlWall+0x188>
 8009f2c:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 800a02c <backTurn_controlWall+0x18c>
 8009f30:	f7f9 fd1e 	bl	8003970 <turning_table2>
 8009f34:	e06a      	b.n	800a00c <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009f36:	79bb      	ldrb	r3, [r7, #6]
 8009f38:	f083 0301 	eor.w	r3, r3, #1
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d037      	beq.n	8009fb2 <backTurn_controlWall+0x112>
 8009f42:	797b      	ldrb	r3, [r7, #5]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d034      	beq.n	8009fb2 <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f4c:	eef1 7a67 	vneg.f32	s15, s15
 8009f50:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f54:	eef0 1a67 	vmov.f32	s3, s15
 8009f58:	ed9f 1a33 	vldr	s2, [pc, #204]	; 800a028 <backTurn_controlWall+0x188>
 8009f5c:	eddf 0a32 	vldr	s1, [pc, #200]	; 800a028 <backTurn_controlWall+0x188>
 8009f60:	ed9f 0a33 	vldr	s0, [pc, #204]	; 800a030 <backTurn_controlWall+0x190>
 8009f64:	f7f9 fd04 	bl	8003970 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f68:	2003      	movs	r0, #3
 8009f6a:	f7fd fd3d 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f6e:	2003      	movs	r0, #3
 8009f70:	f7fd fd12 	bl	8007998 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f74:	2032      	movs	r0, #50	; 0x32
 8009f76:	f7fe f837 	bl	8007fe8 <wait_ms_NoReset>
		no_frontwall_straight();
 8009f7a:	f7f9 fff5 	bl	8003f68 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f7e:	2003      	movs	r0, #3
 8009f80:	f7fd fd32 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f84:	2003      	movs	r0, #3
 8009f86:	f7fd fd07 	bl	8007998 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009f8a:	2032      	movs	r0, #50	; 0x32
 8009f8c:	f7fe f82c 	bl	8007fe8 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f94:	eef1 7a67 	vneg.f32	s15, s15
 8009f98:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f9c:	eef0 1a67 	vmov.f32	s3, s15
 8009fa0:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800a028 <backTurn_controlWall+0x188>
 8009fa4:	eddf 0a20 	vldr	s1, [pc, #128]	; 800a028 <backTurn_controlWall+0x188>
 8009fa8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800a030 <backTurn_controlWall+0x190>
 8009fac:	f7f9 fce0 	bl	8003970 <turning_table2>
 8009fb0:	e02c      	b.n	800a00c <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009fb2:	79bb      	ldrb	r3, [r7, #6]
 8009fb4:	f083 0301 	eor.w	r3, r3, #1
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d026      	beq.n	800a00c <backTurn_controlWall+0x16c>
 8009fbe:	797b      	ldrb	r3, [r7, #5]
 8009fc0:	f083 0301 	eor.w	r3, r3, #1
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d020      	beq.n	800a00c <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009fca:	ed97 2a02 	vldr	s4, [r7, #8]
 8009fce:	edd7 1a03 	vldr	s3, [r7, #12]
 8009fd2:	ed9f 1a15 	vldr	s2, [pc, #84]	; 800a028 <backTurn_controlWall+0x188>
 8009fd6:	eddf 0a14 	vldr	s1, [pc, #80]	; 800a028 <backTurn_controlWall+0x188>
 8009fda:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800a02c <backTurn_controlWall+0x18c>
 8009fde:	f7f9 fcc7 	bl	8003970 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009fe2:	2003      	movs	r0, #3
 8009fe4:	f7fd fd00 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009fe8:	2003      	movs	r0, #3
 8009fea:	f7fd fcd5 	bl	8007998 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009fee:	2032      	movs	r0, #50	; 0x32
 8009ff0:	f7fd fffa 	bl	8007fe8 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009ff4:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ff8:	edd7 1a03 	vldr	s3, [r7, #12]
 8009ffc:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 800a028 <backTurn_controlWall+0x188>
 800a000:	eddf 0a09 	vldr	s1, [pc, #36]	; 800a028 <backTurn_controlWall+0x188>
 800a004:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800a02c <backTurn_controlWall+0x18c>
 800a008:	f7f9 fcb2 	bl	8003970 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a00c:	2003      	movs	r0, #3
 800a00e:	f7fd fceb 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a012:	2003      	movs	r0, #3
 800a014:	f7fd fcc0 	bl	8007998 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 800a018:	2032      	movs	r0, #50	; 0x32
 800a01a:	f7fd ffe5 	bl	8007fe8 <wait_ms_NoReset>

}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
 800a026:	bf00      	nop
 800a028:	00000000 	.word	0x00000000
 800a02c:	42b40000 	.word	0x42b40000
 800a030:	c2b40000 	.word	0xc2b40000

0800a034 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a034:	b084      	sub	sp, #16
 800a036:	b5b0      	push	{r4, r5, r7, lr}
 800a038:	ed2d 8b02 	vpush	{d8}
 800a03c:	b084      	sub	sp, #16
 800a03e:	af00      	add	r7, sp, #0
 800a040:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a048:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a04c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a050:	2b01      	cmp	r3, #1
 800a052:	f040 80f5 	bne.w	800a240 <slalomR+0x20c>
		highspeed_mode = 0;
 800a056:	4bcd      	ldr	r3, [pc, #820]	; (800a38c <slalomR+0x358>)
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a05c:	2301      	movs	r3, #1
 800a05e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a060:	2300      	movs	r3, #0
 800a062:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a064:	2300      	movs	r3, #0
 800a066:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a068:	2300      	movs	r3, #0
 800a06a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a06c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a070:	2b00      	cmp	r3, #0
 800a072:	d11f      	bne.n	800a0b4 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a074:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a078:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a07c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a080:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a084:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a088:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a08c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a090:	eddf 5abf 	vldr	s11, [pc, #764]	; 800a390 <slalomR+0x35c>
 800a094:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a098:	68f8      	ldr	r0, [r7, #12]
 800a09a:	eeb0 2a47 	vmov.f32	s4, s14
 800a09e:	eef0 1a46 	vmov.f32	s3, s12
 800a0a2:	eeb0 1a66 	vmov.f32	s2, s13
 800a0a6:	eddf 0abb 	vldr	s1, [pc, #748]	; 800a394 <slalomR+0x360>
 800a0aa:	ed9f 0abb 	vldr	s0, [pc, #748]	; 800a398 <slalomR+0x364>
 800a0ae:	f7f8 ff51 	bl	8002f54 <straight_table2>
 800a0b2:	e01e      	b.n	800a0f2 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a0b4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a0b8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a0bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0c8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a0cc:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a0d0:	eddf 5aaf 	vldr	s11, [pc, #700]	; 800a390 <slalomR+0x35c>
 800a0d4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	eeb0 2a47 	vmov.f32	s4, s14
 800a0de:	eef0 1a46 	vmov.f32	s3, s12
 800a0e2:	eeb0 1a66 	vmov.f32	s2, s13
 800a0e6:	eddf 0aab 	vldr	s1, [pc, #684]	; 800a394 <slalomR+0x360>
 800a0ea:	ed9f 0aac 	vldr	s0, [pc, #688]	; 800a39c <slalomR+0x368>
 800a0ee:	f7f8 ff31 	bl	8002f54 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a0fa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d127      	bne.n	800a152 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a102:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a106:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a10a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a10e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a112:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a116:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a11a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a11e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a122:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a126:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a12a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a12e:	eddf 4a98 	vldr	s9, [pc, #608]	; 800a390 <slalomR+0x35c>
 800a132:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	eeb0 2a47 	vmov.f32	s4, s14
 800a13c:	eef0 1a45 	vmov.f32	s3, s10
 800a140:	eeb0 1a65 	vmov.f32	s2, s11
 800a144:	eef0 0a46 	vmov.f32	s1, s12
 800a148:	eeb0 0a66 	vmov.f32	s0, s13
 800a14c:	f7f8 ff02 	bl	8002f54 <straight_table2>
 800a150:	e022      	b.n	800a198 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a152:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a156:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a15a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a15e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a162:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a166:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a16a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a16e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a172:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a176:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a390 <slalomR+0x35c>
 800a17a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	eeb0 2a47 	vmov.f32	s4, s14
 800a184:	eef0 1a45 	vmov.f32	s3, s10
 800a188:	eeb0 1a65 	vmov.f32	s2, s11
 800a18c:	eef0 0a46 	vmov.f32	s1, s12
 800a190:	eeb0 0a66 	vmov.f32	s0, s13
 800a194:	f7f8 fede 	bl	8002f54 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a198:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d10c      	bne.n	800a1ba <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a1a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1a4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a1a8:	eeb0 1a47 	vmov.f32	s2, s14
 800a1ac:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800a3a0 <slalomR+0x36c>
 800a1b0:	eeb0 0a67 	vmov.f32	s0, s15
 800a1b4:	f7f9 fe44 	bl	8003e40 <mollifier_slalom_table>
 800a1b8:	e015      	b.n	800a1e6 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a1ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a1c2:	eef1 7a67 	vneg.f32	s15, s15
 800a1c6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a1ca:	eef0 2a66 	vmov.f32	s5, s13
 800a1ce:	eeb0 2a67 	vmov.f32	s4, s15
 800a1d2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a394 <slalomR+0x360>
 800a1d6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a394 <slalomR+0x360>
 800a1da:	eddf 0a71 	vldr	s1, [pc, #452]	; 800a3a0 <slalomR+0x36c>
 800a1de:	eeb0 0a47 	vmov.f32	s0, s14
 800a1e2:	f7f9 fcdd 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a1ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a1f2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a390 <slalomR+0x35c>
 800a1f6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1fa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1fe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a202:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a206:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a20a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a20e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a212:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a216:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a390 <slalomR+0x35c>
 800a21a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	eeb0 2a47 	vmov.f32	s4, s14
 800a224:	eef0 1a65 	vmov.f32	s3, s11
 800a228:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a394 <slalomR+0x360>
 800a22c:	eef0 0a46 	vmov.f32	s1, s12
 800a230:	eeb0 0a66 	vmov.f32	s0, s13
 800a234:	f7f8 fe8e 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800a238:	4b54      	ldr	r3, [pc, #336]	; (800a38c <slalomR+0x358>)
 800a23a:	2200      	movs	r2, #0
 800a23c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a23e:	e09c      	b.n	800a37a <slalomR+0x346>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a240:	2300      	movs	r3, #0
 800a242:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a244:	2300      	movs	r3, #0
 800a246:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a248:	2301      	movs	r3, #1
 800a24a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a250:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a254:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a258:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a25c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a260:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a264:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a26c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a270:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a274:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a390 <slalomR+0x35c>
 800a278:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	eeb0 2a47 	vmov.f32	s4, s14
 800a282:	eef0 1a45 	vmov.f32	s3, s10
 800a286:	eeb0 1a65 	vmov.f32	s2, s11
 800a28a:	eef0 0a46 	vmov.f32	s1, s12
 800a28e:	eeb0 0a66 	vmov.f32	s0, s13
 800a292:	f7f8 fe5f 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800a296:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d10c      	bne.n	800a2b8 <slalomR+0x284>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a29e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2a2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a2a6:	eeb0 1a47 	vmov.f32	s2, s14
 800a2aa:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a3a0 <slalomR+0x36c>
 800a2ae:	eeb0 0a67 	vmov.f32	s0, s15
 800a2b2:	f7f9 fdc5 	bl	8003e40 <mollifier_slalom_table>
 800a2b6:	e015      	b.n	800a2e4 <slalomR+0x2b0>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a2b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2bc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a2c0:	eef1 7a67 	vneg.f32	s15, s15
 800a2c4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a2c8:	eef0 2a66 	vmov.f32	s5, s13
 800a2cc:	eeb0 2a67 	vmov.f32	s4, s15
 800a2d0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a394 <slalomR+0x360>
 800a2d4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a394 <slalomR+0x360>
 800a2d8:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a3a0 <slalomR+0x36c>
 800a2dc:	eeb0 0a47 	vmov.f32	s0, s14
 800a2e0:	f7f9 fc5e 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2ec:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a2f0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a2f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a2f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a300:	edd7 7a01 	vldr	s15, [r7, #4]
 800a304:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a30c:	eef0 7ae7 	vabs.f32	s15, s15
 800a310:	ee17 0a90 	vmov	r0, s15
 800a314:	f7f6 f940 	bl	8000598 <__aeabi_f2d>
 800a318:	f04f 0200 	mov.w	r2, #0
 800a31c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a320:	f7f6 fabc 	bl	800089c <__aeabi_ddiv>
 800a324:	4602      	mov	r2, r0
 800a326:	460b      	mov	r3, r1
 800a328:	4614      	mov	r4, r2
 800a32a:	461d      	mov	r5, r3
 800a32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f6 f932 	bl	8000598 <__aeabi_f2d>
 800a334:	4602      	mov	r2, r0
 800a336:	460b      	mov	r3, r1
 800a338:	4620      	mov	r0, r4
 800a33a:	4629      	mov	r1, r5
 800a33c:	f7f6 faae 	bl	800089c <__aeabi_ddiv>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4610      	mov	r0, r2
 800a346:	4619      	mov	r1, r3
 800a348:	f04f 0200 	mov.w	r2, #0
 800a34c:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <slalomR+0x370>)
 800a34e:	f7f5 ffc5 	bl	80002dc <__adddf3>
 800a352:	4602      	mov	r2, r0
 800a354:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a356:	4610      	mov	r0, r2
 800a358:	4619      	mov	r1, r3
 800a35a:	f7f6 fc4d 	bl	8000bf8 <__aeabi_d2f>
 800a35e:	4603      	mov	r3, r0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	ee02 3a10 	vmov	s4, r3
 800a366:	edd7 1a01 	vldr	s3, [r7, #4]
 800a36a:	ed97 1a01 	vldr	s2, [r7, #4]
 800a36e:	eef0 0a68 	vmov.f32	s1, s17
 800a372:	eeb0 0a48 	vmov.f32	s0, s16
 800a376:	f7f8 fded 	bl	8002f54 <straight_table2>
}
 800a37a:	bf00      	nop
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	ecbd 8b02 	vpop	{d8}
 800a384:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a388:	b004      	add	sp, #16
 800a38a:	4770      	bx	lr
 800a38c:	20000808 	.word	0x20000808
 800a390:	42340000 	.word	0x42340000
 800a394:	00000000 	.word	0x00000000
 800a398:	431b8000 	.word	0x431b8000
 800a39c:	43138000 	.word	0x43138000
 800a3a0:	c2b40000 	.word	0xc2b40000
 800a3a4:	408f4000 	.word	0x408f4000

0800a3a8 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	b5b0      	push	{r4, r5, r7, lr}
 800a3ac:	ed2d 8b02 	vpush	{d8}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a3b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a3bc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a3c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	f040 80f3 	bne.w	800a5b0 <slalomL+0x208>
		highspeed_mode = 0;
 800a3ca:	4bcb      	ldr	r3, [pc, #812]	; (800a6f8 <slalomL+0x350>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a3e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d11f      	bne.n	800a428 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3e8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3fc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a400:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a404:	eddf 5abd 	vldr	s11, [pc, #756]	; 800a6fc <slalomL+0x354>
 800a408:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	eeb0 2a47 	vmov.f32	s4, s14
 800a412:	eef0 1a46 	vmov.f32	s3, s12
 800a416:	eeb0 1a66 	vmov.f32	s2, s13
 800a41a:	eddf 0ab9 	vldr	s1, [pc, #740]	; 800a700 <slalomL+0x358>
 800a41e:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 800a704 <slalomL+0x35c>
 800a422:	f7f8 fd97 	bl	8002f54 <straight_table2>
 800a426:	e01e      	b.n	800a466 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a428:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a42c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a430:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a434:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a43c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a440:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a444:	eddf 5aad 	vldr	s11, [pc, #692]	; 800a6fc <slalomL+0x354>
 800a448:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	eeb0 2a47 	vmov.f32	s4, s14
 800a452:	eef0 1a46 	vmov.f32	s3, s12
 800a456:	eeb0 1a66 	vmov.f32	s2, s13
 800a45a:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800a700 <slalomL+0x358>
 800a45e:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 800a708 <slalomL+0x360>
 800a462:	f7f8 fd77 	bl	8002f54 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a466:	2300      	movs	r3, #0
 800a468:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a46a:	2301      	movs	r3, #1
 800a46c:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a46e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a472:	2b00      	cmp	r3, #0
 800a474:	d127      	bne.n	800a4c6 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a476:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a47a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a47e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a482:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a486:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a48a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a48e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a492:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a496:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a49a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a49e:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4a2:	eddf 4a96 	vldr	s9, [pc, #600]	; 800a6fc <slalomL+0x354>
 800a4a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4aa:	68f8      	ldr	r0, [r7, #12]
 800a4ac:	eeb0 2a47 	vmov.f32	s4, s14
 800a4b0:	eef0 1a45 	vmov.f32	s3, s10
 800a4b4:	eeb0 1a65 	vmov.f32	s2, s11
 800a4b8:	eef0 0a46 	vmov.f32	s1, s12
 800a4bc:	eeb0 0a66 	vmov.f32	s0, s13
 800a4c0:	f7f8 fd48 	bl	8002f54 <straight_table2>
 800a4c4:	e022      	b.n	800a50c <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a4ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a4ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a4d2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a4d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a4da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a4e2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a4e6:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a4ea:	eddf 4a84 	vldr	s9, [pc, #528]	; 800a6fc <slalomL+0x354>
 800a4ee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	eeb0 2a47 	vmov.f32	s4, s14
 800a4f8:	eef0 1a45 	vmov.f32	s3, s10
 800a4fc:	eeb0 1a65 	vmov.f32	s2, s11
 800a500:	eef0 0a46 	vmov.f32	s1, s12
 800a504:	eeb0 0a66 	vmov.f32	s0, s13
 800a508:	f7f8 fd24 	bl	8002f54 <straight_table2>
		}
		if(mollifier_mode == ON){
 800a50c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a510:	2b01      	cmp	r3, #1
 800a512:	d10c      	bne.n	800a52e <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a514:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a518:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a51c:	eeb0 1a47 	vmov.f32	s2, s14
 800a520:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800a70c <slalomL+0x364>
 800a524:	eeb0 0a67 	vmov.f32	s0, s15
 800a528:	f7f9 fc8a 	bl	8003e40 <mollifier_slalom_table>
 800a52c:	e013      	b.n	800a556 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a52e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a532:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a536:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a53a:	eef0 2a66 	vmov.f32	s5, s13
 800a53e:	eeb0 2a47 	vmov.f32	s4, s14
 800a542:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800a700 <slalomL+0x358>
 800a546:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800a700 <slalomL+0x358>
 800a54a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a70c <slalomL+0x364>
 800a54e:	eeb0 0a67 	vmov.f32	s0, s15
 800a552:	f7f9 fb25 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a556:	2300      	movs	r3, #0
 800a558:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a55e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a562:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800a6fc <slalomL+0x354>
 800a566:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a56a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a56e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a572:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a576:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a57a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a57e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a582:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a586:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800a6fc <slalomL+0x354>
 800a58a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	eeb0 2a47 	vmov.f32	s4, s14
 800a594:	eef0 1a65 	vmov.f32	s3, s11
 800a598:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800a700 <slalomL+0x358>
 800a59c:	eef0 0a46 	vmov.f32	s1, s12
 800a5a0:	eeb0 0a66 	vmov.f32	s0, s13
 800a5a4:	f7f8 fcd6 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800a5a8:	4b53      	ldr	r3, [pc, #332]	; (800a6f8 <slalomL+0x350>)
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a5ae:	e09a      	b.n	800a6e6 <slalomL+0x33e>
		wallmode.WallControlMode=0;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5c0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5c4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5c8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5cc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
													turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5d0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5dc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5e0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5e4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a6fc <slalomL+0x354>
 800a5e8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5ec:	68f8      	ldr	r0, [r7, #12]
 800a5ee:	eeb0 2a47 	vmov.f32	s4, s14
 800a5f2:	eef0 1a45 	vmov.f32	s3, s10
 800a5f6:	eeb0 1a65 	vmov.f32	s2, s11
 800a5fa:	eef0 0a46 	vmov.f32	s1, s12
 800a5fe:	eeb0 0a66 	vmov.f32	s0, s13
 800a602:	f7f8 fca7 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800a606:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d10c      	bne.n	800a628 <slalomL+0x280>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a60e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a612:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a616:	eeb0 1a47 	vmov.f32	s2, s14
 800a61a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a70c <slalomL+0x364>
 800a61e:	eeb0 0a67 	vmov.f32	s0, s15
 800a622:	f7f9 fc0d 	bl	8003e40 <mollifier_slalom_table>
 800a626:	e013      	b.n	800a650 <slalomL+0x2a8>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a628:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a62c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a630:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a634:	eef0 2a66 	vmov.f32	s5, s13
 800a638:	eeb0 2a47 	vmov.f32	s4, s14
 800a63c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a700 <slalomL+0x358>
 800a640:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a700 <slalomL+0x358>
 800a644:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a70c <slalomL+0x364>
 800a648:	eeb0 0a67 	vmov.f32	s0, s15
 800a64c:	f7f9 faa8 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800a650:	2300      	movs	r3, #0
 800a652:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a654:	2300      	movs	r3, #0
 800a656:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a658:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a65c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a660:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a664:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a66c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a670:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a674:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a678:	eef0 7ae7 	vabs.f32	s15, s15
 800a67c:	ee17 0a90 	vmov	r0, s15
 800a680:	f7f5 ff8a 	bl	8000598 <__aeabi_f2d>
 800a684:	f04f 0200 	mov.w	r2, #0
 800a688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a68c:	f7f6 f906 	bl	800089c <__aeabi_ddiv>
 800a690:	4602      	mov	r2, r0
 800a692:	460b      	mov	r3, r1
 800a694:	4614      	mov	r4, r2
 800a696:	461d      	mov	r5, r3
 800a698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7f5 ff7c 	bl	8000598 <__aeabi_f2d>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	4629      	mov	r1, r5
 800a6a8:	f7f6 f8f8 	bl	800089c <__aeabi_ddiv>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f04f 0200 	mov.w	r2, #0
 800a6b8:	4b15      	ldr	r3, [pc, #84]	; (800a710 <slalomL+0x368>)
 800a6ba:	f7f5 fe0f 	bl	80002dc <__adddf3>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6c2:	4610      	mov	r0, r2
 800a6c4:	4619      	mov	r1, r3
 800a6c6:	f7f6 fa97 	bl	8000bf8 <__aeabi_d2f>
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	68f8      	ldr	r0, [r7, #12]
 800a6ce:	ee02 3a10 	vmov	s4, r3
 800a6d2:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6d6:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6da:	eef0 0a68 	vmov.f32	s1, s17
 800a6de:	eeb0 0a48 	vmov.f32	s0, s16
 800a6e2:	f7f8 fc37 	bl	8002f54 <straight_table2>
}
 800a6e6:	bf00      	nop
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	ecbd 8b02 	vpop	{d8}
 800a6f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a6f4:	b004      	add	sp, #16
 800a6f6:	4770      	bx	lr
 800a6f8:	20000808 	.word	0x20000808
 800a6fc:	42340000 	.word	0x42340000
 800a700:	00000000 	.word	0x00000000
 800a704:	431b8000 	.word	0x431b8000
 800a708:	43138000 	.word	0x43138000
 800a70c:	42b40000 	.word	0x42b40000
 800a710:	408f4000 	.word	0x408f4000

0800a714 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a714:	b084      	sub	sp, #16
 800a716:	b5b0      	push	{r4, r5, r7, lr}
 800a718:	ed2d 8b02 	vpush	{d8}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a724:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a728:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a72c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a730:	2b01      	cmp	r3, #1
 800a732:	f040 80a5 	bne.w	800a880 <turn90R+0x16c>
		highspeed_mode = 1;
 800a736:	4ba5      	ldr	r3, [pc, #660]	; (800a9cc <turn90R+0x2b8>)
 800a738:	2201      	movs	r2, #1
 800a73a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a73c:	2301      	movs	r3, #1
 800a73e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a740:	2300      	movs	r3, #0
 800a742:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a748:	2300      	movs	r3, #0
 800a74a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a74c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a750:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a754:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a758:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a75c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a760:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a764:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a768:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a9d0 <turn90R+0x2bc>
 800a76c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	eeb0 2a47 	vmov.f32	s4, s14
 800a776:	eef0 1a46 	vmov.f32	s3, s12
 800a77a:	eeb0 1a66 	vmov.f32	s2, s13
 800a77e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a9d4 <turn90R+0x2c0>
 800a782:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a9d8 <turn90R+0x2c4>
 800a786:	f7f8 fbe5 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800a78a:	2300      	movs	r3, #0
 800a78c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a78e:	2302      	movs	r3, #2
 800a790:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a792:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a796:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a79a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a79e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a7a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a7ae:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a7b2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7b6:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a9d0 <turn90R+0x2bc>
 800a7ba:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	eeb0 2a47 	vmov.f32	s4, s14
 800a7c4:	eef0 1a45 	vmov.f32	s3, s10
 800a7c8:	eeb0 1a65 	vmov.f32	s2, s11
 800a7cc:	eef0 0a46 	vmov.f32	s1, s12
 800a7d0:	eeb0 0a66 	vmov.f32	s0, s13
 800a7d4:	f7f8 fbbe 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800a7d8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d10c      	bne.n	800a7fa <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a7e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7e8:	eeb0 1a47 	vmov.f32	s2, s14
 800a7ec:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a9dc <turn90R+0x2c8>
 800a7f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a7f4:	f7f9 fb24 	bl	8003e40 <mollifier_slalom_table>
 800a7f8:	e015      	b.n	800a826 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a7fa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7fe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a802:	eef1 7a67 	vneg.f32	s15, s15
 800a806:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a80a:	eef0 2a66 	vmov.f32	s5, s13
 800a80e:	eeb0 2a67 	vmov.f32	s4, s15
 800a812:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a9d4 <turn90R+0x2c0>
 800a816:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a9d4 <turn90R+0x2c0>
 800a81a:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a9dc <turn90R+0x2c8>
 800a81e:	eeb0 0a47 	vmov.f32	s0, s14
 800a822:	f7f9 f9bd 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a826:	2300      	movs	r3, #0
 800a828:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a82e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a832:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a9e0 <turn90R+0x2cc>
 800a836:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a83a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a83e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a842:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a846:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a84a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a84e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a852:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a856:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a9d0 <turn90R+0x2bc>
 800a85a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	eeb0 2a47 	vmov.f32	s4, s14
 800a864:	eef0 1a65 	vmov.f32	s3, s11
 800a868:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a9d4 <turn90R+0x2c0>
 800a86c:	eef0 0a46 	vmov.f32	s1, s12
 800a870:	eeb0 0a66 	vmov.f32	s0, s13
 800a874:	f7f8 fb6e 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800a878:	4b54      	ldr	r3, [pc, #336]	; (800a9cc <turn90R+0x2b8>)
 800a87a:	2200      	movs	r2, #0
 800a87c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a87e:	e09c      	b.n	800a9ba <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a880:	2300      	movs	r3, #0
 800a882:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a884:	2300      	movs	r3, #0
 800a886:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a888:	2302      	movs	r3, #2
 800a88a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a890:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a894:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a898:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a89c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a8a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a8b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8b4:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a9d0 <turn90R+0x2bc>
 800a8b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	eeb0 2a47 	vmov.f32	s4, s14
 800a8c2:	eef0 1a45 	vmov.f32	s3, s10
 800a8c6:	eeb0 1a65 	vmov.f32	s2, s11
 800a8ca:	eef0 0a46 	vmov.f32	s1, s12
 800a8ce:	eeb0 0a66 	vmov.f32	s0, s13
 800a8d2:	f7f8 fb3f 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800a8d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d10c      	bne.n	800a8f8 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a8de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8e6:	eeb0 1a47 	vmov.f32	s2, s14
 800a8ea:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a9dc <turn90R+0x2c8>
 800a8ee:	eeb0 0a67 	vmov.f32	s0, s15
 800a8f2:	f7f9 faa5 	bl	8003e40 <mollifier_slalom_table>
 800a8f6:	e015      	b.n	800a924 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a8f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8fc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a900:	eef1 7a67 	vneg.f32	s15, s15
 800a904:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a908:	eef0 2a66 	vmov.f32	s5, s13
 800a90c:	eeb0 2a67 	vmov.f32	s4, s15
 800a910:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9d4 <turn90R+0x2c0>
 800a914:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9d4 <turn90R+0x2c0>
 800a918:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9dc <turn90R+0x2c8>
 800a91c:	eeb0 0a47 	vmov.f32	s0, s14
 800a920:	f7f9 f93e 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a924:	2301      	movs	r3, #1
 800a926:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a928:	2300      	movs	r3, #0
 800a92a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a92c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a930:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a934:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a938:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a93c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a940:	edd7 7a01 	vldr	s15, [r7, #4]
 800a944:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a948:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a94c:	eef0 7ae7 	vabs.f32	s15, s15
 800a950:	ee17 0a90 	vmov	r0, s15
 800a954:	f7f5 fe20 	bl	8000598 <__aeabi_f2d>
 800a958:	f04f 0200 	mov.w	r2, #0
 800a95c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a960:	f7f5 ff9c 	bl	800089c <__aeabi_ddiv>
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4614      	mov	r4, r2
 800a96a:	461d      	mov	r5, r3
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	4618      	mov	r0, r3
 800a970:	f7f5 fe12 	bl	8000598 <__aeabi_f2d>
 800a974:	4602      	mov	r2, r0
 800a976:	460b      	mov	r3, r1
 800a978:	4620      	mov	r0, r4
 800a97a:	4629      	mov	r1, r5
 800a97c:	f7f5 ff8e 	bl	800089c <__aeabi_ddiv>
 800a980:	4602      	mov	r2, r0
 800a982:	460b      	mov	r3, r1
 800a984:	4610      	mov	r0, r2
 800a986:	4619      	mov	r1, r3
 800a988:	f04f 0200 	mov.w	r2, #0
 800a98c:	4b15      	ldr	r3, [pc, #84]	; (800a9e4 <turn90R+0x2d0>)
 800a98e:	f7f5 fca5 	bl	80002dc <__adddf3>
 800a992:	4602      	mov	r2, r0
 800a994:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a996:	4610      	mov	r0, r2
 800a998:	4619      	mov	r1, r3
 800a99a:	f7f6 f92d 	bl	8000bf8 <__aeabi_d2f>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	ee02 3a10 	vmov	s4, r3
 800a9a6:	edd7 1a01 	vldr	s3, [r7, #4]
 800a9aa:	ed97 1a01 	vldr	s2, [r7, #4]
 800a9ae:	eef0 0a68 	vmov.f32	s1, s17
 800a9b2:	eeb0 0a48 	vmov.f32	s0, s16
 800a9b6:	f7f8 facd 	bl	8002f54 <straight_table2>
}
 800a9ba:	bf00      	nop
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	ecbd 8b02 	vpop	{d8}
 800a9c4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9c8:	b004      	add	sp, #16
 800a9ca:	4770      	bx	lr
 800a9cc:	20000808 	.word	0x20000808
 800a9d0:	42340000 	.word	0x42340000
 800a9d4:	00000000 	.word	0x00000000
 800a9d8:	42cd0000 	.word	0x42cd0000
 800a9dc:	c2b40000 	.word	0xc2b40000
 800a9e0:	42b40000 	.word	0x42b40000
 800a9e4:	408f4000 	.word	0x408f4000

0800a9e8 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	b5b0      	push	{r4, r5, r7, lr}
 800a9ec:	ed2d 8b02 	vpush	{d8}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800aa00:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	f040 80a3 	bne.w	800ab50 <turn90L+0x168>
		highspeed_mode = 1;
 800aa0a:	4ba3      	ldr	r3, [pc, #652]	; (800ac98 <turn90L+0x2b0>)
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800aa10:	2301      	movs	r3, #1
 800aa12:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa14:	2300      	movs	r3, #0
 800aa16:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa20:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa24:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa34:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa38:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa3c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ac9c <turn90L+0x2b4>
 800aa40:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	eeb0 2a47 	vmov.f32	s4, s14
 800aa4a:	eef0 1a46 	vmov.f32	s3, s12
 800aa4e:	eeb0 1a66 	vmov.f32	s2, s13
 800aa52:	eddf 0a93 	vldr	s1, [pc, #588]	; 800aca0 <turn90L+0x2b8>
 800aa56:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800aca4 <turn90L+0x2bc>
 800aa5a:	f7f8 fa7b 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa62:	2302      	movs	r3, #2
 800aa64:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa66:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa6a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa6e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa72:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa82:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa86:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa8a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ac9c <turn90L+0x2b4>
 800aa8e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	eeb0 2a47 	vmov.f32	s4, s14
 800aa98:	eef0 1a45 	vmov.f32	s3, s10
 800aa9c:	eeb0 1a65 	vmov.f32	s2, s11
 800aaa0:	eef0 0a46 	vmov.f32	s1, s12
 800aaa4:	eeb0 0a66 	vmov.f32	s0, s13
 800aaa8:	f7f8 fa54 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800aaac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d10c      	bne.n	800aace <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aab4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aab8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aabc:	eeb0 1a47 	vmov.f32	s2, s14
 800aac0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800aca8 <turn90L+0x2c0>
 800aac4:	eeb0 0a67 	vmov.f32	s0, s15
 800aac8:	f7f9 f9ba 	bl	8003e40 <mollifier_slalom_table>
 800aacc:	e013      	b.n	800aaf6 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aace:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aad2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aad6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aada:	eef0 2a66 	vmov.f32	s5, s13
 800aade:	eeb0 2a47 	vmov.f32	s4, s14
 800aae2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800aca0 <turn90L+0x2b8>
 800aae6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800aca0 <turn90L+0x2b8>
 800aaea:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800aca8 <turn90L+0x2c0>
 800aaee:	eeb0 0a67 	vmov.f32	s0, s15
 800aaf2:	f7f9 f855 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aafe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab02:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800aca8 <turn90L+0x2c0>
 800ab06:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab0a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab0e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab16:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab1e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab22:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab26:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ac9c <turn90L+0x2b4>
 800ab2a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	eeb0 2a47 	vmov.f32	s4, s14
 800ab34:	eef0 1a65 	vmov.f32	s3, s11
 800ab38:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800aca0 <turn90L+0x2b8>
 800ab3c:	eef0 0a46 	vmov.f32	s1, s12
 800ab40:	eeb0 0a66 	vmov.f32	s0, s13
 800ab44:	f7f8 fa06 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800ab48:	4b53      	ldr	r3, [pc, #332]	; (800ac98 <turn90L+0x2b0>)
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab4e:	e09a      	b.n	800ac86 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab50:	2300      	movs	r3, #0
 800ab52:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab60:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab64:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab68:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab6c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab7c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab80:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab84:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ac9c <turn90L+0x2b4>
 800ab88:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	eeb0 2a47 	vmov.f32	s4, s14
 800ab92:	eef0 1a45 	vmov.f32	s3, s10
 800ab96:	eeb0 1a65 	vmov.f32	s2, s11
 800ab9a:	eef0 0a46 	vmov.f32	s1, s12
 800ab9e:	eeb0 0a66 	vmov.f32	s0, s13
 800aba2:	f7f8 f9d7 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800aba6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d10c      	bne.n	800abc8 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800abae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abb2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abb6:	eeb0 1a47 	vmov.f32	s2, s14
 800abba:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800aca8 <turn90L+0x2c0>
 800abbe:	eeb0 0a67 	vmov.f32	s0, s15
 800abc2:	f7f9 f93d 	bl	8003e40 <mollifier_slalom_table>
 800abc6:	e013      	b.n	800abf0 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800abc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abcc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abd0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abd4:	eef0 2a66 	vmov.f32	s5, s13
 800abd8:	eeb0 2a47 	vmov.f32	s4, s14
 800abdc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800aca0 <turn90L+0x2b8>
 800abe0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800aca0 <turn90L+0x2b8>
 800abe4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800aca8 <turn90L+0x2c0>
 800abe8:	eeb0 0a67 	vmov.f32	s0, s15
 800abec:	f7f8 ffd8 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800abf0:	2301      	movs	r3, #1
 800abf2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abf8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800abfc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ac00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac0c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac18:	eef0 7ae7 	vabs.f32	s15, s15
 800ac1c:	ee17 0a90 	vmov	r0, s15
 800ac20:	f7f5 fcba 	bl	8000598 <__aeabi_f2d>
 800ac24:	f04f 0200 	mov.w	r2, #0
 800ac28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac2c:	f7f5 fe36 	bl	800089c <__aeabi_ddiv>
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	4614      	mov	r4, r2
 800ac36:	461d      	mov	r5, r3
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7f5 fcac 	bl	8000598 <__aeabi_f2d>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4620      	mov	r0, r4
 800ac46:	4629      	mov	r1, r5
 800ac48:	f7f5 fe28 	bl	800089c <__aeabi_ddiv>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4610      	mov	r0, r2
 800ac52:	4619      	mov	r1, r3
 800ac54:	f04f 0200 	mov.w	r2, #0
 800ac58:	4b14      	ldr	r3, [pc, #80]	; (800acac <turn90L+0x2c4>)
 800ac5a:	f7f5 fb3f 	bl	80002dc <__adddf3>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	f7f5 ffc7 	bl	8000bf8 <__aeabi_d2f>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	68f8      	ldr	r0, [r7, #12]
 800ac6e:	ee02 3a10 	vmov	s4, r3
 800ac72:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac76:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac7a:	eef0 0a68 	vmov.f32	s1, s17
 800ac7e:	eeb0 0a48 	vmov.f32	s0, s16
 800ac82:	f7f8 f967 	bl	8002f54 <straight_table2>
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	ecbd 8b02 	vpop	{d8}
 800ac90:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac94:	b004      	add	sp, #16
 800ac96:	4770      	bx	lr
 800ac98:	20000808 	.word	0x20000808
 800ac9c:	42340000 	.word	0x42340000
 800aca0:	00000000 	.word	0x00000000
 800aca4:	42cd0000 	.word	0x42cd0000
 800aca8:	42b40000 	.word	0x42b40000
 800acac:	408f4000 	.word	0x408f4000

0800acb0 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800acb0:	b084      	sub	sp, #16
 800acb2:	b5b0      	push	{r4, r5, r7, lr}
 800acb4:	ed2d 8b02 	vpush	{d8}
 800acb8:	b084      	sub	sp, #16
 800acba:	af00      	add	r7, sp, #0
 800acbc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800acc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acc4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800acc8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800accc:	2b01      	cmp	r3, #1
 800acce:	f040 80a5 	bne.w	800ae1c <turn180R+0x16c>
		highspeed_mode = 1;
 800acd2:	4ba5      	ldr	r3, [pc, #660]	; (800af68 <turn180R+0x2b8>)
 800acd4:	2201      	movs	r2, #1
 800acd6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800acd8:	2301      	movs	r3, #1
 800acda:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acdc:	2300      	movs	r3, #0
 800acde:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ace8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800acec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800acf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800acf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acfc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ad00:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ad04:	eddf 5a99 	vldr	s11, [pc, #612]	; 800af6c <turn180R+0x2bc>
 800ad08:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	eeb0 2a47 	vmov.f32	s4, s14
 800ad12:	eef0 1a46 	vmov.f32	s3, s12
 800ad16:	eeb0 1a66 	vmov.f32	s2, s13
 800ad1a:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af70 <turn180R+0x2c0>
 800ad1e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800af74 <turn180R+0x2c4>
 800ad22:	f7f8 f917 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad2a:	2302      	movs	r3, #2
 800ad2c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad2e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad32:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad36:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad3a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad3e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad46:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad4a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad4e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad52:	eddf 4a86 	vldr	s9, [pc, #536]	; 800af6c <turn180R+0x2bc>
 800ad56:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	eeb0 2a47 	vmov.f32	s4, s14
 800ad60:	eef0 1a45 	vmov.f32	s3, s10
 800ad64:	eeb0 1a65 	vmov.f32	s2, s11
 800ad68:	eef0 0a46 	vmov.f32	s1, s12
 800ad6c:	eeb0 0a66 	vmov.f32	s0, s13
 800ad70:	f7f8 f8f0 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800ad74:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d10c      	bne.n	800ad96 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad80:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad84:	eeb0 1a47 	vmov.f32	s2, s14
 800ad88:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800af78 <turn180R+0x2c8>
 800ad8c:	eeb0 0a67 	vmov.f32	s0, s15
 800ad90:	f7f9 f856 	bl	8003e40 <mollifier_slalom_table>
 800ad94:	e015      	b.n	800adc2 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad9a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad9e:	eef1 7a67 	vneg.f32	s15, s15
 800ada2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ada6:	eef0 2a66 	vmov.f32	s5, s13
 800adaa:	eeb0 2a67 	vmov.f32	s4, s15
 800adae:	eddf 1a70 	vldr	s3, [pc, #448]	; 800af70 <turn180R+0x2c0>
 800adb2:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800af70 <turn180R+0x2c0>
 800adb6:	eddf 0a70 	vldr	s1, [pc, #448]	; 800af78 <turn180R+0x2c8>
 800adba:	eeb0 0a47 	vmov.f32	s0, s14
 800adbe:	f7f8 feef 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800adce:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800af7c <turn180R+0x2cc>
 800add2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800add6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adda:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ade2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ade6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adea:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800adee:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adf2:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800af6c <turn180R+0x2bc>
 800adf6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	eeb0 2a47 	vmov.f32	s4, s14
 800ae00:	eef0 1a65 	vmov.f32	s3, s11
 800ae04:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800af70 <turn180R+0x2c0>
 800ae08:	eef0 0a46 	vmov.f32	s1, s12
 800ae0c:	eeb0 0a66 	vmov.f32	s0, s13
 800ae10:	f7f8 f8a0 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800ae14:	4b54      	ldr	r3, [pc, #336]	; (800af68 <turn180R+0x2b8>)
 800ae16:	2200      	movs	r2, #0
 800ae18:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae1a:	e09c      	b.n	800af56 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae20:	2300      	movs	r3, #0
 800ae22:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae24:	2302      	movs	r3, #2
 800ae26:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae2c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae30:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae34:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae38:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae3c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae48:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae4c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae50:	eddf 4a46 	vldr	s9, [pc, #280]	; 800af6c <turn180R+0x2bc>
 800ae54:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	eeb0 2a47 	vmov.f32	s4, s14
 800ae5e:	eef0 1a45 	vmov.f32	s3, s10
 800ae62:	eeb0 1a65 	vmov.f32	s2, s11
 800ae66:	eef0 0a46 	vmov.f32	s1, s12
 800ae6a:	eeb0 0a66 	vmov.f32	s0, s13
 800ae6e:	f7f8 f871 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800ae72:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d10c      	bne.n	800ae94 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae7e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae82:	eeb0 1a47 	vmov.f32	s2, s14
 800ae86:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800af78 <turn180R+0x2c8>
 800ae8a:	eeb0 0a67 	vmov.f32	s0, s15
 800ae8e:	f7f8 ffd7 	bl	8003e40 <mollifier_slalom_table>
 800ae92:	e015      	b.n	800aec0 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ae94:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae98:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ae9c:	eef1 7a67 	vneg.f32	s15, s15
 800aea0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aea4:	eef0 2a66 	vmov.f32	s5, s13
 800aea8:	eeb0 2a67 	vmov.f32	s4, s15
 800aeac:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af70 <turn180R+0x2c0>
 800aeb0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af70 <turn180R+0x2c0>
 800aeb4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af78 <turn180R+0x2c8>
 800aeb8:	eeb0 0a47 	vmov.f32	s0, s14
 800aebc:	f7f8 fe70 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aec0:	2301      	movs	r3, #1
 800aec2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aec4:	2300      	movs	r3, #0
 800aec6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aec8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aecc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aed0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aed4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aedc:	edd7 7a01 	vldr	s15, [r7, #4]
 800aee0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aee8:	eef0 7ae7 	vabs.f32	s15, s15
 800aeec:	ee17 0a90 	vmov	r0, s15
 800aef0:	f7f5 fb52 	bl	8000598 <__aeabi_f2d>
 800aef4:	f04f 0200 	mov.w	r2, #0
 800aef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aefc:	f7f5 fcce 	bl	800089c <__aeabi_ddiv>
 800af00:	4602      	mov	r2, r0
 800af02:	460b      	mov	r3, r1
 800af04:	4614      	mov	r4, r2
 800af06:	461d      	mov	r5, r3
 800af08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f5 fb44 	bl	8000598 <__aeabi_f2d>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4620      	mov	r0, r4
 800af16:	4629      	mov	r1, r5
 800af18:	f7f5 fcc0 	bl	800089c <__aeabi_ddiv>
 800af1c:	4602      	mov	r2, r0
 800af1e:	460b      	mov	r3, r1
 800af20:	4610      	mov	r0, r2
 800af22:	4619      	mov	r1, r3
 800af24:	f04f 0200 	mov.w	r2, #0
 800af28:	4b15      	ldr	r3, [pc, #84]	; (800af80 <turn180R+0x2d0>)
 800af2a:	f7f5 f9d7 	bl	80002dc <__adddf3>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af32:	4610      	mov	r0, r2
 800af34:	4619      	mov	r1, r3
 800af36:	f7f5 fe5f 	bl	8000bf8 <__aeabi_d2f>
 800af3a:	4603      	mov	r3, r0
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	ee02 3a10 	vmov	s4, r3
 800af42:	edd7 1a01 	vldr	s3, [r7, #4]
 800af46:	ed97 1a01 	vldr	s2, [r7, #4]
 800af4a:	eef0 0a68 	vmov.f32	s1, s17
 800af4e:	eeb0 0a48 	vmov.f32	s0, s16
 800af52:	f7f7 ffff 	bl	8002f54 <straight_table2>
}
 800af56:	bf00      	nop
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	ecbd 8b02 	vpop	{d8}
 800af60:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af64:	b004      	add	sp, #16
 800af66:	4770      	bx	lr
 800af68:	20000808 	.word	0x20000808
 800af6c:	42340000 	.word	0x42340000
 800af70:	00000000 	.word	0x00000000
 800af74:	42cd0000 	.word	0x42cd0000
 800af78:	c3340000 	.word	0xc3340000
 800af7c:	42b40000 	.word	0x42b40000
 800af80:	408f4000 	.word	0x408f4000

0800af84 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af84:	b084      	sub	sp, #16
 800af86:	b5b0      	push	{r4, r5, r7, lr}
 800af88:	ed2d 8b02 	vpush	{d8}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af98:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af9c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	f040 80a3 	bne.w	800b0ec <turn180L+0x168>
		highspeed_mode = 1;
 800afa6:	4ba3      	ldr	r3, [pc, #652]	; (800b234 <turn180L+0x2b0>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800afac:	2301      	movs	r3, #1
 800afae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800afb4:	2300      	movs	r3, #0
 800afb6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afb8:	2300      	movs	r3, #0
 800afba:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afbc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afc0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afc4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afc8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afd0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afd4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afd8:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b238 <turn180L+0x2b4>
 800afdc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	eeb0 2a47 	vmov.f32	s4, s14
 800afe6:	eef0 1a46 	vmov.f32	s3, s12
 800afea:	eeb0 1a66 	vmov.f32	s2, s13
 800afee:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b23c <turn180L+0x2b8>
 800aff2:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b240 <turn180L+0x2bc>
 800aff6:	f7f7 ffad 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800affa:	2300      	movs	r3, #0
 800affc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800affe:	2302      	movs	r3, #2
 800b000:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b002:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b006:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b00a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b00e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b012:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b016:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b01a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b01e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b022:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b026:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b238 <turn180L+0x2b4>
 800b02a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	eeb0 2a47 	vmov.f32	s4, s14
 800b034:	eef0 1a45 	vmov.f32	s3, s10
 800b038:	eeb0 1a65 	vmov.f32	s2, s11
 800b03c:	eef0 0a46 	vmov.f32	s1, s12
 800b040:	eeb0 0a66 	vmov.f32	s0, s13
 800b044:	f7f7 ff86 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b048:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d10c      	bne.n	800b06a <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b050:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b054:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b058:	eeb0 1a47 	vmov.f32	s2, s14
 800b05c:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b244 <turn180L+0x2c0>
 800b060:	eeb0 0a67 	vmov.f32	s0, s15
 800b064:	f7f8 feec 	bl	8003e40 <mollifier_slalom_table>
 800b068:	e013      	b.n	800b092 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b06a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b06e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b072:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b076:	eef0 2a66 	vmov.f32	s5, s13
 800b07a:	eeb0 2a47 	vmov.f32	s4, s14
 800b07e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b23c <turn180L+0x2b8>
 800b082:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b23c <turn180L+0x2b8>
 800b086:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b244 <turn180L+0x2c0>
 800b08a:	eeb0 0a67 	vmov.f32	s0, s15
 800b08e:	f7f8 fd87 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b092:	2300      	movs	r3, #0
 800b094:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b09a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b09e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b248 <turn180L+0x2c4>
 800b0a2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b0a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0aa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0ae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0ba:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b0be:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0c2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b238 <turn180L+0x2b4>
 800b0c6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b0ca:	68f8      	ldr	r0, [r7, #12]
 800b0cc:	eeb0 2a47 	vmov.f32	s4, s14
 800b0d0:	eef0 1a65 	vmov.f32	s3, s11
 800b0d4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b23c <turn180L+0x2b8>
 800b0d8:	eef0 0a46 	vmov.f32	s1, s12
 800b0dc:	eeb0 0a66 	vmov.f32	s0, s13
 800b0e0:	f7f7 ff38 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800b0e4:	4b53      	ldr	r3, [pc, #332]	; (800b234 <turn180L+0x2b0>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b0ea:	e09a      	b.n	800b222 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0fc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b100:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b104:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b108:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b10c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b110:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b114:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b118:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b11c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b120:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b238 <turn180L+0x2b4>
 800b124:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b128:	68f8      	ldr	r0, [r7, #12]
 800b12a:	eeb0 2a47 	vmov.f32	s4, s14
 800b12e:	eef0 1a45 	vmov.f32	s3, s10
 800b132:	eeb0 1a65 	vmov.f32	s2, s11
 800b136:	eef0 0a46 	vmov.f32	s1, s12
 800b13a:	eeb0 0a66 	vmov.f32	s0, s13
 800b13e:	f7f7 ff09 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b142:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b146:	2b01      	cmp	r3, #1
 800b148:	d10c      	bne.n	800b164 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b14a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b14e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b152:	eeb0 1a47 	vmov.f32	s2, s14
 800b156:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b244 <turn180L+0x2c0>
 800b15a:	eeb0 0a67 	vmov.f32	s0, s15
 800b15e:	f7f8 fe6f 	bl	8003e40 <mollifier_slalom_table>
 800b162:	e013      	b.n	800b18c <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b164:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b168:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b16c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b170:	eef0 2a66 	vmov.f32	s5, s13
 800b174:	eeb0 2a47 	vmov.f32	s4, s14
 800b178:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b23c <turn180L+0x2b8>
 800b17c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b23c <turn180L+0x2b8>
 800b180:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b244 <turn180L+0x2c0>
 800b184:	eeb0 0a67 	vmov.f32	s0, s15
 800b188:	f7f8 fd0a 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b18c:	2301      	movs	r3, #1
 800b18e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b194:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b198:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b19c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800b1ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b1b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1b4:	eef0 7ae7 	vabs.f32	s15, s15
 800b1b8:	ee17 0a90 	vmov	r0, s15
 800b1bc:	f7f5 f9ec 	bl	8000598 <__aeabi_f2d>
 800b1c0:	f04f 0200 	mov.w	r2, #0
 800b1c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1c8:	f7f5 fb68 	bl	800089c <__aeabi_ddiv>
 800b1cc:	4602      	mov	r2, r0
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	4614      	mov	r4, r2
 800b1d2:	461d      	mov	r5, r3
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7f5 f9de 	bl	8000598 <__aeabi_f2d>
 800b1dc:	4602      	mov	r2, r0
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	4629      	mov	r1, r5
 800b1e4:	f7f5 fb5a 	bl	800089c <__aeabi_ddiv>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4610      	mov	r0, r2
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	f04f 0200 	mov.w	r2, #0
 800b1f4:	4b15      	ldr	r3, [pc, #84]	; (800b24c <turn180L+0x2c8>)
 800b1f6:	f7f5 f871 	bl	80002dc <__adddf3>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1fe:	4610      	mov	r0, r2
 800b200:	4619      	mov	r1, r3
 800b202:	f7f5 fcf9 	bl	8000bf8 <__aeabi_d2f>
 800b206:	4603      	mov	r3, r0
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	ee02 3a10 	vmov	s4, r3
 800b20e:	edd7 1a01 	vldr	s3, [r7, #4]
 800b212:	ed97 1a01 	vldr	s2, [r7, #4]
 800b216:	eef0 0a68 	vmov.f32	s1, s17
 800b21a:	eeb0 0a48 	vmov.f32	s0, s16
 800b21e:	f7f7 fe99 	bl	8002f54 <straight_table2>
}
 800b222:	bf00      	nop
 800b224:	3710      	adds	r7, #16
 800b226:	46bd      	mov	sp, r7
 800b228:	ecbd 8b02 	vpop	{d8}
 800b22c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b230:	b004      	add	sp, #16
 800b232:	4770      	bx	lr
 800b234:	20000808 	.word	0x20000808
 800b238:	42340000 	.word	0x42340000
 800b23c:	00000000 	.word	0x00000000
 800b240:	42cd0000 	.word	0x42cd0000
 800b244:	43340000 	.word	0x43340000
 800b248:	42b40000 	.word	0x42b40000
 800b24c:	408f4000 	.word	0x408f4000

0800b250 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b250:	b084      	sub	sp, #16
 800b252:	b5b0      	push	{r4, r5, r7, lr}
 800b254:	ed2d 8b02 	vpush	{d8}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b260:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b264:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b268:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b26c:	2b01      	cmp	r3, #1
 800b26e:	f040 80ae 	bne.w	800b3ce <turn45inR+0x17e>
		highspeed_mode = 1;
 800b272:	4bdd      	ldr	r3, [pc, #884]	; (800b5e8 <turn45inR+0x398>)
 800b274:	2201      	movs	r2, #1
 800b276:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b278:	2301      	movs	r3, #1
 800b27a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b27c:	2300      	movs	r3, #0
 800b27e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b280:	2300      	movs	r3, #0
 800b282:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b284:	2300      	movs	r3, #0
 800b286:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b288:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b28c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b290:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b294:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b29c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b2a0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b2a4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b5ec <turn45inR+0x39c>
 800b2a8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800b2b2:	eef0 1a46 	vmov.f32	s3, s12
 800b2b6:	eeb0 1a66 	vmov.f32	s2, s13
 800b2ba:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b5f8 <turn45inR+0x3a8>
 800b2be:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b5f0 <turn45inR+0x3a0>
 800b2c2:	f7f7 fe47 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2ca:	2302      	movs	r3, #2
 800b2cc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2ce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2d2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2d6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2da:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2ea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2ee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2f2:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b5ec <turn45inR+0x39c>
 800b2f6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2fa:	68f8      	ldr	r0, [r7, #12]
 800b2fc:	eeb0 2a47 	vmov.f32	s4, s14
 800b300:	eef0 1a45 	vmov.f32	s3, s10
 800b304:	eeb0 1a65 	vmov.f32	s2, s11
 800b308:	eef0 0a46 	vmov.f32	s1, s12
 800b30c:	eeb0 0a66 	vmov.f32	s0, s13
 800b310:	f7f7 fe20 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b314:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b318:	2b01      	cmp	r3, #1
 800b31a:	d10c      	bne.n	800b336 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b31c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b320:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b324:	eeb0 1a47 	vmov.f32	s2, s14
 800b328:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b5fc <turn45inR+0x3ac>
 800b32c:	eeb0 0a67 	vmov.f32	s0, s15
 800b330:	f7f8 fd86 	bl	8003e40 <mollifier_slalom_table>
 800b334:	e015      	b.n	800b362 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b336:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b33a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b33e:	eef1 7a67 	vneg.f32	s15, s15
 800b342:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b346:	eef0 2a66 	vmov.f32	s5, s13
 800b34a:	eeb0 2a67 	vmov.f32	s4, s15
 800b34e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b5f8 <turn45inR+0x3a8>
 800b352:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b5f8 <turn45inR+0x3a8>
 800b356:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b5fc <turn45inR+0x3ac>
 800b35a:	eeb0 0a47 	vmov.f32	s0, s14
 800b35e:	f7f8 fc1f 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b362:	2300      	movs	r3, #0
 800b364:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b366:	2300      	movs	r3, #0
 800b368:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	4618      	mov	r0, r3
 800b36e:	f7f5 f913 	bl	8000598 <__aeabi_f2d>
 800b372:	a39b      	add	r3, pc, #620	; (adr r3, 800b5e0 <turn45inR+0x390>)
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	f7f4 ffb0 	bl	80002dc <__adddf3>
 800b37c:	4602      	mov	r2, r0
 800b37e:	460b      	mov	r3, r1
 800b380:	4610      	mov	r0, r2
 800b382:	4619      	mov	r1, r3
 800b384:	f7f5 fc38 	bl	8000bf8 <__aeabi_d2f>
 800b388:	4603      	mov	r3, r0
 800b38a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b38e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b392:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b396:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b39a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b39e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b3a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b3a6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b5ec <turn45inR+0x39c>
 800b3aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	eeb0 2a47 	vmov.f32	s4, s14
 800b3b4:	eef0 1a46 	vmov.f32	s3, s12
 800b3b8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b5f8 <turn45inR+0x3a8>
 800b3bc:	eef0 0a66 	vmov.f32	s1, s13
 800b3c0:	ee00 3a10 	vmov	s0, r3
 800b3c4:	f7f7 fdc6 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800b3c8:	4b87      	ldr	r3, [pc, #540]	; (800b5e8 <turn45inR+0x398>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b3ce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f040 809d 	bne.w	800b512 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b400:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b404:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b408:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b40c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b5ec <turn45inR+0x39c>
 800b410:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	eeb0 2a47 	vmov.f32	s4, s14
 800b41a:	eef0 1a45 	vmov.f32	s3, s10
 800b41e:	eeb0 1a65 	vmov.f32	s2, s11
 800b422:	eef0 0a46 	vmov.f32	s1, s12
 800b426:	eeb0 0a66 	vmov.f32	s0, s13
 800b42a:	f7f7 fd93 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b42e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b432:	2b01      	cmp	r3, #1
 800b434:	d10c      	bne.n	800b450 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b436:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b43a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b43e:	eeb0 1a47 	vmov.f32	s2, s14
 800b442:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b5fc <turn45inR+0x3ac>
 800b446:	eeb0 0a67 	vmov.f32	s0, s15
 800b44a:	f7f8 fcf9 	bl	8003e40 <mollifier_slalom_table>
 800b44e:	e015      	b.n	800b47c <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b450:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b454:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b458:	eef1 7a67 	vneg.f32	s15, s15
 800b45c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b460:	eef0 2a66 	vmov.f32	s5, s13
 800b464:	eeb0 2a67 	vmov.f32	s4, s15
 800b468:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b5f8 <turn45inR+0x3a8>
 800b46c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b5f8 <turn45inR+0x3a8>
 800b470:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b5fc <turn45inR+0x3ac>
 800b474:	eeb0 0a47 	vmov.f32	s0, s14
 800b478:	f7f8 fb92 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b480:	2300      	movs	r3, #0
 800b482:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b484:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b488:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b48c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b498:	edd7 7a01 	vldr	s15, [r7, #4]
 800b49c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b4a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4a4:	eef0 7ae7 	vabs.f32	s15, s15
 800b4a8:	ee17 0a90 	vmov	r0, s15
 800b4ac:	f7f5 f874 	bl	8000598 <__aeabi_f2d>
 800b4b0:	f04f 0200 	mov.w	r2, #0
 800b4b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4b8:	f7f5 f9f0 	bl	800089c <__aeabi_ddiv>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4614      	mov	r4, r2
 800b4c2:	461d      	mov	r5, r3
 800b4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7f5 f866 	bl	8000598 <__aeabi_f2d>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	f7f5 f9e2 	bl	800089c <__aeabi_ddiv>
 800b4d8:	4602      	mov	r2, r0
 800b4da:	460b      	mov	r3, r1
 800b4dc:	4610      	mov	r0, r2
 800b4de:	4619      	mov	r1, r3
 800b4e0:	f04f 0200 	mov.w	r2, #0
 800b4e4:	4b43      	ldr	r3, [pc, #268]	; (800b5f4 <turn45inR+0x3a4>)
 800b4e6:	f7f4 fef9 	bl	80002dc <__adddf3>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b4ee:	4610      	mov	r0, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	f7f5 fb81 	bl	8000bf8 <__aeabi_d2f>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	ee02 3a10 	vmov	s4, r3
 800b4fe:	edd7 1a01 	vldr	s3, [r7, #4]
 800b502:	ed97 1a01 	vldr	s2, [r7, #4]
 800b506:	eef0 0a68 	vmov.f32	s1, s17
 800b50a:	eeb0 0a48 	vmov.f32	s0, s16
 800b50e:	f7f7 fd21 	bl	8002f54 <straight_table2>

	}
	if (test_mode >= 2) {
 800b512:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b516:	2b01      	cmp	r3, #1
 800b518:	f240 80d0 	bls.w	800b6bc <turn45inR+0x46c>

		highspeed_mode = 1;
 800b51c:	4b32      	ldr	r3, [pc, #200]	; (800b5e8 <turn45inR+0x398>)
 800b51e:	2201      	movs	r2, #1
 800b520:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b522:	2301      	movs	r3, #1
 800b524:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b526:	2300      	movs	r3, #0
 800b528:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b52e:	2300      	movs	r3, #0
 800b530:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b532:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b536:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b53a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b53e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b542:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b546:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b54a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b54e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b5ec <turn45inR+0x39c>
 800b552:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b556:	68f8      	ldr	r0, [r7, #12]
 800b558:	eeb0 2a47 	vmov.f32	s4, s14
 800b55c:	eef0 1a46 	vmov.f32	s3, s12
 800b560:	eeb0 1a66 	vmov.f32	s2, s13
 800b564:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b5f8 <turn45inR+0x3a8>
 800b568:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b5f0 <turn45inR+0x3a0>
 800b56c:	f7f7 fcf2 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800b570:	2300      	movs	r3, #0
 800b572:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b574:	2302      	movs	r3, #2
 800b576:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b578:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b57c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b580:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b584:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b588:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b590:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b594:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b598:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b59c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b5ec <turn45inR+0x39c>
 800b5a0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	eeb0 2a47 	vmov.f32	s4, s14
 800b5aa:	eef0 1a45 	vmov.f32	s3, s10
 800b5ae:	eeb0 1a65 	vmov.f32	s2, s11
 800b5b2:	eef0 0a46 	vmov.f32	s1, s12
 800b5b6:	eeb0 0a66 	vmov.f32	s0, s13
 800b5ba:	f7f7 fccb 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b5be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d11c      	bne.n	800b600 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b5c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5ce:	eeb0 1a47 	vmov.f32	s2, s14
 800b5d2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b5fc <turn45inR+0x3ac>
 800b5d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b5da:	f7f8 fc31 	bl	8003e40 <mollifier_slalom_table>
 800b5de:	e025      	b.n	800b62c <turn45inR+0x3dc>
 800b5e0:	c022ec18 	.word	0xc022ec18
 800b5e4:	405fd1de 	.word	0x405fd1de
 800b5e8:	20000808 	.word	0x20000808
 800b5ec:	42340000 	.word	0x42340000
 800b5f0:	42cd0000 	.word	0x42cd0000
 800b5f4:	408f4000 	.word	0x408f4000
 800b5f8:	00000000 	.word	0x00000000
 800b5fc:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b600:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b604:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b608:	eef1 7a67 	vneg.f32	s15, s15
 800b60c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b610:	eef0 2a66 	vmov.f32	s5, s13
 800b614:	eeb0 2a67 	vmov.f32	s4, s15
 800b618:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b5f8 <turn45inR+0x3a8>
 800b61c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b5f8 <turn45inR+0x3a8>
 800b620:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b5fc <turn45inR+0x3ac>
 800b624:	eeb0 0a47 	vmov.f32	s0, s14
 800b628:	f7f8 faba 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b62c:	2300      	movs	r3, #0
 800b62e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b630:	2300      	movs	r3, #0
 800b632:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b634:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b638:	3b02      	subs	r3, #2
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f4 ff9a 	bl	8000574 <__aeabi_i2d>
 800b640:	a325      	add	r3, pc, #148	; (adr r3, 800b6d8 <turn45inR+0x488>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	f7f4 ffff 	bl	8000648 <__aeabi_dmul>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4614      	mov	r4, r2
 800b650:	461d      	mov	r5, r3
 800b652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b654:	4618      	mov	r0, r3
 800b656:	f7f4 ff9f 	bl	8000598 <__aeabi_f2d>
 800b65a:	4602      	mov	r2, r0
 800b65c:	460b      	mov	r3, r1
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f4 fe3b 	bl	80002dc <__adddf3>
 800b666:	4602      	mov	r2, r0
 800b668:	460b      	mov	r3, r1
 800b66a:	4610      	mov	r0, r2
 800b66c:	4619      	mov	r1, r3
 800b66e:	f7f5 fac3 	bl	8000bf8 <__aeabi_d2f>
 800b672:	4603      	mov	r3, r0
 800b674:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b678:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b67c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b680:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b684:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b688:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b68c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b690:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b694:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b6d0 <turn45inR+0x480>
 800b698:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b69c:	68f8      	ldr	r0, [r7, #12]
 800b69e:	eeb0 2a47 	vmov.f32	s4, s14
 800b6a2:	eef0 1a65 	vmov.f32	s3, s11
 800b6a6:	eeb0 1a46 	vmov.f32	s2, s12
 800b6aa:	eef0 0a66 	vmov.f32	s1, s13
 800b6ae:	ee00 3a10 	vmov	s0, r3
 800b6b2:	f7f7 fc4f 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800b6b6:	4b07      	ldr	r3, [pc, #28]	; (800b6d4 <turn45inR+0x484>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	701a      	strb	r2, [r3, #0]
	}

}
 800b6bc:	bf00      	nop
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	ecbd 8b02 	vpop	{d8}
 800b6c6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6ca:	b004      	add	sp, #16
 800b6cc:	4770      	bx	lr
 800b6ce:	bf00      	nop
 800b6d0:	42340000 	.word	0x42340000
 800b6d4:	20000808 	.word	0x20000808
 800b6d8:	c022ec18 	.word	0xc022ec18
 800b6dc:	404fd1de 	.word	0x404fd1de

0800b6e0 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	b5b0      	push	{r4, r5, r7, lr}
 800b6e4:	ed2d 8b02 	vpush	{d8}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b6f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b6f4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b6f8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	f040 80ac 	bne.w	800b85a <turn45inL+0x17a>
		highspeed_mode = 1;
 800b702:	4bdb      	ldr	r3, [pc, #876]	; (800ba70 <turn45inL+0x390>)
 800b704:	2201      	movs	r2, #1
 800b706:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b708:	2301      	movs	r3, #1
 800b70a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b70c:	2300      	movs	r3, #0
 800b70e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b714:	2300      	movs	r3, #0
 800b716:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b718:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b71c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b720:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b724:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b72c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b730:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b734:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800ba80 <turn45inL+0x3a0>
 800b738:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	eeb0 2a47 	vmov.f32	s4, s14
 800b742:	eef0 1a46 	vmov.f32	s3, s12
 800b746:	eeb0 1a66 	vmov.f32	s2, s13
 800b74a:	eddf 0acc 	vldr	s1, [pc, #816]	; 800ba7c <turn45inL+0x39c>
 800b74e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800ba74 <turn45inL+0x394>
 800b752:	f7f7 fbff 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800b756:	2300      	movs	r3, #0
 800b758:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b75a:	2302      	movs	r3, #2
 800b75c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b75e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b762:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b766:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b76a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b76e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b772:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b776:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b77a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b77e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b782:	eddf 4abf 	vldr	s9, [pc, #764]	; 800ba80 <turn45inL+0x3a0>
 800b786:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	eeb0 2a47 	vmov.f32	s4, s14
 800b790:	eef0 1a45 	vmov.f32	s3, s10
 800b794:	eeb0 1a65 	vmov.f32	s2, s11
 800b798:	eef0 0a46 	vmov.f32	s1, s12
 800b79c:	eeb0 0a66 	vmov.f32	s0, s13
 800b7a0:	f7f7 fbd8 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b7a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7a8:	2b01      	cmp	r3, #1
 800b7aa:	d10c      	bne.n	800b7c6 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b7ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7b4:	eeb0 1a47 	vmov.f32	s2, s14
 800b7b8:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ba80 <turn45inL+0x3a0>
 800b7bc:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c0:	f7f8 fb3e 	bl	8003e40 <mollifier_slalom_table>
 800b7c4:	e013      	b.n	800b7ee <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7d2:	eef0 2a66 	vmov.f32	s5, s13
 800b7d6:	eeb0 2a47 	vmov.f32	s4, s14
 800b7da:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800ba7c <turn45inL+0x39c>
 800b7de:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800ba7c <turn45inL+0x39c>
 800b7e2:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ba80 <turn45inL+0x3a0>
 800b7e6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7ea:	f7f8 f9d9 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7f4 fecd 	bl	8000598 <__aeabi_f2d>
 800b7fe:	a39a      	add	r3, pc, #616	; (adr r3, 800ba68 <turn45inL+0x388>)
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fd6a 	bl	80002dc <__adddf3>
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4610      	mov	r0, r2
 800b80e:	4619      	mov	r1, r3
 800b810:	f7f5 f9f2 	bl	8000bf8 <__aeabi_d2f>
 800b814:	4603      	mov	r3, r0
 800b816:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b81a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b81e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b822:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b82a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b82e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b832:	eddf 5a93 	vldr	s11, [pc, #588]	; 800ba80 <turn45inL+0x3a0>
 800b836:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	eeb0 2a47 	vmov.f32	s4, s14
 800b840:	eef0 1a46 	vmov.f32	s3, s12
 800b844:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800ba7c <turn45inL+0x39c>
 800b848:	eef0 0a66 	vmov.f32	s1, s13
 800b84c:	ee00 3a10 	vmov	s0, r3
 800b850:	f7f7 fb80 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800b854:	4b86      	ldr	r3, [pc, #536]	; (800ba70 <turn45inL+0x390>)
 800b856:	2200      	movs	r2, #0
 800b858:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b85a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f040 809b 	bne.w	800b99a <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b864:	2300      	movs	r3, #0
 800b866:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b868:	2300      	movs	r3, #0
 800b86a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b86c:	2302      	movs	r3, #2
 800b86e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b870:	2300      	movs	r3, #0
 800b872:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b874:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b878:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b87c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b880:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b884:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b888:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b88c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b890:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b894:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b898:	eddf 4a79 	vldr	s9, [pc, #484]	; 800ba80 <turn45inL+0x3a0>
 800b89c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	eeb0 2a47 	vmov.f32	s4, s14
 800b8a6:	eef0 1a45 	vmov.f32	s3, s10
 800b8aa:	eeb0 1a65 	vmov.f32	s2, s11
 800b8ae:	eef0 0a46 	vmov.f32	s1, s12
 800b8b2:	eeb0 0a66 	vmov.f32	s0, s13
 800b8b6:	f7f7 fb4d 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800b8ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d10c      	bne.n	800b8dc <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b8c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8ca:	eeb0 1a47 	vmov.f32	s2, s14
 800b8ce:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ba80 <turn45inL+0x3a0>
 800b8d2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d6:	f7f8 fab3 	bl	8003e40 <mollifier_slalom_table>
 800b8da:	e013      	b.n	800b904 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b8dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8e8:	eef0 2a66 	vmov.f32	s5, s13
 800b8ec:	eeb0 2a47 	vmov.f32	s4, s14
 800b8f0:	eddf 1a62 	vldr	s3, [pc, #392]	; 800ba7c <turn45inL+0x39c>
 800b8f4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ba7c <turn45inL+0x39c>
 800b8f8:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ba80 <turn45inL+0x3a0>
 800b8fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b900:	f7f8 f94e 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b904:	2303      	movs	r3, #3
 800b906:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b90c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b910:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b914:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b920:	edd7 7a01 	vldr	s15, [r7, #4]
 800b924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b92c:	eef0 7ae7 	vabs.f32	s15, s15
 800b930:	ee17 0a90 	vmov	r0, s15
 800b934:	f7f4 fe30 	bl	8000598 <__aeabi_f2d>
 800b938:	f04f 0200 	mov.w	r2, #0
 800b93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b940:	f7f4 ffac 	bl	800089c <__aeabi_ddiv>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4614      	mov	r4, r2
 800b94a:	461d      	mov	r5, r3
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f4 fe22 	bl	8000598 <__aeabi_f2d>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 ff9e 	bl	800089c <__aeabi_ddiv>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4610      	mov	r0, r2
 800b966:	4619      	mov	r1, r3
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	4b42      	ldr	r3, [pc, #264]	; (800ba78 <turn45inL+0x398>)
 800b96e:	f7f4 fcb5 	bl	80002dc <__adddf3>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b976:	4610      	mov	r0, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f7f5 f93d 	bl	8000bf8 <__aeabi_d2f>
 800b97e:	4603      	mov	r3, r0
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	ee02 3a10 	vmov	s4, r3
 800b986:	edd7 1a01 	vldr	s3, [r7, #4]
 800b98a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b98e:	eef0 0a68 	vmov.f32	s1, s17
 800b992:	eeb0 0a48 	vmov.f32	s0, s16
 800b996:	f7f7 fadd 	bl	8002f54 <straight_table2>

	}
	if (test_mode >= 2) {
 800b99a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	f240 80cc 	bls.w	800bb3c <turn45inL+0x45c>

		highspeed_mode = 1;
 800b9a4:	4b32      	ldr	r3, [pc, #200]	; (800ba70 <turn45inL+0x390>)
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9ba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9d6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ba80 <turn45inL+0x3a0>
 800b9da:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9de:	68f8      	ldr	r0, [r7, #12]
 800b9e0:	eeb0 2a47 	vmov.f32	s4, s14
 800b9e4:	eef0 1a46 	vmov.f32	s3, s12
 800b9e8:	eeb0 1a66 	vmov.f32	s2, s13
 800b9ec:	eddf 0a23 	vldr	s1, [pc, #140]	; 800ba7c <turn45inL+0x39c>
 800b9f0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800ba74 <turn45inL+0x394>
 800b9f4:	f7f7 faae 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba00:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba08:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba0c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba1c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba20:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba24:	eddf 4a16 	vldr	s9, [pc, #88]	; 800ba80 <turn45inL+0x3a0>
 800ba28:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba2c:	68f8      	ldr	r0, [r7, #12]
 800ba2e:	eeb0 2a47 	vmov.f32	s4, s14
 800ba32:	eef0 1a45 	vmov.f32	s3, s10
 800ba36:	eeb0 1a65 	vmov.f32	s2, s11
 800ba3a:	eef0 0a46 	vmov.f32	s1, s12
 800ba3e:	eeb0 0a66 	vmov.f32	s0, s13
 800ba42:	f7f7 fa87 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800ba46:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d11a      	bne.n	800ba84 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba52:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba56:	eeb0 1a47 	vmov.f32	s2, s14
 800ba5a:	eddf 0a09 	vldr	s1, [pc, #36]	; 800ba80 <turn45inL+0x3a0>
 800ba5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba62:	f7f8 f9ed 	bl	8003e40 <mollifier_slalom_table>
 800ba66:	e021      	b.n	800baac <turn45inL+0x3cc>
 800ba68:	c022ec18 	.word	0xc022ec18
 800ba6c:	405fd1de 	.word	0x405fd1de
 800ba70:	20000808 	.word	0x20000808
 800ba74:	42cd0000 	.word	0x42cd0000
 800ba78:	408f4000 	.word	0x408f4000
 800ba7c:	00000000 	.word	0x00000000
 800ba80:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba88:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba8c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba90:	eef0 2a66 	vmov.f32	s5, s13
 800ba94:	eeb0 2a47 	vmov.f32	s4, s14
 800ba98:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ba7c <turn45inL+0x39c>
 800ba9c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ba7c <turn45inL+0x39c>
 800baa0:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ba80 <turn45inL+0x3a0>
 800baa4:	eeb0 0a67 	vmov.f32	s0, s15
 800baa8:	f7f8 f87a 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800baac:	2300      	movs	r3, #0
 800baae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bab4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bab8:	3b02      	subs	r3, #2
 800baba:	4618      	mov	r0, r3
 800babc:	f7f4 fd5a 	bl	8000574 <__aeabi_i2d>
 800bac0:	a325      	add	r3, pc, #148	; (adr r3, 800bb58 <turn45inL+0x478>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7f4 fdbf 	bl	8000648 <__aeabi_dmul>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4614      	mov	r4, r2
 800bad0:	461d      	mov	r5, r3
 800bad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7f4 fd5f 	bl	8000598 <__aeabi_f2d>
 800bada:	4602      	mov	r2, r0
 800badc:	460b      	mov	r3, r1
 800bade:	4620      	mov	r0, r4
 800bae0:	4629      	mov	r1, r5
 800bae2:	f7f4 fbfb 	bl	80002dc <__adddf3>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4610      	mov	r0, r2
 800baec:	4619      	mov	r1, r3
 800baee:	f7f5 f883 	bl	8000bf8 <__aeabi_d2f>
 800baf2:	4603      	mov	r3, r0
 800baf4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800baf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bafc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb0c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb10:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb14:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bb50 <turn45inL+0x470>
 800bb18:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb22:	eef0 1a65 	vmov.f32	s3, s11
 800bb26:	eeb0 1a46 	vmov.f32	s2, s12
 800bb2a:	eef0 0a66 	vmov.f32	s1, s13
 800bb2e:	ee00 3a10 	vmov	s0, r3
 800bb32:	f7f7 fa0f 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800bb36:	4b07      	ldr	r3, [pc, #28]	; (800bb54 <turn45inL+0x474>)
 800bb38:	2200      	movs	r2, #0
 800bb3a:	701a      	strb	r2, [r3, #0]
	}

}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	ecbd 8b02 	vpop	{d8}
 800bb46:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bb4a:	b004      	add	sp, #16
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	42340000 	.word	0x42340000
 800bb54:	20000808 	.word	0x20000808
 800bb58:	c022ec18 	.word	0xc022ec18
 800bb5c:	404fd1de 	.word	0x404fd1de

0800bb60 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bb60:	b084      	sub	sp, #16
 800bb62:	b5b0      	push	{r4, r5, r7, lr}
 800bb64:	ed2d 8b02 	vpush	{d8}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb74:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bb78:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	f040 80ae 	bne.w	800bcde <turn135inR+0x17e>
		highspeed_mode = 1;
 800bb82:	4bdd      	ldr	r3, [pc, #884]	; (800bef8 <turn135inR+0x398>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb98:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb9c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bba0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bba4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbac:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bbb0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bbb4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800befc <turn135inR+0x39c>
 800bbb8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbbc:	68f8      	ldr	r0, [r7, #12]
 800bbbe:	eeb0 2a47 	vmov.f32	s4, s14
 800bbc2:	eef0 1a46 	vmov.f32	s3, s12
 800bbc6:	eeb0 1a66 	vmov.f32	s2, s13
 800bbca:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bf08 <turn135inR+0x3a8>
 800bbce:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bf00 <turn135inR+0x3a0>
 800bbd2:	f7f7 f9bf 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbda:	2302      	movs	r3, #2
 800bbdc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbde:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbe2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbe6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbea:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbf2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbfa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbfe:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bc02:	eddf 4abe 	vldr	s9, [pc, #760]	; 800befc <turn135inR+0x39c>
 800bc06:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	eeb0 2a47 	vmov.f32	s4, s14
 800bc10:	eef0 1a45 	vmov.f32	s3, s10
 800bc14:	eeb0 1a65 	vmov.f32	s2, s11
 800bc18:	eef0 0a46 	vmov.f32	s1, s12
 800bc1c:	eeb0 0a66 	vmov.f32	s0, s13
 800bc20:	f7f7 f998 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800bc24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d10c      	bne.n	800bc46 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc34:	eeb0 1a47 	vmov.f32	s2, s14
 800bc38:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800bf0c <turn135inR+0x3ac>
 800bc3c:	eeb0 0a67 	vmov.f32	s0, s15
 800bc40:	f7f8 f8fe 	bl	8003e40 <mollifier_slalom_table>
 800bc44:	e015      	b.n	800bc72 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc46:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc4e:	eef1 7a67 	vneg.f32	s15, s15
 800bc52:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc56:	eef0 2a66 	vmov.f32	s5, s13
 800bc5a:	eeb0 2a67 	vmov.f32	s4, s15
 800bc5e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bf08 <turn135inR+0x3a8>
 800bc62:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bf08 <turn135inR+0x3a8>
 800bc66:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800bf0c <turn135inR+0x3ac>
 800bc6a:	eeb0 0a47 	vmov.f32	s0, s14
 800bc6e:	f7f7 ff97 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc72:	2300      	movs	r3, #0
 800bc74:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc76:	2300      	movs	r3, #0
 800bc78:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7f4 fc8b 	bl	8000598 <__aeabi_f2d>
 800bc82:	a39b      	add	r3, pc, #620	; (adr r3, 800bef0 <turn135inR+0x390>)
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f7f4 fb28 	bl	80002dc <__adddf3>
 800bc8c:	4602      	mov	r2, r0
 800bc8e:	460b      	mov	r3, r1
 800bc90:	4610      	mov	r0, r2
 800bc92:	4619      	mov	r1, r3
 800bc94:	f7f4 ffb0 	bl	8000bf8 <__aeabi_d2f>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bca2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bca6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bcaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bcae:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bcb2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bcb6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800befc <turn135inR+0x39c>
 800bcba:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	eeb0 2a47 	vmov.f32	s4, s14
 800bcc4:	eef0 1a46 	vmov.f32	s3, s12
 800bcc8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bf08 <turn135inR+0x3a8>
 800bccc:	eef0 0a66 	vmov.f32	s1, s13
 800bcd0:	ee00 3a10 	vmov	s0, r3
 800bcd4:	f7f7 f93e 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800bcd8:	4b87      	ldr	r3, [pc, #540]	; (800bef8 <turn135inR+0x398>)
 800bcda:	2200      	movs	r2, #0
 800bcdc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bcde:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	f040 809d 	bne.w	800be22 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bce8:	2300      	movs	r3, #0
 800bcea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bcf0:	2302      	movs	r3, #2
 800bcf2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bcf8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcfc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd00:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd04:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd14:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd18:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd1c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800befc <turn135inR+0x39c>
 800bd20:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd24:	68f8      	ldr	r0, [r7, #12]
 800bd26:	eeb0 2a47 	vmov.f32	s4, s14
 800bd2a:	eef0 1a45 	vmov.f32	s3, s10
 800bd2e:	eeb0 1a65 	vmov.f32	s2, s11
 800bd32:	eef0 0a46 	vmov.f32	s1, s12
 800bd36:	eeb0 0a66 	vmov.f32	s0, s13
 800bd3a:	f7f7 f90b 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800bd3e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d10c      	bne.n	800bd60 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd4e:	eeb0 1a47 	vmov.f32	s2, s14
 800bd52:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800bf0c <turn135inR+0x3ac>
 800bd56:	eeb0 0a67 	vmov.f32	s0, s15
 800bd5a:	f7f8 f871 	bl	8003e40 <mollifier_slalom_table>
 800bd5e:	e015      	b.n	800bd8c <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd68:	eef1 7a67 	vneg.f32	s15, s15
 800bd6c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd70:	eef0 2a66 	vmov.f32	s5, s13
 800bd74:	eeb0 2a67 	vmov.f32	s4, s15
 800bd78:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bf08 <turn135inR+0x3a8>
 800bd7c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bf08 <turn135inR+0x3a8>
 800bd80:	eddf 0a62 	vldr	s1, [pc, #392]	; 800bf0c <turn135inR+0x3ac>
 800bd84:	eeb0 0a47 	vmov.f32	s0, s14
 800bd88:	f7f7 ff0a 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd90:	2300      	movs	r3, #0
 800bd92:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bd94:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bd98:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bd9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bda0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bda4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bda8:	edd7 7a01 	vldr	s15, [r7, #4]
 800bdac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bdb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdb4:	eef0 7ae7 	vabs.f32	s15, s15
 800bdb8:	ee17 0a90 	vmov	r0, s15
 800bdbc:	f7f4 fbec 	bl	8000598 <__aeabi_f2d>
 800bdc0:	f04f 0200 	mov.w	r2, #0
 800bdc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdc8:	f7f4 fd68 	bl	800089c <__aeabi_ddiv>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4614      	mov	r4, r2
 800bdd2:	461d      	mov	r5, r3
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7f4 fbde 	bl	8000598 <__aeabi_f2d>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	f7f4 fd5a 	bl	800089c <__aeabi_ddiv>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4610      	mov	r0, r2
 800bdee:	4619      	mov	r1, r3
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	4b43      	ldr	r3, [pc, #268]	; (800bf04 <turn135inR+0x3a4>)
 800bdf6:	f7f4 fa71 	bl	80002dc <__adddf3>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bdfe:	4610      	mov	r0, r2
 800be00:	4619      	mov	r1, r3
 800be02:	f7f4 fef9 	bl	8000bf8 <__aeabi_d2f>
 800be06:	4603      	mov	r3, r0
 800be08:	68f8      	ldr	r0, [r7, #12]
 800be0a:	ee02 3a10 	vmov	s4, r3
 800be0e:	edd7 1a01 	vldr	s3, [r7, #4]
 800be12:	ed97 1a01 	vldr	s2, [r7, #4]
 800be16:	eef0 0a68 	vmov.f32	s1, s17
 800be1a:	eeb0 0a48 	vmov.f32	s0, s16
 800be1e:	f7f7 f899 	bl	8002f54 <straight_table2>

	}
	if (test_mode >= 2) {
 800be22:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be26:	2b01      	cmp	r3, #1
 800be28:	f240 80d0 	bls.w	800bfcc <turn135inR+0x46c>

		highspeed_mode = 1;
 800be2c:	4b32      	ldr	r3, [pc, #200]	; (800bef8 <turn135inR+0x398>)
 800be2e:	2201      	movs	r2, #1
 800be30:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800be32:	2301      	movs	r3, #1
 800be34:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be36:	2300      	movs	r3, #0
 800be38:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be3e:	2300      	movs	r3, #0
 800be40:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be42:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be46:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be56:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be5a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be5e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800befc <turn135inR+0x39c>
 800be62:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	eeb0 2a47 	vmov.f32	s4, s14
 800be6c:	eef0 1a46 	vmov.f32	s3, s12
 800be70:	eeb0 1a66 	vmov.f32	s2, s13
 800be74:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bf08 <turn135inR+0x3a8>
 800be78:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bf00 <turn135inR+0x3a0>
 800be7c:	f7f7 f86a 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800be80:	2300      	movs	r3, #0
 800be82:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be84:	2302      	movs	r3, #2
 800be86:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be88:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be8c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be90:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be94:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bea4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bea8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800beac:	eddf 4a13 	vldr	s9, [pc, #76]	; 800befc <turn135inR+0x39c>
 800beb0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800beb4:	68f8      	ldr	r0, [r7, #12]
 800beb6:	eeb0 2a47 	vmov.f32	s4, s14
 800beba:	eef0 1a45 	vmov.f32	s3, s10
 800bebe:	eeb0 1a65 	vmov.f32	s2, s11
 800bec2:	eef0 0a46 	vmov.f32	s1, s12
 800bec6:	eeb0 0a66 	vmov.f32	s0, s13
 800beca:	f7f7 f843 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800bece:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d11c      	bne.n	800bf10 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bed6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800beda:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bede:	eeb0 1a47 	vmov.f32	s2, s14
 800bee2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800bf0c <turn135inR+0x3ac>
 800bee6:	eeb0 0a67 	vmov.f32	s0, s15
 800beea:	f7f7 ffa9 	bl	8003e40 <mollifier_slalom_table>
 800beee:	e025      	b.n	800bf3c <turn135inR+0x3dc>
 800bef0:	c022ec18 	.word	0xc022ec18
 800bef4:	405fd1de 	.word	0x405fd1de
 800bef8:	20000808 	.word	0x20000808
 800befc:	42340000 	.word	0x42340000
 800bf00:	42cd0000 	.word	0x42cd0000
 800bf04:	408f4000 	.word	0x408f4000
 800bf08:	00000000 	.word	0x00000000
 800bf0c:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf18:	eef1 7a67 	vneg.f32	s15, s15
 800bf1c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf20:	eef0 2a66 	vmov.f32	s5, s13
 800bf24:	eeb0 2a67 	vmov.f32	s4, s15
 800bf28:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bf08 <turn135inR+0x3a8>
 800bf2c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bf08 <turn135inR+0x3a8>
 800bf30:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800bf0c <turn135inR+0x3ac>
 800bf34:	eeb0 0a47 	vmov.f32	s0, s14
 800bf38:	f7f7 fe32 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf40:	2300      	movs	r3, #0
 800bf42:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf48:	3b02      	subs	r3, #2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f7f4 fb12 	bl	8000574 <__aeabi_i2d>
 800bf50:	a325      	add	r3, pc, #148	; (adr r3, 800bfe8 <turn135inR+0x488>)
 800bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf56:	f7f4 fb77 	bl	8000648 <__aeabi_dmul>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4614      	mov	r4, r2
 800bf60:	461d      	mov	r5, r3
 800bf62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7f4 fb17 	bl	8000598 <__aeabi_f2d>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4620      	mov	r0, r4
 800bf70:	4629      	mov	r1, r5
 800bf72:	f7f4 f9b3 	bl	80002dc <__adddf3>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	f7f4 fe3b 	bl	8000bf8 <__aeabi_d2f>
 800bf82:	4603      	mov	r3, r0
 800bf84:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf88:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf8c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf9c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bfa0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfa4:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bfe0 <turn135inR+0x480>
 800bfa8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	eeb0 2a47 	vmov.f32	s4, s14
 800bfb2:	eef0 1a65 	vmov.f32	s3, s11
 800bfb6:	eeb0 1a46 	vmov.f32	s2, s12
 800bfba:	eef0 0a66 	vmov.f32	s1, s13
 800bfbe:	ee00 3a10 	vmov	s0, r3
 800bfc2:	f7f6 ffc7 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800bfc6:	4b07      	ldr	r3, [pc, #28]	; (800bfe4 <turn135inR+0x484>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	701a      	strb	r2, [r3, #0]
	}

}
 800bfcc:	bf00      	nop
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	ecbd 8b02 	vpop	{d8}
 800bfd6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bfda:	b004      	add	sp, #16
 800bfdc:	4770      	bx	lr
 800bfde:	bf00      	nop
 800bfe0:	42340000 	.word	0x42340000
 800bfe4:	20000808 	.word	0x20000808
 800bfe8:	c022ec18 	.word	0xc022ec18
 800bfec:	404fd1de 	.word	0x404fd1de

0800bff0 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bff0:	b084      	sub	sp, #16
 800bff2:	b5b0      	push	{r4, r5, r7, lr}
 800bff4:	ed2d 8b02 	vpush	{d8}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c000:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c004:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c008:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	f040 80ac 	bne.w	800c16a <turn135inL+0x17a>
		highspeed_mode = 1;
 800c012:	4bdb      	ldr	r3, [pc, #876]	; (800c380 <turn135inL+0x390>)
 800c014:	2201      	movs	r2, #1
 800c016:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c018:	2301      	movs	r3, #1
 800c01a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c024:	2300      	movs	r3, #0
 800c026:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c028:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c02c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c030:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c034:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c038:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c03c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c040:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c044:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c384 <turn135inL+0x394>
 800c048:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	eeb0 2a47 	vmov.f32	s4, s14
 800c052:	eef0 1a46 	vmov.f32	s3, s12
 800c056:	eeb0 1a66 	vmov.f32	s2, s13
 800c05a:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c390 <turn135inL+0x3a0>
 800c05e:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c388 <turn135inL+0x398>
 800c062:	f7f6 ff77 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800c066:	2300      	movs	r3, #0
 800c068:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c06a:	2302      	movs	r3, #2
 800c06c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c06e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c072:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c076:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c07a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c07e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c082:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c08a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c08e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c092:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c384 <turn135inL+0x394>
 800c096:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	eeb0 2a47 	vmov.f32	s4, s14
 800c0a0:	eef0 1a45 	vmov.f32	s3, s10
 800c0a4:	eeb0 1a65 	vmov.f32	s2, s11
 800c0a8:	eef0 0a46 	vmov.f32	s1, s12
 800c0ac:	eeb0 0a66 	vmov.f32	s0, s13
 800c0b0:	f7f6 ff50 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800c0b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d10c      	bne.n	800c0d6 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c0bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0c4:	eeb0 1a47 	vmov.f32	s2, s14
 800c0c8:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c394 <turn135inL+0x3a4>
 800c0cc:	eeb0 0a67 	vmov.f32	s0, s15
 800c0d0:	f7f7 feb6 	bl	8003e40 <mollifier_slalom_table>
 800c0d4:	e013      	b.n	800c0fe <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0de:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0e2:	eef0 2a66 	vmov.f32	s5, s13
 800c0e6:	eeb0 2a47 	vmov.f32	s4, s14
 800c0ea:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c390 <turn135inL+0x3a0>
 800c0ee:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c390 <turn135inL+0x3a0>
 800c0f2:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c394 <turn135inL+0x3a4>
 800c0f6:	eeb0 0a67 	vmov.f32	s0, s15
 800c0fa:	f7f7 fd51 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c102:	2300      	movs	r3, #0
 800c104:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c108:	4618      	mov	r0, r3
 800c10a:	f7f4 fa45 	bl	8000598 <__aeabi_f2d>
 800c10e:	a39a      	add	r3, pc, #616	; (adr r3, 800c378 <turn135inL+0x388>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f7f4 f8e2 	bl	80002dc <__adddf3>
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	4610      	mov	r0, r2
 800c11e:	4619      	mov	r1, r3
 800c120:	f7f4 fd6a 	bl	8000bf8 <__aeabi_d2f>
 800c124:	4603      	mov	r3, r0
 800c126:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c12a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c12e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c132:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c136:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c13a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c13e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c142:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c384 <turn135inL+0x394>
 800c146:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	eeb0 2a47 	vmov.f32	s4, s14
 800c150:	eef0 1a46 	vmov.f32	s3, s12
 800c154:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c390 <turn135inL+0x3a0>
 800c158:	eef0 0a66 	vmov.f32	s1, s13
 800c15c:	ee00 3a10 	vmov	s0, r3
 800c160:	f7f6 fef8 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800c164:	4b86      	ldr	r3, [pc, #536]	; (800c380 <turn135inL+0x390>)
 800c166:	2200      	movs	r2, #0
 800c168:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c16a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f040 809b 	bne.w	800c2aa <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c174:	2300      	movs	r3, #0
 800c176:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c178:	2300      	movs	r3, #0
 800c17a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c17c:	2302      	movs	r3, #2
 800c17e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c180:	2300      	movs	r3, #0
 800c182:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c184:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c188:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c18c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c190:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c194:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c19c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1a0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1a4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1a8:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c384 <turn135inL+0x394>
 800c1ac:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1b0:	68f8      	ldr	r0, [r7, #12]
 800c1b2:	eeb0 2a47 	vmov.f32	s4, s14
 800c1b6:	eef0 1a45 	vmov.f32	s3, s10
 800c1ba:	eeb0 1a65 	vmov.f32	s2, s11
 800c1be:	eef0 0a46 	vmov.f32	s1, s12
 800c1c2:	eeb0 0a66 	vmov.f32	s0, s13
 800c1c6:	f7f6 fec5 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800c1ca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d10c      	bne.n	800c1ec <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c1d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1da:	eeb0 1a47 	vmov.f32	s2, s14
 800c1de:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c394 <turn135inL+0x3a4>
 800c1e2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1e6:	f7f7 fe2b 	bl	8003e40 <mollifier_slalom_table>
 800c1ea:	e013      	b.n	800c214 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c1ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1f4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c1f8:	eef0 2a66 	vmov.f32	s5, s13
 800c1fc:	eeb0 2a47 	vmov.f32	s4, s14
 800c200:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c390 <turn135inL+0x3a0>
 800c204:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c390 <turn135inL+0x3a0>
 800c208:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c394 <turn135inL+0x3a4>
 800c20c:	eeb0 0a67 	vmov.f32	s0, s15
 800c210:	f7f7 fcc6 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c214:	2303      	movs	r3, #3
 800c216:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c218:	2300      	movs	r3, #0
 800c21a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c21c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c220:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c224:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c22c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c230:	edd7 7a01 	vldr	s15, [r7, #4]
 800c234:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c238:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c23c:	eef0 7ae7 	vabs.f32	s15, s15
 800c240:	ee17 0a90 	vmov	r0, s15
 800c244:	f7f4 f9a8 	bl	8000598 <__aeabi_f2d>
 800c248:	f04f 0200 	mov.w	r2, #0
 800c24c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c250:	f7f4 fb24 	bl	800089c <__aeabi_ddiv>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4614      	mov	r4, r2
 800c25a:	461d      	mov	r5, r3
 800c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f4 f99a 	bl	8000598 <__aeabi_f2d>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4620      	mov	r0, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 fb16 	bl	800089c <__aeabi_ddiv>
 800c270:	4602      	mov	r2, r0
 800c272:	460b      	mov	r3, r1
 800c274:	4610      	mov	r0, r2
 800c276:	4619      	mov	r1, r3
 800c278:	f04f 0200 	mov.w	r2, #0
 800c27c:	4b43      	ldr	r3, [pc, #268]	; (800c38c <turn135inL+0x39c>)
 800c27e:	f7f4 f82d 	bl	80002dc <__adddf3>
 800c282:	4602      	mov	r2, r0
 800c284:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c286:	4610      	mov	r0, r2
 800c288:	4619      	mov	r1, r3
 800c28a:	f7f4 fcb5 	bl	8000bf8 <__aeabi_d2f>
 800c28e:	4603      	mov	r3, r0
 800c290:	68f8      	ldr	r0, [r7, #12]
 800c292:	ee02 3a10 	vmov	s4, r3
 800c296:	edd7 1a01 	vldr	s3, [r7, #4]
 800c29a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c29e:	eef0 0a68 	vmov.f32	s1, s17
 800c2a2:	eeb0 0a48 	vmov.f32	s0, s16
 800c2a6:	f7f6 fe55 	bl	8002f54 <straight_table2>

	}
	if (test_mode >= 2) {
 800c2aa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	f240 80ce 	bls.w	800c450 <turn135inL+0x460>

		highspeed_mode = 1;
 800c2b4:	4b32      	ldr	r3, [pc, #200]	; (800c380 <turn135inL+0x390>)
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2ca:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2de:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c2e2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2e6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c384 <turn135inL+0x394>
 800c2ea:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	eeb0 2a47 	vmov.f32	s4, s14
 800c2f4:	eef0 1a46 	vmov.f32	s3, s12
 800c2f8:	eeb0 1a66 	vmov.f32	s2, s13
 800c2fc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c390 <turn135inL+0x3a0>
 800c300:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c388 <turn135inL+0x398>
 800c304:	f7f6 fe26 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800c308:	2300      	movs	r3, #0
 800c30a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c30c:	2302      	movs	r3, #2
 800c30e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c310:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c314:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c318:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c31c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c320:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c32c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c330:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c334:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c384 <turn135inL+0x394>
 800c338:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	eeb0 2a47 	vmov.f32	s4, s14
 800c342:	eef0 1a45 	vmov.f32	s3, s10
 800c346:	eeb0 1a65 	vmov.f32	s2, s11
 800c34a:	eef0 0a46 	vmov.f32	s1, s12
 800c34e:	eeb0 0a66 	vmov.f32	s0, s13
 800c352:	f7f6 fdff 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800c356:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d11c      	bne.n	800c398 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c35e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c362:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c366:	eeb0 1a47 	vmov.f32	s2, s14
 800c36a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c394 <turn135inL+0x3a4>
 800c36e:	eeb0 0a67 	vmov.f32	s0, s15
 800c372:	f7f7 fd65 	bl	8003e40 <mollifier_slalom_table>
 800c376:	e023      	b.n	800c3c0 <turn135inL+0x3d0>
 800c378:	c022ec18 	.word	0xc022ec18
 800c37c:	405fd1de 	.word	0x405fd1de
 800c380:	20000808 	.word	0x20000808
 800c384:	42340000 	.word	0x42340000
 800c388:	42cd0000 	.word	0x42cd0000
 800c38c:	408f4000 	.word	0x408f4000
 800c390:	00000000 	.word	0x00000000
 800c394:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c398:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c39c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c3a0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c3a4:	eef0 2a66 	vmov.f32	s5, s13
 800c3a8:	eeb0 2a47 	vmov.f32	s4, s14
 800c3ac:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c390 <turn135inL+0x3a0>
 800c3b0:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c390 <turn135inL+0x3a0>
 800c3b4:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c394 <turn135inL+0x3a4>
 800c3b8:	eeb0 0a67 	vmov.f32	s0, s15
 800c3bc:	f7f7 fbf0 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3c8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3cc:	3b02      	subs	r3, #2
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7f4 f8d0 	bl	8000574 <__aeabi_i2d>
 800c3d4:	a326      	add	r3, pc, #152	; (adr r3, 800c470 <turn135inL+0x480>)
 800c3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3da:	f7f4 f935 	bl	8000648 <__aeabi_dmul>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4614      	mov	r4, r2
 800c3e4:	461d      	mov	r5, r3
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7f4 f8d5 	bl	8000598 <__aeabi_f2d>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	4629      	mov	r1, r5
 800c3f6:	f7f3 ff71 	bl	80002dc <__adddf3>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	4610      	mov	r0, r2
 800c400:	4619      	mov	r1, r3
 800c402:	f7f4 fbf9 	bl	8000bf8 <__aeabi_d2f>
 800c406:	4603      	mov	r3, r0
 800c408:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c40c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c410:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c414:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c418:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c41c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c420:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c424:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c428:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c468 <turn135inL+0x478>
 800c42c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	eeb0 2a47 	vmov.f32	s4, s14
 800c436:	eef0 1a65 	vmov.f32	s3, s11
 800c43a:	eeb0 1a46 	vmov.f32	s2, s12
 800c43e:	eef0 0a66 	vmov.f32	s1, s13
 800c442:	ee00 3a10 	vmov	s0, r3
 800c446:	f7f6 fd85 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800c44a:	4b08      	ldr	r3, [pc, #32]	; (800c46c <turn135inL+0x47c>)
 800c44c:	2200      	movs	r2, #0
 800c44e:	701a      	strb	r2, [r3, #0]
	}

}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	ecbd 8b02 	vpop	{d8}
 800c45a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c45e:	b004      	add	sp, #16
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	f3af 8000 	nop.w
 800c468:	42340000 	.word	0x42340000
 800c46c:	20000808 	.word	0x20000808
 800c470:	c022ec18 	.word	0xc022ec18
 800c474:	404fd1de 	.word	0x404fd1de

0800c478 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c478:	b084      	sub	sp, #16
 800c47a:	b5b0      	push	{r4, r5, r7, lr}
 800c47c:	ed2d 8b02 	vpush	{d8}
 800c480:	b084      	sub	sp, #16
 800c482:	af00      	add	r7, sp, #0
 800c484:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c48c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c490:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c494:	2b01      	cmp	r3, #1
 800c496:	f040 80a5 	bne.w	800c5e4 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c49a:	4be9      	ldr	r3, [pc, #932]	; (800c840 <turn45outR+0x3c8>)
 800c49c:	2201      	movs	r2, #1
 800c49e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4b0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4b4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4b8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4c4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4c8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4cc:	eddf 5add 	vldr	s11, [pc, #884]	; 800c844 <turn45outR+0x3cc>
 800c4d0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4d4:	68f8      	ldr	r0, [r7, #12]
 800c4d6:	eeb0 2a47 	vmov.f32	s4, s14
 800c4da:	eef0 1a46 	vmov.f32	s3, s12
 800c4de:	eeb0 1a66 	vmov.f32	s2, s13
 800c4e2:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c848 <turn45outR+0x3d0>
 800c4e6:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c84c <turn45outR+0x3d4>
 800c4ea:	f7f6 fd33 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4f6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4fa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4fe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c502:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c506:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c50a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c50e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c512:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c516:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c51a:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c844 <turn45outR+0x3cc>
 800c51e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c522:	68f8      	ldr	r0, [r7, #12]
 800c524:	eeb0 2a47 	vmov.f32	s4, s14
 800c528:	eef0 1a45 	vmov.f32	s3, s10
 800c52c:	eeb0 1a65 	vmov.f32	s2, s11
 800c530:	eef0 0a46 	vmov.f32	s1, s12
 800c534:	eeb0 0a66 	vmov.f32	s0, s13
 800c538:	f7f6 fd0c 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800c53c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c540:	2b01      	cmp	r3, #1
 800c542:	d10c      	bne.n	800c55e <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c544:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c548:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c54c:	eeb0 1a47 	vmov.f32	s2, s14
 800c550:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c850 <turn45outR+0x3d8>
 800c554:	eeb0 0a67 	vmov.f32	s0, s15
 800c558:	f7f7 fc72 	bl	8003e40 <mollifier_slalom_table>
 800c55c:	e015      	b.n	800c58a <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c55e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c562:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c566:	eef1 7a67 	vneg.f32	s15, s15
 800c56a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c56e:	eef0 2a66 	vmov.f32	s5, s13
 800c572:	eeb0 2a67 	vmov.f32	s4, s15
 800c576:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c848 <turn45outR+0x3d0>
 800c57a:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c848 <turn45outR+0x3d0>
 800c57e:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c850 <turn45outR+0x3d8>
 800c582:	eeb0 0a47 	vmov.f32	s0, s14
 800c586:	f7f7 fb0b 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c58a:	2300      	movs	r3, #0
 800c58c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c58e:	2300      	movs	r3, #0
 800c590:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c592:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c596:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c854 <turn45outR+0x3dc>
 800c59a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c59e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5b2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5b6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5ba:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c844 <turn45outR+0x3cc>
 800c5be:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5c2:	68f8      	ldr	r0, [r7, #12]
 800c5c4:	eeb0 2a47 	vmov.f32	s4, s14
 800c5c8:	eef0 1a65 	vmov.f32	s3, s11
 800c5cc:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c848 <turn45outR+0x3d0>
 800c5d0:	eef0 0a46 	vmov.f32	s1, s12
 800c5d4:	eeb0 0a66 	vmov.f32	s0, s13
 800c5d8:	f7f6 fcbc 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800c5dc:	4b98      	ldr	r3, [pc, #608]	; (800c840 <turn45outR+0x3c8>)
 800c5de:	2200      	movs	r2, #0
 800c5e0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c5e2:	e123      	b.n	800c82c <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c5e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	f240 8082 	bls.w	800c6f2 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c5ee:	4b94      	ldr	r3, [pc, #592]	; (800c840 <turn45outR+0x3c8>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c600:	2300      	movs	r3, #0
 800c602:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c604:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c608:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c60c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c610:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c614:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c618:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c61c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c620:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c624:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c628:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c844 <turn45outR+0x3cc>
 800c62c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	eeb0 2a47 	vmov.f32	s4, s14
 800c636:	eef0 1a45 	vmov.f32	s3, s10
 800c63a:	eeb0 1a65 	vmov.f32	s2, s11
 800c63e:	eef0 0a46 	vmov.f32	s1, s12
 800c642:	eeb0 0a66 	vmov.f32	s0, s13
 800c646:	f7f6 fc85 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800c64a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d10c      	bne.n	800c66c <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c652:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c656:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c65a:	eeb0 1a47 	vmov.f32	s2, s14
 800c65e:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c850 <turn45outR+0x3d8>
 800c662:	eeb0 0a67 	vmov.f32	s0, s15
 800c666:	f7f7 fbeb 	bl	8003e40 <mollifier_slalom_table>
 800c66a:	e015      	b.n	800c698 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c66c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c670:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c674:	eef1 7a67 	vneg.f32	s15, s15
 800c678:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c67c:	eef0 2a66 	vmov.f32	s5, s13
 800c680:	eeb0 2a67 	vmov.f32	s4, s15
 800c684:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c848 <turn45outR+0x3d0>
 800c688:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c848 <turn45outR+0x3d0>
 800c68c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c850 <turn45outR+0x3d8>
 800c690:	eeb0 0a47 	vmov.f32	s0, s14
 800c694:	f7f7 fa84 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800c698:	2300      	movs	r3, #0
 800c69a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6a0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6a4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c854 <turn45outR+0x3dc>
 800c6a8:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c6ac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6b0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6c0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6c4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6c8:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c844 <turn45outR+0x3cc>
 800c6cc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6d0:	68f8      	ldr	r0, [r7, #12]
 800c6d2:	eeb0 2a47 	vmov.f32	s4, s14
 800c6d6:	eef0 1a65 	vmov.f32	s3, s11
 800c6da:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c848 <turn45outR+0x3d0>
 800c6de:	eef0 0a46 	vmov.f32	s1, s12
 800c6e2:	eeb0 0a66 	vmov.f32	s0, s13
 800c6e6:	f7f6 fc35 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800c6ea:	4b55      	ldr	r3, [pc, #340]	; (800c840 <turn45outR+0x3c8>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	701a      	strb	r2, [r3, #0]
}
 800c6f0:	e09c      	b.n	800c82c <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c702:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c706:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c70a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c70e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c712:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c716:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c71a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c71e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c722:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c726:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c844 <turn45outR+0x3cc>
 800c72a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c72e:	68f8      	ldr	r0, [r7, #12]
 800c730:	eeb0 2a47 	vmov.f32	s4, s14
 800c734:	eef0 1a45 	vmov.f32	s3, s10
 800c738:	eeb0 1a65 	vmov.f32	s2, s11
 800c73c:	eef0 0a46 	vmov.f32	s1, s12
 800c740:	eeb0 0a66 	vmov.f32	s0, s13
 800c744:	f7f6 fc06 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800c748:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d10c      	bne.n	800c76a <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c754:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c758:	eeb0 1a47 	vmov.f32	s2, s14
 800c75c:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c850 <turn45outR+0x3d8>
 800c760:	eeb0 0a67 	vmov.f32	s0, s15
 800c764:	f7f7 fb6c 	bl	8003e40 <mollifier_slalom_table>
 800c768:	e015      	b.n	800c796 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c76a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c76e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c772:	eef1 7a67 	vneg.f32	s15, s15
 800c776:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c77a:	eef0 2a66 	vmov.f32	s5, s13
 800c77e:	eeb0 2a67 	vmov.f32	s4, s15
 800c782:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c848 <turn45outR+0x3d0>
 800c786:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c848 <turn45outR+0x3d0>
 800c78a:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c850 <turn45outR+0x3d8>
 800c78e:	eeb0 0a47 	vmov.f32	s0, s14
 800c792:	f7f7 fa05 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c796:	2301      	movs	r3, #1
 800c798:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c79e:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c7a2:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c7a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7be:	eef0 7ae7 	vabs.f32	s15, s15
 800c7c2:	ee17 0a90 	vmov	r0, s15
 800c7c6:	f7f3 fee7 	bl	8000598 <__aeabi_f2d>
 800c7ca:	f04f 0200 	mov.w	r2, #0
 800c7ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7d2:	f7f4 f863 	bl	800089c <__aeabi_ddiv>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4614      	mov	r4, r2
 800c7dc:	461d      	mov	r5, r3
 800c7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7f3 fed9 	bl	8000598 <__aeabi_f2d>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	460b      	mov	r3, r1
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	4629      	mov	r1, r5
 800c7ee:	f7f4 f855 	bl	800089c <__aeabi_ddiv>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	460b      	mov	r3, r1
 800c7f6:	4610      	mov	r0, r2
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	f04f 0200 	mov.w	r2, #0
 800c7fe:	4b16      	ldr	r3, [pc, #88]	; (800c858 <turn45outR+0x3e0>)
 800c800:	f7f3 fd6c 	bl	80002dc <__adddf3>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c808:	4610      	mov	r0, r2
 800c80a:	4619      	mov	r1, r3
 800c80c:	f7f4 f9f4 	bl	8000bf8 <__aeabi_d2f>
 800c810:	4603      	mov	r3, r0
 800c812:	68f8      	ldr	r0, [r7, #12]
 800c814:	ee02 3a10 	vmov	s4, r3
 800c818:	edd7 1a01 	vldr	s3, [r7, #4]
 800c81c:	ed97 1a01 	vldr	s2, [r7, #4]
 800c820:	eef0 0a68 	vmov.f32	s1, s17
 800c824:	eeb0 0a48 	vmov.f32	s0, s16
 800c828:	f7f6 fb94 	bl	8002f54 <straight_table2>
}
 800c82c:	bf00      	nop
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	ecbd 8b02 	vpop	{d8}
 800c836:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c83a:	b004      	add	sp, #16
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	20000808 	.word	0x20000808
 800c844:	42340000 	.word	0x42340000
 800c848:	00000000 	.word	0x00000000
 800c84c:	42c4477b 	.word	0x42c4477b
 800c850:	c2340000 	.word	0xc2340000
 800c854:	42b40000 	.word	0x42b40000
 800c858:	408f4000 	.word	0x408f4000

0800c85c <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c85c:	b084      	sub	sp, #16
 800c85e:	b5b0      	push	{r4, r5, r7, lr}
 800c860:	ed2d 8b02 	vpush	{d8}
 800c864:	b084      	sub	sp, #16
 800c866:	af00      	add	r7, sp, #0
 800c868:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c86c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c870:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c874:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c878:	2b01      	cmp	r3, #1
 800c87a:	f040 80a3 	bne.w	800c9c4 <turn45outL+0x168>
			highspeed_mode = 1;
 800c87e:	4be5      	ldr	r3, [pc, #916]	; (800cc14 <turn45outL+0x3b8>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c884:	2300      	movs	r3, #0
 800c886:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c888:	2300      	movs	r3, #0
 800c88a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c890:	2300      	movs	r3, #0
 800c892:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c894:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c898:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c89c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c8ac:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8b0:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cc18 <turn45outL+0x3bc>
 800c8b4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8b8:	68f8      	ldr	r0, [r7, #12]
 800c8ba:	eeb0 2a47 	vmov.f32	s4, s14
 800c8be:	eef0 1a46 	vmov.f32	s3, s12
 800c8c2:	eeb0 1a66 	vmov.f32	s2, s13
 800c8c6:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cc1c <turn45outL+0x3c0>
 800c8ca:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cc20 <turn45outL+0x3c4>
 800c8ce:	f7f6 fb41 	bl	8002f54 <straight_table2>
			wallmode.WallControlMode=0;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8da:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8e2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8e6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8fa:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8fe:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cc18 <turn45outL+0x3bc>
 800c902:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	eeb0 2a47 	vmov.f32	s4, s14
 800c90c:	eef0 1a45 	vmov.f32	s3, s10
 800c910:	eeb0 1a65 	vmov.f32	s2, s11
 800c914:	eef0 0a46 	vmov.f32	s1, s12
 800c918:	eeb0 0a66 	vmov.f32	s0, s13
 800c91c:	f7f6 fb1a 	bl	8002f54 <straight_table2>
			if(mollifier_mode == ON){
 800c920:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c924:	2b01      	cmp	r3, #1
 800c926:	d10c      	bne.n	800c942 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c928:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c92c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c930:	eeb0 1a47 	vmov.f32	s2, s14
 800c934:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cc18 <turn45outL+0x3bc>
 800c938:	eeb0 0a67 	vmov.f32	s0, s15
 800c93c:	f7f7 fa80 	bl	8003e40 <mollifier_slalom_table>
 800c940:	e013      	b.n	800c96a <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c942:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c946:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c94a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c94e:	eef0 2a66 	vmov.f32	s5, s13
 800c952:	eeb0 2a47 	vmov.f32	s4, s14
 800c956:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cc1c <turn45outL+0x3c0>
 800c95a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cc1c <turn45outL+0x3c0>
 800c95e:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cc18 <turn45outL+0x3bc>
 800c962:	eeb0 0a67 	vmov.f32	s0, s15
 800c966:	f7f7 f91b 	bl	8003ba0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c96a:	2300      	movs	r3, #0
 800c96c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c96e:	2300      	movs	r3, #0
 800c970:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c972:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c976:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cc24 <turn45outL+0x3c8>
 800c97a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c97e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c982:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c986:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c98a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c98e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c992:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c996:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c99a:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cc18 <turn45outL+0x3bc>
 800c99e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	eeb0 2a47 	vmov.f32	s4, s14
 800c9a8:	eef0 1a65 	vmov.f32	s3, s11
 800c9ac:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cc1c <turn45outL+0x3c0>
 800c9b0:	eef0 0a46 	vmov.f32	s1, s12
 800c9b4:	eeb0 0a66 	vmov.f32	s0, s13
 800c9b8:	f7f6 facc 	bl	8002f54 <straight_table2>
			highspeed_mode = 0;
 800c9bc:	4b95      	ldr	r3, [pc, #596]	; (800cc14 <turn45outL+0x3b8>)
 800c9be:	2200      	movs	r2, #0
 800c9c0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c9c2:	e11e      	b.n	800cc02 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c9c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d97f      	bls.n	800cacc <turn45outL+0x270>
		highspeed_mode = 1;
 800c9cc:	4b91      	ldr	r3, [pc, #580]	; (800cc14 <turn45outL+0x3b8>)
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c9da:	2304      	movs	r3, #4
 800c9dc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9e2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9ea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9ee:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9fe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ca02:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ca06:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cc18 <turn45outL+0x3bc>
 800ca0a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ca0e:	68f8      	ldr	r0, [r7, #12]
 800ca10:	eeb0 2a47 	vmov.f32	s4, s14
 800ca14:	eef0 1a45 	vmov.f32	s3, s10
 800ca18:	eeb0 1a65 	vmov.f32	s2, s11
 800ca1c:	eef0 0a46 	vmov.f32	s1, s12
 800ca20:	eeb0 0a66 	vmov.f32	s0, s13
 800ca24:	f7f6 fa96 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800ca28:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca2c:	2b01      	cmp	r3, #1
 800ca2e:	d10c      	bne.n	800ca4a <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ca30:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca34:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca38:	eeb0 1a47 	vmov.f32	s2, s14
 800ca3c:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cc18 <turn45outL+0x3bc>
 800ca40:	eeb0 0a67 	vmov.f32	s0, s15
 800ca44:	f7f7 f9fc 	bl	8003e40 <mollifier_slalom_table>
 800ca48:	e013      	b.n	800ca72 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ca4a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca4e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca52:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca56:	eef0 2a66 	vmov.f32	s5, s13
 800ca5a:	eeb0 2a47 	vmov.f32	s4, s14
 800ca5e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cc1c <turn45outL+0x3c0>
 800ca62:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cc1c <turn45outL+0x3c0>
 800ca66:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cc18 <turn45outL+0x3bc>
 800ca6a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca6e:	f7f7 f897 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca72:	2300      	movs	r3, #0
 800ca74:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca7e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cc24 <turn45outL+0x3c8>
 800ca82:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca86:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca8a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca8e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca92:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca9a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca9e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800caa2:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cc18 <turn45outL+0x3bc>
 800caa6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800caaa:	68f8      	ldr	r0, [r7, #12]
 800caac:	eeb0 2a47 	vmov.f32	s4, s14
 800cab0:	eef0 1a65 	vmov.f32	s3, s11
 800cab4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cc1c <turn45outL+0x3c0>
 800cab8:	eef0 0a46 	vmov.f32	s1, s12
 800cabc:	eeb0 0a66 	vmov.f32	s0, s13
 800cac0:	f7f6 fa48 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800cac4:	4b53      	ldr	r3, [pc, #332]	; (800cc14 <turn45outL+0x3b8>)
 800cac6:	2200      	movs	r2, #0
 800cac8:	701a      	strb	r2, [r3, #0]
}
 800caca:	e09a      	b.n	800cc02 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cacc:	2300      	movs	r3, #0
 800cace:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cad0:	2300      	movs	r3, #0
 800cad2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cad4:	2304      	movs	r3, #4
 800cad6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cad8:	2300      	movs	r3, #0
 800cada:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cadc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cae0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cae4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cae8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800caec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800caf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800caf8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cafc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cb00:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cc18 <turn45outL+0x3bc>
 800cb04:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	eeb0 2a47 	vmov.f32	s4, s14
 800cb0e:	eef0 1a45 	vmov.f32	s3, s10
 800cb12:	eeb0 1a65 	vmov.f32	s2, s11
 800cb16:	eef0 0a46 	vmov.f32	s1, s12
 800cb1a:	eeb0 0a66 	vmov.f32	s0, s13
 800cb1e:	f7f6 fa19 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800cb22:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d10c      	bne.n	800cb44 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb2e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb32:	eeb0 1a47 	vmov.f32	s2, s14
 800cb36:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cc18 <turn45outL+0x3bc>
 800cb3a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb3e:	f7f7 f97f 	bl	8003e40 <mollifier_slalom_table>
 800cb42:	e013      	b.n	800cb6c <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb48:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb4c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb50:	eef0 2a66 	vmov.f32	s5, s13
 800cb54:	eeb0 2a47 	vmov.f32	s4, s14
 800cb58:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cc1c <turn45outL+0x3c0>
 800cb5c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cc1c <turn45outL+0x3c0>
 800cb60:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cc18 <turn45outL+0x3bc>
 800cb64:	eeb0 0a67 	vmov.f32	s0, s15
 800cb68:	f7f7 f81a 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb70:	2300      	movs	r3, #0
 800cb72:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb74:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb78:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb7c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb80:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb84:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb88:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb94:	eef0 7ae7 	vabs.f32	s15, s15
 800cb98:	ee17 0a90 	vmov	r0, s15
 800cb9c:	f7f3 fcfc 	bl	8000598 <__aeabi_f2d>
 800cba0:	f04f 0200 	mov.w	r2, #0
 800cba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cba8:	f7f3 fe78 	bl	800089c <__aeabi_ddiv>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4614      	mov	r4, r2
 800cbb2:	461d      	mov	r5, r3
 800cbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7f3 fcee 	bl	8000598 <__aeabi_f2d>
 800cbbc:	4602      	mov	r2, r0
 800cbbe:	460b      	mov	r3, r1
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	4629      	mov	r1, r5
 800cbc4:	f7f3 fe6a 	bl	800089c <__aeabi_ddiv>
 800cbc8:	4602      	mov	r2, r0
 800cbca:	460b      	mov	r3, r1
 800cbcc:	4610      	mov	r0, r2
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f04f 0200 	mov.w	r2, #0
 800cbd4:	4b14      	ldr	r3, [pc, #80]	; (800cc28 <turn45outL+0x3cc>)
 800cbd6:	f7f3 fb81 	bl	80002dc <__adddf3>
 800cbda:	4602      	mov	r2, r0
 800cbdc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbde:	4610      	mov	r0, r2
 800cbe0:	4619      	mov	r1, r3
 800cbe2:	f7f4 f809 	bl	8000bf8 <__aeabi_d2f>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	ee02 3a10 	vmov	s4, r3
 800cbee:	edd7 1a01 	vldr	s3, [r7, #4]
 800cbf2:	ed97 1a01 	vldr	s2, [r7, #4]
 800cbf6:	eef0 0a68 	vmov.f32	s1, s17
 800cbfa:	eeb0 0a48 	vmov.f32	s0, s16
 800cbfe:	f7f6 f9a9 	bl	8002f54 <straight_table2>
}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	ecbd 8b02 	vpop	{d8}
 800cc0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc10:	b004      	add	sp, #16
 800cc12:	4770      	bx	lr
 800cc14:	20000808 	.word	0x20000808
 800cc18:	42340000 	.word	0x42340000
 800cc1c:	00000000 	.word	0x00000000
 800cc20:	42c4477b 	.word	0x42c4477b
 800cc24:	42b40000 	.word	0x42b40000
 800cc28:	408f4000 	.word	0x408f4000

0800cc2c <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	b5b0      	push	{r4, r5, r7, lr}
 800cc30:	ed2d 8b02 	vpush	{d8}
 800cc34:	b084      	sub	sp, #16
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc3c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc40:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc44:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	f040 80a5 	bne.w	800cd98 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cc4e:	4be9      	ldr	r3, [pc, #932]	; (800cff4 <turn135outR+0x3c8>)
 800cc50:	2201      	movs	r2, #1
 800cc52:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc64:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc68:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc78:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc7c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc80:	eddf 5add 	vldr	s11, [pc, #884]	; 800cff8 <turn135outR+0x3cc>
 800cc84:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc88:	68f8      	ldr	r0, [r7, #12]
 800cc8a:	eeb0 2a47 	vmov.f32	s4, s14
 800cc8e:	eef0 1a46 	vmov.f32	s3, s12
 800cc92:	eeb0 1a66 	vmov.f32	s2, s13
 800cc96:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cffc <turn135outR+0x3d0>
 800cc9a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d000 <turn135outR+0x3d4>
 800cc9e:	f7f6 f959 	bl	8002f54 <straight_table2>
			wallmode.WallControlMode=0;
 800cca2:	2300      	movs	r3, #0
 800cca4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cca6:	2303      	movs	r3, #3
 800cca8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccaa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ccae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ccb2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ccb6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccbe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccc6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ccca:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccce:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cff8 <turn135outR+0x3cc>
 800ccd2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ccd6:	68f8      	ldr	r0, [r7, #12]
 800ccd8:	eeb0 2a47 	vmov.f32	s4, s14
 800ccdc:	eef0 1a45 	vmov.f32	s3, s10
 800cce0:	eeb0 1a65 	vmov.f32	s2, s11
 800cce4:	eef0 0a46 	vmov.f32	s1, s12
 800cce8:	eeb0 0a66 	vmov.f32	s0, s13
 800ccec:	f7f6 f932 	bl	8002f54 <straight_table2>
			if(mollifier_mode == ON){
 800ccf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d10c      	bne.n	800cd12 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ccf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccfc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cd00:	eeb0 1a47 	vmov.f32	s2, s14
 800cd04:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d004 <turn135outR+0x3d8>
 800cd08:	eeb0 0a67 	vmov.f32	s0, s15
 800cd0c:	f7f7 f898 	bl	8003e40 <mollifier_slalom_table>
 800cd10:	e015      	b.n	800cd3e <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cd12:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd16:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cd1a:	eef1 7a67 	vneg.f32	s15, s15
 800cd1e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cd22:	eef0 2a66 	vmov.f32	s5, s13
 800cd26:	eeb0 2a67 	vmov.f32	s4, s15
 800cd2a:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cffc <turn135outR+0x3d0>
 800cd2e:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cffc <turn135outR+0x3d0>
 800cd32:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d004 <turn135outR+0x3d8>
 800cd36:	eeb0 0a47 	vmov.f32	s0, s14
 800cd3a:	f7f6 ff31 	bl	8003ba0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd46:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd4a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d008 <turn135outR+0x3dc>
 800cd4e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd52:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd56:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd66:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd6a:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd6e:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cff8 <turn135outR+0x3cc>
 800cd72:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	eeb0 2a47 	vmov.f32	s4, s14
 800cd7c:	eef0 1a65 	vmov.f32	s3, s11
 800cd80:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cffc <turn135outR+0x3d0>
 800cd84:	eef0 0a46 	vmov.f32	s1, s12
 800cd88:	eeb0 0a66 	vmov.f32	s0, s13
 800cd8c:	f7f6 f8e2 	bl	8002f54 <straight_table2>
			highspeed_mode = 0;
 800cd90:	4b98      	ldr	r3, [pc, #608]	; (800cff4 <turn135outR+0x3c8>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd96:	e123      	b.n	800cfe0 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cd98:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	f240 8082 	bls.w	800cea6 <turn135outR+0x27a>
		highspeed_mode = 1;
 800cda2:	4b94      	ldr	r3, [pc, #592]	; (800cff4 <turn135outR+0x3c8>)
 800cda4:	2201      	movs	r2, #1
 800cda6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cdac:	2300      	movs	r3, #0
 800cdae:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdb8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdbc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdc0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdc4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdc8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdcc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdd4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdd8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cddc:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cff8 <turn135outR+0x3cc>
 800cde0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cde4:	68f8      	ldr	r0, [r7, #12]
 800cde6:	eeb0 2a47 	vmov.f32	s4, s14
 800cdea:	eef0 1a45 	vmov.f32	s3, s10
 800cdee:	eeb0 1a65 	vmov.f32	s2, s11
 800cdf2:	eef0 0a46 	vmov.f32	s1, s12
 800cdf6:	eeb0 0a66 	vmov.f32	s0, s13
 800cdfa:	f7f6 f8ab 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800cdfe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d10c      	bne.n	800ce20 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800ce06:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ce0e:	eeb0 1a47 	vmov.f32	s2, s14
 800ce12:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d004 <turn135outR+0x3d8>
 800ce16:	eeb0 0a67 	vmov.f32	s0, s15
 800ce1a:	f7f7 f811 	bl	8003e40 <mollifier_slalom_table>
 800ce1e:	e015      	b.n	800ce4c <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ce20:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce24:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ce28:	eef1 7a67 	vneg.f32	s15, s15
 800ce2c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce30:	eef0 2a66 	vmov.f32	s5, s13
 800ce34:	eeb0 2a67 	vmov.f32	s4, s15
 800ce38:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cffc <turn135outR+0x3d0>
 800ce3c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cffc <turn135outR+0x3d0>
 800ce40:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d004 <turn135outR+0x3d8>
 800ce44:	eeb0 0a47 	vmov.f32	s0, s14
 800ce48:	f7f6 feaa 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce50:	2300      	movs	r3, #0
 800ce52:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce58:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d008 <turn135outR+0x3dc>
 800ce5c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce60:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce64:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce74:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce78:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce7c:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cff8 <turn135outR+0x3cc>
 800ce80:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	eeb0 2a47 	vmov.f32	s4, s14
 800ce8a:	eef0 1a65 	vmov.f32	s3, s11
 800ce8e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cffc <turn135outR+0x3d0>
 800ce92:	eef0 0a46 	vmov.f32	s1, s12
 800ce96:	eeb0 0a66 	vmov.f32	s0, s13
 800ce9a:	f7f6 f85b 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800ce9e:	4b55      	ldr	r3, [pc, #340]	; (800cff4 <turn135outR+0x3c8>)
 800cea0:	2200      	movs	r2, #0
 800cea2:	701a      	strb	r2, [r3, #0]
}
 800cea4:	e09c      	b.n	800cfe0 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cea6:	2300      	movs	r3, #0
 800cea8:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceb6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ceba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cebe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cec2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ceca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cece:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ced2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ced6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceda:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cff8 <turn135outR+0x3cc>
 800cede:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	eeb0 2a47 	vmov.f32	s4, s14
 800cee8:	eef0 1a45 	vmov.f32	s3, s10
 800ceec:	eeb0 1a65 	vmov.f32	s2, s11
 800cef0:	eef0 0a46 	vmov.f32	s1, s12
 800cef4:	eeb0 0a66 	vmov.f32	s0, s13
 800cef8:	f7f6 f82c 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800cefc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf00:	2b01      	cmp	r3, #1
 800cf02:	d10c      	bne.n	800cf1e <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cf04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf0c:	eeb0 1a47 	vmov.f32	s2, s14
 800cf10:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d004 <turn135outR+0x3d8>
 800cf14:	eeb0 0a67 	vmov.f32	s0, s15
 800cf18:	f7f6 ff92 	bl	8003e40 <mollifier_slalom_table>
 800cf1c:	e015      	b.n	800cf4a <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf1e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf22:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf26:	eef1 7a67 	vneg.f32	s15, s15
 800cf2a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf2e:	eef0 2a66 	vmov.f32	s5, s13
 800cf32:	eeb0 2a67 	vmov.f32	s4, s15
 800cf36:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cffc <turn135outR+0x3d0>
 800cf3a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cffc <turn135outR+0x3d0>
 800cf3e:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d004 <turn135outR+0x3d8>
 800cf42:	eeb0 0a47 	vmov.f32	s0, s14
 800cf46:	f7f6 fe2b 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf52:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf56:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf5a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf5e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf66:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf6a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf72:	eef0 7ae7 	vabs.f32	s15, s15
 800cf76:	ee17 0a90 	vmov	r0, s15
 800cf7a:	f7f3 fb0d 	bl	8000598 <__aeabi_f2d>
 800cf7e:	f04f 0200 	mov.w	r2, #0
 800cf82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf86:	f7f3 fc89 	bl	800089c <__aeabi_ddiv>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4614      	mov	r4, r2
 800cf90:	461d      	mov	r5, r3
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7f3 faff 	bl	8000598 <__aeabi_f2d>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	4620      	mov	r0, r4
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	f7f3 fc7b 	bl	800089c <__aeabi_ddiv>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4610      	mov	r0, r2
 800cfac:	4619      	mov	r1, r3
 800cfae:	f04f 0200 	mov.w	r2, #0
 800cfb2:	4b16      	ldr	r3, [pc, #88]	; (800d00c <turn135outR+0x3e0>)
 800cfb4:	f7f3 f992 	bl	80002dc <__adddf3>
 800cfb8:	4602      	mov	r2, r0
 800cfba:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	f7f3 fe1a 	bl	8000bf8 <__aeabi_d2f>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	68f8      	ldr	r0, [r7, #12]
 800cfc8:	ee02 3a10 	vmov	s4, r3
 800cfcc:	edd7 1a01 	vldr	s3, [r7, #4]
 800cfd0:	ed97 1a01 	vldr	s2, [r7, #4]
 800cfd4:	eef0 0a68 	vmov.f32	s1, s17
 800cfd8:	eeb0 0a48 	vmov.f32	s0, s16
 800cfdc:	f7f5 ffba 	bl	8002f54 <straight_table2>
}
 800cfe0:	bf00      	nop
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	ecbd 8b02 	vpop	{d8}
 800cfea:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cfee:	b004      	add	sp, #16
 800cff0:	4770      	bx	lr
 800cff2:	bf00      	nop
 800cff4:	20000808 	.word	0x20000808
 800cff8:	42340000 	.word	0x42340000
 800cffc:	00000000 	.word	0x00000000
 800d000:	42c4477b 	.word	0x42c4477b
 800d004:	c3070000 	.word	0xc3070000
 800d008:	42b40000 	.word	0x42b40000
 800d00c:	408f4000 	.word	0x408f4000

0800d010 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d010:	b084      	sub	sp, #16
 800d012:	b5b0      	push	{r4, r5, r7, lr}
 800d014:	ed2d 8b02 	vpush	{d8}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d020:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d024:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d028:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	f040 80a3 	bne.w	800d178 <turn135outL+0x168>
		highspeed_mode = 1;
 800d032:	4be5      	ldr	r3, [pc, #916]	; (800d3c8 <turn135outL+0x3b8>)
 800d034:	2201      	movs	r2, #1
 800d036:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d038:	2300      	movs	r3, #0
 800d03a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d040:	2300      	movs	r3, #0
 800d042:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d044:	2300      	movs	r3, #0
 800d046:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d048:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d04c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d050:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d054:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d05c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d060:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d064:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d3cc <turn135outL+0x3bc>
 800d068:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	eeb0 2a47 	vmov.f32	s4, s14
 800d072:	eef0 1a46 	vmov.f32	s3, s12
 800d076:	eeb0 1a66 	vmov.f32	s2, s13
 800d07a:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d3d0 <turn135outL+0x3c0>
 800d07e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d3d4 <turn135outL+0x3c4>
 800d082:	f7f5 ff67 	bl	8002f54 <straight_table2>
		wallmode.WallControlMode=0;
 800d086:	2300      	movs	r3, #0
 800d088:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d08a:	2304      	movs	r3, #4
 800d08c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d08e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d092:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d096:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d09a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d09e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d0ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0b2:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d3cc <turn135outL+0x3bc>
 800d0b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d0ba:	68f8      	ldr	r0, [r7, #12]
 800d0bc:	eeb0 2a47 	vmov.f32	s4, s14
 800d0c0:	eef0 1a45 	vmov.f32	s3, s10
 800d0c4:	eeb0 1a65 	vmov.f32	s2, s11
 800d0c8:	eef0 0a46 	vmov.f32	s1, s12
 800d0cc:	eeb0 0a66 	vmov.f32	s0, s13
 800d0d0:	f7f5 ff40 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800d0d4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d10c      	bne.n	800d0f6 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d0dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0e4:	eeb0 1a47 	vmov.f32	s2, s14
 800d0e8:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d3d8 <turn135outL+0x3c8>
 800d0ec:	eeb0 0a67 	vmov.f32	s0, s15
 800d0f0:	f7f6 fea6 	bl	8003e40 <mollifier_slalom_table>
 800d0f4:	e013      	b.n	800d11e <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d0f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0fa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0fe:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d102:	eef0 2a66 	vmov.f32	s5, s13
 800d106:	eeb0 2a47 	vmov.f32	s4, s14
 800d10a:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d3d0 <turn135outL+0x3c0>
 800d10e:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d3d0 <turn135outL+0x3c0>
 800d112:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d3d8 <turn135outL+0x3c8>
 800d116:	eeb0 0a67 	vmov.f32	s0, s15
 800d11a:	f7f6 fd41 	bl	8003ba0 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d11e:	2300      	movs	r3, #0
 800d120:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d122:	2300      	movs	r3, #0
 800d124:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d126:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d12a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d3dc <turn135outL+0x3cc>
 800d12e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d132:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d136:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d13a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d13e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d142:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d146:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d14a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d14e:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d3cc <turn135outL+0x3bc>
 800d152:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	eeb0 2a47 	vmov.f32	s4, s14
 800d15c:	eef0 1a65 	vmov.f32	s3, s11
 800d160:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d3d0 <turn135outL+0x3c0>
 800d164:	eef0 0a46 	vmov.f32	s1, s12
 800d168:	eeb0 0a66 	vmov.f32	s0, s13
 800d16c:	f7f5 fef2 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800d170:	4b95      	ldr	r3, [pc, #596]	; (800d3c8 <turn135outL+0x3b8>)
 800d172:	2200      	movs	r2, #0
 800d174:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d176:	e11e      	b.n	800d3b6 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d178:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	d97f      	bls.n	800d280 <turn135outL+0x270>
		highspeed_mode = 1;
 800d180:	4b91      	ldr	r3, [pc, #580]	; (800d3c8 <turn135outL+0x3b8>)
 800d182:	2201      	movs	r2, #1
 800d184:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d186:	2300      	movs	r3, #0
 800d188:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d18e:	2304      	movs	r3, #4
 800d190:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d192:	2300      	movs	r3, #0
 800d194:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d196:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d19a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d19e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d1a2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d1a6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1b2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1b6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1ba:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d3cc <turn135outL+0x3bc>
 800d1be:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	eeb0 2a47 	vmov.f32	s4, s14
 800d1c8:	eef0 1a45 	vmov.f32	s3, s10
 800d1cc:	eeb0 1a65 	vmov.f32	s2, s11
 800d1d0:	eef0 0a46 	vmov.f32	s1, s12
 800d1d4:	eeb0 0a66 	vmov.f32	s0, s13
 800d1d8:	f7f5 febc 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800d1dc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d10c      	bne.n	800d1fe <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d1e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1e8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1ec:	eeb0 1a47 	vmov.f32	s2, s14
 800d1f0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d3d8 <turn135outL+0x3c8>
 800d1f4:	eeb0 0a67 	vmov.f32	s0, s15
 800d1f8:	f7f6 fe22 	bl	8003e40 <mollifier_slalom_table>
 800d1fc:	e013      	b.n	800d226 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d1fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d202:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d206:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d20a:	eef0 2a66 	vmov.f32	s5, s13
 800d20e:	eeb0 2a47 	vmov.f32	s4, s14
 800d212:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d3d0 <turn135outL+0x3c0>
 800d216:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d3d0 <turn135outL+0x3c0>
 800d21a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d3d8 <turn135outL+0x3c8>
 800d21e:	eeb0 0a67 	vmov.f32	s0, s15
 800d222:	f7f6 fcbd 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d226:	2300      	movs	r3, #0
 800d228:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d22e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d232:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3dc <turn135outL+0x3cc>
 800d236:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d23a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d23e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d242:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d246:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d24a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d24e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d252:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d256:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d3cc <turn135outL+0x3bc>
 800d25a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	eeb0 2a47 	vmov.f32	s4, s14
 800d264:	eef0 1a65 	vmov.f32	s3, s11
 800d268:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d3d0 <turn135outL+0x3c0>
 800d26c:	eef0 0a46 	vmov.f32	s1, s12
 800d270:	eeb0 0a66 	vmov.f32	s0, s13
 800d274:	f7f5 fe6e 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800d278:	4b53      	ldr	r3, [pc, #332]	; (800d3c8 <turn135outL+0x3b8>)
 800d27a:	2200      	movs	r2, #0
 800d27c:	701a      	strb	r2, [r3, #0]
}
 800d27e:	e09a      	b.n	800d3b6 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d280:	2300      	movs	r3, #0
 800d282:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d284:	2300      	movs	r3, #0
 800d286:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d288:	2304      	movs	r3, #4
 800d28a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d290:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d294:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d298:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d29c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2ac:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d2b0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2b4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d3cc <turn135outL+0x3bc>
 800d2b8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	eeb0 2a47 	vmov.f32	s4, s14
 800d2c2:	eef0 1a45 	vmov.f32	s3, s10
 800d2c6:	eeb0 1a65 	vmov.f32	s2, s11
 800d2ca:	eef0 0a46 	vmov.f32	s1, s12
 800d2ce:	eeb0 0a66 	vmov.f32	s0, s13
 800d2d2:	f7f5 fe3f 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800d2d6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d10c      	bne.n	800d2f8 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d2de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2e2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2e6:	eeb0 1a47 	vmov.f32	s2, s14
 800d2ea:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d3d8 <turn135outL+0x3c8>
 800d2ee:	eeb0 0a67 	vmov.f32	s0, s15
 800d2f2:	f7f6 fda5 	bl	8003e40 <mollifier_slalom_table>
 800d2f6:	e013      	b.n	800d320 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d2f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d300:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d304:	eef0 2a66 	vmov.f32	s5, s13
 800d308:	eeb0 2a47 	vmov.f32	s4, s14
 800d30c:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d3d0 <turn135outL+0x3c0>
 800d310:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d3d0 <turn135outL+0x3c0>
 800d314:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d3d8 <turn135outL+0x3c8>
 800d318:	eeb0 0a67 	vmov.f32	s0, s15
 800d31c:	f7f6 fc40 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d320:	2301      	movs	r3, #1
 800d322:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d324:	2300      	movs	r3, #0
 800d326:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d328:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d32c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d330:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d334:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d340:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d344:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d348:	eef0 7ae7 	vabs.f32	s15, s15
 800d34c:	ee17 0a90 	vmov	r0, s15
 800d350:	f7f3 f922 	bl	8000598 <__aeabi_f2d>
 800d354:	f04f 0200 	mov.w	r2, #0
 800d358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d35c:	f7f3 fa9e 	bl	800089c <__aeabi_ddiv>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4614      	mov	r4, r2
 800d366:	461d      	mov	r5, r3
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7f3 f914 	bl	8000598 <__aeabi_f2d>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4620      	mov	r0, r4
 800d376:	4629      	mov	r1, r5
 800d378:	f7f3 fa90 	bl	800089c <__aeabi_ddiv>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4610      	mov	r0, r2
 800d382:	4619      	mov	r1, r3
 800d384:	f04f 0200 	mov.w	r2, #0
 800d388:	4b15      	ldr	r3, [pc, #84]	; (800d3e0 <turn135outL+0x3d0>)
 800d38a:	f7f2 ffa7 	bl	80002dc <__adddf3>
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d392:	4610      	mov	r0, r2
 800d394:	4619      	mov	r1, r3
 800d396:	f7f3 fc2f 	bl	8000bf8 <__aeabi_d2f>
 800d39a:	4603      	mov	r3, r0
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	ee02 3a10 	vmov	s4, r3
 800d3a2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d3a6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d3aa:	eef0 0a68 	vmov.f32	s1, s17
 800d3ae:	eeb0 0a48 	vmov.f32	s0, s16
 800d3b2:	f7f5 fdcf 	bl	8002f54 <straight_table2>
}
 800d3b6:	bf00      	nop
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	ecbd 8b02 	vpop	{d8}
 800d3c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d3c4:	b004      	add	sp, #16
 800d3c6:	4770      	bx	lr
 800d3c8:	20000808 	.word	0x20000808
 800d3cc:	42340000 	.word	0x42340000
 800d3d0:	00000000 	.word	0x00000000
 800d3d4:	42c4477b 	.word	0x42c4477b
 800d3d8:	43070000 	.word	0x43070000
 800d3dc:	42b40000 	.word	0x42b40000
 800d3e0:	408f4000 	.word	0x408f4000
 800d3e4:	00000000 	.word	0x00000000

0800d3e8 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d3e8:	b084      	sub	sp, #16
 800d3ea:	b5b0      	push	{r4, r5, r7, lr}
 800d3ec:	ed2d 8b02 	vpush	{d8}
 800d3f0:	b084      	sub	sp, #16
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d3f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3fc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d400:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d404:	2b01      	cmp	r3, #1
 800d406:	f040 80af 	bne.w	800d568 <V90R+0x180>
			highspeed_mode = 1;
 800d40a:	4bc1      	ldr	r3, [pc, #772]	; (800d710 <V90R+0x328>)
 800d40c:	2201      	movs	r2, #1
 800d40e:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d410:	2300      	movs	r3, #0
 800d412:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d414:	2300      	movs	r3, #0
 800d416:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d418:	2300      	movs	r3, #0
 800d41a:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d420:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d424:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d428:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d42c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d430:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d434:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d438:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d43c:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d714 <V90R+0x32c>
 800d440:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	eeb0 2a47 	vmov.f32	s4, s14
 800d44a:	eef0 1a46 	vmov.f32	s3, s12
 800d44e:	eeb0 1a66 	vmov.f32	s2, s13
 800d452:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d71c <V90R+0x334>
 800d456:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d718 <V90R+0x330>
 800d45a:	f7f5 fd7b 	bl	8002f54 <straight_table2>
			wallmode.WallControlMode=0;
 800d45e:	2300      	movs	r3, #0
 800d460:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d462:	2303      	movs	r3, #3
 800d464:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d466:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d46a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d46e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d472:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d476:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d47a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d47e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d482:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d486:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d48a:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d714 <V90R+0x32c>
 800d48e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	eeb0 2a47 	vmov.f32	s4, s14
 800d498:	eef0 1a45 	vmov.f32	s3, s10
 800d49c:	eeb0 1a65 	vmov.f32	s2, s11
 800d4a0:	eef0 0a46 	vmov.f32	s1, s12
 800d4a4:	eeb0 0a66 	vmov.f32	s0, s13
 800d4a8:	f7f5 fd54 	bl	8002f54 <straight_table2>
			if(mollifier_mode == ON){
 800d4ac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10c      	bne.n	800d4ce <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d4b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d4bc:	eeb0 1a47 	vmov.f32	s2, s14
 800d4c0:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d720 <V90R+0x338>
 800d4c4:	eeb0 0a67 	vmov.f32	s0, s15
 800d4c8:	f7f6 fcba 	bl	8003e40 <mollifier_slalom_table>
 800d4cc:	e015      	b.n	800d4fa <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4d2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4d6:	eef1 7a67 	vneg.f32	s15, s15
 800d4da:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4de:	eef0 2a66 	vmov.f32	s5, s13
 800d4e2:	eeb0 2a67 	vmov.f32	s4, s15
 800d4e6:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d71c <V90R+0x334>
 800d4ea:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d71c <V90R+0x334>
 800d4ee:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d720 <V90R+0x338>
 800d4f2:	eeb0 0a47 	vmov.f32	s0, s14
 800d4f6:	f7f6 fb53 	bl	8003ba0 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d4fe:	2300      	movs	r3, #0
 800d500:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	4618      	mov	r0, r3
 800d506:	f7f3 f847 	bl	8000598 <__aeabi_f2d>
 800d50a:	a37f      	add	r3, pc, #508	; (adr r3, 800d708 <V90R+0x320>)
 800d50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d510:	f7f2 fee4 	bl	80002dc <__adddf3>
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	4610      	mov	r0, r2
 800d51a:	4619      	mov	r1, r3
 800d51c:	f7f3 fb6c 	bl	8000bf8 <__aeabi_d2f>
 800d520:	4603      	mov	r3, r0
 800d522:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d526:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d52a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d52e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d536:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d53a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d53e:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d714 <V90R+0x32c>
 800d542:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	eeb0 2a47 	vmov.f32	s4, s14
 800d54c:	eef0 1a46 	vmov.f32	s3, s12
 800d550:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d71c <V90R+0x334>
 800d554:	eef0 0a66 	vmov.f32	s1, s13
 800d558:	ee00 3a10 	vmov	s0, r3
 800d55c:	f7f5 fcfa 	bl	8002f54 <straight_table2>
			highspeed_mode = 0;
 800d560:	4b6b      	ldr	r3, [pc, #428]	; (800d710 <V90R+0x328>)
 800d562:	2200      	movs	r2, #0
 800d564:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d566:	e13e      	b.n	800d7e6 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d568:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	f240 808c 	bls.w	800d68a <V90R+0x2a2>
		highspeed_mode = 1;
 800d572:	4b67      	ldr	r3, [pc, #412]	; (800d710 <V90R+0x328>)
 800d574:	2201      	movs	r2, #1
 800d576:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d578:	2300      	movs	r3, #0
 800d57a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d57c:	2300      	movs	r3, #0
 800d57e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d580:	2303      	movs	r3, #3
 800d582:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d584:	2300      	movs	r3, #0
 800d586:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d588:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d58c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d590:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d594:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d598:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d59c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5a4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d5a8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d5ac:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d714 <V90R+0x32c>
 800d5b0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	eeb0 2a47 	vmov.f32	s4, s14
 800d5ba:	eef0 1a45 	vmov.f32	s3, s10
 800d5be:	eeb0 1a65 	vmov.f32	s2, s11
 800d5c2:	eef0 0a46 	vmov.f32	s1, s12
 800d5c6:	eeb0 0a66 	vmov.f32	s0, s13
 800d5ca:	f7f5 fcc3 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800d5ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d10c      	bne.n	800d5f0 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5de:	eeb0 1a47 	vmov.f32	s2, s14
 800d5e2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d720 <V90R+0x338>
 800d5e6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5ea:	f7f6 fc29 	bl	8003e40 <mollifier_slalom_table>
 800d5ee:	e015      	b.n	800d61c <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d5f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d5f8:	eef1 7a67 	vneg.f32	s15, s15
 800d5fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d600:	eef0 2a66 	vmov.f32	s5, s13
 800d604:	eeb0 2a67 	vmov.f32	s4, s15
 800d608:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d71c <V90R+0x334>
 800d60c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d71c <V90R+0x334>
 800d610:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d720 <V90R+0x338>
 800d614:	eeb0 0a47 	vmov.f32	s0, s14
 800d618:	f7f6 fac2 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d620:	2300      	movs	r3, #0
 800d622:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d626:	4618      	mov	r0, r3
 800d628:	f7f2 ffb6 	bl	8000598 <__aeabi_f2d>
 800d62c:	a336      	add	r3, pc, #216	; (adr r3, 800d708 <V90R+0x320>)
 800d62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d632:	f7f2 fe53 	bl	80002dc <__adddf3>
 800d636:	4602      	mov	r2, r0
 800d638:	460b      	mov	r3, r1
 800d63a:	4610      	mov	r0, r2
 800d63c:	4619      	mov	r1, r3
 800d63e:	f7f3 fadb 	bl	8000bf8 <__aeabi_d2f>
 800d642:	4603      	mov	r3, r0
 800d644:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d648:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d64c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d650:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d654:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d658:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d65c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d660:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d714 <V90R+0x32c>
 800d664:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d668:	68f8      	ldr	r0, [r7, #12]
 800d66a:	eeb0 2a47 	vmov.f32	s4, s14
 800d66e:	eef0 1a46 	vmov.f32	s3, s12
 800d672:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d71c <V90R+0x334>
 800d676:	eef0 0a66 	vmov.f32	s1, s13
 800d67a:	ee00 3a10 	vmov	s0, r3
 800d67e:	f7f5 fc69 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800d682:	4b23      	ldr	r3, [pc, #140]	; (800d710 <V90R+0x328>)
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
}
 800d688:	e0ad      	b.n	800d7e6 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d68a:	2300      	movs	r3, #0
 800d68c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d68e:	2300      	movs	r3, #0
 800d690:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d692:	2303      	movs	r3, #3
 800d694:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d696:	2300      	movs	r3, #0
 800d698:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d69a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d69e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d6a2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d6a6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6b6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6ba:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6be:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d714 <V90R+0x32c>
 800d6c2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6c6:	68f8      	ldr	r0, [r7, #12]
 800d6c8:	eeb0 2a47 	vmov.f32	s4, s14
 800d6cc:	eef0 1a45 	vmov.f32	s3, s10
 800d6d0:	eeb0 1a65 	vmov.f32	s2, s11
 800d6d4:	eef0 0a46 	vmov.f32	s1, s12
 800d6d8:	eeb0 0a66 	vmov.f32	s0, s13
 800d6dc:	f7f5 fc3a 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800d6e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d11d      	bne.n	800d724 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d6e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6f0:	eeb0 1a47 	vmov.f32	s2, s14
 800d6f4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d720 <V90R+0x338>
 800d6f8:	eeb0 0a67 	vmov.f32	s0, s15
 800d6fc:	f7f6 fba0 	bl	8003e40 <mollifier_slalom_table>
 800d700:	e026      	b.n	800d750 <V90R+0x368>
 800d702:	bf00      	nop
 800d704:	f3af 8000 	nop.w
 800d708:	c022ec18 	.word	0xc022ec18
 800d70c:	405fd1de 	.word	0x405fd1de
 800d710:	20000808 	.word	0x20000808
 800d714:	42340000 	.word	0x42340000
 800d718:	42c4477b 	.word	0x42c4477b
 800d71c:	00000000 	.word	0x00000000
 800d720:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d724:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d728:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d72c:	eef1 7a67 	vneg.f32	s15, s15
 800d730:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d734:	eef0 2a66 	vmov.f32	s5, s13
 800d738:	eeb0 2a67 	vmov.f32	s4, s15
 800d73c:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d71c <V90R+0x334>
 800d740:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d71c <V90R+0x334>
 800d744:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d720 <V90R+0x338>
 800d748:	eeb0 0a47 	vmov.f32	s0, s14
 800d74c:	f7f6 fa28 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d750:	2303      	movs	r3, #3
 800d752:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d754:	2300      	movs	r3, #0
 800d756:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d758:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d75c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d760:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d764:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d76c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d774:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d778:	eef0 7ae7 	vabs.f32	s15, s15
 800d77c:	ee17 0a90 	vmov	r0, s15
 800d780:	f7f2 ff0a 	bl	8000598 <__aeabi_f2d>
 800d784:	f04f 0200 	mov.w	r2, #0
 800d788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d78c:	f7f3 f886 	bl	800089c <__aeabi_ddiv>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4614      	mov	r4, r2
 800d796:	461d      	mov	r5, r3
 800d798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7f2 fefc 	bl	8000598 <__aeabi_f2d>
 800d7a0:	4602      	mov	r2, r0
 800d7a2:	460b      	mov	r3, r1
 800d7a4:	4620      	mov	r0, r4
 800d7a6:	4629      	mov	r1, r5
 800d7a8:	f7f3 f878 	bl	800089c <__aeabi_ddiv>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	460b      	mov	r3, r1
 800d7b0:	4610      	mov	r0, r2
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	4b0f      	ldr	r3, [pc, #60]	; (800d7f8 <V90R+0x410>)
 800d7ba:	f7f2 fd8f 	bl	80002dc <__adddf3>
 800d7be:	4602      	mov	r2, r0
 800d7c0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7c2:	4610      	mov	r0, r2
 800d7c4:	4619      	mov	r1, r3
 800d7c6:	f7f3 fa17 	bl	8000bf8 <__aeabi_d2f>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	68f8      	ldr	r0, [r7, #12]
 800d7ce:	ee02 3a10 	vmov	s4, r3
 800d7d2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d7d6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d7da:	eef0 0a68 	vmov.f32	s1, s17
 800d7de:	eeb0 0a48 	vmov.f32	s0, s16
 800d7e2:	f7f5 fbb7 	bl	8002f54 <straight_table2>
}
 800d7e6:	bf00      	nop
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	ecbd 8b02 	vpop	{d8}
 800d7f0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d7f4:	b004      	add	sp, #16
 800d7f6:	4770      	bx	lr
 800d7f8:	408f4000 	.word	0x408f4000
 800d7fc:	00000000 	.word	0x00000000

0800d800 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d800:	b084      	sub	sp, #16
 800d802:	b5b0      	push	{r4, r5, r7, lr}
 800d804:	ed2d 8b02 	vpush	{d8}
 800d808:	b084      	sub	sp, #16
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d810:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d814:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d818:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	f040 80ad 	bne.w	800d97c <V90L+0x17c>
				highspeed_mode = 1;
 800d822:	4bbf      	ldr	r3, [pc, #764]	; (800db20 <V90L+0x320>)
 800d824:	2201      	movs	r2, #1
 800d826:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d828:	2300      	movs	r3, #0
 800d82a:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d834:	2300      	movs	r3, #0
 800d836:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d838:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d83c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d840:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d844:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d848:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d84c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d850:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d854:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800db24 <V90L+0x324>
 800d858:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	eeb0 2a47 	vmov.f32	s4, s14
 800d862:	eef0 1a46 	vmov.f32	s3, s12
 800d866:	eeb0 1a66 	vmov.f32	s2, s13
 800d86a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800db2c <V90L+0x32c>
 800d86e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800db28 <V90L+0x328>
 800d872:	f7f5 fb6f 	bl	8002f54 <straight_table2>
				wallmode.WallControlMode=0;
 800d876:	2300      	movs	r3, #0
 800d878:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d87a:	2304      	movs	r3, #4
 800d87c:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d87e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d882:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d886:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d88a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d88e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d892:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d89a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d89e:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8a2:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800db24 <V90L+0x324>
 800d8a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	eeb0 2a47 	vmov.f32	s4, s14
 800d8b0:	eef0 1a45 	vmov.f32	s3, s10
 800d8b4:	eeb0 1a65 	vmov.f32	s2, s11
 800d8b8:	eef0 0a46 	vmov.f32	s1, s12
 800d8bc:	eeb0 0a66 	vmov.f32	s0, s13
 800d8c0:	f7f5 fb48 	bl	8002f54 <straight_table2>
				if(mollifier_mode == ON){
 800d8c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d10c      	bne.n	800d8e6 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8d4:	eeb0 1a47 	vmov.f32	s2, s14
 800d8d8:	eddf 0a95 	vldr	s1, [pc, #596]	; 800db30 <V90L+0x330>
 800d8dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d8e0:	f7f6 faae 	bl	8003e40 <mollifier_slalom_table>
 800d8e4:	e013      	b.n	800d90e <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8ee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8f2:	eef0 2a66 	vmov.f32	s5, s13
 800d8f6:	eeb0 2a47 	vmov.f32	s4, s14
 800d8fa:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800db2c <V90L+0x32c>
 800d8fe:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800db2c <V90L+0x32c>
 800d902:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800db30 <V90L+0x330>
 800d906:	eeb0 0a67 	vmov.f32	s0, s15
 800d90a:	f7f6 f949 	bl	8003ba0 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d90e:	2300      	movs	r3, #0
 800d910:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d912:	2300      	movs	r3, #0
 800d914:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d918:	4618      	mov	r0, r3
 800d91a:	f7f2 fe3d 	bl	8000598 <__aeabi_f2d>
 800d91e:	a37e      	add	r3, pc, #504	; (adr r3, 800db18 <V90L+0x318>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	f7f2 fcda 	bl	80002dc <__adddf3>
 800d928:	4602      	mov	r2, r0
 800d92a:	460b      	mov	r3, r1
 800d92c:	4610      	mov	r0, r2
 800d92e:	4619      	mov	r1, r3
 800d930:	f7f3 f962 	bl	8000bf8 <__aeabi_d2f>
 800d934:	4603      	mov	r3, r0
 800d936:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d93a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d93e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d942:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d946:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d94a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d94e:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d952:	eddf 5a74 	vldr	s11, [pc, #464]	; 800db24 <V90L+0x324>
 800d956:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d95a:	68f8      	ldr	r0, [r7, #12]
 800d95c:	eeb0 2a47 	vmov.f32	s4, s14
 800d960:	eef0 1a46 	vmov.f32	s3, s12
 800d964:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800db2c <V90L+0x32c>
 800d968:	eef0 0a66 	vmov.f32	s1, s13
 800d96c:	ee00 3a10 	vmov	s0, r3
 800d970:	f7f5 faf0 	bl	8002f54 <straight_table2>
				highspeed_mode = 0;
 800d974:	4b6a      	ldr	r3, [pc, #424]	; (800db20 <V90L+0x320>)
 800d976:	2200      	movs	r2, #0
 800d978:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d97a:	e13a      	b.n	800dbf2 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d97c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d980:	2b01      	cmp	r3, #1
 800d982:	f240 808a 	bls.w	800da9a <V90L+0x29a>
		highspeed_mode = 1;
 800d986:	4b66      	ldr	r3, [pc, #408]	; (800db20 <V90L+0x320>)
 800d988:	2201      	movs	r2, #1
 800d98a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d98c:	2300      	movs	r3, #0
 800d98e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d990:	2300      	movs	r3, #0
 800d992:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d994:	2304      	movs	r3, #4
 800d996:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d998:	2300      	movs	r3, #0
 800d99a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d99c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d9a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d9a4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d9a8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d9ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9b8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9bc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9c0:	eddf 4a58 	vldr	s9, [pc, #352]	; 800db24 <V90L+0x324>
 800d9c4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	eeb0 2a47 	vmov.f32	s4, s14
 800d9ce:	eef0 1a45 	vmov.f32	s3, s10
 800d9d2:	eeb0 1a65 	vmov.f32	s2, s11
 800d9d6:	eef0 0a46 	vmov.f32	s1, s12
 800d9da:	eeb0 0a66 	vmov.f32	s0, s13
 800d9de:	f7f5 fab9 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800d9e2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d10c      	bne.n	800da04 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d9ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9ee:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9f2:	eeb0 1a47 	vmov.f32	s2, s14
 800d9f6:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800db30 <V90L+0x330>
 800d9fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d9fe:	f7f6 fa1f 	bl	8003e40 <mollifier_slalom_table>
 800da02:	e013      	b.n	800da2c <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800da04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800da0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da10:	eef0 2a66 	vmov.f32	s5, s13
 800da14:	eeb0 2a47 	vmov.f32	s4, s14
 800da18:	eddf 1a44 	vldr	s3, [pc, #272]	; 800db2c <V90L+0x32c>
 800da1c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800db2c <V90L+0x32c>
 800da20:	eddf 0a43 	vldr	s1, [pc, #268]	; 800db30 <V90L+0x330>
 800da24:	eeb0 0a67 	vmov.f32	s0, s15
 800da28:	f7f6 f8ba 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da30:	2300      	movs	r3, #0
 800da32:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da36:	4618      	mov	r0, r3
 800da38:	f7f2 fdae 	bl	8000598 <__aeabi_f2d>
 800da3c:	a336      	add	r3, pc, #216	; (adr r3, 800db18 <V90L+0x318>)
 800da3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da42:	f7f2 fc4b 	bl	80002dc <__adddf3>
 800da46:	4602      	mov	r2, r0
 800da48:	460b      	mov	r3, r1
 800da4a:	4610      	mov	r0, r2
 800da4c:	4619      	mov	r1, r3
 800da4e:	f7f3 f8d3 	bl	8000bf8 <__aeabi_d2f>
 800da52:	4603      	mov	r3, r0
 800da54:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da58:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da68:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800da6c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da70:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800db24 <V90L+0x324>
 800da74:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	eeb0 2a47 	vmov.f32	s4, s14
 800da7e:	eef0 1a46 	vmov.f32	s3, s12
 800da82:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800db2c <V90L+0x32c>
 800da86:	eef0 0a66 	vmov.f32	s1, s13
 800da8a:	ee00 3a10 	vmov	s0, r3
 800da8e:	f7f5 fa61 	bl	8002f54 <straight_table2>
		highspeed_mode = 0;
 800da92:	4b23      	ldr	r3, [pc, #140]	; (800db20 <V90L+0x320>)
 800da94:	2200      	movs	r2, #0
 800da96:	701a      	strb	r2, [r3, #0]
}
 800da98:	e0ab      	b.n	800dbf2 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800da9a:	2300      	movs	r3, #0
 800da9c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800daa2:	2304      	movs	r3, #4
 800daa4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800daaa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800daae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dab2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dab6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800daba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dabe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dac6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800daca:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dace:	eddf 4a15 	vldr	s9, [pc, #84]	; 800db24 <V90L+0x324>
 800dad2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	eeb0 2a47 	vmov.f32	s4, s14
 800dadc:	eef0 1a45 	vmov.f32	s3, s10
 800dae0:	eeb0 1a65 	vmov.f32	s2, s11
 800dae4:	eef0 0a46 	vmov.f32	s1, s12
 800dae8:	eeb0 0a66 	vmov.f32	s0, s13
 800daec:	f7f5 fa32 	bl	8002f54 <straight_table2>
		if(mollifier_mode == ON){
 800daf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d11d      	bne.n	800db34 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800daf8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dafc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db00:	eeb0 1a47 	vmov.f32	s2, s14
 800db04:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db30 <V90L+0x330>
 800db08:	eeb0 0a67 	vmov.f32	s0, s15
 800db0c:	f7f6 f998 	bl	8003e40 <mollifier_slalom_table>
 800db10:	e024      	b.n	800db5c <V90L+0x35c>
 800db12:	bf00      	nop
 800db14:	f3af 8000 	nop.w
 800db18:	c022ec18 	.word	0xc022ec18
 800db1c:	405fd1de 	.word	0x405fd1de
 800db20:	20000808 	.word	0x20000808
 800db24:	42340000 	.word	0x42340000
 800db28:	42d4477b 	.word	0x42d4477b
 800db2c:	00000000 	.word	0x00000000
 800db30:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db40:	eef0 2a66 	vmov.f32	s5, s13
 800db44:	eeb0 2a47 	vmov.f32	s4, s14
 800db48:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800db2c <V90L+0x32c>
 800db4c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800db2c <V90L+0x32c>
 800db50:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800db30 <V90L+0x330>
 800db54:	eeb0 0a67 	vmov.f32	s0, s15
 800db58:	f7f6 f822 	bl	8003ba0 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800db5c:	2303      	movs	r3, #3
 800db5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db60:	2300      	movs	r3, #0
 800db62:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db64:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800db68:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800db6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db78:	edd7 7a01 	vldr	s15, [r7, #4]
 800db7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db84:	eef0 7ae7 	vabs.f32	s15, s15
 800db88:	ee17 0a90 	vmov	r0, s15
 800db8c:	f7f2 fd04 	bl	8000598 <__aeabi_f2d>
 800db90:	f04f 0200 	mov.w	r2, #0
 800db94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db98:	f7f2 fe80 	bl	800089c <__aeabi_ddiv>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4614      	mov	r4, r2
 800dba2:	461d      	mov	r5, r3
 800dba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7f2 fcf6 	bl	8000598 <__aeabi_f2d>
 800dbac:	4602      	mov	r2, r0
 800dbae:	460b      	mov	r3, r1
 800dbb0:	4620      	mov	r0, r4
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	f7f2 fe72 	bl	800089c <__aeabi_ddiv>
 800dbb8:	4602      	mov	r2, r0
 800dbba:	460b      	mov	r3, r1
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	f04f 0200 	mov.w	r2, #0
 800dbc4:	4b0f      	ldr	r3, [pc, #60]	; (800dc04 <V90L+0x404>)
 800dbc6:	f7f2 fb89 	bl	80002dc <__adddf3>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dbce:	4610      	mov	r0, r2
 800dbd0:	4619      	mov	r1, r3
 800dbd2:	f7f3 f811 	bl	8000bf8 <__aeabi_d2f>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	ee02 3a10 	vmov	s4, r3
 800dbde:	edd7 1a01 	vldr	s3, [r7, #4]
 800dbe2:	ed97 1a01 	vldr	s2, [r7, #4]
 800dbe6:	eef0 0a68 	vmov.f32	s1, s17
 800dbea:	eeb0 0a48 	vmov.f32	s0, s16
 800dbee:	f7f5 f9b1 	bl	8002f54 <straight_table2>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	ecbd 8b02 	vpop	{d8}
 800dbfc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dc00:	b004      	add	sp, #16
 800dc02:	4770      	bx	lr
 800dc04:	408f4000 	.word	0x408f4000

0800dc08 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dc08:	b084      	sub	sp, #16
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b086      	sub	sp, #24
 800dc0e:	af04      	add	r7, sp, #16
 800dc10:	f107 0c10 	add.w	ip, r7, #16
 800dc14:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc18:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dc1c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d116      	bne.n	800dc52 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dc24:	2001      	movs	r0, #1
 800dc26:	f7f9 fead 	bl	8007984 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc2a:	2003      	movs	r0, #3
 800dc2c:	f7f9 feb4 	bl	8007998 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dc30:	ed97 0a01 	vldr	s0, [r7, #4]
 800dc34:	f7f9 ff44 	bl	8007ac0 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dc38:	f7f9 ff2e 	bl	8007a98 <pl_FunMotor_start>
		HAL_Delay(600);
 800dc3c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dc40:	f009 fe10 	bl	8017864 <HAL_Delay>
		reset_gyro();
 800dc44:	f7f3 fd34 	bl	80016b0 <reset_gyro>
		reset_speed();
 800dc48:	f7f3 f9e6 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc4c:	f7f6 fd9e 	bl	800478c <clear_Ierror>
 800dc50:	e00b      	b.n	800dc6a <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dc52:	2001      	movs	r0, #1
 800dc54:	f7f9 fe96 	bl	8007984 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc58:	2003      	movs	r0, #3
 800dc5a:	f7f9 fe9d 	bl	8007998 <pl_L_DriveMotor_mode>
		reset_gyro();
 800dc5e:	f7f3 fd27 	bl	80016b0 <reset_gyro>
		reset_speed();
 800dc62:	f7f3 f9d9 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc66:	f7f6 fd91 	bl	800478c <clear_Ierror>

	}
	record_mode=2;
 800dc6a:	4ba8      	ldr	r3, [pc, #672]	; (800df0c <testturning+0x304>)
 800dc6c:	2202      	movs	r2, #2
 800dc6e:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dc70:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d110      	bne.n	800dc9a <testturning+0x92>
 800dc78:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc7c:	9303      	str	r3, [sp, #12]
 800dc7e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc82:	9302      	str	r3, [sp, #8]
 800dc84:	2301      	movs	r3, #1
 800dc86:	9301      	str	r3, [sp, #4]
 800dc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8a:	9300      	str	r3, [sp, #0]
 800dc8c:	f107 0318 	add.w	r3, r7, #24
 800dc90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc92:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800df10 <testturning+0x308>
 800dc96:	f7fc f9cd 	bl	800a034 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dc9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d110      	bne.n	800dcc4 <testturning+0xbc>
 800dca2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dca6:	9303      	str	r3, [sp, #12]
 800dca8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dcac:	9302      	str	r3, [sp, #8]
 800dcae:	2301      	movs	r3, #1
 800dcb0:	9301      	str	r3, [sp, #4]
 800dcb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb4:	9300      	str	r3, [sp, #0]
 800dcb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcbc:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800df10 <testturning+0x308>
 800dcc0:	f7fc fb72 	bl	800a3a8 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dcc4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d10d      	bne.n	800dce8 <testturning+0xe0>
 800dccc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcd0:	9302      	str	r3, [sp, #8]
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcde:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dce0:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800df10 <testturning+0x308>
 800dce4:	f7fc fd16 	bl	800a714 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dce8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d10d      	bne.n	800dd0c <testturning+0x104>
 800dcf0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcf4:	9302      	str	r3, [sp, #8]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	9301      	str	r3, [sp, #4]
 800dcfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcfc:	9300      	str	r3, [sp, #0]
 800dcfe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dd02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd04:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800df10 <testturning+0x308>
 800dd08:	f7fc fe6e 	bl	800a9e8 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dd0c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd10:	2b04      	cmp	r3, #4
 800dd12:	d10d      	bne.n	800dd30 <testturning+0x128>
 800dd14:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd18:	9302      	str	r3, [sp, #8]
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	9301      	str	r3, [sp, #4]
 800dd1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd28:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800df10 <testturning+0x308>
 800dd2c:	f7fc ffc0 	bl	800acb0 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dd30:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd34:	2b05      	cmp	r3, #5
 800dd36:	d10e      	bne.n	800dd56 <testturning+0x14e>
 800dd38:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd3c:	9302      	str	r3, [sp, #8]
 800dd3e:	2301      	movs	r3, #1
 800dd40:	9301      	str	r3, [sp, #4]
 800dd42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd46:	9300      	str	r3, [sp, #0]
 800dd48:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd4e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800df10 <testturning+0x308>
 800dd52:	f7fd f917 	bl	800af84 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dd56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd5a:	2b06      	cmp	r3, #6
 800dd5c:	d10e      	bne.n	800dd7c <testturning+0x174>
 800dd5e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd62:	9302      	str	r3, [sp, #8]
 800dd64:	2301      	movs	r3, #1
 800dd66:	9301      	str	r3, [sp, #4]
 800dd68:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd6c:	9300      	str	r3, [sp, #0]
 800dd6e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dd72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd74:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800df10 <testturning+0x308>
 800dd78:	f7fd fa6a 	bl	800b250 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dd7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd80:	2b07      	cmp	r3, #7
 800dd82:	d10e      	bne.n	800dda2 <testturning+0x19a>
 800dd84:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd88:	9302      	str	r3, [sp, #8]
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	9301      	str	r3, [sp, #4]
 800dd8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd92:	9300      	str	r3, [sp, #0]
 800dd94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd9a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800df10 <testturning+0x308>
 800dd9e:	f7fd fc9f 	bl	800b6e0 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dda2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dda6:	2b08      	cmp	r3, #8
 800dda8:	d10e      	bne.n	800ddc8 <testturning+0x1c0>
 800ddaa:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddae:	9302      	str	r3, [sp, #8]
 800ddb0:	2301      	movs	r3, #1
 800ddb2:	9301      	str	r3, [sp, #4]
 800ddb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ddb8:	9300      	str	r3, [sp, #0]
 800ddba:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ddbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddc0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800df10 <testturning+0x308>
 800ddc4:	f7fd fecc 	bl	800bb60 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800ddc8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddcc:	2b09      	cmp	r3, #9
 800ddce:	d10e      	bne.n	800ddee <testturning+0x1e6>
 800ddd0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddd4:	9302      	str	r3, [sp, #8]
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	9301      	str	r3, [sp, #4]
 800ddda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddde:	9300      	str	r3, [sp, #0]
 800dde0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800dde4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dde6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df10 <testturning+0x308>
 800ddea:	f7fe f901 	bl	800bff0 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800ddee:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddf2:	2b0a      	cmp	r3, #10
 800ddf4:	d10e      	bne.n	800de14 <testturning+0x20c>
 800ddf6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddfa:	9302      	str	r3, [sp, #8]
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	9301      	str	r3, [sp, #4]
 800de00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800de0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de0c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800df10 <testturning+0x308>
 800de10:	f7fe fb32 	bl	800c478 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800de14:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de18:	2b0b      	cmp	r3, #11
 800de1a:	d10e      	bne.n	800de3a <testturning+0x232>
 800de1c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de20:	9302      	str	r3, [sp, #8]
 800de22:	2301      	movs	r3, #1
 800de24:	9301      	str	r3, [sp, #4]
 800de26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800de30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de32:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800df10 <testturning+0x308>
 800de36:	f7fe fd11 	bl	800c85c <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800de3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de3e:	2b0c      	cmp	r3, #12
 800de40:	d10e      	bne.n	800de60 <testturning+0x258>
 800de42:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de46:	9302      	str	r3, [sp, #8]
 800de48:	2301      	movs	r3, #1
 800de4a:	9301      	str	r3, [sp, #4]
 800de4c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de50:	9300      	str	r3, [sp, #0]
 800de52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de58:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800df10 <testturning+0x308>
 800de5c:	f7fe fee6 	bl	800cc2c <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800de60:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de64:	2b0d      	cmp	r3, #13
 800de66:	d10e      	bne.n	800de86 <testturning+0x27e>
 800de68:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de6c:	9302      	str	r3, [sp, #8]
 800de6e:	2301      	movs	r3, #1
 800de70:	9301      	str	r3, [sp, #4]
 800de72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de76:	9300      	str	r3, [sp, #0]
 800de78:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800de7c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de7e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800df10 <testturning+0x308>
 800de82:	f7ff f8c5 	bl	800d010 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800de86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de8a:	2b0e      	cmp	r3, #14
 800de8c:	d10e      	bne.n	800deac <testturning+0x2a4>
 800de8e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de92:	9302      	str	r3, [sp, #8]
 800de94:	2301      	movs	r3, #1
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800de9c:	9300      	str	r3, [sp, #0]
 800de9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800dea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dea4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800df10 <testturning+0x308>
 800dea8:	f7ff fa9e 	bl	800d3e8 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800deac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800deb0:	2b0f      	cmp	r3, #15
 800deb2:	d10e      	bne.n	800ded2 <testturning+0x2ca>
 800deb4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800deb8:	9302      	str	r3, [sp, #8]
 800deba:	2301      	movs	r3, #1
 800debc:	9301      	str	r3, [sp, #4]
 800debe:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800dec2:	9300      	str	r3, [sp, #0]
 800dec4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800dec8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deca:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800df10 <testturning+0x308>
 800dece:	f7ff fc97 	bl	800d800 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800ded2:	4b0e      	ldr	r3, [pc, #56]	; (800df0c <testturning+0x304>)
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ded8:	2003      	movs	r0, #3
 800deda:	f7f9 fd85 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dede:	2003      	movs	r0, #3
 800dee0:	f7f9 fd5a 	bl	8007998 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800dee4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dee8:	f7fa f87e 	bl	8007fe8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800deec:	f7f9 fdde 	bl	8007aac <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800def0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800def4:	f7fa f878 	bl	8007fe8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800def8:	2000      	movs	r0, #0
 800defa:	f7f9 fd43 	bl	8007984 <pl_DriveMotor_standby>

}
 800defe:	bf00      	nop
 800df00:	3708      	adds	r7, #8
 800df02:	46bd      	mov	sp, r7
 800df04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df08:	b004      	add	sp, #16
 800df0a:	4770      	bx	lr
 800df0c:	2000d96c 	.word	0x2000d96c
 800df10:	c2c80000 	.word	0xc2c80000

0800df14 <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800df14:	b480      	push	{r7}
 800df16:	b085      	sub	sp, #20
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	3b01      	subs	r3, #1
 800df24:	2b03      	cmp	r3, #3
 800df26:	d823      	bhi.n	800df70 <update_coordinate+0x5c>
 800df28:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <update_coordinate+0x1c>)
 800df2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2e:	bf00      	nop
 800df30:	0800df41 	.word	0x0800df41
 800df34:	0800df4d 	.word	0x0800df4d
 800df38:	0800df59 	.word	0x0800df59
 800df3c:	0800df65 	.word	0x0800df65
	case 1://北
		*y += 1;
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	601a      	str	r2, [r3, #0]
		break;
 800df4a:	e011      	b.n	800df70 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	1c5a      	adds	r2, r3, #1
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	601a      	str	r2, [r3, #0]
		break;
 800df56:	e00b      	b.n	800df70 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	1e5a      	subs	r2, r3, #1
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	601a      	str	r2, [r3, #0]
		break;
 800df62:	e005      	b.n	800df70 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	1e5a      	subs	r2, r3, #1
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	601a      	str	r2, [r3, #0]
		break;
 800df6e:	bf00      	nop
	}



}
 800df70:	bf00      	nop
 800df72:	3714      	adds	r7, #20
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800df7c:	b084      	sub	sp, #16
 800df7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df80:	b091      	sub	sp, #68	; 0x44
 800df82:	af04      	add	r7, sp, #16
 800df84:	ed87 0a03 	vstr	s0, [r7, #12]
 800df88:	edc7 0a02 	vstr	s1, [r7, #8]
 800df8c:	ed87 1a01 	vstr	s2, [r7, #4]
 800df90:	edc7 1a00 	vstr	s3, [r7]
 800df94:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800df98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800df9c:	4b7d      	ldr	r3, [pc, #500]	; (800e194 <AdatiWayReturn+0x218>)
 800df9e:	2201      	movs	r2, #1
 800dfa0:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	f7f9 fcee 	bl	8007984 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800dfa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dfac:	f009 fc5a 	bl	8017864 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	623b      	str	r3, [r7, #32]
	int y=0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dfcc:	4b72      	ldr	r3, [pc, #456]	; (800e198 <AdatiWayReturn+0x21c>)
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	2b95      	cmp	r3, #149	; 0x95
 800dfd2:	bfcc      	ite	gt
 800dfd4:	2301      	movgt	r3, #1
 800dfd6:	2300      	movle	r3, #0
 800dfd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dfdc:	4b6e      	ldr	r3, [pc, #440]	; (800e198 <AdatiWayReturn+0x21c>)
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	bfcc      	ite	gt
 800dfe8:	2301      	movgt	r3, #1
 800dfea:	2300      	movle	r3, #0
 800dfec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dff0:	4b69      	ldr	r3, [pc, #420]	; (800e198 <AdatiWayReturn+0x21c>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dff8:	4293      	cmp	r3, r2
 800dffa:	bfcc      	ite	gt
 800dffc:	2301      	movgt	r3, #1
 800dffe:	2300      	movle	r3, #0
 800e000:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e004:	6a38      	ldr	r0, [r7, #32]
 800e006:	69f9      	ldr	r1, [r7, #28]
 800e008:	69ba      	ldr	r2, [r7, #24]
 800e00a:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e00e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e012:	9301      	str	r3, [sp, #4]
 800e014:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e018:	9300      	str	r3, [sp, #0]
 800e01a:	4623      	mov	r3, r4
 800e01c:	f002 fb76 	bl	801070c <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e020:	f005 fde6 	bl	8013bf0 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e024:	2064      	movs	r0, #100	; 0x64
 800e026:	f009 fc1d 	bl	8017864 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e02a:	6978      	ldr	r0, [r7, #20]
 800e02c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e030:	edd7 1a03 	vldr	s3, [r7, #12]
 800e034:	ed97 1a03 	vldr	s2, [r7, #12]
 800e038:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e19c <AdatiWayReturn+0x220>
 800e03c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e1a0 <AdatiWayReturn+0x224>
 800e040:	f7f4 ff88 	bl	8002f54 <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e044:	69ba      	ldr	r2, [r7, #24]
 800e046:	f107 011c 	add.w	r1, r7, #28
 800e04a:	f107 0320 	add.w	r3, r7, #32
 800e04e:	4618      	mov	r0, r3
 800e050:	f7ff ff60 	bl	800df14 <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e054:	4b50      	ldr	r3, [pc, #320]	; (800e198 <AdatiWayReturn+0x21c>)
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	2b95      	cmp	r3, #149	; 0x95
 800e05a:	bfcc      	ite	gt
 800e05c:	2301      	movgt	r3, #1
 800e05e:	2300      	movle	r3, #0
 800e060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e064:	4b4c      	ldr	r3, [pc, #304]	; (800e198 <AdatiWayReturn+0x21c>)
 800e066:	691b      	ldr	r3, [r3, #16]
 800e068:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e06c:	4293      	cmp	r3, r2
 800e06e:	bfcc      	ite	gt
 800e070:	2301      	movgt	r3, #1
 800e072:	2300      	movle	r3, #0
 800e074:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e078:	4b47      	ldr	r3, [pc, #284]	; (800e198 <AdatiWayReturn+0x21c>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e080:	4293      	cmp	r3, r2
 800e082:	bfcc      	ite	gt
 800e084:	2301      	movgt	r3, #1
 800e086:	2300      	movle	r3, #0
 800e088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e08c:	2301      	movs	r3, #1
 800e08e:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e090:	2301      	movs	r3, #1
 800e092:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e094:	2300      	movs	r3, #0
 800e096:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e098:	6978      	ldr	r0, [r7, #20]
 800e09a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e09e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e0a2:	ed97 1a03 	vldr	s2, [r7, #12]
 800e0a6:	edd7 0a03 	vldr	s1, [r7, #12]
 800e0aa:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e0ae:	f7f4 ff51 	bl	8002f54 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0b2:	6a38      	ldr	r0, [r7, #32]
 800e0b4:	69f9      	ldr	r1, [r7, #28]
 800e0b6:	69ba      	ldr	r2, [r7, #24]
 800e0b8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0bc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0c0:	9301      	str	r3, [sp, #4]
 800e0c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0c6:	9300      	str	r3, [sp, #0]
 800e0c8:	4623      	mov	r3, r4
 800e0ca:	f002 fb1f 	bl	801070c <update_wall>
		if(Dijkstra_mode==2){
 800e0ce:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e0d2:	2b02      	cmp	r3, #2
 800e0d4:	d104      	bne.n	800e0e0 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e0d6:	f004 fee9 	bl	8012eac <route_Dijkstra>
					create_StepCountMap_unknown();
 800e0da:	f005 fbbd 	bl	8013858 <create_StepCountMap_unknown>
 800e0de:	e001      	b.n	800e0e4 <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e0e0:	f005 fd86 	bl	8013bf0 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e0e4:	6a3b      	ldr	r3, [r7, #32]
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	69b9      	ldr	r1, [r7, #24]
 800e0ea:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e0ee:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e0f2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0f6:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e0fa:	9102      	str	r1, [sp, #8]
 800e0fc:	9201      	str	r2, [sp, #4]
 800e0fe:	9300      	str	r3, [sp, #0]
 800e100:	4633      	mov	r3, r6
 800e102:	462a      	mov	r2, r5
 800e104:	4621      	mov	r1, r4
 800e106:	f003 f87b 	bl	8011200 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e10a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <AdatiWayReturn+0x19a>
 800e112:	23ff      	movs	r3, #255	; 0xff
 800e114:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e116:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d001      	beq.n	800e122 <AdatiWayReturn+0x1a6>
 800e11e:	23ff      	movs	r3, #255	; 0xff
 800e120:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e122:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e126:	2b00      	cmp	r3, #0
 800e128:	d001      	beq.n	800e12e <AdatiWayReturn+0x1b2>
 800e12a:	23ff      	movs	r3, #255	; 0xff
 800e12c:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e12e:	6a38      	ldr	r0, [r7, #32]
 800e130:	69fc      	ldr	r4, [r7, #28]
 800e132:	69bd      	ldr	r5, [r7, #24]
 800e134:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e136:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e138:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e13a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e13c:	9102      	str	r1, [sp, #8]
 800e13e:	9201      	str	r2, [sp, #4]
 800e140:	9300      	str	r3, [sp, #0]
 800e142:	4633      	mov	r3, r6
 800e144:	462a      	mov	r2, r5
 800e146:	4621      	mov	r1, r4
 800e148:	f002 f88c 	bl	8010264 <decision_kitiku>
		mode.WallCutMode=1;
 800e14c:	2301      	movs	r3, #1
 800e14e:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e150:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e154:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e158:	4619      	mov	r1, r3
 800e15a:	6978      	ldr	r0, [r7, #20]
 800e15c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e160:	f7f5 fba2 	bl	80038a8 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e164:	6a3b      	ldr	r3, [r7, #32]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d103      	bne.n	800e172 <AdatiWayReturn+0x1f6>
 800e16a:	69fb      	ldr	r3, [r7, #28]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	f000 827c 	beq.w	800e66a <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	2b0a      	cmp	r3, #10
 800e176:	d003      	beq.n	800e180 <AdatiWayReturn+0x204>
 800e178:	6a3b      	ldr	r3, [r7, #32]
 800e17a:	2b0b      	cmp	r3, #11
 800e17c:	f040 810d 	bne.w	800e39a <AdatiWayReturn+0x41e>
 800e180:	69fb      	ldr	r3, [r7, #28]
 800e182:	2b0b      	cmp	r3, #11
 800e184:	f000 809b 	beq.w	800e2be <AdatiWayReturn+0x342>
 800e188:	69fb      	ldr	r3, [r7, #28]
 800e18a:	2b0c      	cmp	r3, #12
 800e18c:	f040 8105 	bne.w	800e39a <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e190:	e095      	b.n	800e2be <AdatiWayReturn+0x342>
 800e192:	bf00      	nop
 800e194:	20000834 	.word	0x20000834
 800e198:	20000470 	.word	0x20000470
 800e19c:	00000000 	.word	0x00000000
 800e1a0:	42830000 	.word	0x42830000
 800e1a4:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1b4:	6978      	ldr	r0, [r7, #20]
 800e1b6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1ba:	edd7 1a03 	vldr	s3, [r7, #12]
 800e1be:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1c2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1c6:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e1a4 <AdatiWayReturn+0x228>
 800e1ca:	f7f4 fec3 	bl	8002f54 <straight_table2>

				update_coordinate(&x,&y,direction);
 800e1ce:	69ba      	ldr	r2, [r7, #24]
 800e1d0:	f107 011c 	add.w	r1, r7, #28
 800e1d4:	f107 0320 	add.w	r3, r7, #32
 800e1d8:	4618      	mov	r0, r3
 800e1da:	f7ff fe9b 	bl	800df14 <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e1de:	4b7f      	ldr	r3, [pc, #508]	; (800e3dc <AdatiWayReturn+0x460>)
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	2b95      	cmp	r3, #149	; 0x95
 800e1e4:	bfcc      	ite	gt
 800e1e6:	2301      	movgt	r3, #1
 800e1e8:	2300      	movle	r3, #0
 800e1ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e1ee:	4b7b      	ldr	r3, [pc, #492]	; (800e3dc <AdatiWayReturn+0x460>)
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1f6:	4293      	cmp	r3, r2
 800e1f8:	bfcc      	ite	gt
 800e1fa:	2301      	movgt	r3, #1
 800e1fc:	2300      	movle	r3, #0
 800e1fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e202:	4b76      	ldr	r3, [pc, #472]	; (800e3dc <AdatiWayReturn+0x460>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e20a:	4293      	cmp	r3, r2
 800e20c:	bfcc      	ite	gt
 800e20e:	2301      	movgt	r3, #1
 800e210:	2300      	movle	r3, #0
 800e212:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e216:	2301      	movs	r3, #1
 800e218:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e21a:	2301      	movs	r3, #1
 800e21c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e21e:	2300      	movs	r3, #0
 800e220:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e222:	6978      	ldr	r0, [r7, #20]
 800e224:	ed97 2a01 	vldr	s4, [r7, #4]
 800e228:	edd7 1a03 	vldr	s3, [r7, #12]
 800e22c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e230:	edd7 0a03 	vldr	s1, [r7, #12]
 800e234:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e238:	f7f4 fe8c 	bl	8002f54 <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e23c:	6a38      	ldr	r0, [r7, #32]
 800e23e:	69f9      	ldr	r1, [r7, #28]
 800e240:	69ba      	ldr	r2, [r7, #24]
 800e242:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e246:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e24a:	9301      	str	r3, [sp, #4]
 800e24c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	4623      	mov	r3, r4
 800e254:	f002 fa5a 	bl	801070c <update_wall>
				create_StepCountMap_queue();
 800e258:	f005 fcca 	bl	8013bf0 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e25c:	6a3b      	ldr	r3, [r7, #32]
 800e25e:	69fa      	ldr	r2, [r7, #28]
 800e260:	69b9      	ldr	r1, [r7, #24]
 800e262:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e266:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e26a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e26e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e272:	9102      	str	r1, [sp, #8]
 800e274:	9201      	str	r2, [sp, #4]
 800e276:	9300      	str	r3, [sp, #0]
 800e278:	4633      	mov	r3, r6
 800e27a:	462a      	mov	r2, r5
 800e27c:	4621      	mov	r1, r4
 800e27e:	f002 ffbf 	bl	8011200 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e282:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e286:	2b00      	cmp	r3, #0
 800e288:	d001      	beq.n	800e28e <AdatiWayReturn+0x312>
 800e28a:	23ff      	movs	r3, #255	; 0xff
 800e28c:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e28e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e292:	2b00      	cmp	r3, #0
 800e294:	d001      	beq.n	800e29a <AdatiWayReturn+0x31e>
 800e296:	23ff      	movs	r3, #255	; 0xff
 800e298:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e29a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d001      	beq.n	800e2a6 <AdatiWayReturn+0x32a>
 800e2a2:	23ff      	movs	r3, #255	; 0xff
 800e2a4:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e2aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e2ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	6978      	ldr	r0, [r7, #20]
 800e2b6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2ba:	f7f5 faf5 	bl	80038a8 <End_straight>
			while (front_wall==0) {
 800e2be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2c2:	f083 0301 	eor.w	r3, r3, #1
 800e2c6:	b2db      	uxtb	r3, r3
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f47f af6d 	bne.w	800e1a8 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2da:	6978      	ldr	r0, [r7, #20]
 800e2dc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2e0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2e4:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e408 <AdatiWayReturn+0x48c>
 800e2e8:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2ec:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e3e0 <AdatiWayReturn+0x464>
 800e2f0:	f7f4 fe30 	bl	8002f54 <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e2f4:	2003      	movs	r0, #3
 800e2f6:	f7f9 fb77 	bl	80079e8 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e2fa:	2003      	movs	r0, #3
 800e2fc:	f7f9 fb4c 	bl	8007998 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e300:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e304:	f7f9 fe70 	bl	8007fe8 <wait_ms_NoReset>
			no_safty = 1;
 800e308:	4b36      	ldr	r3, [pc, #216]	; (800e3e4 <AdatiWayReturn+0x468>)
 800e30a:	2201      	movs	r2, #1
 800e30c:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e30e:	ed97 2a00 	vldr	s4, [r7]
 800e312:	edd7 1a02 	vldr	s3, [r7, #8]
 800e316:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e408 <AdatiWayReturn+0x48c>
 800e31a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e408 <AdatiWayReturn+0x48c>
 800e31e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e3e8 <AdatiWayReturn+0x46c>
 800e322:	f7f5 fb25 	bl	8003970 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e326:	2003      	movs	r0, #3
 800e328:	f7f9 fb5e 	bl	80079e8 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e32c:	2003      	movs	r0, #3
 800e32e:	f7f9 fb33 	bl	8007998 <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e332:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e336:	f7f9 fe57 	bl	8007fe8 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e33a:	6978      	ldr	r0, [r7, #20]
 800e33c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e3ec <AdatiWayReturn+0x470>
 800e340:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e3f0 <AdatiWayReturn+0x474>
 800e344:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e408 <AdatiWayReturn+0x48c>
 800e348:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e408 <AdatiWayReturn+0x48c>
 800e34c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e3f4 <AdatiWayReturn+0x478>
 800e350:	f7f4 fe00 	bl	8002f54 <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e354:	2003      	movs	r0, #3
 800e356:	f7f9 fb47 	bl	80079e8 <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e35a:	2003      	movs	r0, #3
 800e35c:	f7f9 fb1c 	bl	8007998 <pl_L_DriveMotor_mode>
			no_safty = 0;
 800e360:	4b20      	ldr	r3, [pc, #128]	; (800e3e4 <AdatiWayReturn+0x468>)
 800e362:	2200      	movs	r2, #0
 800e364:	701a      	strb	r2, [r3, #0]
			wait_ms_NoReset(500);
 800e366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e36a:	f7f9 fe3d 	bl	8007fe8 <wait_ms_NoReset>
			clear_Ierror();
 800e36e:	f7f6 fa0d 	bl	800478c <clear_Ierror>
			maze_mode = 0;
 800e372:	4b21      	ldr	r3, [pc, #132]	; (800e3f8 <AdatiWayReturn+0x47c>)
 800e374:	2200      	movs	r2, #0
 800e376:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e378:	69bb      	ldr	r3, [r7, #24]
 800e37a:	3302      	adds	r3, #2
 800e37c:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e37e:	69bb      	ldr	r3, [r7, #24]
 800e380:	2b04      	cmp	r3, #4
 800e382:	dd02      	ble.n	800e38a <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	3b04      	subs	r3, #4
 800e388:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f300 816e 	bgt.w	800e66e <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e392:	69bb      	ldr	r3, [r7, #24]
 800e394:	3304      	adds	r3, #4
 800e396:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e398:	e169      	b.n	800e66e <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e39a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d102      	bne.n	800e3a8 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e3a2:	4b16      	ldr	r3, [pc, #88]	; (800e3fc <AdatiWayReturn+0x480>)
 800e3a4:	2200      	movs	r2, #0
 800e3a6:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e3a8:	4b14      	ldr	r3, [pc, #80]	; (800e3fc <AdatiWayReturn+0x480>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	f040 80f8 	bne.w	800e5a2 <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e3b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3b4:	2bff      	cmp	r3, #255	; 0xff
 800e3b6:	d12b      	bne.n	800e410 <AdatiWayReturn+0x494>
 800e3b8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3ba:	2bff      	cmp	r3, #255	; 0xff
 800e3bc:	d128      	bne.n	800e410 <AdatiWayReturn+0x494>
 800e3be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3c0:	2bff      	cmp	r3, #255	; 0xff
 800e3c2:	d125      	bne.n	800e410 <AdatiWayReturn+0x494>
 800e3c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3c6:	2bff      	cmp	r3, #255	; 0xff
 800e3c8:	d122      	bne.n	800e410 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e3ca:	4b0d      	ldr	r3, [pc, #52]	; (800e400 <AdatiWayReturn+0x484>)
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e3d0:	f7f9 fb3e 	bl	8007a50 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	f7f9 fad5 	bl	8007984 <pl_DriveMotor_standby>

				break;
 800e3da:	e14b      	b.n	800e674 <AdatiWayReturn+0x6f8>
 800e3dc:	20000470 	.word	0x20000470
 800e3e0:	42140000 	.word	0x42140000
 800e3e4:	20000806 	.word	0x20000806
 800e3e8:	43340000 	.word	0x43340000
 800e3ec:	447a0000 	.word	0x447a0000
 800e3f0:	c3160000 	.word	0xc3160000
 800e3f4:	c1f40000 	.word	0xc1f40000
 800e3f8:	20000834 	.word	0x20000834
 800e3fc:	20000838 	.word	0x20000838
 800e400:	20000807 	.word	0x20000807
 800e404:	42a40000 	.word	0x42a40000
 800e408:	00000000 	.word	0x00000000
 800e40c:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e410:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e412:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e414:	429a      	cmp	r2, r3
 800e416:	d81a      	bhi.n	800e44e <AdatiWayReturn+0x4d2>
 800e418:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e41a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d816      	bhi.n	800e44e <AdatiWayReturn+0x4d2>
 800e420:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e424:	429a      	cmp	r2, r3
 800e426:	d812      	bhi.n	800e44e <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e428:	2301      	movs	r3, #1
 800e42a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e42c:	2300      	movs	r3, #0
 800e42e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e430:	2300      	movs	r3, #0
 800e432:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e434:	6978      	ldr	r0, [r7, #20]
 800e436:	ed97 2a01 	vldr	s4, [r7, #4]
 800e43a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e43e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e442:	edd7 0a03 	vldr	s1, [r7, #12]
 800e446:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e404 <AdatiWayReturn+0x488>
 800e44a:	f7f4 fd83 	bl	8002f54 <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e44e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e450:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e452:	429a      	cmp	r2, r3
 800e454:	d219      	bcs.n	800e48a <AdatiWayReturn+0x50e>
 800e456:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e45a:	429a      	cmp	r2, r3
 800e45c:	d815      	bhi.n	800e48a <AdatiWayReturn+0x50e>
 800e45e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e462:	429a      	cmp	r2, r3
 800e464:	d811      	bhi.n	800e48a <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e466:	2300      	movs	r3, #0
 800e468:	9303      	str	r3, [sp, #12]
 800e46a:	2300      	movs	r3, #0
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	2300      	movs	r3, #0
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e47a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e47c:	ed97 0a03 	vldr	s0, [r7, #12]
 800e480:	f7fb fdd8 	bl	800a034 <slalomR>
				direction++;
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	3301      	adds	r3, #1
 800e488:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e48a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e48c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e48e:	429a      	cmp	r2, r3
 800e490:	d219      	bcs.n	800e4c6 <AdatiWayReturn+0x54a>
 800e492:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e494:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e496:	429a      	cmp	r2, r3
 800e498:	d215      	bcs.n	800e4c6 <AdatiWayReturn+0x54a>
 800e49a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e49c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d811      	bhi.n	800e4c6 <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	9303      	str	r3, [sp, #12]
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	9302      	str	r3, [sp, #8]
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	9301      	str	r3, [sp, #4]
 800e4ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4b8:	ed97 0a03 	vldr	s0, [r7, #12]
 800e4bc:	f7fb ff74 	bl	800a3a8 <slalomL>
				direction--;
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	3b01      	subs	r3, #1
 800e4c4:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e4c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4c8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	f080 80ac 	bcs.w	800e628 <AdatiWayReturn+0x6ac>
 800e4d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	f080 80a7 	bcs.w	800e628 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e4da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	f080 80a2 	bcs.w	800e628 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4f0:	6978      	ldr	r0, [r7, #20]
 800e4f2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4f6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4fa:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e408 <AdatiWayReturn+0x48c>
 800e4fe:	edd7 0a03 	vldr	s1, [r7, #12]
 800e502:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e40c <AdatiWayReturn+0x490>
 800e506:	f7f4 fd25 	bl	8002f54 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e50a:	2003      	movs	r0, #3
 800e50c:	f7f9 fa6c 	bl	80079e8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e510:	2003      	movs	r0, #3
 800e512:	f7f9 fa41 	bl	8007998 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e516:	2064      	movs	r0, #100	; 0x64
 800e518:	f7f9 fd66 	bl	8007fe8 <wait_ms_NoReset>
				no_safty = 1;
 800e51c:	4b89      	ldr	r3, [pc, #548]	; (800e744 <AdatiWayReturn+0x7c8>)
 800e51e:	2201      	movs	r2, #1
 800e520:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e522:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e526:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e52a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e52e:	4618      	mov	r0, r3
 800e530:	edd7 0a00 	vldr	s1, [r7]
 800e534:	ed97 0a02 	vldr	s0, [r7, #8]
 800e538:	f7fb fcb2 	bl	8009ea0 <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				no_safty = 0;
 800e53c:	4b81      	ldr	r3, [pc, #516]	; (800e744 <AdatiWayReturn+0x7c8>)
 800e53e:	2200      	movs	r2, #0
 800e540:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(100);
 800e542:	2064      	movs	r0, #100	; 0x64
 800e544:	f7f9 fd50 	bl	8007fe8 <wait_ms_NoReset>
				//clear_Ierror();
				mode.WallControlMode=0;
 800e548:	2300      	movs	r3, #0
 800e54a:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e54c:	6978      	ldr	r0, [r7, #20]
 800e54e:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 800e748 <AdatiWayReturn+0x7cc>
 800e552:	eddf 1a7e 	vldr	s3, [pc, #504]	; 800e74c <AdatiWayReturn+0x7d0>
 800e556:	ed9f 1a87 	vldr	s2, [pc, #540]	; 800e774 <AdatiWayReturn+0x7f8>
 800e55a:	eddf 0a86 	vldr	s1, [pc, #536]	; 800e774 <AdatiWayReturn+0x7f8>
 800e55e:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 800e750 <AdatiWayReturn+0x7d4>
 800e562:	f7f4 fcf7 	bl	8002f54 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e566:	2003      	movs	r0, #3
 800e568:	f7f9 fa3e 	bl	80079e8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e56c:	2003      	movs	r0, #3
 800e56e:	f7f9 fa13 	bl	8007998 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e572:	2064      	movs	r0, #100	; 0x64
 800e574:	f7f9 fd38 	bl	8007fe8 <wait_ms_NoReset>
				clear_Ierror();
 800e578:	f7f6 f908 	bl	800478c <clear_Ierror>
				mode.WallControlMode=1;
 800e57c:	2301      	movs	r3, #1
 800e57e:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e580:	6978      	ldr	r0, [r7, #20]
 800e582:	ed97 2a01 	vldr	s4, [r7, #4]
 800e586:	edd7 1a03 	vldr	s3, [r7, #12]
 800e58a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e58e:	eddf 0a79 	vldr	s1, [pc, #484]	; 800e774 <AdatiWayReturn+0x7f8>
 800e592:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e754 <AdatiWayReturn+0x7d8>
 800e596:	f7f4 fcdd 	bl	8002f54 <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	3302      	adds	r3, #2
 800e59e:	61bb      	str	r3, [r7, #24]
 800e5a0:	e042      	b.n	800e628 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e5ae:	6978      	ldr	r0, [r7, #20]
 800e5b0:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5b4:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5b8:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5bc:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5c0:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e778 <AdatiWayReturn+0x7fc>
 800e5c4:	f7f4 fcc6 	bl	8002f54 <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e5c8:	f107 0218 	add.w	r2, r7, #24
 800e5cc:	f107 011c 	add.w	r1, r7, #28
 800e5d0:	f107 0320 	add.w	r3, r7, #32
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f001 feb7 	bl	8010348 <compress_kitiku>
			mode.WallCutMode=0;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e5de:	2201      	movs	r2, #1
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	6978      	ldr	r0, [r7, #20]
 800e5e4:	ed9f 0a64 	vldr	s0, [pc, #400]	; 800e778 <AdatiWayReturn+0x7fc>
 800e5e8:	f7f5 f95e 	bl	80038a8 <End_straight>
			mode.WallControlMode=1;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e5f8:	4b57      	ldr	r3, [pc, #348]	; (800e758 <AdatiWayReturn+0x7dc>)
 800e5fa:	681a      	ldr	r2, [r3, #0]
 800e5fc:	4613      	mov	r3, r2
 800e5fe:	005b      	lsls	r3, r3, #1
 800e600:	4413      	add	r3, r2
 800e602:	011a      	lsls	r2, r3, #4
 800e604:	1ad3      	subs	r3, r2, r3
 800e606:	ee07 3a90 	vmov	s15, r3
 800e60a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e60e:	6978      	ldr	r0, [r7, #20]
 800e610:	ed97 2a01 	vldr	s4, [r7, #4]
 800e614:	eddf 1a51 	vldr	s3, [pc, #324]	; 800e75c <AdatiWayReturn+0x7e0>
 800e618:	ed97 1a03 	vldr	s2, [r7, #12]
 800e61c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e620:	eeb0 0a67 	vmov.f32	s0, s15
 800e624:	f7f4 fc96 	bl	8002f54 <straight_table2>

		}

		if (direction >= 5) {
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	2b04      	cmp	r3, #4
 800e62c:	dd02      	ble.n	800e634 <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	3b04      	subs	r3, #4
 800e632:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e634:	69bb      	ldr	r3, [r7, #24]
 800e636:	2b00      	cmp	r3, #0
 800e638:	dc02      	bgt.n	800e640 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	3304      	adds	r3, #4
 800e63e:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e640:	4b47      	ldr	r3, [pc, #284]	; (800e760 <AdatiWayReturn+0x7e4>)
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	2b01      	cmp	r3, #1
 800e646:	d014      	beq.n	800e672 <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e648:	4b46      	ldr	r3, [pc, #280]	; (800e764 <AdatiWayReturn+0x7e8>)
 800e64a:	edd3 7a00 	vldr	s15, [r3]
 800e64e:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e768 <AdatiWayReturn+0x7ec>
 800e652:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e65a:	dd05      	ble.n	800e668 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e65c:	f7f9 f9f8 	bl	8007a50 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e660:	2000      	movs	r0, #0
 800e662:	f7f9 f98f 	bl	8007984 <pl_DriveMotor_standby>
						break;
 800e666:	e005      	b.n	800e674 <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e668:	e4ec      	b.n	800e044 <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e66a:	bf00      	nop
 800e66c:	e002      	b.n	800e674 <AdatiWayReturn+0x6f8>
			break;
 800e66e:	bf00      	nop
 800e670:	e000      	b.n	800e674 <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e672:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e674:	4b3a      	ldr	r3, [pc, #232]	; (800e760 <AdatiWayReturn+0x7e4>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <AdatiWayReturn+0x704>
	record_in();
 800e67c:	f7f8 fe90 	bl	80073a0 <record_in>
	}
	clear_Ierror();
 800e680:	f7f6 f884 	bl	800478c <clear_Ierror>
	reset_gyro();
 800e684:	f7f3 f814 	bl	80016b0 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e688:	4b38      	ldr	r3, [pc, #224]	; (800e76c <AdatiWayReturn+0x7f0>)
 800e68a:	2201      	movs	r2, #1
 800e68c:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e68e:	6978      	ldr	r0, [r7, #20]
 800e690:	ed97 2a01 	vldr	s4, [r7, #4]
 800e694:	edd7 1a03 	vldr	s3, [r7, #12]
 800e698:	ed97 1a03 	vldr	s2, [r7, #12]
 800e69c:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e774 <AdatiWayReturn+0x7f8>
 800e6a0:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e754 <AdatiWayReturn+0x7d8>
 800e6a4:	f7f4 fc56 	bl	8002f54 <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e6a8:	69ba      	ldr	r2, [r7, #24]
 800e6aa:	f107 011c 	add.w	r1, r7, #28
 800e6ae:	f107 0320 	add.w	r3, r7, #32
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7ff fc2e 	bl	800df14 <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e6b8:	4b2d      	ldr	r3, [pc, #180]	; (800e770 <AdatiWayReturn+0x7f4>)
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	2b95      	cmp	r3, #149	; 0x95
 800e6be:	bfcc      	ite	gt
 800e6c0:	2301      	movgt	r3, #1
 800e6c2:	2300      	movle	r3, #0
 800e6c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e6c8:	4b29      	ldr	r3, [pc, #164]	; (800e770 <AdatiWayReturn+0x7f4>)
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	bfcc      	ite	gt
 800e6d4:	2301      	movgt	r3, #1
 800e6d6:	2300      	movle	r3, #0
 800e6d8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e6dc:	4b24      	ldr	r3, [pc, #144]	; (800e770 <AdatiWayReturn+0x7f4>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	bfcc      	ite	gt
 800e6e8:	2301      	movgt	r3, #1
 800e6ea:	2300      	movle	r3, #0
 800e6ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e6fc:	6978      	ldr	r0, [r7, #20]
 800e6fe:	ed97 2a01 	vldr	s4, [r7, #4]
 800e702:	edd7 1a03 	vldr	s3, [r7, #12]
 800e706:	ed97 1a03 	vldr	s2, [r7, #12]
 800e70a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e70e:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e712:	f7f4 fc1f 	bl	8002f54 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e716:	6a38      	ldr	r0, [r7, #32]
 800e718:	69f9      	ldr	r1, [r7, #28]
 800e71a:	69ba      	ldr	r2, [r7, #24]
 800e71c:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e720:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e724:	9301      	str	r3, [sp, #4]
 800e726:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	4623      	mov	r3, r4
 800e72e:	f001 ffed 	bl	801070c <update_wall>
		if(Dijkstra_mode==1){
 800e732:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e736:	2b01      	cmp	r3, #1
 800e738:	d120      	bne.n	800e77c <AdatiWayReturn+0x800>
			route_Dijkstra();
 800e73a:	f004 fbb7 	bl	8012eac <route_Dijkstra>
			create_StepCountMap_unknown();
 800e73e:	f005 f88b 	bl	8013858 <create_StepCountMap_unknown>
 800e742:	e01d      	b.n	800e780 <AdatiWayReturn+0x804>
 800e744:	20000806 	.word	0x20000806
 800e748:	447a0000 	.word	0x447a0000
 800e74c:	c3160000 	.word	0xc3160000
 800e750:	c1a40000 	.word	0xc1a40000
 800e754:	42830000 	.word	0x42830000
 800e758:	2000082c 	.word	0x2000082c
 800e75c:	44610000 	.word	0x44610000
 800e760:	20000807 	.word	0x20000807
 800e764:	2000072c 	.word	0x2000072c
 800e768:	43700000 	.word	0x43700000
 800e76c:	20000834 	.word	0x20000834
 800e770:	20000470 	.word	0x20000470
 800e774:	00000000 	.word	0x00000000
 800e778:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e77c:	f005 fbf0 	bl	8013f60 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e780:	6a3b      	ldr	r3, [r7, #32]
 800e782:	69fa      	ldr	r2, [r7, #28]
 800e784:	69b9      	ldr	r1, [r7, #24]
 800e786:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e78a:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e78e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e792:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e796:	9102      	str	r1, [sp, #8]
 800e798:	9201      	str	r2, [sp, #4]
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	4633      	mov	r3, r6
 800e79e:	462a      	mov	r2, r5
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	f002 fd2d 	bl	8011200 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e7a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <AdatiWayReturn+0x836>
 800e7ae:	23ff      	movs	r3, #255	; 0xff
 800e7b0:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e7b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <AdatiWayReturn+0x842>
 800e7ba:	23ff      	movs	r3, #255	; 0xff
 800e7bc:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e7be:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d001      	beq.n	800e7ca <AdatiWayReturn+0x84e>
 800e7c6:	23ff      	movs	r3, #255	; 0xff
 800e7c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e7ca:	6a38      	ldr	r0, [r7, #32]
 800e7cc:	69fc      	ldr	r4, [r7, #28]
 800e7ce:	69bd      	ldr	r5, [r7, #24]
 800e7d0:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e7d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7d6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7d8:	9102      	str	r1, [sp, #8]
 800e7da:	9201      	str	r2, [sp, #4]
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	4633      	mov	r3, r6
 800e7e0:	462a      	mov	r2, r5
 800e7e2:	4621      	mov	r1, r4
 800e7e4:	f001 fd3e 	bl	8010264 <decision_kitiku>
		mode.WallCutMode=1;
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e7ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e7f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7f4:	4619      	mov	r1, r3
 800e7f6:	6978      	ldr	r0, [r7, #20]
 800e7f8:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e7fc:	f7f5 f854 	bl	80038a8 <End_straight>


			if(x == 0 && y == 0) {
 800e800:	6a3b      	ldr	r3, [r7, #32]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d165      	bne.n	800e8d2 <AdatiWayReturn+0x956>
 800e806:	69fb      	ldr	r3, [r7, #28]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d162      	bne.n	800e8d2 <AdatiWayReturn+0x956>

				mode.WallControlMode=0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e810:	2300      	movs	r3, #0
 800e812:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e814:	2300      	movs	r3, #0
 800e816:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e818:	6978      	ldr	r0, [r7, #20]
 800e81a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e81e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e822:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e774 <AdatiWayReturn+0x7f8>
 800e826:	edd7 0a03 	vldr	s1, [r7, #12]
 800e82a:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e778 <AdatiWayReturn+0x7fc>
 800e82e:	f7f4 fb91 	bl	8002f54 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e832:	2003      	movs	r0, #3
 800e834:	f7f9 f8d8 	bl	80079e8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e838:	2003      	movs	r0, #3
 800e83a:	f7f9 f8ad 	bl	8007998 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e83e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e842:	f7f9 fbd1 	bl	8007fe8 <wait_ms_NoReset>
				no_safty = 1;
 800e846:	4bb1      	ldr	r3, [pc, #708]	; (800eb0c <AdatiWayReturn+0xb90>)
 800e848:	2201      	movs	r2, #1
 800e84a:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e84c:	ed97 2a00 	vldr	s4, [r7]
 800e850:	edd7 1a02 	vldr	s3, [r7, #8]
 800e854:	ed9f 1aae 	vldr	s2, [pc, #696]	; 800eb10 <AdatiWayReturn+0xb94>
 800e858:	eddf 0aad 	vldr	s1, [pc, #692]	; 800eb10 <AdatiWayReturn+0xb94>
 800e85c:	ed9f 0aad 	vldr	s0, [pc, #692]	; 800eb14 <AdatiWayReturn+0xb98>
 800e860:	f7f5 f886 	bl	8003970 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e864:	2003      	movs	r0, #3
 800e866:	f7f9 f8bf 	bl	80079e8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e86a:	2003      	movs	r0, #3
 800e86c:	f7f9 f894 	bl	8007998 <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e870:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e874:	f7f9 fbb8 	bl	8007fe8 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e878:	6978      	ldr	r0, [r7, #20]
 800e87a:	ed9f 2aa7 	vldr	s4, [pc, #668]	; 800eb18 <AdatiWayReturn+0xb9c>
 800e87e:	eddf 1aa7 	vldr	s3, [pc, #668]	; 800eb1c <AdatiWayReturn+0xba0>
 800e882:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800eb10 <AdatiWayReturn+0xb94>
 800e886:	eddf 0aa2 	vldr	s1, [pc, #648]	; 800eb10 <AdatiWayReturn+0xb94>
 800e88a:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e88e:	f7f4 fb61 	bl	8002f54 <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e892:	2003      	movs	r0, #3
 800e894:	f7f9 f8a8 	bl	80079e8 <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e898:	2003      	movs	r0, #3
 800e89a:	f7f9 f87d 	bl	8007998 <pl_L_DriveMotor_mode>
				no_safty = 0;
 800e89e:	4b9b      	ldr	r3, [pc, #620]	; (800eb0c <AdatiWayReturn+0xb90>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	701a      	strb	r2, [r3, #0]
				wait_ms_NoReset(500);
 800e8a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e8a8:	f7f9 fb9e 	bl	8007fe8 <wait_ms_NoReset>
				clear_Ierror();
 800e8ac:	f7f5 ff6e 	bl	800478c <clear_Ierror>

				direction = direction + 2;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	3302      	adds	r3, #2
 800e8b4:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	2b04      	cmp	r3, #4
 800e8ba:	dd02      	ble.n	800e8c2 <AdatiWayReturn+0x946>
					direction = direction-4;
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	3b04      	subs	r3, #4
 800e8c0:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e8c2:	69bb      	ldr	r3, [r7, #24]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	f300 81a8 	bgt.w	800ec1a <AdatiWayReturn+0xc9e>
					direction = direction+4;
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	3304      	adds	r3, #4
 800e8ce:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e8d0:	e1a3      	b.n	800ec1a <AdatiWayReturn+0xc9e>
			}

			if(know_mode==0){
 800e8d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d102      	bne.n	800e8e0 <AdatiWayReturn+0x964>
				kitikukan = 0;
 800e8da:	4b91      	ldr	r3, [pc, #580]	; (800eb20 <AdatiWayReturn+0xba4>)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	601a      	str	r2, [r3, #0]
			}
			if (kitikukan == OFF) {
 800e8e0:	4b8f      	ldr	r3, [pc, #572]	; (800eb20 <AdatiWayReturn+0xba4>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f040 8144 	bne.w	800eb72 <AdatiWayReturn+0xbf6>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e8ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8ec:	2bff      	cmp	r3, #255	; 0xff
 800e8ee:	d10c      	bne.n	800e90a <AdatiWayReturn+0x98e>
 800e8f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8f2:	2bff      	cmp	r3, #255	; 0xff
 800e8f4:	d109      	bne.n	800e90a <AdatiWayReturn+0x98e>
 800e8f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e8f8:	2bff      	cmp	r3, #255	; 0xff
 800e8fa:	d106      	bne.n	800e90a <AdatiWayReturn+0x98e>
 800e8fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e8fe:	2bff      	cmp	r3, #255	; 0xff
 800e900:	d103      	bne.n	800e90a <AdatiWayReturn+0x98e>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800e902:	4b88      	ldr	r3, [pc, #544]	; (800eb24 <AdatiWayReturn+0xba8>)
 800e904:	2201      	movs	r2, #1
 800e906:	701a      	strb	r2, [r3, #0]
					break;
 800e908:	e18a      	b.n	800ec20 <AdatiWayReturn+0xca4>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800e90a:	6a3b      	ldr	r3, [r7, #32]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	db08      	blt.n	800e922 <AdatiWayReturn+0x9a6>
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	2b00      	cmp	r3, #0
 800e914:	db05      	blt.n	800e922 <AdatiWayReturn+0x9a6>
 800e916:	6a3b      	ldr	r3, [r7, #32]
 800e918:	2b0f      	cmp	r3, #15
 800e91a:	dc02      	bgt.n	800e922 <AdatiWayReturn+0x9a6>
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	2b0f      	cmp	r3, #15
 800e920:	dd03      	ble.n	800e92a <AdatiWayReturn+0x9ae>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800e922:	4b80      	ldr	r3, [pc, #512]	; (800eb24 <AdatiWayReturn+0xba8>)
 800e924:	2201      	movs	r2, #1
 800e926:	701a      	strb	r2, [r3, #0]
									break;
 800e928:	e17a      	b.n	800ec20 <AdatiWayReturn+0xca4>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e92a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e92c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e92e:	429a      	cmp	r2, r3
 800e930:	d81a      	bhi.n	800e968 <AdatiWayReturn+0x9ec>
 800e932:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e934:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e936:	429a      	cmp	r2, r3
 800e938:	d816      	bhi.n	800e968 <AdatiWayReturn+0x9ec>
 800e93a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e93c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e93e:	429a      	cmp	r2, r3
 800e940:	d812      	bhi.n	800e968 <AdatiWayReturn+0x9ec>
					// 直進
					mode.WallControlMode=1;
 800e942:	2301      	movs	r3, #1
 800e944:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800e946:	2300      	movs	r3, #0
 800e948:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e94e:	6978      	ldr	r0, [r7, #20]
 800e950:	ed97 2a01 	vldr	s4, [r7, #4]
 800e954:	edd7 1a03 	vldr	s3, [r7, #12]
 800e958:	ed97 1a03 	vldr	s2, [r7, #12]
 800e95c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e960:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800eb28 <AdatiWayReturn+0xbac>
 800e964:	f7f4 faf6 	bl	8002f54 <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e968:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e96a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d22c      	bcs.n	800e9ca <AdatiWayReturn+0xa4e>
 800e970:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e974:	429a      	cmp	r2, r3
 800e976:	d828      	bhi.n	800e9ca <AdatiWayReturn+0xa4e>
 800e978:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e97a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d824      	bhi.n	800e9ca <AdatiWayReturn+0xa4e>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e980:	6a3b      	ldr	r3, [r7, #32]
 800e982:	2b0a      	cmp	r3, #10
 800e984:	d002      	beq.n	800e98c <AdatiWayReturn+0xa10>
 800e986:	6a3b      	ldr	r3, [r7, #32]
 800e988:	2b0b      	cmp	r3, #11
 800e98a:	d109      	bne.n	800e9a0 <AdatiWayReturn+0xa24>
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	2b0b      	cmp	r3, #11
 800e990:	d002      	beq.n	800e998 <AdatiWayReturn+0xa1c>
 800e992:	69fb      	ldr	r3, [r7, #28]
 800e994:	2b0c      	cmp	r3, #12
 800e996:	d103      	bne.n	800e9a0 <AdatiWayReturn+0xa24>
						noGoalPillarMode=1;
 800e998:	4b64      	ldr	r3, [pc, #400]	; (800eb2c <AdatiWayReturn+0xbb0>)
 800e99a:	2201      	movs	r2, #1
 800e99c:	701a      	strb	r2, [r3, #0]
 800e99e:	e002      	b.n	800e9a6 <AdatiWayReturn+0xa2a>
					}else{
						noGoalPillarMode=0;
 800e9a0:	4b62      	ldr	r3, [pc, #392]	; (800eb2c <AdatiWayReturn+0xbb0>)
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e9a6:	4b62      	ldr	r3, [pc, #392]	; (800eb30 <AdatiWayReturn+0xbb4>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	9203      	str	r2, [sp, #12]
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	9202      	str	r2, [sp, #8]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	9201      	str	r2, [sp, #4]
 800e9b4:	699a      	ldr	r2, [r3, #24]
 800e9b6:	9200      	str	r2, [sp, #0]
 800e9b8:	3308      	adds	r3, #8
 800e9ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9bc:	ed97 0a03 	vldr	s0, [r7, #12]
 800e9c0:	f7fb fb38 	bl	800a034 <slalomR>
					direction++;
 800e9c4:	69bb      	ldr	r3, [r7, #24]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e9ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d22c      	bcs.n	800ea2c <AdatiWayReturn+0xab0>
 800e9d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d228      	bcs.n	800ea2c <AdatiWayReturn+0xab0>
 800e9da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	d824      	bhi.n	800ea2c <AdatiWayReturn+0xab0>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e9e2:	6a3b      	ldr	r3, [r7, #32]
 800e9e4:	2b0a      	cmp	r3, #10
 800e9e6:	d002      	beq.n	800e9ee <AdatiWayReturn+0xa72>
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	2b0b      	cmp	r3, #11
 800e9ec:	d109      	bne.n	800ea02 <AdatiWayReturn+0xa86>
 800e9ee:	69fb      	ldr	r3, [r7, #28]
 800e9f0:	2b0b      	cmp	r3, #11
 800e9f2:	d002      	beq.n	800e9fa <AdatiWayReturn+0xa7e>
 800e9f4:	69fb      	ldr	r3, [r7, #28]
 800e9f6:	2b0c      	cmp	r3, #12
 800e9f8:	d103      	bne.n	800ea02 <AdatiWayReturn+0xa86>
						noGoalPillarMode=1;
 800e9fa:	4b4c      	ldr	r3, [pc, #304]	; (800eb2c <AdatiWayReturn+0xbb0>)
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	701a      	strb	r2, [r3, #0]
 800ea00:	e002      	b.n	800ea08 <AdatiWayReturn+0xa8c>
					}else{
						noGoalPillarMode=0;
 800ea02:	4b4a      	ldr	r3, [pc, #296]	; (800eb2c <AdatiWayReturn+0xbb0>)
 800ea04:	2200      	movs	r2, #0
 800ea06:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ea08:	4b49      	ldr	r3, [pc, #292]	; (800eb30 <AdatiWayReturn+0xbb4>)
 800ea0a:	2200      	movs	r2, #0
 800ea0c:	9203      	str	r2, [sp, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	9202      	str	r2, [sp, #8]
 800ea12:	2200      	movs	r2, #0
 800ea14:	9201      	str	r2, [sp, #4]
 800ea16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea18:	9200      	str	r2, [sp, #0]
 800ea1a:	331c      	adds	r3, #28
 800ea1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ea1e:	ed97 0a03 	vldr	s0, [r7, #12]
 800ea22:	f7fb fcc1 	bl	800a3a8 <slalomL>
					direction--;
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	3b01      	subs	r3, #1
 800ea2a:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ea2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea30:	429a      	cmp	r2, r3
 800ea32:	f080 80e1 	bcs.w	800ebf8 <AdatiWayReturn+0xc7c>
 800ea36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	f080 80dc 	bcs.w	800ebf8 <AdatiWayReturn+0xc7c>
						&& back_count < left_count){
 800ea40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea44:	429a      	cmp	r2, r3
 800ea46:	f080 80d7 	bcs.w	800ebf8 <AdatiWayReturn+0xc7c>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ea4e:	2300      	movs	r3, #0
 800ea50:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ea52:	2300      	movs	r3, #0
 800ea54:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea56:	6978      	ldr	r0, [r7, #20]
 800ea58:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea5c:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea60:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 800eb10 <AdatiWayReturn+0xb94>
 800ea64:	edd7 0a03 	vldr	s1, [r7, #12]
 800ea68:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800eb44 <AdatiWayReturn+0xbc8>
 800ea6c:	f7f4 fa72 	bl	8002f54 <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea70:	2003      	movs	r0, #3
 800ea72:	f7f8 ffb9 	bl	80079e8 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea76:	2003      	movs	r0, #3
 800ea78:	f7f8 ff8e 	bl	8007998 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ea7c:	2064      	movs	r0, #100	; 0x64
 800ea7e:	f7f9 fab3 	bl	8007fe8 <wait_ms_NoReset>
					no_safty = 1;
 800ea82:	4b22      	ldr	r3, [pc, #136]	; (800eb0c <AdatiWayReturn+0xb90>)
 800ea84:	2201      	movs	r2, #1
 800ea86:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ea88:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ea8c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ea90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea94:	4618      	mov	r0, r3
 800ea96:	edd7 0a00 	vldr	s1, [r7]
 800ea9a:	ed97 0a02 	vldr	s0, [r7, #8]
 800ea9e:	f7fb f9ff 	bl	8009ea0 <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					no_safty = 0;
 800eaa2:	4b1a      	ldr	r3, [pc, #104]	; (800eb0c <AdatiWayReturn+0xb90>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
					wait_ms_NoReset(100);
 800eaa8:	2064      	movs	r0, #100	; 0x64
 800eaaa:	f7f9 fa9d 	bl	8007fe8 <wait_ms_NoReset>
					//clear_Ierror();
					mode.WallControlMode=0;
 800eaae:	2300      	movs	r3, #0
 800eab0:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800eab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d046      	beq.n	800eb48 <AdatiWayReturn+0xbcc>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800eaba:	6978      	ldr	r0, [r7, #20]
 800eabc:	ed9f 2a16 	vldr	s4, [pc, #88]	; 800eb18 <AdatiWayReturn+0xb9c>
 800eac0:	eddf 1a16 	vldr	s3, [pc, #88]	; 800eb1c <AdatiWayReturn+0xba0>
 800eac4:	ed9f 1a12 	vldr	s2, [pc, #72]	; 800eb10 <AdatiWayReturn+0xb94>
 800eac8:	eddf 0a11 	vldr	s1, [pc, #68]	; 800eb10 <AdatiWayReturn+0xb94>
 800eacc:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800eb34 <AdatiWayReturn+0xbb8>
 800ead0:	f7f4 fa40 	bl	8002f54 <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ead4:	2003      	movs	r0, #3
 800ead6:	f7f8 ff87 	bl	80079e8 <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eada:	2003      	movs	r0, #3
 800eadc:	f7f8 ff5c 	bl	8007998 <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800eae0:	2064      	movs	r0, #100	; 0x64
 800eae2:	f7f9 fa81 	bl	8007fe8 <wait_ms_NoReset>

					clear_Ierror();
 800eae6:	f7f5 fe51 	bl	800478c <clear_Ierror>
					mode.WallControlMode=1;
 800eaea:	2301      	movs	r3, #1
 800eaec:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eaee:	6978      	ldr	r0, [r7, #20]
 800eaf0:	ed97 2a01 	vldr	s4, [r7, #4]
 800eaf4:	edd7 1a03 	vldr	s3, [r7, #12]
 800eaf8:	ed97 1a03 	vldr	s2, [r7, #12]
 800eafc:	eddf 0a04 	vldr	s1, [pc, #16]	; 800eb10 <AdatiWayReturn+0xb94>
 800eb00:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800eb38 <AdatiWayReturn+0xbbc>
 800eb04:	f7f4 fa26 	bl	8002f54 <straight_table2>
 800eb08:	e02f      	b.n	800eb6a <AdatiWayReturn+0xbee>
 800eb0a:	bf00      	nop
 800eb0c:	20000806 	.word	0x20000806
 800eb10:	00000000 	.word	0x00000000
 800eb14:	43340000 	.word	0x43340000
 800eb18:	447a0000 	.word	0x447a0000
 800eb1c:	c3160000 	.word	0xc3160000
 800eb20:	20000838 	.word	0x20000838
 800eb24:	20000807 	.word	0x20000807
 800eb28:	42a40000 	.word	0x42a40000
 800eb2c:	20000529 	.word	0x20000529
 800eb30:	2000db2c 	.word	0x2000db2c
 800eb34:	c1a40000 	.word	0xc1a40000
 800eb38:	42830000 	.word	0x42830000
 800eb3c:	00000000 	.word	0x00000000
 800eb40:	42b40000 	.word	0x42b40000
 800eb44:	42140000 	.word	0x42140000
					}else{
						clear_Ierror();
 800eb48:	f7f5 fe20 	bl	800478c <clear_Ierror>
						mode.WallControlMode=1;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	753b      	strb	r3, [r7, #20]
						straight_table2(90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb50:	6978      	ldr	r0, [r7, #20]
 800eb52:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb56:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb5a:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb5e:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800eb3c <AdatiWayReturn+0xbc0>
 800eb62:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800eb40 <AdatiWayReturn+0xbc4>
 800eb66:	f7f4 f9f5 	bl	8002f54 <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800eb6a:	69bb      	ldr	r3, [r7, #24]
 800eb6c:	3302      	adds	r3, #2
 800eb6e:	61bb      	str	r3, [r7, #24]
 800eb70:	e042      	b.n	800ebf8 <AdatiWayReturn+0xc7c>

				}

			} else {
				mode.WallControlMode=1;
 800eb72:	2301      	movs	r3, #1
 800eb74:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800eb76:	2301      	movs	r3, #1
 800eb78:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb7e:	6978      	ldr	r0, [r7, #20]
 800eb80:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb84:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb88:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb8c:	edd7 0a03 	vldr	s1, [r7, #12]
 800eb90:	ed1f 0a14 	vldr	s0, [pc, #-80]	; 800eb44 <AdatiWayReturn+0xbc8>
 800eb94:	f7f4 f9de 	bl	8002f54 <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800eb98:	f107 0218 	add.w	r2, r7, #24
 800eb9c:	f107 011c 	add.w	r1, r7, #28
 800eba0:	f107 0320 	add.w	r3, r7, #32
 800eba4:	4618      	mov	r0, r3
 800eba6:	f001 fbcf 	bl	8010348 <compress_kitiku>
				mode.WallCutMode=0;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ebae:	2201      	movs	r2, #1
 800ebb0:	2101      	movs	r1, #1
 800ebb2:	6978      	ldr	r0, [r7, #20]
 800ebb4:	ed1f 0a1d 	vldr	s0, [pc, #-116]	; 800eb44 <AdatiWayReturn+0xbc8>
 800ebb8:	f7f4 fe76 	bl	80038a8 <End_straight>
				mode.WallControlMode=1;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ebc8:	4b27      	ldr	r3, [pc, #156]	; (800ec68 <AdatiWayReturn+0xcec>)
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	4613      	mov	r3, r2
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	4413      	add	r3, r2
 800ebd2:	011a      	lsls	r2, r3, #4
 800ebd4:	1ad3      	subs	r3, r2, r3
 800ebd6:	ee07 3a90 	vmov	s15, r3
 800ebda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebde:	6978      	ldr	r0, [r7, #20]
 800ebe0:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebe4:	eddf 1a21 	vldr	s3, [pc, #132]	; 800ec6c <AdatiWayReturn+0xcf0>
 800ebe8:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebec:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebf0:	eeb0 0a67 	vmov.f32	s0, s15
 800ebf4:	f7f4 f9ae 	bl	8002f54 <straight_table2>

			}

			if (direction >= 5) {
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	2b04      	cmp	r3, #4
 800ebfc:	dd02      	ble.n	800ec04 <AdatiWayReturn+0xc88>
				direction = direction-4;
 800ebfe:	69bb      	ldr	r3, [r7, #24]
 800ec00:	3b04      	subs	r3, #4
 800ec02:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	dc02      	bgt.n	800ec10 <AdatiWayReturn+0xc94>
				direction = direction+4;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	3304      	adds	r3, #4
 800ec0e:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ec10:	4b17      	ldr	r3, [pc, #92]	; (800ec70 <AdatiWayReturn+0xcf4>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d002      	beq.n	800ec1e <AdatiWayReturn+0xca2>
		update_coordinate(&x,&y,direction);
 800ec18:	e546      	b.n	800e6a8 <AdatiWayReturn+0x72c>
				break;
 800ec1a:	bf00      	nop
 800ec1c:	e000      	b.n	800ec20 <AdatiWayReturn+0xca4>
			if(error_mode==1){break;}
 800ec1e:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800ec20:	2000      	movs	r0, #0
 800ec22:	f7f8 feaf 	bl	8007984 <pl_DriveMotor_standby>
	maze_mode = 0;
 800ec26:	4b13      	ldr	r3, [pc, #76]	; (800ec74 <AdatiWayReturn+0xcf8>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800ec2c:	2064      	movs	r0, #100	; 0x64
 800ec2e:	f008 fe19 	bl	8017864 <HAL_Delay>
	maze_display();
 800ec32:	f005 fb81 	bl	8014338 <maze_display>
	create_StepCountMap_queue();
 800ec36:	f004 ffdb 	bl	8013bf0 <create_StepCountMap_queue>
	if(walk_count[0] == 255){
 800ec3a:	4b0f      	ldr	r3, [pc, #60]	; (800ec78 <AdatiWayReturn+0xcfc>)
 800ec3c:	881b      	ldrh	r3, [r3, #0]
 800ec3e:	2bff      	cmp	r3, #255	; 0xff
 800ec40:	d102      	bne.n	800ec48 <AdatiWayReturn+0xccc>
		error_mode = 1;
 800ec42:	4b0b      	ldr	r3, [pc, #44]	; (800ec70 <AdatiWayReturn+0xcf4>)
 800ec44:	2201      	movs	r2, #1
 800ec46:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800ec48:	4b09      	ldr	r3, [pc, #36]	; (800ec70 <AdatiWayReturn+0xcf4>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <AdatiWayReturn+0xcda>
		record_in();
 800ec50:	f7f8 fba6 	bl	80073a0 <record_in>
	} else {
		record_out();
	}

}
 800ec54:	e001      	b.n	800ec5a <AdatiWayReturn+0xcde>
		record_out();
 800ec56:	f7f8 fc5f 	bl	8007518 <record_out>
}
 800ec5a:	bf00      	nop
 800ec5c:	3734      	adds	r7, #52	; 0x34
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec64:	b004      	add	sp, #16
 800ec66:	4770      	bx	lr
 800ec68:	2000082c 	.word	0x2000082c
 800ec6c:	447a0000 	.word	0x447a0000
 800ec70:	20000807 	.word	0x20000807
 800ec74:	20000834 	.word	0x20000834
 800ec78:	20000d2c 	.word	0x20000d2c

0800ec7c <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ec7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec7e:	b08b      	sub	sp, #44	; 0x2c
 800ec80:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800ec82:	2300      	movs	r3, #0
 800ec84:	607b      	str	r3, [r7, #4]
	int y = 0;
 800ec86:	2300      	movs	r3, #0
 800ec88:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ec8e:	4b8b      	ldr	r3, [pc, #556]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ec94:	f002 fbdc 	bl	8011450 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ec98:	f005 fc6c 	bl	8014574 <maze_display_Dijkstra>
	pass[0] = 1;
 800ec9c:	4b88      	ldr	r3, [pc, #544]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ec9e:	2201      	movs	r2, #1
 800eca0:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800eca2:	4639      	mov	r1, r7
 800eca4:	1d3b      	adds	r3, r7, #4
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7ff f933 	bl	800df14 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2b0a      	cmp	r3, #10
 800ecb2:	d002      	beq.n	800ecba <pass_maker_Dijkstra+0x3e>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b0b      	cmp	r3, #11
 800ecb8:	d13a      	bne.n	800ed30 <pass_maker_Dijkstra+0xb4>
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	2b0b      	cmp	r3, #11
 800ecbe:	d002      	beq.n	800ecc6 <pass_maker_Dijkstra+0x4a>
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	2b0c      	cmp	r3, #12
 800ecc4:	d134      	bne.n	800ed30 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ecc6:	4b7d      	ldr	r3, [pc, #500]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ecc8:	781b      	ldrb	r3, [r3, #0]
 800ecca:	461a      	mov	r2, r3
 800eccc:	4b7c      	ldr	r3, [pc, #496]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ecce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	da05      	bge.n	800ece2 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ecd6:	4b79      	ldr	r3, [pc, #484]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	3301      	adds	r3, #1
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	4b77      	ldr	r3, [pc, #476]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ece0:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ece2:	4b76      	ldr	r3, [pc, #472]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	461a      	mov	r2, r3
 800ece8:	4b75      	ldr	r3, [pc, #468]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ecea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecee:	4a73      	ldr	r2, [pc, #460]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ecf0:	7812      	ldrb	r2, [r2, #0]
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	3301      	adds	r3, #1
 800ecf6:	4a72      	ldr	r2, [pc, #456]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ecf8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	3302      	adds	r3, #2
 800ed00:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	2b05      	cmp	r3, #5
 800ed06:	d101      	bne.n	800ed0c <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ed08:	2301      	movs	r3, #1
 800ed0a:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	2b06      	cmp	r3, #6
 800ed10:	d101      	bne.n	800ed16 <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ed12:	2302      	movs	r3, #2
 800ed14:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d101      	bne.n	800ed20 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800ed1c:	2304      	movs	r3, #4
 800ed1e:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed26:	f040 80c2 	bne.w	800eeae <pass_maker_Dijkstra+0x232>
						direction = 3;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	617b      	str	r3, [r7, #20]
					}
					break;
 800ed2e:	e0be      	b.n	800eeae <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	f107 020b 	add.w	r2, r7, #11
 800ed38:	f107 0309 	add.w	r3, r7, #9
 800ed3c:	9301      	str	r3, [sp, #4]
 800ed3e:	f107 030a 	add.w	r3, r7, #10
 800ed42:	9300      	str	r3, [sp, #0]
 800ed44:	4613      	mov	r3, r2
 800ed46:	697a      	ldr	r2, [r7, #20]
 800ed48:	f001 ff66 	bl	8010c18 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	683a      	ldr	r2, [r7, #0]
 800ed50:	f107 060c 	add.w	r6, r7, #12
 800ed54:	f107 050e 	add.w	r5, r7, #14
 800ed58:	f107 0410 	add.w	r4, r7, #16
 800ed5c:	f107 0012 	add.w	r0, r7, #18
 800ed60:	6979      	ldr	r1, [r7, #20]
 800ed62:	9102      	str	r1, [sp, #8]
 800ed64:	9201      	str	r2, [sp, #4]
 800ed66:	9300      	str	r3, [sp, #0]
 800ed68:	4633      	mov	r3, r6
 800ed6a:	462a      	mov	r2, r5
 800ed6c:	4621      	mov	r1, r4
 800ed6e:	f002 fad5 	bl	801131c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed72:	7afb      	ldrb	r3, [r7, #11]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <pass_maker_Dijkstra+0x102>
 800ed78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed7c:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed7e:	7abb      	ldrb	r3, [r7, #10]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d002      	beq.n	800ed8a <pass_maker_Dijkstra+0x10e>
 800ed84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed88:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800ed8a:	7a7b      	ldrb	r3, [r7, #9]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <pass_maker_Dijkstra+0x11a>
 800ed90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ed94:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800ed96:	8a7b      	ldrh	r3, [r7, #18]
 800ed98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d10e      	bne.n	800edbe <pass_maker_Dijkstra+0x142>
 800eda0:	8a3b      	ldrh	r3, [r7, #16]
 800eda2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d109      	bne.n	800edbe <pass_maker_Dijkstra+0x142>
 800edaa:	89bb      	ldrh	r3, [r7, #12]
 800edac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d104      	bne.n	800edbe <pass_maker_Dijkstra+0x142>
 800edb4:	89fb      	ldrh	r3, [r7, #14]
 800edb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edba:	4293      	cmp	r3, r2
 800edbc:	d079      	beq.n	800eeb2 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800edbe:	8a7a      	ldrh	r2, [r7, #18]
 800edc0:	8a3b      	ldrh	r3, [r7, #16]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	d822      	bhi.n	800ee0c <pass_maker_Dijkstra+0x190>
 800edc6:	8a7a      	ldrh	r2, [r7, #18]
 800edc8:	89bb      	ldrh	r3, [r7, #12]
 800edca:	429a      	cmp	r2, r3
 800edcc:	d81e      	bhi.n	800ee0c <pass_maker_Dijkstra+0x190>
 800edce:	8a7a      	ldrh	r2, [r7, #18]
 800edd0:	89fb      	ldrh	r3, [r7, #14]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d81a      	bhi.n	800ee0c <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800edd6:	4b39      	ldr	r3, [pc, #228]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800edd8:	781b      	ldrb	r3, [r3, #0]
 800edda:	461a      	mov	r2, r3
 800eddc:	4b38      	ldr	r3, [pc, #224]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800edde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	da05      	bge.n	800edf2 <pass_maker_Dijkstra+0x176>
 800ede6:	4b35      	ldr	r3, [pc, #212]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	3301      	adds	r3, #1
 800edec:	b2da      	uxtb	r2, r3
 800edee:	4b33      	ldr	r3, [pc, #204]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800edf0:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800edf2:	4b32      	ldr	r3, [pc, #200]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	461a      	mov	r2, r3
 800edf8:	4b31      	ldr	r3, [pc, #196]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800edfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edfe:	4a2f      	ldr	r2, [pc, #188]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee00:	7812      	ldrb	r2, [r2, #0]
 800ee02:	4611      	mov	r1, r2
 800ee04:	3302      	adds	r3, #2
 800ee06:	4a2e      	ldr	r2, [pc, #184]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ee08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ee0c:	8a3a      	ldrh	r2, [r7, #16]
 800ee0e:	8a7b      	ldrh	r3, [r7, #18]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d218      	bcs.n	800ee46 <pass_maker_Dijkstra+0x1ca>
 800ee14:	8a3a      	ldrh	r2, [r7, #16]
 800ee16:	89bb      	ldrh	r3, [r7, #12]
 800ee18:	429a      	cmp	r2, r3
 800ee1a:	d814      	bhi.n	800ee46 <pass_maker_Dijkstra+0x1ca>
 800ee1c:	8a3a      	ldrh	r2, [r7, #16]
 800ee1e:	89fb      	ldrh	r3, [r7, #14]
 800ee20:	429a      	cmp	r2, r3
 800ee22:	d810      	bhi.n	800ee46 <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800ee24:	4b25      	ldr	r3, [pc, #148]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee26:	781b      	ldrb	r3, [r3, #0]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	b2da      	uxtb	r2, r3
 800ee2c:	4b23      	ldr	r3, [pc, #140]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee2e:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800ee30:	4b22      	ldr	r3, [pc, #136]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	4619      	mov	r1, r3
 800ee36:	4b22      	ldr	r3, [pc, #136]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ee38:	f06f 0201 	mvn.w	r2, #1
 800ee3c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	3301      	adds	r3, #1
 800ee44:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ee46:	89ba      	ldrh	r2, [r7, #12]
 800ee48:	8a7b      	ldrh	r3, [r7, #18]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d218      	bcs.n	800ee80 <pass_maker_Dijkstra+0x204>
 800ee4e:	89ba      	ldrh	r2, [r7, #12]
 800ee50:	8a3b      	ldrh	r3, [r7, #16]
 800ee52:	429a      	cmp	r2, r3
 800ee54:	d214      	bcs.n	800ee80 <pass_maker_Dijkstra+0x204>
 800ee56:	89ba      	ldrh	r2, [r7, #12]
 800ee58:	89fb      	ldrh	r3, [r7, #14]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d810      	bhi.n	800ee80 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800ee5e:	4b17      	ldr	r3, [pc, #92]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	3301      	adds	r3, #1
 800ee64:	b2da      	uxtb	r2, r3
 800ee66:	4b15      	ldr	r3, [pc, #84]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee68:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800ee6a:	4b14      	ldr	r3, [pc, #80]	; (800eebc <pass_maker_Dijkstra+0x240>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	4b13      	ldr	r3, [pc, #76]	; (800eec0 <pass_maker_Dijkstra+0x244>)
 800ee72:	f06f 0202 	mvn.w	r2, #2
 800ee76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800ee80:	697b      	ldr	r3, [r7, #20]
 800ee82:	2b05      	cmp	r3, #5
 800ee84:	d101      	bne.n	800ee8a <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800ee86:	2301      	movs	r3, #1
 800ee88:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800ee8a:	697b      	ldr	r3, [r7, #20]
 800ee8c:	2b06      	cmp	r3, #6
 800ee8e:	d101      	bne.n	800ee94 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800ee90:	2302      	movs	r3, #2
 800ee92:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d101      	bne.n	800ee9e <pass_maker_Dijkstra+0x222>
			direction = 4;
 800ee9a:	2304      	movs	r3, #4
 800ee9c:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea4:	f47f aefd 	bne.w	800eca2 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800eea8:	2303      	movs	r3, #3
 800eeaa:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800eeac:	e6f9      	b.n	800eca2 <pass_maker_Dijkstra+0x26>
					break;
 800eeae:	bf00      	nop
 800eeb0:	e000      	b.n	800eeb4 <pass_maker_Dijkstra+0x238>
			break;
 800eeb2:	bf00      	nop
		}

	}
}
 800eeb4:	bf00      	nop
 800eeb6:	371c      	adds	r7, #28
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eebc:	20000828 	.word	0x20000828
 800eec0:	2000083c 	.word	0x2000083c
 800eec4:	00000000 	.word	0x00000000

0800eec8 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800eec8:	b5b0      	push	{r4, r5, r7, lr}
 800eeca:	b0e0      	sub	sp, #384	; 0x180
 800eecc:	af50      	add	r7, sp, #320	; 0x140
 800eece:	ed87 0a05 	vstr	s0, [r7, #20]
 800eed2:	edc7 0a04 	vstr	s1, [r7, #16]
 800eed6:	60f8      	str	r0, [r7, #12]
 800eed8:	4608      	mov	r0, r1
 800eeda:	4611      	mov	r1, r2
 800eedc:	461a      	mov	r2, r3
 800eede:	ed87 1a01 	vstr	s2, [r7, #4]
 800eee2:	4603      	mov	r3, r0
 800eee4:	72fb      	strb	r3, [r7, #11]
 800eee6:	460b      	mov	r3, r1
 800eee8:	72bb      	strb	r3, [r7, #10]
 800eeea:	4613      	mov	r3, r2
 800eeec:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800eeee:	f06f 0301 	mvn.w	r3, #1
 800eef2:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800eef4:	2301      	movs	r3, #1
 800eef6:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800eef8:	2300      	movs	r3, #0
 800eefa:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800eefc:	2300      	movs	r3, #0
 800eefe:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800ef04:	2300      	movs	r3, #0
 800ef06:	633b      	str	r3, [r7, #48]	; 0x30
 800ef08:	e007      	b.n	800ef1a <run_shortest+0x52>
 800ef0a:	4a07      	ldr	r2, [pc, #28]	; (800ef28 <run_shortest+0x60>)
 800ef0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef0e:	2100      	movs	r1, #0
 800ef10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ef14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef16:	3301      	adds	r3, #1
 800ef18:	633b      	str	r3, [r7, #48]	; 0x30
 800ef1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef1c:	2bfe      	cmp	r3, #254	; 0xfe
 800ef1e:	ddf4      	ble.n	800ef0a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800ef20:	2300      	movs	r3, #0
 800ef22:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ef24:	e077      	b.n	800f016 <run_shortest+0x14e>
 800ef26:	bf00      	nop
 800ef28:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800ef2c:	4aa9      	ldr	r2, [pc, #676]	; (800f1d4 <run_shortest+0x30c>)
 800ef2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef30:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800ef34:	4aa8      	ldr	r2, [pc, #672]	; (800f1d8 <run_shortest+0x310>)
 800ef36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800ef3c:	4aa5      	ldr	r2, [pc, #660]	; (800f1d4 <run_shortest+0x30c>)
 800ef3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef40:	330c      	adds	r3, #12
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	4413      	add	r3, r2
 800ef46:	88d9      	ldrh	r1, [r3, #6]
 800ef48:	4aa3      	ldr	r2, [pc, #652]	; (800f1d8 <run_shortest+0x310>)
 800ef4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef4c:	330c      	adds	r3, #12
 800ef4e:	005b      	lsls	r3, r3, #1
 800ef50:	4413      	add	r3, r2
 800ef52:	460a      	mov	r2, r1
 800ef54:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800ef56:	4a9f      	ldr	r2, [pc, #636]	; (800f1d4 <run_shortest+0x30c>)
 800ef58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef5a:	331c      	adds	r3, #28
 800ef5c:	005b      	lsls	r3, r3, #1
 800ef5e:	4413      	add	r3, r2
 800ef60:	8899      	ldrh	r1, [r3, #4]
 800ef62:	4a9d      	ldr	r2, [pc, #628]	; (800f1d8 <run_shortest+0x310>)
 800ef64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef66:	331c      	adds	r3, #28
 800ef68:	005b      	lsls	r3, r3, #1
 800ef6a:	4413      	add	r3, r2
 800ef6c:	460a      	mov	r2, r1
 800ef6e:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800ef70:	4a98      	ldr	r2, [pc, #608]	; (800f1d4 <run_shortest+0x30c>)
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	332c      	adds	r3, #44	; 0x2c
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	8859      	ldrh	r1, [r3, #2]
 800ef7c:	4a96      	ldr	r2, [pc, #600]	; (800f1d8 <run_shortest+0x310>)
 800ef7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef80:	332c      	adds	r3, #44	; 0x2c
 800ef82:	005b      	lsls	r3, r3, #1
 800ef84:	4413      	add	r3, r2
 800ef86:	460a      	mov	r2, r1
 800ef88:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800ef8a:	4a92      	ldr	r2, [pc, #584]	; (800f1d4 <run_shortest+0x30c>)
 800ef8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef8e:	331c      	adds	r3, #28
 800ef90:	005b      	lsls	r3, r3, #1
 800ef92:	4413      	add	r3, r2
 800ef94:	889b      	ldrh	r3, [r3, #4]
 800ef96:	43db      	mvns	r3, r3
 800ef98:	b299      	uxth	r1, r3
 800ef9a:	4a8e      	ldr	r2, [pc, #568]	; (800f1d4 <run_shortest+0x30c>)
 800ef9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9e:	331c      	adds	r3, #28
 800efa0:	005b      	lsls	r3, r3, #1
 800efa2:	4413      	add	r3, r2
 800efa4:	460a      	mov	r2, r1
 800efa6:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800efa8:	4a8a      	ldr	r2, [pc, #552]	; (800f1d4 <run_shortest+0x30c>)
 800efaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efac:	332c      	adds	r3, #44	; 0x2c
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	4413      	add	r3, r2
 800efb2:	885b      	ldrh	r3, [r3, #2]
 800efb4:	43db      	mvns	r3, r3
 800efb6:	b299      	uxth	r1, r3
 800efb8:	4a86      	ldr	r2, [pc, #536]	; (800f1d4 <run_shortest+0x30c>)
 800efba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efbc:	332c      	adds	r3, #44	; 0x2c
 800efbe:	005b      	lsls	r3, r3, #1
 800efc0:	4413      	add	r3, r2
 800efc2:	460a      	mov	r2, r1
 800efc4:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800efc6:	4a83      	ldr	r2, [pc, #524]	; (800f1d4 <run_shortest+0x30c>)
 800efc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800efce:	4981      	ldr	r1, [pc, #516]	; (800f1d4 <run_shortest+0x30c>)
 800efd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd2:	331c      	adds	r3, #28
 800efd4:	005b      	lsls	r3, r3, #1
 800efd6:	440b      	add	r3, r1
 800efd8:	889b      	ldrh	r3, [r3, #4]
 800efda:	4313      	orrs	r3, r2
 800efdc:	b299      	uxth	r1, r3
 800efde:	4a7d      	ldr	r2, [pc, #500]	; (800f1d4 <run_shortest+0x30c>)
 800efe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800efe6:	4a7b      	ldr	r2, [pc, #492]	; (800f1d4 <run_shortest+0x30c>)
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	330c      	adds	r3, #12
 800efec:	005b      	lsls	r3, r3, #1
 800efee:	4413      	add	r3, r2
 800eff0:	88da      	ldrh	r2, [r3, #6]
 800eff2:	4978      	ldr	r1, [pc, #480]	; (800f1d4 <run_shortest+0x30c>)
 800eff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eff6:	332c      	adds	r3, #44	; 0x2c
 800eff8:	005b      	lsls	r3, r3, #1
 800effa:	440b      	add	r3, r1
 800effc:	885b      	ldrh	r3, [r3, #2]
 800effe:	4313      	orrs	r3, r2
 800f000:	b299      	uxth	r1, r3
 800f002:	4a74      	ldr	r2, [pc, #464]	; (800f1d4 <run_shortest+0x30c>)
 800f004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f006:	330c      	adds	r3, #12
 800f008:	005b      	lsls	r3, r3, #1
 800f00a:	4413      	add	r3, r2
 800f00c:	460a      	mov	r2, r1
 800f00e:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f012:	3301      	adds	r3, #1
 800f014:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f018:	2b0e      	cmp	r3, #14
 800f01a:	dd87      	ble.n	800ef2c <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f01c:	f7ff fe2e 	bl	800ec7c <pass_maker_Dijkstra>

	pass_count = 1;
 800f020:	4b6e      	ldr	r3, [pc, #440]	; (800f1dc <run_shortest+0x314>)
 800f022:	2201      	movs	r2, #1
 800f024:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f026:	7afb      	ldrb	r3, [r7, #11]
 800f028:	2b01      	cmp	r3, #1
 800f02a:	f040 84b5 	bne.w	800f998 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f02e:	4b6b      	ldr	r3, [pc, #428]	; (800f1dc <run_shortest+0x314>)
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	461a      	mov	r2, r3
 800f034:	4b6a      	ldr	r3, [pc, #424]	; (800f1e0 <run_shortest+0x318>)
 800f036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f000 813a 	beq.w	800f2b4 <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f040:	4b66      	ldr	r3, [pc, #408]	; (800f1dc <run_shortest+0x314>)
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	461a      	mov	r2, r3
 800f046:	4b66      	ldr	r3, [pc, #408]	; (800f1e0 <run_shortest+0x318>)
 800f048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f04c:	f113 0f02 	cmn.w	r3, #2
 800f050:	d131      	bne.n	800f0b6 <run_shortest+0x1ee>
 800f052:	4b62      	ldr	r3, [pc, #392]	; (800f1dc <run_shortest+0x314>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	3b01      	subs	r3, #1
 800f058:	4a61      	ldr	r2, [pc, #388]	; (800f1e0 <run_shortest+0x318>)
 800f05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	dd29      	ble.n	800f0b6 <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f062:	4b5e      	ldr	r3, [pc, #376]	; (800f1dc <run_shortest+0x314>)
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	3301      	adds	r3, #1
 800f068:	4a5d      	ldr	r2, [pc, #372]	; (800f1e0 <run_shortest+0x318>)
 800f06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	dd21      	ble.n	800f0b6 <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f072:	4b5a      	ldr	r3, [pc, #360]	; (800f1dc <run_shortest+0x314>)
 800f074:	781b      	ldrb	r3, [r3, #0]
 800f076:	3b01      	subs	r3, #1
 800f078:	4a59      	ldr	r2, [pc, #356]	; (800f1e0 <run_shortest+0x318>)
 800f07a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f07e:	4b57      	ldr	r3, [pc, #348]	; (800f1dc <run_shortest+0x314>)
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	3b01      	subs	r3, #1
 800f084:	3a01      	subs	r2, #1
 800f086:	4956      	ldr	r1, [pc, #344]	; (800f1e0 <run_shortest+0x318>)
 800f088:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f08c:	4b53      	ldr	r3, [pc, #332]	; (800f1dc <run_shortest+0x314>)
 800f08e:	781b      	ldrb	r3, [r3, #0]
 800f090:	3301      	adds	r3, #1
 800f092:	4a53      	ldr	r2, [pc, #332]	; (800f1e0 <run_shortest+0x318>)
 800f094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f098:	4b50      	ldr	r3, [pc, #320]	; (800f1dc <run_shortest+0x314>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	3301      	adds	r3, #1
 800f09e:	3a01      	subs	r2, #1
 800f0a0:	494f      	ldr	r1, [pc, #316]	; (800f1e0 <run_shortest+0x318>)
 800f0a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f0a6:	4b4d      	ldr	r3, [pc, #308]	; (800f1dc <run_shortest+0x314>)
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	4b4c      	ldr	r3, [pc, #304]	; (800f1e0 <run_shortest+0x318>)
 800f0ae:	f06f 0203 	mvn.w	r2, #3
 800f0b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f0b6:	4b49      	ldr	r3, [pc, #292]	; (800f1dc <run_shortest+0x314>)
 800f0b8:	781b      	ldrb	r3, [r3, #0]
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	4b48      	ldr	r3, [pc, #288]	; (800f1e0 <run_shortest+0x318>)
 800f0be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0c2:	f113 0f03 	cmn.w	r3, #3
 800f0c6:	d131      	bne.n	800f12c <run_shortest+0x264>
 800f0c8:	4b44      	ldr	r3, [pc, #272]	; (800f1dc <run_shortest+0x314>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	3b01      	subs	r3, #1
 800f0ce:	4a44      	ldr	r2, [pc, #272]	; (800f1e0 <run_shortest+0x318>)
 800f0d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	dd29      	ble.n	800f12c <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f0d8:	4b40      	ldr	r3, [pc, #256]	; (800f1dc <run_shortest+0x314>)
 800f0da:	781b      	ldrb	r3, [r3, #0]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	4a40      	ldr	r2, [pc, #256]	; (800f1e0 <run_shortest+0x318>)
 800f0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	dd21      	ble.n	800f12c <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f0e8:	4b3c      	ldr	r3, [pc, #240]	; (800f1dc <run_shortest+0x314>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	3b01      	subs	r3, #1
 800f0ee:	4a3c      	ldr	r2, [pc, #240]	; (800f1e0 <run_shortest+0x318>)
 800f0f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f0f4:	4b39      	ldr	r3, [pc, #228]	; (800f1dc <run_shortest+0x314>)
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	3b01      	subs	r3, #1
 800f0fa:	3a01      	subs	r2, #1
 800f0fc:	4938      	ldr	r1, [pc, #224]	; (800f1e0 <run_shortest+0x318>)
 800f0fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f102:	4b36      	ldr	r3, [pc, #216]	; (800f1dc <run_shortest+0x314>)
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	3301      	adds	r3, #1
 800f108:	4a35      	ldr	r2, [pc, #212]	; (800f1e0 <run_shortest+0x318>)
 800f10a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f10e:	4b33      	ldr	r3, [pc, #204]	; (800f1dc <run_shortest+0x314>)
 800f110:	781b      	ldrb	r3, [r3, #0]
 800f112:	3301      	adds	r3, #1
 800f114:	3a01      	subs	r2, #1
 800f116:	4932      	ldr	r1, [pc, #200]	; (800f1e0 <run_shortest+0x318>)
 800f118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f11c:	4b2f      	ldr	r3, [pc, #188]	; (800f1dc <run_shortest+0x314>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	4619      	mov	r1, r3
 800f122:	4b2f      	ldr	r3, [pc, #188]	; (800f1e0 <run_shortest+0x318>)
 800f124:	f06f 0204 	mvn.w	r2, #4
 800f128:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f12c:	4b2b      	ldr	r3, [pc, #172]	; (800f1dc <run_shortest+0x314>)
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	3b01      	subs	r3, #1
 800f132:	4a2b      	ldr	r2, [pc, #172]	; (800f1e0 <run_shortest+0x318>)
 800f134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	dd43      	ble.n	800f1c4 <run_shortest+0x2fc>
 800f13c:	4b27      	ldr	r3, [pc, #156]	; (800f1dc <run_shortest+0x314>)
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	461a      	mov	r2, r3
 800f142:	4b27      	ldr	r3, [pc, #156]	; (800f1e0 <run_shortest+0x318>)
 800f144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f148:	f113 0f02 	cmn.w	r3, #2
 800f14c:	d13a      	bne.n	800f1c4 <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f14e:	4b23      	ldr	r3, [pc, #140]	; (800f1dc <run_shortest+0x314>)
 800f150:	781b      	ldrb	r3, [r3, #0]
 800f152:	3301      	adds	r3, #1
 800f154:	4a22      	ldr	r2, [pc, #136]	; (800f1e0 <run_shortest+0x318>)
 800f156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f15a:	f113 0f02 	cmn.w	r3, #2
 800f15e:	d131      	bne.n	800f1c4 <run_shortest+0x2fc>
 800f160:	4b1e      	ldr	r3, [pc, #120]	; (800f1dc <run_shortest+0x314>)
 800f162:	781b      	ldrb	r3, [r3, #0]
 800f164:	3302      	adds	r3, #2
 800f166:	4a1e      	ldr	r2, [pc, #120]	; (800f1e0 <run_shortest+0x318>)
 800f168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	dd29      	ble.n	800f1c4 <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f170:	4b1a      	ldr	r3, [pc, #104]	; (800f1dc <run_shortest+0x314>)
 800f172:	781b      	ldrb	r3, [r3, #0]
 800f174:	3b01      	subs	r3, #1
 800f176:	4a1a      	ldr	r2, [pc, #104]	; (800f1e0 <run_shortest+0x318>)
 800f178:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f17c:	4b17      	ldr	r3, [pc, #92]	; (800f1dc <run_shortest+0x314>)
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	3b01      	subs	r3, #1
 800f182:	3a01      	subs	r2, #1
 800f184:	4916      	ldr	r1, [pc, #88]	; (800f1e0 <run_shortest+0x318>)
 800f186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f18a:	4b14      	ldr	r3, [pc, #80]	; (800f1dc <run_shortest+0x314>)
 800f18c:	781b      	ldrb	r3, [r3, #0]
 800f18e:	4619      	mov	r1, r3
 800f190:	4b13      	ldr	r3, [pc, #76]	; (800f1e0 <run_shortest+0x318>)
 800f192:	f06f 0205 	mvn.w	r2, #5
 800f196:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f19a:	4b10      	ldr	r3, [pc, #64]	; (800f1dc <run_shortest+0x314>)
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	4a0f      	ldr	r2, [pc, #60]	; (800f1e0 <run_shortest+0x318>)
 800f1a2:	f04f 31ff 	mov.w	r1, #4294967295
 800f1a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f1aa:	4b0c      	ldr	r3, [pc, #48]	; (800f1dc <run_shortest+0x314>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	3302      	adds	r3, #2
 800f1b0:	4a0b      	ldr	r2, [pc, #44]	; (800f1e0 <run_shortest+0x318>)
 800f1b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f1b6:	4b09      	ldr	r3, [pc, #36]	; (800f1dc <run_shortest+0x314>)
 800f1b8:	781b      	ldrb	r3, [r3, #0]
 800f1ba:	3302      	adds	r3, #2
 800f1bc:	3a01      	subs	r2, #1
 800f1be:	4908      	ldr	r1, [pc, #32]	; (800f1e0 <run_shortest+0x318>)
 800f1c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f1c4:	4b05      	ldr	r3, [pc, #20]	; (800f1dc <run_shortest+0x314>)
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	3b01      	subs	r3, #1
 800f1ca:	4a05      	ldr	r2, [pc, #20]	; (800f1e0 <run_shortest+0x318>)
 800f1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	e007      	b.n	800f1e4 <run_shortest+0x31c>
 800f1d4:	20000c3c 	.word	0x20000c3c
 800f1d8:	20000cb4 	.word	0x20000cb4
 800f1dc:	20000828 	.word	0x20000828
 800f1e0:	2000083c 	.word	0x2000083c
 800f1e4:	dd43      	ble.n	800f26e <run_shortest+0x3a6>
 800f1e6:	4b31      	ldr	r3, [pc, #196]	; (800f2ac <run_shortest+0x3e4>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	4b30      	ldr	r3, [pc, #192]	; (800f2b0 <run_shortest+0x3e8>)
 800f1ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f2:	f113 0f03 	cmn.w	r3, #3
 800f1f6:	d13a      	bne.n	800f26e <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f1f8:	4b2c      	ldr	r3, [pc, #176]	; (800f2ac <run_shortest+0x3e4>)
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	3301      	adds	r3, #1
 800f1fe:	4a2c      	ldr	r2, [pc, #176]	; (800f2b0 <run_shortest+0x3e8>)
 800f200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f204:	f113 0f03 	cmn.w	r3, #3
 800f208:	d131      	bne.n	800f26e <run_shortest+0x3a6>
 800f20a:	4b28      	ldr	r3, [pc, #160]	; (800f2ac <run_shortest+0x3e4>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	3302      	adds	r3, #2
 800f210:	4a27      	ldr	r2, [pc, #156]	; (800f2b0 <run_shortest+0x3e8>)
 800f212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f216:	2b00      	cmp	r3, #0
 800f218:	dd29      	ble.n	800f26e <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f21a:	4b24      	ldr	r3, [pc, #144]	; (800f2ac <run_shortest+0x3e4>)
 800f21c:	781b      	ldrb	r3, [r3, #0]
 800f21e:	3b01      	subs	r3, #1
 800f220:	4a23      	ldr	r2, [pc, #140]	; (800f2b0 <run_shortest+0x3e8>)
 800f222:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f226:	4b21      	ldr	r3, [pc, #132]	; (800f2ac <run_shortest+0x3e4>)
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	3b01      	subs	r3, #1
 800f22c:	3a01      	subs	r2, #1
 800f22e:	4920      	ldr	r1, [pc, #128]	; (800f2b0 <run_shortest+0x3e8>)
 800f230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f234:	4b1d      	ldr	r3, [pc, #116]	; (800f2ac <run_shortest+0x3e4>)
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	4619      	mov	r1, r3
 800f23a:	4b1d      	ldr	r3, [pc, #116]	; (800f2b0 <run_shortest+0x3e8>)
 800f23c:	f06f 0206 	mvn.w	r2, #6
 800f240:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f244:	4b19      	ldr	r3, [pc, #100]	; (800f2ac <run_shortest+0x3e4>)
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	3301      	adds	r3, #1
 800f24a:	4a19      	ldr	r2, [pc, #100]	; (800f2b0 <run_shortest+0x3e8>)
 800f24c:	f04f 31ff 	mov.w	r1, #4294967295
 800f250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f254:	4b15      	ldr	r3, [pc, #84]	; (800f2ac <run_shortest+0x3e4>)
 800f256:	781b      	ldrb	r3, [r3, #0]
 800f258:	3302      	adds	r3, #2
 800f25a:	4a15      	ldr	r2, [pc, #84]	; (800f2b0 <run_shortest+0x3e8>)
 800f25c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f260:	4b12      	ldr	r3, [pc, #72]	; (800f2ac <run_shortest+0x3e4>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	3302      	adds	r3, #2
 800f266:	3a01      	subs	r2, #1
 800f268:	4911      	ldr	r1, [pc, #68]	; (800f2b0 <run_shortest+0x3e8>)
 800f26a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f26e:	4b0f      	ldr	r3, [pc, #60]	; (800f2ac <run_shortest+0x3e4>)
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	4b0e      	ldr	r3, [pc, #56]	; (800f2b0 <run_shortest+0x3e8>)
 800f276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f27a:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f27e:	4b0b      	ldr	r3, [pc, #44]	; (800f2ac <run_shortest+0x3e4>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	3b01      	subs	r3, #1
 800f284:	4a0a      	ldr	r2, [pc, #40]	; (800f2b0 <run_shortest+0x3e8>)
 800f286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d107      	bne.n	800f29e <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f28e:	4b07      	ldr	r3, [pc, #28]	; (800f2ac <run_shortest+0x3e4>)
 800f290:	781b      	ldrb	r3, [r3, #0]
 800f292:	3b01      	subs	r3, #1
 800f294:	4a06      	ldr	r2, [pc, #24]	; (800f2b0 <run_shortest+0x3e8>)
 800f296:	f04f 31ff 	mov.w	r1, #4294967295
 800f29a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f29e:	4b03      	ldr	r3, [pc, #12]	; (800f2ac <run_shortest+0x3e4>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	b2da      	uxtb	r2, r3
 800f2a6:	4b01      	ldr	r3, [pc, #4]	; (800f2ac <run_shortest+0x3e4>)
 800f2a8:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f2aa:	e6c0      	b.n	800f02e <run_shortest+0x166>
 800f2ac:	20000828 	.word	0x20000828
 800f2b0:	2000083c 	.word	0x2000083c
			break;
 800f2b4:	bf00      	nop
	}

	pass_count = 1;
 800f2b6:	4b8c      	ldr	r3, [pc, #560]	; (800f4e8 <run_shortest+0x620>)
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f2bc:	7a7b      	ldrb	r3, [r7, #9]
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	f040 836a 	bne.w	800f998 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f2c4:	4b88      	ldr	r3, [pc, #544]	; (800f4e8 <run_shortest+0x620>)
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	4b88      	ldr	r3, [pc, #544]	; (800f4ec <run_shortest+0x624>)
 800f2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	f000 81f1 	beq.w	800f6b8 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f2d6:	4b84      	ldr	r3, [pc, #528]	; (800f4e8 <run_shortest+0x620>)
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	3b01      	subs	r3, #1
 800f2dc:	4a83      	ldr	r2, [pc, #524]	; (800f4ec <run_shortest+0x624>)
 800f2de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	f340 81dc 	ble.w	800f6a0 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f2e8:	4b7f      	ldr	r3, [pc, #508]	; (800f4e8 <run_shortest+0x620>)
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	461a      	mov	r2, r3
 800f2ee:	4b7f      	ldr	r3, [pc, #508]	; (800f4ec <run_shortest+0x624>)
 800f2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f4:	f113 0f02 	cmn.w	r3, #2
 800f2f8:	d009      	beq.n	800f30e <run_shortest+0x446>
 800f2fa:	4b7b      	ldr	r3, [pc, #492]	; (800f4e8 <run_shortest+0x620>)
 800f2fc:	781b      	ldrb	r3, [r3, #0]
 800f2fe:	461a      	mov	r2, r3
 800f300:	4b7a      	ldr	r3, [pc, #488]	; (800f4ec <run_shortest+0x624>)
 800f302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f306:	f113 0f03 	cmn.w	r3, #3
 800f30a:	f040 81c9 	bne.w	800f6a0 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f30e:	4b76      	ldr	r3, [pc, #472]	; (800f4e8 <run_shortest+0x620>)
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	461a      	mov	r2, r3
 800f314:	4b75      	ldr	r3, [pc, #468]	; (800f4ec <run_shortest+0x624>)
 800f316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f31a:	f113 0f02 	cmn.w	r3, #2
 800f31e:	d12d      	bne.n	800f37c <run_shortest+0x4b4>
 800f320:	4b71      	ldr	r3, [pc, #452]	; (800f4e8 <run_shortest+0x620>)
 800f322:	781b      	ldrb	r3, [r3, #0]
 800f324:	3301      	adds	r3, #1
 800f326:	4a71      	ldr	r2, [pc, #452]	; (800f4ec <run_shortest+0x624>)
 800f328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f32c:	f113 0f03 	cmn.w	r3, #3
 800f330:	d124      	bne.n	800f37c <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f332:	4b6d      	ldr	r3, [pc, #436]	; (800f4e8 <run_shortest+0x620>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	3b01      	subs	r3, #1
 800f338:	4a6c      	ldr	r2, [pc, #432]	; (800f4ec <run_shortest+0x624>)
 800f33a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f33e:	4b6a      	ldr	r3, [pc, #424]	; (800f4e8 <run_shortest+0x620>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	3b01      	subs	r3, #1
 800f344:	3a01      	subs	r2, #1
 800f346:	4969      	ldr	r1, [pc, #420]	; (800f4ec <run_shortest+0x624>)
 800f348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f34c:	4b66      	ldr	r3, [pc, #408]	; (800f4e8 <run_shortest+0x620>)
 800f34e:	781b      	ldrb	r3, [r3, #0]
 800f350:	3b01      	subs	r3, #1
 800f352:	4a66      	ldr	r2, [pc, #408]	; (800f4ec <run_shortest+0x624>)
 800f354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d107      	bne.n	800f36c <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f35c:	4b62      	ldr	r3, [pc, #392]	; (800f4e8 <run_shortest+0x620>)
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	3b01      	subs	r3, #1
 800f362:	4a62      	ldr	r2, [pc, #392]	; (800f4ec <run_shortest+0x624>)
 800f364:	f04f 31ff 	mov.w	r1, #4294967295
 800f368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f36c:	4b5e      	ldr	r3, [pc, #376]	; (800f4e8 <run_shortest+0x620>)
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	4619      	mov	r1, r3
 800f372:	4b5e      	ldr	r3, [pc, #376]	; (800f4ec <run_shortest+0x624>)
 800f374:	f06f 0207 	mvn.w	r2, #7
 800f378:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f37c:	4b5a      	ldr	r3, [pc, #360]	; (800f4e8 <run_shortest+0x620>)
 800f37e:	781b      	ldrb	r3, [r3, #0]
 800f380:	461a      	mov	r2, r3
 800f382:	4b5a      	ldr	r3, [pc, #360]	; (800f4ec <run_shortest+0x624>)
 800f384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f388:	f113 0f03 	cmn.w	r3, #3
 800f38c:	d12d      	bne.n	800f3ea <run_shortest+0x522>
 800f38e:	4b56      	ldr	r3, [pc, #344]	; (800f4e8 <run_shortest+0x620>)
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	3301      	adds	r3, #1
 800f394:	4a55      	ldr	r2, [pc, #340]	; (800f4ec <run_shortest+0x624>)
 800f396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f39a:	f113 0f02 	cmn.w	r3, #2
 800f39e:	d124      	bne.n	800f3ea <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3a0:	4b51      	ldr	r3, [pc, #324]	; (800f4e8 <run_shortest+0x620>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	4a51      	ldr	r2, [pc, #324]	; (800f4ec <run_shortest+0x624>)
 800f3a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3ac:	4b4e      	ldr	r3, [pc, #312]	; (800f4e8 <run_shortest+0x620>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	3a01      	subs	r2, #1
 800f3b4:	494d      	ldr	r1, [pc, #308]	; (800f4ec <run_shortest+0x624>)
 800f3b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f3ba:	4b4b      	ldr	r3, [pc, #300]	; (800f4e8 <run_shortest+0x620>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	3b01      	subs	r3, #1
 800f3c0:	4a4a      	ldr	r2, [pc, #296]	; (800f4ec <run_shortest+0x624>)
 800f3c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d107      	bne.n	800f3da <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f3ca:	4b47      	ldr	r3, [pc, #284]	; (800f4e8 <run_shortest+0x620>)
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	3b01      	subs	r3, #1
 800f3d0:	4a46      	ldr	r2, [pc, #280]	; (800f4ec <run_shortest+0x624>)
 800f3d2:	f04f 31ff 	mov.w	r1, #4294967295
 800f3d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f3da:	4b43      	ldr	r3, [pc, #268]	; (800f4e8 <run_shortest+0x620>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	4b42      	ldr	r3, [pc, #264]	; (800f4ec <run_shortest+0x624>)
 800f3e2:	f06f 0208 	mvn.w	r2, #8
 800f3e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f3ea:	4b3f      	ldr	r3, [pc, #252]	; (800f4e8 <run_shortest+0x620>)
 800f3ec:	781b      	ldrb	r3, [r3, #0]
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	4b3e      	ldr	r3, [pc, #248]	; (800f4ec <run_shortest+0x624>)
 800f3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3f6:	f113 0f02 	cmn.w	r3, #2
 800f3fa:	d135      	bne.n	800f468 <run_shortest+0x5a0>
 800f3fc:	4b3a      	ldr	r3, [pc, #232]	; (800f4e8 <run_shortest+0x620>)
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	3301      	adds	r3, #1
 800f402:	4a3a      	ldr	r2, [pc, #232]	; (800f4ec <run_shortest+0x624>)
 800f404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f408:	f113 0f02 	cmn.w	r3, #2
 800f40c:	d12c      	bne.n	800f468 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f40e:	4b36      	ldr	r3, [pc, #216]	; (800f4e8 <run_shortest+0x620>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	3b01      	subs	r3, #1
 800f414:	4a35      	ldr	r2, [pc, #212]	; (800f4ec <run_shortest+0x624>)
 800f416:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f41a:	4b33      	ldr	r3, [pc, #204]	; (800f4e8 <run_shortest+0x620>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	3b01      	subs	r3, #1
 800f420:	3a01      	subs	r2, #1
 800f422:	4932      	ldr	r1, [pc, #200]	; (800f4ec <run_shortest+0x624>)
 800f424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f428:	4b2f      	ldr	r3, [pc, #188]	; (800f4e8 <run_shortest+0x620>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	3b01      	subs	r3, #1
 800f42e:	4a2f      	ldr	r2, [pc, #188]	; (800f4ec <run_shortest+0x624>)
 800f430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d107      	bne.n	800f448 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f438:	4b2b      	ldr	r3, [pc, #172]	; (800f4e8 <run_shortest+0x620>)
 800f43a:	781b      	ldrb	r3, [r3, #0]
 800f43c:	3b01      	subs	r3, #1
 800f43e:	4a2b      	ldr	r2, [pc, #172]	; (800f4ec <run_shortest+0x624>)
 800f440:	f04f 31ff 	mov.w	r1, #4294967295
 800f444:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f448:	4b27      	ldr	r3, [pc, #156]	; (800f4e8 <run_shortest+0x620>)
 800f44a:	781b      	ldrb	r3, [r3, #0]
 800f44c:	4619      	mov	r1, r3
 800f44e:	4b27      	ldr	r3, [pc, #156]	; (800f4ec <run_shortest+0x624>)
 800f450:	f06f 0209 	mvn.w	r2, #9
 800f454:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f458:	4b23      	ldr	r3, [pc, #140]	; (800f4e8 <run_shortest+0x620>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	3301      	adds	r3, #1
 800f45e:	4a23      	ldr	r2, [pc, #140]	; (800f4ec <run_shortest+0x624>)
 800f460:	f04f 31ff 	mov.w	r1, #4294967295
 800f464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f468:	4b1f      	ldr	r3, [pc, #124]	; (800f4e8 <run_shortest+0x620>)
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
 800f46e:	4b1f      	ldr	r3, [pc, #124]	; (800f4ec <run_shortest+0x624>)
 800f470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f474:	f113 0f03 	cmn.w	r3, #3
 800f478:	d140      	bne.n	800f4fc <run_shortest+0x634>
 800f47a:	4b1b      	ldr	r3, [pc, #108]	; (800f4e8 <run_shortest+0x620>)
 800f47c:	781b      	ldrb	r3, [r3, #0]
 800f47e:	3301      	adds	r3, #1
 800f480:	4a1a      	ldr	r2, [pc, #104]	; (800f4ec <run_shortest+0x624>)
 800f482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f486:	f113 0f03 	cmn.w	r3, #3
 800f48a:	d137      	bne.n	800f4fc <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f48c:	4b16      	ldr	r3, [pc, #88]	; (800f4e8 <run_shortest+0x620>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	3b01      	subs	r3, #1
 800f492:	4a16      	ldr	r2, [pc, #88]	; (800f4ec <run_shortest+0x624>)
 800f494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f498:	4b13      	ldr	r3, [pc, #76]	; (800f4e8 <run_shortest+0x620>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	3b01      	subs	r3, #1
 800f49e:	3a01      	subs	r2, #1
 800f4a0:	4912      	ldr	r1, [pc, #72]	; (800f4ec <run_shortest+0x624>)
 800f4a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f4a6:	4b10      	ldr	r3, [pc, #64]	; (800f4e8 <run_shortest+0x620>)
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	4a0f      	ldr	r2, [pc, #60]	; (800f4ec <run_shortest+0x624>)
 800f4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d107      	bne.n	800f4c6 <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f4b6:	4b0c      	ldr	r3, [pc, #48]	; (800f4e8 <run_shortest+0x620>)
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	3b01      	subs	r3, #1
 800f4bc:	4a0b      	ldr	r2, [pc, #44]	; (800f4ec <run_shortest+0x624>)
 800f4be:	f04f 31ff 	mov.w	r1, #4294967295
 800f4c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f4c6:	4b08      	ldr	r3, [pc, #32]	; (800f4e8 <run_shortest+0x620>)
 800f4c8:	781b      	ldrb	r3, [r3, #0]
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4b07      	ldr	r3, [pc, #28]	; (800f4ec <run_shortest+0x624>)
 800f4ce:	f06f 020a 	mvn.w	r2, #10
 800f4d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f4d6:	4b04      	ldr	r3, [pc, #16]	; (800f4e8 <run_shortest+0x620>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	4a03      	ldr	r2, [pc, #12]	; (800f4ec <run_shortest+0x624>)
 800f4de:	f04f 31ff 	mov.w	r1, #4294967295
 800f4e2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f4e6:	e009      	b.n	800f4fc <run_shortest+0x634>
 800f4e8:	20000828 	.word	0x20000828
 800f4ec:	2000083c 	.word	0x2000083c
						pass_count++;
 800f4f0:	4b6f      	ldr	r3, [pc, #444]	; (800f6b0 <run_shortest+0x7e8>)
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	b2da      	uxtb	r2, r3
 800f4f8:	4b6d      	ldr	r3, [pc, #436]	; (800f6b0 <run_shortest+0x7e8>)
 800f4fa:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f4fc:	4b6c      	ldr	r3, [pc, #432]	; (800f6b0 <run_shortest+0x7e8>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	461a      	mov	r2, r3
 800f502:	4b6c      	ldr	r3, [pc, #432]	; (800f6b4 <run_shortest+0x7ec>)
 800f504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	dbf1      	blt.n	800f4f0 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f50c:	4b68      	ldr	r3, [pc, #416]	; (800f6b0 <run_shortest+0x7e8>)
 800f50e:	781b      	ldrb	r3, [r3, #0]
 800f510:	3b01      	subs	r3, #1
 800f512:	4a68      	ldr	r2, [pc, #416]	; (800f6b4 <run_shortest+0x7ec>)
 800f514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f518:	f113 0f02 	cmn.w	r3, #2
 800f51c:	d15b      	bne.n	800f5d6 <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f51e:	4b64      	ldr	r3, [pc, #400]	; (800f6b0 <run_shortest+0x7e8>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	3b02      	subs	r3, #2
 800f524:	4a63      	ldr	r2, [pc, #396]	; (800f6b4 <run_shortest+0x7ec>)
 800f526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f52a:	f113 0f02 	cmn.w	r3, #2
 800f52e:	d12d      	bne.n	800f58c <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f530:	4b5f      	ldr	r3, [pc, #380]	; (800f6b0 <run_shortest+0x7e8>)
 800f532:	781b      	ldrb	r3, [r3, #0]
 800f534:	461a      	mov	r2, r3
 800f536:	4b5f      	ldr	r3, [pc, #380]	; (800f6b4 <run_shortest+0x7ec>)
 800f538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f53c:	4a5c      	ldr	r2, [pc, #368]	; (800f6b0 <run_shortest+0x7e8>)
 800f53e:	7812      	ldrb	r2, [r2, #0]
 800f540:	4611      	mov	r1, r2
 800f542:	3b01      	subs	r3, #1
 800f544:	4a5b      	ldr	r2, [pc, #364]	; (800f6b4 <run_shortest+0x7ec>)
 800f546:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f54a:	4b59      	ldr	r3, [pc, #356]	; (800f6b0 <run_shortest+0x7e8>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	461a      	mov	r2, r3
 800f550:	4b58      	ldr	r3, [pc, #352]	; (800f6b4 <run_shortest+0x7ec>)
 800f552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f556:	2b00      	cmp	r3, #0
 800f558:	d107      	bne.n	800f56a <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f55a:	4b55      	ldr	r3, [pc, #340]	; (800f6b0 <run_shortest+0x7e8>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	4619      	mov	r1, r3
 800f560:	4b54      	ldr	r3, [pc, #336]	; (800f6b4 <run_shortest+0x7ec>)
 800f562:	f04f 32ff 	mov.w	r2, #4294967295
 800f566:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f56a:	4b51      	ldr	r3, [pc, #324]	; (800f6b0 <run_shortest+0x7e8>)
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	3b01      	subs	r3, #1
 800f570:	4a50      	ldr	r2, [pc, #320]	; (800f6b4 <run_shortest+0x7ec>)
 800f572:	f06f 010d 	mvn.w	r1, #13
 800f576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f57a:	4b4d      	ldr	r3, [pc, #308]	; (800f6b0 <run_shortest+0x7e8>)
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	3b02      	subs	r3, #2
 800f580:	4a4c      	ldr	r2, [pc, #304]	; (800f6b4 <run_shortest+0x7ec>)
 800f582:	f04f 31ff 	mov.w	r1, #4294967295
 800f586:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f58a:	e024      	b.n	800f5d6 <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f58c:	4b48      	ldr	r3, [pc, #288]	; (800f6b0 <run_shortest+0x7e8>)
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	461a      	mov	r2, r3
 800f592:	4b48      	ldr	r3, [pc, #288]	; (800f6b4 <run_shortest+0x7ec>)
 800f594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f598:	4a45      	ldr	r2, [pc, #276]	; (800f6b0 <run_shortest+0x7e8>)
 800f59a:	7812      	ldrb	r2, [r2, #0]
 800f59c:	4611      	mov	r1, r2
 800f59e:	3b01      	subs	r3, #1
 800f5a0:	4a44      	ldr	r2, [pc, #272]	; (800f6b4 <run_shortest+0x7ec>)
 800f5a2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f5a6:	4b42      	ldr	r3, [pc, #264]	; (800f6b0 <run_shortest+0x7e8>)
 800f5a8:	781b      	ldrb	r3, [r3, #0]
 800f5aa:	461a      	mov	r2, r3
 800f5ac:	4b41      	ldr	r3, [pc, #260]	; (800f6b4 <run_shortest+0x7ec>)
 800f5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d107      	bne.n	800f5c6 <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f5b6:	4b3e      	ldr	r3, [pc, #248]	; (800f6b0 <run_shortest+0x7e8>)
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	4b3d      	ldr	r3, [pc, #244]	; (800f6b4 <run_shortest+0x7ec>)
 800f5be:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f5c6:	4b3a      	ldr	r3, [pc, #232]	; (800f6b0 <run_shortest+0x7e8>)
 800f5c8:	781b      	ldrb	r3, [r3, #0]
 800f5ca:	3b01      	subs	r3, #1
 800f5cc:	4a39      	ldr	r2, [pc, #228]	; (800f6b4 <run_shortest+0x7ec>)
 800f5ce:	f06f 010b 	mvn.w	r1, #11
 800f5d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f5d6:	4b36      	ldr	r3, [pc, #216]	; (800f6b0 <run_shortest+0x7e8>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	3b01      	subs	r3, #1
 800f5dc:	4a35      	ldr	r2, [pc, #212]	; (800f6b4 <run_shortest+0x7ec>)
 800f5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5e2:	f113 0f03 	cmn.w	r3, #3
 800f5e6:	d15b      	bne.n	800f6a0 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f5e8:	4b31      	ldr	r3, [pc, #196]	; (800f6b0 <run_shortest+0x7e8>)
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	3b02      	subs	r3, #2
 800f5ee:	4a31      	ldr	r2, [pc, #196]	; (800f6b4 <run_shortest+0x7ec>)
 800f5f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f4:	f113 0f03 	cmn.w	r3, #3
 800f5f8:	d12d      	bne.n	800f656 <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f5fa:	4b2d      	ldr	r3, [pc, #180]	; (800f6b0 <run_shortest+0x7e8>)
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	461a      	mov	r2, r3
 800f600:	4b2c      	ldr	r3, [pc, #176]	; (800f6b4 <run_shortest+0x7ec>)
 800f602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f606:	4a2a      	ldr	r2, [pc, #168]	; (800f6b0 <run_shortest+0x7e8>)
 800f608:	7812      	ldrb	r2, [r2, #0]
 800f60a:	4611      	mov	r1, r2
 800f60c:	3b01      	subs	r3, #1
 800f60e:	4a29      	ldr	r2, [pc, #164]	; (800f6b4 <run_shortest+0x7ec>)
 800f610:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f614:	4b26      	ldr	r3, [pc, #152]	; (800f6b0 <run_shortest+0x7e8>)
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	461a      	mov	r2, r3
 800f61a:	4b26      	ldr	r3, [pc, #152]	; (800f6b4 <run_shortest+0x7ec>)
 800f61c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f620:	2b00      	cmp	r3, #0
 800f622:	d107      	bne.n	800f634 <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f624:	4b22      	ldr	r3, [pc, #136]	; (800f6b0 <run_shortest+0x7e8>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	4619      	mov	r1, r3
 800f62a:	4b22      	ldr	r3, [pc, #136]	; (800f6b4 <run_shortest+0x7ec>)
 800f62c:	f04f 32ff 	mov.w	r2, #4294967295
 800f630:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f634:	4b1e      	ldr	r3, [pc, #120]	; (800f6b0 <run_shortest+0x7e8>)
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	3b01      	subs	r3, #1
 800f63a:	4a1e      	ldr	r2, [pc, #120]	; (800f6b4 <run_shortest+0x7ec>)
 800f63c:	f06f 010e 	mvn.w	r1, #14
 800f640:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f644:	4b1a      	ldr	r3, [pc, #104]	; (800f6b0 <run_shortest+0x7e8>)
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	3b02      	subs	r3, #2
 800f64a:	4a1a      	ldr	r2, [pc, #104]	; (800f6b4 <run_shortest+0x7ec>)
 800f64c:	f04f 31ff 	mov.w	r1, #4294967295
 800f650:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f654:	e024      	b.n	800f6a0 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f656:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <run_shortest+0x7e8>)
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	461a      	mov	r2, r3
 800f65c:	4b15      	ldr	r3, [pc, #84]	; (800f6b4 <run_shortest+0x7ec>)
 800f65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f662:	4a13      	ldr	r2, [pc, #76]	; (800f6b0 <run_shortest+0x7e8>)
 800f664:	7812      	ldrb	r2, [r2, #0]
 800f666:	4611      	mov	r1, r2
 800f668:	3b01      	subs	r3, #1
 800f66a:	4a12      	ldr	r2, [pc, #72]	; (800f6b4 <run_shortest+0x7ec>)
 800f66c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f670:	4b0f      	ldr	r3, [pc, #60]	; (800f6b0 <run_shortest+0x7e8>)
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	461a      	mov	r2, r3
 800f676:	4b0f      	ldr	r3, [pc, #60]	; (800f6b4 <run_shortest+0x7ec>)
 800f678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d107      	bne.n	800f690 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f680:	4b0b      	ldr	r3, [pc, #44]	; (800f6b0 <run_shortest+0x7e8>)
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	4619      	mov	r1, r3
 800f686:	4b0b      	ldr	r3, [pc, #44]	; (800f6b4 <run_shortest+0x7ec>)
 800f688:	f04f 32ff 	mov.w	r2, #4294967295
 800f68c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f690:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <run_shortest+0x7e8>)
 800f692:	781b      	ldrb	r3, [r3, #0]
 800f694:	3b01      	subs	r3, #1
 800f696:	4a07      	ldr	r2, [pc, #28]	; (800f6b4 <run_shortest+0x7ec>)
 800f698:	f06f 010c 	mvn.w	r1, #12
 800f69c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f6a0:	4b03      	ldr	r3, [pc, #12]	; (800f6b0 <run_shortest+0x7e8>)
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	b2da      	uxtb	r2, r3
 800f6a8:	4b01      	ldr	r3, [pc, #4]	; (800f6b0 <run_shortest+0x7e8>)
 800f6aa:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f6ac:	e60a      	b.n	800f2c4 <run_shortest+0x3fc>
 800f6ae:	bf00      	nop
 800f6b0:	20000828 	.word	0x20000828
 800f6b4:	2000083c 	.word	0x2000083c
				break;
 800f6b8:	bf00      	nop
		}

		pass_count = 1;
 800f6ba:	4ba3      	ldr	r3, [pc, #652]	; (800f948 <run_shortest+0xa80>)
 800f6bc:	2201      	movs	r2, #1
 800f6be:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f6c0:	4ba1      	ldr	r3, [pc, #644]	; (800f948 <run_shortest+0xa80>)
 800f6c2:	781b      	ldrb	r3, [r3, #0]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	4ba1      	ldr	r3, [pc, #644]	; (800f94c <run_shortest+0xa84>)
 800f6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	f000 813f 	beq.w	800f950 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f6d2:	4b9d      	ldr	r3, [pc, #628]	; (800f948 <run_shortest+0xa80>)
 800f6d4:	781b      	ldrb	r3, [r3, #0]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	4b9c      	ldr	r3, [pc, #624]	; (800f94c <run_shortest+0xa84>)
 800f6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6de:	f113 0f08 	cmn.w	r3, #8
 800f6e2:	d01b      	beq.n	800f71c <run_shortest+0x854>
 800f6e4:	4b98      	ldr	r3, [pc, #608]	; (800f948 <run_shortest+0xa80>)
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	4b98      	ldr	r3, [pc, #608]	; (800f94c <run_shortest+0xa84>)
 800f6ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f0:	f113 0f09 	cmn.w	r3, #9
 800f6f4:	d012      	beq.n	800f71c <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f6f6:	4b94      	ldr	r3, [pc, #592]	; (800f948 <run_shortest+0xa80>)
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	4b93      	ldr	r3, [pc, #588]	; (800f94c <run_shortest+0xa84>)
 800f6fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f702:	f113 0f0a 	cmn.w	r3, #10
 800f706:	d009      	beq.n	800f71c <run_shortest+0x854>
 800f708:	4b8f      	ldr	r3, [pc, #572]	; (800f948 <run_shortest+0xa80>)
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	461a      	mov	r2, r3
 800f70e:	4b8f      	ldr	r3, [pc, #572]	; (800f94c <run_shortest+0xa84>)
 800f710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f714:	f113 0f0b 	cmn.w	r3, #11
 800f718:	f040 810f 	bne.w	800f93a <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f71c:	4b8a      	ldr	r3, [pc, #552]	; (800f948 <run_shortest+0xa80>)
 800f71e:	781b      	ldrb	r3, [r3, #0]
 800f720:	461a      	mov	r2, r3
 800f722:	4b8a      	ldr	r3, [pc, #552]	; (800f94c <run_shortest+0xa84>)
 800f724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f728:	f113 0f08 	cmn.w	r3, #8
 800f72c:	d008      	beq.n	800f740 <run_shortest+0x878>
 800f72e:	4b86      	ldr	r3, [pc, #536]	; (800f948 <run_shortest+0xa80>)
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	461a      	mov	r2, r3
 800f734:	4b85      	ldr	r3, [pc, #532]	; (800f94c <run_shortest+0xa84>)
 800f736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f73a:	f113 0f0a 	cmn.w	r3, #10
 800f73e:	d102      	bne.n	800f746 <run_shortest+0x87e>
					slant_direction = -3;
 800f740:	f06f 0302 	mvn.w	r3, #2
 800f744:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f746:	4b80      	ldr	r3, [pc, #512]	; (800f948 <run_shortest+0xa80>)
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	461a      	mov	r2, r3
 800f74c:	4b7f      	ldr	r3, [pc, #508]	; (800f94c <run_shortest+0xa84>)
 800f74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f752:	f113 0f09 	cmn.w	r3, #9
 800f756:	d008      	beq.n	800f76a <run_shortest+0x8a2>
 800f758:	4b7b      	ldr	r3, [pc, #492]	; (800f948 <run_shortest+0xa80>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	461a      	mov	r2, r3
 800f75e:	4b7b      	ldr	r3, [pc, #492]	; (800f94c <run_shortest+0xa84>)
 800f760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f764:	f113 0f0b 	cmn.w	r3, #11
 800f768:	d102      	bne.n	800f770 <run_shortest+0x8a8>
					slant_direction = -2;
 800f76a:	f06f 0301 	mvn.w	r3, #1
 800f76e:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f770:	4b75      	ldr	r3, [pc, #468]	; (800f948 <run_shortest+0xa80>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	3301      	adds	r3, #1
 800f776:	b2da      	uxtb	r2, r3
 800f778:	4b73      	ldr	r3, [pc, #460]	; (800f948 <run_shortest+0xa80>)
 800f77a:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f77c:	4b72      	ldr	r3, [pc, #456]	; (800f948 <run_shortest+0xa80>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	461a      	mov	r2, r3
 800f782:	4b72      	ldr	r3, [pc, #456]	; (800f94c <run_shortest+0xa84>)
 800f784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78c:	d105      	bne.n	800f79a <run_shortest+0x8d2>
					pass_count++;
 800f78e:	4b6e      	ldr	r3, [pc, #440]	; (800f948 <run_shortest+0xa80>)
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	3301      	adds	r3, #1
 800f794:	b2da      	uxtb	r2, r3
 800f796:	4b6c      	ldr	r3, [pc, #432]	; (800f948 <run_shortest+0xa80>)
 800f798:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f79a:	4b6b      	ldr	r3, [pc, #428]	; (800f948 <run_shortest+0xa80>)
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	4b6a      	ldr	r3, [pc, #424]	; (800f94c <run_shortest+0xa84>)
 800f7a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7aa:	d105      	bne.n	800f7b8 <run_shortest+0x8f0>
					pass_count++;
 800f7ac:	4b66      	ldr	r3, [pc, #408]	; (800f948 <run_shortest+0xa80>)
 800f7ae:	781b      	ldrb	r3, [r3, #0]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	4b64      	ldr	r3, [pc, #400]	; (800f948 <run_shortest+0xa80>)
 800f7b6:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800f7b8:	4b63      	ldr	r3, [pc, #396]	; (800f948 <run_shortest+0xa80>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	4b63      	ldr	r3, [pc, #396]	; (800f94c <run_shortest+0xa84>)
 800f7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7c4:	f113 0f03 	cmn.w	r3, #3
 800f7c8:	f2c0 80ad 	blt.w	800f926 <run_shortest+0xa5e>
					slant_count = pass_count;
 800f7cc:	4b5e      	ldr	r3, [pc, #376]	; (800f948 <run_shortest+0xa80>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800f7d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f7d8:	4a5c      	ldr	r2, [pc, #368]	; (800f94c <run_shortest+0xa84>)
 800f7da:	2133      	movs	r1, #51	; 0x33
 800f7dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800f7e0:	4b59      	ldr	r3, [pc, #356]	; (800f948 <run_shortest+0xa80>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	4b57      	ldr	r3, [pc, #348]	; (800f948 <run_shortest+0xa80>)
 800f7ea:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800f7ec:	e09b      	b.n	800f926 <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f7ee:	4b56      	ldr	r3, [pc, #344]	; (800f948 <run_shortest+0xa80>)
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	4b55      	ldr	r3, [pc, #340]	; (800f94c <run_shortest+0xa84>)
 800f7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7fe:	d105      	bne.n	800f80c <run_shortest+0x944>
						pass_count++;
 800f800:	4b51      	ldr	r3, [pc, #324]	; (800f948 <run_shortest+0xa80>)
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	3301      	adds	r3, #1
 800f806:	b2da      	uxtb	r2, r3
 800f808:	4b4f      	ldr	r3, [pc, #316]	; (800f948 <run_shortest+0xa80>)
 800f80a:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800f80c:	4b4e      	ldr	r3, [pc, #312]	; (800f948 <run_shortest+0xa80>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	461a      	mov	r2, r3
 800f812:	4b4e      	ldr	r3, [pc, #312]	; (800f94c <run_shortest+0xa84>)
 800f814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f818:	f113 0f0c 	cmn.w	r3, #12
 800f81c:	f000 808d 	beq.w	800f93a <run_shortest+0xa72>
 800f820:	4b49      	ldr	r3, [pc, #292]	; (800f948 <run_shortest+0xa80>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	461a      	mov	r2, r3
 800f826:	4b49      	ldr	r3, [pc, #292]	; (800f94c <run_shortest+0xa84>)
 800f828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f82c:	f113 0f0d 	cmn.w	r3, #13
 800f830:	f000 8083 	beq.w	800f93a <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800f834:	4b44      	ldr	r3, [pc, #272]	; (800f948 <run_shortest+0xa80>)
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	461a      	mov	r2, r3
 800f83a:	4b44      	ldr	r3, [pc, #272]	; (800f94c <run_shortest+0xa84>)
 800f83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f840:	f113 0f0e 	cmn.w	r3, #14
 800f844:	d079      	beq.n	800f93a <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800f846:	4b40      	ldr	r3, [pc, #256]	; (800f948 <run_shortest+0xa80>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	461a      	mov	r2, r3
 800f84c:	4b3f      	ldr	r3, [pc, #252]	; (800f94c <run_shortest+0xa84>)
 800f84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f852:	f113 0f0f 	cmn.w	r3, #15
 800f856:	d070      	beq.n	800f93a <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800f858:	4b3b      	ldr	r3, [pc, #236]	; (800f948 <run_shortest+0xa80>)
 800f85a:	781b      	ldrb	r3, [r3, #0]
 800f85c:	461a      	mov	r2, r3
 800f85e:	4b3b      	ldr	r3, [pc, #236]	; (800f94c <run_shortest+0xa84>)
 800f860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f866:	429a      	cmp	r2, r3
 800f868:	d127      	bne.n	800f8ba <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800f86a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f86e:	4a37      	ldr	r2, [pc, #220]	; (800f94c <run_shortest+0xa84>)
 800f870:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f874:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f878:	3a01      	subs	r2, #1
 800f87a:	4934      	ldr	r1, [pc, #208]	; (800f94c <run_shortest+0xa84>)
 800f87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800f880:	4b31      	ldr	r3, [pc, #196]	; (800f948 <run_shortest+0xa80>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	f113 0f02 	cmn.w	r3, #2
 800f88e:	d107      	bne.n	800f8a0 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800f890:	4b2d      	ldr	r3, [pc, #180]	; (800f948 <run_shortest+0xa80>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	4619      	mov	r1, r3
 800f896:	4b2d      	ldr	r3, [pc, #180]	; (800f94c <run_shortest+0xa84>)
 800f898:	f06f 020f 	mvn.w	r2, #15
 800f89c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800f8a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a2:	f113 0f03 	cmn.w	r3, #3
 800f8a6:	d138      	bne.n	800f91a <run_shortest+0xa52>
							pass[pass_count] = -17;
 800f8a8:	4b27      	ldr	r3, [pc, #156]	; (800f948 <run_shortest+0xa80>)
 800f8aa:	781b      	ldrb	r3, [r3, #0]
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	4b27      	ldr	r3, [pc, #156]	; (800f94c <run_shortest+0xa84>)
 800f8b0:	f06f 0210 	mvn.w	r2, #16
 800f8b4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f8b8:	e02f      	b.n	800f91a <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800f8ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8be:	4a23      	ldr	r2, [pc, #140]	; (800f94c <run_shortest+0xa84>)
 800f8c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8c4:	2b31      	cmp	r3, #49	; 0x31
 800f8c6:	dd08      	ble.n	800f8da <run_shortest+0xa12>
							pass[pass_count] = -1;
 800f8c8:	4b1f      	ldr	r3, [pc, #124]	; (800f948 <run_shortest+0xa80>)
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	4b1f      	ldr	r3, [pc, #124]	; (800f94c <run_shortest+0xa84>)
 800f8d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800f8d8:	e009      	b.n	800f8ee <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800f8da:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <run_shortest+0xa80>)
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800f8e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8e6:	4a19      	ldr	r2, [pc, #100]	; (800f94c <run_shortest+0xa84>)
 800f8e8:	2132      	movs	r1, #50	; 0x32
 800f8ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800f8ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8f2:	4a16      	ldr	r2, [pc, #88]	; (800f94c <run_shortest+0xa84>)
 800f8f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f8f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f8fc:	3201      	adds	r2, #1
 800f8fe:	4913      	ldr	r1, [pc, #76]	; (800f94c <run_shortest+0xa84>)
 800f900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800f904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f906:	f113 0f02 	cmn.w	r3, #2
 800f90a:	d103      	bne.n	800f914 <run_shortest+0xa4c>
							slant_direction = -3;
 800f90c:	f06f 0302 	mvn.w	r3, #2
 800f910:	63bb      	str	r3, [r7, #56]	; 0x38
 800f912:	e002      	b.n	800f91a <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800f914:	f06f 0301 	mvn.w	r3, #1
 800f918:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800f91a:	4b0b      	ldr	r3, [pc, #44]	; (800f948 <run_shortest+0xa80>)
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	3301      	adds	r3, #1
 800f920:	b2da      	uxtb	r2, r3
 800f922:	4b09      	ldr	r3, [pc, #36]	; (800f948 <run_shortest+0xa80>)
 800f924:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800f926:	4b08      	ldr	r3, [pc, #32]	; (800f948 <run_shortest+0xa80>)
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	461a      	mov	r2, r3
 800f92c:	4b07      	ldr	r3, [pc, #28]	; (800f94c <run_shortest+0xa84>)
 800f92e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f932:	f113 0f03 	cmn.w	r3, #3
 800f936:	f6bf af5a 	bge.w	800f7ee <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800f93a:	4b03      	ldr	r3, [pc, #12]	; (800f948 <run_shortest+0xa80>)
 800f93c:	781b      	ldrb	r3, [r3, #0]
 800f93e:	3301      	adds	r3, #1
 800f940:	b2da      	uxtb	r2, r3
 800f942:	4b01      	ldr	r3, [pc, #4]	; (800f948 <run_shortest+0xa80>)
 800f944:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f946:	e6bb      	b.n	800f6c0 <run_shortest+0x7f8>
 800f948:	20000828 	.word	0x20000828
 800f94c:	2000083c 	.word	0x2000083c
				break;
 800f950:	bf00      	nop
		}
		pass_count=0;
 800f952:	4bb3      	ldr	r3, [pc, #716]	; (800fc20 <run_shortest+0xd58>)
 800f954:	2200      	movs	r2, #0
 800f956:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800f958:	4bb1      	ldr	r3, [pc, #708]	; (800fc20 <run_shortest+0xd58>)
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	461a      	mov	r2, r3
 800f95e:	4bb1      	ldr	r3, [pc, #708]	; (800fc24 <run_shortest+0xd5c>)
 800f960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f964:	2b32      	cmp	r3, #50	; 0x32
 800f966:	d107      	bne.n	800f978 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800f968:	4bad      	ldr	r3, [pc, #692]	; (800fc20 <run_shortest+0xd58>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	4619      	mov	r1, r3
 800f96e:	4bad      	ldr	r3, [pc, #692]	; (800fc24 <run_shortest+0xd5c>)
 800f970:	f04f 32ff 	mov.w	r2, #4294967295
 800f974:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800f978:	4ba9      	ldr	r3, [pc, #676]	; (800fc20 <run_shortest+0xd58>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	461a      	mov	r2, r3
 800f97e:	4ba9      	ldr	r3, [pc, #676]	; (800fc24 <run_shortest+0xd5c>)
 800f980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d006      	beq.n	800f996 <run_shortest+0xace>
				break;
			}
			pass_count++;
 800f988:	4ba5      	ldr	r3, [pc, #660]	; (800fc20 <run_shortest+0xd58>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	3301      	adds	r3, #1
 800f98e:	b2da      	uxtb	r2, r3
 800f990:	4ba3      	ldr	r3, [pc, #652]	; (800fc20 <run_shortest+0xd58>)
 800f992:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800f994:	e7e0      	b.n	800f958 <run_shortest+0xa90>
				break;
 800f996:	bf00      	nop
		}

	}
}
	int j = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800f99c:	e00b      	b.n	800f9b6 <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800f99e:	4aa1      	ldr	r2, [pc, #644]	; (800fc24 <run_shortest+0xd5c>)
 800f9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9a6:	461a      	mov	r2, r3
 800f9a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f9aa:	489f      	ldr	r0, [pc, #636]	; (800fc28 <run_shortest+0xd60>)
 800f9ac:	f00f feac 	bl	801f708 <iprintf>
		j++;
 800f9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9b2:	3301      	adds	r3, #1
 800f9b4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800f9b6:	4a9b      	ldr	r2, [pc, #620]	; (800fc24 <run_shortest+0xd5c>)
 800f9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d1ed      	bne.n	800f99e <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800f9c6:	e002      	b.n	800f9ce <run_shortest+0xb06>
		pass_count2++;
 800f9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800f9ce:	4a95      	ldr	r2, [pc, #596]	; (800fc24 <run_shortest+0xd5c>)
 800f9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9da:	d0f5      	beq.n	800f9c8 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800f9dc:	4a91      	ldr	r2, [pc, #580]	; (800fc24 <run_shortest+0xd5c>)
 800f9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e4:	934e      	str	r3, [sp, #312]	; 0x138
 800f9e6:	4668      	mov	r0, sp
 800f9e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f9ec:	f44f 729c 	mov.w	r2, #312	; 0x138
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	f00f fa09 	bl	801ee08 <memcpy>
 800f9f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800f9fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f9fc:	f007 f9ae 	bl	8016d5c <get_center_velocity>
 800fa00:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fa04:	6a38      	ldr	r0, [r7, #32]
 800fa06:	f7f0 fdc7 	bl	8000598 <__aeabi_f2d>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fa10:	4886      	ldr	r0, [pc, #536]	; (800fc2c <run_shortest+0xd64>)
 800fa12:	f00f fe79 	bl	801f708 <iprintf>

	HAL_Delay(500);
 800fa16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fa1a:	f007 ff23 	bl	8017864 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fa1e:	2001      	movs	r0, #1
 800fa20:	f7f7 ffb0 	bl	8007984 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fa24:	2003      	movs	r0, #3
 800fa26:	f7f7 ffdf 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fa2a:	2003      	movs	r0, #3
 800fa2c:	f7f7 ffb4 	bl	8007998 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fa30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fa34:	f7f8 fad8 	bl	8007fe8 <wait_ms_NoReset>
	no_safty = 1;
 800fa38:	4b7d      	ldr	r3, [pc, #500]	; (800fc30 <run_shortest+0xd68>)
 800fa3a:	2201      	movs	r2, #1
 800fa3c:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fa3e:	4b7c      	ldr	r3, [pc, #496]	; (800fc30 <run_shortest+0xd68>)
 800fa40:	2200      	movs	r2, #0
 800fa42:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fa44:	f7f4 fea2 	bl	800478c <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fa48:	7abb      	ldrb	r3, [r7, #10]
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d12d      	bne.n	800faaa <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f7f0 fda2 	bl	8000598 <__aeabi_f2d>
 800fa54:	a370      	add	r3, pc, #448	; (adr r3, 800fc18 <run_shortest+0xd50>)
 800fa56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa5a:	f7f0 fdf5 	bl	8000648 <__aeabi_dmul>
 800fa5e:	4602      	mov	r2, r0
 800fa60:	460b      	mov	r3, r1
 800fa62:	4614      	mov	r4, r2
 800fa64:	461d      	mov	r5, r3
 800fa66:	4b73      	ldr	r3, [pc, #460]	; (800fc34 <run_shortest+0xd6c>)
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7f0 fd94 	bl	8000598 <__aeabi_f2d>
 800fa70:	4602      	mov	r2, r0
 800fa72:	460b      	mov	r3, r1
 800fa74:	4620      	mov	r0, r4
 800fa76:	4629      	mov	r1, r5
 800fa78:	f7f0 ff10 	bl	800089c <__aeabi_ddiv>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	460b      	mov	r3, r1
 800fa80:	4610      	mov	r0, r2
 800fa82:	4619      	mov	r1, r3
 800fa84:	f7f1 f8b8 	bl	8000bf8 <__aeabi_d2f>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	ee00 3a10 	vmov	s0, r3
 800fa8e:	f7f8 f817 	bl	8007ac0 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fa92:	f7f8 f801 	bl	8007a98 <pl_FunMotor_start>
		HAL_Delay(600);
 800fa96:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fa9a:	f007 fee3 	bl	8017864 <HAL_Delay>
		reset_gyro();
 800fa9e:	f7f1 fe07 	bl	80016b0 <reset_gyro>
		reset_speed();
 800faa2:	f7f1 fab9 	bl	8001018 <reset_speed>
		clear_Ierror();
 800faa6:	f7f4 fe71 	bl	800478c <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800faaa:	4b63      	ldr	r3, [pc, #396]	; (800fc38 <run_shortest+0xd70>)
 800faac:	2201      	movs	r2, #1
 800faae:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fab0:	4b62      	ldr	r3, [pc, #392]	; (800fc3c <run_shortest+0xd74>)
 800fab2:	2201      	movs	r2, #1
 800fab4:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fab6:	4b62      	ldr	r3, [pc, #392]	; (800fc40 <run_shortest+0xd78>)
 800fab8:	2212      	movs	r2, #18
 800faba:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fabc:	4b61      	ldr	r3, [pc, #388]	; (800fc44 <run_shortest+0xd7c>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fac2:	4b57      	ldr	r3, [pc, #348]	; (800fc20 <run_shortest+0xd58>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fac8:	2301      	movs	r3, #1
 800faca:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800facc:	2300      	movs	r3, #0
 800face:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fad4:	2300      	movs	r3, #0
 800fad6:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fad8:	2300      	movs	r3, #0
 800fada:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fadc:	e002      	b.n	800fae4 <run_shortest+0xc1c>
		pass_count2++;
 800fade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae0:	3301      	adds	r3, #1
 800fae2:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fae4:	4a4f      	ldr	r2, [pc, #316]	; (800fc24 <run_shortest+0xd5c>)
 800fae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf0:	d0f5      	beq.n	800fade <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800faf2:	4a4c      	ldr	r2, [pc, #304]	; (800fc24 <run_shortest+0xd5c>)
 800faf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fafa:	934e      	str	r3, [sp, #312]	; 0x138
 800fafc:	4668      	mov	r0, sp
 800fafe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fb02:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fb06:	4619      	mov	r1, r3
 800fb08:	f00f f97e 	bl	801ee08 <memcpy>
 800fb0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fb10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fb12:	f007 f923 	bl	8016d5c <get_center_velocity>
 800fb16:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fb1a:	edd7 7a08 	vldr	s15, [r7, #32]
 800fb1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fb22:	ee17 0a90 	vmov	r0, s15
 800fb26:	f7f0 fd37 	bl	8000598 <__aeabi_f2d>
 800fb2a:	f04f 0200 	mov.w	r2, #0
 800fb2e:	4b46      	ldr	r3, [pc, #280]	; (800fc48 <run_shortest+0xd80>)
 800fb30:	f7f0 feb4 	bl	800089c <__aeabi_ddiv>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	4610      	mov	r0, r2
 800fb3a:	4619      	mov	r1, r3
 800fb3c:	f04f 0200 	mov.w	r2, #0
 800fb40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fb44:	f7f0 feaa 	bl	800089c <__aeabi_ddiv>
 800fb48:	4602      	mov	r2, r0
 800fb4a:	460b      	mov	r3, r1
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	4619      	mov	r1, r3
 800fb50:	f7f1 f852 	bl	8000bf8 <__aeabi_d2f>
 800fb54:	4603      	mov	r3, r0
 800fb56:	69b8      	ldr	r0, [r7, #24]
 800fb58:	ee02 3a10 	vmov	s4, r3
 800fb5c:	edd7 1a08 	vldr	s3, [r7, #32]
 800fb60:	ed97 1a08 	vldr	s2, [r7, #32]
 800fb64:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fc4c <run_shortest+0xd84>
 800fb68:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fb6c:	f7f3 f9f2 	bl	8002f54 <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fb70:	4b2b      	ldr	r3, [pc, #172]	; (800fc20 <run_shortest+0xd58>)
 800fb72:	781b      	ldrb	r3, [r3, #0]
 800fb74:	3301      	adds	r3, #1
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fb78:	e002      	b.n	800fb80 <run_shortest+0xcb8>
			pass_count2++;
 800fb7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fb80:	4a28      	ldr	r2, [pc, #160]	; (800fc24 <run_shortest+0xd5c>)
 800fb82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8c:	d0f5      	beq.n	800fb7a <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fb8e:	4a25      	ldr	r2, [pc, #148]	; (800fc24 <run_shortest+0xd5c>)
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb96:	934e      	str	r3, [sp, #312]	; 0x138
 800fb98:	4668      	mov	r0, sp
 800fb9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fb9e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fba2:	4619      	mov	r1, r3
 800fba4:	f00f f930 	bl	801ee08 <memcpy>
 800fba8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fbac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbae:	f007 f8d5 	bl	8016d5c <get_center_velocity>
 800fbb2:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fbb6:	4b1a      	ldr	r3, [pc, #104]	; (800fc20 <run_shortest+0xd58>)
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	461a      	mov	r2, r3
 800fbbc:	4b19      	ldr	r3, [pc, #100]	; (800fc24 <run_shortest+0xd5c>)
 800fbbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc6:	d106      	bne.n	800fbd6 <run_shortest+0xd0e>
			pass_count++;
 800fbc8:	4b15      	ldr	r3, [pc, #84]	; (800fc20 <run_shortest+0xd58>)
 800fbca:	781b      	ldrb	r3, [r3, #0]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	b2da      	uxtb	r2, r3
 800fbd0:	4b13      	ldr	r3, [pc, #76]	; (800fc20 <run_shortest+0xd58>)
 800fbd2:	701a      	strb	r2, [r3, #0]
 800fbd4:	e2a1      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fbd6:	4b12      	ldr	r3, [pc, #72]	; (800fc20 <run_shortest+0xd58>)
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	4b11      	ldr	r3, [pc, #68]	; (800fc24 <run_shortest+0xd5c>)
 800fbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe2:	f113 0f02 	cmn.w	r3, #2
 800fbe6:	d133      	bne.n	800fc50 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fbe8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fbec:	9303      	str	r3, [sp, #12]
 800fbee:	2301      	movs	r3, #1
 800fbf0:	9302      	str	r3, [sp, #8]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	9301      	str	r3, [sp, #4]
 800fbf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fbfe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc00:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc04:	f7fa fa16 	bl	800a034 <slalomR>

			pass_count++;
 800fc08:	4b05      	ldr	r3, [pc, #20]	; (800fc20 <run_shortest+0xd58>)
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	4b03      	ldr	r3, [pc, #12]	; (800fc20 <run_shortest+0xd58>)
 800fc12:	701a      	strb	r2, [r3, #0]
 800fc14:	e281      	b.n	801011a <run_shortest+0x1252>
 800fc16:	bf00      	nop
 800fc18:	cccccccd 	.word	0xcccccccd
 800fc1c:	4010cccc 	.word	0x4010cccc
 800fc20:	20000828 	.word	0x20000828
 800fc24:	2000083c 	.word	0x2000083c
 800fc28:	08021f1c 	.word	0x08021f1c
 800fc2c:	08021f34 	.word	0x08021f34
 800fc30:	20000806 	.word	0x20000806
 800fc34:	200004d4 	.word	0x200004d4
 800fc38:	20000834 	.word	0x20000834
 800fc3c:	20000808 	.word	0x20000808
 800fc40:	2000d96c 	.word	0x2000d96c
 800fc44:	20000830 	.word	0x20000830
 800fc48:	40290000 	.word	0x40290000
 800fc4c:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fc50:	4baa      	ldr	r3, [pc, #680]	; (800fefc <run_shortest+0x1034>)
 800fc52:	781b      	ldrb	r3, [r3, #0]
 800fc54:	461a      	mov	r2, r3
 800fc56:	4baa      	ldr	r3, [pc, #680]	; (800ff00 <run_shortest+0x1038>)
 800fc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5c:	f113 0f03 	cmn.w	r3, #3
 800fc60:	d116      	bne.n	800fc90 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fc62:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fc66:	9303      	str	r3, [sp, #12]
 800fc68:	2301      	movs	r3, #1
 800fc6a:	9302      	str	r3, [sp, #8]
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	9301      	str	r3, [sp, #4]
 800fc70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc72:	9300      	str	r3, [sp, #0]
 800fc74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fc78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc7a:	ed97 0a08 	vldr	s0, [r7, #32]
 800fc7e:	f7fa fb93 	bl	800a3a8 <slalomL>

			pass_count++;
 800fc82:	4b9e      	ldr	r3, [pc, #632]	; (800fefc <run_shortest+0x1034>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	3301      	adds	r3, #1
 800fc88:	b2da      	uxtb	r2, r3
 800fc8a:	4b9c      	ldr	r3, [pc, #624]	; (800fefc <run_shortest+0x1034>)
 800fc8c:	701a      	strb	r2, [r3, #0]
 800fc8e:	e244      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800fc90:	4b9a      	ldr	r3, [pc, #616]	; (800fefc <run_shortest+0x1034>)
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	461a      	mov	r2, r3
 800fc96:	4b9a      	ldr	r3, [pc, #616]	; (800ff00 <run_shortest+0x1038>)
 800fc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc9c:	f113 0f04 	cmn.w	r3, #4
 800fca0:	d115      	bne.n	800fcce <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800fca2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fca6:	9302      	str	r3, [sp, #8]
 800fca8:	2300      	movs	r3, #0
 800fcaa:	9301      	str	r3, [sp, #4]
 800fcac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcb0:	9300      	str	r3, [sp, #0]
 800fcb2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800fcb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcb8:	ed97 0a08 	vldr	s0, [r7, #32]
 800fcbc:	f7fa fd2a 	bl	800a714 <turn90R>
			pass_count++;
 800fcc0:	4b8e      	ldr	r3, [pc, #568]	; (800fefc <run_shortest+0x1034>)
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	b2da      	uxtb	r2, r3
 800fcc8:	4b8c      	ldr	r3, [pc, #560]	; (800fefc <run_shortest+0x1034>)
 800fcca:	701a      	strb	r2, [r3, #0]
 800fccc:	e225      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800fcce:	4b8b      	ldr	r3, [pc, #556]	; (800fefc <run_shortest+0x1034>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	4b8a      	ldr	r3, [pc, #552]	; (800ff00 <run_shortest+0x1038>)
 800fcd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcda:	f113 0f05 	cmn.w	r3, #5
 800fcde:	d115      	bne.n	800fd0c <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800fce0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fce4:	9302      	str	r3, [sp, #8]
 800fce6:	2300      	movs	r3, #0
 800fce8:	9301      	str	r3, [sp, #4]
 800fcea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800fcee:	9300      	str	r3, [sp, #0]
 800fcf0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800fcf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fcf6:	ed97 0a08 	vldr	s0, [r7, #32]
 800fcfa:	f7fa fe75 	bl	800a9e8 <turn90L>
			pass_count++;
 800fcfe:	4b7f      	ldr	r3, [pc, #508]	; (800fefc <run_shortest+0x1034>)
 800fd00:	781b      	ldrb	r3, [r3, #0]
 800fd02:	3301      	adds	r3, #1
 800fd04:	b2da      	uxtb	r2, r3
 800fd06:	4b7d      	ldr	r3, [pc, #500]	; (800fefc <run_shortest+0x1034>)
 800fd08:	701a      	strb	r2, [r3, #0]
 800fd0a:	e206      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800fd0c:	4b7b      	ldr	r3, [pc, #492]	; (800fefc <run_shortest+0x1034>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	461a      	mov	r2, r3
 800fd12:	4b7b      	ldr	r3, [pc, #492]	; (800ff00 <run_shortest+0x1038>)
 800fd14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd18:	f113 0f06 	cmn.w	r3, #6
 800fd1c:	d115      	bne.n	800fd4a <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800fd1e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd22:	9302      	str	r3, [sp, #8]
 800fd24:	2300      	movs	r3, #0
 800fd26:	9301      	str	r3, [sp, #4]
 800fd28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fd2c:	9300      	str	r3, [sp, #0]
 800fd2e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800fd32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd34:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd38:	f7fa ffba 	bl	800acb0 <turn180R>
			pass_count++;
 800fd3c:	4b6f      	ldr	r3, [pc, #444]	; (800fefc <run_shortest+0x1034>)
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	3301      	adds	r3, #1
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	4b6d      	ldr	r3, [pc, #436]	; (800fefc <run_shortest+0x1034>)
 800fd46:	701a      	strb	r2, [r3, #0]
 800fd48:	e1e7      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800fd4a:	4b6c      	ldr	r3, [pc, #432]	; (800fefc <run_shortest+0x1034>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	4b6b      	ldr	r3, [pc, #428]	; (800ff00 <run_shortest+0x1038>)
 800fd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd56:	f113 0f07 	cmn.w	r3, #7
 800fd5a:	d115      	bne.n	800fd88 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800fd5c:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd60:	9302      	str	r3, [sp, #8]
 800fd62:	2300      	movs	r3, #0
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fd70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd72:	ed97 0a08 	vldr	s0, [r7, #32]
 800fd76:	f7fb f905 	bl	800af84 <turn180L>
			pass_count++;
 800fd7a:	4b60      	ldr	r3, [pc, #384]	; (800fefc <run_shortest+0x1034>)
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	3301      	adds	r3, #1
 800fd80:	b2da      	uxtb	r2, r3
 800fd82:	4b5e      	ldr	r3, [pc, #376]	; (800fefc <run_shortest+0x1034>)
 800fd84:	701a      	strb	r2, [r3, #0]
 800fd86:	e1c8      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 800fd88:	4b5c      	ldr	r3, [pc, #368]	; (800fefc <run_shortest+0x1034>)
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	461a      	mov	r2, r3
 800fd8e:	4b5c      	ldr	r3, [pc, #368]	; (800ff00 <run_shortest+0x1038>)
 800fd90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd94:	f113 0f08 	cmn.w	r3, #8
 800fd98:	d115      	bne.n	800fdc6 <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 800fd9a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fd9e:	9302      	str	r3, [sp, #8]
 800fda0:	2300      	movs	r3, #0
 800fda2:	9301      	str	r3, [sp, #4]
 800fda4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800fdae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdb0:	ed97 0a08 	vldr	s0, [r7, #32]
 800fdb4:	f7fb fa4c 	bl	800b250 <turn45inR>
			pass_count++;
 800fdb8:	4b50      	ldr	r3, [pc, #320]	; (800fefc <run_shortest+0x1034>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	3301      	adds	r3, #1
 800fdbe:	b2da      	uxtb	r2, r3
 800fdc0:	4b4e      	ldr	r3, [pc, #312]	; (800fefc <run_shortest+0x1034>)
 800fdc2:	701a      	strb	r2, [r3, #0]
 800fdc4:	e1a9      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 800fdc6:	4b4d      	ldr	r3, [pc, #308]	; (800fefc <run_shortest+0x1034>)
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	4b4c      	ldr	r3, [pc, #304]	; (800ff00 <run_shortest+0x1038>)
 800fdce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdd2:	f113 0f09 	cmn.w	r3, #9
 800fdd6:	d115      	bne.n	800fe04 <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 800fdd8:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fddc:	9302      	str	r3, [sp, #8]
 800fdde:	2300      	movs	r3, #0
 800fde0:	9301      	str	r3, [sp, #4]
 800fde2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fde6:	9300      	str	r3, [sp, #0]
 800fde8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800fdec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fdee:	ed97 0a08 	vldr	s0, [r7, #32]
 800fdf2:	f7fb fc75 	bl	800b6e0 <turn45inL>
			pass_count++;
 800fdf6:	4b41      	ldr	r3, [pc, #260]	; (800fefc <run_shortest+0x1034>)
 800fdf8:	781b      	ldrb	r3, [r3, #0]
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	b2da      	uxtb	r2, r3
 800fdfe:	4b3f      	ldr	r3, [pc, #252]	; (800fefc <run_shortest+0x1034>)
 800fe00:	701a      	strb	r2, [r3, #0]
 800fe02:	e18a      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 800fe04:	4b3d      	ldr	r3, [pc, #244]	; (800fefc <run_shortest+0x1034>)
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	461a      	mov	r2, r3
 800fe0a:	4b3d      	ldr	r3, [pc, #244]	; (800ff00 <run_shortest+0x1038>)
 800fe0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe10:	f113 0f0a 	cmn.w	r3, #10
 800fe14:	d115      	bne.n	800fe42 <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 800fe16:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe1a:	9302      	str	r3, [sp, #8]
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	9301      	str	r3, [sp, #4]
 800fe20:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fe24:	9300      	str	r3, [sp, #0]
 800fe26:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800fe2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe2c:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe30:	f7fb fe96 	bl	800bb60 <turn135inR>
			pass_count++;
 800fe34:	4b31      	ldr	r3, [pc, #196]	; (800fefc <run_shortest+0x1034>)
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	3301      	adds	r3, #1
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	4b2f      	ldr	r3, [pc, #188]	; (800fefc <run_shortest+0x1034>)
 800fe3e:	701a      	strb	r2, [r3, #0]
 800fe40:	e16b      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 800fe42:	4b2e      	ldr	r3, [pc, #184]	; (800fefc <run_shortest+0x1034>)
 800fe44:	781b      	ldrb	r3, [r3, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	4b2d      	ldr	r3, [pc, #180]	; (800ff00 <run_shortest+0x1038>)
 800fe4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe4e:	f113 0f0b 	cmn.w	r3, #11
 800fe52:	d115      	bne.n	800fe80 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 800fe54:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe58:	9302      	str	r3, [sp, #8]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	9301      	str	r3, [sp, #4]
 800fe5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fe62:	9300      	str	r3, [sp, #0]
 800fe64:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800fe68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe6a:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe6e:	f7fc f8bf 	bl	800bff0 <turn135inL>
			pass_count++;
 800fe72:	4b22      	ldr	r3, [pc, #136]	; (800fefc <run_shortest+0x1034>)
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	3301      	adds	r3, #1
 800fe78:	b2da      	uxtb	r2, r3
 800fe7a:	4b20      	ldr	r3, [pc, #128]	; (800fefc <run_shortest+0x1034>)
 800fe7c:	701a      	strb	r2, [r3, #0]
 800fe7e:	e14c      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 800fe80:	4b1e      	ldr	r3, [pc, #120]	; (800fefc <run_shortest+0x1034>)
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	461a      	mov	r2, r3
 800fe86:	4b1e      	ldr	r3, [pc, #120]	; (800ff00 <run_shortest+0x1038>)
 800fe88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe8c:	f113 0f0c 	cmn.w	r3, #12
 800fe90:	d115      	bne.n	800febe <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 800fe92:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe96:	9302      	str	r3, [sp, #8]
 800fe98:	2300      	movs	r3, #0
 800fe9a:	9301      	str	r3, [sp, #4]
 800fe9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800fea0:	9300      	str	r3, [sp, #0]
 800fea2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800fea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fea8:	ed97 0a08 	vldr	s0, [r7, #32]
 800feac:	f7fc fae4 	bl	800c478 <turn45outR>
			pass_count++;
 800feb0:	4b12      	ldr	r3, [pc, #72]	; (800fefc <run_shortest+0x1034>)
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	3301      	adds	r3, #1
 800feb6:	b2da      	uxtb	r2, r3
 800feb8:	4b10      	ldr	r3, [pc, #64]	; (800fefc <run_shortest+0x1034>)
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	e12d      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 800febe:	4b0f      	ldr	r3, [pc, #60]	; (800fefc <run_shortest+0x1034>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	461a      	mov	r2, r3
 800fec4:	4b0e      	ldr	r3, [pc, #56]	; (800ff00 <run_shortest+0x1038>)
 800fec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800feca:	f113 0f0d 	cmn.w	r3, #13
 800fece:	d119      	bne.n	800ff04 <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 800fed0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fed4:	9302      	str	r3, [sp, #8]
 800fed6:	2300      	movs	r3, #0
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800fee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fee6:	ed97 0a08 	vldr	s0, [r7, #32]
 800feea:	f7fc fcb7 	bl	800c85c <turn45outL>
			pass_count++;
 800feee:	4b03      	ldr	r3, [pc, #12]	; (800fefc <run_shortest+0x1034>)
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	3301      	adds	r3, #1
 800fef4:	b2da      	uxtb	r2, r3
 800fef6:	4b01      	ldr	r3, [pc, #4]	; (800fefc <run_shortest+0x1034>)
 800fef8:	701a      	strb	r2, [r3, #0]
 800fefa:	e10e      	b.n	801011a <run_shortest+0x1252>
 800fefc:	20000828 	.word	0x20000828
 800ff00:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 800ff04:	4ba0      	ldr	r3, [pc, #640]	; (8010188 <run_shortest+0x12c0>)
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	4ba0      	ldr	r3, [pc, #640]	; (801018c <run_shortest+0x12c4>)
 800ff0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff10:	f113 0f0e 	cmn.w	r3, #14
 800ff14:	d115      	bne.n	800ff42 <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 800ff16:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff1a:	9302      	str	r3, [sp, #8]
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	9301      	str	r3, [sp, #4]
 800ff20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ff24:	9300      	str	r3, [sp, #0]
 800ff26:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ff2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff2c:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff30:	f7fc fe7c 	bl	800cc2c <turn135outR>
			pass_count++;
 800ff34:	4b94      	ldr	r3, [pc, #592]	; (8010188 <run_shortest+0x12c0>)
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	3301      	adds	r3, #1
 800ff3a:	b2da      	uxtb	r2, r3
 800ff3c:	4b92      	ldr	r3, [pc, #584]	; (8010188 <run_shortest+0x12c0>)
 800ff3e:	701a      	strb	r2, [r3, #0]
 800ff40:	e0eb      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 800ff42:	4b91      	ldr	r3, [pc, #580]	; (8010188 <run_shortest+0x12c0>)
 800ff44:	781b      	ldrb	r3, [r3, #0]
 800ff46:	461a      	mov	r2, r3
 800ff48:	4b90      	ldr	r3, [pc, #576]	; (801018c <run_shortest+0x12c4>)
 800ff4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff4e:	f113 0f0f 	cmn.w	r3, #15
 800ff52:	d115      	bne.n	800ff80 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 800ff54:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff58:	9302      	str	r3, [sp, #8]
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	9301      	str	r3, [sp, #4]
 800ff5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ff62:	9300      	str	r3, [sp, #0]
 800ff64:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 800ff68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff6a:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff6e:	f7fd f84f 	bl	800d010 <turn135outL>
			pass_count++;
 800ff72:	4b85      	ldr	r3, [pc, #532]	; (8010188 <run_shortest+0x12c0>)
 800ff74:	781b      	ldrb	r3, [r3, #0]
 800ff76:	3301      	adds	r3, #1
 800ff78:	b2da      	uxtb	r2, r3
 800ff7a:	4b83      	ldr	r3, [pc, #524]	; (8010188 <run_shortest+0x12c0>)
 800ff7c:	701a      	strb	r2, [r3, #0]
 800ff7e:	e0cc      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 800ff80:	4b81      	ldr	r3, [pc, #516]	; (8010188 <run_shortest+0x12c0>)
 800ff82:	781b      	ldrb	r3, [r3, #0]
 800ff84:	461a      	mov	r2, r3
 800ff86:	4b81      	ldr	r3, [pc, #516]	; (801018c <run_shortest+0x12c4>)
 800ff88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff8c:	f113 0f10 	cmn.w	r3, #16
 800ff90:	d115      	bne.n	800ffbe <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 800ff92:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff96:	9302      	str	r3, [sp, #8]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800ffa0:	9300      	str	r3, [sp, #0]
 800ffa2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800ffa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffa8:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffac:	f7fd fa1c 	bl	800d3e8 <V90R>
			pass_count++;
 800ffb0:	4b75      	ldr	r3, [pc, #468]	; (8010188 <run_shortest+0x12c0>)
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	b2da      	uxtb	r2, r3
 800ffb8:	4b73      	ldr	r3, [pc, #460]	; (8010188 <run_shortest+0x12c0>)
 800ffba:	701a      	strb	r2, [r3, #0]
 800ffbc:	e0ad      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 800ffbe:	4b72      	ldr	r3, [pc, #456]	; (8010188 <run_shortest+0x12c0>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4b71      	ldr	r3, [pc, #452]	; (801018c <run_shortest+0x12c4>)
 800ffc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffca:	f113 0f11 	cmn.w	r3, #17
 800ffce:	d115      	bne.n	800fffc <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 800ffd0:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffd4:	9302      	str	r3, [sp, #8]
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	9301      	str	r3, [sp, #4]
 800ffda:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800ffde:	9300      	str	r3, [sp, #0]
 800ffe0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 800ffe4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffe6:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffea:	f7fd fc09 	bl	800d800 <V90L>
			pass_count++;
 800ffee:	4b66      	ldr	r3, [pc, #408]	; (8010188 <run_shortest+0x12c0>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	3301      	adds	r3, #1
 800fff4:	b2da      	uxtb	r2, r3
 800fff6:	4b64      	ldr	r3, [pc, #400]	; (8010188 <run_shortest+0x12c0>)
 800fff8:	701a      	strb	r2, [r3, #0]
 800fffa:	e08e      	b.n	801011a <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 800fffc:	4b62      	ldr	r3, [pc, #392]	; (8010188 <run_shortest+0x12c0>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	461a      	mov	r2, r3
 8010002:	4b62      	ldr	r3, [pc, #392]	; (801018c <run_shortest+0x12c4>)
 8010004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010008:	2b00      	cmp	r3, #0
 801000a:	f340 8086 	ble.w	801011a <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 801000e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010010:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 8010012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010014:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 8010016:	4b5c      	ldr	r3, [pc, #368]	; (8010188 <run_shortest+0x12c0>)
 8010018:	781b      	ldrb	r3, [r3, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d013      	beq.n	8010046 <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 801001e:	4b5a      	ldr	r3, [pc, #360]	; (8010188 <run_shortest+0x12c0>)
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	3b01      	subs	r3, #1
 8010024:	4a59      	ldr	r2, [pc, #356]	; (801018c <run_shortest+0x12c4>)
 8010026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002a:	f113 0f02 	cmn.w	r3, #2
 801002e:	d008      	beq.n	8010042 <run_shortest+0x117a>
 8010030:	4b55      	ldr	r3, [pc, #340]	; (8010188 <run_shortest+0x12c0>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	3b01      	subs	r3, #1
 8010036:	4a55      	ldr	r2, [pc, #340]	; (801018c <run_shortest+0x12c4>)
 8010038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801003c:	f113 0f03 	cmn.w	r3, #3
 8010040:	d101      	bne.n	8010046 <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 8010042:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010044:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8010046:	4b50      	ldr	r3, [pc, #320]	; (8010188 <run_shortest+0x12c0>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	3301      	adds	r3, #1
 801004c:	4a4f      	ldr	r2, [pc, #316]	; (801018c <run_shortest+0x12c4>)
 801004e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010052:	f113 0f02 	cmn.w	r3, #2
 8010056:	d008      	beq.n	801006a <run_shortest+0x11a2>
 8010058:	4b4b      	ldr	r3, [pc, #300]	; (8010188 <run_shortest+0x12c0>)
 801005a:	781b      	ldrb	r3, [r3, #0]
 801005c:	3301      	adds	r3, #1
 801005e:	4a4b      	ldr	r2, [pc, #300]	; (801018c <run_shortest+0x12c4>)
 8010060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010064:	f113 0f03 	cmn.w	r3, #3
 8010068:	d101      	bne.n	801006e <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 801006a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801006c:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 801006e:	4b46      	ldr	r3, [pc, #280]	; (8010188 <run_shortest+0x12c0>)
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	461a      	mov	r2, r3
 8010074:	4b45      	ldr	r3, [pc, #276]	; (801018c <run_shortest+0x12c4>)
 8010076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007a:	2b31      	cmp	r3, #49	; 0x31
 801007c:	dd27      	ble.n	80100ce <run_shortest+0x1206>
				mode.WallControlMode=3;
 801007e:	2303      	movs	r3, #3
 8010080:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 8010082:	2300      	movs	r3, #0
 8010084:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 8010086:	4b40      	ldr	r3, [pc, #256]	; (8010188 <run_shortest+0x12c0>)
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	461a      	mov	r2, r3
 801008c:	4b3f      	ldr	r3, [pc, #252]	; (801018c <run_shortest+0x12c4>)
 801008e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010092:	3b32      	subs	r3, #50	; 0x32
 8010094:	4618      	mov	r0, r3
 8010096:	f7f0 fa6d 	bl	8000574 <__aeabi_i2d>
 801009a:	a339      	add	r3, pc, #228	; (adr r3, 8010180 <run_shortest+0x12b8>)
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	f7f0 fad2 	bl	8000648 <__aeabi_dmul>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	4610      	mov	r0, r2
 80100aa:	4619      	mov	r1, r3
 80100ac:	f7f0 fda4 	bl	8000bf8 <__aeabi_d2f>
 80100b0:	4603      	mov	r3, r0
 80100b2:	69b8      	ldr	r0, [r7, #24]
 80100b4:	ed97 2a04 	vldr	s4, [r7, #16]
 80100b8:	edd7 1a05 	vldr	s3, [r7, #20]
 80100bc:	ed97 1a08 	vldr	s2, [r7, #32]
 80100c0:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80100c4:	ee00 3a10 	vmov	s0, r3
 80100c8:	f7f2 ff44 	bl	8002f54 <straight_table2>
 80100cc:	e01f      	b.n	801010e <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 80100ce:	2301      	movs	r3, #1
 80100d0:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 80100d6:	4b2c      	ldr	r3, [pc, #176]	; (8010188 <run_shortest+0x12c0>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	4b2b      	ldr	r3, [pc, #172]	; (801018c <run_shortest+0x12c4>)
 80100de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80100e2:	4613      	mov	r3, r2
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	4413      	add	r3, r2
 80100e8:	011a      	lsls	r2, r3, #4
 80100ea:	1ad3      	subs	r3, r2, r3
 80100ec:	ee07 3a90 	vmov	s15, r3
 80100f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80100f4:	69b8      	ldr	r0, [r7, #24]
 80100f6:	ed97 2a04 	vldr	s4, [r7, #16]
 80100fa:	edd7 1a05 	vldr	s3, [r7, #20]
 80100fe:	ed97 1a08 	vldr	s2, [r7, #32]
 8010102:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010106:	eeb0 0a67 	vmov.f32	s0, s15
 801010a:	f7f2 ff23 	bl	8002f54 <straight_table2>
			}

			pass_count++;
 801010e:	4b1e      	ldr	r3, [pc, #120]	; (8010188 <run_shortest+0x12c0>)
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	3301      	adds	r3, #1
 8010114:	b2da      	uxtb	r2, r3
 8010116:	4b1c      	ldr	r3, [pc, #112]	; (8010188 <run_shortest+0x12c0>)
 8010118:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 801011a:	4b1b      	ldr	r3, [pc, #108]	; (8010188 <run_shortest+0x12c0>)
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	4b1a      	ldr	r3, [pc, #104]	; (801018c <run_shortest+0x12c4>)
 8010122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d000      	beq.n	801012c <run_shortest+0x1264>
		pass_count2=pass_count+1;
 801012a:	e521      	b.n	800fb70 <run_shortest+0xca8>
			break;
 801012c:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 801012e:	2301      	movs	r3, #1
 8010130:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 8010132:	2300      	movs	r3, #0
 8010134:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 8010136:	69b8      	ldr	r0, [r7, #24]
 8010138:	ed97 2a04 	vldr	s4, [r7, #16]
 801013c:	edd7 1a05 	vldr	s3, [r7, #20]
 8010140:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010190 <run_shortest+0x12c8>
 8010144:	edd7 0a08 	vldr	s1, [r7, #32]
 8010148:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8010194 <run_shortest+0x12cc>
 801014c:	f7f2 ff02 	bl	8002f54 <straight_table2>
		HAL_Delay(700);
 8010150:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8010154:	f007 fb86 	bl	8017864 <HAL_Delay>
		pl_FunMotor_stop();
 8010158:	f7f7 fca8 	bl	8007aac <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 801015c:	4b0e      	ldr	r3, [pc, #56]	; (8010198 <run_shortest+0x12d0>)
 801015e:	2200      	movs	r2, #0
 8010160:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8010162:	4b0e      	ldr	r3, [pc, #56]	; (801019c <run_shortest+0x12d4>)
 8010164:	2200      	movs	r2, #0
 8010166:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010168:	4b0d      	ldr	r3, [pc, #52]	; (80101a0 <run_shortest+0x12d8>)
 801016a:	2200      	movs	r2, #0
 801016c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 801016e:	2000      	movs	r0, #0
 8010170:	f7f7 fc08 	bl	8007984 <pl_DriveMotor_standby>
	t = 0;
 8010174:	4b0b      	ldr	r3, [pc, #44]	; (80101a4 <run_shortest+0x12dc>)
 8010176:	2200      	movs	r2, #0
 8010178:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 801017a:	e034      	b.n	80101e6 <run_shortest+0x131e>
 801017c:	f3af 8000 	nop.w
 8010180:	c022ec18 	.word	0xc022ec18
 8010184:	404fd1de 	.word	0x404fd1de
 8010188:	20000828 	.word	0x20000828
 801018c:	2000083c 	.word	0x2000083c
 8010190:	00000000 	.word	0x00000000
 8010194:	42b40000 	.word	0x42b40000
 8010198:	20000834 	.word	0x20000834
 801019c:	20000808 	.word	0x20000808
 80101a0:	2000d96c 	.word	0x2000d96c
 80101a4:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 80101a8:	4b2b      	ldr	r3, [pc, #172]	; (8010258 <run_shortest+0x1390>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	4b2a      	ldr	r3, [pc, #168]	; (8010258 <run_shortest+0x1390>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	492a      	ldr	r1, [pc, #168]	; (801025c <run_shortest+0x1394>)
 80101b2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80101b6:	4a2a      	ldr	r2, [pc, #168]	; (8010260 <run_shortest+0x1398>)
 80101b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 80101bc:	4b26      	ldr	r3, [pc, #152]	; (8010258 <run_shortest+0x1390>)
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	4a25      	ldr	r2, [pc, #148]	; (8010258 <run_shortest+0x1390>)
 80101c2:	6812      	ldr	r2, [r2, #0]
 80101c4:	4925      	ldr	r1, [pc, #148]	; (801025c <run_shortest+0x1394>)
 80101c6:	330c      	adds	r3, #12
 80101c8:	005b      	lsls	r3, r3, #1
 80101ca:	440b      	add	r3, r1
 80101cc:	88d8      	ldrh	r0, [r3, #6]
 80101ce:	4924      	ldr	r1, [pc, #144]	; (8010260 <run_shortest+0x1398>)
 80101d0:	f102 030c 	add.w	r3, r2, #12
 80101d4:	005b      	lsls	r3, r3, #1
 80101d6:	440b      	add	r3, r1
 80101d8:	4602      	mov	r2, r0
 80101da:	80da      	strh	r2, [r3, #6]
		t++;
 80101dc:	4b1e      	ldr	r3, [pc, #120]	; (8010258 <run_shortest+0x1390>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	3301      	adds	r3, #1
 80101e2:	4a1d      	ldr	r2, [pc, #116]	; (8010258 <run_shortest+0x1390>)
 80101e4:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80101e6:	4b1c      	ldr	r3, [pc, #112]	; (8010258 <run_shortest+0x1390>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	2b0e      	cmp	r3, #14
 80101ec:	dddc      	ble.n	80101a8 <run_shortest+0x12e0>
	}
	t = 0;
 80101ee:	4b1a      	ldr	r3, [pc, #104]	; (8010258 <run_shortest+0x1390>)
 80101f0:	2200      	movs	r2, #0
 80101f2:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 80101f4:	e026      	b.n	8010244 <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 80101f6:	4b18      	ldr	r3, [pc, #96]	; (8010258 <run_shortest+0x1390>)
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	4a19      	ldr	r2, [pc, #100]	; (8010260 <run_shortest+0x1398>)
 80101fc:	331c      	adds	r3, #28
 80101fe:	005b      	lsls	r3, r3, #1
 8010200:	4413      	add	r3, r2
 8010202:	889a      	ldrh	r2, [r3, #4]
 8010204:	4b14      	ldr	r3, [pc, #80]	; (8010258 <run_shortest+0x1390>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	43d2      	mvns	r2, r2
 801020a:	b291      	uxth	r1, r2
 801020c:	4a14      	ldr	r2, [pc, #80]	; (8010260 <run_shortest+0x1398>)
 801020e:	331c      	adds	r3, #28
 8010210:	005b      	lsls	r3, r3, #1
 8010212:	4413      	add	r3, r2
 8010214:	460a      	mov	r2, r1
 8010216:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010218:	4b0f      	ldr	r3, [pc, #60]	; (8010258 <run_shortest+0x1390>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	4a10      	ldr	r2, [pc, #64]	; (8010260 <run_shortest+0x1398>)
 801021e:	332c      	adds	r3, #44	; 0x2c
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	4413      	add	r3, r2
 8010224:	885a      	ldrh	r2, [r3, #2]
 8010226:	4b0c      	ldr	r3, [pc, #48]	; (8010258 <run_shortest+0x1390>)
 8010228:	681b      	ldr	r3, [r3, #0]
 801022a:	43d2      	mvns	r2, r2
 801022c:	b291      	uxth	r1, r2
 801022e:	4a0c      	ldr	r2, [pc, #48]	; (8010260 <run_shortest+0x1398>)
 8010230:	332c      	adds	r3, #44	; 0x2c
 8010232:	005b      	lsls	r3, r3, #1
 8010234:	4413      	add	r3, r2
 8010236:	460a      	mov	r2, r1
 8010238:	805a      	strh	r2, [r3, #2]
		t++;
 801023a:	4b07      	ldr	r3, [pc, #28]	; (8010258 <run_shortest+0x1390>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	3301      	adds	r3, #1
 8010240:	4a05      	ldr	r2, [pc, #20]	; (8010258 <run_shortest+0x1390>)
 8010242:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010244:	4b04      	ldr	r3, [pc, #16]	; (8010258 <run_shortest+0x1390>)
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	2b0e      	cmp	r3, #14
 801024a:	ddd4      	ble.n	80101f6 <run_shortest+0x132e>
	}

}
 801024c:	bf00      	nop
 801024e:	bf00      	nop
 8010250:	3740      	adds	r7, #64	; 0x40
 8010252:	46bd      	mov	sp, r7
 8010254:	bdb0      	pop	{r4, r5, r7, pc}
 8010256:	bf00      	nop
 8010258:	20000c38 	.word	0x20000c38
 801025c:	20000cb4 	.word	0x20000cb4
 8010260:	20000c3c 	.word	0x20000c3c

08010264 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8010264:	b580      	push	{r7, lr}
 8010266:	b08a      	sub	sp, #40	; 0x28
 8010268:	af02      	add	r7, sp, #8
 801026a:	60f8      	str	r0, [r7, #12]
 801026c:	60b9      	str	r1, [r7, #8]
 801026e:	607a      	str	r2, [r7, #4]
 8010270:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8010272:	2301      	movs	r3, #1
 8010274:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8010276:	2301      	movs	r3, #1
 8010278:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 801027a:	2301      	movs	r3, #1
 801027c:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8010282:	68bb      	ldr	r3, [r7, #8]
 8010284:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8010286:	f107 0114 	add.w	r1, r7, #20
 801028a:	f107 0318 	add.w	r3, r7, #24
 801028e:	687a      	ldr	r2, [r7, #4]
 8010290:	4618      	mov	r0, r3
 8010292:	f7fd fe3f 	bl	800df14 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8010296:	69b8      	ldr	r0, [r7, #24]
 8010298:	6979      	ldr	r1, [r7, #20]
 801029a:	f107 021e 	add.w	r2, r7, #30
 801029e:	f107 031c 	add.w	r3, r7, #28
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	f107 031d 	add.w	r3, r7, #29
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4613      	mov	r3, r2
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	f000 fe27 	bl	8010f00 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 80102b2:	7fbb      	ldrb	r3, [r7, #30]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d007      	beq.n	80102c8 <decision_kitiku+0x64>
 80102b8:	7f7b      	ldrb	r3, [r7, #29]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d004      	beq.n	80102c8 <decision_kitiku+0x64>
 80102be:	7f3b      	ldrb	r3, [r7, #28]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d001      	beq.n	80102c8 <decision_kitiku+0x64>
 80102c4:	2301      	movs	r3, #1
 80102c6:	e000      	b.n	80102ca <decision_kitiku+0x66>
 80102c8:	2300      	movs	r3, #0
 80102ca:	77fb      	strb	r3, [r7, #31]
 80102cc:	7ffb      	ldrb	r3, [r7, #31]
 80102ce:	f003 0301 	and.w	r3, r3, #1
 80102d2:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 80102d4:	7ffb      	ldrb	r3, [r7, #31]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d02b      	beq.n	8010332 <decision_kitiku+0xce>
 80102da:	887a      	ldrh	r2, [r7, #2]
 80102dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80102de:	429a      	cmp	r2, r3
 80102e0:	d827      	bhi.n	8010332 <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 80102e2:	887a      	ldrh	r2, [r7, #2]
 80102e4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d823      	bhi.n	8010332 <decision_kitiku+0xce>
 80102ea:	887a      	ldrh	r2, [r7, #2]
 80102ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d81f      	bhi.n	8010332 <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d102      	bne.n	80102fe <decision_kitiku+0x9a>
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	2b0d      	cmp	r3, #13
 80102fc:	dc11      	bgt.n	8010322 <decision_kitiku+0xbe>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2b02      	cmp	r3, #2
 8010302:	d102      	bne.n	801030a <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2b0d      	cmp	r3, #13
 8010308:	dc0b      	bgt.n	8010322 <decision_kitiku+0xbe>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2b03      	cmp	r3, #3
 801030e:	d102      	bne.n	8010316 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	2b01      	cmp	r3, #1
 8010314:	dd05      	ble.n	8010322 <decision_kitiku+0xbe>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2b04      	cmp	r3, #4
 801031a:	d106      	bne.n	801032a <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	2b01      	cmp	r3, #1
 8010320:	dc03      	bgt.n	801032a <decision_kitiku+0xc6>
			kitikukan = 0;
 8010322:	4b08      	ldr	r3, [pc, #32]	; (8010344 <decision_kitiku+0xe0>)
 8010324:	2200      	movs	r2, #0
 8010326:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010328:	e007      	b.n	801033a <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 801032a:	4b06      	ldr	r3, [pc, #24]	; (8010344 <decision_kitiku+0xe0>)
 801032c:	2201      	movs	r2, #1
 801032e:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010330:	e003      	b.n	801033a <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8010332:	4b04      	ldr	r3, [pc, #16]	; (8010344 <decision_kitiku+0xe0>)
 8010334:	2200      	movs	r2, #0
 8010336:	601a      	str	r2, [r3, #0]
	}


}
 8010338:	bf00      	nop
 801033a:	bf00      	nop
 801033c:	3720      	adds	r7, #32
 801033e:	46bd      	mov	sp, r7
 8010340:	bd80      	pop	{r7, pc}
 8010342:	bf00      	nop
 8010344:	20000838 	.word	0x20000838

08010348 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034a:	b099      	sub	sp, #100	; 0x64
 801034c:	af04      	add	r7, sp, #16
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 8010354:	4b9f      	ldr	r3, [pc, #636]	; (80105d4 <compress_kitiku+0x28c>)
 8010356:	2201      	movs	r2, #1
 8010358:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 801035a:	4b9f      	ldr	r3, [pc, #636]	; (80105d8 <compress_kitiku+0x290>)
 801035c:	2201      	movs	r2, #1
 801035e:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	637b      	str	r3, [r7, #52]	; 0x34
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	633b      	str	r3, [r7, #48]	; 0x30
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 8010372:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010376:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801037a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801037c:	4618      	mov	r0, r3
 801037e:	f7fd fdc9 	bl	800df14 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 8010382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010388:	62bb      	str	r3, [r7, #40]	; 0x28
 801038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038c:	627b      	str	r3, [r7, #36]	; 0x24
 801038e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010390:	623b      	str	r3, [r7, #32]
 8010392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010394:	61fb      	str	r3, [r7, #28]
 8010396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010398:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 801039a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801039e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80103a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fd fdb5 	bl	800df14 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 80103aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80103ae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80103b2:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80103b6:	9301      	str	r3, [sp, #4]
 80103b8:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80103bc:	9300      	str	r3, [sp, #0]
 80103be:	4613      	mov	r3, r2
 80103c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80103c2:	f000 fd9d 	bl	8010f00 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 80103c6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d009      	beq.n	80103e2 <compress_kitiku+0x9a>
 80103ce:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d005      	beq.n	80103e2 <compress_kitiku+0x9a>
 80103d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d001      	beq.n	80103e2 <compress_kitiku+0x9a>
 80103de:	2301      	movs	r3, #1
 80103e0:	e000      	b.n	80103e4 <compress_kitiku+0x9c>
 80103e2:	2300      	movs	r3, #0
 80103e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80103e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80103ec:	f003 0301 	and.w	r3, r3, #1
 80103f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 80103f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103f6:	2b04      	cmp	r3, #4
 80103f8:	d102      	bne.n	8010400 <compress_kitiku+0xb8>
 80103fa:	2301      	movs	r3, #1
 80103fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80103fe:	e002      	b.n	8010406 <compress_kitiku+0xbe>
 8010400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010402:	3301      	adds	r3, #1
 8010404:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 8010406:	f107 0120 	add.w	r1, r7, #32
 801040a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801040e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010410:	4618      	mov	r0, r3
 8010412:	f7fd fd7f 	bl	800df14 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010416:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010418:	6a39      	ldr	r1, [r7, #32]
 801041a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801041e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010422:	9301      	str	r3, [sp, #4]
 8010424:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010428:	9300      	str	r3, [sp, #0]
 801042a:	4613      	mov	r3, r2
 801042c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801042e:	f000 fd67 	bl	8010f00 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8010432:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010436:	2b00      	cmp	r3, #0
 8010438:	d009      	beq.n	801044e <compress_kitiku+0x106>
 801043a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801043e:	2b00      	cmp	r3, #0
 8010440:	d005      	beq.n	801044e <compress_kitiku+0x106>
 8010442:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <compress_kitiku+0x106>
 801044a:	2301      	movs	r3, #1
 801044c:	e000      	b.n	8010450 <compress_kitiku+0x108>
 801044e:	2300      	movs	r3, #0
 8010450:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010454:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010458:	f003 0301 	and.w	r3, r3, #1
 801045c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010462:	2b01      	cmp	r3, #1
 8010464:	d102      	bne.n	801046c <compress_kitiku+0x124>
 8010466:	2304      	movs	r3, #4
 8010468:	647b      	str	r3, [r7, #68]	; 0x44
 801046a:	e002      	b.n	8010472 <compress_kitiku+0x12a>
 801046c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801046e:	3b01      	subs	r3, #1
 8010470:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 8010472:	f107 0118 	add.w	r1, r7, #24
 8010476:	f107 031c 	add.w	r3, r7, #28
 801047a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801047c:	4618      	mov	r0, r3
 801047e:	f7fd fd49 	bl	800df14 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 8010482:	69f8      	ldr	r0, [r7, #28]
 8010484:	69b9      	ldr	r1, [r7, #24]
 8010486:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801048a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801048e:	9301      	str	r3, [sp, #4]
 8010490:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010494:	9300      	str	r3, [sp, #0]
 8010496:	4613      	mov	r3, r2
 8010498:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801049a:	f000 fd31 	bl	8010f00 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 801049e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d009      	beq.n	80104ba <compress_kitiku+0x172>
 80104a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d005      	beq.n	80104ba <compress_kitiku+0x172>
 80104ae:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d001      	beq.n	80104ba <compress_kitiku+0x172>
 80104b6:	2301      	movs	r3, #1
 80104b8:	e000      	b.n	80104bc <compress_kitiku+0x174>
 80104ba:	2300      	movs	r3, #0
 80104bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80104c0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80104c4:	f003 0301 	and.w	r3, r3, #1
 80104c8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 80104cc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80104ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104d0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80104d4:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80104d8:	9301      	str	r3, [sp, #4]
 80104da:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	4613      	mov	r3, r2
 80104e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104e4:	f000 fb98 	bl	8010c18 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 80104e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104ec:	f107 0610 	add.w	r6, r7, #16
 80104f0:	f107 0512 	add.w	r5, r7, #18
 80104f4:	f107 0414 	add.w	r4, r7, #20
 80104f8:	f107 0016 	add.w	r0, r7, #22
 80104fc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80104fe:	9102      	str	r1, [sp, #8]
 8010500:	9201      	str	r2, [sp, #4]
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	4633      	mov	r3, r6
 8010506:	462a      	mov	r2, r5
 8010508:	4621      	mov	r1, r4
 801050a:	f000 fe79 	bl	8011200 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 801050e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <compress_kitiku+0x1d2>
 8010516:	23ff      	movs	r3, #255	; 0xff
 8010518:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 801051a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801051e:	2b00      	cmp	r3, #0
 8010520:	d001      	beq.n	8010526 <compress_kitiku+0x1de>
 8010522:	23ff      	movs	r3, #255	; 0xff
 8010524:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010526:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801052a:	2b00      	cmp	r3, #0
 801052c:	d001      	beq.n	8010532 <compress_kitiku+0x1ea>
 801052e:	23ff      	movs	r3, #255	; 0xff
 8010530:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[16 * x_now + y_now] <= 1) {
 8010532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010534:	011a      	lsls	r2, r3, #4
 8010536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010538:	4413      	add	r3, r2
 801053a:	4a28      	ldr	r2, [pc, #160]	; (80105dc <compress_kitiku+0x294>)
 801053c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010540:	2b01      	cmp	r3, #1
 8010542:	f240 80a9 	bls.w	8010698 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 8010546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010548:	2b01      	cmp	r3, #1
 801054a:	d103      	bne.n	8010554 <compress_kitiku+0x20c>
 801054c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054e:	2b0d      	cmp	r3, #13
 8010550:	f300 80a4 	bgt.w	801069c <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 8010554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010556:	2b02      	cmp	r3, #2
 8010558:	d103      	bne.n	8010562 <compress_kitiku+0x21a>
 801055a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801055c:	2b0d      	cmp	r3, #13
 801055e:	f300 809f 	bgt.w	80106a0 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 8010562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010564:	2b03      	cmp	r3, #3
 8010566:	d103      	bne.n	8010570 <compress_kitiku+0x228>
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	2b01      	cmp	r3, #1
 801056c:	f340 809a 	ble.w	80106a4 <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 8010570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010572:	2b04      	cmp	r3, #4
 8010574:	d103      	bne.n	801057e <compress_kitiku+0x236>
 8010576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010578:	2b01      	cmp	r3, #1
 801057a:	f340 8095 	ble.w	80106a8 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 801057e:	8afb      	ldrh	r3, [r7, #22]
 8010580:	2bff      	cmp	r3, #255	; 0xff
 8010582:	d10c      	bne.n	801059e <compress_kitiku+0x256>
 8010584:	8abb      	ldrh	r3, [r7, #20]
 8010586:	2bff      	cmp	r3, #255	; 0xff
 8010588:	d109      	bne.n	801059e <compress_kitiku+0x256>
 801058a:	8a3b      	ldrh	r3, [r7, #16]
 801058c:	2bff      	cmp	r3, #255	; 0xff
 801058e:	d106      	bne.n	801059e <compress_kitiku+0x256>
 8010590:	8a7b      	ldrh	r3, [r7, #18]
 8010592:	2bff      	cmp	r3, #255	; 0xff
 8010594:	d103      	bne.n	801059e <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 8010596:	4b12      	ldr	r3, [pc, #72]	; (80105e0 <compress_kitiku+0x298>)
 8010598:	2201      	movs	r2, #1
 801059a:	701a      	strb	r2, [r3, #0]
		break;
 801059c:	e087      	b.n	80106ae <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801059e:	8afa      	ldrh	r2, [r7, #22]
 80105a0:	8abb      	ldrh	r3, [r7, #20]
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d81e      	bhi.n	80105e4 <compress_kitiku+0x29c>
 80105a6:	8afa      	ldrh	r2, [r7, #22]
 80105a8:	8a3b      	ldrh	r3, [r7, #16]
 80105aa:	429a      	cmp	r2, r3
 80105ac:	d81a      	bhi.n	80105e4 <compress_kitiku+0x29c>
 80105ae:	8afa      	ldrh	r2, [r7, #22]
 80105b0:	8a7b      	ldrh	r3, [r7, #18]
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d816      	bhi.n	80105e4 <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 80105b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d005      	beq.n	80105ca <compress_kitiku+0x282>
				kitiku_distance += 2;
 80105be:	4b05      	ldr	r3, [pc, #20]	; (80105d4 <compress_kitiku+0x28c>)
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	3302      	adds	r3, #2
 80105c4:	4a03      	ldr	r2, [pc, #12]	; (80105d4 <compress_kitiku+0x28c>)
 80105c6:	6013      	str	r3, [r2, #0]
 80105c8:	e00c      	b.n	80105e4 <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 80105ca:	4b03      	ldr	r3, [pc, #12]	; (80105d8 <compress_kitiku+0x290>)
 80105cc:	2200      	movs	r2, #0
 80105ce:	701a      	strb	r2, [r3, #0]
				break;
 80105d0:	e06d      	b.n	80106ae <compress_kitiku+0x366>
 80105d2:	bf00      	nop
 80105d4:	2000082c 	.word	0x2000082c
 80105d8:	20000829 	.word	0x20000829
 80105dc:	20000d2c 	.word	0x20000d2c
 80105e0:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 80105e4:	8aba      	ldrh	r2, [r7, #20]
 80105e6:	8afb      	ldrh	r3, [r7, #22]
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d213      	bcs.n	8010614 <compress_kitiku+0x2cc>
 80105ec:	8aba      	ldrh	r2, [r7, #20]
 80105ee:	8a3b      	ldrh	r3, [r7, #16]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d80f      	bhi.n	8010614 <compress_kitiku+0x2cc>
 80105f4:	8aba      	ldrh	r2, [r7, #20]
 80105f6:	8a7b      	ldrh	r3, [r7, #18]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d80b      	bhi.n	8010614 <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 80105fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010600:	2b00      	cmp	r3, #0
 8010602:	d003      	beq.n	801060c <compress_kitiku+0x2c4>
				kitiku = 0;
 8010604:	4b40      	ldr	r3, [pc, #256]	; (8010708 <compress_kitiku+0x3c0>)
 8010606:	2200      	movs	r2, #0
 8010608:	701a      	strb	r2, [r3, #0]
				break;
 801060a:	e050      	b.n	80106ae <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801060c:	4b3e      	ldr	r3, [pc, #248]	; (8010708 <compress_kitiku+0x3c0>)
 801060e:	2200      	movs	r2, #0
 8010610:	701a      	strb	r2, [r3, #0]
				break;
 8010612:	e04c      	b.n	80106ae <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8010614:	8a3a      	ldrh	r2, [r7, #16]
 8010616:	8afb      	ldrh	r3, [r7, #22]
 8010618:	429a      	cmp	r2, r3
 801061a:	d213      	bcs.n	8010644 <compress_kitiku+0x2fc>
 801061c:	8a3a      	ldrh	r2, [r7, #16]
 801061e:	8abb      	ldrh	r3, [r7, #20]
 8010620:	429a      	cmp	r2, r3
 8010622:	d20f      	bcs.n	8010644 <compress_kitiku+0x2fc>
 8010624:	8a3a      	ldrh	r2, [r7, #16]
 8010626:	8a7b      	ldrh	r3, [r7, #18]
 8010628:	429a      	cmp	r2, r3
 801062a:	d80b      	bhi.n	8010644 <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 801062c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010630:	2b00      	cmp	r3, #0
 8010632:	d003      	beq.n	801063c <compress_kitiku+0x2f4>
				kitiku = 0;
 8010634:	4b34      	ldr	r3, [pc, #208]	; (8010708 <compress_kitiku+0x3c0>)
 8010636:	2200      	movs	r2, #0
 8010638:	701a      	strb	r2, [r3, #0]
				break;
 801063a:	e038      	b.n	80106ae <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801063c:	4b32      	ldr	r3, [pc, #200]	; (8010708 <compress_kitiku+0x3c0>)
 801063e:	2200      	movs	r2, #0
 8010640:	701a      	strb	r2, [r3, #0]
				break;
 8010642:	e034      	b.n	80106ae <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 8010644:	8a7a      	ldrh	r2, [r7, #18]
 8010646:	8afb      	ldrh	r3, [r7, #22]
 8010648:	429a      	cmp	r2, r3
 801064a:	d20b      	bcs.n	8010664 <compress_kitiku+0x31c>
 801064c:	8a7a      	ldrh	r2, [r7, #18]
 801064e:	8abb      	ldrh	r3, [r7, #20]
 8010650:	429a      	cmp	r2, r3
 8010652:	d207      	bcs.n	8010664 <compress_kitiku+0x31c>
								&& back_count < left_count){
 8010654:	8a7a      	ldrh	r2, [r7, #18]
 8010656:	8a3b      	ldrh	r3, [r7, #16]
 8010658:	429a      	cmp	r2, r3
 801065a:	d203      	bcs.n	8010664 <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 801065c:	4b2a      	ldr	r3, [pc, #168]	; (8010708 <compress_kitiku+0x3c0>)
 801065e:	2200      	movs	r2, #0
 8010660:	701a      	strb	r2, [r3, #0]
			break;
 8010662:	e024      	b.n	80106ae <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 8010664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010666:	2b05      	cmp	r3, #5
 8010668:	d101      	bne.n	801066e <compress_kitiku+0x326>
			direction_now = 1;
 801066a:	2301      	movs	r3, #1
 801066c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 801066e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010670:	2b06      	cmp	r3, #6
 8010672:	d101      	bne.n	8010678 <compress_kitiku+0x330>
			direction_now = 2;
 8010674:	2302      	movs	r3, #2
 8010676:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 8010678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <compress_kitiku+0x33a>
			direction_now = 4;
 801067e:	2304      	movs	r3, #4
 8010680:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 8010682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010688:	d101      	bne.n	801068e <compress_kitiku+0x346>
			direction_now = 3;
 801068a:	2303      	movs	r3, #3
 801068c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 801068e:	4b1e      	ldr	r3, [pc, #120]	; (8010708 <compress_kitiku+0x3c0>)
 8010690:	781b      	ldrb	r3, [r3, #0]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00a      	beq.n	80106ac <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 8010696:	e66c      	b.n	8010372 <compress_kitiku+0x2a>
			break;
 8010698:	bf00      	nop
 801069a:	e008      	b.n	80106ae <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 801069c:	bf00      	nop
 801069e:	e006      	b.n	80106ae <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 80106a0:	bf00      	nop
 80106a2:	e004      	b.n	80106ae <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 80106a4:	bf00      	nop
 80106a6:	e002      	b.n	80106ae <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 80106a8:	bf00      	nop
 80106aa:	e000      	b.n	80106ae <compress_kitiku+0x366>

			break;
 80106ac:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80106ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106b0:	3302      	adds	r3, #2
 80106b2:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 80106b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106b6:	2b05      	cmp	r3, #5
 80106b8:	d101      	bne.n	80106be <compress_kitiku+0x376>
				direction2 = 1;
 80106ba:	2301      	movs	r3, #1
 80106bc:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 80106be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106c0:	2b06      	cmp	r3, #6
 80106c2:	d101      	bne.n	80106c8 <compress_kitiku+0x380>
				direction2 = 2;
 80106c4:	2302      	movs	r3, #2
 80106c6:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 80106c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d101      	bne.n	80106d2 <compress_kitiku+0x38a>
				direction2 = 4;
 80106ce:	2304      	movs	r3, #4
 80106d0:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 80106d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80106d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106d8:	d101      	bne.n	80106de <compress_kitiku+0x396>
				direction2 = 3;
 80106da:	2303      	movs	r3, #3
 80106dc:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 80106de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80106e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80106e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fd fc13 	bl	800df14 <update_coordinate>

	*x=x_now;
 80106ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	601a      	str	r2, [r3, #0]
	*y=y_now;
 80106f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106fe:	601a      	str	r2, [r3, #0]

}
 8010700:	bf00      	nop
 8010702:	3754      	adds	r7, #84	; 0x54
 8010704:	46bd      	mov	sp, r7
 8010706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010708:	20000829 	.word	0x20000829

0801070c <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 801070c:	b480      	push	{r7}
 801070e:	b085      	sub	sp, #20
 8010710:	af00      	add	r7, sp, #0
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	607a      	str	r2, [r7, #4]
 8010718:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	3b01      	subs	r3, #1
 801071e:	2b03      	cmp	r3, #3
 8010720:	f200 8272 	bhi.w	8010c08 <update_wall+0x4fc>
 8010724:	a201      	add	r2, pc, #4	; (adr r2, 801072c <update_wall+0x20>)
 8010726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801072a:	bf00      	nop
 801072c:	0801073d 	.word	0x0801073d
 8010730:	08010863 	.word	0x08010863
 8010734:	08010999 	.word	0x08010999
 8010738:	08010ac7 	.word	0x08010ac7
	case 1:
		if (y <= 14) {
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	2b0e      	cmp	r3, #14
 8010740:	dc2e      	bgt.n	80107a0 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010742:	4a94      	ldr	r2, [pc, #592]	; (8010994 <update_wall+0x288>)
 8010744:	68bb      	ldr	r3, [r7, #8]
 8010746:	332c      	adds	r3, #44	; 0x2c
 8010748:	005b      	lsls	r3, r3, #1
 801074a:	4413      	add	r3, r2
 801074c:	885b      	ldrh	r3, [r3, #2]
 801074e:	b21a      	sxth	r2, r3
 8010750:	2101      	movs	r1, #1
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	fa01 f303 	lsl.w	r3, r1, r3
 8010758:	b21b      	sxth	r3, r3
 801075a:	4313      	orrs	r3, r2
 801075c:	b21b      	sxth	r3, r3
 801075e:	b299      	uxth	r1, r3
 8010760:	4a8c      	ldr	r2, [pc, #560]	; (8010994 <update_wall+0x288>)
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	332c      	adds	r3, #44	; 0x2c
 8010766:	005b      	lsls	r3, r3, #1
 8010768:	4413      	add	r3, r2
 801076a:	460a      	mov	r2, r1
 801076c:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 801076e:	78fb      	ldrb	r3, [r7, #3]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d015      	beq.n	80107a0 <update_wall+0x94>
 8010774:	4a87      	ldr	r2, [pc, #540]	; (8010994 <update_wall+0x288>)
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	330c      	adds	r3, #12
 801077a:	005b      	lsls	r3, r3, #1
 801077c:	4413      	add	r3, r2
 801077e:	88db      	ldrh	r3, [r3, #6]
 8010780:	b21a      	sxth	r2, r3
 8010782:	2101      	movs	r1, #1
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	fa01 f303 	lsl.w	r3, r1, r3
 801078a:	b21b      	sxth	r3, r3
 801078c:	4313      	orrs	r3, r2
 801078e:	b21b      	sxth	r3, r3
 8010790:	b299      	uxth	r1, r3
 8010792:	4a80      	ldr	r2, [pc, #512]	; (8010994 <update_wall+0x288>)
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	330c      	adds	r3, #12
 8010798:	005b      	lsls	r3, r3, #1
 801079a:	4413      	add	r3, r2
 801079c:	460a      	mov	r2, r1
 801079e:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 80107a0:	68fb      	ldr	r3, [r7, #12]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	dd2d      	ble.n	8010802 <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	3b01      	subs	r3, #1
 80107aa:	4a7a      	ldr	r2, [pc, #488]	; (8010994 <update_wall+0x288>)
 80107ac:	331c      	adds	r3, #28
 80107ae:	005b      	lsls	r3, r3, #1
 80107b0:	4413      	add	r3, r2
 80107b2:	889b      	ldrh	r3, [r3, #4]
 80107b4:	b21a      	sxth	r2, r3
 80107b6:	2101      	movs	r1, #1
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	fa01 f303 	lsl.w	r3, r1, r3
 80107be:	b21b      	sxth	r3, r3
 80107c0:	4313      	orrs	r3, r2
 80107c2:	b21a      	sxth	r2, r3
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	3b01      	subs	r3, #1
 80107c8:	b291      	uxth	r1, r2
 80107ca:	4a72      	ldr	r2, [pc, #456]	; (8010994 <update_wall+0x288>)
 80107cc:	331c      	adds	r3, #28
 80107ce:	005b      	lsls	r3, r3, #1
 80107d0:	4413      	add	r3, r2
 80107d2:	460a      	mov	r2, r1
 80107d4:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 80107d6:	7f3b      	ldrb	r3, [r7, #28]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d012      	beq.n	8010802 <update_wall+0xf6>
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	3b01      	subs	r3, #1
 80107e0:	4a6c      	ldr	r2, [pc, #432]	; (8010994 <update_wall+0x288>)
 80107e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80107e6:	b21a      	sxth	r2, r3
 80107e8:	2101      	movs	r1, #1
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	fa01 f303 	lsl.w	r3, r1, r3
 80107f0:	b21b      	sxth	r3, r3
 80107f2:	4313      	orrs	r3, r2
 80107f4:	b21a      	sxth	r2, r3
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	3b01      	subs	r3, #1
 80107fa:	b291      	uxth	r1, r2
 80107fc:	4a65      	ldr	r2, [pc, #404]	; (8010994 <update_wall+0x288>)
 80107fe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	2b0e      	cmp	r3, #14
 8010806:	f300 81f8 	bgt.w	8010bfa <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 801080a:	4a62      	ldr	r2, [pc, #392]	; (8010994 <update_wall+0x288>)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	331c      	adds	r3, #28
 8010810:	005b      	lsls	r3, r3, #1
 8010812:	4413      	add	r3, r2
 8010814:	889b      	ldrh	r3, [r3, #4]
 8010816:	b21a      	sxth	r2, r3
 8010818:	2101      	movs	r1, #1
 801081a:	68bb      	ldr	r3, [r7, #8]
 801081c:	fa01 f303 	lsl.w	r3, r1, r3
 8010820:	b21b      	sxth	r3, r3
 8010822:	4313      	orrs	r3, r2
 8010824:	b21b      	sxth	r3, r3
 8010826:	b299      	uxth	r1, r3
 8010828:	4a5a      	ldr	r2, [pc, #360]	; (8010994 <update_wall+0x288>)
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	331c      	adds	r3, #28
 801082e:	005b      	lsls	r3, r3, #1
 8010830:	4413      	add	r3, r2
 8010832:	460a      	mov	r2, r1
 8010834:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010836:	7e3b      	ldrb	r3, [r7, #24]
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 81de 	beq.w	8010bfa <update_wall+0x4ee>
 801083e:	4a55      	ldr	r2, [pc, #340]	; (8010994 <update_wall+0x288>)
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010846:	b21a      	sxth	r2, r3
 8010848:	2101      	movs	r1, #1
 801084a:	68bb      	ldr	r3, [r7, #8]
 801084c:	fa01 f303 	lsl.w	r3, r1, r3
 8010850:	b21b      	sxth	r3, r3
 8010852:	4313      	orrs	r3, r2
 8010854:	b21b      	sxth	r3, r3
 8010856:	b299      	uxth	r1, r3
 8010858:	4a4e      	ldr	r2, [pc, #312]	; (8010994 <update_wall+0x288>)
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010860:	e1cb      	b.n	8010bfa <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2b0e      	cmp	r3, #14
 8010866:	dc29      	bgt.n	80108bc <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010868:	4a4a      	ldr	r2, [pc, #296]	; (8010994 <update_wall+0x288>)
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	331c      	adds	r3, #28
 801086e:	005b      	lsls	r3, r3, #1
 8010870:	4413      	add	r3, r2
 8010872:	889b      	ldrh	r3, [r3, #4]
 8010874:	b21a      	sxth	r2, r3
 8010876:	2101      	movs	r1, #1
 8010878:	68bb      	ldr	r3, [r7, #8]
 801087a:	fa01 f303 	lsl.w	r3, r1, r3
 801087e:	b21b      	sxth	r3, r3
 8010880:	4313      	orrs	r3, r2
 8010882:	b21b      	sxth	r3, r3
 8010884:	b299      	uxth	r1, r3
 8010886:	4a43      	ldr	r2, [pc, #268]	; (8010994 <update_wall+0x288>)
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	331c      	adds	r3, #28
 801088c:	005b      	lsls	r3, r3, #1
 801088e:	4413      	add	r3, r2
 8010890:	460a      	mov	r2, r1
 8010892:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010894:	78fb      	ldrb	r3, [r7, #3]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d010      	beq.n	80108bc <update_wall+0x1b0>
 801089a:	4a3e      	ldr	r2, [pc, #248]	; (8010994 <update_wall+0x288>)
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108a2:	b21a      	sxth	r2, r3
 80108a4:	2101      	movs	r1, #1
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	fa01 f303 	lsl.w	r3, r1, r3
 80108ac:	b21b      	sxth	r3, r3
 80108ae:	4313      	orrs	r3, r2
 80108b0:	b21b      	sxth	r3, r3
 80108b2:	b299      	uxth	r1, r3
 80108b4:	4a37      	ldr	r2, [pc, #220]	; (8010994 <update_wall+0x288>)
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2b0e      	cmp	r3, #14
 80108c0:	dc2e      	bgt.n	8010920 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80108c2:	4a34      	ldr	r2, [pc, #208]	; (8010994 <update_wall+0x288>)
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	332c      	adds	r3, #44	; 0x2c
 80108c8:	005b      	lsls	r3, r3, #1
 80108ca:	4413      	add	r3, r2
 80108cc:	885b      	ldrh	r3, [r3, #2]
 80108ce:	b21a      	sxth	r2, r3
 80108d0:	2101      	movs	r1, #1
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	fa01 f303 	lsl.w	r3, r1, r3
 80108d8:	b21b      	sxth	r3, r3
 80108da:	4313      	orrs	r3, r2
 80108dc:	b21b      	sxth	r3, r3
 80108de:	b299      	uxth	r1, r3
 80108e0:	4a2c      	ldr	r2, [pc, #176]	; (8010994 <update_wall+0x288>)
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	332c      	adds	r3, #44	; 0x2c
 80108e6:	005b      	lsls	r3, r3, #1
 80108e8:	4413      	add	r3, r2
 80108ea:	460a      	mov	r2, r1
 80108ec:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80108ee:	7f3b      	ldrb	r3, [r7, #28]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d015      	beq.n	8010920 <update_wall+0x214>
 80108f4:	4a27      	ldr	r2, [pc, #156]	; (8010994 <update_wall+0x288>)
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	330c      	adds	r3, #12
 80108fa:	005b      	lsls	r3, r3, #1
 80108fc:	4413      	add	r3, r2
 80108fe:	88db      	ldrh	r3, [r3, #6]
 8010900:	b21a      	sxth	r2, r3
 8010902:	2101      	movs	r1, #1
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	fa01 f303 	lsl.w	r3, r1, r3
 801090a:	b21b      	sxth	r3, r3
 801090c:	4313      	orrs	r3, r2
 801090e:	b21b      	sxth	r3, r3
 8010910:	b299      	uxth	r1, r3
 8010912:	4a20      	ldr	r2, [pc, #128]	; (8010994 <update_wall+0x288>)
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	330c      	adds	r3, #12
 8010918:	005b      	lsls	r3, r3, #1
 801091a:	4413      	add	r3, r2
 801091c:	460a      	mov	r2, r1
 801091e:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	2b00      	cmp	r3, #0
 8010924:	f340 816b 	ble.w	8010bfe <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	3b01      	subs	r3, #1
 801092c:	4a19      	ldr	r2, [pc, #100]	; (8010994 <update_wall+0x288>)
 801092e:	332c      	adds	r3, #44	; 0x2c
 8010930:	005b      	lsls	r3, r3, #1
 8010932:	4413      	add	r3, r2
 8010934:	885b      	ldrh	r3, [r3, #2]
 8010936:	b21a      	sxth	r2, r3
 8010938:	2101      	movs	r1, #1
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	fa01 f303 	lsl.w	r3, r1, r3
 8010940:	b21b      	sxth	r3, r3
 8010942:	4313      	orrs	r3, r2
 8010944:	b21a      	sxth	r2, r3
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	3b01      	subs	r3, #1
 801094a:	b291      	uxth	r1, r2
 801094c:	4a11      	ldr	r2, [pc, #68]	; (8010994 <update_wall+0x288>)
 801094e:	332c      	adds	r3, #44	; 0x2c
 8010950:	005b      	lsls	r3, r3, #1
 8010952:	4413      	add	r3, r2
 8010954:	460a      	mov	r2, r1
 8010956:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010958:	7e3b      	ldrb	r3, [r7, #24]
 801095a:	2b00      	cmp	r3, #0
 801095c:	f000 814f 	beq.w	8010bfe <update_wall+0x4f2>
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	3b01      	subs	r3, #1
 8010964:	4a0b      	ldr	r2, [pc, #44]	; (8010994 <update_wall+0x288>)
 8010966:	330c      	adds	r3, #12
 8010968:	005b      	lsls	r3, r3, #1
 801096a:	4413      	add	r3, r2
 801096c:	88db      	ldrh	r3, [r3, #6]
 801096e:	b21a      	sxth	r2, r3
 8010970:	2101      	movs	r1, #1
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	fa01 f303 	lsl.w	r3, r1, r3
 8010978:	b21b      	sxth	r3, r3
 801097a:	4313      	orrs	r3, r2
 801097c:	b21a      	sxth	r2, r3
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	3b01      	subs	r3, #1
 8010982:	b291      	uxth	r1, r2
 8010984:	4a03      	ldr	r2, [pc, #12]	; (8010994 <update_wall+0x288>)
 8010986:	330c      	adds	r3, #12
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	4413      	add	r3, r2
 801098c:	460a      	mov	r2, r1
 801098e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010990:	e135      	b.n	8010bfe <update_wall+0x4f2>
 8010992:	bf00      	nop
 8010994:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	2b00      	cmp	r3, #0
 801099c:	dd32      	ble.n	8010a04 <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	3b01      	subs	r3, #1
 80109a2:	4a9c      	ldr	r2, [pc, #624]	; (8010c14 <update_wall+0x508>)
 80109a4:	332c      	adds	r3, #44	; 0x2c
 80109a6:	005b      	lsls	r3, r3, #1
 80109a8:	4413      	add	r3, r2
 80109aa:	885b      	ldrh	r3, [r3, #2]
 80109ac:	b21a      	sxth	r2, r3
 80109ae:	2101      	movs	r1, #1
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	fa01 f303 	lsl.w	r3, r1, r3
 80109b6:	b21b      	sxth	r3, r3
 80109b8:	4313      	orrs	r3, r2
 80109ba:	b21a      	sxth	r2, r3
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	3b01      	subs	r3, #1
 80109c0:	b291      	uxth	r1, r2
 80109c2:	4a94      	ldr	r2, [pc, #592]	; (8010c14 <update_wall+0x508>)
 80109c4:	332c      	adds	r3, #44	; 0x2c
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	4413      	add	r3, r2
 80109ca:	460a      	mov	r2, r1
 80109cc:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d017      	beq.n	8010a04 <update_wall+0x2f8>
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	3b01      	subs	r3, #1
 80109d8:	4a8e      	ldr	r2, [pc, #568]	; (8010c14 <update_wall+0x508>)
 80109da:	330c      	adds	r3, #12
 80109dc:	005b      	lsls	r3, r3, #1
 80109de:	4413      	add	r3, r2
 80109e0:	88db      	ldrh	r3, [r3, #6]
 80109e2:	b21a      	sxth	r2, r3
 80109e4:	2101      	movs	r1, #1
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	fa01 f303 	lsl.w	r3, r1, r3
 80109ec:	b21b      	sxth	r3, r3
 80109ee:	4313      	orrs	r3, r2
 80109f0:	b21a      	sxth	r2, r3
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	3b01      	subs	r3, #1
 80109f6:	b291      	uxth	r1, r2
 80109f8:	4a86      	ldr	r2, [pc, #536]	; (8010c14 <update_wall+0x508>)
 80109fa:	330c      	adds	r3, #12
 80109fc:	005b      	lsls	r3, r3, #1
 80109fe:	4413      	add	r3, r2
 8010a00:	460a      	mov	r2, r1
 8010a02:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2b0e      	cmp	r3, #14
 8010a08:	dc29      	bgt.n	8010a5e <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010a0a:	4a82      	ldr	r2, [pc, #520]	; (8010c14 <update_wall+0x508>)
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	331c      	adds	r3, #28
 8010a10:	005b      	lsls	r3, r3, #1
 8010a12:	4413      	add	r3, r2
 8010a14:	889b      	ldrh	r3, [r3, #4]
 8010a16:	b21a      	sxth	r2, r3
 8010a18:	2101      	movs	r1, #1
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a20:	b21b      	sxth	r3, r3
 8010a22:	4313      	orrs	r3, r2
 8010a24:	b21b      	sxth	r3, r3
 8010a26:	b299      	uxth	r1, r3
 8010a28:	4a7a      	ldr	r2, [pc, #488]	; (8010c14 <update_wall+0x508>)
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	331c      	adds	r3, #28
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	4413      	add	r3, r2
 8010a32:	460a      	mov	r2, r1
 8010a34:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010a36:	7f3b      	ldrb	r3, [r7, #28]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d010      	beq.n	8010a5e <update_wall+0x352>
 8010a3c:	4a75      	ldr	r2, [pc, #468]	; (8010c14 <update_wall+0x508>)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a44:	b21a      	sxth	r2, r3
 8010a46:	2101      	movs	r1, #1
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a4e:	b21b      	sxth	r3, r3
 8010a50:	4313      	orrs	r3, r2
 8010a52:	b21b      	sxth	r3, r3
 8010a54:	b299      	uxth	r1, r3
 8010a56:	4a6f      	ldr	r2, [pc, #444]	; (8010c14 <update_wall+0x508>)
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f340 80ce 	ble.w	8010c02 <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	3b01      	subs	r3, #1
 8010a6a:	4a6a      	ldr	r2, [pc, #424]	; (8010c14 <update_wall+0x508>)
 8010a6c:	331c      	adds	r3, #28
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	4413      	add	r3, r2
 8010a72:	889b      	ldrh	r3, [r3, #4]
 8010a74:	b21a      	sxth	r2, r3
 8010a76:	2101      	movs	r1, #1
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a7e:	b21b      	sxth	r3, r3
 8010a80:	4313      	orrs	r3, r2
 8010a82:	b21a      	sxth	r2, r3
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	3b01      	subs	r3, #1
 8010a88:	b291      	uxth	r1, r2
 8010a8a:	4a62      	ldr	r2, [pc, #392]	; (8010c14 <update_wall+0x508>)
 8010a8c:	331c      	adds	r3, #28
 8010a8e:	005b      	lsls	r3, r3, #1
 8010a90:	4413      	add	r3, r2
 8010a92:	460a      	mov	r2, r1
 8010a94:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a96:	7e3b      	ldrb	r3, [r7, #24]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	f000 80b2 	beq.w	8010c02 <update_wall+0x4f6>
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	4a5c      	ldr	r2, [pc, #368]	; (8010c14 <update_wall+0x508>)
 8010aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010aa8:	b21a      	sxth	r2, r3
 8010aaa:	2101      	movs	r1, #1
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	fa01 f303 	lsl.w	r3, r1, r3
 8010ab2:	b21b      	sxth	r3, r3
 8010ab4:	4313      	orrs	r3, r2
 8010ab6:	b21a      	sxth	r2, r3
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	3b01      	subs	r3, #1
 8010abc:	b291      	uxth	r1, r2
 8010abe:	4a55      	ldr	r2, [pc, #340]	; (8010c14 <update_wall+0x508>)
 8010ac0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010ac4:	e09d      	b.n	8010c02 <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	dd2d      	ble.n	8010b28 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	4a50      	ldr	r2, [pc, #320]	; (8010c14 <update_wall+0x508>)
 8010ad2:	331c      	adds	r3, #28
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	4413      	add	r3, r2
 8010ad8:	889b      	ldrh	r3, [r3, #4]
 8010ada:	b21a      	sxth	r2, r3
 8010adc:	2101      	movs	r1, #1
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8010ae4:	b21b      	sxth	r3, r3
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	b21a      	sxth	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	b291      	uxth	r1, r2
 8010af0:	4a48      	ldr	r2, [pc, #288]	; (8010c14 <update_wall+0x508>)
 8010af2:	331c      	adds	r3, #28
 8010af4:	005b      	lsls	r3, r3, #1
 8010af6:	4413      	add	r3, r2
 8010af8:	460a      	mov	r2, r1
 8010afa:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010afc:	78fb      	ldrb	r3, [r7, #3]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d012      	beq.n	8010b28 <update_wall+0x41c>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3b01      	subs	r3, #1
 8010b06:	4a43      	ldr	r2, [pc, #268]	; (8010c14 <update_wall+0x508>)
 8010b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b0c:	b21a      	sxth	r2, r3
 8010b0e:	2101      	movs	r1, #1
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	fa01 f303 	lsl.w	r3, r1, r3
 8010b16:	b21b      	sxth	r3, r3
 8010b18:	4313      	orrs	r3, r2
 8010b1a:	b21a      	sxth	r2, r3
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	3b01      	subs	r3, #1
 8010b20:	b291      	uxth	r1, r2
 8010b22:	4a3c      	ldr	r2, [pc, #240]	; (8010c14 <update_wall+0x508>)
 8010b24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	dd32      	ble.n	8010b94 <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	3b01      	subs	r3, #1
 8010b32:	4a38      	ldr	r2, [pc, #224]	; (8010c14 <update_wall+0x508>)
 8010b34:	332c      	adds	r3, #44	; 0x2c
 8010b36:	005b      	lsls	r3, r3, #1
 8010b38:	4413      	add	r3, r2
 8010b3a:	885b      	ldrh	r3, [r3, #2]
 8010b3c:	b21a      	sxth	r2, r3
 8010b3e:	2101      	movs	r1, #1
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	fa01 f303 	lsl.w	r3, r1, r3
 8010b46:	b21b      	sxth	r3, r3
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	b21a      	sxth	r2, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	3b01      	subs	r3, #1
 8010b50:	b291      	uxth	r1, r2
 8010b52:	4a30      	ldr	r2, [pc, #192]	; (8010c14 <update_wall+0x508>)
 8010b54:	332c      	adds	r3, #44	; 0x2c
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	4413      	add	r3, r2
 8010b5a:	460a      	mov	r2, r1
 8010b5c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010b5e:	7f3b      	ldrb	r3, [r7, #28]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d017      	beq.n	8010b94 <update_wall+0x488>
 8010b64:	68bb      	ldr	r3, [r7, #8]
 8010b66:	3b01      	subs	r3, #1
 8010b68:	4a2a      	ldr	r2, [pc, #168]	; (8010c14 <update_wall+0x508>)
 8010b6a:	330c      	adds	r3, #12
 8010b6c:	005b      	lsls	r3, r3, #1
 8010b6e:	4413      	add	r3, r2
 8010b70:	88db      	ldrh	r3, [r3, #6]
 8010b72:	b21a      	sxth	r2, r3
 8010b74:	2101      	movs	r1, #1
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	fa01 f303 	lsl.w	r3, r1, r3
 8010b7c:	b21b      	sxth	r3, r3
 8010b7e:	4313      	orrs	r3, r2
 8010b80:	b21a      	sxth	r2, r3
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	b291      	uxth	r1, r2
 8010b88:	4a22      	ldr	r2, [pc, #136]	; (8010c14 <update_wall+0x508>)
 8010b8a:	330c      	adds	r3, #12
 8010b8c:	005b      	lsls	r3, r3, #1
 8010b8e:	4413      	add	r3, r2
 8010b90:	460a      	mov	r2, r1
 8010b92:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	2b0e      	cmp	r3, #14
 8010b98:	dc35      	bgt.n	8010c06 <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b9a:	4a1e      	ldr	r2, [pc, #120]	; (8010c14 <update_wall+0x508>)
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	332c      	adds	r3, #44	; 0x2c
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	4413      	add	r3, r2
 8010ba4:	885b      	ldrh	r3, [r3, #2]
 8010ba6:	b21a      	sxth	r2, r3
 8010ba8:	2101      	movs	r1, #1
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	fa01 f303 	lsl.w	r3, r1, r3
 8010bb0:	b21b      	sxth	r3, r3
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	b21b      	sxth	r3, r3
 8010bb6:	b299      	uxth	r1, r3
 8010bb8:	4a16      	ldr	r2, [pc, #88]	; (8010c14 <update_wall+0x508>)
 8010bba:	68bb      	ldr	r3, [r7, #8]
 8010bbc:	332c      	adds	r3, #44	; 0x2c
 8010bbe:	005b      	lsls	r3, r3, #1
 8010bc0:	4413      	add	r3, r2
 8010bc2:	460a      	mov	r2, r1
 8010bc4:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010bc6:	7e3b      	ldrb	r3, [r7, #24]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d01c      	beq.n	8010c06 <update_wall+0x4fa>
 8010bcc:	4a11      	ldr	r2, [pc, #68]	; (8010c14 <update_wall+0x508>)
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	330c      	adds	r3, #12
 8010bd2:	005b      	lsls	r3, r3, #1
 8010bd4:	4413      	add	r3, r2
 8010bd6:	88db      	ldrh	r3, [r3, #6]
 8010bd8:	b21a      	sxth	r2, r3
 8010bda:	2101      	movs	r1, #1
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	fa01 f303 	lsl.w	r3, r1, r3
 8010be2:	b21b      	sxth	r3, r3
 8010be4:	4313      	orrs	r3, r2
 8010be6:	b21b      	sxth	r3, r3
 8010be8:	b299      	uxth	r1, r3
 8010bea:	4a0a      	ldr	r2, [pc, #40]	; (8010c14 <update_wall+0x508>)
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	330c      	adds	r3, #12
 8010bf0:	005b      	lsls	r3, r3, #1
 8010bf2:	4413      	add	r3, r2
 8010bf4:	460a      	mov	r2, r1
 8010bf6:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010bf8:	e005      	b.n	8010c06 <update_wall+0x4fa>
		break;
 8010bfa:	bf00      	nop
 8010bfc:	e004      	b.n	8010c08 <update_wall+0x4fc>
		break;
 8010bfe:	bf00      	nop
 8010c00:	e002      	b.n	8010c08 <update_wall+0x4fc>
		break;
 8010c02:	bf00      	nop
 8010c04:	e000      	b.n	8010c08 <update_wall+0x4fc>
		break;
 8010c06:	bf00      	nop

	}


}
 8010c08:	bf00      	nop
 8010c0a:	3714      	adds	r7, #20
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr
 8010c14:	20000c3c 	.word	0x20000c3c

08010c18 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	60f8      	str	r0, [r7, #12]
 8010c20:	60b9      	str	r1, [r7, #8]
 8010c22:	607a      	str	r2, [r7, #4]
 8010c24:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	2201      	movs	r2, #1
 8010c2a:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	2201      	movs	r2, #1
 8010c30:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	2201      	movs	r2, #1
 8010c36:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	3b01      	subs	r3, #1
 8010c3c:	2b03      	cmp	r3, #3
 8010c3e:	f200 8156 	bhi.w	8010eee <get_wall+0x2d6>
 8010c42:	a201      	add	r2, pc, #4	; (adr r2, 8010c48 <get_wall+0x30>)
 8010c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c48:	08010c59 	.word	0x08010c59
 8010c4c:	08010cf9 	.word	0x08010cf9
 8010c50:	08010d9d 	.word	0x08010d9d
 8010c54:	08010e3d 	.word	0x08010e3d
	case 1:
		if (y <= 14) {
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	2b0e      	cmp	r3, #14
 8010c5c:	dc17      	bgt.n	8010c8e <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010c5e:	4aa7      	ldr	r2, [pc, #668]	; (8010efc <get_wall+0x2e4>)
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	330c      	adds	r3, #12
 8010c64:	005b      	lsls	r3, r3, #1
 8010c66:	4413      	add	r3, r2
 8010c68:	88db      	ldrh	r3, [r3, #6]
 8010c6a:	4619      	mov	r1, r3
 8010c6c:	2201      	movs	r2, #1
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	fa02 f303 	lsl.w	r3, r2, r3
 8010c74:	ea01 0203 	and.w	r2, r1, r3
 8010c78:	2101      	movs	r1, #1
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8010c80:	429a      	cmp	r2, r3
 8010c82:	bf0c      	ite	eq
 8010c84:	2301      	moveq	r3, #1
 8010c86:	2300      	movne	r3, #0
 8010c88:	b2da      	uxtb	r2, r3
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	dd16      	ble.n	8010cc2 <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	3b01      	subs	r3, #1
 8010c98:	4a98      	ldr	r2, [pc, #608]	; (8010efc <get_wall+0x2e4>)
 8010c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	68bb      	ldr	r3, [r7, #8]
 8010ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8010ca8:	ea01 0203 	and.w	r2, r1, r3
 8010cac:	2101      	movs	r1, #1
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	bf0c      	ite	eq
 8010cb8:	2301      	moveq	r3, #1
 8010cba:	2300      	movne	r3, #0
 8010cbc:	b2da      	uxtb	r2, r3
 8010cbe:	69fb      	ldr	r3, [r7, #28]
 8010cc0:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	2b0e      	cmp	r3, #14
 8010cc6:	f300 810b 	bgt.w	8010ee0 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010cca:	4a8c      	ldr	r2, [pc, #560]	; (8010efc <get_wall+0x2e4>)
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cd2:	4619      	mov	r1, r3
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	68bb      	ldr	r3, [r7, #8]
 8010cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010cdc:	ea01 0203 	and.w	r2, r1, r3
 8010ce0:	2101      	movs	r1, #1
 8010ce2:	68bb      	ldr	r3, [r7, #8]
 8010ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	bf0c      	ite	eq
 8010cec:	2301      	moveq	r3, #1
 8010cee:	2300      	movne	r3, #0
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	69bb      	ldr	r3, [r7, #24]
 8010cf4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010cf6:	e0f3      	b.n	8010ee0 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	2b0e      	cmp	r3, #14
 8010cfc:	dc15      	bgt.n	8010d2a <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010cfe:	4a7f      	ldr	r2, [pc, #508]	; (8010efc <get_wall+0x2e4>)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d06:	4619      	mov	r1, r3
 8010d08:	2201      	movs	r2, #1
 8010d0a:	68bb      	ldr	r3, [r7, #8]
 8010d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d10:	ea01 0203 	and.w	r2, r1, r3
 8010d14:	2101      	movs	r1, #1
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	fa01 f303 	lsl.w	r3, r1, r3
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	bf0c      	ite	eq
 8010d20:	2301      	moveq	r3, #1
 8010d22:	2300      	movne	r3, #0
 8010d24:	b2da      	uxtb	r2, r3
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	2b0e      	cmp	r3, #14
 8010d2e:	dc17      	bgt.n	8010d60 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010d30:	4a72      	ldr	r2, [pc, #456]	; (8010efc <get_wall+0x2e4>)
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	330c      	adds	r3, #12
 8010d36:	005b      	lsls	r3, r3, #1
 8010d38:	4413      	add	r3, r2
 8010d3a:	88db      	ldrh	r3, [r3, #6]
 8010d3c:	4619      	mov	r1, r3
 8010d3e:	2201      	movs	r2, #1
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	fa02 f303 	lsl.w	r3, r2, r3
 8010d46:	ea01 0203 	and.w	r2, r1, r3
 8010d4a:	2101      	movs	r1, #1
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d52:	429a      	cmp	r2, r3
 8010d54:	bf0c      	ite	eq
 8010d56:	2301      	moveq	r3, #1
 8010d58:	2300      	movne	r3, #0
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	69fb      	ldr	r3, [r7, #28]
 8010d5e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010d60:	68bb      	ldr	r3, [r7, #8]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	f340 80be 	ble.w	8010ee4 <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	3b01      	subs	r3, #1
 8010d6c:	4a63      	ldr	r2, [pc, #396]	; (8010efc <get_wall+0x2e4>)
 8010d6e:	330c      	adds	r3, #12
 8010d70:	005b      	lsls	r3, r3, #1
 8010d72:	4413      	add	r3, r2
 8010d74:	88db      	ldrh	r3, [r3, #6]
 8010d76:	4619      	mov	r1, r3
 8010d78:	2201      	movs	r2, #1
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8010d80:	ea01 0203 	and.w	r2, r1, r3
 8010d84:	2101      	movs	r1, #1
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	fa01 f303 	lsl.w	r3, r1, r3
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	bf0c      	ite	eq
 8010d90:	2301      	moveq	r3, #1
 8010d92:	2300      	movne	r3, #0
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010d9a:	e0a3      	b.n	8010ee4 <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 8010d9c:	68bb      	ldr	r3, [r7, #8]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	dd18      	ble.n	8010dd4 <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	3b01      	subs	r3, #1
 8010da6:	4a55      	ldr	r2, [pc, #340]	; (8010efc <get_wall+0x2e4>)
 8010da8:	330c      	adds	r3, #12
 8010daa:	005b      	lsls	r3, r3, #1
 8010dac:	4413      	add	r3, r2
 8010dae:	88db      	ldrh	r3, [r3, #6]
 8010db0:	4619      	mov	r1, r3
 8010db2:	2201      	movs	r2, #1
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	fa02 f303 	lsl.w	r3, r2, r3
 8010dba:	ea01 0203 	and.w	r2, r1, r3
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	bf0c      	ite	eq
 8010dca:	2301      	moveq	r3, #1
 8010dcc:	2300      	movne	r3, #0
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2b0e      	cmp	r3, #14
 8010dd8:	dc15      	bgt.n	8010e06 <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010dda:	4a48      	ldr	r2, [pc, #288]	; (8010efc <get_wall+0x2e4>)
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010de2:	4619      	mov	r1, r3
 8010de4:	2201      	movs	r2, #1
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	fa02 f303 	lsl.w	r3, r2, r3
 8010dec:	ea01 0203 	and.w	r2, r1, r3
 8010df0:	2101      	movs	r1, #1
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	fa01 f303 	lsl.w	r3, r1, r3
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	bf0c      	ite	eq
 8010dfc:	2301      	moveq	r3, #1
 8010dfe:	2300      	movne	r3, #0
 8010e00:	b2da      	uxtb	r2, r3
 8010e02:	69fb      	ldr	r3, [r7, #28]
 8010e04:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	dd6d      	ble.n	8010ee8 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	3b01      	subs	r3, #1
 8010e10:	4a3a      	ldr	r2, [pc, #232]	; (8010efc <get_wall+0x2e4>)
 8010e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e16:	4619      	mov	r1, r3
 8010e18:	2201      	movs	r2, #1
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8010e20:	ea01 0203 	and.w	r2, r1, r3
 8010e24:	2101      	movs	r1, #1
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	fa01 f303 	lsl.w	r3, r1, r3
 8010e2c:	429a      	cmp	r2, r3
 8010e2e:	bf0c      	ite	eq
 8010e30:	2301      	moveq	r3, #1
 8010e32:	2300      	movne	r3, #0
 8010e34:	b2da      	uxtb	r2, r3
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010e3a:	e055      	b.n	8010ee8 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	dd16      	ble.n	8010e70 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	3b01      	subs	r3, #1
 8010e46:	4a2d      	ldr	r2, [pc, #180]	; (8010efc <get_wall+0x2e4>)
 8010e48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	2201      	movs	r2, #1
 8010e50:	68bb      	ldr	r3, [r7, #8]
 8010e52:	fa02 f303 	lsl.w	r3, r2, r3
 8010e56:	ea01 0203 	and.w	r2, r1, r3
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	68bb      	ldr	r3, [r7, #8]
 8010e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e62:	429a      	cmp	r2, r3
 8010e64:	bf0c      	ite	eq
 8010e66:	2301      	moveq	r3, #1
 8010e68:	2300      	movne	r3, #0
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	dd18      	ble.n	8010ea8 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	3b01      	subs	r3, #1
 8010e7a:	4a20      	ldr	r2, [pc, #128]	; (8010efc <get_wall+0x2e4>)
 8010e7c:	330c      	adds	r3, #12
 8010e7e:	005b      	lsls	r3, r3, #1
 8010e80:	4413      	add	r3, r2
 8010e82:	88db      	ldrh	r3, [r3, #6]
 8010e84:	4619      	mov	r1, r3
 8010e86:	2201      	movs	r2, #1
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8010e8e:	ea01 0203 	and.w	r2, r1, r3
 8010e92:	2101      	movs	r1, #1
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	fa01 f303 	lsl.w	r3, r1, r3
 8010e9a:	429a      	cmp	r2, r3
 8010e9c:	bf0c      	ite	eq
 8010e9e:	2301      	moveq	r3, #1
 8010ea0:	2300      	movne	r3, #0
 8010ea2:	b2da      	uxtb	r2, r3
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	2b0e      	cmp	r3, #14
 8010eac:	dc1e      	bgt.n	8010eec <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010eae:	4a13      	ldr	r2, [pc, #76]	; (8010efc <get_wall+0x2e4>)
 8010eb0:	68bb      	ldr	r3, [r7, #8]
 8010eb2:	330c      	adds	r3, #12
 8010eb4:	005b      	lsls	r3, r3, #1
 8010eb6:	4413      	add	r3, r2
 8010eb8:	88db      	ldrh	r3, [r3, #6]
 8010eba:	4619      	mov	r1, r3
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ec4:	ea01 0203 	and.w	r2, r1, r3
 8010ec8:	2101      	movs	r1, #1
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	bf0c      	ite	eq
 8010ed4:	2301      	moveq	r3, #1
 8010ed6:	2300      	movne	r3, #0
 8010ed8:	b2da      	uxtb	r2, r3
 8010eda:	69bb      	ldr	r3, [r7, #24]
 8010edc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010ede:	e005      	b.n	8010eec <get_wall+0x2d4>
		break;
 8010ee0:	bf00      	nop
 8010ee2:	e004      	b.n	8010eee <get_wall+0x2d6>
		break;
 8010ee4:	bf00      	nop
 8010ee6:	e002      	b.n	8010eee <get_wall+0x2d6>
		break;
 8010ee8:	bf00      	nop
 8010eea:	e000      	b.n	8010eee <get_wall+0x2d6>
		break;
 8010eec:	bf00      	nop
	}

}
 8010eee:	bf00      	nop
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr
 8010efa:	bf00      	nop
 8010efc:	20000c3c 	.word	0x20000c3c

08010f00 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010f00:	b480      	push	{r7}
 8010f02:	b085      	sub	sp, #20
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
 8010f0c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	2201      	movs	r2, #1
 8010f12:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010f14:	69bb      	ldr	r3, [r7, #24]
 8010f16:	2201      	movs	r2, #1
 8010f18:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	2201      	movs	r2, #1
 8010f1e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	3b01      	subs	r3, #1
 8010f24:	2b03      	cmp	r3, #3
 8010f26:	f200 8162 	bhi.w	80111ee <get_wall_look+0x2ee>
 8010f2a:	a201      	add	r2, pc, #4	; (adr r2, 8010f30 <get_wall_look+0x30>)
 8010f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f30:	08010f41 	.word	0x08010f41
 8010f34:	08010fe9 	.word	0x08010fe9
 8010f38:	08011091 	.word	0x08011091
 8010f3c:	08011139 	.word	0x08011139
	case 1:
		if (y <= 14) {
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	2b0e      	cmp	r3, #14
 8010f44:	dc17      	bgt.n	8010f76 <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8010f46:	4aad      	ldr	r2, [pc, #692]	; (80111fc <get_wall_look+0x2fc>)
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	332c      	adds	r3, #44	; 0x2c
 8010f4c:	005b      	lsls	r3, r3, #1
 8010f4e:	4413      	add	r3, r2
 8010f50:	885b      	ldrh	r3, [r3, #2]
 8010f52:	4619      	mov	r1, r3
 8010f54:	2201      	movs	r2, #1
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5c:	ea01 0203 	and.w	r2, r1, r3
 8010f60:	2101      	movs	r1, #1
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	fa01 f303 	lsl.w	r3, r1, r3
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	bf0c      	ite	eq
 8010f6c:	2301      	moveq	r3, #1
 8010f6e:	2300      	movne	r3, #0
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	dd18      	ble.n	8010fae <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	3b01      	subs	r3, #1
 8010f80:	4a9e      	ldr	r2, [pc, #632]	; (80111fc <get_wall_look+0x2fc>)
 8010f82:	331c      	adds	r3, #28
 8010f84:	005b      	lsls	r3, r3, #1
 8010f86:	4413      	add	r3, r2
 8010f88:	889b      	ldrh	r3, [r3, #4]
 8010f8a:	4619      	mov	r1, r3
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	fa02 f303 	lsl.w	r3, r2, r3
 8010f94:	ea01 0203 	and.w	r2, r1, r3
 8010f98:	2101      	movs	r1, #1
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	bf0c      	ite	eq
 8010fa4:	2301      	moveq	r3, #1
 8010fa6:	2300      	movne	r3, #0
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2b0e      	cmp	r3, #14
 8010fb2:	f300 8115 	bgt.w	80111e0 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010fb6:	4a91      	ldr	r2, [pc, #580]	; (80111fc <get_wall_look+0x2fc>)
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	331c      	adds	r3, #28
 8010fbc:	005b      	lsls	r3, r3, #1
 8010fbe:	4413      	add	r3, r2
 8010fc0:	889b      	ldrh	r3, [r3, #4]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8010fcc:	ea01 0203 	and.w	r2, r1, r3
 8010fd0:	2101      	movs	r1, #1
 8010fd2:	68bb      	ldr	r3, [r7, #8]
 8010fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	bf0c      	ite	eq
 8010fdc:	2301      	moveq	r3, #1
 8010fde:	2300      	movne	r3, #0
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	69bb      	ldr	r3, [r7, #24]
 8010fe4:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010fe6:	e0fb      	b.n	80111e0 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b0e      	cmp	r3, #14
 8010fec:	dc17      	bgt.n	801101e <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8010fee:	4a83      	ldr	r2, [pc, #524]	; (80111fc <get_wall_look+0x2fc>)
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	331c      	adds	r3, #28
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	4413      	add	r3, r2
 8010ff8:	889b      	ldrh	r3, [r3, #4]
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	fa02 f303 	lsl.w	r3, r2, r3
 8011004:	ea01 0203 	and.w	r2, r1, r3
 8011008:	2101      	movs	r1, #1
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	fa01 f303 	lsl.w	r3, r1, r3
 8011010:	429a      	cmp	r2, r3
 8011012:	bf0c      	ite	eq
 8011014:	2301      	moveq	r3, #1
 8011016:	2300      	movne	r3, #0
 8011018:	b2da      	uxtb	r2, r3
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	2b0e      	cmp	r3, #14
 8011022:	dc17      	bgt.n	8011054 <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 8011024:	4a75      	ldr	r2, [pc, #468]	; (80111fc <get_wall_look+0x2fc>)
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	332c      	adds	r3, #44	; 0x2c
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	885b      	ldrh	r3, [r3, #2]
 8011030:	4619      	mov	r1, r3
 8011032:	2201      	movs	r2, #1
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	fa02 f303 	lsl.w	r3, r2, r3
 801103a:	ea01 0203 	and.w	r2, r1, r3
 801103e:	2101      	movs	r1, #1
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	fa01 f303 	lsl.w	r3, r1, r3
 8011046:	429a      	cmp	r2, r3
 8011048:	bf0c      	ite	eq
 801104a:	2301      	moveq	r3, #1
 801104c:	2300      	movne	r3, #0
 801104e:	b2da      	uxtb	r2, r3
 8011050:	69fb      	ldr	r3, [r7, #28]
 8011052:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	2b00      	cmp	r3, #0
 8011058:	f340 80c4 	ble.w	80111e4 <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	3b01      	subs	r3, #1
 8011060:	4a66      	ldr	r2, [pc, #408]	; (80111fc <get_wall_look+0x2fc>)
 8011062:	332c      	adds	r3, #44	; 0x2c
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	4413      	add	r3, r2
 8011068:	885b      	ldrh	r3, [r3, #2]
 801106a:	4619      	mov	r1, r3
 801106c:	2201      	movs	r2, #1
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	fa02 f303 	lsl.w	r3, r2, r3
 8011074:	ea01 0203 	and.w	r2, r1, r3
 8011078:	2101      	movs	r1, #1
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	fa01 f303 	lsl.w	r3, r1, r3
 8011080:	429a      	cmp	r2, r3
 8011082:	bf0c      	ite	eq
 8011084:	2301      	moveq	r3, #1
 8011086:	2300      	movne	r3, #0
 8011088:	b2da      	uxtb	r2, r3
 801108a:	69bb      	ldr	r3, [r7, #24]
 801108c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801108e:	e0a9      	b.n	80111e4 <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8011090:	68bb      	ldr	r3, [r7, #8]
 8011092:	2b00      	cmp	r3, #0
 8011094:	dd18      	ble.n	80110c8 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	3b01      	subs	r3, #1
 801109a:	4a58      	ldr	r2, [pc, #352]	; (80111fc <get_wall_look+0x2fc>)
 801109c:	332c      	adds	r3, #44	; 0x2c
 801109e:	005b      	lsls	r3, r3, #1
 80110a0:	4413      	add	r3, r2
 80110a2:	885b      	ldrh	r3, [r3, #2]
 80110a4:	4619      	mov	r1, r3
 80110a6:	2201      	movs	r2, #1
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	fa02 f303 	lsl.w	r3, r2, r3
 80110ae:	ea01 0203 	and.w	r2, r1, r3
 80110b2:	2101      	movs	r1, #1
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	fa01 f303 	lsl.w	r3, r1, r3
 80110ba:	429a      	cmp	r2, r3
 80110bc:	bf0c      	ite	eq
 80110be:	2301      	moveq	r3, #1
 80110c0:	2300      	movne	r3, #0
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2b0e      	cmp	r3, #14
 80110cc:	dc17      	bgt.n	80110fe <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 80110ce:	4a4b      	ldr	r2, [pc, #300]	; (80111fc <get_wall_look+0x2fc>)
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	331c      	adds	r3, #28
 80110d4:	005b      	lsls	r3, r3, #1
 80110d6:	4413      	add	r3, r2
 80110d8:	889b      	ldrh	r3, [r3, #4]
 80110da:	4619      	mov	r1, r3
 80110dc:	2201      	movs	r2, #1
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	fa02 f303 	lsl.w	r3, r2, r3
 80110e4:	ea01 0203 	and.w	r2, r1, r3
 80110e8:	2101      	movs	r1, #1
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	fa01 f303 	lsl.w	r3, r1, r3
 80110f0:	429a      	cmp	r2, r3
 80110f2:	bf0c      	ite	eq
 80110f4:	2301      	moveq	r3, #1
 80110f6:	2300      	movne	r3, #0
 80110f8:	b2da      	uxtb	r2, r3
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2b00      	cmp	r3, #0
 8011102:	dd71      	ble.n	80111e8 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	3b01      	subs	r3, #1
 8011108:	4a3c      	ldr	r2, [pc, #240]	; (80111fc <get_wall_look+0x2fc>)
 801110a:	331c      	adds	r3, #28
 801110c:	005b      	lsls	r3, r3, #1
 801110e:	4413      	add	r3, r2
 8011110:	889b      	ldrh	r3, [r3, #4]
 8011112:	4619      	mov	r1, r3
 8011114:	2201      	movs	r2, #1
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	fa02 f303 	lsl.w	r3, r2, r3
 801111c:	ea01 0203 	and.w	r2, r1, r3
 8011120:	2101      	movs	r1, #1
 8011122:	68bb      	ldr	r3, [r7, #8]
 8011124:	fa01 f303 	lsl.w	r3, r1, r3
 8011128:	429a      	cmp	r2, r3
 801112a:	bf0c      	ite	eq
 801112c:	2301      	moveq	r3, #1
 801112e:	2300      	movne	r3, #0
 8011130:	b2da      	uxtb	r2, r3
 8011132:	69bb      	ldr	r3, [r7, #24]
 8011134:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011136:	e057      	b.n	80111e8 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	2b00      	cmp	r3, #0
 801113c:	dd18      	ble.n	8011170 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	3b01      	subs	r3, #1
 8011142:	4a2e      	ldr	r2, [pc, #184]	; (80111fc <get_wall_look+0x2fc>)
 8011144:	331c      	adds	r3, #28
 8011146:	005b      	lsls	r3, r3, #1
 8011148:	4413      	add	r3, r2
 801114a:	889b      	ldrh	r3, [r3, #4]
 801114c:	4619      	mov	r1, r3
 801114e:	2201      	movs	r2, #1
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	fa02 f303 	lsl.w	r3, r2, r3
 8011156:	ea01 0203 	and.w	r2, r1, r3
 801115a:	2101      	movs	r1, #1
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	fa01 f303 	lsl.w	r3, r1, r3
 8011162:	429a      	cmp	r2, r3
 8011164:	bf0c      	ite	eq
 8011166:	2301      	moveq	r3, #1
 8011168:	2300      	movne	r3, #0
 801116a:	b2da      	uxtb	r2, r3
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	dd18      	ble.n	80111a8 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011176:	68bb      	ldr	r3, [r7, #8]
 8011178:	3b01      	subs	r3, #1
 801117a:	4a20      	ldr	r2, [pc, #128]	; (80111fc <get_wall_look+0x2fc>)
 801117c:	332c      	adds	r3, #44	; 0x2c
 801117e:	005b      	lsls	r3, r3, #1
 8011180:	4413      	add	r3, r2
 8011182:	885b      	ldrh	r3, [r3, #2]
 8011184:	4619      	mov	r1, r3
 8011186:	2201      	movs	r2, #1
 8011188:	68fb      	ldr	r3, [r7, #12]
 801118a:	fa02 f303 	lsl.w	r3, r2, r3
 801118e:	ea01 0203 	and.w	r2, r1, r3
 8011192:	2101      	movs	r1, #1
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	fa01 f303 	lsl.w	r3, r1, r3
 801119a:	429a      	cmp	r2, r3
 801119c:	bf0c      	ite	eq
 801119e:	2301      	moveq	r3, #1
 80111a0:	2300      	movne	r3, #0
 80111a2:	b2da      	uxtb	r2, r3
 80111a4:	69fb      	ldr	r3, [r7, #28]
 80111a6:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	2b0e      	cmp	r3, #14
 80111ac:	dc1e      	bgt.n	80111ec <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80111ae:	4a13      	ldr	r2, [pc, #76]	; (80111fc <get_wall_look+0x2fc>)
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	332c      	adds	r3, #44	; 0x2c
 80111b4:	005b      	lsls	r3, r3, #1
 80111b6:	4413      	add	r3, r2
 80111b8:	885b      	ldrh	r3, [r3, #2]
 80111ba:	4619      	mov	r1, r3
 80111bc:	2201      	movs	r2, #1
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	fa02 f303 	lsl.w	r3, r2, r3
 80111c4:	ea01 0203 	and.w	r2, r1, r3
 80111c8:	2101      	movs	r1, #1
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	fa01 f303 	lsl.w	r3, r1, r3
 80111d0:	429a      	cmp	r2, r3
 80111d2:	bf0c      	ite	eq
 80111d4:	2301      	moveq	r3, #1
 80111d6:	2300      	movne	r3, #0
 80111d8:	b2da      	uxtb	r2, r3
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80111de:	e005      	b.n	80111ec <get_wall_look+0x2ec>
		break;
 80111e0:	bf00      	nop
 80111e2:	e004      	b.n	80111ee <get_wall_look+0x2ee>
		break;
 80111e4:	bf00      	nop
 80111e6:	e002      	b.n	80111ee <get_wall_look+0x2ee>
		break;
 80111e8:	bf00      	nop
 80111ea:	e000      	b.n	80111ee <get_wall_look+0x2ee>
		break;
 80111ec:	bf00      	nop
	}

}
 80111ee:	bf00      	nop
 80111f0:	3714      	adds	r7, #20
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
 80111fa:	bf00      	nop
 80111fc:	20000c3c 	.word	0x20000c3c

08011200 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011200:	b480      	push	{r7}
 8011202:	b087      	sub	sp, #28
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
 801120c:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 801120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011210:	2b0e      	cmp	r3, #14
 8011212:	dd02      	ble.n	801121a <search_AroundWalkCount+0x1a>
 8011214:	23ff      	movs	r3, #255	; 0xff
 8011216:	82fb      	strh	r3, [r7, #22]
 8011218:	e008      	b.n	801122c <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[16 * x + y + 1];}
 801121a:	6a3b      	ldr	r3, [r7, #32]
 801121c:	011a      	lsls	r2, r3, #4
 801121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011220:	4413      	add	r3, r2
 8011222:	3301      	adds	r3, #1
 8011224:	4a3c      	ldr	r2, [pc, #240]	; (8011318 <search_AroundWalkCount+0x118>)
 8011226:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801122a:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	2b0e      	cmp	r3, #14
 8011230:	dd02      	ble.n	8011238 <search_AroundWalkCount+0x38>
 8011232:	23ff      	movs	r3, #255	; 0xff
 8011234:	82bb      	strh	r3, [r7, #20]
 8011236:	e008      	b.n	801124a <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[16 * (x + 1) + y];}
 8011238:	6a3b      	ldr	r3, [r7, #32]
 801123a:	3301      	adds	r3, #1
 801123c:	011a      	lsls	r2, r3, #4
 801123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011240:	4413      	add	r3, r2
 8011242:	4a35      	ldr	r2, [pc, #212]	; (8011318 <search_AroundWalkCount+0x118>)
 8011244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011248:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 801124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801124c:	2b00      	cmp	r3, #0
 801124e:	dc02      	bgt.n	8011256 <search_AroundWalkCount+0x56>
 8011250:	23ff      	movs	r3, #255	; 0xff
 8011252:	827b      	strh	r3, [r7, #18]
 8011254:	e008      	b.n	8011268 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[16 * x + y - 1];}
 8011256:	6a3b      	ldr	r3, [r7, #32]
 8011258:	011a      	lsls	r2, r3, #4
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	4413      	add	r3, r2
 801125e:	3b01      	subs	r3, #1
 8011260:	4a2d      	ldr	r2, [pc, #180]	; (8011318 <search_AroundWalkCount+0x118>)
 8011262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011266:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	2b00      	cmp	r3, #0
 801126c:	dc02      	bgt.n	8011274 <search_AroundWalkCount+0x74>
 801126e:	23ff      	movs	r3, #255	; 0xff
 8011270:	823b      	strh	r3, [r7, #16]
 8011272:	e008      	b.n	8011286 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[16 * (x - 1) + y];}
 8011274:	6a3b      	ldr	r3, [r7, #32]
 8011276:	3b01      	subs	r3, #1
 8011278:	011a      	lsls	r2, r3, #4
 801127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127c:	4413      	add	r3, r2
 801127e:	4a26      	ldr	r2, [pc, #152]	; (8011318 <search_AroundWalkCount+0x118>)
 8011280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011284:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011288:	3b01      	subs	r3, #1
 801128a:	2b03      	cmp	r3, #3
 801128c:	d83e      	bhi.n	801130c <search_AroundWalkCount+0x10c>
 801128e:	a201      	add	r2, pc, #4	; (adr r2, 8011294 <search_AroundWalkCount+0x94>)
 8011290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011294:	080112a5 	.word	0x080112a5
 8011298:	080112bf 	.word	0x080112bf
 801129c:	080112d9 	.word	0x080112d9
 80112a0:	080112f3 	.word	0x080112f3
	case 1:
		*front_count = north_count;
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	8afa      	ldrh	r2, [r7, #22]
 80112a8:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	8aba      	ldrh	r2, [r7, #20]
 80112ae:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	8a7a      	ldrh	r2, [r7, #18]
 80112b4:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	8a3a      	ldrh	r2, [r7, #16]
 80112ba:	801a      	strh	r2, [r3, #0]
		break;
 80112bc:	e026      	b.n	801130c <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	8aba      	ldrh	r2, [r7, #20]
 80112c2:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	8a7a      	ldrh	r2, [r7, #18]
 80112c8:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	8a3a      	ldrh	r2, [r7, #16]
 80112ce:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	8afa      	ldrh	r2, [r7, #22]
 80112d4:	801a      	strh	r2, [r3, #0]
		break;
 80112d6:	e019      	b.n	801130c <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	8a7a      	ldrh	r2, [r7, #18]
 80112dc:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 80112de:	68bb      	ldr	r3, [r7, #8]
 80112e0:	8a3a      	ldrh	r2, [r7, #16]
 80112e2:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	8afa      	ldrh	r2, [r7, #22]
 80112e8:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	8aba      	ldrh	r2, [r7, #20]
 80112ee:	801a      	strh	r2, [r3, #0]
		break;
 80112f0:	e00c      	b.n	801130c <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	8a3a      	ldrh	r2, [r7, #16]
 80112f6:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	8afa      	ldrh	r2, [r7, #22]
 80112fc:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	8aba      	ldrh	r2, [r7, #20]
 8011302:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011304:	683b      	ldr	r3, [r7, #0]
 8011306:	8a7a      	ldrh	r2, [r7, #18]
 8011308:	801a      	strh	r2, [r3, #0]
		break;
 801130a:	bf00      	nop

	}


}
 801130c:	bf00      	nop
 801130e:	371c      	adds	r7, #28
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr
 8011318:	20000d2c 	.word	0x20000d2c

0801131c <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 801131c:	b480      	push	{r7}
 801131e:	b087      	sub	sp, #28
 8011320:	af00      	add	r7, sp, #0
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
 8011328:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 801132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801132c:	2b0e      	cmp	r3, #14
 801132e:	dd03      	ble.n	8011338 <search_AroundDijkstraCount+0x1c>
 8011330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011334:	82fb      	strh	r3, [r7, #22]
 8011336:	e00a      	b.n	801134e <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 8011338:	4944      	ldr	r1, [pc, #272]	; (801144c <search_AroundDijkstraCount+0x130>)
 801133a:	6a3a      	ldr	r2, [r7, #32]
 801133c:	4613      	mov	r3, r2
 801133e:	011b      	lsls	r3, r3, #4
 8011340:	1a9b      	subs	r3, r3, r2
 8011342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011344:	4413      	add	r3, r2
 8011346:	33f0      	adds	r3, #240	; 0xf0
 8011348:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801134c:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	2b0e      	cmp	r3, #14
 8011352:	dd03      	ble.n	801135c <search_AroundDijkstraCount+0x40>
 8011354:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011358:	82bb      	strh	r3, [r7, #20]
 801135a:	e009      	b.n	8011370 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 801135c:	493b      	ldr	r1, [pc, #236]	; (801144c <search_AroundDijkstraCount+0x130>)
 801135e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011360:	4613      	mov	r3, r2
 8011362:	011b      	lsls	r3, r3, #4
 8011364:	1a9b      	subs	r3, r3, r2
 8011366:	6a3a      	ldr	r2, [r7, #32]
 8011368:	4413      	add	r3, r2
 801136a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801136e:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 8011370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011372:	2b00      	cmp	r3, #0
 8011374:	dc03      	bgt.n	801137e <search_AroundDijkstraCount+0x62>
 8011376:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801137a:	827b      	strh	r3, [r7, #18]
 801137c:	e00b      	b.n	8011396 <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 801137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011380:	1e59      	subs	r1, r3, #1
 8011382:	4832      	ldr	r0, [pc, #200]	; (801144c <search_AroundDijkstraCount+0x130>)
 8011384:	6a3a      	ldr	r2, [r7, #32]
 8011386:	4613      	mov	r3, r2
 8011388:	011b      	lsls	r3, r3, #4
 801138a:	1a9b      	subs	r3, r3, r2
 801138c:	440b      	add	r3, r1
 801138e:	33f0      	adds	r3, #240	; 0xf0
 8011390:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011394:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 8011396:	6a3b      	ldr	r3, [r7, #32]
 8011398:	2b00      	cmp	r3, #0
 801139a:	dc03      	bgt.n	80113a4 <search_AroundDijkstraCount+0x88>
 801139c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113a0:	823b      	strh	r3, [r7, #16]
 80113a2:	e00a      	b.n	80113ba <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 80113a4:	6a3b      	ldr	r3, [r7, #32]
 80113a6:	1e59      	subs	r1, r3, #1
 80113a8:	4828      	ldr	r0, [pc, #160]	; (801144c <search_AroundDijkstraCount+0x130>)
 80113aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ac:	4613      	mov	r3, r2
 80113ae:	011b      	lsls	r3, r3, #4
 80113b0:	1a9b      	subs	r3, r3, r2
 80113b2:	440b      	add	r3, r1
 80113b4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80113b8:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 80113ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113bc:	3b01      	subs	r3, #1
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d83e      	bhi.n	8011440 <search_AroundDijkstraCount+0x124>
 80113c2:	a201      	add	r2, pc, #4	; (adr r2, 80113c8 <search_AroundDijkstraCount+0xac>)
 80113c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c8:	080113d9 	.word	0x080113d9
 80113cc:	080113f3 	.word	0x080113f3
 80113d0:	0801140d 	.word	0x0801140d
 80113d4:	08011427 	.word	0x08011427
	case 1:
		*front_count = north_count;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	8afa      	ldrh	r2, [r7, #22]
 80113dc:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	8aba      	ldrh	r2, [r7, #20]
 80113e2:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	8a7a      	ldrh	r2, [r7, #18]
 80113e8:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	8a3a      	ldrh	r2, [r7, #16]
 80113ee:	801a      	strh	r2, [r3, #0]
		break;
 80113f0:	e026      	b.n	8011440 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	8aba      	ldrh	r2, [r7, #20]
 80113f6:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	8a7a      	ldrh	r2, [r7, #18]
 80113fc:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8a3a      	ldrh	r2, [r7, #16]
 8011402:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	8afa      	ldrh	r2, [r7, #22]
 8011408:	801a      	strh	r2, [r3, #0]
		break;
 801140a:	e019      	b.n	8011440 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	8a7a      	ldrh	r2, [r7, #18]
 8011410:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011412:	68bb      	ldr	r3, [r7, #8]
 8011414:	8a3a      	ldrh	r2, [r7, #16]
 8011416:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	8afa      	ldrh	r2, [r7, #22]
 801141c:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801141e:	683b      	ldr	r3, [r7, #0]
 8011420:	8aba      	ldrh	r2, [r7, #20]
 8011422:	801a      	strh	r2, [r3, #0]
		break;
 8011424:	e00c      	b.n	8011440 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	8a3a      	ldrh	r2, [r7, #16]
 801142a:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 801142c:	68bb      	ldr	r3, [r7, #8]
 801142e:	8afa      	ldrh	r2, [r7, #22]
 8011430:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8aba      	ldrh	r2, [r7, #20]
 8011436:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	8a7a      	ldrh	r2, [r7, #18]
 801143c:	801a      	strh	r2, [r3, #0]
		break;
 801143e:	bf00      	nop

	}


}
 8011440:	bf00      	nop
 8011442:	371c      	adds	r7, #28
 8011444:	46bd      	mov	sp, r7
 8011446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144a:	4770      	bx	lr
 801144c:	20000f2c 	.word	0x20000f2c

08011450 <create_DijkstraMap>:
		}

}


void create_DijkstraMap(void){
 8011450:	b590      	push	{r4, r7, lr}
 8011452:	f5ad 5ddd 	sub.w	sp, sp, #7072	; 0x1ba0
 8011456:	b087      	sub	sp, #28
 8011458:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 801145a:	23b4      	movs	r3, #180	; 0xb4
 801145c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011460:	f102 0216 	add.w	r2, r2, #22
 8011464:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011466:	237f      	movs	r3, #127	; 0x7f
 8011468:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801146c:	f102 0214 	add.w	r2, r2, #20
 8011470:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8011472:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011476:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 801147a:	4ae0      	ldr	r2, [pc, #896]	; (80117fc <create_DijkstraMap+0x3ac>)
 801147c:	ca07      	ldmia	r2, {r0, r1, r2}
 801147e:	c303      	stmia	r3!, {r0, r1}
 8011480:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8011482:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011486:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 801148a:	4add      	ldr	r2, [pc, #884]	; (8011800 <create_DijkstraMap+0x3b0>)
 801148c:	ca07      	ldmia	r2, {r0, r1, r2}
 801148e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8011492:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011496:	f103 031c 	add.w	r3, r3, #28
 801149a:	4618      	mov	r0, r3
 801149c:	f002 fee8 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_y);
 80114a0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80114a4:	f103 031c 	add.w	r3, r3, #28
 80114a8:	4618      	mov	r0, r3
 80114aa:	f002 fee1 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_matrix);
 80114ae:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80114b2:	3b1c      	subs	r3, #28
 80114b4:	4618      	mov	r0, r3
 80114b6:	f002 fedb 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_direction);
 80114ba:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80114be:	3b1c      	subs	r3, #28
 80114c0:	4618      	mov	r0, r3
 80114c2:	f002 fed5 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_cost);
 80114c6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80114ca:	3b1c      	subs	r3, #28
 80114cc:	4618      	mov	r0, r3
 80114ce:	f002 fecf 	bl	8014270 <initStack_walk>
	for(int i=0;i<=15;i++){
 80114d2:	2300      	movs	r3, #0
 80114d4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80114d8:	f102 020c 	add.w	r2, r2, #12
 80114dc:	6013      	str	r3, [r2, #0]
 80114de:	e04a      	b.n	8011576 <create_DijkstraMap+0x126>
		for(int j=0;j<=14;j++){
 80114e0:	2300      	movs	r3, #0
 80114e2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80114e6:	f102 0208 	add.w	r2, r2, #8
 80114ea:	6013      	str	r3, [r2, #0]
 80114ec:	e031      	b.n	8011552 <create_DijkstraMap+0x102>
			Dijkstra.column_count[i][j]=65535;
 80114ee:	49c5      	ldr	r1, [pc, #788]	; (8011804 <create_DijkstraMap+0x3b4>)
 80114f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80114f4:	f103 030c 	add.w	r3, r3, #12
 80114f8:	681a      	ldr	r2, [r3, #0]
 80114fa:	4613      	mov	r3, r2
 80114fc:	011b      	lsls	r3, r3, #4
 80114fe:	1a9b      	subs	r3, r3, r2
 8011500:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011504:	f102 0208 	add.w	r2, r2, #8
 8011508:	6812      	ldr	r2, [r2, #0]
 801150a:	4413      	add	r3, r2
 801150c:	33f0      	adds	r3, #240	; 0xf0
 801150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011512:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 8011516:	49bb      	ldr	r1, [pc, #748]	; (8011804 <create_DijkstraMap+0x3b4>)
 8011518:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801151c:	f103 030c 	add.w	r3, r3, #12
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	4613      	mov	r3, r2
 8011524:	011b      	lsls	r3, r3, #4
 8011526:	1a9b      	subs	r3, r3, r2
 8011528:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801152c:	f102 0208 	add.w	r2, r2, #8
 8011530:	6812      	ldr	r2, [r2, #0]
 8011532:	4413      	add	r3, r2
 8011534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011538:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 801153c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011540:	f103 0308 	add.w	r3, r3, #8
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	3301      	adds	r3, #1
 8011548:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801154c:	f102 0208 	add.w	r2, r2, #8
 8011550:	6013      	str	r3, [r2, #0]
 8011552:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011556:	f103 0308 	add.w	r3, r3, #8
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	2b0e      	cmp	r3, #14
 801155e:	ddc6      	ble.n	80114ee <create_DijkstraMap+0x9e>
	for(int i=0;i<=15;i++){
 8011560:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011564:	f103 030c 	add.w	r3, r3, #12
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3301      	adds	r3, #1
 801156c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011570:	f102 020c 	add.w	r2, r2, #12
 8011574:	6013      	str	r3, [r2, #0]
 8011576:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801157a:	f103 030c 	add.w	r3, r3, #12
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	2b0f      	cmp	r3, #15
 8011582:	ddad      	ble.n	80114e0 <create_DijkstraMap+0x90>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 8011584:	4b9f      	ldr	r3, [pc, #636]	; (8011804 <create_DijkstraMap+0x3b4>)
 8011586:	2200      	movs	r2, #0
 8011588:	f8a3 2322 	strh.w	r2, [r3, #802]	; 0x322
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 801158c:	4b9d      	ldr	r3, [pc, #628]	; (8011804 <create_DijkstraMap+0x3b4>)
 801158e:	2200      	movs	r2, #0
 8011590:	f8a3 2340 	strh.w	r2, [r3, #832]	; 0x340
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 8011594:	4b9b      	ldr	r3, [pc, #620]	; (8011804 <create_DijkstraMap+0x3b4>)
 8011596:	2200      	movs	r2, #0
 8011598:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 801159c:	4b99      	ldr	r3, [pc, #612]	; (8011804 <create_DijkstraMap+0x3b4>)
 801159e:	2200      	movs	r2, #0
 80115a0:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80115a4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80115a8:	f103 031c 	add.w	r3, r3, #28
 80115ac:	210a      	movs	r1, #10
 80115ae:	4618      	mov	r0, r3
 80115b0:	f002 fe6e 	bl	8014290 <pushStack_walk>
 80115b4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80115b8:	f103 031c 	add.w	r3, r3, #28
 80115bc:	210b      	movs	r1, #11
 80115be:	4618      	mov	r0, r3
 80115c0:	f002 fe66 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80115c4:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80115c8:	3b1c      	subs	r3, #28
 80115ca:	2100      	movs	r1, #0
 80115cc:	4618      	mov	r0, r3
 80115ce:	f002 fe5f 	bl	8014290 <pushStack_walk>
 80115d2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80115d6:	3b1c      	subs	r3, #28
 80115d8:	2108      	movs	r1, #8
 80115da:	4618      	mov	r0, r3
 80115dc:	f002 fe58 	bl	8014290 <pushStack_walk>
 80115e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80115e4:	3b1c      	subs	r3, #28
 80115e6:	2100      	movs	r1, #0
 80115e8:	4618      	mov	r0, r3
 80115ea:	f002 fe51 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 80115ee:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80115f2:	f103 031c 	add.w	r3, r3, #28
 80115f6:	210b      	movs	r1, #11
 80115f8:	4618      	mov	r0, r3
 80115fa:	f002 fe49 	bl	8014290 <pushStack_walk>
 80115fe:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011602:	f103 031c 	add.w	r3, r3, #28
 8011606:	210b      	movs	r1, #11
 8011608:	4618      	mov	r0, r3
 801160a:	f002 fe41 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801160e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011612:	3b1c      	subs	r3, #28
 8011614:	2100      	movs	r1, #0
 8011616:	4618      	mov	r0, r3
 8011618:	f002 fe3a 	bl	8014290 <pushStack_walk>
 801161c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011620:	3b1c      	subs	r3, #28
 8011622:	2108      	movs	r1, #8
 8011624:	4618      	mov	r0, r3
 8011626:	f002 fe33 	bl	8014290 <pushStack_walk>
 801162a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801162e:	3b1c      	subs	r3, #28
 8011630:	2100      	movs	r1, #0
 8011632:	4618      	mov	r0, r3
 8011634:	f002 fe2c 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8011638:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801163c:	f103 031c 	add.w	r3, r3, #28
 8011640:	210a      	movs	r1, #10
 8011642:	4618      	mov	r0, r3
 8011644:	f002 fe24 	bl	8014290 <pushStack_walk>
 8011648:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801164c:	f103 031c 	add.w	r3, r3, #28
 8011650:	210b      	movs	r1, #11
 8011652:	4618      	mov	r0, r3
 8011654:	f002 fe1c 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011658:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801165c:	3b1c      	subs	r3, #28
 801165e:	2101      	movs	r1, #1
 8011660:	4618      	mov	r0, r3
 8011662:	f002 fe15 	bl	8014290 <pushStack_walk>
 8011666:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801166a:	3b1c      	subs	r3, #28
 801166c:	2108      	movs	r1, #8
 801166e:	4618      	mov	r0, r3
 8011670:	f002 fe0e 	bl	8014290 <pushStack_walk>
 8011674:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011678:	3b1c      	subs	r3, #28
 801167a:	2100      	movs	r1, #0
 801167c:	4618      	mov	r0, r3
 801167e:	f002 fe07 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 8011682:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011686:	f103 031c 	add.w	r3, r3, #28
 801168a:	210a      	movs	r1, #10
 801168c:	4618      	mov	r0, r3
 801168e:	f002 fdff 	bl	8014290 <pushStack_walk>
 8011692:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011696:	f103 031c 	add.w	r3, r3, #28
 801169a:	210c      	movs	r1, #12
 801169c:	4618      	mov	r0, r3
 801169e:	f002 fdf7 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80116a2:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80116a6:	3b1c      	subs	r3, #28
 80116a8:	2101      	movs	r1, #1
 80116aa:	4618      	mov	r0, r3
 80116ac:	f002 fdf0 	bl	8014290 <pushStack_walk>
 80116b0:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80116b4:	3b1c      	subs	r3, #28
 80116b6:	2108      	movs	r1, #8
 80116b8:	4618      	mov	r0, r3
 80116ba:	f002 fde9 	bl	8014290 <pushStack_walk>
 80116be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80116c2:	3b1c      	subs	r3, #28
 80116c4:	2100      	movs	r1, #0
 80116c6:	4618      	mov	r0, r3
 80116c8:	f002 fde2 	bl	8014290 <pushStack_walk>



	unsigned short count_number = 1;
 80116cc:	2301      	movs	r3, #1
 80116ce:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80116d2:	f102 0206 	add.w	r2, r2, #6
 80116d6:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80116d8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80116dc:	f103 031c 	add.w	r3, r3, #28
 80116e0:	4618      	mov	r0, r3
 80116e2:	f002 fdff 	bl	80142e4 <popStack_walk>
 80116e6:	4603      	mov	r3, r0
 80116e8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80116ec:	f102 0204 	add.w	r2, r2, #4
 80116f0:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80116f2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80116f6:	f103 031c 	add.w	r3, r3, #28
 80116fa:	4618      	mov	r0, r3
 80116fc:	f002 fdf2 	bl	80142e4 <popStack_walk>
 8011700:	4603      	mov	r3, r0
 8011702:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011706:	f102 0202 	add.w	r2, r2, #2
 801170a:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 801170c:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011710:	3b1c      	subs	r3, #28
 8011712:	4618      	mov	r0, r3
 8011714:	f002 fde6 	bl	80142e4 <popStack_walk>
 8011718:	4603      	mov	r3, r0
 801171a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801171e:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8011720:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011724:	3b1c      	subs	r3, #28
 8011726:	4618      	mov	r0, r3
 8011728:	f002 fddc 	bl	80142e4 <popStack_walk>
 801172c:	4603      	mov	r3, r0
 801172e:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 8011732:	f102 021e 	add.w	r2, r2, #30
 8011736:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8011738:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801173c:	3b1c      	subs	r3, #28
 801173e:	4618      	mov	r0, r3
 8011740:	f002 fdd0 	bl	80142e4 <popStack_walk>
 8011744:	4603      	mov	r3, r0
 8011746:	f507 52dc 	add.w	r2, r7, #7040	; 0x1b80
 801174a:	f102 021c 	add.w	r2, r2, #28
 801174e:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8011750:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011754:	f103 0304 	add.w	r3, r3, #4
 8011758:	881b      	ldrh	r3, [r3, #0]
 801175a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801175e:	4293      	cmp	r3, r2
 8011760:	f001 8399 	beq.w	8012e96 <create_DijkstraMap+0x1a46>
 8011764:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011768:	f103 0302 	add.w	r3, r3, #2
 801176c:	881b      	ldrh	r3, [r3, #0]
 801176e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011772:	4293      	cmp	r3, r2
 8011774:	f001 838f 	beq.w	8012e96 <create_DijkstraMap+0x1a46>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011778:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801177c:	881b      	ldrh	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	f040 85c0 	bne.w	8012304 <create_DijkstraMap+0xeb4>
			if(Ycoordinate <= 13){
 8011784:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011788:	f103 0302 	add.w	r3, r3, #2
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	2b0d      	cmp	r3, #13
 8011790:	f200 80f5 	bhi.w	801197e <create_DijkstraMap+0x52e>
				if(Direction==SLANT_NORTH){
 8011794:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011798:	f103 031e 	add.w	r3, r3, #30
 801179c:	881b      	ldrh	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d132      	bne.n	8011808 <create_DijkstraMap+0x3b8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80117a2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80117a6:	f103 031c 	add.w	r3, r3, #28
 80117aa:	881b      	ldrh	r3, [r3, #0]
 80117ac:	3301      	adds	r3, #1
 80117ae:	b29b      	uxth	r3, r3
 80117b0:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117b4:	f102 0212 	add.w	r2, r2, #18
 80117b8:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80117ba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117be:	f103 0312 	add.w	r3, r3, #18
 80117c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80117c6:	2b04      	cmp	r3, #4
 80117c8:	dd05      	ble.n	80117d6 <create_DijkstraMap+0x386>
 80117ca:	2304      	movs	r3, #4
 80117cc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117d0:	f102 0212 	add.w	r2, r2, #18
 80117d4:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80117d6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80117da:	f103 0312 	add.w	r3, r3, #18
 80117de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80117e2:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80117e6:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80117ea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80117ee:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80117f2:	f102 0216 	add.w	r2, r2, #22
 80117f6:	8013      	strh	r3, [r2, #0]
 80117f8:	e016      	b.n	8011828 <create_DijkstraMap+0x3d8>
 80117fa:	bf00      	nop
 80117fc:	08021f3c 	.word	0x08021f3c
 8011800:	08021f48 	.word	0x08021f48
 8011804:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011808:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801180c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011810:	881b      	ldrh	r3, [r3, #0]
 8011812:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011816:	f102 0216 	add.w	r2, r2, #22
 801181a:	8013      	strh	r3, [r2, #0]
 801181c:	2300      	movs	r3, #0
 801181e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011822:	f102 0212 	add.w	r2, r2, #18
 8011826:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011828:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801182c:	f103 0302 	add.w	r3, r3, #2
 8011830:	881b      	ldrh	r3, [r3, #0]
 8011832:	3301      	adds	r3, #1
 8011834:	4a6f      	ldr	r2, [pc, #444]	; (80119f4 <create_DijkstraMap+0x5a4>)
 8011836:	330c      	adds	r3, #12
 8011838:	005b      	lsls	r3, r3, #1
 801183a:	4413      	add	r3, r2
 801183c:	88db      	ldrh	r3, [r3, #6]
 801183e:	461a      	mov	r2, r3
 8011840:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011844:	f103 0304 	add.w	r3, r3, #4
 8011848:	881b      	ldrh	r3, [r3, #0]
 801184a:	fa42 f303 	asr.w	r3, r2, r3
 801184e:	f003 0301 	and.w	r3, r3, #1
 8011852:	2b00      	cmp	r3, #0
 8011854:	f040 8093 	bne.w	801197e <create_DijkstraMap+0x52e>
 8011858:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801185c:	f103 0304 	add.w	r3, r3, #4
 8011860:	881a      	ldrh	r2, [r3, #0]
 8011862:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011866:	f103 0302 	add.w	r3, r3, #2
 801186a:	881b      	ldrh	r3, [r3, #0]
 801186c:	1c59      	adds	r1, r3, #1
 801186e:	4862      	ldr	r0, [pc, #392]	; (80119f8 <create_DijkstraMap+0x5a8>)
 8011870:	4613      	mov	r3, r2
 8011872:	011b      	lsls	r3, r3, #4
 8011874:	1a9b      	subs	r3, r3, r2
 8011876:	440b      	add	r3, r1
 8011878:	33f0      	adds	r3, #240	; 0xf0
 801187a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801187e:	461c      	mov	r4, r3
 8011880:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011884:	f103 0304 	add.w	r3, r3, #4
 8011888:	881a      	ldrh	r2, [r3, #0]
 801188a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801188e:	f103 0302 	add.w	r3, r3, #2
 8011892:	8819      	ldrh	r1, [r3, #0]
 8011894:	4858      	ldr	r0, [pc, #352]	; (80119f8 <create_DijkstraMap+0x5a8>)
 8011896:	4613      	mov	r3, r2
 8011898:	011b      	lsls	r3, r3, #4
 801189a:	1a9b      	subs	r3, r3, r2
 801189c:	440b      	add	r3, r1
 801189e:	33f0      	adds	r3, #240	; 0xf0
 80118a0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80118a4:	461a      	mov	r2, r3
 80118a6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118aa:	f103 0316 	add.w	r3, r3, #22
 80118ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80118b2:	4413      	add	r3, r2
 80118b4:	429c      	cmp	r4, r3
 80118b6:	dd62      	ble.n	801197e <create_DijkstraMap+0x52e>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80118b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118bc:	f103 0304 	add.w	r3, r3, #4
 80118c0:	881a      	ldrh	r2, [r3, #0]
 80118c2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118c6:	f103 0302 	add.w	r3, r3, #2
 80118ca:	8819      	ldrh	r1, [r3, #0]
 80118cc:	484a      	ldr	r0, [pc, #296]	; (80119f8 <create_DijkstraMap+0x5a8>)
 80118ce:	4613      	mov	r3, r2
 80118d0:	011b      	lsls	r3, r3, #4
 80118d2:	1a9b      	subs	r3, r3, r2
 80118d4:	440b      	add	r3, r1
 80118d6:	33f0      	adds	r3, #240	; 0xf0
 80118d8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80118dc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80118e0:	f103 0316 	add.w	r3, r3, #22
 80118e4:	881b      	ldrh	r3, [r3, #0]
 80118e6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80118ea:	f102 0204 	add.w	r2, r2, #4
 80118ee:	8812      	ldrh	r2, [r2, #0]
 80118f0:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 80118f4:	f101 0102 	add.w	r1, r1, #2
 80118f8:	8809      	ldrh	r1, [r1, #0]
 80118fa:	3101      	adds	r1, #1
 80118fc:	4403      	add	r3, r0
 80118fe:	b29c      	uxth	r4, r3
 8011900:	483d      	ldr	r0, [pc, #244]	; (80119f8 <create_DijkstraMap+0x5a8>)
 8011902:	4613      	mov	r3, r2
 8011904:	011b      	lsls	r3, r3, #4
 8011906:	1a9b      	subs	r3, r3, r2
 8011908:	440b      	add	r3, r1
 801190a:	33f0      	adds	r3, #240	; 0xf0
 801190c:	4622      	mov	r2, r4
 801190e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011912:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011916:	f103 0304 	add.w	r3, r3, #4
 801191a:	881a      	ldrh	r2, [r3, #0]
 801191c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011920:	f103 031c 	add.w	r3, r3, #28
 8011924:	4611      	mov	r1, r2
 8011926:	4618      	mov	r0, r3
 8011928:	f002 fcb2 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 801192c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011930:	f103 0302 	add.w	r3, r3, #2
 8011934:	881b      	ldrh	r3, [r3, #0]
 8011936:	3301      	adds	r3, #1
 8011938:	b29a      	uxth	r2, r3
 801193a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 801193e:	f103 031c 	add.w	r3, r3, #28
 8011942:	4611      	mov	r1, r2
 8011944:	4618      	mov	r0, r3
 8011946:	f002 fca3 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 801194a:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 801194e:	3b1c      	subs	r3, #28
 8011950:	2100      	movs	r1, #0
 8011952:	4618      	mov	r0, r3
 8011954:	f002 fc9c 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011958:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 801195c:	3b1c      	subs	r3, #28
 801195e:	2100      	movs	r1, #0
 8011960:	4618      	mov	r0, r3
 8011962:	f002 fc95 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011966:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801196a:	f103 0312 	add.w	r3, r3, #18
 801196e:	881a      	ldrh	r2, [r3, #0]
 8011970:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011974:	3b1c      	subs	r3, #28
 8011976:	4611      	mov	r1, r2
 8011978:	4618      	mov	r0, r3
 801197a:	f002 fc89 	bl	8014290 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 801197e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011982:	f103 0302 	add.w	r3, r3, #2
 8011986:	881b      	ldrh	r3, [r3, #0]
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 80f2 	beq.w	8011b72 <create_DijkstraMap+0x722>
				if(Direction==SLANT_SOUTH){
 801198e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011992:	f103 031e 	add.w	r3, r3, #30
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	2b04      	cmp	r3, #4
 801199a:	d12f      	bne.n	80119fc <create_DijkstraMap+0x5ac>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801199c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80119a0:	f103 031c 	add.w	r3, r3, #28
 80119a4:	881b      	ldrh	r3, [r3, #0]
 80119a6:	3301      	adds	r3, #1
 80119a8:	b29b      	uxth	r3, r3
 80119aa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119ae:	f102 0212 	add.w	r2, r2, #18
 80119b2:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80119b4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119b8:	f103 0312 	add.w	r3, r3, #18
 80119bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80119c0:	2b04      	cmp	r3, #4
 80119c2:	dd05      	ble.n	80119d0 <create_DijkstraMap+0x580>
 80119c4:	2304      	movs	r3, #4
 80119c6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119ca:	f102 0212 	add.w	r2, r2, #18
 80119ce:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80119d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80119d4:	f103 0312 	add.w	r3, r3, #18
 80119d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80119dc:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 80119e0:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 80119e4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80119e8:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80119ec:	f102 0216 	add.w	r2, r2, #22
 80119f0:	8013      	strh	r3, [r2, #0]
 80119f2:	e013      	b.n	8011a1c <create_DijkstraMap+0x5cc>
 80119f4:	20000c3c 	.word	0x20000c3c
 80119f8:	20000f2c 	.word	0x20000f2c
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80119fc:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011a00:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a0a:	f102 0216 	add.w	r2, r2, #22
 8011a0e:	8013      	strh	r3, [r2, #0]
 8011a10:	2300      	movs	r3, #0
 8011a12:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011a16:	f102 0212 	add.w	r2, r2, #18
 8011a1a:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011a1c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a20:	f103 0302 	add.w	r3, r3, #2
 8011a24:	881b      	ldrh	r3, [r3, #0]
 8011a26:	3b01      	subs	r3, #1
 8011a28:	4a6f      	ldr	r2, [pc, #444]	; (8011be8 <create_DijkstraMap+0x798>)
 8011a2a:	330c      	adds	r3, #12
 8011a2c:	005b      	lsls	r3, r3, #1
 8011a2e:	4413      	add	r3, r2
 8011a30:	88db      	ldrh	r3, [r3, #6]
 8011a32:	461a      	mov	r2, r3
 8011a34:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a38:	f103 0304 	add.w	r3, r3, #4
 8011a3c:	881b      	ldrh	r3, [r3, #0]
 8011a3e:	fa42 f303 	asr.w	r3, r2, r3
 8011a42:	f003 0301 	and.w	r3, r3, #1
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f040 8093 	bne.w	8011b72 <create_DijkstraMap+0x722>
 8011a4c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a50:	f103 0304 	add.w	r3, r3, #4
 8011a54:	881a      	ldrh	r2, [r3, #0]
 8011a56:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a5a:	f103 0302 	add.w	r3, r3, #2
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	1e59      	subs	r1, r3, #1
 8011a62:	4862      	ldr	r0, [pc, #392]	; (8011bec <create_DijkstraMap+0x79c>)
 8011a64:	4613      	mov	r3, r2
 8011a66:	011b      	lsls	r3, r3, #4
 8011a68:	1a9b      	subs	r3, r3, r2
 8011a6a:	440b      	add	r3, r1
 8011a6c:	33f0      	adds	r3, #240	; 0xf0
 8011a6e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a72:	461c      	mov	r4, r3
 8011a74:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a78:	f103 0304 	add.w	r3, r3, #4
 8011a7c:	881a      	ldrh	r2, [r3, #0]
 8011a7e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a82:	f103 0302 	add.w	r3, r3, #2
 8011a86:	8819      	ldrh	r1, [r3, #0]
 8011a88:	4858      	ldr	r0, [pc, #352]	; (8011bec <create_DijkstraMap+0x79c>)
 8011a8a:	4613      	mov	r3, r2
 8011a8c:	011b      	lsls	r3, r3, #4
 8011a8e:	1a9b      	subs	r3, r3, r2
 8011a90:	440b      	add	r3, r1
 8011a92:	33f0      	adds	r3, #240	; 0xf0
 8011a94:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011a98:	461a      	mov	r2, r3
 8011a9a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011a9e:	f103 0316 	add.w	r3, r3, #22
 8011aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	429c      	cmp	r4, r3
 8011aaa:	dd62      	ble.n	8011b72 <create_DijkstraMap+0x722>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011aac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ab0:	f103 0304 	add.w	r3, r3, #4
 8011ab4:	881a      	ldrh	r2, [r3, #0]
 8011ab6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011aba:	f103 0302 	add.w	r3, r3, #2
 8011abe:	8819      	ldrh	r1, [r3, #0]
 8011ac0:	484a      	ldr	r0, [pc, #296]	; (8011bec <create_DijkstraMap+0x79c>)
 8011ac2:	4613      	mov	r3, r2
 8011ac4:	011b      	lsls	r3, r3, #4
 8011ac6:	1a9b      	subs	r3, r3, r2
 8011ac8:	440b      	add	r3, r1
 8011aca:	33f0      	adds	r3, #240	; 0xf0
 8011acc:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011ad0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ad4:	f103 0316 	add.w	r3, r3, #22
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ade:	f102 0204 	add.w	r2, r2, #4
 8011ae2:	8812      	ldrh	r2, [r2, #0]
 8011ae4:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011ae8:	f101 0102 	add.w	r1, r1, #2
 8011aec:	8809      	ldrh	r1, [r1, #0]
 8011aee:	3901      	subs	r1, #1
 8011af0:	4403      	add	r3, r0
 8011af2:	b29c      	uxth	r4, r3
 8011af4:	483d      	ldr	r0, [pc, #244]	; (8011bec <create_DijkstraMap+0x79c>)
 8011af6:	4613      	mov	r3, r2
 8011af8:	011b      	lsls	r3, r3, #4
 8011afa:	1a9b      	subs	r3, r3, r2
 8011afc:	440b      	add	r3, r1
 8011afe:	33f0      	adds	r3, #240	; 0xf0
 8011b00:	4622      	mov	r2, r4
 8011b02:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011b06:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b0a:	f103 0304 	add.w	r3, r3, #4
 8011b0e:	881a      	ldrh	r2, [r3, #0]
 8011b10:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011b14:	f103 031c 	add.w	r3, r3, #28
 8011b18:	4611      	mov	r1, r2
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f002 fbb8 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011b20:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b24:	f103 0302 	add.w	r3, r3, #2
 8011b28:	881b      	ldrh	r3, [r3, #0]
 8011b2a:	3b01      	subs	r3, #1
 8011b2c:	b29a      	uxth	r2, r3
 8011b2e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011b32:	f103 031c 	add.w	r3, r3, #28
 8011b36:	4611      	mov	r1, r2
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f002 fba9 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011b3e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011b42:	3b1c      	subs	r3, #28
 8011b44:	2100      	movs	r1, #0
 8011b46:	4618      	mov	r0, r3
 8011b48:	f002 fba2 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011b4c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011b50:	3b1c      	subs	r3, #28
 8011b52:	2104      	movs	r1, #4
 8011b54:	4618      	mov	r0, r3
 8011b56:	f002 fb9b 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011b5a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b5e:	f103 0312 	add.w	r3, r3, #18
 8011b62:	881a      	ldrh	r2, [r3, #0]
 8011b64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011b68:	3b1c      	subs	r3, #28
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f002 fb8f 	bl	8014290 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011b72:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011b76:	f103 0304 	add.w	r3, r3, #4
 8011b7a:	881b      	ldrh	r3, [r3, #0]
 8011b7c:	2b0e      	cmp	r3, #14
 8011b7e:	f200 81d8 	bhi.w	8011f32 <create_DijkstraMap+0xae2>
				if(Direction==SLANT_SOUTH_EAST){
 8011b82:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011b86:	f103 031e 	add.w	r3, r3, #30
 8011b8a:	881b      	ldrh	r3, [r3, #0]
 8011b8c:	2b03      	cmp	r3, #3
 8011b8e:	d12f      	bne.n	8011bf0 <create_DijkstraMap+0x7a0>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011b90:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011b94:	f103 031c 	add.w	r3, r3, #28
 8011b98:	881b      	ldrh	r3, [r3, #0]
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	b29b      	uxth	r3, r3
 8011b9e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ba2:	f102 0212 	add.w	r2, r2, #18
 8011ba6:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011ba8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bac:	f103 0312 	add.w	r3, r3, #18
 8011bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bb4:	2b05      	cmp	r3, #5
 8011bb6:	dd05      	ble.n	8011bc4 <create_DijkstraMap+0x774>
 8011bb8:	2305      	movs	r3, #5
 8011bba:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011bbe:	f102 0212 	add.w	r2, r2, #18
 8011bc2:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011bc4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011bc8:	f103 0312 	add.w	r3, r3, #18
 8011bcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bd0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011bd4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011bd8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011bdc:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011be0:	f102 0214 	add.w	r2, r2, #20
 8011be4:	8013      	strh	r3, [r2, #0]
 8011be6:	e013      	b.n	8011c10 <create_DijkstraMap+0x7c0>
 8011be8:	20000c3c 	.word	0x20000c3c
 8011bec:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011bf0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011bf4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011bf8:	881b      	ldrh	r3, [r3, #0]
 8011bfa:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011bfe:	f102 0214 	add.w	r2, r2, #20
 8011c02:	8013      	strh	r3, [r2, #0]
 8011c04:	2300      	movs	r3, #0
 8011c06:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011c0a:	f102 0212 	add.w	r2, r2, #18
 8011c0e:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011c10:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c14:	f103 0304 	add.w	r3, r3, #4
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	4a68      	ldr	r2, [pc, #416]	; (8011dbc <create_DijkstraMap+0x96c>)
 8011c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011c20:	461a      	mov	r2, r3
 8011c22:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c26:	f103 0302 	add.w	r3, r3, #2
 8011c2a:	881b      	ldrh	r3, [r3, #0]
 8011c2c:	fa42 f303 	asr.w	r3, r2, r3
 8011c30:	f003 0301 	and.w	r3, r3, #1
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f040 808d 	bne.w	8011d54 <create_DijkstraMap+0x904>
 8011c3a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c3e:	f103 0302 	add.w	r3, r3, #2
 8011c42:	881a      	ldrh	r2, [r3, #0]
 8011c44:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c48:	f103 0304 	add.w	r3, r3, #4
 8011c4c:	8819      	ldrh	r1, [r3, #0]
 8011c4e:	485c      	ldr	r0, [pc, #368]	; (8011dc0 <create_DijkstraMap+0x970>)
 8011c50:	4613      	mov	r3, r2
 8011c52:	011b      	lsls	r3, r3, #4
 8011c54:	1a9b      	subs	r3, r3, r2
 8011c56:	440b      	add	r3, r1
 8011c58:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c5c:	461c      	mov	r4, r3
 8011c5e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c62:	f103 0304 	add.w	r3, r3, #4
 8011c66:	881a      	ldrh	r2, [r3, #0]
 8011c68:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c6c:	f103 0302 	add.w	r3, r3, #2
 8011c70:	8819      	ldrh	r1, [r3, #0]
 8011c72:	4853      	ldr	r0, [pc, #332]	; (8011dc0 <create_DijkstraMap+0x970>)
 8011c74:	4613      	mov	r3, r2
 8011c76:	011b      	lsls	r3, r3, #4
 8011c78:	1a9b      	subs	r3, r3, r2
 8011c7a:	440b      	add	r3, r1
 8011c7c:	33f0      	adds	r3, #240	; 0xf0
 8011c7e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011c82:	461a      	mov	r2, r3
 8011c84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c88:	f103 0314 	add.w	r3, r3, #20
 8011c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c90:	4413      	add	r3, r2
 8011c92:	429c      	cmp	r4, r3
 8011c94:	dd5e      	ble.n	8011d54 <create_DijkstraMap+0x904>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011c96:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011c9a:	f103 0304 	add.w	r3, r3, #4
 8011c9e:	881a      	ldrh	r2, [r3, #0]
 8011ca0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ca4:	f103 0302 	add.w	r3, r3, #2
 8011ca8:	8819      	ldrh	r1, [r3, #0]
 8011caa:	4845      	ldr	r0, [pc, #276]	; (8011dc0 <create_DijkstraMap+0x970>)
 8011cac:	4613      	mov	r3, r2
 8011cae:	011b      	lsls	r3, r3, #4
 8011cb0:	1a9b      	subs	r3, r3, r2
 8011cb2:	440b      	add	r3, r1
 8011cb4:	33f0      	adds	r3, #240	; 0xf0
 8011cb6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011cba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cbe:	f103 0314 	add.w	r3, r3, #20
 8011cc2:	881b      	ldrh	r3, [r3, #0]
 8011cc4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011cc8:	f102 0202 	add.w	r2, r2, #2
 8011ccc:	8812      	ldrh	r2, [r2, #0]
 8011cce:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011cd2:	f101 0104 	add.w	r1, r1, #4
 8011cd6:	8809      	ldrh	r1, [r1, #0]
 8011cd8:	4403      	add	r3, r0
 8011cda:	b29c      	uxth	r4, r3
 8011cdc:	4838      	ldr	r0, [pc, #224]	; (8011dc0 <create_DijkstraMap+0x970>)
 8011cde:	4613      	mov	r3, r2
 8011ce0:	011b      	lsls	r3, r3, #4
 8011ce2:	1a9b      	subs	r3, r3, r2
 8011ce4:	440b      	add	r3, r1
 8011ce6:	4622      	mov	r2, r4
 8011ce8:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011cec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011cf0:	f103 0304 	add.w	r3, r3, #4
 8011cf4:	881a      	ldrh	r2, [r3, #0]
 8011cf6:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011cfa:	f103 031c 	add.w	r3, r3, #28
 8011cfe:	4611      	mov	r1, r2
 8011d00:	4618      	mov	r0, r3
 8011d02:	f002 fac5 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011d06:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d0a:	f103 0302 	add.w	r3, r3, #2
 8011d0e:	881a      	ldrh	r2, [r3, #0]
 8011d10:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011d14:	f103 031c 	add.w	r3, r3, #28
 8011d18:	4611      	mov	r1, r2
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f002 fab8 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011d20:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011d24:	3b1c      	subs	r3, #28
 8011d26:	2101      	movs	r1, #1
 8011d28:	4618      	mov	r0, r3
 8011d2a:	f002 fab1 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011d2e:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011d32:	3b1c      	subs	r3, #28
 8011d34:	2103      	movs	r1, #3
 8011d36:	4618      	mov	r0, r3
 8011d38:	f002 faaa 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011d3c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d40:	f103 0312 	add.w	r3, r3, #18
 8011d44:	881a      	ldrh	r2, [r3, #0]
 8011d46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011d4a:	3b1c      	subs	r3, #28
 8011d4c:	4611      	mov	r1, r2
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f002 fa9e 	bl	8014290 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011d54:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011d58:	f103 031e 	add.w	r3, r3, #30
 8011d5c:	881b      	ldrh	r3, [r3, #0]
 8011d5e:	2b01      	cmp	r3, #1
 8011d60:	d130      	bne.n	8011dc4 <create_DijkstraMap+0x974>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011d62:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011d66:	f103 031c 	add.w	r3, r3, #28
 8011d6a:	881b      	ldrh	r3, [r3, #0]
 8011d6c:	3301      	adds	r3, #1
 8011d6e:	b29b      	uxth	r3, r3
 8011d70:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d74:	f102 0212 	add.w	r2, r2, #18
 8011d78:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011d7a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d7e:	f103 0312 	add.w	r3, r3, #18
 8011d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d86:	2b05      	cmp	r3, #5
 8011d88:	dd05      	ble.n	8011d96 <create_DijkstraMap+0x946>
 8011d8a:	2305      	movs	r3, #5
 8011d8c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011d90:	f102 0212 	add.w	r2, r2, #18
 8011d94:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011d96:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011d9a:	f103 0312 	add.w	r3, r3, #18
 8011d9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011da2:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011da6:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011daa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011dae:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011db2:	f102 0214 	add.w	r2, r2, #20
 8011db6:	8013      	strh	r3, [r2, #0]
 8011db8:	e014      	b.n	8011de4 <create_DijkstraMap+0x994>
 8011dba:	bf00      	nop
 8011dbc:	20000c3c 	.word	0x20000c3c
 8011dc0:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011dc4:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011dc8:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011dcc:	881b      	ldrh	r3, [r3, #0]
 8011dce:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dd2:	f102 0214 	add.w	r2, r2, #20
 8011dd6:	8013      	strh	r3, [r2, #0]
 8011dd8:	2300      	movs	r3, #0
 8011dda:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011dde:	f102 0212 	add.w	r2, r2, #18
 8011de2:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011de4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011de8:	f103 0304 	add.w	r3, r3, #4
 8011dec:	881b      	ldrh	r3, [r3, #0]
 8011dee:	4a6e      	ldr	r2, [pc, #440]	; (8011fa8 <create_DijkstraMap+0xb58>)
 8011df0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011df4:	461a      	mov	r2, r3
 8011df6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011dfa:	f103 0302 	add.w	r3, r3, #2
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	3301      	adds	r3, #1
 8011e02:	fa42 f303 	asr.w	r3, r2, r3
 8011e06:	f003 0301 	and.w	r3, r3, #1
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	f040 8091 	bne.w	8011f32 <create_DijkstraMap+0xae2>
 8011e10:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e14:	f103 0302 	add.w	r3, r3, #2
 8011e18:	881b      	ldrh	r3, [r3, #0]
 8011e1a:	1c5a      	adds	r2, r3, #1
 8011e1c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e20:	f103 0304 	add.w	r3, r3, #4
 8011e24:	8819      	ldrh	r1, [r3, #0]
 8011e26:	4861      	ldr	r0, [pc, #388]	; (8011fac <create_DijkstraMap+0xb5c>)
 8011e28:	4613      	mov	r3, r2
 8011e2a:	011b      	lsls	r3, r3, #4
 8011e2c:	1a9b      	subs	r3, r3, r2
 8011e2e:	440b      	add	r3, r1
 8011e30:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e34:	461c      	mov	r4, r3
 8011e36:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e3a:	f103 0304 	add.w	r3, r3, #4
 8011e3e:	881a      	ldrh	r2, [r3, #0]
 8011e40:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e44:	f103 0302 	add.w	r3, r3, #2
 8011e48:	8819      	ldrh	r1, [r3, #0]
 8011e4a:	4858      	ldr	r0, [pc, #352]	; (8011fac <create_DijkstraMap+0xb5c>)
 8011e4c:	4613      	mov	r3, r2
 8011e4e:	011b      	lsls	r3, r3, #4
 8011e50:	1a9b      	subs	r3, r3, r2
 8011e52:	440b      	add	r3, r1
 8011e54:	33f0      	adds	r3, #240	; 0xf0
 8011e56:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e5a:	461a      	mov	r2, r3
 8011e5c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e60:	f103 0314 	add.w	r3, r3, #20
 8011e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e68:	4413      	add	r3, r2
 8011e6a:	429c      	cmp	r4, r3
 8011e6c:	dd61      	ble.n	8011f32 <create_DijkstraMap+0xae2>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011e6e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e72:	f103 0304 	add.w	r3, r3, #4
 8011e76:	881a      	ldrh	r2, [r3, #0]
 8011e78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e7c:	f103 0302 	add.w	r3, r3, #2
 8011e80:	8819      	ldrh	r1, [r3, #0]
 8011e82:	484a      	ldr	r0, [pc, #296]	; (8011fac <create_DijkstraMap+0xb5c>)
 8011e84:	4613      	mov	r3, r2
 8011e86:	011b      	lsls	r3, r3, #4
 8011e88:	1a9b      	subs	r3, r3, r2
 8011e8a:	440b      	add	r3, r1
 8011e8c:	33f0      	adds	r3, #240	; 0xf0
 8011e8e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011e92:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011e96:	f103 0314 	add.w	r3, r3, #20
 8011e9a:	881b      	ldrh	r3, [r3, #0]
 8011e9c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011ea0:	f102 0202 	add.w	r2, r2, #2
 8011ea4:	8812      	ldrh	r2, [r2, #0]
 8011ea6:	3201      	adds	r2, #1
 8011ea8:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8011eac:	f101 0104 	add.w	r1, r1, #4
 8011eb0:	8809      	ldrh	r1, [r1, #0]
 8011eb2:	4403      	add	r3, r0
 8011eb4:	b29c      	uxth	r4, r3
 8011eb6:	483d      	ldr	r0, [pc, #244]	; (8011fac <create_DijkstraMap+0xb5c>)
 8011eb8:	4613      	mov	r3, r2
 8011eba:	011b      	lsls	r3, r3, #4
 8011ebc:	1a9b      	subs	r3, r3, r2
 8011ebe:	440b      	add	r3, r1
 8011ec0:	4622      	mov	r2, r4
 8011ec2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011ec6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011eca:	f103 0304 	add.w	r3, r3, #4
 8011ece:	881a      	ldrh	r2, [r3, #0]
 8011ed0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8011ed4:	f103 031c 	add.w	r3, r3, #28
 8011ed8:	4611      	mov	r1, r2
 8011eda:	4618      	mov	r0, r3
 8011edc:	f002 f9d8 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8011ee0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011ee4:	f103 0302 	add.w	r3, r3, #2
 8011ee8:	881b      	ldrh	r3, [r3, #0]
 8011eea:	3301      	adds	r3, #1
 8011eec:	b29a      	uxth	r2, r3
 8011eee:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8011ef2:	f103 031c 	add.w	r3, r3, #28
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f002 f9c9 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011efe:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8011f02:	3b1c      	subs	r3, #28
 8011f04:	2101      	movs	r1, #1
 8011f06:	4618      	mov	r0, r3
 8011f08:	f002 f9c2 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8011f0c:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8011f10:	3b1c      	subs	r3, #28
 8011f12:	2101      	movs	r1, #1
 8011f14:	4618      	mov	r0, r3
 8011f16:	f002 f9bb 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011f1a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f1e:	f103 0312 	add.w	r3, r3, #18
 8011f22:	881a      	ldrh	r2, [r3, #0]
 8011f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8011f28:	3b1c      	subs	r3, #28
 8011f2a:	4611      	mov	r1, r2
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	f002 f9af 	bl	8014290 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8011f32:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f36:	f103 0304 	add.w	r3, r3, #4
 8011f3a:	881b      	ldrh	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	f000 81e1 	beq.w	8012304 <create_DijkstraMap+0xeb4>
				if(Direction==SLANT_SOUTH_WEST){
 8011f42:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011f46:	f103 031e 	add.w	r3, r3, #30
 8011f4a:	881b      	ldrh	r3, [r3, #0]
 8011f4c:	2b05      	cmp	r3, #5
 8011f4e:	d12f      	bne.n	8011fb0 <create_DijkstraMap+0xb60>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011f50:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8011f54:	f103 031c 	add.w	r3, r3, #28
 8011f58:	881b      	ldrh	r3, [r3, #0]
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	b29b      	uxth	r3, r3
 8011f5e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f62:	f102 0212 	add.w	r2, r2, #18
 8011f66:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011f68:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f6c:	f103 0312 	add.w	r3, r3, #18
 8011f70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f74:	2b05      	cmp	r3, #5
 8011f76:	dd05      	ble.n	8011f84 <create_DijkstraMap+0xb34>
 8011f78:	2305      	movs	r3, #5
 8011f7a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011f7e:	f102 0212 	add.w	r2, r2, #18
 8011f82:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011f84:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011f88:	f103 0312 	add.w	r3, r3, #18
 8011f8c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011f90:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011f94:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011f98:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011f9c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fa0:	f102 0214 	add.w	r2, r2, #20
 8011fa4:	8013      	strh	r3, [r2, #0]
 8011fa6:	e013      	b.n	8011fd0 <create_DijkstraMap+0xb80>
 8011fa8:	20000c3c 	.word	0x20000c3c
 8011fac:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011fb0:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8011fb4:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8011fb8:	881b      	ldrh	r3, [r3, #0]
 8011fba:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fbe:	f102 0214 	add.w	r2, r2, #20
 8011fc2:	8013      	strh	r3, [r2, #0]
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8011fca:	f102 0212 	add.w	r2, r2, #18
 8011fce:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011fd0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fd4:	f103 0304 	add.w	r3, r3, #4
 8011fd8:	881b      	ldrh	r3, [r3, #0]
 8011fda:	3b01      	subs	r3, #1
 8011fdc:	4a69      	ldr	r2, [pc, #420]	; (8012184 <create_DijkstraMap+0xd34>)
 8011fde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8011fe8:	f103 0302 	add.w	r3, r3, #2
 8011fec:	881b      	ldrh	r3, [r3, #0]
 8011fee:	fa42 f303 	asr.w	r3, r2, r3
 8011ff2:	f003 0301 	and.w	r3, r3, #1
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f040 8091 	bne.w	801211e <create_DijkstraMap+0xcce>
 8011ffc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012000:	f103 0302 	add.w	r3, r3, #2
 8012004:	881a      	ldrh	r2, [r3, #0]
 8012006:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801200a:	f103 0304 	add.w	r3, r3, #4
 801200e:	881b      	ldrh	r3, [r3, #0]
 8012010:	1e59      	subs	r1, r3, #1
 8012012:	485d      	ldr	r0, [pc, #372]	; (8012188 <create_DijkstraMap+0xd38>)
 8012014:	4613      	mov	r3, r2
 8012016:	011b      	lsls	r3, r3, #4
 8012018:	1a9b      	subs	r3, r3, r2
 801201a:	440b      	add	r3, r1
 801201c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012020:	461c      	mov	r4, r3
 8012022:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012026:	f103 0304 	add.w	r3, r3, #4
 801202a:	881a      	ldrh	r2, [r3, #0]
 801202c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012030:	f103 0302 	add.w	r3, r3, #2
 8012034:	8819      	ldrh	r1, [r3, #0]
 8012036:	4854      	ldr	r0, [pc, #336]	; (8012188 <create_DijkstraMap+0xd38>)
 8012038:	4613      	mov	r3, r2
 801203a:	011b      	lsls	r3, r3, #4
 801203c:	1a9b      	subs	r3, r3, r2
 801203e:	440b      	add	r3, r1
 8012040:	33f0      	adds	r3, #240	; 0xf0
 8012042:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012046:	461a      	mov	r2, r3
 8012048:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801204c:	f103 0314 	add.w	r3, r3, #20
 8012050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012054:	4413      	add	r3, r2
 8012056:	429c      	cmp	r4, r3
 8012058:	dd61      	ble.n	801211e <create_DijkstraMap+0xcce>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801205a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801205e:	f103 0304 	add.w	r3, r3, #4
 8012062:	881a      	ldrh	r2, [r3, #0]
 8012064:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012068:	f103 0302 	add.w	r3, r3, #2
 801206c:	8819      	ldrh	r1, [r3, #0]
 801206e:	4846      	ldr	r0, [pc, #280]	; (8012188 <create_DijkstraMap+0xd38>)
 8012070:	4613      	mov	r3, r2
 8012072:	011b      	lsls	r3, r3, #4
 8012074:	1a9b      	subs	r3, r3, r2
 8012076:	440b      	add	r3, r1
 8012078:	33f0      	adds	r3, #240	; 0xf0
 801207a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801207e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012082:	f103 0314 	add.w	r3, r3, #20
 8012086:	881b      	ldrh	r3, [r3, #0]
 8012088:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801208c:	f102 0202 	add.w	r2, r2, #2
 8012090:	8812      	ldrh	r2, [r2, #0]
 8012092:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012096:	f101 0104 	add.w	r1, r1, #4
 801209a:	8809      	ldrh	r1, [r1, #0]
 801209c:	3901      	subs	r1, #1
 801209e:	4403      	add	r3, r0
 80120a0:	b29c      	uxth	r4, r3
 80120a2:	4839      	ldr	r0, [pc, #228]	; (8012188 <create_DijkstraMap+0xd38>)
 80120a4:	4613      	mov	r3, r2
 80120a6:	011b      	lsls	r3, r3, #4
 80120a8:	1a9b      	subs	r3, r3, r2
 80120aa:	440b      	add	r3, r1
 80120ac:	4622      	mov	r2, r4
 80120ae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 80120b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120b6:	f103 0304 	add.w	r3, r3, #4
 80120ba:	881b      	ldrh	r3, [r3, #0]
 80120bc:	3b01      	subs	r3, #1
 80120be:	b29a      	uxth	r2, r3
 80120c0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80120c4:	f103 031c 	add.w	r3, r3, #28
 80120c8:	4611      	mov	r1, r2
 80120ca:	4618      	mov	r0, r3
 80120cc:	f002 f8e0 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 80120d0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80120d4:	f103 0302 	add.w	r3, r3, #2
 80120d8:	881a      	ldrh	r2, [r3, #0]
 80120da:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80120de:	f103 031c 	add.w	r3, r3, #28
 80120e2:	4611      	mov	r1, r2
 80120e4:	4618      	mov	r0, r3
 80120e6:	f002 f8d3 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80120ea:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80120ee:	3b1c      	subs	r3, #28
 80120f0:	2101      	movs	r1, #1
 80120f2:	4618      	mov	r0, r3
 80120f4:	f002 f8cc 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 80120f8:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80120fc:	3b1c      	subs	r3, #28
 80120fe:	2105      	movs	r1, #5
 8012100:	4618      	mov	r0, r3
 8012102:	f002 f8c5 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012106:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801210a:	f103 0312 	add.w	r3, r3, #18
 801210e:	881a      	ldrh	r2, [r3, #0]
 8012110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012114:	3b1c      	subs	r3, #28
 8012116:	4611      	mov	r1, r2
 8012118:	4618      	mov	r0, r3
 801211a:	f002 f8b9 	bl	8014290 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 801211e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012122:	f103 031e 	add.w	r3, r3, #30
 8012126:	881b      	ldrh	r3, [r3, #0]
 8012128:	2b07      	cmp	r3, #7
 801212a:	d12f      	bne.n	801218c <create_DijkstraMap+0xd3c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801212c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012130:	f103 031c 	add.w	r3, r3, #28
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	3301      	adds	r3, #1
 8012138:	b29b      	uxth	r3, r3
 801213a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801213e:	f102 0212 	add.w	r2, r2, #18
 8012142:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012144:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012148:	f103 0312 	add.w	r3, r3, #18
 801214c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012150:	2b05      	cmp	r3, #5
 8012152:	dd05      	ble.n	8012160 <create_DijkstraMap+0xd10>
 8012154:	2305      	movs	r3, #5
 8012156:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801215a:	f102 0212 	add.w	r2, r2, #18
 801215e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012160:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012164:	f103 0312 	add.w	r3, r3, #18
 8012168:	f9b3 2000 	ldrsh.w	r2, [r3]
 801216c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012170:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012174:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012178:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801217c:	f102 0214 	add.w	r2, r2, #20
 8012180:	8013      	strh	r3, [r2, #0]
 8012182:	e013      	b.n	80121ac <create_DijkstraMap+0xd5c>
 8012184:	20000c3c 	.word	0x20000c3c
 8012188:	20000f2c 	.word	0x20000f2c
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801218c:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012190:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012194:	881b      	ldrh	r3, [r3, #0]
 8012196:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801219a:	f102 0214 	add.w	r2, r2, #20
 801219e:	8013      	strh	r3, [r2, #0]
 80121a0:	2300      	movs	r3, #0
 80121a2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80121a6:	f102 0212 	add.w	r2, r2, #18
 80121aa:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80121ac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121b0:	f103 0304 	add.w	r3, r3, #4
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	3b01      	subs	r3, #1
 80121b8:	4a73      	ldr	r2, [pc, #460]	; (8012388 <create_DijkstraMap+0xf38>)
 80121ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80121be:	461a      	mov	r2, r3
 80121c0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121c4:	f103 0302 	add.w	r3, r3, #2
 80121c8:	881b      	ldrh	r3, [r3, #0]
 80121ca:	3301      	adds	r3, #1
 80121cc:	fa42 f303 	asr.w	r3, r2, r3
 80121d0:	f003 0301 	and.w	r3, r3, #1
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f040 8095 	bne.w	8012304 <create_DijkstraMap+0xeb4>
 80121da:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121de:	f103 0302 	add.w	r3, r3, #2
 80121e2:	881b      	ldrh	r3, [r3, #0]
 80121e4:	1c5a      	adds	r2, r3, #1
 80121e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80121ea:	f103 0304 	add.w	r3, r3, #4
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	1e59      	subs	r1, r3, #1
 80121f2:	4866      	ldr	r0, [pc, #408]	; (801238c <create_DijkstraMap+0xf3c>)
 80121f4:	4613      	mov	r3, r2
 80121f6:	011b      	lsls	r3, r3, #4
 80121f8:	1a9b      	subs	r3, r3, r2
 80121fa:	440b      	add	r3, r1
 80121fc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012200:	461c      	mov	r4, r3
 8012202:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012206:	f103 0304 	add.w	r3, r3, #4
 801220a:	881a      	ldrh	r2, [r3, #0]
 801220c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012210:	f103 0302 	add.w	r3, r3, #2
 8012214:	8819      	ldrh	r1, [r3, #0]
 8012216:	485d      	ldr	r0, [pc, #372]	; (801238c <create_DijkstraMap+0xf3c>)
 8012218:	4613      	mov	r3, r2
 801221a:	011b      	lsls	r3, r3, #4
 801221c:	1a9b      	subs	r3, r3, r2
 801221e:	440b      	add	r3, r1
 8012220:	33f0      	adds	r3, #240	; 0xf0
 8012222:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012226:	461a      	mov	r2, r3
 8012228:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801222c:	f103 0314 	add.w	r3, r3, #20
 8012230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012234:	4413      	add	r3, r2
 8012236:	429c      	cmp	r4, r3
 8012238:	dd64      	ble.n	8012304 <create_DijkstraMap+0xeb4>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 801223a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801223e:	f103 0304 	add.w	r3, r3, #4
 8012242:	881a      	ldrh	r2, [r3, #0]
 8012244:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012248:	f103 0302 	add.w	r3, r3, #2
 801224c:	8819      	ldrh	r1, [r3, #0]
 801224e:	484f      	ldr	r0, [pc, #316]	; (801238c <create_DijkstraMap+0xf3c>)
 8012250:	4613      	mov	r3, r2
 8012252:	011b      	lsls	r3, r3, #4
 8012254:	1a9b      	subs	r3, r3, r2
 8012256:	440b      	add	r3, r1
 8012258:	33f0      	adds	r3, #240	; 0xf0
 801225a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801225e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012262:	f103 0314 	add.w	r3, r3, #20
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801226c:	f102 0202 	add.w	r2, r2, #2
 8012270:	8812      	ldrh	r2, [r2, #0]
 8012272:	3201      	adds	r2, #1
 8012274:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012278:	f101 0104 	add.w	r1, r1, #4
 801227c:	8809      	ldrh	r1, [r1, #0]
 801227e:	3901      	subs	r1, #1
 8012280:	4403      	add	r3, r0
 8012282:	b29c      	uxth	r4, r3
 8012284:	4841      	ldr	r0, [pc, #260]	; (801238c <create_DijkstraMap+0xf3c>)
 8012286:	4613      	mov	r3, r2
 8012288:	011b      	lsls	r3, r3, #4
 801228a:	1a9b      	subs	r3, r3, r2
 801228c:	440b      	add	r3, r1
 801228e:	4622      	mov	r2, r4
 8012290:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012294:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012298:	f103 0304 	add.w	r3, r3, #4
 801229c:	881b      	ldrh	r3, [r3, #0]
 801229e:	3b01      	subs	r3, #1
 80122a0:	b29a      	uxth	r2, r3
 80122a2:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80122a6:	f103 031c 	add.w	r3, r3, #28
 80122aa:	4611      	mov	r1, r2
 80122ac:	4618      	mov	r0, r3
 80122ae:	f001 ffef 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80122b2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122b6:	f103 0302 	add.w	r3, r3, #2
 80122ba:	881b      	ldrh	r3, [r3, #0]
 80122bc:	3301      	adds	r3, #1
 80122be:	b29a      	uxth	r2, r3
 80122c0:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80122c4:	f103 031c 	add.w	r3, r3, #28
 80122c8:	4611      	mov	r1, r2
 80122ca:	4618      	mov	r0, r3
 80122cc:	f001 ffe0 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 80122d0:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80122d4:	3b1c      	subs	r3, #28
 80122d6:	2101      	movs	r1, #1
 80122d8:	4618      	mov	r0, r3
 80122da:	f001 ffd9 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80122de:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80122e2:	3b1c      	subs	r3, #28
 80122e4:	2107      	movs	r1, #7
 80122e6:	4618      	mov	r0, r3
 80122e8:	f001 ffd2 	bl	8014290 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80122ec:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80122f0:	f103 0312 	add.w	r3, r3, #18
 80122f4:	881a      	ldrh	r2, [r3, #0]
 80122f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80122fa:	3b1c      	subs	r3, #28
 80122fc:	4611      	mov	r1, r2
 80122fe:	4618      	mov	r0, r3
 8012300:	f001 ffc6 	bl	8014290 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 8012304:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012308:	881b      	ldrh	r3, [r3, #0]
 801230a:	2b01      	cmp	r3, #1
 801230c:	f040 85b6 	bne.w	8012e7c <create_DijkstraMap+0x1a2c>
					if(Xcoordinate <= 13){
 8012310:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012314:	f103 0304 	add.w	r3, r3, #4
 8012318:	881b      	ldrh	r3, [r3, #0]
 801231a:	2b0d      	cmp	r3, #13
 801231c:	f200 80ed 	bhi.w	80124fa <create_DijkstraMap+0x10aa>
						if(Direction==SLANT_EAST){
 8012320:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012324:	f103 031e 	add.w	r3, r3, #30
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	2b02      	cmp	r3, #2
 801232c:	d130      	bne.n	8012390 <create_DijkstraMap+0xf40>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801232e:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012332:	f103 031c 	add.w	r3, r3, #28
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	3301      	adds	r3, #1
 801233a:	b29b      	uxth	r3, r3
 801233c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012340:	f102 0212 	add.w	r2, r2, #18
 8012344:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012346:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801234a:	f103 0312 	add.w	r3, r3, #18
 801234e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012352:	2b04      	cmp	r3, #4
 8012354:	dd05      	ble.n	8012362 <create_DijkstraMap+0xf12>
 8012356:	2304      	movs	r3, #4
 8012358:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801235c:	f102 0212 	add.w	r2, r2, #18
 8012360:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012362:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012366:	f103 0312 	add.w	r3, r3, #18
 801236a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801236e:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012372:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8012376:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801237a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801237e:	f102 0216 	add.w	r2, r2, #22
 8012382:	8013      	strh	r3, [r2, #0]
 8012384:	e014      	b.n	80123b0 <create_DijkstraMap+0xf60>
 8012386:	bf00      	nop
 8012388:	20000c3c 	.word	0x20000c3c
 801238c:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012390:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012394:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8012398:	881b      	ldrh	r3, [r3, #0]
 801239a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801239e:	f102 0216 	add.w	r2, r2, #22
 80123a2:	8013      	strh	r3, [r2, #0]
 80123a4:	2300      	movs	r3, #0
 80123a6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80123aa:	f102 0212 	add.w	r2, r2, #18
 80123ae:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 80123b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123b4:	f103 0304 	add.w	r3, r3, #4
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	3301      	adds	r3, #1
 80123bc:	4a6c      	ldr	r2, [pc, #432]	; (8012570 <create_DijkstraMap+0x1120>)
 80123be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80123c2:	461a      	mov	r2, r3
 80123c4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123c8:	f103 0302 	add.w	r3, r3, #2
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	fa42 f303 	asr.w	r3, r2, r3
 80123d2:	f003 0301 	and.w	r3, r3, #1
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	f040 808f 	bne.w	80124fa <create_DijkstraMap+0x10aa>
 80123dc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123e0:	f103 0302 	add.w	r3, r3, #2
 80123e4:	881a      	ldrh	r2, [r3, #0]
 80123e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80123ea:	f103 0304 	add.w	r3, r3, #4
 80123ee:	881b      	ldrh	r3, [r3, #0]
 80123f0:	1c59      	adds	r1, r3, #1
 80123f2:	4860      	ldr	r0, [pc, #384]	; (8012574 <create_DijkstraMap+0x1124>)
 80123f4:	4613      	mov	r3, r2
 80123f6:	011b      	lsls	r3, r3, #4
 80123f8:	1a9b      	subs	r3, r3, r2
 80123fa:	440b      	add	r3, r1
 80123fc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012400:	461c      	mov	r4, r3
 8012402:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012406:	f103 0302 	add.w	r3, r3, #2
 801240a:	881a      	ldrh	r2, [r3, #0]
 801240c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012410:	f103 0304 	add.w	r3, r3, #4
 8012414:	8819      	ldrh	r1, [r3, #0]
 8012416:	4857      	ldr	r0, [pc, #348]	; (8012574 <create_DijkstraMap+0x1124>)
 8012418:	4613      	mov	r3, r2
 801241a:	011b      	lsls	r3, r3, #4
 801241c:	1a9b      	subs	r3, r3, r2
 801241e:	440b      	add	r3, r1
 8012420:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012424:	461a      	mov	r2, r3
 8012426:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801242a:	f103 0316 	add.w	r3, r3, #22
 801242e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012432:	4413      	add	r3, r2
 8012434:	429c      	cmp	r4, r3
 8012436:	dd60      	ble.n	80124fa <create_DijkstraMap+0x10aa>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012438:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801243c:	f103 0302 	add.w	r3, r3, #2
 8012440:	881a      	ldrh	r2, [r3, #0]
 8012442:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012446:	f103 0304 	add.w	r3, r3, #4
 801244a:	8819      	ldrh	r1, [r3, #0]
 801244c:	4849      	ldr	r0, [pc, #292]	; (8012574 <create_DijkstraMap+0x1124>)
 801244e:	4613      	mov	r3, r2
 8012450:	011b      	lsls	r3, r3, #4
 8012452:	1a9b      	subs	r3, r3, r2
 8012454:	440b      	add	r3, r1
 8012456:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801245a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801245e:	f103 0316 	add.w	r3, r3, #22
 8012462:	881b      	ldrh	r3, [r3, #0]
 8012464:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012468:	f102 0202 	add.w	r2, r2, #2
 801246c:	8812      	ldrh	r2, [r2, #0]
 801246e:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012472:	f101 0104 	add.w	r1, r1, #4
 8012476:	8809      	ldrh	r1, [r1, #0]
 8012478:	3101      	adds	r1, #1
 801247a:	4403      	add	r3, r0
 801247c:	b29c      	uxth	r4, r3
 801247e:	483d      	ldr	r0, [pc, #244]	; (8012574 <create_DijkstraMap+0x1124>)
 8012480:	4613      	mov	r3, r2
 8012482:	011b      	lsls	r3, r3, #4
 8012484:	1a9b      	subs	r3, r3, r2
 8012486:	440b      	add	r3, r1
 8012488:	4622      	mov	r2, r4
 801248a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801248e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012492:	f103 0304 	add.w	r3, r3, #4
 8012496:	881b      	ldrh	r3, [r3, #0]
 8012498:	3301      	adds	r3, #1
 801249a:	b29a      	uxth	r2, r3
 801249c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80124a0:	f103 031c 	add.w	r3, r3, #28
 80124a4:	4611      	mov	r1, r2
 80124a6:	4618      	mov	r0, r3
 80124a8:	f001 fef2 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 80124ac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124b0:	f103 0302 	add.w	r3, r3, #2
 80124b4:	881a      	ldrh	r2, [r3, #0]
 80124b6:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80124ba:	f103 031c 	add.w	r3, r3, #28
 80124be:	4611      	mov	r1, r2
 80124c0:	4618      	mov	r0, r3
 80124c2:	f001 fee5 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80124c6:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80124ca:	3b1c      	subs	r3, #28
 80124cc:	2101      	movs	r1, #1
 80124ce:	4618      	mov	r0, r3
 80124d0:	f001 fede 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 80124d4:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80124d8:	3b1c      	subs	r3, #28
 80124da:	2102      	movs	r1, #2
 80124dc:	4618      	mov	r0, r3
 80124de:	f001 fed7 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80124e2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124e6:	f103 0312 	add.w	r3, r3, #18
 80124ea:	881a      	ldrh	r2, [r3, #0]
 80124ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80124f0:	3b1c      	subs	r3, #28
 80124f2:	4611      	mov	r1, r2
 80124f4:	4618      	mov	r0, r3
 80124f6:	f001 fecb 	bl	8014290 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80124fa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80124fe:	f103 0304 	add.w	r3, r3, #4
 8012502:	881b      	ldrh	r3, [r3, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 80ec 	beq.w	80126e2 <create_DijkstraMap+0x1292>
						if(Direction==SLANT_WEST){
 801250a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801250e:	f103 031e 	add.w	r3, r3, #30
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	2b06      	cmp	r3, #6
 8012516:	d12f      	bne.n	8012578 <create_DijkstraMap+0x1128>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012518:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 801251c:	f103 031c 	add.w	r3, r3, #28
 8012520:	881b      	ldrh	r3, [r3, #0]
 8012522:	3301      	adds	r3, #1
 8012524:	b29b      	uxth	r3, r3
 8012526:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801252a:	f102 0212 	add.w	r2, r2, #18
 801252e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012530:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012534:	f103 0312 	add.w	r3, r3, #18
 8012538:	f9b3 3000 	ldrsh.w	r3, [r3]
 801253c:	2b04      	cmp	r3, #4
 801253e:	dd05      	ble.n	801254c <create_DijkstraMap+0x10fc>
 8012540:	2304      	movs	r3, #4
 8012542:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012546:	f102 0212 	add.w	r2, r2, #18
 801254a:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 801254c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012550:	f103 0312 	add.w	r3, r3, #18
 8012554:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012558:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801255c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8012560:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012564:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012568:	f102 0216 	add.w	r2, r2, #22
 801256c:	8013      	strh	r3, [r2, #0]
 801256e:	e013      	b.n	8012598 <create_DijkstraMap+0x1148>
 8012570:	20000c3c 	.word	0x20000c3c
 8012574:	20000f2c 	.word	0x20000f2c
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012578:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801257c:	f6a3 33a8 	subw	r3, r3, #2984	; 0xba8
 8012580:	881b      	ldrh	r3, [r3, #0]
 8012582:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012586:	f102 0216 	add.w	r2, r2, #22
 801258a:	8013      	strh	r3, [r2, #0]
 801258c:	2300      	movs	r3, #0
 801258e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012592:	f102 0212 	add.w	r2, r2, #18
 8012596:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012598:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801259c:	f103 0304 	add.w	r3, r3, #4
 80125a0:	881b      	ldrh	r3, [r3, #0]
 80125a2:	3b01      	subs	r3, #1
 80125a4:	4a6c      	ldr	r2, [pc, #432]	; (8012758 <create_DijkstraMap+0x1308>)
 80125a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80125aa:	461a      	mov	r2, r3
 80125ac:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125b0:	f103 0302 	add.w	r3, r3, #2
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	fa42 f303 	asr.w	r3, r2, r3
 80125ba:	f003 0301 	and.w	r3, r3, #1
 80125be:	2b00      	cmp	r3, #0
 80125c0:	f040 808f 	bne.w	80126e2 <create_DijkstraMap+0x1292>
 80125c4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125c8:	f103 0302 	add.w	r3, r3, #2
 80125cc:	881a      	ldrh	r2, [r3, #0]
 80125ce:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125d2:	f103 0304 	add.w	r3, r3, #4
 80125d6:	881b      	ldrh	r3, [r3, #0]
 80125d8:	1e59      	subs	r1, r3, #1
 80125da:	4860      	ldr	r0, [pc, #384]	; (801275c <create_DijkstraMap+0x130c>)
 80125dc:	4613      	mov	r3, r2
 80125de:	011b      	lsls	r3, r3, #4
 80125e0:	1a9b      	subs	r3, r3, r2
 80125e2:	440b      	add	r3, r1
 80125e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80125e8:	461c      	mov	r4, r3
 80125ea:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125ee:	f103 0302 	add.w	r3, r3, #2
 80125f2:	881a      	ldrh	r2, [r3, #0]
 80125f4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80125f8:	f103 0304 	add.w	r3, r3, #4
 80125fc:	8819      	ldrh	r1, [r3, #0]
 80125fe:	4857      	ldr	r0, [pc, #348]	; (801275c <create_DijkstraMap+0x130c>)
 8012600:	4613      	mov	r3, r2
 8012602:	011b      	lsls	r3, r3, #4
 8012604:	1a9b      	subs	r3, r3, r2
 8012606:	440b      	add	r3, r1
 8012608:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801260c:	461a      	mov	r2, r3
 801260e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012612:	f103 0316 	add.w	r3, r3, #22
 8012616:	f9b3 3000 	ldrsh.w	r3, [r3]
 801261a:	4413      	add	r3, r2
 801261c:	429c      	cmp	r4, r3
 801261e:	dd60      	ble.n	80126e2 <create_DijkstraMap+0x1292>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012620:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012624:	f103 0302 	add.w	r3, r3, #2
 8012628:	881a      	ldrh	r2, [r3, #0]
 801262a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801262e:	f103 0304 	add.w	r3, r3, #4
 8012632:	8819      	ldrh	r1, [r3, #0]
 8012634:	4849      	ldr	r0, [pc, #292]	; (801275c <create_DijkstraMap+0x130c>)
 8012636:	4613      	mov	r3, r2
 8012638:	011b      	lsls	r3, r3, #4
 801263a:	1a9b      	subs	r3, r3, r2
 801263c:	440b      	add	r3, r1
 801263e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012642:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012646:	f103 0316 	add.w	r3, r3, #22
 801264a:	881b      	ldrh	r3, [r3, #0]
 801264c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012650:	f102 0202 	add.w	r2, r2, #2
 8012654:	8812      	ldrh	r2, [r2, #0]
 8012656:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 801265a:	f101 0104 	add.w	r1, r1, #4
 801265e:	8809      	ldrh	r1, [r1, #0]
 8012660:	3901      	subs	r1, #1
 8012662:	4403      	add	r3, r0
 8012664:	b29c      	uxth	r4, r3
 8012666:	483d      	ldr	r0, [pc, #244]	; (801275c <create_DijkstraMap+0x130c>)
 8012668:	4613      	mov	r3, r2
 801266a:	011b      	lsls	r3, r3, #4
 801266c:	1a9b      	subs	r3, r3, r2
 801266e:	440b      	add	r3, r1
 8012670:	4622      	mov	r2, r4
 8012672:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 8012676:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801267a:	f103 0304 	add.w	r3, r3, #4
 801267e:	881b      	ldrh	r3, [r3, #0]
 8012680:	3b01      	subs	r3, #1
 8012682:	b29a      	uxth	r2, r3
 8012684:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012688:	f103 031c 	add.w	r3, r3, #28
 801268c:	4611      	mov	r1, r2
 801268e:	4618      	mov	r0, r3
 8012690:	f001 fdfe 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012694:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012698:	f103 0302 	add.w	r3, r3, #2
 801269c:	881a      	ldrh	r2, [r3, #0]
 801269e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80126a2:	f103 031c 	add.w	r3, r3, #28
 80126a6:	4611      	mov	r1, r2
 80126a8:	4618      	mov	r0, r3
 80126aa:	f001 fdf1 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 80126ae:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 80126b2:	3b1c      	subs	r3, #28
 80126b4:	2101      	movs	r1, #1
 80126b6:	4618      	mov	r0, r3
 80126b8:	f001 fdea 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80126bc:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80126c0:	3b1c      	subs	r3, #28
 80126c2:	2106      	movs	r1, #6
 80126c4:	4618      	mov	r0, r3
 80126c6:	f001 fde3 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80126ca:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126ce:	f103 0312 	add.w	r3, r3, #18
 80126d2:	881a      	ldrh	r2, [r3, #0]
 80126d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80126d8:	3b1c      	subs	r3, #28
 80126da:	4611      	mov	r1, r2
 80126dc:	4618      	mov	r0, r3
 80126de:	f001 fdd7 	bl	8014290 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80126e2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80126e6:	f103 0302 	add.w	r3, r3, #2
 80126ea:	881b      	ldrh	r3, [r3, #0]
 80126ec:	2b0e      	cmp	r3, #14
 80126ee:	f200 81dc 	bhi.w	8012aaa <create_DijkstraMap+0x165a>
						if(Direction==SLANT_NORTH_WEST){
 80126f2:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80126f6:	f103 031e 	add.w	r3, r3, #30
 80126fa:	881b      	ldrh	r3, [r3, #0]
 80126fc:	2b07      	cmp	r3, #7
 80126fe:	d12f      	bne.n	8012760 <create_DijkstraMap+0x1310>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012700:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012704:	f103 031c 	add.w	r3, r3, #28
 8012708:	881b      	ldrh	r3, [r3, #0]
 801270a:	3301      	adds	r3, #1
 801270c:	b29b      	uxth	r3, r3
 801270e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012712:	f102 0212 	add.w	r2, r2, #18
 8012716:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012718:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801271c:	f103 0312 	add.w	r3, r3, #18
 8012720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012724:	2b05      	cmp	r3, #5
 8012726:	dd05      	ble.n	8012734 <create_DijkstraMap+0x12e4>
 8012728:	2305      	movs	r3, #5
 801272a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801272e:	f102 0212 	add.w	r2, r2, #18
 8012732:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012734:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012738:	f103 0312 	add.w	r3, r3, #18
 801273c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012740:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012744:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012748:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801274c:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012750:	f102 0214 	add.w	r2, r2, #20
 8012754:	8013      	strh	r3, [r2, #0]
 8012756:	e013      	b.n	8012780 <create_DijkstraMap+0x1330>
 8012758:	20000c3c 	.word	0x20000c3c
 801275c:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012760:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012764:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012768:	881b      	ldrh	r3, [r3, #0]
 801276a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801276e:	f102 0214 	add.w	r2, r2, #20
 8012772:	8013      	strh	r3, [r2, #0]
 8012774:	2300      	movs	r3, #0
 8012776:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801277a:	f102 0212 	add.w	r2, r2, #18
 801277e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012780:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012784:	f103 0302 	add.w	r3, r3, #2
 8012788:	881b      	ldrh	r3, [r3, #0]
 801278a:	4a69      	ldr	r2, [pc, #420]	; (8012930 <create_DijkstraMap+0x14e0>)
 801278c:	330c      	adds	r3, #12
 801278e:	005b      	lsls	r3, r3, #1
 8012790:	4413      	add	r3, r2
 8012792:	88db      	ldrh	r3, [r3, #6]
 8012794:	461a      	mov	r2, r3
 8012796:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801279a:	f103 0304 	add.w	r3, r3, #4
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	fa42 f303 	asr.w	r3, r2, r3
 80127a4:	f003 0301 	and.w	r3, r3, #1
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	f040 808d 	bne.w	80128c8 <create_DijkstraMap+0x1478>
 80127ae:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127b2:	f103 0304 	add.w	r3, r3, #4
 80127b6:	881a      	ldrh	r2, [r3, #0]
 80127b8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127bc:	f103 0302 	add.w	r3, r3, #2
 80127c0:	8819      	ldrh	r1, [r3, #0]
 80127c2:	485c      	ldr	r0, [pc, #368]	; (8012934 <create_DijkstraMap+0x14e4>)
 80127c4:	4613      	mov	r3, r2
 80127c6:	011b      	lsls	r3, r3, #4
 80127c8:	1a9b      	subs	r3, r3, r2
 80127ca:	440b      	add	r3, r1
 80127cc:	33f0      	adds	r3, #240	; 0xf0
 80127ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127d2:	461c      	mov	r4, r3
 80127d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127d8:	f103 0302 	add.w	r3, r3, #2
 80127dc:	881a      	ldrh	r2, [r3, #0]
 80127de:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127e2:	f103 0304 	add.w	r3, r3, #4
 80127e6:	8819      	ldrh	r1, [r3, #0]
 80127e8:	4852      	ldr	r0, [pc, #328]	; (8012934 <create_DijkstraMap+0x14e4>)
 80127ea:	4613      	mov	r3, r2
 80127ec:	011b      	lsls	r3, r3, #4
 80127ee:	1a9b      	subs	r3, r3, r2
 80127f0:	440b      	add	r3, r1
 80127f2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80127f6:	461a      	mov	r2, r3
 80127f8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80127fc:	f103 0314 	add.w	r3, r3, #20
 8012800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012804:	4413      	add	r3, r2
 8012806:	429c      	cmp	r4, r3
 8012808:	dd5e      	ble.n	80128c8 <create_DijkstraMap+0x1478>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801280a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801280e:	f103 0302 	add.w	r3, r3, #2
 8012812:	881a      	ldrh	r2, [r3, #0]
 8012814:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012818:	f103 0304 	add.w	r3, r3, #4
 801281c:	8819      	ldrh	r1, [r3, #0]
 801281e:	4845      	ldr	r0, [pc, #276]	; (8012934 <create_DijkstraMap+0x14e4>)
 8012820:	4613      	mov	r3, r2
 8012822:	011b      	lsls	r3, r3, #4
 8012824:	1a9b      	subs	r3, r3, r2
 8012826:	440b      	add	r3, r1
 8012828:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801282c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012830:	f103 0314 	add.w	r3, r3, #20
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 801283a:	f102 0204 	add.w	r2, r2, #4
 801283e:	8812      	ldrh	r2, [r2, #0]
 8012840:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012844:	f101 0102 	add.w	r1, r1, #2
 8012848:	8809      	ldrh	r1, [r1, #0]
 801284a:	4403      	add	r3, r0
 801284c:	b29c      	uxth	r4, r3
 801284e:	4839      	ldr	r0, [pc, #228]	; (8012934 <create_DijkstraMap+0x14e4>)
 8012850:	4613      	mov	r3, r2
 8012852:	011b      	lsls	r3, r3, #4
 8012854:	1a9b      	subs	r3, r3, r2
 8012856:	440b      	add	r3, r1
 8012858:	33f0      	adds	r3, #240	; 0xf0
 801285a:	4622      	mov	r2, r4
 801285c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012860:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012864:	f103 0304 	add.w	r3, r3, #4
 8012868:	881a      	ldrh	r2, [r3, #0]
 801286a:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801286e:	f103 031c 	add.w	r3, r3, #28
 8012872:	4611      	mov	r1, r2
 8012874:	4618      	mov	r0, r3
 8012876:	f001 fd0b 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801287a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801287e:	f103 0302 	add.w	r3, r3, #2
 8012882:	881a      	ldrh	r2, [r3, #0]
 8012884:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012888:	f103 031c 	add.w	r3, r3, #28
 801288c:	4611      	mov	r1, r2
 801288e:	4618      	mov	r0, r3
 8012890:	f001 fcfe 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012894:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012898:	3b1c      	subs	r3, #28
 801289a:	2100      	movs	r1, #0
 801289c:	4618      	mov	r0, r3
 801289e:	f001 fcf7 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80128a2:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 80128a6:	3b1c      	subs	r3, #28
 80128a8:	2107      	movs	r1, #7
 80128aa:	4618      	mov	r0, r3
 80128ac:	f001 fcf0 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80128b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128b4:	f103 0312 	add.w	r3, r3, #18
 80128b8:	881a      	ldrh	r2, [r3, #0]
 80128ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80128be:	3b1c      	subs	r3, #28
 80128c0:	4611      	mov	r1, r2
 80128c2:	4618      	mov	r0, r3
 80128c4:	f001 fce4 	bl	8014290 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 80128c8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80128cc:	f103 031e 	add.w	r3, r3, #30
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	2b01      	cmp	r3, #1
 80128d4:	d130      	bne.n	8012938 <create_DijkstraMap+0x14e8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80128d6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80128da:	f103 031c 	add.w	r3, r3, #28
 80128de:	881b      	ldrh	r3, [r3, #0]
 80128e0:	3301      	adds	r3, #1
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 80128e8:	f102 0212 	add.w	r2, r2, #18
 80128ec:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80128ee:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80128f2:	f103 0312 	add.w	r3, r3, #18
 80128f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128fa:	2b05      	cmp	r3, #5
 80128fc:	dd05      	ble.n	801290a <create_DijkstraMap+0x14ba>
 80128fe:	2305      	movs	r3, #5
 8012900:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012904:	f102 0212 	add.w	r2, r2, #18
 8012908:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801290a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801290e:	f103 0312 	add.w	r3, r3, #18
 8012912:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012916:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801291a:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 801291e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012922:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012926:	f102 0214 	add.w	r2, r2, #20
 801292a:	8013      	strh	r3, [r2, #0]
 801292c:	e014      	b.n	8012958 <create_DijkstraMap+0x1508>
 801292e:	bf00      	nop
 8012930:	20000c3c 	.word	0x20000c3c
 8012934:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012938:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 801293c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012940:	881b      	ldrh	r3, [r3, #0]
 8012942:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012946:	f102 0214 	add.w	r2, r2, #20
 801294a:	8013      	strh	r3, [r2, #0]
 801294c:	2300      	movs	r3, #0
 801294e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012952:	f102 0212 	add.w	r2, r2, #18
 8012956:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012958:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801295c:	f103 0302 	add.w	r3, r3, #2
 8012960:	881b      	ldrh	r3, [r3, #0]
 8012962:	4a6f      	ldr	r2, [pc, #444]	; (8012b20 <create_DijkstraMap+0x16d0>)
 8012964:	330c      	adds	r3, #12
 8012966:	005b      	lsls	r3, r3, #1
 8012968:	4413      	add	r3, r2
 801296a:	88db      	ldrh	r3, [r3, #6]
 801296c:	461a      	mov	r2, r3
 801296e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012972:	f103 0304 	add.w	r3, r3, #4
 8012976:	881b      	ldrh	r3, [r3, #0]
 8012978:	3301      	adds	r3, #1
 801297a:	fa42 f303 	asr.w	r3, r2, r3
 801297e:	f003 0301 	and.w	r3, r3, #1
 8012982:	2b00      	cmp	r3, #0
 8012984:	f040 8091 	bne.w	8012aaa <create_DijkstraMap+0x165a>
 8012988:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 801298c:	f103 0304 	add.w	r3, r3, #4
 8012990:	881b      	ldrh	r3, [r3, #0]
 8012992:	1c5a      	adds	r2, r3, #1
 8012994:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012998:	f103 0302 	add.w	r3, r3, #2
 801299c:	8819      	ldrh	r1, [r3, #0]
 801299e:	4861      	ldr	r0, [pc, #388]	; (8012b24 <create_DijkstraMap+0x16d4>)
 80129a0:	4613      	mov	r3, r2
 80129a2:	011b      	lsls	r3, r3, #4
 80129a4:	1a9b      	subs	r3, r3, r2
 80129a6:	440b      	add	r3, r1
 80129a8:	33f0      	adds	r3, #240	; 0xf0
 80129aa:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80129ae:	461c      	mov	r4, r3
 80129b0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129b4:	f103 0302 	add.w	r3, r3, #2
 80129b8:	881a      	ldrh	r2, [r3, #0]
 80129ba:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129be:	f103 0304 	add.w	r3, r3, #4
 80129c2:	8819      	ldrh	r1, [r3, #0]
 80129c4:	4857      	ldr	r0, [pc, #348]	; (8012b24 <create_DijkstraMap+0x16d4>)
 80129c6:	4613      	mov	r3, r2
 80129c8:	011b      	lsls	r3, r3, #4
 80129ca:	1a9b      	subs	r3, r3, r2
 80129cc:	440b      	add	r3, r1
 80129ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80129d2:	461a      	mov	r2, r3
 80129d4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129d8:	f103 0314 	add.w	r3, r3, #20
 80129dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129e0:	4413      	add	r3, r2
 80129e2:	429c      	cmp	r4, r3
 80129e4:	dd61      	ble.n	8012aaa <create_DijkstraMap+0x165a>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80129e6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129ea:	f103 0302 	add.w	r3, r3, #2
 80129ee:	881a      	ldrh	r2, [r3, #0]
 80129f0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 80129f4:	f103 0304 	add.w	r3, r3, #4
 80129f8:	8819      	ldrh	r1, [r3, #0]
 80129fa:	484a      	ldr	r0, [pc, #296]	; (8012b24 <create_DijkstraMap+0x16d4>)
 80129fc:	4613      	mov	r3, r2
 80129fe:	011b      	lsls	r3, r3, #4
 8012a00:	1a9b      	subs	r3, r3, r2
 8012a02:	440b      	add	r3, r1
 8012a04:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012a08:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a0c:	f103 0314 	add.w	r3, r3, #20
 8012a10:	881b      	ldrh	r3, [r3, #0]
 8012a12:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012a16:	f102 0204 	add.w	r2, r2, #4
 8012a1a:	8812      	ldrh	r2, [r2, #0]
 8012a1c:	3201      	adds	r2, #1
 8012a1e:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012a22:	f101 0102 	add.w	r1, r1, #2
 8012a26:	8809      	ldrh	r1, [r1, #0]
 8012a28:	4403      	add	r3, r0
 8012a2a:	b29c      	uxth	r4, r3
 8012a2c:	483d      	ldr	r0, [pc, #244]	; (8012b24 <create_DijkstraMap+0x16d4>)
 8012a2e:	4613      	mov	r3, r2
 8012a30:	011b      	lsls	r3, r3, #4
 8012a32:	1a9b      	subs	r3, r3, r2
 8012a34:	440b      	add	r3, r1
 8012a36:	33f0      	adds	r3, #240	; 0xf0
 8012a38:	4622      	mov	r2, r4
 8012a3a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012a3e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a42:	f103 0304 	add.w	r3, r3, #4
 8012a46:	881b      	ldrh	r3, [r3, #0]
 8012a48:	3301      	adds	r3, #1
 8012a4a:	b29a      	uxth	r2, r3
 8012a4c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012a50:	f103 031c 	add.w	r3, r3, #28
 8012a54:	4611      	mov	r1, r2
 8012a56:	4618      	mov	r0, r3
 8012a58:	f001 fc1a 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012a5c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a60:	f103 0302 	add.w	r3, r3, #2
 8012a64:	881a      	ldrh	r2, [r3, #0]
 8012a66:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012a6a:	f103 031c 	add.w	r3, r3, #28
 8012a6e:	4611      	mov	r1, r2
 8012a70:	4618      	mov	r0, r3
 8012a72:	f001 fc0d 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012a76:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012a7a:	3b1c      	subs	r3, #28
 8012a7c:	2100      	movs	r1, #0
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f001 fc06 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012a84:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012a88:	3b1c      	subs	r3, #28
 8012a8a:	2101      	movs	r1, #1
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	f001 fbff 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012a92:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012a96:	f103 0312 	add.w	r3, r3, #18
 8012a9a:	881a      	ldrh	r2, [r3, #0]
 8012a9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012aa0:	3b1c      	subs	r3, #28
 8012aa2:	4611      	mov	r1, r2
 8012aa4:	4618      	mov	r0, r3
 8012aa6:	f001 fbf3 	bl	8014290 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012aaa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012aae:	f103 0302 	add.w	r3, r3, #2
 8012ab2:	881b      	ldrh	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	f000 81e1 	beq.w	8012e7c <create_DijkstraMap+0x1a2c>
						if(Direction==SLANT_SOUTH_WEST){
 8012aba:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012abe:	f103 031e 	add.w	r3, r3, #30
 8012ac2:	881b      	ldrh	r3, [r3, #0]
 8012ac4:	2b05      	cmp	r3, #5
 8012ac6:	d12f      	bne.n	8012b28 <create_DijkstraMap+0x16d8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012ac8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012acc:	f103 031c 	add.w	r3, r3, #28
 8012ad0:	881b      	ldrh	r3, [r3, #0]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012ada:	f102 0212 	add.w	r2, r2, #18
 8012ade:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012ae0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ae4:	f103 0312 	add.w	r3, r3, #18
 8012ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012aec:	2b05      	cmp	r3, #5
 8012aee:	dd05      	ble.n	8012afc <create_DijkstraMap+0x16ac>
 8012af0:	2305      	movs	r3, #5
 8012af2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012af6:	f102 0212 	add.w	r2, r2, #18
 8012afa:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012afc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b00:	f103 0312 	add.w	r3, r3, #18
 8012b04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b08:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b0c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b10:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012b14:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b18:	f102 0214 	add.w	r2, r2, #20
 8012b1c:	8013      	strh	r3, [r2, #0]
 8012b1e:	e013      	b.n	8012b48 <create_DijkstraMap+0x16f8>
 8012b20:	20000c3c 	.word	0x20000c3c
 8012b24:	20000f2c 	.word	0x20000f2c
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012b28:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012b2c:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012b30:	881b      	ldrh	r3, [r3, #0]
 8012b32:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b36:	f102 0214 	add.w	r2, r2, #20
 8012b3a:	8013      	strh	r3, [r2, #0]
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012b42:	f102 0212 	add.w	r2, r2, #18
 8012b46:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012b48:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b4c:	f103 0302 	add.w	r3, r3, #2
 8012b50:	881b      	ldrh	r3, [r3, #0]
 8012b52:	3b01      	subs	r3, #1
 8012b54:	4ad3      	ldr	r2, [pc, #844]	; (8012ea4 <create_DijkstraMap+0x1a54>)
 8012b56:	330c      	adds	r3, #12
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	88db      	ldrh	r3, [r3, #6]
 8012b5e:	461a      	mov	r2, r3
 8012b60:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b64:	f103 0304 	add.w	r3, r3, #4
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	fa42 f303 	asr.w	r3, r2, r3
 8012b6e:	f003 0301 	and.w	r3, r3, #1
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	f040 8091 	bne.w	8012c9a <create_DijkstraMap+0x184a>
 8012b78:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b7c:	f103 0304 	add.w	r3, r3, #4
 8012b80:	881a      	ldrh	r2, [r3, #0]
 8012b82:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012b86:	f103 0302 	add.w	r3, r3, #2
 8012b8a:	881b      	ldrh	r3, [r3, #0]
 8012b8c:	1e59      	subs	r1, r3, #1
 8012b8e:	48c6      	ldr	r0, [pc, #792]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012b90:	4613      	mov	r3, r2
 8012b92:	011b      	lsls	r3, r3, #4
 8012b94:	1a9b      	subs	r3, r3, r2
 8012b96:	440b      	add	r3, r1
 8012b98:	33f0      	adds	r3, #240	; 0xf0
 8012b9a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b9e:	461c      	mov	r4, r3
 8012ba0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ba4:	f103 0302 	add.w	r3, r3, #2
 8012ba8:	881a      	ldrh	r2, [r3, #0]
 8012baa:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bae:	f103 0304 	add.w	r3, r3, #4
 8012bb2:	8819      	ldrh	r1, [r3, #0]
 8012bb4:	48bc      	ldr	r0, [pc, #752]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012bb6:	4613      	mov	r3, r2
 8012bb8:	011b      	lsls	r3, r3, #4
 8012bba:	1a9b      	subs	r3, r3, r2
 8012bbc:	440b      	add	r3, r1
 8012bbe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bc8:	f103 0314 	add.w	r3, r3, #20
 8012bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bd0:	4413      	add	r3, r2
 8012bd2:	429c      	cmp	r4, r3
 8012bd4:	dd61      	ble.n	8012c9a <create_DijkstraMap+0x184a>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012bd6:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bda:	f103 0302 	add.w	r3, r3, #2
 8012bde:	881a      	ldrh	r2, [r3, #0]
 8012be0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012be4:	f103 0304 	add.w	r3, r3, #4
 8012be8:	8819      	ldrh	r1, [r3, #0]
 8012bea:	48af      	ldr	r0, [pc, #700]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012bec:	4613      	mov	r3, r2
 8012bee:	011b      	lsls	r3, r3, #4
 8012bf0:	1a9b      	subs	r3, r3, r2
 8012bf2:	440b      	add	r3, r1
 8012bf4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012bf8:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012bfc:	f103 0314 	add.w	r3, r3, #20
 8012c00:	881b      	ldrh	r3, [r3, #0]
 8012c02:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012c06:	f102 0204 	add.w	r2, r2, #4
 8012c0a:	8812      	ldrh	r2, [r2, #0]
 8012c0c:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012c10:	f101 0102 	add.w	r1, r1, #2
 8012c14:	8809      	ldrh	r1, [r1, #0]
 8012c16:	3901      	subs	r1, #1
 8012c18:	4403      	add	r3, r0
 8012c1a:	b29c      	uxth	r4, r3
 8012c1c:	48a2      	ldr	r0, [pc, #648]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012c1e:	4613      	mov	r3, r2
 8012c20:	011b      	lsls	r3, r3, #4
 8012c22:	1a9b      	subs	r3, r3, r2
 8012c24:	440b      	add	r3, r1
 8012c26:	33f0      	adds	r3, #240	; 0xf0
 8012c28:	4622      	mov	r2, r4
 8012c2a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012c2e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c32:	f103 0304 	add.w	r3, r3, #4
 8012c36:	881a      	ldrh	r2, [r3, #0]
 8012c38:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012c3c:	f103 031c 	add.w	r3, r3, #28
 8012c40:	4611      	mov	r1, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f001 fb24 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012c48:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c4c:	f103 0302 	add.w	r3, r3, #2
 8012c50:	881b      	ldrh	r3, [r3, #0]
 8012c52:	3b01      	subs	r3, #1
 8012c54:	b29a      	uxth	r2, r3
 8012c56:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012c5a:	f103 031c 	add.w	r3, r3, #28
 8012c5e:	4611      	mov	r1, r2
 8012c60:	4618      	mov	r0, r3
 8012c62:	f001 fb15 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012c66:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012c6a:	3b1c      	subs	r3, #28
 8012c6c:	2100      	movs	r1, #0
 8012c6e:	4618      	mov	r0, r3
 8012c70:	f001 fb0e 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012c74:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012c78:	3b1c      	subs	r3, #28
 8012c7a:	2105      	movs	r1, #5
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f001 fb07 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012c82:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012c86:	f103 0312 	add.w	r3, r3, #18
 8012c8a:	881a      	ldrh	r2, [r3, #0]
 8012c8c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012c90:	3b1c      	subs	r3, #28
 8012c92:	4611      	mov	r1, r2
 8012c94:	4618      	mov	r0, r3
 8012c96:	f001 fafb 	bl	8014290 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012c9a:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012c9e:	f103 031e 	add.w	r3, r3, #30
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	2b03      	cmp	r3, #3
 8012ca6:	d12b      	bne.n	8012d00 <create_DijkstraMap+0x18b0>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012ca8:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012cac:	f103 031c 	add.w	r3, r3, #28
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	b29b      	uxth	r3, r3
 8012cb6:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012cba:	f102 0212 	add.w	r2, r2, #18
 8012cbe:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012cc0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012cc4:	f103 0312 	add.w	r3, r3, #18
 8012cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ccc:	2b05      	cmp	r3, #5
 8012cce:	dd05      	ble.n	8012cdc <create_DijkstraMap+0x188c>
 8012cd0:	2305      	movs	r3, #5
 8012cd2:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012cd6:	f102 0212 	add.w	r2, r2, #18
 8012cda:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012cdc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012ce0:	f103 0312 	add.w	r3, r3, #18
 8012ce4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012ce8:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012cec:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012cf0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012cf4:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012cf8:	f102 0214 	add.w	r2, r2, #20
 8012cfc:	8013      	strh	r3, [r2, #0]
 8012cfe:	e00f      	b.n	8012d20 <create_DijkstraMap+0x18d0>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012d00:	f607 33b8 	addw	r3, r7, #3000	; 0xbb8
 8012d04:	f6a3 33b4 	subw	r3, r3, #2996	; 0xbb4
 8012d08:	881b      	ldrh	r3, [r3, #0]
 8012d0a:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d0e:	f102 0214 	add.w	r2, r2, #20
 8012d12:	8013      	strh	r3, [r2, #0]
 8012d14:	2300      	movs	r3, #0
 8012d16:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012d1a:	f102 0212 	add.w	r2, r2, #18
 8012d1e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012d20:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d24:	f103 0302 	add.w	r3, r3, #2
 8012d28:	881b      	ldrh	r3, [r3, #0]
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	4a5d      	ldr	r2, [pc, #372]	; (8012ea4 <create_DijkstraMap+0x1a54>)
 8012d2e:	330c      	adds	r3, #12
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4413      	add	r3, r2
 8012d34:	88db      	ldrh	r3, [r3, #6]
 8012d36:	461a      	mov	r2, r3
 8012d38:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d3c:	f103 0304 	add.w	r3, r3, #4
 8012d40:	881b      	ldrh	r3, [r3, #0]
 8012d42:	3301      	adds	r3, #1
 8012d44:	fa42 f303 	asr.w	r3, r2, r3
 8012d48:	f003 0301 	and.w	r3, r3, #1
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	f040 8095 	bne.w	8012e7c <create_DijkstraMap+0x1a2c>
 8012d52:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d56:	f103 0304 	add.w	r3, r3, #4
 8012d5a:	881b      	ldrh	r3, [r3, #0]
 8012d5c:	1c5a      	adds	r2, r3, #1
 8012d5e:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d62:	f103 0302 	add.w	r3, r3, #2
 8012d66:	881b      	ldrh	r3, [r3, #0]
 8012d68:	1e59      	subs	r1, r3, #1
 8012d6a:	484f      	ldr	r0, [pc, #316]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012d6c:	4613      	mov	r3, r2
 8012d6e:	011b      	lsls	r3, r3, #4
 8012d70:	1a9b      	subs	r3, r3, r2
 8012d72:	440b      	add	r3, r1
 8012d74:	33f0      	adds	r3, #240	; 0xf0
 8012d76:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d7a:	461c      	mov	r4, r3
 8012d7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d80:	f103 0302 	add.w	r3, r3, #2
 8012d84:	881a      	ldrh	r2, [r3, #0]
 8012d86:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012d8a:	f103 0304 	add.w	r3, r3, #4
 8012d8e:	8819      	ldrh	r1, [r3, #0]
 8012d90:	4845      	ldr	r0, [pc, #276]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012d92:	4613      	mov	r3, r2
 8012d94:	011b      	lsls	r3, r3, #4
 8012d96:	1a9b      	subs	r3, r3, r2
 8012d98:	440b      	add	r3, r1
 8012d9a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d9e:	461a      	mov	r2, r3
 8012da0:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012da4:	f103 0314 	add.w	r3, r3, #20
 8012da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012dac:	4413      	add	r3, r2
 8012dae:	429c      	cmp	r4, r3
 8012db0:	dd64      	ble.n	8012e7c <create_DijkstraMap+0x1a2c>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012db2:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012db6:	f103 0302 	add.w	r3, r3, #2
 8012dba:	881a      	ldrh	r2, [r3, #0]
 8012dbc:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dc0:	f103 0304 	add.w	r3, r3, #4
 8012dc4:	8819      	ldrh	r1, [r3, #0]
 8012dc6:	4838      	ldr	r0, [pc, #224]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012dc8:	4613      	mov	r3, r2
 8012dca:	011b      	lsls	r3, r3, #4
 8012dcc:	1a9b      	subs	r3, r3, r2
 8012dce:	440b      	add	r3, r1
 8012dd0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012dd4:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012dd8:	f103 0314 	add.w	r3, r3, #20
 8012ddc:	881b      	ldrh	r3, [r3, #0]
 8012dde:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012de2:	f102 0204 	add.w	r2, r2, #4
 8012de6:	8812      	ldrh	r2, [r2, #0]
 8012de8:	3201      	adds	r2, #1
 8012dea:	f507 51dd 	add.w	r1, r7, #7072	; 0x1ba0
 8012dee:	f101 0102 	add.w	r1, r1, #2
 8012df2:	8809      	ldrh	r1, [r1, #0]
 8012df4:	3901      	subs	r1, #1
 8012df6:	4403      	add	r3, r0
 8012df8:	b29c      	uxth	r4, r3
 8012dfa:	482b      	ldr	r0, [pc, #172]	; (8012ea8 <create_DijkstraMap+0x1a58>)
 8012dfc:	4613      	mov	r3, r2
 8012dfe:	011b      	lsls	r3, r3, #4
 8012e00:	1a9b      	subs	r3, r3, r2
 8012e02:	440b      	add	r3, r1
 8012e04:	33f0      	adds	r3, #240	; 0xf0
 8012e06:	4622      	mov	r2, r4
 8012e08:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8012e0c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e10:	f103 0304 	add.w	r3, r3, #4
 8012e14:	881b      	ldrh	r3, [r3, #0]
 8012e16:	3301      	adds	r3, #1
 8012e18:	b29a      	uxth	r2, r3
 8012e1a:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012e1e:	f103 031c 	add.w	r3, r3, #28
 8012e22:	4611      	mov	r1, r2
 8012e24:	4618      	mov	r0, r3
 8012e26:	f001 fa33 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8012e2a:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e2e:	f103 0302 	add.w	r3, r3, #2
 8012e32:	881b      	ldrh	r3, [r3, #0]
 8012e34:	3b01      	subs	r3, #1
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8012e3c:	f103 031c 	add.w	r3, r3, #28
 8012e40:	4611      	mov	r1, r2
 8012e42:	4618      	mov	r0, r3
 8012e44:	f001 fa24 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012e48:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8012e4c:	3b1c      	subs	r3, #28
 8012e4e:	2100      	movs	r1, #0
 8012e50:	4618      	mov	r0, r3
 8012e52:	f001 fa1d 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8012e56:	f507 63b7 	add.w	r3, r7, #1464	; 0x5b8
 8012e5a:	3b1c      	subs	r3, #28
 8012e5c:	2103      	movs	r1, #3
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f001 fa16 	bl	8014290 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012e64:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e68:	f103 0312 	add.w	r3, r3, #18
 8012e6c:	881a      	ldrh	r2, [r3, #0]
 8012e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012e72:	3b1c      	subs	r3, #28
 8012e74:	4611      	mov	r1, r2
 8012e76:	4618      	mov	r0, r3
 8012e78:	f001 fa0a 	bl	8014290 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8012e7c:	f507 53dd 	add.w	r3, r7, #7072	; 0x1ba0
 8012e80:	f103 0306 	add.w	r3, r3, #6
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	3301      	adds	r3, #1
 8012e88:	f507 52dd 	add.w	r2, r7, #7072	; 0x1ba0
 8012e8c:	f102 0206 	add.w	r2, r2, #6
 8012e90:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8012e92:	f7fe bc21 	b.w	80116d8 <create_DijkstraMap+0x288>

		}



}
 8012e96:	bf00      	nop
 8012e98:	f507 57dd 	add.w	r7, r7, #7072	; 0x1ba0
 8012e9c:	371c      	adds	r7, #28
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd90      	pop	{r4, r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	20000c3c 	.word	0x20000c3c
 8012ea8:	20000f2c 	.word	0x20000f2c

08012eac <route_Dijkstra>:





void route_Dijkstra(void){
 8012eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012eae:	f5ad 5d04 	sub.w	sp, sp, #8448	; 0x2100
 8012eb2:	b08d      	sub	sp, #52	; 0x34
 8012eb4:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 8012eb6:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012eba:	f103 0314 	add.w	r3, r3, #20
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f001 f9d6 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_y);
 8012ec4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012ec8:	f103 0314 	add.w	r3, r3, #20
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f001 f9cf 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_matrix);
 8012ed2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8012ed6:	3b0c      	subs	r3, #12
 8012ed8:	4618      	mov	r0, r3
 8012eda:	f001 f9c9 	bl	8014270 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8012ede:	48c9      	ldr	r0, [pc, #804]	; (8013204 <route_Dijkstra+0x358>)
 8012ee0:	f001 f9c6 	bl	8014270 <initStack_walk>
	initStack_walk(&g_Goal_y);
 8012ee4:	48c8      	ldr	r0, [pc, #800]	; (8013208 <route_Dijkstra+0x35c>)
 8012ee6:	f001 f9c3 	bl	8014270 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8012eea:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8012eee:	f103 0314 	add.w	r3, r3, #20
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f001 f9cb 	bl	8014290 <pushStack_walk>
 8012efa:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8012efe:	f103 0314 	add.w	r3, r3, #20
 8012f02:	2100      	movs	r1, #0
 8012f04:	4618      	mov	r0, r3
 8012f06:	f001 f9c3 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 8012f0a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8012f0e:	3b0c      	subs	r3, #12
 8012f10:	2100      	movs	r1, #0
 8012f12:	4618      	mov	r0, r3
 8012f14:	f001 f9bc 	bl	8014290 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 8012f18:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f1c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012f20:	2200      	movs	r2, #0
 8012f22:	601a      	str	r2, [r3, #0]
	int y = 0;
 8012f24:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f28:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	601a      	str	r2, [r3, #0]
	int direction = 1;
 8012f30:	2301      	movs	r3, #1
 8012f32:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8012f36:	f102 021c 	add.w	r2, r2, #28
 8012f3a:	6013      	str	r3, [r2, #0]
	create_DijkstraMap();
 8012f3c:	f7fe fa88 	bl	8011450 <create_DijkstraMap>

	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 8012f40:	f107 0120 	add.w	r1, r7, #32
 8012f44:	3920      	subs	r1, #32
 8012f46:	f107 0320 	add.w	r3, r7, #32
 8012f4a:	3b1c      	subs	r3, #28
 8012f4c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8012f50:	f102 021c 	add.w	r2, r2, #28
 8012f54:	6812      	ldr	r2, [r2, #0]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f7fa ffdc 	bl	800df14 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8012f5c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f60:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b0a      	cmp	r3, #10
 8012f68:	d006      	beq.n	8012f78 <route_Dijkstra+0xcc>
 8012f6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f6e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	2b0b      	cmp	r3, #11
 8012f76:	d10f      	bne.n	8012f98 <route_Dijkstra+0xec>
 8012f78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2b0b      	cmp	r3, #11
 8012f84:	f000 8355 	beq.w	8013632 <route_Dijkstra+0x786>
 8012f88:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f8c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2b0c      	cmp	r3, #12
 8012f94:	f000 834d 	beq.w	8013632 <route_Dijkstra+0x786>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 8012f98:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012f9c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012fa0:	6818      	ldr	r0, [r3, #0]
 8012fa2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fa6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012faa:	6819      	ldr	r1, [r3, #0]
 8012fac:	f107 0220 	add.w	r2, r7, #32
 8012fb0:	3a15      	subs	r2, #21
 8012fb2:	f107 0320 	add.w	r3, r7, #32
 8012fb6:	3b17      	subs	r3, #23
 8012fb8:	9301      	str	r3, [sp, #4]
 8012fba:	f107 0320 	add.w	r3, r7, #32
 8012fbe:	3b16      	subs	r3, #22
 8012fc0:	9300      	str	r3, [sp, #0]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8012fc8:	f102 021c 	add.w	r2, r2, #28
 8012fcc:	6812      	ldr	r2, [r2, #0]
 8012fce:	f7fd fe23 	bl	8010c18 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 8012fd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8012fda:	681c      	ldr	r4, [r3, #0]
 8012fdc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8012fe0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8012fe4:	681d      	ldr	r5, [r3, #0]
 8012fe6:	f107 0320 	add.w	r3, r7, #32
 8012fea:	3b14      	subs	r3, #20
 8012fec:	f107 0220 	add.w	r2, r7, #32
 8012ff0:	3a12      	subs	r2, #18
 8012ff2:	f107 0120 	add.w	r1, r7, #32
 8012ff6:	3910      	subs	r1, #16
 8012ff8:	f107 0020 	add.w	r0, r7, #32
 8012ffc:	380e      	subs	r0, #14
 8012ffe:	f507 5604 	add.w	r6, r7, #8448	; 0x2100
 8013002:	f106 061c 	add.w	r6, r6, #28
 8013006:	6836      	ldr	r6, [r6, #0]
 8013008:	9602      	str	r6, [sp, #8]
 801300a:	9501      	str	r5, [sp, #4]
 801300c:	9400      	str	r4, [sp, #0]
 801300e:	f7fe f985 	bl	801131c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013012:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013016:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 801301a:	781b      	ldrb	r3, [r3, #0]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d006      	beq.n	801302e <route_Dijkstra+0x182>
 8013020:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013024:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801302c:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 801302e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013032:	f5a3 738b 	sub.w	r3, r3, #278	; 0x116
 8013036:	781b      	ldrb	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d006      	beq.n	801304a <route_Dijkstra+0x19e>
 801303c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013040:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013044:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013048:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 801304a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801304e:	f2a3 1317 	subw	r3, r3, #279	; 0x117
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d006      	beq.n	8013066 <route_Dijkstra+0x1ba>
 8013058:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801305c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013064:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8013066:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801306a:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801306e:	881b      	ldrh	r3, [r3, #0]
 8013070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013074:	4293      	cmp	r3, r2
 8013076:	d11b      	bne.n	80130b0 <route_Dijkstra+0x204>
 8013078:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801307c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013086:	4293      	cmp	r3, r2
 8013088:	d112      	bne.n	80130b0 <route_Dijkstra+0x204>
 801308a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801308e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013098:	4293      	cmp	r3, r2
 801309a:	d109      	bne.n	80130b0 <route_Dijkstra+0x204>
 801309c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130a0:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80130a4:	881b      	ldrh	r3, [r3, #0]
 80130a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130aa:	4293      	cmp	r3, r2
 80130ac:	f000 82c0 	beq.w	8013630 <route_Dijkstra+0x784>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 80130b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130b4:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80130b8:	881a      	ldrh	r2, [r3, #0]
 80130ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130be:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80130c2:	881b      	ldrh	r3, [r3, #0]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	f200 80c7 	bhi.w	8013258 <route_Dijkstra+0x3ac>
 80130ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130ce:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80130d2:	881a      	ldrh	r2, [r3, #0]
 80130d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80130dc:	881b      	ldrh	r3, [r3, #0]
 80130de:	429a      	cmp	r2, r3
 80130e0:	f200 80ba 	bhi.w	8013258 <route_Dijkstra+0x3ac>
 80130e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130e8:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 80130ec:	881a      	ldrh	r2, [r3, #0]
 80130ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80130f2:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80130f6:	881b      	ldrh	r3, [r3, #0]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	f200 80ad 	bhi.w	8013258 <route_Dijkstra+0x3ac>
			// 直進
			switch (direction) {		//
 80130fe:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013102:	f103 031c 	add.w	r3, r3, #28
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	3b01      	subs	r3, #1
 801310a:	2b03      	cmp	r3, #3
 801310c:	f200 80a5 	bhi.w	801325a <route_Dijkstra+0x3ae>
 8013110:	a201      	add	r2, pc, #4	; (adr r2, 8013118 <route_Dijkstra+0x26c>)
 8013112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013116:	bf00      	nop
 8013118:	08013129 	.word	0x08013129
 801311c:	08013171 	.word	0x08013171
 8013120:	080131b9 	.word	0x080131b9
 8013124:	0801320d 	.word	0x0801320d
			case 1:
				pushStack_walk(&stack_x,x);
 8013128:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801312c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	b29a      	uxth	r2, r3
 8013134:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013138:	f103 0314 	add.w	r3, r3, #20
 801313c:	4611      	mov	r1, r2
 801313e:	4618      	mov	r0, r3
 8013140:	f001 f8a6 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013144:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013148:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	b29a      	uxth	r2, r3
 8013150:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013154:	f103 0314 	add.w	r3, r3, #20
 8013158:	4611      	mov	r1, r2
 801315a:	4618      	mov	r0, r3
 801315c:	f001 f898 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013160:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013164:	3b0c      	subs	r3, #12
 8013166:	2100      	movs	r1, #0
 8013168:	4618      	mov	r0, r3
 801316a:	f001 f891 	bl	8014290 <pushStack_walk>
				break;
 801316e:	e074      	b.n	801325a <route_Dijkstra+0x3ae>
			case 2:
				pushStack_walk(&stack_x,x);
 8013170:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013174:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	b29a      	uxth	r2, r3
 801317c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013180:	f103 0314 	add.w	r3, r3, #20
 8013184:	4611      	mov	r1, r2
 8013186:	4618      	mov	r0, r3
 8013188:	f001 f882 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801318c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013190:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	b29a      	uxth	r2, r3
 8013198:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801319c:	f103 0314 	add.w	r3, r3, #20
 80131a0:	4611      	mov	r1, r2
 80131a2:	4618      	mov	r0, r3
 80131a4:	f001 f874 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80131a8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80131ac:	3b0c      	subs	r3, #12
 80131ae:	2101      	movs	r1, #1
 80131b0:	4618      	mov	r0, r3
 80131b2:	f001 f86d 	bl	8014290 <pushStack_walk>
				break;
 80131b6:	e050      	b.n	801325a <route_Dijkstra+0x3ae>
			case 3:
				pushStack_walk(&stack_x,x);
 80131b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131bc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80131c8:	f103 0314 	add.w	r3, r3, #20
 80131cc:	4611      	mov	r1, r2
 80131ce:	4618      	mov	r0, r3
 80131d0:	f001 f85e 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 80131d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80131d8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	b29b      	uxth	r3, r3
 80131e0:	3b01      	subs	r3, #1
 80131e2:	b29a      	uxth	r2, r3
 80131e4:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80131e8:	f103 0314 	add.w	r3, r3, #20
 80131ec:	4611      	mov	r1, r2
 80131ee:	4618      	mov	r0, r3
 80131f0:	f001 f84e 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80131f4:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80131f8:	3b0c      	subs	r3, #12
 80131fa:	2100      	movs	r1, #0
 80131fc:	4618      	mov	r0, r3
 80131fe:	f001 f847 	bl	8014290 <pushStack_walk>
				break;
 8013202:	e02a      	b.n	801325a <route_Dijkstra+0x3ae>
 8013204:	200012ec 	.word	0x200012ec
 8013208:	2000186c 	.word	0x2000186c
			case 4:
				pushStack_walk(&stack_x,x-1);
 801320c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013210:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	b29b      	uxth	r3, r3
 8013218:	3b01      	subs	r3, #1
 801321a:	b29a      	uxth	r2, r3
 801321c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013220:	f103 0314 	add.w	r3, r3, #20
 8013224:	4611      	mov	r1, r2
 8013226:	4618      	mov	r0, r3
 8013228:	f001 f832 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801322c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013230:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	b29a      	uxth	r2, r3
 8013238:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 801323c:	f103 0314 	add.w	r3, r3, #20
 8013240:	4611      	mov	r1, r2
 8013242:	4618      	mov	r0, r3
 8013244:	f001 f824 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013248:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801324c:	3b0c      	subs	r3, #12
 801324e:	2101      	movs	r1, #1
 8013250:	4618      	mov	r0, r3
 8013252:	f001 f81d 	bl	8014290 <pushStack_walk>
				break;
 8013256:	e000      	b.n	801325a <route_Dijkstra+0x3ae>
			}

		}
 8013258:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 801325a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801325e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013262:	881a      	ldrh	r2, [r3, #0]
 8013264:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013268:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 801326c:	881b      	ldrh	r3, [r3, #0]
 801326e:	429a      	cmp	r2, r3
 8013270:	f080 80cd 	bcs.w	801340e <route_Dijkstra+0x562>
 8013274:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013278:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801327c:	881a      	ldrh	r2, [r3, #0]
 801327e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013282:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013286:	881b      	ldrh	r3, [r3, #0]
 8013288:	429a      	cmp	r2, r3
 801328a:	f200 80c0 	bhi.w	801340e <route_Dijkstra+0x562>
 801328e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013292:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8013296:	881a      	ldrh	r2, [r3, #0]
 8013298:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801329c:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	429a      	cmp	r2, r3
 80132a4:	f200 80b3 	bhi.w	801340e <route_Dijkstra+0x562>
			// 右旋回
			switch (direction) {		//
 80132a8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80132ac:	f103 031c 	add.w	r3, r3, #28
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	3b01      	subs	r3, #1
 80132b4:	2b03      	cmp	r3, #3
 80132b6:	f200 809f 	bhi.w	80133f8 <route_Dijkstra+0x54c>
 80132ba:	a201      	add	r2, pc, #4	; (adr r2, 80132c0 <route_Dijkstra+0x414>)
 80132bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132c0:	080132d1 	.word	0x080132d1
 80132c4:	08013319 	.word	0x08013319
 80132c8:	08013365 	.word	0x08013365
 80132cc:	080133b1 	.word	0x080133b1
			case 1:
				pushStack_walk(&stack_x,x);
 80132d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	b29a      	uxth	r2, r3
 80132dc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80132e0:	f103 0314 	add.w	r3, r3, #20
 80132e4:	4611      	mov	r1, r2
 80132e6:	4618      	mov	r0, r3
 80132e8:	f000 ffd2 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80132ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80132f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80132fc:	f103 0314 	add.w	r3, r3, #20
 8013300:	4611      	mov	r1, r2
 8013302:	4618      	mov	r0, r3
 8013304:	f000 ffc4 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013308:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801330c:	3b0c      	subs	r3, #12
 801330e:	2101      	movs	r1, #1
 8013310:	4618      	mov	r0, r3
 8013312:	f000 ffbd 	bl	8014290 <pushStack_walk>
				break;
 8013316:	e06f      	b.n	80133f8 <route_Dijkstra+0x54c>
			case 2:
				pushStack_walk(&stack_x,x);
 8013318:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801331c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	b29a      	uxth	r2, r3
 8013324:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013328:	f103 0314 	add.w	r3, r3, #20
 801332c:	4611      	mov	r1, r2
 801332e:	4618      	mov	r0, r3
 8013330:	f000 ffae 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013334:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013338:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	b29b      	uxth	r3, r3
 8013340:	3b01      	subs	r3, #1
 8013342:	b29a      	uxth	r2, r3
 8013344:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013348:	f103 0314 	add.w	r3, r3, #20
 801334c:	4611      	mov	r1, r2
 801334e:	4618      	mov	r0, r3
 8013350:	f000 ff9e 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013354:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013358:	3b0c      	subs	r3, #12
 801335a:	2100      	movs	r1, #0
 801335c:	4618      	mov	r0, r3
 801335e:	f000 ff97 	bl	8014290 <pushStack_walk>
				break;
 8013362:	e049      	b.n	80133f8 <route_Dijkstra+0x54c>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013364:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013368:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	b29b      	uxth	r3, r3
 8013370:	3b01      	subs	r3, #1
 8013372:	b29a      	uxth	r2, r3
 8013374:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013378:	f103 0314 	add.w	r3, r3, #20
 801337c:	4611      	mov	r1, r2
 801337e:	4618      	mov	r0, r3
 8013380:	f000 ff86 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013384:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013388:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	b29a      	uxth	r2, r3
 8013390:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013394:	f103 0314 	add.w	r3, r3, #20
 8013398:	4611      	mov	r1, r2
 801339a:	4618      	mov	r0, r3
 801339c:	f000 ff78 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80133a0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80133a4:	3b0c      	subs	r3, #12
 80133a6:	2101      	movs	r1, #1
 80133a8:	4618      	mov	r0, r3
 80133aa:	f000 ff71 	bl	8014290 <pushStack_walk>
				break;
 80133ae:	e023      	b.n	80133f8 <route_Dijkstra+0x54c>
			case 4:
				pushStack_walk(&stack_x,x);
 80133b0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133b4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	b29a      	uxth	r2, r3
 80133bc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80133c0:	f103 0314 	add.w	r3, r3, #20
 80133c4:	4611      	mov	r1, r2
 80133c6:	4618      	mov	r0, r3
 80133c8:	f000 ff62 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80133cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80133d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80133dc:	f103 0314 	add.w	r3, r3, #20
 80133e0:	4611      	mov	r1, r2
 80133e2:	4618      	mov	r0, r3
 80133e4:	f000 ff54 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80133e8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80133ec:	3b0c      	subs	r3, #12
 80133ee:	2100      	movs	r1, #0
 80133f0:	4618      	mov	r0, r3
 80133f2:	f000 ff4d 	bl	8014290 <pushStack_walk>
				break;
 80133f6:	bf00      	nop
			}
			direction++;
 80133f8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80133fc:	f103 031c 	add.w	r3, r3, #28
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	3301      	adds	r3, #1
 8013404:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013408:	f102 021c 	add.w	r2, r2, #28
 801340c:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 801340e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013412:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013416:	881a      	ldrh	r2, [r3, #0]
 8013418:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801341c:	f5a3 7387 	sub.w	r3, r3, #270	; 0x10e
 8013420:	881b      	ldrh	r3, [r3, #0]
 8013422:	429a      	cmp	r2, r3
 8013424:	f080 80cd 	bcs.w	80135c2 <route_Dijkstra+0x716>
 8013428:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801342c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8013430:	881a      	ldrh	r2, [r3, #0]
 8013432:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013436:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 801343a:	881b      	ldrh	r3, [r3, #0]
 801343c:	429a      	cmp	r2, r3
 801343e:	f080 80c0 	bcs.w	80135c2 <route_Dijkstra+0x716>
 8013442:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013446:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 801344a:	881a      	ldrh	r2, [r3, #0]
 801344c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013450:	f5a3 7389 	sub.w	r3, r3, #274	; 0x112
 8013454:	881b      	ldrh	r3, [r3, #0]
 8013456:	429a      	cmp	r2, r3
 8013458:	f200 80b3 	bhi.w	80135c2 <route_Dijkstra+0x716>
			// 左旋回
			switch (direction) {		//
 801345c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013460:	f103 031c 	add.w	r3, r3, #28
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	3b01      	subs	r3, #1
 8013468:	2b03      	cmp	r3, #3
 801346a:	f200 809f 	bhi.w	80135ac <route_Dijkstra+0x700>
 801346e:	a201      	add	r2, pc, #4	; (adr r2, 8013474 <route_Dijkstra+0x5c8>)
 8013470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013474:	08013485 	.word	0x08013485
 8013478:	080134d1 	.word	0x080134d1
 801347c:	08013519 	.word	0x08013519
 8013480:	08013561 	.word	0x08013561
			case 1:
				pushStack_walk(&stack_x,x-1);
 8013484:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013488:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	b29b      	uxth	r3, r3
 8013490:	3b01      	subs	r3, #1
 8013492:	b29a      	uxth	r2, r3
 8013494:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013498:	f103 0314 	add.w	r3, r3, #20
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f000 fef6 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134a8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	b29a      	uxth	r2, r3
 80134b0:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80134b4:	f103 0314 	add.w	r3, r3, #20
 80134b8:	4611      	mov	r1, r2
 80134ba:	4618      	mov	r0, r3
 80134bc:	f000 fee8 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80134c0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80134c4:	3b0c      	subs	r3, #12
 80134c6:	2101      	movs	r1, #1
 80134c8:	4618      	mov	r0, r3
 80134ca:	f000 fee1 	bl	8014290 <pushStack_walk>
				break;
 80134ce:	e06d      	b.n	80135ac <route_Dijkstra+0x700>
			case 2:
				pushStack_walk(&stack_x,x);
 80134d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134d4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	b29a      	uxth	r2, r3
 80134dc:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 80134e0:	f103 0314 	add.w	r3, r3, #20
 80134e4:	4611      	mov	r1, r2
 80134e6:	4618      	mov	r0, r3
 80134e8:	f000 fed2 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134ec:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80134f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	b29a      	uxth	r2, r3
 80134f8:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 80134fc:	f103 0314 	add.w	r3, r3, #20
 8013500:	4611      	mov	r1, r2
 8013502:	4618      	mov	r0, r3
 8013504:	f000 fec4 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013508:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801350c:	3b0c      	subs	r3, #12
 801350e:	2100      	movs	r1, #0
 8013510:	4618      	mov	r0, r3
 8013512:	f000 febd 	bl	8014290 <pushStack_walk>
				break;
 8013516:	e049      	b.n	80135ac <route_Dijkstra+0x700>
			case 3:
				pushStack_walk(&stack_x,x);
 8013518:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801351c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	b29a      	uxth	r2, r3
 8013524:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013528:	f103 0314 	add.w	r3, r3, #20
 801352c:	4611      	mov	r1, r2
 801352e:	4618      	mov	r0, r3
 8013530:	f000 feae 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013534:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013538:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	b29a      	uxth	r2, r3
 8013540:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013544:	f103 0314 	add.w	r3, r3, #20
 8013548:	4611      	mov	r1, r2
 801354a:	4618      	mov	r0, r3
 801354c:	f000 fea0 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013550:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8013554:	3b0c      	subs	r3, #12
 8013556:	2101      	movs	r1, #1
 8013558:	4618      	mov	r0, r3
 801355a:	f000 fe99 	bl	8014290 <pushStack_walk>
				break;
 801355e:	e025      	b.n	80135ac <route_Dijkstra+0x700>
			case 4:
				pushStack_walk(&stack_x,x);
 8013560:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013564:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	b29a      	uxth	r2, r3
 801356c:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013570:	f103 0314 	add.w	r3, r3, #20
 8013574:	4611      	mov	r1, r2
 8013576:	4618      	mov	r0, r3
 8013578:	f000 fe8a 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801357c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8013580:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	b29b      	uxth	r3, r3
 8013588:	3b01      	subs	r3, #1
 801358a:	b29a      	uxth	r2, r3
 801358c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013590:	f103 0314 	add.w	r3, r3, #20
 8013594:	4611      	mov	r1, r2
 8013596:	4618      	mov	r0, r3
 8013598:	f000 fe7a 	bl	8014290 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801359c:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80135a0:	3b0c      	subs	r3, #12
 80135a2:	2100      	movs	r1, #0
 80135a4:	4618      	mov	r0, r3
 80135a6:	f000 fe73 	bl	8014290 <pushStack_walk>
				break;
 80135aa:	bf00      	nop
			}
			direction--;
 80135ac:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135b0:	f103 031c 	add.w	r3, r3, #28
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	3b01      	subs	r3, #1
 80135b8:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80135bc:	f102 021c 	add.w	r2, r2, #28
 80135c0:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 80135c2:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135c6:	f103 031c 	add.w	r3, r3, #28
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2b05      	cmp	r3, #5
 80135ce:	d105      	bne.n	80135dc <route_Dijkstra+0x730>
			direction = 1;
 80135d0:	2301      	movs	r3, #1
 80135d2:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80135d6:	f102 021c 	add.w	r2, r2, #28
 80135da:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80135dc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135e0:	f103 031c 	add.w	r3, r3, #28
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	2b06      	cmp	r3, #6
 80135e8:	d105      	bne.n	80135f6 <route_Dijkstra+0x74a>
			direction = 2;
 80135ea:	2302      	movs	r3, #2
 80135ec:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 80135f0:	f102 021c 	add.w	r2, r2, #28
 80135f4:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 80135f6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80135fa:	f103 031c 	add.w	r3, r3, #28
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d105      	bne.n	8013610 <route_Dijkstra+0x764>
			direction = 4;
 8013604:	2304      	movs	r3, #4
 8013606:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 801360a:	f102 021c 	add.w	r2, r2, #28
 801360e:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013610:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013614:	f103 031c 	add.w	r3, r3, #28
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801361e:	f47f ac8f 	bne.w	8012f40 <route_Dijkstra+0x94>
			direction = 3;
 8013622:	2303      	movs	r3, #3
 8013624:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013628:	f102 021c 	add.w	r2, r2, #28
 801362c:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 801362e:	e487      	b.n	8012f40 <route_Dijkstra+0x94>
			break;
 8013630:	bf00      	nop

	}
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 8013632:	f507 53dc 	add.w	r3, r7, #7040	; 0x1b80
 8013636:	f103 0314 	add.w	r3, r3, #20
 801363a:	4618      	mov	r0, r3
 801363c:	f000 fe52 	bl	80142e4 <popStack_walk>
 8013640:	4603      	mov	r3, r0
 8013642:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013646:	f102 021a 	add.w	r2, r2, #26
 801364a:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 801364c:	f507 53b0 	add.w	r3, r7, #5632	; 0x1600
 8013650:	f103 0314 	add.w	r3, r3, #20
 8013654:	4618      	mov	r0, r3
 8013656:	f000 fe45 	bl	80142e4 <popStack_walk>
 801365a:	4603      	mov	r3, r0
 801365c:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013660:	f102 0218 	add.w	r2, r2, #24
 8013664:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013666:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 801366a:	3b0c      	subs	r3, #12
 801366c:	4618      	mov	r0, r3
 801366e:	f000 fe39 	bl	80142e4 <popStack_walk>
 8013672:	4603      	mov	r3, r0
 8013674:	f507 5204 	add.w	r2, r7, #8448	; 0x2100
 8013678:	f102 0216 	add.w	r2, r2, #22
 801367c:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801367e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013682:	f103 031a 	add.w	r3, r3, #26
 8013686:	881b      	ldrh	r3, [r3, #0]
 8013688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801368c:	4293      	cmp	r3, r2
 801368e:	f000 80d5 	beq.w	801383c <route_Dijkstra+0x990>
 8013692:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013696:	f103 0318 	add.w	r3, r3, #24
 801369a:	881b      	ldrh	r3, [r3, #0]
 801369c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136a0:	4293      	cmp	r3, r2
 80136a2:	f000 80cb 	beq.w	801383c <route_Dijkstra+0x990>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80136a6:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136aa:	f103 0316 	add.w	r3, r3, #22
 80136ae:	881b      	ldrh	r3, [r3, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d15c      	bne.n	801376e <route_Dijkstra+0x8c2>
 80136b4:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136b8:	f103 0318 	add.w	r3, r3, #24
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	4a62      	ldr	r2, [pc, #392]	; (8013848 <route_Dijkstra+0x99c>)
 80136c0:	332c      	adds	r3, #44	; 0x2c
 80136c2:	005b      	lsls	r3, r3, #1
 80136c4:	4413      	add	r3, r2
 80136c6:	885b      	ldrh	r3, [r3, #2]
 80136c8:	461a      	mov	r2, r3
 80136ca:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136ce:	f103 031a 	add.w	r3, r3, #26
 80136d2:	881b      	ldrh	r3, [r3, #0]
 80136d4:	fa42 f303 	asr.w	r3, r2, r3
 80136d8:	f003 0301 	and.w	r3, r3, #1
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d146      	bne.n	801376e <route_Dijkstra+0x8c2>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 80136e0:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136e4:	f103 031a 	add.w	r3, r3, #26
 80136e8:	881b      	ldrh	r3, [r3, #0]
 80136ea:	011a      	lsls	r2, r3, #4
 80136ec:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80136f0:	f103 0318 	add.w	r3, r3, #24
 80136f4:	881b      	ldrh	r3, [r3, #0]
 80136f6:	4413      	add	r3, r2
 80136f8:	4a54      	ldr	r2, [pc, #336]	; (801384c <route_Dijkstra+0x9a0>)
 80136fa:	2100      	movs	r1, #0
 80136fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[(Xcoordinate * 16) + Ycoordinate+1] = 0;
 8013700:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013704:	f103 031a 	add.w	r3, r3, #26
 8013708:	881b      	ldrh	r3, [r3, #0]
 801370a:	011a      	lsls	r2, r3, #4
 801370c:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013710:	f103 0318 	add.w	r3, r3, #24
 8013714:	881b      	ldrh	r3, [r3, #0]
 8013716:	4413      	add	r3, r2
 8013718:	3301      	adds	r3, #1
 801371a:	4a4c      	ldr	r2, [pc, #304]	; (801384c <route_Dijkstra+0x9a0>)
 801371c:	2100      	movs	r1, #0
 801371e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013722:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013726:	f103 031a 	add.w	r3, r3, #26
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	4619      	mov	r1, r3
 801372e:	4848      	ldr	r0, [pc, #288]	; (8013850 <route_Dijkstra+0x9a4>)
 8013730:	f000 fdae 	bl	8014290 <pushStack_walk>
 8013734:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013738:	f103 0318 	add.w	r3, r3, #24
 801373c:	881b      	ldrh	r3, [r3, #0]
 801373e:	4619      	mov	r1, r3
 8013740:	4844      	ldr	r0, [pc, #272]	; (8013854 <route_Dijkstra+0x9a8>)
 8013742:	f000 fda5 	bl	8014290 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013746:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801374a:	f103 031a 	add.w	r3, r3, #26
 801374e:	881b      	ldrh	r3, [r3, #0]
 8013750:	4619      	mov	r1, r3
 8013752:	483f      	ldr	r0, [pc, #252]	; (8013850 <route_Dijkstra+0x9a4>)
 8013754:	f000 fd9c 	bl	8014290 <pushStack_walk>
 8013758:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801375c:	f103 0318 	add.w	r3, r3, #24
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	3301      	adds	r3, #1
 8013764:	b29b      	uxth	r3, r3
 8013766:	4619      	mov	r1, r3
 8013768:	483a      	ldr	r0, [pc, #232]	; (8013854 <route_Dijkstra+0x9a8>)
 801376a:	f000 fd91 	bl	8014290 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 801376e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013772:	f103 0316 	add.w	r3, r3, #22
 8013776:	881b      	ldrh	r3, [r3, #0]
 8013778:	2b01      	cmp	r3, #1
 801377a:	f47f af5a 	bne.w	8013632 <route_Dijkstra+0x786>
 801377e:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013782:	f103 031a 	add.w	r3, r3, #26
 8013786:	881b      	ldrh	r3, [r3, #0]
 8013788:	4a2f      	ldr	r2, [pc, #188]	; (8013848 <route_Dijkstra+0x99c>)
 801378a:	331c      	adds	r3, #28
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	4413      	add	r3, r2
 8013790:	889b      	ldrh	r3, [r3, #4]
 8013792:	461a      	mov	r2, r3
 8013794:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013798:	f103 0318 	add.w	r3, r3, #24
 801379c:	881b      	ldrh	r3, [r3, #0]
 801379e:	fa42 f303 	asr.w	r3, r2, r3
 80137a2:	f003 0301 	and.w	r3, r3, #1
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	f47f af43 	bne.w	8013632 <route_Dijkstra+0x786>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[(Xcoordinate * 16) + Ycoordinate] = 0;
 80137ac:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137b0:	f103 031a 	add.w	r3, r3, #26
 80137b4:	881b      	ldrh	r3, [r3, #0]
 80137b6:	011a      	lsls	r2, r3, #4
 80137b8:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137bc:	f103 0318 	add.w	r3, r3, #24
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	4413      	add	r3, r2
 80137c4:	4a21      	ldr	r2, [pc, #132]	; (801384c <route_Dijkstra+0x9a0>)
 80137c6:	2100      	movs	r1, #0
 80137c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				walk_count[((Xcoordinate+1) * 16) + Ycoordinate] = 0;
 80137cc:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137d0:	f103 031a 	add.w	r3, r3, #26
 80137d4:	881b      	ldrh	r3, [r3, #0]
 80137d6:	3301      	adds	r3, #1
 80137d8:	011a      	lsls	r2, r3, #4
 80137da:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137de:	f103 0318 	add.w	r3, r3, #24
 80137e2:	881b      	ldrh	r3, [r3, #0]
 80137e4:	4413      	add	r3, r2
 80137e6:	4a19      	ldr	r2, [pc, #100]	; (801384c <route_Dijkstra+0x9a0>)
 80137e8:	2100      	movs	r1, #0
 80137ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80137ee:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 80137f2:	f103 031a 	add.w	r3, r3, #26
 80137f6:	881b      	ldrh	r3, [r3, #0]
 80137f8:	4619      	mov	r1, r3
 80137fa:	4815      	ldr	r0, [pc, #84]	; (8013850 <route_Dijkstra+0x9a4>)
 80137fc:	f000 fd48 	bl	8014290 <pushStack_walk>
 8013800:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013804:	f103 0318 	add.w	r3, r3, #24
 8013808:	881b      	ldrh	r3, [r3, #0]
 801380a:	4619      	mov	r1, r3
 801380c:	4811      	ldr	r0, [pc, #68]	; (8013854 <route_Dijkstra+0x9a8>)
 801380e:	f000 fd3f 	bl	8014290 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013812:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 8013816:	f103 031a 	add.w	r3, r3, #26
 801381a:	881b      	ldrh	r3, [r3, #0]
 801381c:	3301      	adds	r3, #1
 801381e:	b29b      	uxth	r3, r3
 8013820:	4619      	mov	r1, r3
 8013822:	480b      	ldr	r0, [pc, #44]	; (8013850 <route_Dijkstra+0x9a4>)
 8013824:	f000 fd34 	bl	8014290 <pushStack_walk>
 8013828:	f507 5304 	add.w	r3, r7, #8448	; 0x2100
 801382c:	f103 0318 	add.w	r3, r3, #24
 8013830:	881b      	ldrh	r3, [r3, #0]
 8013832:	4619      	mov	r1, r3
 8013834:	4807      	ldr	r0, [pc, #28]	; (8013854 <route_Dijkstra+0x9a8>)
 8013836:	f000 fd2b 	bl	8014290 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 801383a:	e6fa      	b.n	8013632 <route_Dijkstra+0x786>
			}
	}


}
 801383c:	bf00      	nop
 801383e:	f507 5704 	add.w	r7, r7, #8448	; 0x2100
 8013842:	3724      	adds	r7, #36	; 0x24
 8013844:	46bd      	mov	sp, r7
 8013846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013848:	20000c3c 	.word	0x20000c3c
 801384c:	20000d2c 	.word	0x20000d2c
 8013850:	200012ec 	.word	0x200012ec
 8013854:	2000186c 	.word	0x2000186c

08013858 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013858:	b580      	push	{r7, lr}
 801385a:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 801385e:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013860:	2300      	movs	r3, #0
 8013862:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013866:	e00a      	b.n	801387e <create_StepCountMap_unknown+0x26>
 8013868:	4a39      	ldr	r2, [pc, #228]	; (8013950 <create_StepCountMap_unknown+0xf8>)
 801386a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 801386e:	21ff      	movs	r1, #255	; 0xff
 8013870:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013874:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013878:	3301      	adds	r3, #1
 801387a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 801387e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013882:	2bff      	cmp	r3, #255	; 0xff
 8013884:	ddf0      	ble.n	8013868 <create_StepCountMap_unknown+0x10>

	initStack_walk(&stack_x);
 8013886:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801388a:	4618      	mov	r0, r3
 801388c:	f000 fcf0 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_y);
 8013890:	463b      	mov	r3, r7
 8013892:	4618      	mov	r0, r3
 8013894:	f000 fcec 	bl	8014270 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013898:	482e      	ldr	r0, [pc, #184]	; (8013954 <create_StepCountMap_unknown+0xfc>)
 801389a:	f000 fd23 	bl	80142e4 <popStack_walk>
 801389e:	4603      	mov	r3, r0
 80138a0:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
			goalY = popStack_walk(&g_Goal_y);
 80138a4:	482c      	ldr	r0, [pc, #176]	; (8013958 <create_StepCountMap_unknown+0x100>)
 80138a6:	f000 fd1d 	bl	80142e4 <popStack_walk>
 80138aa:	4603      	mov	r3, r0
 80138ac:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 80138b0:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80138b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138b8:	4293      	cmp	r3, r2
 80138ba:	d01f      	beq.n	80138fc <create_StepCountMap_unknown+0xa4>
 80138bc:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80138c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138c4:	4293      	cmp	r3, r2
 80138c6:	d019      	beq.n	80138fc <create_StepCountMap_unknown+0xa4>
				//printf("stack_end\n");
				break;
			}
			walk_count[(goalX * 16) + goalY] = 0;
 80138c8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80138cc:	011a      	lsls	r2, r3, #4
 80138ce:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80138d2:	4413      	add	r3, r2
 80138d4:	4a1e      	ldr	r2, [pc, #120]	; (8013950 <create_StepCountMap_unknown+0xf8>)
 80138d6:	2100      	movs	r1, #0
 80138d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 80138dc:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 80138e0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80138e4:	4611      	mov	r1, r2
 80138e6:	4618      	mov	r0, r3
 80138e8:	f000 fcd2 	bl	8014290 <pushStack_walk>
 80138ec:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 80138f0:	463b      	mov	r3, r7
 80138f2:	4611      	mov	r1, r2
 80138f4:	4618      	mov	r0, r3
 80138f6:	f000 fccb 	bl	8014290 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 80138fa:	e7cd      	b.n	8013898 <create_StepCountMap_unknown+0x40>
	}
	if(stack_x.tail == stack_x.head){
 80138fc:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8013900:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 8013904:	685a      	ldr	r2, [r3, #4]
 8013906:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 801390a:	f5a3 63b3 	sub.w	r3, r3, #1432	; 0x598
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	429a      	cmp	r2, r3
 8013912:	d10d      	bne.n	8013930 <create_StepCountMap_unknown+0xd8>
		walk_count[0] = 0;
 8013914:	4b0e      	ldr	r3, [pc, #56]	; (8013950 <create_StepCountMap_unknown+0xf8>)
 8013916:	2200      	movs	r2, #0
 8013918:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801391a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 801391e:	2100      	movs	r1, #0
 8013920:	4618      	mov	r0, r3
 8013922:	f000 fcb5 	bl	8014290 <pushStack_walk>
 8013926:	463b      	mov	r3, r7
 8013928:	2100      	movs	r1, #0
 801392a:	4618      	mov	r0, r3
 801392c:	f000 fcb0 	bl	8014290 <pushStack_walk>
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013930:	2301      	movs	r3, #1
 8013932:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013936:	2301      	movs	r3, #1
 8013938:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 801393c:	2301      	movs	r3, #1
 801393e:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013942:	2301      	movs	r3, #1
 8013944:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013948:	2301      	movs	r3, #1
 801394a:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 801394e:	e141      	b.n	8013bd4 <create_StepCountMap_unknown+0x37c>
 8013950:	20000d2c 	.word	0x20000d2c
 8013954:	200012ec 	.word	0x200012ec
 8013958:	2000186c 	.word	0x2000186c

		Xcoordinate = popStack_walk(&stack_x);
 801395c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013960:	4618      	mov	r0, r3
 8013962:	f000 fcbf 	bl	80142e4 <popStack_walk>
 8013966:	4603      	mov	r3, r0
 8013968:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		Ycoordinate = popStack_walk(&stack_y);
 801396c:	463b      	mov	r3, r7
 801396e:	4618      	mov	r0, r3
 8013970:	f000 fcb8 	bl	80142e4 <popStack_walk>
 8013974:	4603      	mov	r3, r0
 8013976:	f8a7 3b02 	strh.w	r3, [r7, #2818]	; 0xb02
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801397a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801397e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013982:	4293      	cmp	r3, r2
 8013984:	f000 812b 	beq.w	8013bde <create_StepCountMap_unknown+0x386>
 8013988:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 801398c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013990:	4293      	cmp	r3, r2
 8013992:	f000 8124 	beq.w	8013bde <create_StepCountMap_unknown+0x386>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013996:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801399a:	011b      	lsls	r3, r3, #4
 801399c:	b29a      	uxth	r2, r3
 801399e:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139a2:	4413      	add	r3, r2
 80139a4:	f8a7 3b00 	strh.w	r3, [r7, #2816]	; 0xb00
		if (Ycoordinate <= 14) {
 80139a8:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139ac:	2b0e      	cmp	r3, #14
 80139ae:	d811      	bhi.n	80139d4 <create_StepCountMap_unknown+0x17c>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 80139b0:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139b4:	4a8c      	ldr	r2, [pc, #560]	; (8013be8 <create_StepCountMap_unknown+0x390>)
 80139b6:	330c      	adds	r3, #12
 80139b8:	005b      	lsls	r3, r3, #1
 80139ba:	4413      	add	r3, r2
 80139bc:	88db      	ldrh	r3, [r3, #6]
 80139be:	b21a      	sxth	r2, r3
 80139c0:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80139c4:	2101      	movs	r1, #1
 80139c6:	fa01 f303 	lsl.w	r3, r1, r3
 80139ca:	b21b      	sxth	r3, r3
 80139cc:	4013      	ands	r3, r2
 80139ce:	b21b      	sxth	r3, r3
 80139d0:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 80139d4:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d012      	beq.n	8013a02 <create_StepCountMap_unknown+0x1aa>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80139dc:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 80139e0:	3b01      	subs	r3, #1
 80139e2:	4a81      	ldr	r2, [pc, #516]	; (8013be8 <create_StepCountMap_unknown+0x390>)
 80139e4:	330c      	adds	r3, #12
 80139e6:	005b      	lsls	r3, r3, #1
 80139e8:	4413      	add	r3, r2
 80139ea:	88db      	ldrh	r3, [r3, #6]
 80139ec:	b21a      	sxth	r2, r3
 80139ee:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80139f2:	2101      	movs	r1, #1
 80139f4:	fa01 f303 	lsl.w	r3, r1, r3
 80139f8:	b21b      	sxth	r3, r3
 80139fa:	4013      	ands	r3, r2
 80139fc:	b21b      	sxth	r3, r3
 80139fe:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013a02:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a06:	2b0e      	cmp	r3, #14
 8013a08:	d80f      	bhi.n	8013a2a <create_StepCountMap_unknown+0x1d2>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013a0a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a0e:	4a76      	ldr	r2, [pc, #472]	; (8013be8 <create_StepCountMap_unknown+0x390>)
 8013a10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a14:	b21a      	sxth	r2, r3
 8013a16:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013a1a:	2101      	movs	r1, #1
 8013a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8013a20:	b21b      	sxth	r3, r3
 8013a22:	4013      	ands	r3, r2
 8013a24:	b21b      	sxth	r3, r3
 8013a26:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013a2a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d010      	beq.n	8013a54 <create_StepCountMap_unknown+0x1fc>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013a32:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013a36:	3b01      	subs	r3, #1
 8013a38:	4a6b      	ldr	r2, [pc, #428]	; (8013be8 <create_StepCountMap_unknown+0x390>)
 8013a3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a3e:	b21a      	sxth	r2, r3
 8013a40:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013a44:	2101      	movs	r1, #1
 8013a46:	fa01 f303 	lsl.w	r3, r1, r3
 8013a4a:	b21b      	sxth	r3, r3
 8013a4c:	4013      	ands	r3, r2
 8013a4e:	b21b      	sxth	r3, r3
 8013a50:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013a54:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013a58:	3301      	adds	r3, #1
 8013a5a:	4a64      	ldr	r2, [pc, #400]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013a60:	2bff      	cmp	r3, #255	; 0xff
 8013a62:	d125      	bne.n	8013ab0 <create_StepCountMap_unknown+0x258>
 8013a64:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013a68:	2b0f      	cmp	r3, #15
 8013a6a:	d021      	beq.n	8013ab0 <create_StepCountMap_unknown+0x258>
 8013a6c:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d11d      	bne.n	8013ab0 <create_StepCountMap_unknown+0x258>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013a74:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013a78:	4a5c      	ldr	r2, [pc, #368]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013a7a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013a7e:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013a82:	3301      	adds	r3, #1
 8013a84:	3201      	adds	r2, #1
 8013a86:	b291      	uxth	r1, r2
 8013a88:	4a58      	ldr	r2, [pc, #352]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013a8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013a8e:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013a92:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013a96:	4611      	mov	r1, r2
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f000 fbf9 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013a9e:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013aa2:	3301      	adds	r3, #1
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	463b      	mov	r3, r7
 8013aa8:	4611      	mov	r1, r2
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f000 fbf0 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013ab0:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ab4:	3b01      	subs	r3, #1
 8013ab6:	4a4d      	ldr	r2, [pc, #308]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013abc:	2bff      	cmp	r3, #255	; 0xff
 8013abe:	d125      	bne.n	8013b0c <create_StepCountMap_unknown+0x2b4>
 8013ac0:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d021      	beq.n	8013b0c <create_StepCountMap_unknown+0x2b4>
 8013ac8:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d11d      	bne.n	8013b0c <create_StepCountMap_unknown+0x2b4>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013ad0:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ad4:	4a45      	ldr	r2, [pc, #276]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013ad6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013ada:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013ade:	3b01      	subs	r3, #1
 8013ae0:	3201      	adds	r2, #1
 8013ae2:	b291      	uxth	r1, r2
 8013ae4:	4a41      	ldr	r2, [pc, #260]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013ae6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013aea:	f8b7 2b04 	ldrh.w	r2, [r7, #2820]	; 0xb04
 8013aee:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013af2:	4611      	mov	r1, r2
 8013af4:	4618      	mov	r0, r3
 8013af6:	f000 fbcb 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013afa:	f8b7 3b02 	ldrh.w	r3, [r7, #2818]	; 0xb02
 8013afe:	3b01      	subs	r3, #1
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	463b      	mov	r3, r7
 8013b04:	4611      	mov	r1, r2
 8013b06:	4618      	mov	r0, r3
 8013b08:	f000 fbc2 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013b0c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b10:	3310      	adds	r3, #16
 8013b12:	4a36      	ldr	r2, [pc, #216]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b18:	2bff      	cmp	r3, #255	; 0xff
 8013b1a:	d125      	bne.n	8013b68 <create_StepCountMap_unknown+0x310>
 8013b1c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013b20:	2b0f      	cmp	r3, #15
 8013b22:	d021      	beq.n	8013b68 <create_StepCountMap_unknown+0x310>
 8013b24:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d11d      	bne.n	8013b68 <create_StepCountMap_unknown+0x310>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013b2c:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b30:	4a2e      	ldr	r2, [pc, #184]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013b32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013b36:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b3a:	3310      	adds	r3, #16
 8013b3c:	3201      	adds	r2, #1
 8013b3e:	b291      	uxth	r1, r2
 8013b40:	4a2a      	ldr	r2, [pc, #168]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013b42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013b46:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013b52:	4611      	mov	r1, r2
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 fb9b 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013b5a:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013b5e:	463b      	mov	r3, r7
 8013b60:	4611      	mov	r1, r2
 8013b62:	4618      	mov	r0, r3
 8013b64:	f000 fb94 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013b68:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b6c:	3b10      	subs	r3, #16
 8013b6e:	4a1f      	ldr	r2, [pc, #124]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013b74:	2bff      	cmp	r3, #255	; 0xff
 8013b76:	d125      	bne.n	8013bc4 <create_StepCountMap_unknown+0x36c>
 8013b78:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d021      	beq.n	8013bc4 <create_StepCountMap_unknown+0x36c>
 8013b80:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d11d      	bne.n	8013bc4 <create_StepCountMap_unknown+0x36c>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013b88:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b8c:	4a17      	ldr	r2, [pc, #92]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013b8e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013b92:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013b96:	3b10      	subs	r3, #16
 8013b98:	3201      	adds	r2, #1
 8013b9a:	b291      	uxth	r1, r2
 8013b9c:	4a13      	ldr	r2, [pc, #76]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013b9e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013ba2:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ba6:	3b01      	subs	r3, #1
 8013ba8:	b29a      	uxth	r2, r3
 8013baa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8013bae:	4611      	mov	r1, r2
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 fb6d 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013bb6:	f8b7 2b02 	ldrh.w	r2, [r7, #2818]	; 0xb02
 8013bba:	463b      	mov	r3, r7
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f000 fb66 	bl	8014290 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8013bc4:	f8b7 3b00 	ldrh.w	r3, [r7, #2816]	; 0xb00
 8013bc8:	4a08      	ldr	r2, [pc, #32]	; (8013bec <create_StepCountMap_unknown+0x394>)
 8013bca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013bce:	3301      	adds	r3, #1
 8013bd0:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8013bd4:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8013bd8:	2bfe      	cmp	r3, #254	; 0xfe
 8013bda:	f67f aebf 	bls.w	801395c <create_StepCountMap_unknown+0x104>

		}

}
 8013bde:	bf00      	nop
 8013be0:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	20000c3c 	.word	0x20000c3c
 8013bec:	20000d2c 	.word	0x20000d2c

08013bf0 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013bf6:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013bf8:	2300      	movs	r3, #0
 8013bfa:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013bfe:	e00a      	b.n	8013c16 <create_StepCountMap_queue+0x26>
 8013c00:	4a31      	ldr	r2, [pc, #196]	; (8013cc8 <create_StepCountMap_queue+0xd8>)
 8013c02:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013c06:	21ff      	movs	r1, #255	; 0xff
 8013c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013c0c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013c10:	3301      	adds	r3, #1
 8013c12:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013c16:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013c1a:	2bff      	cmp	r3, #255	; 0xff
 8013c1c:	ddf0      	ble.n	8013c00 <create_StepCountMap_queue+0x10>
	initStack_walk(&stack_x);
 8013c1e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c22:	4618      	mov	r0, r3
 8013c24:	f000 fb24 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_y);
 8013c28:	1d3b      	adds	r3, r7, #4
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f000 fb20 	bl	8014270 <initStack_walk>


	walk_count[(GOAL_X * 16) + GOAL_Y] = 0;
 8013c30:	4b25      	ldr	r3, [pc, #148]	; (8013cc8 <create_StepCountMap_queue+0xd8>)
 8013c32:	2200      	movs	r2, #0
 8013c34:	f8a3 2156 	strh.w	r2, [r3, #342]	; 0x156
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y] = 0;
 8013c38:	4b23      	ldr	r3, [pc, #140]	; (8013cc8 <create_StepCountMap_queue+0xd8>)
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	f8a3 2176 	strh.w	r2, [r3, #374]	; 0x176
	walk_count[(GOAL_X * 16) + GOAL_Y + 1] = 0;
 8013c40:	4b21      	ldr	r3, [pc, #132]	; (8013cc8 <create_StepCountMap_queue+0xd8>)
 8013c42:	2200      	movs	r2, #0
 8013c44:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
	walk_count[((GOAL_X + 1) * 16) + GOAL_Y + 1] = 0;
 8013c48:	4b1f      	ldr	r3, [pc, #124]	; (8013cc8 <create_StepCountMap_queue+0xd8>)
 8013c4a:	2200      	movs	r2, #0
 8013c4c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8013c50:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c54:	210a      	movs	r1, #10
 8013c56:	4618      	mov	r0, r3
 8013c58:	f000 fb1a 	bl	8014290 <pushStack_walk>
 8013c5c:	1d3b      	adds	r3, r7, #4
 8013c5e:	210b      	movs	r1, #11
 8013c60:	4618      	mov	r0, r3
 8013c62:	f000 fb15 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8013c66:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c6a:	210b      	movs	r1, #11
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f000 fb0f 	bl	8014290 <pushStack_walk>
 8013c72:	1d3b      	adds	r3, r7, #4
 8013c74:	210b      	movs	r1, #11
 8013c76:	4618      	mov	r0, r3
 8013c78:	f000 fb0a 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013c7c:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c80:	210a      	movs	r1, #10
 8013c82:	4618      	mov	r0, r3
 8013c84:	f000 fb04 	bl	8014290 <pushStack_walk>
 8013c88:	1d3b      	adds	r3, r7, #4
 8013c8a:	210c      	movs	r1, #12
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	f000 faff 	bl	8014290 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8013c92:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013c96:	210b      	movs	r1, #11
 8013c98:	4618      	mov	r0, r3
 8013c9a:	f000 faf9 	bl	8014290 <pushStack_walk>
 8013c9e:	1d3b      	adds	r3, r7, #4
 8013ca0:	210c      	movs	r1, #12
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f000 faf4 	bl	8014290 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013ca8:	2301      	movs	r3, #1
 8013caa:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013cae:	2301      	movs	r3, #1
 8013cb0:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013cb4:	2301      	movs	r3, #1
 8013cb6:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013cba:	2301      	movs	r3, #1
 8013cbc:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013cc0:	2301      	movs	r3, #1
 8013cc2:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013cc6:	e13d      	b.n	8013f44 <create_StepCountMap_queue+0x354>
 8013cc8:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013ccc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f000 fb07 	bl	80142e4 <popStack_walk>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8013cdc:	1d3b      	adds	r3, r7, #4
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 fb00 	bl	80142e4 <popStack_walk>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013cea:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	f000 812b 	beq.w	8013f4e <create_StepCountMap_queue+0x35e>
 8013cf8:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013cfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d00:	4293      	cmp	r3, r2
 8013d02:	f000 8124 	beq.w	8013f4e <create_StepCountMap_queue+0x35e>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8013d06:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d0a:	011b      	lsls	r3, r3, #4
 8013d0c:	b29a      	uxth	r2, r3
 8013d0e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d12:	4413      	add	r3, r2
 8013d14:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8013d18:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d1c:	2b0e      	cmp	r3, #14
 8013d1e:	d811      	bhi.n	8013d44 <create_StepCountMap_queue+0x154>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013d20:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d24:	4a8c      	ldr	r2, [pc, #560]	; (8013f58 <create_StepCountMap_queue+0x368>)
 8013d26:	330c      	adds	r3, #12
 8013d28:	005b      	lsls	r3, r3, #1
 8013d2a:	4413      	add	r3, r2
 8013d2c:	88db      	ldrh	r3, [r3, #6]
 8013d2e:	b21a      	sxth	r2, r3
 8013d30:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d34:	2101      	movs	r1, #1
 8013d36:	fa01 f303 	lsl.w	r3, r1, r3
 8013d3a:	b21b      	sxth	r3, r3
 8013d3c:	4013      	ands	r3, r2
 8013d3e:	b21b      	sxth	r3, r3
 8013d40:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8013d44:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d012      	beq.n	8013d72 <create_StepCountMap_queue+0x182>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013d4c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d50:	3b01      	subs	r3, #1
 8013d52:	4a81      	ldr	r2, [pc, #516]	; (8013f58 <create_StepCountMap_queue+0x368>)
 8013d54:	330c      	adds	r3, #12
 8013d56:	005b      	lsls	r3, r3, #1
 8013d58:	4413      	add	r3, r2
 8013d5a:	88db      	ldrh	r3, [r3, #6]
 8013d5c:	b21a      	sxth	r2, r3
 8013d5e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d62:	2101      	movs	r1, #1
 8013d64:	fa01 f303 	lsl.w	r3, r1, r3
 8013d68:	b21b      	sxth	r3, r3
 8013d6a:	4013      	ands	r3, r2
 8013d6c:	b21b      	sxth	r3, r3
 8013d6e:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8013d72:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d76:	2b0e      	cmp	r3, #14
 8013d78:	d80f      	bhi.n	8013d9a <create_StepCountMap_queue+0x1aa>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013d7a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d7e:	4a76      	ldr	r2, [pc, #472]	; (8013f58 <create_StepCountMap_queue+0x368>)
 8013d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013d84:	b21a      	sxth	r2, r3
 8013d86:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013d8a:	2101      	movs	r1, #1
 8013d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8013d90:	b21b      	sxth	r3, r3
 8013d92:	4013      	ands	r3, r2
 8013d94:	b21b      	sxth	r3, r3
 8013d96:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 8013d9a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d010      	beq.n	8013dc4 <create_StepCountMap_queue+0x1d4>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013da2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013da6:	3b01      	subs	r3, #1
 8013da8:	4a6b      	ldr	r2, [pc, #428]	; (8013f58 <create_StepCountMap_queue+0x368>)
 8013daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dae:	b21a      	sxth	r2, r3
 8013db0:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013db4:	2101      	movs	r1, #1
 8013db6:	fa01 f303 	lsl.w	r3, r1, r3
 8013dba:	b21b      	sxth	r3, r3
 8013dbc:	4013      	ands	r3, r2
 8013dbe:	b21b      	sxth	r3, r3
 8013dc0:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013dc4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013dc8:	3301      	adds	r3, #1
 8013dca:	4a64      	ldr	r2, [pc, #400]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dd0:	2bff      	cmp	r3, #255	; 0xff
 8013dd2:	d125      	bne.n	8013e20 <create_StepCountMap_queue+0x230>
 8013dd4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013dd8:	2b0f      	cmp	r3, #15
 8013dda:	d021      	beq.n	8013e20 <create_StepCountMap_queue+0x230>
 8013ddc:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d11d      	bne.n	8013e20 <create_StepCountMap_queue+0x230>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 8013de4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013de8:	4a5c      	ldr	r2, [pc, #368]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013dea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013dee:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013df2:	3301      	adds	r3, #1
 8013df4:	3201      	adds	r2, #1
 8013df6:	b291      	uxth	r1, r2
 8013df8:	4a58      	ldr	r2, [pc, #352]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013dfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013dfe:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013e02:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013e06:	4611      	mov	r1, r2
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f000 fa41 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013e0e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013e12:	3301      	adds	r3, #1
 8013e14:	b29a      	uxth	r2, r3
 8013e16:	1d3b      	adds	r3, r7, #4
 8013e18:	4611      	mov	r1, r2
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f000 fa38 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013e20:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e24:	3b01      	subs	r3, #1
 8013e26:	4a4d      	ldr	r2, [pc, #308]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013e28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e2c:	2bff      	cmp	r3, #255	; 0xff
 8013e2e:	d125      	bne.n	8013e7c <create_StepCountMap_queue+0x28c>
 8013e30:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d021      	beq.n	8013e7c <create_StepCountMap_queue+0x28c>
 8013e38:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d11d      	bne.n	8013e7c <create_StepCountMap_queue+0x28c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8013e40:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e44:	4a45      	ldr	r2, [pc, #276]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013e46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013e4a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e4e:	3b01      	subs	r3, #1
 8013e50:	3201      	adds	r2, #1
 8013e52:	b291      	uxth	r1, r2
 8013e54:	4a41      	ldr	r2, [pc, #260]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013e56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013e5a:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8013e5e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013e62:	4611      	mov	r1, r2
 8013e64:	4618      	mov	r0, r3
 8013e66:	f000 fa13 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013e6a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8013e6e:	3b01      	subs	r3, #1
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	1d3b      	adds	r3, r7, #4
 8013e74:	4611      	mov	r1, r2
 8013e76:	4618      	mov	r0, r3
 8013e78:	f000 fa0a 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8013e7c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013e80:	3310      	adds	r3, #16
 8013e82:	4a36      	ldr	r2, [pc, #216]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e88:	2bff      	cmp	r3, #255	; 0xff
 8013e8a:	d125      	bne.n	8013ed8 <create_StepCountMap_queue+0x2e8>
 8013e8c:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013e90:	2b0f      	cmp	r3, #15
 8013e92:	d021      	beq.n	8013ed8 <create_StepCountMap_queue+0x2e8>
 8013e94:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d11d      	bne.n	8013ed8 <create_StepCountMap_queue+0x2e8>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 8013e9c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013ea0:	4a2e      	ldr	r2, [pc, #184]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013ea2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013ea6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013eaa:	3310      	adds	r3, #16
 8013eac:	3201      	adds	r2, #1
 8013eae:	b291      	uxth	r1, r2
 8013eb0:	4a2a      	ldr	r2, [pc, #168]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013eb2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8013eb6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013eba:	3301      	adds	r3, #1
 8013ebc:	b29a      	uxth	r2, r3
 8013ebe:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013ec2:	4611      	mov	r1, r2
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f000 f9e3 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013eca:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013ece:	1d3b      	adds	r3, r7, #4
 8013ed0:	4611      	mov	r1, r2
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f000 f9dc 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8013ed8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013edc:	3b10      	subs	r3, #16
 8013ede:	4a1f      	ldr	r2, [pc, #124]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013ee4:	2bff      	cmp	r3, #255	; 0xff
 8013ee6:	d125      	bne.n	8013f34 <create_StepCountMap_queue+0x344>
 8013ee8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d021      	beq.n	8013f34 <create_StepCountMap_queue+0x344>
 8013ef0:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d11d      	bne.n	8013f34 <create_StepCountMap_queue+0x344>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8013ef8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013efc:	4a17      	ldr	r2, [pc, #92]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013efe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8013f02:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f06:	3b10      	subs	r3, #16
 8013f08:	3201      	adds	r2, #1
 8013f0a:	b291      	uxth	r1, r2
 8013f0c:	4a13      	ldr	r2, [pc, #76]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013f0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8013f12:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013f16:	3b01      	subs	r3, #1
 8013f18:	b29a      	uxth	r2, r3
 8013f1a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013f1e:	4611      	mov	r1, r2
 8013f20:	4618      	mov	r0, r3
 8013f22:	f000 f9b5 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8013f26:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 8013f2a:	1d3b      	adds	r3, r7, #4
 8013f2c:	4611      	mov	r1, r2
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f000 f9ae 	bl	8014290 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8013f34:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8013f38:	4a08      	ldr	r2, [pc, #32]	; (8013f5c <create_StepCountMap_queue+0x36c>)
 8013f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013f3e:	3301      	adds	r3, #1
 8013f40:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8013f44:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8013f48:	2bfe      	cmp	r3, #254	; 0xfe
 8013f4a:	f67f aebf 	bls.w	8013ccc <create_StepCountMap_queue+0xdc>

		}

}
 8013f4e:	bf00      	nop
 8013f50:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}
 8013f58:	20000c3c 	.word	0x20000c3c
 8013f5c:	20000d2c 	.word	0x20000d2c

08013f60 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8013f60:	b580      	push	{r7, lr}
 8013f62:	f6ad 3d18 	subw	sp, sp, #2840	; 0xb18
 8013f66:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(int i=0;i<=255;i++){walk_count[i] = 255;}
 8013f68:	2300      	movs	r3, #0
 8013f6a:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013f6e:	e00a      	b.n	8013f86 <create_StepCountMapBack_queue+0x26>
 8013f70:	4abd      	ldr	r2, [pc, #756]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 8013f72:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f76:	21ff      	movs	r1, #255	; 0xff
 8013f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8013f7c:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f80:	3301      	adds	r3, #1
 8013f82:	f8c7 3b14 	str.w	r3, [r7, #2836]	; 0xb14
 8013f86:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8013f8a:	2bff      	cmp	r3, #255	; 0xff
 8013f8c:	ddf0      	ble.n	8013f70 <create_StepCountMapBack_queue+0x10>
	initStack_walk(&stack_x);
 8013f8e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013f92:	4618      	mov	r0, r3
 8013f94:	f000 f96c 	bl	8014270 <initStack_walk>
	initStack_walk(&stack_y);
 8013f98:	1d3b      	adds	r3, r7, #4
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f000 f968 	bl	8014270 <initStack_walk>


	walk_count[0] = 0;
 8013fa0:	4bb1      	ldr	r3, [pc, #708]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013fa6:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013faa:	2100      	movs	r1, #0
 8013fac:	4618      	mov	r0, r3
 8013fae:	f000 f96f 	bl	8014290 <pushStack_walk>
 8013fb2:	1d3b      	adds	r3, r7, #4
 8013fb4:	2100      	movs	r1, #0
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f000 f96a 	bl	8014290 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013fc2:	2301      	movs	r3, #1
 8013fc4:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
 8013fc8:	2301      	movs	r3, #1
 8013fca:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
 8013fce:	2301      	movs	r3, #1
 8013fd0:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
	while (count_number <= 254) {
 8013fda:	e13b      	b.n	8014254 <create_StepCountMapBack_queue+0x2f4>

		Xcoordinate = popStack_walk(&stack_x);
 8013fdc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f000 f97f 	bl	80142e4 <popStack_walk>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	f8a7 3b08 	strh.w	r3, [r7, #2824]	; 0xb08
		Ycoordinate = popStack_walk(&stack_y);
 8013fec:	1d3b      	adds	r3, r7, #4
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f000 f978 	bl	80142e4 <popStack_walk>
 8013ff4:	4603      	mov	r3, r0
 8013ff6:	f8a7 3b06 	strh.w	r3, [r7, #2822]	; 0xb06
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013ffa:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8013ffe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014002:	4293      	cmp	r3, r2
 8014004:	f000 812b 	beq.w	801425e <create_StepCountMapBack_queue+0x2fe>
 8014008:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801400c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014010:	4293      	cmp	r3, r2
 8014012:	f000 8124 	beq.w	801425e <create_StepCountMapBack_queue+0x2fe>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 8014016:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801401a:	011b      	lsls	r3, r3, #4
 801401c:	b29a      	uxth	r2, r3
 801401e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014022:	4413      	add	r3, r2
 8014024:	f8a7 3b04 	strh.w	r3, [r7, #2820]	; 0xb04
		if (Ycoordinate <= 14) {
 8014028:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801402c:	2b0e      	cmp	r3, #14
 801402e:	d811      	bhi.n	8014054 <create_StepCountMapBack_queue+0xf4>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014030:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014034:	4a8d      	ldr	r2, [pc, #564]	; (801426c <create_StepCountMapBack_queue+0x30c>)
 8014036:	330c      	adds	r3, #12
 8014038:	005b      	lsls	r3, r3, #1
 801403a:	4413      	add	r3, r2
 801403c:	88db      	ldrh	r3, [r3, #6]
 801403e:	b21a      	sxth	r2, r3
 8014040:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014044:	2101      	movs	r1, #1
 8014046:	fa01 f303 	lsl.w	r3, r1, r3
 801404a:	b21b      	sxth	r3, r3
 801404c:	4013      	ands	r3, r2
 801404e:	b21b      	sxth	r3, r3
 8014050:	f8a7 3b10 	strh.w	r3, [r7, #2832]	; 0xb10
		}
		if (Ycoordinate >= 1) {
 8014054:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014058:	2b00      	cmp	r3, #0
 801405a:	d012      	beq.n	8014082 <create_StepCountMapBack_queue+0x122>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 801405c:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014060:	3b01      	subs	r3, #1
 8014062:	4a82      	ldr	r2, [pc, #520]	; (801426c <create_StepCountMapBack_queue+0x30c>)
 8014064:	330c      	adds	r3, #12
 8014066:	005b      	lsls	r3, r3, #1
 8014068:	4413      	add	r3, r2
 801406a:	88db      	ldrh	r3, [r3, #6]
 801406c:	b21a      	sxth	r2, r3
 801406e:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014072:	2101      	movs	r1, #1
 8014074:	fa01 f303 	lsl.w	r3, r1, r3
 8014078:	b21b      	sxth	r3, r3
 801407a:	4013      	ands	r3, r2
 801407c:	b21b      	sxth	r3, r3
 801407e:	f8a7 3b0e 	strh.w	r3, [r7, #2830]	; 0xb0e
		}
		if (Xcoordinate <= 14) {
 8014082:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014086:	2b0e      	cmp	r3, #14
 8014088:	d80f      	bhi.n	80140aa <create_StepCountMapBack_queue+0x14a>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 801408a:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 801408e:	4a77      	ldr	r2, [pc, #476]	; (801426c <create_StepCountMapBack_queue+0x30c>)
 8014090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014094:	b21a      	sxth	r2, r3
 8014096:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801409a:	2101      	movs	r1, #1
 801409c:	fa01 f303 	lsl.w	r3, r1, r3
 80140a0:	b21b      	sxth	r3, r3
 80140a2:	4013      	ands	r3, r2
 80140a4:	b21b      	sxth	r3, r3
 80140a6:	f8a7 3b0c 	strh.w	r3, [r7, #2828]	; 0xb0c
		}
		if (Xcoordinate >= 1) {
 80140aa:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d010      	beq.n	80140d4 <create_StepCountMapBack_queue+0x174>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80140b2:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80140b6:	3b01      	subs	r3, #1
 80140b8:	4a6c      	ldr	r2, [pc, #432]	; (801426c <create_StepCountMapBack_queue+0x30c>)
 80140ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140be:	b21a      	sxth	r2, r3
 80140c0:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140c4:	2101      	movs	r1, #1
 80140c6:	fa01 f303 	lsl.w	r3, r1, r3
 80140ca:	b21b      	sxth	r3, r3
 80140cc:	4013      	ands	r3, r2
 80140ce:	b21b      	sxth	r3, r3
 80140d0:	f8a7 3b0a 	strh.w	r3, [r7, #2826]	; 0xb0a
		}

		if (walk_count[coordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 80140d4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80140d8:	3301      	adds	r3, #1
 80140da:	4a63      	ldr	r2, [pc, #396]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 80140dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80140e0:	2bff      	cmp	r3, #255	; 0xff
 80140e2:	d125      	bne.n	8014130 <create_StepCountMapBack_queue+0x1d0>
 80140e4:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 80140e8:	2b0f      	cmp	r3, #15
 80140ea:	d021      	beq.n	8014130 <create_StepCountMapBack_queue+0x1d0>
 80140ec:	f8b7 3b10 	ldrh.w	r3, [r7, #2832]	; 0xb10
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d11d      	bne.n	8014130 <create_StepCountMapBack_queue+0x1d0>
			walk_count[coordinate + 1] = walk_count[coordinate] + 1;
 80140f4:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80140f8:	4a5b      	ldr	r2, [pc, #364]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 80140fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80140fe:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014102:	3301      	adds	r3, #1
 8014104:	3201      	adds	r2, #1
 8014106:	b291      	uxth	r1, r2
 8014108:	4a57      	ldr	r2, [pc, #348]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 801410a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801410e:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 8014112:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014116:	4611      	mov	r1, r2
 8014118:	4618      	mov	r0, r3
 801411a:	f000 f8b9 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 801411e:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014122:	3301      	adds	r3, #1
 8014124:	b29a      	uxth	r2, r3
 8014126:	1d3b      	adds	r3, r7, #4
 8014128:	4611      	mov	r1, r2
 801412a:	4618      	mov	r0, r3
 801412c:	f000 f8b0 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014130:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014134:	3b01      	subs	r3, #1
 8014136:	4a4c      	ldr	r2, [pc, #304]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 8014138:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801413c:	2bff      	cmp	r3, #255	; 0xff
 801413e:	d125      	bne.n	801418c <create_StepCountMapBack_queue+0x22c>
 8014140:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 8014144:	2b00      	cmp	r3, #0
 8014146:	d021      	beq.n	801418c <create_StepCountMapBack_queue+0x22c>
 8014148:	f8b7 3b0e 	ldrh.w	r3, [r7, #2830]	; 0xb0e
 801414c:	2b00      	cmp	r3, #0
 801414e:	d11d      	bne.n	801418c <create_StepCountMapBack_queue+0x22c>
			walk_count[coordinate - 1] = walk_count[coordinate] + 1;
 8014150:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014154:	4a44      	ldr	r2, [pc, #272]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 8014156:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801415a:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801415e:	3b01      	subs	r3, #1
 8014160:	3201      	adds	r2, #1
 8014162:	b291      	uxth	r1, r2
 8014164:	4a40      	ldr	r2, [pc, #256]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 8014166:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801416a:	f8b7 2b08 	ldrh.w	r2, [r7, #2824]	; 0xb08
 801416e:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8014172:	4611      	mov	r1, r2
 8014174:	4618      	mov	r0, r3
 8014176:	f000 f88b 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 801417a:	f8b7 3b06 	ldrh.w	r3, [r7, #2822]	; 0xb06
 801417e:	3b01      	subs	r3, #1
 8014180:	b29a      	uxth	r2, r3
 8014182:	1d3b      	adds	r3, r7, #4
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f000 f882 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate + 16] == 255 && Xcoordinate != 15 && wall_east == 0) {
 801418c:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014190:	3310      	adds	r3, #16
 8014192:	4a35      	ldr	r2, [pc, #212]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 8014194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014198:	2bff      	cmp	r3, #255	; 0xff
 801419a:	d125      	bne.n	80141e8 <create_StepCountMapBack_queue+0x288>
 801419c:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141a0:	2b0f      	cmp	r3, #15
 80141a2:	d021      	beq.n	80141e8 <create_StepCountMapBack_queue+0x288>
 80141a4:	f8b7 3b0c 	ldrh.w	r3, [r7, #2828]	; 0xb0c
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d11d      	bne.n	80141e8 <create_StepCountMapBack_queue+0x288>
			walk_count[coordinate + 16] = walk_count[coordinate] + 1;
 80141ac:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141b0:	4a2d      	ldr	r2, [pc, #180]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 80141b2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80141b6:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141ba:	3310      	adds	r3, #16
 80141bc:	3201      	adds	r2, #1
 80141be:	b291      	uxth	r1, r2
 80141c0:	4a29      	ldr	r2, [pc, #164]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 80141c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80141c6:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141ca:	3301      	adds	r3, #1
 80141cc:	b29a      	uxth	r2, r3
 80141ce:	f207 5384 	addw	r3, r7, #1412	; 0x584
 80141d2:	4611      	mov	r1, r2
 80141d4:	4618      	mov	r0, r3
 80141d6:	f000 f85b 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80141da:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 80141de:	1d3b      	adds	r3, r7, #4
 80141e0:	4611      	mov	r1, r2
 80141e2:	4618      	mov	r0, r3
 80141e4:	f000 f854 	bl	8014290 <pushStack_walk>
		}
		if (walk_count[coordinate - 16] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80141e8:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 80141ec:	3b10      	subs	r3, #16
 80141ee:	4a1e      	ldr	r2, [pc, #120]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 80141f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80141f4:	2bff      	cmp	r3, #255	; 0xff
 80141f6:	d125      	bne.n	8014244 <create_StepCountMapBack_queue+0x2e4>
 80141f8:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d021      	beq.n	8014244 <create_StepCountMapBack_queue+0x2e4>
 8014200:	f8b7 3b0a 	ldrh.w	r3, [r7, #2826]	; 0xb0a
 8014204:	2b00      	cmp	r3, #0
 8014206:	d11d      	bne.n	8014244 <create_StepCountMapBack_queue+0x2e4>
			walk_count[coordinate - 16] = walk_count[coordinate] + 1;
 8014208:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 801420c:	4a16      	ldr	r2, [pc, #88]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 801420e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8014212:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014216:	3b10      	subs	r3, #16
 8014218:	3201      	adds	r2, #1
 801421a:	b291      	uxth	r1, r2
 801421c:	4a12      	ldr	r2, [pc, #72]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 801421e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014222:	f8b7 3b08 	ldrh.w	r3, [r7, #2824]	; 0xb08
 8014226:	3b01      	subs	r3, #1
 8014228:	b29a      	uxth	r2, r3
 801422a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 801422e:	4611      	mov	r1, r2
 8014230:	4618      	mov	r0, r3
 8014232:	f000 f82d 	bl	8014290 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014236:	f8b7 2b06 	ldrh.w	r2, [r7, #2822]	; 0xb06
 801423a:	1d3b      	adds	r3, r7, #4
 801423c:	4611      	mov	r1, r2
 801423e:	4618      	mov	r0, r3
 8014240:	f000 f826 	bl	8014290 <pushStack_walk>
		}
		count_number=walk_count[coordinate] + 1;
 8014244:	f8b7 3b04 	ldrh.w	r3, [r7, #2820]	; 0xb04
 8014248:	4a07      	ldr	r2, [pc, #28]	; (8014268 <create_StepCountMapBack_queue+0x308>)
 801424a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801424e:	3301      	adds	r3, #1
 8014250:	f8a7 3b12 	strh.w	r3, [r7, #2834]	; 0xb12
	while (count_number <= 254) {
 8014254:	f8b7 3b12 	ldrh.w	r3, [r7, #2834]	; 0xb12
 8014258:	2bfe      	cmp	r3, #254	; 0xfe
 801425a:	f67f aebf 	bls.w	8013fdc <create_StepCountMapBack_queue+0x7c>

		}

}
 801425e:	bf00      	nop
 8014260:	f607 3718 	addw	r7, r7, #2840	; 0xb18
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	20000d2c 	.word	0x20000d2c
 801426c:	20000c3c 	.word	0x20000c3c

08014270 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014270:	b480      	push	{r7}
 8014272:	b083      	sub	sp, #12
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2200      	movs	r2, #0
 801427c:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	2200      	movs	r2, #0
 8014282:	605a      	str	r2, [r3, #4]
}
 8014284:	bf00      	nop
 8014286:	370c      	adds	r7, #12
 8014288:	46bd      	mov	sp, r7
 801428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801428e:	4770      	bx	lr

08014290 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	460b      	mov	r3, r1
 801429a:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	685a      	ldr	r2, [r3, #4]
 80142a0:	8879      	ldrh	r1, [r7, #2]
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	3202      	adds	r2, #2
 80142a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	685b      	ldr	r3, [r3, #4]
 80142ae:	1c5a      	adds	r2, r3, #1
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	685b      	ldr	r3, [r3, #4]
 80142b8:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80142bc:	d102      	bne.n	80142c4 <pushStack_walk+0x34>
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	2200      	movs	r2, #0
 80142c2:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	685a      	ldr	r2, [r3, #4]
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	429a      	cmp	r2, r3
 80142ce:	d103      	bne.n	80142d8 <pushStack_walk+0x48>
    	printf("stack_full\n");
 80142d0:	4803      	ldr	r0, [pc, #12]	; (80142e0 <pushStack_walk+0x50>)
 80142d2:	f00b fab5 	bl	801f840 <puts>
        return;
 80142d6:	bf00      	nop
    }
}
 80142d8:	3708      	adds	r7, #8
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	08021f54 	.word	0x08021f54

080142e4 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 80142e4:	b480      	push	{r7}
 80142e6:	b085      	sub	sp, #20
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 80142ec:	2300      	movs	r3, #0
 80142ee:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	685a      	ldr	r2, [r3, #4]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	681b      	ldr	r3, [r3, #0]
 80142f8:	429a      	cmp	r2, r3
 80142fa:	d102      	bne.n	8014302 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 80142fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014300:	e014      	b.n	801432c <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	681a      	ldr	r2, [r3, #0]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	3202      	adds	r2, #2
 801430a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801430e:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681b      	ldr	r3, [r3, #0]
 8014314:	1c5a      	adds	r2, r3, #1
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8014322:	d102      	bne.n	801432a <popStack_walk+0x46>
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 801432a:	89fb      	ldrh	r3, [r7, #14]
}
 801432c:	4618      	mov	r0, r3
 801432e:	3714      	adds	r7, #20
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0

	int tt = 14;
 801433e:	230e      	movs	r3, #14
 8014340:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014342:	2300      	movs	r3, #0
 8014344:	603b      	str	r3, [r7, #0]

	printf(
 8014346:	4881      	ldr	r0, [pc, #516]	; (801454c <maze_display+0x214>)
 8014348:	f00b fa7a 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 801434c:	230e      	movs	r3, #14
 801434e:	607b      	str	r3, [r7, #4]
 8014350:	e06e      	b.n	8014430 <maze_display+0xf8>

		printf("|%5d", walk_count[tt + 1]);
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	3301      	adds	r3, #1
 8014356:	4a7e      	ldr	r2, [pc, #504]	; (8014550 <maze_display+0x218>)
 8014358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801435c:	4619      	mov	r1, r3
 801435e:	487d      	ldr	r0, [pc, #500]	; (8014554 <maze_display+0x21c>)
 8014360:	f00b f9d2 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014364:	2300      	movs	r3, #0
 8014366:	603b      	str	r3, [r7, #0]
 8014368:	e030      	b.n	80143cc <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801436a:	4a7b      	ldr	r2, [pc, #492]	; (8014558 <maze_display+0x220>)
 801436c:	683b      	ldr	r3, [r7, #0]
 801436e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014372:	4619      	mov	r1, r3
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	3301      	adds	r3, #1
 8014378:	2201      	movs	r2, #1
 801437a:	fa02 f303 	lsl.w	r3, r2, r3
 801437e:	ea01 0203 	and.w	r2, r1, r3
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	3301      	adds	r3, #1
 8014386:	2101      	movs	r1, #1
 8014388:	fa01 f303 	lsl.w	r3, r1, r3
 801438c:	429a      	cmp	r2, r3
 801438e:	d10d      	bne.n	80143ac <maze_display+0x74>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	1c5a      	adds	r2, r3, #1
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	3301      	adds	r3, #1
 8014398:	011b      	lsls	r3, r3, #4
 801439a:	4413      	add	r3, r2
 801439c:	4a6c      	ldr	r2, [pc, #432]	; (8014550 <maze_display+0x218>)
 801439e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143a2:	4619      	mov	r1, r3
 80143a4:	486b      	ldr	r0, [pc, #428]	; (8014554 <maze_display+0x21c>)
 80143a6:	f00b f9af 	bl	801f708 <iprintf>
 80143aa:	e00c      	b.n	80143c6 <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	1c5a      	adds	r2, r3, #1
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	3301      	adds	r3, #1
 80143b4:	011b      	lsls	r3, r3, #4
 80143b6:	4413      	add	r3, r2
 80143b8:	4a65      	ldr	r2, [pc, #404]	; (8014550 <maze_display+0x218>)
 80143ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80143be:	4619      	mov	r1, r3
 80143c0:	4866      	ldr	r0, [pc, #408]	; (801455c <maze_display+0x224>)
 80143c2:	f00b f9a1 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	3301      	adds	r3, #1
 80143ca:	603b      	str	r3, [r7, #0]
 80143cc:	683b      	ldr	r3, [r7, #0]
 80143ce:	2b0e      	cmp	r3, #14
 80143d0:	ddcb      	ble.n	801436a <maze_display+0x32>
			}
		}
		printf("|\n");
 80143d2:	4863      	ldr	r0, [pc, #396]	; (8014560 <maze_display+0x228>)
 80143d4:	f00b fa34 	bl	801f840 <puts>
		if (tt <= -1) {
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2b00      	cmp	r3, #0
 80143dc:	db2d      	blt.n	801443a <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80143de:	2300      	movs	r3, #0
 80143e0:	603b      	str	r3, [r7, #0]
 80143e2:	e01c      	b.n	801441e <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 80143e4:	4a5c      	ldr	r2, [pc, #368]	; (8014558 <maze_display+0x220>)
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	330c      	adds	r3, #12
 80143ea:	005b      	lsls	r3, r3, #1
 80143ec:	4413      	add	r3, r2
 80143ee:	88db      	ldrh	r3, [r3, #6]
 80143f0:	4619      	mov	r1, r3
 80143f2:	2201      	movs	r2, #1
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	fa02 f303 	lsl.w	r3, r2, r3
 80143fa:	ea01 0203 	and.w	r2, r1, r3
 80143fe:	2101      	movs	r1, #1
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	fa01 f303 	lsl.w	r3, r1, r3
 8014406:	429a      	cmp	r2, r3
 8014408:	d103      	bne.n	8014412 <maze_display+0xda>
				printf("+-----");
 801440a:	4856      	ldr	r0, [pc, #344]	; (8014564 <maze_display+0x22c>)
 801440c:	f00b f97c 	bl	801f708 <iprintf>
 8014410:	e002      	b.n	8014418 <maze_display+0xe0>
			}else{
				printf("+     ");
 8014412:	4855      	ldr	r0, [pc, #340]	; (8014568 <maze_display+0x230>)
 8014414:	f00b f978 	bl	801f708 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	3301      	adds	r3, #1
 801441c:	603b      	str	r3, [r7, #0]
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	2b0f      	cmp	r3, #15
 8014422:	dddf      	ble.n	80143e4 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014424:	4851      	ldr	r0, [pc, #324]	; (801456c <maze_display+0x234>)
 8014426:	f00b fa0b 	bl	801f840 <puts>
	for (tt = 14;tt >= -1;tt--){
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	3b01      	subs	r3, #1
 801442e:	607b      	str	r3, [r7, #4]
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014436:	da8c      	bge.n	8014352 <maze_display+0x1a>
 8014438:	e000      	b.n	801443c <maze_display+0x104>
			break;
 801443a:	bf00      	nop

	}

	printf(
 801443c:	484c      	ldr	r0, [pc, #304]	; (8014570 <maze_display+0x238>)
 801443e:	f00b f9ff 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014442:	4842      	ldr	r0, [pc, #264]	; (801454c <maze_display+0x214>)
 8014444:	f00b f9fc 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014448:	230e      	movs	r3, #14
 801444a:	607b      	str	r3, [r7, #4]
 801444c:	e070      	b.n	8014530 <maze_display+0x1f8>
		printf("|%5d", walk_count[tt + 1]);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	3301      	adds	r3, #1
 8014452:	4a3f      	ldr	r2, [pc, #252]	; (8014550 <maze_display+0x218>)
 8014454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014458:	4619      	mov	r1, r3
 801445a:	483e      	ldr	r0, [pc, #248]	; (8014554 <maze_display+0x21c>)
 801445c:	f00b f954 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014460:	2300      	movs	r3, #0
 8014462:	603b      	str	r3, [r7, #0]
 8014464:	e032      	b.n	80144cc <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014466:	4a3c      	ldr	r2, [pc, #240]	; (8014558 <maze_display+0x220>)
 8014468:	683b      	ldr	r3, [r7, #0]
 801446a:	331c      	adds	r3, #28
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	4413      	add	r3, r2
 8014470:	889b      	ldrh	r3, [r3, #4]
 8014472:	4619      	mov	r1, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	3301      	adds	r3, #1
 8014478:	2201      	movs	r2, #1
 801447a:	fa02 f303 	lsl.w	r3, r2, r3
 801447e:	ea01 0203 	and.w	r2, r1, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	3301      	adds	r3, #1
 8014486:	2101      	movs	r1, #1
 8014488:	fa01 f303 	lsl.w	r3, r1, r3
 801448c:	429a      	cmp	r2, r3
 801448e:	d10d      	bne.n	80144ac <maze_display+0x174>
				printf("|%5d", walk_count[tt + 1 + (ss + 1) * 16]);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	1c5a      	adds	r2, r3, #1
 8014494:	683b      	ldr	r3, [r7, #0]
 8014496:	3301      	adds	r3, #1
 8014498:	011b      	lsls	r3, r3, #4
 801449a:	4413      	add	r3, r2
 801449c:	4a2c      	ldr	r2, [pc, #176]	; (8014550 <maze_display+0x218>)
 801449e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144a2:	4619      	mov	r1, r3
 80144a4:	482b      	ldr	r0, [pc, #172]	; (8014554 <maze_display+0x21c>)
 80144a6:	f00b f92f 	bl	801f708 <iprintf>
 80144aa:	e00c      	b.n	80144c6 <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[tt + 1 + (ss + 1) * 16]);
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	1c5a      	adds	r2, r3, #1
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	3301      	adds	r3, #1
 80144b4:	011b      	lsls	r3, r3, #4
 80144b6:	4413      	add	r3, r2
 80144b8:	4a25      	ldr	r2, [pc, #148]	; (8014550 <maze_display+0x218>)
 80144ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80144be:	4619      	mov	r1, r3
 80144c0:	4826      	ldr	r0, [pc, #152]	; (801455c <maze_display+0x224>)
 80144c2:	f00b f921 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80144c6:	683b      	ldr	r3, [r7, #0]
 80144c8:	3301      	adds	r3, #1
 80144ca:	603b      	str	r3, [r7, #0]
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	2b0e      	cmp	r3, #14
 80144d0:	ddc9      	ble.n	8014466 <maze_display+0x12e>
			}
		}
		printf("|\n");
 80144d2:	4823      	ldr	r0, [pc, #140]	; (8014560 <maze_display+0x228>)
 80144d4:	f00b f9b4 	bl	801f840 <puts>
		if (tt <= -1) {
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	db2d      	blt.n	801453a <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80144de:	2300      	movs	r3, #0
 80144e0:	603b      	str	r3, [r7, #0]
 80144e2:	e01c      	b.n	801451e <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 80144e4:	4a1c      	ldr	r2, [pc, #112]	; (8014558 <maze_display+0x220>)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	332c      	adds	r3, #44	; 0x2c
 80144ea:	005b      	lsls	r3, r3, #1
 80144ec:	4413      	add	r3, r2
 80144ee:	885b      	ldrh	r3, [r3, #2]
 80144f0:	4619      	mov	r1, r3
 80144f2:	2201      	movs	r2, #1
 80144f4:	683b      	ldr	r3, [r7, #0]
 80144f6:	fa02 f303 	lsl.w	r3, r2, r3
 80144fa:	ea01 0203 	and.w	r2, r1, r3
 80144fe:	2101      	movs	r1, #1
 8014500:	683b      	ldr	r3, [r7, #0]
 8014502:	fa01 f303 	lsl.w	r3, r1, r3
 8014506:	429a      	cmp	r2, r3
 8014508:	d103      	bne.n	8014512 <maze_display+0x1da>
				printf("+-----");
 801450a:	4816      	ldr	r0, [pc, #88]	; (8014564 <maze_display+0x22c>)
 801450c:	f00b f8fc 	bl	801f708 <iprintf>
 8014510:	e002      	b.n	8014518 <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014512:	4815      	ldr	r0, [pc, #84]	; (8014568 <maze_display+0x230>)
 8014514:	f00b f8f8 	bl	801f708 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014518:	683b      	ldr	r3, [r7, #0]
 801451a:	3301      	adds	r3, #1
 801451c:	603b      	str	r3, [r7, #0]
 801451e:	683b      	ldr	r3, [r7, #0]
 8014520:	2b0f      	cmp	r3, #15
 8014522:	dddf      	ble.n	80144e4 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8014524:	4811      	ldr	r0, [pc, #68]	; (801456c <maze_display+0x234>)
 8014526:	f00b f98b 	bl	801f840 <puts>
	for (tt = 14;tt >= -1;tt--){
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	3b01      	subs	r3, #1
 801452e:	607b      	str	r3, [r7, #4]
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014536:	da8a      	bge.n	801444e <maze_display+0x116>
 8014538:	e000      	b.n	801453c <maze_display+0x204>
			break;
 801453a:	bf00      	nop
	}

	printf(
 801453c:	480c      	ldr	r0, [pc, #48]	; (8014570 <maze_display+0x238>)
 801453e:	f00b f97f 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8014542:	bf00      	nop
 8014544:	3708      	adds	r7, #8
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	08021f60 	.word	0x08021f60
 8014550:	20000d2c 	.word	0x20000d2c
 8014554:	08021fc4 	.word	0x08021fc4
 8014558:	20000c3c 	.word	0x20000c3c
 801455c:	08021fcc 	.word	0x08021fcc
 8014560:	08021fd4 	.word	0x08021fd4
 8014564:	08021fd8 	.word	0x08021fd8
 8014568:	08021fe0 	.word	0x08021fe0
 801456c:	08021fe8 	.word	0x08021fe8
 8014570:	08021fec 	.word	0x08021fec

08014574 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8014574:	b580      	push	{r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0

	int tt = 14;
 801457a:	230e      	movs	r3, #14
 801457c:	607b      	str	r3, [r7, #4]
	int ss = 0;
 801457e:	2300      	movs	r3, #0
 8014580:	603b      	str	r3, [r7, #0]

	printf(
 8014582:	4865      	ldr	r0, [pc, #404]	; (8014718 <maze_display_Dijkstra+0x1a4>)
 8014584:	f00b f95c 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014588:	230e      	movs	r3, #14
 801458a:	607b      	str	r3, [r7, #4]
 801458c:	e06a      	b.n	8014664 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 801458e:	4863      	ldr	r0, [pc, #396]	; (801471c <maze_display_Dijkstra+0x1a8>)
 8014590:	f00b f8ba 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014594:	2300      	movs	r3, #0
 8014596:	603b      	str	r3, [r7, #0]
 8014598:	e027      	b.n	80145ea <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801459a:	4a61      	ldr	r2, [pc, #388]	; (8014720 <maze_display_Dijkstra+0x1ac>)
 801459c:	683b      	ldr	r3, [r7, #0]
 801459e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145a2:	4619      	mov	r1, r3
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	3301      	adds	r3, #1
 80145a8:	2201      	movs	r2, #1
 80145aa:	fa02 f303 	lsl.w	r3, r2, r3
 80145ae:	ea01 0203 	and.w	r2, r1, r3
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	3301      	adds	r3, #1
 80145b6:	2101      	movs	r1, #1
 80145b8:	fa01 f303 	lsl.w	r3, r1, r3
 80145bc:	429a      	cmp	r2, r3
 80145be:	d103      	bne.n	80145c8 <maze_display_Dijkstra+0x54>
				printf("  |   ");
 80145c0:	4858      	ldr	r0, [pc, #352]	; (8014724 <maze_display_Dijkstra+0x1b0>)
 80145c2:	f00b f8a1 	bl	801f708 <iprintf>
 80145c6:	e00d      	b.n	80145e4 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	1c5a      	adds	r2, r3, #1
 80145cc:	4956      	ldr	r1, [pc, #344]	; (8014728 <maze_display_Dijkstra+0x1b4>)
 80145ce:	4613      	mov	r3, r2
 80145d0:	011b      	lsls	r3, r3, #4
 80145d2:	1a9b      	subs	r3, r3, r2
 80145d4:	683a      	ldr	r2, [r7, #0]
 80145d6:	4413      	add	r3, r2
 80145d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145dc:	4619      	mov	r1, r3
 80145de:	4853      	ldr	r0, [pc, #332]	; (801472c <maze_display_Dijkstra+0x1b8>)
 80145e0:	f00b f892 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	3301      	adds	r3, #1
 80145e8:	603b      	str	r3, [r7, #0]
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	2b0e      	cmp	r3, #14
 80145ee:	ddd4      	ble.n	801459a <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 80145f0:	484f      	ldr	r0, [pc, #316]	; (8014730 <maze_display_Dijkstra+0x1bc>)
 80145f2:	f00b f925 	bl	801f840 <puts>
		if (tt <= -1) {
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	db38      	blt.n	801466e <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80145fc:	2300      	movs	r3, #0
 80145fe:	603b      	str	r3, [r7, #0]
 8014600:	e027      	b.n	8014652 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014602:	4a47      	ldr	r2, [pc, #284]	; (8014720 <maze_display_Dijkstra+0x1ac>)
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	330c      	adds	r3, #12
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	88db      	ldrh	r3, [r3, #6]
 801460e:	4619      	mov	r1, r3
 8014610:	2201      	movs	r2, #1
 8014612:	683b      	ldr	r3, [r7, #0]
 8014614:	fa02 f303 	lsl.w	r3, r2, r3
 8014618:	ea01 0203 	and.w	r2, r1, r3
 801461c:	2101      	movs	r1, #1
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	fa01 f303 	lsl.w	r3, r1, r3
 8014624:	429a      	cmp	r2, r3
 8014626:	d103      	bne.n	8014630 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 8014628:	4842      	ldr	r0, [pc, #264]	; (8014734 <maze_display_Dijkstra+0x1c0>)
 801462a:	f00b f86d 	bl	801f708 <iprintf>
 801462e:	e00d      	b.n	801464c <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8014630:	493d      	ldr	r1, [pc, #244]	; (8014728 <maze_display_Dijkstra+0x1b4>)
 8014632:	683a      	ldr	r2, [r7, #0]
 8014634:	4613      	mov	r3, r2
 8014636:	011b      	lsls	r3, r3, #4
 8014638:	1a9b      	subs	r3, r3, r2
 801463a:	687a      	ldr	r2, [r7, #4]
 801463c:	4413      	add	r3, r2
 801463e:	33f0      	adds	r3, #240	; 0xf0
 8014640:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014644:	4619      	mov	r1, r3
 8014646:	483c      	ldr	r0, [pc, #240]	; (8014738 <maze_display_Dijkstra+0x1c4>)
 8014648:	f00b f85e 	bl	801f708 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	3301      	adds	r3, #1
 8014650:	603b      	str	r3, [r7, #0]
 8014652:	683b      	ldr	r3, [r7, #0]
 8014654:	2b0f      	cmp	r3, #15
 8014656:	ddd4      	ble.n	8014602 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 8014658:	4838      	ldr	r0, [pc, #224]	; (801473c <maze_display_Dijkstra+0x1c8>)
 801465a:	f00b f8f1 	bl	801f840 <puts>
	for (tt = 14;tt >= -1;tt--){
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	3b01      	subs	r3, #1
 8014662:	607b      	str	r3, [r7, #4]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801466a:	da90      	bge.n	801458e <maze_display_Dijkstra+0x1a>
 801466c:	e000      	b.n	8014670 <maze_display_Dijkstra+0xfc>
			break;
 801466e:	bf00      	nop

	}

	printf(
 8014670:	4833      	ldr	r0, [pc, #204]	; (8014740 <maze_display_Dijkstra+0x1cc>)
 8014672:	f00b f8e5 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014676:	4828      	ldr	r0, [pc, #160]	; (8014718 <maze_display_Dijkstra+0x1a4>)
 8014678:	f00b f8e2 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 801467c:	230e      	movs	r3, #14
 801467e:	607b      	str	r3, [r7, #4]
 8014680:	e03c      	b.n	80146fc <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8014682:	4826      	ldr	r0, [pc, #152]	; (801471c <maze_display_Dijkstra+0x1a8>)
 8014684:	f00b f840 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014688:	2300      	movs	r3, #0
 801468a:	603b      	str	r3, [r7, #0]
 801468c:	e010      	b.n	80146b0 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	1c5a      	adds	r2, r3, #1
 8014692:	4925      	ldr	r1, [pc, #148]	; (8014728 <maze_display_Dijkstra+0x1b4>)
 8014694:	4613      	mov	r3, r2
 8014696:	011b      	lsls	r3, r3, #4
 8014698:	1a9b      	subs	r3, r3, r2
 801469a:	683a      	ldr	r2, [r7, #0]
 801469c:	4413      	add	r3, r2
 801469e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146a2:	4619      	mov	r1, r3
 80146a4:	4821      	ldr	r0, [pc, #132]	; (801472c <maze_display_Dijkstra+0x1b8>)
 80146a6:	f00b f82f 	bl	801f708 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80146aa:	683b      	ldr	r3, [r7, #0]
 80146ac:	3301      	adds	r3, #1
 80146ae:	603b      	str	r3, [r7, #0]
 80146b0:	683b      	ldr	r3, [r7, #0]
 80146b2:	2b0e      	cmp	r3, #14
 80146b4:	ddeb      	ble.n	801468e <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 80146b6:	481e      	ldr	r0, [pc, #120]	; (8014730 <maze_display_Dijkstra+0x1bc>)
 80146b8:	f00b f8c2 	bl	801f840 <puts>
		if (tt <= -1) {
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	db21      	blt.n	8014706 <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80146c2:	2300      	movs	r3, #0
 80146c4:	603b      	str	r3, [r7, #0]
 80146c6:	e010      	b.n	80146ea <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 80146c8:	4917      	ldr	r1, [pc, #92]	; (8014728 <maze_display_Dijkstra+0x1b4>)
 80146ca:	683a      	ldr	r2, [r7, #0]
 80146cc:	4613      	mov	r3, r2
 80146ce:	011b      	lsls	r3, r3, #4
 80146d0:	1a9b      	subs	r3, r3, r2
 80146d2:	687a      	ldr	r2, [r7, #4]
 80146d4:	4413      	add	r3, r2
 80146d6:	33f0      	adds	r3, #240	; 0xf0
 80146d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146dc:	4619      	mov	r1, r3
 80146de:	4816      	ldr	r0, [pc, #88]	; (8014738 <maze_display_Dijkstra+0x1c4>)
 80146e0:	f00b f812 	bl	801f708 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80146e4:	683b      	ldr	r3, [r7, #0]
 80146e6:	3301      	adds	r3, #1
 80146e8:	603b      	str	r3, [r7, #0]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	2b0f      	cmp	r3, #15
 80146ee:	ddeb      	ble.n	80146c8 <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 80146f0:	4812      	ldr	r0, [pc, #72]	; (801473c <maze_display_Dijkstra+0x1c8>)
 80146f2:	f00b f8a5 	bl	801f840 <puts>
	for (tt = 14;tt >= -1;tt--){
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	3b01      	subs	r3, #1
 80146fa:	607b      	str	r3, [r7, #4]
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014702:	dabe      	bge.n	8014682 <maze_display_Dijkstra+0x10e>
 8014704:	e000      	b.n	8014708 <maze_display_Dijkstra+0x194>
			break;
 8014706:	bf00      	nop

	}

	printf(
 8014708:	480d      	ldr	r0, [pc, #52]	; (8014740 <maze_display_Dijkstra+0x1cc>)
 801470a:	f00b f899 	bl	801f840 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 801470e:	bf00      	nop
 8014710:	3708      	adds	r7, #8
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}
 8014716:	bf00      	nop
 8014718:	08021f60 	.word	0x08021f60
 801471c:	08022050 	.word	0x08022050
 8014720:	20000c3c 	.word	0x20000c3c
 8014724:	08022058 	.word	0x08022058
 8014728:	20000f2c 	.word	0x20000f2c
 801472c:	08022060 	.word	0x08022060
 8014730:	08022068 	.word	0x08022068
 8014734:	08021fd8 	.word	0x08021fd8
 8014738:	08022070 	.word	0x08022070
 801473c:	08021fe8 	.word	0x08021fe8
 8014740:	08021fec 	.word	0x08021fec

08014744 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	4603      	mov	r3, r0
 801474c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 801474e:	2300      	movs	r3, #0
 8014750:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014752:	2300      	movs	r3, #0
 8014754:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 8014756:	2300      	movs	r3, #0
 8014758:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 801475a:	4b71      	ldr	r3, [pc, #452]	; (8014920 <mode_decision+0x1dc>)
 801475c:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 801475e:	79fb      	ldrb	r3, [r7, #7]
 8014760:	f003 030f 	and.w	r3, r3, #15
 8014764:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014766:	79fb      	ldrb	r3, [r7, #7]
 8014768:	091b      	lsrs	r3, r3, #4
 801476a:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801476c:	7bbb      	ldrb	r3, [r7, #14]
 801476e:	011b      	lsls	r3, r3, #4
 8014770:	b2da      	uxtb	r2, r3
 8014772:	7bfb      	ldrb	r3, [r7, #15]
 8014774:	4413      	add	r3, r2
 8014776:	b2db      	uxtb	r3, r3
 8014778:	4618      	mov	r0, r3
 801477a:	f7f2 fbaf 	bl	8006edc <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 801477e:	e07f      	b.n	8014880 <mode_decision+0x13c>
				HAL_Delay(1);
 8014780:	2001      	movs	r0, #1
 8014782:	f003 f86f 	bl	8017864 <HAL_Delay>
				if (E_distanceR >= dis8) {
 8014786:	4b67      	ldr	r3, [pc, #412]	; (8014924 <mode_decision+0x1e0>)
 8014788:	edd3 7a00 	vldr	s15, [r3]
 801478c:	ed97 7a02 	vldr	s14, [r7, #8]
 8014790:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014798:	d813      	bhi.n	80147c2 <mode_decision+0x7e>
					if (main_modeR == 15) {
 801479a:	7bfb      	ldrb	r3, [r7, #15]
 801479c:	2b0f      	cmp	r3, #15
 801479e:	d102      	bne.n	80147a6 <mode_decision+0x62>
						main_modeR = 0;
 80147a0:	2300      	movs	r3, #0
 80147a2:	73fb      	strb	r3, [r7, #15]
 80147a4:	e002      	b.n	80147ac <mode_decision+0x68>
					} else {
						main_modeR++;
 80147a6:	7bfb      	ldrb	r3, [r7, #15]
 80147a8:	3301      	adds	r3, #1
 80147aa:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80147ac:	f7ec fbf6 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80147b0:	7bbb      	ldrb	r3, [r7, #14]
 80147b2:	011b      	lsls	r3, r3, #4
 80147b4:	b2da      	uxtb	r2, r3
 80147b6:	7bfb      	ldrb	r3, [r7, #15]
 80147b8:	4413      	add	r3, r2
 80147ba:	b2db      	uxtb	r3, r3
 80147bc:	4618      	mov	r0, r3
 80147be:	f7f2 fb8d 	bl	8006edc <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 80147c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80147c6:	eeb1 7a67 	vneg.f32	s14, s15
 80147ca:	4b56      	ldr	r3, [pc, #344]	; (8014924 <mode_decision+0x1e0>)
 80147cc:	edd3 7a00 	vldr	s15, [r3]
 80147d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d8:	db13      	blt.n	8014802 <mode_decision+0xbe>
					if (main_modeR == 0) {
 80147da:	7bfb      	ldrb	r3, [r7, #15]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d102      	bne.n	80147e6 <mode_decision+0xa2>
						main_modeR = 15;
 80147e0:	230f      	movs	r3, #15
 80147e2:	73fb      	strb	r3, [r7, #15]
 80147e4:	e002      	b.n	80147ec <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 80147e6:	7bfb      	ldrb	r3, [r7, #15]
 80147e8:	3b01      	subs	r3, #1
 80147ea:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80147ec:	f7ec fbd6 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80147f0:	7bbb      	ldrb	r3, [r7, #14]
 80147f2:	011b      	lsls	r3, r3, #4
 80147f4:	b2da      	uxtb	r2, r3
 80147f6:	7bfb      	ldrb	r3, [r7, #15]
 80147f8:	4413      	add	r3, r2
 80147fa:	b2db      	uxtb	r3, r3
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7f2 fb6d 	bl	8006edc <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8014802:	4b49      	ldr	r3, [pc, #292]	; (8014928 <mode_decision+0x1e4>)
 8014804:	edd3 7a00 	vldr	s15, [r3]
 8014808:	ed97 7a02 	vldr	s14, [r7, #8]
 801480c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014814:	d813      	bhi.n	801483e <mode_decision+0xfa>
					if (main_modeL == 15) {
 8014816:	7bbb      	ldrb	r3, [r7, #14]
 8014818:	2b0f      	cmp	r3, #15
 801481a:	d102      	bne.n	8014822 <mode_decision+0xde>
						main_modeL = 0;
 801481c:	2300      	movs	r3, #0
 801481e:	73bb      	strb	r3, [r7, #14]
 8014820:	e002      	b.n	8014828 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8014822:	7bbb      	ldrb	r3, [r7, #14]
 8014824:	3301      	adds	r3, #1
 8014826:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8014828:	f7ec fbb8 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801482c:	7bbb      	ldrb	r3, [r7, #14]
 801482e:	011b      	lsls	r3, r3, #4
 8014830:	b2da      	uxtb	r2, r3
 8014832:	7bfb      	ldrb	r3, [r7, #15]
 8014834:	4413      	add	r3, r2
 8014836:	b2db      	uxtb	r3, r3
 8014838:	4618      	mov	r0, r3
 801483a:	f7f2 fb4f 	bl	8006edc <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 801483e:	edd7 7a02 	vldr	s15, [r7, #8]
 8014842:	eeb1 7a67 	vneg.f32	s14, s15
 8014846:	4b38      	ldr	r3, [pc, #224]	; (8014928 <mode_decision+0x1e4>)
 8014848:	edd3 7a00 	vldr	s15, [r3]
 801484c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014854:	da00      	bge.n	8014858 <mode_decision+0x114>
 8014856:	e013      	b.n	8014880 <mode_decision+0x13c>
					if (main_modeL == 0) {
 8014858:	7bbb      	ldrb	r3, [r7, #14]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d102      	bne.n	8014864 <mode_decision+0x120>
						main_modeL = 15;
 801485e:	230f      	movs	r3, #15
 8014860:	73bb      	strb	r3, [r7, #14]
 8014862:	e002      	b.n	801486a <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8014864:	7bbb      	ldrb	r3, [r7, #14]
 8014866:	3b01      	subs	r3, #1
 8014868:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801486a:	f7ec fb97 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 801486e:	7bbb      	ldrb	r3, [r7, #14]
 8014870:	011b      	lsls	r3, r3, #4
 8014872:	b2da      	uxtb	r2, r3
 8014874:	7bfb      	ldrb	r3, [r7, #15]
 8014876:	4413      	add	r3, r2
 8014878:	b2db      	uxtb	r3, r3
 801487a:	4618      	mov	r0, r3
 801487c:	f7f2 fb2e 	bl	8006edc <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8014880:	4b2a      	ldr	r3, [pc, #168]	; (801492c <mode_decision+0x1e8>)
 8014882:	edd3 7a00 	vldr	s15, [r3]
 8014886:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8014930 <mode_decision+0x1ec>
 801488a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801488e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014892:	f67f af75 	bls.w	8014780 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8014896:	f7f2 fae7 	bl	8006e68 <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 801489a:	2001      	movs	r0, #1
 801489c:	f7f2 fbce 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80148a0:	2001      	movs	r0, #1
 80148a2:	f7f2 fbdd 	bl	8007060 <pl_l_blue_LED>
			HAL_Delay(1000);
 80148a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80148aa:	f002 ffdb 	bl	8017864 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80148ae:	e011      	b.n	80148d4 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 80148b0:	4b1e      	ldr	r3, [pc, #120]	; (801492c <mode_decision+0x1e8>)
 80148b2:	edd3 7a00 	vldr	s15, [r3]
 80148b6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8014930 <mode_decision+0x1ec>
 80148ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c2:	db04      	blt.n	80148ce <mode_decision+0x18a>
					main_modeL = 0;
 80148c4:	2300      	movs	r3, #0
 80148c6:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 80148c8:	2300      	movs	r3, #0
 80148ca:	73fb      	strb	r3, [r7, #15]
					break;
 80148cc:	e013      	b.n	80148f6 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 80148ce:	2001      	movs	r0, #1
 80148d0:	f002 ffc8 	bl	8017864 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80148d4:	4b17      	ldr	r3, [pc, #92]	; (8014934 <mode_decision+0x1f0>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80148dc:	dde8      	ble.n	80148b0 <mode_decision+0x16c>
 80148de:	4b15      	ldr	r3, [pc, #84]	; (8014934 <mode_decision+0x1f0>)
 80148e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80148e4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80148e8:	dde2      	ble.n	80148b0 <mode_decision+0x16c>
 80148ea:	4b12      	ldr	r3, [pc, #72]	; (8014934 <mode_decision+0x1f0>)
 80148ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80148f0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80148f4:	dddc      	ble.n	80148b0 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 80148f6:	2000      	movs	r0, #0
 80148f8:	f7f2 fba0 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80148fc:	2000      	movs	r0, #0
 80148fe:	f7f2 fbaf 	bl	8007060 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8014902:	f7f2 fab1 	bl	8006e68 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8014906:	7bbb      	ldrb	r3, [r7, #14]
 8014908:	011b      	lsls	r3, r3, #4
 801490a:	b25a      	sxtb	r2, r3
 801490c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014910:	4313      	orrs	r3, r2
 8014912:	b25b      	sxtb	r3, r3
 8014914:	737b      	strb	r3, [r7, #13]

return main_mode;
 8014916:	7b7b      	ldrb	r3, [r7, #13]
}
 8014918:	4618      	mov	r0, r3
 801491a:	3710      	adds	r7, #16
 801491c:	46bd      	mov	sp, r7
 801491e:	bd80      	pop	{r7, pc}
 8014920:	41200000 	.word	0x41200000
 8014924:	20000224 	.word	0x20000224
 8014928:	20000220 	.word	0x20000220
 801492c:	20000270 	.word	0x20000270
 8014930:	43c80000 	.word	0x43c80000
 8014934:	200002b8 	.word	0x200002b8

08014938 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8014938:	b590      	push	{r4, r7, lr}
 801493a:	b0d7      	sub	sp, #348	; 0x15c
 801493c:	af52      	add	r7, sp, #328	; 0x148
 801493e:	4603      	mov	r3, r0
 8014940:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8014942:	2300      	movs	r3, #0
 8014944:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8014946:	2300      	movs	r3, #0
 8014948:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 801494a:	79fb      	ldrb	r3, [r7, #7]
 801494c:	f003 030f 	and.w	r3, r3, #15
 8014950:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8014952:	79fb      	ldrb	r3, [r7, #7]
 8014954:	091b      	lsrs	r3, r3, #4
 8014956:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8014958:	7bbb      	ldrb	r3, [r7, #14]
 801495a:	2b0f      	cmp	r3, #15
 801495c:	d854      	bhi.n	8014a08 <mode_execution+0xd0>
 801495e:	a201      	add	r2, pc, #4	; (adr r2, 8014964 <mode_execution+0x2c>)
 8014960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014964:	080149a5 	.word	0x080149a5
 8014968:	080149af 	.word	0x080149af
 801496c:	08014a07 	.word	0x08014a07
 8014970:	080149b9 	.word	0x080149b9
 8014974:	080149c3 	.word	0x080149c3
 8014978:	080149cd 	.word	0x080149cd
 801497c:	080149fd 	.word	0x080149fd
 8014980:	08014a07 	.word	0x08014a07
 8014984:	08014a07 	.word	0x08014a07
 8014988:	08014a07 	.word	0x08014a07
 801498c:	08014a07 	.word	0x08014a07
 8014990:	08014a07 	.word	0x08014a07
 8014994:	08014a07 	.word	0x08014a07
 8014998:	08014a07 	.word	0x08014a07
 801499c:	08014a07 	.word	0x08014a07
 80149a0:	08014a07 	.word	0x08014a07
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 80149a4:	7bfb      	ldrb	r3, [r7, #15]
 80149a6:	4618      	mov	r0, r3
 80149a8:	f000 f836 	bl	8014a18 <mode_PLtest>
	break;
 80149ac:	e02c      	b.n	8014a08 <mode_execution+0xd0>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 80149ae:	7bfb      	ldrb	r3, [r7, #15]
 80149b0:	4618      	mov	r0, r3
 80149b2:	f000 f9f1 	bl	8014d98 <mode_Running>
	break;
 80149b6:	e027      	b.n	8014a08 <mode_execution+0xd0>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 80149b8:	7bfb      	ldrb	r3, [r7, #15]
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 fb6c 	bl	8015098 <mode_Tuning0>
	break;
 80149c0:	e022      	b.n	8014a08 <mode_execution+0xd0>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 80149c2:	7bfb      	ldrb	r3, [r7, #15]
 80149c4:	4618      	mov	r0, r3
 80149c6:	f000 fe77 	bl	80156b8 <mode_WallSensorTuning>
	break;
 80149ca:	e01d      	b.n	8014a08 <mode_execution+0xd0>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 80149cc:	7bfb      	ldrb	r3, [r7, #15]
 80149ce:	4c10      	ldr	r4, [pc, #64]	; (8014a10 <mode_execution+0xd8>)
 80149d0:	2201      	movs	r2, #1
 80149d2:	9251      	str	r2, [sp, #324]	; 0x144
 80149d4:	2200      	movs	r2, #0
 80149d6:	9250      	str	r2, [sp, #320]	; 0x140
 80149d8:	2201      	movs	r2, #1
 80149da:	924f      	str	r2, [sp, #316]	; 0x13c
 80149dc:	934e      	str	r3, [sp, #312]	; 0x138
 80149de:	4668      	mov	r0, sp
 80149e0:	f104 0310 	add.w	r3, r4, #16
 80149e4:	f44f 729c 	mov.w	r2, #312	; 0x138
 80149e8:	4619      	mov	r1, r3
 80149ea:	f00a fa0d 	bl	801ee08 <memcpy>
 80149ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80149f2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8014a14 <mode_execution+0xdc>
 80149f6:	f7f9 f907 	bl	800dc08 <testturning>
	break;
 80149fa:	e005      	b.n	8014a08 <mode_execution+0xd0>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 80149fc:	7bfb      	ldrb	r3, [r7, #15]
 80149fe:	4618      	mov	r0, r3
 8014a00:	f001 f898 	bl	8015b34 <mode_WallSensorTuning_fast>
	break;
 8014a04:	e000      	b.n	8014a08 <mode_execution+0xd0>
	break;
 8014a06:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8014a08:	bf00      	nop
 8014a0a:	3714      	adds	r7, #20
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd90      	pop	{r4, r7, pc}
 8014a10:	2000df04 	.word	0x2000df04
 8014a14:	3f028f5c 	.word	0x3f028f5c

08014a18 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8014a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014a1c:	b092      	sub	sp, #72	; 0x48
 8014a1e:	af0a      	add	r7, sp, #40	; 0x28
 8014a20:	4603      	mov	r3, r0
 8014a22:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8014a24:	2300      	movs	r3, #0
 8014a26:	61fb      	str	r3, [r7, #28]
 8014a28:	2300      	movs	r3, #0
 8014a2a:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8014a2c:	7dfb      	ldrb	r3, [r7, #23]
 8014a2e:	2b0f      	cmp	r3, #15
 8014a30:	f200 819f 	bhi.w	8014d72 <mode_PLtest+0x35a>
 8014a34:	a201      	add	r2, pc, #4	; (adr r2, 8014a3c <mode_PLtest+0x24>)
 8014a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3a:	bf00      	nop
 8014a3c:	08014d71 	.word	0x08014d71
 8014a40:	08014a7d 	.word	0x08014a7d
 8014a44:	08014aaf 	.word	0x08014aaf
 8014a48:	08014b2b 	.word	0x08014b2b
 8014a4c:	08014b8f 	.word	0x08014b8f
 8014a50:	08014c0f 	.word	0x08014c0f
 8014a54:	08014c15 	.word	0x08014c15
 8014a58:	08014d73 	.word	0x08014d73
 8014a5c:	08014d73 	.word	0x08014d73
 8014a60:	08014c9b 	.word	0x08014c9b
 8014a64:	08014d03 	.word	0x08014d03
 8014a68:	08014d73 	.word	0x08014d73
 8014a6c:	08014d73 	.word	0x08014d73
 8014a70:	08014d73 	.word	0x08014d73
 8014a74:	08014d73 	.word	0x08014d73
 8014a78:	08014d6b 	.word	0x08014d6b
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014a7c:	4bbf      	ldr	r3, [pc, #764]	; (8014d7c <mode_PLtest+0x364>)
 8014a7e:	6819      	ldr	r1, [r3, #0]
 8014a80:	4bbe      	ldr	r3, [pc, #760]	; (8014d7c <mode_PLtest+0x364>)
 8014a82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014a84:	4bbd      	ldr	r3, [pc, #756]	; (8014d7c <mode_PLtest+0x364>)
 8014a86:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8014a8a:	4bbc      	ldr	r3, [pc, #752]	; (8014d7c <mode_PLtest+0x364>)
 8014a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a90:	4aba      	ldr	r2, [pc, #744]	; (8014d7c <mode_PLtest+0x364>)
 8014a92:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8014a96:	9201      	str	r2, [sp, #4]
 8014a98:	9300      	str	r3, [sp, #0]
 8014a9a:	4623      	mov	r3, r4
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	48b8      	ldr	r0, [pc, #736]	; (8014d80 <mode_PLtest+0x368>)
 8014aa0:	f00a fe32 	bl	801f708 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8014aa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014aa8:	f7f3 fa5a 	bl	8007f60 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8014aac:	e7e6      	b.n	8014a7c <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8014aae:	2001      	movs	r0, #1
 8014ab0:	f7f2 fac4 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014ab4:	2001      	movs	r0, #1
 8014ab6:	f7f2 fad3 	bl	8007060 <pl_l_blue_LED>
		record_mode = 1;
 8014aba:	4bb2      	ldr	r3, [pc, #712]	; (8014d84 <mode_PLtest+0x36c>)
 8014abc:	2201      	movs	r2, #1
 8014abe:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8014ac0:	f44f 7161 	mov.w	r1, #900	; 0x384
 8014ac4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8014ac8:	f7f2 ffd0 	bl	8007a6c <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8014acc:	2001      	movs	r0, #1
 8014ace:	f7f2 ff8b 	bl	80079e8 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8014ad2:	2001      	movs	r0, #1
 8014ad4:	f7f2 ff60 	bl	8007998 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8014ad8:	f7f2 ffac 	bl	8007a34 <pl_DriveMotor_start>
		wait_ms(2500);
 8014adc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014ae0:	f7f3 fa3e 	bl	8007f60 <wait_ms>
		pl_DriveMotor_stop();
 8014ae4:	f7f2 ffb4 	bl	8007a50 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014ae8:	2000      	movs	r0, #0
 8014aea:	f7f2 faa7 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014aee:	2000      	movs	r0, #0
 8014af0:	f7f2 fab6 	bl	8007060 <pl_l_blue_LED>
		record_mode = 0;
 8014af4:	4ba3      	ldr	r3, [pc, #652]	; (8014d84 <mode_PLtest+0x36c>)
 8014af6:	2200      	movs	r2, #0
 8014af8:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014afa:	e002      	b.n	8014b02 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014afc:	2001      	movs	r0, #1
 8014afe:	f7f3 fa2f 	bl	8007f60 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b02:	4b9e      	ldr	r3, [pc, #632]	; (8014d7c <mode_PLtest+0x364>)
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b0a:	ddf7      	ble.n	8014afc <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014b0c:	4b9b      	ldr	r3, [pc, #620]	; (8014d7c <mode_PLtest+0x364>)
 8014b0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b12:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b16:	ddf1      	ble.n	8014afc <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014b18:	4b98      	ldr	r3, [pc, #608]	; (8014d7c <mode_PLtest+0x364>)
 8014b1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014b1e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b22:	ddeb      	ble.n	8014afc <mode_PLtest+0xe4>
		}
		record_print();
 8014b24:	f001 fa70 	bl	8016008 <record_print>
		break;
 8014b28:	e123      	b.n	8014d72 <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 8014b2a:	f7ec fdc1 	bl	80016b0 <reset_gyro>
		reset_speed();
 8014b2e:	f7ec fa73 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8014b32:	2001      	movs	r0, #1
 8014b34:	f7f2 fa82 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014b38:	2001      	movs	r0, #1
 8014b3a:	f7f2 fa91 	bl	8007060 <pl_l_blue_LED>
		record_mode = 2;
 8014b3e:	4b91      	ldr	r3, [pc, #580]	; (8014d84 <mode_PLtest+0x36c>)
 8014b40:	2202      	movs	r2, #2
 8014b42:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8014b44:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8014b48:	f7f3 fa0a 	bl	8007f60 <wait_ms>
		pl_r_blue_LED(OFF);
 8014b4c:	2000      	movs	r0, #0
 8014b4e:	f7f2 fa75 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014b52:	2000      	movs	r0, #0
 8014b54:	f7f2 fa84 	bl	8007060 <pl_l_blue_LED>
		record_mode = 0;
 8014b58:	4b8a      	ldr	r3, [pc, #552]	; (8014d84 <mode_PLtest+0x36c>)
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b5e:	e002      	b.n	8014b66 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8014b60:	2001      	movs	r0, #1
 8014b62:	f7f3 f9fd 	bl	8007f60 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8014b66:	4b85      	ldr	r3, [pc, #532]	; (8014d7c <mode_PLtest+0x364>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b6e:	ddf7      	ble.n	8014b60 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8014b70:	4b82      	ldr	r3, [pc, #520]	; (8014d7c <mode_PLtest+0x364>)
 8014b72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b7a:	ddf1      	ble.n	8014b60 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014b7c:	4b7f      	ldr	r3, [pc, #508]	; (8014d7c <mode_PLtest+0x364>)
 8014b7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014b82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014b86:	ddeb      	ble.n	8014b60 <mode_PLtest+0x148>
		}
		record_print();
 8014b88:	f001 fa3e 	bl	8016008 <record_print>
		break;
 8014b8c:	e0f1      	b.n	8014d72 <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014b8e:	4b7e      	ldr	r3, [pc, #504]	; (8014d88 <mode_PLtest+0x370>)
 8014b90:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7eb fd00 	bl	8000598 <__aeabi_f2d>
 8014b98:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014b9c:	4b7a      	ldr	r3, [pc, #488]	; (8014d88 <mode_PLtest+0x370>)
 8014b9e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f7eb fcf9 	bl	8000598 <__aeabi_f2d>
 8014ba6:	4604      	mov	r4, r0
 8014ba8:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014baa:	4b77      	ldr	r3, [pc, #476]	; (8014d88 <mode_PLtest+0x370>)
 8014bac:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bae:	4618      	mov	r0, r3
 8014bb0:	f7eb fcf2 	bl	8000598 <__aeabi_f2d>
 8014bb4:	4680      	mov	r8, r0
 8014bb6:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bb8:	4b73      	ldr	r3, [pc, #460]	; (8014d88 <mode_PLtest+0x370>)
 8014bba:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7eb fceb 	bl	8000598 <__aeabi_f2d>
 8014bc2:	4682      	mov	sl, r0
 8014bc4:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bc6:	4b70      	ldr	r3, [pc, #448]	; (8014d88 <mode_PLtest+0x370>)
 8014bc8:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7eb fce4 	bl	8000598 <__aeabi_f2d>
 8014bd0:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8014bd4:	4b6c      	ldr	r3, [pc, #432]	; (8014d88 <mode_PLtest+0x370>)
 8014bd6:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7eb fcdd 	bl	8000598 <__aeabi_f2d>
 8014bde:	4602      	mov	r2, r0
 8014be0:	460b      	mov	r3, r1
 8014be2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014be6:	ed97 7b00 	vldr	d7, [r7]
 8014bea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014bee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8014bf2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014bf6:	e9cd 4500 	strd	r4, r5, [sp]
 8014bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8014bfe:	4863      	ldr	r0, [pc, #396]	; (8014d8c <mode_PLtest+0x374>)
 8014c00:	f00a fd82 	bl	801f708 <iprintf>
			wait_ms(500);
 8014c04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8014c08:	f7f3 f9aa 	bl	8007f60 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8014c0c:	e7bf      	b.n	8014b8e <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8014c0e:	f7f2 fb65 	bl	80072dc <test_flash>
		break;
 8014c12:	e0ae      	b.n	8014d72 <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 8014c14:	4b5b      	ldr	r3, [pc, #364]	; (8014d84 <mode_PLtest+0x36c>)
 8014c16:	2206      	movs	r2, #6
 8014c18:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8014c1a:	2001      	movs	r0, #1
 8014c1c:	f7f2 fa0e 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8014c20:	2001      	movs	r0, #1
 8014c22:	f7f2 fa1d 	bl	8007060 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8014c26:	f107 0218 	add.w	r2, r7, #24
 8014c2a:	f107 031c 	add.w	r3, r7, #28
 8014c2e:	4611      	mov	r1, r2
 8014c30:	4618      	mov	r0, r3
 8014c32:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8014c36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014c3a:	f7ed f8b7 	bl	8001dac <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	69ba      	ldr	r2, [r7, #24]
 8014c42:	4611      	mov	r1, r2
 8014c44:	4618      	mov	r0, r3
 8014c46:	f7f2 ff11 	bl	8007a6c <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8014c4a:	f7f2 fef3 	bl	8007a34 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014c4e:	e00a      	b.n	8014c66 <mode_PLtest+0x24e>
			wait_ms(1);
 8014c50:	2001      	movs	r0, #1
 8014c52:	f7f3 f985 	bl	8007f60 <wait_ms>
			if(record_rupe_flag==1){
 8014c56:	4b4e      	ldr	r3, [pc, #312]	; (8014d90 <mode_PLtest+0x378>)
 8014c58:	781b      	ldrb	r3, [r3, #0]
 8014c5a:	2b01      	cmp	r3, #1
 8014c5c:	d103      	bne.n	8014c66 <mode_PLtest+0x24e>
				record_mode=0;
 8014c5e:	4b49      	ldr	r3, [pc, #292]	; (8014d84 <mode_PLtest+0x36c>)
 8014c60:	2200      	movs	r2, #0
 8014c62:	701a      	strb	r2, [r3, #0]
				break;
 8014c64:	e010      	b.n	8014c88 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014c66:	4b45      	ldr	r3, [pc, #276]	; (8014d7c <mode_PLtest+0x364>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c6e:	ddef      	ble.n	8014c50 <mode_PLtest+0x238>
 8014c70:	4b42      	ldr	r3, [pc, #264]	; (8014d7c <mode_PLtest+0x364>)
 8014c72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014c76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c7a:	dde9      	ble.n	8014c50 <mode_PLtest+0x238>
 8014c7c:	4b3f      	ldr	r3, [pc, #252]	; (8014d7c <mode_PLtest+0x364>)
 8014c7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014c82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014c86:	dde3      	ble.n	8014c50 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8014c88:	f7f2 fee2 	bl	8007a50 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8014c8c:	2000      	movs	r0, #0
 8014c8e:	f7f2 f9d5 	bl	800703c <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8014c92:	2000      	movs	r0, #0
 8014c94:	f7f2 f9e4 	bl	8007060 <pl_l_blue_LED>

		break;
 8014c98:	e06b      	b.n	8014d72 <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8014c9a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8014c9e:	f7f2 ff0f 	bl	8007ac0 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8014ca2:	f7f2 fef9 	bl	8007a98 <pl_FunMotor_start>
			HAL_Delay(2000);
 8014ca6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014caa:	f002 fddb 	bl	8017864 <HAL_Delay>
			reset_gyro();
 8014cae:	f7ec fcff 	bl	80016b0 <reset_gyro>
			reset_speed();
 8014cb2:	f7ec f9b1 	bl	8001018 <reset_speed>
			clear_Ierror();
 8014cb6:	f7ef fd69 	bl	800478c <clear_Ierror>
			pl_r_blue_LED(ON);
 8014cba:	2001      	movs	r0, #1
 8014cbc:	f7f2 f9be 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014cc0:	2001      	movs	r0, #1
 8014cc2:	f7f2 f9cd 	bl	8007060 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014cc6:	e002      	b.n	8014cce <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8014cc8:	2001      	movs	r0, #1
 8014cca:	f002 fdcb 	bl	8017864 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014cce:	4b2b      	ldr	r3, [pc, #172]	; (8014d7c <mode_PLtest+0x364>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014cd6:	ddf7      	ble.n	8014cc8 <mode_PLtest+0x2b0>
 8014cd8:	4b28      	ldr	r3, [pc, #160]	; (8014d7c <mode_PLtest+0x364>)
 8014cda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014cde:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014ce2:	ddf1      	ble.n	8014cc8 <mode_PLtest+0x2b0>
 8014ce4:	4b25      	ldr	r3, [pc, #148]	; (8014d7c <mode_PLtest+0x364>)
 8014ce6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014cea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014cee:	ddeb      	ble.n	8014cc8 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8014cf0:	2000      	movs	r0, #0
 8014cf2:	f7f2 f9a3 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014cf6:	2000      	movs	r0, #0
 8014cf8:	f7f2 f9b2 	bl	8007060 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8014cfc:	f7f2 fed6 	bl	8007aac <pl_FunMotor_stop>
		break;
 8014d00:	e037      	b.n	8014d72 <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8014d02:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8014d94 <mode_PLtest+0x37c>
 8014d06:	f7f2 fedb 	bl	8007ac0 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8014d0a:	f7f2 fec5 	bl	8007a98 <pl_FunMotor_start>
			HAL_Delay(2000);
 8014d0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8014d12:	f002 fda7 	bl	8017864 <HAL_Delay>
			reset_gyro();
 8014d16:	f7ec fccb 	bl	80016b0 <reset_gyro>
			reset_speed();
 8014d1a:	f7ec f97d 	bl	8001018 <reset_speed>
			clear_Ierror();
 8014d1e:	f7ef fd35 	bl	800478c <clear_Ierror>
			pl_r_blue_LED(ON);
 8014d22:	2001      	movs	r0, #1
 8014d24:	f7f2 f98a 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8014d28:	2001      	movs	r0, #1
 8014d2a:	f7f2 f999 	bl	8007060 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014d2e:	e002      	b.n	8014d36 <mode_PLtest+0x31e>
				HAL_Delay(1);
 8014d30:	2001      	movs	r0, #1
 8014d32:	f002 fd97 	bl	8017864 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8014d36:	4b11      	ldr	r3, [pc, #68]	; (8014d7c <mode_PLtest+0x364>)
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d3e:	ddf7      	ble.n	8014d30 <mode_PLtest+0x318>
 8014d40:	4b0e      	ldr	r3, [pc, #56]	; (8014d7c <mode_PLtest+0x364>)
 8014d42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014d46:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d4a:	ddf1      	ble.n	8014d30 <mode_PLtest+0x318>
 8014d4c:	4b0b      	ldr	r3, [pc, #44]	; (8014d7c <mode_PLtest+0x364>)
 8014d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8014d52:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8014d56:	ddeb      	ble.n	8014d30 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8014d58:	2000      	movs	r0, #0
 8014d5a:	f7f2 f96f 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8014d5e:	2000      	movs	r0, #0
 8014d60:	f7f2 f97e 	bl	8007060 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8014d64:	f7f2 fea2 	bl	8007aac <pl_FunMotor_stop>
		break;
 8014d68:	e003      	b.n	8014d72 <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 8014d6a:	f001 f94d 	bl	8016008 <record_print>
		break;
 8014d6e:	e000      	b.n	8014d72 <mode_PLtest+0x35a>
		break;
 8014d70:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 8014d72:	bf00      	nop
 8014d74:	3720      	adds	r7, #32
 8014d76:	46bd      	mov	sp, r7
 8014d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014d7c:	200002b8 	.word	0x200002b8
 8014d80:	08022078 	.word	0x08022078
 8014d84:	2000d96c 	.word	0x2000d96c
 8014d88:	200006e4 	.word	0x200006e4
 8014d8c:	080220a4 	.word	0x080220a4
 8014d90:	2000d978 	.word	0x2000d978
 8014d94:	3f7d70a4 	.word	0x3f7d70a4

08014d98 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8014d98:	b5b0      	push	{r4, r5, r7, lr}
 8014d9a:	b0da      	sub	sp, #360	; 0x168
 8014d9c:	af54      	add	r7, sp, #336	; 0x150
 8014d9e:	4603      	mov	r3, r0
 8014da0:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8014da2:	2003      	movs	r0, #3
 8014da4:	f7f2 fdf8 	bl	8007998 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8014da8:	2003      	movs	r0, #3
 8014daa:	f7f2 fe1d 	bl	80079e8 <pl_R_DriveMotor_mode>
	reset_gyro();
 8014dae:	f7ec fc7f 	bl	80016b0 <reset_gyro>
	reset_speed();
 8014db2:	f7ec f931 	bl	8001018 <reset_speed>
	reset_distance();
 8014db6:	f7ec f8f1 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8014dba:	f7ef fce7 	bl	800478c <clear_Ierror>
	switch (main_modeR) {
 8014dbe:	79fb      	ldrb	r3, [r7, #7]
 8014dc0:	2b0f      	cmp	r3, #15
 8014dc2:	f200 8147 	bhi.w	8015054 <mode_Running+0x2bc>
 8014dc6:	a201      	add	r2, pc, #4	; (adr r2, 8014dcc <mode_Running+0x34>)
 8014dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014dcc:	08014e0d 	.word	0x08014e0d
 8014dd0:	08014eb9 	.word	0x08014eb9
 8014dd4:	08014ef1 	.word	0x08014ef1
 8014dd8:	08014ef7 	.word	0x08014ef7
 8014ddc:	08014f2f 	.word	0x08014f2f
 8014de0:	08014f61 	.word	0x08014f61
 8014de4:	08014f93 	.word	0x08014f93
 8014de8:	08014fc5 	.word	0x08014fc5
 8014dec:	08014ff7 	.word	0x08014ff7
 8014df0:	08014ffd 	.word	0x08014ffd
 8014df4:	08015003 	.word	0x08015003
 8014df8:	08015009 	.word	0x08015009
 8014dfc:	0801500f 	.word	0x0801500f
 8014e00:	08015015 	.word	0x08015015
 8014e04:	0801501b 	.word	0x0801501b
 8014e08:	08015021 	.word	0x08015021
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 8014e0c:	f7fe fef0 	bl	8013bf0 <create_StepCountMap_queue>
			maze_display();
 8014e10:	f7ff fa92 	bl	8014338 <maze_display>

			create_DijkstraMap();
 8014e14:	f7fc fb1c 	bl	8011450 <create_DijkstraMap>
			maze_display_Dijkstra();
 8014e18:	f7ff fbac 	bl	8014574 <maze_display_Dijkstra>

			route_Dijkstra();
 8014e1c:	f7fe f846 	bl	8012eac <route_Dijkstra>
			create_StepCountMap_unknown();
 8014e20:	f7fe fd1a 	bl	8013858 <create_StepCountMap_unknown>
			maze_display();
 8014e24:	f7ff fa88 	bl	8014338 <maze_display>

			tic_timer();
 8014e28:	f7f3 f86c 	bl	8007f04 <tic_timer>
			for(int j=0;j<5000;j++){
 8014e2c:	2300      	movs	r3, #0
 8014e2e:	617b      	str	r3, [r7, #20]
 8014e30:	e004      	b.n	8014e3c <mode_Running+0xa4>
			create_StepCountMap_queue();
 8014e32:	f7fe fedd 	bl	8013bf0 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 8014e36:	697b      	ldr	r3, [r7, #20]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	617b      	str	r3, [r7, #20]
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8014e42:	4293      	cmp	r3, r2
 8014e44:	ddf5      	ble.n	8014e32 <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 8014e46:	f7f3 f86f 	bl	8007f28 <toc_timer>
 8014e4a:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 8014e4e:	f7ff fa73 	bl	8014338 <maze_display>
			printf("tim2=%f\n", tim2);
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f7eb fba0 	bl	8000598 <__aeabi_f2d>
 8014e58:	4602      	mov	r2, r0
 8014e5a:	460b      	mov	r3, r1
 8014e5c:	487f      	ldr	r0, [pc, #508]	; (801505c <mode_Running+0x2c4>)
 8014e5e:	f00a fc53 	bl	801f708 <iprintf>
			tic_timer();
 8014e62:	f7f3 f84f 	bl	8007f04 <tic_timer>
			for(int j=0;j<5000;j++){
 8014e66:	2300      	movs	r3, #0
 8014e68:	613b      	str	r3, [r7, #16]
 8014e6a:	e006      	b.n	8014e7a <mode_Running+0xe2>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 8014e6c:	f7fe f81e 	bl	8012eac <route_Dijkstra>
			create_StepCountMap_unknown();
 8014e70:	f7fe fcf2 	bl	8013858 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8014e74:	693b      	ldr	r3, [r7, #16]
 8014e76:	3301      	adds	r3, #1
 8014e78:	613b      	str	r3, [r7, #16]
 8014e7a:	693b      	ldr	r3, [r7, #16]
 8014e7c:	f241 3287 	movw	r2, #4999	; 0x1387
 8014e80:	4293      	cmp	r3, r2
 8014e82:	ddf3      	ble.n	8014e6c <mode_Running+0xd4>

			}
			float tim1 = toc_timer();
 8014e84:	f7f3 f850 	bl	8007f28 <toc_timer>
 8014e88:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8014e8c:	f7ff fa54 	bl	8014338 <maze_display>
			maze_display_Dijkstra();
 8014e90:	f7ff fb70 	bl	8014574 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8014e94:	68b8      	ldr	r0, [r7, #8]
 8014e96:	f7eb fb7f 	bl	8000598 <__aeabi_f2d>
 8014e9a:	4604      	mov	r4, r0
 8014e9c:	460d      	mov	r5, r1
 8014e9e:	68f8      	ldr	r0, [r7, #12]
 8014ea0:	f7eb fb7a 	bl	8000598 <__aeabi_f2d>
 8014ea4:	4602      	mov	r2, r0
 8014ea6:	460b      	mov	r3, r1
 8014ea8:	e9cd 2300 	strd	r2, r3, [sp]
 8014eac:	4622      	mov	r2, r4
 8014eae:	462b      	mov	r3, r5
 8014eb0:	486b      	ldr	r0, [pc, #428]	; (8015060 <mode_Running+0x2c8>)
 8014eb2:	f00a fc29 	bl	801f708 <iprintf>
		break;
 8014eb6:	e0cd      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0001://足立法(遅い)
			tic_timer();
 8014eb8:	f7f3 f824 	bl	8007f04 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8014ebc:	4c69      	ldr	r4, [pc, #420]	; (8015064 <mode_Running+0x2cc>)
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	934f      	str	r3, [sp, #316]	; 0x13c
 8014ec2:	2301      	movs	r3, #1
 8014ec4:	934e      	str	r3, [sp, #312]	; 0x138
 8014ec6:	4668      	mov	r0, sp
 8014ec8:	f104 0310 	add.w	r3, r4, #16
 8014ecc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014ed0:	4619      	mov	r1, r3
 8014ed2:	f009 ff99 	bl	801ee08 <memcpy>
 8014ed6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014eda:	eddf 1a63 	vldr	s3, [pc, #396]	; 8015068 <mode_Running+0x2d0>
 8014ede:	ed9f 1a63 	vldr	s2, [pc, #396]	; 801506c <mode_Running+0x2d4>
 8014ee2:	eddf 0a63 	vldr	s1, [pc, #396]	; 8015070 <mode_Running+0x2d8>
 8014ee6:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8015074 <mode_Running+0x2dc>
 8014eea:	f7f9 f847 	bl	800df7c <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8014eee:	e0b1      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0010://Flashから
			record_out();
 8014ef0:	f7f2 fb12 	bl	8007518 <record_out>
		break;
 8014ef4:	e0ae      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0011://ゴミ
			tic_timer();
 8014ef6:	f7f3 f805 	bl	8007f04 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8014efa:	4c5a      	ldr	r4, [pc, #360]	; (8015064 <mode_Running+0x2cc>)
 8014efc:	2301      	movs	r3, #1
 8014efe:	934f      	str	r3, [sp, #316]	; 0x13c
 8014f00:	2301      	movs	r3, #1
 8014f02:	934e      	str	r3, [sp, #312]	; 0x138
 8014f04:	4668      	mov	r0, sp
 8014f06:	f104 0310 	add.w	r3, r4, #16
 8014f0a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014f0e:	4619      	mov	r1, r3
 8014f10:	f009 ff7a 	bl	801ee08 <memcpy>
 8014f14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8014f18:	eddf 1a53 	vldr	s3, [pc, #332]	; 8015068 <mode_Running+0x2d0>
 8014f1c:	ed9f 1a53 	vldr	s2, [pc, #332]	; 801506c <mode_Running+0x2d4>
 8014f20:	eddf 0a53 	vldr	s1, [pc, #332]	; 8015070 <mode_Running+0x2d8>
 8014f24:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8015074 <mode_Running+0x2dc>
 8014f28:	f7f9 f828 	bl	800df7c <AdatiWayReturn>
		break;
 8014f2c:	e092      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0100://ゴミ
			record_out();
 8014f2e:	f7f2 faf3 	bl	8007518 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8014f32:	2300      	movs	r3, #0
 8014f34:	9352      	str	r3, [sp, #328]	; 0x148
 8014f36:	4a50      	ldr	r2, [pc, #320]	; (8015078 <mode_Running+0x2e0>)
 8014f38:	466b      	mov	r3, sp
 8014f3a:	4611      	mov	r1, r2
 8014f3c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014f40:	4618      	mov	r0, r3
 8014f42:	f009 ff61 	bl	801ee08 <memcpy>
 8014f46:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 801507c <mode_Running+0x2e4>
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	2100      	movs	r1, #0
 8014f50:	2000      	movs	r0, #0
 8014f52:	eddf 0a45 	vldr	s1, [pc, #276]	; 8015068 <mode_Running+0x2d0>
 8014f56:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8015080 <mode_Running+0x2e8>
 8014f5a:	f7f9 ffb5 	bl	800eec8 <run_shortest>
		break;
 8014f5e:	e079      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0101://
			record_out();
 8014f60:	f7f2 fada 	bl	8007518 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8014f64:	2301      	movs	r3, #1
 8014f66:	9352      	str	r3, [sp, #328]	; 0x148
 8014f68:	4a46      	ldr	r2, [pc, #280]	; (8015084 <mode_Running+0x2ec>)
 8014f6a:	466b      	mov	r3, sp
 8014f6c:	4611      	mov	r1, r2
 8014f6e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014f72:	4618      	mov	r0, r3
 8014f74:	f009 ff48 	bl	801ee08 <memcpy>
 8014f78:	ed9f 1a40 	vldr	s2, [pc, #256]	; 801507c <mode_Running+0x2e4>
 8014f7c:	2300      	movs	r3, #0
 8014f7e:	2200      	movs	r2, #0
 8014f80:	2101      	movs	r1, #1
 8014f82:	2000      	movs	r0, #0
 8014f84:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015068 <mode_Running+0x2d0>
 8014f88:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8015080 <mode_Running+0x2e8>
 8014f8c:	f7f9 ff9c 	bl	800eec8 <run_shortest>
		break;
 8014f90:	e060      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8014f92:	f7f2 fac1 	bl	8007518 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 8014f96:	2301      	movs	r3, #1
 8014f98:	9352      	str	r3, [sp, #328]	; 0x148
 8014f9a:	4a3a      	ldr	r2, [pc, #232]	; (8015084 <mode_Running+0x2ec>)
 8014f9c:	466b      	mov	r3, sp
 8014f9e:	4611      	mov	r1, r2
 8014fa0:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f009 ff2f 	bl	801ee08 <memcpy>
 8014faa:	ed9f 1a34 	vldr	s2, [pc, #208]	; 801507c <mode_Running+0x2e4>
 8014fae:	2301      	movs	r3, #1
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	2101      	movs	r1, #1
 8014fb4:	2000      	movs	r0, #0
 8014fb6:	eddf 0a2c 	vldr	s1, [pc, #176]	; 8015068 <mode_Running+0x2d0>
 8014fba:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8015080 <mode_Running+0x2e8>
 8014fbe:	f7f9 ff83 	bl	800eec8 <run_shortest>
		break;
 8014fc2:	e047      	b.n	8015054 <mode_Running+0x2bc>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8014fc4:	f7f2 faa8 	bl	8007518 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed600_shortest_mollifier,0.99,1);
 8014fc8:	2301      	movs	r3, #1
 8014fca:	9352      	str	r3, [sp, #328]	; 0x148
 8014fcc:	4a2d      	ldr	r2, [pc, #180]	; (8015084 <mode_Running+0x2ec>)
 8014fce:	466b      	mov	r3, sp
 8014fd0:	4611      	mov	r1, r2
 8014fd2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f009 ff16 	bl	801ee08 <memcpy>
 8014fdc:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8015088 <mode_Running+0x2f0>
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	2201      	movs	r2, #1
 8014fe4:	2101      	movs	r1, #1
 8014fe6:	2000      	movs	r0, #0
 8014fe8:	eddf 0a28 	vldr	s1, [pc, #160]	; 801508c <mode_Running+0x2f4>
 8014fec:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8015068 <mode_Running+0x2d0>
 8014ff0:	f7f9 ff6a 	bl	800eec8 <run_shortest>
		break;
 8014ff4:	e02e      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1000://
			record_out();
 8014ff6:	f7f2 fa8f 	bl	8007518 <record_out>
			//run_shortest(2000,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed500_shortest,0.3,0);
		break;
 8014ffa:	e02b      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1001:
			record_out();
 8014ffc:	f7f2 fa8c 	bl	8007518 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015000:	e028      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1010:
			record_out();
 8015002:	f7f2 fa89 	bl	8007518 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015006:	e025      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1011:
			record_out();
 8015008:	f7f2 fa86 	bl	8007518 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 801500c:	e022      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1100:
			record_out();
 801500e:	f7f2 fa83 	bl	8007518 <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015012:	e01f      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1101:
			record_out();
 8015014:	f7f2 fa80 	bl	8007518 <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015018:	e01c      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1110:
			record_out();
 801501a:	f7f2 fa7d 	bl	8007518 <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 801501e:	e019      	b.n	8015054 <mode_Running+0x2bc>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015020:	4c1b      	ldr	r4, [pc, #108]	; (8015090 <mode_Running+0x2f8>)
 8015022:	2300      	movs	r3, #0
 8015024:	934f      	str	r3, [sp, #316]	; 0x13c
 8015026:	2301      	movs	r3, #1
 8015028:	934e      	str	r3, [sp, #312]	; 0x138
 801502a:	4668      	mov	r0, sp
 801502c:	f104 0310 	add.w	r3, r4, #16
 8015030:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015034:	4619      	mov	r1, r3
 8015036:	f009 fee7 	bl	801ee08 <memcpy>
 801503a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801503e:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015068 <mode_Running+0x2d0>
 8015042:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801506c <mode_Running+0x2d4>
 8015046:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015070 <mode_Running+0x2d8>
 801504a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8015094 <mode_Running+0x2fc>
 801504e:	f7f8 ff95 	bl	800df7c <AdatiWayReturn>
		break;
 8015052:	bf00      	nop
	}


}
 8015054:	bf00      	nop
 8015056:	3718      	adds	r7, #24
 8015058:	46bd      	mov	sp, r7
 801505a:	bdb0      	pop	{r4, r5, r7, pc}
 801505c:	080220f0 	.word	0x080220f0
 8015060:	080220fc 	.word	0x080220fc
 8015064:	2000db2c 	.word	0x2000db2c
 8015068:	453b8000 	.word	0x453b8000
 801506c:	44fa0000 	.word	0x44fa0000
 8015070:	43c80000 	.word	0x43c80000
 8015074:	43960000 	.word	0x43960000
 8015078:	2000ddbc 	.word	0x2000ddbc
 801507c:	3e99999a 	.word	0x3e99999a
 8015080:	447a0000 	.word	0x447a0000
 8015084:	2000df04 	.word	0x2000df04
 8015088:	3f7d70a4 	.word	0x3f7d70a4
 801508c:	461c4000 	.word	0x461c4000
 8015090:	2000dc74 	.word	0x2000dc74
 8015094:	437a0000 	.word	0x437a0000

08015098 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015098:	b590      	push	{r4, r7, lr}
 801509a:	b0db      	sub	sp, #364	; 0x16c
 801509c:	af52      	add	r7, sp, #328	; 0x148
 801509e:	4603      	mov	r3, r0
 80150a0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 80150a2:	2300      	movs	r3, #0
 80150a4:	60fb      	str	r3, [r7, #12]
 80150a6:	2300      	movs	r3, #0
 80150a8:	60bb      	str	r3, [r7, #8]
	mode.WallControlMode=0;
 80150aa:	2300      	movs	r3, #0
 80150ac:	743b      	strb	r3, [r7, #16]
	mode.WallControlStatus=0;
 80150ae:	2300      	movs	r3, #0
 80150b0:	747b      	strb	r3, [r7, #17]
	mode.WallCutMode=0;
 80150b2:	2300      	movs	r3, #0
 80150b4:	74fb      	strb	r3, [r7, #19]
	mode.calMazeMode=0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	74bb      	strb	r3, [r7, #18]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80150ba:	2003      	movs	r0, #3
 80150bc:	f7f2 fc6c 	bl	8007998 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80150c0:	2003      	movs	r0, #3
 80150c2:	f7f2 fc91 	bl	80079e8 <pl_R_DriveMotor_mode>
	reset_gyro();
 80150c6:	f7ec faf3 	bl	80016b0 <reset_gyro>
	reset_speed();
 80150ca:	f7eb ffa5 	bl	8001018 <reset_speed>
	reset_distance();
 80150ce:	f7eb ff65 	bl	8000f9c <reset_distance>
	clear_Ierror();
 80150d2:	f7ef fb5b 	bl	800478c <clear_Ierror>

	switch (main_modeR) {
 80150d6:	79fb      	ldrb	r3, [r7, #7]
 80150d8:	2b0f      	cmp	r3, #15
 80150da:	f200 8294 	bhi.w	8015606 <mode_Tuning0+0x56e>
 80150de:	a201      	add	r2, pc, #4	; (adr r2, 80150e4 <mode_Tuning0+0x4c>)
 80150e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150e4:	08015125 	.word	0x08015125
 80150e8:	080151af 	.word	0x080151af
 80150ec:	080151d5 	.word	0x080151d5
 80150f0:	080151fb 	.word	0x080151fb
 80150f4:	0801522b 	.word	0x0801522b
 80150f8:	0801525b 	.word	0x0801525b
 80150fc:	08015281 	.word	0x08015281
 8015100:	080152a7 	.word	0x080152a7
 8015104:	080152cd 	.word	0x080152cd
 8015108:	080152f1 	.word	0x080152f1
 801510c:	08015371 	.word	0x08015371
 8015110:	080153f7 	.word	0x080153f7
 8015114:	0801541d 	.word	0x0801541d
 8015118:	080154bd 	.word	0x080154bd
 801511c:	08015589 	.word	0x08015589
 8015120:	080155bb 	.word	0x080155bb
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015124:	4bca      	ldr	r3, [pc, #808]	; (8015450 <mode_Tuning0+0x3b8>)
 8015126:	2203      	movs	r2, #3
 8015128:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801512a:	2300      	movs	r3, #0
 801512c:	743b      	strb	r3, [r7, #16]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 801512e:	6938      	ldr	r0, [r7, #16]
 8015130:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 8015454 <mode_Tuning0+0x3bc>
 8015134:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8015458 <mode_Tuning0+0x3c0>
 8015138:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 801545c <mode_Tuning0+0x3c4>
 801513c:	eddf 0ac7 	vldr	s1, [pc, #796]	; 801545c <mode_Tuning0+0x3c4>
 8015140:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8015460 <mode_Tuning0+0x3c8>
 8015144:	f7ed ff06 	bl	8002f54 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015148:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 8015464 <mode_Tuning0+0x3cc>
 801514c:	eddf 1ac6 	vldr	s3, [pc, #792]	; 8015468 <mode_Tuning0+0x3d0>
 8015150:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 801545c <mode_Tuning0+0x3c4>
 8015154:	eddf 0ac1 	vldr	s1, [pc, #772]	; 801545c <mode_Tuning0+0x3c4>
 8015158:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 801546c <mode_Tuning0+0x3d4>
 801515c:	f7ee fc08 	bl	8003970 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015160:	6938      	ldr	r0, [r7, #16]
 8015162:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 8015470 <mode_Tuning0+0x3d8>
 8015166:	eddf 1ac3 	vldr	s3, [pc, #780]	; 8015474 <mode_Tuning0+0x3dc>
 801516a:	ed9f 1abc 	vldr	s2, [pc, #752]	; 801545c <mode_Tuning0+0x3c4>
 801516e:	eddf 0abb 	vldr	s1, [pc, #748]	; 801545c <mode_Tuning0+0x3c4>
 8015172:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8015460 <mode_Tuning0+0x3c8>
 8015176:	f7ed feed 	bl	8002f54 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 801517a:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8015464 <mode_Tuning0+0x3cc>
 801517e:	eddf 1aba 	vldr	s3, [pc, #744]	; 8015468 <mode_Tuning0+0x3d0>
 8015182:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 801545c <mode_Tuning0+0x3c4>
 8015186:	eddf 0ab5 	vldr	s1, [pc, #724]	; 801545c <mode_Tuning0+0x3c4>
 801518a:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 801546c <mode_Tuning0+0x3d4>
 801518e:	f7ee fbef 	bl	8003970 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015192:	6938      	ldr	r0, [r7, #16]
 8015194:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8015478 <mode_Tuning0+0x3e0>
 8015198:	eddf 1ab8 	vldr	s3, [pc, #736]	; 801547c <mode_Tuning0+0x3e4>
 801519c:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 801545c <mode_Tuning0+0x3c4>
 80151a0:	eddf 0aae 	vldr	s1, [pc, #696]	; 801545c <mode_Tuning0+0x3c4>
 80151a4:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8015460 <mode_Tuning0+0x3c8>
 80151a8:	f7ed fed4 	bl	8002f54 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 80151ac:	e22b      	b.n	8015606 <mode_Tuning0+0x56e>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 80151ae:	4ba8      	ldr	r3, [pc, #672]	; (8015450 <mode_Tuning0+0x3b8>)
 80151b0:	2205      	movs	r2, #5
 80151b2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80151b4:	2300      	movs	r3, #0
 80151b6:	743b      	strb	r3, [r7, #16]
			straight_table2(400, 0, 0, 400, 3000,mode);
 80151b8:	6938      	ldr	r0, [r7, #16]
 80151ba:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015480 <mode_Tuning0+0x3e8>
 80151be:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8015468 <mode_Tuning0+0x3d0>
 80151c2:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 801545c <mode_Tuning0+0x3c4>
 80151c6:	eddf 0aa5 	vldr	s1, [pc, #660]	; 801545c <mode_Tuning0+0x3c4>
 80151ca:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8015468 <mode_Tuning0+0x3d0>
 80151ce:	f7ed fec1 	bl	8002f54 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 80151d2:	e218      	b.n	8015606 <mode_Tuning0+0x56e>
		case 2://壁制御
			record_mode=6;
 80151d4:	4b9e      	ldr	r3, [pc, #632]	; (8015450 <mode_Tuning0+0x3b8>)
 80151d6:	2206      	movs	r2, #6
 80151d8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80151da:	2301      	movs	r3, #1
 80151dc:	743b      	strb	r3, [r7, #16]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 80151de:	6938      	ldr	r0, [r7, #16]
 80151e0:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 8015484 <mode_Tuning0+0x3ec>
 80151e4:	eddf 1aa8 	vldr	s3, [pc, #672]	; 8015488 <mode_Tuning0+0x3f0>
 80151e8:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 801545c <mode_Tuning0+0x3c4>
 80151ec:	eddf 0a9b 	vldr	s1, [pc, #620]	; 801545c <mode_Tuning0+0x3c4>
 80151f0:	ed9f 0aa6 	vldr	s0, [pc, #664]	; 801548c <mode_Tuning0+0x3f4>
 80151f4:	f7ed feae 	bl	8002f54 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 80151f8:	e205      	b.n	8015606 <mode_Tuning0+0x56e>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 80151fa:	4ca5      	ldr	r4, [pc, #660]	; (8015490 <mode_Tuning0+0x3f8>)
 80151fc:	2300      	movs	r3, #0
 80151fe:	9351      	str	r3, [sp, #324]	; 0x144
 8015200:	2300      	movs	r3, #0
 8015202:	9350      	str	r3, [sp, #320]	; 0x140
 8015204:	2300      	movs	r3, #0
 8015206:	934f      	str	r3, [sp, #316]	; 0x13c
 8015208:	2300      	movs	r3, #0
 801520a:	934e      	str	r3, [sp, #312]	; 0x138
 801520c:	4668      	mov	r0, sp
 801520e:	f104 0310 	add.w	r3, r4, #16
 8015212:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015216:	4619      	mov	r1, r3
 8015218:	f009 fdf6 	bl	801ee08 <memcpy>
 801521c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015220:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 801545c <mode_Tuning0+0x3c4>
 8015224:	f7f8 fcf0 	bl	800dc08 <testturning>
		break;
 8015228:	e1ed      	b.n	8015606 <mode_Tuning0+0x56e>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 801522a:	4c99      	ldr	r4, [pc, #612]	; (8015490 <mode_Tuning0+0x3f8>)
 801522c:	2300      	movs	r3, #0
 801522e:	9351      	str	r3, [sp, #324]	; 0x144
 8015230:	2300      	movs	r3, #0
 8015232:	9350      	str	r3, [sp, #320]	; 0x140
 8015234:	2300      	movs	r3, #0
 8015236:	934f      	str	r3, [sp, #316]	; 0x13c
 8015238:	2301      	movs	r3, #1
 801523a:	934e      	str	r3, [sp, #312]	; 0x138
 801523c:	4668      	mov	r0, sp
 801523e:	f104 0310 	add.w	r3, r4, #16
 8015242:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015246:	4619      	mov	r1, r3
 8015248:	f009 fdde 	bl	801ee08 <memcpy>
 801524c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015250:	ed9f 0a82 	vldr	s0, [pc, #520]	; 801545c <mode_Tuning0+0x3c4>
 8015254:	f7f8 fcd8 	bl	800dc08 <testturning>
		break;
 8015258:	e1d5      	b.n	8015606 <mode_Tuning0+0x56e>
		case 5://直進(制御なし)
			record_mode=7;
 801525a:	4b7d      	ldr	r3, [pc, #500]	; (8015450 <mode_Tuning0+0x3b8>)
 801525c:	2207      	movs	r2, #7
 801525e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015260:	2300      	movs	r3, #0
 8015262:	743b      	strb	r3, [r7, #16]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015264:	6938      	ldr	r0, [r7, #16]
 8015266:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015484 <mode_Tuning0+0x3ec>
 801526a:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015488 <mode_Tuning0+0x3f0>
 801526e:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 801545c <mode_Tuning0+0x3c4>
 8015272:	eddf 0a7a 	vldr	s1, [pc, #488]	; 801545c <mode_Tuning0+0x3c4>
 8015276:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801546c <mode_Tuning0+0x3d4>
 801527a:	f7ed fe6b 	bl	8002f54 <straight_table2>
		break;
 801527e:	e1c2      	b.n	8015606 <mode_Tuning0+0x56e>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015280:	4b73      	ldr	r3, [pc, #460]	; (8015450 <mode_Tuning0+0x3b8>)
 8015282:	2207      	movs	r2, #7
 8015284:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015286:	2300      	movs	r3, #0
 8015288:	743b      	strb	r3, [r7, #16]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 801528a:	6938      	ldr	r0, [r7, #16]
 801528c:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8015484 <mode_Tuning0+0x3ec>
 8015290:	eddf 1a80 	vldr	s3, [pc, #512]	; 8015494 <mode_Tuning0+0x3fc>
 8015294:	ed9f 1a71 	vldr	s2, [pc, #452]	; 801545c <mode_Tuning0+0x3c4>
 8015298:	eddf 0a70 	vldr	s1, [pc, #448]	; 801545c <mode_Tuning0+0x3c4>
 801529c:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8015498 <mode_Tuning0+0x400>
 80152a0:	f7ed fe58 	bl	8002f54 <straight_table2>
		break;
 80152a4:	e1af      	b.n	8015606 <mode_Tuning0+0x56e>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 80152a6:	4b6a      	ldr	r3, [pc, #424]	; (8015450 <mode_Tuning0+0x3b8>)
 80152a8:	2207      	movs	r2, #7
 80152aa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80152ac:	2303      	movs	r3, #3
 80152ae:	743b      	strb	r3, [r7, #16]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 80152b0:	6938      	ldr	r0, [r7, #16]
 80152b2:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8015484 <mode_Tuning0+0x3ec>
 80152b6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8015474 <mode_Tuning0+0x3dc>
 80152ba:	ed9f 1a68 	vldr	s2, [pc, #416]	; 801545c <mode_Tuning0+0x3c4>
 80152be:	eddf 0a67 	vldr	s1, [pc, #412]	; 801545c <mode_Tuning0+0x3c4>
 80152c2:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8015498 <mode_Tuning0+0x400>
 80152c6:	f7ed fe45 	bl	8002f54 <straight_table2>
		break;
 80152ca:	e19c      	b.n	8015606 <mode_Tuning0+0x56e>
		case 8://宴会芸
			record_mode=2;
 80152cc:	4b60      	ldr	r3, [pc, #384]	; (8015450 <mode_Tuning0+0x3b8>)
 80152ce:	2202      	movs	r2, #2
 80152d0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80152d2:	2001      	movs	r0, #1
 80152d4:	f7f1 feb2 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80152d8:	2001      	movs	r0, #1
 80152da:	f7f1 fec1 	bl	8007060 <pl_l_blue_LED>
			no_angle();
 80152de:	f7ee fd5b 	bl	8003d98 <no_angle>
			pl_r_blue_LED(OFF);
 80152e2:	2000      	movs	r0, #0
 80152e4:	f7f1 feaa 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80152e8:	2000      	movs	r0, #0
 80152ea:	f7f1 feb9 	bl	8007060 <pl_l_blue_LED>
		break;
 80152ee:	e18a      	b.n	8015606 <mode_Tuning0+0x56e>
		case 9://システム同定enc
			record_mode=6;
 80152f0:	4b57      	ldr	r3, [pc, #348]	; (8015450 <mode_Tuning0+0x3b8>)
 80152f2:	2206      	movs	r2, #6
 80152f4:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80152f6:	2001      	movs	r0, #1
 80152f8:	f7f1 fea0 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80152fc:	2001      	movs	r0, #1
 80152fe:	f7f1 feaf 	bl	8007060 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 8015302:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8015494 <mode_Tuning0+0x3fc>
 8015306:	eddf 1a60 	vldr	s3, [pc, #384]	; 8015488 <mode_Tuning0+0x3f0>
 801530a:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8015488 <mode_Tuning0+0x3f0>
 801530e:	eddf 0a53 	vldr	s1, [pc, #332]	; 801545c <mode_Tuning0+0x3c4>
 8015312:	ed9f 0a62 	vldr	s0, [pc, #392]	; 801549c <mode_Tuning0+0x404>
 8015316:	f7ee fe6f 	bl	8003ff8 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 801531a:	ed9f 2a61 	vldr	s4, [pc, #388]	; 80154a0 <mode_Tuning0+0x408>
 801531e:	eddf 1a61 	vldr	s3, [pc, #388]	; 80154a4 <mode_Tuning0+0x40c>
 8015322:	ed9f 1a60 	vldr	s2, [pc, #384]	; 80154a4 <mode_Tuning0+0x40c>
 8015326:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015488 <mode_Tuning0+0x3f0>
 801532a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801549c <mode_Tuning0+0x404>
 801532e:	f7ee fe63 	bl	8003ff8 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 8015332:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 80154a0 <mode_Tuning0+0x408>
 8015336:	eddf 1a5b 	vldr	s3, [pc, #364]	; 80154a4 <mode_Tuning0+0x40c>
 801533a:	ed9f 1a53 	vldr	s2, [pc, #332]	; 8015488 <mode_Tuning0+0x3f0>
 801533e:	eddf 0a59 	vldr	s1, [pc, #356]	; 80154a4 <mode_Tuning0+0x40c>
 8015342:	ed9f 0a56 	vldr	s0, [pc, #344]	; 801549c <mode_Tuning0+0x404>
 8015346:	f7ee fe57 	bl	8003ff8 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 801534a:	ed9f 2a52 	vldr	s4, [pc, #328]	; 8015494 <mode_Tuning0+0x3fc>
 801534e:	eddf 1a4e 	vldr	s3, [pc, #312]	; 8015488 <mode_Tuning0+0x3f0>
 8015352:	ed9f 1a42 	vldr	s2, [pc, #264]	; 801545c <mode_Tuning0+0x3c4>
 8015356:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8015488 <mode_Tuning0+0x3f0>
 801535a:	ed9f 0a50 	vldr	s0, [pc, #320]	; 801549c <mode_Tuning0+0x404>
 801535e:	f7ee fe4b 	bl	8003ff8 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 8015362:	2000      	movs	r0, #0
 8015364:	f7f1 fe6a 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015368:	2000      	movs	r0, #0
 801536a:	f7f1 fe79 	bl	8007060 <pl_l_blue_LED>
		break;
 801536e:	e14a      	b.n	8015606 <mode_Tuning0+0x56e>
		case 10://システム同定gyro
			record_mode=6;
 8015370:	4b37      	ldr	r3, [pc, #220]	; (8015450 <mode_Tuning0+0x3b8>)
 8015372:	2206      	movs	r2, #6
 8015374:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015376:	2001      	movs	r0, #1
 8015378:	f7f1 fe60 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801537c:	2001      	movs	r0, #1
 801537e:	f7f1 fe6f 	bl	8007060 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8015382:	f107 0208 	add.w	r2, r7, #8
 8015386:	f107 030c 	add.w	r3, r7, #12
 801538a:	4611      	mov	r1, r2
 801538c:	4618      	mov	r0, r3
 801538e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015392:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015396:	f7ec fd09 	bl	8001dac <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	68ba      	ldr	r2, [r7, #8]
 801539e:	4611      	mov	r1, r2
 80153a0:	4618      	mov	r0, r3
 80153a2:	f7f2 fb63 	bl	8007a6c <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 80153a6:	f7f2 fb45 	bl	8007a34 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80153aa:	e00a      	b.n	80153c2 <mode_Tuning0+0x32a>
				wait_ms(1);
 80153ac:	2001      	movs	r0, #1
 80153ae:	f7f2 fdd7 	bl	8007f60 <wait_ms>
				if(record_rupe_flag==1){
 80153b2:	4b3d      	ldr	r3, [pc, #244]	; (80154a8 <mode_Tuning0+0x410>)
 80153b4:	781b      	ldrb	r3, [r3, #0]
 80153b6:	2b01      	cmp	r3, #1
 80153b8:	d103      	bne.n	80153c2 <mode_Tuning0+0x32a>
					record_mode=0;
 80153ba:	4b25      	ldr	r3, [pc, #148]	; (8015450 <mode_Tuning0+0x3b8>)
 80153bc:	2200      	movs	r2, #0
 80153be:	701a      	strb	r2, [r3, #0]
					break;
 80153c0:	e010      	b.n	80153e4 <mode_Tuning0+0x34c>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80153c2:	4b3a      	ldr	r3, [pc, #232]	; (80154ac <mode_Tuning0+0x414>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153ca:	ddef      	ble.n	80153ac <mode_Tuning0+0x314>
 80153cc:	4b37      	ldr	r3, [pc, #220]	; (80154ac <mode_Tuning0+0x414>)
 80153ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80153d2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153d6:	dde9      	ble.n	80153ac <mode_Tuning0+0x314>
 80153d8:	4b34      	ldr	r3, [pc, #208]	; (80154ac <mode_Tuning0+0x414>)
 80153da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80153de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153e2:	dde3      	ble.n	80153ac <mode_Tuning0+0x314>
				}
			}
			pl_DriveMotor_stop();
 80153e4:	f7f2 fb34 	bl	8007a50 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80153e8:	2000      	movs	r0, #0
 80153ea:	f7f1 fe27 	bl	800703c <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80153ee:	2000      	movs	r0, #0
 80153f0:	f7f1 fe36 	bl	8007060 <pl_l_blue_LED>
		break;
 80153f4:	e107      	b.n	8015606 <mode_Tuning0+0x56e>
		case 11:
		record_mode=1;
 80153f6:	4b16      	ldr	r3, [pc, #88]	; (8015450 <mode_Tuning0+0x3b8>)
 80153f8:	2201      	movs	r2, #1
 80153fa:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 80153fc:	2300      	movs	r3, #0
 80153fe:	743b      	strb	r3, [r7, #16]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8015400:	6938      	ldr	r0, [r7, #16]
 8015402:	ed9f 2a20 	vldr	s4, [pc, #128]	; 8015484 <mode_Tuning0+0x3ec>
 8015406:	eddf 1a20 	vldr	s3, [pc, #128]	; 8015488 <mode_Tuning0+0x3f0>
 801540a:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801545c <mode_Tuning0+0x3c4>
 801540e:	eddf 0a13 	vldr	s1, [pc, #76]	; 801545c <mode_Tuning0+0x3c4>
 8015412:	ed9f 0a27 	vldr	s0, [pc, #156]	; 80154b0 <mode_Tuning0+0x418>
 8015416:	f7ed fd9d 	bl	8002f54 <straight_table2>
		break;
 801541a:	e0f4      	b.n	8015606 <mode_Tuning0+0x56e>
		case 12:
		record_mode=2;
 801541c:	4b0c      	ldr	r3, [pc, #48]	; (8015450 <mode_Tuning0+0x3b8>)
 801541e:	2202      	movs	r2, #2
 8015420:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8015422:	2300      	movs	r3, #0
 8015424:	61fb      	str	r3, [r7, #28]
 8015426:	e00e      	b.n	8015446 <mode_Tuning0+0x3ae>
		turning_table2(90, 0, 0, 930, 11000);
 8015428:	ed9f 2a22 	vldr	s4, [pc, #136]	; 80154b4 <mode_Tuning0+0x41c>
 801542c:	eddf 1a22 	vldr	s3, [pc, #136]	; 80154b8 <mode_Tuning0+0x420>
 8015430:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801545c <mode_Tuning0+0x3c4>
 8015434:	eddf 0a09 	vldr	s1, [pc, #36]	; 801545c <mode_Tuning0+0x3c4>
 8015438:	ed9f 0a18 	vldr	s0, [pc, #96]	; 801549c <mode_Tuning0+0x404>
 801543c:	f7ee fa98 	bl	8003970 <turning_table2>
		for(int i=0;i<40;i++){
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	3301      	adds	r3, #1
 8015444:	61fb      	str	r3, [r7, #28]
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	2b27      	cmp	r3, #39	; 0x27
 801544a:	dded      	ble.n	8015428 <mode_Tuning0+0x390>
		}
		break;
 801544c:	e0db      	b.n	8015606 <mode_Tuning0+0x56e>
 801544e:	bf00      	nop
 8015450:	2000d96c 	.word	0x2000d96c
 8015454:	464b2000 	.word	0x464b2000
 8015458:	44c80000 	.word	0x44c80000
 801545c:	00000000 	.word	0x00000000
 8015460:	44070000 	.word	0x44070000
 8015464:	457a0000 	.word	0x457a0000
 8015468:	43c80000 	.word	0x43c80000
 801546c:	43340000 	.word	0x43340000
 8015470:	466a6000 	.word	0x466a6000
 8015474:	44fa0000 	.word	0x44fa0000
 8015478:	469c4000 	.word	0x469c4000
 801547c:	45160000 	.word	0x45160000
 8015480:	453b8000 	.word	0x453b8000
 8015484:	45bb8000 	.word	0x45bb8000
 8015488:	43960000 	.word	0x43960000
 801548c:	44340000 	.word	0x44340000
 8015490:	2000db2c 	.word	0x2000db2c
 8015494:	43fa0000 	.word	0x43fa0000
 8015498:	443eeb39 	.word	0x443eeb39
 801549c:	42b40000 	.word	0x42b40000
 80154a0:	44bb8000 	.word	0x44bb8000
 80154a4:	44160000 	.word	0x44160000
 80154a8:	2000d978 	.word	0x2000d978
 80154ac:	200002b8 	.word	0x200002b8
 80154b0:	420a0000 	.word	0x420a0000
 80154b4:	462be000 	.word	0x462be000
 80154b8:	44688000 	.word	0x44688000
		case 13:
			record_mode=2;
 80154bc:	4b6f      	ldr	r3, [pc, #444]	; (801567c <mode_Tuning0+0x5e4>)
 80154be:	2202      	movs	r2, #2
 80154c0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80154c2:	2301      	movs	r3, #1
 80154c4:	743b      	strb	r3, [r7, #16]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80154c6:	4b6e      	ldr	r3, [pc, #440]	; (8015680 <mode_Tuning0+0x5e8>)
 80154c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80154cc:	4b6c      	ldr	r3, [pc, #432]	; (8015680 <mode_Tuning0+0x5e8>)
 80154ce:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80154d2:	4b6b      	ldr	r3, [pc, #428]	; (8015680 <mode_Tuning0+0x5e8>)
 80154d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80154d8:	4b69      	ldr	r3, [pc, #420]	; (8015680 <mode_Tuning0+0x5e8>)
 80154da:	edd3 7a02 	vldr	s15, [r3, #8]
 80154de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80154e2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80154e6:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80154ea:	eddf 5a66 	vldr	s11, [pc, #408]	; 8015684 <mode_Tuning0+0x5ec>
 80154ee:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80154f2:	6938      	ldr	r0, [r7, #16]
 80154f4:	eeb0 2a47 	vmov.f32	s4, s14
 80154f8:	eef0 1a46 	vmov.f32	s3, s12
 80154fc:	eeb0 1a66 	vmov.f32	s2, s13
 8015500:	eddf 0a61 	vldr	s1, [pc, #388]	; 8015688 <mode_Tuning0+0x5f0>
 8015504:	ed9f 0a61 	vldr	s0, [pc, #388]	; 801568c <mode_Tuning0+0x5f4>
 8015508:	f7ed fd24 	bl	8002f54 <straight_table2>
			for(int i=0;i<40;i++){
 801550c:	2300      	movs	r3, #0
 801550e:	61bb      	str	r3, [r7, #24]
 8015510:	e011      	b.n	8015536 <mode_Tuning0+0x49e>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8015512:	4b5b      	ldr	r3, [pc, #364]	; (8015680 <mode_Tuning0+0x5e8>)
 8015514:	2200      	movs	r2, #0
 8015516:	9203      	str	r2, [sp, #12]
 8015518:	2200      	movs	r2, #0
 801551a:	9202      	str	r2, [sp, #8]
 801551c:	2200      	movs	r2, #0
 801551e:	9201      	str	r2, [sp, #4]
 8015520:	699a      	ldr	r2, [r3, #24]
 8015522:	9200      	str	r2, [sp, #0]
 8015524:	3308      	adds	r3, #8
 8015526:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015528:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8015690 <mode_Tuning0+0x5f8>
 801552c:	f7f4 fd82 	bl	800a034 <slalomR>
			for(int i=0;i<40;i++){
 8015530:	69bb      	ldr	r3, [r7, #24]
 8015532:	3301      	adds	r3, #1
 8015534:	61bb      	str	r3, [r7, #24]
 8015536:	69bb      	ldr	r3, [r7, #24]
 8015538:	2b27      	cmp	r3, #39	; 0x27
 801553a:	ddea      	ble.n	8015512 <mode_Tuning0+0x47a>
			}
			mode.WallControlMode=0;
 801553c:	2300      	movs	r3, #0
 801553e:	743b      	strb	r3, [r7, #16]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015540:	4b4f      	ldr	r3, [pc, #316]	; (8015680 <mode_Tuning0+0x5e8>)
 8015542:	edd3 6a02 	vldr	s13, [r3, #8]
 8015546:	4b4e      	ldr	r3, [pc, #312]	; (8015680 <mode_Tuning0+0x5e8>)
 8015548:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 801554c:	4b4c      	ldr	r3, [pc, #304]	; (8015680 <mode_Tuning0+0x5e8>)
 801554e:	ed93 7a02 	vldr	s14, [r3, #8]
 8015552:	4b4b      	ldr	r3, [pc, #300]	; (8015680 <mode_Tuning0+0x5e8>)
 8015554:	edd3 7a02 	vldr	s15, [r3, #8]
 8015558:	ee27 7a27 	vmul.f32	s14, s14, s15
 801555c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8015560:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8015564:	eddf 5a47 	vldr	s11, [pc, #284]	; 8015684 <mode_Tuning0+0x5ec>
 8015568:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 801556c:	6938      	ldr	r0, [r7, #16]
 801556e:	eeb0 2a47 	vmov.f32	s4, s14
 8015572:	eef0 1a46 	vmov.f32	s3, s12
 8015576:	ed9f 1a44 	vldr	s2, [pc, #272]	; 8015688 <mode_Tuning0+0x5f0>
 801557a:	eef0 0a66 	vmov.f32	s1, s13
 801557e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8015684 <mode_Tuning0+0x5ec>
 8015582:	f7ed fce7 	bl	8002f54 <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8015586:	e03e      	b.n	8015606 <mode_Tuning0+0x56e>
		case 14://宴会芸＋吸引
			record_mode=2;
 8015588:	4b3c      	ldr	r3, [pc, #240]	; (801567c <mode_Tuning0+0x5e4>)
 801558a:	2202      	movs	r2, #2
 801558c:	701a      	strb	r2, [r3, #0]
			for(int i=0;i<40;i++){
 801558e:	2300      	movs	r3, #0
 8015590:	617b      	str	r3, [r7, #20]
 8015592:	e00e      	b.n	80155b2 <mode_Tuning0+0x51a>
			turning_table2(90, 0, 0, 930, 11000);
 8015594:	ed9f 2a3f 	vldr	s4, [pc, #252]	; 8015694 <mode_Tuning0+0x5fc>
 8015598:	eddf 1a3f 	vldr	s3, [pc, #252]	; 8015698 <mode_Tuning0+0x600>
 801559c:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8015688 <mode_Tuning0+0x5f0>
 80155a0:	eddf 0a39 	vldr	s1, [pc, #228]	; 8015688 <mode_Tuning0+0x5f0>
 80155a4:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 801569c <mode_Tuning0+0x604>
 80155a8:	f7ee f9e2 	bl	8003970 <turning_table2>
			for(int i=0;i<40;i++){
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	3301      	adds	r3, #1
 80155b0:	617b      	str	r3, [r7, #20]
 80155b2:	697b      	ldr	r3, [r7, #20]
 80155b4:	2b27      	cmp	r3, #39	; 0x27
 80155b6:	dded      	ble.n	8015594 <mode_Tuning0+0x4fc>
//			record_mode=3;
////			mode.WallControlMode=0;
////			straight_table2(90*32, 0, 0, 4000, 17000,mode);
//			mode.WallControlMode=1;
//			straight_table2(90*8, 0, 0, 3000, 12000,mode);
		break;
 80155b8:	e025      	b.n	8015606 <mode_Tuning0+0x56e>
		case 15:
			highspeed_mode = 1;
 80155ba:	4b39      	ldr	r3, [pc, #228]	; (80156a0 <mode_Tuning0+0x608>)
 80155bc:	2201      	movs	r2, #1
 80155be:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 80155c0:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80156a4 <mode_Tuning0+0x60c>
 80155c4:	f7f2 fa7c 	bl	8007ac0 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 80155c8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80155cc:	f002 f94a 	bl	8017864 <HAL_Delay>
						reset_gyro();
 80155d0:	f7ec f86e 	bl	80016b0 <reset_gyro>
						reset_speed();
 80155d4:	f7eb fd20 	bl	8001018 <reset_speed>
						reset_distance();
 80155d8:	f7eb fce0 	bl	8000f9c <reset_distance>
						clear_Ierror();
 80155dc:	f7ef f8d6 	bl	800478c <clear_Ierror>
						record_mode=3;
 80155e0:	4b26      	ldr	r3, [pc, #152]	; (801567c <mode_Tuning0+0x5e4>)
 80155e2:	2203      	movs	r2, #3
 80155e4:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 80155e6:	2301      	movs	r3, #1
 80155e8:	743b      	strb	r3, [r7, #16]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 80155ea:	6938      	ldr	r0, [r7, #16]
 80155ec:	ed9f 2a2e 	vldr	s4, [pc, #184]	; 80156a8 <mode_Tuning0+0x610>
 80155f0:	eddf 1a2e 	vldr	s3, [pc, #184]	; 80156ac <mode_Tuning0+0x614>
 80155f4:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015688 <mode_Tuning0+0x5f0>
 80155f8:	eddf 0a23 	vldr	s1, [pc, #140]	; 8015688 <mode_Tuning0+0x5f0>
 80155fc:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80156b0 <mode_Tuning0+0x618>
 8015600:	f7ed fca8 	bl	8002f54 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8015604:	bf00      	nop
	}
	record_mode=0;
 8015606:	4b1d      	ldr	r3, [pc, #116]	; (801567c <mode_Tuning0+0x5e4>)
 8015608:	2200      	movs	r2, #0
 801560a:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801560c:	2003      	movs	r0, #3
 801560e:	f7f2 f9eb 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015612:	2003      	movs	r0, #3
 8015614:	f7f2 f9c0 	bl	8007998 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015618:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801561c:	f7f2 fce4 	bl	8007fe8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015620:	f7f2 fa44 	bl	8007aac <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8015624:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015628:	f7f2 fcde 	bl	8007fe8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 801562c:	2000      	movs	r0, #0
 801562e:	f7f2 f9a9 	bl	8007984 <pl_DriveMotor_standby>
	record_mode=0;
 8015632:	4b12      	ldr	r3, [pc, #72]	; (801567c <mode_Tuning0+0x5e4>)
 8015634:	2200      	movs	r2, #0
 8015636:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015638:	e002      	b.n	8015640 <mode_Tuning0+0x5a8>
		HAL_Delay(1);
 801563a:	2001      	movs	r0, #1
 801563c:	f002 f912 	bl	8017864 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015640:	4b1c      	ldr	r3, [pc, #112]	; (80156b4 <mode_Tuning0+0x61c>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015648:	ddf7      	ble.n	801563a <mode_Tuning0+0x5a2>
 801564a:	4b1a      	ldr	r3, [pc, #104]	; (80156b4 <mode_Tuning0+0x61c>)
 801564c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015650:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015654:	ddf1      	ble.n	801563a <mode_Tuning0+0x5a2>
 8015656:	4b17      	ldr	r3, [pc, #92]	; (80156b4 <mode_Tuning0+0x61c>)
 8015658:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801565c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015660:	ddeb      	ble.n	801563a <mode_Tuning0+0x5a2>
	}
	pl_r_blue_LED(ON);
 8015662:	2001      	movs	r0, #1
 8015664:	f7f1 fcea 	bl	800703c <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015668:	2001      	movs	r0, #1
 801566a:	f7f1 fcf9 	bl	8007060 <pl_l_blue_LED>
	record_print();
 801566e:	f000 fccb 	bl	8016008 <record_print>



}
 8015672:	bf00      	nop
 8015674:	3724      	adds	r7, #36	; 0x24
 8015676:	46bd      	mov	sp, r7
 8015678:	bd90      	pop	{r4, r7, pc}
 801567a:	bf00      	nop
 801567c:	2000d96c 	.word	0x2000d96c
 8015680:	2000db2c 	.word	0x2000db2c
 8015684:	42340000 	.word	0x42340000
 8015688:	00000000 	.word	0x00000000
 801568c:	431b8000 	.word	0x431b8000
 8015690:	43960000 	.word	0x43960000
 8015694:	462be000 	.word	0x462be000
 8015698:	44688000 	.word	0x44688000
 801569c:	42b40000 	.word	0x42b40000
 80156a0:	20000808 	.word	0x20000808
 80156a4:	3f733333 	.word	0x3f733333
 80156a8:	45dac000 	.word	0x45dac000
 80156ac:	447a0000 	.word	0x447a0000
 80156b0:	44340000 	.word	0x44340000
 80156b4:	200002b8 	.word	0x200002b8

080156b8 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 80156b8:	b580      	push	{r7, lr}
 80156ba:	b084      	sub	sp, #16
 80156bc:	af00      	add	r7, sp, #0
 80156be:	4603      	mov	r3, r0
 80156c0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80156c2:	2300      	movs	r3, #0
 80156c4:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 80156c6:	2300      	movs	r3, #0
 80156c8:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 80156ca:	2300      	movs	r3, #0
 80156cc:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 80156ce:	2300      	movs	r3, #0
 80156d0:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80156d2:	2001      	movs	r0, #1
 80156d4:	f7f2 f956 	bl	8007984 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80156d8:	2003      	movs	r0, #3
 80156da:	f7f2 f95d 	bl	8007998 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80156de:	2003      	movs	r0, #3
 80156e0:	f7f2 f982 	bl	80079e8 <pl_R_DriveMotor_mode>
	reset_gyro();
 80156e4:	f7eb ffe4 	bl	80016b0 <reset_gyro>
	reset_speed();
 80156e8:	f7eb fc96 	bl	8001018 <reset_speed>
	clear_Ierror();
 80156ec:	f7ef f84e 	bl	800478c <clear_Ierror>

	switch (main_modeR) {
 80156f0:	79fb      	ldrb	r3, [r7, #7]
 80156f2:	2b0f      	cmp	r3, #15
 80156f4:	f200 81b0 	bhi.w	8015a58 <mode_WallSensorTuning+0x3a0>
 80156f8:	a201      	add	r2, pc, #4	; (adr r2, 8015700 <mode_WallSensorTuning+0x48>)
 80156fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156fe:	bf00      	nop
 8015700:	08015741 	.word	0x08015741
 8015704:	08015767 	.word	0x08015767
 8015708:	0801577f 	.word	0x0801577f
 801570c:	080157f5 	.word	0x080157f5
 8015710:	0801586b 	.word	0x0801586b
 8015714:	080158e1 	.word	0x080158e1
 8015718:	08015951 	.word	0x08015951
 801571c:	08015977 	.word	0x08015977
 8015720:	0801599d 	.word	0x0801599d
 8015724:	080159c3 	.word	0x080159c3
 8015728:	08015a59 	.word	0x08015a59
 801572c:	08015a59 	.word	0x08015a59
 8015730:	08015a59 	.word	0x08015a59
 8015734:	08015a59 	.word	0x08015a59
 8015738:	08015a59 	.word	0x08015a59
 801573c:	080159e9 	.word	0x080159e9
		case 0://横壁追従制御
			record_mode=16;
 8015740:	4bd2      	ldr	r3, [pc, #840]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 8015742:	2210      	movs	r2, #16
 8015744:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015746:	2301      	movs	r3, #1
 8015748:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 801574a:	68b8      	ldr	r0, [r7, #8]
 801574c:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8015a90 <mode_WallSensorTuning+0x3d8>
 8015750:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015754:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015758:	eddf 0acf 	vldr	s1, [pc, #828]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 801575c:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8015a9c <mode_WallSensorTuning+0x3e4>
 8015760:	f7ed fbf8 	bl	8002f54 <straight_table2>
		break;
 8015764:	e178      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 8015766:	2300      	movs	r3, #0
 8015768:	60fb      	str	r3, [r7, #12]
 801576a:	e004      	b.n	8015776 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 801576c:	f7ee fbfc 	bl	8003f68 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	3301      	adds	r3, #1
 8015774:	60fb      	str	r3, [r7, #12]
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	2b14      	cmp	r3, #20
 801577a:	ddf7      	ble.n	801576c <mode_WallSensorTuning+0xb4>
			}
		break;
 801577c:	e16c      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 801577e:	4bc3      	ldr	r3, [pc, #780]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 8015780:	2207      	movs	r2, #7
 8015782:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015784:	2300      	movs	r3, #0
 8015786:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015788:	2300      	movs	r3, #0
 801578a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801578c:	2300      	movs	r3, #0
 801578e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015790:	2300      	movs	r3, #0
 8015792:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8015794:	68b8      	ldr	r0, [r7, #8]
 8015796:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 801579a:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801579e:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80157a2:	eddf 0abd 	vldr	s1, [pc, #756]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80157a6:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8015aa8 <mode_WallSensorTuning+0x3f0>
 80157aa:	f7ed fbd3 	bl	8002f54 <straight_table2>
			mode.WallCutMode=1;
 80157ae:	2301      	movs	r3, #1
 80157b0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80157b2:	2300      	movs	r3, #0
 80157b4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80157b6:	68b8      	ldr	r0, [r7, #8]
 80157b8:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 80157bc:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80157c0:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80157c4:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80157c8:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8015aac <mode_WallSensorTuning+0x3f4>
 80157cc:	f7ed fbc2 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 80157d0:	2300      	movs	r3, #0
 80157d2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80157d4:	2300      	movs	r3, #0
 80157d6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 80157d8:	68b8      	ldr	r0, [r7, #8]
 80157da:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 80157de:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80157e2:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80157e6:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80157ea:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8015ab0 <mode_WallSensorTuning+0x3f8>
 80157ee:	f7ed fbb1 	bl	8002f54 <straight_table2>
		break;
 80157f2:	e131      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 80157f4:	4ba5      	ldr	r3, [pc, #660]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 80157f6:	2208      	movs	r2, #8
 80157f8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80157fa:	2300      	movs	r3, #0
 80157fc:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80157fe:	2300      	movs	r3, #0
 8015800:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015802:	2300      	movs	r3, #0
 8015804:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8015806:	2300      	movs	r3, #0
 8015808:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 801580a:	68b8      	ldr	r0, [r7, #8]
 801580c:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015810:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015814:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015818:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 801581c:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8015ab4 <mode_WallSensorTuning+0x3fc>
 8015820:	f7ed fb98 	bl	8002f54 <straight_table2>
			mode.WallCutMode=2;
 8015824:	2302      	movs	r3, #2
 8015826:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015828:	2300      	movs	r3, #0
 801582a:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801582c:	68b8      	ldr	r0, [r7, #8]
 801582e:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015832:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015836:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801583a:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801583e:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8015aac <mode_WallSensorTuning+0x3f4>
 8015842:	f7ed fb87 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 8015846:	2300      	movs	r3, #0
 8015848:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 801584a:	2300      	movs	r3, #0
 801584c:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 801584e:	68b8      	ldr	r0, [r7, #8]
 8015850:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015854:	eddf 1a93 	vldr	s3, [pc, #588]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015858:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 801585c:	eddf 0a91 	vldr	s1, [pc, #580]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015860:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8015ab0 <mode_WallSensorTuning+0x3f8>
 8015864:	f7ed fb76 	bl	8002f54 <straight_table2>
		break;
 8015868:	e0f6      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 801586a:	4b88      	ldr	r3, [pc, #544]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 801586c:	2208      	movs	r2, #8
 801586e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015870:	2300      	movs	r3, #0
 8015872:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8015874:	2300      	movs	r3, #0
 8015876:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8015878:	2300      	movs	r3, #0
 801587a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801587c:	2300      	movs	r3, #0
 801587e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8015880:	68b8      	ldr	r0, [r7, #8]
 8015882:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015886:	eddf 1a87 	vldr	s3, [pc, #540]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801588a:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801588e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015892:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8015ab8 <mode_WallSensorTuning+0x400>
 8015896:	f7ed fb5d 	bl	8002f54 <straight_table2>
			mode.WallCutMode=3;
 801589a:	2303      	movs	r3, #3
 801589c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801589e:	2300      	movs	r3, #0
 80158a0:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 80158a2:	68b8      	ldr	r0, [r7, #8]
 80158a4:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 80158a8:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158ac:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158b0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158b4:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8015abc <mode_WallSensorTuning+0x404>
 80158b8:	f7ed fb4c 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 80158bc:	2300      	movs	r3, #0
 80158be:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80158c4:	68b8      	ldr	r0, [r7, #8]
 80158c6:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 80158ca:	eddf 1a76 	vldr	s3, [pc, #472]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158ce:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80158d2:	eddf 0a74 	vldr	s1, [pc, #464]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158d6:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8015ac0 <mode_WallSensorTuning+0x408>
 80158da:	f7ed fb3b 	bl	8002f54 <straight_table2>
		break;
 80158de:	e0bb      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 80158e0:	2300      	movs	r3, #0
 80158e2:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80158e4:	2300      	movs	r3, #0
 80158e6:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80158e8:	2300      	movs	r3, #0
 80158ea:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80158ec:	2300      	movs	r3, #0
 80158ee:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 80158f0:	68b8      	ldr	r0, [r7, #8]
 80158f2:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 80158f6:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158fa:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 80158fe:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015902:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8015ab8 <mode_WallSensorTuning+0x400>
 8015906:	f7ed fb25 	bl	8002f54 <straight_table2>
			mode.WallCutMode=4;
 801590a:	2304      	movs	r3, #4
 801590c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801590e:	2300      	movs	r3, #0
 8015910:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8015912:	68b8      	ldr	r0, [r7, #8]
 8015914:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015918:	eddf 1a62 	vldr	s3, [pc, #392]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801591c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015920:	eddf 0a60 	vldr	s1, [pc, #384]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015924:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8015abc <mode_WallSensorTuning+0x404>
 8015928:	f7ed fb14 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 801592c:	2300      	movs	r3, #0
 801592e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015930:	2300      	movs	r3, #0
 8015932:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8015934:	68b8      	ldr	r0, [r7, #8]
 8015936:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 801593a:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801593e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015942:	eddf 0a58 	vldr	s1, [pc, #352]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015946:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015ac0 <mode_WallSensorTuning+0x408>
 801594a:	f7ed fb03 	bl	8002f54 <straight_table2>
		break;
 801594e:	e083      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(制御あり)
			record_mode=9;
 8015950:	4b4e      	ldr	r3, [pc, #312]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 8015952:	2209      	movs	r2, #9
 8015954:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015956:	2300      	movs	r3, #0
 8015958:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801595a:	68b8      	ldr	r0, [r7, #8]
 801595c:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015960:	eddf 1a50 	vldr	s3, [pc, #320]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 8015964:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015968:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 801596c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8015ac4 <mode_WallSensorTuning+0x40c>
 8015970:	f7ed faf0 	bl	8002f54 <straight_table2>
		break;
 8015974:	e070      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=10;
 8015976:	4b45      	ldr	r3, [pc, #276]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 8015978:	220a      	movs	r2, #10
 801597a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801597c:	2300      	movs	r3, #0
 801597e:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8015980:	68b8      	ldr	r0, [r7, #8]
 8015982:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015aa0 <mode_WallSensorTuning+0x3e8>
 8015986:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015aa4 <mode_WallSensorTuning+0x3ec>
 801598a:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 801598e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015992:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8015ac4 <mode_WallSensorTuning+0x40c>
 8015996:	f7ed fadd 	bl	8002f54 <straight_table2>

		break;
 801599a:	e05d      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 801599c:	4b3b      	ldr	r3, [pc, #236]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 801599e:	2207      	movs	r2, #7
 80159a0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80159a2:	2303      	movs	r3, #3
 80159a4:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 15000,mode);
 80159a6:	68b8      	ldr	r0, [r7, #8]
 80159a8:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8015ac8 <mode_WallSensorTuning+0x410>
 80159ac:	eddf 1a47 	vldr	s3, [pc, #284]	; 8015acc <mode_WallSensorTuning+0x414>
 80159b0:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80159b4:	eddf 0a38 	vldr	s1, [pc, #224]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80159b8:	ed9f 0a45 	vldr	s0, [pc, #276]	; 8015ad0 <mode_WallSensorTuning+0x418>
 80159bc:	f7ed faca 	bl	8002f54 <straight_table2>
		break;
 80159c0:	e04a      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 80159c2:	4b32      	ldr	r3, [pc, #200]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 80159c4:	2208      	movs	r2, #8
 80159c6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80159c8:	2303      	movs	r3, #3
 80159ca:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 80159cc:	68b8      	ldr	r0, [r7, #8]
 80159ce:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015ad4 <mode_WallSensorTuning+0x41c>
 80159d2:	eddf 1a41 	vldr	s3, [pc, #260]	; 8015ad8 <mode_WallSensorTuning+0x420>
 80159d6:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80159da:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 80159de:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015adc <mode_WallSensorTuning+0x424>
 80159e2:	f7ed fab7 	bl	8002f54 <straight_table2>
		break;
 80159e6:	e037      	b.n	8015a58 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 80159e8:	2305      	movs	r3, #5
 80159ea:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80159ec:	2300      	movs	r3, #0
 80159ee:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80159f0:	2300      	movs	r3, #0
 80159f2:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 80159f4:	2300      	movs	r3, #0
 80159f6:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 80159f8:	68b8      	ldr	r0, [r7, #8]
 80159fa:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8015ae0 <mode_WallSensorTuning+0x428>
 80159fe:	eddf 1a25 	vldr	s3, [pc, #148]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a02:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a06:	eddf 0a24 	vldr	s1, [pc, #144]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015a0a:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8015ae4 <mode_WallSensorTuning+0x42c>
 8015a0e:	f7ed faa1 	bl	8002f54 <straight_table2>
			mode.WallCutMode=2;
 8015a12:	2302      	movs	r3, #2
 8015a14:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8015a16:	2300      	movs	r3, #0
 8015a18:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 8015a1a:	68b8      	ldr	r0, [r7, #8]
 8015a1c:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8015ae0 <mode_WallSensorTuning+0x428>
 8015a20:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a24:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a28:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a2c:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015ae8 <mode_WallSensorTuning+0x430>
 8015a30:	f7ed fa90 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 8015a34:	2300      	movs	r3, #0
 8015a36:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 8015a3c:	68b8      	ldr	r0, [r7, #8]
 8015a3e:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8015ae0 <mode_WallSensorTuning+0x428>
 8015a42:	eddf 1a14 	vldr	s3, [pc, #80]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a46:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8015a98 <mode_WallSensorTuning+0x3e0>
 8015a4a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8015a94 <mode_WallSensorTuning+0x3dc>
 8015a4e:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8015aec <mode_WallSensorTuning+0x434>
 8015a52:	f7ed fa7f 	bl	8002f54 <straight_table2>
		break;
 8015a56:	bf00      	nop
	}
	record_mode=0;
 8015a58:	4b0c      	ldr	r3, [pc, #48]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015a5e:	2003      	movs	r0, #3
 8015a60:	f7f1 ffc2 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015a64:	2003      	movs	r0, #3
 8015a66:	f7f1 ff97 	bl	8007998 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015a6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015a6e:	f7f2 fabb 	bl	8007fe8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015a72:	f7f2 f81b 	bl	8007aac <pl_FunMotor_stop>
	record_mode=0;
 8015a76:	4b05      	ldr	r3, [pc, #20]	; (8015a8c <mode_WallSensorTuning+0x3d4>)
 8015a78:	2200      	movs	r2, #0
 8015a7a:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015a7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015a80:	f7f2 fab2 	bl	8007fe8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015a84:	2000      	movs	r0, #0
 8015a86:	f7f1 ff7d 	bl	8007984 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015a8a:	e034      	b.n	8015af6 <mode_WallSensorTuning+0x43e>
 8015a8c:	2000d96c 	.word	0x2000d96c
 8015a90:	459c4000 	.word	0x459c4000
 8015a94:	43fa0000 	.word	0x43fa0000
 8015a98:	00000000 	.word	0x00000000
 8015a9c:	44b40000 	.word	0x44b40000
 8015aa0:	453b8000 	.word	0x453b8000
 8015aa4:	43960000 	.word	0x43960000
 8015aa8:	431b8000 	.word	0x431b8000
 8015aac:	41b40000 	.word	0x41b40000
 8015ab0:	42870000 	.word	0x42870000
 8015ab4:	42cd0000 	.word	0x42cd0000
 8015ab8:	4329c77b 	.word	0x4329c77b
 8015abc:	41fe8ef6 	.word	0x41fe8ef6
 8015ac0:	42beeb39 	.word	0x42beeb39
 8015ac4:	43beeb39 	.word	0x43beeb39
 8015ac8:	466a6000 	.word	0x466a6000
 8015acc:	44fa0000 	.word	0x44fa0000
 8015ad0:	443eeb39 	.word	0x443eeb39
 8015ad4:	461c4000 	.word	0x461c4000
 8015ad8:	442f0000 	.word	0x442f0000
 8015adc:	4484977b 	.word	0x4484977b
 8015ae0:	44bb8000 	.word	0x44bb8000
 8015ae4:	43488000 	.word	0x43488000
 8015ae8:	42340000 	.word	0x42340000
 8015aec:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8015af0:	2001      	movs	r0, #1
 8015af2:	f001 feb7 	bl	8017864 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015af6:	4b0e      	ldr	r3, [pc, #56]	; (8015b30 <mode_WallSensorTuning+0x478>)
 8015af8:	681b      	ldr	r3, [r3, #0]
 8015afa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015afe:	ddf7      	ble.n	8015af0 <mode_WallSensorTuning+0x438>
 8015b00:	4b0b      	ldr	r3, [pc, #44]	; (8015b30 <mode_WallSensorTuning+0x478>)
 8015b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015b06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b0a:	ddf1      	ble.n	8015af0 <mode_WallSensorTuning+0x438>
 8015b0c:	4b08      	ldr	r3, [pc, #32]	; (8015b30 <mode_WallSensorTuning+0x478>)
 8015b0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015b12:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b16:	ddeb      	ble.n	8015af0 <mode_WallSensorTuning+0x438>
	}
	pl_r_blue_LED(ON);
 8015b18:	2001      	movs	r0, #1
 8015b1a:	f7f1 fa8f 	bl	800703c <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015b1e:	2001      	movs	r0, #1
 8015b20:	f7f1 fa9e 	bl	8007060 <pl_l_blue_LED>
	record_print();
 8015b24:	f000 fa70 	bl	8016008 <record_print>



}
 8015b28:	bf00      	nop
 8015b2a:	3710      	adds	r7, #16
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	200002b8 	.word	0x200002b8

08015b34 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b084      	sub	sp, #16
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8015b42:	2300      	movs	r3, #0
 8015b44:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 8015b46:	2300      	movs	r3, #0
 8015b48:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8015b4e:	2001      	movs	r0, #1
 8015b50:	f7f1 ff18 	bl	8007984 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015b54:	2003      	movs	r0, #3
 8015b56:	f7f1 ff1f 	bl	8007998 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015b5a:	2003      	movs	r0, #3
 8015b5c:	f7f1 ff44 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.56);
 8015b60:	ed9f 0ad2 	vldr	s0, [pc, #840]	; 8015eac <mode_WallSensorTuning_fast+0x378>
 8015b64:	f7f1 ffac 	bl	8007ac0 <pl_FunMotor_duty>
	pl_FunMotor_start();
 8015b68:	f7f1 ff96 	bl	8007a98 <pl_FunMotor_start>
	HAL_Delay(600);
 8015b6c:	f44f 7016 	mov.w	r0, #600	; 0x258
 8015b70:	f001 fe78 	bl	8017864 <HAL_Delay>
	reset_gyro();
 8015b74:	f7eb fd9c 	bl	80016b0 <reset_gyro>
	reset_speed();
 8015b78:	f7eb fa4e 	bl	8001018 <reset_speed>
	clear_Ierror();
 8015b7c:	f7ee fe06 	bl	800478c <clear_Ierror>
	angle=0;
 8015b80:	4bcb      	ldr	r3, [pc, #812]	; (8015eb0 <mode_WallSensorTuning_fast+0x37c>)
 8015b82:	f04f 0200 	mov.w	r2, #0
 8015b86:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8015b88:	79fb      	ldrb	r3, [r7, #7]
 8015b8a:	2b0f      	cmp	r3, #15
 8015b8c:	f200 8173 	bhi.w	8015e76 <mode_WallSensorTuning_fast+0x342>
 8015b90:	a201      	add	r2, pc, #4	; (adr r2, 8015b98 <mode_WallSensorTuning_fast+0x64>)
 8015b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b96:	bf00      	nop
 8015b98:	08015bd9 	.word	0x08015bd9
 8015b9c:	08015e77 	.word	0x08015e77
 8015ba0:	08015e77 	.word	0x08015e77
 8015ba4:	08015c0b 	.word	0x08015c0b
 8015ba8:	08015c81 	.word	0x08015c81
 8015bac:	08015cf7 	.word	0x08015cf7
 8015bb0:	08015d6d 	.word	0x08015d6d
 8015bb4:	08015d93 	.word	0x08015d93
 8015bb8:	08015db9 	.word	0x08015db9
 8015bbc:	08015ddf 	.word	0x08015ddf
 8015bc0:	08015e05 	.word	0x08015e05
 8015bc4:	08015e2b 	.word	0x08015e2b
 8015bc8:	08015e51 	.word	0x08015e51
 8015bcc:	08015e77 	.word	0x08015e77
 8015bd0:	08015e77 	.word	0x08015e77
 8015bd4:	08015e77 	.word	0x08015e77
		case 0://横壁追従制御
			record_mode=15;
 8015bd8:	4bb6      	ldr	r3, [pc, #728]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015bda:	220f      	movs	r2, #15
 8015bdc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015bde:	2301      	movs	r3, #1
 8015be0:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 8015be2:	4bb5      	ldr	r3, [pc, #724]	; (8015eb8 <mode_WallSensorTuning_fast+0x384>)
 8015be4:	2201      	movs	r2, #1
 8015be6:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8015be8:	68f8      	ldr	r0, [r7, #12]
 8015bea:	ed9f 2ab4 	vldr	s4, [pc, #720]	; 8015ebc <mode_WallSensorTuning_fast+0x388>
 8015bee:	eddf 1ab4 	vldr	s3, [pc, #720]	; 8015ec0 <mode_WallSensorTuning_fast+0x38c>
 8015bf2:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015bf6:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015bfa:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8015ec8 <mode_WallSensorTuning_fast+0x394>
 8015bfe:	f7ed f9a9 	bl	8002f54 <straight_table2>
			highspeed_mode=0;
 8015c02:	4bad      	ldr	r3, [pc, #692]	; (8015eb8 <mode_WallSensorTuning_fast+0x384>)
 8015c04:	2200      	movs	r2, #0
 8015c06:	701a      	strb	r2, [r3, #0]
		break;
 8015c08:	e135      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 1://なし
		break;
		case 2://なし
		break;
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 8015c0a:	4baa      	ldr	r3, [pc, #680]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015c0c:	2208      	movs	r2, #8
 8015c0e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015c10:	2301      	movs	r3, #1
 8015c12:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015c14:	2300      	movs	r3, #0
 8015c16:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015c18:	2300      	movs	r3, #0
 8015c1a:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015c1c:	2300      	movs	r3, #0
 8015c1e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 8015ecc <mode_WallSensorTuning_fast+0x398>
 8015c26:	eddf 1aaa 	vldr	s3, [pc, #680]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c2a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c2e:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015c32:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8015ed4 <mode_WallSensorTuning_fast+0x3a0>
 8015c36:	f7ed f98d 	bl	8002f54 <straight_table2>
			mode.WallCutMode=2;
 8015c3a:	2302      	movs	r3, #2
 8015c3c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015c3e:	2300      	movs	r3, #0
 8015c40:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 8015c42:	68f8      	ldr	r0, [r7, #12]
 8015c44:	ed9f 2aa1 	vldr	s4, [pc, #644]	; 8015ecc <mode_WallSensorTuning_fast+0x398>
 8015c48:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c4c:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c50:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c54:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8015ed8 <mode_WallSensorTuning_fast+0x3a4>
 8015c58:	f7ed f97c 	bl	8002f54 <straight_table2>
			mode.WallControlMode=1;
 8015c5c:	2301      	movs	r3, #1
 8015c5e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015c60:	2300      	movs	r3, #0
 8015c62:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 8015c64:	68f8      	ldr	r0, [r7, #12]
 8015c66:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8015ecc <mode_WallSensorTuning_fast+0x398>
 8015c6a:	eddf 1a99 	vldr	s3, [pc, #612]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c6e:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015c72:	eddf 0a97 	vldr	s1, [pc, #604]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015c76:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8015edc <mode_WallSensorTuning_fast+0x3a8>
 8015c7a:	f7ed f96b 	bl	8002f54 <straight_table2>
		break;
 8015c7e:	e0fa      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8015c80:	4b8c      	ldr	r3, [pc, #560]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015c82:	2208      	movs	r2, #8
 8015c84:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015c86:	2300      	movs	r3, #0
 8015c88:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015c92:	2300      	movs	r3, #0
 8015c94:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 600, 600,10000,mode);
 8015c96:	68f8      	ldr	r0, [r7, #12]
 8015c98:	ed9f 2a91 	vldr	s4, [pc, #580]	; 8015ee0 <mode_WallSensorTuning_fast+0x3ac>
 8015c9c:	eddf 1a8c 	vldr	s3, [pc, #560]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015ca0:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015ca4:	eddf 0a87 	vldr	s1, [pc, #540]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015ca8:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8015ee4 <mode_WallSensorTuning_fast+0x3b0>
 8015cac:	f7ed f952 	bl	8002f54 <straight_table2>
			mode.WallCutMode=3;
 8015cb0:	2303      	movs	r3, #3
 8015cb2:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015cb8:	68f8      	ldr	r0, [r7, #12]
 8015cba:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8015ee0 <mode_WallSensorTuning_fast+0x3ac>
 8015cbe:	eddf 1a84 	vldr	s3, [pc, #528]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015cc2:	ed9f 1a83 	vldr	s2, [pc, #524]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015cc6:	eddf 0a82 	vldr	s1, [pc, #520]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015cca:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8015ee8 <mode_WallSensorTuning_fast+0x3b4>
 8015cce:	f7ed f941 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015cda:	68f8      	ldr	r0, [r7, #12]
 8015cdc:	ed9f 2a80 	vldr	s4, [pc, #512]	; 8015ee0 <mode_WallSensorTuning_fast+0x3ac>
 8015ce0:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015ce4:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015ce8:	eddf 0a79 	vldr	s1, [pc, #484]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015cec:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8015eec <mode_WallSensorTuning_fast+0x3b8>
 8015cf0:	f7ed f930 	bl	8002f54 <straight_table2>
		break;
 8015cf4:	e0bf      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 8015cf6:	4b6f      	ldr	r3, [pc, #444]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015cf8:	2208      	movs	r2, #8
 8015cfa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8015cfc:	2300      	movs	r3, #0
 8015cfe:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8015d00:	2300      	movs	r3, #0
 8015d02:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8015d04:	2300      	movs	r3, #0
 8015d06:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 600, 600,10000,mode);
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	ed9f 2a74 	vldr	s4, [pc, #464]	; 8015ee0 <mode_WallSensorTuning_fast+0x3ac>
 8015d12:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d16:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d1a:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015d1e:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8015ee4 <mode_WallSensorTuning_fast+0x3b0>
 8015d22:	f7ed f917 	bl	8002f54 <straight_table2>
			mode.WallCutMode=4;
 8015d26:	2304      	movs	r3, #4
 8015d28:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 600, 600, 600,10000,mode);
 8015d2e:	68f8      	ldr	r0, [r7, #12]
 8015d30:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8015ee0 <mode_WallSensorTuning_fast+0x3ac>
 8015d34:	eddf 1a66 	vldr	s3, [pc, #408]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d38:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d3c:	eddf 0a64 	vldr	s1, [pc, #400]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d40:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8015ee8 <mode_WallSensorTuning_fast+0x3b4>
 8015d44:	f7ed f906 	bl	8002f54 <straight_table2>
			mode.WallControlMode=0;
 8015d48:	2300      	movs	r3, #0
 8015d4a:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 600, 0, 600,10000,mode);
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	ed9f 2a63 	vldr	s4, [pc, #396]	; 8015ee0 <mode_WallSensorTuning_fast+0x3ac>
 8015d56:	eddf 1a5e 	vldr	s3, [pc, #376]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d5a:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015d5e:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8015ed0 <mode_WallSensorTuning_fast+0x39c>
 8015d62:	ed9f 0a62 	vldr	s0, [pc, #392]	; 8015eec <mode_WallSensorTuning_fast+0x3b8>
 8015d66:	f7ed f8f5 	bl	8002f54 <straight_table2>
		break;
 8015d6a:	e084      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 6://斜め直進(制御あり)
			record_mode=7;
 8015d6c:	4b51      	ldr	r3, [pc, #324]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015d6e:	2207      	movs	r2, #7
 8015d70:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8015d76:	68f8      	ldr	r0, [r7, #12]
 8015d78:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8015ef0 <mode_WallSensorTuning_fast+0x3bc>
 8015d7c:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8015ef4 <mode_WallSensorTuning_fast+0x3c0>
 8015d80:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015d84:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015d88:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8015ef8 <mode_WallSensorTuning_fast+0x3c4>
 8015d8c:	f7ed f8e2 	bl	8002f54 <straight_table2>
		break;
 8015d90:	e071      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 8015d92:	4b48      	ldr	r3, [pc, #288]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015d94:	2209      	movs	r2, #9
 8015d96:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8015d9c:	68f8      	ldr	r0, [r7, #12]
 8015d9e:	ed9f 2a54 	vldr	s4, [pc, #336]	; 8015ef0 <mode_WallSensorTuning_fast+0x3bc>
 8015da2:	eddf 1a54 	vldr	s3, [pc, #336]	; 8015ef4 <mode_WallSensorTuning_fast+0x3c0>
 8015da6:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015daa:	eddf 0a46 	vldr	s1, [pc, #280]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015dae:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015ef8 <mode_WallSensorTuning_fast+0x3c4>
 8015db2:	f7ed f8cf 	bl	8002f54 <straight_table2>

		break;
 8015db6:	e05e      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015db8:	4b3e      	ldr	r3, [pc, #248]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015dba:	2207      	movs	r2, #7
 8015dbc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015dbe:	2303      	movs	r3, #3
 8015dc0:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	ed9f 2a4a 	vldr	s4, [pc, #296]	; 8015ef0 <mode_WallSensorTuning_fast+0x3bc>
 8015dc8:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8015efc <mode_WallSensorTuning_fast+0x3c8>
 8015dcc:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015dd0:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015dd4:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8015f00 <mode_WallSensorTuning_fast+0x3cc>
 8015dd8:	f7ed f8bc 	bl	8002f54 <straight_table2>
		break;
 8015ddc:	e04b      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 9:
			record_mode=8;
 8015dde:	4b35      	ldr	r3, [pc, #212]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015de0:	2208      	movs	r2, #8
 8015de2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015de4:	2303      	movs	r3, #3
 8015de6:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8015ef0 <mode_WallSensorTuning_fast+0x3bc>
 8015dee:	eddf 1a43 	vldr	s3, [pc, #268]	; 8015efc <mode_WallSensorTuning_fast+0x3c8>
 8015df2:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015df6:	eddf 0a33 	vldr	s1, [pc, #204]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015dfa:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8015f04 <mode_WallSensorTuning_fast+0x3d0>
 8015dfe:	f7ed f8a9 	bl	8002f54 <straight_table2>
		break;
 8015e02:	e038      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 10:
			record_mode=10;
 8015e04:	4b2b      	ldr	r3, [pc, #172]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015e06:	220a      	movs	r2, #10
 8015e08:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e0a:	2303      	movs	r3, #3
 8015e0c:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8015e0e:	68f8      	ldr	r0, [r7, #12]
 8015e10:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8015ef0 <mode_WallSensorTuning_fast+0x3bc>
 8015e14:	eddf 1a39 	vldr	s3, [pc, #228]	; 8015efc <mode_WallSensorTuning_fast+0x3c8>
 8015e18:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015e1c:	eddf 0a29 	vldr	s1, [pc, #164]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015e20:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8015f00 <mode_WallSensorTuning_fast+0x3cc>
 8015e24:	f7ed f896 	bl	8002f54 <straight_table2>
		break;
 8015e28:	e025      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 11:
			record_mode=11;
 8015e2a:	4b22      	ldr	r3, [pc, #136]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015e2c:	220b      	movs	r2, #11
 8015e2e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e30:	2303      	movs	r3, #3
 8015e32:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8015e34:	68f8      	ldr	r0, [r7, #12]
 8015e36:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8015ecc <mode_WallSensorTuning_fast+0x398>
 8015e3a:	eddf 1a33 	vldr	s3, [pc, #204]	; 8015f08 <mode_WallSensorTuning_fast+0x3d4>
 8015e3e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015e42:	eddf 0a20 	vldr	s1, [pc, #128]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015e46:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8015f00 <mode_WallSensorTuning_fast+0x3cc>
 8015e4a:	f7ed f883 	bl	8002f54 <straight_table2>
		break;
 8015e4e:	e012      	b.n	8015e76 <mode_WallSensorTuning_fast+0x342>
		case 12:
			record_mode=12;
 8015e50:	4b18      	ldr	r3, [pc, #96]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015e52:	220c      	movs	r2, #12
 8015e54:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015e56:	2303      	movs	r3, #3
 8015e58:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8015e5a:	68f8      	ldr	r0, [r7, #12]
 8015e5c:	ed9f 2a1b 	vldr	s4, [pc, #108]	; 8015ecc <mode_WallSensorTuning_fast+0x398>
 8015e60:	eddf 1a29 	vldr	s3, [pc, #164]	; 8015f08 <mode_WallSensorTuning_fast+0x3d4>
 8015e64:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015e68:	eddf 0a16 	vldr	s1, [pc, #88]	; 8015ec4 <mode_WallSensorTuning_fast+0x390>
 8015e6c:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8015f00 <mode_WallSensorTuning_fast+0x3cc>
 8015e70:	f7ed f870 	bl	8002f54 <straight_table2>
		break;
 8015e74:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8015e76:	4b0f      	ldr	r3, [pc, #60]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015e78:	2200      	movs	r2, #0
 8015e7a:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015e7c:	2003      	movs	r0, #3
 8015e7e:	f7f1 fdb3 	bl	80079e8 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015e82:	2003      	movs	r0, #3
 8015e84:	f7f1 fd88 	bl	8007998 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8015e88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015e8c:	f7f2 f8ac 	bl	8007fe8 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8015e90:	f7f1 fe0c 	bl	8007aac <pl_FunMotor_stop>
	record_mode=0;
 8015e94:	4b07      	ldr	r3, [pc, #28]	; (8015eb4 <mode_WallSensorTuning_fast+0x380>)
 8015e96:	2200      	movs	r2, #0
 8015e98:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8015e9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015e9e:	f7f2 f8a3 	bl	8007fe8 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8015ea2:	2000      	movs	r0, #0
 8015ea4:	f7f1 fd6e 	bl	8007984 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015ea8:	e033      	b.n	8015f12 <mode_WallSensorTuning_fast+0x3de>
 8015eaa:	bf00      	nop
 8015eac:	3f0f5c29 	.word	0x3f0f5c29
 8015eb0:	20000264 	.word	0x20000264
 8015eb4:	2000d96c 	.word	0x2000d96c
 8015eb8:	20000808 	.word	0x20000808
 8015ebc:	46bb8000 	.word	0x46bb8000
 8015ec0:	459c4000 	.word	0x459c4000
 8015ec4:	00000000 	.word	0x00000000
 8015ec8:	44e39000 	.word	0x44e39000
 8015ecc:	466a6000 	.word	0x466a6000
 8015ed0:	44160000 	.word	0x44160000
 8015ed4:	42cd0000 	.word	0x42cd0000
 8015ed8:	41b40000 	.word	0x41b40000
 8015edc:	42e10000 	.word	0x42e10000
 8015ee0:	461c4000 	.word	0x461c4000
 8015ee4:	4321c77b 	.word	0x4321c77b
 8015ee8:	41fe8ef6 	.word	0x41fe8ef6
 8015eec:	42beeb39 	.word	0x42beeb39
 8015ef0:	469c4000 	.word	0x469c4000
 8015ef4:	44fa0000 	.word	0x44fa0000
 8015ef8:	445ebd17 	.word	0x445ebd17
 8015efc:	455ac000 	.word	0x455ac000
 8015f00:	443eeb39 	.word	0x443eeb39
 8015f04:	4484977b 	.word	0x4484977b
 8015f08:	453b8000 	.word	0x453b8000
		HAL_Delay(1);
 8015f0c:	2001      	movs	r0, #1
 8015f0e:	f001 fca9 	bl	8017864 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f12:	4b0e      	ldr	r3, [pc, #56]	; (8015f4c <mode_WallSensorTuning_fast+0x418>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f1a:	ddf7      	ble.n	8015f0c <mode_WallSensorTuning_fast+0x3d8>
 8015f1c:	4b0b      	ldr	r3, [pc, #44]	; (8015f4c <mode_WallSensorTuning_fast+0x418>)
 8015f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f22:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f26:	ddf1      	ble.n	8015f0c <mode_WallSensorTuning_fast+0x3d8>
 8015f28:	4b08      	ldr	r3, [pc, #32]	; (8015f4c <mode_WallSensorTuning_fast+0x418>)
 8015f2a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015f2e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f32:	ddeb      	ble.n	8015f0c <mode_WallSensorTuning_fast+0x3d8>
	}
	pl_r_blue_LED(ON);
 8015f34:	2001      	movs	r0, #1
 8015f36:	f7f1 f881 	bl	800703c <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8015f3a:	2001      	movs	r0, #1
 8015f3c:	f7f1 f890 	bl	8007060 <pl_l_blue_LED>
	record_print();
 8015f40:	f000 f862 	bl	8016008 <record_print>



}
 8015f44:	bf00      	nop
 8015f46:	3710      	adds	r7, #16
 8015f48:	46bd      	mov	sp, r7
 8015f4a:	bd80      	pop	{r7, pc}
 8015f4c:	200002b8 	.word	0x200002b8

08015f50 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8015f50:	b480      	push	{r7}
 8015f52:	af00      	add	r7, sp, #0
	record_mode = 0;
 8015f54:	4b06      	ldr	r3, [pc, #24]	; (8015f70 <record_reset+0x20>)
 8015f56:	2200      	movs	r2, #0
 8015f58:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8015f5a:	4b06      	ldr	r3, [pc, #24]	; (8015f74 <record_reset+0x24>)
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8015f60:	4b05      	ldr	r3, [pc, #20]	; (8015f78 <record_reset+0x28>)
 8015f62:	2200      	movs	r2, #0
 8015f64:	701a      	strb	r2, [r3, #0]
}
 8015f66:	bf00      	nop
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr
 8015f70:	2000d96c 	.word	0x2000d96c
 8015f74:	2000d970 	.word	0x2000d970
 8015f78:	2000d978 	.word	0x2000d978

08015f7c <record_data>:

void record_data(float *input_record_data, int numlen) {
 8015f7c:	b490      	push	{r4, r7}
 8015f7e:	b084      	sub	sp, #16
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
 8015f84:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8015f86:	2300      	movs	r3, #0
 8015f88:	60fb      	str	r3, [r7, #12]
 8015f8a:	e013      	b.n	8015fb4 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	009b      	lsls	r3, r3, #2
 8015f90:	687a      	ldr	r2, [r7, #4]
 8015f92:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8015f94:	4b18      	ldr	r3, [pc, #96]	; (8015ff8 <record_data+0x7c>)
 8015f96:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8015f98:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8015f9a:	4818      	ldr	r0, [pc, #96]	; (8015ffc <record_data+0x80>)
 8015f9c:	68f9      	ldr	r1, [r7, #12]
 8015f9e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8015fa2:	fb04 f101 	mul.w	r1, r4, r1
 8015fa6:	440b      	add	r3, r1
 8015fa8:	009b      	lsls	r3, r3, #2
 8015faa:	4403      	add	r3, r0
 8015fac:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	3301      	adds	r3, #1
 8015fb2:	60fb      	str	r3, [r7, #12]
 8015fb4:	68fa      	ldr	r2, [r7, #12]
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	429a      	cmp	r2, r3
 8015fba:	dbe7      	blt.n	8015f8c <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8015fbc:	4b10      	ldr	r3, [pc, #64]	; (8016000 <record_data+0x84>)
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	2b01      	cmp	r3, #1
 8015fc2:	d103      	bne.n	8015fcc <record_data+0x50>
		record_end_point = record_time;
 8015fc4:	4b0c      	ldr	r3, [pc, #48]	; (8015ff8 <record_data+0x7c>)
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	4a0e      	ldr	r2, [pc, #56]	; (8016004 <record_data+0x88>)
 8015fca:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8015fcc:	4b0a      	ldr	r3, [pc, #40]	; (8015ff8 <record_data+0x7c>)
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	3301      	adds	r3, #1
 8015fd2:	4a09      	ldr	r2, [pc, #36]	; (8015ff8 <record_data+0x7c>)
 8015fd4:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8015fd6:	4b08      	ldr	r3, [pc, #32]	; (8015ff8 <record_data+0x7c>)
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8015fde:	4293      	cmp	r3, r2
 8015fe0:	dd05      	ble.n	8015fee <record_data+0x72>
		record_time = 0;
 8015fe2:	4b05      	ldr	r3, [pc, #20]	; (8015ff8 <record_data+0x7c>)
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8015fe8:	4b05      	ldr	r3, [pc, #20]	; (8016000 <record_data+0x84>)
 8015fea:	2201      	movs	r2, #1
 8015fec:	701a      	strb	r2, [r3, #0]
	}

}
 8015fee:	bf00      	nop
 8015ff0:	3710      	adds	r7, #16
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bc90      	pop	{r4, r7}
 8015ff6:	4770      	bx	lr
 8015ff8:	2000d970 	.word	0x2000d970
 8015ffc:	20001dec 	.word	0x20001dec
 8016000:	2000d978 	.word	0x2000d978
 8016004:	2000d974 	.word	0x2000d974

08016008 <record_print>:

void record_print(void) {
 8016008:	b580      	push	{r7, lr}
 801600a:	b084      	sub	sp, #16
 801600c:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 801600e:	4b3a      	ldr	r3, [pc, #232]	; (80160f8 <record_print+0xf0>)
 8016010:	781b      	ldrb	r3, [r3, #0]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d12e      	bne.n	8016074 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016016:	2300      	movs	r3, #0
 8016018:	60fb      	str	r3, [r7, #12]
 801601a:	e025      	b.n	8016068 <record_print+0x60>

			printf("%d", a);
 801601c:	68f9      	ldr	r1, [r7, #12]
 801601e:	4837      	ldr	r0, [pc, #220]	; (80160fc <record_print+0xf4>)
 8016020:	f009 fb72 	bl	801f708 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016024:	2300      	movs	r3, #0
 8016026:	607b      	str	r3, [r7, #4]
 8016028:	e015      	b.n	8016056 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 801602a:	4935      	ldr	r1, [pc, #212]	; (8016100 <record_print+0xf8>)
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016032:	fb03 f202 	mul.w	r2, r3, r2
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	4413      	add	r3, r2
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	440b      	add	r3, r1
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	4618      	mov	r0, r3
 8016042:	f7ea faa9 	bl	8000598 <__aeabi_f2d>
 8016046:	4602      	mov	r2, r0
 8016048:	460b      	mov	r3, r1
 801604a:	482e      	ldr	r0, [pc, #184]	; (8016104 <record_print+0xfc>)
 801604c:	f009 fb5c 	bl	801f708 <iprintf>
					record_count++) {
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	3301      	adds	r3, #1
 8016054:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	2b03      	cmp	r3, #3
 801605a:	dde6      	ble.n	801602a <record_print+0x22>
			}
			printf("\n");
 801605c:	200a      	movs	r0, #10
 801605e:	f009 fb6b 	bl	801f738 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	3301      	adds	r3, #1
 8016066:	60fb      	str	r3, [r7, #12]
 8016068:	4b27      	ldr	r3, [pc, #156]	; (8016108 <record_print+0x100>)
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	68fa      	ldr	r2, [r7, #12]
 801606e:	429a      	cmp	r2, r3
 8016070:	dbd4      	blt.n	801601c <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016072:	e03c      	b.n	80160ee <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016074:	2300      	movs	r3, #0
 8016076:	60fb      	str	r3, [r7, #12]
 8016078:	e034      	b.n	80160e4 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 801607a:	4b24      	ldr	r3, [pc, #144]	; (801610c <record_print+0x104>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	3301      	adds	r3, #1
 8016080:	68fa      	ldr	r2, [r7, #12]
 8016082:	4413      	add	r3, r2
 8016084:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801608c:	4293      	cmp	r3, r2
 801608e:	dd03      	ble.n	8016098 <record_print+0x90>
				time_index -= max_record_time;
 8016090:	68bb      	ldr	r3, [r7, #8]
 8016092:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016096:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016098:	68f9      	ldr	r1, [r7, #12]
 801609a:	4818      	ldr	r0, [pc, #96]	; (80160fc <record_print+0xf4>)
 801609c:	f009 fb34 	bl	801f708 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 80160a0:	2300      	movs	r3, #0
 80160a2:	603b      	str	r3, [r7, #0]
 80160a4:	e015      	b.n	80160d2 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 80160a6:	4916      	ldr	r1, [pc, #88]	; (8016100 <record_print+0xf8>)
 80160a8:	683b      	ldr	r3, [r7, #0]
 80160aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80160ae:	fb03 f202 	mul.w	r2, r3, r2
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	4413      	add	r3, r2
 80160b6:	009b      	lsls	r3, r3, #2
 80160b8:	440b      	add	r3, r1
 80160ba:	681b      	ldr	r3, [r3, #0]
 80160bc:	4618      	mov	r0, r3
 80160be:	f7ea fa6b 	bl	8000598 <__aeabi_f2d>
 80160c2:	4602      	mov	r2, r0
 80160c4:	460b      	mov	r3, r1
 80160c6:	480f      	ldr	r0, [pc, #60]	; (8016104 <record_print+0xfc>)
 80160c8:	f009 fb1e 	bl	801f708 <iprintf>
					record_count++) {
 80160cc:	683b      	ldr	r3, [r7, #0]
 80160ce:	3301      	adds	r3, #1
 80160d0:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 80160d2:	683b      	ldr	r3, [r7, #0]
 80160d4:	2b03      	cmp	r3, #3
 80160d6:	dde6      	ble.n	80160a6 <record_print+0x9e>
			printf("\n");
 80160d8:	200a      	movs	r0, #10
 80160da:	f009 fb2d 	bl	801f738 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	3301      	adds	r3, #1
 80160e2:	60fb      	str	r3, [r7, #12]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80160ea:	4293      	cmp	r3, r2
 80160ec:	ddc5      	ble.n	801607a <record_print+0x72>
}
 80160ee:	bf00      	nop
 80160f0:	3710      	adds	r7, #16
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
 80160f6:	bf00      	nop
 80160f8:	2000d978 	.word	0x2000d978
 80160fc:	08022110 	.word	0x08022110
 8016100:	20001dec 	.word	0x20001dec
 8016104:	08022114 	.word	0x08022114
 8016108:	2000d970 	.word	0x2000d970
 801610c:	2000d974 	.word	0x2000d974

08016110 <interrupt_record>:

void interrupt_record(void) {
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016116:	4baf      	ldr	r3, [pc, #700]	; (80163d4 <interrupt_record+0x2c4>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	2b01      	cmp	r3, #1
 801611c:	d110      	bne.n	8016140 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 801611e:	4bae      	ldr	r3, [pc, #696]	; (80163d8 <interrupt_record+0x2c8>)
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016124:	4bad      	ldr	r3, [pc, #692]	; (80163dc <interrupt_record+0x2cc>)
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 801612a:	4bad      	ldr	r3, [pc, #692]	; (80163e0 <interrupt_record+0x2d0>)
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016130:	4bac      	ldr	r3, [pc, #688]	; (80163e4 <interrupt_record+0x2d4>)
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016136:	463b      	mov	r3, r7
 8016138:	2104      	movs	r1, #4
 801613a:	4618      	mov	r0, r3
 801613c:	f7ff ff1e 	bl	8015f7c <record_data>
		}
	if (record_mode == 2) {
 8016140:	4ba4      	ldr	r3, [pc, #656]	; (80163d4 <interrupt_record+0x2c4>)
 8016142:	781b      	ldrb	r3, [r3, #0]
 8016144:	2b02      	cmp	r3, #2
 8016146:	d11b      	bne.n	8016180 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016148:	4ba7      	ldr	r3, [pc, #668]	; (80163e8 <interrupt_record+0x2d8>)
 801614a:	681b      	ldr	r3, [r3, #0]
 801614c:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 801614e:	4ba7      	ldr	r3, [pc, #668]	; (80163ec <interrupt_record+0x2dc>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016154:	4ba6      	ldr	r3, [pc, #664]	; (80163f0 <interrupt_record+0x2e0>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 801615a:	4ba6      	ldr	r3, [pc, #664]	; (80163f4 <interrupt_record+0x2e4>)
 801615c:	ed93 7a00 	vldr	s14, [r3]
 8016160:	4ba5      	ldr	r3, [pc, #660]	; (80163f8 <interrupt_record+0x2e8>)
 8016162:	edd3 7a00 	vldr	s15, [r3]
 8016166:	ee37 7a27 	vadd.f32	s14, s14, s15
 801616a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801616e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016172:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016176:	463b      	mov	r3, r7
 8016178:	2104      	movs	r1, #4
 801617a:	4618      	mov	r0, r3
 801617c:	f7ff fefe 	bl	8015f7c <record_data>
		}
	if (record_mode == 3) {
 8016180:	4b94      	ldr	r3, [pc, #592]	; (80163d4 <interrupt_record+0x2c4>)
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	2b03      	cmp	r3, #3
 8016186:	d126      	bne.n	80161d6 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016188:	4b99      	ldr	r3, [pc, #612]	; (80163f0 <interrupt_record+0x2e0>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 801618e:	4b98      	ldr	r3, [pc, #608]	; (80163f0 <interrupt_record+0x2e0>)
 8016190:	689b      	ldr	r3, [r3, #8]
 8016192:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016194:	4b97      	ldr	r3, [pc, #604]	; (80163f4 <interrupt_record+0x2e4>)
 8016196:	ed93 7a00 	vldr	s14, [r3]
 801619a:	4b97      	ldr	r3, [pc, #604]	; (80163f8 <interrupt_record+0x2e8>)
 801619c:	edd3 7a00 	vldr	s15, [r3]
 80161a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161ac:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80161b0:	4b92      	ldr	r3, [pc, #584]	; (80163fc <interrupt_record+0x2ec>)
 80161b2:	ed93 7a00 	vldr	s14, [r3]
 80161b6:	4b92      	ldr	r3, [pc, #584]	; (8016400 <interrupt_record+0x2f0>)
 80161b8:	edd3 7a00 	vldr	s15, [r3]
 80161bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161c0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161c8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80161cc:	463b      	mov	r3, r7
 80161ce:	2104      	movs	r1, #4
 80161d0:	4618      	mov	r0, r3
 80161d2:	f7ff fed3 	bl	8015f7c <record_data>
		}
	if (record_mode == 4) { //距離の比較
 80161d6:	4b7f      	ldr	r3, [pc, #508]	; (80163d4 <interrupt_record+0x2c4>)
 80161d8:	781b      	ldrb	r3, [r3, #0]
 80161da:	2b04      	cmp	r3, #4
 80161dc:	d126      	bne.n	801622c <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 80161de:	4b84      	ldr	r3, [pc, #528]	; (80163f0 <interrupt_record+0x2e0>)
 80161e0:	689b      	ldr	r3, [r3, #8]
 80161e2:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 80161e4:	4b7e      	ldr	r3, [pc, #504]	; (80163e0 <interrupt_record+0x2d0>)
 80161e6:	ed93 7a00 	vldr	s14, [r3]
 80161ea:	4b7e      	ldr	r3, [pc, #504]	; (80163e4 <interrupt_record+0x2d4>)
 80161ec:	edd3 7a00 	vldr	s15, [r3]
 80161f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80161f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80161f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80161fc:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016200:	4b80      	ldr	r3, [pc, #512]	; (8016404 <interrupt_record+0x2f4>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016206:	4b7d      	ldr	r3, [pc, #500]	; (80163fc <interrupt_record+0x2ec>)
 8016208:	ed93 7a00 	vldr	s14, [r3]
 801620c:	4b7c      	ldr	r3, [pc, #496]	; (8016400 <interrupt_record+0x2f0>)
 801620e:	edd3 7a00 	vldr	s15, [r3]
 8016212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016216:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801621a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801621e:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016222:	463b      	mov	r3, r7
 8016224:	2104      	movs	r1, #4
 8016226:	4618      	mov	r0, r3
 8016228:	f7ff fea8 	bl	8015f7c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801622c:	4b69      	ldr	r3, [pc, #420]	; (80163d4 <interrupt_record+0x2c4>)
 801622e:	781b      	ldrb	r3, [r3, #0]
 8016230:	2b05      	cmp	r3, #5
 8016232:	d110      	bne.n	8016256 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016234:	4b6e      	ldr	r3, [pc, #440]	; (80163f0 <interrupt_record+0x2e0>)
 8016236:	689b      	ldr	r3, [r3, #8]
 8016238:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801623a:	4b69      	ldr	r3, [pc, #420]	; (80163e0 <interrupt_record+0x2d0>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016240:	4b68      	ldr	r3, [pc, #416]	; (80163e4 <interrupt_record+0x2d4>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016246:	4b6f      	ldr	r3, [pc, #444]	; (8016404 <interrupt_record+0x2f4>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801624c:	463b      	mov	r3, r7
 801624e:	2104      	movs	r1, #4
 8016250:	4618      	mov	r0, r3
 8016252:	f7ff fe93 	bl	8015f7c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016256:	4b5f      	ldr	r3, [pc, #380]	; (80163d4 <interrupt_record+0x2c4>)
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	2b05      	cmp	r3, #5
 801625c:	d110      	bne.n	8016280 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 801625e:	4b6a      	ldr	r3, [pc, #424]	; (8016408 <interrupt_record+0x2f8>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016264:	4b5e      	ldr	r3, [pc, #376]	; (80163e0 <interrupt_record+0x2d0>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 801626a:	4b5e      	ldr	r3, [pc, #376]	; (80163e4 <interrupt_record+0x2d4>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016270:	4b64      	ldr	r3, [pc, #400]	; (8016404 <interrupt_record+0x2f4>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016276:	463b      	mov	r3, r7
 8016278:	2104      	movs	r1, #4
 801627a:	4618      	mov	r0, r3
 801627c:	f7ff fe7e 	bl	8015f7c <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8016280:	4b54      	ldr	r3, [pc, #336]	; (80163d4 <interrupt_record+0x2c4>)
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	2b06      	cmp	r3, #6
 8016286:	d110      	bne.n	80162aa <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8016288:	4b59      	ldr	r3, [pc, #356]	; (80163f0 <interrupt_record+0x2e0>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 801628e:	4b5f      	ldr	r3, [pc, #380]	; (801640c <interrupt_record+0x2fc>)
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8016294:	4b5e      	ldr	r3, [pc, #376]	; (8016410 <interrupt_record+0x300>)
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 801629a:	4b5e      	ldr	r3, [pc, #376]	; (8016414 <interrupt_record+0x304>)
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 80162a0:	463b      	mov	r3, r7
 80162a2:	2104      	movs	r1, #4
 80162a4:	4618      	mov	r0, r3
 80162a6:	f7ff fe69 	bl	8015f7c <record_data>
			}
	if (record_mode == 7) {
 80162aa:	4b4a      	ldr	r3, [pc, #296]	; (80163d4 <interrupt_record+0x2c4>)
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	2b07      	cmp	r3, #7
 80162b0:	d125      	bne.n	80162fe <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80162b2:	4b59      	ldr	r3, [pc, #356]	; (8016418 <interrupt_record+0x308>)
 80162b4:	681b      	ldr	r3, [r3, #0]
 80162b6:	ee07 3a90 	vmov	s15, r3
 80162ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162be:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 80162c2:	4b56      	ldr	r3, [pc, #344]	; (801641c <interrupt_record+0x30c>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	ee07 3a90 	vmov	s15, r3
 80162ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162ce:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 80162d2:	4b51      	ldr	r3, [pc, #324]	; (8016418 <interrupt_record+0x308>)
 80162d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80162d8:	ee07 3a90 	vmov	s15, r3
 80162dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162e0:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 80162e4:	4b4d      	ldr	r3, [pc, #308]	; (801641c <interrupt_record+0x30c>)
 80162e6:	691b      	ldr	r3, [r3, #16]
 80162e8:	ee07 3a90 	vmov	s15, r3
 80162ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80162f0:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80162f4:	463b      	mov	r3, r7
 80162f6:	2104      	movs	r1, #4
 80162f8:	4618      	mov	r0, r3
 80162fa:	f7ff fe3f 	bl	8015f7c <record_data>
		}
	if (record_mode == 8) {
 80162fe:	4b35      	ldr	r3, [pc, #212]	; (80163d4 <interrupt_record+0x2c4>)
 8016300:	781b      	ldrb	r3, [r3, #0]
 8016302:	2b08      	cmp	r3, #8
 8016304:	d125      	bne.n	8016352 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8016306:	4b44      	ldr	r3, [pc, #272]	; (8016418 <interrupt_record+0x308>)
 8016308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801630a:	ee07 3a90 	vmov	s15, r3
 801630e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016312:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8016316:	4b42      	ldr	r3, [pc, #264]	; (8016420 <interrupt_record+0x310>)
 8016318:	685b      	ldr	r3, [r3, #4]
 801631a:	ee07 3a90 	vmov	s15, r3
 801631e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016322:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8016326:	4b3c      	ldr	r3, [pc, #240]	; (8016418 <interrupt_record+0x308>)
 8016328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801632c:	ee07 3a90 	vmov	s15, r3
 8016330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016334:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8016338:	4b39      	ldr	r3, [pc, #228]	; (8016420 <interrupt_record+0x310>)
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	ee07 3a90 	vmov	s15, r3
 8016340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016344:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016348:	463b      	mov	r3, r7
 801634a:	2104      	movs	r1, #4
 801634c:	4618      	mov	r0, r3
 801634e:	f7ff fe15 	bl	8015f7c <record_data>
		}
	if (record_mode == 9) { //90
 8016352:	4b20      	ldr	r3, [pc, #128]	; (80163d4 <interrupt_record+0x2c4>)
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	2b09      	cmp	r3, #9
 8016358:	d11b      	bne.n	8016392 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 801635a:	4b2f      	ldr	r3, [pc, #188]	; (8016418 <interrupt_record+0x308>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	ee07 3a90 	vmov	s15, r3
 8016362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016366:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 801636a:	4b2b      	ldr	r3, [pc, #172]	; (8016418 <interrupt_record+0x308>)
 801636c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016370:	ee07 3a90 	vmov	s15, r3
 8016374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016378:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 801637c:	4b29      	ldr	r3, [pc, #164]	; (8016424 <interrupt_record+0x314>)
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8016382:	4b29      	ldr	r3, [pc, #164]	; (8016428 <interrupt_record+0x318>)
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016388:	463b      	mov	r3, r7
 801638a:	2104      	movs	r1, #4
 801638c:	4618      	mov	r0, r3
 801638e:	f7ff fdf5 	bl	8015f7c <record_data>
		}
	if (record_mode == 10) { //90
 8016392:	4b10      	ldr	r3, [pc, #64]	; (80163d4 <interrupt_record+0x2c4>)
 8016394:	781b      	ldrb	r3, [r3, #0]
 8016396:	2b0a      	cmp	r3, #10
 8016398:	d148      	bne.n	801642c <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 801639a:	4b1f      	ldr	r3, [pc, #124]	; (8016418 <interrupt_record+0x308>)
 801639c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801639e:	ee07 3a90 	vmov	s15, r3
 80163a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163a6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80163aa:	4b1b      	ldr	r3, [pc, #108]	; (8016418 <interrupt_record+0x308>)
 80163ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80163b0:	ee07 3a90 	vmov	s15, r3
 80163b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80163b8:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80163bc:	4b19      	ldr	r3, [pc, #100]	; (8016424 <interrupt_record+0x314>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80163c2:	4b19      	ldr	r3, [pc, #100]	; (8016428 <interrupt_record+0x318>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80163c8:	463b      	mov	r3, r7
 80163ca:	2104      	movs	r1, #4
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7ff fdd5 	bl	8015f7c <record_data>
 80163d2:	e02b      	b.n	801642c <interrupt_record+0x31c>
 80163d4:	2000d96c 	.word	0x2000d96c
 80163d8:	2000022c 	.word	0x2000022c
 80163dc:	20000228 	.word	0x20000228
 80163e0:	20000224 	.word	0x20000224
 80163e4:	20000220 	.word	0x20000220
 80163e8:	200004e4 	.word	0x200004e4
 80163ec:	20000268 	.word	0x20000268
 80163f0:	200004d8 	.word	0x200004d8
 80163f4:	2000025c 	.word	0x2000025c
 80163f8:	20000258 	.word	0x20000258
 80163fc:	20000254 	.word	0x20000254
 8016400:	20000250 	.word	0x20000250
 8016404:	2000027c 	.word	0x2000027c
 8016408:	2000052c 	.word	0x2000052c
 801640c:	20000238 	.word	0x20000238
 8016410:	2000023c 	.word	0x2000023c
 8016414:	20000278 	.word	0x20000278
 8016418:	200002b8 	.word	0x200002b8
 801641c:	20000448 	.word	0x20000448
 8016420:	2000045c 	.word	0x2000045c
 8016424:	200005e0 	.word	0x200005e0
 8016428:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 801642c:	bf00      	nop
 801642e:	3710      	adds	r7, #16
 8016430:	46bd      	mov	sp, r7
 8016432:	bd80      	pop	{r7, pc}

08016434 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8016438:	4b1b      	ldr	r3, [pc, #108]	; (80164a8 <MX_SPI1_Init+0x74>)
 801643a:	4a1c      	ldr	r2, [pc, #112]	; (80164ac <MX_SPI1_Init+0x78>)
 801643c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801643e:	4b1a      	ldr	r3, [pc, #104]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016440:	f44f 7282 	mov.w	r2, #260	; 0x104
 8016444:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8016446:	4b18      	ldr	r3, [pc, #96]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016448:	2200      	movs	r2, #0
 801644a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801644c:	4b16      	ldr	r3, [pc, #88]	; (80164a8 <MX_SPI1_Init+0x74>)
 801644e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8016452:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8016454:	4b14      	ldr	r3, [pc, #80]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016456:	2200      	movs	r2, #0
 8016458:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801645a:	4b13      	ldr	r3, [pc, #76]	; (80164a8 <MX_SPI1_Init+0x74>)
 801645c:	2200      	movs	r2, #0
 801645e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8016460:	4b11      	ldr	r3, [pc, #68]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016466:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8016468:	4b0f      	ldr	r3, [pc, #60]	; (80164a8 <MX_SPI1_Init+0x74>)
 801646a:	2210      	movs	r2, #16
 801646c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801646e:	4b0e      	ldr	r3, [pc, #56]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016470:	2200      	movs	r2, #0
 8016472:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8016474:	4b0c      	ldr	r3, [pc, #48]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016476:	2200      	movs	r2, #0
 8016478:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801647a:	4b0b      	ldr	r3, [pc, #44]	; (80164a8 <MX_SPI1_Init+0x74>)
 801647c:	2200      	movs	r2, #0
 801647e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8016480:	4b09      	ldr	r3, [pc, #36]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016482:	2207      	movs	r2, #7
 8016484:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016486:	4b08      	ldr	r3, [pc, #32]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016488:	2200      	movs	r2, #0
 801648a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801648c:	4b06      	ldr	r3, [pc, #24]	; (80164a8 <MX_SPI1_Init+0x74>)
 801648e:	2208      	movs	r2, #8
 8016490:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8016492:	4805      	ldr	r0, [pc, #20]	; (80164a8 <MX_SPI1_Init+0x74>)
 8016494:	f005 fbda 	bl	801bc4c <HAL_SPI_Init>
 8016498:	4603      	mov	r3, r0
 801649a:	2b00      	cmp	r3, #0
 801649c:	d001      	beq.n	80164a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 801649e:	f7f3 fcfa 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80164a2:	bf00      	nop
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	2000d97c 	.word	0x2000d97c
 80164ac:	40013000 	.word	0x40013000

080164b0 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80164b4:	4b1b      	ldr	r3, [pc, #108]	; (8016524 <MX_SPI3_Init+0x74>)
 80164b6:	4a1c      	ldr	r2, [pc, #112]	; (8016528 <MX_SPI3_Init+0x78>)
 80164b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80164ba:	4b1a      	ldr	r3, [pc, #104]	; (8016524 <MX_SPI3_Init+0x74>)
 80164bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80164c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80164c2:	4b18      	ldr	r3, [pc, #96]	; (8016524 <MX_SPI3_Init+0x74>)
 80164c4:	2200      	movs	r2, #0
 80164c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80164c8:	4b16      	ldr	r3, [pc, #88]	; (8016524 <MX_SPI3_Init+0x74>)
 80164ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80164ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80164d0:	4b14      	ldr	r3, [pc, #80]	; (8016524 <MX_SPI3_Init+0x74>)
 80164d2:	2200      	movs	r2, #0
 80164d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80164d6:	4b13      	ldr	r3, [pc, #76]	; (8016524 <MX_SPI3_Init+0x74>)
 80164d8:	2201      	movs	r2, #1
 80164da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80164dc:	4b11      	ldr	r3, [pc, #68]	; (8016524 <MX_SPI3_Init+0x74>)
 80164de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80164e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80164e4:	4b0f      	ldr	r3, [pc, #60]	; (8016524 <MX_SPI3_Init+0x74>)
 80164e6:	2208      	movs	r2, #8
 80164e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80164ea:	4b0e      	ldr	r3, [pc, #56]	; (8016524 <MX_SPI3_Init+0x74>)
 80164ec:	2200      	movs	r2, #0
 80164ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80164f0:	4b0c      	ldr	r3, [pc, #48]	; (8016524 <MX_SPI3_Init+0x74>)
 80164f2:	2200      	movs	r2, #0
 80164f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80164f6:	4b0b      	ldr	r3, [pc, #44]	; (8016524 <MX_SPI3_Init+0x74>)
 80164f8:	2200      	movs	r2, #0
 80164fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80164fc:	4b09      	ldr	r3, [pc, #36]	; (8016524 <MX_SPI3_Init+0x74>)
 80164fe:	2207      	movs	r2, #7
 8016500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8016502:	4b08      	ldr	r3, [pc, #32]	; (8016524 <MX_SPI3_Init+0x74>)
 8016504:	2200      	movs	r2, #0
 8016506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8016508:	4b06      	ldr	r3, [pc, #24]	; (8016524 <MX_SPI3_Init+0x74>)
 801650a:	2200      	movs	r2, #0
 801650c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 801650e:	4805      	ldr	r0, [pc, #20]	; (8016524 <MX_SPI3_Init+0x74>)
 8016510:	f005 fb9c 	bl	801bc4c <HAL_SPI_Init>
 8016514:	4603      	mov	r3, r0
 8016516:	2b00      	cmp	r3, #0
 8016518:	d001      	beq.n	801651e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 801651a:	f7f3 fcbc 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 801651e:	bf00      	nop
 8016520:	bd80      	pop	{r7, pc}
 8016522:	bf00      	nop
 8016524:	2000d9e0 	.word	0x2000d9e0
 8016528:	40003c00 	.word	0x40003c00

0801652c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b08c      	sub	sp, #48	; 0x30
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016534:	f107 031c 	add.w	r3, r7, #28
 8016538:	2200      	movs	r2, #0
 801653a:	601a      	str	r2, [r3, #0]
 801653c:	605a      	str	r2, [r3, #4]
 801653e:	609a      	str	r2, [r3, #8]
 8016540:	60da      	str	r2, [r3, #12]
 8016542:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	4a3d      	ldr	r2, [pc, #244]	; (8016640 <HAL_SPI_MspInit+0x114>)
 801654a:	4293      	cmp	r3, r2
 801654c:	d129      	bne.n	80165a2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801654e:	4b3d      	ldr	r3, [pc, #244]	; (8016644 <HAL_SPI_MspInit+0x118>)
 8016550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016552:	4a3c      	ldr	r2, [pc, #240]	; (8016644 <HAL_SPI_MspInit+0x118>)
 8016554:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8016558:	6613      	str	r3, [r2, #96]	; 0x60
 801655a:	4b3a      	ldr	r3, [pc, #232]	; (8016644 <HAL_SPI_MspInit+0x118>)
 801655c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801655e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016562:	61bb      	str	r3, [r7, #24]
 8016564:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016566:	4b37      	ldr	r3, [pc, #220]	; (8016644 <HAL_SPI_MspInit+0x118>)
 8016568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801656a:	4a36      	ldr	r2, [pc, #216]	; (8016644 <HAL_SPI_MspInit+0x118>)
 801656c:	f043 0301 	orr.w	r3, r3, #1
 8016570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016572:	4b34      	ldr	r3, [pc, #208]	; (8016644 <HAL_SPI_MspInit+0x118>)
 8016574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016576:	f003 0301 	and.w	r3, r3, #1
 801657a:	617b      	str	r3, [r7, #20]
 801657c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 801657e:	23e0      	movs	r3, #224	; 0xe0
 8016580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016582:	2302      	movs	r3, #2
 8016584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016586:	2300      	movs	r3, #0
 8016588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801658a:	2300      	movs	r3, #0
 801658c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801658e:	2305      	movs	r3, #5
 8016590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016592:	f107 031c 	add.w	r3, r7, #28
 8016596:	4619      	mov	r1, r3
 8016598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801659c:	f004 f99c 	bl	801a8d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80165a0:	e049      	b.n	8016636 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	4a28      	ldr	r2, [pc, #160]	; (8016648 <HAL_SPI_MspInit+0x11c>)
 80165a8:	4293      	cmp	r3, r2
 80165aa:	d144      	bne.n	8016636 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80165ac:	4b25      	ldr	r3, [pc, #148]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165b0:	4a24      	ldr	r2, [pc, #144]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80165b6:	6593      	str	r3, [r2, #88]	; 0x58
 80165b8:	4b22      	ldr	r3, [pc, #136]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80165c0:	613b      	str	r3, [r7, #16]
 80165c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80165c4:	4b1f      	ldr	r3, [pc, #124]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165c8:	4a1e      	ldr	r2, [pc, #120]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165ca:	f043 0304 	orr.w	r3, r3, #4
 80165ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80165d0:	4b1c      	ldr	r3, [pc, #112]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165d4:	f003 0304 	and.w	r3, r3, #4
 80165d8:	60fb      	str	r3, [r7, #12]
 80165da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80165dc:	4b19      	ldr	r3, [pc, #100]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165e0:	4a18      	ldr	r2, [pc, #96]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165e2:	f043 0302 	orr.w	r3, r3, #2
 80165e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80165e8:	4b16      	ldr	r3, [pc, #88]	; (8016644 <HAL_SPI_MspInit+0x118>)
 80165ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80165ec:	f003 0302 	and.w	r3, r3, #2
 80165f0:	60bb      	str	r3, [r7, #8]
 80165f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80165f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80165f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80165fa:	2302      	movs	r3, #2
 80165fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80165fe:	2300      	movs	r3, #0
 8016600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016602:	2300      	movs	r3, #0
 8016604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8016606:	2306      	movs	r3, #6
 8016608:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801660a:	f107 031c 	add.w	r3, r7, #28
 801660e:	4619      	mov	r1, r3
 8016610:	480e      	ldr	r0, [pc, #56]	; (801664c <HAL_SPI_MspInit+0x120>)
 8016612:	f004 f961 	bl	801a8d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8016616:	2320      	movs	r3, #32
 8016618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801661a:	2302      	movs	r3, #2
 801661c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801661e:	2300      	movs	r3, #0
 8016620:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016622:	2300      	movs	r3, #0
 8016624:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8016626:	2306      	movs	r3, #6
 8016628:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801662a:	f107 031c 	add.w	r3, r7, #28
 801662e:	4619      	mov	r1, r3
 8016630:	4807      	ldr	r0, [pc, #28]	; (8016650 <HAL_SPI_MspInit+0x124>)
 8016632:	f004 f951 	bl	801a8d8 <HAL_GPIO_Init>
}
 8016636:	bf00      	nop
 8016638:	3730      	adds	r7, #48	; 0x30
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}
 801663e:	bf00      	nop
 8016640:	40013000 	.word	0x40013000
 8016644:	40021000 	.word	0x40021000
 8016648:	40003c00 	.word	0x40003c00
 801664c:	48000800 	.word	0x48000800
 8016650:	48000400 	.word	0x48000400

08016654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8016654:	b580      	push	{r7, lr}
 8016656:	b082      	sub	sp, #8
 8016658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801665a:	4b0f      	ldr	r3, [pc, #60]	; (8016698 <HAL_MspInit+0x44>)
 801665c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801665e:	4a0e      	ldr	r2, [pc, #56]	; (8016698 <HAL_MspInit+0x44>)
 8016660:	f043 0301 	orr.w	r3, r3, #1
 8016664:	6613      	str	r3, [r2, #96]	; 0x60
 8016666:	4b0c      	ldr	r3, [pc, #48]	; (8016698 <HAL_MspInit+0x44>)
 8016668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801666a:	f003 0301 	and.w	r3, r3, #1
 801666e:	607b      	str	r3, [r7, #4]
 8016670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8016672:	4b09      	ldr	r3, [pc, #36]	; (8016698 <HAL_MspInit+0x44>)
 8016674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016676:	4a08      	ldr	r2, [pc, #32]	; (8016698 <HAL_MspInit+0x44>)
 8016678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801667c:	6593      	str	r3, [r2, #88]	; 0x58
 801667e:	4b06      	ldr	r3, [pc, #24]	; (8016698 <HAL_MspInit+0x44>)
 8016680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016686:	603b      	str	r3, [r7, #0]
 8016688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 801668a:	f004 fb63 	bl	801ad54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801668e:	bf00      	nop
 8016690:	3708      	adds	r7, #8
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	40021000 	.word	0x40021000

0801669c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801669c:	b480      	push	{r7}
 801669e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80166a0:	e7fe      	b.n	80166a0 <NMI_Handler+0x4>

080166a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80166a2:	b480      	push	{r7}
 80166a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80166a6:	e7fe      	b.n	80166a6 <HardFault_Handler+0x4>

080166a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80166a8:	b480      	push	{r7}
 80166aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80166ac:	e7fe      	b.n	80166ac <MemManage_Handler+0x4>

080166ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80166ae:	b480      	push	{r7}
 80166b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80166b2:	e7fe      	b.n	80166b2 <BusFault_Handler+0x4>

080166b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80166b4:	b480      	push	{r7}
 80166b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80166b8:	e7fe      	b.n	80166b8 <UsageFault_Handler+0x4>

080166ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80166ba:	b480      	push	{r7}
 80166bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80166be:	bf00      	nop
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr

080166c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80166c8:	b480      	push	{r7}
 80166ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80166cc:	bf00      	nop
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr

080166d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80166d6:	b480      	push	{r7}
 80166d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80166da:	bf00      	nop
 80166dc:	46bd      	mov	sp, r7
 80166de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166e2:	4770      	bx	lr

080166e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80166e8:	f001 f89e 	bl	8017828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80166ec:	bf00      	nop
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80166f4:	4802      	ldr	r0, [pc, #8]	; (8016700 <DMA1_Channel1_IRQHandler+0x10>)
 80166f6:	f003 fd37 	bl	801a168 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80166fa:	bf00      	nop
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	200007a0 	.word	0x200007a0

08016704 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8016708:	4802      	ldr	r0, [pc, #8]	; (8016714 <ADC1_2_IRQHandler+0x10>)
 801670a:	f002 f83d 	bl	8018788 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 801670e:	bf00      	nop
 8016710:	bd80      	pop	{r7, pc}
 8016712:	bf00      	nop
 8016714:	20000734 	.word	0x20000734

08016718 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8016718:	b580      	push	{r7, lr}
 801671a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801671c:	4802      	ldr	r0, [pc, #8]	; (8016728 <TIM8_CC_IRQHandler+0x10>)
 801671e:	f006 fc75 	bl	801d00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8016722:	bf00      	nop
 8016724:	bd80      	pop	{r7, pc}
 8016726:	bf00      	nop
 8016728:	2000da94 	.word	0x2000da94

0801672c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 801672c:	b580      	push	{r7, lr}
 801672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8016730:	480d      	ldr	r0, [pc, #52]	; (8016768 <TIM6_DAC_IRQHandler+0x3c>)
 8016732:	f006 fc6b 	bl	801d00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8016736:	f7f1 fbbb 	bl	8007eb0 <interrupt_timer>
  interupt_calSensor();
 801673a:	f7eb fa3f 	bl	8001bbc <interupt_calSensor>
  ICM20602_DataUpdate();
 801673e:	f7f1 f8d7 	bl	80078f0 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8016742:	f7eb f849 	bl	80017d8 <interrupt_calGyro>
  AS5047_DataUpdate();
 8016746:	f7f0 fd8f 	bl	8007268 <AS5047_DataUpdate>
  interupt_calEncoder();
 801674a:	f7ea fc8d 	bl	8001068 <interupt_calEncoder>
  interupt_calFusion();
 801674e:	f7ea fe4b 	bl	80013e8 <interupt_calFusion>
  interrupt_WallCut();
 8016752:	f7ef fd59 	bl	8006208 <interrupt_WallCut>
  interupt_DriveMotor();
 8016756:	f7eb fbbb 	bl	8001ed0 <interupt_DriveMotor>

  interrupt_FailSafe();
 801675a:	f7f3 f8f1 	bl	8009940 <interrupt_FailSafe>
  interrupt_record();
 801675e:	f7ff fcd7 	bl	8016110 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8016762:	bf00      	nop
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	2000da48 	.word	0x2000da48

0801676c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801676c:	b480      	push	{r7}
 801676e:	af00      	add	r7, sp, #0
	return 1;
 8016770:	2301      	movs	r3, #1
}
 8016772:	4618      	mov	r0, r3
 8016774:	46bd      	mov	sp, r7
 8016776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801677a:	4770      	bx	lr

0801677c <_kill>:

int _kill(int pid, int sig)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b082      	sub	sp, #8
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8016786:	f008 fb15 	bl	801edb4 <__errno>
 801678a:	4603      	mov	r3, r0
 801678c:	2216      	movs	r2, #22
 801678e:	601a      	str	r2, [r3, #0]
	return -1;
 8016790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016794:	4618      	mov	r0, r3
 8016796:	3708      	adds	r7, #8
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}

0801679c <_exit>:

void _exit (int status)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80167a4:	f04f 31ff 	mov.w	r1, #4294967295
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f7ff ffe7 	bl	801677c <_kill>
	while (1) {}		/* Make sure we hang here */
 80167ae:	e7fe      	b.n	80167ae <_exit+0x12>

080167b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b086      	sub	sp, #24
 80167b4:	af00      	add	r7, sp, #0
 80167b6:	60f8      	str	r0, [r7, #12]
 80167b8:	60b9      	str	r1, [r7, #8]
 80167ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80167bc:	2300      	movs	r3, #0
 80167be:	617b      	str	r3, [r7, #20]
 80167c0:	e00a      	b.n	80167d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80167c2:	f3af 8000 	nop.w
 80167c6:	4601      	mov	r1, r0
 80167c8:	68bb      	ldr	r3, [r7, #8]
 80167ca:	1c5a      	adds	r2, r3, #1
 80167cc:	60ba      	str	r2, [r7, #8]
 80167ce:	b2ca      	uxtb	r2, r1
 80167d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80167d2:	697b      	ldr	r3, [r7, #20]
 80167d4:	3301      	adds	r3, #1
 80167d6:	617b      	str	r3, [r7, #20]
 80167d8:	697a      	ldr	r2, [r7, #20]
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	429a      	cmp	r2, r3
 80167de:	dbf0      	blt.n	80167c2 <_read+0x12>
	}

return len;
 80167e0:	687b      	ldr	r3, [r7, #4]
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	3718      	adds	r7, #24
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
	...

080167ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80167ec:	b580      	push	{r7, lr}
 80167ee:	b086      	sub	sp, #24
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	60f8      	str	r0, [r7, #12]
 80167f4:	60b9      	str	r1, [r7, #8]
 80167f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80167f8:	2300      	movs	r3, #0
 80167fa:	617b      	str	r3, [r7, #20]
 80167fc:	e00a      	b.n	8016814 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 80167fe:	68b9      	ldr	r1, [r7, #8]
 8016800:	1c4b      	adds	r3, r1, #1
 8016802:	60bb      	str	r3, [r7, #8]
 8016804:	2301      	movs	r3, #1
 8016806:	2201      	movs	r2, #1
 8016808:	4807      	ldr	r0, [pc, #28]	; (8016828 <_write+0x3c>)
 801680a:	f007 fc89 	bl	801e120 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801680e:	697b      	ldr	r3, [r7, #20]
 8016810:	3301      	adds	r3, #1
 8016812:	617b      	str	r3, [r7, #20]
 8016814:	697a      	ldr	r2, [r7, #20]
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	429a      	cmp	r2, r3
 801681a:	dbf0      	blt.n	80167fe <_write+0x12>
	}
	return len;
 801681c:	687b      	ldr	r3, [r7, #4]
}
 801681e:	4618      	mov	r0, r3
 8016820:	3718      	adds	r7, #24
 8016822:	46bd      	mov	sp, r7
 8016824:	bd80      	pop	{r7, pc}
 8016826:	bf00      	nop
 8016828:	2000e04c 	.word	0x2000e04c

0801682c <_close>:

int _close(int file)
{
 801682c:	b480      	push	{r7}
 801682e:	b083      	sub	sp, #12
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
	return -1;
 8016834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016838:	4618      	mov	r0, r3
 801683a:	370c      	adds	r7, #12
 801683c:	46bd      	mov	sp, r7
 801683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016842:	4770      	bx	lr

08016844 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8016844:	b480      	push	{r7}
 8016846:	b083      	sub	sp, #12
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8016854:	605a      	str	r2, [r3, #4]
	return 0;
 8016856:	2300      	movs	r3, #0
}
 8016858:	4618      	mov	r0, r3
 801685a:	370c      	adds	r7, #12
 801685c:	46bd      	mov	sp, r7
 801685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016862:	4770      	bx	lr

08016864 <_isatty>:

int _isatty(int file)
{
 8016864:	b480      	push	{r7}
 8016866:	b083      	sub	sp, #12
 8016868:	af00      	add	r7, sp, #0
 801686a:	6078      	str	r0, [r7, #4]
	return 1;
 801686c:	2301      	movs	r3, #1
}
 801686e:	4618      	mov	r0, r3
 8016870:	370c      	adds	r7, #12
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr

0801687a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801687a:	b480      	push	{r7}
 801687c:	b085      	sub	sp, #20
 801687e:	af00      	add	r7, sp, #0
 8016880:	60f8      	str	r0, [r7, #12]
 8016882:	60b9      	str	r1, [r7, #8]
 8016884:	607a      	str	r2, [r7, #4]
	return 0;
 8016886:	2300      	movs	r3, #0
}
 8016888:	4618      	mov	r0, r3
 801688a:	3714      	adds	r7, #20
 801688c:	46bd      	mov	sp, r7
 801688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016892:	4770      	bx	lr

08016894 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b086      	sub	sp, #24
 8016898:	af00      	add	r7, sp, #0
 801689a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 801689c:	4a14      	ldr	r2, [pc, #80]	; (80168f0 <_sbrk+0x5c>)
 801689e:	4b15      	ldr	r3, [pc, #84]	; (80168f4 <_sbrk+0x60>)
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80168a4:	697b      	ldr	r3, [r7, #20]
 80168a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80168a8:	4b13      	ldr	r3, [pc, #76]	; (80168f8 <_sbrk+0x64>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d102      	bne.n	80168b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80168b0:	4b11      	ldr	r3, [pc, #68]	; (80168f8 <_sbrk+0x64>)
 80168b2:	4a12      	ldr	r2, [pc, #72]	; (80168fc <_sbrk+0x68>)
 80168b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80168b6:	4b10      	ldr	r3, [pc, #64]	; (80168f8 <_sbrk+0x64>)
 80168b8:	681a      	ldr	r2, [r3, #0]
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	4413      	add	r3, r2
 80168be:	693a      	ldr	r2, [r7, #16]
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d207      	bcs.n	80168d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80168c4:	f008 fa76 	bl	801edb4 <__errno>
 80168c8:	4603      	mov	r3, r0
 80168ca:	220c      	movs	r2, #12
 80168cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80168ce:	f04f 33ff 	mov.w	r3, #4294967295
 80168d2:	e009      	b.n	80168e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80168d4:	4b08      	ldr	r3, [pc, #32]	; (80168f8 <_sbrk+0x64>)
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80168da:	4b07      	ldr	r3, [pc, #28]	; (80168f8 <_sbrk+0x64>)
 80168dc:	681a      	ldr	r2, [r3, #0]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	4413      	add	r3, r2
 80168e2:	4a05      	ldr	r2, [pc, #20]	; (80168f8 <_sbrk+0x64>)
 80168e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80168e6:	68fb      	ldr	r3, [r7, #12]
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3718      	adds	r7, #24
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	2001c000 	.word	0x2001c000
 80168f4:	00000400 	.word	0x00000400
 80168f8:	2000da44 	.word	0x2000da44
 80168fc:	2000e0f0 	.word	0x2000e0f0

08016900 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8016900:	b480      	push	{r7}
 8016902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8016904:	4b06      	ldr	r3, [pc, #24]	; (8016920 <SystemInit+0x20>)
 8016906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801690a:	4a05      	ldr	r2, [pc, #20]	; (8016920 <SystemInit+0x20>)
 801690c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8016910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8016914:	bf00      	nop
 8016916:	46bd      	mov	sp, r7
 8016918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691c:	4770      	bx	lr
 801691e:	bf00      	nop
 8016920:	e000ed00 	.word	0xe000ed00

08016924 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8016924:	b580      	push	{r7, lr}
 8016926:	b084      	sub	sp, #16
 8016928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801692a:	1d3b      	adds	r3, r7, #4
 801692c:	2200      	movs	r2, #0
 801692e:	601a      	str	r2, [r3, #0]
 8016930:	605a      	str	r2, [r3, #4]
 8016932:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8016934:	4b14      	ldr	r3, [pc, #80]	; (8016988 <MX_TIM6_Init+0x64>)
 8016936:	4a15      	ldr	r2, [pc, #84]	; (801698c <MX_TIM6_Init+0x68>)
 8016938:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 801693a:	4b13      	ldr	r3, [pc, #76]	; (8016988 <MX_TIM6_Init+0x64>)
 801693c:	2254      	movs	r2, #84	; 0x54
 801693e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016940:	4b11      	ldr	r3, [pc, #68]	; (8016988 <MX_TIM6_Init+0x64>)
 8016942:	2200      	movs	r2, #0
 8016944:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8016946:	4b10      	ldr	r3, [pc, #64]	; (8016988 <MX_TIM6_Init+0x64>)
 8016948:	f240 32e7 	movw	r2, #999	; 0x3e7
 801694c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801694e:	4b0e      	ldr	r3, [pc, #56]	; (8016988 <MX_TIM6_Init+0x64>)
 8016950:	2200      	movs	r2, #0
 8016952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8016954:	480c      	ldr	r0, [pc, #48]	; (8016988 <MX_TIM6_Init+0x64>)
 8016956:	f006 f891 	bl	801ca7c <HAL_TIM_Base_Init>
 801695a:	4603      	mov	r3, r0
 801695c:	2b00      	cmp	r3, #0
 801695e:	d001      	beq.n	8016964 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8016960:	f7f3 fa99 	bl	8009e96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016964:	2300      	movs	r3, #0
 8016966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016968:	2300      	movs	r3, #0
 801696a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801696c:	1d3b      	adds	r3, r7, #4
 801696e:	4619      	mov	r1, r3
 8016970:	4805      	ldr	r0, [pc, #20]	; (8016988 <MX_TIM6_Init+0x64>)
 8016972:	f007 f9ff 	bl	801dd74 <HAL_TIMEx_MasterConfigSynchronization>
 8016976:	4603      	mov	r3, r0
 8016978:	2b00      	cmp	r3, #0
 801697a:	d001      	beq.n	8016980 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 801697c:	f7f3 fa8b 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8016980:	bf00      	nop
 8016982:	3710      	adds	r7, #16
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}
 8016988:	2000da48 	.word	0x2000da48
 801698c:	40001000 	.word	0x40001000

08016990 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8016990:	b580      	push	{r7, lr}
 8016992:	b098      	sub	sp, #96	; 0x60
 8016994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016996:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801699a:	2200      	movs	r2, #0
 801699c:	601a      	str	r2, [r3, #0]
 801699e:	605a      	str	r2, [r3, #4]
 80169a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80169a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80169a6:	2200      	movs	r2, #0
 80169a8:	601a      	str	r2, [r3, #0]
 80169aa:	605a      	str	r2, [r3, #4]
 80169ac:	609a      	str	r2, [r3, #8]
 80169ae:	60da      	str	r2, [r3, #12]
 80169b0:	611a      	str	r2, [r3, #16]
 80169b2:	615a      	str	r2, [r3, #20]
 80169b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80169b6:	1d3b      	adds	r3, r7, #4
 80169b8:	2234      	movs	r2, #52	; 0x34
 80169ba:	2100      	movs	r1, #0
 80169bc:	4618      	mov	r0, r3
 80169be:	f008 fa31 	bl	801ee24 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80169c2:	4b41      	ldr	r3, [pc, #260]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169c4:	4a41      	ldr	r2, [pc, #260]	; (8016acc <MX_TIM8_Init+0x13c>)
 80169c6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80169c8:	4b3f      	ldr	r3, [pc, #252]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169ca:	2201      	movs	r2, #1
 80169cc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80169ce:	4b3e      	ldr	r3, [pc, #248]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169d0:	2200      	movs	r2, #0
 80169d2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80169d4:	4b3c      	ldr	r3, [pc, #240]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169d6:	f240 628f 	movw	r2, #1679	; 0x68f
 80169da:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80169dc:	4b3a      	ldr	r3, [pc, #232]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169de:	2200      	movs	r2, #0
 80169e0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80169e2:	4b39      	ldr	r3, [pc, #228]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169e4:	2200      	movs	r2, #0
 80169e6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80169e8:	4b37      	ldr	r3, [pc, #220]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169ea:	2200      	movs	r2, #0
 80169ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80169ee:	4836      	ldr	r0, [pc, #216]	; (8016ac8 <MX_TIM8_Init+0x138>)
 80169f0:	f006 f90c 	bl	801cc0c <HAL_TIM_PWM_Init>
 80169f4:	4603      	mov	r3, r0
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d001      	beq.n	80169fe <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80169fa:	f7f3 fa4c 	bl	8009e96 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80169fe:	2300      	movs	r3, #0
 8016a00:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016a02:	2300      	movs	r3, #0
 8016a04:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016a06:	2300      	movs	r3, #0
 8016a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8016a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016a0e:	4619      	mov	r1, r3
 8016a10:	482d      	ldr	r0, [pc, #180]	; (8016ac8 <MX_TIM8_Init+0x138>)
 8016a12:	f007 f9af 	bl	801dd74 <HAL_TIMEx_MasterConfigSynchronization>
 8016a16:	4603      	mov	r3, r0
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d001      	beq.n	8016a20 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8016a1c:	f7f3 fa3b 	bl	8009e96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016a20:	2360      	movs	r3, #96	; 0x60
 8016a22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8016a24:	f240 13a3 	movw	r3, #419	; 0x1a3
 8016a28:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016a2a:	2300      	movs	r3, #0
 8016a2c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016a2e:	2300      	movs	r3, #0
 8016a30:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016a32:	2300      	movs	r3, #0
 8016a34:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016a36:	2300      	movs	r3, #0
 8016a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016a3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016a42:	2200      	movs	r2, #0
 8016a44:	4619      	mov	r1, r3
 8016a46:	4820      	ldr	r0, [pc, #128]	; (8016ac8 <MX_TIM8_Init+0x138>)
 8016a48:	f006 fc60 	bl	801d30c <HAL_TIM_PWM_ConfigChannel>
 8016a4c:	4603      	mov	r3, r0
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d001      	beq.n	8016a56 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8016a52:	f7f3 fa20 	bl	8009e96 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8016a56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016a5a:	2208      	movs	r2, #8
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	481a      	ldr	r0, [pc, #104]	; (8016ac8 <MX_TIM8_Init+0x138>)
 8016a60:	f006 fc54 	bl	801d30c <HAL_TIM_PWM_ConfigChannel>
 8016a64:	4603      	mov	r3, r0
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d001      	beq.n	8016a6e <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 8016a6a:	f7f3 fa14 	bl	8009e96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016a72:	2300      	movs	r3, #0
 8016a74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016a76:	2300      	movs	r3, #0
 8016a78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016a7a:	2300      	movs	r3, #0
 8016a7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016a7e:	2300      	movs	r3, #0
 8016a80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016a86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016a90:	2300      	movs	r3, #0
 8016a92:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016a98:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8016aa6:	1d3b      	adds	r3, r7, #4
 8016aa8:	4619      	mov	r1, r3
 8016aaa:	4807      	ldr	r0, [pc, #28]	; (8016ac8 <MX_TIM8_Init+0x138>)
 8016aac:	f007 f9f0 	bl	801de90 <HAL_TIMEx_ConfigBreakDeadTime>
 8016ab0:	4603      	mov	r3, r0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d001      	beq.n	8016aba <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8016ab6:	f7f3 f9ee 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8016aba:	4803      	ldr	r0, [pc, #12]	; (8016ac8 <MX_TIM8_Init+0x138>)
 8016abc:	f000 f8e0 	bl	8016c80 <HAL_TIM_MspPostInit>

}
 8016ac0:	bf00      	nop
 8016ac2:	3760      	adds	r7, #96	; 0x60
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}
 8016ac8:	2000da94 	.word	0x2000da94
 8016acc:	40013400 	.word	0x40013400

08016ad0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b094      	sub	sp, #80	; 0x50
 8016ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8016ad6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016ada:	2200      	movs	r2, #0
 8016adc:	601a      	str	r2, [r3, #0]
 8016ade:	605a      	str	r2, [r3, #4]
 8016ae0:	609a      	str	r2, [r3, #8]
 8016ae2:	60da      	str	r2, [r3, #12]
 8016ae4:	611a      	str	r2, [r3, #16]
 8016ae6:	615a      	str	r2, [r3, #20]
 8016ae8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016aea:	463b      	mov	r3, r7
 8016aec:	2234      	movs	r2, #52	; 0x34
 8016aee:	2100      	movs	r1, #0
 8016af0:	4618      	mov	r0, r3
 8016af2:	f008 f997 	bl	801ee24 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8016af6:	4b30      	ldr	r3, [pc, #192]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016af8:	4a30      	ldr	r2, [pc, #192]	; (8016bbc <MX_TIM16_Init+0xec>)
 8016afa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8016afc:	4b2e      	ldr	r3, [pc, #184]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016afe:	2201      	movs	r2, #1
 8016b00:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016b02:	4b2d      	ldr	r3, [pc, #180]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b04:	2200      	movs	r2, #0
 8016b06:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 8016b08:	4b2b      	ldr	r3, [pc, #172]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b0a:	2264      	movs	r2, #100	; 0x64
 8016b0c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016b0e:	4b2a      	ldr	r3, [pc, #168]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b10:	2200      	movs	r2, #0
 8016b12:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8016b14:	4b28      	ldr	r3, [pc, #160]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b16:	2200      	movs	r2, #0
 8016b18:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016b1a:	4b27      	ldr	r3, [pc, #156]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b1c:	2200      	movs	r2, #0
 8016b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8016b20:	4825      	ldr	r0, [pc, #148]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b22:	f005 ffab 	bl	801ca7c <HAL_TIM_Base_Init>
 8016b26:	4603      	mov	r3, r0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d001      	beq.n	8016b30 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8016b2c:	f7f3 f9b3 	bl	8009e96 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8016b30:	4821      	ldr	r0, [pc, #132]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b32:	f006 f86b 	bl	801cc0c <HAL_TIM_PWM_Init>
 8016b36:	4603      	mov	r3, r0
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d001      	beq.n	8016b40 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8016b3c:	f7f3 f9ab 	bl	8009e96 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016b40:	2360      	movs	r3, #96	; 0x60
 8016b42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8016b44:	231e      	movs	r3, #30
 8016b46:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016b4c:	2300      	movs	r3, #0
 8016b4e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016b50:	2300      	movs	r3, #0
 8016b52:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016b54:	2300      	movs	r3, #0
 8016b56:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016b58:	2300      	movs	r3, #0
 8016b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016b5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b60:	2200      	movs	r2, #0
 8016b62:	4619      	mov	r1, r3
 8016b64:	4814      	ldr	r0, [pc, #80]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b66:	f006 fbd1 	bl	801d30c <HAL_TIM_PWM_ConfigChannel>
 8016b6a:	4603      	mov	r3, r0
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d001      	beq.n	8016b74 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8016b70:	f7f3 f991 	bl	8009e96 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016b74:	2300      	movs	r3, #0
 8016b76:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016b78:	2300      	movs	r3, #0
 8016b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016b7c:	2300      	movs	r3, #0
 8016b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016b80:	2300      	movs	r3, #0
 8016b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016b84:	2300      	movs	r3, #0
 8016b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016b88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016b8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016b92:	2300      	movs	r3, #0
 8016b94:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8016b96:	463b      	mov	r3, r7
 8016b98:	4619      	mov	r1, r3
 8016b9a:	4807      	ldr	r0, [pc, #28]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016b9c:	f007 f978 	bl	801de90 <HAL_TIMEx_ConfigBreakDeadTime>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d001      	beq.n	8016baa <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8016ba6:	f7f3 f976 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8016baa:	4803      	ldr	r0, [pc, #12]	; (8016bb8 <MX_TIM16_Init+0xe8>)
 8016bac:	f000 f868 	bl	8016c80 <HAL_TIM_MspPostInit>

}
 8016bb0:	bf00      	nop
 8016bb2:	3750      	adds	r7, #80	; 0x50
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}
 8016bb8:	2000dae0 	.word	0x2000dae0
 8016bbc:	40014400 	.word	0x40014400

08016bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b084      	sub	sp, #16
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	4a16      	ldr	r2, [pc, #88]	; (8016c28 <HAL_TIM_Base_MspInit+0x68>)
 8016bce:	4293      	cmp	r3, r2
 8016bd0:	d114      	bne.n	8016bfc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8016bd2:	4b16      	ldr	r3, [pc, #88]	; (8016c2c <HAL_TIM_Base_MspInit+0x6c>)
 8016bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016bd6:	4a15      	ldr	r2, [pc, #84]	; (8016c2c <HAL_TIM_Base_MspInit+0x6c>)
 8016bd8:	f043 0310 	orr.w	r3, r3, #16
 8016bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8016bde:	4b13      	ldr	r3, [pc, #76]	; (8016c2c <HAL_TIM_Base_MspInit+0x6c>)
 8016be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016be2:	f003 0310 	and.w	r3, r3, #16
 8016be6:	60fb      	str	r3, [r7, #12]
 8016be8:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8016bea:	2200      	movs	r2, #0
 8016bec:	2103      	movs	r1, #3
 8016bee:	2036      	movs	r0, #54	; 0x36
 8016bf0:	f003 f909 	bl	8019e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8016bf4:	2036      	movs	r0, #54	; 0x36
 8016bf6:	f003 f920 	bl	8019e3a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8016bfa:	e010      	b.n	8016c1e <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4a0b      	ldr	r2, [pc, #44]	; (8016c30 <HAL_TIM_Base_MspInit+0x70>)
 8016c02:	4293      	cmp	r3, r2
 8016c04:	d10b      	bne.n	8016c1e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8016c06:	4b09      	ldr	r3, [pc, #36]	; (8016c2c <HAL_TIM_Base_MspInit+0x6c>)
 8016c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c0a:	4a08      	ldr	r2, [pc, #32]	; (8016c2c <HAL_TIM_Base_MspInit+0x6c>)
 8016c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016c10:	6613      	str	r3, [r2, #96]	; 0x60
 8016c12:	4b06      	ldr	r3, [pc, #24]	; (8016c2c <HAL_TIM_Base_MspInit+0x6c>)
 8016c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8016c1a:	60bb      	str	r3, [r7, #8]
 8016c1c:	68bb      	ldr	r3, [r7, #8]
}
 8016c1e:	bf00      	nop
 8016c20:	3710      	adds	r7, #16
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}
 8016c26:	bf00      	nop
 8016c28:	40001000 	.word	0x40001000
 8016c2c:	40021000 	.word	0x40021000
 8016c30:	40014400 	.word	0x40014400

08016c34 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b084      	sub	sp, #16
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	4a0d      	ldr	r2, [pc, #52]	; (8016c78 <HAL_TIM_PWM_MspInit+0x44>)
 8016c42:	4293      	cmp	r3, r2
 8016c44:	d113      	bne.n	8016c6e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8016c46:	4b0d      	ldr	r3, [pc, #52]	; (8016c7c <HAL_TIM_PWM_MspInit+0x48>)
 8016c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c4a:	4a0c      	ldr	r2, [pc, #48]	; (8016c7c <HAL_TIM_PWM_MspInit+0x48>)
 8016c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016c50:	6613      	str	r3, [r2, #96]	; 0x60
 8016c52:	4b0a      	ldr	r3, [pc, #40]	; (8016c7c <HAL_TIM_PWM_MspInit+0x48>)
 8016c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016c5a:	60fb      	str	r3, [r7, #12]
 8016c5c:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8016c5e:	2200      	movs	r2, #0
 8016c60:	2101      	movs	r1, #1
 8016c62:	202e      	movs	r0, #46	; 0x2e
 8016c64:	f003 f8cf 	bl	8019e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8016c68:	202e      	movs	r0, #46	; 0x2e
 8016c6a:	f003 f8e6 	bl	8019e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8016c6e:	bf00      	nop
 8016c70:	3710      	adds	r7, #16
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	40013400 	.word	0x40013400
 8016c7c:	40021000 	.word	0x40021000

08016c80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b08a      	sub	sp, #40	; 0x28
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016c88:	f107 0314 	add.w	r3, r7, #20
 8016c8c:	2200      	movs	r2, #0
 8016c8e:	601a      	str	r2, [r3, #0]
 8016c90:	605a      	str	r2, [r3, #4]
 8016c92:	609a      	str	r2, [r3, #8]
 8016c94:	60da      	str	r2, [r3, #12]
 8016c96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	4a2b      	ldr	r2, [pc, #172]	; (8016d4c <HAL_TIM_MspPostInit+0xcc>)
 8016c9e:	4293      	cmp	r3, r2
 8016ca0:	d12d      	bne.n	8016cfe <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016ca2:	4b2b      	ldr	r3, [pc, #172]	; (8016d50 <HAL_TIM_MspPostInit+0xd0>)
 8016ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ca6:	4a2a      	ldr	r2, [pc, #168]	; (8016d50 <HAL_TIM_MspPostInit+0xd0>)
 8016ca8:	f043 0302 	orr.w	r3, r3, #2
 8016cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016cae:	4b28      	ldr	r3, [pc, #160]	; (8016d50 <HAL_TIM_MspPostInit+0xd0>)
 8016cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016cb2:	f003 0302 	and.w	r3, r3, #2
 8016cb6:	613b      	str	r3, [r7, #16]
 8016cb8:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8016cba:	2340      	movs	r3, #64	; 0x40
 8016cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016cbe:	2302      	movs	r3, #2
 8016cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8016cca:	2305      	movs	r3, #5
 8016ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016cce:	f107 0314 	add.w	r3, r7, #20
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	481f      	ldr	r0, [pc, #124]	; (8016d54 <HAL_TIM_MspPostInit+0xd4>)
 8016cd6:	f003 fdff 	bl	801a8d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8016cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016ce0:	2302      	movs	r3, #2
 8016ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ce4:	2300      	movs	r3, #0
 8016ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016ce8:	2300      	movs	r3, #0
 8016cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8016cec:	230a      	movs	r3, #10
 8016cee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8016cf0:	f107 0314 	add.w	r3, r7, #20
 8016cf4:	4619      	mov	r1, r3
 8016cf6:	4817      	ldr	r0, [pc, #92]	; (8016d54 <HAL_TIM_MspPostInit+0xd4>)
 8016cf8:	f003 fdee 	bl	801a8d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8016cfc:	e022      	b.n	8016d44 <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	4a15      	ldr	r2, [pc, #84]	; (8016d58 <HAL_TIM_MspPostInit+0xd8>)
 8016d04:	4293      	cmp	r3, r2
 8016d06:	d11d      	bne.n	8016d44 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016d08:	4b11      	ldr	r3, [pc, #68]	; (8016d50 <HAL_TIM_MspPostInit+0xd0>)
 8016d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d0c:	4a10      	ldr	r2, [pc, #64]	; (8016d50 <HAL_TIM_MspPostInit+0xd0>)
 8016d0e:	f043 0301 	orr.w	r3, r3, #1
 8016d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8016d14:	4b0e      	ldr	r3, [pc, #56]	; (8016d50 <HAL_TIM_MspPostInit+0xd0>)
 8016d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016d18:	f003 0301 	and.w	r3, r3, #1
 8016d1c:	60fb      	str	r3, [r7, #12]
 8016d1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8016d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016d26:	2302      	movs	r3, #2
 8016d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016d2e:	2300      	movs	r3, #0
 8016d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8016d32:	2301      	movs	r3, #1
 8016d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8016d36:	f107 0314 	add.w	r3, r7, #20
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8016d40:	f003 fdca 	bl	801a8d8 <HAL_GPIO_Init>
}
 8016d44:	bf00      	nop
 8016d46:	3728      	adds	r7, #40	; 0x28
 8016d48:	46bd      	mov	sp, r7
 8016d4a:	bd80      	pop	{r7, pc}
 8016d4c:	40013400 	.word	0x40013400
 8016d50:	40021000 	.word	0x40021000
 8016d54:	48000400 	.word	0x48000400
 8016d58:	40014400 	.word	0x40014400

08016d5c <get_center_velocity>:

parameter_speed speed600_shortest;

parameter_speed speed600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8016d5c:	b084      	sub	sp, #16
 8016d5e:	b480      	push	{r7}
 8016d60:	b083      	sub	sp, #12
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	f107 0c10 	add.w	ip, r7, #16
 8016d68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8016d6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016d70:	f113 0f02 	cmn.w	r3, #2
 8016d74:	d102      	bne.n	8016d7c <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	607b      	str	r3, [r7, #4]
 8016d7a:	e083      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8016d7c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016d80:	f113 0f03 	cmn.w	r3, #3
 8016d84:	d102      	bne.n	8016d8c <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8016d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d88:	607b      	str	r3, [r7, #4]
 8016d8a:	e07b      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8016d8c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016d90:	f113 0f04 	cmn.w	r3, #4
 8016d94:	d102      	bne.n	8016d9c <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8016d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d98:	607b      	str	r3, [r7, #4]
 8016d9a:	e073      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8016d9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016da0:	f113 0f05 	cmn.w	r3, #5
 8016da4:	d102      	bne.n	8016dac <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8016da6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016da8:	607b      	str	r3, [r7, #4]
 8016daa:	e06b      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8016dac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016db0:	f113 0f06 	cmn.w	r3, #6
 8016db4:	d102      	bne.n	8016dbc <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8016db6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016db8:	607b      	str	r3, [r7, #4]
 8016dba:	e063      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8016dbc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016dc0:	f113 0f07 	cmn.w	r3, #7
 8016dc4:	d102      	bne.n	8016dcc <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8016dc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016dc8:	607b      	str	r3, [r7, #4]
 8016dca:	e05b      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8016dcc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016dd0:	f113 0f08 	cmn.w	r3, #8
 8016dd4:	d103      	bne.n	8016dde <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8016dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016dda:	607b      	str	r3, [r7, #4]
 8016ddc:	e052      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8016dde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016de2:	f113 0f09 	cmn.w	r3, #9
 8016de6:	d103      	bne.n	8016df0 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8016de8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016dec:	607b      	str	r3, [r7, #4]
 8016dee:	e049      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8016df0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016df4:	f113 0f0a 	cmn.w	r3, #10
 8016df8:	d103      	bne.n	8016e02 <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8016dfa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016dfe:	607b      	str	r3, [r7, #4]
 8016e00:	e040      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8016e02:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e06:	f113 0f0b 	cmn.w	r3, #11
 8016e0a:	d103      	bne.n	8016e14 <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8016e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016e10:	607b      	str	r3, [r7, #4]
 8016e12:	e037      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8016e14:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e18:	f113 0f0c 	cmn.w	r3, #12
 8016e1c:	d103      	bne.n	8016e26 <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8016e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016e22:	607b      	str	r3, [r7, #4]
 8016e24:	e02e      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8016e26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e2a:	f113 0f0d 	cmn.w	r3, #13
 8016e2e:	d103      	bne.n	8016e38 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8016e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8016e34:	607b      	str	r3, [r7, #4]
 8016e36:	e025      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8016e38:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e3c:	f113 0f0e 	cmn.w	r3, #14
 8016e40:	d103      	bne.n	8016e4a <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8016e42:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8016e46:	607b      	str	r3, [r7, #4]
 8016e48:	e01c      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8016e4a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e4e:	f113 0f0f 	cmn.w	r3, #15
 8016e52:	d103      	bne.n	8016e5c <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8016e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8016e58:	607b      	str	r3, [r7, #4]
 8016e5a:	e013      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8016e5c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e60:	f113 0f10 	cmn.w	r3, #16
 8016e64:	d103      	bne.n	8016e6e <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8016e66:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8016e6a:	607b      	str	r3, [r7, #4]
 8016e6c:	e00a      	b.n	8016e84 <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8016e6e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e72:	f113 0f11 	cmn.w	r3, #17
 8016e76:	d103      	bne.n	8016e80 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8016e78:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016e7c:	607b      	str	r3, [r7, #4]
 8016e7e:	e001      	b.n	8016e84 <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8016e80:	697b      	ldr	r3, [r7, #20]
 8016e82:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	ee07 3a90 	vmov	s15, r3
}
 8016e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8016e8e:	370c      	adds	r7, #12
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	b004      	add	sp, #16
 8016e98:	4770      	bx	lr
	...

08016e9c <input_parameter>:

void input_parameter(void) {
 8016e9c:	b480      	push	{r7}
 8016e9e:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8016ea0:	4b8f      	ldr	r3, [pc, #572]	; (80170e0 <input_parameter+0x244>)
 8016ea2:	4a90      	ldr	r2, [pc, #576]	; (80170e4 <input_parameter+0x248>)
 8016ea4:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8016ea6:	4b8e      	ldr	r3, [pc, #568]	; (80170e0 <input_parameter+0x244>)
 8016ea8:	4a8e      	ldr	r2, [pc, #568]	; (80170e4 <input_parameter+0x248>)
 8016eaa:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8016eac:	4b8c      	ldr	r3, [pc, #560]	; (80170e0 <input_parameter+0x244>)
 8016eae:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8016eb0:	4a8b      	ldr	r2, [pc, #556]	; (80170e0 <input_parameter+0x244>)
 8016eb2:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 930; //550
 8016eb4:	4b8a      	ldr	r3, [pc, #552]	; (80170e0 <input_parameter+0x244>)
 8016eb6:	4a8c      	ldr	r2, [pc, #560]	; (80170e8 <input_parameter+0x24c>)
 8016eb8:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 11000; //10000
 8016eba:	4b89      	ldr	r3, [pc, #548]	; (80170e0 <input_parameter+0x244>)
 8016ebc:	4a8b      	ldr	r2, [pc, #556]	; (80170ec <input_parameter+0x250>)
 8016ebe:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 0.5; //55;
 8016ec0:	4b87      	ldr	r3, [pc, #540]	; (80170e0 <input_parameter+0x244>)
 8016ec2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016ec6:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8016ec8:	4b85      	ldr	r3, [pc, #532]	; (80170e0 <input_parameter+0x244>)
 8016eca:	4a89      	ldr	r2, [pc, #548]	; (80170f0 <input_parameter+0x254>)
 8016ecc:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8016ece:	4b84      	ldr	r3, [pc, #528]	; (80170e0 <input_parameter+0x244>)
 8016ed0:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8016ed2:	4a83      	ldr	r2, [pc, #524]	; (80170e0 <input_parameter+0x244>)
 8016ed4:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 930;
 8016ed6:	4b82      	ldr	r3, [pc, #520]	; (80170e0 <input_parameter+0x244>)
 8016ed8:	4a83      	ldr	r2, [pc, #524]	; (80170e8 <input_parameter+0x24c>)
 8016eda:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 11000;
 8016edc:	4b80      	ldr	r3, [pc, #512]	; (80170e0 <input_parameter+0x244>)
 8016ede:	4a83      	ldr	r2, [pc, #524]	; (80170ec <input_parameter+0x250>)
 8016ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 0.5; //50;
 8016ee2:	4b7f      	ldr	r3, [pc, #508]	; (80170e0 <input_parameter+0x244>)
 8016ee4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016ee8:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8016eea:	4b7d      	ldr	r3, [pc, #500]	; (80170e0 <input_parameter+0x244>)
 8016eec:	4a81      	ldr	r2, [pc, #516]	; (80170f4 <input_parameter+0x258>)
 8016eee:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8016ef0:	4b81      	ldr	r3, [pc, #516]	; (80170f8 <input_parameter+0x25c>)
 8016ef2:	4a82      	ldr	r2, [pc, #520]	; (80170fc <input_parameter+0x260>)
 8016ef4:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8016ef6:	4b80      	ldr	r3, [pc, #512]	; (80170f8 <input_parameter+0x25c>)
 8016ef8:	4a80      	ldr	r2, [pc, #512]	; (80170fc <input_parameter+0x260>)
 8016efa:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8016efc:	4b7e      	ldr	r3, [pc, #504]	; (80170f8 <input_parameter+0x25c>)
 8016efe:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8016f00:	4a7d      	ldr	r2, [pc, #500]	; (80170f8 <input_parameter+0x25c>)
 8016f02:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8016f04:	4b7c      	ldr	r3, [pc, #496]	; (80170f8 <input_parameter+0x25c>)
 8016f06:	4a7e      	ldr	r2, [pc, #504]	; (8017100 <input_parameter+0x264>)
 8016f08:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8016f0a:	4b7b      	ldr	r3, [pc, #492]	; (80170f8 <input_parameter+0x25c>)
 8016f0c:	4a7d      	ldr	r2, [pc, #500]	; (8017104 <input_parameter+0x268>)
 8016f0e:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8016f10:	4b79      	ldr	r3, [pc, #484]	; (80170f8 <input_parameter+0x25c>)
 8016f12:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016f16:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8016f18:	4b77      	ldr	r3, [pc, #476]	; (80170f8 <input_parameter+0x25c>)
 8016f1a:	4a75      	ldr	r2, [pc, #468]	; (80170f0 <input_parameter+0x254>)
 8016f1c:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8016f1e:	4b76      	ldr	r3, [pc, #472]	; (80170f8 <input_parameter+0x25c>)
 8016f20:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8016f22:	4a75      	ldr	r2, [pc, #468]	; (80170f8 <input_parameter+0x25c>)
 8016f24:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8016f26:	4b74      	ldr	r3, [pc, #464]	; (80170f8 <input_parameter+0x25c>)
 8016f28:	4a77      	ldr	r2, [pc, #476]	; (8017108 <input_parameter+0x26c>)
 8016f2a:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8016f2c:	4b72      	ldr	r3, [pc, #456]	; (80170f8 <input_parameter+0x25c>)
 8016f2e:	4a75      	ldr	r2, [pc, #468]	; (8017104 <input_parameter+0x268>)
 8016f30:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8016f32:	4b71      	ldr	r3, [pc, #452]	; (80170f8 <input_parameter+0x25c>)
 8016f34:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8016f38:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8016f3a:	4b6f      	ldr	r3, [pc, #444]	; (80170f8 <input_parameter+0x25c>)
 8016f3c:	4a6d      	ldr	r2, [pc, #436]	; (80170f4 <input_parameter+0x258>)
 8016f3e:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8016f40:	4b67      	ldr	r3, [pc, #412]	; (80170e0 <input_parameter+0x244>)
 8016f42:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8016f44:	4a71      	ldr	r2, [pc, #452]	; (801710c <input_parameter+0x270>)
 8016f46:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8016f48:	4b65      	ldr	r3, [pc, #404]	; (80170e0 <input_parameter+0x244>)
 8016f4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8016f4e:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8017110 <input_parameter+0x274>
 8016f52:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8016f56:	4b6d      	ldr	r3, [pc, #436]	; (801710c <input_parameter+0x270>)
 8016f58:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8016f5c:	4b60      	ldr	r3, [pc, #384]	; (80170e0 <input_parameter+0x244>)
 8016f5e:	689b      	ldr	r3, [r3, #8]
 8016f60:	4a6a      	ldr	r2, [pc, #424]	; (801710c <input_parameter+0x270>)
 8016f62:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8016f64:	4b5e      	ldr	r3, [pc, #376]	; (80170e0 <input_parameter+0x244>)
 8016f66:	695b      	ldr	r3, [r3, #20]
 8016f68:	4a68      	ldr	r2, [pc, #416]	; (801710c <input_parameter+0x270>)
 8016f6a:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8016f6c:	4b5c      	ldr	r3, [pc, #368]	; (80170e0 <input_parameter+0x244>)
 8016f6e:	699b      	ldr	r3, [r3, #24]
 8016f70:	4a66      	ldr	r2, [pc, #408]	; (801710c <input_parameter+0x270>)
 8016f72:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8016f74:	4b5a      	ldr	r3, [pc, #360]	; (80170e0 <input_parameter+0x244>)
 8016f76:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8016f7a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8016f82:	4b62      	ldr	r3, [pc, #392]	; (801710c <input_parameter+0x270>)
 8016f84:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8016f88:	4b55      	ldr	r3, [pc, #340]	; (80170e0 <input_parameter+0x244>)
 8016f8a:	691b      	ldr	r3, [r3, #16]
 8016f8c:	4a5f      	ldr	r2, [pc, #380]	; (801710c <input_parameter+0x270>)
 8016f8e:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8016f90:	4b53      	ldr	r3, [pc, #332]	; (80170e0 <input_parameter+0x244>)
 8016f92:	69db      	ldr	r3, [r3, #28]
 8016f94:	4a5d      	ldr	r2, [pc, #372]	; (801710c <input_parameter+0x270>)
 8016f96:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8016f98:	4b51      	ldr	r3, [pc, #324]	; (80170e0 <input_parameter+0x244>)
 8016f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016f9c:	4a5b      	ldr	r2, [pc, #364]	; (801710c <input_parameter+0x270>)
 8016f9e:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8016fa0:	4b4f      	ldr	r3, [pc, #316]	; (80170e0 <input_parameter+0x244>)
 8016fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fa4:	4a59      	ldr	r2, [pc, #356]	; (801710c <input_parameter+0x270>)
 8016fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8016fa8:	4b4d      	ldr	r3, [pc, #308]	; (80170e0 <input_parameter+0x244>)
 8016faa:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8016fae:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8016fb2:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8016fb6:	4b55      	ldr	r3, [pc, #340]	; (801710c <input_parameter+0x270>)
 8016fb8:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8016fbc:	4b48      	ldr	r3, [pc, #288]	; (80170e0 <input_parameter+0x244>)
 8016fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fc0:	4a52      	ldr	r2, [pc, #328]	; (801710c <input_parameter+0x270>)
 8016fc2:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8016fc4:	4b51      	ldr	r3, [pc, #324]	; (801710c <input_parameter+0x270>)
 8016fc6:	685b      	ldr	r3, [r3, #4]
 8016fc8:	4a50      	ldr	r2, [pc, #320]	; (801710c <input_parameter+0x270>)
 8016fca:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8016fcc:	4b4f      	ldr	r3, [pc, #316]	; (801710c <input_parameter+0x270>)
 8016fce:	4a51      	ldr	r2, [pc, #324]	; (8017114 <input_parameter+0x278>)
 8016fd0:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8016fd2:	4b4e      	ldr	r3, [pc, #312]	; (801710c <input_parameter+0x270>)
 8016fd4:	4a50      	ldr	r2, [pc, #320]	; (8017118 <input_parameter+0x27c>)
 8016fd6:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8016fd8:	4b4c      	ldr	r3, [pc, #304]	; (801710c <input_parameter+0x270>)
 8016fda:	4a50      	ldr	r2, [pc, #320]	; (801711c <input_parameter+0x280>)
 8016fdc:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8016fde:	4b4b      	ldr	r3, [pc, #300]	; (801710c <input_parameter+0x270>)
 8016fe0:	4a4f      	ldr	r2, [pc, #316]	; (8017120 <input_parameter+0x284>)
 8016fe2:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8016fe4:	4b49      	ldr	r3, [pc, #292]	; (801710c <input_parameter+0x270>)
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	4a48      	ldr	r2, [pc, #288]	; (801710c <input_parameter+0x270>)
 8016fea:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8016fec:	4b47      	ldr	r3, [pc, #284]	; (801710c <input_parameter+0x270>)
 8016fee:	4a49      	ldr	r2, [pc, #292]	; (8017114 <input_parameter+0x278>)
 8016ff0:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8016ff2:	4b46      	ldr	r3, [pc, #280]	; (801710c <input_parameter+0x270>)
 8016ff4:	4a48      	ldr	r2, [pc, #288]	; (8017118 <input_parameter+0x27c>)
 8016ff6:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8016ff8:	4b44      	ldr	r3, [pc, #272]	; (801710c <input_parameter+0x270>)
 8016ffa:	4a4a      	ldr	r2, [pc, #296]	; (8017124 <input_parameter+0x288>)
 8016ffc:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8016ffe:	4b43      	ldr	r3, [pc, #268]	; (801710c <input_parameter+0x270>)
 8017000:	4a49      	ldr	r2, [pc, #292]	; (8017128 <input_parameter+0x28c>)
 8017002:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017004:	4b41      	ldr	r3, [pc, #260]	; (801710c <input_parameter+0x270>)
 8017006:	685b      	ldr	r3, [r3, #4]
 8017008:	4a40      	ldr	r2, [pc, #256]	; (801710c <input_parameter+0x270>)
 801700a:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 801700c:	4b3f      	ldr	r3, [pc, #252]	; (801710c <input_parameter+0x270>)
 801700e:	4a47      	ldr	r2, [pc, #284]	; (801712c <input_parameter+0x290>)
 8017010:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017012:	4b3e      	ldr	r3, [pc, #248]	; (801710c <input_parameter+0x270>)
 8017014:	4a46      	ldr	r2, [pc, #280]	; (8017130 <input_parameter+0x294>)
 8017016:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017018:	4b3c      	ldr	r3, [pc, #240]	; (801710c <input_parameter+0x270>)
 801701a:	4a46      	ldr	r2, [pc, #280]	; (8017134 <input_parameter+0x298>)
 801701c:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 801701e:	4b3b      	ldr	r3, [pc, #236]	; (801710c <input_parameter+0x270>)
 8017020:	4a45      	ldr	r2, [pc, #276]	; (8017138 <input_parameter+0x29c>)
 8017022:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017024:	4b39      	ldr	r3, [pc, #228]	; (801710c <input_parameter+0x270>)
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	4a38      	ldr	r2, [pc, #224]	; (801710c <input_parameter+0x270>)
 801702a:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 801702c:	4b37      	ldr	r3, [pc, #220]	; (801710c <input_parameter+0x270>)
 801702e:	4a43      	ldr	r2, [pc, #268]	; (801713c <input_parameter+0x2a0>)
 8017030:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017032:	4b36      	ldr	r3, [pc, #216]	; (801710c <input_parameter+0x270>)
 8017034:	4a3e      	ldr	r2, [pc, #248]	; (8017130 <input_parameter+0x294>)
 8017036:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017038:	4b34      	ldr	r3, [pc, #208]	; (801710c <input_parameter+0x270>)
 801703a:	4a41      	ldr	r2, [pc, #260]	; (8017140 <input_parameter+0x2a4>)
 801703c:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 801703e:	4b33      	ldr	r3, [pc, #204]	; (801710c <input_parameter+0x270>)
 8017040:	4a40      	ldr	r2, [pc, #256]	; (8017144 <input_parameter+0x2a8>)
 8017042:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017044:	4b31      	ldr	r3, [pc, #196]	; (801710c <input_parameter+0x270>)
 8017046:	685b      	ldr	r3, [r3, #4]
 8017048:	4a30      	ldr	r2, [pc, #192]	; (801710c <input_parameter+0x270>)
 801704a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 801704e:	4b2f      	ldr	r3, [pc, #188]	; (801710c <input_parameter+0x270>)
 8017050:	4a30      	ldr	r2, [pc, #192]	; (8017114 <input_parameter+0x278>)
 8017052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017056:	4b2d      	ldr	r3, [pc, #180]	; (801710c <input_parameter+0x270>)
 8017058:	4a2f      	ldr	r2, [pc, #188]	; (8017118 <input_parameter+0x27c>)
 801705a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 801705e:	4b2b      	ldr	r3, [pc, #172]	; (801710c <input_parameter+0x270>)
 8017060:	4a39      	ldr	r2, [pc, #228]	; (8017148 <input_parameter+0x2ac>)
 8017062:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017066:	4b29      	ldr	r3, [pc, #164]	; (801710c <input_parameter+0x270>)
 8017068:	4a38      	ldr	r2, [pc, #224]	; (801714c <input_parameter+0x2b0>)
 801706a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 801706e:	4b27      	ldr	r3, [pc, #156]	; (801710c <input_parameter+0x270>)
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	4a26      	ldr	r2, [pc, #152]	; (801710c <input_parameter+0x270>)
 8017074:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017078:	4b24      	ldr	r3, [pc, #144]	; (801710c <input_parameter+0x270>)
 801707a:	4a26      	ldr	r2, [pc, #152]	; (8017114 <input_parameter+0x278>)
 801707c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017080:	4b22      	ldr	r3, [pc, #136]	; (801710c <input_parameter+0x270>)
 8017082:	4a25      	ldr	r2, [pc, #148]	; (8017118 <input_parameter+0x27c>)
 8017084:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017088:	4b20      	ldr	r3, [pc, #128]	; (801710c <input_parameter+0x270>)
 801708a:	4a31      	ldr	r2, [pc, #196]	; (8017150 <input_parameter+0x2b4>)
 801708c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017090:	4b1e      	ldr	r3, [pc, #120]	; (801710c <input_parameter+0x270>)
 8017092:	4a30      	ldr	r2, [pc, #192]	; (8017154 <input_parameter+0x2b8>)
 8017094:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017098:	4b1c      	ldr	r3, [pc, #112]	; (801710c <input_parameter+0x270>)
 801709a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 801709c:	4a1b      	ldr	r2, [pc, #108]	; (801710c <input_parameter+0x270>)
 801709e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 80170a2:	4b1a      	ldr	r3, [pc, #104]	; (801710c <input_parameter+0x270>)
 80170a4:	4a2c      	ldr	r2, [pc, #176]	; (8017158 <input_parameter+0x2bc>)
 80170a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 80170aa:	4b18      	ldr	r3, [pc, #96]	; (801710c <input_parameter+0x270>)
 80170ac:	4a20      	ldr	r2, [pc, #128]	; (8017130 <input_parameter+0x294>)
 80170ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 80170b2:	4b16      	ldr	r3, [pc, #88]	; (801710c <input_parameter+0x270>)
 80170b4:	4a29      	ldr	r2, [pc, #164]	; (801715c <input_parameter+0x2c0>)
 80170b6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 80170ba:	4b14      	ldr	r3, [pc, #80]	; (801710c <input_parameter+0x270>)
 80170bc:	4a28      	ldr	r2, [pc, #160]	; (8017160 <input_parameter+0x2c4>)
 80170be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80170c2:	4b12      	ldr	r3, [pc, #72]	; (801710c <input_parameter+0x270>)
 80170c4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 80170c6:	4a11      	ldr	r2, [pc, #68]	; (801710c <input_parameter+0x270>)
 80170c8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 80170cc:	4b0f      	ldr	r3, [pc, #60]	; (801710c <input_parameter+0x270>)
 80170ce:	4a22      	ldr	r2, [pc, #136]	; (8017158 <input_parameter+0x2bc>)
 80170d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 80170d4:	4b0d      	ldr	r3, [pc, #52]	; (801710c <input_parameter+0x270>)
 80170d6:	4a16      	ldr	r2, [pc, #88]	; (8017130 <input_parameter+0x294>)
 80170d8:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 80170dc:	4b0b      	ldr	r3, [pc, #44]	; (801710c <input_parameter+0x270>)
 80170de:	e041      	b.n	8017164 <input_parameter+0x2c8>
 80170e0:	2000db2c 	.word	0x2000db2c
 80170e4:	43960000 	.word	0x43960000
 80170e8:	44688000 	.word	0x44688000
 80170ec:	462be000 	.word	0x462be000
 80170f0:	41a00000 	.word	0x41a00000
 80170f4:	41980000 	.word	0x41980000
 80170f8:	2000dc74 	.word	0x2000dc74
 80170fc:	437a0000 	.word	0x437a0000
 8017100:	444f8000 	.word	0x444f8000
 8017104:	460ca000 	.word	0x460ca000
 8017108:	44368000 	.word	0x44368000
 801710c:	2000ddbc 	.word	0x2000ddbc
 8017110:	43480000 	.word	0x43480000
 8017114:	44160000 	.word	0x44160000
 8017118:	461c4000 	.word	0x461c4000
 801711c:	42980000 	.word	0x42980000
 8017120:	42d60000 	.word	0x42d60000
 8017124:	429a0000 	.word	0x429a0000
 8017128:	42ce0000 	.word	0x42ce0000
 801712c:	43d70000 	.word	0x43d70000
 8017130:	45fa0000 	.word	0x45fa0000
 8017134:	42820000 	.word	0x42820000
 8017138:	42a00000 	.word	0x42a00000
 801713c:	43e10000 	.word	0x43e10000
 8017140:	42700000 	.word	0x42700000
 8017144:	428e0000 	.word	0x428e0000
 8017148:	41d80000 	.word	0x41d80000
 801714c:	42b20000 	.word	0x42b20000
 8017150:	42040000 	.word	0x42040000
 8017154:	42b40000 	.word	0x42b40000
 8017158:	44188000 	.word	0x44188000
 801715c:	42860000 	.word	0x42860000
 8017160:	42920000 	.word	0x42920000
 8017164:	4a99      	ldr	r2, [pc, #612]	; (80173cc <input_parameter+0x530>)
 8017166:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 801716a:	4b99      	ldr	r3, [pc, #612]	; (80173d0 <input_parameter+0x534>)
 801716c:	4a99      	ldr	r2, [pc, #612]	; (80173d4 <input_parameter+0x538>)
 801716e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017172:	4b97      	ldr	r3, [pc, #604]	; (80173d0 <input_parameter+0x534>)
 8017174:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017176:	4a96      	ldr	r2, [pc, #600]	; (80173d0 <input_parameter+0x534>)
 8017178:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 801717c:	4b94      	ldr	r3, [pc, #592]	; (80173d0 <input_parameter+0x534>)
 801717e:	4a96      	ldr	r2, [pc, #600]	; (80173d8 <input_parameter+0x53c>)
 8017180:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017184:	4b92      	ldr	r3, [pc, #584]	; (80173d0 <input_parameter+0x534>)
 8017186:	4a95      	ldr	r2, [pc, #596]	; (80173dc <input_parameter+0x540>)
 8017188:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 801718c:	4b90      	ldr	r3, [pc, #576]	; (80173d0 <input_parameter+0x534>)
 801718e:	4a94      	ldr	r2, [pc, #592]	; (80173e0 <input_parameter+0x544>)
 8017190:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017194:	4b8e      	ldr	r3, [pc, #568]	; (80173d0 <input_parameter+0x534>)
 8017196:	4a92      	ldr	r2, [pc, #584]	; (80173e0 <input_parameter+0x544>)
 8017198:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 801719c:	4b8c      	ldr	r3, [pc, #560]	; (80173d0 <input_parameter+0x534>)
 801719e:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 80171a0:	4a8b      	ldr	r2, [pc, #556]	; (80173d0 <input_parameter+0x534>)
 80171a2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 80171a6:	4b8a      	ldr	r3, [pc, #552]	; (80173d0 <input_parameter+0x534>)
 80171a8:	4a8b      	ldr	r2, [pc, #556]	; (80173d8 <input_parameter+0x53c>)
 80171aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 80171ae:	4b88      	ldr	r3, [pc, #544]	; (80173d0 <input_parameter+0x534>)
 80171b0:	4a8a      	ldr	r2, [pc, #552]	; (80173dc <input_parameter+0x540>)
 80171b2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 80171b6:	4b86      	ldr	r3, [pc, #536]	; (80173d0 <input_parameter+0x534>)
 80171b8:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 80171bc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 80171c0:	4b83      	ldr	r3, [pc, #524]	; (80173d0 <input_parameter+0x534>)
 80171c2:	4a88      	ldr	r2, [pc, #544]	; (80173e4 <input_parameter+0x548>)
 80171c4:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80171c8:	4b81      	ldr	r3, [pc, #516]	; (80173d0 <input_parameter+0x534>)
 80171ca:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 80171cc:	4a80      	ldr	r2, [pc, #512]	; (80173d0 <input_parameter+0x534>)
 80171ce:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 80171d2:	4b7f      	ldr	r3, [pc, #508]	; (80173d0 <input_parameter+0x534>)
 80171d4:	4a84      	ldr	r2, [pc, #528]	; (80173e8 <input_parameter+0x54c>)
 80171d6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 80171da:	4b7d      	ldr	r3, [pc, #500]	; (80173d0 <input_parameter+0x534>)
 80171dc:	4a83      	ldr	r2, [pc, #524]	; (80173ec <input_parameter+0x550>)
 80171de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 80171e2:	4b7b      	ldr	r3, [pc, #492]	; (80173d0 <input_parameter+0x534>)
 80171e4:	4a82      	ldr	r2, [pc, #520]	; (80173f0 <input_parameter+0x554>)
 80171e6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 80171ea:	4b79      	ldr	r3, [pc, #484]	; (80173d0 <input_parameter+0x534>)
 80171ec:	4a81      	ldr	r2, [pc, #516]	; (80173f4 <input_parameter+0x558>)
 80171ee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80171f2:	4b77      	ldr	r3, [pc, #476]	; (80173d0 <input_parameter+0x534>)
 80171f4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 80171f6:	4a76      	ldr	r2, [pc, #472]	; (80173d0 <input_parameter+0x534>)
 80171f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 80171fc:	4b74      	ldr	r3, [pc, #464]	; (80173d0 <input_parameter+0x534>)
 80171fe:	4a7a      	ldr	r2, [pc, #488]	; (80173e8 <input_parameter+0x54c>)
 8017200:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017204:	4b72      	ldr	r3, [pc, #456]	; (80173d0 <input_parameter+0x534>)
 8017206:	4a79      	ldr	r2, [pc, #484]	; (80173ec <input_parameter+0x550>)
 8017208:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 801720c:	4b70      	ldr	r3, [pc, #448]	; (80173d0 <input_parameter+0x534>)
 801720e:	4a78      	ldr	r2, [pc, #480]	; (80173f0 <input_parameter+0x554>)
 8017210:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017214:	4b6e      	ldr	r3, [pc, #440]	; (80173d0 <input_parameter+0x534>)
 8017216:	4a78      	ldr	r2, [pc, #480]	; (80173f8 <input_parameter+0x55c>)
 8017218:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 801721c:	4b6c      	ldr	r3, [pc, #432]	; (80173d0 <input_parameter+0x534>)
 801721e:	685b      	ldr	r3, [r3, #4]
 8017220:	4a6b      	ldr	r2, [pc, #428]	; (80173d0 <input_parameter+0x534>)
 8017222:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017226:	4b6a      	ldr	r3, [pc, #424]	; (80173d0 <input_parameter+0x534>)
 8017228:	4a74      	ldr	r2, [pc, #464]	; (80173fc <input_parameter+0x560>)
 801722a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 801722e:	4b68      	ldr	r3, [pc, #416]	; (80173d0 <input_parameter+0x534>)
 8017230:	4a73      	ldr	r2, [pc, #460]	; (8017400 <input_parameter+0x564>)
 8017232:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017236:	4b66      	ldr	r3, [pc, #408]	; (80173d0 <input_parameter+0x534>)
 8017238:	4a72      	ldr	r2, [pc, #456]	; (8017404 <input_parameter+0x568>)
 801723a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 801723e:	4b64      	ldr	r3, [pc, #400]	; (80173d0 <input_parameter+0x534>)
 8017240:	4a71      	ldr	r2, [pc, #452]	; (8017408 <input_parameter+0x56c>)
 8017242:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017246:	4b62      	ldr	r3, [pc, #392]	; (80173d0 <input_parameter+0x534>)
 8017248:	685b      	ldr	r3, [r3, #4]
 801724a:	4a61      	ldr	r2, [pc, #388]	; (80173d0 <input_parameter+0x534>)
 801724c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017250:	4b5f      	ldr	r3, [pc, #380]	; (80173d0 <input_parameter+0x534>)
 8017252:	4a6a      	ldr	r2, [pc, #424]	; (80173fc <input_parameter+0x560>)
 8017254:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017258:	4b5d      	ldr	r3, [pc, #372]	; (80173d0 <input_parameter+0x534>)
 801725a:	4a69      	ldr	r2, [pc, #420]	; (8017400 <input_parameter+0x564>)
 801725c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017260:	4b5b      	ldr	r3, [pc, #364]	; (80173d0 <input_parameter+0x534>)
 8017262:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017266:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 801726a:	4b59      	ldr	r3, [pc, #356]	; (80173d0 <input_parameter+0x534>)
 801726c:	4a67      	ldr	r2, [pc, #412]	; (801740c <input_parameter+0x570>)
 801726e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017272:	4b67      	ldr	r3, [pc, #412]	; (8017410 <input_parameter+0x574>)
 8017274:	4a58      	ldr	r2, [pc, #352]	; (80173d8 <input_parameter+0x53c>)
 8017276:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017278:	4b65      	ldr	r3, [pc, #404]	; (8017410 <input_parameter+0x574>)
 801727a:	4a57      	ldr	r2, [pc, #348]	; (80173d8 <input_parameter+0x53c>)
 801727c:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 801727e:	4b64      	ldr	r3, [pc, #400]	; (8017410 <input_parameter+0x574>)
 8017280:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017282:	4a63      	ldr	r2, [pc, #396]	; (8017410 <input_parameter+0x574>)
 8017284:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8017286:	4b62      	ldr	r3, [pc, #392]	; (8017410 <input_parameter+0x574>)
 8017288:	4a62      	ldr	r2, [pc, #392]	; (8017414 <input_parameter+0x578>)
 801728a:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 801728c:	4b60      	ldr	r3, [pc, #384]	; (8017410 <input_parameter+0x574>)
 801728e:	4a62      	ldr	r2, [pc, #392]	; (8017418 <input_parameter+0x57c>)
 8017290:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8017292:	4b5f      	ldr	r3, [pc, #380]	; (8017410 <input_parameter+0x574>)
 8017294:	4a61      	ldr	r2, [pc, #388]	; (801741c <input_parameter+0x580>)
 8017296:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017298:	4b5d      	ldr	r3, [pc, #372]	; (8017410 <input_parameter+0x574>)
 801729a:	4a61      	ldr	r2, [pc, #388]	; (8017420 <input_parameter+0x584>)
 801729c:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 801729e:	4b5c      	ldr	r3, [pc, #368]	; (8017410 <input_parameter+0x574>)
 80172a0:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80172a2:	4a5b      	ldr	r2, [pc, #364]	; (8017410 <input_parameter+0x574>)
 80172a4:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 80172a6:	4b5a      	ldr	r3, [pc, #360]	; (8017410 <input_parameter+0x574>)
 80172a8:	4a5a      	ldr	r2, [pc, #360]	; (8017414 <input_parameter+0x578>)
 80172aa:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80172ac:	4b58      	ldr	r3, [pc, #352]	; (8017410 <input_parameter+0x574>)
 80172ae:	4a5a      	ldr	r2, [pc, #360]	; (8017418 <input_parameter+0x57c>)
 80172b0:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 80172b2:	4b57      	ldr	r3, [pc, #348]	; (8017410 <input_parameter+0x574>)
 80172b4:	4a59      	ldr	r2, [pc, #356]	; (801741c <input_parameter+0x580>)
 80172b6:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 80172b8:	4b55      	ldr	r3, [pc, #340]	; (8017410 <input_parameter+0x574>)
 80172ba:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80172be:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 80172c0:	4b53      	ldr	r3, [pc, #332]	; (8017410 <input_parameter+0x574>)
 80172c2:	4a45      	ldr	r2, [pc, #276]	; (80173d8 <input_parameter+0x53c>)
 80172c4:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 80172c6:	4b52      	ldr	r3, [pc, #328]	; (8017410 <input_parameter+0x574>)
 80172c8:	4a56      	ldr	r2, [pc, #344]	; (8017424 <input_parameter+0x588>)
 80172ca:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 80172cc:	4b50      	ldr	r3, [pc, #320]	; (8017410 <input_parameter+0x574>)
 80172ce:	4a56      	ldr	r2, [pc, #344]	; (8017428 <input_parameter+0x58c>)
 80172d0:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 80172d2:	4b4f      	ldr	r3, [pc, #316]	; (8017410 <input_parameter+0x574>)
 80172d4:	4a55      	ldr	r2, [pc, #340]	; (801742c <input_parameter+0x590>)
 80172d6:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 80172d8:	4b4d      	ldr	r3, [pc, #308]	; (8017410 <input_parameter+0x574>)
 80172da:	4a54      	ldr	r2, [pc, #336]	; (801742c <input_parameter+0x590>)
 80172dc:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 80172de:	4b4c      	ldr	r3, [pc, #304]	; (8017410 <input_parameter+0x574>)
 80172e0:	4a3d      	ldr	r2, [pc, #244]	; (80173d8 <input_parameter+0x53c>)
 80172e2:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 80172e4:	4b4a      	ldr	r3, [pc, #296]	; (8017410 <input_parameter+0x574>)
 80172e6:	4a4f      	ldr	r2, [pc, #316]	; (8017424 <input_parameter+0x588>)
 80172e8:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 80172ea:	4b49      	ldr	r3, [pc, #292]	; (8017410 <input_parameter+0x574>)
 80172ec:	4a4e      	ldr	r2, [pc, #312]	; (8017428 <input_parameter+0x58c>)
 80172ee:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 80172f0:	4b47      	ldr	r3, [pc, #284]	; (8017410 <input_parameter+0x574>)
 80172f2:	4a4e      	ldr	r2, [pc, #312]	; (801742c <input_parameter+0x590>)
 80172f4:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 80172f6:	4b46      	ldr	r3, [pc, #280]	; (8017410 <input_parameter+0x574>)
 80172f8:	4a42      	ldr	r2, [pc, #264]	; (8017404 <input_parameter+0x568>)
 80172fa:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 80172fc:	4b44      	ldr	r3, [pc, #272]	; (8017410 <input_parameter+0x574>)
 80172fe:	4a36      	ldr	r2, [pc, #216]	; (80173d8 <input_parameter+0x53c>)
 8017300:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017302:	4b43      	ldr	r3, [pc, #268]	; (8017410 <input_parameter+0x574>)
 8017304:	4a4a      	ldr	r2, [pc, #296]	; (8017430 <input_parameter+0x594>)
 8017306:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017308:	4b41      	ldr	r3, [pc, #260]	; (8017410 <input_parameter+0x574>)
 801730a:	4a4a      	ldr	r2, [pc, #296]	; (8017434 <input_parameter+0x598>)
 801730c:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 801730e:	4b40      	ldr	r3, [pc, #256]	; (8017410 <input_parameter+0x574>)
 8017310:	4a49      	ldr	r2, [pc, #292]	; (8017438 <input_parameter+0x59c>)
 8017312:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8017314:	4b3e      	ldr	r3, [pc, #248]	; (8017410 <input_parameter+0x574>)
 8017316:	4a49      	ldr	r2, [pc, #292]	; (801743c <input_parameter+0x5a0>)
 8017318:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 801731a:	4b3d      	ldr	r3, [pc, #244]	; (8017410 <input_parameter+0x574>)
 801731c:	4a2e      	ldr	r2, [pc, #184]	; (80173d8 <input_parameter+0x53c>)
 801731e:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8017320:	4b3b      	ldr	r3, [pc, #236]	; (8017410 <input_parameter+0x574>)
 8017322:	4a47      	ldr	r2, [pc, #284]	; (8017440 <input_parameter+0x5a4>)
 8017324:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8017326:	4b3a      	ldr	r3, [pc, #232]	; (8017410 <input_parameter+0x574>)
 8017328:	4a42      	ldr	r2, [pc, #264]	; (8017434 <input_parameter+0x598>)
 801732a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 801732c:	4b38      	ldr	r3, [pc, #224]	; (8017410 <input_parameter+0x574>)
 801732e:	4a42      	ldr	r2, [pc, #264]	; (8017438 <input_parameter+0x59c>)
 8017330:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8017332:	4b37      	ldr	r3, [pc, #220]	; (8017410 <input_parameter+0x574>)
 8017334:	4a43      	ldr	r2, [pc, #268]	; (8017444 <input_parameter+0x5a8>)
 8017336:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8017338:	4b35      	ldr	r3, [pc, #212]	; (8017410 <input_parameter+0x574>)
 801733a:	4a27      	ldr	r2, [pc, #156]	; (80173d8 <input_parameter+0x53c>)
 801733c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8017340:	4b33      	ldr	r3, [pc, #204]	; (8017410 <input_parameter+0x574>)
 8017342:	4a41      	ldr	r2, [pc, #260]	; (8017448 <input_parameter+0x5ac>)
 8017344:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8017348:	4b31      	ldr	r3, [pc, #196]	; (8017410 <input_parameter+0x574>)
 801734a:	4a40      	ldr	r2, [pc, #256]	; (801744c <input_parameter+0x5b0>)
 801734c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8017350:	4b2f      	ldr	r3, [pc, #188]	; (8017410 <input_parameter+0x574>)
 8017352:	4a3f      	ldr	r2, [pc, #252]	; (8017450 <input_parameter+0x5b4>)
 8017354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8017358:	4b2d      	ldr	r3, [pc, #180]	; (8017410 <input_parameter+0x574>)
 801735a:	4a3e      	ldr	r2, [pc, #248]	; (8017454 <input_parameter+0x5b8>)
 801735c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8017360:	4b2b      	ldr	r3, [pc, #172]	; (8017410 <input_parameter+0x574>)
 8017362:	4a1d      	ldr	r2, [pc, #116]	; (80173d8 <input_parameter+0x53c>)
 8017364:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8017368:	4b29      	ldr	r3, [pc, #164]	; (8017410 <input_parameter+0x574>)
 801736a:	4a3b      	ldr	r2, [pc, #236]	; (8017458 <input_parameter+0x5bc>)
 801736c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8017370:	4b27      	ldr	r3, [pc, #156]	; (8017410 <input_parameter+0x574>)
 8017372:	4a36      	ldr	r2, [pc, #216]	; (801744c <input_parameter+0x5b0>)
 8017374:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8017378:	4b25      	ldr	r3, [pc, #148]	; (8017410 <input_parameter+0x574>)
 801737a:	4a38      	ldr	r2, [pc, #224]	; (801745c <input_parameter+0x5c0>)
 801737c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8017380:	4b23      	ldr	r3, [pc, #140]	; (8017410 <input_parameter+0x574>)
 8017382:	4a37      	ldr	r2, [pc, #220]	; (8017460 <input_parameter+0x5c4>)
 8017384:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8017388:	4b21      	ldr	r3, [pc, #132]	; (8017410 <input_parameter+0x574>)
 801738a:	4a13      	ldr	r2, [pc, #76]	; (80173d8 <input_parameter+0x53c>)
 801738c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8017390:	4b1f      	ldr	r3, [pc, #124]	; (8017410 <input_parameter+0x574>)
 8017392:	4a34      	ldr	r2, [pc, #208]	; (8017464 <input_parameter+0x5c8>)
 8017394:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8017398:	4b1d      	ldr	r3, [pc, #116]	; (8017410 <input_parameter+0x574>)
 801739a:	4a26      	ldr	r2, [pc, #152]	; (8017434 <input_parameter+0x598>)
 801739c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 80173a0:	4b1b      	ldr	r3, [pc, #108]	; (8017410 <input_parameter+0x574>)
 80173a2:	4a31      	ldr	r2, [pc, #196]	; (8017468 <input_parameter+0x5cc>)
 80173a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 80173a8:	4b19      	ldr	r3, [pc, #100]	; (8017410 <input_parameter+0x574>)
 80173aa:	4a2d      	ldr	r2, [pc, #180]	; (8017460 <input_parameter+0x5c4>)
 80173ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 80173b0:	4b17      	ldr	r3, [pc, #92]	; (8017410 <input_parameter+0x574>)
 80173b2:	4a09      	ldr	r2, [pc, #36]	; (80173d8 <input_parameter+0x53c>)
 80173b4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80173b8:	4b15      	ldr	r3, [pc, #84]	; (8017410 <input_parameter+0x574>)
 80173ba:	4a2c      	ldr	r2, [pc, #176]	; (801746c <input_parameter+0x5d0>)
 80173bc:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80173c0:	4b13      	ldr	r3, [pc, #76]	; (8017410 <input_parameter+0x574>)
 80173c2:	4a1c      	ldr	r2, [pc, #112]	; (8017434 <input_parameter+0x598>)
 80173c4:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80173c8:	e052      	b.n	8017470 <input_parameter+0x5d4>
 80173ca:	bf00      	nop
 80173cc:	42860000 	.word	0x42860000
 80173d0:	2000ddbc 	.word	0x2000ddbc
 80173d4:	42920000 	.word	0x42920000
 80173d8:	44160000 	.word	0x44160000
 80173dc:	461c4000 	.word	0x461c4000
 80173e0:	42640000 	.word	0x42640000
 80173e4:	42500000 	.word	0x42500000
 80173e8:	44250000 	.word	0x44250000
 80173ec:	45fa0000 	.word	0x45fa0000
 80173f0:	425c0000 	.word	0x425c0000
 80173f4:	42c80000 	.word	0x42c80000
 80173f8:	42ce0000 	.word	0x42ce0000
 80173fc:	442f0000 	.word	0x442f0000
 8017400:	462be000 	.word	0x462be000
 8017404:	420c0000 	.word	0x420c0000
 8017408:	42600000 	.word	0x42600000
 801740c:	42700000 	.word	0x42700000
 8017410:	2000df04 	.word	0x2000df04
 8017414:	44898000 	.word	0x44898000
 8017418:	476a6000 	.word	0x476a6000
 801741c:	40a00000 	.word	0x40a00000
 8017420:	41e00000 	.word	0x41e00000
 8017424:	446d8000 	.word	0x446d8000
 8017428:	466a6000 	.word	0x466a6000
 801742c:	41f80000 	.word	0x41f80000
 8017430:	44520000 	.word	0x44520000
 8017434:	465ac000 	.word	0x465ac000
 8017438:	40e00000 	.word	0x40e00000
 801743c:	41a00000 	.word	0x41a00000
 8017440:	444d0000 	.word	0x444d0000
 8017444:	41900000 	.word	0x41900000
 8017448:	444f8000 	.word	0x444f8000
 801744c:	463b8000 	.word	0x463b8000
 8017450:	41500000 	.word	0x41500000
 8017454:	42180000 	.word	0x42180000
 8017458:	44608000 	.word	0x44608000
 801745c:	41400000 	.word	0x41400000
 8017460:	42100000 	.word	0x42100000
 8017464:	446b0000 	.word	0x446b0000
 8017468:	41180000 	.word	0x41180000
 801746c:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8017470:	4b43      	ldr	r3, [pc, #268]	; (8017580 <input_parameter+0x6e4>)
 8017472:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017476:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 801747a:	4b41      	ldr	r3, [pc, #260]	; (8017580 <input_parameter+0x6e4>)
 801747c:	4a41      	ldr	r2, [pc, #260]	; (8017584 <input_parameter+0x6e8>)
 801747e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8017482:	4b3f      	ldr	r3, [pc, #252]	; (8017580 <input_parameter+0x6e4>)
 8017484:	4a40      	ldr	r2, [pc, #256]	; (8017588 <input_parameter+0x6ec>)
 8017486:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 801748a:	4b3d      	ldr	r3, [pc, #244]	; (8017580 <input_parameter+0x6e4>)
 801748c:	4a3f      	ldr	r2, [pc, #252]	; (801758c <input_parameter+0x6f0>)
 801748e:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8017492:	4b3b      	ldr	r3, [pc, #236]	; (8017580 <input_parameter+0x6e4>)
 8017494:	4a3e      	ldr	r2, [pc, #248]	; (8017590 <input_parameter+0x6f4>)
 8017496:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 801749a:	4b39      	ldr	r3, [pc, #228]	; (8017580 <input_parameter+0x6e4>)
 801749c:	4a3d      	ldr	r2, [pc, #244]	; (8017594 <input_parameter+0x6f8>)
 801749e:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80174a2:	4b37      	ldr	r3, [pc, #220]	; (8017580 <input_parameter+0x6e4>)
 80174a4:	4a3c      	ldr	r2, [pc, #240]	; (8017598 <input_parameter+0x6fc>)
 80174a6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 80174aa:	4b35      	ldr	r3, [pc, #212]	; (8017580 <input_parameter+0x6e4>)
 80174ac:	4a36      	ldr	r2, [pc, #216]	; (8017588 <input_parameter+0x6ec>)
 80174ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 80174b2:	4b33      	ldr	r3, [pc, #204]	; (8017580 <input_parameter+0x6e4>)
 80174b4:	4a39      	ldr	r2, [pc, #228]	; (801759c <input_parameter+0x700>)
 80174b6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 80174ba:	4b31      	ldr	r3, [pc, #196]	; (8017580 <input_parameter+0x6e4>)
 80174bc:	4a34      	ldr	r2, [pc, #208]	; (8017590 <input_parameter+0x6f4>)
 80174be:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 80174c2:	4b2f      	ldr	r3, [pc, #188]	; (8017580 <input_parameter+0x6e4>)
 80174c4:	4a36      	ldr	r2, [pc, #216]	; (80175a0 <input_parameter+0x704>)
 80174c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80174ca:	4b2d      	ldr	r3, [pc, #180]	; (8017580 <input_parameter+0x6e4>)
 80174cc:	4a35      	ldr	r2, [pc, #212]	; (80175a4 <input_parameter+0x708>)
 80174ce:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 80174d2:	4b2b      	ldr	r3, [pc, #172]	; (8017580 <input_parameter+0x6e4>)
 80174d4:	4a2c      	ldr	r2, [pc, #176]	; (8017588 <input_parameter+0x6ec>)
 80174d6:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 80174da:	4b29      	ldr	r3, [pc, #164]	; (8017580 <input_parameter+0x6e4>)
 80174dc:	4a32      	ldr	r2, [pc, #200]	; (80175a8 <input_parameter+0x70c>)
 80174de:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 80174e2:	4b27      	ldr	r3, [pc, #156]	; (8017580 <input_parameter+0x6e4>)
 80174e4:	4a31      	ldr	r2, [pc, #196]	; (80175ac <input_parameter+0x710>)
 80174e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 80174ea:	4b25      	ldr	r3, [pc, #148]	; (8017580 <input_parameter+0x6e4>)
 80174ec:	4a30      	ldr	r2, [pc, #192]	; (80175b0 <input_parameter+0x714>)
 80174ee:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 80174f2:	4b23      	ldr	r3, [pc, #140]	; (8017580 <input_parameter+0x6e4>)
 80174f4:	4a28      	ldr	r2, [pc, #160]	; (8017598 <input_parameter+0x6fc>)
 80174f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 80174fa:	4b21      	ldr	r3, [pc, #132]	; (8017580 <input_parameter+0x6e4>)
 80174fc:	4a22      	ldr	r2, [pc, #136]	; (8017588 <input_parameter+0x6ec>)
 80174fe:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8017502:	4b1f      	ldr	r3, [pc, #124]	; (8017580 <input_parameter+0x6e4>)
 8017504:	4a2b      	ldr	r2, [pc, #172]	; (80175b4 <input_parameter+0x718>)
 8017506:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 801750a:	4b1d      	ldr	r3, [pc, #116]	; (8017580 <input_parameter+0x6e4>)
 801750c:	4a2a      	ldr	r2, [pc, #168]	; (80175b8 <input_parameter+0x71c>)
 801750e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8017512:	4b1b      	ldr	r3, [pc, #108]	; (8017580 <input_parameter+0x6e4>)
 8017514:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8017518:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 801751c:	4b18      	ldr	r3, [pc, #96]	; (8017580 <input_parameter+0x6e4>)
 801751e:	4a27      	ldr	r2, [pc, #156]	; (80175bc <input_parameter+0x720>)
 8017520:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8017524:	4b16      	ldr	r3, [pc, #88]	; (8017580 <input_parameter+0x6e4>)
 8017526:	4a18      	ldr	r2, [pc, #96]	; (8017588 <input_parameter+0x6ec>)
 8017528:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 801752c:	4b14      	ldr	r3, [pc, #80]	; (8017580 <input_parameter+0x6e4>)
 801752e:	4a24      	ldr	r2, [pc, #144]	; (80175c0 <input_parameter+0x724>)
 8017530:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8017534:	4b12      	ldr	r3, [pc, #72]	; (8017580 <input_parameter+0x6e4>)
 8017536:	4a1d      	ldr	r2, [pc, #116]	; (80175ac <input_parameter+0x710>)
 8017538:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 801753c:	4b10      	ldr	r3, [pc, #64]	; (8017580 <input_parameter+0x6e4>)
 801753e:	4a21      	ldr	r2, [pc, #132]	; (80175c4 <input_parameter+0x728>)
 8017540:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8017544:	4b0e      	ldr	r3, [pc, #56]	; (8017580 <input_parameter+0x6e4>)
 8017546:	4a20      	ldr	r2, [pc, #128]	; (80175c8 <input_parameter+0x72c>)
 8017548:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 801754c:	4b0c      	ldr	r3, [pc, #48]	; (8017580 <input_parameter+0x6e4>)
 801754e:	4a0e      	ldr	r2, [pc, #56]	; (8017588 <input_parameter+0x6ec>)
 8017550:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8017554:	4b0a      	ldr	r3, [pc, #40]	; (8017580 <input_parameter+0x6e4>)
 8017556:	4a1d      	ldr	r2, [pc, #116]	; (80175cc <input_parameter+0x730>)
 8017558:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 801755c:	4b08      	ldr	r3, [pc, #32]	; (8017580 <input_parameter+0x6e4>)
 801755e:	4a1c      	ldr	r2, [pc, #112]	; (80175d0 <input_parameter+0x734>)
 8017560:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8017564:	4b06      	ldr	r3, [pc, #24]	; (8017580 <input_parameter+0x6e4>)
 8017566:	4a1b      	ldr	r2, [pc, #108]	; (80175d4 <input_parameter+0x738>)
 8017568:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 801756c:	4b04      	ldr	r3, [pc, #16]	; (8017580 <input_parameter+0x6e4>)
 801756e:	4a16      	ldr	r2, [pc, #88]	; (80175c8 <input_parameter+0x72c>)
 8017570:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



}
 8017574:	bf00      	nop
 8017576:	46bd      	mov	sp, r7
 8017578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801757c:	4770      	bx	lr
 801757e:	bf00      	nop
 8017580:	2000df04 	.word	0x2000df04
 8017584:	42080000 	.word	0x42080000
 8017588:	44160000 	.word	0x44160000
 801758c:	44340000 	.word	0x44340000
 8017590:	463b8000 	.word	0x463b8000
 8017594:	422c0000 	.word	0x422c0000
 8017598:	41b00000 	.word	0x41b00000
 801759c:	443b8000 	.word	0x443b8000
 80175a0:	42200000 	.word	0x42200000
 80175a4:	41c00000 	.word	0x41c00000
 80175a8:	44660000 	.word	0x44660000
 80175ac:	466a6000 	.word	0x466a6000
 80175b0:	40a00000 	.word	0x40a00000
 80175b4:	445e8000 	.word	0x445e8000
 80175b8:	465ac000 	.word	0x465ac000
 80175bc:	42100000 	.word	0x42100000
 80175c0:	446b0000 	.word	0x446b0000
 80175c4:	41880000 	.word	0x41880000
 80175c8:	41a00000 	.word	0x41a00000
 80175cc:	44700000 	.word	0x44700000
 80175d0:	467a0000 	.word	0x467a0000
 80175d4:	41200000 	.word	0x41200000

080175d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80175d8:	b580      	push	{r7, lr}
 80175da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80175dc:	4b22      	ldr	r3, [pc, #136]	; (8017668 <MX_USART1_UART_Init+0x90>)
 80175de:	4a23      	ldr	r2, [pc, #140]	; (801766c <MX_USART1_UART_Init+0x94>)
 80175e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80175e2:	4b21      	ldr	r3, [pc, #132]	; (8017668 <MX_USART1_UART_Init+0x90>)
 80175e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80175e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80175ea:	4b1f      	ldr	r3, [pc, #124]	; (8017668 <MX_USART1_UART_Init+0x90>)
 80175ec:	2200      	movs	r2, #0
 80175ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80175f0:	4b1d      	ldr	r3, [pc, #116]	; (8017668 <MX_USART1_UART_Init+0x90>)
 80175f2:	2200      	movs	r2, #0
 80175f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80175f6:	4b1c      	ldr	r3, [pc, #112]	; (8017668 <MX_USART1_UART_Init+0x90>)
 80175f8:	2200      	movs	r2, #0
 80175fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80175fc:	4b1a      	ldr	r3, [pc, #104]	; (8017668 <MX_USART1_UART_Init+0x90>)
 80175fe:	220c      	movs	r2, #12
 8017600:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017602:	4b19      	ldr	r3, [pc, #100]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017604:	2200      	movs	r2, #0
 8017606:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017608:	4b17      	ldr	r3, [pc, #92]	; (8017668 <MX_USART1_UART_Init+0x90>)
 801760a:	2200      	movs	r2, #0
 801760c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801760e:	4b16      	ldr	r3, [pc, #88]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017610:	2200      	movs	r2, #0
 8017612:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8017614:	4b14      	ldr	r3, [pc, #80]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017616:	2200      	movs	r2, #0
 8017618:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801761a:	4b13      	ldr	r3, [pc, #76]	; (8017668 <MX_USART1_UART_Init+0x90>)
 801761c:	2200      	movs	r2, #0
 801761e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017620:	4811      	ldr	r0, [pc, #68]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017622:	f006 fd2d 	bl	801e080 <HAL_UART_Init>
 8017626:	4603      	mov	r3, r0
 8017628:	2b00      	cmp	r3, #0
 801762a:	d001      	beq.n	8017630 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 801762c:	f7f2 fc33 	bl	8009e96 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017630:	2100      	movs	r1, #0
 8017632:	480d      	ldr	r0, [pc, #52]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017634:	f007 faf4 	bl	801ec20 <HAL_UARTEx_SetTxFifoThreshold>
 8017638:	4603      	mov	r3, r0
 801763a:	2b00      	cmp	r3, #0
 801763c:	d001      	beq.n	8017642 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801763e:	f7f2 fc2a 	bl	8009e96 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8017642:	2100      	movs	r1, #0
 8017644:	4808      	ldr	r0, [pc, #32]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017646:	f007 fb29 	bl	801ec9c <HAL_UARTEx_SetRxFifoThreshold>
 801764a:	4603      	mov	r3, r0
 801764c:	2b00      	cmp	r3, #0
 801764e:	d001      	beq.n	8017654 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8017650:	f7f2 fc21 	bl	8009e96 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8017654:	4804      	ldr	r0, [pc, #16]	; (8017668 <MX_USART1_UART_Init+0x90>)
 8017656:	f007 faaa 	bl	801ebae <HAL_UARTEx_DisableFifoMode>
 801765a:	4603      	mov	r3, r0
 801765c:	2b00      	cmp	r3, #0
 801765e:	d001      	beq.n	8017664 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8017660:	f7f2 fc19 	bl	8009e96 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8017664:	bf00      	nop
 8017666:	bd80      	pop	{r7, pc}
 8017668:	2000e04c 	.word	0x2000e04c
 801766c:	40013800 	.word	0x40013800

08017670 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b09e      	sub	sp, #120	; 0x78
 8017674:	af00      	add	r7, sp, #0
 8017676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017678:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801767c:	2200      	movs	r2, #0
 801767e:	601a      	str	r2, [r3, #0]
 8017680:	605a      	str	r2, [r3, #4]
 8017682:	609a      	str	r2, [r3, #8]
 8017684:	60da      	str	r2, [r3, #12]
 8017686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8017688:	f107 0314 	add.w	r3, r7, #20
 801768c:	2250      	movs	r2, #80	; 0x50
 801768e:	2100      	movs	r1, #0
 8017690:	4618      	mov	r0, r3
 8017692:	f007 fbc7 	bl	801ee24 <memset>
  if(uartHandle->Instance==USART1)
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	4a1f      	ldr	r2, [pc, #124]	; (8017718 <HAL_UART_MspInit+0xa8>)
 801769c:	4293      	cmp	r3, r2
 801769e:	d137      	bne.n	8017710 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80176a0:	2301      	movs	r3, #1
 80176a2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80176a4:	2300      	movs	r3, #0
 80176a6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80176a8:	f107 0314 	add.w	r3, r7, #20
 80176ac:	4618      	mov	r0, r3
 80176ae:	f004 f891 	bl	801b7d4 <HAL_RCCEx_PeriphCLKConfig>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d001      	beq.n	80176bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80176b8:	f7f2 fbed 	bl	8009e96 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80176bc:	4b17      	ldr	r3, [pc, #92]	; (801771c <HAL_UART_MspInit+0xac>)
 80176be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176c0:	4a16      	ldr	r2, [pc, #88]	; (801771c <HAL_UART_MspInit+0xac>)
 80176c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80176c6:	6613      	str	r3, [r2, #96]	; 0x60
 80176c8:	4b14      	ldr	r3, [pc, #80]	; (801771c <HAL_UART_MspInit+0xac>)
 80176ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80176cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80176d0:	613b      	str	r3, [r7, #16]
 80176d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80176d4:	4b11      	ldr	r3, [pc, #68]	; (801771c <HAL_UART_MspInit+0xac>)
 80176d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176d8:	4a10      	ldr	r2, [pc, #64]	; (801771c <HAL_UART_MspInit+0xac>)
 80176da:	f043 0301 	orr.w	r3, r3, #1
 80176de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80176e0:	4b0e      	ldr	r3, [pc, #56]	; (801771c <HAL_UART_MspInit+0xac>)
 80176e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80176e4:	f003 0301 	and.w	r3, r3, #1
 80176e8:	60fb      	str	r3, [r7, #12]
 80176ea:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80176ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80176f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80176f2:	2302      	movs	r3, #2
 80176f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80176f6:	2300      	movs	r3, #0
 80176f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80176fa:	2300      	movs	r3, #0
 80176fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80176fe:	2307      	movs	r3, #7
 8017700:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017702:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8017706:	4619      	mov	r1, r3
 8017708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801770c:	f003 f8e4 	bl	801a8d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8017710:	bf00      	nop
 8017712:	3778      	adds	r7, #120	; 0x78
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	40013800 	.word	0x40013800
 801771c:	40021000 	.word	0x40021000

08017720 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8017720:	480d      	ldr	r0, [pc, #52]	; (8017758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8017722:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8017724:	480d      	ldr	r0, [pc, #52]	; (801775c <LoopForever+0x6>)
  ldr r1, =_edata
 8017726:	490e      	ldr	r1, [pc, #56]	; (8017760 <LoopForever+0xa>)
  ldr r2, =_sidata
 8017728:	4a0e      	ldr	r2, [pc, #56]	; (8017764 <LoopForever+0xe>)
  movs r3, #0
 801772a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 801772c:	e002      	b.n	8017734 <LoopCopyDataInit>

0801772e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801772e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8017730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8017732:	3304      	adds	r3, #4

08017734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8017734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8017736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8017738:	d3f9      	bcc.n	801772e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801773a:	4a0b      	ldr	r2, [pc, #44]	; (8017768 <LoopForever+0x12>)
  ldr r4, =_ebss
 801773c:	4c0b      	ldr	r4, [pc, #44]	; (801776c <LoopForever+0x16>)
  movs r3, #0
 801773e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8017740:	e001      	b.n	8017746 <LoopFillZerobss>

08017742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8017742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8017744:	3204      	adds	r2, #4

08017746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8017746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8017748:	d3fb      	bcc.n	8017742 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 801774a:	f7ff f8d9 	bl	8016900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801774e:	f007 fb37 	bl	801edc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8017752:	f7f2 faa5 	bl	8009ca0 <main>

08017756 <LoopForever>:

LoopForever:
    b LoopForever
 8017756:	e7fe      	b.n	8017756 <LoopForever>
  ldr   r0, =_estack
 8017758:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 801775c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8017760:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8017764:	08022578 	.word	0x08022578
  ldr r2, =_sbss
 8017768:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 801776c:	2000e0f0 	.word	0x2000e0f0

08017770 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8017770:	e7fe      	b.n	8017770 <ADC3_IRQHandler>
	...

08017774 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b082      	sub	sp, #8
 8017778:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 801777a:	2300      	movs	r3, #0
 801777c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801777e:	4b0c      	ldr	r3, [pc, #48]	; (80177b0 <HAL_Init+0x3c>)
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	4a0b      	ldr	r2, [pc, #44]	; (80177b0 <HAL_Init+0x3c>)
 8017784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8017788:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801778a:	2003      	movs	r0, #3
 801778c:	f002 fb30 	bl	8019df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8017790:	2000      	movs	r0, #0
 8017792:	f000 f80f 	bl	80177b4 <HAL_InitTick>
 8017796:	4603      	mov	r3, r0
 8017798:	2b00      	cmp	r3, #0
 801779a:	d002      	beq.n	80177a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 801779c:	2301      	movs	r3, #1
 801779e:	71fb      	strb	r3, [r7, #7]
 80177a0:	e001      	b.n	80177a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80177a2:	f7fe ff57 	bl	8016654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80177a6:	79fb      	ldrb	r3, [r7, #7]

}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3708      	adds	r7, #8
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	40022000 	.word	0x40022000

080177b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b084      	sub	sp, #16
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80177bc:	2300      	movs	r3, #0
 80177be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80177c0:	4b16      	ldr	r3, [pc, #88]	; (801781c <HAL_InitTick+0x68>)
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d022      	beq.n	801780e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80177c8:	4b15      	ldr	r3, [pc, #84]	; (8017820 <HAL_InitTick+0x6c>)
 80177ca:	681a      	ldr	r2, [r3, #0]
 80177cc:	4b13      	ldr	r3, [pc, #76]	; (801781c <HAL_InitTick+0x68>)
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80177d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80177d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80177dc:	4618      	mov	r0, r3
 80177de:	f002 fb3a 	bl	8019e56 <HAL_SYSTICK_Config>
 80177e2:	4603      	mov	r3, r0
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d10f      	bne.n	8017808 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	2b0f      	cmp	r3, #15
 80177ec:	d809      	bhi.n	8017802 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80177ee:	2200      	movs	r2, #0
 80177f0:	6879      	ldr	r1, [r7, #4]
 80177f2:	f04f 30ff 	mov.w	r0, #4294967295
 80177f6:	f002 fb06 	bl	8019e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80177fa:	4a0a      	ldr	r2, [pc, #40]	; (8017824 <HAL_InitTick+0x70>)
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	6013      	str	r3, [r2, #0]
 8017800:	e007      	b.n	8017812 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8017802:	2301      	movs	r3, #1
 8017804:	73fb      	strb	r3, [r7, #15]
 8017806:	e004      	b.n	8017812 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8017808:	2301      	movs	r3, #1
 801780a:	73fb      	strb	r3, [r7, #15]
 801780c:	e001      	b.n	8017812 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 801780e:	2301      	movs	r3, #1
 8017810:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8017812:	7bfb      	ldrb	r3, [r7, #15]
}
 8017814:	4618      	mov	r0, r3
 8017816:	3710      	adds	r7, #16
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}
 801781c:	20000008 	.word	0x20000008
 8017820:	20000000 	.word	0x20000000
 8017824:	20000004 	.word	0x20000004

08017828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8017828:	b480      	push	{r7}
 801782a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 801782c:	4b05      	ldr	r3, [pc, #20]	; (8017844 <HAL_IncTick+0x1c>)
 801782e:	681a      	ldr	r2, [r3, #0]
 8017830:	4b05      	ldr	r3, [pc, #20]	; (8017848 <HAL_IncTick+0x20>)
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	4413      	add	r3, r2
 8017836:	4a03      	ldr	r2, [pc, #12]	; (8017844 <HAL_IncTick+0x1c>)
 8017838:	6013      	str	r3, [r2, #0]
}
 801783a:	bf00      	nop
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr
 8017844:	2000e0dc 	.word	0x2000e0dc
 8017848:	20000008 	.word	0x20000008

0801784c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801784c:	b480      	push	{r7}
 801784e:	af00      	add	r7, sp, #0
  return uwTick;
 8017850:	4b03      	ldr	r3, [pc, #12]	; (8017860 <HAL_GetTick+0x14>)
 8017852:	681b      	ldr	r3, [r3, #0]
}
 8017854:	4618      	mov	r0, r3
 8017856:	46bd      	mov	sp, r7
 8017858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785c:	4770      	bx	lr
 801785e:	bf00      	nop
 8017860:	2000e0dc 	.word	0x2000e0dc

08017864 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8017864:	b580      	push	{r7, lr}
 8017866:	b084      	sub	sp, #16
 8017868:	af00      	add	r7, sp, #0
 801786a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801786c:	f7ff ffee 	bl	801784c <HAL_GetTick>
 8017870:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801787c:	d004      	beq.n	8017888 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801787e:	4b09      	ldr	r3, [pc, #36]	; (80178a4 <HAL_Delay+0x40>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	68fa      	ldr	r2, [r7, #12]
 8017884:	4413      	add	r3, r2
 8017886:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8017888:	bf00      	nop
 801788a:	f7ff ffdf 	bl	801784c <HAL_GetTick>
 801788e:	4602      	mov	r2, r0
 8017890:	68bb      	ldr	r3, [r7, #8]
 8017892:	1ad3      	subs	r3, r2, r3
 8017894:	68fa      	ldr	r2, [r7, #12]
 8017896:	429a      	cmp	r2, r3
 8017898:	d8f7      	bhi.n	801788a <HAL_Delay+0x26>
  {
  }
}
 801789a:	bf00      	nop
 801789c:	bf00      	nop
 801789e:	3710      	adds	r7, #16
 80178a0:	46bd      	mov	sp, r7
 80178a2:	bd80      	pop	{r7, pc}
 80178a4:	20000008 	.word	0x20000008

080178a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80178a8:	b480      	push	{r7}
 80178aa:	b083      	sub	sp, #12
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	6078      	str	r0, [r7, #4]
 80178b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	689b      	ldr	r3, [r3, #8]
 80178b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80178ba:	683b      	ldr	r3, [r7, #0]
 80178bc:	431a      	orrs	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	609a      	str	r2, [r3, #8]
}
 80178c2:	bf00      	nop
 80178c4:	370c      	adds	r7, #12
 80178c6:	46bd      	mov	sp, r7
 80178c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178cc:	4770      	bx	lr

080178ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80178ce:	b480      	push	{r7}
 80178d0:	b083      	sub	sp, #12
 80178d2:	af00      	add	r7, sp, #0
 80178d4:	6078      	str	r0, [r7, #4]
 80178d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	689b      	ldr	r3, [r3, #8]
 80178dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80178e0:	683b      	ldr	r3, [r7, #0]
 80178e2:	431a      	orrs	r2, r3
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	609a      	str	r2, [r3, #8]
}
 80178e8:	bf00      	nop
 80178ea:	370c      	adds	r7, #12
 80178ec:	46bd      	mov	sp, r7
 80178ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178f2:	4770      	bx	lr

080178f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80178f4:	b480      	push	{r7}
 80178f6:	b083      	sub	sp, #12
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	689b      	ldr	r3, [r3, #8]
 8017900:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8017904:	4618      	mov	r0, r3
 8017906:	370c      	adds	r7, #12
 8017908:	46bd      	mov	sp, r7
 801790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790e:	4770      	bx	lr

08017910 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8017910:	b480      	push	{r7}
 8017912:	b087      	sub	sp, #28
 8017914:	af00      	add	r7, sp, #0
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
 801791c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	3360      	adds	r3, #96	; 0x60
 8017922:	461a      	mov	r2, r3
 8017924:	68bb      	ldr	r3, [r7, #8]
 8017926:	009b      	lsls	r3, r3, #2
 8017928:	4413      	add	r3, r2
 801792a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	681a      	ldr	r2, [r3, #0]
 8017930:	4b08      	ldr	r3, [pc, #32]	; (8017954 <LL_ADC_SetOffset+0x44>)
 8017932:	4013      	ands	r3, r2
 8017934:	687a      	ldr	r2, [r7, #4]
 8017936:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 801793a:	683a      	ldr	r2, [r7, #0]
 801793c:	430a      	orrs	r2, r1
 801793e:	4313      	orrs	r3, r2
 8017940:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017944:	697b      	ldr	r3, [r7, #20]
 8017946:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8017948:	bf00      	nop
 801794a:	371c      	adds	r7, #28
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr
 8017954:	03fff000 	.word	0x03fff000

08017958 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8017958:	b480      	push	{r7}
 801795a:	b085      	sub	sp, #20
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
 8017960:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	3360      	adds	r3, #96	; 0x60
 8017966:	461a      	mov	r2, r3
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	009b      	lsls	r3, r3, #2
 801796c:	4413      	add	r3, r2
 801796e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8017978:	4618      	mov	r0, r3
 801797a:	3714      	adds	r7, #20
 801797c:	46bd      	mov	sp, r7
 801797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017982:	4770      	bx	lr

08017984 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8017984:	b480      	push	{r7}
 8017986:	b087      	sub	sp, #28
 8017988:	af00      	add	r7, sp, #0
 801798a:	60f8      	str	r0, [r7, #12]
 801798c:	60b9      	str	r1, [r7, #8]
 801798e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8017990:	68fb      	ldr	r3, [r7, #12]
 8017992:	3360      	adds	r3, #96	; 0x60
 8017994:	461a      	mov	r2, r3
 8017996:	68bb      	ldr	r3, [r7, #8]
 8017998:	009b      	lsls	r3, r3, #2
 801799a:	4413      	add	r3, r2
 801799c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801799e:	697b      	ldr	r3, [r7, #20]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	431a      	orrs	r2, r3
 80179aa:	697b      	ldr	r3, [r7, #20]
 80179ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80179ae:	bf00      	nop
 80179b0:	371c      	adds	r7, #28
 80179b2:	46bd      	mov	sp, r7
 80179b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b8:	4770      	bx	lr

080179ba <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80179ba:	b480      	push	{r7}
 80179bc:	b087      	sub	sp, #28
 80179be:	af00      	add	r7, sp, #0
 80179c0:	60f8      	str	r0, [r7, #12]
 80179c2:	60b9      	str	r1, [r7, #8]
 80179c4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80179c6:	68fb      	ldr	r3, [r7, #12]
 80179c8:	3360      	adds	r3, #96	; 0x60
 80179ca:	461a      	mov	r2, r3
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	009b      	lsls	r3, r3, #2
 80179d0:	4413      	add	r3, r2
 80179d2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	431a      	orrs	r2, r3
 80179e0:	697b      	ldr	r3, [r7, #20]
 80179e2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80179e4:	bf00      	nop
 80179e6:	371c      	adds	r7, #28
 80179e8:	46bd      	mov	sp, r7
 80179ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179ee:	4770      	bx	lr

080179f0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80179f0:	b480      	push	{r7}
 80179f2:	b087      	sub	sp, #28
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	60f8      	str	r0, [r7, #12]
 80179f8:	60b9      	str	r1, [r7, #8]
 80179fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	3360      	adds	r3, #96	; 0x60
 8017a00:	461a      	mov	r2, r3
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	009b      	lsls	r3, r3, #2
 8017a06:	4413      	add	r3, r2
 8017a08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017a0a:	697b      	ldr	r3, [r7, #20]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	431a      	orrs	r2, r3
 8017a16:	697b      	ldr	r3, [r7, #20]
 8017a18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8017a1a:	bf00      	nop
 8017a1c:	371c      	adds	r7, #28
 8017a1e:	46bd      	mov	sp, r7
 8017a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a24:	4770      	bx	lr

08017a26 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8017a26:	b480      	push	{r7}
 8017a28:	b083      	sub	sp, #12
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	6078      	str	r0, [r7, #4]
 8017a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	695b      	ldr	r3, [r3, #20]
 8017a34:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017a38:	683b      	ldr	r3, [r7, #0]
 8017a3a:	431a      	orrs	r2, r3
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	615a      	str	r2, [r3, #20]
}
 8017a40:	bf00      	nop
 8017a42:	370c      	adds	r7, #12
 8017a44:	46bd      	mov	sp, r7
 8017a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4a:	4770      	bx	lr

08017a4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017a4c:	b480      	push	{r7}
 8017a4e:	b083      	sub	sp, #12
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	68db      	ldr	r3, [r3, #12]
 8017a58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d101      	bne.n	8017a64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8017a60:	2301      	movs	r3, #1
 8017a62:	e000      	b.n	8017a66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8017a64:	2300      	movs	r3, #0
}
 8017a66:	4618      	mov	r0, r3
 8017a68:	370c      	adds	r7, #12
 8017a6a:	46bd      	mov	sp, r7
 8017a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a70:	4770      	bx	lr

08017a72 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8017a72:	b480      	push	{r7}
 8017a74:	b087      	sub	sp, #28
 8017a76:	af00      	add	r7, sp, #0
 8017a78:	60f8      	str	r0, [r7, #12]
 8017a7a:	60b9      	str	r1, [r7, #8]
 8017a7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8017a7e:	68fb      	ldr	r3, [r7, #12]
 8017a80:	3330      	adds	r3, #48	; 0x30
 8017a82:	461a      	mov	r2, r3
 8017a84:	68bb      	ldr	r3, [r7, #8]
 8017a86:	0a1b      	lsrs	r3, r3, #8
 8017a88:	009b      	lsls	r3, r3, #2
 8017a8a:	f003 030c 	and.w	r3, r3, #12
 8017a8e:	4413      	add	r3, r2
 8017a90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017a92:	697b      	ldr	r3, [r7, #20]
 8017a94:	681a      	ldr	r2, [r3, #0]
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	f003 031f 	and.w	r3, r3, #31
 8017a9c:	211f      	movs	r1, #31
 8017a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8017aa2:	43db      	mvns	r3, r3
 8017aa4:	401a      	ands	r2, r3
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	0e9b      	lsrs	r3, r3, #26
 8017aaa:	f003 011f 	and.w	r1, r3, #31
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	f003 031f 	and.w	r3, r3, #31
 8017ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8017ab8:	431a      	orrs	r2, r3
 8017aba:	697b      	ldr	r3, [r7, #20]
 8017abc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8017abe:	bf00      	nop
 8017ac0:	371c      	adds	r7, #28
 8017ac2:	46bd      	mov	sp, r7
 8017ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ac8:	4770      	bx	lr

08017aca <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8017aca:	b480      	push	{r7}
 8017acc:	b083      	sub	sp, #12
 8017ace:	af00      	add	r7, sp, #0
 8017ad0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ad6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d101      	bne.n	8017ae2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8017ade:	2301      	movs	r3, #1
 8017ae0:	e000      	b.n	8017ae4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8017ae2:	2300      	movs	r3, #0
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	370c      	adds	r7, #12
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aee:	4770      	bx	lr

08017af0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8017af0:	b480      	push	{r7}
 8017af2:	b087      	sub	sp, #28
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	60b9      	str	r1, [r7, #8]
 8017afa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8017afc:	68fb      	ldr	r3, [r7, #12]
 8017afe:	3314      	adds	r3, #20
 8017b00:	461a      	mov	r2, r3
 8017b02:	68bb      	ldr	r3, [r7, #8]
 8017b04:	0e5b      	lsrs	r3, r3, #25
 8017b06:	009b      	lsls	r3, r3, #2
 8017b08:	f003 0304 	and.w	r3, r3, #4
 8017b0c:	4413      	add	r3, r2
 8017b0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8017b10:	697b      	ldr	r3, [r7, #20]
 8017b12:	681a      	ldr	r2, [r3, #0]
 8017b14:	68bb      	ldr	r3, [r7, #8]
 8017b16:	0d1b      	lsrs	r3, r3, #20
 8017b18:	f003 031f 	and.w	r3, r3, #31
 8017b1c:	2107      	movs	r1, #7
 8017b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8017b22:	43db      	mvns	r3, r3
 8017b24:	401a      	ands	r2, r3
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	0d1b      	lsrs	r3, r3, #20
 8017b2a:	f003 031f 	and.w	r3, r3, #31
 8017b2e:	6879      	ldr	r1, [r7, #4]
 8017b30:	fa01 f303 	lsl.w	r3, r1, r3
 8017b34:	431a      	orrs	r2, r3
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8017b3a:	bf00      	nop
 8017b3c:	371c      	adds	r7, #28
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b44:	4770      	bx	lr
	...

08017b48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8017b48:	b480      	push	{r7}
 8017b4a:	b085      	sub	sp, #20
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	4a0f      	ldr	r2, [pc, #60]	; (8017b94 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d10a      	bne.n	8017b72 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8017b5c:	68fb      	ldr	r3, [r7, #12]
 8017b5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017b62:	68bb      	ldr	r3, [r7, #8]
 8017b64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017b68:	431a      	orrs	r2, r3
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8017b70:	e00a      	b.n	8017b88 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8017b78:	68bb      	ldr	r3, [r7, #8]
 8017b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8017b7e:	43db      	mvns	r3, r3
 8017b80:	401a      	ands	r2, r3
 8017b82:	68fb      	ldr	r3, [r7, #12]
 8017b84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8017b88:	bf00      	nop
 8017b8a:	3714      	adds	r7, #20
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b92:	4770      	bx	lr
 8017b94:	407f0000 	.word	0x407f0000

08017b98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017b98:	b480      	push	{r7}
 8017b9a:	b083      	sub	sp, #12
 8017b9c:	af00      	add	r7, sp, #0
 8017b9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	689b      	ldr	r3, [r3, #8]
 8017ba4:	f003 031f 	and.w	r3, r3, #31
}
 8017ba8:	4618      	mov	r0, r3
 8017baa:	370c      	adds	r7, #12
 8017bac:	46bd      	mov	sp, r7
 8017bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb2:	4770      	bx	lr

08017bb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8017bb4:	b480      	push	{r7}
 8017bb6:	b083      	sub	sp, #12
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	689b      	ldr	r3, [r3, #8]
 8017bc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	370c      	adds	r7, #12
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bce:	4770      	bx	lr

08017bd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	b083      	sub	sp, #12
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	689b      	ldr	r3, [r3, #8]
 8017bdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8017be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017be4:	687a      	ldr	r2, [r7, #4]
 8017be6:	6093      	str	r3, [r2, #8]
}
 8017be8:	bf00      	nop
 8017bea:	370c      	adds	r7, #12
 8017bec:	46bd      	mov	sp, r7
 8017bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf2:	4770      	bx	lr

08017bf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8017bf4:	b480      	push	{r7}
 8017bf6:	b083      	sub	sp, #12
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	689b      	ldr	r3, [r3, #8]
 8017c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017c08:	d101      	bne.n	8017c0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	e000      	b.n	8017c10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8017c0e:	2300      	movs	r3, #0
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	370c      	adds	r7, #12
 8017c14:	46bd      	mov	sp, r7
 8017c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c1a:	4770      	bx	lr

08017c1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8017c1c:	b480      	push	{r7}
 8017c1e:	b083      	sub	sp, #12
 8017c20:	af00      	add	r7, sp, #0
 8017c22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	689b      	ldr	r3, [r3, #8]
 8017c28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8017c2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017c30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8017c38:	bf00      	nop
 8017c3a:	370c      	adds	r7, #12
 8017c3c:	46bd      	mov	sp, r7
 8017c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c42:	4770      	bx	lr

08017c44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8017c44:	b480      	push	{r7}
 8017c46:	b083      	sub	sp, #12
 8017c48:	af00      	add	r7, sp, #0
 8017c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	689b      	ldr	r3, [r3, #8]
 8017c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8017c58:	d101      	bne.n	8017c5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	e000      	b.n	8017c60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8017c5e:	2300      	movs	r3, #0
}
 8017c60:	4618      	mov	r0, r3
 8017c62:	370c      	adds	r7, #12
 8017c64:	46bd      	mov	sp, r7
 8017c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c6a:	4770      	bx	lr

08017c6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8017c6c:	b480      	push	{r7}
 8017c6e:	b083      	sub	sp, #12
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	689b      	ldr	r3, [r3, #8]
 8017c78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017c80:	f043 0201 	orr.w	r2, r3, #1
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8017c88:	bf00      	nop
 8017c8a:	370c      	adds	r7, #12
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c92:	4770      	bx	lr

08017c94 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8017c94:	b480      	push	{r7}
 8017c96:	b083      	sub	sp, #12
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	689b      	ldr	r3, [r3, #8]
 8017ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017ca8:	f043 0202 	orr.w	r2, r3, #2
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8017cb0:	bf00      	nop
 8017cb2:	370c      	adds	r7, #12
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cba:	4770      	bx	lr

08017cbc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8017cbc:	b480      	push	{r7}
 8017cbe:	b083      	sub	sp, #12
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	689b      	ldr	r3, [r3, #8]
 8017cc8:	f003 0301 	and.w	r3, r3, #1
 8017ccc:	2b01      	cmp	r3, #1
 8017cce:	d101      	bne.n	8017cd4 <LL_ADC_IsEnabled+0x18>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	e000      	b.n	8017cd6 <LL_ADC_IsEnabled+0x1a>
 8017cd4:	2300      	movs	r3, #0
}
 8017cd6:	4618      	mov	r0, r3
 8017cd8:	370c      	adds	r7, #12
 8017cda:	46bd      	mov	sp, r7
 8017cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce0:	4770      	bx	lr

08017ce2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8017ce2:	b480      	push	{r7}
 8017ce4:	b083      	sub	sp, #12
 8017ce6:	af00      	add	r7, sp, #0
 8017ce8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	689b      	ldr	r3, [r3, #8]
 8017cee:	f003 0302 	and.w	r3, r3, #2
 8017cf2:	2b02      	cmp	r3, #2
 8017cf4:	d101      	bne.n	8017cfa <LL_ADC_IsDisableOngoing+0x18>
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	e000      	b.n	8017cfc <LL_ADC_IsDisableOngoing+0x1a>
 8017cfa:	2300      	movs	r3, #0
}
 8017cfc:	4618      	mov	r0, r3
 8017cfe:	370c      	adds	r7, #12
 8017d00:	46bd      	mov	sp, r7
 8017d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d06:	4770      	bx	lr

08017d08 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8017d08:	b480      	push	{r7}
 8017d0a:	b083      	sub	sp, #12
 8017d0c:	af00      	add	r7, sp, #0
 8017d0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	689b      	ldr	r3, [r3, #8]
 8017d14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017d1c:	f043 0204 	orr.w	r2, r3, #4
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8017d24:	bf00      	nop
 8017d26:	370c      	adds	r7, #12
 8017d28:	46bd      	mov	sp, r7
 8017d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2e:	4770      	bx	lr

08017d30 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8017d30:	b480      	push	{r7}
 8017d32:	b083      	sub	sp, #12
 8017d34:	af00      	add	r7, sp, #0
 8017d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	689b      	ldr	r3, [r3, #8]
 8017d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017d44:	f043 0210 	orr.w	r2, r3, #16
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8017d4c:	bf00      	nop
 8017d4e:	370c      	adds	r7, #12
 8017d50:	46bd      	mov	sp, r7
 8017d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d56:	4770      	bx	lr

08017d58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017d58:	b480      	push	{r7}
 8017d5a:	b083      	sub	sp, #12
 8017d5c:	af00      	add	r7, sp, #0
 8017d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	689b      	ldr	r3, [r3, #8]
 8017d64:	f003 0304 	and.w	r3, r3, #4
 8017d68:	2b04      	cmp	r3, #4
 8017d6a:	d101      	bne.n	8017d70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	e000      	b.n	8017d72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017d70:	2300      	movs	r3, #0
}
 8017d72:	4618      	mov	r0, r3
 8017d74:	370c      	adds	r7, #12
 8017d76:	46bd      	mov	sp, r7
 8017d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d7c:	4770      	bx	lr

08017d7e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8017d7e:	b480      	push	{r7}
 8017d80:	b083      	sub	sp, #12
 8017d82:	af00      	add	r7, sp, #0
 8017d84:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	689b      	ldr	r3, [r3, #8]
 8017d8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d8e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8017d92:	f043 0220 	orr.w	r2, r3, #32
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8017d9a:	bf00      	nop
 8017d9c:	370c      	adds	r7, #12
 8017d9e:	46bd      	mov	sp, r7
 8017da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da4:	4770      	bx	lr

08017da6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8017da6:	b480      	push	{r7}
 8017da8:	b083      	sub	sp, #12
 8017daa:	af00      	add	r7, sp, #0
 8017dac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	689b      	ldr	r3, [r3, #8]
 8017db2:	f003 0308 	and.w	r3, r3, #8
 8017db6:	2b08      	cmp	r3, #8
 8017db8:	d101      	bne.n	8017dbe <LL_ADC_INJ_IsConversionOngoing+0x18>
 8017dba:	2301      	movs	r3, #1
 8017dbc:	e000      	b.n	8017dc0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8017dbe:	2300      	movs	r3, #0
}
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	370c      	adds	r7, #12
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dca:	4770      	bx	lr

08017dcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8017dcc:	b590      	push	{r4, r7, lr}
 8017dce:	b089      	sub	sp, #36	; 0x24
 8017dd0:	af00      	add	r7, sp, #0
 8017dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8017dd8:	2300      	movs	r3, #0
 8017dda:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d101      	bne.n	8017de6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8017de2:	2301      	movs	r3, #1
 8017de4:	e1a1      	b.n	801812a <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	695b      	ldr	r3, [r3, #20]
 8017dea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d109      	bne.n	8017e08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8017df4:	6878      	ldr	r0, [r7, #4]
 8017df6:	f7f0 f9ff 	bl	80081f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	2200      	movs	r2, #0
 8017dfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	2200      	movs	r2, #0
 8017e04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4618      	mov	r0, r3
 8017e0e:	f7ff fef1 	bl	8017bf4 <LL_ADC_IsDeepPowerDownEnabled>
 8017e12:	4603      	mov	r3, r0
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d004      	beq.n	8017e22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7ff fed7 	bl	8017bd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4618      	mov	r0, r3
 8017e28:	f7ff ff0c 	bl	8017c44 <LL_ADC_IsInternalRegulatorEnabled>
 8017e2c:	4603      	mov	r3, r0
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d115      	bne.n	8017e5e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	681b      	ldr	r3, [r3, #0]
 8017e36:	4618      	mov	r0, r3
 8017e38:	f7ff fef0 	bl	8017c1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8017e3c:	4b9a      	ldr	r3, [pc, #616]	; (80180a8 <HAL_ADC_Init+0x2dc>)
 8017e3e:	681b      	ldr	r3, [r3, #0]
 8017e40:	099b      	lsrs	r3, r3, #6
 8017e42:	4a9a      	ldr	r2, [pc, #616]	; (80180ac <HAL_ADC_Init+0x2e0>)
 8017e44:	fba2 2303 	umull	r2, r3, r2, r3
 8017e48:	099b      	lsrs	r3, r3, #6
 8017e4a:	3301      	adds	r3, #1
 8017e4c:	005b      	lsls	r3, r3, #1
 8017e4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8017e50:	e002      	b.n	8017e58 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	3b01      	subs	r3, #1
 8017e56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d1f9      	bne.n	8017e52 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	4618      	mov	r0, r3
 8017e64:	f7ff feee 	bl	8017c44 <LL_ADC_IsInternalRegulatorEnabled>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d10d      	bne.n	8017e8a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e72:	f043 0210 	orr.w	r2, r3, #16
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017e7e:	f043 0201 	orr.w	r2, r3, #1
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017e86:	2301      	movs	r3, #1
 8017e88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	4618      	mov	r0, r3
 8017e90:	f7ff ff62 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 8017e94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017e9a:	f003 0310 	and.w	r3, r3, #16
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	f040 813a 	bne.w	8018118 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8017ea4:	697b      	ldr	r3, [r7, #20]
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	f040 8136 	bne.w	8018118 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017eb0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8017eb4:	f043 0202 	orr.w	r2, r3, #2
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7ff fefb 	bl	8017cbc <LL_ADC_IsEnabled>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d137      	bne.n	8017f3c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017ed4:	d004      	beq.n	8017ee0 <HAL_ADC_Init+0x114>
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	4a75      	ldr	r2, [pc, #468]	; (80180b0 <HAL_ADC_Init+0x2e4>)
 8017edc:	4293      	cmp	r3, r2
 8017ede:	d10f      	bne.n	8017f00 <HAL_ADC_Init+0x134>
 8017ee0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8017ee4:	f7ff feea 	bl	8017cbc <LL_ADC_IsEnabled>
 8017ee8:	4604      	mov	r4, r0
 8017eea:	4871      	ldr	r0, [pc, #452]	; (80180b0 <HAL_ADC_Init+0x2e4>)
 8017eec:	f7ff fee6 	bl	8017cbc <LL_ADC_IsEnabled>
 8017ef0:	4603      	mov	r3, r0
 8017ef2:	4323      	orrs	r3, r4
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	bf0c      	ite	eq
 8017ef8:	2301      	moveq	r3, #1
 8017efa:	2300      	movne	r3, #0
 8017efc:	b2db      	uxtb	r3, r3
 8017efe:	e008      	b.n	8017f12 <HAL_ADC_Init+0x146>
 8017f00:	486c      	ldr	r0, [pc, #432]	; (80180b4 <HAL_ADC_Init+0x2e8>)
 8017f02:	f7ff fedb 	bl	8017cbc <LL_ADC_IsEnabled>
 8017f06:	4603      	mov	r3, r0
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	bf0c      	ite	eq
 8017f0c:	2301      	moveq	r3, #1
 8017f0e:	2300      	movne	r3, #0
 8017f10:	b2db      	uxtb	r3, r3
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	d012      	beq.n	8017f3c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017f1e:	d004      	beq.n	8017f2a <HAL_ADC_Init+0x15e>
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	4a62      	ldr	r2, [pc, #392]	; (80180b0 <HAL_ADC_Init+0x2e4>)
 8017f26:	4293      	cmp	r3, r2
 8017f28:	d101      	bne.n	8017f2e <HAL_ADC_Init+0x162>
 8017f2a:	4a63      	ldr	r2, [pc, #396]	; (80180b8 <HAL_ADC_Init+0x2ec>)
 8017f2c:	e000      	b.n	8017f30 <HAL_ADC_Init+0x164>
 8017f2e:	4a63      	ldr	r2, [pc, #396]	; (80180bc <HAL_ADC_Init+0x2f0>)
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	685b      	ldr	r3, [r3, #4]
 8017f34:	4619      	mov	r1, r3
 8017f36:	4610      	mov	r0, r2
 8017f38:	f7ff fcb6 	bl	80178a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	7f5b      	ldrb	r3, [r3, #29]
 8017f40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8017f46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8017f4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8017f52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f5a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8017f5c:	4313      	orrs	r3, r2
 8017f5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d106      	bne.n	8017f78 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017f6e:	3b01      	subs	r3, #1
 8017f70:	045b      	lsls	r3, r3, #17
 8017f72:	69ba      	ldr	r2, [r7, #24]
 8017f74:	4313      	orrs	r3, r2
 8017f76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f7c:	2b00      	cmp	r3, #0
 8017f7e:	d009      	beq.n	8017f94 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f84:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8017f88:	687b      	ldr	r3, [r7, #4]
 8017f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017f8c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8017f8e:	69ba      	ldr	r2, [r7, #24]
 8017f90:	4313      	orrs	r3, r2
 8017f92:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	68da      	ldr	r2, [r3, #12]
 8017f9a:	4b49      	ldr	r3, [pc, #292]	; (80180c0 <HAL_ADC_Init+0x2f4>)
 8017f9c:	4013      	ands	r3, r2
 8017f9e:	687a      	ldr	r2, [r7, #4]
 8017fa0:	6812      	ldr	r2, [r2, #0]
 8017fa2:	69b9      	ldr	r1, [r7, #24]
 8017fa4:	430b      	orrs	r3, r1
 8017fa6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	691b      	ldr	r3, [r3, #16]
 8017fae:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	430a      	orrs	r2, r1
 8017fbc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	f7ff fec8 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 8017fc8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4618      	mov	r0, r3
 8017fd0:	f7ff fee9 	bl	8017da6 <LL_ADC_INJ_IsConversionOngoing>
 8017fd4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8017fd6:	693b      	ldr	r3, [r7, #16]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d17b      	bne.n	80180d4 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	d178      	bne.n	80180d4 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8017fe6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017fee:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8017ff0:	4313      	orrs	r3, r2
 8017ff2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	68db      	ldr	r3, [r3, #12]
 8017ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017ffe:	f023 0302 	bic.w	r3, r3, #2
 8018002:	687a      	ldr	r2, [r7, #4]
 8018004:	6812      	ldr	r2, [r2, #0]
 8018006:	69b9      	ldr	r1, [r7, #24]
 8018008:	430b      	orrs	r3, r1
 801800a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	691b      	ldr	r3, [r3, #16]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d017      	beq.n	8018044 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	691a      	ldr	r2, [r3, #16]
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018022:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801802c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018030:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018034:	687a      	ldr	r2, [r7, #4]
 8018036:	6911      	ldr	r1, [r2, #16]
 8018038:	687a      	ldr	r2, [r7, #4]
 801803a:	6812      	ldr	r2, [r2, #0]
 801803c:	430b      	orrs	r3, r1
 801803e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8018042:	e013      	b.n	801806c <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	681b      	ldr	r3, [r3, #0]
 8018048:	691a      	ldr	r2, [r3, #16]
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8018052:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801805c:	687a      	ldr	r2, [r7, #4]
 801805e:	6812      	ldr	r2, [r2, #0]
 8018060:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8018064:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018068:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018072:	2b01      	cmp	r3, #1
 8018074:	d126      	bne.n	80180c4 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	691b      	ldr	r3, [r3, #16]
 801807c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8018080:	f023 0304 	bic.w	r3, r3, #4
 8018084:	687a      	ldr	r2, [r7, #4]
 8018086:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801808c:	4311      	orrs	r1, r2
 801808e:	687a      	ldr	r2, [r7, #4]
 8018090:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8018092:	4311      	orrs	r1, r2
 8018094:	687a      	ldr	r2, [r7, #4]
 8018096:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8018098:	430a      	orrs	r2, r1
 801809a:	431a      	orrs	r2, r3
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f042 0201 	orr.w	r2, r2, #1
 80180a4:	611a      	str	r2, [r3, #16]
 80180a6:	e015      	b.n	80180d4 <HAL_ADC_Init+0x308>
 80180a8:	20000000 	.word	0x20000000
 80180ac:	053e2d63 	.word	0x053e2d63
 80180b0:	50000100 	.word	0x50000100
 80180b4:	50000400 	.word	0x50000400
 80180b8:	50000300 	.word	0x50000300
 80180bc:	50000700 	.word	0x50000700
 80180c0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	691a      	ldr	r2, [r3, #16]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	f022 0201 	bic.w	r2, r2, #1
 80180d2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	695b      	ldr	r3, [r3, #20]
 80180d8:	2b01      	cmp	r3, #1
 80180da:	d10c      	bne.n	80180f6 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180e2:	f023 010f 	bic.w	r1, r3, #15
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	6a1b      	ldr	r3, [r3, #32]
 80180ea:	1e5a      	subs	r2, r3, #1
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	430a      	orrs	r2, r1
 80180f2:	631a      	str	r2, [r3, #48]	; 0x30
 80180f4:	e007      	b.n	8018106 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f022 020f 	bic.w	r2, r2, #15
 8018104:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801810a:	f023 0303 	bic.w	r3, r3, #3
 801810e:	f043 0201 	orr.w	r2, r3, #1
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	65da      	str	r2, [r3, #92]	; 0x5c
 8018116:	e007      	b.n	8018128 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801811c:	f043 0210 	orr.w	r2, r3, #16
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8018124:	2301      	movs	r3, #1
 8018126:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8018128:	7ffb      	ldrb	r3, [r7, #31]
}
 801812a:	4618      	mov	r0, r3
 801812c:	3724      	adds	r7, #36	; 0x24
 801812e:	46bd      	mov	sp, r7
 8018130:	bd90      	pop	{r4, r7, pc}
 8018132:	bf00      	nop

08018134 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8018134:	b580      	push	{r7, lr}
 8018136:	b086      	sub	sp, #24
 8018138:	af00      	add	r7, sp, #0
 801813a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801813c:	687b      	ldr	r3, [r7, #4]
 801813e:	681b      	ldr	r3, [r3, #0]
 8018140:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018144:	d004      	beq.n	8018150 <HAL_ADC_Start+0x1c>
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	4a5c      	ldr	r2, [pc, #368]	; (80182bc <HAL_ADC_Start+0x188>)
 801814c:	4293      	cmp	r3, r2
 801814e:	d101      	bne.n	8018154 <HAL_ADC_Start+0x20>
 8018150:	4b5b      	ldr	r3, [pc, #364]	; (80182c0 <HAL_ADC_Start+0x18c>)
 8018152:	e000      	b.n	8018156 <HAL_ADC_Start+0x22>
 8018154:	4b5b      	ldr	r3, [pc, #364]	; (80182c4 <HAL_ADC_Start+0x190>)
 8018156:	4618      	mov	r0, r3
 8018158:	f7ff fd1e 	bl	8017b98 <LL_ADC_GetMultimode>
 801815c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	4618      	mov	r0, r3
 8018164:	f7ff fdf8 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 8018168:	4603      	mov	r3, r0
 801816a:	2b00      	cmp	r3, #0
 801816c:	f040 809f 	bne.w	80182ae <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018176:	2b01      	cmp	r3, #1
 8018178:	d101      	bne.n	801817e <HAL_ADC_Start+0x4a>
 801817a:	2302      	movs	r3, #2
 801817c:	e09a      	b.n	80182b4 <HAL_ADC_Start+0x180>
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2201      	movs	r2, #1
 8018182:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f001 fa3e 	bl	8019608 <ADC_Enable>
 801818c:	4603      	mov	r3, r0
 801818e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8018190:	7dfb      	ldrb	r3, [r7, #23]
 8018192:	2b00      	cmp	r3, #0
 8018194:	f040 8086 	bne.w	80182a4 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801819c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80181a0:	f023 0301 	bic.w	r3, r3, #1
 80181a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	681b      	ldr	r3, [r3, #0]
 80181b0:	4a42      	ldr	r2, [pc, #264]	; (80182bc <HAL_ADC_Start+0x188>)
 80181b2:	4293      	cmp	r3, r2
 80181b4:	d002      	beq.n	80181bc <HAL_ADC_Start+0x88>
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	e001      	b.n	80181c0 <HAL_ADC_Start+0x8c>
 80181bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80181c0:	687a      	ldr	r2, [r7, #4]
 80181c2:	6812      	ldr	r2, [r2, #0]
 80181c4:	4293      	cmp	r3, r2
 80181c6:	d002      	beq.n	80181ce <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80181c8:	693b      	ldr	r3, [r7, #16]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d105      	bne.n	80181da <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80181e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80181e6:	d106      	bne.n	80181f6 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80181ec:	f023 0206 	bic.w	r2, r3, #6
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	661a      	str	r2, [r3, #96]	; 0x60
 80181f4:	e002      	b.n	80181fc <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2200      	movs	r2, #0
 80181fa:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	221c      	movs	r2, #28
 8018202:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8018204:	687b      	ldr	r3, [r7, #4]
 8018206:	2200      	movs	r2, #0
 8018208:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	4a2a      	ldr	r2, [pc, #168]	; (80182bc <HAL_ADC_Start+0x188>)
 8018212:	4293      	cmp	r3, r2
 8018214:	d002      	beq.n	801821c <HAL_ADC_Start+0xe8>
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	e001      	b.n	8018220 <HAL_ADC_Start+0xec>
 801821c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018220:	687a      	ldr	r2, [r7, #4]
 8018222:	6812      	ldr	r2, [r2, #0]
 8018224:	4293      	cmp	r3, r2
 8018226:	d008      	beq.n	801823a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d005      	beq.n	801823a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	2b05      	cmp	r3, #5
 8018232:	d002      	beq.n	801823a <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	2b09      	cmp	r3, #9
 8018238:	d114      	bne.n	8018264 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	68db      	ldr	r3, [r3, #12]
 8018240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018244:	2b00      	cmp	r3, #0
 8018246:	d007      	beq.n	8018258 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801824c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8018250:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	681b      	ldr	r3, [r3, #0]
 801825c:	4618      	mov	r0, r3
 801825e:	f7ff fd53 	bl	8017d08 <LL_ADC_REG_StartConversion>
 8018262:	e026      	b.n	80182b2 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018268:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4a11      	ldr	r2, [pc, #68]	; (80182bc <HAL_ADC_Start+0x188>)
 8018276:	4293      	cmp	r3, r2
 8018278:	d002      	beq.n	8018280 <HAL_ADC_Start+0x14c>
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	e001      	b.n	8018284 <HAL_ADC_Start+0x150>
 8018280:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018284:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	68db      	ldr	r3, [r3, #12]
 801828a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801828e:	2b00      	cmp	r3, #0
 8018290:	d00f      	beq.n	80182b2 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018296:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801829a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80182a2:	e006      	b.n	80182b2 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	2200      	movs	r2, #0
 80182a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80182ac:	e001      	b.n	80182b2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80182ae:	2302      	movs	r3, #2
 80182b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80182b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80182b4:	4618      	mov	r0, r3
 80182b6:	3718      	adds	r7, #24
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}
 80182bc:	50000100 	.word	0x50000100
 80182c0:	50000300 	.word	0x50000300
 80182c4:	50000700 	.word	0x50000700

080182c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b084      	sub	sp, #16
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80182d6:	2b01      	cmp	r3, #1
 80182d8:	d101      	bne.n	80182de <HAL_ADC_Stop+0x16>
 80182da:	2302      	movs	r3, #2
 80182dc:	e023      	b.n	8018326 <HAL_ADC_Stop+0x5e>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	2201      	movs	r2, #1
 80182e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80182e6:	2103      	movs	r1, #3
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f001 f8d1 	bl	8019490 <ADC_ConversionStop>
 80182ee:	4603      	mov	r3, r0
 80182f0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80182f2:	7bfb      	ldrb	r3, [r7, #15]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	d111      	bne.n	801831c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80182f8:	6878      	ldr	r0, [r7, #4]
 80182fa:	f001 f9e7 	bl	80196cc <ADC_Disable>
 80182fe:	4603      	mov	r3, r0
 8018300:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018302:	7bfb      	ldrb	r3, [r7, #15]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d109      	bne.n	801831c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801830c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018310:	f023 0301 	bic.w	r3, r3, #1
 8018314:	f043 0201 	orr.w	r2, r3, #1
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2200      	movs	r2, #0
 8018320:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018324:	7bfb      	ldrb	r3, [r7, #15]
}
 8018326:	4618      	mov	r0, r3
 8018328:	3710      	adds	r7, #16
 801832a:	46bd      	mov	sp, r7
 801832c:	bd80      	pop	{r7, pc}
	...

08018330 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b088      	sub	sp, #32
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
 8018338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	681b      	ldr	r3, [r3, #0]
 801833e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018342:	d004      	beq.n	801834e <HAL_ADC_PollForConversion+0x1e>
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	4a70      	ldr	r2, [pc, #448]	; (801850c <HAL_ADC_PollForConversion+0x1dc>)
 801834a:	4293      	cmp	r3, r2
 801834c:	d101      	bne.n	8018352 <HAL_ADC_PollForConversion+0x22>
 801834e:	4b70      	ldr	r3, [pc, #448]	; (8018510 <HAL_ADC_PollForConversion+0x1e0>)
 8018350:	e000      	b.n	8018354 <HAL_ADC_PollForConversion+0x24>
 8018352:	4b70      	ldr	r3, [pc, #448]	; (8018514 <HAL_ADC_PollForConversion+0x1e4>)
 8018354:	4618      	mov	r0, r3
 8018356:	f7ff fc1f 	bl	8017b98 <LL_ADC_GetMultimode>
 801835a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	699b      	ldr	r3, [r3, #24]
 8018360:	2b08      	cmp	r3, #8
 8018362:	d102      	bne.n	801836a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8018364:	2308      	movs	r3, #8
 8018366:	61fb      	str	r3, [r7, #28]
 8018368:	e037      	b.n	80183da <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801836a:	697b      	ldr	r3, [r7, #20]
 801836c:	2b00      	cmp	r3, #0
 801836e:	d005      	beq.n	801837c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	2b05      	cmp	r3, #5
 8018374:	d002      	beq.n	801837c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018376:	697b      	ldr	r3, [r7, #20]
 8018378:	2b09      	cmp	r3, #9
 801837a:	d111      	bne.n	80183a0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	68db      	ldr	r3, [r3, #12]
 8018382:	f003 0301 	and.w	r3, r3, #1
 8018386:	2b00      	cmp	r3, #0
 8018388:	d007      	beq.n	801839a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801838e:	f043 0220 	orr.w	r2, r3, #32
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8018396:	2301      	movs	r3, #1
 8018398:	e0b3      	b.n	8018502 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801839a:	2304      	movs	r3, #4
 801839c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801839e:	e01c      	b.n	80183da <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80183a8:	d004      	beq.n	80183b4 <HAL_ADC_PollForConversion+0x84>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a57      	ldr	r2, [pc, #348]	; (801850c <HAL_ADC_PollForConversion+0x1dc>)
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d101      	bne.n	80183b8 <HAL_ADC_PollForConversion+0x88>
 80183b4:	4b56      	ldr	r3, [pc, #344]	; (8018510 <HAL_ADC_PollForConversion+0x1e0>)
 80183b6:	e000      	b.n	80183ba <HAL_ADC_PollForConversion+0x8a>
 80183b8:	4b56      	ldr	r3, [pc, #344]	; (8018514 <HAL_ADC_PollForConversion+0x1e4>)
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7ff fbfa 	bl	8017bb4 <LL_ADC_GetMultiDMATransfer>
 80183c0:	4603      	mov	r3, r0
 80183c2:	2b00      	cmp	r3, #0
 80183c4:	d007      	beq.n	80183d6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183ca:	f043 0220 	orr.w	r2, r3, #32
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80183d2:	2301      	movs	r3, #1
 80183d4:	e095      	b.n	8018502 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80183d6:	2304      	movs	r3, #4
 80183d8:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80183da:	f7ff fa37 	bl	801784c <HAL_GetTick>
 80183de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80183e0:	e021      	b.n	8018426 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80183e2:	683b      	ldr	r3, [r7, #0]
 80183e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183e8:	d01d      	beq.n	8018426 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80183ea:	f7ff fa2f 	bl	801784c <HAL_GetTick>
 80183ee:	4602      	mov	r2, r0
 80183f0:	693b      	ldr	r3, [r7, #16]
 80183f2:	1ad3      	subs	r3, r2, r3
 80183f4:	683a      	ldr	r2, [r7, #0]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d302      	bcc.n	8018400 <HAL_ADC_PollForConversion+0xd0>
 80183fa:	683b      	ldr	r3, [r7, #0]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d112      	bne.n	8018426 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	681a      	ldr	r2, [r3, #0]
 8018406:	69fb      	ldr	r3, [r7, #28]
 8018408:	4013      	ands	r3, r2
 801840a:	2b00      	cmp	r3, #0
 801840c:	d10b      	bne.n	8018426 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018412:	f043 0204 	orr.w	r2, r3, #4
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2200      	movs	r2, #0
 801841e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8018422:	2303      	movs	r3, #3
 8018424:	e06d      	b.n	8018502 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	681a      	ldr	r2, [r3, #0]
 801842c:	69fb      	ldr	r3, [r7, #28]
 801842e:	4013      	ands	r3, r2
 8018430:	2b00      	cmp	r3, #0
 8018432:	d0d6      	beq.n	80183e2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018438:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4618      	mov	r0, r3
 8018446:	f7ff fb01 	bl	8017a4c <LL_ADC_REG_IsTriggerSourceSWStart>
 801844a:	4603      	mov	r3, r0
 801844c:	2b00      	cmp	r3, #0
 801844e:	d01c      	beq.n	801848a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	7f5b      	ldrb	r3, [r3, #29]
 8018454:	2b00      	cmp	r3, #0
 8018456:	d118      	bne.n	801848a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	f003 0308 	and.w	r3, r3, #8
 8018462:	2b08      	cmp	r3, #8
 8018464:	d111      	bne.n	801848a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801846a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801847a:	2b00      	cmp	r3, #0
 801847c:	d105      	bne.n	801848a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018482:	f043 0201 	orr.w	r2, r3, #1
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	4a1f      	ldr	r2, [pc, #124]	; (801850c <HAL_ADC_PollForConversion+0x1dc>)
 8018490:	4293      	cmp	r3, r2
 8018492:	d002      	beq.n	801849a <HAL_ADC_PollForConversion+0x16a>
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	e001      	b.n	801849e <HAL_ADC_PollForConversion+0x16e>
 801849a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801849e:	687a      	ldr	r2, [r7, #4]
 80184a0:	6812      	ldr	r2, [r2, #0]
 80184a2:	4293      	cmp	r3, r2
 80184a4:	d008      	beq.n	80184b8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80184a6:	697b      	ldr	r3, [r7, #20]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d005      	beq.n	80184b8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80184ac:	697b      	ldr	r3, [r7, #20]
 80184ae:	2b05      	cmp	r3, #5
 80184b0:	d002      	beq.n	80184b8 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	2b09      	cmp	r3, #9
 80184b6:	d104      	bne.n	80184c2 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	68db      	ldr	r3, [r3, #12]
 80184be:	61bb      	str	r3, [r7, #24]
 80184c0:	e00d      	b.n	80184de <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80184c2:	687b      	ldr	r3, [r7, #4]
 80184c4:	681b      	ldr	r3, [r3, #0]
 80184c6:	4a11      	ldr	r2, [pc, #68]	; (801850c <HAL_ADC_PollForConversion+0x1dc>)
 80184c8:	4293      	cmp	r3, r2
 80184ca:	d002      	beq.n	80184d2 <HAL_ADC_PollForConversion+0x1a2>
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	e001      	b.n	80184d6 <HAL_ADC_PollForConversion+0x1a6>
 80184d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80184d6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	68db      	ldr	r3, [r3, #12]
 80184dc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80184de:	69fb      	ldr	r3, [r7, #28]
 80184e0:	2b08      	cmp	r3, #8
 80184e2:	d104      	bne.n	80184ee <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	2208      	movs	r2, #8
 80184ea:	601a      	str	r2, [r3, #0]
 80184ec:	e008      	b.n	8018500 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80184ee:	69bb      	ldr	r3, [r7, #24]
 80184f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d103      	bne.n	8018500 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	681b      	ldr	r3, [r3, #0]
 80184fc:	220c      	movs	r2, #12
 80184fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8018500:	2300      	movs	r3, #0
}
 8018502:	4618      	mov	r0, r3
 8018504:	3720      	adds	r7, #32
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}
 801850a:	bf00      	nop
 801850c:	50000100 	.word	0x50000100
 8018510:	50000300 	.word	0x50000300
 8018514:	50000700 	.word	0x50000700

08018518 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b086      	sub	sp, #24
 801851c:	af00      	add	r7, sp, #0
 801851e:	60f8      	str	r0, [r7, #12]
 8018520:	60b9      	str	r1, [r7, #8]
 8018522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801852c:	d004      	beq.n	8018538 <HAL_ADC_Start_DMA+0x20>
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	4a57      	ldr	r2, [pc, #348]	; (8018690 <HAL_ADC_Start_DMA+0x178>)
 8018534:	4293      	cmp	r3, r2
 8018536:	d101      	bne.n	801853c <HAL_ADC_Start_DMA+0x24>
 8018538:	4b56      	ldr	r3, [pc, #344]	; (8018694 <HAL_ADC_Start_DMA+0x17c>)
 801853a:	e000      	b.n	801853e <HAL_ADC_Start_DMA+0x26>
 801853c:	4b56      	ldr	r3, [pc, #344]	; (8018698 <HAL_ADC_Start_DMA+0x180>)
 801853e:	4618      	mov	r0, r3
 8018540:	f7ff fb2a 	bl	8017b98 <LL_ADC_GetMultimode>
 8018544:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	4618      	mov	r0, r3
 801854c:	f7ff fc04 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 8018550:	4603      	mov	r3, r0
 8018552:	2b00      	cmp	r3, #0
 8018554:	f040 8094 	bne.w	8018680 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801855e:	2b01      	cmp	r3, #1
 8018560:	d101      	bne.n	8018566 <HAL_ADC_Start_DMA+0x4e>
 8018562:	2302      	movs	r3, #2
 8018564:	e08f      	b.n	8018686 <HAL_ADC_Start_DMA+0x16e>
 8018566:	68fb      	ldr	r3, [r7, #12]
 8018568:	2201      	movs	r2, #1
 801856a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	4a4a      	ldr	r2, [pc, #296]	; (801869c <HAL_ADC_Start_DMA+0x184>)
 8018574:	4293      	cmp	r3, r2
 8018576:	d008      	beq.n	801858a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8018578:	693b      	ldr	r3, [r7, #16]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d005      	beq.n	801858a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801857e:	693b      	ldr	r3, [r7, #16]
 8018580:	2b05      	cmp	r3, #5
 8018582:	d002      	beq.n	801858a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8018584:	693b      	ldr	r3, [r7, #16]
 8018586:	2b09      	cmp	r3, #9
 8018588:	d173      	bne.n	8018672 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801858a:	68f8      	ldr	r0, [r7, #12]
 801858c:	f001 f83c 	bl	8019608 <ADC_Enable>
 8018590:	4603      	mov	r3, r0
 8018592:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8018594:	7dfb      	ldrb	r3, [r7, #23]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d166      	bne.n	8018668 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801859e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80185a2:	f023 0301 	bic.w	r3, r3, #1
 80185a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80185ae:	68fb      	ldr	r3, [r7, #12]
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	4a37      	ldr	r2, [pc, #220]	; (8018690 <HAL_ADC_Start_DMA+0x178>)
 80185b4:	4293      	cmp	r3, r2
 80185b6:	d002      	beq.n	80185be <HAL_ADC_Start_DMA+0xa6>
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	681b      	ldr	r3, [r3, #0]
 80185bc:	e001      	b.n	80185c2 <HAL_ADC_Start_DMA+0xaa>
 80185be:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80185c2:	68fa      	ldr	r2, [r7, #12]
 80185c4:	6812      	ldr	r2, [r2, #0]
 80185c6:	4293      	cmp	r3, r2
 80185c8:	d002      	beq.n	80185d0 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80185ca:	693b      	ldr	r3, [r7, #16]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d105      	bne.n	80185dc <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d006      	beq.n	80185f6 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80185ec:	f023 0206 	bic.w	r2, r3, #6
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	661a      	str	r2, [r3, #96]	; 0x60
 80185f4:	e002      	b.n	80185fc <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	2200      	movs	r2, #0
 80185fa:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018600:	4a27      	ldr	r2, [pc, #156]	; (80186a0 <HAL_ADC_Start_DMA+0x188>)
 8018602:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8018604:	68fb      	ldr	r3, [r7, #12]
 8018606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018608:	4a26      	ldr	r2, [pc, #152]	; (80186a4 <HAL_ADC_Start_DMA+0x18c>)
 801860a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018610:	4a25      	ldr	r2, [pc, #148]	; (80186a8 <HAL_ADC_Start_DMA+0x190>)
 8018612:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	681b      	ldr	r3, [r3, #0]
 8018618:	221c      	movs	r2, #28
 801861a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801861c:	68fb      	ldr	r3, [r7, #12]
 801861e:	2200      	movs	r2, #0
 8018620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	685a      	ldr	r2, [r3, #4]
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	f042 0210 	orr.w	r2, r2, #16
 8018632:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	681b      	ldr	r3, [r3, #0]
 8018638:	68da      	ldr	r2, [r3, #12]
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	681b      	ldr	r3, [r3, #0]
 801863e:	f042 0201 	orr.w	r2, r2, #1
 8018642:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8018648:	68fb      	ldr	r3, [r7, #12]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	3340      	adds	r3, #64	; 0x40
 801864e:	4619      	mov	r1, r3
 8018650:	68ba      	ldr	r2, [r7, #8]
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	f001 fcb4 	bl	8019fc0 <HAL_DMA_Start_IT>
 8018658:	4603      	mov	r3, r0
 801865a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	4618      	mov	r0, r3
 8018662:	f7ff fb51 	bl	8017d08 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8018666:	e00d      	b.n	8018684 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	2200      	movs	r2, #0
 801866c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8018670:	e008      	b.n	8018684 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8018672:	2301      	movs	r3, #1
 8018674:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	2200      	movs	r2, #0
 801867a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801867e:	e001      	b.n	8018684 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8018680:	2302      	movs	r3, #2
 8018682:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8018684:	7dfb      	ldrb	r3, [r7, #23]
}
 8018686:	4618      	mov	r0, r3
 8018688:	3718      	adds	r7, #24
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}
 801868e:	bf00      	nop
 8018690:	50000100 	.word	0x50000100
 8018694:	50000300 	.word	0x50000300
 8018698:	50000700 	.word	0x50000700
 801869c:	50000400 	.word	0x50000400
 80186a0:	0801978b 	.word	0x0801978b
 80186a4:	08019863 	.word	0x08019863
 80186a8:	0801987f 	.word	0x0801987f

080186ac <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b084      	sub	sp, #16
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80186ba:	2b01      	cmp	r3, #1
 80186bc:	d101      	bne.n	80186c2 <HAL_ADC_Stop_DMA+0x16>
 80186be:	2302      	movs	r3, #2
 80186c0:	e051      	b.n	8018766 <HAL_ADC_Stop_DMA+0xba>
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	2201      	movs	r2, #1
 80186c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80186ca:	2103      	movs	r1, #3
 80186cc:	6878      	ldr	r0, [r7, #4]
 80186ce:	f000 fedf 	bl	8019490 <ADC_ConversionStop>
 80186d2:	4603      	mov	r3, r0
 80186d4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80186d6:	7bfb      	ldrb	r3, [r7, #15]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d13f      	bne.n	801875c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	68da      	ldr	r2, [r3, #12]
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	681b      	ldr	r3, [r3, #0]
 80186e6:	f022 0201 	bic.w	r2, r2, #1
 80186ea:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80186f4:	b2db      	uxtb	r3, r3
 80186f6:	2b02      	cmp	r3, #2
 80186f8:	d10f      	bne.n	801871a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186fe:	4618      	mov	r0, r3
 8018700:	f001 fcd9 	bl	801a0b6 <HAL_DMA_Abort>
 8018704:	4603      	mov	r3, r0
 8018706:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8018708:	7bfb      	ldrb	r3, [r7, #15]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d005      	beq.n	801871a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018712:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	685a      	ldr	r2, [r3, #4]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	f022 0210 	bic.w	r2, r2, #16
 8018728:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801872a:	7bfb      	ldrb	r3, [r7, #15]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d105      	bne.n	801873c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8018730:	6878      	ldr	r0, [r7, #4]
 8018732:	f000 ffcb 	bl	80196cc <ADC_Disable>
 8018736:	4603      	mov	r3, r0
 8018738:	73fb      	strb	r3, [r7, #15]
 801873a:	e002      	b.n	8018742 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 801873c:	6878      	ldr	r0, [r7, #4]
 801873e:	f000 ffc5 	bl	80196cc <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8018742:	7bfb      	ldrb	r3, [r7, #15]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d109      	bne.n	801875c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801874c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8018750:	f023 0301 	bic.w	r3, r3, #1
 8018754:	f043 0201 	orr.w	r2, r3, #1
 8018758:	687b      	ldr	r3, [r7, #4]
 801875a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	2200      	movs	r2, #0
 8018760:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8018764:	7bfb      	ldrb	r3, [r7, #15]
}
 8018766:	4618      	mov	r0, r3
 8018768:	3710      	adds	r7, #16
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}

0801876e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801876e:	b480      	push	{r7}
 8018770:	b083      	sub	sp, #12
 8018772:	af00      	add	r7, sp, #0
 8018774:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8018776:	687b      	ldr	r3, [r7, #4]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801877c:	4618      	mov	r0, r3
 801877e:	370c      	adds	r7, #12
 8018780:	46bd      	mov	sp, r7
 8018782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018786:	4770      	bx	lr

08018788 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b08a      	sub	sp, #40	; 0x28
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8018790:	2300      	movs	r3, #0
 8018792:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	685b      	ldr	r3, [r3, #4]
 80187a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80187ac:	d004      	beq.n	80187b8 <HAL_ADC_IRQHandler+0x30>
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	4a87      	ldr	r2, [pc, #540]	; (80189d0 <HAL_ADC_IRQHandler+0x248>)
 80187b4:	4293      	cmp	r3, r2
 80187b6:	d101      	bne.n	80187bc <HAL_ADC_IRQHandler+0x34>
 80187b8:	4b86      	ldr	r3, [pc, #536]	; (80189d4 <HAL_ADC_IRQHandler+0x24c>)
 80187ba:	e000      	b.n	80187be <HAL_ADC_IRQHandler+0x36>
 80187bc:	4b86      	ldr	r3, [pc, #536]	; (80189d8 <HAL_ADC_IRQHandler+0x250>)
 80187be:	4618      	mov	r0, r3
 80187c0:	f7ff f9ea 	bl	8017b98 <LL_ADC_GetMultimode>
 80187c4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80187c6:	69fb      	ldr	r3, [r7, #28]
 80187c8:	f003 0302 	and.w	r3, r3, #2
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d017      	beq.n	8018800 <HAL_ADC_IRQHandler+0x78>
 80187d0:	69bb      	ldr	r3, [r7, #24]
 80187d2:	f003 0302 	and.w	r3, r3, #2
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d012      	beq.n	8018800 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187de:	f003 0310 	and.w	r3, r3, #16
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d105      	bne.n	80187f2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187ea:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f001 f93a 	bl	8019a6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	2202      	movs	r2, #2
 80187fe:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8018800:	69fb      	ldr	r3, [r7, #28]
 8018802:	f003 0304 	and.w	r3, r3, #4
 8018806:	2b00      	cmp	r3, #0
 8018808:	d004      	beq.n	8018814 <HAL_ADC_IRQHandler+0x8c>
 801880a:	69bb      	ldr	r3, [r7, #24]
 801880c:	f003 0304 	and.w	r3, r3, #4
 8018810:	2b00      	cmp	r3, #0
 8018812:	d10a      	bne.n	801882a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018814:	69fb      	ldr	r3, [r7, #28]
 8018816:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801881a:	2b00      	cmp	r3, #0
 801881c:	f000 8085 	beq.w	801892a <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8018820:	69bb      	ldr	r3, [r7, #24]
 8018822:	f003 0308 	and.w	r3, r3, #8
 8018826:	2b00      	cmp	r3, #0
 8018828:	d07f      	beq.n	801892a <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801882e:	f003 0310 	and.w	r3, r3, #16
 8018832:	2b00      	cmp	r3, #0
 8018834:	d105      	bne.n	8018842 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801883a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	681b      	ldr	r3, [r3, #0]
 8018846:	4618      	mov	r0, r3
 8018848:	f7ff f900 	bl	8017a4c <LL_ADC_REG_IsTriggerSourceSWStart>
 801884c:	4603      	mov	r3, r0
 801884e:	2b00      	cmp	r3, #0
 8018850:	d064      	beq.n	801891c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	4a5e      	ldr	r2, [pc, #376]	; (80189d0 <HAL_ADC_IRQHandler+0x248>)
 8018858:	4293      	cmp	r3, r2
 801885a:	d002      	beq.n	8018862 <HAL_ADC_IRQHandler+0xda>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	e001      	b.n	8018866 <HAL_ADC_IRQHandler+0xde>
 8018862:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8018866:	687a      	ldr	r2, [r7, #4]
 8018868:	6812      	ldr	r2, [r2, #0]
 801886a:	4293      	cmp	r3, r2
 801886c:	d008      	beq.n	8018880 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801886e:	697b      	ldr	r3, [r7, #20]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d005      	beq.n	8018880 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8018874:	697b      	ldr	r3, [r7, #20]
 8018876:	2b05      	cmp	r3, #5
 8018878:	d002      	beq.n	8018880 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	2b09      	cmp	r3, #9
 801887e:	d104      	bne.n	801888a <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	68db      	ldr	r3, [r3, #12]
 8018886:	623b      	str	r3, [r7, #32]
 8018888:	e00d      	b.n	80188a6 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4a50      	ldr	r2, [pc, #320]	; (80189d0 <HAL_ADC_IRQHandler+0x248>)
 8018890:	4293      	cmp	r3, r2
 8018892:	d002      	beq.n	801889a <HAL_ADC_IRQHandler+0x112>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	e001      	b.n	801889e <HAL_ADC_IRQHandler+0x116>
 801889a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801889e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	68db      	ldr	r3, [r3, #12]
 80188a4:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80188a6:	6a3b      	ldr	r3, [r7, #32]
 80188a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	d135      	bne.n	801891c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	f003 0308 	and.w	r3, r3, #8
 80188ba:	2b08      	cmp	r3, #8
 80188bc:	d12e      	bne.n	801891c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	4618      	mov	r0, r3
 80188c4:	f7ff fa48 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 80188c8:	4603      	mov	r3, r0
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d11a      	bne.n	8018904 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	685a      	ldr	r2, [r3, #4]
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	f022 020c 	bic.w	r2, r2, #12
 80188dc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d112      	bne.n	801891c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188fa:	f043 0201 	orr.w	r2, r3, #1
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	65da      	str	r2, [r3, #92]	; 0x5c
 8018902:	e00b      	b.n	801891c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018908:	f043 0210 	orr.w	r2, r3, #16
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018914:	f043 0201 	orr.w	r2, r3, #1
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	f7ef fd13 	bl	8008348 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	220c      	movs	r2, #12
 8018928:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801892a:	69fb      	ldr	r3, [r7, #28]
 801892c:	f003 0320 	and.w	r3, r3, #32
 8018930:	2b00      	cmp	r3, #0
 8018932:	d004      	beq.n	801893e <HAL_ADC_IRQHandler+0x1b6>
 8018934:	69bb      	ldr	r3, [r7, #24]
 8018936:	f003 0320 	and.w	r3, r3, #32
 801893a:	2b00      	cmp	r3, #0
 801893c:	d10b      	bne.n	8018956 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801893e:	69fb      	ldr	r3, [r7, #28]
 8018940:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8018944:	2b00      	cmp	r3, #0
 8018946:	f000 80a1 	beq.w	8018a8c <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801894a:	69bb      	ldr	r3, [r7, #24]
 801894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018950:	2b00      	cmp	r3, #0
 8018952:	f000 809b 	beq.w	8018a8c <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801895a:	f003 0310 	and.w	r3, r3, #16
 801895e:	2b00      	cmp	r3, #0
 8018960:	d105      	bne.n	801896e <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018966:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	4618      	mov	r0, r3
 8018974:	f7ff f8a9 	bl	8017aca <LL_ADC_INJ_IsTriggerSourceSWStart>
 8018978:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	4618      	mov	r0, r3
 8018980:	f7ff f864 	bl	8017a4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8018984:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	681b      	ldr	r3, [r3, #0]
 801898a:	4a11      	ldr	r2, [pc, #68]	; (80189d0 <HAL_ADC_IRQHandler+0x248>)
 801898c:	4293      	cmp	r3, r2
 801898e:	d002      	beq.n	8018996 <HAL_ADC_IRQHandler+0x20e>
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	e001      	b.n	801899a <HAL_ADC_IRQHandler+0x212>
 8018996:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801899a:	687a      	ldr	r2, [r7, #4]
 801899c:	6812      	ldr	r2, [r2, #0]
 801899e:	4293      	cmp	r3, r2
 80189a0:	d008      	beq.n	80189b4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80189a2:	697b      	ldr	r3, [r7, #20]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d005      	beq.n	80189b4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80189a8:	697b      	ldr	r3, [r7, #20]
 80189aa:	2b06      	cmp	r3, #6
 80189ac:	d002      	beq.n	80189b4 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80189ae:	697b      	ldr	r3, [r7, #20]
 80189b0:	2b07      	cmp	r3, #7
 80189b2:	d104      	bne.n	80189be <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	68db      	ldr	r3, [r3, #12]
 80189ba:	623b      	str	r3, [r7, #32]
 80189bc:	e014      	b.n	80189e8 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	681b      	ldr	r3, [r3, #0]
 80189c2:	4a03      	ldr	r2, [pc, #12]	; (80189d0 <HAL_ADC_IRQHandler+0x248>)
 80189c4:	4293      	cmp	r3, r2
 80189c6:	d009      	beq.n	80189dc <HAL_ADC_IRQHandler+0x254>
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	681b      	ldr	r3, [r3, #0]
 80189cc:	e008      	b.n	80189e0 <HAL_ADC_IRQHandler+0x258>
 80189ce:	bf00      	nop
 80189d0:	50000100 	.word	0x50000100
 80189d4:	50000300 	.word	0x50000300
 80189d8:	50000700 	.word	0x50000700
 80189dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80189e0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80189e2:	693b      	ldr	r3, [r7, #16]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d047      	beq.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80189ee:	6a3b      	ldr	r3, [r7, #32]
 80189f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d007      	beq.n	8018a08 <HAL_ADC_IRQHandler+0x280>
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d03f      	beq.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80189fe:	6a3b      	ldr	r3, [r7, #32]
 8018a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d13a      	bne.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018a12:	2b40      	cmp	r3, #64	; 0x40
 8018a14:	d133      	bne.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8018a16:	6a3b      	ldr	r3, [r7, #32]
 8018a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d12e      	bne.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	4618      	mov	r0, r3
 8018a26:	f7ff f9be 	bl	8017da6 <LL_ADC_INJ_IsConversionOngoing>
 8018a2a:	4603      	mov	r3, r0
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d11a      	bne.n	8018a66 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	681b      	ldr	r3, [r3, #0]
 8018a34:	685a      	ldr	r2, [r3, #4]
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8018a3e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a44:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8018a48:	687b      	ldr	r3, [r7, #4]
 8018a4a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d112      	bne.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a5c:	f043 0201 	orr.w	r2, r3, #1
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	65da      	str	r2, [r3, #92]	; 0x5c
 8018a64:	e00b      	b.n	8018a7e <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a6a:	f043 0210 	orr.w	r2, r3, #16
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a76:	f043 0201 	orr.w	r2, r3, #1
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8018a7e:	6878      	ldr	r0, [r7, #4]
 8018a80:	f000 ffcc 	bl	8019a1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	2260      	movs	r2, #96	; 0x60
 8018a8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8018a8c:	69fb      	ldr	r3, [r7, #28]
 8018a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d011      	beq.n	8018aba <HAL_ADC_IRQHandler+0x332>
 8018a96:	69bb      	ldr	r3, [r7, #24]
 8018a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d00c      	beq.n	8018aba <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018aa4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f000 f8af 	bl	8018c10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	2280      	movs	r2, #128	; 0x80
 8018ab8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8018aba:	69fb      	ldr	r3, [r7, #28]
 8018abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d012      	beq.n	8018aea <HAL_ADC_IRQHandler+0x362>
 8018ac4:	69bb      	ldr	r3, [r7, #24]
 8018ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d00d      	beq.n	8018aea <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8018ada:	6878      	ldr	r0, [r7, #4]
 8018adc:	f000 ffb2 	bl	8019a44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018ae8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8018aea:	69fb      	ldr	r3, [r7, #28]
 8018aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d012      	beq.n	8018b1a <HAL_ADC_IRQHandler+0x392>
 8018af4:	69bb      	ldr	r3, [r7, #24]
 8018af6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	d00d      	beq.n	8018b1a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8018b0a:	6878      	ldr	r0, [r7, #4]
 8018b0c:	f000 ffa4 	bl	8019a58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018b18:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8018b1a:	69fb      	ldr	r3, [r7, #28]
 8018b1c:	f003 0310 	and.w	r3, r3, #16
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d043      	beq.n	8018bac <HAL_ADC_IRQHandler+0x424>
 8018b24:	69bb      	ldr	r3, [r7, #24]
 8018b26:	f003 0310 	and.w	r3, r3, #16
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d03e      	beq.n	8018bac <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8018b2e:	687b      	ldr	r3, [r7, #4]
 8018b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d102      	bne.n	8018b3c <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8018b36:	2301      	movs	r3, #1
 8018b38:	627b      	str	r3, [r7, #36]	; 0x24
 8018b3a:	e021      	b.n	8018b80 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8018b3c:	697b      	ldr	r3, [r7, #20]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d015      	beq.n	8018b6e <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018b4a:	d004      	beq.n	8018b56 <HAL_ADC_IRQHandler+0x3ce>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	4a27      	ldr	r2, [pc, #156]	; (8018bf0 <HAL_ADC_IRQHandler+0x468>)
 8018b52:	4293      	cmp	r3, r2
 8018b54:	d101      	bne.n	8018b5a <HAL_ADC_IRQHandler+0x3d2>
 8018b56:	4b27      	ldr	r3, [pc, #156]	; (8018bf4 <HAL_ADC_IRQHandler+0x46c>)
 8018b58:	e000      	b.n	8018b5c <HAL_ADC_IRQHandler+0x3d4>
 8018b5a:	4b27      	ldr	r3, [pc, #156]	; (8018bf8 <HAL_ADC_IRQHandler+0x470>)
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f7ff f829 	bl	8017bb4 <LL_ADC_GetMultiDMATransfer>
 8018b62:	4603      	mov	r3, r0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d00b      	beq.n	8018b80 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018b68:	2301      	movs	r3, #1
 8018b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8018b6c:	e008      	b.n	8018b80 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8018b6e:	687b      	ldr	r3, [r7, #4]
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	68db      	ldr	r3, [r3, #12]
 8018b74:	f003 0301 	and.w	r3, r3, #1
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d001      	beq.n	8018b80 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8018b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b82:	2b01      	cmp	r3, #1
 8018b84:	d10e      	bne.n	8018ba4 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b8a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018b96:	f043 0202 	orr.w	r2, r3, #2
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8018b9e:	6878      	ldr	r0, [r7, #4]
 8018ba0:	f000 f840 	bl	8018c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	681b      	ldr	r3, [r3, #0]
 8018ba8:	2210      	movs	r2, #16
 8018baa:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8018bac:	69fb      	ldr	r3, [r7, #28]
 8018bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d018      	beq.n	8018be8 <HAL_ADC_IRQHandler+0x460>
 8018bb6:	69bb      	ldr	r3, [r7, #24]
 8018bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d013      	beq.n	8018be8 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bc4:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8018bcc:	687b      	ldr	r3, [r7, #4]
 8018bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018bd0:	f043 0208 	orr.w	r2, r3, #8
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	681b      	ldr	r3, [r3, #0]
 8018bdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018be0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8018be2:	6878      	ldr	r0, [r7, #4]
 8018be4:	f000 ff24 	bl	8019a30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8018be8:	bf00      	nop
 8018bea:	3728      	adds	r7, #40	; 0x28
 8018bec:	46bd      	mov	sp, r7
 8018bee:	bd80      	pop	{r7, pc}
 8018bf0:	50000100 	.word	0x50000100
 8018bf4:	50000300 	.word	0x50000300
 8018bf8:	50000700 	.word	0x50000700

08018bfc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8018bfc:	b480      	push	{r7}
 8018bfe:	b083      	sub	sp, #12
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8018c04:	bf00      	nop
 8018c06:	370c      	adds	r7, #12
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c0e:	4770      	bx	lr

08018c10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8018c10:	b480      	push	{r7}
 8018c12:	b083      	sub	sp, #12
 8018c14:	af00      	add	r7, sp, #0
 8018c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8018c18:	bf00      	nop
 8018c1a:	370c      	adds	r7, #12
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c22:	4770      	bx	lr

08018c24 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8018c24:	b480      	push	{r7}
 8018c26:	b083      	sub	sp, #12
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8018c2c:	bf00      	nop
 8018c2e:	370c      	adds	r7, #12
 8018c30:	46bd      	mov	sp, r7
 8018c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c36:	4770      	bx	lr

08018c38 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b0b6      	sub	sp, #216	; 0xd8
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	6078      	str	r0, [r7, #4]
 8018c40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8018c42:	2300      	movs	r3, #0
 8018c44:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8018c48:	2300      	movs	r3, #0
 8018c4a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8018c52:	2b01      	cmp	r3, #1
 8018c54:	d102      	bne.n	8018c5c <HAL_ADC_ConfigChannel+0x24>
 8018c56:	2302      	movs	r3, #2
 8018c58:	f000 bc04 	b.w	8019464 <HAL_ADC_ConfigChannel+0x82c>
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	2201      	movs	r2, #1
 8018c60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	4618      	mov	r0, r3
 8018c6a:	f7ff f875 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 8018c6e:	4603      	mov	r3, r0
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	f040 83e8 	bne.w	8019446 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	6818      	ldr	r0, [r3, #0]
 8018c7a:	683b      	ldr	r3, [r7, #0]
 8018c7c:	6859      	ldr	r1, [r3, #4]
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	461a      	mov	r2, r3
 8018c84:	f7fe fef5 	bl	8017a72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7ff f863 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 8018c92:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7ff f883 	bl	8017da6 <LL_ADC_INJ_IsConversionOngoing>
 8018ca0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8018ca4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	f040 81d9 	bne.w	8019060 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8018cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	f040 81d4 	bne.w	8019060 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8018cb8:	683b      	ldr	r3, [r7, #0]
 8018cba:	689b      	ldr	r3, [r3, #8]
 8018cbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8018cc0:	d10f      	bne.n	8018ce2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	6818      	ldr	r0, [r3, #0]
 8018cc6:	683b      	ldr	r3, [r7, #0]
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	2200      	movs	r2, #0
 8018ccc:	4619      	mov	r1, r3
 8018cce:	f7fe ff0f 	bl	8017af0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8018cda:	4618      	mov	r0, r3
 8018cdc:	f7fe fea3 	bl	8017a26 <LL_ADC_SetSamplingTimeCommonConfig>
 8018ce0:	e00e      	b.n	8018d00 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	6818      	ldr	r0, [r3, #0]
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	6819      	ldr	r1, [r3, #0]
 8018cea:	683b      	ldr	r3, [r7, #0]
 8018cec:	689b      	ldr	r3, [r3, #8]
 8018cee:	461a      	mov	r2, r3
 8018cf0:	f7fe fefe 	bl	8017af0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	2100      	movs	r1, #0
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	f7fe fe93 	bl	8017a26 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8018d00:	683b      	ldr	r3, [r7, #0]
 8018d02:	695a      	ldr	r2, [r3, #20]
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	68db      	ldr	r3, [r3, #12]
 8018d0a:	08db      	lsrs	r3, r3, #3
 8018d0c:	f003 0303 	and.w	r3, r3, #3
 8018d10:	005b      	lsls	r3, r3, #1
 8018d12:	fa02 f303 	lsl.w	r3, r2, r3
 8018d16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	691b      	ldr	r3, [r3, #16]
 8018d1e:	2b04      	cmp	r3, #4
 8018d20:	d022      	beq.n	8018d68 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6818      	ldr	r0, [r3, #0]
 8018d26:	683b      	ldr	r3, [r7, #0]
 8018d28:	6919      	ldr	r1, [r3, #16]
 8018d2a:	683b      	ldr	r3, [r7, #0]
 8018d2c:	681a      	ldr	r2, [r3, #0]
 8018d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018d32:	f7fe fded 	bl	8017910 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6818      	ldr	r0, [r3, #0]
 8018d3a:	683b      	ldr	r3, [r7, #0]
 8018d3c:	6919      	ldr	r1, [r3, #16]
 8018d3e:	683b      	ldr	r3, [r7, #0]
 8018d40:	699b      	ldr	r3, [r3, #24]
 8018d42:	461a      	mov	r2, r3
 8018d44:	f7fe fe39 	bl	80179ba <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	6818      	ldr	r0, [r3, #0]
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	6919      	ldr	r1, [r3, #16]
 8018d50:	683b      	ldr	r3, [r7, #0]
 8018d52:	7f1b      	ldrb	r3, [r3, #28]
 8018d54:	2b01      	cmp	r3, #1
 8018d56:	d102      	bne.n	8018d5e <HAL_ADC_ConfigChannel+0x126>
 8018d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018d5c:	e000      	b.n	8018d60 <HAL_ADC_ConfigChannel+0x128>
 8018d5e:	2300      	movs	r3, #0
 8018d60:	461a      	mov	r2, r3
 8018d62:	f7fe fe45 	bl	80179f0 <LL_ADC_SetOffsetSaturation>
 8018d66:	e17b      	b.n	8019060 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	2100      	movs	r1, #0
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f7fe fdf2 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018d74:	4603      	mov	r3, r0
 8018d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	d10a      	bne.n	8018d94 <HAL_ADC_ConfigChannel+0x15c>
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	2100      	movs	r1, #0
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7fe fde7 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	0e9b      	lsrs	r3, r3, #26
 8018d8e:	f003 021f 	and.w	r2, r3, #31
 8018d92:	e01e      	b.n	8018dd2 <HAL_ADC_ConfigChannel+0x19a>
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	2100      	movs	r1, #0
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7fe fddc 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018da0:	4603      	mov	r3, r0
 8018da2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018da6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018daa:	fa93 f3a3 	rbit	r3, r3
 8018dae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8018db2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8018dba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d101      	bne.n	8018dc6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8018dc2:	2320      	movs	r3, #32
 8018dc4:	e004      	b.n	8018dd0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8018dc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018dca:	fab3 f383 	clz	r3, r3
 8018dce:	b2db      	uxtb	r3, r3
 8018dd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	681b      	ldr	r3, [r3, #0]
 8018dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018dda:	2b00      	cmp	r3, #0
 8018ddc:	d105      	bne.n	8018dea <HAL_ADC_ConfigChannel+0x1b2>
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	0e9b      	lsrs	r3, r3, #26
 8018de4:	f003 031f 	and.w	r3, r3, #31
 8018de8:	e018      	b.n	8018e1c <HAL_ADC_ConfigChannel+0x1e4>
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018df2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018df6:	fa93 f3a3 	rbit	r3, r3
 8018dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8018dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8018e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d101      	bne.n	8018e12 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8018e0e:	2320      	movs	r3, #32
 8018e10:	e004      	b.n	8018e1c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8018e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018e16:	fab3 f383 	clz	r3, r3
 8018e1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8018e1c:	429a      	cmp	r2, r3
 8018e1e:	d106      	bne.n	8018e2e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	2200      	movs	r2, #0
 8018e26:	2100      	movs	r1, #0
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f7fe fdab 	bl	8017984 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	2101      	movs	r1, #1
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7fe fd8f 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018e40:	2b00      	cmp	r3, #0
 8018e42:	d10a      	bne.n	8018e5a <HAL_ADC_ConfigChannel+0x222>
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	2101      	movs	r1, #1
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	f7fe fd84 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018e50:	4603      	mov	r3, r0
 8018e52:	0e9b      	lsrs	r3, r3, #26
 8018e54:	f003 021f 	and.w	r2, r3, #31
 8018e58:	e01e      	b.n	8018e98 <HAL_ADC_ConfigChannel+0x260>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	2101      	movs	r1, #1
 8018e60:	4618      	mov	r0, r3
 8018e62:	f7fe fd79 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018e66:	4603      	mov	r3, r0
 8018e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018e6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018e70:	fa93 f3a3 	rbit	r3, r3
 8018e74:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8018e78:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8018e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8018e80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d101      	bne.n	8018e8c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8018e88:	2320      	movs	r3, #32
 8018e8a:	e004      	b.n	8018e96 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8018e8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018e90:	fab3 f383 	clz	r3, r3
 8018e94:	b2db      	uxtb	r3, r3
 8018e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018e98:	683b      	ldr	r3, [r7, #0]
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d105      	bne.n	8018eb0 <HAL_ADC_ConfigChannel+0x278>
 8018ea4:	683b      	ldr	r3, [r7, #0]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	0e9b      	lsrs	r3, r3, #26
 8018eaa:	f003 031f 	and.w	r3, r3, #31
 8018eae:	e018      	b.n	8018ee2 <HAL_ADC_ConfigChannel+0x2aa>
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8018ebc:	fa93 f3a3 	rbit	r3, r3
 8018ec0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8018ec4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018ec8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8018ecc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018ed0:	2b00      	cmp	r3, #0
 8018ed2:	d101      	bne.n	8018ed8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8018ed4:	2320      	movs	r3, #32
 8018ed6:	e004      	b.n	8018ee2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8018ed8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8018edc:	fab3 f383 	clz	r3, r3
 8018ee0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8018ee2:	429a      	cmp	r2, r3
 8018ee4:	d106      	bne.n	8018ef4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	2200      	movs	r2, #0
 8018eec:	2101      	movs	r1, #1
 8018eee:	4618      	mov	r0, r3
 8018ef0:	f7fe fd48 	bl	8017984 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	681b      	ldr	r3, [r3, #0]
 8018ef8:	2102      	movs	r1, #2
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7fe fd2c 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018f00:	4603      	mov	r3, r0
 8018f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d10a      	bne.n	8018f20 <HAL_ADC_ConfigChannel+0x2e8>
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	2102      	movs	r1, #2
 8018f10:	4618      	mov	r0, r3
 8018f12:	f7fe fd21 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018f16:	4603      	mov	r3, r0
 8018f18:	0e9b      	lsrs	r3, r3, #26
 8018f1a:	f003 021f 	and.w	r2, r3, #31
 8018f1e:	e01e      	b.n	8018f5e <HAL_ADC_ConfigChannel+0x326>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	2102      	movs	r1, #2
 8018f26:	4618      	mov	r0, r3
 8018f28:	f7fe fd16 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018f2c:	4603      	mov	r3, r0
 8018f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018f32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8018f36:	fa93 f3a3 	rbit	r3, r3
 8018f3a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8018f3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8018f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8018f46:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f4a:	2b00      	cmp	r3, #0
 8018f4c:	d101      	bne.n	8018f52 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8018f4e:	2320      	movs	r3, #32
 8018f50:	e004      	b.n	8018f5c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8018f52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018f56:	fab3 f383 	clz	r3, r3
 8018f5a:	b2db      	uxtb	r3, r3
 8018f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8018f5e:	683b      	ldr	r3, [r7, #0]
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d105      	bne.n	8018f76 <HAL_ADC_ConfigChannel+0x33e>
 8018f6a:	683b      	ldr	r3, [r7, #0]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	0e9b      	lsrs	r3, r3, #26
 8018f70:	f003 031f 	and.w	r3, r3, #31
 8018f74:	e016      	b.n	8018fa4 <HAL_ADC_ConfigChannel+0x36c>
 8018f76:	683b      	ldr	r3, [r7, #0]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018f7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8018f82:	fa93 f3a3 	rbit	r3, r3
 8018f86:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8018f88:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8018f8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d101      	bne.n	8018f9a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8018f96:	2320      	movs	r3, #32
 8018f98:	e004      	b.n	8018fa4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8018f9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8018f9e:	fab3 f383 	clz	r3, r3
 8018fa2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8018fa4:	429a      	cmp	r2, r3
 8018fa6:	d106      	bne.n	8018fb6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	2200      	movs	r2, #0
 8018fae:	2102      	movs	r1, #2
 8018fb0:	4618      	mov	r0, r3
 8018fb2:	f7fe fce7 	bl	8017984 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	2103      	movs	r1, #3
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	f7fe fccb 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018fc2:	4603      	mov	r3, r0
 8018fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d10a      	bne.n	8018fe2 <HAL_ADC_ConfigChannel+0x3aa>
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	2103      	movs	r1, #3
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	f7fe fcc0 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	0e9b      	lsrs	r3, r3, #26
 8018fdc:	f003 021f 	and.w	r2, r3, #31
 8018fe0:	e017      	b.n	8019012 <HAL_ADC_ConfigChannel+0x3da>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	2103      	movs	r1, #3
 8018fe8:	4618      	mov	r0, r3
 8018fea:	f7fe fcb5 	bl	8017958 <LL_ADC_GetOffsetChannel>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8018ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8018ff4:	fa93 f3a3 	rbit	r3, r3
 8018ff8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8018ffa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8018ffc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8018ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019000:	2b00      	cmp	r3, #0
 8019002:	d101      	bne.n	8019008 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8019004:	2320      	movs	r3, #32
 8019006:	e003      	b.n	8019010 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8019008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801900a:	fab3 f383 	clz	r3, r3
 801900e:	b2db      	uxtb	r3, r3
 8019010:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801901a:	2b00      	cmp	r3, #0
 801901c:	d105      	bne.n	801902a <HAL_ADC_ConfigChannel+0x3f2>
 801901e:	683b      	ldr	r3, [r7, #0]
 8019020:	681b      	ldr	r3, [r3, #0]
 8019022:	0e9b      	lsrs	r3, r3, #26
 8019024:	f003 031f 	and.w	r3, r3, #31
 8019028:	e011      	b.n	801904e <HAL_ADC_ConfigChannel+0x416>
 801902a:	683b      	ldr	r3, [r7, #0]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019032:	fa93 f3a3 	rbit	r3, r3
 8019036:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8019038:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801903a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801903c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801903e:	2b00      	cmp	r3, #0
 8019040:	d101      	bne.n	8019046 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8019042:	2320      	movs	r3, #32
 8019044:	e003      	b.n	801904e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8019046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8019048:	fab3 f383 	clz	r3, r3
 801904c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801904e:	429a      	cmp	r2, r3
 8019050:	d106      	bne.n	8019060 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	2200      	movs	r2, #0
 8019058:	2103      	movs	r1, #3
 801905a:	4618      	mov	r0, r3
 801905c:	f7fe fc92 	bl	8017984 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	681b      	ldr	r3, [r3, #0]
 8019064:	4618      	mov	r0, r3
 8019066:	f7fe fe29 	bl	8017cbc <LL_ADC_IsEnabled>
 801906a:	4603      	mov	r3, r0
 801906c:	2b00      	cmp	r3, #0
 801906e:	f040 813d 	bne.w	80192ec <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6818      	ldr	r0, [r3, #0]
 8019076:	683b      	ldr	r3, [r7, #0]
 8019078:	6819      	ldr	r1, [r3, #0]
 801907a:	683b      	ldr	r3, [r7, #0]
 801907c:	68db      	ldr	r3, [r3, #12]
 801907e:	461a      	mov	r2, r3
 8019080:	f7fe fd62 	bl	8017b48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8019084:	683b      	ldr	r3, [r7, #0]
 8019086:	68db      	ldr	r3, [r3, #12]
 8019088:	4aa2      	ldr	r2, [pc, #648]	; (8019314 <HAL_ADC_ConfigChannel+0x6dc>)
 801908a:	4293      	cmp	r3, r2
 801908c:	f040 812e 	bne.w	80192ec <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	681b      	ldr	r3, [r3, #0]
 8019098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801909c:	2b00      	cmp	r3, #0
 801909e:	d10b      	bne.n	80190b8 <HAL_ADC_ConfigChannel+0x480>
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	0e9b      	lsrs	r3, r3, #26
 80190a6:	3301      	adds	r3, #1
 80190a8:	f003 031f 	and.w	r3, r3, #31
 80190ac:	2b09      	cmp	r3, #9
 80190ae:	bf94      	ite	ls
 80190b0:	2301      	movls	r3, #1
 80190b2:	2300      	movhi	r3, #0
 80190b4:	b2db      	uxtb	r3, r3
 80190b6:	e019      	b.n	80190ec <HAL_ADC_ConfigChannel+0x4b4>
 80190b8:	683b      	ldr	r3, [r7, #0]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80190be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80190c0:	fa93 f3a3 	rbit	r3, r3
 80190c4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80190c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80190c8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80190ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	d101      	bne.n	80190d4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80190d0:	2320      	movs	r3, #32
 80190d2:	e003      	b.n	80190dc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80190d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80190d6:	fab3 f383 	clz	r3, r3
 80190da:	b2db      	uxtb	r3, r3
 80190dc:	3301      	adds	r3, #1
 80190de:	f003 031f 	and.w	r3, r3, #31
 80190e2:	2b09      	cmp	r3, #9
 80190e4:	bf94      	ite	ls
 80190e6:	2301      	movls	r3, #1
 80190e8:	2300      	movhi	r3, #0
 80190ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d079      	beq.n	80191e4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80190f0:	683b      	ldr	r3, [r7, #0]
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80190f8:	2b00      	cmp	r3, #0
 80190fa:	d107      	bne.n	801910c <HAL_ADC_ConfigChannel+0x4d4>
 80190fc:	683b      	ldr	r3, [r7, #0]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	0e9b      	lsrs	r3, r3, #26
 8019102:	3301      	adds	r3, #1
 8019104:	069b      	lsls	r3, r3, #26
 8019106:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801910a:	e015      	b.n	8019138 <HAL_ADC_ConfigChannel+0x500>
 801910c:	683b      	ldr	r3, [r7, #0]
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019114:	fa93 f3a3 	rbit	r3, r3
 8019118:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801911a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801911c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801911e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019120:	2b00      	cmp	r3, #0
 8019122:	d101      	bne.n	8019128 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8019124:	2320      	movs	r3, #32
 8019126:	e003      	b.n	8019130 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8019128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801912a:	fab3 f383 	clz	r3, r3
 801912e:	b2db      	uxtb	r3, r3
 8019130:	3301      	adds	r3, #1
 8019132:	069b      	lsls	r3, r3, #26
 8019134:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8019138:	683b      	ldr	r3, [r7, #0]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019140:	2b00      	cmp	r3, #0
 8019142:	d109      	bne.n	8019158 <HAL_ADC_ConfigChannel+0x520>
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	681b      	ldr	r3, [r3, #0]
 8019148:	0e9b      	lsrs	r3, r3, #26
 801914a:	3301      	adds	r3, #1
 801914c:	f003 031f 	and.w	r3, r3, #31
 8019150:	2101      	movs	r1, #1
 8019152:	fa01 f303 	lsl.w	r3, r1, r3
 8019156:	e017      	b.n	8019188 <HAL_ADC_ConfigChannel+0x550>
 8019158:	683b      	ldr	r3, [r7, #0]
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801915e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019160:	fa93 f3a3 	rbit	r3, r3
 8019164:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8019166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019168:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801916a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801916c:	2b00      	cmp	r3, #0
 801916e:	d101      	bne.n	8019174 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8019170:	2320      	movs	r3, #32
 8019172:	e003      	b.n	801917c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8019174:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019176:	fab3 f383 	clz	r3, r3
 801917a:	b2db      	uxtb	r3, r3
 801917c:	3301      	adds	r3, #1
 801917e:	f003 031f 	and.w	r3, r3, #31
 8019182:	2101      	movs	r1, #1
 8019184:	fa01 f303 	lsl.w	r3, r1, r3
 8019188:	ea42 0103 	orr.w	r1, r2, r3
 801918c:	683b      	ldr	r3, [r7, #0]
 801918e:	681b      	ldr	r3, [r3, #0]
 8019190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019194:	2b00      	cmp	r3, #0
 8019196:	d10a      	bne.n	80191ae <HAL_ADC_ConfigChannel+0x576>
 8019198:	683b      	ldr	r3, [r7, #0]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	0e9b      	lsrs	r3, r3, #26
 801919e:	3301      	adds	r3, #1
 80191a0:	f003 021f 	and.w	r2, r3, #31
 80191a4:	4613      	mov	r3, r2
 80191a6:	005b      	lsls	r3, r3, #1
 80191a8:	4413      	add	r3, r2
 80191aa:	051b      	lsls	r3, r3, #20
 80191ac:	e018      	b.n	80191e0 <HAL_ADC_ConfigChannel+0x5a8>
 80191ae:	683b      	ldr	r3, [r7, #0]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80191b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191b6:	fa93 f3a3 	rbit	r3, r3
 80191ba:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80191bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191be:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80191c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d101      	bne.n	80191ca <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80191c6:	2320      	movs	r3, #32
 80191c8:	e003      	b.n	80191d2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80191ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191cc:	fab3 f383 	clz	r3, r3
 80191d0:	b2db      	uxtb	r3, r3
 80191d2:	3301      	adds	r3, #1
 80191d4:	f003 021f 	and.w	r2, r3, #31
 80191d8:	4613      	mov	r3, r2
 80191da:	005b      	lsls	r3, r3, #1
 80191dc:	4413      	add	r3, r2
 80191de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80191e0:	430b      	orrs	r3, r1
 80191e2:	e07e      	b.n	80192e2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80191e4:	683b      	ldr	r3, [r7, #0]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	d107      	bne.n	8019200 <HAL_ADC_ConfigChannel+0x5c8>
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	0e9b      	lsrs	r3, r3, #26
 80191f6:	3301      	adds	r3, #1
 80191f8:	069b      	lsls	r3, r3, #26
 80191fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80191fe:	e015      	b.n	801922c <HAL_ADC_ConfigChannel+0x5f4>
 8019200:	683b      	ldr	r3, [r7, #0]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019208:	fa93 f3a3 	rbit	r3, r3
 801920c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801920e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019210:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8019212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019214:	2b00      	cmp	r3, #0
 8019216:	d101      	bne.n	801921c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8019218:	2320      	movs	r3, #32
 801921a:	e003      	b.n	8019224 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801921c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801921e:	fab3 f383 	clz	r3, r3
 8019222:	b2db      	uxtb	r3, r3
 8019224:	3301      	adds	r3, #1
 8019226:	069b      	lsls	r3, r3, #26
 8019228:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801922c:	683b      	ldr	r3, [r7, #0]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019234:	2b00      	cmp	r3, #0
 8019236:	d109      	bne.n	801924c <HAL_ADC_ConfigChannel+0x614>
 8019238:	683b      	ldr	r3, [r7, #0]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	0e9b      	lsrs	r3, r3, #26
 801923e:	3301      	adds	r3, #1
 8019240:	f003 031f 	and.w	r3, r3, #31
 8019244:	2101      	movs	r1, #1
 8019246:	fa01 f303 	lsl.w	r3, r1, r3
 801924a:	e017      	b.n	801927c <HAL_ADC_ConfigChannel+0x644>
 801924c:	683b      	ldr	r3, [r7, #0]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019252:	6a3b      	ldr	r3, [r7, #32]
 8019254:	fa93 f3a3 	rbit	r3, r3
 8019258:	61fb      	str	r3, [r7, #28]
  return result;
 801925a:	69fb      	ldr	r3, [r7, #28]
 801925c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019260:	2b00      	cmp	r3, #0
 8019262:	d101      	bne.n	8019268 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8019264:	2320      	movs	r3, #32
 8019266:	e003      	b.n	8019270 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8019268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801926a:	fab3 f383 	clz	r3, r3
 801926e:	b2db      	uxtb	r3, r3
 8019270:	3301      	adds	r3, #1
 8019272:	f003 031f 	and.w	r3, r3, #31
 8019276:	2101      	movs	r1, #1
 8019278:	fa01 f303 	lsl.w	r3, r1, r3
 801927c:	ea42 0103 	orr.w	r1, r2, r3
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019288:	2b00      	cmp	r3, #0
 801928a:	d10d      	bne.n	80192a8 <HAL_ADC_ConfigChannel+0x670>
 801928c:	683b      	ldr	r3, [r7, #0]
 801928e:	681b      	ldr	r3, [r3, #0]
 8019290:	0e9b      	lsrs	r3, r3, #26
 8019292:	3301      	adds	r3, #1
 8019294:	f003 021f 	and.w	r2, r3, #31
 8019298:	4613      	mov	r3, r2
 801929a:	005b      	lsls	r3, r3, #1
 801929c:	4413      	add	r3, r2
 801929e:	3b1e      	subs	r3, #30
 80192a0:	051b      	lsls	r3, r3, #20
 80192a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80192a6:	e01b      	b.n	80192e0 <HAL_ADC_ConfigChannel+0x6a8>
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80192ae:	697b      	ldr	r3, [r7, #20]
 80192b0:	fa93 f3a3 	rbit	r3, r3
 80192b4:	613b      	str	r3, [r7, #16]
  return result;
 80192b6:	693b      	ldr	r3, [r7, #16]
 80192b8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80192ba:	69bb      	ldr	r3, [r7, #24]
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d101      	bne.n	80192c4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80192c0:	2320      	movs	r3, #32
 80192c2:	e003      	b.n	80192cc <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80192c4:	69bb      	ldr	r3, [r7, #24]
 80192c6:	fab3 f383 	clz	r3, r3
 80192ca:	b2db      	uxtb	r3, r3
 80192cc:	3301      	adds	r3, #1
 80192ce:	f003 021f 	and.w	r2, r3, #31
 80192d2:	4613      	mov	r3, r2
 80192d4:	005b      	lsls	r3, r3, #1
 80192d6:	4413      	add	r3, r2
 80192d8:	3b1e      	subs	r3, #30
 80192da:	051b      	lsls	r3, r3, #20
 80192dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80192e0:	430b      	orrs	r3, r1
 80192e2:	683a      	ldr	r2, [r7, #0]
 80192e4:	6892      	ldr	r2, [r2, #8]
 80192e6:	4619      	mov	r1, r3
 80192e8:	f7fe fc02 	bl	8017af0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	681a      	ldr	r2, [r3, #0]
 80192f0:	4b09      	ldr	r3, [pc, #36]	; (8019318 <HAL_ADC_ConfigChannel+0x6e0>)
 80192f2:	4013      	ands	r3, r2
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	f000 80af 	beq.w	8019458 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019302:	d004      	beq.n	801930e <HAL_ADC_ConfigChannel+0x6d6>
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	4a04      	ldr	r2, [pc, #16]	; (801931c <HAL_ADC_ConfigChannel+0x6e4>)
 801930a:	4293      	cmp	r3, r2
 801930c:	d10a      	bne.n	8019324 <HAL_ADC_ConfigChannel+0x6ec>
 801930e:	4b04      	ldr	r3, [pc, #16]	; (8019320 <HAL_ADC_ConfigChannel+0x6e8>)
 8019310:	e009      	b.n	8019326 <HAL_ADC_ConfigChannel+0x6ee>
 8019312:	bf00      	nop
 8019314:	407f0000 	.word	0x407f0000
 8019318:	80080000 	.word	0x80080000
 801931c:	50000100 	.word	0x50000100
 8019320:	50000300 	.word	0x50000300
 8019324:	4b51      	ldr	r3, [pc, #324]	; (801946c <HAL_ADC_ConfigChannel+0x834>)
 8019326:	4618      	mov	r0, r3
 8019328:	f7fe fae4 	bl	80178f4 <LL_ADC_GetCommonPathInternalCh>
 801932c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	4a4e      	ldr	r2, [pc, #312]	; (8019470 <HAL_ADC_ConfigChannel+0x838>)
 8019336:	4293      	cmp	r3, r2
 8019338:	d004      	beq.n	8019344 <HAL_ADC_ConfigChannel+0x70c>
 801933a:	683b      	ldr	r3, [r7, #0]
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	4a4d      	ldr	r2, [pc, #308]	; (8019474 <HAL_ADC_ConfigChannel+0x83c>)
 8019340:	4293      	cmp	r3, r2
 8019342:	d134      	bne.n	80193ae <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8019344:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801934c:	2b00      	cmp	r3, #0
 801934e:	d12e      	bne.n	80193ae <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019358:	d17e      	bne.n	8019458 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019362:	d004      	beq.n	801936e <HAL_ADC_ConfigChannel+0x736>
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	4a43      	ldr	r2, [pc, #268]	; (8019478 <HAL_ADC_ConfigChannel+0x840>)
 801936a:	4293      	cmp	r3, r2
 801936c:	d101      	bne.n	8019372 <HAL_ADC_ConfigChannel+0x73a>
 801936e:	4a43      	ldr	r2, [pc, #268]	; (801947c <HAL_ADC_ConfigChannel+0x844>)
 8019370:	e000      	b.n	8019374 <HAL_ADC_ConfigChannel+0x73c>
 8019372:	4a3e      	ldr	r2, [pc, #248]	; (801946c <HAL_ADC_ConfigChannel+0x834>)
 8019374:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801937c:	4619      	mov	r1, r3
 801937e:	4610      	mov	r0, r2
 8019380:	f7fe faa5 	bl	80178ce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019384:	4b3e      	ldr	r3, [pc, #248]	; (8019480 <HAL_ADC_ConfigChannel+0x848>)
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	099b      	lsrs	r3, r3, #6
 801938a:	4a3e      	ldr	r2, [pc, #248]	; (8019484 <HAL_ADC_ConfigChannel+0x84c>)
 801938c:	fba2 2303 	umull	r2, r3, r2, r3
 8019390:	099b      	lsrs	r3, r3, #6
 8019392:	1c5a      	adds	r2, r3, #1
 8019394:	4613      	mov	r3, r2
 8019396:	005b      	lsls	r3, r3, #1
 8019398:	4413      	add	r3, r2
 801939a:	009b      	lsls	r3, r3, #2
 801939c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801939e:	e002      	b.n	80193a6 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	3b01      	subs	r3, #1
 80193a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d1f9      	bne.n	80193a0 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80193ac:	e054      	b.n	8019458 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80193ae:	683b      	ldr	r3, [r7, #0]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	4a35      	ldr	r2, [pc, #212]	; (8019488 <HAL_ADC_ConfigChannel+0x850>)
 80193b4:	4293      	cmp	r3, r2
 80193b6:	d120      	bne.n	80193fa <HAL_ADC_ConfigChannel+0x7c2>
 80193b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80193bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d11a      	bne.n	80193fa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193cc:	d144      	bne.n	8019458 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80193d6:	d004      	beq.n	80193e2 <HAL_ADC_ConfigChannel+0x7aa>
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	4a26      	ldr	r2, [pc, #152]	; (8019478 <HAL_ADC_ConfigChannel+0x840>)
 80193de:	4293      	cmp	r3, r2
 80193e0:	d101      	bne.n	80193e6 <HAL_ADC_ConfigChannel+0x7ae>
 80193e2:	4a26      	ldr	r2, [pc, #152]	; (801947c <HAL_ADC_ConfigChannel+0x844>)
 80193e4:	e000      	b.n	80193e8 <HAL_ADC_ConfigChannel+0x7b0>
 80193e6:	4a21      	ldr	r2, [pc, #132]	; (801946c <HAL_ADC_ConfigChannel+0x834>)
 80193e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80193ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80193f0:	4619      	mov	r1, r3
 80193f2:	4610      	mov	r0, r2
 80193f4:	f7fe fa6b 	bl	80178ce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80193f8:	e02e      	b.n	8019458 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	4a23      	ldr	r2, [pc, #140]	; (801948c <HAL_ADC_ConfigChannel+0x854>)
 8019400:	4293      	cmp	r3, r2
 8019402:	d129      	bne.n	8019458 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8019404:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801940c:	2b00      	cmp	r3, #0
 801940e:	d123      	bne.n	8019458 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	4a18      	ldr	r2, [pc, #96]	; (8019478 <HAL_ADC_ConfigChannel+0x840>)
 8019416:	4293      	cmp	r3, r2
 8019418:	d01e      	beq.n	8019458 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019422:	d004      	beq.n	801942e <HAL_ADC_ConfigChannel+0x7f6>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	4a13      	ldr	r2, [pc, #76]	; (8019478 <HAL_ADC_ConfigChannel+0x840>)
 801942a:	4293      	cmp	r3, r2
 801942c:	d101      	bne.n	8019432 <HAL_ADC_ConfigChannel+0x7fa>
 801942e:	4a13      	ldr	r2, [pc, #76]	; (801947c <HAL_ADC_ConfigChannel+0x844>)
 8019430:	e000      	b.n	8019434 <HAL_ADC_ConfigChannel+0x7fc>
 8019432:	4a0e      	ldr	r2, [pc, #56]	; (801946c <HAL_ADC_ConfigChannel+0x834>)
 8019434:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8019438:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801943c:	4619      	mov	r1, r3
 801943e:	4610      	mov	r0, r2
 8019440:	f7fe fa45 	bl	80178ce <LL_ADC_SetCommonPathInternalCh>
 8019444:	e008      	b.n	8019458 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801944a:	f043 0220 	orr.w	r2, r3, #32
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019452:	2301      	movs	r3, #1
 8019454:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	2200      	movs	r2, #0
 801945c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019460:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8019464:	4618      	mov	r0, r3
 8019466:	37d8      	adds	r7, #216	; 0xd8
 8019468:	46bd      	mov	sp, r7
 801946a:	bd80      	pop	{r7, pc}
 801946c:	50000700 	.word	0x50000700
 8019470:	c3210000 	.word	0xc3210000
 8019474:	90c00010 	.word	0x90c00010
 8019478:	50000100 	.word	0x50000100
 801947c:	50000300 	.word	0x50000300
 8019480:	20000000 	.word	0x20000000
 8019484:	053e2d63 	.word	0x053e2d63
 8019488:	c7520000 	.word	0xc7520000
 801948c:	cb840000 	.word	0xcb840000

08019490 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b088      	sub	sp, #32
 8019494:	af00      	add	r7, sp, #0
 8019496:	6078      	str	r0, [r7, #4]
 8019498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801949a:	2300      	movs	r3, #0
 801949c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801949e:	683b      	ldr	r3, [r7, #0]
 80194a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4618      	mov	r0, r3
 80194a8:	f7fe fc56 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 80194ac:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	4618      	mov	r0, r3
 80194b4:	f7fe fc77 	bl	8017da6 <LL_ADC_INJ_IsConversionOngoing>
 80194b8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80194ba:	693b      	ldr	r3, [r7, #16]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d103      	bne.n	80194c8 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	f000 8098 	beq.w	80195f8 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	68db      	ldr	r3, [r3, #12]
 80194ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80194d2:	2b00      	cmp	r3, #0
 80194d4:	d02a      	beq.n	801952c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	7f5b      	ldrb	r3, [r3, #29]
 80194da:	2b01      	cmp	r3, #1
 80194dc:	d126      	bne.n	801952c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	7f1b      	ldrb	r3, [r3, #28]
 80194e2:	2b01      	cmp	r3, #1
 80194e4:	d122      	bne.n	801952c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80194e6:	2301      	movs	r3, #1
 80194e8:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80194ea:	e014      	b.n	8019516 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80194ec:	69fb      	ldr	r3, [r7, #28]
 80194ee:	4a45      	ldr	r2, [pc, #276]	; (8019604 <ADC_ConversionStop+0x174>)
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d90d      	bls.n	8019510 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80194f8:	f043 0210 	orr.w	r2, r3, #16
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019504:	f043 0201 	orr.w	r2, r3, #1
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801950c:	2301      	movs	r3, #1
 801950e:	e074      	b.n	80195fa <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8019510:	69fb      	ldr	r3, [r7, #28]
 8019512:	3301      	adds	r3, #1
 8019514:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019520:	2b40      	cmp	r3, #64	; 0x40
 8019522:	d1e3      	bne.n	80194ec <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	2240      	movs	r2, #64	; 0x40
 801952a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801952c:	69bb      	ldr	r3, [r7, #24]
 801952e:	2b02      	cmp	r3, #2
 8019530:	d014      	beq.n	801955c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	681b      	ldr	r3, [r3, #0]
 8019536:	4618      	mov	r0, r3
 8019538:	f7fe fc0e 	bl	8017d58 <LL_ADC_REG_IsConversionOngoing>
 801953c:	4603      	mov	r3, r0
 801953e:	2b00      	cmp	r3, #0
 8019540:	d00c      	beq.n	801955c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4618      	mov	r0, r3
 8019548:	f7fe fbcb 	bl	8017ce2 <LL_ADC_IsDisableOngoing>
 801954c:	4603      	mov	r3, r0
 801954e:	2b00      	cmp	r3, #0
 8019550:	d104      	bne.n	801955c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	4618      	mov	r0, r3
 8019558:	f7fe fbea 	bl	8017d30 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801955c:	69bb      	ldr	r3, [r7, #24]
 801955e:	2b01      	cmp	r3, #1
 8019560:	d014      	beq.n	801958c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	681b      	ldr	r3, [r3, #0]
 8019566:	4618      	mov	r0, r3
 8019568:	f7fe fc1d 	bl	8017da6 <LL_ADC_INJ_IsConversionOngoing>
 801956c:	4603      	mov	r3, r0
 801956e:	2b00      	cmp	r3, #0
 8019570:	d00c      	beq.n	801958c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	4618      	mov	r0, r3
 8019578:	f7fe fbb3 	bl	8017ce2 <LL_ADC_IsDisableOngoing>
 801957c:	4603      	mov	r3, r0
 801957e:	2b00      	cmp	r3, #0
 8019580:	d104      	bne.n	801958c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	4618      	mov	r0, r3
 8019588:	f7fe fbf9 	bl	8017d7e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801958c:	69bb      	ldr	r3, [r7, #24]
 801958e:	2b02      	cmp	r3, #2
 8019590:	d005      	beq.n	801959e <ADC_ConversionStop+0x10e>
 8019592:	69bb      	ldr	r3, [r7, #24]
 8019594:	2b03      	cmp	r3, #3
 8019596:	d105      	bne.n	80195a4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8019598:	230c      	movs	r3, #12
 801959a:	617b      	str	r3, [r7, #20]
        break;
 801959c:	e005      	b.n	80195aa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801959e:	2308      	movs	r3, #8
 80195a0:	617b      	str	r3, [r7, #20]
        break;
 80195a2:	e002      	b.n	80195aa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80195a4:	2304      	movs	r3, #4
 80195a6:	617b      	str	r3, [r7, #20]
        break;
 80195a8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80195aa:	f7fe f94f 	bl	801784c <HAL_GetTick>
 80195ae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80195b0:	e01b      	b.n	80195ea <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80195b2:	f7fe f94b 	bl	801784c <HAL_GetTick>
 80195b6:	4602      	mov	r2, r0
 80195b8:	68bb      	ldr	r3, [r7, #8]
 80195ba:	1ad3      	subs	r3, r2, r3
 80195bc:	2b05      	cmp	r3, #5
 80195be:	d914      	bls.n	80195ea <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	689a      	ldr	r2, [r3, #8]
 80195c6:	697b      	ldr	r3, [r7, #20]
 80195c8:	4013      	ands	r3, r2
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d00d      	beq.n	80195ea <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80195ce:	687b      	ldr	r3, [r7, #4]
 80195d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195d2:	f043 0210 	orr.w	r2, r3, #16
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80195de:	f043 0201 	orr.w	r2, r3, #1
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80195e6:	2301      	movs	r3, #1
 80195e8:	e007      	b.n	80195fa <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	689a      	ldr	r2, [r3, #8]
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	4013      	ands	r3, r2
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d1dc      	bne.n	80195b2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80195f8:	2300      	movs	r3, #0
}
 80195fa:	4618      	mov	r0, r3
 80195fc:	3720      	adds	r7, #32
 80195fe:	46bd      	mov	sp, r7
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	a33fffff 	.word	0xa33fffff

08019608 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b084      	sub	sp, #16
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	681b      	ldr	r3, [r3, #0]
 8019614:	4618      	mov	r0, r3
 8019616:	f7fe fb51 	bl	8017cbc <LL_ADC_IsEnabled>
 801961a:	4603      	mov	r3, r0
 801961c:	2b00      	cmp	r3, #0
 801961e:	d14d      	bne.n	80196bc <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8019620:	687b      	ldr	r3, [r7, #4]
 8019622:	681b      	ldr	r3, [r3, #0]
 8019624:	689a      	ldr	r2, [r3, #8]
 8019626:	4b28      	ldr	r3, [pc, #160]	; (80196c8 <ADC_Enable+0xc0>)
 8019628:	4013      	ands	r3, r2
 801962a:	2b00      	cmp	r3, #0
 801962c:	d00d      	beq.n	801964a <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019632:	f043 0210 	orr.w	r2, r3, #16
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801963a:	687b      	ldr	r3, [r7, #4]
 801963c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801963e:	f043 0201 	orr.w	r2, r3, #1
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8019646:	2301      	movs	r3, #1
 8019648:	e039      	b.n	80196be <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	4618      	mov	r0, r3
 8019650:	f7fe fb0c 	bl	8017c6c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8019654:	f7fe f8fa 	bl	801784c <HAL_GetTick>
 8019658:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801965a:	e028      	b.n	80196ae <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	4618      	mov	r0, r3
 8019662:	f7fe fb2b 	bl	8017cbc <LL_ADC_IsEnabled>
 8019666:	4603      	mov	r3, r0
 8019668:	2b00      	cmp	r3, #0
 801966a:	d104      	bne.n	8019676 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	4618      	mov	r0, r3
 8019672:	f7fe fafb 	bl	8017c6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8019676:	f7fe f8e9 	bl	801784c <HAL_GetTick>
 801967a:	4602      	mov	r2, r0
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	1ad3      	subs	r3, r2, r3
 8019680:	2b02      	cmp	r3, #2
 8019682:	d914      	bls.n	80196ae <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	681b      	ldr	r3, [r3, #0]
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	f003 0301 	and.w	r3, r3, #1
 801968e:	2b01      	cmp	r3, #1
 8019690:	d00d      	beq.n	80196ae <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019696:	f043 0210 	orr.w	r2, r3, #16
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80196a2:	f043 0201 	orr.w	r2, r3, #1
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80196aa:	2301      	movs	r3, #1
 80196ac:	e007      	b.n	80196be <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	681b      	ldr	r3, [r3, #0]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	f003 0301 	and.w	r3, r3, #1
 80196b8:	2b01      	cmp	r3, #1
 80196ba:	d1cf      	bne.n	801965c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80196bc:	2300      	movs	r3, #0
}
 80196be:	4618      	mov	r0, r3
 80196c0:	3710      	adds	r7, #16
 80196c2:	46bd      	mov	sp, r7
 80196c4:	bd80      	pop	{r7, pc}
 80196c6:	bf00      	nop
 80196c8:	8000003f 	.word	0x8000003f

080196cc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80196cc:	b580      	push	{r7, lr}
 80196ce:	b084      	sub	sp, #16
 80196d0:	af00      	add	r7, sp, #0
 80196d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	4618      	mov	r0, r3
 80196da:	f7fe fb02 	bl	8017ce2 <LL_ADC_IsDisableOngoing>
 80196de:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	681b      	ldr	r3, [r3, #0]
 80196e4:	4618      	mov	r0, r3
 80196e6:	f7fe fae9 	bl	8017cbc <LL_ADC_IsEnabled>
 80196ea:	4603      	mov	r3, r0
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d047      	beq.n	8019780 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d144      	bne.n	8019780 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	689b      	ldr	r3, [r3, #8]
 80196fc:	f003 030d 	and.w	r3, r3, #13
 8019700:	2b01      	cmp	r3, #1
 8019702:	d10c      	bne.n	801971e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	4618      	mov	r0, r3
 801970a:	f7fe fac3 	bl	8017c94 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	2203      	movs	r2, #3
 8019714:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8019716:	f7fe f899 	bl	801784c <HAL_GetTick>
 801971a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801971c:	e029      	b.n	8019772 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019722:	f043 0210 	orr.w	r2, r3, #16
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801972e:	f043 0201 	orr.w	r2, r3, #1
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8019736:	2301      	movs	r3, #1
 8019738:	e023      	b.n	8019782 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801973a:	f7fe f887 	bl	801784c <HAL_GetTick>
 801973e:	4602      	mov	r2, r0
 8019740:	68bb      	ldr	r3, [r7, #8]
 8019742:	1ad3      	subs	r3, r2, r3
 8019744:	2b02      	cmp	r3, #2
 8019746:	d914      	bls.n	8019772 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	681b      	ldr	r3, [r3, #0]
 801974c:	689b      	ldr	r3, [r3, #8]
 801974e:	f003 0301 	and.w	r3, r3, #1
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00d      	beq.n	8019772 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801975a:	f043 0210 	orr.w	r2, r3, #16
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019766:	f043 0201 	orr.w	r2, r3, #1
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801976e:	2301      	movs	r3, #1
 8019770:	e007      	b.n	8019782 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	689b      	ldr	r3, [r3, #8]
 8019778:	f003 0301 	and.w	r3, r3, #1
 801977c:	2b00      	cmp	r3, #0
 801977e:	d1dc      	bne.n	801973a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8019780:	2300      	movs	r3, #0
}
 8019782:	4618      	mov	r0, r3
 8019784:	3710      	adds	r7, #16
 8019786:	46bd      	mov	sp, r7
 8019788:	bd80      	pop	{r7, pc}

0801978a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801978a:	b580      	push	{r7, lr}
 801978c:	b084      	sub	sp, #16
 801978e:	af00      	add	r7, sp, #0
 8019790:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019796:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8019798:	68fb      	ldr	r3, [r7, #12]
 801979a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801979c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d14b      	bne.n	801983c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80197a4:	68fb      	ldr	r3, [r7, #12]
 80197a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80197b0:	68fb      	ldr	r3, [r7, #12]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	f003 0308 	and.w	r3, r3, #8
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d021      	beq.n	8019802 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7fe f942 	bl	8017a4c <LL_ADC_REG_IsTriggerSourceSWStart>
 80197c8:	4603      	mov	r3, r0
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d032      	beq.n	8019834 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	68db      	ldr	r3, [r3, #12]
 80197d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d12b      	bne.n	8019834 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d11f      	bne.n	8019834 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197f8:	f043 0201 	orr.w	r2, r3, #1
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8019800:	e018      	b.n	8019834 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8019802:	68fb      	ldr	r3, [r7, #12]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	68db      	ldr	r3, [r3, #12]
 8019808:	f003 0302 	and.w	r3, r3, #2
 801980c:	2b00      	cmp	r3, #0
 801980e:	d111      	bne.n	8019834 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019810:	68fb      	ldr	r3, [r7, #12]
 8019812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019824:	2b00      	cmp	r3, #0
 8019826:	d105      	bne.n	8019834 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801982c:	f043 0201 	orr.w	r2, r3, #1
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019834:	68f8      	ldr	r0, [r7, #12]
 8019836:	f7ee fd87 	bl	8008348 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801983a:	e00e      	b.n	801985a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019840:	f003 0310 	and.w	r3, r3, #16
 8019844:	2b00      	cmp	r3, #0
 8019846:	d003      	beq.n	8019850 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8019848:	68f8      	ldr	r0, [r7, #12]
 801984a:	f7ff f9eb 	bl	8018c24 <HAL_ADC_ErrorCallback>
}
 801984e:	e004      	b.n	801985a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8019850:	68fb      	ldr	r3, [r7, #12]
 8019852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019856:	6878      	ldr	r0, [r7, #4]
 8019858:	4798      	blx	r3
}
 801985a:	bf00      	nop
 801985c:	3710      	adds	r7, #16
 801985e:	46bd      	mov	sp, r7
 8019860:	bd80      	pop	{r7, pc}

08019862 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8019862:	b580      	push	{r7, lr}
 8019864:	b084      	sub	sp, #16
 8019866:	af00      	add	r7, sp, #0
 8019868:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801986e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8019870:	68f8      	ldr	r0, [r7, #12]
 8019872:	f7ff f9c3 	bl	8018bfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8019876:	bf00      	nop
 8019878:	3710      	adds	r7, #16
 801987a:	46bd      	mov	sp, r7
 801987c:	bd80      	pop	{r7, pc}

0801987e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801987e:	b580      	push	{r7, lr}
 8019880:	b084      	sub	sp, #16
 8019882:	af00      	add	r7, sp, #0
 8019884:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801988a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801988c:	68fb      	ldr	r3, [r7, #12]
 801988e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019890:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019894:	68fb      	ldr	r3, [r7, #12]
 8019896:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8019898:	68fb      	ldr	r3, [r7, #12]
 801989a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801989c:	f043 0204 	orr.w	r2, r3, #4
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80198a4:	68f8      	ldr	r0, [r7, #12]
 80198a6:	f7ff f9bd 	bl	8018c24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80198aa:	bf00      	nop
 80198ac:	3710      	adds	r7, #16
 80198ae:	46bd      	mov	sp, r7
 80198b0:	bd80      	pop	{r7, pc}

080198b2 <LL_ADC_IsEnabled>:
{
 80198b2:	b480      	push	{r7}
 80198b4:	b083      	sub	sp, #12
 80198b6:	af00      	add	r7, sp, #0
 80198b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	689b      	ldr	r3, [r3, #8]
 80198be:	f003 0301 	and.w	r3, r3, #1
 80198c2:	2b01      	cmp	r3, #1
 80198c4:	d101      	bne.n	80198ca <LL_ADC_IsEnabled+0x18>
 80198c6:	2301      	movs	r3, #1
 80198c8:	e000      	b.n	80198cc <LL_ADC_IsEnabled+0x1a>
 80198ca:	2300      	movs	r3, #0
}
 80198cc:	4618      	mov	r0, r3
 80198ce:	370c      	adds	r7, #12
 80198d0:	46bd      	mov	sp, r7
 80198d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d6:	4770      	bx	lr

080198d8 <LL_ADC_StartCalibration>:
{
 80198d8:	b480      	push	{r7}
 80198da:	b083      	sub	sp, #12
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
 80198e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	689b      	ldr	r3, [r3, #8]
 80198e6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80198ea:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80198ee:	683a      	ldr	r2, [r7, #0]
 80198f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80198f4:	4313      	orrs	r3, r2
 80198f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	609a      	str	r2, [r3, #8]
}
 80198fe:	bf00      	nop
 8019900:	370c      	adds	r7, #12
 8019902:	46bd      	mov	sp, r7
 8019904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019908:	4770      	bx	lr

0801990a <LL_ADC_IsCalibrationOnGoing>:
{
 801990a:	b480      	push	{r7}
 801990c:	b083      	sub	sp, #12
 801990e:	af00      	add	r7, sp, #0
 8019910:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	689b      	ldr	r3, [r3, #8]
 8019916:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801991a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801991e:	d101      	bne.n	8019924 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8019920:	2301      	movs	r3, #1
 8019922:	e000      	b.n	8019926 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8019924:	2300      	movs	r3, #0
}
 8019926:	4618      	mov	r0, r3
 8019928:	370c      	adds	r7, #12
 801992a:	46bd      	mov	sp, r7
 801992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019930:	4770      	bx	lr

08019932 <LL_ADC_REG_IsConversionOngoing>:
{
 8019932:	b480      	push	{r7}
 8019934:	b083      	sub	sp, #12
 8019936:	af00      	add	r7, sp, #0
 8019938:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	689b      	ldr	r3, [r3, #8]
 801993e:	f003 0304 	and.w	r3, r3, #4
 8019942:	2b04      	cmp	r3, #4
 8019944:	d101      	bne.n	801994a <LL_ADC_REG_IsConversionOngoing+0x18>
 8019946:	2301      	movs	r3, #1
 8019948:	e000      	b.n	801994c <LL_ADC_REG_IsConversionOngoing+0x1a>
 801994a:	2300      	movs	r3, #0
}
 801994c:	4618      	mov	r0, r3
 801994e:	370c      	adds	r7, #12
 8019950:	46bd      	mov	sp, r7
 8019952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019956:	4770      	bx	lr

08019958 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8019958:	b580      	push	{r7, lr}
 801995a:	b084      	sub	sp, #16
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
 8019960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8019962:	2300      	movs	r3, #0
 8019964:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801996c:	2b01      	cmp	r3, #1
 801996e:	d101      	bne.n	8019974 <HAL_ADCEx_Calibration_Start+0x1c>
 8019970:	2302      	movs	r3, #2
 8019972:	e04d      	b.n	8019a10 <HAL_ADCEx_Calibration_Start+0xb8>
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2201      	movs	r2, #1
 8019978:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801997c:	6878      	ldr	r0, [r7, #4]
 801997e:	f7ff fea5 	bl	80196cc <ADC_Disable>
 8019982:	4603      	mov	r3, r0
 8019984:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8019986:	7bfb      	ldrb	r3, [r7, #15]
 8019988:	2b00      	cmp	r3, #0
 801998a:	d136      	bne.n	80199fa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019990:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019994:	f023 0302 	bic.w	r3, r3, #2
 8019998:	f043 0202 	orr.w	r2, r3, #2
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	6839      	ldr	r1, [r7, #0]
 80199a6:	4618      	mov	r0, r3
 80199a8:	f7ff ff96 	bl	80198d8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80199ac:	e014      	b.n	80199d8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80199ae:	68bb      	ldr	r3, [r7, #8]
 80199b0:	3301      	adds	r3, #1
 80199b2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80199b4:	68bb      	ldr	r3, [r7, #8]
 80199b6:	4a18      	ldr	r2, [pc, #96]	; (8019a18 <HAL_ADCEx_Calibration_Start+0xc0>)
 80199b8:	4293      	cmp	r3, r2
 80199ba:	d90d      	bls.n	80199d8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199c0:	f023 0312 	bic.w	r3, r3, #18
 80199c4:	f043 0210 	orr.w	r2, r3, #16
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	2200      	movs	r2, #0
 80199d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80199d4:	2301      	movs	r3, #1
 80199d6:	e01b      	b.n	8019a10 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	4618      	mov	r0, r3
 80199de:	f7ff ff94 	bl	801990a <LL_ADC_IsCalibrationOnGoing>
 80199e2:	4603      	mov	r3, r0
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d1e2      	bne.n	80199ae <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199ec:	f023 0303 	bic.w	r3, r3, #3
 80199f0:	f043 0201 	orr.w	r2, r3, #1
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80199f8:	e005      	b.n	8019a06 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80199fe:	f043 0210 	orr.w	r2, r3, #16
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	2200      	movs	r2, #0
 8019a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019a10:	4618      	mov	r0, r3
 8019a12:	3710      	adds	r7, #16
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	0004de01 	.word	0x0004de01

08019a1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019a1c:	b480      	push	{r7}
 8019a1e:	b083      	sub	sp, #12
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8019a24:	bf00      	nop
 8019a26:	370c      	adds	r7, #12
 8019a28:	46bd      	mov	sp, r7
 8019a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a2e:	4770      	bx	lr

08019a30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8019a30:	b480      	push	{r7}
 8019a32:	b083      	sub	sp, #12
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8019a38:	bf00      	nop
 8019a3a:	370c      	adds	r7, #12
 8019a3c:	46bd      	mov	sp, r7
 8019a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a42:	4770      	bx	lr

08019a44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8019a44:	b480      	push	{r7}
 8019a46:	b083      	sub	sp, #12
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8019a4c:	bf00      	nop
 8019a4e:	370c      	adds	r7, #12
 8019a50:	46bd      	mov	sp, r7
 8019a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a56:	4770      	bx	lr

08019a58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8019a58:	b480      	push	{r7}
 8019a5a:	b083      	sub	sp, #12
 8019a5c:	af00      	add	r7, sp, #0
 8019a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8019a60:	bf00      	nop
 8019a62:	370c      	adds	r7, #12
 8019a64:	46bd      	mov	sp, r7
 8019a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6a:	4770      	bx	lr

08019a6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8019a6c:	b480      	push	{r7}
 8019a6e:	b083      	sub	sp, #12
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8019a74:	bf00      	nop
 8019a76:	370c      	adds	r7, #12
 8019a78:	46bd      	mov	sp, r7
 8019a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a7e:	4770      	bx	lr

08019a80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8019a80:	b590      	push	{r4, r7, lr}
 8019a82:	b0a1      	sub	sp, #132	; 0x84
 8019a84:	af00      	add	r7, sp, #0
 8019a86:	6078      	str	r0, [r7, #4]
 8019a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019a96:	2b01      	cmp	r3, #1
 8019a98:	d101      	bne.n	8019a9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8019a9a:	2302      	movs	r3, #2
 8019a9c:	e0cb      	b.n	8019c36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	2201      	movs	r2, #1
 8019aa2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8019aaa:	2300      	movs	r3, #0
 8019aac:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019ab6:	d102      	bne.n	8019abe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8019ab8:	4b61      	ldr	r3, [pc, #388]	; (8019c40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019aba:	60bb      	str	r3, [r7, #8]
 8019abc:	e001      	b.n	8019ac2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8019abe:	2300      	movs	r3, #0
 8019ac0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8019ac2:	68bb      	ldr	r3, [r7, #8]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d10b      	bne.n	8019ae0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019acc:	f043 0220 	orr.w	r2, r3, #32
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	2200      	movs	r2, #0
 8019ad8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8019adc:	2301      	movs	r3, #1
 8019ade:	e0aa      	b.n	8019c36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8019ae0:	68bb      	ldr	r3, [r7, #8]
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	f7ff ff25 	bl	8019932 <LL_ADC_REG_IsConversionOngoing>
 8019ae8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	4618      	mov	r0, r3
 8019af0:	f7ff ff1f 	bl	8019932 <LL_ADC_REG_IsConversionOngoing>
 8019af4:	4603      	mov	r3, r0
 8019af6:	2b00      	cmp	r3, #0
 8019af8:	f040 808c 	bne.w	8019c14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8019afc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	f040 8088 	bne.w	8019c14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	681b      	ldr	r3, [r3, #0]
 8019b08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b0c:	d004      	beq.n	8019b18 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	681b      	ldr	r3, [r3, #0]
 8019b12:	4a4b      	ldr	r2, [pc, #300]	; (8019c40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019b14:	4293      	cmp	r3, r2
 8019b16:	d101      	bne.n	8019b1c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8019b18:	4b4a      	ldr	r3, [pc, #296]	; (8019c44 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8019b1a:	e000      	b.n	8019b1e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8019b1c:	4b4a      	ldr	r3, [pc, #296]	; (8019c48 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8019b1e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019b20:	683b      	ldr	r3, [r7, #0]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d041      	beq.n	8019bac <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8019b28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b2a:	689b      	ldr	r3, [r3, #8]
 8019b2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019b30:	683b      	ldr	r3, [r7, #0]
 8019b32:	6859      	ldr	r1, [r3, #4]
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019b3a:	035b      	lsls	r3, r3, #13
 8019b3c:	430b      	orrs	r3, r1
 8019b3e:	431a      	orrs	r2, r3
 8019b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b4c:	d004      	beq.n	8019b58 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	4a3b      	ldr	r2, [pc, #236]	; (8019c40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019b54:	4293      	cmp	r3, r2
 8019b56:	d10f      	bne.n	8019b78 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8019b58:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019b5c:	f7ff fea9 	bl	80198b2 <LL_ADC_IsEnabled>
 8019b60:	4604      	mov	r4, r0
 8019b62:	4837      	ldr	r0, [pc, #220]	; (8019c40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019b64:	f7ff fea5 	bl	80198b2 <LL_ADC_IsEnabled>
 8019b68:	4603      	mov	r3, r0
 8019b6a:	4323      	orrs	r3, r4
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	bf0c      	ite	eq
 8019b70:	2301      	moveq	r3, #1
 8019b72:	2300      	movne	r3, #0
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	e008      	b.n	8019b8a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8019b78:	4834      	ldr	r0, [pc, #208]	; (8019c4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019b7a:	f7ff fe9a 	bl	80198b2 <LL_ADC_IsEnabled>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	bf0c      	ite	eq
 8019b84:	2301      	moveq	r3, #1
 8019b86:	2300      	movne	r3, #0
 8019b88:	b2db      	uxtb	r3, r3
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d04c      	beq.n	8019c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8019b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019b90:	689b      	ldr	r3, [r3, #8]
 8019b92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019b96:	f023 030f 	bic.w	r3, r3, #15
 8019b9a:	683a      	ldr	r2, [r7, #0]
 8019b9c:	6811      	ldr	r1, [r2, #0]
 8019b9e:	683a      	ldr	r2, [r7, #0]
 8019ba0:	6892      	ldr	r2, [r2, #8]
 8019ba2:	430a      	orrs	r2, r1
 8019ba4:	431a      	orrs	r2, r3
 8019ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019ba8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019baa:	e03d      	b.n	8019c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8019bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bae:	689b      	ldr	r3, [r3, #8]
 8019bb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019bb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019bc0:	d004      	beq.n	8019bcc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	4a1e      	ldr	r2, [pc, #120]	; (8019c40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019bc8:	4293      	cmp	r3, r2
 8019bca:	d10f      	bne.n	8019bec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8019bcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019bd0:	f7ff fe6f 	bl	80198b2 <LL_ADC_IsEnabled>
 8019bd4:	4604      	mov	r4, r0
 8019bd6:	481a      	ldr	r0, [pc, #104]	; (8019c40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8019bd8:	f7ff fe6b 	bl	80198b2 <LL_ADC_IsEnabled>
 8019bdc:	4603      	mov	r3, r0
 8019bde:	4323      	orrs	r3, r4
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	bf0c      	ite	eq
 8019be4:	2301      	moveq	r3, #1
 8019be6:	2300      	movne	r3, #0
 8019be8:	b2db      	uxtb	r3, r3
 8019bea:	e008      	b.n	8019bfe <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8019bec:	4817      	ldr	r0, [pc, #92]	; (8019c4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8019bee:	f7ff fe60 	bl	80198b2 <LL_ADC_IsEnabled>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	2b00      	cmp	r3, #0
 8019bf6:	bf0c      	ite	eq
 8019bf8:	2301      	moveq	r3, #1
 8019bfa:	2300      	movne	r3, #0
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	2b00      	cmp	r3, #0
 8019c00:	d012      	beq.n	8019c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8019c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019c04:	689b      	ldr	r3, [r3, #8]
 8019c06:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8019c0a:	f023 030f 	bic.w	r3, r3, #15
 8019c0e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019c10:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019c12:	e009      	b.n	8019c28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c18:	f043 0220 	orr.w	r2, r3, #32
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019c20:	2301      	movs	r3, #1
 8019c22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8019c26:	e000      	b.n	8019c2a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8019c28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	2200      	movs	r2, #0
 8019c2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019c32:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8019c36:	4618      	mov	r0, r3
 8019c38:	3784      	adds	r7, #132	; 0x84
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd90      	pop	{r4, r7, pc}
 8019c3e:	bf00      	nop
 8019c40:	50000100 	.word	0x50000100
 8019c44:	50000300 	.word	0x50000300
 8019c48:	50000700 	.word	0x50000700
 8019c4c:	50000400 	.word	0x50000400

08019c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019c50:	b480      	push	{r7}
 8019c52:	b085      	sub	sp, #20
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f003 0307 	and.w	r3, r3, #7
 8019c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019c60:	4b0c      	ldr	r3, [pc, #48]	; (8019c94 <__NVIC_SetPriorityGrouping+0x44>)
 8019c62:	68db      	ldr	r3, [r3, #12]
 8019c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019c66:	68ba      	ldr	r2, [r7, #8]
 8019c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019c6c:	4013      	ands	r3, r2
 8019c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019c74:	68bb      	ldr	r3, [r7, #8]
 8019c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8019c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8019c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8019c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019c82:	4a04      	ldr	r2, [pc, #16]	; (8019c94 <__NVIC_SetPriorityGrouping+0x44>)
 8019c84:	68bb      	ldr	r3, [r7, #8]
 8019c86:	60d3      	str	r3, [r2, #12]
}
 8019c88:	bf00      	nop
 8019c8a:	3714      	adds	r7, #20
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c92:	4770      	bx	lr
 8019c94:	e000ed00 	.word	0xe000ed00

08019c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8019c98:	b480      	push	{r7}
 8019c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019c9c:	4b04      	ldr	r3, [pc, #16]	; (8019cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8019c9e:	68db      	ldr	r3, [r3, #12]
 8019ca0:	0a1b      	lsrs	r3, r3, #8
 8019ca2:	f003 0307 	and.w	r3, r3, #7
}
 8019ca6:	4618      	mov	r0, r3
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cae:	4770      	bx	lr
 8019cb0:	e000ed00 	.word	0xe000ed00

08019cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019cb4:	b480      	push	{r7}
 8019cb6:	b083      	sub	sp, #12
 8019cb8:	af00      	add	r7, sp, #0
 8019cba:	4603      	mov	r3, r0
 8019cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019cc2:	2b00      	cmp	r3, #0
 8019cc4:	db0b      	blt.n	8019cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019cc6:	79fb      	ldrb	r3, [r7, #7]
 8019cc8:	f003 021f 	and.w	r2, r3, #31
 8019ccc:	4907      	ldr	r1, [pc, #28]	; (8019cec <__NVIC_EnableIRQ+0x38>)
 8019cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019cd2:	095b      	lsrs	r3, r3, #5
 8019cd4:	2001      	movs	r0, #1
 8019cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8019cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8019cde:	bf00      	nop
 8019ce0:	370c      	adds	r7, #12
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ce8:	4770      	bx	lr
 8019cea:	bf00      	nop
 8019cec:	e000e100 	.word	0xe000e100

08019cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8019cf0:	b480      	push	{r7}
 8019cf2:	b083      	sub	sp, #12
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	6039      	str	r1, [r7, #0]
 8019cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	db0a      	blt.n	8019d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019d04:	683b      	ldr	r3, [r7, #0]
 8019d06:	b2da      	uxtb	r2, r3
 8019d08:	490c      	ldr	r1, [pc, #48]	; (8019d3c <__NVIC_SetPriority+0x4c>)
 8019d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019d0e:	0112      	lsls	r2, r2, #4
 8019d10:	b2d2      	uxtb	r2, r2
 8019d12:	440b      	add	r3, r1
 8019d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8019d18:	e00a      	b.n	8019d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019d1a:	683b      	ldr	r3, [r7, #0]
 8019d1c:	b2da      	uxtb	r2, r3
 8019d1e:	4908      	ldr	r1, [pc, #32]	; (8019d40 <__NVIC_SetPriority+0x50>)
 8019d20:	79fb      	ldrb	r3, [r7, #7]
 8019d22:	f003 030f 	and.w	r3, r3, #15
 8019d26:	3b04      	subs	r3, #4
 8019d28:	0112      	lsls	r2, r2, #4
 8019d2a:	b2d2      	uxtb	r2, r2
 8019d2c:	440b      	add	r3, r1
 8019d2e:	761a      	strb	r2, [r3, #24]
}
 8019d30:	bf00      	nop
 8019d32:	370c      	adds	r7, #12
 8019d34:	46bd      	mov	sp, r7
 8019d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d3a:	4770      	bx	lr
 8019d3c:	e000e100 	.word	0xe000e100
 8019d40:	e000ed00 	.word	0xe000ed00

08019d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019d44:	b480      	push	{r7}
 8019d46:	b089      	sub	sp, #36	; 0x24
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	60f8      	str	r0, [r7, #12]
 8019d4c:	60b9      	str	r1, [r7, #8]
 8019d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	f003 0307 	and.w	r3, r3, #7
 8019d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019d58:	69fb      	ldr	r3, [r7, #28]
 8019d5a:	f1c3 0307 	rsb	r3, r3, #7
 8019d5e:	2b04      	cmp	r3, #4
 8019d60:	bf28      	it	cs
 8019d62:	2304      	movcs	r3, #4
 8019d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019d66:	69fb      	ldr	r3, [r7, #28]
 8019d68:	3304      	adds	r3, #4
 8019d6a:	2b06      	cmp	r3, #6
 8019d6c:	d902      	bls.n	8019d74 <NVIC_EncodePriority+0x30>
 8019d6e:	69fb      	ldr	r3, [r7, #28]
 8019d70:	3b03      	subs	r3, #3
 8019d72:	e000      	b.n	8019d76 <NVIC_EncodePriority+0x32>
 8019d74:	2300      	movs	r3, #0
 8019d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019d78:	f04f 32ff 	mov.w	r2, #4294967295
 8019d7c:	69bb      	ldr	r3, [r7, #24]
 8019d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8019d82:	43da      	mvns	r2, r3
 8019d84:	68bb      	ldr	r3, [r7, #8]
 8019d86:	401a      	ands	r2, r3
 8019d88:	697b      	ldr	r3, [r7, #20]
 8019d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8019d90:	697b      	ldr	r3, [r7, #20]
 8019d92:	fa01 f303 	lsl.w	r3, r1, r3
 8019d96:	43d9      	mvns	r1, r3
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019d9c:	4313      	orrs	r3, r2
         );
}
 8019d9e:	4618      	mov	r0, r3
 8019da0:	3724      	adds	r7, #36	; 0x24
 8019da2:	46bd      	mov	sp, r7
 8019da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da8:	4770      	bx	lr
	...

08019dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	3b01      	subs	r3, #1
 8019db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019dbc:	d301      	bcc.n	8019dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019dbe:	2301      	movs	r3, #1
 8019dc0:	e00f      	b.n	8019de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019dc2:	4a0a      	ldr	r2, [pc, #40]	; (8019dec <SysTick_Config+0x40>)
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	3b01      	subs	r3, #1
 8019dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019dca:	210f      	movs	r1, #15
 8019dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8019dd0:	f7ff ff8e 	bl	8019cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019dd4:	4b05      	ldr	r3, [pc, #20]	; (8019dec <SysTick_Config+0x40>)
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019dda:	4b04      	ldr	r3, [pc, #16]	; (8019dec <SysTick_Config+0x40>)
 8019ddc:	2207      	movs	r2, #7
 8019dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019de0:	2300      	movs	r3, #0
}
 8019de2:	4618      	mov	r0, r3
 8019de4:	3708      	adds	r7, #8
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}
 8019dea:	bf00      	nop
 8019dec:	e000e010 	.word	0xe000e010

08019df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019df0:	b580      	push	{r7, lr}
 8019df2:	b082      	sub	sp, #8
 8019df4:	af00      	add	r7, sp, #0
 8019df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019df8:	6878      	ldr	r0, [r7, #4]
 8019dfa:	f7ff ff29 	bl	8019c50 <__NVIC_SetPriorityGrouping>
}
 8019dfe:	bf00      	nop
 8019e00:	3708      	adds	r7, #8
 8019e02:	46bd      	mov	sp, r7
 8019e04:	bd80      	pop	{r7, pc}

08019e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8019e06:	b580      	push	{r7, lr}
 8019e08:	b086      	sub	sp, #24
 8019e0a:	af00      	add	r7, sp, #0
 8019e0c:	4603      	mov	r3, r0
 8019e0e:	60b9      	str	r1, [r7, #8]
 8019e10:	607a      	str	r2, [r7, #4]
 8019e12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019e14:	f7ff ff40 	bl	8019c98 <__NVIC_GetPriorityGrouping>
 8019e18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019e1a:	687a      	ldr	r2, [r7, #4]
 8019e1c:	68b9      	ldr	r1, [r7, #8]
 8019e1e:	6978      	ldr	r0, [r7, #20]
 8019e20:	f7ff ff90 	bl	8019d44 <NVIC_EncodePriority>
 8019e24:	4602      	mov	r2, r0
 8019e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019e2a:	4611      	mov	r1, r2
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	f7ff ff5f 	bl	8019cf0 <__NVIC_SetPriority>
}
 8019e32:	bf00      	nop
 8019e34:	3718      	adds	r7, #24
 8019e36:	46bd      	mov	sp, r7
 8019e38:	bd80      	pop	{r7, pc}

08019e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019e3a:	b580      	push	{r7, lr}
 8019e3c:	b082      	sub	sp, #8
 8019e3e:	af00      	add	r7, sp, #0
 8019e40:	4603      	mov	r3, r0
 8019e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7ff ff33 	bl	8019cb4 <__NVIC_EnableIRQ>
}
 8019e4e:	bf00      	nop
 8019e50:	3708      	adds	r7, #8
 8019e52:	46bd      	mov	sp, r7
 8019e54:	bd80      	pop	{r7, pc}

08019e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019e56:	b580      	push	{r7, lr}
 8019e58:	b082      	sub	sp, #8
 8019e5a:	af00      	add	r7, sp, #0
 8019e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019e5e:	6878      	ldr	r0, [r7, #4]
 8019e60:	f7ff ffa4 	bl	8019dac <SysTick_Config>
 8019e64:	4603      	mov	r3, r0
}
 8019e66:	4618      	mov	r0, r3
 8019e68:	3708      	adds	r7, #8
 8019e6a:	46bd      	mov	sp, r7
 8019e6c:	bd80      	pop	{r7, pc}
	...

08019e70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019e70:	b580      	push	{r7, lr}
 8019e72:	b084      	sub	sp, #16
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d101      	bne.n	8019e82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8019e7e:	2301      	movs	r3, #1
 8019e80:	e08d      	b.n	8019f9e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	461a      	mov	r2, r3
 8019e88:	4b47      	ldr	r3, [pc, #284]	; (8019fa8 <HAL_DMA_Init+0x138>)
 8019e8a:	429a      	cmp	r2, r3
 8019e8c:	d80f      	bhi.n	8019eae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	681b      	ldr	r3, [r3, #0]
 8019e92:	461a      	mov	r2, r3
 8019e94:	4b45      	ldr	r3, [pc, #276]	; (8019fac <HAL_DMA_Init+0x13c>)
 8019e96:	4413      	add	r3, r2
 8019e98:	4a45      	ldr	r2, [pc, #276]	; (8019fb0 <HAL_DMA_Init+0x140>)
 8019e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8019e9e:	091b      	lsrs	r3, r3, #4
 8019ea0:	009a      	lsls	r2, r3, #2
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	4a42      	ldr	r2, [pc, #264]	; (8019fb4 <HAL_DMA_Init+0x144>)
 8019eaa:	641a      	str	r2, [r3, #64]	; 0x40
 8019eac:	e00e      	b.n	8019ecc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	681b      	ldr	r3, [r3, #0]
 8019eb2:	461a      	mov	r2, r3
 8019eb4:	4b40      	ldr	r3, [pc, #256]	; (8019fb8 <HAL_DMA_Init+0x148>)
 8019eb6:	4413      	add	r3, r2
 8019eb8:	4a3d      	ldr	r2, [pc, #244]	; (8019fb0 <HAL_DMA_Init+0x140>)
 8019eba:	fba2 2303 	umull	r2, r3, r2, r3
 8019ebe:	091b      	lsrs	r3, r3, #4
 8019ec0:	009a      	lsls	r2, r3, #2
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	4a3c      	ldr	r2, [pc, #240]	; (8019fbc <HAL_DMA_Init+0x14c>)
 8019eca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2202      	movs	r2, #2
 8019ed0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8019edc:	68fb      	ldr	r3, [r7, #12]
 8019ede:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8019ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8019ee6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8019ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	691b      	ldr	r3, [r3, #16]
 8019ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	699b      	ldr	r3, [r3, #24]
 8019f02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	6a1b      	ldr	r3, [r3, #32]
 8019f0e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8019f10:	68fa      	ldr	r2, [r7, #12]
 8019f12:	4313      	orrs	r3, r2
 8019f14:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	68fa      	ldr	r2, [r7, #12]
 8019f1c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8019f1e:	6878      	ldr	r0, [r7, #4]
 8019f20:	f000 fa10 	bl	801a344 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	689b      	ldr	r3, [r3, #8]
 8019f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019f2c:	d102      	bne.n	8019f34 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	2200      	movs	r2, #0
 8019f32:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	685a      	ldr	r2, [r3, #4]
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019f3c:	b2d2      	uxtb	r2, r2
 8019f3e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019f44:	687a      	ldr	r2, [r7, #4]
 8019f46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019f48:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	685b      	ldr	r3, [r3, #4]
 8019f4e:	2b00      	cmp	r3, #0
 8019f50:	d010      	beq.n	8019f74 <HAL_DMA_Init+0x104>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	685b      	ldr	r3, [r3, #4]
 8019f56:	2b04      	cmp	r3, #4
 8019f58:	d80c      	bhi.n	8019f74 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8019f5a:	6878      	ldr	r0, [r7, #4]
 8019f5c:	f000 fa30 	bl	801a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019f64:	2200      	movs	r2, #0
 8019f66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019f6c:	687a      	ldr	r2, [r7, #4]
 8019f6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8019f70:	605a      	str	r2, [r3, #4]
 8019f72:	e008      	b.n	8019f86 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	2200      	movs	r2, #0
 8019f78:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	2200      	movs	r2, #0
 8019f7e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	2200      	movs	r2, #0
 8019f84:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	2200      	movs	r2, #0
 8019f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	2201      	movs	r2, #1
 8019f90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2200      	movs	r2, #0
 8019f98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8019f9c:	2300      	movs	r3, #0
}
 8019f9e:	4618      	mov	r0, r3
 8019fa0:	3710      	adds	r7, #16
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd80      	pop	{r7, pc}
 8019fa6:	bf00      	nop
 8019fa8:	40020407 	.word	0x40020407
 8019fac:	bffdfff8 	.word	0xbffdfff8
 8019fb0:	cccccccd 	.word	0xcccccccd
 8019fb4:	40020000 	.word	0x40020000
 8019fb8:	bffdfbf8 	.word	0xbffdfbf8
 8019fbc:	40020400 	.word	0x40020400

08019fc0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8019fc0:	b580      	push	{r7, lr}
 8019fc2:	b086      	sub	sp, #24
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	60f8      	str	r0, [r7, #12]
 8019fc8:	60b9      	str	r1, [r7, #8]
 8019fca:	607a      	str	r2, [r7, #4]
 8019fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8019fce:	2300      	movs	r3, #0
 8019fd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019fd8:	2b01      	cmp	r3, #1
 8019fda:	d101      	bne.n	8019fe0 <HAL_DMA_Start_IT+0x20>
 8019fdc:	2302      	movs	r3, #2
 8019fde:	e066      	b.n	801a0ae <HAL_DMA_Start_IT+0xee>
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	2201      	movs	r2, #1
 8019fe4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019fee:	b2db      	uxtb	r3, r3
 8019ff0:	2b01      	cmp	r3, #1
 8019ff2:	d155      	bne.n	801a0a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	2202      	movs	r2, #2
 8019ff8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	2200      	movs	r2, #0
 801a000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	681a      	ldr	r2, [r3, #0]
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	f022 0201 	bic.w	r2, r2, #1
 801a010:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801a012:	683b      	ldr	r3, [r7, #0]
 801a014:	687a      	ldr	r2, [r7, #4]
 801a016:	68b9      	ldr	r1, [r7, #8]
 801a018:	68f8      	ldr	r0, [r7, #12]
 801a01a:	f000 f954 	bl	801a2c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801a01e:	68fb      	ldr	r3, [r7, #12]
 801a020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a022:	2b00      	cmp	r3, #0
 801a024:	d008      	beq.n	801a038 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	681a      	ldr	r2, [r3, #0]
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	681b      	ldr	r3, [r3, #0]
 801a030:	f042 020e 	orr.w	r2, r2, #14
 801a034:	601a      	str	r2, [r3, #0]
 801a036:	e00f      	b.n	801a058 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	681a      	ldr	r2, [r3, #0]
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f022 0204 	bic.w	r2, r2, #4
 801a046:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	681a      	ldr	r2, [r3, #0]
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	681b      	ldr	r3, [r3, #0]
 801a052:	f042 020a 	orr.w	r2, r2, #10
 801a056:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a062:	2b00      	cmp	r3, #0
 801a064:	d007      	beq.n	801a076 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a06a:	681a      	ldr	r2, [r3, #0]
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a074:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d007      	beq.n	801a08e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a082:	681a      	ldr	r2, [r3, #0]
 801a084:	68fb      	ldr	r3, [r7, #12]
 801a086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801a08c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	681a      	ldr	r2, [r3, #0]
 801a094:	68fb      	ldr	r3, [r7, #12]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	f042 0201 	orr.w	r2, r2, #1
 801a09c:	601a      	str	r2, [r3, #0]
 801a09e:	e005      	b.n	801a0ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a0a0:	68fb      	ldr	r3, [r7, #12]
 801a0a2:	2200      	movs	r2, #0
 801a0a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801a0a8:	2302      	movs	r3, #2
 801a0aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801a0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0ae:	4618      	mov	r0, r3
 801a0b0:	3718      	adds	r7, #24
 801a0b2:	46bd      	mov	sp, r7
 801a0b4:	bd80      	pop	{r7, pc}

0801a0b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a0b6:	b480      	push	{r7}
 801a0b8:	b085      	sub	sp, #20
 801a0ba:	af00      	add	r7, sp, #0
 801a0bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801a0be:	2300      	movs	r3, #0
 801a0c0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a0c8:	b2db      	uxtb	r3, r3
 801a0ca:	2b02      	cmp	r3, #2
 801a0cc:	d005      	beq.n	801a0da <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	2204      	movs	r2, #4
 801a0d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801a0d4:	2301      	movs	r3, #1
 801a0d6:	73fb      	strb	r3, [r7, #15]
 801a0d8:	e037      	b.n	801a14a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	681a      	ldr	r2, [r3, #0]
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	f022 020e 	bic.w	r2, r2, #14
 801a0e8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a0ee:	681a      	ldr	r2, [r3, #0]
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a0f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a0f8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	681a      	ldr	r2, [r3, #0]
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	f022 0201 	bic.w	r2, r2, #1
 801a108:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a10e:	f003 021f 	and.w	r2, r3, #31
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a116:	2101      	movs	r1, #1
 801a118:	fa01 f202 	lsl.w	r2, r1, r2
 801a11c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a122:	687a      	ldr	r2, [r7, #4]
 801a124:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a126:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d00c      	beq.n	801a14a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a134:	681a      	ldr	r2, [r3, #0]
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a13a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801a13e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a144:	687a      	ldr	r2, [r7, #4]
 801a146:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a148:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	2201      	movs	r2, #1
 801a14e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	2200      	movs	r2, #0
 801a156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801a15a:	7bfb      	ldrb	r3, [r7, #15]
}
 801a15c:	4618      	mov	r0, r3
 801a15e:	3714      	adds	r7, #20
 801a160:	46bd      	mov	sp, r7
 801a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a166:	4770      	bx	lr

0801a168 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b084      	sub	sp, #16
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a184:	f003 031f 	and.w	r3, r3, #31
 801a188:	2204      	movs	r2, #4
 801a18a:	409a      	lsls	r2, r3
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	4013      	ands	r3, r2
 801a190:	2b00      	cmp	r3, #0
 801a192:	d026      	beq.n	801a1e2 <HAL_DMA_IRQHandler+0x7a>
 801a194:	68bb      	ldr	r3, [r7, #8]
 801a196:	f003 0304 	and.w	r3, r3, #4
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d021      	beq.n	801a1e2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	f003 0320 	and.w	r3, r3, #32
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d107      	bne.n	801a1bc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	681a      	ldr	r2, [r3, #0]
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	681b      	ldr	r3, [r3, #0]
 801a1b6:	f022 0204 	bic.w	r2, r2, #4
 801a1ba:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1c0:	f003 021f 	and.w	r2, r3, #31
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1c8:	2104      	movs	r1, #4
 801a1ca:	fa01 f202 	lsl.w	r2, r1, r2
 801a1ce:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d071      	beq.n	801a2bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a1dc:	6878      	ldr	r0, [r7, #4]
 801a1de:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801a1e0:	e06c      	b.n	801a2bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a1e6:	f003 031f 	and.w	r3, r3, #31
 801a1ea:	2202      	movs	r2, #2
 801a1ec:	409a      	lsls	r2, r3
 801a1ee:	68fb      	ldr	r3, [r7, #12]
 801a1f0:	4013      	ands	r3, r2
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d02e      	beq.n	801a254 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801a1f6:	68bb      	ldr	r3, [r7, #8]
 801a1f8:	f003 0302 	and.w	r3, r3, #2
 801a1fc:	2b00      	cmp	r3, #0
 801a1fe:	d029      	beq.n	801a254 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	f003 0320 	and.w	r3, r3, #32
 801a20a:	2b00      	cmp	r3, #0
 801a20c:	d10b      	bne.n	801a226 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	681a      	ldr	r2, [r3, #0]
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	f022 020a 	bic.w	r2, r2, #10
 801a21c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	2201      	movs	r2, #1
 801a222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a22a:	f003 021f 	and.w	r2, r3, #31
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a232:	2102      	movs	r1, #2
 801a234:	fa01 f202 	lsl.w	r2, r1, r2
 801a238:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	2200      	movs	r2, #0
 801a23e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a246:	2b00      	cmp	r3, #0
 801a248:	d038      	beq.n	801a2bc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a24e:	6878      	ldr	r0, [r7, #4]
 801a250:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801a252:	e033      	b.n	801a2bc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a258:	f003 031f 	and.w	r3, r3, #31
 801a25c:	2208      	movs	r2, #8
 801a25e:	409a      	lsls	r2, r3
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	4013      	ands	r3, r2
 801a264:	2b00      	cmp	r3, #0
 801a266:	d02a      	beq.n	801a2be <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801a268:	68bb      	ldr	r3, [r7, #8]
 801a26a:	f003 0308 	and.w	r3, r3, #8
 801a26e:	2b00      	cmp	r3, #0
 801a270:	d025      	beq.n	801a2be <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	681a      	ldr	r2, [r3, #0]
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	f022 020e 	bic.w	r2, r2, #14
 801a280:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a286:	f003 021f 	and.w	r2, r3, #31
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a28e:	2101      	movs	r1, #1
 801a290:	fa01 f202 	lsl.w	r2, r1, r2
 801a294:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2201      	movs	r2, #1
 801a29a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	2201      	movs	r2, #1
 801a2a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	2200      	movs	r2, #0
 801a2a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d004      	beq.n	801a2be <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801a2bc:	bf00      	nop
 801a2be:	bf00      	nop
}
 801a2c0:	3710      	adds	r7, #16
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}

0801a2c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801a2c6:	b480      	push	{r7}
 801a2c8:	b085      	sub	sp, #20
 801a2ca:	af00      	add	r7, sp, #0
 801a2cc:	60f8      	str	r0, [r7, #12]
 801a2ce:	60b9      	str	r1, [r7, #8]
 801a2d0:	607a      	str	r2, [r7, #4]
 801a2d2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a2d4:	68fb      	ldr	r3, [r7, #12]
 801a2d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a2d8:	68fa      	ldr	r2, [r7, #12]
 801a2da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801a2dc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a2e2:	2b00      	cmp	r3, #0
 801a2e4:	d004      	beq.n	801a2f0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a2e6:	68fb      	ldr	r3, [r7, #12]
 801a2e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a2ea:	68fa      	ldr	r2, [r7, #12]
 801a2ec:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801a2ee:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801a2f0:	68fb      	ldr	r3, [r7, #12]
 801a2f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a2f4:	f003 021f 	and.w	r2, r3, #31
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a2fc:	2101      	movs	r1, #1
 801a2fe:	fa01 f202 	lsl.w	r2, r1, r2
 801a302:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801a304:	68fb      	ldr	r3, [r7, #12]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	683a      	ldr	r2, [r7, #0]
 801a30a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801a30c:	68fb      	ldr	r3, [r7, #12]
 801a30e:	689b      	ldr	r3, [r3, #8]
 801a310:	2b10      	cmp	r3, #16
 801a312:	d108      	bne.n	801a326 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801a314:	68fb      	ldr	r3, [r7, #12]
 801a316:	681b      	ldr	r3, [r3, #0]
 801a318:	687a      	ldr	r2, [r7, #4]
 801a31a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	68ba      	ldr	r2, [r7, #8]
 801a322:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801a324:	e007      	b.n	801a336 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801a326:	68fb      	ldr	r3, [r7, #12]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	68ba      	ldr	r2, [r7, #8]
 801a32c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	687a      	ldr	r2, [r7, #4]
 801a334:	60da      	str	r2, [r3, #12]
}
 801a336:	bf00      	nop
 801a338:	3714      	adds	r7, #20
 801a33a:	46bd      	mov	sp, r7
 801a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a340:	4770      	bx	lr
	...

0801a344 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a344:	b480      	push	{r7}
 801a346:	b087      	sub	sp, #28
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	461a      	mov	r2, r3
 801a352:	4b16      	ldr	r3, [pc, #88]	; (801a3ac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801a354:	429a      	cmp	r2, r3
 801a356:	d802      	bhi.n	801a35e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801a358:	4b15      	ldr	r3, [pc, #84]	; (801a3b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801a35a:	617b      	str	r3, [r7, #20]
 801a35c:	e001      	b.n	801a362 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801a35e:	4b15      	ldr	r3, [pc, #84]	; (801a3b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801a360:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801a362:	697b      	ldr	r3, [r7, #20]
 801a364:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	b2db      	uxtb	r3, r3
 801a36c:	3b08      	subs	r3, #8
 801a36e:	4a12      	ldr	r2, [pc, #72]	; (801a3b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801a370:	fba2 2303 	umull	r2, r3, r2, r3
 801a374:	091b      	lsrs	r3, r3, #4
 801a376:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a37c:	089b      	lsrs	r3, r3, #2
 801a37e:	009a      	lsls	r2, r3, #2
 801a380:	693b      	ldr	r3, [r7, #16]
 801a382:	4413      	add	r3, r2
 801a384:	461a      	mov	r2, r3
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	4a0b      	ldr	r2, [pc, #44]	; (801a3bc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801a38e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	f003 031f 	and.w	r3, r3, #31
 801a396:	2201      	movs	r2, #1
 801a398:	409a      	lsls	r2, r3
 801a39a:	687b      	ldr	r3, [r7, #4]
 801a39c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801a39e:	bf00      	nop
 801a3a0:	371c      	adds	r7, #28
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a8:	4770      	bx	lr
 801a3aa:	bf00      	nop
 801a3ac:	40020407 	.word	0x40020407
 801a3b0:	40020800 	.word	0x40020800
 801a3b4:	40020820 	.word	0x40020820
 801a3b8:	cccccccd 	.word	0xcccccccd
 801a3bc:	40020880 	.word	0x40020880

0801a3c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801a3c0:	b480      	push	{r7}
 801a3c2:	b085      	sub	sp, #20
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	685b      	ldr	r3, [r3, #4]
 801a3cc:	b2db      	uxtb	r3, r3
 801a3ce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801a3d0:	68fa      	ldr	r2, [r7, #12]
 801a3d2:	4b0b      	ldr	r3, [pc, #44]	; (801a400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801a3d4:	4413      	add	r3, r2
 801a3d6:	009b      	lsls	r3, r3, #2
 801a3d8:	461a      	mov	r2, r3
 801a3da:	687b      	ldr	r3, [r7, #4]
 801a3dc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	4a08      	ldr	r2, [pc, #32]	; (801a404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801a3e2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	3b01      	subs	r3, #1
 801a3e8:	f003 031f 	and.w	r3, r3, #31
 801a3ec:	2201      	movs	r2, #1
 801a3ee:	409a      	lsls	r2, r3
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801a3f4:	bf00      	nop
 801a3f6:	3714      	adds	r7, #20
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3fe:	4770      	bx	lr
 801a400:	1000823f 	.word	0x1000823f
 801a404:	40020940 	.word	0x40020940

0801a408 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b086      	sub	sp, #24
 801a40c:	af00      	add	r7, sp, #0
 801a40e:	60f8      	str	r0, [r7, #12]
 801a410:	60b9      	str	r1, [r7, #8]
 801a412:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801a416:	2300      	movs	r3, #0
 801a418:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a41a:	4b24      	ldr	r3, [pc, #144]	; (801a4ac <HAL_FLASH_Program+0xa4>)
 801a41c:	781b      	ldrb	r3, [r3, #0]
 801a41e:	2b01      	cmp	r3, #1
 801a420:	d101      	bne.n	801a426 <HAL_FLASH_Program+0x1e>
 801a422:	2302      	movs	r3, #2
 801a424:	e03e      	b.n	801a4a4 <HAL_FLASH_Program+0x9c>
 801a426:	4b21      	ldr	r3, [pc, #132]	; (801a4ac <HAL_FLASH_Program+0xa4>)
 801a428:	2201      	movs	r2, #1
 801a42a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a42c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a430:	f000 f87c 	bl	801a52c <FLASH_WaitForLastOperation>
 801a434:	4603      	mov	r3, r0
 801a436:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801a438:	7dfb      	ldrb	r3, [r7, #23]
 801a43a:	2b00      	cmp	r3, #0
 801a43c:	d12e      	bne.n	801a49c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a43e:	4b1b      	ldr	r3, [pc, #108]	; (801a4ac <HAL_FLASH_Program+0xa4>)
 801a440:	2200      	movs	r2, #0
 801a442:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801a444:	68fb      	ldr	r3, [r7, #12]
 801a446:	2b00      	cmp	r3, #0
 801a448:	d107      	bne.n	801a45a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801a44a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801a44e:	68b8      	ldr	r0, [r7, #8]
 801a450:	f000 f8c0 	bl	801a5d4 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801a454:	2301      	movs	r3, #1
 801a456:	613b      	str	r3, [r7, #16]
 801a458:	e010      	b.n	801a47c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	2b01      	cmp	r3, #1
 801a45e:	d002      	beq.n	801a466 <HAL_FLASH_Program+0x5e>
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	2b02      	cmp	r3, #2
 801a464:	d10a      	bne.n	801a47c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801a466:	683b      	ldr	r3, [r7, #0]
 801a468:	4619      	mov	r1, r3
 801a46a:	68b8      	ldr	r0, [r7, #8]
 801a46c:	f000 f8d8 	bl	801a620 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	2b02      	cmp	r3, #2
 801a474:	d102      	bne.n	801a47c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801a476:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a47a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a47c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a480:	f000 f854 	bl	801a52c <FLASH_WaitForLastOperation>
 801a484:	4603      	mov	r3, r0
 801a486:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801a488:	693b      	ldr	r3, [r7, #16]
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d006      	beq.n	801a49c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801a48e:	4b08      	ldr	r3, [pc, #32]	; (801a4b0 <HAL_FLASH_Program+0xa8>)
 801a490:	695a      	ldr	r2, [r3, #20]
 801a492:	693b      	ldr	r3, [r7, #16]
 801a494:	43db      	mvns	r3, r3
 801a496:	4906      	ldr	r1, [pc, #24]	; (801a4b0 <HAL_FLASH_Program+0xa8>)
 801a498:	4013      	ands	r3, r2
 801a49a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a49c:	4b03      	ldr	r3, [pc, #12]	; (801a4ac <HAL_FLASH_Program+0xa4>)
 801a49e:	2200      	movs	r2, #0
 801a4a0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801a4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 801a4a4:	4618      	mov	r0, r3
 801a4a6:	3718      	adds	r7, #24
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	bd80      	pop	{r7, pc}
 801a4ac:	2000000c 	.word	0x2000000c
 801a4b0:	40022000 	.word	0x40022000

0801a4b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801a4b4:	b480      	push	{r7}
 801a4b6:	b083      	sub	sp, #12
 801a4b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a4be:	4b0b      	ldr	r3, [pc, #44]	; (801a4ec <HAL_FLASH_Unlock+0x38>)
 801a4c0:	695b      	ldr	r3, [r3, #20]
 801a4c2:	2b00      	cmp	r3, #0
 801a4c4:	da0b      	bge.n	801a4de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801a4c6:	4b09      	ldr	r3, [pc, #36]	; (801a4ec <HAL_FLASH_Unlock+0x38>)
 801a4c8:	4a09      	ldr	r2, [pc, #36]	; (801a4f0 <HAL_FLASH_Unlock+0x3c>)
 801a4ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801a4cc:	4b07      	ldr	r3, [pc, #28]	; (801a4ec <HAL_FLASH_Unlock+0x38>)
 801a4ce:	4a09      	ldr	r2, [pc, #36]	; (801a4f4 <HAL_FLASH_Unlock+0x40>)
 801a4d0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a4d2:	4b06      	ldr	r3, [pc, #24]	; (801a4ec <HAL_FLASH_Unlock+0x38>)
 801a4d4:	695b      	ldr	r3, [r3, #20]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	da01      	bge.n	801a4de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801a4da:	2301      	movs	r3, #1
 801a4dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801a4de:	79fb      	ldrb	r3, [r7, #7]
}
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	370c      	adds	r7, #12
 801a4e4:	46bd      	mov	sp, r7
 801a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ea:	4770      	bx	lr
 801a4ec:	40022000 	.word	0x40022000
 801a4f0:	45670123 	.word	0x45670123
 801a4f4:	cdef89ab 	.word	0xcdef89ab

0801a4f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801a4f8:	b480      	push	{r7}
 801a4fa:	b083      	sub	sp, #12
 801a4fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801a4fe:	2301      	movs	r3, #1
 801a500:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801a502:	4b09      	ldr	r3, [pc, #36]	; (801a528 <HAL_FLASH_Lock+0x30>)
 801a504:	695b      	ldr	r3, [r3, #20]
 801a506:	4a08      	ldr	r2, [pc, #32]	; (801a528 <HAL_FLASH_Lock+0x30>)
 801a508:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801a50c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801a50e:	4b06      	ldr	r3, [pc, #24]	; (801a528 <HAL_FLASH_Lock+0x30>)
 801a510:	695b      	ldr	r3, [r3, #20]
 801a512:	2b00      	cmp	r3, #0
 801a514:	da01      	bge.n	801a51a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801a516:	2300      	movs	r3, #0
 801a518:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801a51a:	79fb      	ldrb	r3, [r7, #7]
}
 801a51c:	4618      	mov	r0, r3
 801a51e:	370c      	adds	r7, #12
 801a520:	46bd      	mov	sp, r7
 801a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a526:	4770      	bx	lr
 801a528:	40022000 	.word	0x40022000

0801a52c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b084      	sub	sp, #16
 801a530:	af00      	add	r7, sp, #0
 801a532:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801a534:	f7fd f98a 	bl	801784c <HAL_GetTick>
 801a538:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a53a:	e009      	b.n	801a550 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801a53c:	f7fd f986 	bl	801784c <HAL_GetTick>
 801a540:	4602      	mov	r2, r0
 801a542:	68fb      	ldr	r3, [r7, #12]
 801a544:	1ad3      	subs	r3, r2, r3
 801a546:	687a      	ldr	r2, [r7, #4]
 801a548:	429a      	cmp	r2, r3
 801a54a:	d201      	bcs.n	801a550 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801a54c:	2303      	movs	r3, #3
 801a54e:	e038      	b.n	801a5c2 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801a550:	4b1e      	ldr	r3, [pc, #120]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a552:	691b      	ldr	r3, [r3, #16]
 801a554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801a558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a55c:	d0ee      	beq.n	801a53c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801a55e:	4b1b      	ldr	r3, [pc, #108]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a560:	691a      	ldr	r2, [r3, #16]
 801a562:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801a566:	4013      	ands	r3, r2
 801a568:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801a56a:	68bb      	ldr	r3, [r7, #8]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d01e      	beq.n	801a5ae <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801a570:	4b17      	ldr	r3, [pc, #92]	; (801a5d0 <FLASH_WaitForLastOperation+0xa4>)
 801a572:	685a      	ldr	r2, [r3, #4]
 801a574:	68bb      	ldr	r3, [r7, #8]
 801a576:	4313      	orrs	r3, r2
 801a578:	4a15      	ldr	r2, [pc, #84]	; (801a5d0 <FLASH_WaitForLastOperation+0xa4>)
 801a57a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a582:	2b00      	cmp	r3, #0
 801a584:	d007      	beq.n	801a596 <FLASH_WaitForLastOperation+0x6a>
 801a586:	4b11      	ldr	r3, [pc, #68]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a588:	699a      	ldr	r2, [r3, #24]
 801a58a:	68bb      	ldr	r3, [r7, #8]
 801a58c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801a590:	490e      	ldr	r1, [pc, #56]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a592:	4313      	orrs	r3, r2
 801a594:	618b      	str	r3, [r1, #24]
 801a596:	68bb      	ldr	r3, [r7, #8]
 801a598:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d004      	beq.n	801a5aa <FLASH_WaitForLastOperation+0x7e>
 801a5a0:	4a0a      	ldr	r2, [pc, #40]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a5a2:	68bb      	ldr	r3, [r7, #8]
 801a5a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801a5a8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801a5aa:	2301      	movs	r3, #1
 801a5ac:	e009      	b.n	801a5c2 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801a5ae:	4b07      	ldr	r3, [pc, #28]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a5b0:	691b      	ldr	r3, [r3, #16]
 801a5b2:	f003 0301 	and.w	r3, r3, #1
 801a5b6:	2b01      	cmp	r3, #1
 801a5b8:	d102      	bne.n	801a5c0 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801a5ba:	4b04      	ldr	r3, [pc, #16]	; (801a5cc <FLASH_WaitForLastOperation+0xa0>)
 801a5bc:	2201      	movs	r2, #1
 801a5be:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801a5c0:	2300      	movs	r3, #0
}
 801a5c2:	4618      	mov	r0, r3
 801a5c4:	3710      	adds	r7, #16
 801a5c6:	46bd      	mov	sp, r7
 801a5c8:	bd80      	pop	{r7, pc}
 801a5ca:	bf00      	nop
 801a5cc:	40022000 	.word	0x40022000
 801a5d0:	2000000c 	.word	0x2000000c

0801a5d4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801a5d4:	b480      	push	{r7}
 801a5d6:	b085      	sub	sp, #20
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	60f8      	str	r0, [r7, #12]
 801a5dc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801a5e0:	4b0e      	ldr	r3, [pc, #56]	; (801a61c <FLASH_Program_DoubleWord+0x48>)
 801a5e2:	695b      	ldr	r3, [r3, #20]
 801a5e4:	4a0d      	ldr	r2, [pc, #52]	; (801a61c <FLASH_Program_DoubleWord+0x48>)
 801a5e6:	f043 0301 	orr.w	r3, r3, #1
 801a5ea:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801a5ec:	68fb      	ldr	r3, [r7, #12]
 801a5ee:	683a      	ldr	r2, [r7, #0]
 801a5f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801a5f2:	f3bf 8f6f 	isb	sy
}
 801a5f6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801a5f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 801a5fc:	f04f 0200 	mov.w	r2, #0
 801a600:	f04f 0300 	mov.w	r3, #0
 801a604:	000a      	movs	r2, r1
 801a606:	2300      	movs	r3, #0
 801a608:	68f9      	ldr	r1, [r7, #12]
 801a60a:	3104      	adds	r1, #4
 801a60c:	4613      	mov	r3, r2
 801a60e:	600b      	str	r3, [r1, #0]
}
 801a610:	bf00      	nop
 801a612:	3714      	adds	r7, #20
 801a614:	46bd      	mov	sp, r7
 801a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61a:	4770      	bx	lr
 801a61c:	40022000 	.word	0x40022000

0801a620 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801a620:	b480      	push	{r7}
 801a622:	b089      	sub	sp, #36	; 0x24
 801a624:	af00      	add	r7, sp, #0
 801a626:	6078      	str	r0, [r7, #4]
 801a628:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801a62a:	2340      	movs	r3, #64	; 0x40
 801a62c:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801a632:	683b      	ldr	r3, [r7, #0]
 801a634:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801a636:	4b14      	ldr	r3, [pc, #80]	; (801a688 <FLASH_Program_Fast+0x68>)
 801a638:	695b      	ldr	r3, [r3, #20]
 801a63a:	4a13      	ldr	r2, [pc, #76]	; (801a688 <FLASH_Program_Fast+0x68>)
 801a63c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801a640:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a642:	f3ef 8310 	mrs	r3, PRIMASK
 801a646:	60fb      	str	r3, [r7, #12]
  return(result);
 801a648:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801a64a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a64c:	b672      	cpsid	i
}
 801a64e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801a650:	697b      	ldr	r3, [r7, #20]
 801a652:	681a      	ldr	r2, [r3, #0]
 801a654:	69bb      	ldr	r3, [r7, #24]
 801a656:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801a658:	69bb      	ldr	r3, [r7, #24]
 801a65a:	3304      	adds	r3, #4
 801a65c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801a65e:	697b      	ldr	r3, [r7, #20]
 801a660:	3304      	adds	r3, #4
 801a662:	617b      	str	r3, [r7, #20]
    row_index--;
 801a664:	7ffb      	ldrb	r3, [r7, #31]
 801a666:	3b01      	subs	r3, #1
 801a668:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801a66a:	7ffb      	ldrb	r3, [r7, #31]
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d1ef      	bne.n	801a650 <FLASH_Program_Fast+0x30>
 801a670:	693b      	ldr	r3, [r7, #16]
 801a672:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a674:	68bb      	ldr	r3, [r7, #8]
 801a676:	f383 8810 	msr	PRIMASK, r3
}
 801a67a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801a67c:	bf00      	nop
 801a67e:	3724      	adds	r7, #36	; 0x24
 801a680:	46bd      	mov	sp, r7
 801a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a686:	4770      	bx	lr
 801a688:	40022000 	.word	0x40022000

0801a68c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
 801a692:	6078      	str	r0, [r7, #4]
 801a694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801a696:	4b48      	ldr	r3, [pc, #288]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a698:	781b      	ldrb	r3, [r3, #0]
 801a69a:	2b01      	cmp	r3, #1
 801a69c:	d101      	bne.n	801a6a2 <HAL_FLASHEx_Erase+0x16>
 801a69e:	2302      	movs	r3, #2
 801a6a0:	e085      	b.n	801a7ae <HAL_FLASHEx_Erase+0x122>
 801a6a2:	4b45      	ldr	r3, [pc, #276]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a6a4:	2201      	movs	r2, #1
 801a6a6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a6a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a6ac:	f7ff ff3e 	bl	801a52c <FLASH_WaitForLastOperation>
 801a6b0:	4603      	mov	r3, r0
 801a6b2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801a6b4:	7bfb      	ldrb	r3, [r7, #15]
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	d175      	bne.n	801a7a6 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801a6ba:	4b3f      	ldr	r3, [pc, #252]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a6bc:	2200      	movs	r2, #0
 801a6be:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801a6c0:	4b3e      	ldr	r3, [pc, #248]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d013      	beq.n	801a6f4 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a6cc:	4b3b      	ldr	r3, [pc, #236]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d009      	beq.n	801a6ec <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801a6d8:	4b38      	ldr	r3, [pc, #224]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a6da:	681b      	ldr	r3, [r3, #0]
 801a6dc:	4a37      	ldr	r2, [pc, #220]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a6de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a6e2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801a6e4:	4b34      	ldr	r3, [pc, #208]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a6e6:	2203      	movs	r2, #3
 801a6e8:	771a      	strb	r2, [r3, #28]
 801a6ea:	e016      	b.n	801a71a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801a6ec:	4b32      	ldr	r3, [pc, #200]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a6ee:	2201      	movs	r2, #1
 801a6f0:	771a      	strb	r2, [r3, #28]
 801a6f2:	e012      	b.n	801a71a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801a6f4:	4b31      	ldr	r3, [pc, #196]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d009      	beq.n	801a714 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801a700:	4b2e      	ldr	r3, [pc, #184]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	4a2d      	ldr	r2, [pc, #180]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801a70a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801a70c:	4b2a      	ldr	r3, [pc, #168]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a70e:	2202      	movs	r2, #2
 801a710:	771a      	strb	r2, [r3, #28]
 801a712:	e002      	b.n	801a71a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801a714:	4b28      	ldr	r3, [pc, #160]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a716:	2200      	movs	r2, #0
 801a718:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	681b      	ldr	r3, [r3, #0]
 801a71e:	2b01      	cmp	r3, #1
 801a720:	d111      	bne.n	801a746 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	685b      	ldr	r3, [r3, #4]
 801a726:	4618      	mov	r0, r3
 801a728:	f000 f84a 	bl	801a7c0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a72c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a730:	f7ff fefc 	bl	801a52c <FLASH_WaitForLastOperation>
 801a734:	4603      	mov	r3, r0
 801a736:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801a738:	4b20      	ldr	r3, [pc, #128]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a73a:	695b      	ldr	r3, [r3, #20]
 801a73c:	4a1f      	ldr	r2, [pc, #124]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a73e:	f023 0304 	bic.w	r3, r3, #4
 801a742:	6153      	str	r3, [r2, #20]
 801a744:	e02d      	b.n	801a7a2 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801a746:	683b      	ldr	r3, [r7, #0]
 801a748:	f04f 32ff 	mov.w	r2, #4294967295
 801a74c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	689b      	ldr	r3, [r3, #8]
 801a752:	60bb      	str	r3, [r7, #8]
 801a754:	e01d      	b.n	801a792 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	685b      	ldr	r3, [r3, #4]
 801a75a:	4619      	mov	r1, r3
 801a75c:	68b8      	ldr	r0, [r7, #8]
 801a75e:	f000 f84d 	bl	801a7fc <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801a762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801a766:	f7ff fee1 	bl	801a52c <FLASH_WaitForLastOperation>
 801a76a:	4603      	mov	r3, r0
 801a76c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801a76e:	4b13      	ldr	r3, [pc, #76]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a770:	695b      	ldr	r3, [r3, #20]
 801a772:	4a12      	ldr	r2, [pc, #72]	; (801a7bc <HAL_FLASHEx_Erase+0x130>)
 801a774:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801a778:	f023 0302 	bic.w	r3, r3, #2
 801a77c:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801a77e:	7bfb      	ldrb	r3, [r7, #15]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d003      	beq.n	801a78c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801a784:	683b      	ldr	r3, [r7, #0]
 801a786:	68ba      	ldr	r2, [r7, #8]
 801a788:	601a      	str	r2, [r3, #0]
          break;
 801a78a:	e00a      	b.n	801a7a2 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801a78c:	68bb      	ldr	r3, [r7, #8]
 801a78e:	3301      	adds	r3, #1
 801a790:	60bb      	str	r3, [r7, #8]
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	689a      	ldr	r2, [r3, #8]
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	68db      	ldr	r3, [r3, #12]
 801a79a:	4413      	add	r3, r2
 801a79c:	68ba      	ldr	r2, [r7, #8]
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	d3d9      	bcc.n	801a756 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801a7a2:	f000 f84f 	bl	801a844 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801a7a6:	4b04      	ldr	r3, [pc, #16]	; (801a7b8 <HAL_FLASHEx_Erase+0x12c>)
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	701a      	strb	r2, [r3, #0]

  return status;
 801a7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	3710      	adds	r7, #16
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	bd80      	pop	{r7, pc}
 801a7b6:	bf00      	nop
 801a7b8:	2000000c 	.word	0x2000000c
 801a7bc:	40022000 	.word	0x40022000

0801a7c0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801a7c0:	b480      	push	{r7}
 801a7c2:	b083      	sub	sp, #12
 801a7c4:	af00      	add	r7, sp, #0
 801a7c6:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	f003 0301 	and.w	r3, r3, #1
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d005      	beq.n	801a7de <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801a7d2:	4b09      	ldr	r3, [pc, #36]	; (801a7f8 <FLASH_MassErase+0x38>)
 801a7d4:	695b      	ldr	r3, [r3, #20]
 801a7d6:	4a08      	ldr	r2, [pc, #32]	; (801a7f8 <FLASH_MassErase+0x38>)
 801a7d8:	f043 0304 	orr.w	r3, r3, #4
 801a7dc:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801a7de:	4b06      	ldr	r3, [pc, #24]	; (801a7f8 <FLASH_MassErase+0x38>)
 801a7e0:	695b      	ldr	r3, [r3, #20]
 801a7e2:	4a05      	ldr	r2, [pc, #20]	; (801a7f8 <FLASH_MassErase+0x38>)
 801a7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a7e8:	6153      	str	r3, [r2, #20]
}
 801a7ea:	bf00      	nop
 801a7ec:	370c      	adds	r7, #12
 801a7ee:	46bd      	mov	sp, r7
 801a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7f4:	4770      	bx	lr
 801a7f6:	bf00      	nop
 801a7f8:	40022000 	.word	0x40022000

0801a7fc <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801a7fc:	b480      	push	{r7}
 801a7fe:	b083      	sub	sp, #12
 801a800:	af00      	add	r7, sp, #0
 801a802:	6078      	str	r0, [r7, #4]
 801a804:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801a806:	4b0e      	ldr	r3, [pc, #56]	; (801a840 <FLASH_PageErase+0x44>)
 801a808:	695b      	ldr	r3, [r3, #20]
 801a80a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	00db      	lsls	r3, r3, #3
 801a812:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801a816:	490a      	ldr	r1, [pc, #40]	; (801a840 <FLASH_PageErase+0x44>)
 801a818:	4313      	orrs	r3, r2
 801a81a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801a81c:	4b08      	ldr	r3, [pc, #32]	; (801a840 <FLASH_PageErase+0x44>)
 801a81e:	695b      	ldr	r3, [r3, #20]
 801a820:	4a07      	ldr	r2, [pc, #28]	; (801a840 <FLASH_PageErase+0x44>)
 801a822:	f043 0302 	orr.w	r3, r3, #2
 801a826:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801a828:	4b05      	ldr	r3, [pc, #20]	; (801a840 <FLASH_PageErase+0x44>)
 801a82a:	695b      	ldr	r3, [r3, #20]
 801a82c:	4a04      	ldr	r2, [pc, #16]	; (801a840 <FLASH_PageErase+0x44>)
 801a82e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a832:	6153      	str	r3, [r2, #20]
}
 801a834:	bf00      	nop
 801a836:	370c      	adds	r7, #12
 801a838:	46bd      	mov	sp, r7
 801a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a83e:	4770      	bx	lr
 801a840:	40022000 	.word	0x40022000

0801a844 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801a844:	b480      	push	{r7}
 801a846:	b083      	sub	sp, #12
 801a848:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801a84a:	4b21      	ldr	r3, [pc, #132]	; (801a8d0 <FLASH_FlushCaches+0x8c>)
 801a84c:	7f1b      	ldrb	r3, [r3, #28]
 801a84e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801a850:	79fb      	ldrb	r3, [r7, #7]
 801a852:	2b01      	cmp	r3, #1
 801a854:	d002      	beq.n	801a85c <FLASH_FlushCaches+0x18>
 801a856:	79fb      	ldrb	r3, [r7, #7]
 801a858:	2b03      	cmp	r3, #3
 801a85a:	d117      	bne.n	801a88c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801a85c:	4b1d      	ldr	r3, [pc, #116]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	4a1c      	ldr	r2, [pc, #112]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a862:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801a866:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801a868:	4b1a      	ldr	r3, [pc, #104]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	4a19      	ldr	r2, [pc, #100]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a86e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a872:	6013      	str	r3, [r2, #0]
 801a874:	4b17      	ldr	r3, [pc, #92]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a876:	681b      	ldr	r3, [r3, #0]
 801a878:	4a16      	ldr	r2, [pc, #88]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a87a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801a87e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801a880:	4b14      	ldr	r3, [pc, #80]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4a13      	ldr	r2, [pc, #76]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801a88a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801a88c:	79fb      	ldrb	r3, [r7, #7]
 801a88e:	2b02      	cmp	r3, #2
 801a890:	d002      	beq.n	801a898 <FLASH_FlushCaches+0x54>
 801a892:	79fb      	ldrb	r3, [r7, #7]
 801a894:	2b03      	cmp	r3, #3
 801a896:	d111      	bne.n	801a8bc <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801a898:	4b0e      	ldr	r3, [pc, #56]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	4a0d      	ldr	r2, [pc, #52]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a89e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801a8a2:	6013      	str	r3, [r2, #0]
 801a8a4:	4b0b      	ldr	r3, [pc, #44]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	4a0a      	ldr	r2, [pc, #40]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a8aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a8ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801a8b0:	4b08      	ldr	r3, [pc, #32]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	4a07      	ldr	r2, [pc, #28]	; (801a8d4 <FLASH_FlushCaches+0x90>)
 801a8b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801a8ba:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801a8bc:	4b04      	ldr	r3, [pc, #16]	; (801a8d0 <FLASH_FlushCaches+0x8c>)
 801a8be:	2200      	movs	r2, #0
 801a8c0:	771a      	strb	r2, [r3, #28]
}
 801a8c2:	bf00      	nop
 801a8c4:	370c      	adds	r7, #12
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8cc:	4770      	bx	lr
 801a8ce:	bf00      	nop
 801a8d0:	2000000c 	.word	0x2000000c
 801a8d4:	40022000 	.word	0x40022000

0801a8d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a8d8:	b480      	push	{r7}
 801a8da:	b087      	sub	sp, #28
 801a8dc:	af00      	add	r7, sp, #0
 801a8de:	6078      	str	r0, [r7, #4]
 801a8e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801a8e2:	2300      	movs	r3, #0
 801a8e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801a8e6:	e15a      	b.n	801ab9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801a8e8:	683b      	ldr	r3, [r7, #0]
 801a8ea:	681a      	ldr	r2, [r3, #0]
 801a8ec:	2101      	movs	r1, #1
 801a8ee:	697b      	ldr	r3, [r7, #20]
 801a8f0:	fa01 f303 	lsl.w	r3, r1, r3
 801a8f4:	4013      	ands	r3, r2
 801a8f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801a8f8:	68fb      	ldr	r3, [r7, #12]
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	f000 814c 	beq.w	801ab98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801a900:	683b      	ldr	r3, [r7, #0]
 801a902:	685b      	ldr	r3, [r3, #4]
 801a904:	f003 0303 	and.w	r3, r3, #3
 801a908:	2b01      	cmp	r3, #1
 801a90a:	d005      	beq.n	801a918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a90c:	683b      	ldr	r3, [r7, #0]
 801a90e:	685b      	ldr	r3, [r3, #4]
 801a910:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801a914:	2b02      	cmp	r3, #2
 801a916:	d130      	bne.n	801a97a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	689b      	ldr	r3, [r3, #8]
 801a91c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801a91e:	697b      	ldr	r3, [r7, #20]
 801a920:	005b      	lsls	r3, r3, #1
 801a922:	2203      	movs	r2, #3
 801a924:	fa02 f303 	lsl.w	r3, r2, r3
 801a928:	43db      	mvns	r3, r3
 801a92a:	693a      	ldr	r2, [r7, #16]
 801a92c:	4013      	ands	r3, r2
 801a92e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	68da      	ldr	r2, [r3, #12]
 801a934:	697b      	ldr	r3, [r7, #20]
 801a936:	005b      	lsls	r3, r3, #1
 801a938:	fa02 f303 	lsl.w	r3, r2, r3
 801a93c:	693a      	ldr	r2, [r7, #16]
 801a93e:	4313      	orrs	r3, r2
 801a940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	693a      	ldr	r2, [r7, #16]
 801a946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	685b      	ldr	r3, [r3, #4]
 801a94c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801a94e:	2201      	movs	r2, #1
 801a950:	697b      	ldr	r3, [r7, #20]
 801a952:	fa02 f303 	lsl.w	r3, r2, r3
 801a956:	43db      	mvns	r3, r3
 801a958:	693a      	ldr	r2, [r7, #16]
 801a95a:	4013      	ands	r3, r2
 801a95c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801a95e:	683b      	ldr	r3, [r7, #0]
 801a960:	685b      	ldr	r3, [r3, #4]
 801a962:	091b      	lsrs	r3, r3, #4
 801a964:	f003 0201 	and.w	r2, r3, #1
 801a968:	697b      	ldr	r3, [r7, #20]
 801a96a:	fa02 f303 	lsl.w	r3, r2, r3
 801a96e:	693a      	ldr	r2, [r7, #16]
 801a970:	4313      	orrs	r3, r2
 801a972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	693a      	ldr	r2, [r7, #16]
 801a978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801a97a:	683b      	ldr	r3, [r7, #0]
 801a97c:	685b      	ldr	r3, [r3, #4]
 801a97e:	f003 0303 	and.w	r3, r3, #3
 801a982:	2b03      	cmp	r3, #3
 801a984:	d017      	beq.n	801a9b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801a98c:	697b      	ldr	r3, [r7, #20]
 801a98e:	005b      	lsls	r3, r3, #1
 801a990:	2203      	movs	r2, #3
 801a992:	fa02 f303 	lsl.w	r3, r2, r3
 801a996:	43db      	mvns	r3, r3
 801a998:	693a      	ldr	r2, [r7, #16]
 801a99a:	4013      	ands	r3, r2
 801a99c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801a99e:	683b      	ldr	r3, [r7, #0]
 801a9a0:	689a      	ldr	r2, [r3, #8]
 801a9a2:	697b      	ldr	r3, [r7, #20]
 801a9a4:	005b      	lsls	r3, r3, #1
 801a9a6:	fa02 f303 	lsl.w	r3, r2, r3
 801a9aa:	693a      	ldr	r2, [r7, #16]
 801a9ac:	4313      	orrs	r3, r2
 801a9ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	693a      	ldr	r2, [r7, #16]
 801a9b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801a9b6:	683b      	ldr	r3, [r7, #0]
 801a9b8:	685b      	ldr	r3, [r3, #4]
 801a9ba:	f003 0303 	and.w	r3, r3, #3
 801a9be:	2b02      	cmp	r3, #2
 801a9c0:	d123      	bne.n	801aa0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801a9c2:	697b      	ldr	r3, [r7, #20]
 801a9c4:	08da      	lsrs	r2, r3, #3
 801a9c6:	687b      	ldr	r3, [r7, #4]
 801a9c8:	3208      	adds	r2, #8
 801a9ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a9ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801a9d0:	697b      	ldr	r3, [r7, #20]
 801a9d2:	f003 0307 	and.w	r3, r3, #7
 801a9d6:	009b      	lsls	r3, r3, #2
 801a9d8:	220f      	movs	r2, #15
 801a9da:	fa02 f303 	lsl.w	r3, r2, r3
 801a9de:	43db      	mvns	r3, r3
 801a9e0:	693a      	ldr	r2, [r7, #16]
 801a9e2:	4013      	ands	r3, r2
 801a9e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801a9e6:	683b      	ldr	r3, [r7, #0]
 801a9e8:	691a      	ldr	r2, [r3, #16]
 801a9ea:	697b      	ldr	r3, [r7, #20]
 801a9ec:	f003 0307 	and.w	r3, r3, #7
 801a9f0:	009b      	lsls	r3, r3, #2
 801a9f2:	fa02 f303 	lsl.w	r3, r2, r3
 801a9f6:	693a      	ldr	r2, [r7, #16]
 801a9f8:	4313      	orrs	r3, r2
 801a9fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801a9fc:	697b      	ldr	r3, [r7, #20]
 801a9fe:	08da      	lsrs	r2, r3, #3
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	3208      	adds	r2, #8
 801aa04:	6939      	ldr	r1, [r7, #16]
 801aa06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801aa10:	697b      	ldr	r3, [r7, #20]
 801aa12:	005b      	lsls	r3, r3, #1
 801aa14:	2203      	movs	r2, #3
 801aa16:	fa02 f303 	lsl.w	r3, r2, r3
 801aa1a:	43db      	mvns	r3, r3
 801aa1c:	693a      	ldr	r2, [r7, #16]
 801aa1e:	4013      	ands	r3, r2
 801aa20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	685b      	ldr	r3, [r3, #4]
 801aa26:	f003 0203 	and.w	r2, r3, #3
 801aa2a:	697b      	ldr	r3, [r7, #20]
 801aa2c:	005b      	lsls	r3, r3, #1
 801aa2e:	fa02 f303 	lsl.w	r3, r2, r3
 801aa32:	693a      	ldr	r2, [r7, #16]
 801aa34:	4313      	orrs	r3, r2
 801aa36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	693a      	ldr	r2, [r7, #16]
 801aa3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801aa3e:	683b      	ldr	r3, [r7, #0]
 801aa40:	685b      	ldr	r3, [r3, #4]
 801aa42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	f000 80a6 	beq.w	801ab98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801aa4c:	4b5b      	ldr	r3, [pc, #364]	; (801abbc <HAL_GPIO_Init+0x2e4>)
 801aa4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa50:	4a5a      	ldr	r2, [pc, #360]	; (801abbc <HAL_GPIO_Init+0x2e4>)
 801aa52:	f043 0301 	orr.w	r3, r3, #1
 801aa56:	6613      	str	r3, [r2, #96]	; 0x60
 801aa58:	4b58      	ldr	r3, [pc, #352]	; (801abbc <HAL_GPIO_Init+0x2e4>)
 801aa5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa5c:	f003 0301 	and.w	r3, r3, #1
 801aa60:	60bb      	str	r3, [r7, #8]
 801aa62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801aa64:	4a56      	ldr	r2, [pc, #344]	; (801abc0 <HAL_GPIO_Init+0x2e8>)
 801aa66:	697b      	ldr	r3, [r7, #20]
 801aa68:	089b      	lsrs	r3, r3, #2
 801aa6a:	3302      	adds	r3, #2
 801aa6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801aa70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801aa72:	697b      	ldr	r3, [r7, #20]
 801aa74:	f003 0303 	and.w	r3, r3, #3
 801aa78:	009b      	lsls	r3, r3, #2
 801aa7a:	220f      	movs	r2, #15
 801aa7c:	fa02 f303 	lsl.w	r3, r2, r3
 801aa80:	43db      	mvns	r3, r3
 801aa82:	693a      	ldr	r2, [r7, #16]
 801aa84:	4013      	ands	r3, r2
 801aa86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801aa8e:	d01f      	beq.n	801aad0 <HAL_GPIO_Init+0x1f8>
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	4a4c      	ldr	r2, [pc, #304]	; (801abc4 <HAL_GPIO_Init+0x2ec>)
 801aa94:	4293      	cmp	r3, r2
 801aa96:	d019      	beq.n	801aacc <HAL_GPIO_Init+0x1f4>
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	4a4b      	ldr	r2, [pc, #300]	; (801abc8 <HAL_GPIO_Init+0x2f0>)
 801aa9c:	4293      	cmp	r3, r2
 801aa9e:	d013      	beq.n	801aac8 <HAL_GPIO_Init+0x1f0>
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	4a4a      	ldr	r2, [pc, #296]	; (801abcc <HAL_GPIO_Init+0x2f4>)
 801aaa4:	4293      	cmp	r3, r2
 801aaa6:	d00d      	beq.n	801aac4 <HAL_GPIO_Init+0x1ec>
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	4a49      	ldr	r2, [pc, #292]	; (801abd0 <HAL_GPIO_Init+0x2f8>)
 801aaac:	4293      	cmp	r3, r2
 801aaae:	d007      	beq.n	801aac0 <HAL_GPIO_Init+0x1e8>
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	4a48      	ldr	r2, [pc, #288]	; (801abd4 <HAL_GPIO_Init+0x2fc>)
 801aab4:	4293      	cmp	r3, r2
 801aab6:	d101      	bne.n	801aabc <HAL_GPIO_Init+0x1e4>
 801aab8:	2305      	movs	r3, #5
 801aaba:	e00a      	b.n	801aad2 <HAL_GPIO_Init+0x1fa>
 801aabc:	2306      	movs	r3, #6
 801aabe:	e008      	b.n	801aad2 <HAL_GPIO_Init+0x1fa>
 801aac0:	2304      	movs	r3, #4
 801aac2:	e006      	b.n	801aad2 <HAL_GPIO_Init+0x1fa>
 801aac4:	2303      	movs	r3, #3
 801aac6:	e004      	b.n	801aad2 <HAL_GPIO_Init+0x1fa>
 801aac8:	2302      	movs	r3, #2
 801aaca:	e002      	b.n	801aad2 <HAL_GPIO_Init+0x1fa>
 801aacc:	2301      	movs	r3, #1
 801aace:	e000      	b.n	801aad2 <HAL_GPIO_Init+0x1fa>
 801aad0:	2300      	movs	r3, #0
 801aad2:	697a      	ldr	r2, [r7, #20]
 801aad4:	f002 0203 	and.w	r2, r2, #3
 801aad8:	0092      	lsls	r2, r2, #2
 801aada:	4093      	lsls	r3, r2
 801aadc:	693a      	ldr	r2, [r7, #16]
 801aade:	4313      	orrs	r3, r2
 801aae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801aae2:	4937      	ldr	r1, [pc, #220]	; (801abc0 <HAL_GPIO_Init+0x2e8>)
 801aae4:	697b      	ldr	r3, [r7, #20]
 801aae6:	089b      	lsrs	r3, r3, #2
 801aae8:	3302      	adds	r3, #2
 801aaea:	693a      	ldr	r2, [r7, #16]
 801aaec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801aaf0:	4b39      	ldr	r3, [pc, #228]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801aaf2:	689b      	ldr	r3, [r3, #8]
 801aaf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801aaf6:	68fb      	ldr	r3, [r7, #12]
 801aaf8:	43db      	mvns	r3, r3
 801aafa:	693a      	ldr	r2, [r7, #16]
 801aafc:	4013      	ands	r3, r2
 801aafe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ab00:	683b      	ldr	r3, [r7, #0]
 801ab02:	685b      	ldr	r3, [r3, #4]
 801ab04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d003      	beq.n	801ab14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801ab0c:	693a      	ldr	r2, [r7, #16]
 801ab0e:	68fb      	ldr	r3, [r7, #12]
 801ab10:	4313      	orrs	r3, r2
 801ab12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801ab14:	4a30      	ldr	r2, [pc, #192]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab16:	693b      	ldr	r3, [r7, #16]
 801ab18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801ab1a:	4b2f      	ldr	r3, [pc, #188]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab1c:	68db      	ldr	r3, [r3, #12]
 801ab1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	43db      	mvns	r3, r3
 801ab24:	693a      	ldr	r2, [r7, #16]
 801ab26:	4013      	ands	r3, r2
 801ab28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ab2a:	683b      	ldr	r3, [r7, #0]
 801ab2c:	685b      	ldr	r3, [r3, #4]
 801ab2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d003      	beq.n	801ab3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801ab36:	693a      	ldr	r2, [r7, #16]
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	4313      	orrs	r3, r2
 801ab3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801ab3e:	4a26      	ldr	r2, [pc, #152]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab40:	693b      	ldr	r3, [r7, #16]
 801ab42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801ab44:	4b24      	ldr	r3, [pc, #144]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab46:	685b      	ldr	r3, [r3, #4]
 801ab48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab4a:	68fb      	ldr	r3, [r7, #12]
 801ab4c:	43db      	mvns	r3, r3
 801ab4e:	693a      	ldr	r2, [r7, #16]
 801ab50:	4013      	ands	r3, r2
 801ab52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	685b      	ldr	r3, [r3, #4]
 801ab58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d003      	beq.n	801ab68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801ab60:	693a      	ldr	r2, [r7, #16]
 801ab62:	68fb      	ldr	r3, [r7, #12]
 801ab64:	4313      	orrs	r3, r2
 801ab66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801ab68:	4a1b      	ldr	r2, [pc, #108]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab6a:	693b      	ldr	r3, [r7, #16]
 801ab6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801ab6e:	4b1a      	ldr	r3, [pc, #104]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab70:	681b      	ldr	r3, [r3, #0]
 801ab72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	43db      	mvns	r3, r3
 801ab78:	693a      	ldr	r2, [r7, #16]
 801ab7a:	4013      	ands	r3, r2
 801ab7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ab7e:	683b      	ldr	r3, [r7, #0]
 801ab80:	685b      	ldr	r3, [r3, #4]
 801ab82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d003      	beq.n	801ab92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801ab8a:	693a      	ldr	r2, [r7, #16]
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	4313      	orrs	r3, r2
 801ab90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801ab92:	4a11      	ldr	r2, [pc, #68]	; (801abd8 <HAL_GPIO_Init+0x300>)
 801ab94:	693b      	ldr	r3, [r7, #16]
 801ab96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801ab98:	697b      	ldr	r3, [r7, #20]
 801ab9a:	3301      	adds	r3, #1
 801ab9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	681a      	ldr	r2, [r3, #0]
 801aba2:	697b      	ldr	r3, [r7, #20]
 801aba4:	fa22 f303 	lsr.w	r3, r2, r3
 801aba8:	2b00      	cmp	r3, #0
 801abaa:	f47f ae9d 	bne.w	801a8e8 <HAL_GPIO_Init+0x10>
  }
}
 801abae:	bf00      	nop
 801abb0:	bf00      	nop
 801abb2:	371c      	adds	r7, #28
 801abb4:	46bd      	mov	sp, r7
 801abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abba:	4770      	bx	lr
 801abbc:	40021000 	.word	0x40021000
 801abc0:	40010000 	.word	0x40010000
 801abc4:	48000400 	.word	0x48000400
 801abc8:	48000800 	.word	0x48000800
 801abcc:	48000c00 	.word	0x48000c00
 801abd0:	48001000 	.word	0x48001000
 801abd4:	48001400 	.word	0x48001400
 801abd8:	40010400 	.word	0x40010400

0801abdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801abdc:	b480      	push	{r7}
 801abde:	b083      	sub	sp, #12
 801abe0:	af00      	add	r7, sp, #0
 801abe2:	6078      	str	r0, [r7, #4]
 801abe4:	460b      	mov	r3, r1
 801abe6:	807b      	strh	r3, [r7, #2]
 801abe8:	4613      	mov	r3, r2
 801abea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801abec:	787b      	ldrb	r3, [r7, #1]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d003      	beq.n	801abfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801abf2:	887a      	ldrh	r2, [r7, #2]
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801abf8:	e002      	b.n	801ac00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801abfa:	887a      	ldrh	r2, [r7, #2]
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ac00:	bf00      	nop
 801ac02:	370c      	adds	r7, #12
 801ac04:	46bd      	mov	sp, r7
 801ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac0a:	4770      	bx	lr

0801ac0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ac0c:	b480      	push	{r7}
 801ac0e:	b085      	sub	sp, #20
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801ac14:	687b      	ldr	r3, [r7, #4]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d141      	bne.n	801ac9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ac1a:	4b4b      	ldr	r3, [pc, #300]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ac22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac26:	d131      	bne.n	801ac8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ac28:	4b47      	ldr	r3, [pc, #284]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ac2e:	4a46      	ldr	r2, [pc, #280]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ac34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801ac38:	4b43      	ldr	r3, [pc, #268]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ac40:	4a41      	ldr	r2, [pc, #260]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ac46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ac48:	4b40      	ldr	r3, [pc, #256]	; (801ad4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	2232      	movs	r2, #50	; 0x32
 801ac4e:	fb02 f303 	mul.w	r3, r2, r3
 801ac52:	4a3f      	ldr	r2, [pc, #252]	; (801ad50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801ac54:	fba2 2303 	umull	r2, r3, r2, r3
 801ac58:	0c9b      	lsrs	r3, r3, #18
 801ac5a:	3301      	adds	r3, #1
 801ac5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ac5e:	e002      	b.n	801ac66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801ac60:	68fb      	ldr	r3, [r7, #12]
 801ac62:	3b01      	subs	r3, #1
 801ac64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ac66:	4b38      	ldr	r3, [pc, #224]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac68:	695b      	ldr	r3, [r3, #20]
 801ac6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac72:	d102      	bne.n	801ac7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 801ac74:	68fb      	ldr	r3, [r7, #12]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d1f2      	bne.n	801ac60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ac7a:	4b33      	ldr	r3, [pc, #204]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac7c:	695b      	ldr	r3, [r3, #20]
 801ac7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ac86:	d158      	bne.n	801ad3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801ac88:	2303      	movs	r3, #3
 801ac8a:	e057      	b.n	801ad3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ac8c:	4b2e      	ldr	r3, [pc, #184]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ac92:	4a2d      	ldr	r2, [pc, #180]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ac94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ac98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801ac9c:	e04d      	b.n	801ad3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aca4:	d141      	bne.n	801ad2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801aca6:	4b28      	ldr	r3, [pc, #160]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801acae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801acb2:	d131      	bne.n	801ad18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801acb4:	4b24      	ldr	r3, [pc, #144]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801acba:	4a23      	ldr	r2, [pc, #140]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801acc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801acc4:	4b20      	ldr	r3, [pc, #128]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801accc:	4a1e      	ldr	r2, [pc, #120]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801acd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801acd4:	4b1d      	ldr	r3, [pc, #116]	; (801ad4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	2232      	movs	r2, #50	; 0x32
 801acda:	fb02 f303 	mul.w	r3, r2, r3
 801acde:	4a1c      	ldr	r2, [pc, #112]	; (801ad50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801ace0:	fba2 2303 	umull	r2, r3, r2, r3
 801ace4:	0c9b      	lsrs	r3, r3, #18
 801ace6:	3301      	adds	r3, #1
 801ace8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801acea:	e002      	b.n	801acf2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	3b01      	subs	r3, #1
 801acf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801acf2:	4b15      	ldr	r3, [pc, #84]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801acf4:	695b      	ldr	r3, [r3, #20]
 801acf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801acfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801acfe:	d102      	bne.n	801ad06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	2b00      	cmp	r3, #0
 801ad04:	d1f2      	bne.n	801acec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ad06:	4b10      	ldr	r3, [pc, #64]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad08:	695b      	ldr	r3, [r3, #20]
 801ad0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ad0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ad12:	d112      	bne.n	801ad3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801ad14:	2303      	movs	r3, #3
 801ad16:	e011      	b.n	801ad3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ad18:	4b0b      	ldr	r3, [pc, #44]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ad1e:	4a0a      	ldr	r2, [pc, #40]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ad24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801ad28:	e007      	b.n	801ad3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801ad2a:	4b07      	ldr	r3, [pc, #28]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ad32:	4a05      	ldr	r2, [pc, #20]	; (801ad48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ad34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801ad38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801ad3a:	2300      	movs	r3, #0
}
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3714      	adds	r7, #20
 801ad40:	46bd      	mov	sp, r7
 801ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad46:	4770      	bx	lr
 801ad48:	40007000 	.word	0x40007000
 801ad4c:	20000000 	.word	0x20000000
 801ad50:	431bde83 	.word	0x431bde83

0801ad54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801ad54:	b480      	push	{r7}
 801ad56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801ad58:	4b05      	ldr	r3, [pc, #20]	; (801ad70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801ad5a:	689b      	ldr	r3, [r3, #8]
 801ad5c:	4a04      	ldr	r2, [pc, #16]	; (801ad70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801ad5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801ad62:	6093      	str	r3, [r2, #8]
}
 801ad64:	bf00      	nop
 801ad66:	46bd      	mov	sp, r7
 801ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6c:	4770      	bx	lr
 801ad6e:	bf00      	nop
 801ad70:	40007000 	.word	0x40007000

0801ad74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ad74:	b580      	push	{r7, lr}
 801ad76:	b088      	sub	sp, #32
 801ad78:	af00      	add	r7, sp, #0
 801ad7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d101      	bne.n	801ad86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801ad82:	2301      	movs	r3, #1
 801ad84:	e306      	b.n	801b394 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	681b      	ldr	r3, [r3, #0]
 801ad8a:	f003 0301 	and.w	r3, r3, #1
 801ad8e:	2b00      	cmp	r3, #0
 801ad90:	d075      	beq.n	801ae7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ad92:	4b97      	ldr	r3, [pc, #604]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ad94:	689b      	ldr	r3, [r3, #8]
 801ad96:	f003 030c 	and.w	r3, r3, #12
 801ad9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ad9c:	4b94      	ldr	r3, [pc, #592]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ad9e:	68db      	ldr	r3, [r3, #12]
 801ada0:	f003 0303 	and.w	r3, r3, #3
 801ada4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801ada6:	69bb      	ldr	r3, [r7, #24]
 801ada8:	2b0c      	cmp	r3, #12
 801adaa:	d102      	bne.n	801adb2 <HAL_RCC_OscConfig+0x3e>
 801adac:	697b      	ldr	r3, [r7, #20]
 801adae:	2b03      	cmp	r3, #3
 801adb0:	d002      	beq.n	801adb8 <HAL_RCC_OscConfig+0x44>
 801adb2:	69bb      	ldr	r3, [r7, #24]
 801adb4:	2b08      	cmp	r3, #8
 801adb6:	d10b      	bne.n	801add0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801adb8:	4b8d      	ldr	r3, [pc, #564]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d05b      	beq.n	801ae7c <HAL_RCC_OscConfig+0x108>
 801adc4:	687b      	ldr	r3, [r7, #4]
 801adc6:	685b      	ldr	r3, [r3, #4]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d157      	bne.n	801ae7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801adcc:	2301      	movs	r3, #1
 801adce:	e2e1      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	685b      	ldr	r3, [r3, #4]
 801add4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801add8:	d106      	bne.n	801ade8 <HAL_RCC_OscConfig+0x74>
 801adda:	4b85      	ldr	r3, [pc, #532]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801addc:	681b      	ldr	r3, [r3, #0]
 801adde:	4a84      	ldr	r2, [pc, #528]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ade0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ade4:	6013      	str	r3, [r2, #0]
 801ade6:	e01d      	b.n	801ae24 <HAL_RCC_OscConfig+0xb0>
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	685b      	ldr	r3, [r3, #4]
 801adec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801adf0:	d10c      	bne.n	801ae0c <HAL_RCC_OscConfig+0x98>
 801adf2:	4b7f      	ldr	r3, [pc, #508]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	4a7e      	ldr	r2, [pc, #504]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801adf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801adfc:	6013      	str	r3, [r2, #0]
 801adfe:	4b7c      	ldr	r3, [pc, #496]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a7b      	ldr	r2, [pc, #492]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ae08:	6013      	str	r3, [r2, #0]
 801ae0a:	e00b      	b.n	801ae24 <HAL_RCC_OscConfig+0xb0>
 801ae0c:	4b78      	ldr	r3, [pc, #480]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	4a77      	ldr	r2, [pc, #476]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ae16:	6013      	str	r3, [r2, #0]
 801ae18:	4b75      	ldr	r3, [pc, #468]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	4a74      	ldr	r2, [pc, #464]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ae22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	685b      	ldr	r3, [r3, #4]
 801ae28:	2b00      	cmp	r3, #0
 801ae2a:	d013      	beq.n	801ae54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae2c:	f7fc fd0e 	bl	801784c <HAL_GetTick>
 801ae30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801ae32:	e008      	b.n	801ae46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ae34:	f7fc fd0a 	bl	801784c <HAL_GetTick>
 801ae38:	4602      	mov	r2, r0
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	1ad3      	subs	r3, r2, r3
 801ae3e:	2b64      	cmp	r3, #100	; 0x64
 801ae40:	d901      	bls.n	801ae46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801ae42:	2303      	movs	r3, #3
 801ae44:	e2a6      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801ae46:	4b6a      	ldr	r3, [pc, #424]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d0f0      	beq.n	801ae34 <HAL_RCC_OscConfig+0xc0>
 801ae52:	e014      	b.n	801ae7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ae54:	f7fc fcfa 	bl	801784c <HAL_GetTick>
 801ae58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ae5a:	e008      	b.n	801ae6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801ae5c:	f7fc fcf6 	bl	801784c <HAL_GetTick>
 801ae60:	4602      	mov	r2, r0
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	1ad3      	subs	r3, r2, r3
 801ae66:	2b64      	cmp	r3, #100	; 0x64
 801ae68:	d901      	bls.n	801ae6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801ae6a:	2303      	movs	r3, #3
 801ae6c:	e292      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801ae6e:	4b60      	ldr	r3, [pc, #384]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	d1f0      	bne.n	801ae5c <HAL_RCC_OscConfig+0xe8>
 801ae7a:	e000      	b.n	801ae7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ae7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	f003 0302 	and.w	r3, r3, #2
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d075      	beq.n	801af76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ae8a:	4b59      	ldr	r3, [pc, #356]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae8c:	689b      	ldr	r3, [r3, #8]
 801ae8e:	f003 030c 	and.w	r3, r3, #12
 801ae92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801ae94:	4b56      	ldr	r3, [pc, #344]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801ae96:	68db      	ldr	r3, [r3, #12]
 801ae98:	f003 0303 	and.w	r3, r3, #3
 801ae9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801ae9e:	69bb      	ldr	r3, [r7, #24]
 801aea0:	2b0c      	cmp	r3, #12
 801aea2:	d102      	bne.n	801aeaa <HAL_RCC_OscConfig+0x136>
 801aea4:	697b      	ldr	r3, [r7, #20]
 801aea6:	2b02      	cmp	r3, #2
 801aea8:	d002      	beq.n	801aeb0 <HAL_RCC_OscConfig+0x13c>
 801aeaa:	69bb      	ldr	r3, [r7, #24]
 801aeac:	2b04      	cmp	r3, #4
 801aeae:	d11f      	bne.n	801aef0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801aeb0:	4b4f      	ldr	r3, [pc, #316]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	d005      	beq.n	801aec8 <HAL_RCC_OscConfig+0x154>
 801aebc:	687b      	ldr	r3, [r7, #4]
 801aebe:	68db      	ldr	r3, [r3, #12]
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d101      	bne.n	801aec8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801aec4:	2301      	movs	r3, #1
 801aec6:	e265      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801aec8:	4b49      	ldr	r3, [pc, #292]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801aeca:	685b      	ldr	r3, [r3, #4]
 801aecc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	691b      	ldr	r3, [r3, #16]
 801aed4:	061b      	lsls	r3, r3, #24
 801aed6:	4946      	ldr	r1, [pc, #280]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801aed8:	4313      	orrs	r3, r2
 801aeda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801aedc:	4b45      	ldr	r3, [pc, #276]	; (801aff4 <HAL_RCC_OscConfig+0x280>)
 801aede:	681b      	ldr	r3, [r3, #0]
 801aee0:	4618      	mov	r0, r3
 801aee2:	f7fc fc67 	bl	80177b4 <HAL_InitTick>
 801aee6:	4603      	mov	r3, r0
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d043      	beq.n	801af74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801aeec:	2301      	movs	r3, #1
 801aeee:	e251      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	68db      	ldr	r3, [r3, #12]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d023      	beq.n	801af40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801aef8:	4b3d      	ldr	r3, [pc, #244]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	4a3c      	ldr	r2, [pc, #240]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801aefe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801af02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af04:	f7fc fca2 	bl	801784c <HAL_GetTick>
 801af08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801af0a:	e008      	b.n	801af1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801af0c:	f7fc fc9e 	bl	801784c <HAL_GetTick>
 801af10:	4602      	mov	r2, r0
 801af12:	693b      	ldr	r3, [r7, #16]
 801af14:	1ad3      	subs	r3, r2, r3
 801af16:	2b02      	cmp	r3, #2
 801af18:	d901      	bls.n	801af1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801af1a:	2303      	movs	r3, #3
 801af1c:	e23a      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801af1e:	4b34      	ldr	r3, [pc, #208]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af26:	2b00      	cmp	r3, #0
 801af28:	d0f0      	beq.n	801af0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801af2a:	4b31      	ldr	r3, [pc, #196]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af2c:	685b      	ldr	r3, [r3, #4]
 801af2e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	691b      	ldr	r3, [r3, #16]
 801af36:	061b      	lsls	r3, r3, #24
 801af38:	492d      	ldr	r1, [pc, #180]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af3a:	4313      	orrs	r3, r2
 801af3c:	604b      	str	r3, [r1, #4]
 801af3e:	e01a      	b.n	801af76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801af40:	4b2b      	ldr	r3, [pc, #172]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	4a2a      	ldr	r2, [pc, #168]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801af4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af4c:	f7fc fc7e 	bl	801784c <HAL_GetTick>
 801af50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801af52:	e008      	b.n	801af66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801af54:	f7fc fc7a 	bl	801784c <HAL_GetTick>
 801af58:	4602      	mov	r2, r0
 801af5a:	693b      	ldr	r3, [r7, #16]
 801af5c:	1ad3      	subs	r3, r2, r3
 801af5e:	2b02      	cmp	r3, #2
 801af60:	d901      	bls.n	801af66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801af62:	2303      	movs	r3, #3
 801af64:	e216      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801af66:	4b22      	ldr	r3, [pc, #136]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801af6e:	2b00      	cmp	r3, #0
 801af70:	d1f0      	bne.n	801af54 <HAL_RCC_OscConfig+0x1e0>
 801af72:	e000      	b.n	801af76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801af74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801af76:	687b      	ldr	r3, [r7, #4]
 801af78:	681b      	ldr	r3, [r3, #0]
 801af7a:	f003 0308 	and.w	r3, r3, #8
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d041      	beq.n	801b006 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	695b      	ldr	r3, [r3, #20]
 801af86:	2b00      	cmp	r3, #0
 801af88:	d01c      	beq.n	801afc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801af8a:	4b19      	ldr	r3, [pc, #100]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801af90:	4a17      	ldr	r2, [pc, #92]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801af92:	f043 0301 	orr.w	r3, r3, #1
 801af96:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801af9a:	f7fc fc57 	bl	801784c <HAL_GetTick>
 801af9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801afa0:	e008      	b.n	801afb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801afa2:	f7fc fc53 	bl	801784c <HAL_GetTick>
 801afa6:	4602      	mov	r2, r0
 801afa8:	693b      	ldr	r3, [r7, #16]
 801afaa:	1ad3      	subs	r3, r2, r3
 801afac:	2b02      	cmp	r3, #2
 801afae:	d901      	bls.n	801afb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801afb0:	2303      	movs	r3, #3
 801afb2:	e1ef      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801afb4:	4b0e      	ldr	r3, [pc, #56]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801afb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801afba:	f003 0302 	and.w	r3, r3, #2
 801afbe:	2b00      	cmp	r3, #0
 801afc0:	d0ef      	beq.n	801afa2 <HAL_RCC_OscConfig+0x22e>
 801afc2:	e020      	b.n	801b006 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801afc4:	4b0a      	ldr	r3, [pc, #40]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801afc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801afca:	4a09      	ldr	r2, [pc, #36]	; (801aff0 <HAL_RCC_OscConfig+0x27c>)
 801afcc:	f023 0301 	bic.w	r3, r3, #1
 801afd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801afd4:	f7fc fc3a 	bl	801784c <HAL_GetTick>
 801afd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801afda:	e00d      	b.n	801aff8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801afdc:	f7fc fc36 	bl	801784c <HAL_GetTick>
 801afe0:	4602      	mov	r2, r0
 801afe2:	693b      	ldr	r3, [r7, #16]
 801afe4:	1ad3      	subs	r3, r2, r3
 801afe6:	2b02      	cmp	r3, #2
 801afe8:	d906      	bls.n	801aff8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801afea:	2303      	movs	r3, #3
 801afec:	e1d2      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
 801afee:	bf00      	nop
 801aff0:	40021000 	.word	0x40021000
 801aff4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801aff8:	4b8c      	ldr	r3, [pc, #560]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801affa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801affe:	f003 0302 	and.w	r3, r3, #2
 801b002:	2b00      	cmp	r3, #0
 801b004:	d1ea      	bne.n	801afdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	f003 0304 	and.w	r3, r3, #4
 801b00e:	2b00      	cmp	r3, #0
 801b010:	f000 80a6 	beq.w	801b160 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b014:	2300      	movs	r3, #0
 801b016:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801b018:	4b84      	ldr	r3, [pc, #528]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b01a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b01c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b020:	2b00      	cmp	r3, #0
 801b022:	d101      	bne.n	801b028 <HAL_RCC_OscConfig+0x2b4>
 801b024:	2301      	movs	r3, #1
 801b026:	e000      	b.n	801b02a <HAL_RCC_OscConfig+0x2b6>
 801b028:	2300      	movs	r3, #0
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d00d      	beq.n	801b04a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b02e:	4b7f      	ldr	r3, [pc, #508]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b032:	4a7e      	ldr	r2, [pc, #504]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b038:	6593      	str	r3, [r2, #88]	; 0x58
 801b03a:	4b7c      	ldr	r3, [pc, #496]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b03c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b03e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b042:	60fb      	str	r3, [r7, #12]
 801b044:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801b046:	2301      	movs	r3, #1
 801b048:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b04a:	4b79      	ldr	r3, [pc, #484]	; (801b230 <HAL_RCC_OscConfig+0x4bc>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b052:	2b00      	cmp	r3, #0
 801b054:	d118      	bne.n	801b088 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b056:	4b76      	ldr	r3, [pc, #472]	; (801b230 <HAL_RCC_OscConfig+0x4bc>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	4a75      	ldr	r2, [pc, #468]	; (801b230 <HAL_RCC_OscConfig+0x4bc>)
 801b05c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801b062:	f7fc fbf3 	bl	801784c <HAL_GetTick>
 801b066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b068:	e008      	b.n	801b07c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b06a:	f7fc fbef 	bl	801784c <HAL_GetTick>
 801b06e:	4602      	mov	r2, r0
 801b070:	693b      	ldr	r3, [r7, #16]
 801b072:	1ad3      	subs	r3, r2, r3
 801b074:	2b02      	cmp	r3, #2
 801b076:	d901      	bls.n	801b07c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801b078:	2303      	movs	r3, #3
 801b07a:	e18b      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801b07c:	4b6c      	ldr	r3, [pc, #432]	; (801b230 <HAL_RCC_OscConfig+0x4bc>)
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b084:	2b00      	cmp	r3, #0
 801b086:	d0f0      	beq.n	801b06a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	689b      	ldr	r3, [r3, #8]
 801b08c:	2b01      	cmp	r3, #1
 801b08e:	d108      	bne.n	801b0a2 <HAL_RCC_OscConfig+0x32e>
 801b090:	4b66      	ldr	r3, [pc, #408]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b096:	4a65      	ldr	r2, [pc, #404]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b098:	f043 0301 	orr.w	r3, r3, #1
 801b09c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0a0:	e024      	b.n	801b0ec <HAL_RCC_OscConfig+0x378>
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	689b      	ldr	r3, [r3, #8]
 801b0a6:	2b05      	cmp	r3, #5
 801b0a8:	d110      	bne.n	801b0cc <HAL_RCC_OscConfig+0x358>
 801b0aa:	4b60      	ldr	r3, [pc, #384]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0b0:	4a5e      	ldr	r2, [pc, #376]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0b2:	f043 0304 	orr.w	r3, r3, #4
 801b0b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0ba:	4b5c      	ldr	r3, [pc, #368]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0c0:	4a5a      	ldr	r2, [pc, #360]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0c2:	f043 0301 	orr.w	r3, r3, #1
 801b0c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0ca:	e00f      	b.n	801b0ec <HAL_RCC_OscConfig+0x378>
 801b0cc:	4b57      	ldr	r3, [pc, #348]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0d2:	4a56      	ldr	r2, [pc, #344]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0d4:	f023 0301 	bic.w	r3, r3, #1
 801b0d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801b0dc:	4b53      	ldr	r3, [pc, #332]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b0e2:	4a52      	ldr	r2, [pc, #328]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b0e4:	f023 0304 	bic.w	r3, r3, #4
 801b0e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	689b      	ldr	r3, [r3, #8]
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	d016      	beq.n	801b122 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b0f4:	f7fc fbaa 	bl	801784c <HAL_GetTick>
 801b0f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b0fa:	e00a      	b.n	801b112 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b0fc:	f7fc fba6 	bl	801784c <HAL_GetTick>
 801b100:	4602      	mov	r2, r0
 801b102:	693b      	ldr	r3, [r7, #16]
 801b104:	1ad3      	subs	r3, r2, r3
 801b106:	f241 3288 	movw	r2, #5000	; 0x1388
 801b10a:	4293      	cmp	r3, r2
 801b10c:	d901      	bls.n	801b112 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801b10e:	2303      	movs	r3, #3
 801b110:	e140      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b112:	4b46      	ldr	r3, [pc, #280]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b118:	f003 0302 	and.w	r3, r3, #2
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d0ed      	beq.n	801b0fc <HAL_RCC_OscConfig+0x388>
 801b120:	e015      	b.n	801b14e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b122:	f7fc fb93 	bl	801784c <HAL_GetTick>
 801b126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b128:	e00a      	b.n	801b140 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b12a:	f7fc fb8f 	bl	801784c <HAL_GetTick>
 801b12e:	4602      	mov	r2, r0
 801b130:	693b      	ldr	r3, [r7, #16]
 801b132:	1ad3      	subs	r3, r2, r3
 801b134:	f241 3288 	movw	r2, #5000	; 0x1388
 801b138:	4293      	cmp	r3, r2
 801b13a:	d901      	bls.n	801b140 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801b13c:	2303      	movs	r3, #3
 801b13e:	e129      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801b140:	4b3a      	ldr	r3, [pc, #232]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b146:	f003 0302 	and.w	r3, r3, #2
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d1ed      	bne.n	801b12a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801b14e:	7ffb      	ldrb	r3, [r7, #31]
 801b150:	2b01      	cmp	r3, #1
 801b152:	d105      	bne.n	801b160 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b154:	4b35      	ldr	r3, [pc, #212]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b158:	4a34      	ldr	r2, [pc, #208]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b15a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b15e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	f003 0320 	and.w	r3, r3, #32
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d03c      	beq.n	801b1e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	699b      	ldr	r3, [r3, #24]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d01c      	beq.n	801b1ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b174:	4b2d      	ldr	r3, [pc, #180]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b176:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b17a:	4a2c      	ldr	r2, [pc, #176]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b17c:	f043 0301 	orr.w	r3, r3, #1
 801b180:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b184:	f7fc fb62 	bl	801784c <HAL_GetTick>
 801b188:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b18a:	e008      	b.n	801b19e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b18c:	f7fc fb5e 	bl	801784c <HAL_GetTick>
 801b190:	4602      	mov	r2, r0
 801b192:	693b      	ldr	r3, [r7, #16]
 801b194:	1ad3      	subs	r3, r2, r3
 801b196:	2b02      	cmp	r3, #2
 801b198:	d901      	bls.n	801b19e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801b19a:	2303      	movs	r3, #3
 801b19c:	e0fa      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801b19e:	4b23      	ldr	r3, [pc, #140]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b1a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1a4:	f003 0302 	and.w	r3, r3, #2
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d0ef      	beq.n	801b18c <HAL_RCC_OscConfig+0x418>
 801b1ac:	e01b      	b.n	801b1e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b1ae:	4b1f      	ldr	r3, [pc, #124]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b1b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1b4:	4a1d      	ldr	r2, [pc, #116]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b1b6:	f023 0301 	bic.w	r3, r3, #1
 801b1ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b1be:	f7fc fb45 	bl	801784c <HAL_GetTick>
 801b1c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b1c4:	e008      	b.n	801b1d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b1c6:	f7fc fb41 	bl	801784c <HAL_GetTick>
 801b1ca:	4602      	mov	r2, r0
 801b1cc:	693b      	ldr	r3, [r7, #16]
 801b1ce:	1ad3      	subs	r3, r2, r3
 801b1d0:	2b02      	cmp	r3, #2
 801b1d2:	d901      	bls.n	801b1d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801b1d4:	2303      	movs	r3, #3
 801b1d6:	e0dd      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801b1d8:	4b14      	ldr	r3, [pc, #80]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b1da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1de:	f003 0302 	and.w	r3, r3, #2
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d1ef      	bne.n	801b1c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	69db      	ldr	r3, [r3, #28]
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	f000 80d1 	beq.w	801b392 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801b1f0:	4b0e      	ldr	r3, [pc, #56]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b1f2:	689b      	ldr	r3, [r3, #8]
 801b1f4:	f003 030c 	and.w	r3, r3, #12
 801b1f8:	2b0c      	cmp	r3, #12
 801b1fa:	f000 808b 	beq.w	801b314 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	69db      	ldr	r3, [r3, #28]
 801b202:	2b02      	cmp	r3, #2
 801b204:	d15e      	bne.n	801b2c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b206:	4b09      	ldr	r3, [pc, #36]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	4a08      	ldr	r2, [pc, #32]	; (801b22c <HAL_RCC_OscConfig+0x4b8>)
 801b20c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b212:	f7fc fb1b 	bl	801784c <HAL_GetTick>
 801b216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b218:	e00c      	b.n	801b234 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b21a:	f7fc fb17 	bl	801784c <HAL_GetTick>
 801b21e:	4602      	mov	r2, r0
 801b220:	693b      	ldr	r3, [r7, #16]
 801b222:	1ad3      	subs	r3, r2, r3
 801b224:	2b02      	cmp	r3, #2
 801b226:	d905      	bls.n	801b234 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801b228:	2303      	movs	r3, #3
 801b22a:	e0b3      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
 801b22c:	40021000 	.word	0x40021000
 801b230:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b234:	4b59      	ldr	r3, [pc, #356]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d1ec      	bne.n	801b21a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b240:	4b56      	ldr	r3, [pc, #344]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b242:	68da      	ldr	r2, [r3, #12]
 801b244:	4b56      	ldr	r3, [pc, #344]	; (801b3a0 <HAL_RCC_OscConfig+0x62c>)
 801b246:	4013      	ands	r3, r2
 801b248:	687a      	ldr	r2, [r7, #4]
 801b24a:	6a11      	ldr	r1, [r2, #32]
 801b24c:	687a      	ldr	r2, [r7, #4]
 801b24e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801b250:	3a01      	subs	r2, #1
 801b252:	0112      	lsls	r2, r2, #4
 801b254:	4311      	orrs	r1, r2
 801b256:	687a      	ldr	r2, [r7, #4]
 801b258:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801b25a:	0212      	lsls	r2, r2, #8
 801b25c:	4311      	orrs	r1, r2
 801b25e:	687a      	ldr	r2, [r7, #4]
 801b260:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801b262:	0852      	lsrs	r2, r2, #1
 801b264:	3a01      	subs	r2, #1
 801b266:	0552      	lsls	r2, r2, #21
 801b268:	4311      	orrs	r1, r2
 801b26a:	687a      	ldr	r2, [r7, #4]
 801b26c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801b26e:	0852      	lsrs	r2, r2, #1
 801b270:	3a01      	subs	r2, #1
 801b272:	0652      	lsls	r2, r2, #25
 801b274:	4311      	orrs	r1, r2
 801b276:	687a      	ldr	r2, [r7, #4]
 801b278:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b27a:	06d2      	lsls	r2, r2, #27
 801b27c:	430a      	orrs	r2, r1
 801b27e:	4947      	ldr	r1, [pc, #284]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b280:	4313      	orrs	r3, r2
 801b282:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b284:	4b45      	ldr	r3, [pc, #276]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	4a44      	ldr	r2, [pc, #272]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b28a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b28e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801b290:	4b42      	ldr	r3, [pc, #264]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b292:	68db      	ldr	r3, [r3, #12]
 801b294:	4a41      	ldr	r2, [pc, #260]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b29a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b29c:	f7fc fad6 	bl	801784c <HAL_GetTick>
 801b2a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b2a2:	e008      	b.n	801b2b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b2a4:	f7fc fad2 	bl	801784c <HAL_GetTick>
 801b2a8:	4602      	mov	r2, r0
 801b2aa:	693b      	ldr	r3, [r7, #16]
 801b2ac:	1ad3      	subs	r3, r2, r3
 801b2ae:	2b02      	cmp	r3, #2
 801b2b0:	d901      	bls.n	801b2b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801b2b2:	2303      	movs	r3, #3
 801b2b4:	e06e      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b2b6:	4b39      	ldr	r3, [pc, #228]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d0f0      	beq.n	801b2a4 <HAL_RCC_OscConfig+0x530>
 801b2c2:	e066      	b.n	801b392 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b2c4:	4b35      	ldr	r3, [pc, #212]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	4a34      	ldr	r2, [pc, #208]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b2ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801b2d0:	4b32      	ldr	r3, [pc, #200]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2d2:	68db      	ldr	r3, [r3, #12]
 801b2d4:	4a31      	ldr	r2, [pc, #196]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2d6:	f023 0303 	bic.w	r3, r3, #3
 801b2da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801b2dc:	4b2f      	ldr	r3, [pc, #188]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2de:	68db      	ldr	r3, [r3, #12]
 801b2e0:	4a2e      	ldr	r2, [pc, #184]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b2e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801b2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b2ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b2ec:	f7fc faae 	bl	801784c <HAL_GetTick>
 801b2f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b2f2:	e008      	b.n	801b306 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b2f4:	f7fc faaa 	bl	801784c <HAL_GetTick>
 801b2f8:	4602      	mov	r2, r0
 801b2fa:	693b      	ldr	r3, [r7, #16]
 801b2fc:	1ad3      	subs	r3, r2, r3
 801b2fe:	2b02      	cmp	r3, #2
 801b300:	d901      	bls.n	801b306 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801b302:	2303      	movs	r3, #3
 801b304:	e046      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801b306:	4b25      	ldr	r3, [pc, #148]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d1f0      	bne.n	801b2f4 <HAL_RCC_OscConfig+0x580>
 801b312:	e03e      	b.n	801b392 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	69db      	ldr	r3, [r3, #28]
 801b318:	2b01      	cmp	r3, #1
 801b31a:	d101      	bne.n	801b320 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801b31c:	2301      	movs	r3, #1
 801b31e:	e039      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801b320:	4b1e      	ldr	r3, [pc, #120]	; (801b39c <HAL_RCC_OscConfig+0x628>)
 801b322:	68db      	ldr	r3, [r3, #12]
 801b324:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b326:	697b      	ldr	r3, [r7, #20]
 801b328:	f003 0203 	and.w	r2, r3, #3
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	6a1b      	ldr	r3, [r3, #32]
 801b330:	429a      	cmp	r2, r3
 801b332:	d12c      	bne.n	801b38e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b334:	697b      	ldr	r3, [r7, #20]
 801b336:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b33e:	3b01      	subs	r3, #1
 801b340:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b342:	429a      	cmp	r2, r3
 801b344:	d123      	bne.n	801b38e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b346:	697b      	ldr	r3, [r7, #20]
 801b348:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801b34c:	687b      	ldr	r3, [r7, #4]
 801b34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b350:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801b352:	429a      	cmp	r2, r3
 801b354:	d11b      	bne.n	801b38e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b356:	697b      	ldr	r3, [r7, #20]
 801b358:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b360:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801b362:	429a      	cmp	r2, r3
 801b364:	d113      	bne.n	801b38e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b366:	697b      	ldr	r3, [r7, #20]
 801b368:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b370:	085b      	lsrs	r3, r3, #1
 801b372:	3b01      	subs	r3, #1
 801b374:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801b376:	429a      	cmp	r2, r3
 801b378:	d109      	bne.n	801b38e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801b37a:	697b      	ldr	r3, [r7, #20]
 801b37c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b384:	085b      	lsrs	r3, r3, #1
 801b386:	3b01      	subs	r3, #1
 801b388:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801b38a:	429a      	cmp	r2, r3
 801b38c:	d001      	beq.n	801b392 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801b38e:	2301      	movs	r3, #1
 801b390:	e000      	b.n	801b394 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801b392:	2300      	movs	r3, #0
}
 801b394:	4618      	mov	r0, r3
 801b396:	3720      	adds	r7, #32
 801b398:	46bd      	mov	sp, r7
 801b39a:	bd80      	pop	{r7, pc}
 801b39c:	40021000 	.word	0x40021000
 801b3a0:	019f800c 	.word	0x019f800c

0801b3a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b3a4:	b580      	push	{r7, lr}
 801b3a6:	b086      	sub	sp, #24
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
 801b3ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801b3ae:	2300      	movs	r3, #0
 801b3b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d101      	bne.n	801b3bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801b3b8:	2301      	movs	r3, #1
 801b3ba:	e11e      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b3bc:	4b91      	ldr	r3, [pc, #580]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b3be:	681b      	ldr	r3, [r3, #0]
 801b3c0:	f003 030f 	and.w	r3, r3, #15
 801b3c4:	683a      	ldr	r2, [r7, #0]
 801b3c6:	429a      	cmp	r2, r3
 801b3c8:	d910      	bls.n	801b3ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b3ca:	4b8e      	ldr	r3, [pc, #568]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	f023 020f 	bic.w	r2, r3, #15
 801b3d2:	498c      	ldr	r1, [pc, #560]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b3d4:	683b      	ldr	r3, [r7, #0]
 801b3d6:	4313      	orrs	r3, r2
 801b3d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b3da:	4b8a      	ldr	r3, [pc, #552]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	f003 030f 	and.w	r3, r3, #15
 801b3e2:	683a      	ldr	r2, [r7, #0]
 801b3e4:	429a      	cmp	r2, r3
 801b3e6:	d001      	beq.n	801b3ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801b3e8:	2301      	movs	r3, #1
 801b3ea:	e106      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	f003 0301 	and.w	r3, r3, #1
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d073      	beq.n	801b4e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b3f8:	687b      	ldr	r3, [r7, #4]
 801b3fa:	685b      	ldr	r3, [r3, #4]
 801b3fc:	2b03      	cmp	r3, #3
 801b3fe:	d129      	bne.n	801b454 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801b400:	4b81      	ldr	r3, [pc, #516]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d101      	bne.n	801b410 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801b40c:	2301      	movs	r3, #1
 801b40e:	e0f4      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801b410:	f000 f99c 	bl	801b74c <RCC_GetSysClockFreqFromPLLSource>
 801b414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801b416:	693b      	ldr	r3, [r7, #16]
 801b418:	4a7c      	ldr	r2, [pc, #496]	; (801b60c <HAL_RCC_ClockConfig+0x268>)
 801b41a:	4293      	cmp	r3, r2
 801b41c:	d93f      	bls.n	801b49e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b41e:	4b7a      	ldr	r3, [pc, #488]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b420:	689b      	ldr	r3, [r3, #8]
 801b422:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b426:	2b00      	cmp	r3, #0
 801b428:	d009      	beq.n	801b43e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801b432:	2b00      	cmp	r3, #0
 801b434:	d033      	beq.n	801b49e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801b436:	687b      	ldr	r3, [r7, #4]
 801b438:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d12f      	bne.n	801b49e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b43e:	4b72      	ldr	r3, [pc, #456]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b440:	689b      	ldr	r3, [r3, #8]
 801b442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b446:	4a70      	ldr	r2, [pc, #448]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b44c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801b44e:	2380      	movs	r3, #128	; 0x80
 801b450:	617b      	str	r3, [r7, #20]
 801b452:	e024      	b.n	801b49e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b454:	687b      	ldr	r3, [r7, #4]
 801b456:	685b      	ldr	r3, [r3, #4]
 801b458:	2b02      	cmp	r3, #2
 801b45a:	d107      	bne.n	801b46c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801b45c:	4b6a      	ldr	r3, [pc, #424]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b464:	2b00      	cmp	r3, #0
 801b466:	d109      	bne.n	801b47c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b468:	2301      	movs	r3, #1
 801b46a:	e0c6      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801b46c:	4b66      	ldr	r3, [pc, #408]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b474:	2b00      	cmp	r3, #0
 801b476:	d101      	bne.n	801b47c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801b478:	2301      	movs	r3, #1
 801b47a:	e0be      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801b47c:	f000 f8ce 	bl	801b61c <HAL_RCC_GetSysClockFreq>
 801b480:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801b482:	693b      	ldr	r3, [r7, #16]
 801b484:	4a61      	ldr	r2, [pc, #388]	; (801b60c <HAL_RCC_ClockConfig+0x268>)
 801b486:	4293      	cmp	r3, r2
 801b488:	d909      	bls.n	801b49e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801b48a:	4b5f      	ldr	r3, [pc, #380]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b48c:	689b      	ldr	r3, [r3, #8]
 801b48e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b492:	4a5d      	ldr	r2, [pc, #372]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b498:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801b49a:	2380      	movs	r3, #128	; 0x80
 801b49c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b49e:	4b5a      	ldr	r3, [pc, #360]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b4a0:	689b      	ldr	r3, [r3, #8]
 801b4a2:	f023 0203 	bic.w	r2, r3, #3
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	685b      	ldr	r3, [r3, #4]
 801b4aa:	4957      	ldr	r1, [pc, #348]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b4ac:	4313      	orrs	r3, r2
 801b4ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b4b0:	f7fc f9cc 	bl	801784c <HAL_GetTick>
 801b4b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b4b6:	e00a      	b.n	801b4ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b4b8:	f7fc f9c8 	bl	801784c <HAL_GetTick>
 801b4bc:	4602      	mov	r2, r0
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	1ad3      	subs	r3, r2, r3
 801b4c2:	f241 3288 	movw	r2, #5000	; 0x1388
 801b4c6:	4293      	cmp	r3, r2
 801b4c8:	d901      	bls.n	801b4ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801b4ca:	2303      	movs	r3, #3
 801b4cc:	e095      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b4ce:	4b4e      	ldr	r3, [pc, #312]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b4d0:	689b      	ldr	r3, [r3, #8]
 801b4d2:	f003 020c 	and.w	r2, r3, #12
 801b4d6:	687b      	ldr	r3, [r7, #4]
 801b4d8:	685b      	ldr	r3, [r3, #4]
 801b4da:	009b      	lsls	r3, r3, #2
 801b4dc:	429a      	cmp	r2, r3
 801b4de:	d1eb      	bne.n	801b4b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	f003 0302 	and.w	r3, r3, #2
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d023      	beq.n	801b534 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	f003 0304 	and.w	r3, r3, #4
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d005      	beq.n	801b504 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801b4f8:	4b43      	ldr	r3, [pc, #268]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b4fa:	689b      	ldr	r3, [r3, #8]
 801b4fc:	4a42      	ldr	r2, [pc, #264]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b4fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b502:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	f003 0308 	and.w	r3, r3, #8
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d007      	beq.n	801b520 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801b510:	4b3d      	ldr	r3, [pc, #244]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b512:	689b      	ldr	r3, [r3, #8]
 801b514:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801b518:	4a3b      	ldr	r2, [pc, #236]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b51a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801b51e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b520:	4b39      	ldr	r3, [pc, #228]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b522:	689b      	ldr	r3, [r3, #8]
 801b524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	689b      	ldr	r3, [r3, #8]
 801b52c:	4936      	ldr	r1, [pc, #216]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b52e:	4313      	orrs	r3, r2
 801b530:	608b      	str	r3, [r1, #8]
 801b532:	e008      	b.n	801b546 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801b534:	697b      	ldr	r3, [r7, #20]
 801b536:	2b80      	cmp	r3, #128	; 0x80
 801b538:	d105      	bne.n	801b546 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801b53a:	4b33      	ldr	r3, [pc, #204]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b53c:	689b      	ldr	r3, [r3, #8]
 801b53e:	4a32      	ldr	r2, [pc, #200]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801b544:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b546:	4b2f      	ldr	r3, [pc, #188]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	f003 030f 	and.w	r3, r3, #15
 801b54e:	683a      	ldr	r2, [r7, #0]
 801b550:	429a      	cmp	r2, r3
 801b552:	d21d      	bcs.n	801b590 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b554:	4b2b      	ldr	r3, [pc, #172]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	f023 020f 	bic.w	r2, r3, #15
 801b55c:	4929      	ldr	r1, [pc, #164]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b55e:	683b      	ldr	r3, [r7, #0]
 801b560:	4313      	orrs	r3, r2
 801b562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801b564:	f7fc f972 	bl	801784c <HAL_GetTick>
 801b568:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b56a:	e00a      	b.n	801b582 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b56c:	f7fc f96e 	bl	801784c <HAL_GetTick>
 801b570:	4602      	mov	r2, r0
 801b572:	68fb      	ldr	r3, [r7, #12]
 801b574:	1ad3      	subs	r3, r2, r3
 801b576:	f241 3288 	movw	r2, #5000	; 0x1388
 801b57a:	4293      	cmp	r3, r2
 801b57c:	d901      	bls.n	801b582 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801b57e:	2303      	movs	r3, #3
 801b580:	e03b      	b.n	801b5fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b582:	4b20      	ldr	r3, [pc, #128]	; (801b604 <HAL_RCC_ClockConfig+0x260>)
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	f003 030f 	and.w	r3, r3, #15
 801b58a:	683a      	ldr	r2, [r7, #0]
 801b58c:	429a      	cmp	r2, r3
 801b58e:	d1ed      	bne.n	801b56c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	f003 0304 	and.w	r3, r3, #4
 801b598:	2b00      	cmp	r3, #0
 801b59a:	d008      	beq.n	801b5ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801b59c:	4b1a      	ldr	r3, [pc, #104]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b59e:	689b      	ldr	r3, [r3, #8]
 801b5a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	68db      	ldr	r3, [r3, #12]
 801b5a8:	4917      	ldr	r1, [pc, #92]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b5aa:	4313      	orrs	r3, r2
 801b5ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	681b      	ldr	r3, [r3, #0]
 801b5b2:	f003 0308 	and.w	r3, r3, #8
 801b5b6:	2b00      	cmp	r3, #0
 801b5b8:	d009      	beq.n	801b5ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801b5ba:	4b13      	ldr	r3, [pc, #76]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b5bc:	689b      	ldr	r3, [r3, #8]
 801b5be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	691b      	ldr	r3, [r3, #16]
 801b5c6:	00db      	lsls	r3, r3, #3
 801b5c8:	490f      	ldr	r1, [pc, #60]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b5ca:	4313      	orrs	r3, r2
 801b5cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801b5ce:	f000 f825 	bl	801b61c <HAL_RCC_GetSysClockFreq>
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	4b0c      	ldr	r3, [pc, #48]	; (801b608 <HAL_RCC_ClockConfig+0x264>)
 801b5d6:	689b      	ldr	r3, [r3, #8]
 801b5d8:	091b      	lsrs	r3, r3, #4
 801b5da:	f003 030f 	and.w	r3, r3, #15
 801b5de:	490c      	ldr	r1, [pc, #48]	; (801b610 <HAL_RCC_ClockConfig+0x26c>)
 801b5e0:	5ccb      	ldrb	r3, [r1, r3]
 801b5e2:	f003 031f 	and.w	r3, r3, #31
 801b5e6:	fa22 f303 	lsr.w	r3, r2, r3
 801b5ea:	4a0a      	ldr	r2, [pc, #40]	; (801b614 <HAL_RCC_ClockConfig+0x270>)
 801b5ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801b5ee:	4b0a      	ldr	r3, [pc, #40]	; (801b618 <HAL_RCC_ClockConfig+0x274>)
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	4618      	mov	r0, r3
 801b5f4:	f7fc f8de 	bl	80177b4 <HAL_InitTick>
 801b5f8:	4603      	mov	r3, r0
}
 801b5fa:	4618      	mov	r0, r3
 801b5fc:	3718      	adds	r7, #24
 801b5fe:	46bd      	mov	sp, r7
 801b600:	bd80      	pop	{r7, pc}
 801b602:	bf00      	nop
 801b604:	40022000 	.word	0x40022000
 801b608:	40021000 	.word	0x40021000
 801b60c:	04c4b400 	.word	0x04c4b400
 801b610:	08022118 	.word	0x08022118
 801b614:	20000000 	.word	0x20000000
 801b618:	20000004 	.word	0x20000004

0801b61c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b61c:	b480      	push	{r7}
 801b61e:	b087      	sub	sp, #28
 801b620:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801b622:	4b2c      	ldr	r3, [pc, #176]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b624:	689b      	ldr	r3, [r3, #8]
 801b626:	f003 030c 	and.w	r3, r3, #12
 801b62a:	2b04      	cmp	r3, #4
 801b62c:	d102      	bne.n	801b634 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801b62e:	4b2a      	ldr	r3, [pc, #168]	; (801b6d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b630:	613b      	str	r3, [r7, #16]
 801b632:	e047      	b.n	801b6c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801b634:	4b27      	ldr	r3, [pc, #156]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b636:	689b      	ldr	r3, [r3, #8]
 801b638:	f003 030c 	and.w	r3, r3, #12
 801b63c:	2b08      	cmp	r3, #8
 801b63e:	d102      	bne.n	801b646 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801b640:	4b25      	ldr	r3, [pc, #148]	; (801b6d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b642:	613b      	str	r3, [r7, #16]
 801b644:	e03e      	b.n	801b6c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801b646:	4b23      	ldr	r3, [pc, #140]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b648:	689b      	ldr	r3, [r3, #8]
 801b64a:	f003 030c 	and.w	r3, r3, #12
 801b64e:	2b0c      	cmp	r3, #12
 801b650:	d136      	bne.n	801b6c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b652:	4b20      	ldr	r3, [pc, #128]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b654:	68db      	ldr	r3, [r3, #12]
 801b656:	f003 0303 	and.w	r3, r3, #3
 801b65a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b65c:	4b1d      	ldr	r3, [pc, #116]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b65e:	68db      	ldr	r3, [r3, #12]
 801b660:	091b      	lsrs	r3, r3, #4
 801b662:	f003 030f 	and.w	r3, r3, #15
 801b666:	3301      	adds	r3, #1
 801b668:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801b66a:	68fb      	ldr	r3, [r7, #12]
 801b66c:	2b03      	cmp	r3, #3
 801b66e:	d10c      	bne.n	801b68a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b670:	4a19      	ldr	r2, [pc, #100]	; (801b6d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b672:	68bb      	ldr	r3, [r7, #8]
 801b674:	fbb2 f3f3 	udiv	r3, r2, r3
 801b678:	4a16      	ldr	r2, [pc, #88]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b67a:	68d2      	ldr	r2, [r2, #12]
 801b67c:	0a12      	lsrs	r2, r2, #8
 801b67e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b682:	fb02 f303 	mul.w	r3, r2, r3
 801b686:	617b      	str	r3, [r7, #20]
      break;
 801b688:	e00c      	b.n	801b6a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b68a:	4a13      	ldr	r2, [pc, #76]	; (801b6d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 801b68c:	68bb      	ldr	r3, [r7, #8]
 801b68e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b692:	4a10      	ldr	r2, [pc, #64]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b694:	68d2      	ldr	r2, [r2, #12]
 801b696:	0a12      	lsrs	r2, r2, #8
 801b698:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b69c:	fb02 f303 	mul.w	r3, r2, r3
 801b6a0:	617b      	str	r3, [r7, #20]
      break;
 801b6a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b6a4:	4b0b      	ldr	r3, [pc, #44]	; (801b6d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 801b6a6:	68db      	ldr	r3, [r3, #12]
 801b6a8:	0e5b      	lsrs	r3, r3, #25
 801b6aa:	f003 0303 	and.w	r3, r3, #3
 801b6ae:	3301      	adds	r3, #1
 801b6b0:	005b      	lsls	r3, r3, #1
 801b6b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801b6b4:	697a      	ldr	r2, [r7, #20]
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b6bc:	613b      	str	r3, [r7, #16]
 801b6be:	e001      	b.n	801b6c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801b6c4:	693b      	ldr	r3, [r7, #16]
}
 801b6c6:	4618      	mov	r0, r3
 801b6c8:	371c      	adds	r7, #28
 801b6ca:	46bd      	mov	sp, r7
 801b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6d0:	4770      	bx	lr
 801b6d2:	bf00      	nop
 801b6d4:	40021000 	.word	0x40021000
 801b6d8:	00f42400 	.word	0x00f42400

0801b6dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b6dc:	b480      	push	{r7}
 801b6de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801b6e0:	4b03      	ldr	r3, [pc, #12]	; (801b6f0 <HAL_RCC_GetHCLKFreq+0x14>)
 801b6e2:	681b      	ldr	r3, [r3, #0]
}
 801b6e4:	4618      	mov	r0, r3
 801b6e6:	46bd      	mov	sp, r7
 801b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6ec:	4770      	bx	lr
 801b6ee:	bf00      	nop
 801b6f0:	20000000 	.word	0x20000000

0801b6f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b6f4:	b580      	push	{r7, lr}
 801b6f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801b6f8:	f7ff fff0 	bl	801b6dc <HAL_RCC_GetHCLKFreq>
 801b6fc:	4602      	mov	r2, r0
 801b6fe:	4b06      	ldr	r3, [pc, #24]	; (801b718 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b700:	689b      	ldr	r3, [r3, #8]
 801b702:	0a1b      	lsrs	r3, r3, #8
 801b704:	f003 0307 	and.w	r3, r3, #7
 801b708:	4904      	ldr	r1, [pc, #16]	; (801b71c <HAL_RCC_GetPCLK1Freq+0x28>)
 801b70a:	5ccb      	ldrb	r3, [r1, r3]
 801b70c:	f003 031f 	and.w	r3, r3, #31
 801b710:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b714:	4618      	mov	r0, r3
 801b716:	bd80      	pop	{r7, pc}
 801b718:	40021000 	.word	0x40021000
 801b71c:	08022128 	.word	0x08022128

0801b720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b720:	b580      	push	{r7, lr}
 801b722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801b724:	f7ff ffda 	bl	801b6dc <HAL_RCC_GetHCLKFreq>
 801b728:	4602      	mov	r2, r0
 801b72a:	4b06      	ldr	r3, [pc, #24]	; (801b744 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b72c:	689b      	ldr	r3, [r3, #8]
 801b72e:	0adb      	lsrs	r3, r3, #11
 801b730:	f003 0307 	and.w	r3, r3, #7
 801b734:	4904      	ldr	r1, [pc, #16]	; (801b748 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b736:	5ccb      	ldrb	r3, [r1, r3]
 801b738:	f003 031f 	and.w	r3, r3, #31
 801b73c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801b740:	4618      	mov	r0, r3
 801b742:	bd80      	pop	{r7, pc}
 801b744:	40021000 	.word	0x40021000
 801b748:	08022128 	.word	0x08022128

0801b74c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801b74c:	b480      	push	{r7}
 801b74e:	b087      	sub	sp, #28
 801b750:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801b752:	4b1e      	ldr	r3, [pc, #120]	; (801b7cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b754:	68db      	ldr	r3, [r3, #12]
 801b756:	f003 0303 	and.w	r3, r3, #3
 801b75a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801b75c:	4b1b      	ldr	r3, [pc, #108]	; (801b7cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b75e:	68db      	ldr	r3, [r3, #12]
 801b760:	091b      	lsrs	r3, r3, #4
 801b762:	f003 030f 	and.w	r3, r3, #15
 801b766:	3301      	adds	r3, #1
 801b768:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801b76a:	693b      	ldr	r3, [r7, #16]
 801b76c:	2b03      	cmp	r3, #3
 801b76e:	d10c      	bne.n	801b78a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b770:	4a17      	ldr	r2, [pc, #92]	; (801b7d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	fbb2 f3f3 	udiv	r3, r2, r3
 801b778:	4a14      	ldr	r2, [pc, #80]	; (801b7cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b77a:	68d2      	ldr	r2, [r2, #12]
 801b77c:	0a12      	lsrs	r2, r2, #8
 801b77e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b782:	fb02 f303 	mul.w	r3, r2, r3
 801b786:	617b      	str	r3, [r7, #20]
    break;
 801b788:	e00c      	b.n	801b7a4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801b78a:	4a11      	ldr	r2, [pc, #68]	; (801b7d0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	fbb2 f3f3 	udiv	r3, r2, r3
 801b792:	4a0e      	ldr	r2, [pc, #56]	; (801b7cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b794:	68d2      	ldr	r2, [r2, #12]
 801b796:	0a12      	lsrs	r2, r2, #8
 801b798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801b79c:	fb02 f303 	mul.w	r3, r2, r3
 801b7a0:	617b      	str	r3, [r7, #20]
    break;
 801b7a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801b7a4:	4b09      	ldr	r3, [pc, #36]	; (801b7cc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801b7a6:	68db      	ldr	r3, [r3, #12]
 801b7a8:	0e5b      	lsrs	r3, r3, #25
 801b7aa:	f003 0303 	and.w	r3, r3, #3
 801b7ae:	3301      	adds	r3, #1
 801b7b0:	005b      	lsls	r3, r3, #1
 801b7b2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801b7b4:	697a      	ldr	r2, [r7, #20]
 801b7b6:	68bb      	ldr	r3, [r7, #8]
 801b7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b7bc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801b7be:	687b      	ldr	r3, [r7, #4]
}
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	371c      	adds	r7, #28
 801b7c4:	46bd      	mov	sp, r7
 801b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7ca:	4770      	bx	lr
 801b7cc:	40021000 	.word	0x40021000
 801b7d0:	00f42400 	.word	0x00f42400

0801b7d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b7d4:	b580      	push	{r7, lr}
 801b7d6:	b086      	sub	sp, #24
 801b7d8:	af00      	add	r7, sp, #0
 801b7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801b7dc:	2300      	movs	r3, #0
 801b7de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801b7e0:	2300      	movs	r3, #0
 801b7e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	f000 8098 	beq.w	801b922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801b7f2:	2300      	movs	r3, #0
 801b7f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801b7f6:	4b43      	ldr	r3, [pc, #268]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b7f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b7fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d10d      	bne.n	801b81e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801b802:	4b40      	ldr	r3, [pc, #256]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b806:	4a3f      	ldr	r2, [pc, #252]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b80c:	6593      	str	r3, [r2, #88]	; 0x58
 801b80e:	4b3d      	ldr	r3, [pc, #244]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801b816:	60bb      	str	r3, [r7, #8]
 801b818:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801b81a:	2301      	movs	r3, #1
 801b81c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b81e:	4b3a      	ldr	r3, [pc, #232]	; (801b908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	4a39      	ldr	r2, [pc, #228]	; (801b908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b824:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b828:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b82a:	f7fc f80f 	bl	801784c <HAL_GetTick>
 801b82e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b830:	e009      	b.n	801b846 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b832:	f7fc f80b 	bl	801784c <HAL_GetTick>
 801b836:	4602      	mov	r2, r0
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	1ad3      	subs	r3, r2, r3
 801b83c:	2b02      	cmp	r3, #2
 801b83e:	d902      	bls.n	801b846 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801b840:	2303      	movs	r3, #3
 801b842:	74fb      	strb	r3, [r7, #19]
        break;
 801b844:	e005      	b.n	801b852 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b846:	4b30      	ldr	r3, [pc, #192]	; (801b908 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b84e:	2b00      	cmp	r3, #0
 801b850:	d0ef      	beq.n	801b832 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801b852:	7cfb      	ldrb	r3, [r7, #19]
 801b854:	2b00      	cmp	r3, #0
 801b856:	d159      	bne.n	801b90c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801b858:	4b2a      	ldr	r3, [pc, #168]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b85e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b862:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801b864:	697b      	ldr	r3, [r7, #20]
 801b866:	2b00      	cmp	r3, #0
 801b868:	d01e      	beq.n	801b8a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b86e:	697a      	ldr	r2, [r7, #20]
 801b870:	429a      	cmp	r2, r3
 801b872:	d019      	beq.n	801b8a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801b874:	4b23      	ldr	r3, [pc, #140]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801b87e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801b880:	4b20      	ldr	r3, [pc, #128]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b886:	4a1f      	ldr	r2, [pc, #124]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b888:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b88c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801b890:	4b1c      	ldr	r3, [pc, #112]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b896:	4a1b      	ldr	r2, [pc, #108]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b89c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801b8a0:	4a18      	ldr	r2, [pc, #96]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8a2:	697b      	ldr	r3, [r7, #20]
 801b8a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801b8a8:	697b      	ldr	r3, [r7, #20]
 801b8aa:	f003 0301 	and.w	r3, r3, #1
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d016      	beq.n	801b8e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b8b2:	f7fb ffcb 	bl	801784c <HAL_GetTick>
 801b8b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b8b8:	e00b      	b.n	801b8d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b8ba:	f7fb ffc7 	bl	801784c <HAL_GetTick>
 801b8be:	4602      	mov	r2, r0
 801b8c0:	68fb      	ldr	r3, [r7, #12]
 801b8c2:	1ad3      	subs	r3, r2, r3
 801b8c4:	f241 3288 	movw	r2, #5000	; 0x1388
 801b8c8:	4293      	cmp	r3, r2
 801b8ca:	d902      	bls.n	801b8d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801b8cc:	2303      	movs	r3, #3
 801b8ce:	74fb      	strb	r3, [r7, #19]
            break;
 801b8d0:	e006      	b.n	801b8e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801b8d2:	4b0c      	ldr	r3, [pc, #48]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8d8:	f003 0302 	and.w	r3, r3, #2
 801b8dc:	2b00      	cmp	r3, #0
 801b8de:	d0ec      	beq.n	801b8ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801b8e0:	7cfb      	ldrb	r3, [r7, #19]
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d10b      	bne.n	801b8fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801b8e6:	4b07      	ldr	r3, [pc, #28]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b8f4:	4903      	ldr	r1, [pc, #12]	; (801b904 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801b8f6:	4313      	orrs	r3, r2
 801b8f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801b8fc:	e008      	b.n	801b910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801b8fe:	7cfb      	ldrb	r3, [r7, #19]
 801b900:	74bb      	strb	r3, [r7, #18]
 801b902:	e005      	b.n	801b910 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801b904:	40021000 	.word	0x40021000
 801b908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b90c:	7cfb      	ldrb	r3, [r7, #19]
 801b90e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801b910:	7c7b      	ldrb	r3, [r7, #17]
 801b912:	2b01      	cmp	r3, #1
 801b914:	d105      	bne.n	801b922 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801b916:	4ba7      	ldr	r3, [pc, #668]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b91a:	4aa6      	ldr	r2, [pc, #664]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b91c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801b920:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801b922:	687b      	ldr	r3, [r7, #4]
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	f003 0301 	and.w	r3, r3, #1
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d00a      	beq.n	801b944 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801b92e:	4ba1      	ldr	r3, [pc, #644]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b934:	f023 0203 	bic.w	r2, r3, #3
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	499d      	ldr	r1, [pc, #628]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b93e:	4313      	orrs	r3, r2
 801b940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	681b      	ldr	r3, [r3, #0]
 801b948:	f003 0302 	and.w	r3, r3, #2
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d00a      	beq.n	801b966 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801b950:	4b98      	ldr	r3, [pc, #608]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b956:	f023 020c 	bic.w	r2, r3, #12
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	689b      	ldr	r3, [r3, #8]
 801b95e:	4995      	ldr	r1, [pc, #596]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b960:	4313      	orrs	r3, r2
 801b962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	f003 0304 	and.w	r3, r3, #4
 801b96e:	2b00      	cmp	r3, #0
 801b970:	d00a      	beq.n	801b988 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801b972:	4b90      	ldr	r3, [pc, #576]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b978:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801b97c:	687b      	ldr	r3, [r7, #4]
 801b97e:	68db      	ldr	r3, [r3, #12]
 801b980:	498c      	ldr	r1, [pc, #560]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b982:	4313      	orrs	r3, r2
 801b984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	f003 0308 	and.w	r3, r3, #8
 801b990:	2b00      	cmp	r3, #0
 801b992:	d00a      	beq.n	801b9aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801b994:	4b87      	ldr	r3, [pc, #540]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b99a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801b99e:	687b      	ldr	r3, [r7, #4]
 801b9a0:	691b      	ldr	r3, [r3, #16]
 801b9a2:	4984      	ldr	r1, [pc, #528]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9a4:	4313      	orrs	r3, r2
 801b9a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	f003 0310 	and.w	r3, r3, #16
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d00a      	beq.n	801b9cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801b9b6:	4b7f      	ldr	r3, [pc, #508]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	695b      	ldr	r3, [r3, #20]
 801b9c4:	497b      	ldr	r1, [pc, #492]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9c6:	4313      	orrs	r3, r2
 801b9c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	f003 0320 	and.w	r3, r3, #32
 801b9d4:	2b00      	cmp	r3, #0
 801b9d6:	d00a      	beq.n	801b9ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801b9d8:	4b76      	ldr	r3, [pc, #472]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801b9de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	699b      	ldr	r3, [r3, #24]
 801b9e6:	4973      	ldr	r1, [pc, #460]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9e8:	4313      	orrs	r3, r2
 801b9ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d00a      	beq.n	801ba10 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801b9fa:	4b6e      	ldr	r3, [pc, #440]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801b9fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	69db      	ldr	r3, [r3, #28]
 801ba08:	496a      	ldr	r1, [pc, #424]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba0a:	4313      	orrs	r3, r2
 801ba0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ba18:	2b00      	cmp	r3, #0
 801ba1a:	d00a      	beq.n	801ba32 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801ba1c:	4b65      	ldr	r3, [pc, #404]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801ba26:	687b      	ldr	r3, [r7, #4]
 801ba28:	6a1b      	ldr	r3, [r3, #32]
 801ba2a:	4962      	ldr	r1, [pc, #392]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba2c:	4313      	orrs	r3, r2
 801ba2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801ba32:	687b      	ldr	r3, [r7, #4]
 801ba34:	681b      	ldr	r3, [r3, #0]
 801ba36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d00a      	beq.n	801ba54 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801ba3e:	4b5d      	ldr	r3, [pc, #372]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801ba48:	687b      	ldr	r3, [r7, #4]
 801ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba4c:	4959      	ldr	r1, [pc, #356]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba4e:	4313      	orrs	r3, r2
 801ba50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d00a      	beq.n	801ba76 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ba60:	4b54      	ldr	r3, [pc, #336]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba66:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ba6e:	4951      	ldr	r1, [pc, #324]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba70:	4313      	orrs	r3, r2
 801ba72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d015      	beq.n	801baae <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ba82:	4b4c      	ldr	r3, [pc, #304]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ba88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba90:	4948      	ldr	r1, [pc, #288]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ba92:	4313      	orrs	r3, r2
 801ba94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ba9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801baa0:	d105      	bne.n	801baae <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801baa2:	4b44      	ldr	r3, [pc, #272]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baa4:	68db      	ldr	r3, [r3, #12]
 801baa6:	4a43      	ldr	r2, [pc, #268]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baa8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801baac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	681b      	ldr	r3, [r3, #0]
 801bab2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d015      	beq.n	801bae6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801baba:	4b3e      	ldr	r3, [pc, #248]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801babc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bac0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801bac4:	687b      	ldr	r3, [r7, #4]
 801bac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bac8:	493a      	ldr	r1, [pc, #232]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baca:	4313      	orrs	r3, r2
 801bacc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bad8:	d105      	bne.n	801bae6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bada:	4b36      	ldr	r3, [pc, #216]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801badc:	68db      	ldr	r3, [r3, #12]
 801bade:	4a35      	ldr	r2, [pc, #212]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bae4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801baee:	2b00      	cmp	r3, #0
 801baf0:	d015      	beq.n	801bb1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801baf2:	4b30      	ldr	r3, [pc, #192]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801baf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801baf8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb00:	492c      	ldr	r1, [pc, #176]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb02:	4313      	orrs	r3, r2
 801bb04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bb10:	d105      	bne.n	801bb1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bb12:	4b28      	ldr	r3, [pc, #160]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb14:	68db      	ldr	r3, [r3, #12]
 801bb16:	4a27      	ldr	r2, [pc, #156]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb1c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	681b      	ldr	r3, [r3, #0]
 801bb22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d015      	beq.n	801bb56 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801bb2a:	4b22      	ldr	r3, [pc, #136]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb38:	491e      	ldr	r1, [pc, #120]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb3a:	4313      	orrs	r3, r2
 801bb3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bb44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bb48:	d105      	bne.n	801bb56 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bb4a:	4b1a      	ldr	r3, [pc, #104]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb4c:	68db      	ldr	r3, [r3, #12]
 801bb4e:	4a19      	ldr	r2, [pc, #100]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb54:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d015      	beq.n	801bb8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801bb62:	4b14      	ldr	r3, [pc, #80]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bb68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb70:	4910      	ldr	r1, [pc, #64]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb72:	4313      	orrs	r3, r2
 801bb74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bb7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801bb80:	d105      	bne.n	801bb8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bb82:	4b0c      	ldr	r3, [pc, #48]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb84:	68db      	ldr	r3, [r3, #12]
 801bb86:	4a0b      	ldr	r2, [pc, #44]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bb8c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d018      	beq.n	801bbcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801bb9a:	4b06      	ldr	r3, [pc, #24]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bb9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bba0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bba8:	4902      	ldr	r1, [pc, #8]	; (801bbb4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801bbaa:	4313      	orrs	r3, r2
 801bbac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	e001      	b.n	801bbb8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801bbb4:	40021000 	.word	0x40021000
 801bbb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bbba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801bbbe:	d105      	bne.n	801bbcc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bbc0:	4b21      	ldr	r3, [pc, #132]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbc2:	68db      	ldr	r3, [r3, #12]
 801bbc4:	4a20      	ldr	r2, [pc, #128]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801bbcc:	687b      	ldr	r3, [r7, #4]
 801bbce:	681b      	ldr	r3, [r3, #0]
 801bbd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d015      	beq.n	801bc04 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801bbd8:	4b1b      	ldr	r3, [pc, #108]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bbde:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbe6:	4918      	ldr	r1, [pc, #96]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbe8:	4313      	orrs	r3, r2
 801bbea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801bbf6:	d105      	bne.n	801bc04 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801bbf8:	4b13      	ldr	r3, [pc, #76]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbfa:	68db      	ldr	r3, [r3, #12]
 801bbfc:	4a12      	ldr	r2, [pc, #72]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bbfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bc02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801bc0c:	2b00      	cmp	r3, #0
 801bc0e:	d015      	beq.n	801bc3c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801bc10:	4b0d      	ldr	r3, [pc, #52]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801bc16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc1e:	490a      	ldr	r1, [pc, #40]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc20:	4313      	orrs	r3, r2
 801bc22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bc2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bc2e:	d105      	bne.n	801bc3c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801bc30:	4b05      	ldr	r3, [pc, #20]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc32:	68db      	ldr	r3, [r3, #12]
 801bc34:	4a04      	ldr	r2, [pc, #16]	; (801bc48 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801bc36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bc3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801bc3c:	7cbb      	ldrb	r3, [r7, #18]
}
 801bc3e:	4618      	mov	r0, r3
 801bc40:	3718      	adds	r7, #24
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}
 801bc46:	bf00      	nop
 801bc48:	40021000 	.word	0x40021000

0801bc4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801bc4c:	b580      	push	{r7, lr}
 801bc4e:	b084      	sub	sp, #16
 801bc50:	af00      	add	r7, sp, #0
 801bc52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d101      	bne.n	801bc5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801bc5a:	2301      	movs	r3, #1
 801bc5c:	e09d      	b.n	801bd9a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d108      	bne.n	801bc78 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801bc66:	687b      	ldr	r3, [r7, #4]
 801bc68:	685b      	ldr	r3, [r3, #4]
 801bc6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801bc6e:	d009      	beq.n	801bc84 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	2200      	movs	r2, #0
 801bc74:	61da      	str	r2, [r3, #28]
 801bc76:	e005      	b.n	801bc84 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	2200      	movs	r2, #0
 801bc7c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	2200      	movs	r2, #0
 801bc82:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2200      	movs	r2, #0
 801bc88:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801bc90:	b2db      	uxtb	r3, r3
 801bc92:	2b00      	cmp	r3, #0
 801bc94:	d106      	bne.n	801bca4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	2200      	movs	r2, #0
 801bc9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801bc9e:	6878      	ldr	r0, [r7, #4]
 801bca0:	f7fa fc44 	bl	801652c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801bca4:	687b      	ldr	r3, [r7, #4]
 801bca6:	2202      	movs	r2, #2
 801bca8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	681b      	ldr	r3, [r3, #0]
 801bcb0:	681a      	ldr	r2, [r3, #0]
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	681b      	ldr	r3, [r3, #0]
 801bcb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801bcba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801bcbc:	687b      	ldr	r3, [r7, #4]
 801bcbe:	68db      	ldr	r3, [r3, #12]
 801bcc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bcc4:	d902      	bls.n	801bccc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801bcc6:	2300      	movs	r3, #0
 801bcc8:	60fb      	str	r3, [r7, #12]
 801bcca:	e002      	b.n	801bcd2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801bccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801bcd0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	68db      	ldr	r3, [r3, #12]
 801bcd6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801bcda:	d007      	beq.n	801bcec <HAL_SPI_Init+0xa0>
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	68db      	ldr	r3, [r3, #12]
 801bce0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801bce4:	d002      	beq.n	801bcec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	2200      	movs	r2, #0
 801bcea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	685b      	ldr	r3, [r3, #4]
 801bcf0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	689b      	ldr	r3, [r3, #8]
 801bcf8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801bcfc:	431a      	orrs	r2, r3
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	691b      	ldr	r3, [r3, #16]
 801bd02:	f003 0302 	and.w	r3, r3, #2
 801bd06:	431a      	orrs	r2, r3
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	695b      	ldr	r3, [r3, #20]
 801bd0c:	f003 0301 	and.w	r3, r3, #1
 801bd10:	431a      	orrs	r2, r3
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	699b      	ldr	r3, [r3, #24]
 801bd16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801bd1a:	431a      	orrs	r2, r3
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	69db      	ldr	r3, [r3, #28]
 801bd20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801bd24:	431a      	orrs	r2, r3
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	6a1b      	ldr	r3, [r3, #32]
 801bd2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bd2e:	ea42 0103 	orr.w	r1, r2, r3
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bd36:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	430a      	orrs	r2, r1
 801bd40:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	699b      	ldr	r3, [r3, #24]
 801bd46:	0c1b      	lsrs	r3, r3, #16
 801bd48:	f003 0204 	and.w	r2, r3, #4
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd50:	f003 0310 	and.w	r3, r3, #16
 801bd54:	431a      	orrs	r2, r3
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bd5a:	f003 0308 	and.w	r3, r3, #8
 801bd5e:	431a      	orrs	r2, r3
 801bd60:	687b      	ldr	r3, [r7, #4]
 801bd62:	68db      	ldr	r3, [r3, #12]
 801bd64:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801bd68:	ea42 0103 	orr.w	r1, r2, r3
 801bd6c:	68fb      	ldr	r3, [r7, #12]
 801bd6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	681b      	ldr	r3, [r3, #0]
 801bd76:	430a      	orrs	r2, r1
 801bd78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801bd7a:	687b      	ldr	r3, [r7, #4]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	69da      	ldr	r2, [r3, #28]
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801bd88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	2201      	movs	r2, #1
 801bd94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801bd98:	2300      	movs	r3, #0
}
 801bd9a:	4618      	mov	r0, r3
 801bd9c:	3710      	adds	r7, #16
 801bd9e:	46bd      	mov	sp, r7
 801bda0:	bd80      	pop	{r7, pc}

0801bda2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bda2:	b580      	push	{r7, lr}
 801bda4:	b088      	sub	sp, #32
 801bda6:	af00      	add	r7, sp, #0
 801bda8:	60f8      	str	r0, [r7, #12]
 801bdaa:	60b9      	str	r1, [r7, #8]
 801bdac:	603b      	str	r3, [r7, #0]
 801bdae:	4613      	mov	r3, r2
 801bdb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801bdb2:	2300      	movs	r3, #0
 801bdb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801bdbc:	2b01      	cmp	r3, #1
 801bdbe:	d101      	bne.n	801bdc4 <HAL_SPI_Transmit+0x22>
 801bdc0:	2302      	movs	r3, #2
 801bdc2:	e158      	b.n	801c076 <HAL_SPI_Transmit+0x2d4>
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	2201      	movs	r2, #1
 801bdc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801bdcc:	f7fb fd3e 	bl	801784c <HAL_GetTick>
 801bdd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801bdd2:	88fb      	ldrh	r3, [r7, #6]
 801bdd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801bdd6:	68fb      	ldr	r3, [r7, #12]
 801bdd8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801bddc:	b2db      	uxtb	r3, r3
 801bdde:	2b01      	cmp	r3, #1
 801bde0:	d002      	beq.n	801bde8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801bde2:	2302      	movs	r3, #2
 801bde4:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bde6:	e13d      	b.n	801c064 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801bde8:	68bb      	ldr	r3, [r7, #8]
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d002      	beq.n	801bdf4 <HAL_SPI_Transmit+0x52>
 801bdee:	88fb      	ldrh	r3, [r7, #6]
 801bdf0:	2b00      	cmp	r3, #0
 801bdf2:	d102      	bne.n	801bdfa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801bdf4:	2301      	movs	r3, #1
 801bdf6:	77fb      	strb	r3, [r7, #31]
    goto error;
 801bdf8:	e134      	b.n	801c064 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801bdfa:	68fb      	ldr	r3, [r7, #12]
 801bdfc:	2203      	movs	r2, #3
 801bdfe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801be02:	68fb      	ldr	r3, [r7, #12]
 801be04:	2200      	movs	r2, #0
 801be06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	68ba      	ldr	r2, [r7, #8]
 801be0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	88fa      	ldrh	r2, [r7, #6]
 801be12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	88fa      	ldrh	r2, [r7, #6]
 801be18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801be1a:	68fb      	ldr	r3, [r7, #12]
 801be1c:	2200      	movs	r2, #0
 801be1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801be20:	68fb      	ldr	r3, [r7, #12]
 801be22:	2200      	movs	r2, #0
 801be24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801be28:	68fb      	ldr	r3, [r7, #12]
 801be2a:	2200      	movs	r2, #0
 801be2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801be30:	68fb      	ldr	r3, [r7, #12]
 801be32:	2200      	movs	r2, #0
 801be34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	2200      	movs	r2, #0
 801be3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	689b      	ldr	r3, [r3, #8]
 801be40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801be44:	d10f      	bne.n	801be66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	681a      	ldr	r2, [r3, #0]
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801be54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	681a      	ldr	r2, [r3, #0]
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801be64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801be70:	2b40      	cmp	r3, #64	; 0x40
 801be72:	d007      	beq.n	801be84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801be74:	68fb      	ldr	r3, [r7, #12]
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	681a      	ldr	r2, [r3, #0]
 801be7a:	68fb      	ldr	r3, [r7, #12]
 801be7c:	681b      	ldr	r3, [r3, #0]
 801be7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801be82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801be84:	68fb      	ldr	r3, [r7, #12]
 801be86:	68db      	ldr	r3, [r3, #12]
 801be88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801be8c:	d94b      	bls.n	801bf26 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	685b      	ldr	r3, [r3, #4]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d002      	beq.n	801be9c <HAL_SPI_Transmit+0xfa>
 801be96:	8afb      	ldrh	r3, [r7, #22]
 801be98:	2b01      	cmp	r3, #1
 801be9a:	d13e      	bne.n	801bf1a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bea0:	881a      	ldrh	r2, [r3, #0]
 801bea2:	68fb      	ldr	r3, [r7, #12]
 801bea4:	681b      	ldr	r3, [r3, #0]
 801bea6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801beac:	1c9a      	adds	r2, r3, #2
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801beb6:	b29b      	uxth	r3, r3
 801beb8:	3b01      	subs	r3, #1
 801beba:	b29a      	uxth	r2, r3
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801bec0:	e02b      	b.n	801bf1a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	689b      	ldr	r3, [r3, #8]
 801bec8:	f003 0302 	and.w	r3, r3, #2
 801becc:	2b02      	cmp	r3, #2
 801bece:	d112      	bne.n	801bef6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bed4:	881a      	ldrh	r2, [r3, #0]
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bee0:	1c9a      	adds	r2, r3, #2
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801beea:	b29b      	uxth	r3, r3
 801beec:	3b01      	subs	r3, #1
 801beee:	b29a      	uxth	r2, r3
 801bef0:	68fb      	ldr	r3, [r7, #12]
 801bef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bef4:	e011      	b.n	801bf1a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801bef6:	f7fb fca9 	bl	801784c <HAL_GetTick>
 801befa:	4602      	mov	r2, r0
 801befc:	69bb      	ldr	r3, [r7, #24]
 801befe:	1ad3      	subs	r3, r2, r3
 801bf00:	683a      	ldr	r2, [r7, #0]
 801bf02:	429a      	cmp	r2, r3
 801bf04:	d803      	bhi.n	801bf0e <HAL_SPI_Transmit+0x16c>
 801bf06:	683b      	ldr	r3, [r7, #0]
 801bf08:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bf0c:	d102      	bne.n	801bf14 <HAL_SPI_Transmit+0x172>
 801bf0e:	683b      	ldr	r3, [r7, #0]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d102      	bne.n	801bf1a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801bf14:	2303      	movs	r3, #3
 801bf16:	77fb      	strb	r3, [r7, #31]
          goto error;
 801bf18:	e0a4      	b.n	801c064 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801bf1a:	68fb      	ldr	r3, [r7, #12]
 801bf1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf1e:	b29b      	uxth	r3, r3
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d1ce      	bne.n	801bec2 <HAL_SPI_Transmit+0x120>
 801bf24:	e07c      	b.n	801c020 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801bf26:	68fb      	ldr	r3, [r7, #12]
 801bf28:	685b      	ldr	r3, [r3, #4]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d002      	beq.n	801bf34 <HAL_SPI_Transmit+0x192>
 801bf2e:	8afb      	ldrh	r3, [r7, #22]
 801bf30:	2b01      	cmp	r3, #1
 801bf32:	d170      	bne.n	801c016 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801bf34:	68fb      	ldr	r3, [r7, #12]
 801bf36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf38:	b29b      	uxth	r3, r3
 801bf3a:	2b01      	cmp	r3, #1
 801bf3c:	d912      	bls.n	801bf64 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bf3e:	68fb      	ldr	r3, [r7, #12]
 801bf40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf42:	881a      	ldrh	r2, [r3, #0]
 801bf44:	68fb      	ldr	r3, [r7, #12]
 801bf46:	681b      	ldr	r3, [r3, #0]
 801bf48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf4e:	1c9a      	adds	r2, r3, #2
 801bf50:	68fb      	ldr	r3, [r7, #12]
 801bf52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801bf54:	68fb      	ldr	r3, [r7, #12]
 801bf56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf58:	b29b      	uxth	r3, r3
 801bf5a:	3b02      	subs	r3, #2
 801bf5c:	b29a      	uxth	r2, r3
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bf62:	e058      	b.n	801c016 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801bf64:	68fb      	ldr	r3, [r7, #12]
 801bf66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	330c      	adds	r3, #12
 801bf6e:	7812      	ldrb	r2, [r2, #0]
 801bf70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bf76:	1c5a      	adds	r2, r3, #1
 801bf78:	68fb      	ldr	r3, [r7, #12]
 801bf7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf80:	b29b      	uxth	r3, r3
 801bf82:	3b01      	subs	r3, #1
 801bf84:	b29a      	uxth	r2, r3
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801bf8a:	e044      	b.n	801c016 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801bf8c:	68fb      	ldr	r3, [r7, #12]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	689b      	ldr	r3, [r3, #8]
 801bf92:	f003 0302 	and.w	r3, r3, #2
 801bf96:	2b02      	cmp	r3, #2
 801bf98:	d12b      	bne.n	801bff2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801bf9a:	68fb      	ldr	r3, [r7, #12]
 801bf9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bf9e:	b29b      	uxth	r3, r3
 801bfa0:	2b01      	cmp	r3, #1
 801bfa2:	d912      	bls.n	801bfca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bfa8:	881a      	ldrh	r2, [r3, #0]
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801bfb0:	68fb      	ldr	r3, [r7, #12]
 801bfb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bfb4:	1c9a      	adds	r2, r3, #2
 801bfb6:	68fb      	ldr	r3, [r7, #12]
 801bfb8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801bfba:	68fb      	ldr	r3, [r7, #12]
 801bfbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bfbe:	b29b      	uxth	r3, r3
 801bfc0:	3b02      	subs	r3, #2
 801bfc2:	b29a      	uxth	r2, r3
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bfc8:	e025      	b.n	801c016 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801bfca:	68fb      	ldr	r3, [r7, #12]
 801bfcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bfce:	68fb      	ldr	r3, [r7, #12]
 801bfd0:	681b      	ldr	r3, [r3, #0]
 801bfd2:	330c      	adds	r3, #12
 801bfd4:	7812      	ldrb	r2, [r2, #0]
 801bfd6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801bfd8:	68fb      	ldr	r3, [r7, #12]
 801bfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bfdc:	1c5a      	adds	r2, r3, #1
 801bfde:	68fb      	ldr	r3, [r7, #12]
 801bfe0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801bfe2:	68fb      	ldr	r3, [r7, #12]
 801bfe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801bfe6:	b29b      	uxth	r3, r3
 801bfe8:	3b01      	subs	r3, #1
 801bfea:	b29a      	uxth	r2, r3
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	87da      	strh	r2, [r3, #62]	; 0x3e
 801bff0:	e011      	b.n	801c016 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801bff2:	f7fb fc2b 	bl	801784c <HAL_GetTick>
 801bff6:	4602      	mov	r2, r0
 801bff8:	69bb      	ldr	r3, [r7, #24]
 801bffa:	1ad3      	subs	r3, r2, r3
 801bffc:	683a      	ldr	r2, [r7, #0]
 801bffe:	429a      	cmp	r2, r3
 801c000:	d803      	bhi.n	801c00a <HAL_SPI_Transmit+0x268>
 801c002:	683b      	ldr	r3, [r7, #0]
 801c004:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c008:	d102      	bne.n	801c010 <HAL_SPI_Transmit+0x26e>
 801c00a:	683b      	ldr	r3, [r7, #0]
 801c00c:	2b00      	cmp	r3, #0
 801c00e:	d102      	bne.n	801c016 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801c010:	2303      	movs	r3, #3
 801c012:	77fb      	strb	r3, [r7, #31]
          goto error;
 801c014:	e026      	b.n	801c064 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c01a:	b29b      	uxth	r3, r3
 801c01c:	2b00      	cmp	r3, #0
 801c01e:	d1b5      	bne.n	801bf8c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c020:	69ba      	ldr	r2, [r7, #24]
 801c022:	6839      	ldr	r1, [r7, #0]
 801c024:	68f8      	ldr	r0, [r7, #12]
 801c026:	f000 fce3 	bl	801c9f0 <SPI_EndRxTxTransaction>
 801c02a:	4603      	mov	r3, r0
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	d002      	beq.n	801c036 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c030:	68fb      	ldr	r3, [r7, #12]
 801c032:	2220      	movs	r2, #32
 801c034:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801c036:	68fb      	ldr	r3, [r7, #12]
 801c038:	689b      	ldr	r3, [r3, #8]
 801c03a:	2b00      	cmp	r3, #0
 801c03c:	d10a      	bne.n	801c054 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801c03e:	2300      	movs	r3, #0
 801c040:	613b      	str	r3, [r7, #16]
 801c042:	68fb      	ldr	r3, [r7, #12]
 801c044:	681b      	ldr	r3, [r3, #0]
 801c046:	68db      	ldr	r3, [r3, #12]
 801c048:	613b      	str	r3, [r7, #16]
 801c04a:	68fb      	ldr	r3, [r7, #12]
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	689b      	ldr	r3, [r3, #8]
 801c050:	613b      	str	r3, [r7, #16]
 801c052:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d002      	beq.n	801c062 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801c05c:	2301      	movs	r3, #1
 801c05e:	77fb      	strb	r3, [r7, #31]
 801c060:	e000      	b.n	801c064 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801c062:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	2201      	movs	r2, #1
 801c068:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	2200      	movs	r2, #0
 801c070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c074:	7ffb      	ldrb	r3, [r7, #31]
}
 801c076:	4618      	mov	r0, r3
 801c078:	3720      	adds	r7, #32
 801c07a:	46bd      	mov	sp, r7
 801c07c:	bd80      	pop	{r7, pc}

0801c07e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801c07e:	b580      	push	{r7, lr}
 801c080:	b088      	sub	sp, #32
 801c082:	af02      	add	r7, sp, #8
 801c084:	60f8      	str	r0, [r7, #12]
 801c086:	60b9      	str	r1, [r7, #8]
 801c088:	603b      	str	r3, [r7, #0]
 801c08a:	4613      	mov	r3, r2
 801c08c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801c08e:	2300      	movs	r3, #0
 801c090:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	685b      	ldr	r3, [r3, #4]
 801c096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c09a:	d112      	bne.n	801c0c2 <HAL_SPI_Receive+0x44>
 801c09c:	68fb      	ldr	r3, [r7, #12]
 801c09e:	689b      	ldr	r3, [r3, #8]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d10e      	bne.n	801c0c2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801c0a4:	68fb      	ldr	r3, [r7, #12]
 801c0a6:	2204      	movs	r2, #4
 801c0a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801c0ac:	88fa      	ldrh	r2, [r7, #6]
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	9300      	str	r3, [sp, #0]
 801c0b2:	4613      	mov	r3, r2
 801c0b4:	68ba      	ldr	r2, [r7, #8]
 801c0b6:	68b9      	ldr	r1, [r7, #8]
 801c0b8:	68f8      	ldr	r0, [r7, #12]
 801c0ba:	f000 f910 	bl	801c2de <HAL_SPI_TransmitReceive>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	e109      	b.n	801c2d6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c0c2:	68fb      	ldr	r3, [r7, #12]
 801c0c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c0c8:	2b01      	cmp	r3, #1
 801c0ca:	d101      	bne.n	801c0d0 <HAL_SPI_Receive+0x52>
 801c0cc:	2302      	movs	r3, #2
 801c0ce:	e102      	b.n	801c2d6 <HAL_SPI_Receive+0x258>
 801c0d0:	68fb      	ldr	r3, [r7, #12]
 801c0d2:	2201      	movs	r2, #1
 801c0d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c0d8:	f7fb fbb8 	bl	801784c <HAL_GetTick>
 801c0dc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801c0de:	68fb      	ldr	r3, [r7, #12]
 801c0e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c0e4:	b2db      	uxtb	r3, r3
 801c0e6:	2b01      	cmp	r3, #1
 801c0e8:	d002      	beq.n	801c0f0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801c0ea:	2302      	movs	r3, #2
 801c0ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c0ee:	e0e9      	b.n	801c2c4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801c0f0:	68bb      	ldr	r3, [r7, #8]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	d002      	beq.n	801c0fc <HAL_SPI_Receive+0x7e>
 801c0f6:	88fb      	ldrh	r3, [r7, #6]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d102      	bne.n	801c102 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801c0fc:	2301      	movs	r3, #1
 801c0fe:	75fb      	strb	r3, [r7, #23]
    goto error;
 801c100:	e0e0      	b.n	801c2c4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801c102:	68fb      	ldr	r3, [r7, #12]
 801c104:	2204      	movs	r2, #4
 801c106:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	2200      	movs	r2, #0
 801c10e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	68ba      	ldr	r2, [r7, #8]
 801c114:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801c116:	68fb      	ldr	r3, [r7, #12]
 801c118:	88fa      	ldrh	r2, [r7, #6]
 801c11a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	88fa      	ldrh	r2, [r7, #6]
 801c122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801c126:	68fb      	ldr	r3, [r7, #12]
 801c128:	2200      	movs	r2, #0
 801c12a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	2200      	movs	r2, #0
 801c130:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	2200      	movs	r2, #0
 801c136:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	2200      	movs	r2, #0
 801c13c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c13e:	68fb      	ldr	r3, [r7, #12]
 801c140:	2200      	movs	r2, #0
 801c142:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	68db      	ldr	r3, [r3, #12]
 801c148:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c14c:	d908      	bls.n	801c160 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	681b      	ldr	r3, [r3, #0]
 801c152:	685a      	ldr	r2, [r3, #4]
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	681b      	ldr	r3, [r3, #0]
 801c158:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c15c:	605a      	str	r2, [r3, #4]
 801c15e:	e007      	b.n	801c170 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	685a      	ldr	r2, [r3, #4]
 801c166:	68fb      	ldr	r3, [r7, #12]
 801c168:	681b      	ldr	r3, [r3, #0]
 801c16a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c16e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c170:	68fb      	ldr	r3, [r7, #12]
 801c172:	689b      	ldr	r3, [r3, #8]
 801c174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c178:	d10f      	bne.n	801c19a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	681a      	ldr	r2, [r3, #0]
 801c180:	68fb      	ldr	r3, [r7, #12]
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c188:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801c18a:	68fb      	ldr	r3, [r7, #12]
 801c18c:	681b      	ldr	r3, [r3, #0]
 801c18e:	681a      	ldr	r2, [r3, #0]
 801c190:	68fb      	ldr	r3, [r7, #12]
 801c192:	681b      	ldr	r3, [r3, #0]
 801c194:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801c198:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c19a:	68fb      	ldr	r3, [r7, #12]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	681b      	ldr	r3, [r3, #0]
 801c1a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c1a4:	2b40      	cmp	r3, #64	; 0x40
 801c1a6:	d007      	beq.n	801c1b8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c1a8:	68fb      	ldr	r3, [r7, #12]
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	681a      	ldr	r2, [r3, #0]
 801c1ae:	68fb      	ldr	r3, [r7, #12]
 801c1b0:	681b      	ldr	r3, [r3, #0]
 801c1b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c1b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	68db      	ldr	r3, [r3, #12]
 801c1bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c1c0:	d867      	bhi.n	801c292 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801c1c2:	e030      	b.n	801c226 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c1c4:	68fb      	ldr	r3, [r7, #12]
 801c1c6:	681b      	ldr	r3, [r3, #0]
 801c1c8:	689b      	ldr	r3, [r3, #8]
 801c1ca:	f003 0301 	and.w	r3, r3, #1
 801c1ce:	2b01      	cmp	r3, #1
 801c1d0:	d117      	bne.n	801c202 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c1d2:	68fb      	ldr	r3, [r7, #12]
 801c1d4:	681b      	ldr	r3, [r3, #0]
 801c1d6:	f103 020c 	add.w	r2, r3, #12
 801c1da:	68fb      	ldr	r3, [r7, #12]
 801c1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1de:	7812      	ldrb	r2, [r2, #0]
 801c1e0:	b2d2      	uxtb	r2, r2
 801c1e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1e8:	1c5a      	adds	r2, r3, #1
 801c1ea:	68fb      	ldr	r3, [r7, #12]
 801c1ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c1f4:	b29b      	uxth	r3, r3
 801c1f6:	3b01      	subs	r3, #1
 801c1f8:	b29a      	uxth	r2, r3
 801c1fa:	68fb      	ldr	r3, [r7, #12]
 801c1fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c200:	e011      	b.n	801c226 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c202:	f7fb fb23 	bl	801784c <HAL_GetTick>
 801c206:	4602      	mov	r2, r0
 801c208:	693b      	ldr	r3, [r7, #16]
 801c20a:	1ad3      	subs	r3, r2, r3
 801c20c:	683a      	ldr	r2, [r7, #0]
 801c20e:	429a      	cmp	r2, r3
 801c210:	d803      	bhi.n	801c21a <HAL_SPI_Receive+0x19c>
 801c212:	683b      	ldr	r3, [r7, #0]
 801c214:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c218:	d102      	bne.n	801c220 <HAL_SPI_Receive+0x1a2>
 801c21a:	683b      	ldr	r3, [r7, #0]
 801c21c:	2b00      	cmp	r3, #0
 801c21e:	d102      	bne.n	801c226 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801c220:	2303      	movs	r3, #3
 801c222:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c224:	e04e      	b.n	801c2c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c22c:	b29b      	uxth	r3, r3
 801c22e:	2b00      	cmp	r3, #0
 801c230:	d1c8      	bne.n	801c1c4 <HAL_SPI_Receive+0x146>
 801c232:	e034      	b.n	801c29e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801c234:	68fb      	ldr	r3, [r7, #12]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	689b      	ldr	r3, [r3, #8]
 801c23a:	f003 0301 	and.w	r3, r3, #1
 801c23e:	2b01      	cmp	r3, #1
 801c240:	d115      	bne.n	801c26e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c242:	68fb      	ldr	r3, [r7, #12]
 801c244:	681b      	ldr	r3, [r3, #0]
 801c246:	68da      	ldr	r2, [r3, #12]
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c24c:	b292      	uxth	r2, r2
 801c24e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c254:	1c9a      	adds	r2, r3, #2
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c25a:	68fb      	ldr	r3, [r7, #12]
 801c25c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c260:	b29b      	uxth	r3, r3
 801c262:	3b01      	subs	r3, #1
 801c264:	b29a      	uxth	r2, r3
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801c26c:	e011      	b.n	801c292 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801c26e:	f7fb faed 	bl	801784c <HAL_GetTick>
 801c272:	4602      	mov	r2, r0
 801c274:	693b      	ldr	r3, [r7, #16]
 801c276:	1ad3      	subs	r3, r2, r3
 801c278:	683a      	ldr	r2, [r7, #0]
 801c27a:	429a      	cmp	r2, r3
 801c27c:	d803      	bhi.n	801c286 <HAL_SPI_Receive+0x208>
 801c27e:	683b      	ldr	r3, [r7, #0]
 801c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c284:	d102      	bne.n	801c28c <HAL_SPI_Receive+0x20e>
 801c286:	683b      	ldr	r3, [r7, #0]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	d102      	bne.n	801c292 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801c28c:	2303      	movs	r3, #3
 801c28e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801c290:	e018      	b.n	801c2c4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c298:	b29b      	uxth	r3, r3
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d1ca      	bne.n	801c234 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c29e:	693a      	ldr	r2, [r7, #16]
 801c2a0:	6839      	ldr	r1, [r7, #0]
 801c2a2:	68f8      	ldr	r0, [r7, #12]
 801c2a4:	f000 fb4c 	bl	801c940 <SPI_EndRxTransaction>
 801c2a8:	4603      	mov	r3, r0
 801c2aa:	2b00      	cmp	r3, #0
 801c2ac:	d002      	beq.n	801c2b4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c2ae:	68fb      	ldr	r3, [r7, #12]
 801c2b0:	2220      	movs	r2, #32
 801c2b2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d002      	beq.n	801c2c2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801c2bc:	2301      	movs	r3, #1
 801c2be:	75fb      	strb	r3, [r7, #23]
 801c2c0:	e000      	b.n	801c2c4 <HAL_SPI_Receive+0x246>
  }

error :
 801c2c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c2c4:	68fb      	ldr	r3, [r7, #12]
 801c2c6:	2201      	movs	r2, #1
 801c2c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c2cc:	68fb      	ldr	r3, [r7, #12]
 801c2ce:	2200      	movs	r2, #0
 801c2d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c2d4:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	3718      	adds	r7, #24
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	bd80      	pop	{r7, pc}

0801c2de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801c2de:	b580      	push	{r7, lr}
 801c2e0:	b08a      	sub	sp, #40	; 0x28
 801c2e2:	af00      	add	r7, sp, #0
 801c2e4:	60f8      	str	r0, [r7, #12]
 801c2e6:	60b9      	str	r1, [r7, #8]
 801c2e8:	607a      	str	r2, [r7, #4]
 801c2ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801c2ec:	2301      	movs	r3, #1
 801c2ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801c2f6:	68fb      	ldr	r3, [r7, #12]
 801c2f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801c2fc:	2b01      	cmp	r3, #1
 801c2fe:	d101      	bne.n	801c304 <HAL_SPI_TransmitReceive+0x26>
 801c300:	2302      	movs	r3, #2
 801c302:	e1fb      	b.n	801c6fc <HAL_SPI_TransmitReceive+0x41e>
 801c304:	68fb      	ldr	r3, [r7, #12]
 801c306:	2201      	movs	r2, #1
 801c308:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801c30c:	f7fb fa9e 	bl	801784c <HAL_GetTick>
 801c310:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801c312:	68fb      	ldr	r3, [r7, #12]
 801c314:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c318:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801c31a:	68fb      	ldr	r3, [r7, #12]
 801c31c:	685b      	ldr	r3, [r3, #4]
 801c31e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801c320:	887b      	ldrh	r3, [r7, #2]
 801c322:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801c324:	887b      	ldrh	r3, [r7, #2]
 801c326:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801c328:	7efb      	ldrb	r3, [r7, #27]
 801c32a:	2b01      	cmp	r3, #1
 801c32c:	d00e      	beq.n	801c34c <HAL_SPI_TransmitReceive+0x6e>
 801c32e:	697b      	ldr	r3, [r7, #20]
 801c330:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c334:	d106      	bne.n	801c344 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	689b      	ldr	r3, [r3, #8]
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d102      	bne.n	801c344 <HAL_SPI_TransmitReceive+0x66>
 801c33e:	7efb      	ldrb	r3, [r7, #27]
 801c340:	2b04      	cmp	r3, #4
 801c342:	d003      	beq.n	801c34c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801c344:	2302      	movs	r3, #2
 801c346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c34a:	e1cd      	b.n	801c6e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801c34c:	68bb      	ldr	r3, [r7, #8]
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d005      	beq.n	801c35e <HAL_SPI_TransmitReceive+0x80>
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d002      	beq.n	801c35e <HAL_SPI_TransmitReceive+0x80>
 801c358:	887b      	ldrh	r3, [r7, #2]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d103      	bne.n	801c366 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801c35e:	2301      	movs	r3, #1
 801c360:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801c364:	e1c0      	b.n	801c6e8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801c366:	68fb      	ldr	r3, [r7, #12]
 801c368:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801c36c:	b2db      	uxtb	r3, r3
 801c36e:	2b04      	cmp	r3, #4
 801c370:	d003      	beq.n	801c37a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801c372:	68fb      	ldr	r3, [r7, #12]
 801c374:	2205      	movs	r2, #5
 801c376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	2200      	movs	r2, #0
 801c37e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	687a      	ldr	r2, [r7, #4]
 801c384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	887a      	ldrh	r2, [r7, #2]
 801c38a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	887a      	ldrh	r2, [r7, #2]
 801c392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	68ba      	ldr	r2, [r7, #8]
 801c39a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801c39c:	68fb      	ldr	r3, [r7, #12]
 801c39e:	887a      	ldrh	r2, [r7, #2]
 801c3a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	887a      	ldrh	r2, [r7, #2]
 801c3a6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	2200      	movs	r2, #0
 801c3b2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801c3b4:	68fb      	ldr	r3, [r7, #12]
 801c3b6:	68db      	ldr	r3, [r3, #12]
 801c3b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c3bc:	d802      	bhi.n	801c3c4 <HAL_SPI_TransmitReceive+0xe6>
 801c3be:	8a3b      	ldrh	r3, [r7, #16]
 801c3c0:	2b01      	cmp	r3, #1
 801c3c2:	d908      	bls.n	801c3d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c3c4:	68fb      	ldr	r3, [r7, #12]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	685a      	ldr	r2, [r3, #4]
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c3d2:	605a      	str	r2, [r3, #4]
 801c3d4:	e007      	b.n	801c3e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	685a      	ldr	r2, [r3, #4]
 801c3dc:	68fb      	ldr	r3, [r7, #12]
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c3e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	681b      	ldr	r3, [r3, #0]
 801c3ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c3f0:	2b40      	cmp	r3, #64	; 0x40
 801c3f2:	d007      	beq.n	801c404 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	681b      	ldr	r3, [r3, #0]
 801c3f8:	681a      	ldr	r2, [r3, #0]
 801c3fa:	68fb      	ldr	r3, [r7, #12]
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801c402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801c404:	68fb      	ldr	r3, [r7, #12]
 801c406:	68db      	ldr	r3, [r3, #12]
 801c408:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801c40c:	d97c      	bls.n	801c508 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c40e:	68fb      	ldr	r3, [r7, #12]
 801c410:	685b      	ldr	r3, [r3, #4]
 801c412:	2b00      	cmp	r3, #0
 801c414:	d002      	beq.n	801c41c <HAL_SPI_TransmitReceive+0x13e>
 801c416:	8a7b      	ldrh	r3, [r7, #18]
 801c418:	2b01      	cmp	r3, #1
 801c41a:	d169      	bne.n	801c4f0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c41c:	68fb      	ldr	r3, [r7, #12]
 801c41e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c420:	881a      	ldrh	r2, [r3, #0]
 801c422:	68fb      	ldr	r3, [r7, #12]
 801c424:	681b      	ldr	r3, [r3, #0]
 801c426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801c428:	68fb      	ldr	r3, [r7, #12]
 801c42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c42c:	1c9a      	adds	r2, r3, #2
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801c432:	68fb      	ldr	r3, [r7, #12]
 801c434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c436:	b29b      	uxth	r3, r3
 801c438:	3b01      	subs	r3, #1
 801c43a:	b29a      	uxth	r2, r3
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c440:	e056      	b.n	801c4f0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	681b      	ldr	r3, [r3, #0]
 801c446:	689b      	ldr	r3, [r3, #8]
 801c448:	f003 0302 	and.w	r3, r3, #2
 801c44c:	2b02      	cmp	r3, #2
 801c44e:	d11b      	bne.n	801c488 <HAL_SPI_TransmitReceive+0x1aa>
 801c450:	68fb      	ldr	r3, [r7, #12]
 801c452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c454:	b29b      	uxth	r3, r3
 801c456:	2b00      	cmp	r3, #0
 801c458:	d016      	beq.n	801c488 <HAL_SPI_TransmitReceive+0x1aa>
 801c45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c45c:	2b01      	cmp	r3, #1
 801c45e:	d113      	bne.n	801c488 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c464:	881a      	ldrh	r2, [r3, #0]
 801c466:	68fb      	ldr	r3, [r7, #12]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c470:	1c9a      	adds	r2, r3, #2
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c47a:	b29b      	uxth	r3, r3
 801c47c:	3b01      	subs	r3, #1
 801c47e:	b29a      	uxth	r2, r3
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c484:	2300      	movs	r3, #0
 801c486:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c488:	68fb      	ldr	r3, [r7, #12]
 801c48a:	681b      	ldr	r3, [r3, #0]
 801c48c:	689b      	ldr	r3, [r3, #8]
 801c48e:	f003 0301 	and.w	r3, r3, #1
 801c492:	2b01      	cmp	r3, #1
 801c494:	d11c      	bne.n	801c4d0 <HAL_SPI_TransmitReceive+0x1f2>
 801c496:	68fb      	ldr	r3, [r7, #12]
 801c498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c49c:	b29b      	uxth	r3, r3
 801c49e:	2b00      	cmp	r3, #0
 801c4a0:	d016      	beq.n	801c4d0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	68da      	ldr	r2, [r3, #12]
 801c4a8:	68fb      	ldr	r3, [r7, #12]
 801c4aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4ac:	b292      	uxth	r2, r2
 801c4ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801c4b0:	68fb      	ldr	r3, [r7, #12]
 801c4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c4b4:	1c9a      	adds	r2, r3, #2
 801c4b6:	68fb      	ldr	r3, [r7, #12]
 801c4b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c4c0:	b29b      	uxth	r3, r3
 801c4c2:	3b01      	subs	r3, #1
 801c4c4:	b29a      	uxth	r2, r3
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c4cc:	2301      	movs	r3, #1
 801c4ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801c4d0:	f7fb f9bc 	bl	801784c <HAL_GetTick>
 801c4d4:	4602      	mov	r2, r0
 801c4d6:	69fb      	ldr	r3, [r7, #28]
 801c4d8:	1ad3      	subs	r3, r2, r3
 801c4da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c4dc:	429a      	cmp	r2, r3
 801c4de:	d807      	bhi.n	801c4f0 <HAL_SPI_TransmitReceive+0x212>
 801c4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4e6:	d003      	beq.n	801c4f0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801c4e8:	2303      	movs	r3, #3
 801c4ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c4ee:	e0fb      	b.n	801c6e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c4f0:	68fb      	ldr	r3, [r7, #12]
 801c4f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c4f4:	b29b      	uxth	r3, r3
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	d1a3      	bne.n	801c442 <HAL_SPI_TransmitReceive+0x164>
 801c4fa:	68fb      	ldr	r3, [r7, #12]
 801c4fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c500:	b29b      	uxth	r3, r3
 801c502:	2b00      	cmp	r3, #0
 801c504:	d19d      	bne.n	801c442 <HAL_SPI_TransmitReceive+0x164>
 801c506:	e0df      	b.n	801c6c8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801c508:	68fb      	ldr	r3, [r7, #12]
 801c50a:	685b      	ldr	r3, [r3, #4]
 801c50c:	2b00      	cmp	r3, #0
 801c50e:	d003      	beq.n	801c518 <HAL_SPI_TransmitReceive+0x23a>
 801c510:	8a7b      	ldrh	r3, [r7, #18]
 801c512:	2b01      	cmp	r3, #1
 801c514:	f040 80cb 	bne.w	801c6ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c51c:	b29b      	uxth	r3, r3
 801c51e:	2b01      	cmp	r3, #1
 801c520:	d912      	bls.n	801c548 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c522:	68fb      	ldr	r3, [r7, #12]
 801c524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c526:	881a      	ldrh	r2, [r3, #0]
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801c52e:	68fb      	ldr	r3, [r7, #12]
 801c530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c532:	1c9a      	adds	r2, r3, #2
 801c534:	68fb      	ldr	r3, [r7, #12]
 801c536:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c53c:	b29b      	uxth	r3, r3
 801c53e:	3b02      	subs	r3, #2
 801c540:	b29a      	uxth	r2, r3
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c546:	e0b2      	b.n	801c6ae <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c548:	68fb      	ldr	r3, [r7, #12]
 801c54a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	681b      	ldr	r3, [r3, #0]
 801c550:	330c      	adds	r3, #12
 801c552:	7812      	ldrb	r2, [r2, #0]
 801c554:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801c556:	68fb      	ldr	r3, [r7, #12]
 801c558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c55a:	1c5a      	adds	r2, r3, #1
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801c560:	68fb      	ldr	r3, [r7, #12]
 801c562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c564:	b29b      	uxth	r3, r3
 801c566:	3b01      	subs	r3, #1
 801c568:	b29a      	uxth	r2, r3
 801c56a:	68fb      	ldr	r3, [r7, #12]
 801c56c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c56e:	e09e      	b.n	801c6ae <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801c570:	68fb      	ldr	r3, [r7, #12]
 801c572:	681b      	ldr	r3, [r3, #0]
 801c574:	689b      	ldr	r3, [r3, #8]
 801c576:	f003 0302 	and.w	r3, r3, #2
 801c57a:	2b02      	cmp	r3, #2
 801c57c:	d134      	bne.n	801c5e8 <HAL_SPI_TransmitReceive+0x30a>
 801c57e:	68fb      	ldr	r3, [r7, #12]
 801c580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c582:	b29b      	uxth	r3, r3
 801c584:	2b00      	cmp	r3, #0
 801c586:	d02f      	beq.n	801c5e8 <HAL_SPI_TransmitReceive+0x30a>
 801c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c58a:	2b01      	cmp	r3, #1
 801c58c:	d12c      	bne.n	801c5e8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c592:	b29b      	uxth	r3, r3
 801c594:	2b01      	cmp	r3, #1
 801c596:	d912      	bls.n	801c5be <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801c598:	68fb      	ldr	r3, [r7, #12]
 801c59a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c59c:	881a      	ldrh	r2, [r3, #0]
 801c59e:	68fb      	ldr	r3, [r7, #12]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5a8:	1c9a      	adds	r2, r3, #2
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801c5ae:	68fb      	ldr	r3, [r7, #12]
 801c5b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5b2:	b29b      	uxth	r3, r3
 801c5b4:	3b02      	subs	r3, #2
 801c5b6:	b29a      	uxth	r2, r3
 801c5b8:	68fb      	ldr	r3, [r7, #12]
 801c5ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 801c5bc:	e012      	b.n	801c5e4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801c5be:	68fb      	ldr	r3, [r7, #12]
 801c5c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c5c2:	68fb      	ldr	r3, [r7, #12]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	330c      	adds	r3, #12
 801c5c8:	7812      	ldrb	r2, [r2, #0]
 801c5ca:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801c5cc:	68fb      	ldr	r3, [r7, #12]
 801c5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c5d0:	1c5a      	adds	r2, r3, #1
 801c5d2:	68fb      	ldr	r3, [r7, #12]
 801c5d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801c5d6:	68fb      	ldr	r3, [r7, #12]
 801c5d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c5da:	b29b      	uxth	r3, r3
 801c5dc:	3b01      	subs	r3, #1
 801c5de:	b29a      	uxth	r2, r3
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801c5e4:	2300      	movs	r3, #0
 801c5e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801c5e8:	68fb      	ldr	r3, [r7, #12]
 801c5ea:	681b      	ldr	r3, [r3, #0]
 801c5ec:	689b      	ldr	r3, [r3, #8]
 801c5ee:	f003 0301 	and.w	r3, r3, #1
 801c5f2:	2b01      	cmp	r3, #1
 801c5f4:	d148      	bne.n	801c688 <HAL_SPI_TransmitReceive+0x3aa>
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c5fc:	b29b      	uxth	r3, r3
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d042      	beq.n	801c688 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801c602:	68fb      	ldr	r3, [r7, #12]
 801c604:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c608:	b29b      	uxth	r3, r3
 801c60a:	2b01      	cmp	r3, #1
 801c60c:	d923      	bls.n	801c656 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801c60e:	68fb      	ldr	r3, [r7, #12]
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	68da      	ldr	r2, [r3, #12]
 801c614:	68fb      	ldr	r3, [r7, #12]
 801c616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c618:	b292      	uxth	r2, r2
 801c61a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801c61c:	68fb      	ldr	r3, [r7, #12]
 801c61e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c620:	1c9a      	adds	r2, r3, #2
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c62c:	b29b      	uxth	r3, r3
 801c62e:	3b02      	subs	r3, #2
 801c630:	b29a      	uxth	r2, r3
 801c632:	68fb      	ldr	r3, [r7, #12]
 801c634:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801c638:	68fb      	ldr	r3, [r7, #12]
 801c63a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c63e:	b29b      	uxth	r3, r3
 801c640:	2b01      	cmp	r3, #1
 801c642:	d81f      	bhi.n	801c684 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	685a      	ldr	r2, [r3, #4]
 801c64a:	68fb      	ldr	r3, [r7, #12]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801c652:	605a      	str	r2, [r3, #4]
 801c654:	e016      	b.n	801c684 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801c656:	68fb      	ldr	r3, [r7, #12]
 801c658:	681b      	ldr	r3, [r3, #0]
 801c65a:	f103 020c 	add.w	r2, r3, #12
 801c65e:	68fb      	ldr	r3, [r7, #12]
 801c660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c662:	7812      	ldrb	r2, [r2, #0]
 801c664:	b2d2      	uxtb	r2, r2
 801c666:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c66c:	1c5a      	adds	r2, r3, #1
 801c66e:	68fb      	ldr	r3, [r7, #12]
 801c670:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801c672:	68fb      	ldr	r3, [r7, #12]
 801c674:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c678:	b29b      	uxth	r3, r3
 801c67a:	3b01      	subs	r3, #1
 801c67c:	b29a      	uxth	r2, r3
 801c67e:	68fb      	ldr	r3, [r7, #12]
 801c680:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801c684:	2301      	movs	r3, #1
 801c686:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801c688:	f7fb f8e0 	bl	801784c <HAL_GetTick>
 801c68c:	4602      	mov	r2, r0
 801c68e:	69fb      	ldr	r3, [r7, #28]
 801c690:	1ad3      	subs	r3, r2, r3
 801c692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c694:	429a      	cmp	r2, r3
 801c696:	d803      	bhi.n	801c6a0 <HAL_SPI_TransmitReceive+0x3c2>
 801c698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c69e:	d102      	bne.n	801c6a6 <HAL_SPI_TransmitReceive+0x3c8>
 801c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c6a2:	2b00      	cmp	r3, #0
 801c6a4:	d103      	bne.n	801c6ae <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801c6a6:	2303      	movs	r3, #3
 801c6a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801c6ac:	e01c      	b.n	801c6e8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801c6ae:	68fb      	ldr	r3, [r7, #12]
 801c6b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801c6b2:	b29b      	uxth	r3, r3
 801c6b4:	2b00      	cmp	r3, #0
 801c6b6:	f47f af5b 	bne.w	801c570 <HAL_SPI_TransmitReceive+0x292>
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801c6c0:	b29b      	uxth	r3, r3
 801c6c2:	2b00      	cmp	r3, #0
 801c6c4:	f47f af54 	bne.w	801c570 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801c6c8:	69fa      	ldr	r2, [r7, #28]
 801c6ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c6cc:	68f8      	ldr	r0, [r7, #12]
 801c6ce:	f000 f98f 	bl	801c9f0 <SPI_EndRxTxTransaction>
 801c6d2:	4603      	mov	r3, r0
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	d006      	beq.n	801c6e6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801c6d8:	2301      	movs	r3, #1
 801c6da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801c6de:	68fb      	ldr	r3, [r7, #12]
 801c6e0:	2220      	movs	r2, #32
 801c6e2:	661a      	str	r2, [r3, #96]	; 0x60
 801c6e4:	e000      	b.n	801c6e8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801c6e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801c6e8:	68fb      	ldr	r3, [r7, #12]
 801c6ea:	2201      	movs	r2, #1
 801c6ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801c6f0:	68fb      	ldr	r3, [r7, #12]
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801c6f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801c6fc:	4618      	mov	r0, r3
 801c6fe:	3728      	adds	r7, #40	; 0x28
 801c700:	46bd      	mov	sp, r7
 801c702:	bd80      	pop	{r7, pc}

0801c704 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c704:	b580      	push	{r7, lr}
 801c706:	b088      	sub	sp, #32
 801c708:	af00      	add	r7, sp, #0
 801c70a:	60f8      	str	r0, [r7, #12]
 801c70c:	60b9      	str	r1, [r7, #8]
 801c70e:	603b      	str	r3, [r7, #0]
 801c710:	4613      	mov	r3, r2
 801c712:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801c714:	f7fb f89a 	bl	801784c <HAL_GetTick>
 801c718:	4602      	mov	r2, r0
 801c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c71c:	1a9b      	subs	r3, r3, r2
 801c71e:	683a      	ldr	r2, [r7, #0]
 801c720:	4413      	add	r3, r2
 801c722:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801c724:	f7fb f892 	bl	801784c <HAL_GetTick>
 801c728:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801c72a:	4b39      	ldr	r3, [pc, #228]	; (801c810 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801c72c:	681b      	ldr	r3, [r3, #0]
 801c72e:	015b      	lsls	r3, r3, #5
 801c730:	0d1b      	lsrs	r3, r3, #20
 801c732:	69fa      	ldr	r2, [r7, #28]
 801c734:	fb02 f303 	mul.w	r3, r2, r3
 801c738:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c73a:	e054      	b.n	801c7e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c742:	d050      	beq.n	801c7e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c744:	f7fb f882 	bl	801784c <HAL_GetTick>
 801c748:	4602      	mov	r2, r0
 801c74a:	69bb      	ldr	r3, [r7, #24]
 801c74c:	1ad3      	subs	r3, r2, r3
 801c74e:	69fa      	ldr	r2, [r7, #28]
 801c750:	429a      	cmp	r2, r3
 801c752:	d902      	bls.n	801c75a <SPI_WaitFlagStateUntilTimeout+0x56>
 801c754:	69fb      	ldr	r3, [r7, #28]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d13d      	bne.n	801c7d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	685a      	ldr	r2, [r3, #4]
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	681b      	ldr	r3, [r3, #0]
 801c764:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c768:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	685b      	ldr	r3, [r3, #4]
 801c76e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c772:	d111      	bne.n	801c798 <SPI_WaitFlagStateUntilTimeout+0x94>
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	689b      	ldr	r3, [r3, #8]
 801c778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c77c:	d004      	beq.n	801c788 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	689b      	ldr	r3, [r3, #8]
 801c782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c786:	d107      	bne.n	801c798 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	681b      	ldr	r3, [r3, #0]
 801c78c:	681a      	ldr	r2, [r3, #0]
 801c78e:	68fb      	ldr	r3, [r7, #12]
 801c790:	681b      	ldr	r3, [r3, #0]
 801c792:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c796:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c79c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c7a0:	d10f      	bne.n	801c7c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	681b      	ldr	r3, [r3, #0]
 801c7a6:	681a      	ldr	r2, [r3, #0]
 801c7a8:	68fb      	ldr	r3, [r7, #12]
 801c7aa:	681b      	ldr	r3, [r3, #0]
 801c7ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c7b0:	601a      	str	r2, [r3, #0]
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	681b      	ldr	r3, [r3, #0]
 801c7b6:	681a      	ldr	r2, [r3, #0]
 801c7b8:	68fb      	ldr	r3, [r7, #12]
 801c7ba:	681b      	ldr	r3, [r3, #0]
 801c7bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c7c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c7c2:	68fb      	ldr	r3, [r7, #12]
 801c7c4:	2201      	movs	r2, #1
 801c7c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c7ca:	68fb      	ldr	r3, [r7, #12]
 801c7cc:	2200      	movs	r2, #0
 801c7ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801c7d2:	2303      	movs	r3, #3
 801c7d4:	e017      	b.n	801c806 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801c7d6:	697b      	ldr	r3, [r7, #20]
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	d101      	bne.n	801c7e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801c7dc:	2300      	movs	r3, #0
 801c7de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801c7e0:	697b      	ldr	r3, [r7, #20]
 801c7e2:	3b01      	subs	r3, #1
 801c7e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801c7e6:	68fb      	ldr	r3, [r7, #12]
 801c7e8:	681b      	ldr	r3, [r3, #0]
 801c7ea:	689a      	ldr	r2, [r3, #8]
 801c7ec:	68bb      	ldr	r3, [r7, #8]
 801c7ee:	4013      	ands	r3, r2
 801c7f0:	68ba      	ldr	r2, [r7, #8]
 801c7f2:	429a      	cmp	r2, r3
 801c7f4:	bf0c      	ite	eq
 801c7f6:	2301      	moveq	r3, #1
 801c7f8:	2300      	movne	r3, #0
 801c7fa:	b2db      	uxtb	r3, r3
 801c7fc:	461a      	mov	r2, r3
 801c7fe:	79fb      	ldrb	r3, [r7, #7]
 801c800:	429a      	cmp	r2, r3
 801c802:	d19b      	bne.n	801c73c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801c804:	2300      	movs	r3, #0
}
 801c806:	4618      	mov	r0, r3
 801c808:	3720      	adds	r7, #32
 801c80a:	46bd      	mov	sp, r7
 801c80c:	bd80      	pop	{r7, pc}
 801c80e:	bf00      	nop
 801c810:	20000000 	.word	0x20000000

0801c814 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801c814:	b580      	push	{r7, lr}
 801c816:	b08a      	sub	sp, #40	; 0x28
 801c818:	af00      	add	r7, sp, #0
 801c81a:	60f8      	str	r0, [r7, #12]
 801c81c:	60b9      	str	r1, [r7, #8]
 801c81e:	607a      	str	r2, [r7, #4]
 801c820:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801c822:	2300      	movs	r3, #0
 801c824:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801c826:	f7fb f811 	bl	801784c <HAL_GetTick>
 801c82a:	4602      	mov	r2, r0
 801c82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c82e:	1a9b      	subs	r3, r3, r2
 801c830:	683a      	ldr	r2, [r7, #0]
 801c832:	4413      	add	r3, r2
 801c834:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801c836:	f7fb f809 	bl	801784c <HAL_GetTick>
 801c83a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801c83c:	68fb      	ldr	r3, [r7, #12]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	330c      	adds	r3, #12
 801c842:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801c844:	4b3d      	ldr	r3, [pc, #244]	; (801c93c <SPI_WaitFifoStateUntilTimeout+0x128>)
 801c846:	681a      	ldr	r2, [r3, #0]
 801c848:	4613      	mov	r3, r2
 801c84a:	009b      	lsls	r3, r3, #2
 801c84c:	4413      	add	r3, r2
 801c84e:	00da      	lsls	r2, r3, #3
 801c850:	1ad3      	subs	r3, r2, r3
 801c852:	0d1b      	lsrs	r3, r3, #20
 801c854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c856:	fb02 f303 	mul.w	r3, r2, r3
 801c85a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801c85c:	e060      	b.n	801c920 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801c85e:	68bb      	ldr	r3, [r7, #8]
 801c860:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801c864:	d107      	bne.n	801c876 <SPI_WaitFifoStateUntilTimeout+0x62>
 801c866:	687b      	ldr	r3, [r7, #4]
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d104      	bne.n	801c876 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801c86c:	69fb      	ldr	r3, [r7, #28]
 801c86e:	781b      	ldrb	r3, [r3, #0]
 801c870:	b2db      	uxtb	r3, r3
 801c872:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801c874:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c87c:	d050      	beq.n	801c920 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801c87e:	f7fa ffe5 	bl	801784c <HAL_GetTick>
 801c882:	4602      	mov	r2, r0
 801c884:	6a3b      	ldr	r3, [r7, #32]
 801c886:	1ad3      	subs	r3, r2, r3
 801c888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c88a:	429a      	cmp	r2, r3
 801c88c:	d902      	bls.n	801c894 <SPI_WaitFifoStateUntilTimeout+0x80>
 801c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c890:	2b00      	cmp	r3, #0
 801c892:	d13d      	bne.n	801c910 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801c894:	68fb      	ldr	r3, [r7, #12]
 801c896:	681b      	ldr	r3, [r3, #0]
 801c898:	685a      	ldr	r2, [r3, #4]
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	681b      	ldr	r3, [r3, #0]
 801c89e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801c8a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c8a4:	68fb      	ldr	r3, [r7, #12]
 801c8a6:	685b      	ldr	r3, [r3, #4]
 801c8a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c8ac:	d111      	bne.n	801c8d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	689b      	ldr	r3, [r3, #8]
 801c8b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c8b6:	d004      	beq.n	801c8c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	689b      	ldr	r3, [r3, #8]
 801c8bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c8c0:	d107      	bne.n	801c8d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801c8c2:	68fb      	ldr	r3, [r7, #12]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	681a      	ldr	r2, [r3, #0]
 801c8c8:	68fb      	ldr	r3, [r7, #12]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c8d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801c8d2:	68fb      	ldr	r3, [r7, #12]
 801c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c8d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c8da:	d10f      	bne.n	801c8fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801c8dc:	68fb      	ldr	r3, [r7, #12]
 801c8de:	681b      	ldr	r3, [r3, #0]
 801c8e0:	681a      	ldr	r2, [r3, #0]
 801c8e2:	68fb      	ldr	r3, [r7, #12]
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801c8ea:	601a      	str	r2, [r3, #0]
 801c8ec:	68fb      	ldr	r3, [r7, #12]
 801c8ee:	681b      	ldr	r3, [r3, #0]
 801c8f0:	681a      	ldr	r2, [r3, #0]
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	681b      	ldr	r3, [r3, #0]
 801c8f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801c8fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801c8fc:	68fb      	ldr	r3, [r7, #12]
 801c8fe:	2201      	movs	r2, #1
 801c900:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801c904:	68fb      	ldr	r3, [r7, #12]
 801c906:	2200      	movs	r2, #0
 801c908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801c90c:	2303      	movs	r3, #3
 801c90e:	e010      	b.n	801c932 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801c910:	69bb      	ldr	r3, [r7, #24]
 801c912:	2b00      	cmp	r3, #0
 801c914:	d101      	bne.n	801c91a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801c916:	2300      	movs	r3, #0
 801c918:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801c91a:	69bb      	ldr	r3, [r7, #24]
 801c91c:	3b01      	subs	r3, #1
 801c91e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801c920:	68fb      	ldr	r3, [r7, #12]
 801c922:	681b      	ldr	r3, [r3, #0]
 801c924:	689a      	ldr	r2, [r3, #8]
 801c926:	68bb      	ldr	r3, [r7, #8]
 801c928:	4013      	ands	r3, r2
 801c92a:	687a      	ldr	r2, [r7, #4]
 801c92c:	429a      	cmp	r2, r3
 801c92e:	d196      	bne.n	801c85e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801c930:	2300      	movs	r3, #0
}
 801c932:	4618      	mov	r0, r3
 801c934:	3728      	adds	r7, #40	; 0x28
 801c936:	46bd      	mov	sp, r7
 801c938:	bd80      	pop	{r7, pc}
 801c93a:	bf00      	nop
 801c93c:	20000000 	.word	0x20000000

0801c940 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b086      	sub	sp, #24
 801c944:	af02      	add	r7, sp, #8
 801c946:	60f8      	str	r0, [r7, #12]
 801c948:	60b9      	str	r1, [r7, #8]
 801c94a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	685b      	ldr	r3, [r3, #4]
 801c950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c954:	d111      	bne.n	801c97a <SPI_EndRxTransaction+0x3a>
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	689b      	ldr	r3, [r3, #8]
 801c95a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c95e:	d004      	beq.n	801c96a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	689b      	ldr	r3, [r3, #8]
 801c964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c968:	d107      	bne.n	801c97a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801c96a:	68fb      	ldr	r3, [r7, #12]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	681a      	ldr	r2, [r3, #0]
 801c970:	68fb      	ldr	r3, [r7, #12]
 801c972:	681b      	ldr	r3, [r3, #0]
 801c974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801c978:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	9300      	str	r3, [sp, #0]
 801c97e:	68bb      	ldr	r3, [r7, #8]
 801c980:	2200      	movs	r2, #0
 801c982:	2180      	movs	r1, #128	; 0x80
 801c984:	68f8      	ldr	r0, [r7, #12]
 801c986:	f7ff febd 	bl	801c704 <SPI_WaitFlagStateUntilTimeout>
 801c98a:	4603      	mov	r3, r0
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	d007      	beq.n	801c9a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801c990:	68fb      	ldr	r3, [r7, #12]
 801c992:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c994:	f043 0220 	orr.w	r2, r3, #32
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801c99c:	2303      	movs	r3, #3
 801c99e:	e023      	b.n	801c9e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	685b      	ldr	r3, [r3, #4]
 801c9a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801c9a8:	d11d      	bne.n	801c9e6 <SPI_EndRxTransaction+0xa6>
 801c9aa:	68fb      	ldr	r3, [r7, #12]
 801c9ac:	689b      	ldr	r3, [r3, #8]
 801c9ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c9b2:	d004      	beq.n	801c9be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	689b      	ldr	r3, [r3, #8]
 801c9b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9bc:	d113      	bne.n	801c9e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	9300      	str	r3, [sp, #0]
 801c9c2:	68bb      	ldr	r3, [r7, #8]
 801c9c4:	2200      	movs	r2, #0
 801c9c6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801c9ca:	68f8      	ldr	r0, [r7, #12]
 801c9cc:	f7ff ff22 	bl	801c814 <SPI_WaitFifoStateUntilTimeout>
 801c9d0:	4603      	mov	r3, r0
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d007      	beq.n	801c9e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c9da:	f043 0220 	orr.w	r2, r3, #32
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801c9e2:	2303      	movs	r3, #3
 801c9e4:	e000      	b.n	801c9e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801c9e6:	2300      	movs	r3, #0
}
 801c9e8:	4618      	mov	r0, r3
 801c9ea:	3710      	adds	r7, #16
 801c9ec:	46bd      	mov	sp, r7
 801c9ee:	bd80      	pop	{r7, pc}

0801c9f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b086      	sub	sp, #24
 801c9f4:	af02      	add	r7, sp, #8
 801c9f6:	60f8      	str	r0, [r7, #12]
 801c9f8:	60b9      	str	r1, [r7, #8]
 801c9fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	9300      	str	r3, [sp, #0]
 801ca00:	68bb      	ldr	r3, [r7, #8]
 801ca02:	2200      	movs	r2, #0
 801ca04:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801ca08:	68f8      	ldr	r0, [r7, #12]
 801ca0a:	f7ff ff03 	bl	801c814 <SPI_WaitFifoStateUntilTimeout>
 801ca0e:	4603      	mov	r3, r0
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d007      	beq.n	801ca24 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca18:	f043 0220 	orr.w	r2, r3, #32
 801ca1c:	68fb      	ldr	r3, [r7, #12]
 801ca1e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ca20:	2303      	movs	r3, #3
 801ca22:	e027      	b.n	801ca74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	9300      	str	r3, [sp, #0]
 801ca28:	68bb      	ldr	r3, [r7, #8]
 801ca2a:	2200      	movs	r2, #0
 801ca2c:	2180      	movs	r1, #128	; 0x80
 801ca2e:	68f8      	ldr	r0, [r7, #12]
 801ca30:	f7ff fe68 	bl	801c704 <SPI_WaitFlagStateUntilTimeout>
 801ca34:	4603      	mov	r3, r0
 801ca36:	2b00      	cmp	r3, #0
 801ca38:	d007      	beq.n	801ca4a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca3a:	68fb      	ldr	r3, [r7, #12]
 801ca3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca3e:	f043 0220 	orr.w	r2, r3, #32
 801ca42:	68fb      	ldr	r3, [r7, #12]
 801ca44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ca46:	2303      	movs	r3, #3
 801ca48:	e014      	b.n	801ca74 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ca4a:	687b      	ldr	r3, [r7, #4]
 801ca4c:	9300      	str	r3, [sp, #0]
 801ca4e:	68bb      	ldr	r3, [r7, #8]
 801ca50:	2200      	movs	r2, #0
 801ca52:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ca56:	68f8      	ldr	r0, [r7, #12]
 801ca58:	f7ff fedc 	bl	801c814 <SPI_WaitFifoStateUntilTimeout>
 801ca5c:	4603      	mov	r3, r0
 801ca5e:	2b00      	cmp	r3, #0
 801ca60:	d007      	beq.n	801ca72 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ca62:	68fb      	ldr	r3, [r7, #12]
 801ca64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca66:	f043 0220 	orr.w	r2, r3, #32
 801ca6a:	68fb      	ldr	r3, [r7, #12]
 801ca6c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ca6e:	2303      	movs	r3, #3
 801ca70:	e000      	b.n	801ca74 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801ca72:	2300      	movs	r3, #0
}
 801ca74:	4618      	mov	r0, r3
 801ca76:	3710      	adds	r7, #16
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}

0801ca7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ca7c:	b580      	push	{r7, lr}
 801ca7e:	b082      	sub	sp, #8
 801ca80:	af00      	add	r7, sp, #0
 801ca82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d101      	bne.n	801ca8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ca8a:	2301      	movs	r3, #1
 801ca8c:	e049      	b.n	801cb22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ca94:	b2db      	uxtb	r3, r3
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d106      	bne.n	801caa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	2200      	movs	r2, #0
 801ca9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801caa2:	6878      	ldr	r0, [r7, #4]
 801caa4:	f7fa f88c 	bl	8016bc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	2202      	movs	r2, #2
 801caac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	681a      	ldr	r2, [r3, #0]
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	3304      	adds	r3, #4
 801cab8:	4619      	mov	r1, r3
 801caba:	4610      	mov	r0, r2
 801cabc:	f000 fd6c 	bl	801d598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	2201      	movs	r2, #1
 801cac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cac8:	687b      	ldr	r3, [r7, #4]
 801caca:	2201      	movs	r2, #1
 801cacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	2201      	movs	r2, #1
 801cad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	2201      	movs	r2, #1
 801cadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	2201      	movs	r2, #1
 801cae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	2201      	movs	r2, #1
 801caec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801caf0:	687b      	ldr	r3, [r7, #4]
 801caf2:	2201      	movs	r2, #1
 801caf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	2201      	movs	r2, #1
 801cafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	2201      	movs	r2, #1
 801cb04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	2201      	movs	r2, #1
 801cb0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801cb10:	687b      	ldr	r3, [r7, #4]
 801cb12:	2201      	movs	r2, #1
 801cb14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	2201      	movs	r2, #1
 801cb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801cb20:	2300      	movs	r3, #0
}
 801cb22:	4618      	mov	r0, r3
 801cb24:	3708      	adds	r7, #8
 801cb26:	46bd      	mov	sp, r7
 801cb28:	bd80      	pop	{r7, pc}
	...

0801cb2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801cb2c:	b480      	push	{r7}
 801cb2e:	b085      	sub	sp, #20
 801cb30:	af00      	add	r7, sp, #0
 801cb32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cb3a:	b2db      	uxtb	r3, r3
 801cb3c:	2b01      	cmp	r3, #1
 801cb3e:	d001      	beq.n	801cb44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801cb40:	2301      	movs	r3, #1
 801cb42:	e04f      	b.n	801cbe4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cb44:	687b      	ldr	r3, [r7, #4]
 801cb46:	2202      	movs	r2, #2
 801cb48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	68da      	ldr	r2, [r3, #12]
 801cb52:	687b      	ldr	r3, [r7, #4]
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	f042 0201 	orr.w	r2, r2, #1
 801cb5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801cb5c:	687b      	ldr	r3, [r7, #4]
 801cb5e:	681b      	ldr	r3, [r3, #0]
 801cb60:	4a23      	ldr	r2, [pc, #140]	; (801cbf0 <HAL_TIM_Base_Start_IT+0xc4>)
 801cb62:	4293      	cmp	r3, r2
 801cb64:	d01d      	beq.n	801cba2 <HAL_TIM_Base_Start_IT+0x76>
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	681b      	ldr	r3, [r3, #0]
 801cb6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cb6e:	d018      	beq.n	801cba2 <HAL_TIM_Base_Start_IT+0x76>
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	681b      	ldr	r3, [r3, #0]
 801cb74:	4a1f      	ldr	r2, [pc, #124]	; (801cbf4 <HAL_TIM_Base_Start_IT+0xc8>)
 801cb76:	4293      	cmp	r3, r2
 801cb78:	d013      	beq.n	801cba2 <HAL_TIM_Base_Start_IT+0x76>
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	681b      	ldr	r3, [r3, #0]
 801cb7e:	4a1e      	ldr	r2, [pc, #120]	; (801cbf8 <HAL_TIM_Base_Start_IT+0xcc>)
 801cb80:	4293      	cmp	r3, r2
 801cb82:	d00e      	beq.n	801cba2 <HAL_TIM_Base_Start_IT+0x76>
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	681b      	ldr	r3, [r3, #0]
 801cb88:	4a1c      	ldr	r2, [pc, #112]	; (801cbfc <HAL_TIM_Base_Start_IT+0xd0>)
 801cb8a:	4293      	cmp	r3, r2
 801cb8c:	d009      	beq.n	801cba2 <HAL_TIM_Base_Start_IT+0x76>
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	681b      	ldr	r3, [r3, #0]
 801cb92:	4a1b      	ldr	r2, [pc, #108]	; (801cc00 <HAL_TIM_Base_Start_IT+0xd4>)
 801cb94:	4293      	cmp	r3, r2
 801cb96:	d004      	beq.n	801cba2 <HAL_TIM_Base_Start_IT+0x76>
 801cb98:	687b      	ldr	r3, [r7, #4]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	4a19      	ldr	r2, [pc, #100]	; (801cc04 <HAL_TIM_Base_Start_IT+0xd8>)
 801cb9e:	4293      	cmp	r3, r2
 801cba0:	d115      	bne.n	801cbce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	681b      	ldr	r3, [r3, #0]
 801cba6:	689a      	ldr	r2, [r3, #8]
 801cba8:	4b17      	ldr	r3, [pc, #92]	; (801cc08 <HAL_TIM_Base_Start_IT+0xdc>)
 801cbaa:	4013      	ands	r3, r2
 801cbac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbae:	68fb      	ldr	r3, [r7, #12]
 801cbb0:	2b06      	cmp	r3, #6
 801cbb2:	d015      	beq.n	801cbe0 <HAL_TIM_Base_Start_IT+0xb4>
 801cbb4:	68fb      	ldr	r3, [r7, #12]
 801cbb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbba:	d011      	beq.n	801cbe0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801cbbc:	687b      	ldr	r3, [r7, #4]
 801cbbe:	681b      	ldr	r3, [r3, #0]
 801cbc0:	681a      	ldr	r2, [r3, #0]
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	681b      	ldr	r3, [r3, #0]
 801cbc6:	f042 0201 	orr.w	r2, r2, #1
 801cbca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbcc:	e008      	b.n	801cbe0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	681b      	ldr	r3, [r3, #0]
 801cbd2:	681a      	ldr	r2, [r3, #0]
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	681b      	ldr	r3, [r3, #0]
 801cbd8:	f042 0201 	orr.w	r2, r2, #1
 801cbdc:	601a      	str	r2, [r3, #0]
 801cbde:	e000      	b.n	801cbe2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cbe0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cbe2:	2300      	movs	r3, #0
}
 801cbe4:	4618      	mov	r0, r3
 801cbe6:	3714      	adds	r7, #20
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbee:	4770      	bx	lr
 801cbf0:	40012c00 	.word	0x40012c00
 801cbf4:	40000400 	.word	0x40000400
 801cbf8:	40000800 	.word	0x40000800
 801cbfc:	40013400 	.word	0x40013400
 801cc00:	40014000 	.word	0x40014000
 801cc04:	40015000 	.word	0x40015000
 801cc08:	00010007 	.word	0x00010007

0801cc0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801cc0c:	b580      	push	{r7, lr}
 801cc0e:	b082      	sub	sp, #8
 801cc10:	af00      	add	r7, sp, #0
 801cc12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d101      	bne.n	801cc1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801cc1a:	2301      	movs	r3, #1
 801cc1c:	e049      	b.n	801ccb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801cc24:	b2db      	uxtb	r3, r3
 801cc26:	2b00      	cmp	r3, #0
 801cc28:	d106      	bne.n	801cc38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801cc2a:	687b      	ldr	r3, [r7, #4]
 801cc2c:	2200      	movs	r2, #0
 801cc2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801cc32:	6878      	ldr	r0, [r7, #4]
 801cc34:	f7f9 fffe 	bl	8016c34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	2202      	movs	r2, #2
 801cc3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	681a      	ldr	r2, [r3, #0]
 801cc44:	687b      	ldr	r3, [r7, #4]
 801cc46:	3304      	adds	r3, #4
 801cc48:	4619      	mov	r1, r3
 801cc4a:	4610      	mov	r0, r2
 801cc4c:	f000 fca4 	bl	801d598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	2201      	movs	r2, #1
 801cc54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	2201      	movs	r2, #1
 801cc5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	2201      	movs	r2, #1
 801cc64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	2201      	movs	r2, #1
 801cc6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	2201      	movs	r2, #1
 801cc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	2201      	movs	r2, #1
 801cc7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	2201      	movs	r2, #1
 801cc84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801cc88:	687b      	ldr	r3, [r7, #4]
 801cc8a:	2201      	movs	r2, #1
 801cc8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2201      	movs	r2, #1
 801cc94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801cc98:	687b      	ldr	r3, [r7, #4]
 801cc9a:	2201      	movs	r2, #1
 801cc9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	2201      	movs	r2, #1
 801cca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	2201      	movs	r2, #1
 801ccac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ccb0:	2300      	movs	r3, #0
}
 801ccb2:	4618      	mov	r0, r3
 801ccb4:	3708      	adds	r7, #8
 801ccb6:	46bd      	mov	sp, r7
 801ccb8:	bd80      	pop	{r7, pc}
	...

0801ccbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ccbc:	b580      	push	{r7, lr}
 801ccbe:	b084      	sub	sp, #16
 801ccc0:	af00      	add	r7, sp, #0
 801ccc2:	6078      	str	r0, [r7, #4]
 801ccc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ccc6:	683b      	ldr	r3, [r7, #0]
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	d109      	bne.n	801cce0 <HAL_TIM_PWM_Start+0x24>
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ccd2:	b2db      	uxtb	r3, r3
 801ccd4:	2b01      	cmp	r3, #1
 801ccd6:	bf14      	ite	ne
 801ccd8:	2301      	movne	r3, #1
 801ccda:	2300      	moveq	r3, #0
 801ccdc:	b2db      	uxtb	r3, r3
 801ccde:	e03c      	b.n	801cd5a <HAL_TIM_PWM_Start+0x9e>
 801cce0:	683b      	ldr	r3, [r7, #0]
 801cce2:	2b04      	cmp	r3, #4
 801cce4:	d109      	bne.n	801ccfa <HAL_TIM_PWM_Start+0x3e>
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ccec:	b2db      	uxtb	r3, r3
 801ccee:	2b01      	cmp	r3, #1
 801ccf0:	bf14      	ite	ne
 801ccf2:	2301      	movne	r3, #1
 801ccf4:	2300      	moveq	r3, #0
 801ccf6:	b2db      	uxtb	r3, r3
 801ccf8:	e02f      	b.n	801cd5a <HAL_TIM_PWM_Start+0x9e>
 801ccfa:	683b      	ldr	r3, [r7, #0]
 801ccfc:	2b08      	cmp	r3, #8
 801ccfe:	d109      	bne.n	801cd14 <HAL_TIM_PWM_Start+0x58>
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801cd06:	b2db      	uxtb	r3, r3
 801cd08:	2b01      	cmp	r3, #1
 801cd0a:	bf14      	ite	ne
 801cd0c:	2301      	movne	r3, #1
 801cd0e:	2300      	moveq	r3, #0
 801cd10:	b2db      	uxtb	r3, r3
 801cd12:	e022      	b.n	801cd5a <HAL_TIM_PWM_Start+0x9e>
 801cd14:	683b      	ldr	r3, [r7, #0]
 801cd16:	2b0c      	cmp	r3, #12
 801cd18:	d109      	bne.n	801cd2e <HAL_TIM_PWM_Start+0x72>
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801cd20:	b2db      	uxtb	r3, r3
 801cd22:	2b01      	cmp	r3, #1
 801cd24:	bf14      	ite	ne
 801cd26:	2301      	movne	r3, #1
 801cd28:	2300      	moveq	r3, #0
 801cd2a:	b2db      	uxtb	r3, r3
 801cd2c:	e015      	b.n	801cd5a <HAL_TIM_PWM_Start+0x9e>
 801cd2e:	683b      	ldr	r3, [r7, #0]
 801cd30:	2b10      	cmp	r3, #16
 801cd32:	d109      	bne.n	801cd48 <HAL_TIM_PWM_Start+0x8c>
 801cd34:	687b      	ldr	r3, [r7, #4]
 801cd36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801cd3a:	b2db      	uxtb	r3, r3
 801cd3c:	2b01      	cmp	r3, #1
 801cd3e:	bf14      	ite	ne
 801cd40:	2301      	movne	r3, #1
 801cd42:	2300      	moveq	r3, #0
 801cd44:	b2db      	uxtb	r3, r3
 801cd46:	e008      	b.n	801cd5a <HAL_TIM_PWM_Start+0x9e>
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	2b01      	cmp	r3, #1
 801cd52:	bf14      	ite	ne
 801cd54:	2301      	movne	r3, #1
 801cd56:	2300      	moveq	r3, #0
 801cd58:	b2db      	uxtb	r3, r3
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	d001      	beq.n	801cd62 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801cd5e:	2301      	movs	r3, #1
 801cd60:	e0a1      	b.n	801cea6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801cd62:	683b      	ldr	r3, [r7, #0]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d104      	bne.n	801cd72 <HAL_TIM_PWM_Start+0xb6>
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	2202      	movs	r2, #2
 801cd6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cd70:	e023      	b.n	801cdba <HAL_TIM_PWM_Start+0xfe>
 801cd72:	683b      	ldr	r3, [r7, #0]
 801cd74:	2b04      	cmp	r3, #4
 801cd76:	d104      	bne.n	801cd82 <HAL_TIM_PWM_Start+0xc6>
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	2202      	movs	r2, #2
 801cd7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cd80:	e01b      	b.n	801cdba <HAL_TIM_PWM_Start+0xfe>
 801cd82:	683b      	ldr	r3, [r7, #0]
 801cd84:	2b08      	cmp	r3, #8
 801cd86:	d104      	bne.n	801cd92 <HAL_TIM_PWM_Start+0xd6>
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	2202      	movs	r2, #2
 801cd8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cd90:	e013      	b.n	801cdba <HAL_TIM_PWM_Start+0xfe>
 801cd92:	683b      	ldr	r3, [r7, #0]
 801cd94:	2b0c      	cmp	r3, #12
 801cd96:	d104      	bne.n	801cda2 <HAL_TIM_PWM_Start+0xe6>
 801cd98:	687b      	ldr	r3, [r7, #4]
 801cd9a:	2202      	movs	r2, #2
 801cd9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cda0:	e00b      	b.n	801cdba <HAL_TIM_PWM_Start+0xfe>
 801cda2:	683b      	ldr	r3, [r7, #0]
 801cda4:	2b10      	cmp	r3, #16
 801cda6:	d104      	bne.n	801cdb2 <HAL_TIM_PWM_Start+0xf6>
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	2202      	movs	r2, #2
 801cdac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cdb0:	e003      	b.n	801cdba <HAL_TIM_PWM_Start+0xfe>
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	2202      	movs	r2, #2
 801cdb6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	681b      	ldr	r3, [r3, #0]
 801cdbe:	2201      	movs	r2, #1
 801cdc0:	6839      	ldr	r1, [r7, #0]
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f000 ffb0 	bl	801dd28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	681b      	ldr	r3, [r3, #0]
 801cdcc:	4a38      	ldr	r2, [pc, #224]	; (801ceb0 <HAL_TIM_PWM_Start+0x1f4>)
 801cdce:	4293      	cmp	r3, r2
 801cdd0:	d018      	beq.n	801ce04 <HAL_TIM_PWM_Start+0x148>
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	4a37      	ldr	r2, [pc, #220]	; (801ceb4 <HAL_TIM_PWM_Start+0x1f8>)
 801cdd8:	4293      	cmp	r3, r2
 801cdda:	d013      	beq.n	801ce04 <HAL_TIM_PWM_Start+0x148>
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	681b      	ldr	r3, [r3, #0]
 801cde0:	4a35      	ldr	r2, [pc, #212]	; (801ceb8 <HAL_TIM_PWM_Start+0x1fc>)
 801cde2:	4293      	cmp	r3, r2
 801cde4:	d00e      	beq.n	801ce04 <HAL_TIM_PWM_Start+0x148>
 801cde6:	687b      	ldr	r3, [r7, #4]
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	4a34      	ldr	r2, [pc, #208]	; (801cebc <HAL_TIM_PWM_Start+0x200>)
 801cdec:	4293      	cmp	r3, r2
 801cdee:	d009      	beq.n	801ce04 <HAL_TIM_PWM_Start+0x148>
 801cdf0:	687b      	ldr	r3, [r7, #4]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	4a32      	ldr	r2, [pc, #200]	; (801cec0 <HAL_TIM_PWM_Start+0x204>)
 801cdf6:	4293      	cmp	r3, r2
 801cdf8:	d004      	beq.n	801ce04 <HAL_TIM_PWM_Start+0x148>
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	4a31      	ldr	r2, [pc, #196]	; (801cec4 <HAL_TIM_PWM_Start+0x208>)
 801ce00:	4293      	cmp	r3, r2
 801ce02:	d101      	bne.n	801ce08 <HAL_TIM_PWM_Start+0x14c>
 801ce04:	2301      	movs	r3, #1
 801ce06:	e000      	b.n	801ce0a <HAL_TIM_PWM_Start+0x14e>
 801ce08:	2300      	movs	r3, #0
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d007      	beq.n	801ce1e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ce0e:	687b      	ldr	r3, [r7, #4]
 801ce10:	681b      	ldr	r3, [r3, #0]
 801ce12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ce1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	681b      	ldr	r3, [r3, #0]
 801ce22:	4a23      	ldr	r2, [pc, #140]	; (801ceb0 <HAL_TIM_PWM_Start+0x1f4>)
 801ce24:	4293      	cmp	r3, r2
 801ce26:	d01d      	beq.n	801ce64 <HAL_TIM_PWM_Start+0x1a8>
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	681b      	ldr	r3, [r3, #0]
 801ce2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ce30:	d018      	beq.n	801ce64 <HAL_TIM_PWM_Start+0x1a8>
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	681b      	ldr	r3, [r3, #0]
 801ce36:	4a24      	ldr	r2, [pc, #144]	; (801cec8 <HAL_TIM_PWM_Start+0x20c>)
 801ce38:	4293      	cmp	r3, r2
 801ce3a:	d013      	beq.n	801ce64 <HAL_TIM_PWM_Start+0x1a8>
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	4a22      	ldr	r2, [pc, #136]	; (801cecc <HAL_TIM_PWM_Start+0x210>)
 801ce42:	4293      	cmp	r3, r2
 801ce44:	d00e      	beq.n	801ce64 <HAL_TIM_PWM_Start+0x1a8>
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	681b      	ldr	r3, [r3, #0]
 801ce4a:	4a1a      	ldr	r2, [pc, #104]	; (801ceb4 <HAL_TIM_PWM_Start+0x1f8>)
 801ce4c:	4293      	cmp	r3, r2
 801ce4e:	d009      	beq.n	801ce64 <HAL_TIM_PWM_Start+0x1a8>
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	681b      	ldr	r3, [r3, #0]
 801ce54:	4a18      	ldr	r2, [pc, #96]	; (801ceb8 <HAL_TIM_PWM_Start+0x1fc>)
 801ce56:	4293      	cmp	r3, r2
 801ce58:	d004      	beq.n	801ce64 <HAL_TIM_PWM_Start+0x1a8>
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	4a19      	ldr	r2, [pc, #100]	; (801cec4 <HAL_TIM_PWM_Start+0x208>)
 801ce60:	4293      	cmp	r3, r2
 801ce62:	d115      	bne.n	801ce90 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	681b      	ldr	r3, [r3, #0]
 801ce68:	689a      	ldr	r2, [r3, #8]
 801ce6a:	4b19      	ldr	r3, [pc, #100]	; (801ced0 <HAL_TIM_PWM_Start+0x214>)
 801ce6c:	4013      	ands	r3, r2
 801ce6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce70:	68fb      	ldr	r3, [r7, #12]
 801ce72:	2b06      	cmp	r3, #6
 801ce74:	d015      	beq.n	801cea2 <HAL_TIM_PWM_Start+0x1e6>
 801ce76:	68fb      	ldr	r3, [r7, #12]
 801ce78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ce7c:	d011      	beq.n	801cea2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	681a      	ldr	r2, [r3, #0]
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	f042 0201 	orr.w	r2, r2, #1
 801ce8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ce8e:	e008      	b.n	801cea2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	681a      	ldr	r2, [r3, #0]
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	f042 0201 	orr.w	r2, r2, #1
 801ce9e:	601a      	str	r2, [r3, #0]
 801cea0:	e000      	b.n	801cea4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801cea2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801cea4:	2300      	movs	r3, #0
}
 801cea6:	4618      	mov	r0, r3
 801cea8:	3710      	adds	r7, #16
 801ceaa:	46bd      	mov	sp, r7
 801ceac:	bd80      	pop	{r7, pc}
 801ceae:	bf00      	nop
 801ceb0:	40012c00 	.word	0x40012c00
 801ceb4:	40013400 	.word	0x40013400
 801ceb8:	40014000 	.word	0x40014000
 801cebc:	40014400 	.word	0x40014400
 801cec0:	40014800 	.word	0x40014800
 801cec4:	40015000 	.word	0x40015000
 801cec8:	40000400 	.word	0x40000400
 801cecc:	40000800 	.word	0x40000800
 801ced0:	00010007 	.word	0x00010007

0801ced4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ced4:	b580      	push	{r7, lr}
 801ced6:	b082      	sub	sp, #8
 801ced8:	af00      	add	r7, sp, #0
 801ceda:	6078      	str	r0, [r7, #4]
 801cedc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	681b      	ldr	r3, [r3, #0]
 801cee2:	2200      	movs	r2, #0
 801cee4:	6839      	ldr	r1, [r7, #0]
 801cee6:	4618      	mov	r0, r3
 801cee8:	f000 ff1e 	bl	801dd28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	4a40      	ldr	r2, [pc, #256]	; (801cff4 <HAL_TIM_PWM_Stop+0x120>)
 801cef2:	4293      	cmp	r3, r2
 801cef4:	d018      	beq.n	801cf28 <HAL_TIM_PWM_Stop+0x54>
 801cef6:	687b      	ldr	r3, [r7, #4]
 801cef8:	681b      	ldr	r3, [r3, #0]
 801cefa:	4a3f      	ldr	r2, [pc, #252]	; (801cff8 <HAL_TIM_PWM_Stop+0x124>)
 801cefc:	4293      	cmp	r3, r2
 801cefe:	d013      	beq.n	801cf28 <HAL_TIM_PWM_Stop+0x54>
 801cf00:	687b      	ldr	r3, [r7, #4]
 801cf02:	681b      	ldr	r3, [r3, #0]
 801cf04:	4a3d      	ldr	r2, [pc, #244]	; (801cffc <HAL_TIM_PWM_Stop+0x128>)
 801cf06:	4293      	cmp	r3, r2
 801cf08:	d00e      	beq.n	801cf28 <HAL_TIM_PWM_Stop+0x54>
 801cf0a:	687b      	ldr	r3, [r7, #4]
 801cf0c:	681b      	ldr	r3, [r3, #0]
 801cf0e:	4a3c      	ldr	r2, [pc, #240]	; (801d000 <HAL_TIM_PWM_Stop+0x12c>)
 801cf10:	4293      	cmp	r3, r2
 801cf12:	d009      	beq.n	801cf28 <HAL_TIM_PWM_Stop+0x54>
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	4a3a      	ldr	r2, [pc, #232]	; (801d004 <HAL_TIM_PWM_Stop+0x130>)
 801cf1a:	4293      	cmp	r3, r2
 801cf1c:	d004      	beq.n	801cf28 <HAL_TIM_PWM_Stop+0x54>
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	681b      	ldr	r3, [r3, #0]
 801cf22:	4a39      	ldr	r2, [pc, #228]	; (801d008 <HAL_TIM_PWM_Stop+0x134>)
 801cf24:	4293      	cmp	r3, r2
 801cf26:	d101      	bne.n	801cf2c <HAL_TIM_PWM_Stop+0x58>
 801cf28:	2301      	movs	r3, #1
 801cf2a:	e000      	b.n	801cf2e <HAL_TIM_PWM_Stop+0x5a>
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	2b00      	cmp	r3, #0
 801cf30:	d017      	beq.n	801cf62 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801cf32:	687b      	ldr	r3, [r7, #4]
 801cf34:	681b      	ldr	r3, [r3, #0]
 801cf36:	6a1a      	ldr	r2, [r3, #32]
 801cf38:	f241 1311 	movw	r3, #4369	; 0x1111
 801cf3c:	4013      	ands	r3, r2
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d10f      	bne.n	801cf62 <HAL_TIM_PWM_Stop+0x8e>
 801cf42:	687b      	ldr	r3, [r7, #4]
 801cf44:	681b      	ldr	r3, [r3, #0]
 801cf46:	6a1a      	ldr	r2, [r3, #32]
 801cf48:	f244 4344 	movw	r3, #17476	; 0x4444
 801cf4c:	4013      	ands	r3, r2
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d107      	bne.n	801cf62 <HAL_TIM_PWM_Stop+0x8e>
 801cf52:	687b      	ldr	r3, [r7, #4]
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801cf58:	687b      	ldr	r3, [r7, #4]
 801cf5a:	681b      	ldr	r3, [r3, #0]
 801cf5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801cf60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	681b      	ldr	r3, [r3, #0]
 801cf66:	6a1a      	ldr	r2, [r3, #32]
 801cf68:	f241 1311 	movw	r3, #4369	; 0x1111
 801cf6c:	4013      	ands	r3, r2
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d10f      	bne.n	801cf92 <HAL_TIM_PWM_Stop+0xbe>
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	6a1a      	ldr	r2, [r3, #32]
 801cf78:	f244 4344 	movw	r3, #17476	; 0x4444
 801cf7c:	4013      	ands	r3, r2
 801cf7e:	2b00      	cmp	r3, #0
 801cf80:	d107      	bne.n	801cf92 <HAL_TIM_PWM_Stop+0xbe>
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	681b      	ldr	r3, [r3, #0]
 801cf86:	681a      	ldr	r2, [r3, #0]
 801cf88:	687b      	ldr	r3, [r7, #4]
 801cf8a:	681b      	ldr	r3, [r3, #0]
 801cf8c:	f022 0201 	bic.w	r2, r2, #1
 801cf90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801cf92:	683b      	ldr	r3, [r7, #0]
 801cf94:	2b00      	cmp	r3, #0
 801cf96:	d104      	bne.n	801cfa2 <HAL_TIM_PWM_Stop+0xce>
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	2201      	movs	r2, #1
 801cf9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801cfa0:	e023      	b.n	801cfea <HAL_TIM_PWM_Stop+0x116>
 801cfa2:	683b      	ldr	r3, [r7, #0]
 801cfa4:	2b04      	cmp	r3, #4
 801cfa6:	d104      	bne.n	801cfb2 <HAL_TIM_PWM_Stop+0xde>
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	2201      	movs	r2, #1
 801cfac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801cfb0:	e01b      	b.n	801cfea <HAL_TIM_PWM_Stop+0x116>
 801cfb2:	683b      	ldr	r3, [r7, #0]
 801cfb4:	2b08      	cmp	r3, #8
 801cfb6:	d104      	bne.n	801cfc2 <HAL_TIM_PWM_Stop+0xee>
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	2201      	movs	r2, #1
 801cfbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801cfc0:	e013      	b.n	801cfea <HAL_TIM_PWM_Stop+0x116>
 801cfc2:	683b      	ldr	r3, [r7, #0]
 801cfc4:	2b0c      	cmp	r3, #12
 801cfc6:	d104      	bne.n	801cfd2 <HAL_TIM_PWM_Stop+0xfe>
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	2201      	movs	r2, #1
 801cfcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801cfd0:	e00b      	b.n	801cfea <HAL_TIM_PWM_Stop+0x116>
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	2b10      	cmp	r3, #16
 801cfd6:	d104      	bne.n	801cfe2 <HAL_TIM_PWM_Stop+0x10e>
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	2201      	movs	r2, #1
 801cfdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801cfe0:	e003      	b.n	801cfea <HAL_TIM_PWM_Stop+0x116>
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	2201      	movs	r2, #1
 801cfe6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801cfea:	2300      	movs	r3, #0
}
 801cfec:	4618      	mov	r0, r3
 801cfee:	3708      	adds	r7, #8
 801cff0:	46bd      	mov	sp, r7
 801cff2:	bd80      	pop	{r7, pc}
 801cff4:	40012c00 	.word	0x40012c00
 801cff8:	40013400 	.word	0x40013400
 801cffc:	40014000 	.word	0x40014000
 801d000:	40014400 	.word	0x40014400
 801d004:	40014800 	.word	0x40014800
 801d008:	40015000 	.word	0x40015000

0801d00c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	681b      	ldr	r3, [r3, #0]
 801d018:	691b      	ldr	r3, [r3, #16]
 801d01a:	f003 0302 	and.w	r3, r3, #2
 801d01e:	2b02      	cmp	r3, #2
 801d020:	d122      	bne.n	801d068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	68db      	ldr	r3, [r3, #12]
 801d028:	f003 0302 	and.w	r3, r3, #2
 801d02c:	2b02      	cmp	r3, #2
 801d02e:	d11b      	bne.n	801d068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	f06f 0202 	mvn.w	r2, #2
 801d038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	2201      	movs	r2, #1
 801d03e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	699b      	ldr	r3, [r3, #24]
 801d046:	f003 0303 	and.w	r3, r3, #3
 801d04a:	2b00      	cmp	r3, #0
 801d04c:	d003      	beq.n	801d056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f000 fa84 	bl	801d55c <HAL_TIM_IC_CaptureCallback>
 801d054:	e005      	b.n	801d062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801d056:	6878      	ldr	r0, [r7, #4]
 801d058:	f000 fa76 	bl	801d548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d05c:	6878      	ldr	r0, [r7, #4]
 801d05e:	f000 fa87 	bl	801d570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	2200      	movs	r2, #0
 801d066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	681b      	ldr	r3, [r3, #0]
 801d06c:	691b      	ldr	r3, [r3, #16]
 801d06e:	f003 0304 	and.w	r3, r3, #4
 801d072:	2b04      	cmp	r3, #4
 801d074:	d122      	bne.n	801d0bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	68db      	ldr	r3, [r3, #12]
 801d07c:	f003 0304 	and.w	r3, r3, #4
 801d080:	2b04      	cmp	r3, #4
 801d082:	d11b      	bne.n	801d0bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801d084:	687b      	ldr	r3, [r7, #4]
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	f06f 0204 	mvn.w	r2, #4
 801d08c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	2202      	movs	r2, #2
 801d092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801d094:	687b      	ldr	r3, [r7, #4]
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	699b      	ldr	r3, [r3, #24]
 801d09a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d003      	beq.n	801d0aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f000 fa5a 	bl	801d55c <HAL_TIM_IC_CaptureCallback>
 801d0a8:	e005      	b.n	801d0b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0aa:	6878      	ldr	r0, [r7, #4]
 801d0ac:	f000 fa4c 	bl	801d548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d0b0:	6878      	ldr	r0, [r7, #4]
 801d0b2:	f000 fa5d 	bl	801d570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	2200      	movs	r2, #0
 801d0ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	691b      	ldr	r3, [r3, #16]
 801d0c2:	f003 0308 	and.w	r3, r3, #8
 801d0c6:	2b08      	cmp	r3, #8
 801d0c8:	d122      	bne.n	801d110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801d0ca:	687b      	ldr	r3, [r7, #4]
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	68db      	ldr	r3, [r3, #12]
 801d0d0:	f003 0308 	and.w	r3, r3, #8
 801d0d4:	2b08      	cmp	r3, #8
 801d0d6:	d11b      	bne.n	801d110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	681b      	ldr	r3, [r3, #0]
 801d0dc:	f06f 0208 	mvn.w	r2, #8
 801d0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801d0e2:	687b      	ldr	r3, [r7, #4]
 801d0e4:	2204      	movs	r2, #4
 801d0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	69db      	ldr	r3, [r3, #28]
 801d0ee:	f003 0303 	and.w	r3, r3, #3
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d003      	beq.n	801d0fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d0f6:	6878      	ldr	r0, [r7, #4]
 801d0f8:	f000 fa30 	bl	801d55c <HAL_TIM_IC_CaptureCallback>
 801d0fc:	e005      	b.n	801d10a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d0fe:	6878      	ldr	r0, [r7, #4]
 801d100:	f000 fa22 	bl	801d548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d104:	6878      	ldr	r0, [r7, #4]
 801d106:	f000 fa33 	bl	801d570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	2200      	movs	r2, #0
 801d10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	681b      	ldr	r3, [r3, #0]
 801d114:	691b      	ldr	r3, [r3, #16]
 801d116:	f003 0310 	and.w	r3, r3, #16
 801d11a:	2b10      	cmp	r3, #16
 801d11c:	d122      	bne.n	801d164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	68db      	ldr	r3, [r3, #12]
 801d124:	f003 0310 	and.w	r3, r3, #16
 801d128:	2b10      	cmp	r3, #16
 801d12a:	d11b      	bne.n	801d164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801d12c:	687b      	ldr	r3, [r7, #4]
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	f06f 0210 	mvn.w	r2, #16
 801d134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801d136:	687b      	ldr	r3, [r7, #4]
 801d138:	2208      	movs	r2, #8
 801d13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801d13c:	687b      	ldr	r3, [r7, #4]
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	69db      	ldr	r3, [r3, #28]
 801d142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d146:	2b00      	cmp	r3, #0
 801d148:	d003      	beq.n	801d152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801d14a:	6878      	ldr	r0, [r7, #4]
 801d14c:	f000 fa06 	bl	801d55c <HAL_TIM_IC_CaptureCallback>
 801d150:	e005      	b.n	801d15e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801d152:	6878      	ldr	r0, [r7, #4]
 801d154:	f000 f9f8 	bl	801d548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801d158:	6878      	ldr	r0, [r7, #4]
 801d15a:	f000 fa09 	bl	801d570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	2200      	movs	r2, #0
 801d162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	681b      	ldr	r3, [r3, #0]
 801d168:	691b      	ldr	r3, [r3, #16]
 801d16a:	f003 0301 	and.w	r3, r3, #1
 801d16e:	2b01      	cmp	r3, #1
 801d170:	d10e      	bne.n	801d190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801d172:	687b      	ldr	r3, [r7, #4]
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	68db      	ldr	r3, [r3, #12]
 801d178:	f003 0301 	and.w	r3, r3, #1
 801d17c:	2b01      	cmp	r3, #1
 801d17e:	d107      	bne.n	801d190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	f06f 0201 	mvn.w	r2, #1
 801d188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801d18a:	6878      	ldr	r0, [r7, #4]
 801d18c:	f000 f9d2 	bl	801d534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	691b      	ldr	r3, [r3, #16]
 801d196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d19a:	2b80      	cmp	r3, #128	; 0x80
 801d19c:	d10e      	bne.n	801d1bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	68db      	ldr	r3, [r3, #12]
 801d1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1a8:	2b80      	cmp	r3, #128	; 0x80
 801d1aa:	d107      	bne.n	801d1bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	681b      	ldr	r3, [r3, #0]
 801d1b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801d1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801d1b6:	6878      	ldr	r0, [r7, #4]
 801d1b8:	f000 ff26 	bl	801e008 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	681b      	ldr	r3, [r3, #0]
 801d1c0:	691b      	ldr	r3, [r3, #16]
 801d1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1ca:	d10e      	bne.n	801d1ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	68db      	ldr	r3, [r3, #12]
 801d1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d1d6:	2b80      	cmp	r3, #128	; 0x80
 801d1d8:	d107      	bne.n	801d1ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801d1da:	687b      	ldr	r3, [r7, #4]
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801d1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801d1e4:	6878      	ldr	r0, [r7, #4]
 801d1e6:	f000 ff19 	bl	801e01c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	691b      	ldr	r3, [r3, #16]
 801d1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1f4:	2b40      	cmp	r3, #64	; 0x40
 801d1f6:	d10e      	bne.n	801d216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	68db      	ldr	r3, [r3, #12]
 801d1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d202:	2b40      	cmp	r3, #64	; 0x40
 801d204:	d107      	bne.n	801d216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801d206:	687b      	ldr	r3, [r7, #4]
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801d20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801d210:	6878      	ldr	r0, [r7, #4]
 801d212:	f000 f9b7 	bl	801d584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	681b      	ldr	r3, [r3, #0]
 801d21a:	691b      	ldr	r3, [r3, #16]
 801d21c:	f003 0320 	and.w	r3, r3, #32
 801d220:	2b20      	cmp	r3, #32
 801d222:	d10e      	bne.n	801d242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801d224:	687b      	ldr	r3, [r7, #4]
 801d226:	681b      	ldr	r3, [r3, #0]
 801d228:	68db      	ldr	r3, [r3, #12]
 801d22a:	f003 0320 	and.w	r3, r3, #32
 801d22e:	2b20      	cmp	r3, #32
 801d230:	d107      	bne.n	801d242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	f06f 0220 	mvn.w	r2, #32
 801d23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801d23c:	6878      	ldr	r0, [r7, #4]
 801d23e:	f000 fed9 	bl	801dff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	691b      	ldr	r3, [r3, #16]
 801d248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d24c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d250:	d10f      	bne.n	801d272 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	68db      	ldr	r3, [r3, #12]
 801d258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d25c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d260:	d107      	bne.n	801d272 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	681b      	ldr	r3, [r3, #0]
 801d266:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801d26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801d26c:	6878      	ldr	r0, [r7, #4]
 801d26e:	f000 fedf 	bl	801e030 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801d272:	687b      	ldr	r3, [r7, #4]
 801d274:	681b      	ldr	r3, [r3, #0]
 801d276:	691b      	ldr	r3, [r3, #16]
 801d278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d27c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d280:	d10f      	bne.n	801d2a2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	68db      	ldr	r3, [r3, #12]
 801d288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d28c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d290:	d107      	bne.n	801d2a2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801d29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801d29c:	6878      	ldr	r0, [r7, #4]
 801d29e:	f000 fed1 	bl	801e044 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	691b      	ldr	r3, [r3, #16]
 801d2a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d2ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2b0:	d10f      	bne.n	801d2d2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	68db      	ldr	r3, [r3, #12]
 801d2b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d2bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2c0:	d107      	bne.n	801d2d2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	681b      	ldr	r3, [r3, #0]
 801d2c6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801d2ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801d2cc:	6878      	ldr	r0, [r7, #4]
 801d2ce:	f000 fec3 	bl	801e058 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	691b      	ldr	r3, [r3, #16]
 801d2d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d2dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d2e0:	d10f      	bne.n	801d302 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	68db      	ldr	r3, [r3, #12]
 801d2e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d2ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d2f0:	d107      	bne.n	801d302 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801d2f2:	687b      	ldr	r3, [r7, #4]
 801d2f4:	681b      	ldr	r3, [r3, #0]
 801d2f6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801d2fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801d2fc:	6878      	ldr	r0, [r7, #4]
 801d2fe:	f000 feb5 	bl	801e06c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801d302:	bf00      	nop
 801d304:	3708      	adds	r7, #8
 801d306:	46bd      	mov	sp, r7
 801d308:	bd80      	pop	{r7, pc}
	...

0801d30c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801d30c:	b580      	push	{r7, lr}
 801d30e:	b086      	sub	sp, #24
 801d310:	af00      	add	r7, sp, #0
 801d312:	60f8      	str	r0, [r7, #12]
 801d314:	60b9      	str	r1, [r7, #8]
 801d316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801d318:	2300      	movs	r3, #0
 801d31a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801d31c:	68fb      	ldr	r3, [r7, #12]
 801d31e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801d322:	2b01      	cmp	r3, #1
 801d324:	d101      	bne.n	801d32a <HAL_TIM_PWM_ConfigChannel+0x1e>
 801d326:	2302      	movs	r3, #2
 801d328:	e0ff      	b.n	801d52a <HAL_TIM_PWM_ConfigChannel+0x21e>
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	2201      	movs	r2, #1
 801d32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801d332:	687b      	ldr	r3, [r7, #4]
 801d334:	2b14      	cmp	r3, #20
 801d336:	f200 80f0 	bhi.w	801d51a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801d33a:	a201      	add	r2, pc, #4	; (adr r2, 801d340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801d33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d340:	0801d395 	.word	0x0801d395
 801d344:	0801d51b 	.word	0x0801d51b
 801d348:	0801d51b 	.word	0x0801d51b
 801d34c:	0801d51b 	.word	0x0801d51b
 801d350:	0801d3d5 	.word	0x0801d3d5
 801d354:	0801d51b 	.word	0x0801d51b
 801d358:	0801d51b 	.word	0x0801d51b
 801d35c:	0801d51b 	.word	0x0801d51b
 801d360:	0801d417 	.word	0x0801d417
 801d364:	0801d51b 	.word	0x0801d51b
 801d368:	0801d51b 	.word	0x0801d51b
 801d36c:	0801d51b 	.word	0x0801d51b
 801d370:	0801d457 	.word	0x0801d457
 801d374:	0801d51b 	.word	0x0801d51b
 801d378:	0801d51b 	.word	0x0801d51b
 801d37c:	0801d51b 	.word	0x0801d51b
 801d380:	0801d499 	.word	0x0801d499
 801d384:	0801d51b 	.word	0x0801d51b
 801d388:	0801d51b 	.word	0x0801d51b
 801d38c:	0801d51b 	.word	0x0801d51b
 801d390:	0801d4d9 	.word	0x0801d4d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801d394:	68fb      	ldr	r3, [r7, #12]
 801d396:	681b      	ldr	r3, [r3, #0]
 801d398:	68b9      	ldr	r1, [r7, #8]
 801d39a:	4618      	mov	r0, r3
 801d39c:	f000 f99a 	bl	801d6d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801d3a0:	68fb      	ldr	r3, [r7, #12]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	699a      	ldr	r2, [r3, #24]
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	681b      	ldr	r3, [r3, #0]
 801d3aa:	f042 0208 	orr.w	r2, r2, #8
 801d3ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	699a      	ldr	r2, [r3, #24]
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	f022 0204 	bic.w	r2, r2, #4
 801d3be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801d3c0:	68fb      	ldr	r3, [r7, #12]
 801d3c2:	681b      	ldr	r3, [r3, #0]
 801d3c4:	6999      	ldr	r1, [r3, #24]
 801d3c6:	68bb      	ldr	r3, [r7, #8]
 801d3c8:	691a      	ldr	r2, [r3, #16]
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	430a      	orrs	r2, r1
 801d3d0:	619a      	str	r2, [r3, #24]
      break;
 801d3d2:	e0a5      	b.n	801d520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	68b9      	ldr	r1, [r7, #8]
 801d3da:	4618      	mov	r0, r3
 801d3dc:	f000 fa14 	bl	801d808 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	699a      	ldr	r2, [r3, #24]
 801d3e6:	68fb      	ldr	r3, [r7, #12]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d3ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801d3f0:	68fb      	ldr	r3, [r7, #12]
 801d3f2:	681b      	ldr	r3, [r3, #0]
 801d3f4:	699a      	ldr	r2, [r3, #24]
 801d3f6:	68fb      	ldr	r3, [r7, #12]
 801d3f8:	681b      	ldr	r3, [r3, #0]
 801d3fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d3fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801d400:	68fb      	ldr	r3, [r7, #12]
 801d402:	681b      	ldr	r3, [r3, #0]
 801d404:	6999      	ldr	r1, [r3, #24]
 801d406:	68bb      	ldr	r3, [r7, #8]
 801d408:	691b      	ldr	r3, [r3, #16]
 801d40a:	021a      	lsls	r2, r3, #8
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	681b      	ldr	r3, [r3, #0]
 801d410:	430a      	orrs	r2, r1
 801d412:	619a      	str	r2, [r3, #24]
      break;
 801d414:	e084      	b.n	801d520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	68b9      	ldr	r1, [r7, #8]
 801d41c:	4618      	mov	r0, r3
 801d41e:	f000 fa87 	bl	801d930 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801d422:	68fb      	ldr	r3, [r7, #12]
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	69da      	ldr	r2, [r3, #28]
 801d428:	68fb      	ldr	r3, [r7, #12]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	f042 0208 	orr.w	r2, r2, #8
 801d430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801d432:	68fb      	ldr	r3, [r7, #12]
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	69da      	ldr	r2, [r3, #28]
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	f022 0204 	bic.w	r2, r2, #4
 801d440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	681b      	ldr	r3, [r3, #0]
 801d446:	69d9      	ldr	r1, [r3, #28]
 801d448:	68bb      	ldr	r3, [r7, #8]
 801d44a:	691a      	ldr	r2, [r3, #16]
 801d44c:	68fb      	ldr	r3, [r7, #12]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	430a      	orrs	r2, r1
 801d452:	61da      	str	r2, [r3, #28]
      break;
 801d454:	e064      	b.n	801d520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	681b      	ldr	r3, [r3, #0]
 801d45a:	68b9      	ldr	r1, [r7, #8]
 801d45c:	4618      	mov	r0, r3
 801d45e:	f000 faf9 	bl	801da54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	69da      	ldr	r2, [r3, #28]
 801d468:	68fb      	ldr	r3, [r7, #12]
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	69da      	ldr	r2, [r3, #28]
 801d478:	68fb      	ldr	r3, [r7, #12]
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	681b      	ldr	r3, [r3, #0]
 801d486:	69d9      	ldr	r1, [r3, #28]
 801d488:	68bb      	ldr	r3, [r7, #8]
 801d48a:	691b      	ldr	r3, [r3, #16]
 801d48c:	021a      	lsls	r2, r3, #8
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	681b      	ldr	r3, [r3, #0]
 801d492:	430a      	orrs	r2, r1
 801d494:	61da      	str	r2, [r3, #28]
      break;
 801d496:	e043      	b.n	801d520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801d498:	68fb      	ldr	r3, [r7, #12]
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	68b9      	ldr	r1, [r7, #8]
 801d49e:	4618      	mov	r0, r3
 801d4a0:	f000 fb6c 	bl	801db7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801d4a4:	68fb      	ldr	r3, [r7, #12]
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4aa:	68fb      	ldr	r3, [r7, #12]
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	f042 0208 	orr.w	r2, r2, #8
 801d4b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801d4b4:	68fb      	ldr	r3, [r7, #12]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4ba:	68fb      	ldr	r3, [r7, #12]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	f022 0204 	bic.w	r2, r2, #4
 801d4c2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d4ca:	68bb      	ldr	r3, [r7, #8]
 801d4cc:	691a      	ldr	r2, [r3, #16]
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	430a      	orrs	r2, r1
 801d4d4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d4d6:	e023      	b.n	801d520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801d4d8:	68fb      	ldr	r3, [r7, #12]
 801d4da:	681b      	ldr	r3, [r3, #0]
 801d4dc:	68b9      	ldr	r1, [r7, #8]
 801d4de:	4618      	mov	r0, r3
 801d4e0:	f000 fbb6 	bl	801dc50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801d4e4:	68fb      	ldr	r3, [r7, #12]
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4ea:	68fb      	ldr	r3, [r7, #12]
 801d4ec:	681b      	ldr	r3, [r3, #0]
 801d4ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801d4f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	681b      	ldr	r3, [r3, #0]
 801d4f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801d502:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801d50a:	68bb      	ldr	r3, [r7, #8]
 801d50c:	691b      	ldr	r3, [r3, #16]
 801d50e:	021a      	lsls	r2, r3, #8
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	430a      	orrs	r2, r1
 801d516:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801d518:	e002      	b.n	801d520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801d51a:	2301      	movs	r3, #1
 801d51c:	75fb      	strb	r3, [r7, #23]
      break;
 801d51e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801d520:	68fb      	ldr	r3, [r7, #12]
 801d522:	2200      	movs	r2, #0
 801d524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801d528:	7dfb      	ldrb	r3, [r7, #23]
}
 801d52a:	4618      	mov	r0, r3
 801d52c:	3718      	adds	r7, #24
 801d52e:	46bd      	mov	sp, r7
 801d530:	bd80      	pop	{r7, pc}
 801d532:	bf00      	nop

0801d534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d534:	b480      	push	{r7}
 801d536:	b083      	sub	sp, #12
 801d538:	af00      	add	r7, sp, #0
 801d53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801d53c:	bf00      	nop
 801d53e:	370c      	adds	r7, #12
 801d540:	46bd      	mov	sp, r7
 801d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d546:	4770      	bx	lr

0801d548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801d548:	b480      	push	{r7}
 801d54a:	b083      	sub	sp, #12
 801d54c:	af00      	add	r7, sp, #0
 801d54e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801d550:	bf00      	nop
 801d552:	370c      	adds	r7, #12
 801d554:	46bd      	mov	sp, r7
 801d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d55a:	4770      	bx	lr

0801d55c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801d55c:	b480      	push	{r7}
 801d55e:	b083      	sub	sp, #12
 801d560:	af00      	add	r7, sp, #0
 801d562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801d564:	bf00      	nop
 801d566:	370c      	adds	r7, #12
 801d568:	46bd      	mov	sp, r7
 801d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d56e:	4770      	bx	lr

0801d570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801d570:	b480      	push	{r7}
 801d572:	b083      	sub	sp, #12
 801d574:	af00      	add	r7, sp, #0
 801d576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801d578:	bf00      	nop
 801d57a:	370c      	adds	r7, #12
 801d57c:	46bd      	mov	sp, r7
 801d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d582:	4770      	bx	lr

0801d584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801d584:	b480      	push	{r7}
 801d586:	b083      	sub	sp, #12
 801d588:	af00      	add	r7, sp, #0
 801d58a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801d58c:	bf00      	nop
 801d58e:	370c      	adds	r7, #12
 801d590:	46bd      	mov	sp, r7
 801d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d596:	4770      	bx	lr

0801d598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801d598:	b480      	push	{r7}
 801d59a:	b085      	sub	sp, #20
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	6078      	str	r0, [r7, #4]
 801d5a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	681b      	ldr	r3, [r3, #0]
 801d5a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801d5a8:	687b      	ldr	r3, [r7, #4]
 801d5aa:	4a42      	ldr	r2, [pc, #264]	; (801d6b4 <TIM_Base_SetConfig+0x11c>)
 801d5ac:	4293      	cmp	r3, r2
 801d5ae:	d013      	beq.n	801d5d8 <TIM_Base_SetConfig+0x40>
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d5b6:	d00f      	beq.n	801d5d8 <TIM_Base_SetConfig+0x40>
 801d5b8:	687b      	ldr	r3, [r7, #4]
 801d5ba:	4a3f      	ldr	r2, [pc, #252]	; (801d6b8 <TIM_Base_SetConfig+0x120>)
 801d5bc:	4293      	cmp	r3, r2
 801d5be:	d00b      	beq.n	801d5d8 <TIM_Base_SetConfig+0x40>
 801d5c0:	687b      	ldr	r3, [r7, #4]
 801d5c2:	4a3e      	ldr	r2, [pc, #248]	; (801d6bc <TIM_Base_SetConfig+0x124>)
 801d5c4:	4293      	cmp	r3, r2
 801d5c6:	d007      	beq.n	801d5d8 <TIM_Base_SetConfig+0x40>
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	4a3d      	ldr	r2, [pc, #244]	; (801d6c0 <TIM_Base_SetConfig+0x128>)
 801d5cc:	4293      	cmp	r3, r2
 801d5ce:	d003      	beq.n	801d5d8 <TIM_Base_SetConfig+0x40>
 801d5d0:	687b      	ldr	r3, [r7, #4]
 801d5d2:	4a3c      	ldr	r2, [pc, #240]	; (801d6c4 <TIM_Base_SetConfig+0x12c>)
 801d5d4:	4293      	cmp	r3, r2
 801d5d6:	d108      	bne.n	801d5ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801d5d8:	68fb      	ldr	r3, [r7, #12]
 801d5da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d5de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801d5e0:	683b      	ldr	r3, [r7, #0]
 801d5e2:	685b      	ldr	r3, [r3, #4]
 801d5e4:	68fa      	ldr	r2, [r7, #12]
 801d5e6:	4313      	orrs	r3, r2
 801d5e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801d5ea:	687b      	ldr	r3, [r7, #4]
 801d5ec:	4a31      	ldr	r2, [pc, #196]	; (801d6b4 <TIM_Base_SetConfig+0x11c>)
 801d5ee:	4293      	cmp	r3, r2
 801d5f0:	d01f      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d5f8:	d01b      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	4a2e      	ldr	r2, [pc, #184]	; (801d6b8 <TIM_Base_SetConfig+0x120>)
 801d5fe:	4293      	cmp	r3, r2
 801d600:	d017      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	4a2d      	ldr	r2, [pc, #180]	; (801d6bc <TIM_Base_SetConfig+0x124>)
 801d606:	4293      	cmp	r3, r2
 801d608:	d013      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	4a2c      	ldr	r2, [pc, #176]	; (801d6c0 <TIM_Base_SetConfig+0x128>)
 801d60e:	4293      	cmp	r3, r2
 801d610:	d00f      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d612:	687b      	ldr	r3, [r7, #4]
 801d614:	4a2c      	ldr	r2, [pc, #176]	; (801d6c8 <TIM_Base_SetConfig+0x130>)
 801d616:	4293      	cmp	r3, r2
 801d618:	d00b      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	4a2b      	ldr	r2, [pc, #172]	; (801d6cc <TIM_Base_SetConfig+0x134>)
 801d61e:	4293      	cmp	r3, r2
 801d620:	d007      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d622:	687b      	ldr	r3, [r7, #4]
 801d624:	4a2a      	ldr	r2, [pc, #168]	; (801d6d0 <TIM_Base_SetConfig+0x138>)
 801d626:	4293      	cmp	r3, r2
 801d628:	d003      	beq.n	801d632 <TIM_Base_SetConfig+0x9a>
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	4a25      	ldr	r2, [pc, #148]	; (801d6c4 <TIM_Base_SetConfig+0x12c>)
 801d62e:	4293      	cmp	r3, r2
 801d630:	d108      	bne.n	801d644 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801d63a:	683b      	ldr	r3, [r7, #0]
 801d63c:	68db      	ldr	r3, [r3, #12]
 801d63e:	68fa      	ldr	r2, [r7, #12]
 801d640:	4313      	orrs	r3, r2
 801d642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801d64a:	683b      	ldr	r3, [r7, #0]
 801d64c:	695b      	ldr	r3, [r3, #20]
 801d64e:	4313      	orrs	r3, r2
 801d650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801d652:	687b      	ldr	r3, [r7, #4]
 801d654:	68fa      	ldr	r2, [r7, #12]
 801d656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801d658:	683b      	ldr	r3, [r7, #0]
 801d65a:	689a      	ldr	r2, [r3, #8]
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801d660:	683b      	ldr	r3, [r7, #0]
 801d662:	681a      	ldr	r2, [r3, #0]
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	4a12      	ldr	r2, [pc, #72]	; (801d6b4 <TIM_Base_SetConfig+0x11c>)
 801d66c:	4293      	cmp	r3, r2
 801d66e:	d013      	beq.n	801d698 <TIM_Base_SetConfig+0x100>
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	4a13      	ldr	r2, [pc, #76]	; (801d6c0 <TIM_Base_SetConfig+0x128>)
 801d674:	4293      	cmp	r3, r2
 801d676:	d00f      	beq.n	801d698 <TIM_Base_SetConfig+0x100>
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	4a13      	ldr	r2, [pc, #76]	; (801d6c8 <TIM_Base_SetConfig+0x130>)
 801d67c:	4293      	cmp	r3, r2
 801d67e:	d00b      	beq.n	801d698 <TIM_Base_SetConfig+0x100>
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	4a12      	ldr	r2, [pc, #72]	; (801d6cc <TIM_Base_SetConfig+0x134>)
 801d684:	4293      	cmp	r3, r2
 801d686:	d007      	beq.n	801d698 <TIM_Base_SetConfig+0x100>
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	4a11      	ldr	r2, [pc, #68]	; (801d6d0 <TIM_Base_SetConfig+0x138>)
 801d68c:	4293      	cmp	r3, r2
 801d68e:	d003      	beq.n	801d698 <TIM_Base_SetConfig+0x100>
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	4a0c      	ldr	r2, [pc, #48]	; (801d6c4 <TIM_Base_SetConfig+0x12c>)
 801d694:	4293      	cmp	r3, r2
 801d696:	d103      	bne.n	801d6a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	691a      	ldr	r2, [r3, #16]
 801d69c:	687b      	ldr	r3, [r7, #4]
 801d69e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801d6a0:	687b      	ldr	r3, [r7, #4]
 801d6a2:	2201      	movs	r2, #1
 801d6a4:	615a      	str	r2, [r3, #20]
}
 801d6a6:	bf00      	nop
 801d6a8:	3714      	adds	r7, #20
 801d6aa:	46bd      	mov	sp, r7
 801d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b0:	4770      	bx	lr
 801d6b2:	bf00      	nop
 801d6b4:	40012c00 	.word	0x40012c00
 801d6b8:	40000400 	.word	0x40000400
 801d6bc:	40000800 	.word	0x40000800
 801d6c0:	40013400 	.word	0x40013400
 801d6c4:	40015000 	.word	0x40015000
 801d6c8:	40014000 	.word	0x40014000
 801d6cc:	40014400 	.word	0x40014400
 801d6d0:	40014800 	.word	0x40014800

0801d6d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d6d4:	b480      	push	{r7}
 801d6d6:	b087      	sub	sp, #28
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
 801d6dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801d6de:	687b      	ldr	r3, [r7, #4]
 801d6e0:	6a1b      	ldr	r3, [r3, #32]
 801d6e2:	f023 0201 	bic.w	r2, r3, #1
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	6a1b      	ldr	r3, [r3, #32]
 801d6ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	685b      	ldr	r3, [r3, #4]
 801d6f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	699b      	ldr	r3, [r3, #24]
 801d6fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801d708:	68fb      	ldr	r3, [r7, #12]
 801d70a:	f023 0303 	bic.w	r3, r3, #3
 801d70e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d710:	683b      	ldr	r3, [r7, #0]
 801d712:	681b      	ldr	r3, [r3, #0]
 801d714:	68fa      	ldr	r2, [r7, #12]
 801d716:	4313      	orrs	r3, r2
 801d718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801d71a:	697b      	ldr	r3, [r7, #20]
 801d71c:	f023 0302 	bic.w	r3, r3, #2
 801d720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801d722:	683b      	ldr	r3, [r7, #0]
 801d724:	689b      	ldr	r3, [r3, #8]
 801d726:	697a      	ldr	r2, [r7, #20]
 801d728:	4313      	orrs	r3, r2
 801d72a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	4a30      	ldr	r2, [pc, #192]	; (801d7f0 <TIM_OC1_SetConfig+0x11c>)
 801d730:	4293      	cmp	r3, r2
 801d732:	d013      	beq.n	801d75c <TIM_OC1_SetConfig+0x88>
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	4a2f      	ldr	r2, [pc, #188]	; (801d7f4 <TIM_OC1_SetConfig+0x120>)
 801d738:	4293      	cmp	r3, r2
 801d73a:	d00f      	beq.n	801d75c <TIM_OC1_SetConfig+0x88>
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	4a2e      	ldr	r2, [pc, #184]	; (801d7f8 <TIM_OC1_SetConfig+0x124>)
 801d740:	4293      	cmp	r3, r2
 801d742:	d00b      	beq.n	801d75c <TIM_OC1_SetConfig+0x88>
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	4a2d      	ldr	r2, [pc, #180]	; (801d7fc <TIM_OC1_SetConfig+0x128>)
 801d748:	4293      	cmp	r3, r2
 801d74a:	d007      	beq.n	801d75c <TIM_OC1_SetConfig+0x88>
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	4a2c      	ldr	r2, [pc, #176]	; (801d800 <TIM_OC1_SetConfig+0x12c>)
 801d750:	4293      	cmp	r3, r2
 801d752:	d003      	beq.n	801d75c <TIM_OC1_SetConfig+0x88>
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	4a2b      	ldr	r2, [pc, #172]	; (801d804 <TIM_OC1_SetConfig+0x130>)
 801d758:	4293      	cmp	r3, r2
 801d75a:	d10c      	bne.n	801d776 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801d75c:	697b      	ldr	r3, [r7, #20]
 801d75e:	f023 0308 	bic.w	r3, r3, #8
 801d762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801d764:	683b      	ldr	r3, [r7, #0]
 801d766:	68db      	ldr	r3, [r3, #12]
 801d768:	697a      	ldr	r2, [r7, #20]
 801d76a:	4313      	orrs	r3, r2
 801d76c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801d76e:	697b      	ldr	r3, [r7, #20]
 801d770:	f023 0304 	bic.w	r3, r3, #4
 801d774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d776:	687b      	ldr	r3, [r7, #4]
 801d778:	4a1d      	ldr	r2, [pc, #116]	; (801d7f0 <TIM_OC1_SetConfig+0x11c>)
 801d77a:	4293      	cmp	r3, r2
 801d77c:	d013      	beq.n	801d7a6 <TIM_OC1_SetConfig+0xd2>
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	4a1c      	ldr	r2, [pc, #112]	; (801d7f4 <TIM_OC1_SetConfig+0x120>)
 801d782:	4293      	cmp	r3, r2
 801d784:	d00f      	beq.n	801d7a6 <TIM_OC1_SetConfig+0xd2>
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	4a1b      	ldr	r2, [pc, #108]	; (801d7f8 <TIM_OC1_SetConfig+0x124>)
 801d78a:	4293      	cmp	r3, r2
 801d78c:	d00b      	beq.n	801d7a6 <TIM_OC1_SetConfig+0xd2>
 801d78e:	687b      	ldr	r3, [r7, #4]
 801d790:	4a1a      	ldr	r2, [pc, #104]	; (801d7fc <TIM_OC1_SetConfig+0x128>)
 801d792:	4293      	cmp	r3, r2
 801d794:	d007      	beq.n	801d7a6 <TIM_OC1_SetConfig+0xd2>
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	4a19      	ldr	r2, [pc, #100]	; (801d800 <TIM_OC1_SetConfig+0x12c>)
 801d79a:	4293      	cmp	r3, r2
 801d79c:	d003      	beq.n	801d7a6 <TIM_OC1_SetConfig+0xd2>
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	4a18      	ldr	r2, [pc, #96]	; (801d804 <TIM_OC1_SetConfig+0x130>)
 801d7a2:	4293      	cmp	r3, r2
 801d7a4:	d111      	bne.n	801d7ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801d7a6:	693b      	ldr	r3, [r7, #16]
 801d7a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801d7ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801d7ae:	693b      	ldr	r3, [r7, #16]
 801d7b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d7b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801d7b6:	683b      	ldr	r3, [r7, #0]
 801d7b8:	695b      	ldr	r3, [r3, #20]
 801d7ba:	693a      	ldr	r2, [r7, #16]
 801d7bc:	4313      	orrs	r3, r2
 801d7be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801d7c0:	683b      	ldr	r3, [r7, #0]
 801d7c2:	699b      	ldr	r3, [r3, #24]
 801d7c4:	693a      	ldr	r2, [r7, #16]
 801d7c6:	4313      	orrs	r3, r2
 801d7c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d7ca:	687b      	ldr	r3, [r7, #4]
 801d7cc:	693a      	ldr	r2, [r7, #16]
 801d7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d7d0:	687b      	ldr	r3, [r7, #4]
 801d7d2:	68fa      	ldr	r2, [r7, #12]
 801d7d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801d7d6:	683b      	ldr	r3, [r7, #0]
 801d7d8:	685a      	ldr	r2, [r3, #4]
 801d7da:	687b      	ldr	r3, [r7, #4]
 801d7dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d7de:	687b      	ldr	r3, [r7, #4]
 801d7e0:	697a      	ldr	r2, [r7, #20]
 801d7e2:	621a      	str	r2, [r3, #32]
}
 801d7e4:	bf00      	nop
 801d7e6:	371c      	adds	r7, #28
 801d7e8:	46bd      	mov	sp, r7
 801d7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7ee:	4770      	bx	lr
 801d7f0:	40012c00 	.word	0x40012c00
 801d7f4:	40013400 	.word	0x40013400
 801d7f8:	40014000 	.word	0x40014000
 801d7fc:	40014400 	.word	0x40014400
 801d800:	40014800 	.word	0x40014800
 801d804:	40015000 	.word	0x40015000

0801d808 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d808:	b480      	push	{r7}
 801d80a:	b087      	sub	sp, #28
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]
 801d810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	6a1b      	ldr	r3, [r3, #32]
 801d816:	f023 0210 	bic.w	r2, r3, #16
 801d81a:	687b      	ldr	r3, [r7, #4]
 801d81c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d81e:	687b      	ldr	r3, [r7, #4]
 801d820:	6a1b      	ldr	r3, [r3, #32]
 801d822:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	685b      	ldr	r3, [r3, #4]
 801d828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801d82a:	687b      	ldr	r3, [r7, #4]
 801d82c:	699b      	ldr	r3, [r3, #24]
 801d82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801d83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801d83c:	68fb      	ldr	r3, [r7, #12]
 801d83e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801d844:	683b      	ldr	r3, [r7, #0]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	021b      	lsls	r3, r3, #8
 801d84a:	68fa      	ldr	r2, [r7, #12]
 801d84c:	4313      	orrs	r3, r2
 801d84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801d850:	697b      	ldr	r3, [r7, #20]
 801d852:	f023 0320 	bic.w	r3, r3, #32
 801d856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801d858:	683b      	ldr	r3, [r7, #0]
 801d85a:	689b      	ldr	r3, [r3, #8]
 801d85c:	011b      	lsls	r3, r3, #4
 801d85e:	697a      	ldr	r2, [r7, #20]
 801d860:	4313      	orrs	r3, r2
 801d862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801d864:	687b      	ldr	r3, [r7, #4]
 801d866:	4a2c      	ldr	r2, [pc, #176]	; (801d918 <TIM_OC2_SetConfig+0x110>)
 801d868:	4293      	cmp	r3, r2
 801d86a:	d007      	beq.n	801d87c <TIM_OC2_SetConfig+0x74>
 801d86c:	687b      	ldr	r3, [r7, #4]
 801d86e:	4a2b      	ldr	r2, [pc, #172]	; (801d91c <TIM_OC2_SetConfig+0x114>)
 801d870:	4293      	cmp	r3, r2
 801d872:	d003      	beq.n	801d87c <TIM_OC2_SetConfig+0x74>
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	4a2a      	ldr	r2, [pc, #168]	; (801d920 <TIM_OC2_SetConfig+0x118>)
 801d878:	4293      	cmp	r3, r2
 801d87a:	d10d      	bne.n	801d898 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801d87c:	697b      	ldr	r3, [r7, #20]
 801d87e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801d882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801d884:	683b      	ldr	r3, [r7, #0]
 801d886:	68db      	ldr	r3, [r3, #12]
 801d888:	011b      	lsls	r3, r3, #4
 801d88a:	697a      	ldr	r2, [r7, #20]
 801d88c:	4313      	orrs	r3, r2
 801d88e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801d890:	697b      	ldr	r3, [r7, #20]
 801d892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801d896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	4a1f      	ldr	r2, [pc, #124]	; (801d918 <TIM_OC2_SetConfig+0x110>)
 801d89c:	4293      	cmp	r3, r2
 801d89e:	d013      	beq.n	801d8c8 <TIM_OC2_SetConfig+0xc0>
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	4a1e      	ldr	r2, [pc, #120]	; (801d91c <TIM_OC2_SetConfig+0x114>)
 801d8a4:	4293      	cmp	r3, r2
 801d8a6:	d00f      	beq.n	801d8c8 <TIM_OC2_SetConfig+0xc0>
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	4a1e      	ldr	r2, [pc, #120]	; (801d924 <TIM_OC2_SetConfig+0x11c>)
 801d8ac:	4293      	cmp	r3, r2
 801d8ae:	d00b      	beq.n	801d8c8 <TIM_OC2_SetConfig+0xc0>
 801d8b0:	687b      	ldr	r3, [r7, #4]
 801d8b2:	4a1d      	ldr	r2, [pc, #116]	; (801d928 <TIM_OC2_SetConfig+0x120>)
 801d8b4:	4293      	cmp	r3, r2
 801d8b6:	d007      	beq.n	801d8c8 <TIM_OC2_SetConfig+0xc0>
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	4a1c      	ldr	r2, [pc, #112]	; (801d92c <TIM_OC2_SetConfig+0x124>)
 801d8bc:	4293      	cmp	r3, r2
 801d8be:	d003      	beq.n	801d8c8 <TIM_OC2_SetConfig+0xc0>
 801d8c0:	687b      	ldr	r3, [r7, #4]
 801d8c2:	4a17      	ldr	r2, [pc, #92]	; (801d920 <TIM_OC2_SetConfig+0x118>)
 801d8c4:	4293      	cmp	r3, r2
 801d8c6:	d113      	bne.n	801d8f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801d8c8:	693b      	ldr	r3, [r7, #16]
 801d8ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d8ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801d8d0:	693b      	ldr	r3, [r7, #16]
 801d8d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d8d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801d8d8:	683b      	ldr	r3, [r7, #0]
 801d8da:	695b      	ldr	r3, [r3, #20]
 801d8dc:	009b      	lsls	r3, r3, #2
 801d8de:	693a      	ldr	r2, [r7, #16]
 801d8e0:	4313      	orrs	r3, r2
 801d8e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801d8e4:	683b      	ldr	r3, [r7, #0]
 801d8e6:	699b      	ldr	r3, [r3, #24]
 801d8e8:	009b      	lsls	r3, r3, #2
 801d8ea:	693a      	ldr	r2, [r7, #16]
 801d8ec:	4313      	orrs	r3, r2
 801d8ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801d8f0:	687b      	ldr	r3, [r7, #4]
 801d8f2:	693a      	ldr	r2, [r7, #16]
 801d8f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	68fa      	ldr	r2, [r7, #12]
 801d8fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801d8fc:	683b      	ldr	r3, [r7, #0]
 801d8fe:	685a      	ldr	r2, [r3, #4]
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	697a      	ldr	r2, [r7, #20]
 801d908:	621a      	str	r2, [r3, #32]
}
 801d90a:	bf00      	nop
 801d90c:	371c      	adds	r7, #28
 801d90e:	46bd      	mov	sp, r7
 801d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d914:	4770      	bx	lr
 801d916:	bf00      	nop
 801d918:	40012c00 	.word	0x40012c00
 801d91c:	40013400 	.word	0x40013400
 801d920:	40015000 	.word	0x40015000
 801d924:	40014000 	.word	0x40014000
 801d928:	40014400 	.word	0x40014400
 801d92c:	40014800 	.word	0x40014800

0801d930 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801d930:	b480      	push	{r7}
 801d932:	b087      	sub	sp, #28
 801d934:	af00      	add	r7, sp, #0
 801d936:	6078      	str	r0, [r7, #4]
 801d938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	6a1b      	ldr	r3, [r3, #32]
 801d93e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	6a1b      	ldr	r3, [r3, #32]
 801d94a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	685b      	ldr	r3, [r3, #4]
 801d950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	69db      	ldr	r3, [r3, #28]
 801d956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d95e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801d962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	f023 0303 	bic.w	r3, r3, #3
 801d96a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801d96c:	683b      	ldr	r3, [r7, #0]
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	68fa      	ldr	r2, [r7, #12]
 801d972:	4313      	orrs	r3, r2
 801d974:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801d976:	697b      	ldr	r3, [r7, #20]
 801d978:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801d97c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	689b      	ldr	r3, [r3, #8]
 801d982:	021b      	lsls	r3, r3, #8
 801d984:	697a      	ldr	r2, [r7, #20]
 801d986:	4313      	orrs	r3, r2
 801d988:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	4a2b      	ldr	r2, [pc, #172]	; (801da3c <TIM_OC3_SetConfig+0x10c>)
 801d98e:	4293      	cmp	r3, r2
 801d990:	d007      	beq.n	801d9a2 <TIM_OC3_SetConfig+0x72>
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	4a2a      	ldr	r2, [pc, #168]	; (801da40 <TIM_OC3_SetConfig+0x110>)
 801d996:	4293      	cmp	r3, r2
 801d998:	d003      	beq.n	801d9a2 <TIM_OC3_SetConfig+0x72>
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	4a29      	ldr	r2, [pc, #164]	; (801da44 <TIM_OC3_SetConfig+0x114>)
 801d99e:	4293      	cmp	r3, r2
 801d9a0:	d10d      	bne.n	801d9be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801d9a2:	697b      	ldr	r3, [r7, #20]
 801d9a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801d9a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801d9aa:	683b      	ldr	r3, [r7, #0]
 801d9ac:	68db      	ldr	r3, [r3, #12]
 801d9ae:	021b      	lsls	r3, r3, #8
 801d9b0:	697a      	ldr	r2, [r7, #20]
 801d9b2:	4313      	orrs	r3, r2
 801d9b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801d9b6:	697b      	ldr	r3, [r7, #20]
 801d9b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801d9bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801d9be:	687b      	ldr	r3, [r7, #4]
 801d9c0:	4a1e      	ldr	r2, [pc, #120]	; (801da3c <TIM_OC3_SetConfig+0x10c>)
 801d9c2:	4293      	cmp	r3, r2
 801d9c4:	d013      	beq.n	801d9ee <TIM_OC3_SetConfig+0xbe>
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	4a1d      	ldr	r2, [pc, #116]	; (801da40 <TIM_OC3_SetConfig+0x110>)
 801d9ca:	4293      	cmp	r3, r2
 801d9cc:	d00f      	beq.n	801d9ee <TIM_OC3_SetConfig+0xbe>
 801d9ce:	687b      	ldr	r3, [r7, #4]
 801d9d0:	4a1d      	ldr	r2, [pc, #116]	; (801da48 <TIM_OC3_SetConfig+0x118>)
 801d9d2:	4293      	cmp	r3, r2
 801d9d4:	d00b      	beq.n	801d9ee <TIM_OC3_SetConfig+0xbe>
 801d9d6:	687b      	ldr	r3, [r7, #4]
 801d9d8:	4a1c      	ldr	r2, [pc, #112]	; (801da4c <TIM_OC3_SetConfig+0x11c>)
 801d9da:	4293      	cmp	r3, r2
 801d9dc:	d007      	beq.n	801d9ee <TIM_OC3_SetConfig+0xbe>
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	4a1b      	ldr	r2, [pc, #108]	; (801da50 <TIM_OC3_SetConfig+0x120>)
 801d9e2:	4293      	cmp	r3, r2
 801d9e4:	d003      	beq.n	801d9ee <TIM_OC3_SetConfig+0xbe>
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	4a16      	ldr	r2, [pc, #88]	; (801da44 <TIM_OC3_SetConfig+0x114>)
 801d9ea:	4293      	cmp	r3, r2
 801d9ec:	d113      	bne.n	801da16 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801d9ee:	693b      	ldr	r3, [r7, #16]
 801d9f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d9f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801d9f6:	693b      	ldr	r3, [r7, #16]
 801d9f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801d9fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801d9fe:	683b      	ldr	r3, [r7, #0]
 801da00:	695b      	ldr	r3, [r3, #20]
 801da02:	011b      	lsls	r3, r3, #4
 801da04:	693a      	ldr	r2, [r7, #16]
 801da06:	4313      	orrs	r3, r2
 801da08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801da0a:	683b      	ldr	r3, [r7, #0]
 801da0c:	699b      	ldr	r3, [r3, #24]
 801da0e:	011b      	lsls	r3, r3, #4
 801da10:	693a      	ldr	r2, [r7, #16]
 801da12:	4313      	orrs	r3, r2
 801da14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	693a      	ldr	r2, [r7, #16]
 801da1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	68fa      	ldr	r2, [r7, #12]
 801da20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801da22:	683b      	ldr	r3, [r7, #0]
 801da24:	685a      	ldr	r2, [r3, #4]
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801da2a:	687b      	ldr	r3, [r7, #4]
 801da2c:	697a      	ldr	r2, [r7, #20]
 801da2e:	621a      	str	r2, [r3, #32]
}
 801da30:	bf00      	nop
 801da32:	371c      	adds	r7, #28
 801da34:	46bd      	mov	sp, r7
 801da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da3a:	4770      	bx	lr
 801da3c:	40012c00 	.word	0x40012c00
 801da40:	40013400 	.word	0x40013400
 801da44:	40015000 	.word	0x40015000
 801da48:	40014000 	.word	0x40014000
 801da4c:	40014400 	.word	0x40014400
 801da50:	40014800 	.word	0x40014800

0801da54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801da54:	b480      	push	{r7}
 801da56:	b087      	sub	sp, #28
 801da58:	af00      	add	r7, sp, #0
 801da5a:	6078      	str	r0, [r7, #4]
 801da5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801da5e:	687b      	ldr	r3, [r7, #4]
 801da60:	6a1b      	ldr	r3, [r3, #32]
 801da62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	6a1b      	ldr	r3, [r3, #32]
 801da6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801da70:	687b      	ldr	r3, [r7, #4]
 801da72:	685b      	ldr	r3, [r3, #4]
 801da74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	69db      	ldr	r3, [r3, #28]
 801da7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801da82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801da86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801da8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801da90:	683b      	ldr	r3, [r7, #0]
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	021b      	lsls	r3, r3, #8
 801da96:	68fa      	ldr	r2, [r7, #12]
 801da98:	4313      	orrs	r3, r2
 801da9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801da9c:	697b      	ldr	r3, [r7, #20]
 801da9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801daa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801daa4:	683b      	ldr	r3, [r7, #0]
 801daa6:	689b      	ldr	r3, [r3, #8]
 801daa8:	031b      	lsls	r3, r3, #12
 801daaa:	697a      	ldr	r2, [r7, #20]
 801daac:	4313      	orrs	r3, r2
 801daae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	4a2c      	ldr	r2, [pc, #176]	; (801db64 <TIM_OC4_SetConfig+0x110>)
 801dab4:	4293      	cmp	r3, r2
 801dab6:	d007      	beq.n	801dac8 <TIM_OC4_SetConfig+0x74>
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	4a2b      	ldr	r2, [pc, #172]	; (801db68 <TIM_OC4_SetConfig+0x114>)
 801dabc:	4293      	cmp	r3, r2
 801dabe:	d003      	beq.n	801dac8 <TIM_OC4_SetConfig+0x74>
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	4a2a      	ldr	r2, [pc, #168]	; (801db6c <TIM_OC4_SetConfig+0x118>)
 801dac4:	4293      	cmp	r3, r2
 801dac6:	d10d      	bne.n	801dae4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801dac8:	697b      	ldr	r3, [r7, #20]
 801daca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801dace:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801dad0:	683b      	ldr	r3, [r7, #0]
 801dad2:	68db      	ldr	r3, [r3, #12]
 801dad4:	031b      	lsls	r3, r3, #12
 801dad6:	697a      	ldr	r2, [r7, #20]
 801dad8:	4313      	orrs	r3, r2
 801dada:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801dadc:	697b      	ldr	r3, [r7, #20]
 801dade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801dae2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dae4:	687b      	ldr	r3, [r7, #4]
 801dae6:	4a1f      	ldr	r2, [pc, #124]	; (801db64 <TIM_OC4_SetConfig+0x110>)
 801dae8:	4293      	cmp	r3, r2
 801daea:	d013      	beq.n	801db14 <TIM_OC4_SetConfig+0xc0>
 801daec:	687b      	ldr	r3, [r7, #4]
 801daee:	4a1e      	ldr	r2, [pc, #120]	; (801db68 <TIM_OC4_SetConfig+0x114>)
 801daf0:	4293      	cmp	r3, r2
 801daf2:	d00f      	beq.n	801db14 <TIM_OC4_SetConfig+0xc0>
 801daf4:	687b      	ldr	r3, [r7, #4]
 801daf6:	4a1e      	ldr	r2, [pc, #120]	; (801db70 <TIM_OC4_SetConfig+0x11c>)
 801daf8:	4293      	cmp	r3, r2
 801dafa:	d00b      	beq.n	801db14 <TIM_OC4_SetConfig+0xc0>
 801dafc:	687b      	ldr	r3, [r7, #4]
 801dafe:	4a1d      	ldr	r2, [pc, #116]	; (801db74 <TIM_OC4_SetConfig+0x120>)
 801db00:	4293      	cmp	r3, r2
 801db02:	d007      	beq.n	801db14 <TIM_OC4_SetConfig+0xc0>
 801db04:	687b      	ldr	r3, [r7, #4]
 801db06:	4a1c      	ldr	r2, [pc, #112]	; (801db78 <TIM_OC4_SetConfig+0x124>)
 801db08:	4293      	cmp	r3, r2
 801db0a:	d003      	beq.n	801db14 <TIM_OC4_SetConfig+0xc0>
 801db0c:	687b      	ldr	r3, [r7, #4]
 801db0e:	4a17      	ldr	r2, [pc, #92]	; (801db6c <TIM_OC4_SetConfig+0x118>)
 801db10:	4293      	cmp	r3, r2
 801db12:	d113      	bne.n	801db3c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801db14:	693b      	ldr	r3, [r7, #16]
 801db16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801db1a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801db1c:	693b      	ldr	r3, [r7, #16]
 801db1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801db22:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801db24:	683b      	ldr	r3, [r7, #0]
 801db26:	695b      	ldr	r3, [r3, #20]
 801db28:	019b      	lsls	r3, r3, #6
 801db2a:	693a      	ldr	r2, [r7, #16]
 801db2c:	4313      	orrs	r3, r2
 801db2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801db30:	683b      	ldr	r3, [r7, #0]
 801db32:	699b      	ldr	r3, [r3, #24]
 801db34:	019b      	lsls	r3, r3, #6
 801db36:	693a      	ldr	r2, [r7, #16]
 801db38:	4313      	orrs	r3, r2
 801db3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801db3c:	687b      	ldr	r3, [r7, #4]
 801db3e:	693a      	ldr	r2, [r7, #16]
 801db40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	68fa      	ldr	r2, [r7, #12]
 801db46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801db48:	683b      	ldr	r3, [r7, #0]
 801db4a:	685a      	ldr	r2, [r3, #4]
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801db50:	687b      	ldr	r3, [r7, #4]
 801db52:	697a      	ldr	r2, [r7, #20]
 801db54:	621a      	str	r2, [r3, #32]
}
 801db56:	bf00      	nop
 801db58:	371c      	adds	r7, #28
 801db5a:	46bd      	mov	sp, r7
 801db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801db60:	4770      	bx	lr
 801db62:	bf00      	nop
 801db64:	40012c00 	.word	0x40012c00
 801db68:	40013400 	.word	0x40013400
 801db6c:	40015000 	.word	0x40015000
 801db70:	40014000 	.word	0x40014000
 801db74:	40014400 	.word	0x40014400
 801db78:	40014800 	.word	0x40014800

0801db7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801db7c:	b480      	push	{r7}
 801db7e:	b087      	sub	sp, #28
 801db80:	af00      	add	r7, sp, #0
 801db82:	6078      	str	r0, [r7, #4]
 801db84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	6a1b      	ldr	r3, [r3, #32]
 801db8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801db92:	687b      	ldr	r3, [r7, #4]
 801db94:	6a1b      	ldr	r3, [r3, #32]
 801db96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801db98:	687b      	ldr	r3, [r7, #4]
 801db9a:	685b      	ldr	r3, [r3, #4]
 801db9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801dba4:	68fb      	ldr	r3, [r7, #12]
 801dba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dbaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dbae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801dbb0:	683b      	ldr	r3, [r7, #0]
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	68fa      	ldr	r2, [r7, #12]
 801dbb6:	4313      	orrs	r3, r2
 801dbb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801dbba:	693b      	ldr	r3, [r7, #16]
 801dbbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801dbc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801dbc2:	683b      	ldr	r3, [r7, #0]
 801dbc4:	689b      	ldr	r3, [r3, #8]
 801dbc6:	041b      	lsls	r3, r3, #16
 801dbc8:	693a      	ldr	r2, [r7, #16]
 801dbca:	4313      	orrs	r3, r2
 801dbcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	4a19      	ldr	r2, [pc, #100]	; (801dc38 <TIM_OC5_SetConfig+0xbc>)
 801dbd2:	4293      	cmp	r3, r2
 801dbd4:	d013      	beq.n	801dbfe <TIM_OC5_SetConfig+0x82>
 801dbd6:	687b      	ldr	r3, [r7, #4]
 801dbd8:	4a18      	ldr	r2, [pc, #96]	; (801dc3c <TIM_OC5_SetConfig+0xc0>)
 801dbda:	4293      	cmp	r3, r2
 801dbdc:	d00f      	beq.n	801dbfe <TIM_OC5_SetConfig+0x82>
 801dbde:	687b      	ldr	r3, [r7, #4]
 801dbe0:	4a17      	ldr	r2, [pc, #92]	; (801dc40 <TIM_OC5_SetConfig+0xc4>)
 801dbe2:	4293      	cmp	r3, r2
 801dbe4:	d00b      	beq.n	801dbfe <TIM_OC5_SetConfig+0x82>
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	4a16      	ldr	r2, [pc, #88]	; (801dc44 <TIM_OC5_SetConfig+0xc8>)
 801dbea:	4293      	cmp	r3, r2
 801dbec:	d007      	beq.n	801dbfe <TIM_OC5_SetConfig+0x82>
 801dbee:	687b      	ldr	r3, [r7, #4]
 801dbf0:	4a15      	ldr	r2, [pc, #84]	; (801dc48 <TIM_OC5_SetConfig+0xcc>)
 801dbf2:	4293      	cmp	r3, r2
 801dbf4:	d003      	beq.n	801dbfe <TIM_OC5_SetConfig+0x82>
 801dbf6:	687b      	ldr	r3, [r7, #4]
 801dbf8:	4a14      	ldr	r2, [pc, #80]	; (801dc4c <TIM_OC5_SetConfig+0xd0>)
 801dbfa:	4293      	cmp	r3, r2
 801dbfc:	d109      	bne.n	801dc12 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801dbfe:	697b      	ldr	r3, [r7, #20]
 801dc00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801dc04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801dc06:	683b      	ldr	r3, [r7, #0]
 801dc08:	695b      	ldr	r3, [r3, #20]
 801dc0a:	021b      	lsls	r3, r3, #8
 801dc0c:	697a      	ldr	r2, [r7, #20]
 801dc0e:	4313      	orrs	r3, r2
 801dc10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dc12:	687b      	ldr	r3, [r7, #4]
 801dc14:	697a      	ldr	r2, [r7, #20]
 801dc16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	68fa      	ldr	r2, [r7, #12]
 801dc1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801dc1e:	683b      	ldr	r3, [r7, #0]
 801dc20:	685a      	ldr	r2, [r3, #4]
 801dc22:	687b      	ldr	r3, [r7, #4]
 801dc24:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	693a      	ldr	r2, [r7, #16]
 801dc2a:	621a      	str	r2, [r3, #32]
}
 801dc2c:	bf00      	nop
 801dc2e:	371c      	adds	r7, #28
 801dc30:	46bd      	mov	sp, r7
 801dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc36:	4770      	bx	lr
 801dc38:	40012c00 	.word	0x40012c00
 801dc3c:	40013400 	.word	0x40013400
 801dc40:	40014000 	.word	0x40014000
 801dc44:	40014400 	.word	0x40014400
 801dc48:	40014800 	.word	0x40014800
 801dc4c:	40015000 	.word	0x40015000

0801dc50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801dc50:	b480      	push	{r7}
 801dc52:	b087      	sub	sp, #28
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	6078      	str	r0, [r7, #4]
 801dc58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	6a1b      	ldr	r3, [r3, #32]
 801dc5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801dc62:	687b      	ldr	r3, [r7, #4]
 801dc64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	6a1b      	ldr	r3, [r3, #32]
 801dc6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801dc6c:	687b      	ldr	r3, [r7, #4]
 801dc6e:	685b      	ldr	r3, [r3, #4]
 801dc70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801dc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801dc78:	68fb      	ldr	r3, [r7, #12]
 801dc7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801dc7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801dc82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801dc84:	683b      	ldr	r3, [r7, #0]
 801dc86:	681b      	ldr	r3, [r3, #0]
 801dc88:	021b      	lsls	r3, r3, #8
 801dc8a:	68fa      	ldr	r2, [r7, #12]
 801dc8c:	4313      	orrs	r3, r2
 801dc8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801dc90:	693b      	ldr	r3, [r7, #16]
 801dc92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801dc96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801dc98:	683b      	ldr	r3, [r7, #0]
 801dc9a:	689b      	ldr	r3, [r3, #8]
 801dc9c:	051b      	lsls	r3, r3, #20
 801dc9e:	693a      	ldr	r2, [r7, #16]
 801dca0:	4313      	orrs	r3, r2
 801dca2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	4a1a      	ldr	r2, [pc, #104]	; (801dd10 <TIM_OC6_SetConfig+0xc0>)
 801dca8:	4293      	cmp	r3, r2
 801dcaa:	d013      	beq.n	801dcd4 <TIM_OC6_SetConfig+0x84>
 801dcac:	687b      	ldr	r3, [r7, #4]
 801dcae:	4a19      	ldr	r2, [pc, #100]	; (801dd14 <TIM_OC6_SetConfig+0xc4>)
 801dcb0:	4293      	cmp	r3, r2
 801dcb2:	d00f      	beq.n	801dcd4 <TIM_OC6_SetConfig+0x84>
 801dcb4:	687b      	ldr	r3, [r7, #4]
 801dcb6:	4a18      	ldr	r2, [pc, #96]	; (801dd18 <TIM_OC6_SetConfig+0xc8>)
 801dcb8:	4293      	cmp	r3, r2
 801dcba:	d00b      	beq.n	801dcd4 <TIM_OC6_SetConfig+0x84>
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	4a17      	ldr	r2, [pc, #92]	; (801dd1c <TIM_OC6_SetConfig+0xcc>)
 801dcc0:	4293      	cmp	r3, r2
 801dcc2:	d007      	beq.n	801dcd4 <TIM_OC6_SetConfig+0x84>
 801dcc4:	687b      	ldr	r3, [r7, #4]
 801dcc6:	4a16      	ldr	r2, [pc, #88]	; (801dd20 <TIM_OC6_SetConfig+0xd0>)
 801dcc8:	4293      	cmp	r3, r2
 801dcca:	d003      	beq.n	801dcd4 <TIM_OC6_SetConfig+0x84>
 801dccc:	687b      	ldr	r3, [r7, #4]
 801dcce:	4a15      	ldr	r2, [pc, #84]	; (801dd24 <TIM_OC6_SetConfig+0xd4>)
 801dcd0:	4293      	cmp	r3, r2
 801dcd2:	d109      	bne.n	801dce8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801dcd4:	697b      	ldr	r3, [r7, #20]
 801dcd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801dcda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801dcdc:	683b      	ldr	r3, [r7, #0]
 801dcde:	695b      	ldr	r3, [r3, #20]
 801dce0:	029b      	lsls	r3, r3, #10
 801dce2:	697a      	ldr	r2, [r7, #20]
 801dce4:	4313      	orrs	r3, r2
 801dce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	697a      	ldr	r2, [r7, #20]
 801dcec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801dcee:	687b      	ldr	r3, [r7, #4]
 801dcf0:	68fa      	ldr	r2, [r7, #12]
 801dcf2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801dcf4:	683b      	ldr	r3, [r7, #0]
 801dcf6:	685a      	ldr	r2, [r3, #4]
 801dcf8:	687b      	ldr	r3, [r7, #4]
 801dcfa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	693a      	ldr	r2, [r7, #16]
 801dd00:	621a      	str	r2, [r3, #32]
}
 801dd02:	bf00      	nop
 801dd04:	371c      	adds	r7, #28
 801dd06:	46bd      	mov	sp, r7
 801dd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd0c:	4770      	bx	lr
 801dd0e:	bf00      	nop
 801dd10:	40012c00 	.word	0x40012c00
 801dd14:	40013400 	.word	0x40013400
 801dd18:	40014000 	.word	0x40014000
 801dd1c:	40014400 	.word	0x40014400
 801dd20:	40014800 	.word	0x40014800
 801dd24:	40015000 	.word	0x40015000

0801dd28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801dd28:	b480      	push	{r7}
 801dd2a:	b087      	sub	sp, #28
 801dd2c:	af00      	add	r7, sp, #0
 801dd2e:	60f8      	str	r0, [r7, #12]
 801dd30:	60b9      	str	r1, [r7, #8]
 801dd32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801dd34:	68bb      	ldr	r3, [r7, #8]
 801dd36:	f003 031f 	and.w	r3, r3, #31
 801dd3a:	2201      	movs	r2, #1
 801dd3c:	fa02 f303 	lsl.w	r3, r2, r3
 801dd40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	6a1a      	ldr	r2, [r3, #32]
 801dd46:	697b      	ldr	r3, [r7, #20]
 801dd48:	43db      	mvns	r3, r3
 801dd4a:	401a      	ands	r2, r3
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	6a1a      	ldr	r2, [r3, #32]
 801dd54:	68bb      	ldr	r3, [r7, #8]
 801dd56:	f003 031f 	and.w	r3, r3, #31
 801dd5a:	6879      	ldr	r1, [r7, #4]
 801dd5c:	fa01 f303 	lsl.w	r3, r1, r3
 801dd60:	431a      	orrs	r2, r3
 801dd62:	68fb      	ldr	r3, [r7, #12]
 801dd64:	621a      	str	r2, [r3, #32]
}
 801dd66:	bf00      	nop
 801dd68:	371c      	adds	r7, #28
 801dd6a:	46bd      	mov	sp, r7
 801dd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd70:	4770      	bx	lr
	...

0801dd74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801dd74:	b480      	push	{r7}
 801dd76:	b085      	sub	sp, #20
 801dd78:	af00      	add	r7, sp, #0
 801dd7a:	6078      	str	r0, [r7, #4]
 801dd7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801dd7e:	687b      	ldr	r3, [r7, #4]
 801dd80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dd84:	2b01      	cmp	r3, #1
 801dd86:	d101      	bne.n	801dd8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801dd88:	2302      	movs	r3, #2
 801dd8a:	e06f      	b.n	801de6c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	2201      	movs	r2, #1
 801dd90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	2202      	movs	r2, #2
 801dd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801dd9c:	687b      	ldr	r3, [r7, #4]
 801dd9e:	681b      	ldr	r3, [r3, #0]
 801dda0:	685b      	ldr	r3, [r3, #4]
 801dda2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	681b      	ldr	r3, [r3, #0]
 801dda8:	689b      	ldr	r3, [r3, #8]
 801ddaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	4a31      	ldr	r2, [pc, #196]	; (801de78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801ddb2:	4293      	cmp	r3, r2
 801ddb4:	d009      	beq.n	801ddca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ddb6:	687b      	ldr	r3, [r7, #4]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	4a30      	ldr	r2, [pc, #192]	; (801de7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801ddbc:	4293      	cmp	r3, r2
 801ddbe:	d004      	beq.n	801ddca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	4a2e      	ldr	r2, [pc, #184]	; (801de80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801ddc6:	4293      	cmp	r3, r2
 801ddc8:	d108      	bne.n	801dddc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801ddca:	68fb      	ldr	r3, [r7, #12]
 801ddcc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801ddd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801ddd2:	683b      	ldr	r3, [r7, #0]
 801ddd4:	685b      	ldr	r3, [r3, #4]
 801ddd6:	68fa      	ldr	r2, [r7, #12]
 801ddd8:	4313      	orrs	r3, r2
 801ddda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801dde2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801dde6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801dde8:	683b      	ldr	r3, [r7, #0]
 801ddea:	681b      	ldr	r3, [r3, #0]
 801ddec:	68fa      	ldr	r2, [r7, #12]
 801ddee:	4313      	orrs	r3, r2
 801ddf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801ddf2:	687b      	ldr	r3, [r7, #4]
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	68fa      	ldr	r2, [r7, #12]
 801ddf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	4a1e      	ldr	r2, [pc, #120]	; (801de78 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801de00:	4293      	cmp	r3, r2
 801de02:	d01d      	beq.n	801de40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	681b      	ldr	r3, [r3, #0]
 801de08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801de0c:	d018      	beq.n	801de40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	4a1c      	ldr	r2, [pc, #112]	; (801de84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801de14:	4293      	cmp	r3, r2
 801de16:	d013      	beq.n	801de40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	4a1a      	ldr	r2, [pc, #104]	; (801de88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801de1e:	4293      	cmp	r3, r2
 801de20:	d00e      	beq.n	801de40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	681b      	ldr	r3, [r3, #0]
 801de26:	4a15      	ldr	r2, [pc, #84]	; (801de7c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801de28:	4293      	cmp	r3, r2
 801de2a:	d009      	beq.n	801de40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	4a16      	ldr	r2, [pc, #88]	; (801de8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801de32:	4293      	cmp	r3, r2
 801de34:	d004      	beq.n	801de40 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801de36:	687b      	ldr	r3, [r7, #4]
 801de38:	681b      	ldr	r3, [r3, #0]
 801de3a:	4a11      	ldr	r2, [pc, #68]	; (801de80 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801de3c:	4293      	cmp	r3, r2
 801de3e:	d10c      	bne.n	801de5a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801de40:	68bb      	ldr	r3, [r7, #8]
 801de42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801de46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801de48:	683b      	ldr	r3, [r7, #0]
 801de4a:	689b      	ldr	r3, [r3, #8]
 801de4c:	68ba      	ldr	r2, [r7, #8]
 801de4e:	4313      	orrs	r3, r2
 801de50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801de52:	687b      	ldr	r3, [r7, #4]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	68ba      	ldr	r2, [r7, #8]
 801de58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801de5a:	687b      	ldr	r3, [r7, #4]
 801de5c:	2201      	movs	r2, #1
 801de5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801de62:	687b      	ldr	r3, [r7, #4]
 801de64:	2200      	movs	r2, #0
 801de66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801de6a:	2300      	movs	r3, #0
}
 801de6c:	4618      	mov	r0, r3
 801de6e:	3714      	adds	r7, #20
 801de70:	46bd      	mov	sp, r7
 801de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de76:	4770      	bx	lr
 801de78:	40012c00 	.word	0x40012c00
 801de7c:	40013400 	.word	0x40013400
 801de80:	40015000 	.word	0x40015000
 801de84:	40000400 	.word	0x40000400
 801de88:	40000800 	.word	0x40000800
 801de8c:	40014000 	.word	0x40014000

0801de90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801de90:	b480      	push	{r7}
 801de92:	b085      	sub	sp, #20
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
 801de98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801de9a:	2300      	movs	r3, #0
 801de9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801de9e:	687b      	ldr	r3, [r7, #4]
 801dea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801dea4:	2b01      	cmp	r3, #1
 801dea6:	d101      	bne.n	801deac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801dea8:	2302      	movs	r3, #2
 801deaa:	e096      	b.n	801dfda <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801deac:	687b      	ldr	r3, [r7, #4]
 801deae:	2201      	movs	r2, #1
 801deb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801deb4:	68fb      	ldr	r3, [r7, #12]
 801deb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801deba:	683b      	ldr	r3, [r7, #0]
 801debc:	68db      	ldr	r3, [r3, #12]
 801debe:	4313      	orrs	r3, r2
 801dec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801dec2:	68fb      	ldr	r3, [r7, #12]
 801dec4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801dec8:	683b      	ldr	r3, [r7, #0]
 801deca:	689b      	ldr	r3, [r3, #8]
 801decc:	4313      	orrs	r3, r2
 801dece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801ded0:	68fb      	ldr	r3, [r7, #12]
 801ded2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801ded6:	683b      	ldr	r3, [r7, #0]
 801ded8:	685b      	ldr	r3, [r3, #4]
 801deda:	4313      	orrs	r3, r2
 801dedc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801dede:	68fb      	ldr	r3, [r7, #12]
 801dee0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801dee4:	683b      	ldr	r3, [r7, #0]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	4313      	orrs	r3, r2
 801deea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801def2:	683b      	ldr	r3, [r7, #0]
 801def4:	691b      	ldr	r3, [r3, #16]
 801def6:	4313      	orrs	r3, r2
 801def8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801defa:	68fb      	ldr	r3, [r7, #12]
 801defc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801df00:	683b      	ldr	r3, [r7, #0]
 801df02:	695b      	ldr	r3, [r3, #20]
 801df04:	4313      	orrs	r3, r2
 801df06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801df08:	68fb      	ldr	r3, [r7, #12]
 801df0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801df0e:	683b      	ldr	r3, [r7, #0]
 801df10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801df12:	4313      	orrs	r3, r2
 801df14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801df1c:	683b      	ldr	r3, [r7, #0]
 801df1e:	699b      	ldr	r3, [r3, #24]
 801df20:	041b      	lsls	r3, r3, #16
 801df22:	4313      	orrs	r3, r2
 801df24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801df26:	687b      	ldr	r3, [r7, #4]
 801df28:	681b      	ldr	r3, [r3, #0]
 801df2a:	4a2f      	ldr	r2, [pc, #188]	; (801dfe8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801df2c:	4293      	cmp	r3, r2
 801df2e:	d009      	beq.n	801df44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801df30:	687b      	ldr	r3, [r7, #4]
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	4a2d      	ldr	r2, [pc, #180]	; (801dfec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801df36:	4293      	cmp	r3, r2
 801df38:	d004      	beq.n	801df44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	681b      	ldr	r3, [r3, #0]
 801df3e:	4a2c      	ldr	r2, [pc, #176]	; (801dff0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801df40:	4293      	cmp	r3, r2
 801df42:	d106      	bne.n	801df52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801df4a:	683b      	ldr	r3, [r7, #0]
 801df4c:	69db      	ldr	r3, [r3, #28]
 801df4e:	4313      	orrs	r3, r2
 801df50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	681b      	ldr	r3, [r3, #0]
 801df56:	4a24      	ldr	r2, [pc, #144]	; (801dfe8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801df58:	4293      	cmp	r3, r2
 801df5a:	d009      	beq.n	801df70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	4a22      	ldr	r2, [pc, #136]	; (801dfec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801df62:	4293      	cmp	r3, r2
 801df64:	d004      	beq.n	801df70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801df66:	687b      	ldr	r3, [r7, #4]
 801df68:	681b      	ldr	r3, [r3, #0]
 801df6a:	4a21      	ldr	r2, [pc, #132]	; (801dff0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801df6c:	4293      	cmp	r3, r2
 801df6e:	d12b      	bne.n	801dfc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801df70:	68fb      	ldr	r3, [r7, #12]
 801df72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801df76:	683b      	ldr	r3, [r7, #0]
 801df78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df7a:	051b      	lsls	r3, r3, #20
 801df7c:	4313      	orrs	r3, r2
 801df7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801df86:	683b      	ldr	r3, [r7, #0]
 801df88:	6a1b      	ldr	r3, [r3, #32]
 801df8a:	4313      	orrs	r3, r2
 801df8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801df8e:	68fb      	ldr	r3, [r7, #12]
 801df90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801df94:	683b      	ldr	r3, [r7, #0]
 801df96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801df98:	4313      	orrs	r3, r2
 801df9a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	4a11      	ldr	r2, [pc, #68]	; (801dfe8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801dfa2:	4293      	cmp	r3, r2
 801dfa4:	d009      	beq.n	801dfba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801dfa6:	687b      	ldr	r3, [r7, #4]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	4a10      	ldr	r2, [pc, #64]	; (801dfec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801dfac:	4293      	cmp	r3, r2
 801dfae:	d004      	beq.n	801dfba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	4a0e      	ldr	r2, [pc, #56]	; (801dff0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801dfb6:	4293      	cmp	r3, r2
 801dfb8:	d106      	bne.n	801dfc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801dfc0:	683b      	ldr	r3, [r7, #0]
 801dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfc4:	4313      	orrs	r3, r2
 801dfc6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	68fa      	ldr	r2, [r7, #12]
 801dfce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2200      	movs	r2, #0
 801dfd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801dfd8:	2300      	movs	r3, #0
}
 801dfda:	4618      	mov	r0, r3
 801dfdc:	3714      	adds	r7, #20
 801dfde:	46bd      	mov	sp, r7
 801dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfe4:	4770      	bx	lr
 801dfe6:	bf00      	nop
 801dfe8:	40012c00 	.word	0x40012c00
 801dfec:	40013400 	.word	0x40013400
 801dff0:	40015000 	.word	0x40015000

0801dff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801dff4:	b480      	push	{r7}
 801dff6:	b083      	sub	sp, #12
 801dff8:	af00      	add	r7, sp, #0
 801dffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801dffc:	bf00      	nop
 801dffe:	370c      	adds	r7, #12
 801e000:	46bd      	mov	sp, r7
 801e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e006:	4770      	bx	lr

0801e008 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801e008:	b480      	push	{r7}
 801e00a:	b083      	sub	sp, #12
 801e00c:	af00      	add	r7, sp, #0
 801e00e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801e010:	bf00      	nop
 801e012:	370c      	adds	r7, #12
 801e014:	46bd      	mov	sp, r7
 801e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e01a:	4770      	bx	lr

0801e01c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801e01c:	b480      	push	{r7}
 801e01e:	b083      	sub	sp, #12
 801e020:	af00      	add	r7, sp, #0
 801e022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801e024:	bf00      	nop
 801e026:	370c      	adds	r7, #12
 801e028:	46bd      	mov	sp, r7
 801e02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e02e:	4770      	bx	lr

0801e030 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801e030:	b480      	push	{r7}
 801e032:	b083      	sub	sp, #12
 801e034:	af00      	add	r7, sp, #0
 801e036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801e038:	bf00      	nop
 801e03a:	370c      	adds	r7, #12
 801e03c:	46bd      	mov	sp, r7
 801e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e042:	4770      	bx	lr

0801e044 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801e044:	b480      	push	{r7}
 801e046:	b083      	sub	sp, #12
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801e04c:	bf00      	nop
 801e04e:	370c      	adds	r7, #12
 801e050:	46bd      	mov	sp, r7
 801e052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e056:	4770      	bx	lr

0801e058 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801e058:	b480      	push	{r7}
 801e05a:	b083      	sub	sp, #12
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801e060:	bf00      	nop
 801e062:	370c      	adds	r7, #12
 801e064:	46bd      	mov	sp, r7
 801e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e06a:	4770      	bx	lr

0801e06c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801e06c:	b480      	push	{r7}
 801e06e:	b083      	sub	sp, #12
 801e070:	af00      	add	r7, sp, #0
 801e072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801e074:	bf00      	nop
 801e076:	370c      	adds	r7, #12
 801e078:	46bd      	mov	sp, r7
 801e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e07e:	4770      	bx	lr

0801e080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e080:	b580      	push	{r7, lr}
 801e082:	b082      	sub	sp, #8
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e088:	687b      	ldr	r3, [r7, #4]
 801e08a:	2b00      	cmp	r3, #0
 801e08c:	d101      	bne.n	801e092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e08e:	2301      	movs	r3, #1
 801e090:	e042      	b.n	801e118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e092:	687b      	ldr	r3, [r7, #4]
 801e094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e098:	2b00      	cmp	r3, #0
 801e09a:	d106      	bne.n	801e0aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e09c:	687b      	ldr	r3, [r7, #4]
 801e09e:	2200      	movs	r2, #0
 801e0a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801e0a4:	6878      	ldr	r0, [r7, #4]
 801e0a6:	f7f9 fae3 	bl	8017670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e0aa:	687b      	ldr	r3, [r7, #4]
 801e0ac:	2224      	movs	r2, #36	; 0x24
 801e0ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801e0b2:	687b      	ldr	r3, [r7, #4]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	681a      	ldr	r2, [r3, #0]
 801e0b8:	687b      	ldr	r3, [r7, #4]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	f022 0201 	bic.w	r2, r2, #1
 801e0c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e0c2:	6878      	ldr	r0, [r7, #4]
 801e0c4:	f000 f8c2 	bl	801e24c <UART_SetConfig>
 801e0c8:	4603      	mov	r3, r0
 801e0ca:	2b01      	cmp	r3, #1
 801e0cc:	d101      	bne.n	801e0d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801e0ce:	2301      	movs	r3, #1
 801e0d0:	e022      	b.n	801e118 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e0d6:	2b00      	cmp	r3, #0
 801e0d8:	d002      	beq.n	801e0e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801e0da:	6878      	ldr	r0, [r7, #4]
 801e0dc:	f000 fbb2 	bl	801e844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e0e0:	687b      	ldr	r3, [r7, #4]
 801e0e2:	681b      	ldr	r3, [r3, #0]
 801e0e4:	685a      	ldr	r2, [r3, #4]
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e0ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	681b      	ldr	r3, [r3, #0]
 801e0f4:	689a      	ldr	r2, [r3, #8]
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e0fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e100:	687b      	ldr	r3, [r7, #4]
 801e102:	681b      	ldr	r3, [r3, #0]
 801e104:	681a      	ldr	r2, [r3, #0]
 801e106:	687b      	ldr	r3, [r7, #4]
 801e108:	681b      	ldr	r3, [r3, #0]
 801e10a:	f042 0201 	orr.w	r2, r2, #1
 801e10e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e110:	6878      	ldr	r0, [r7, #4]
 801e112:	f000 fc39 	bl	801e988 <UART_CheckIdleState>
 801e116:	4603      	mov	r3, r0
}
 801e118:	4618      	mov	r0, r3
 801e11a:	3708      	adds	r7, #8
 801e11c:	46bd      	mov	sp, r7
 801e11e:	bd80      	pop	{r7, pc}

0801e120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b08a      	sub	sp, #40	; 0x28
 801e124:	af02      	add	r7, sp, #8
 801e126:	60f8      	str	r0, [r7, #12]
 801e128:	60b9      	str	r1, [r7, #8]
 801e12a:	603b      	str	r3, [r7, #0]
 801e12c:	4613      	mov	r3, r2
 801e12e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e136:	2b20      	cmp	r3, #32
 801e138:	f040 8083 	bne.w	801e242 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801e13c:	68bb      	ldr	r3, [r7, #8]
 801e13e:	2b00      	cmp	r3, #0
 801e140:	d002      	beq.n	801e148 <HAL_UART_Transmit+0x28>
 801e142:	88fb      	ldrh	r3, [r7, #6]
 801e144:	2b00      	cmp	r3, #0
 801e146:	d101      	bne.n	801e14c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801e148:	2301      	movs	r3, #1
 801e14a:	e07b      	b.n	801e244 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801e14c:	68fb      	ldr	r3, [r7, #12]
 801e14e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801e152:	2b01      	cmp	r3, #1
 801e154:	d101      	bne.n	801e15a <HAL_UART_Transmit+0x3a>
 801e156:	2302      	movs	r3, #2
 801e158:	e074      	b.n	801e244 <HAL_UART_Transmit+0x124>
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	2201      	movs	r2, #1
 801e15e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	2200      	movs	r2, #0
 801e166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	2221      	movs	r2, #33	; 0x21
 801e16e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e172:	f7f9 fb6b 	bl	801784c <HAL_GetTick>
 801e176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e178:	68fb      	ldr	r3, [r7, #12]
 801e17a:	88fa      	ldrh	r2, [r7, #6]
 801e17c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801e180:	68fb      	ldr	r3, [r7, #12]
 801e182:	88fa      	ldrh	r2, [r7, #6]
 801e184:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e188:	68fb      	ldr	r3, [r7, #12]
 801e18a:	689b      	ldr	r3, [r3, #8]
 801e18c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e190:	d108      	bne.n	801e1a4 <HAL_UART_Transmit+0x84>
 801e192:	68fb      	ldr	r3, [r7, #12]
 801e194:	691b      	ldr	r3, [r3, #16]
 801e196:	2b00      	cmp	r3, #0
 801e198:	d104      	bne.n	801e1a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801e19a:	2300      	movs	r3, #0
 801e19c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e19e:	68bb      	ldr	r3, [r7, #8]
 801e1a0:	61bb      	str	r3, [r7, #24]
 801e1a2:	e003      	b.n	801e1ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801e1a4:	68bb      	ldr	r3, [r7, #8]
 801e1a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e1a8:	2300      	movs	r3, #0
 801e1aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801e1ac:	68fb      	ldr	r3, [r7, #12]
 801e1ae:	2200      	movs	r2, #0
 801e1b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801e1b4:	e02c      	b.n	801e210 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e1b6:	683b      	ldr	r3, [r7, #0]
 801e1b8:	9300      	str	r3, [sp, #0]
 801e1ba:	697b      	ldr	r3, [r7, #20]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	2180      	movs	r1, #128	; 0x80
 801e1c0:	68f8      	ldr	r0, [r7, #12]
 801e1c2:	f000 fc2c 	bl	801ea1e <UART_WaitOnFlagUntilTimeout>
 801e1c6:	4603      	mov	r3, r0
 801e1c8:	2b00      	cmp	r3, #0
 801e1ca:	d001      	beq.n	801e1d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801e1cc:	2303      	movs	r3, #3
 801e1ce:	e039      	b.n	801e244 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801e1d0:	69fb      	ldr	r3, [r7, #28]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d10b      	bne.n	801e1ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e1d6:	69bb      	ldr	r3, [r7, #24]
 801e1d8:	881b      	ldrh	r3, [r3, #0]
 801e1da:	461a      	mov	r2, r3
 801e1dc:	68fb      	ldr	r3, [r7, #12]
 801e1de:	681b      	ldr	r3, [r3, #0]
 801e1e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e1e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e1e6:	69bb      	ldr	r3, [r7, #24]
 801e1e8:	3302      	adds	r3, #2
 801e1ea:	61bb      	str	r3, [r7, #24]
 801e1ec:	e007      	b.n	801e1fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e1ee:	69fb      	ldr	r3, [r7, #28]
 801e1f0:	781a      	ldrb	r2, [r3, #0]
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e1f8:	69fb      	ldr	r3, [r7, #28]
 801e1fa:	3301      	adds	r3, #1
 801e1fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e1fe:	68fb      	ldr	r3, [r7, #12]
 801e200:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e204:	b29b      	uxth	r3, r3
 801e206:	3b01      	subs	r3, #1
 801e208:	b29a      	uxth	r2, r3
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801e216:	b29b      	uxth	r3, r3
 801e218:	2b00      	cmp	r3, #0
 801e21a:	d1cc      	bne.n	801e1b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e21c:	683b      	ldr	r3, [r7, #0]
 801e21e:	9300      	str	r3, [sp, #0]
 801e220:	697b      	ldr	r3, [r7, #20]
 801e222:	2200      	movs	r2, #0
 801e224:	2140      	movs	r1, #64	; 0x40
 801e226:	68f8      	ldr	r0, [r7, #12]
 801e228:	f000 fbf9 	bl	801ea1e <UART_WaitOnFlagUntilTimeout>
 801e22c:	4603      	mov	r3, r0
 801e22e:	2b00      	cmp	r3, #0
 801e230:	d001      	beq.n	801e236 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801e232:	2303      	movs	r3, #3
 801e234:	e006      	b.n	801e244 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	2220      	movs	r2, #32
 801e23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801e23e:	2300      	movs	r3, #0
 801e240:	e000      	b.n	801e244 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801e242:	2302      	movs	r3, #2
  }
}
 801e244:	4618      	mov	r0, r3
 801e246:	3720      	adds	r7, #32
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801e24c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801e250:	b08c      	sub	sp, #48	; 0x30
 801e252:	af00      	add	r7, sp, #0
 801e254:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801e256:	2300      	movs	r3, #0
 801e258:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801e25c:	697b      	ldr	r3, [r7, #20]
 801e25e:	689a      	ldr	r2, [r3, #8]
 801e260:	697b      	ldr	r3, [r7, #20]
 801e262:	691b      	ldr	r3, [r3, #16]
 801e264:	431a      	orrs	r2, r3
 801e266:	697b      	ldr	r3, [r7, #20]
 801e268:	695b      	ldr	r3, [r3, #20]
 801e26a:	431a      	orrs	r2, r3
 801e26c:	697b      	ldr	r3, [r7, #20]
 801e26e:	69db      	ldr	r3, [r3, #28]
 801e270:	4313      	orrs	r3, r2
 801e272:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801e274:	697b      	ldr	r3, [r7, #20]
 801e276:	681b      	ldr	r3, [r3, #0]
 801e278:	681a      	ldr	r2, [r3, #0]
 801e27a:	4baa      	ldr	r3, [pc, #680]	; (801e524 <UART_SetConfig+0x2d8>)
 801e27c:	4013      	ands	r3, r2
 801e27e:	697a      	ldr	r2, [r7, #20]
 801e280:	6812      	ldr	r2, [r2, #0]
 801e282:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e284:	430b      	orrs	r3, r1
 801e286:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801e288:	697b      	ldr	r3, [r7, #20]
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	685b      	ldr	r3, [r3, #4]
 801e28e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801e292:	697b      	ldr	r3, [r7, #20]
 801e294:	68da      	ldr	r2, [r3, #12]
 801e296:	697b      	ldr	r3, [r7, #20]
 801e298:	681b      	ldr	r3, [r3, #0]
 801e29a:	430a      	orrs	r2, r1
 801e29c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801e29e:	697b      	ldr	r3, [r7, #20]
 801e2a0:	699b      	ldr	r3, [r3, #24]
 801e2a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801e2a4:	697b      	ldr	r3, [r7, #20]
 801e2a6:	681b      	ldr	r3, [r3, #0]
 801e2a8:	4a9f      	ldr	r2, [pc, #636]	; (801e528 <UART_SetConfig+0x2dc>)
 801e2aa:	4293      	cmp	r3, r2
 801e2ac:	d004      	beq.n	801e2b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801e2ae:	697b      	ldr	r3, [r7, #20]
 801e2b0:	6a1b      	ldr	r3, [r3, #32]
 801e2b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e2b4:	4313      	orrs	r3, r2
 801e2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801e2b8:	697b      	ldr	r3, [r7, #20]
 801e2ba:	681b      	ldr	r3, [r3, #0]
 801e2bc:	689b      	ldr	r3, [r3, #8]
 801e2be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801e2c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801e2c6:	697a      	ldr	r2, [r7, #20]
 801e2c8:	6812      	ldr	r2, [r2, #0]
 801e2ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801e2cc:	430b      	orrs	r3, r1
 801e2ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801e2d0:	697b      	ldr	r3, [r7, #20]
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2d6:	f023 010f 	bic.w	r1, r3, #15
 801e2da:	697b      	ldr	r3, [r7, #20]
 801e2dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e2de:	697b      	ldr	r3, [r7, #20]
 801e2e0:	681b      	ldr	r3, [r3, #0]
 801e2e2:	430a      	orrs	r2, r1
 801e2e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801e2e6:	697b      	ldr	r3, [r7, #20]
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	4a90      	ldr	r2, [pc, #576]	; (801e52c <UART_SetConfig+0x2e0>)
 801e2ec:	4293      	cmp	r3, r2
 801e2ee:	d125      	bne.n	801e33c <UART_SetConfig+0xf0>
 801e2f0:	4b8f      	ldr	r3, [pc, #572]	; (801e530 <UART_SetConfig+0x2e4>)
 801e2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e2f6:	f003 0303 	and.w	r3, r3, #3
 801e2fa:	2b03      	cmp	r3, #3
 801e2fc:	d81a      	bhi.n	801e334 <UART_SetConfig+0xe8>
 801e2fe:	a201      	add	r2, pc, #4	; (adr r2, 801e304 <UART_SetConfig+0xb8>)
 801e300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e304:	0801e315 	.word	0x0801e315
 801e308:	0801e325 	.word	0x0801e325
 801e30c:	0801e31d 	.word	0x0801e31d
 801e310:	0801e32d 	.word	0x0801e32d
 801e314:	2301      	movs	r3, #1
 801e316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e31a:	e116      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e31c:	2302      	movs	r3, #2
 801e31e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e322:	e112      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e324:	2304      	movs	r3, #4
 801e326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e32a:	e10e      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e32c:	2308      	movs	r3, #8
 801e32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e332:	e10a      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e334:	2310      	movs	r3, #16
 801e336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e33a:	e106      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e33c:	697b      	ldr	r3, [r7, #20]
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	4a7c      	ldr	r2, [pc, #496]	; (801e534 <UART_SetConfig+0x2e8>)
 801e342:	4293      	cmp	r3, r2
 801e344:	d138      	bne.n	801e3b8 <UART_SetConfig+0x16c>
 801e346:	4b7a      	ldr	r3, [pc, #488]	; (801e530 <UART_SetConfig+0x2e4>)
 801e348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e34c:	f003 030c 	and.w	r3, r3, #12
 801e350:	2b0c      	cmp	r3, #12
 801e352:	d82d      	bhi.n	801e3b0 <UART_SetConfig+0x164>
 801e354:	a201      	add	r2, pc, #4	; (adr r2, 801e35c <UART_SetConfig+0x110>)
 801e356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e35a:	bf00      	nop
 801e35c:	0801e391 	.word	0x0801e391
 801e360:	0801e3b1 	.word	0x0801e3b1
 801e364:	0801e3b1 	.word	0x0801e3b1
 801e368:	0801e3b1 	.word	0x0801e3b1
 801e36c:	0801e3a1 	.word	0x0801e3a1
 801e370:	0801e3b1 	.word	0x0801e3b1
 801e374:	0801e3b1 	.word	0x0801e3b1
 801e378:	0801e3b1 	.word	0x0801e3b1
 801e37c:	0801e399 	.word	0x0801e399
 801e380:	0801e3b1 	.word	0x0801e3b1
 801e384:	0801e3b1 	.word	0x0801e3b1
 801e388:	0801e3b1 	.word	0x0801e3b1
 801e38c:	0801e3a9 	.word	0x0801e3a9
 801e390:	2300      	movs	r3, #0
 801e392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e396:	e0d8      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e398:	2302      	movs	r3, #2
 801e39a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e39e:	e0d4      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3a0:	2304      	movs	r3, #4
 801e3a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3a6:	e0d0      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3a8:	2308      	movs	r3, #8
 801e3aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3ae:	e0cc      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3b0:	2310      	movs	r3, #16
 801e3b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3b6:	e0c8      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3b8:	697b      	ldr	r3, [r7, #20]
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	4a5e      	ldr	r2, [pc, #376]	; (801e538 <UART_SetConfig+0x2ec>)
 801e3be:	4293      	cmp	r3, r2
 801e3c0:	d125      	bne.n	801e40e <UART_SetConfig+0x1c2>
 801e3c2:	4b5b      	ldr	r3, [pc, #364]	; (801e530 <UART_SetConfig+0x2e4>)
 801e3c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e3c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801e3cc:	2b30      	cmp	r3, #48	; 0x30
 801e3ce:	d016      	beq.n	801e3fe <UART_SetConfig+0x1b2>
 801e3d0:	2b30      	cmp	r3, #48	; 0x30
 801e3d2:	d818      	bhi.n	801e406 <UART_SetConfig+0x1ba>
 801e3d4:	2b20      	cmp	r3, #32
 801e3d6:	d00a      	beq.n	801e3ee <UART_SetConfig+0x1a2>
 801e3d8:	2b20      	cmp	r3, #32
 801e3da:	d814      	bhi.n	801e406 <UART_SetConfig+0x1ba>
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d002      	beq.n	801e3e6 <UART_SetConfig+0x19a>
 801e3e0:	2b10      	cmp	r3, #16
 801e3e2:	d008      	beq.n	801e3f6 <UART_SetConfig+0x1aa>
 801e3e4:	e00f      	b.n	801e406 <UART_SetConfig+0x1ba>
 801e3e6:	2300      	movs	r3, #0
 801e3e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3ec:	e0ad      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3ee:	2302      	movs	r3, #2
 801e3f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3f4:	e0a9      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3f6:	2304      	movs	r3, #4
 801e3f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e3fc:	e0a5      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e3fe:	2308      	movs	r3, #8
 801e400:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e404:	e0a1      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e406:	2310      	movs	r3, #16
 801e408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e40c:	e09d      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e40e:	697b      	ldr	r3, [r7, #20]
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	4a4a      	ldr	r2, [pc, #296]	; (801e53c <UART_SetConfig+0x2f0>)
 801e414:	4293      	cmp	r3, r2
 801e416:	d125      	bne.n	801e464 <UART_SetConfig+0x218>
 801e418:	4b45      	ldr	r3, [pc, #276]	; (801e530 <UART_SetConfig+0x2e4>)
 801e41a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e41e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801e422:	2bc0      	cmp	r3, #192	; 0xc0
 801e424:	d016      	beq.n	801e454 <UART_SetConfig+0x208>
 801e426:	2bc0      	cmp	r3, #192	; 0xc0
 801e428:	d818      	bhi.n	801e45c <UART_SetConfig+0x210>
 801e42a:	2b80      	cmp	r3, #128	; 0x80
 801e42c:	d00a      	beq.n	801e444 <UART_SetConfig+0x1f8>
 801e42e:	2b80      	cmp	r3, #128	; 0x80
 801e430:	d814      	bhi.n	801e45c <UART_SetConfig+0x210>
 801e432:	2b00      	cmp	r3, #0
 801e434:	d002      	beq.n	801e43c <UART_SetConfig+0x1f0>
 801e436:	2b40      	cmp	r3, #64	; 0x40
 801e438:	d008      	beq.n	801e44c <UART_SetConfig+0x200>
 801e43a:	e00f      	b.n	801e45c <UART_SetConfig+0x210>
 801e43c:	2300      	movs	r3, #0
 801e43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e442:	e082      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e444:	2302      	movs	r3, #2
 801e446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e44a:	e07e      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e44c:	2304      	movs	r3, #4
 801e44e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e452:	e07a      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e454:	2308      	movs	r3, #8
 801e456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e45a:	e076      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e45c:	2310      	movs	r3, #16
 801e45e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e462:	e072      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e464:	697b      	ldr	r3, [r7, #20]
 801e466:	681b      	ldr	r3, [r3, #0]
 801e468:	4a35      	ldr	r2, [pc, #212]	; (801e540 <UART_SetConfig+0x2f4>)
 801e46a:	4293      	cmp	r3, r2
 801e46c:	d12a      	bne.n	801e4c4 <UART_SetConfig+0x278>
 801e46e:	4b30      	ldr	r3, [pc, #192]	; (801e530 <UART_SetConfig+0x2e4>)
 801e470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e47c:	d01a      	beq.n	801e4b4 <UART_SetConfig+0x268>
 801e47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e482:	d81b      	bhi.n	801e4bc <UART_SetConfig+0x270>
 801e484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e488:	d00c      	beq.n	801e4a4 <UART_SetConfig+0x258>
 801e48a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e48e:	d815      	bhi.n	801e4bc <UART_SetConfig+0x270>
 801e490:	2b00      	cmp	r3, #0
 801e492:	d003      	beq.n	801e49c <UART_SetConfig+0x250>
 801e494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e498:	d008      	beq.n	801e4ac <UART_SetConfig+0x260>
 801e49a:	e00f      	b.n	801e4bc <UART_SetConfig+0x270>
 801e49c:	2300      	movs	r3, #0
 801e49e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4a2:	e052      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e4a4:	2302      	movs	r3, #2
 801e4a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4aa:	e04e      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e4ac:	2304      	movs	r3, #4
 801e4ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4b2:	e04a      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e4b4:	2308      	movs	r3, #8
 801e4b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4ba:	e046      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e4bc:	2310      	movs	r3, #16
 801e4be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e4c2:	e042      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e4c4:	697b      	ldr	r3, [r7, #20]
 801e4c6:	681b      	ldr	r3, [r3, #0]
 801e4c8:	4a17      	ldr	r2, [pc, #92]	; (801e528 <UART_SetConfig+0x2dc>)
 801e4ca:	4293      	cmp	r3, r2
 801e4cc:	d13a      	bne.n	801e544 <UART_SetConfig+0x2f8>
 801e4ce:	4b18      	ldr	r3, [pc, #96]	; (801e530 <UART_SetConfig+0x2e4>)
 801e4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e4d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801e4d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e4dc:	d01a      	beq.n	801e514 <UART_SetConfig+0x2c8>
 801e4de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801e4e2:	d81b      	bhi.n	801e51c <UART_SetConfig+0x2d0>
 801e4e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e4e8:	d00c      	beq.n	801e504 <UART_SetConfig+0x2b8>
 801e4ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801e4ee:	d815      	bhi.n	801e51c <UART_SetConfig+0x2d0>
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d003      	beq.n	801e4fc <UART_SetConfig+0x2b0>
 801e4f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e4f8:	d008      	beq.n	801e50c <UART_SetConfig+0x2c0>
 801e4fa:	e00f      	b.n	801e51c <UART_SetConfig+0x2d0>
 801e4fc:	2300      	movs	r3, #0
 801e4fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e502:	e022      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e504:	2302      	movs	r3, #2
 801e506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e50a:	e01e      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e50c:	2304      	movs	r3, #4
 801e50e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e512:	e01a      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e514:	2308      	movs	r3, #8
 801e516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e51a:	e016      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e51c:	2310      	movs	r3, #16
 801e51e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801e522:	e012      	b.n	801e54a <UART_SetConfig+0x2fe>
 801e524:	cfff69f3 	.word	0xcfff69f3
 801e528:	40008000 	.word	0x40008000
 801e52c:	40013800 	.word	0x40013800
 801e530:	40021000 	.word	0x40021000
 801e534:	40004400 	.word	0x40004400
 801e538:	40004800 	.word	0x40004800
 801e53c:	40004c00 	.word	0x40004c00
 801e540:	40005000 	.word	0x40005000
 801e544:	2310      	movs	r3, #16
 801e546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801e54a:	697b      	ldr	r3, [r7, #20]
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	4aae      	ldr	r2, [pc, #696]	; (801e808 <UART_SetConfig+0x5bc>)
 801e550:	4293      	cmp	r3, r2
 801e552:	f040 8097 	bne.w	801e684 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801e556:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e55a:	2b08      	cmp	r3, #8
 801e55c:	d823      	bhi.n	801e5a6 <UART_SetConfig+0x35a>
 801e55e:	a201      	add	r2, pc, #4	; (adr r2, 801e564 <UART_SetConfig+0x318>)
 801e560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e564:	0801e589 	.word	0x0801e589
 801e568:	0801e5a7 	.word	0x0801e5a7
 801e56c:	0801e591 	.word	0x0801e591
 801e570:	0801e5a7 	.word	0x0801e5a7
 801e574:	0801e597 	.word	0x0801e597
 801e578:	0801e5a7 	.word	0x0801e5a7
 801e57c:	0801e5a7 	.word	0x0801e5a7
 801e580:	0801e5a7 	.word	0x0801e5a7
 801e584:	0801e59f 	.word	0x0801e59f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e588:	f7fd f8b4 	bl	801b6f4 <HAL_RCC_GetPCLK1Freq>
 801e58c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e58e:	e010      	b.n	801e5b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e590:	4b9e      	ldr	r3, [pc, #632]	; (801e80c <UART_SetConfig+0x5c0>)
 801e592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e594:	e00d      	b.n	801e5b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e596:	f7fd f841 	bl	801b61c <HAL_RCC_GetSysClockFreq>
 801e59a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e59c:	e009      	b.n	801e5b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e59e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e5a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e5a4:	e005      	b.n	801e5b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801e5a6:	2300      	movs	r3, #0
 801e5a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e5aa:	2301      	movs	r3, #1
 801e5ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e5b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801e5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	f000 8130 	beq.w	801e81a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801e5ba:	697b      	ldr	r3, [r7, #20]
 801e5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5be:	4a94      	ldr	r2, [pc, #592]	; (801e810 <UART_SetConfig+0x5c4>)
 801e5c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e5c4:	461a      	mov	r2, r3
 801e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5c8:	fbb3 f3f2 	udiv	r3, r3, r2
 801e5cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e5ce:	697b      	ldr	r3, [r7, #20]
 801e5d0:	685a      	ldr	r2, [r3, #4]
 801e5d2:	4613      	mov	r3, r2
 801e5d4:	005b      	lsls	r3, r3, #1
 801e5d6:	4413      	add	r3, r2
 801e5d8:	69ba      	ldr	r2, [r7, #24]
 801e5da:	429a      	cmp	r2, r3
 801e5dc:	d305      	bcc.n	801e5ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801e5de:	697b      	ldr	r3, [r7, #20]
 801e5e0:	685b      	ldr	r3, [r3, #4]
 801e5e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801e5e4:	69ba      	ldr	r2, [r7, #24]
 801e5e6:	429a      	cmp	r2, r3
 801e5e8:	d903      	bls.n	801e5f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801e5ea:	2301      	movs	r3, #1
 801e5ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e5f0:	e113      	b.n	801e81a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	60bb      	str	r3, [r7, #8]
 801e5f8:	60fa      	str	r2, [r7, #12]
 801e5fa:	697b      	ldr	r3, [r7, #20]
 801e5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e5fe:	4a84      	ldr	r2, [pc, #528]	; (801e810 <UART_SetConfig+0x5c4>)
 801e600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e604:	b29b      	uxth	r3, r3
 801e606:	2200      	movs	r2, #0
 801e608:	603b      	str	r3, [r7, #0]
 801e60a:	607a      	str	r2, [r7, #4]
 801e60c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801e610:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801e614:	f7e2 fb40 	bl	8000c98 <__aeabi_uldivmod>
 801e618:	4602      	mov	r2, r0
 801e61a:	460b      	mov	r3, r1
 801e61c:	4610      	mov	r0, r2
 801e61e:	4619      	mov	r1, r3
 801e620:	f04f 0200 	mov.w	r2, #0
 801e624:	f04f 0300 	mov.w	r3, #0
 801e628:	020b      	lsls	r3, r1, #8
 801e62a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801e62e:	0202      	lsls	r2, r0, #8
 801e630:	6979      	ldr	r1, [r7, #20]
 801e632:	6849      	ldr	r1, [r1, #4]
 801e634:	0849      	lsrs	r1, r1, #1
 801e636:	2000      	movs	r0, #0
 801e638:	460c      	mov	r4, r1
 801e63a:	4605      	mov	r5, r0
 801e63c:	eb12 0804 	adds.w	r8, r2, r4
 801e640:	eb43 0905 	adc.w	r9, r3, r5
 801e644:	697b      	ldr	r3, [r7, #20]
 801e646:	685b      	ldr	r3, [r3, #4]
 801e648:	2200      	movs	r2, #0
 801e64a:	469a      	mov	sl, r3
 801e64c:	4693      	mov	fp, r2
 801e64e:	4652      	mov	r2, sl
 801e650:	465b      	mov	r3, fp
 801e652:	4640      	mov	r0, r8
 801e654:	4649      	mov	r1, r9
 801e656:	f7e2 fb1f 	bl	8000c98 <__aeabi_uldivmod>
 801e65a:	4602      	mov	r2, r0
 801e65c:	460b      	mov	r3, r1
 801e65e:	4613      	mov	r3, r2
 801e660:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801e662:	6a3b      	ldr	r3, [r7, #32]
 801e664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801e668:	d308      	bcc.n	801e67c <UART_SetConfig+0x430>
 801e66a:	6a3b      	ldr	r3, [r7, #32]
 801e66c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e670:	d204      	bcs.n	801e67c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801e672:	697b      	ldr	r3, [r7, #20]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	6a3a      	ldr	r2, [r7, #32]
 801e678:	60da      	str	r2, [r3, #12]
 801e67a:	e0ce      	b.n	801e81a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801e67c:	2301      	movs	r3, #1
 801e67e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e682:	e0ca      	b.n	801e81a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801e684:	697b      	ldr	r3, [r7, #20]
 801e686:	69db      	ldr	r3, [r3, #28]
 801e688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e68c:	d166      	bne.n	801e75c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801e68e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e692:	2b08      	cmp	r3, #8
 801e694:	d827      	bhi.n	801e6e6 <UART_SetConfig+0x49a>
 801e696:	a201      	add	r2, pc, #4	; (adr r2, 801e69c <UART_SetConfig+0x450>)
 801e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e69c:	0801e6c1 	.word	0x0801e6c1
 801e6a0:	0801e6c9 	.word	0x0801e6c9
 801e6a4:	0801e6d1 	.word	0x0801e6d1
 801e6a8:	0801e6e7 	.word	0x0801e6e7
 801e6ac:	0801e6d7 	.word	0x0801e6d7
 801e6b0:	0801e6e7 	.word	0x0801e6e7
 801e6b4:	0801e6e7 	.word	0x0801e6e7
 801e6b8:	0801e6e7 	.word	0x0801e6e7
 801e6bc:	0801e6df 	.word	0x0801e6df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e6c0:	f7fd f818 	bl	801b6f4 <HAL_RCC_GetPCLK1Freq>
 801e6c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e6c6:	e014      	b.n	801e6f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e6c8:	f7fd f82a 	bl	801b720 <HAL_RCC_GetPCLK2Freq>
 801e6cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e6ce:	e010      	b.n	801e6f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e6d0:	4b4e      	ldr	r3, [pc, #312]	; (801e80c <UART_SetConfig+0x5c0>)
 801e6d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e6d4:	e00d      	b.n	801e6f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e6d6:	f7fc ffa1 	bl	801b61c <HAL_RCC_GetSysClockFreq>
 801e6da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e6dc:	e009      	b.n	801e6f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e6de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e6e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e6e4:	e005      	b.n	801e6f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801e6e6:	2300      	movs	r3, #0
 801e6e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e6ea:	2301      	movs	r3, #1
 801e6ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e6f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801e6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	f000 8090 	beq.w	801e81a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e6fa:	697b      	ldr	r3, [r7, #20]
 801e6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6fe:	4a44      	ldr	r2, [pc, #272]	; (801e810 <UART_SetConfig+0x5c4>)
 801e700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e704:	461a      	mov	r2, r3
 801e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e708:	fbb3 f3f2 	udiv	r3, r3, r2
 801e70c:	005a      	lsls	r2, r3, #1
 801e70e:	697b      	ldr	r3, [r7, #20]
 801e710:	685b      	ldr	r3, [r3, #4]
 801e712:	085b      	lsrs	r3, r3, #1
 801e714:	441a      	add	r2, r3
 801e716:	697b      	ldr	r3, [r7, #20]
 801e718:	685b      	ldr	r3, [r3, #4]
 801e71a:	fbb2 f3f3 	udiv	r3, r2, r3
 801e71e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e720:	6a3b      	ldr	r3, [r7, #32]
 801e722:	2b0f      	cmp	r3, #15
 801e724:	d916      	bls.n	801e754 <UART_SetConfig+0x508>
 801e726:	6a3b      	ldr	r3, [r7, #32]
 801e728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e72c:	d212      	bcs.n	801e754 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801e72e:	6a3b      	ldr	r3, [r7, #32]
 801e730:	b29b      	uxth	r3, r3
 801e732:	f023 030f 	bic.w	r3, r3, #15
 801e736:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801e738:	6a3b      	ldr	r3, [r7, #32]
 801e73a:	085b      	lsrs	r3, r3, #1
 801e73c:	b29b      	uxth	r3, r3
 801e73e:	f003 0307 	and.w	r3, r3, #7
 801e742:	b29a      	uxth	r2, r3
 801e744:	8bfb      	ldrh	r3, [r7, #30]
 801e746:	4313      	orrs	r3, r2
 801e748:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801e74a:	697b      	ldr	r3, [r7, #20]
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	8bfa      	ldrh	r2, [r7, #30]
 801e750:	60da      	str	r2, [r3, #12]
 801e752:	e062      	b.n	801e81a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801e754:	2301      	movs	r3, #1
 801e756:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801e75a:	e05e      	b.n	801e81a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801e75c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801e760:	2b08      	cmp	r3, #8
 801e762:	d828      	bhi.n	801e7b6 <UART_SetConfig+0x56a>
 801e764:	a201      	add	r2, pc, #4	; (adr r2, 801e76c <UART_SetConfig+0x520>)
 801e766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e76a:	bf00      	nop
 801e76c:	0801e791 	.word	0x0801e791
 801e770:	0801e799 	.word	0x0801e799
 801e774:	0801e7a1 	.word	0x0801e7a1
 801e778:	0801e7b7 	.word	0x0801e7b7
 801e77c:	0801e7a7 	.word	0x0801e7a7
 801e780:	0801e7b7 	.word	0x0801e7b7
 801e784:	0801e7b7 	.word	0x0801e7b7
 801e788:	0801e7b7 	.word	0x0801e7b7
 801e78c:	0801e7af 	.word	0x0801e7af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801e790:	f7fc ffb0 	bl	801b6f4 <HAL_RCC_GetPCLK1Freq>
 801e794:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e796:	e014      	b.n	801e7c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801e798:	f7fc ffc2 	bl	801b720 <HAL_RCC_GetPCLK2Freq>
 801e79c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e79e:	e010      	b.n	801e7c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801e7a0:	4b1a      	ldr	r3, [pc, #104]	; (801e80c <UART_SetConfig+0x5c0>)
 801e7a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e7a4:	e00d      	b.n	801e7c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801e7a6:	f7fc ff39 	bl	801b61c <HAL_RCC_GetSysClockFreq>
 801e7aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801e7ac:	e009      	b.n	801e7c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801e7ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801e7b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801e7b4:	e005      	b.n	801e7c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801e7b6:	2300      	movs	r3, #0
 801e7b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801e7ba:	2301      	movs	r3, #1
 801e7bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801e7c0:	bf00      	nop
    }

    if (pclk != 0U)
 801e7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7c4:	2b00      	cmp	r3, #0
 801e7c6:	d028      	beq.n	801e81a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801e7c8:	697b      	ldr	r3, [r7, #20]
 801e7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7cc:	4a10      	ldr	r2, [pc, #64]	; (801e810 <UART_SetConfig+0x5c4>)
 801e7ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801e7d2:	461a      	mov	r2, r3
 801e7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e7d6:	fbb3 f2f2 	udiv	r2, r3, r2
 801e7da:	697b      	ldr	r3, [r7, #20]
 801e7dc:	685b      	ldr	r3, [r3, #4]
 801e7de:	085b      	lsrs	r3, r3, #1
 801e7e0:	441a      	add	r2, r3
 801e7e2:	697b      	ldr	r3, [r7, #20]
 801e7e4:	685b      	ldr	r3, [r3, #4]
 801e7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 801e7ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801e7ec:	6a3b      	ldr	r3, [r7, #32]
 801e7ee:	2b0f      	cmp	r3, #15
 801e7f0:	d910      	bls.n	801e814 <UART_SetConfig+0x5c8>
 801e7f2:	6a3b      	ldr	r3, [r7, #32]
 801e7f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e7f8:	d20c      	bcs.n	801e814 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801e7fa:	6a3b      	ldr	r3, [r7, #32]
 801e7fc:	b29a      	uxth	r2, r3
 801e7fe:	697b      	ldr	r3, [r7, #20]
 801e800:	681b      	ldr	r3, [r3, #0]
 801e802:	60da      	str	r2, [r3, #12]
 801e804:	e009      	b.n	801e81a <UART_SetConfig+0x5ce>
 801e806:	bf00      	nop
 801e808:	40008000 	.word	0x40008000
 801e80c:	00f42400 	.word	0x00f42400
 801e810:	08022130 	.word	0x08022130
      }
      else
      {
        ret = HAL_ERROR;
 801e814:	2301      	movs	r3, #1
 801e816:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801e81a:	697b      	ldr	r3, [r7, #20]
 801e81c:	2201      	movs	r2, #1
 801e81e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801e822:	697b      	ldr	r3, [r7, #20]
 801e824:	2201      	movs	r2, #1
 801e826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801e82a:	697b      	ldr	r3, [r7, #20]
 801e82c:	2200      	movs	r2, #0
 801e82e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801e830:	697b      	ldr	r3, [r7, #20]
 801e832:	2200      	movs	r2, #0
 801e834:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801e836:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801e83a:	4618      	mov	r0, r3
 801e83c:	3730      	adds	r7, #48	; 0x30
 801e83e:	46bd      	mov	sp, r7
 801e840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801e844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801e844:	b480      	push	{r7}
 801e846:	b083      	sub	sp, #12
 801e848:	af00      	add	r7, sp, #0
 801e84a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e850:	f003 0301 	and.w	r3, r3, #1
 801e854:	2b00      	cmp	r3, #0
 801e856:	d00a      	beq.n	801e86e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801e858:	687b      	ldr	r3, [r7, #4]
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	685b      	ldr	r3, [r3, #4]
 801e85e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	430a      	orrs	r2, r1
 801e86c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e872:	f003 0302 	and.w	r3, r3, #2
 801e876:	2b00      	cmp	r3, #0
 801e878:	d00a      	beq.n	801e890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801e87a:	687b      	ldr	r3, [r7, #4]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	685b      	ldr	r3, [r3, #4]
 801e880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801e884:	687b      	ldr	r3, [r7, #4]
 801e886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	681b      	ldr	r3, [r3, #0]
 801e88c:	430a      	orrs	r2, r1
 801e88e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e894:	f003 0304 	and.w	r3, r3, #4
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d00a      	beq.n	801e8b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	681b      	ldr	r3, [r3, #0]
 801e8a0:	685b      	ldr	r3, [r3, #4]
 801e8a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	681b      	ldr	r3, [r3, #0]
 801e8ae:	430a      	orrs	r2, r1
 801e8b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8b6:	f003 0308 	and.w	r3, r3, #8
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d00a      	beq.n	801e8d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	681b      	ldr	r3, [r3, #0]
 801e8c2:	685b      	ldr	r3, [r3, #4]
 801e8c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	681b      	ldr	r3, [r3, #0]
 801e8d0:	430a      	orrs	r2, r1
 801e8d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8d8:	f003 0310 	and.w	r3, r3, #16
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d00a      	beq.n	801e8f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	689b      	ldr	r3, [r3, #8]
 801e8e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e8ee:	687b      	ldr	r3, [r7, #4]
 801e8f0:	681b      	ldr	r3, [r3, #0]
 801e8f2:	430a      	orrs	r2, r1
 801e8f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801e8f6:	687b      	ldr	r3, [r7, #4]
 801e8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8fa:	f003 0320 	and.w	r3, r3, #32
 801e8fe:	2b00      	cmp	r3, #0
 801e900:	d00a      	beq.n	801e918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	681b      	ldr	r3, [r3, #0]
 801e906:	689b      	ldr	r3, [r3, #8]
 801e908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	430a      	orrs	r2, r1
 801e916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801e918:	687b      	ldr	r3, [r7, #4]
 801e91a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e91c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e920:	2b00      	cmp	r3, #0
 801e922:	d01a      	beq.n	801e95a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	685b      	ldr	r3, [r3, #4]
 801e92a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801e92e:	687b      	ldr	r3, [r7, #4]
 801e930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	430a      	orrs	r2, r1
 801e938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e93e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e942:	d10a      	bne.n	801e95a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801e944:	687b      	ldr	r3, [r7, #4]
 801e946:	681b      	ldr	r3, [r3, #0]
 801e948:	685b      	ldr	r3, [r3, #4]
 801e94a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801e94e:	687b      	ldr	r3, [r7, #4]
 801e950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	681b      	ldr	r3, [r3, #0]
 801e956:	430a      	orrs	r2, r1
 801e958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e95e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e962:	2b00      	cmp	r3, #0
 801e964:	d00a      	beq.n	801e97c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	681b      	ldr	r3, [r3, #0]
 801e96a:	685b      	ldr	r3, [r3, #4]
 801e96c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801e970:	687b      	ldr	r3, [r7, #4]
 801e972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	681b      	ldr	r3, [r3, #0]
 801e978:	430a      	orrs	r2, r1
 801e97a:	605a      	str	r2, [r3, #4]
  }
}
 801e97c:	bf00      	nop
 801e97e:	370c      	adds	r7, #12
 801e980:	46bd      	mov	sp, r7
 801e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e986:	4770      	bx	lr

0801e988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801e988:	b580      	push	{r7, lr}
 801e98a:	b086      	sub	sp, #24
 801e98c:	af02      	add	r7, sp, #8
 801e98e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	2200      	movs	r2, #0
 801e994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801e998:	f7f8 ff58 	bl	801784c <HAL_GetTick>
 801e99c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801e99e:	687b      	ldr	r3, [r7, #4]
 801e9a0:	681b      	ldr	r3, [r3, #0]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	f003 0308 	and.w	r3, r3, #8
 801e9a8:	2b08      	cmp	r3, #8
 801e9aa:	d10e      	bne.n	801e9ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e9ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e9b0:	9300      	str	r3, [sp, #0]
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	2200      	movs	r2, #0
 801e9b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801e9ba:	6878      	ldr	r0, [r7, #4]
 801e9bc:	f000 f82f 	bl	801ea1e <UART_WaitOnFlagUntilTimeout>
 801e9c0:	4603      	mov	r3, r0
 801e9c2:	2b00      	cmp	r3, #0
 801e9c4:	d001      	beq.n	801e9ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e9c6:	2303      	movs	r3, #3
 801e9c8:	e025      	b.n	801ea16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	681b      	ldr	r3, [r3, #0]
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	f003 0304 	and.w	r3, r3, #4
 801e9d4:	2b04      	cmp	r3, #4
 801e9d6:	d10e      	bne.n	801e9f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801e9d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801e9dc:	9300      	str	r3, [sp, #0]
 801e9de:	68fb      	ldr	r3, [r7, #12]
 801e9e0:	2200      	movs	r2, #0
 801e9e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801e9e6:	6878      	ldr	r0, [r7, #4]
 801e9e8:	f000 f819 	bl	801ea1e <UART_WaitOnFlagUntilTimeout>
 801e9ec:	4603      	mov	r3, r0
 801e9ee:	2b00      	cmp	r3, #0
 801e9f0:	d001      	beq.n	801e9f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801e9f2:	2303      	movs	r3, #3
 801e9f4:	e00f      	b.n	801ea16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	2220      	movs	r2, #32
 801e9fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801e9fe:	687b      	ldr	r3, [r7, #4]
 801ea00:	2220      	movs	r2, #32
 801ea02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	2200      	movs	r2, #0
 801ea0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	2200      	movs	r2, #0
 801ea10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ea14:	2300      	movs	r3, #0
}
 801ea16:	4618      	mov	r0, r3
 801ea18:	3710      	adds	r7, #16
 801ea1a:	46bd      	mov	sp, r7
 801ea1c:	bd80      	pop	{r7, pc}

0801ea1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ea1e:	b580      	push	{r7, lr}
 801ea20:	b09c      	sub	sp, #112	; 0x70
 801ea22:	af00      	add	r7, sp, #0
 801ea24:	60f8      	str	r0, [r7, #12]
 801ea26:	60b9      	str	r1, [r7, #8]
 801ea28:	603b      	str	r3, [r7, #0]
 801ea2a:	4613      	mov	r3, r2
 801ea2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ea2e:	e0a9      	b.n	801eb84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ea30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ea36:	f000 80a5 	beq.w	801eb84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ea3a:	f7f8 ff07 	bl	801784c <HAL_GetTick>
 801ea3e:	4602      	mov	r2, r0
 801ea40:	683b      	ldr	r3, [r7, #0]
 801ea42:	1ad3      	subs	r3, r2, r3
 801ea44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801ea46:	429a      	cmp	r2, r3
 801ea48:	d302      	bcc.n	801ea50 <UART_WaitOnFlagUntilTimeout+0x32>
 801ea4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea4c:	2b00      	cmp	r3, #0
 801ea4e:	d140      	bne.n	801ead2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801ea50:	68fb      	ldr	r3, [r7, #12]
 801ea52:	681b      	ldr	r3, [r3, #0]
 801ea54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ea58:	e853 3f00 	ldrex	r3, [r3]
 801ea5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801ea5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ea60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801ea64:	667b      	str	r3, [r7, #100]	; 0x64
 801ea66:	68fb      	ldr	r3, [r7, #12]
 801ea68:	681b      	ldr	r3, [r3, #0]
 801ea6a:	461a      	mov	r2, r3
 801ea6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ea6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ea70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801ea74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ea76:	e841 2300 	strex	r3, r2, [r1]
 801ea7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801ea7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d1e6      	bne.n	801ea50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea82:	68fb      	ldr	r3, [r7, #12]
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	3308      	adds	r3, #8
 801ea88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ea8c:	e853 3f00 	ldrex	r3, [r3]
 801ea90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801ea92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ea94:	f023 0301 	bic.w	r3, r3, #1
 801ea98:	663b      	str	r3, [r7, #96]	; 0x60
 801ea9a:	68fb      	ldr	r3, [r7, #12]
 801ea9c:	681b      	ldr	r3, [r3, #0]
 801ea9e:	3308      	adds	r3, #8
 801eaa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801eaa2:	64ba      	str	r2, [r7, #72]	; 0x48
 801eaa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eaa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801eaa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801eaaa:	e841 2300 	strex	r3, r2, [r1]
 801eaae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801eab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d1e5      	bne.n	801ea82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801eab6:	68fb      	ldr	r3, [r7, #12]
 801eab8:	2220      	movs	r2, #32
 801eaba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801eabe:	68fb      	ldr	r3, [r7, #12]
 801eac0:	2220      	movs	r2, #32
 801eac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801eac6:	68fb      	ldr	r3, [r7, #12]
 801eac8:	2200      	movs	r2, #0
 801eaca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801eace:	2303      	movs	r3, #3
 801ead0:	e069      	b.n	801eba6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ead2:	68fb      	ldr	r3, [r7, #12]
 801ead4:	681b      	ldr	r3, [r3, #0]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	f003 0304 	and.w	r3, r3, #4
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d051      	beq.n	801eb84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801eae0:	68fb      	ldr	r3, [r7, #12]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	69db      	ldr	r3, [r3, #28]
 801eae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801eaea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801eaee:	d149      	bne.n	801eb84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801eaf0:	68fb      	ldr	r3, [r7, #12]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801eaf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801eafa:	68fb      	ldr	r3, [r7, #12]
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eb02:	e853 3f00 	ldrex	r3, [r3]
 801eb06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801eb0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	681b      	ldr	r3, [r3, #0]
 801eb14:	461a      	mov	r2, r3
 801eb16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801eb18:	637b      	str	r3, [r7, #52]	; 0x34
 801eb1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801eb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801eb20:	e841 2300 	strex	r3, r2, [r1]
 801eb24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801eb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	d1e6      	bne.n	801eafa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	3308      	adds	r3, #8
 801eb32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb34:	697b      	ldr	r3, [r7, #20]
 801eb36:	e853 3f00 	ldrex	r3, [r3]
 801eb3a:	613b      	str	r3, [r7, #16]
   return(result);
 801eb3c:	693b      	ldr	r3, [r7, #16]
 801eb3e:	f023 0301 	bic.w	r3, r3, #1
 801eb42:	66bb      	str	r3, [r7, #104]	; 0x68
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	681b      	ldr	r3, [r3, #0]
 801eb48:	3308      	adds	r3, #8
 801eb4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801eb4c:	623a      	str	r2, [r7, #32]
 801eb4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb50:	69f9      	ldr	r1, [r7, #28]
 801eb52:	6a3a      	ldr	r2, [r7, #32]
 801eb54:	e841 2300 	strex	r3, r2, [r1]
 801eb58:	61bb      	str	r3, [r7, #24]
   return(result);
 801eb5a:	69bb      	ldr	r3, [r7, #24]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d1e5      	bne.n	801eb2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801eb60:	68fb      	ldr	r3, [r7, #12]
 801eb62:	2220      	movs	r2, #32
 801eb64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801eb68:	68fb      	ldr	r3, [r7, #12]
 801eb6a:	2220      	movs	r2, #32
 801eb6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	2220      	movs	r2, #32
 801eb74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	2200      	movs	r2, #0
 801eb7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801eb80:	2303      	movs	r3, #3
 801eb82:	e010      	b.n	801eba6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	681b      	ldr	r3, [r3, #0]
 801eb88:	69da      	ldr	r2, [r3, #28]
 801eb8a:	68bb      	ldr	r3, [r7, #8]
 801eb8c:	4013      	ands	r3, r2
 801eb8e:	68ba      	ldr	r2, [r7, #8]
 801eb90:	429a      	cmp	r2, r3
 801eb92:	bf0c      	ite	eq
 801eb94:	2301      	moveq	r3, #1
 801eb96:	2300      	movne	r3, #0
 801eb98:	b2db      	uxtb	r3, r3
 801eb9a:	461a      	mov	r2, r3
 801eb9c:	79fb      	ldrb	r3, [r7, #7]
 801eb9e:	429a      	cmp	r2, r3
 801eba0:	f43f af46 	beq.w	801ea30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801eba4:	2300      	movs	r3, #0
}
 801eba6:	4618      	mov	r0, r3
 801eba8:	3770      	adds	r7, #112	; 0x70
 801ebaa:	46bd      	mov	sp, r7
 801ebac:	bd80      	pop	{r7, pc}

0801ebae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ebae:	b480      	push	{r7}
 801ebb0:	b085      	sub	sp, #20
 801ebb2:	af00      	add	r7, sp, #0
 801ebb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ebbc:	2b01      	cmp	r3, #1
 801ebbe:	d101      	bne.n	801ebc4 <HAL_UARTEx_DisableFifoMode+0x16>
 801ebc0:	2302      	movs	r3, #2
 801ebc2:	e027      	b.n	801ec14 <HAL_UARTEx_DisableFifoMode+0x66>
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	2201      	movs	r2, #1
 801ebc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	2224      	movs	r2, #36	; 0x24
 801ebd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	681a      	ldr	r2, [r3, #0]
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	681b      	ldr	r3, [r3, #0]
 801ebe6:	f022 0201 	bic.w	r2, r2, #1
 801ebea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ebec:	68fb      	ldr	r3, [r7, #12]
 801ebee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ebf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	2200      	movs	r2, #0
 801ebf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ebfa:	687b      	ldr	r3, [r7, #4]
 801ebfc:	681b      	ldr	r3, [r3, #0]
 801ebfe:	68fa      	ldr	r2, [r7, #12]
 801ec00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	2220      	movs	r2, #32
 801ec06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ec0a:	687b      	ldr	r3, [r7, #4]
 801ec0c:	2200      	movs	r2, #0
 801ec0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ec12:	2300      	movs	r3, #0
}
 801ec14:	4618      	mov	r0, r3
 801ec16:	3714      	adds	r7, #20
 801ec18:	46bd      	mov	sp, r7
 801ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec1e:	4770      	bx	lr

0801ec20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ec20:	b580      	push	{r7, lr}
 801ec22:	b084      	sub	sp, #16
 801ec24:	af00      	add	r7, sp, #0
 801ec26:	6078      	str	r0, [r7, #4]
 801ec28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ec30:	2b01      	cmp	r3, #1
 801ec32:	d101      	bne.n	801ec38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ec34:	2302      	movs	r3, #2
 801ec36:	e02d      	b.n	801ec94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	2201      	movs	r2, #1
 801ec3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	2224      	movs	r2, #36	; 0x24
 801ec44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	681b      	ldr	r3, [r3, #0]
 801ec4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ec50:	687b      	ldr	r3, [r7, #4]
 801ec52:	681b      	ldr	r3, [r3, #0]
 801ec54:	681a      	ldr	r2, [r3, #0]
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	f022 0201 	bic.w	r2, r2, #1
 801ec5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	689b      	ldr	r3, [r3, #8]
 801ec66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801ec6a:	687b      	ldr	r3, [r7, #4]
 801ec6c:	681b      	ldr	r3, [r3, #0]
 801ec6e:	683a      	ldr	r2, [r7, #0]
 801ec70:	430a      	orrs	r2, r1
 801ec72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ec74:	6878      	ldr	r0, [r7, #4]
 801ec76:	f000 f84f 	bl	801ed18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ec7a:	687b      	ldr	r3, [r7, #4]
 801ec7c:	681b      	ldr	r3, [r3, #0]
 801ec7e:	68fa      	ldr	r2, [r7, #12]
 801ec80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ec82:	687b      	ldr	r3, [r7, #4]
 801ec84:	2220      	movs	r2, #32
 801ec86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	2200      	movs	r2, #0
 801ec8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ec92:	2300      	movs	r3, #0
}
 801ec94:	4618      	mov	r0, r3
 801ec96:	3710      	adds	r7, #16
 801ec98:	46bd      	mov	sp, r7
 801ec9a:	bd80      	pop	{r7, pc}

0801ec9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ec9c:	b580      	push	{r7, lr}
 801ec9e:	b084      	sub	sp, #16
 801eca0:	af00      	add	r7, sp, #0
 801eca2:	6078      	str	r0, [r7, #4]
 801eca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ecac:	2b01      	cmp	r3, #1
 801ecae:	d101      	bne.n	801ecb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801ecb0:	2302      	movs	r3, #2
 801ecb2:	e02d      	b.n	801ed10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	2201      	movs	r2, #1
 801ecb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	2224      	movs	r2, #36	; 0x24
 801ecc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ecc4:	687b      	ldr	r3, [r7, #4]
 801ecc6:	681b      	ldr	r3, [r3, #0]
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	681a      	ldr	r2, [r3, #0]
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	f022 0201 	bic.w	r2, r2, #1
 801ecda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	689b      	ldr	r3, [r3, #8]
 801ece2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	683a      	ldr	r2, [r7, #0]
 801ecec:	430a      	orrs	r2, r1
 801ecee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ecf0:	6878      	ldr	r0, [r7, #4]
 801ecf2:	f000 f811 	bl	801ed18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ecf6:	687b      	ldr	r3, [r7, #4]
 801ecf8:	681b      	ldr	r3, [r3, #0]
 801ecfa:	68fa      	ldr	r2, [r7, #12]
 801ecfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ecfe:	687b      	ldr	r3, [r7, #4]
 801ed00:	2220      	movs	r2, #32
 801ed02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	2200      	movs	r2, #0
 801ed0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ed0e:	2300      	movs	r3, #0
}
 801ed10:	4618      	mov	r0, r3
 801ed12:	3710      	adds	r7, #16
 801ed14:	46bd      	mov	sp, r7
 801ed16:	bd80      	pop	{r7, pc}

0801ed18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ed18:	b480      	push	{r7}
 801ed1a:	b085      	sub	sp, #20
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d108      	bne.n	801ed3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	2201      	movs	r2, #1
 801ed2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801ed30:	687b      	ldr	r3, [r7, #4]
 801ed32:	2201      	movs	r2, #1
 801ed34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ed38:	e031      	b.n	801ed9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ed3a:	2308      	movs	r3, #8
 801ed3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ed3e:	2308      	movs	r3, #8
 801ed40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	681b      	ldr	r3, [r3, #0]
 801ed46:	689b      	ldr	r3, [r3, #8]
 801ed48:	0e5b      	lsrs	r3, r3, #25
 801ed4a:	b2db      	uxtb	r3, r3
 801ed4c:	f003 0307 	and.w	r3, r3, #7
 801ed50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	689b      	ldr	r3, [r3, #8]
 801ed58:	0f5b      	lsrs	r3, r3, #29
 801ed5a:	b2db      	uxtb	r3, r3
 801ed5c:	f003 0307 	and.w	r3, r3, #7
 801ed60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ed62:	7bbb      	ldrb	r3, [r7, #14]
 801ed64:	7b3a      	ldrb	r2, [r7, #12]
 801ed66:	4911      	ldr	r1, [pc, #68]	; (801edac <UARTEx_SetNbDataToProcess+0x94>)
 801ed68:	5c8a      	ldrb	r2, [r1, r2]
 801ed6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801ed6e:	7b3a      	ldrb	r2, [r7, #12]
 801ed70:	490f      	ldr	r1, [pc, #60]	; (801edb0 <UARTEx_SetNbDataToProcess+0x98>)
 801ed72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801ed74:	fb93 f3f2 	sdiv	r3, r3, r2
 801ed78:	b29a      	uxth	r2, r3
 801ed7a:	687b      	ldr	r3, [r7, #4]
 801ed7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ed80:	7bfb      	ldrb	r3, [r7, #15]
 801ed82:	7b7a      	ldrb	r2, [r7, #13]
 801ed84:	4909      	ldr	r1, [pc, #36]	; (801edac <UARTEx_SetNbDataToProcess+0x94>)
 801ed86:	5c8a      	ldrb	r2, [r1, r2]
 801ed88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801ed8c:	7b7a      	ldrb	r2, [r7, #13]
 801ed8e:	4908      	ldr	r1, [pc, #32]	; (801edb0 <UARTEx_SetNbDataToProcess+0x98>)
 801ed90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801ed92:	fb93 f3f2 	sdiv	r3, r3, r2
 801ed96:	b29a      	uxth	r2, r3
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801ed9e:	bf00      	nop
 801eda0:	3714      	adds	r7, #20
 801eda2:	46bd      	mov	sp, r7
 801eda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eda8:	4770      	bx	lr
 801edaa:	bf00      	nop
 801edac:	08022148 	.word	0x08022148
 801edb0:	08022150 	.word	0x08022150

0801edb4 <__errno>:
 801edb4:	4b01      	ldr	r3, [pc, #4]	; (801edbc <__errno+0x8>)
 801edb6:	6818      	ldr	r0, [r3, #0]
 801edb8:	4770      	bx	lr
 801edba:	bf00      	nop
 801edbc:	2000002c 	.word	0x2000002c

0801edc0 <__libc_init_array>:
 801edc0:	b570      	push	{r4, r5, r6, lr}
 801edc2:	4d0d      	ldr	r5, [pc, #52]	; (801edf8 <__libc_init_array+0x38>)
 801edc4:	4c0d      	ldr	r4, [pc, #52]	; (801edfc <__libc_init_array+0x3c>)
 801edc6:	1b64      	subs	r4, r4, r5
 801edc8:	10a4      	asrs	r4, r4, #2
 801edca:	2600      	movs	r6, #0
 801edcc:	42a6      	cmp	r6, r4
 801edce:	d109      	bne.n	801ede4 <__libc_init_array+0x24>
 801edd0:	4d0b      	ldr	r5, [pc, #44]	; (801ee00 <__libc_init_array+0x40>)
 801edd2:	4c0c      	ldr	r4, [pc, #48]	; (801ee04 <__libc_init_array+0x44>)
 801edd4:	f003 f826 	bl	8021e24 <_init>
 801edd8:	1b64      	subs	r4, r4, r5
 801edda:	10a4      	asrs	r4, r4, #2
 801eddc:	2600      	movs	r6, #0
 801edde:	42a6      	cmp	r6, r4
 801ede0:	d105      	bne.n	801edee <__libc_init_array+0x2e>
 801ede2:	bd70      	pop	{r4, r5, r6, pc}
 801ede4:	f855 3b04 	ldr.w	r3, [r5], #4
 801ede8:	4798      	blx	r3
 801edea:	3601      	adds	r6, #1
 801edec:	e7ee      	b.n	801edcc <__libc_init_array+0xc>
 801edee:	f855 3b04 	ldr.w	r3, [r5], #4
 801edf2:	4798      	blx	r3
 801edf4:	3601      	adds	r6, #1
 801edf6:	e7f2      	b.n	801edde <__libc_init_array+0x1e>
 801edf8:	08022570 	.word	0x08022570
 801edfc:	08022570 	.word	0x08022570
 801ee00:	08022570 	.word	0x08022570
 801ee04:	08022574 	.word	0x08022574

0801ee08 <memcpy>:
 801ee08:	440a      	add	r2, r1
 801ee0a:	4291      	cmp	r1, r2
 801ee0c:	f100 33ff 	add.w	r3, r0, #4294967295
 801ee10:	d100      	bne.n	801ee14 <memcpy+0xc>
 801ee12:	4770      	bx	lr
 801ee14:	b510      	push	{r4, lr}
 801ee16:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ee1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ee1e:	4291      	cmp	r1, r2
 801ee20:	d1f9      	bne.n	801ee16 <memcpy+0xe>
 801ee22:	bd10      	pop	{r4, pc}

0801ee24 <memset>:
 801ee24:	4402      	add	r2, r0
 801ee26:	4603      	mov	r3, r0
 801ee28:	4293      	cmp	r3, r2
 801ee2a:	d100      	bne.n	801ee2e <memset+0xa>
 801ee2c:	4770      	bx	lr
 801ee2e:	f803 1b01 	strb.w	r1, [r3], #1
 801ee32:	e7f9      	b.n	801ee28 <memset+0x4>

0801ee34 <__cvt>:
 801ee34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ee38:	ec55 4b10 	vmov	r4, r5, d0
 801ee3c:	2d00      	cmp	r5, #0
 801ee3e:	460e      	mov	r6, r1
 801ee40:	4619      	mov	r1, r3
 801ee42:	462b      	mov	r3, r5
 801ee44:	bfbb      	ittet	lt
 801ee46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ee4a:	461d      	movlt	r5, r3
 801ee4c:	2300      	movge	r3, #0
 801ee4e:	232d      	movlt	r3, #45	; 0x2d
 801ee50:	700b      	strb	r3, [r1, #0]
 801ee52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ee54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ee58:	4691      	mov	r9, r2
 801ee5a:	f023 0820 	bic.w	r8, r3, #32
 801ee5e:	bfbc      	itt	lt
 801ee60:	4622      	movlt	r2, r4
 801ee62:	4614      	movlt	r4, r2
 801ee64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ee68:	d005      	beq.n	801ee76 <__cvt+0x42>
 801ee6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801ee6e:	d100      	bne.n	801ee72 <__cvt+0x3e>
 801ee70:	3601      	adds	r6, #1
 801ee72:	2102      	movs	r1, #2
 801ee74:	e000      	b.n	801ee78 <__cvt+0x44>
 801ee76:	2103      	movs	r1, #3
 801ee78:	ab03      	add	r3, sp, #12
 801ee7a:	9301      	str	r3, [sp, #4]
 801ee7c:	ab02      	add	r3, sp, #8
 801ee7e:	9300      	str	r3, [sp, #0]
 801ee80:	ec45 4b10 	vmov	d0, r4, r5
 801ee84:	4653      	mov	r3, sl
 801ee86:	4632      	mov	r2, r6
 801ee88:	f000 fe2e 	bl	801fae8 <_dtoa_r>
 801ee8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801ee90:	4607      	mov	r7, r0
 801ee92:	d102      	bne.n	801ee9a <__cvt+0x66>
 801ee94:	f019 0f01 	tst.w	r9, #1
 801ee98:	d022      	beq.n	801eee0 <__cvt+0xac>
 801ee9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801ee9e:	eb07 0906 	add.w	r9, r7, r6
 801eea2:	d110      	bne.n	801eec6 <__cvt+0x92>
 801eea4:	783b      	ldrb	r3, [r7, #0]
 801eea6:	2b30      	cmp	r3, #48	; 0x30
 801eea8:	d10a      	bne.n	801eec0 <__cvt+0x8c>
 801eeaa:	2200      	movs	r2, #0
 801eeac:	2300      	movs	r3, #0
 801eeae:	4620      	mov	r0, r4
 801eeb0:	4629      	mov	r1, r5
 801eeb2:	f7e1 fe31 	bl	8000b18 <__aeabi_dcmpeq>
 801eeb6:	b918      	cbnz	r0, 801eec0 <__cvt+0x8c>
 801eeb8:	f1c6 0601 	rsb	r6, r6, #1
 801eebc:	f8ca 6000 	str.w	r6, [sl]
 801eec0:	f8da 3000 	ldr.w	r3, [sl]
 801eec4:	4499      	add	r9, r3
 801eec6:	2200      	movs	r2, #0
 801eec8:	2300      	movs	r3, #0
 801eeca:	4620      	mov	r0, r4
 801eecc:	4629      	mov	r1, r5
 801eece:	f7e1 fe23 	bl	8000b18 <__aeabi_dcmpeq>
 801eed2:	b108      	cbz	r0, 801eed8 <__cvt+0xa4>
 801eed4:	f8cd 900c 	str.w	r9, [sp, #12]
 801eed8:	2230      	movs	r2, #48	; 0x30
 801eeda:	9b03      	ldr	r3, [sp, #12]
 801eedc:	454b      	cmp	r3, r9
 801eede:	d307      	bcc.n	801eef0 <__cvt+0xbc>
 801eee0:	9b03      	ldr	r3, [sp, #12]
 801eee2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801eee4:	1bdb      	subs	r3, r3, r7
 801eee6:	4638      	mov	r0, r7
 801eee8:	6013      	str	r3, [r2, #0]
 801eeea:	b004      	add	sp, #16
 801eeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eef0:	1c59      	adds	r1, r3, #1
 801eef2:	9103      	str	r1, [sp, #12]
 801eef4:	701a      	strb	r2, [r3, #0]
 801eef6:	e7f0      	b.n	801eeda <__cvt+0xa6>

0801eef8 <__exponent>:
 801eef8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eefa:	4603      	mov	r3, r0
 801eefc:	2900      	cmp	r1, #0
 801eefe:	bfb8      	it	lt
 801ef00:	4249      	neglt	r1, r1
 801ef02:	f803 2b02 	strb.w	r2, [r3], #2
 801ef06:	bfb4      	ite	lt
 801ef08:	222d      	movlt	r2, #45	; 0x2d
 801ef0a:	222b      	movge	r2, #43	; 0x2b
 801ef0c:	2909      	cmp	r1, #9
 801ef0e:	7042      	strb	r2, [r0, #1]
 801ef10:	dd2a      	ble.n	801ef68 <__exponent+0x70>
 801ef12:	f10d 0407 	add.w	r4, sp, #7
 801ef16:	46a4      	mov	ip, r4
 801ef18:	270a      	movs	r7, #10
 801ef1a:	46a6      	mov	lr, r4
 801ef1c:	460a      	mov	r2, r1
 801ef1e:	fb91 f6f7 	sdiv	r6, r1, r7
 801ef22:	fb07 1516 	mls	r5, r7, r6, r1
 801ef26:	3530      	adds	r5, #48	; 0x30
 801ef28:	2a63      	cmp	r2, #99	; 0x63
 801ef2a:	f104 34ff 	add.w	r4, r4, #4294967295
 801ef2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801ef32:	4631      	mov	r1, r6
 801ef34:	dcf1      	bgt.n	801ef1a <__exponent+0x22>
 801ef36:	3130      	adds	r1, #48	; 0x30
 801ef38:	f1ae 0502 	sub.w	r5, lr, #2
 801ef3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 801ef40:	1c44      	adds	r4, r0, #1
 801ef42:	4629      	mov	r1, r5
 801ef44:	4561      	cmp	r1, ip
 801ef46:	d30a      	bcc.n	801ef5e <__exponent+0x66>
 801ef48:	f10d 0209 	add.w	r2, sp, #9
 801ef4c:	eba2 020e 	sub.w	r2, r2, lr
 801ef50:	4565      	cmp	r5, ip
 801ef52:	bf88      	it	hi
 801ef54:	2200      	movhi	r2, #0
 801ef56:	4413      	add	r3, r2
 801ef58:	1a18      	subs	r0, r3, r0
 801ef5a:	b003      	add	sp, #12
 801ef5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ef5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ef62:	f804 2f01 	strb.w	r2, [r4, #1]!
 801ef66:	e7ed      	b.n	801ef44 <__exponent+0x4c>
 801ef68:	2330      	movs	r3, #48	; 0x30
 801ef6a:	3130      	adds	r1, #48	; 0x30
 801ef6c:	7083      	strb	r3, [r0, #2]
 801ef6e:	70c1      	strb	r1, [r0, #3]
 801ef70:	1d03      	adds	r3, r0, #4
 801ef72:	e7f1      	b.n	801ef58 <__exponent+0x60>

0801ef74 <_printf_float>:
 801ef74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef78:	ed2d 8b02 	vpush	{d8}
 801ef7c:	b08d      	sub	sp, #52	; 0x34
 801ef7e:	460c      	mov	r4, r1
 801ef80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801ef84:	4616      	mov	r6, r2
 801ef86:	461f      	mov	r7, r3
 801ef88:	4605      	mov	r5, r0
 801ef8a:	f001 fd53 	bl	8020a34 <_localeconv_r>
 801ef8e:	f8d0 a000 	ldr.w	sl, [r0]
 801ef92:	4650      	mov	r0, sl
 801ef94:	f7e1 f944 	bl	8000220 <strlen>
 801ef98:	2300      	movs	r3, #0
 801ef9a:	930a      	str	r3, [sp, #40]	; 0x28
 801ef9c:	6823      	ldr	r3, [r4, #0]
 801ef9e:	9305      	str	r3, [sp, #20]
 801efa0:	f8d8 3000 	ldr.w	r3, [r8]
 801efa4:	f894 b018 	ldrb.w	fp, [r4, #24]
 801efa8:	3307      	adds	r3, #7
 801efaa:	f023 0307 	bic.w	r3, r3, #7
 801efae:	f103 0208 	add.w	r2, r3, #8
 801efb2:	f8c8 2000 	str.w	r2, [r8]
 801efb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801efbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801efc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801efc6:	9307      	str	r3, [sp, #28]
 801efc8:	f8cd 8018 	str.w	r8, [sp, #24]
 801efcc:	ee08 0a10 	vmov	s16, r0
 801efd0:	4b9f      	ldr	r3, [pc, #636]	; (801f250 <_printf_float+0x2dc>)
 801efd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801efd6:	f04f 32ff 	mov.w	r2, #4294967295
 801efda:	f7e1 fdcf 	bl	8000b7c <__aeabi_dcmpun>
 801efde:	bb88      	cbnz	r0, 801f044 <_printf_float+0xd0>
 801efe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801efe4:	4b9a      	ldr	r3, [pc, #616]	; (801f250 <_printf_float+0x2dc>)
 801efe6:	f04f 32ff 	mov.w	r2, #4294967295
 801efea:	f7e1 fda9 	bl	8000b40 <__aeabi_dcmple>
 801efee:	bb48      	cbnz	r0, 801f044 <_printf_float+0xd0>
 801eff0:	2200      	movs	r2, #0
 801eff2:	2300      	movs	r3, #0
 801eff4:	4640      	mov	r0, r8
 801eff6:	4649      	mov	r1, r9
 801eff8:	f7e1 fd98 	bl	8000b2c <__aeabi_dcmplt>
 801effc:	b110      	cbz	r0, 801f004 <_printf_float+0x90>
 801effe:	232d      	movs	r3, #45	; 0x2d
 801f000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f004:	4b93      	ldr	r3, [pc, #588]	; (801f254 <_printf_float+0x2e0>)
 801f006:	4894      	ldr	r0, [pc, #592]	; (801f258 <_printf_float+0x2e4>)
 801f008:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801f00c:	bf94      	ite	ls
 801f00e:	4698      	movls	r8, r3
 801f010:	4680      	movhi	r8, r0
 801f012:	2303      	movs	r3, #3
 801f014:	6123      	str	r3, [r4, #16]
 801f016:	9b05      	ldr	r3, [sp, #20]
 801f018:	f023 0204 	bic.w	r2, r3, #4
 801f01c:	6022      	str	r2, [r4, #0]
 801f01e:	f04f 0900 	mov.w	r9, #0
 801f022:	9700      	str	r7, [sp, #0]
 801f024:	4633      	mov	r3, r6
 801f026:	aa0b      	add	r2, sp, #44	; 0x2c
 801f028:	4621      	mov	r1, r4
 801f02a:	4628      	mov	r0, r5
 801f02c:	f000 f9d8 	bl	801f3e0 <_printf_common>
 801f030:	3001      	adds	r0, #1
 801f032:	f040 8090 	bne.w	801f156 <_printf_float+0x1e2>
 801f036:	f04f 30ff 	mov.w	r0, #4294967295
 801f03a:	b00d      	add	sp, #52	; 0x34
 801f03c:	ecbd 8b02 	vpop	{d8}
 801f040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f044:	4642      	mov	r2, r8
 801f046:	464b      	mov	r3, r9
 801f048:	4640      	mov	r0, r8
 801f04a:	4649      	mov	r1, r9
 801f04c:	f7e1 fd96 	bl	8000b7c <__aeabi_dcmpun>
 801f050:	b140      	cbz	r0, 801f064 <_printf_float+0xf0>
 801f052:	464b      	mov	r3, r9
 801f054:	2b00      	cmp	r3, #0
 801f056:	bfbc      	itt	lt
 801f058:	232d      	movlt	r3, #45	; 0x2d
 801f05a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801f05e:	487f      	ldr	r0, [pc, #508]	; (801f25c <_printf_float+0x2e8>)
 801f060:	4b7f      	ldr	r3, [pc, #508]	; (801f260 <_printf_float+0x2ec>)
 801f062:	e7d1      	b.n	801f008 <_printf_float+0x94>
 801f064:	6863      	ldr	r3, [r4, #4]
 801f066:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801f06a:	9206      	str	r2, [sp, #24]
 801f06c:	1c5a      	adds	r2, r3, #1
 801f06e:	d13f      	bne.n	801f0f0 <_printf_float+0x17c>
 801f070:	2306      	movs	r3, #6
 801f072:	6063      	str	r3, [r4, #4]
 801f074:	9b05      	ldr	r3, [sp, #20]
 801f076:	6861      	ldr	r1, [r4, #4]
 801f078:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801f07c:	2300      	movs	r3, #0
 801f07e:	9303      	str	r3, [sp, #12]
 801f080:	ab0a      	add	r3, sp, #40	; 0x28
 801f082:	e9cd b301 	strd	fp, r3, [sp, #4]
 801f086:	ab09      	add	r3, sp, #36	; 0x24
 801f088:	ec49 8b10 	vmov	d0, r8, r9
 801f08c:	9300      	str	r3, [sp, #0]
 801f08e:	6022      	str	r2, [r4, #0]
 801f090:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801f094:	4628      	mov	r0, r5
 801f096:	f7ff fecd 	bl	801ee34 <__cvt>
 801f09a:	9b06      	ldr	r3, [sp, #24]
 801f09c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f09e:	2b47      	cmp	r3, #71	; 0x47
 801f0a0:	4680      	mov	r8, r0
 801f0a2:	d108      	bne.n	801f0b6 <_printf_float+0x142>
 801f0a4:	1cc8      	adds	r0, r1, #3
 801f0a6:	db02      	blt.n	801f0ae <_printf_float+0x13a>
 801f0a8:	6863      	ldr	r3, [r4, #4]
 801f0aa:	4299      	cmp	r1, r3
 801f0ac:	dd41      	ble.n	801f132 <_printf_float+0x1be>
 801f0ae:	f1ab 0b02 	sub.w	fp, fp, #2
 801f0b2:	fa5f fb8b 	uxtb.w	fp, fp
 801f0b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f0ba:	d820      	bhi.n	801f0fe <_printf_float+0x18a>
 801f0bc:	3901      	subs	r1, #1
 801f0be:	465a      	mov	r2, fp
 801f0c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801f0c4:	9109      	str	r1, [sp, #36]	; 0x24
 801f0c6:	f7ff ff17 	bl	801eef8 <__exponent>
 801f0ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f0cc:	1813      	adds	r3, r2, r0
 801f0ce:	2a01      	cmp	r2, #1
 801f0d0:	4681      	mov	r9, r0
 801f0d2:	6123      	str	r3, [r4, #16]
 801f0d4:	dc02      	bgt.n	801f0dc <_printf_float+0x168>
 801f0d6:	6822      	ldr	r2, [r4, #0]
 801f0d8:	07d2      	lsls	r2, r2, #31
 801f0da:	d501      	bpl.n	801f0e0 <_printf_float+0x16c>
 801f0dc:	3301      	adds	r3, #1
 801f0de:	6123      	str	r3, [r4, #16]
 801f0e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d09c      	beq.n	801f022 <_printf_float+0xae>
 801f0e8:	232d      	movs	r3, #45	; 0x2d
 801f0ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f0ee:	e798      	b.n	801f022 <_printf_float+0xae>
 801f0f0:	9a06      	ldr	r2, [sp, #24]
 801f0f2:	2a47      	cmp	r2, #71	; 0x47
 801f0f4:	d1be      	bne.n	801f074 <_printf_float+0x100>
 801f0f6:	2b00      	cmp	r3, #0
 801f0f8:	d1bc      	bne.n	801f074 <_printf_float+0x100>
 801f0fa:	2301      	movs	r3, #1
 801f0fc:	e7b9      	b.n	801f072 <_printf_float+0xfe>
 801f0fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801f102:	d118      	bne.n	801f136 <_printf_float+0x1c2>
 801f104:	2900      	cmp	r1, #0
 801f106:	6863      	ldr	r3, [r4, #4]
 801f108:	dd0b      	ble.n	801f122 <_printf_float+0x1ae>
 801f10a:	6121      	str	r1, [r4, #16]
 801f10c:	b913      	cbnz	r3, 801f114 <_printf_float+0x1a0>
 801f10e:	6822      	ldr	r2, [r4, #0]
 801f110:	07d0      	lsls	r0, r2, #31
 801f112:	d502      	bpl.n	801f11a <_printf_float+0x1a6>
 801f114:	3301      	adds	r3, #1
 801f116:	440b      	add	r3, r1
 801f118:	6123      	str	r3, [r4, #16]
 801f11a:	65a1      	str	r1, [r4, #88]	; 0x58
 801f11c:	f04f 0900 	mov.w	r9, #0
 801f120:	e7de      	b.n	801f0e0 <_printf_float+0x16c>
 801f122:	b913      	cbnz	r3, 801f12a <_printf_float+0x1b6>
 801f124:	6822      	ldr	r2, [r4, #0]
 801f126:	07d2      	lsls	r2, r2, #31
 801f128:	d501      	bpl.n	801f12e <_printf_float+0x1ba>
 801f12a:	3302      	adds	r3, #2
 801f12c:	e7f4      	b.n	801f118 <_printf_float+0x1a4>
 801f12e:	2301      	movs	r3, #1
 801f130:	e7f2      	b.n	801f118 <_printf_float+0x1a4>
 801f132:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801f136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f138:	4299      	cmp	r1, r3
 801f13a:	db05      	blt.n	801f148 <_printf_float+0x1d4>
 801f13c:	6823      	ldr	r3, [r4, #0]
 801f13e:	6121      	str	r1, [r4, #16]
 801f140:	07d8      	lsls	r0, r3, #31
 801f142:	d5ea      	bpl.n	801f11a <_printf_float+0x1a6>
 801f144:	1c4b      	adds	r3, r1, #1
 801f146:	e7e7      	b.n	801f118 <_printf_float+0x1a4>
 801f148:	2900      	cmp	r1, #0
 801f14a:	bfd4      	ite	le
 801f14c:	f1c1 0202 	rsble	r2, r1, #2
 801f150:	2201      	movgt	r2, #1
 801f152:	4413      	add	r3, r2
 801f154:	e7e0      	b.n	801f118 <_printf_float+0x1a4>
 801f156:	6823      	ldr	r3, [r4, #0]
 801f158:	055a      	lsls	r2, r3, #21
 801f15a:	d407      	bmi.n	801f16c <_printf_float+0x1f8>
 801f15c:	6923      	ldr	r3, [r4, #16]
 801f15e:	4642      	mov	r2, r8
 801f160:	4631      	mov	r1, r6
 801f162:	4628      	mov	r0, r5
 801f164:	47b8      	blx	r7
 801f166:	3001      	adds	r0, #1
 801f168:	d12c      	bne.n	801f1c4 <_printf_float+0x250>
 801f16a:	e764      	b.n	801f036 <_printf_float+0xc2>
 801f16c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801f170:	f240 80e0 	bls.w	801f334 <_printf_float+0x3c0>
 801f174:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f178:	2200      	movs	r2, #0
 801f17a:	2300      	movs	r3, #0
 801f17c:	f7e1 fccc 	bl	8000b18 <__aeabi_dcmpeq>
 801f180:	2800      	cmp	r0, #0
 801f182:	d034      	beq.n	801f1ee <_printf_float+0x27a>
 801f184:	4a37      	ldr	r2, [pc, #220]	; (801f264 <_printf_float+0x2f0>)
 801f186:	2301      	movs	r3, #1
 801f188:	4631      	mov	r1, r6
 801f18a:	4628      	mov	r0, r5
 801f18c:	47b8      	blx	r7
 801f18e:	3001      	adds	r0, #1
 801f190:	f43f af51 	beq.w	801f036 <_printf_float+0xc2>
 801f194:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f198:	429a      	cmp	r2, r3
 801f19a:	db02      	blt.n	801f1a2 <_printf_float+0x22e>
 801f19c:	6823      	ldr	r3, [r4, #0]
 801f19e:	07d8      	lsls	r0, r3, #31
 801f1a0:	d510      	bpl.n	801f1c4 <_printf_float+0x250>
 801f1a2:	ee18 3a10 	vmov	r3, s16
 801f1a6:	4652      	mov	r2, sl
 801f1a8:	4631      	mov	r1, r6
 801f1aa:	4628      	mov	r0, r5
 801f1ac:	47b8      	blx	r7
 801f1ae:	3001      	adds	r0, #1
 801f1b0:	f43f af41 	beq.w	801f036 <_printf_float+0xc2>
 801f1b4:	f04f 0800 	mov.w	r8, #0
 801f1b8:	f104 091a 	add.w	r9, r4, #26
 801f1bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f1be:	3b01      	subs	r3, #1
 801f1c0:	4543      	cmp	r3, r8
 801f1c2:	dc09      	bgt.n	801f1d8 <_printf_float+0x264>
 801f1c4:	6823      	ldr	r3, [r4, #0]
 801f1c6:	079b      	lsls	r3, r3, #30
 801f1c8:	f100 8105 	bmi.w	801f3d6 <_printf_float+0x462>
 801f1cc:	68e0      	ldr	r0, [r4, #12]
 801f1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801f1d0:	4298      	cmp	r0, r3
 801f1d2:	bfb8      	it	lt
 801f1d4:	4618      	movlt	r0, r3
 801f1d6:	e730      	b.n	801f03a <_printf_float+0xc6>
 801f1d8:	2301      	movs	r3, #1
 801f1da:	464a      	mov	r2, r9
 801f1dc:	4631      	mov	r1, r6
 801f1de:	4628      	mov	r0, r5
 801f1e0:	47b8      	blx	r7
 801f1e2:	3001      	adds	r0, #1
 801f1e4:	f43f af27 	beq.w	801f036 <_printf_float+0xc2>
 801f1e8:	f108 0801 	add.w	r8, r8, #1
 801f1ec:	e7e6      	b.n	801f1bc <_printf_float+0x248>
 801f1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1f0:	2b00      	cmp	r3, #0
 801f1f2:	dc39      	bgt.n	801f268 <_printf_float+0x2f4>
 801f1f4:	4a1b      	ldr	r2, [pc, #108]	; (801f264 <_printf_float+0x2f0>)
 801f1f6:	2301      	movs	r3, #1
 801f1f8:	4631      	mov	r1, r6
 801f1fa:	4628      	mov	r0, r5
 801f1fc:	47b8      	blx	r7
 801f1fe:	3001      	adds	r0, #1
 801f200:	f43f af19 	beq.w	801f036 <_printf_float+0xc2>
 801f204:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f208:	4313      	orrs	r3, r2
 801f20a:	d102      	bne.n	801f212 <_printf_float+0x29e>
 801f20c:	6823      	ldr	r3, [r4, #0]
 801f20e:	07d9      	lsls	r1, r3, #31
 801f210:	d5d8      	bpl.n	801f1c4 <_printf_float+0x250>
 801f212:	ee18 3a10 	vmov	r3, s16
 801f216:	4652      	mov	r2, sl
 801f218:	4631      	mov	r1, r6
 801f21a:	4628      	mov	r0, r5
 801f21c:	47b8      	blx	r7
 801f21e:	3001      	adds	r0, #1
 801f220:	f43f af09 	beq.w	801f036 <_printf_float+0xc2>
 801f224:	f04f 0900 	mov.w	r9, #0
 801f228:	f104 0a1a 	add.w	sl, r4, #26
 801f22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f22e:	425b      	negs	r3, r3
 801f230:	454b      	cmp	r3, r9
 801f232:	dc01      	bgt.n	801f238 <_printf_float+0x2c4>
 801f234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f236:	e792      	b.n	801f15e <_printf_float+0x1ea>
 801f238:	2301      	movs	r3, #1
 801f23a:	4652      	mov	r2, sl
 801f23c:	4631      	mov	r1, r6
 801f23e:	4628      	mov	r0, r5
 801f240:	47b8      	blx	r7
 801f242:	3001      	adds	r0, #1
 801f244:	f43f aef7 	beq.w	801f036 <_printf_float+0xc2>
 801f248:	f109 0901 	add.w	r9, r9, #1
 801f24c:	e7ee      	b.n	801f22c <_printf_float+0x2b8>
 801f24e:	bf00      	nop
 801f250:	7fefffff 	.word	0x7fefffff
 801f254:	0802215c 	.word	0x0802215c
 801f258:	08022160 	.word	0x08022160
 801f25c:	08022168 	.word	0x08022168
 801f260:	08022164 	.word	0x08022164
 801f264:	0802216c 	.word	0x0802216c
 801f268:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f26a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f26c:	429a      	cmp	r2, r3
 801f26e:	bfa8      	it	ge
 801f270:	461a      	movge	r2, r3
 801f272:	2a00      	cmp	r2, #0
 801f274:	4691      	mov	r9, r2
 801f276:	dc37      	bgt.n	801f2e8 <_printf_float+0x374>
 801f278:	f04f 0b00 	mov.w	fp, #0
 801f27c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f280:	f104 021a 	add.w	r2, r4, #26
 801f284:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801f286:	9305      	str	r3, [sp, #20]
 801f288:	eba3 0309 	sub.w	r3, r3, r9
 801f28c:	455b      	cmp	r3, fp
 801f28e:	dc33      	bgt.n	801f2f8 <_printf_float+0x384>
 801f290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f294:	429a      	cmp	r2, r3
 801f296:	db3b      	blt.n	801f310 <_printf_float+0x39c>
 801f298:	6823      	ldr	r3, [r4, #0]
 801f29a:	07da      	lsls	r2, r3, #31
 801f29c:	d438      	bmi.n	801f310 <_printf_float+0x39c>
 801f29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f2a0:	9a05      	ldr	r2, [sp, #20]
 801f2a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f2a4:	1a9a      	subs	r2, r3, r2
 801f2a6:	eba3 0901 	sub.w	r9, r3, r1
 801f2aa:	4591      	cmp	r9, r2
 801f2ac:	bfa8      	it	ge
 801f2ae:	4691      	movge	r9, r2
 801f2b0:	f1b9 0f00 	cmp.w	r9, #0
 801f2b4:	dc35      	bgt.n	801f322 <_printf_float+0x3ae>
 801f2b6:	f04f 0800 	mov.w	r8, #0
 801f2ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801f2be:	f104 0a1a 	add.w	sl, r4, #26
 801f2c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801f2c6:	1a9b      	subs	r3, r3, r2
 801f2c8:	eba3 0309 	sub.w	r3, r3, r9
 801f2cc:	4543      	cmp	r3, r8
 801f2ce:	f77f af79 	ble.w	801f1c4 <_printf_float+0x250>
 801f2d2:	2301      	movs	r3, #1
 801f2d4:	4652      	mov	r2, sl
 801f2d6:	4631      	mov	r1, r6
 801f2d8:	4628      	mov	r0, r5
 801f2da:	47b8      	blx	r7
 801f2dc:	3001      	adds	r0, #1
 801f2de:	f43f aeaa 	beq.w	801f036 <_printf_float+0xc2>
 801f2e2:	f108 0801 	add.w	r8, r8, #1
 801f2e6:	e7ec      	b.n	801f2c2 <_printf_float+0x34e>
 801f2e8:	4613      	mov	r3, r2
 801f2ea:	4631      	mov	r1, r6
 801f2ec:	4642      	mov	r2, r8
 801f2ee:	4628      	mov	r0, r5
 801f2f0:	47b8      	blx	r7
 801f2f2:	3001      	adds	r0, #1
 801f2f4:	d1c0      	bne.n	801f278 <_printf_float+0x304>
 801f2f6:	e69e      	b.n	801f036 <_printf_float+0xc2>
 801f2f8:	2301      	movs	r3, #1
 801f2fa:	4631      	mov	r1, r6
 801f2fc:	4628      	mov	r0, r5
 801f2fe:	9205      	str	r2, [sp, #20]
 801f300:	47b8      	blx	r7
 801f302:	3001      	adds	r0, #1
 801f304:	f43f ae97 	beq.w	801f036 <_printf_float+0xc2>
 801f308:	9a05      	ldr	r2, [sp, #20]
 801f30a:	f10b 0b01 	add.w	fp, fp, #1
 801f30e:	e7b9      	b.n	801f284 <_printf_float+0x310>
 801f310:	ee18 3a10 	vmov	r3, s16
 801f314:	4652      	mov	r2, sl
 801f316:	4631      	mov	r1, r6
 801f318:	4628      	mov	r0, r5
 801f31a:	47b8      	blx	r7
 801f31c:	3001      	adds	r0, #1
 801f31e:	d1be      	bne.n	801f29e <_printf_float+0x32a>
 801f320:	e689      	b.n	801f036 <_printf_float+0xc2>
 801f322:	9a05      	ldr	r2, [sp, #20]
 801f324:	464b      	mov	r3, r9
 801f326:	4442      	add	r2, r8
 801f328:	4631      	mov	r1, r6
 801f32a:	4628      	mov	r0, r5
 801f32c:	47b8      	blx	r7
 801f32e:	3001      	adds	r0, #1
 801f330:	d1c1      	bne.n	801f2b6 <_printf_float+0x342>
 801f332:	e680      	b.n	801f036 <_printf_float+0xc2>
 801f334:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f336:	2a01      	cmp	r2, #1
 801f338:	dc01      	bgt.n	801f33e <_printf_float+0x3ca>
 801f33a:	07db      	lsls	r3, r3, #31
 801f33c:	d538      	bpl.n	801f3b0 <_printf_float+0x43c>
 801f33e:	2301      	movs	r3, #1
 801f340:	4642      	mov	r2, r8
 801f342:	4631      	mov	r1, r6
 801f344:	4628      	mov	r0, r5
 801f346:	47b8      	blx	r7
 801f348:	3001      	adds	r0, #1
 801f34a:	f43f ae74 	beq.w	801f036 <_printf_float+0xc2>
 801f34e:	ee18 3a10 	vmov	r3, s16
 801f352:	4652      	mov	r2, sl
 801f354:	4631      	mov	r1, r6
 801f356:	4628      	mov	r0, r5
 801f358:	47b8      	blx	r7
 801f35a:	3001      	adds	r0, #1
 801f35c:	f43f ae6b 	beq.w	801f036 <_printf_float+0xc2>
 801f360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801f364:	2200      	movs	r2, #0
 801f366:	2300      	movs	r3, #0
 801f368:	f7e1 fbd6 	bl	8000b18 <__aeabi_dcmpeq>
 801f36c:	b9d8      	cbnz	r0, 801f3a6 <_printf_float+0x432>
 801f36e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f370:	f108 0201 	add.w	r2, r8, #1
 801f374:	3b01      	subs	r3, #1
 801f376:	4631      	mov	r1, r6
 801f378:	4628      	mov	r0, r5
 801f37a:	47b8      	blx	r7
 801f37c:	3001      	adds	r0, #1
 801f37e:	d10e      	bne.n	801f39e <_printf_float+0x42a>
 801f380:	e659      	b.n	801f036 <_printf_float+0xc2>
 801f382:	2301      	movs	r3, #1
 801f384:	4652      	mov	r2, sl
 801f386:	4631      	mov	r1, r6
 801f388:	4628      	mov	r0, r5
 801f38a:	47b8      	blx	r7
 801f38c:	3001      	adds	r0, #1
 801f38e:	f43f ae52 	beq.w	801f036 <_printf_float+0xc2>
 801f392:	f108 0801 	add.w	r8, r8, #1
 801f396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f398:	3b01      	subs	r3, #1
 801f39a:	4543      	cmp	r3, r8
 801f39c:	dcf1      	bgt.n	801f382 <_printf_float+0x40e>
 801f39e:	464b      	mov	r3, r9
 801f3a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801f3a4:	e6dc      	b.n	801f160 <_printf_float+0x1ec>
 801f3a6:	f04f 0800 	mov.w	r8, #0
 801f3aa:	f104 0a1a 	add.w	sl, r4, #26
 801f3ae:	e7f2      	b.n	801f396 <_printf_float+0x422>
 801f3b0:	2301      	movs	r3, #1
 801f3b2:	4642      	mov	r2, r8
 801f3b4:	e7df      	b.n	801f376 <_printf_float+0x402>
 801f3b6:	2301      	movs	r3, #1
 801f3b8:	464a      	mov	r2, r9
 801f3ba:	4631      	mov	r1, r6
 801f3bc:	4628      	mov	r0, r5
 801f3be:	47b8      	blx	r7
 801f3c0:	3001      	adds	r0, #1
 801f3c2:	f43f ae38 	beq.w	801f036 <_printf_float+0xc2>
 801f3c6:	f108 0801 	add.w	r8, r8, #1
 801f3ca:	68e3      	ldr	r3, [r4, #12]
 801f3cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801f3ce:	1a5b      	subs	r3, r3, r1
 801f3d0:	4543      	cmp	r3, r8
 801f3d2:	dcf0      	bgt.n	801f3b6 <_printf_float+0x442>
 801f3d4:	e6fa      	b.n	801f1cc <_printf_float+0x258>
 801f3d6:	f04f 0800 	mov.w	r8, #0
 801f3da:	f104 0919 	add.w	r9, r4, #25
 801f3de:	e7f4      	b.n	801f3ca <_printf_float+0x456>

0801f3e0 <_printf_common>:
 801f3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f3e4:	4616      	mov	r6, r2
 801f3e6:	4699      	mov	r9, r3
 801f3e8:	688a      	ldr	r2, [r1, #8]
 801f3ea:	690b      	ldr	r3, [r1, #16]
 801f3ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f3f0:	4293      	cmp	r3, r2
 801f3f2:	bfb8      	it	lt
 801f3f4:	4613      	movlt	r3, r2
 801f3f6:	6033      	str	r3, [r6, #0]
 801f3f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f3fc:	4607      	mov	r7, r0
 801f3fe:	460c      	mov	r4, r1
 801f400:	b10a      	cbz	r2, 801f406 <_printf_common+0x26>
 801f402:	3301      	adds	r3, #1
 801f404:	6033      	str	r3, [r6, #0]
 801f406:	6823      	ldr	r3, [r4, #0]
 801f408:	0699      	lsls	r1, r3, #26
 801f40a:	bf42      	ittt	mi
 801f40c:	6833      	ldrmi	r3, [r6, #0]
 801f40e:	3302      	addmi	r3, #2
 801f410:	6033      	strmi	r3, [r6, #0]
 801f412:	6825      	ldr	r5, [r4, #0]
 801f414:	f015 0506 	ands.w	r5, r5, #6
 801f418:	d106      	bne.n	801f428 <_printf_common+0x48>
 801f41a:	f104 0a19 	add.w	sl, r4, #25
 801f41e:	68e3      	ldr	r3, [r4, #12]
 801f420:	6832      	ldr	r2, [r6, #0]
 801f422:	1a9b      	subs	r3, r3, r2
 801f424:	42ab      	cmp	r3, r5
 801f426:	dc26      	bgt.n	801f476 <_printf_common+0x96>
 801f428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f42c:	1e13      	subs	r3, r2, #0
 801f42e:	6822      	ldr	r2, [r4, #0]
 801f430:	bf18      	it	ne
 801f432:	2301      	movne	r3, #1
 801f434:	0692      	lsls	r2, r2, #26
 801f436:	d42b      	bmi.n	801f490 <_printf_common+0xb0>
 801f438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f43c:	4649      	mov	r1, r9
 801f43e:	4638      	mov	r0, r7
 801f440:	47c0      	blx	r8
 801f442:	3001      	adds	r0, #1
 801f444:	d01e      	beq.n	801f484 <_printf_common+0xa4>
 801f446:	6823      	ldr	r3, [r4, #0]
 801f448:	68e5      	ldr	r5, [r4, #12]
 801f44a:	6832      	ldr	r2, [r6, #0]
 801f44c:	f003 0306 	and.w	r3, r3, #6
 801f450:	2b04      	cmp	r3, #4
 801f452:	bf08      	it	eq
 801f454:	1aad      	subeq	r5, r5, r2
 801f456:	68a3      	ldr	r3, [r4, #8]
 801f458:	6922      	ldr	r2, [r4, #16]
 801f45a:	bf0c      	ite	eq
 801f45c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f460:	2500      	movne	r5, #0
 801f462:	4293      	cmp	r3, r2
 801f464:	bfc4      	itt	gt
 801f466:	1a9b      	subgt	r3, r3, r2
 801f468:	18ed      	addgt	r5, r5, r3
 801f46a:	2600      	movs	r6, #0
 801f46c:	341a      	adds	r4, #26
 801f46e:	42b5      	cmp	r5, r6
 801f470:	d11a      	bne.n	801f4a8 <_printf_common+0xc8>
 801f472:	2000      	movs	r0, #0
 801f474:	e008      	b.n	801f488 <_printf_common+0xa8>
 801f476:	2301      	movs	r3, #1
 801f478:	4652      	mov	r2, sl
 801f47a:	4649      	mov	r1, r9
 801f47c:	4638      	mov	r0, r7
 801f47e:	47c0      	blx	r8
 801f480:	3001      	adds	r0, #1
 801f482:	d103      	bne.n	801f48c <_printf_common+0xac>
 801f484:	f04f 30ff 	mov.w	r0, #4294967295
 801f488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f48c:	3501      	adds	r5, #1
 801f48e:	e7c6      	b.n	801f41e <_printf_common+0x3e>
 801f490:	18e1      	adds	r1, r4, r3
 801f492:	1c5a      	adds	r2, r3, #1
 801f494:	2030      	movs	r0, #48	; 0x30
 801f496:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f49a:	4422      	add	r2, r4
 801f49c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f4a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f4a4:	3302      	adds	r3, #2
 801f4a6:	e7c7      	b.n	801f438 <_printf_common+0x58>
 801f4a8:	2301      	movs	r3, #1
 801f4aa:	4622      	mov	r2, r4
 801f4ac:	4649      	mov	r1, r9
 801f4ae:	4638      	mov	r0, r7
 801f4b0:	47c0      	blx	r8
 801f4b2:	3001      	adds	r0, #1
 801f4b4:	d0e6      	beq.n	801f484 <_printf_common+0xa4>
 801f4b6:	3601      	adds	r6, #1
 801f4b8:	e7d9      	b.n	801f46e <_printf_common+0x8e>
	...

0801f4bc <_printf_i>:
 801f4bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f4c0:	7e0f      	ldrb	r7, [r1, #24]
 801f4c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f4c4:	2f78      	cmp	r7, #120	; 0x78
 801f4c6:	4691      	mov	r9, r2
 801f4c8:	4680      	mov	r8, r0
 801f4ca:	460c      	mov	r4, r1
 801f4cc:	469a      	mov	sl, r3
 801f4ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f4d2:	d807      	bhi.n	801f4e4 <_printf_i+0x28>
 801f4d4:	2f62      	cmp	r7, #98	; 0x62
 801f4d6:	d80a      	bhi.n	801f4ee <_printf_i+0x32>
 801f4d8:	2f00      	cmp	r7, #0
 801f4da:	f000 80d8 	beq.w	801f68e <_printf_i+0x1d2>
 801f4de:	2f58      	cmp	r7, #88	; 0x58
 801f4e0:	f000 80a3 	beq.w	801f62a <_printf_i+0x16e>
 801f4e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f4e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f4ec:	e03a      	b.n	801f564 <_printf_i+0xa8>
 801f4ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f4f2:	2b15      	cmp	r3, #21
 801f4f4:	d8f6      	bhi.n	801f4e4 <_printf_i+0x28>
 801f4f6:	a101      	add	r1, pc, #4	; (adr r1, 801f4fc <_printf_i+0x40>)
 801f4f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f4fc:	0801f555 	.word	0x0801f555
 801f500:	0801f569 	.word	0x0801f569
 801f504:	0801f4e5 	.word	0x0801f4e5
 801f508:	0801f4e5 	.word	0x0801f4e5
 801f50c:	0801f4e5 	.word	0x0801f4e5
 801f510:	0801f4e5 	.word	0x0801f4e5
 801f514:	0801f569 	.word	0x0801f569
 801f518:	0801f4e5 	.word	0x0801f4e5
 801f51c:	0801f4e5 	.word	0x0801f4e5
 801f520:	0801f4e5 	.word	0x0801f4e5
 801f524:	0801f4e5 	.word	0x0801f4e5
 801f528:	0801f675 	.word	0x0801f675
 801f52c:	0801f599 	.word	0x0801f599
 801f530:	0801f657 	.word	0x0801f657
 801f534:	0801f4e5 	.word	0x0801f4e5
 801f538:	0801f4e5 	.word	0x0801f4e5
 801f53c:	0801f697 	.word	0x0801f697
 801f540:	0801f4e5 	.word	0x0801f4e5
 801f544:	0801f599 	.word	0x0801f599
 801f548:	0801f4e5 	.word	0x0801f4e5
 801f54c:	0801f4e5 	.word	0x0801f4e5
 801f550:	0801f65f 	.word	0x0801f65f
 801f554:	682b      	ldr	r3, [r5, #0]
 801f556:	1d1a      	adds	r2, r3, #4
 801f558:	681b      	ldr	r3, [r3, #0]
 801f55a:	602a      	str	r2, [r5, #0]
 801f55c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f564:	2301      	movs	r3, #1
 801f566:	e0a3      	b.n	801f6b0 <_printf_i+0x1f4>
 801f568:	6820      	ldr	r0, [r4, #0]
 801f56a:	6829      	ldr	r1, [r5, #0]
 801f56c:	0606      	lsls	r6, r0, #24
 801f56e:	f101 0304 	add.w	r3, r1, #4
 801f572:	d50a      	bpl.n	801f58a <_printf_i+0xce>
 801f574:	680e      	ldr	r6, [r1, #0]
 801f576:	602b      	str	r3, [r5, #0]
 801f578:	2e00      	cmp	r6, #0
 801f57a:	da03      	bge.n	801f584 <_printf_i+0xc8>
 801f57c:	232d      	movs	r3, #45	; 0x2d
 801f57e:	4276      	negs	r6, r6
 801f580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f584:	485e      	ldr	r0, [pc, #376]	; (801f700 <_printf_i+0x244>)
 801f586:	230a      	movs	r3, #10
 801f588:	e019      	b.n	801f5be <_printf_i+0x102>
 801f58a:	680e      	ldr	r6, [r1, #0]
 801f58c:	602b      	str	r3, [r5, #0]
 801f58e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f592:	bf18      	it	ne
 801f594:	b236      	sxthne	r6, r6
 801f596:	e7ef      	b.n	801f578 <_printf_i+0xbc>
 801f598:	682b      	ldr	r3, [r5, #0]
 801f59a:	6820      	ldr	r0, [r4, #0]
 801f59c:	1d19      	adds	r1, r3, #4
 801f59e:	6029      	str	r1, [r5, #0]
 801f5a0:	0601      	lsls	r1, r0, #24
 801f5a2:	d501      	bpl.n	801f5a8 <_printf_i+0xec>
 801f5a4:	681e      	ldr	r6, [r3, #0]
 801f5a6:	e002      	b.n	801f5ae <_printf_i+0xf2>
 801f5a8:	0646      	lsls	r6, r0, #25
 801f5aa:	d5fb      	bpl.n	801f5a4 <_printf_i+0xe8>
 801f5ac:	881e      	ldrh	r6, [r3, #0]
 801f5ae:	4854      	ldr	r0, [pc, #336]	; (801f700 <_printf_i+0x244>)
 801f5b0:	2f6f      	cmp	r7, #111	; 0x6f
 801f5b2:	bf0c      	ite	eq
 801f5b4:	2308      	moveq	r3, #8
 801f5b6:	230a      	movne	r3, #10
 801f5b8:	2100      	movs	r1, #0
 801f5ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f5be:	6865      	ldr	r5, [r4, #4]
 801f5c0:	60a5      	str	r5, [r4, #8]
 801f5c2:	2d00      	cmp	r5, #0
 801f5c4:	bfa2      	ittt	ge
 801f5c6:	6821      	ldrge	r1, [r4, #0]
 801f5c8:	f021 0104 	bicge.w	r1, r1, #4
 801f5cc:	6021      	strge	r1, [r4, #0]
 801f5ce:	b90e      	cbnz	r6, 801f5d4 <_printf_i+0x118>
 801f5d0:	2d00      	cmp	r5, #0
 801f5d2:	d04d      	beq.n	801f670 <_printf_i+0x1b4>
 801f5d4:	4615      	mov	r5, r2
 801f5d6:	fbb6 f1f3 	udiv	r1, r6, r3
 801f5da:	fb03 6711 	mls	r7, r3, r1, r6
 801f5de:	5dc7      	ldrb	r7, [r0, r7]
 801f5e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f5e4:	4637      	mov	r7, r6
 801f5e6:	42bb      	cmp	r3, r7
 801f5e8:	460e      	mov	r6, r1
 801f5ea:	d9f4      	bls.n	801f5d6 <_printf_i+0x11a>
 801f5ec:	2b08      	cmp	r3, #8
 801f5ee:	d10b      	bne.n	801f608 <_printf_i+0x14c>
 801f5f0:	6823      	ldr	r3, [r4, #0]
 801f5f2:	07de      	lsls	r6, r3, #31
 801f5f4:	d508      	bpl.n	801f608 <_printf_i+0x14c>
 801f5f6:	6923      	ldr	r3, [r4, #16]
 801f5f8:	6861      	ldr	r1, [r4, #4]
 801f5fa:	4299      	cmp	r1, r3
 801f5fc:	bfde      	ittt	le
 801f5fe:	2330      	movle	r3, #48	; 0x30
 801f600:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f604:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f608:	1b52      	subs	r2, r2, r5
 801f60a:	6122      	str	r2, [r4, #16]
 801f60c:	f8cd a000 	str.w	sl, [sp]
 801f610:	464b      	mov	r3, r9
 801f612:	aa03      	add	r2, sp, #12
 801f614:	4621      	mov	r1, r4
 801f616:	4640      	mov	r0, r8
 801f618:	f7ff fee2 	bl	801f3e0 <_printf_common>
 801f61c:	3001      	adds	r0, #1
 801f61e:	d14c      	bne.n	801f6ba <_printf_i+0x1fe>
 801f620:	f04f 30ff 	mov.w	r0, #4294967295
 801f624:	b004      	add	sp, #16
 801f626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f62a:	4835      	ldr	r0, [pc, #212]	; (801f700 <_printf_i+0x244>)
 801f62c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f630:	6829      	ldr	r1, [r5, #0]
 801f632:	6823      	ldr	r3, [r4, #0]
 801f634:	f851 6b04 	ldr.w	r6, [r1], #4
 801f638:	6029      	str	r1, [r5, #0]
 801f63a:	061d      	lsls	r5, r3, #24
 801f63c:	d514      	bpl.n	801f668 <_printf_i+0x1ac>
 801f63e:	07df      	lsls	r7, r3, #31
 801f640:	bf44      	itt	mi
 801f642:	f043 0320 	orrmi.w	r3, r3, #32
 801f646:	6023      	strmi	r3, [r4, #0]
 801f648:	b91e      	cbnz	r6, 801f652 <_printf_i+0x196>
 801f64a:	6823      	ldr	r3, [r4, #0]
 801f64c:	f023 0320 	bic.w	r3, r3, #32
 801f650:	6023      	str	r3, [r4, #0]
 801f652:	2310      	movs	r3, #16
 801f654:	e7b0      	b.n	801f5b8 <_printf_i+0xfc>
 801f656:	6823      	ldr	r3, [r4, #0]
 801f658:	f043 0320 	orr.w	r3, r3, #32
 801f65c:	6023      	str	r3, [r4, #0]
 801f65e:	2378      	movs	r3, #120	; 0x78
 801f660:	4828      	ldr	r0, [pc, #160]	; (801f704 <_printf_i+0x248>)
 801f662:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f666:	e7e3      	b.n	801f630 <_printf_i+0x174>
 801f668:	0659      	lsls	r1, r3, #25
 801f66a:	bf48      	it	mi
 801f66c:	b2b6      	uxthmi	r6, r6
 801f66e:	e7e6      	b.n	801f63e <_printf_i+0x182>
 801f670:	4615      	mov	r5, r2
 801f672:	e7bb      	b.n	801f5ec <_printf_i+0x130>
 801f674:	682b      	ldr	r3, [r5, #0]
 801f676:	6826      	ldr	r6, [r4, #0]
 801f678:	6961      	ldr	r1, [r4, #20]
 801f67a:	1d18      	adds	r0, r3, #4
 801f67c:	6028      	str	r0, [r5, #0]
 801f67e:	0635      	lsls	r5, r6, #24
 801f680:	681b      	ldr	r3, [r3, #0]
 801f682:	d501      	bpl.n	801f688 <_printf_i+0x1cc>
 801f684:	6019      	str	r1, [r3, #0]
 801f686:	e002      	b.n	801f68e <_printf_i+0x1d2>
 801f688:	0670      	lsls	r0, r6, #25
 801f68a:	d5fb      	bpl.n	801f684 <_printf_i+0x1c8>
 801f68c:	8019      	strh	r1, [r3, #0]
 801f68e:	2300      	movs	r3, #0
 801f690:	6123      	str	r3, [r4, #16]
 801f692:	4615      	mov	r5, r2
 801f694:	e7ba      	b.n	801f60c <_printf_i+0x150>
 801f696:	682b      	ldr	r3, [r5, #0]
 801f698:	1d1a      	adds	r2, r3, #4
 801f69a:	602a      	str	r2, [r5, #0]
 801f69c:	681d      	ldr	r5, [r3, #0]
 801f69e:	6862      	ldr	r2, [r4, #4]
 801f6a0:	2100      	movs	r1, #0
 801f6a2:	4628      	mov	r0, r5
 801f6a4:	f7e0 fdc4 	bl	8000230 <memchr>
 801f6a8:	b108      	cbz	r0, 801f6ae <_printf_i+0x1f2>
 801f6aa:	1b40      	subs	r0, r0, r5
 801f6ac:	6060      	str	r0, [r4, #4]
 801f6ae:	6863      	ldr	r3, [r4, #4]
 801f6b0:	6123      	str	r3, [r4, #16]
 801f6b2:	2300      	movs	r3, #0
 801f6b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f6b8:	e7a8      	b.n	801f60c <_printf_i+0x150>
 801f6ba:	6923      	ldr	r3, [r4, #16]
 801f6bc:	462a      	mov	r2, r5
 801f6be:	4649      	mov	r1, r9
 801f6c0:	4640      	mov	r0, r8
 801f6c2:	47d0      	blx	sl
 801f6c4:	3001      	adds	r0, #1
 801f6c6:	d0ab      	beq.n	801f620 <_printf_i+0x164>
 801f6c8:	6823      	ldr	r3, [r4, #0]
 801f6ca:	079b      	lsls	r3, r3, #30
 801f6cc:	d413      	bmi.n	801f6f6 <_printf_i+0x23a>
 801f6ce:	68e0      	ldr	r0, [r4, #12]
 801f6d0:	9b03      	ldr	r3, [sp, #12]
 801f6d2:	4298      	cmp	r0, r3
 801f6d4:	bfb8      	it	lt
 801f6d6:	4618      	movlt	r0, r3
 801f6d8:	e7a4      	b.n	801f624 <_printf_i+0x168>
 801f6da:	2301      	movs	r3, #1
 801f6dc:	4632      	mov	r2, r6
 801f6de:	4649      	mov	r1, r9
 801f6e0:	4640      	mov	r0, r8
 801f6e2:	47d0      	blx	sl
 801f6e4:	3001      	adds	r0, #1
 801f6e6:	d09b      	beq.n	801f620 <_printf_i+0x164>
 801f6e8:	3501      	adds	r5, #1
 801f6ea:	68e3      	ldr	r3, [r4, #12]
 801f6ec:	9903      	ldr	r1, [sp, #12]
 801f6ee:	1a5b      	subs	r3, r3, r1
 801f6f0:	42ab      	cmp	r3, r5
 801f6f2:	dcf2      	bgt.n	801f6da <_printf_i+0x21e>
 801f6f4:	e7eb      	b.n	801f6ce <_printf_i+0x212>
 801f6f6:	2500      	movs	r5, #0
 801f6f8:	f104 0619 	add.w	r6, r4, #25
 801f6fc:	e7f5      	b.n	801f6ea <_printf_i+0x22e>
 801f6fe:	bf00      	nop
 801f700:	0802216e 	.word	0x0802216e
 801f704:	0802217f 	.word	0x0802217f

0801f708 <iprintf>:
 801f708:	b40f      	push	{r0, r1, r2, r3}
 801f70a:	4b0a      	ldr	r3, [pc, #40]	; (801f734 <iprintf+0x2c>)
 801f70c:	b513      	push	{r0, r1, r4, lr}
 801f70e:	681c      	ldr	r4, [r3, #0]
 801f710:	b124      	cbz	r4, 801f71c <iprintf+0x14>
 801f712:	69a3      	ldr	r3, [r4, #24]
 801f714:	b913      	cbnz	r3, 801f71c <iprintf+0x14>
 801f716:	4620      	mov	r0, r4
 801f718:	f001 f8ee 	bl	80208f8 <__sinit>
 801f71c:	ab05      	add	r3, sp, #20
 801f71e:	9a04      	ldr	r2, [sp, #16]
 801f720:	68a1      	ldr	r1, [r4, #8]
 801f722:	9301      	str	r3, [sp, #4]
 801f724:	4620      	mov	r0, r4
 801f726:	f001 fe9d 	bl	8021464 <_vfiprintf_r>
 801f72a:	b002      	add	sp, #8
 801f72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f730:	b004      	add	sp, #16
 801f732:	4770      	bx	lr
 801f734:	2000002c 	.word	0x2000002c

0801f738 <putchar>:
 801f738:	4b09      	ldr	r3, [pc, #36]	; (801f760 <putchar+0x28>)
 801f73a:	b513      	push	{r0, r1, r4, lr}
 801f73c:	681c      	ldr	r4, [r3, #0]
 801f73e:	4601      	mov	r1, r0
 801f740:	b134      	cbz	r4, 801f750 <putchar+0x18>
 801f742:	69a3      	ldr	r3, [r4, #24]
 801f744:	b923      	cbnz	r3, 801f750 <putchar+0x18>
 801f746:	9001      	str	r0, [sp, #4]
 801f748:	4620      	mov	r0, r4
 801f74a:	f001 f8d5 	bl	80208f8 <__sinit>
 801f74e:	9901      	ldr	r1, [sp, #4]
 801f750:	68a2      	ldr	r2, [r4, #8]
 801f752:	4620      	mov	r0, r4
 801f754:	b002      	add	sp, #8
 801f756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f75a:	f001 bfb3 	b.w	80216c4 <_putc_r>
 801f75e:	bf00      	nop
 801f760:	2000002c 	.word	0x2000002c

0801f764 <_puts_r>:
 801f764:	b570      	push	{r4, r5, r6, lr}
 801f766:	460e      	mov	r6, r1
 801f768:	4605      	mov	r5, r0
 801f76a:	b118      	cbz	r0, 801f774 <_puts_r+0x10>
 801f76c:	6983      	ldr	r3, [r0, #24]
 801f76e:	b90b      	cbnz	r3, 801f774 <_puts_r+0x10>
 801f770:	f001 f8c2 	bl	80208f8 <__sinit>
 801f774:	69ab      	ldr	r3, [r5, #24]
 801f776:	68ac      	ldr	r4, [r5, #8]
 801f778:	b913      	cbnz	r3, 801f780 <_puts_r+0x1c>
 801f77a:	4628      	mov	r0, r5
 801f77c:	f001 f8bc 	bl	80208f8 <__sinit>
 801f780:	4b2c      	ldr	r3, [pc, #176]	; (801f834 <_puts_r+0xd0>)
 801f782:	429c      	cmp	r4, r3
 801f784:	d120      	bne.n	801f7c8 <_puts_r+0x64>
 801f786:	686c      	ldr	r4, [r5, #4]
 801f788:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f78a:	07db      	lsls	r3, r3, #31
 801f78c:	d405      	bmi.n	801f79a <_puts_r+0x36>
 801f78e:	89a3      	ldrh	r3, [r4, #12]
 801f790:	0598      	lsls	r0, r3, #22
 801f792:	d402      	bmi.n	801f79a <_puts_r+0x36>
 801f794:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f796:	f001 f952 	bl	8020a3e <__retarget_lock_acquire_recursive>
 801f79a:	89a3      	ldrh	r3, [r4, #12]
 801f79c:	0719      	lsls	r1, r3, #28
 801f79e:	d51d      	bpl.n	801f7dc <_puts_r+0x78>
 801f7a0:	6923      	ldr	r3, [r4, #16]
 801f7a2:	b1db      	cbz	r3, 801f7dc <_puts_r+0x78>
 801f7a4:	3e01      	subs	r6, #1
 801f7a6:	68a3      	ldr	r3, [r4, #8]
 801f7a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f7ac:	3b01      	subs	r3, #1
 801f7ae:	60a3      	str	r3, [r4, #8]
 801f7b0:	bb39      	cbnz	r1, 801f802 <_puts_r+0x9e>
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	da38      	bge.n	801f828 <_puts_r+0xc4>
 801f7b6:	4622      	mov	r2, r4
 801f7b8:	210a      	movs	r1, #10
 801f7ba:	4628      	mov	r0, r5
 801f7bc:	f000 f848 	bl	801f850 <__swbuf_r>
 801f7c0:	3001      	adds	r0, #1
 801f7c2:	d011      	beq.n	801f7e8 <_puts_r+0x84>
 801f7c4:	250a      	movs	r5, #10
 801f7c6:	e011      	b.n	801f7ec <_puts_r+0x88>
 801f7c8:	4b1b      	ldr	r3, [pc, #108]	; (801f838 <_puts_r+0xd4>)
 801f7ca:	429c      	cmp	r4, r3
 801f7cc:	d101      	bne.n	801f7d2 <_puts_r+0x6e>
 801f7ce:	68ac      	ldr	r4, [r5, #8]
 801f7d0:	e7da      	b.n	801f788 <_puts_r+0x24>
 801f7d2:	4b1a      	ldr	r3, [pc, #104]	; (801f83c <_puts_r+0xd8>)
 801f7d4:	429c      	cmp	r4, r3
 801f7d6:	bf08      	it	eq
 801f7d8:	68ec      	ldreq	r4, [r5, #12]
 801f7da:	e7d5      	b.n	801f788 <_puts_r+0x24>
 801f7dc:	4621      	mov	r1, r4
 801f7de:	4628      	mov	r0, r5
 801f7e0:	f000 f888 	bl	801f8f4 <__swsetup_r>
 801f7e4:	2800      	cmp	r0, #0
 801f7e6:	d0dd      	beq.n	801f7a4 <_puts_r+0x40>
 801f7e8:	f04f 35ff 	mov.w	r5, #4294967295
 801f7ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f7ee:	07da      	lsls	r2, r3, #31
 801f7f0:	d405      	bmi.n	801f7fe <_puts_r+0x9a>
 801f7f2:	89a3      	ldrh	r3, [r4, #12]
 801f7f4:	059b      	lsls	r3, r3, #22
 801f7f6:	d402      	bmi.n	801f7fe <_puts_r+0x9a>
 801f7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f7fa:	f001 f921 	bl	8020a40 <__retarget_lock_release_recursive>
 801f7fe:	4628      	mov	r0, r5
 801f800:	bd70      	pop	{r4, r5, r6, pc}
 801f802:	2b00      	cmp	r3, #0
 801f804:	da04      	bge.n	801f810 <_puts_r+0xac>
 801f806:	69a2      	ldr	r2, [r4, #24]
 801f808:	429a      	cmp	r2, r3
 801f80a:	dc06      	bgt.n	801f81a <_puts_r+0xb6>
 801f80c:	290a      	cmp	r1, #10
 801f80e:	d004      	beq.n	801f81a <_puts_r+0xb6>
 801f810:	6823      	ldr	r3, [r4, #0]
 801f812:	1c5a      	adds	r2, r3, #1
 801f814:	6022      	str	r2, [r4, #0]
 801f816:	7019      	strb	r1, [r3, #0]
 801f818:	e7c5      	b.n	801f7a6 <_puts_r+0x42>
 801f81a:	4622      	mov	r2, r4
 801f81c:	4628      	mov	r0, r5
 801f81e:	f000 f817 	bl	801f850 <__swbuf_r>
 801f822:	3001      	adds	r0, #1
 801f824:	d1bf      	bne.n	801f7a6 <_puts_r+0x42>
 801f826:	e7df      	b.n	801f7e8 <_puts_r+0x84>
 801f828:	6823      	ldr	r3, [r4, #0]
 801f82a:	250a      	movs	r5, #10
 801f82c:	1c5a      	adds	r2, r3, #1
 801f82e:	6022      	str	r2, [r4, #0]
 801f830:	701d      	strb	r5, [r3, #0]
 801f832:	e7db      	b.n	801f7ec <_puts_r+0x88>
 801f834:	08022240 	.word	0x08022240
 801f838:	08022260 	.word	0x08022260
 801f83c:	08022220 	.word	0x08022220

0801f840 <puts>:
 801f840:	4b02      	ldr	r3, [pc, #8]	; (801f84c <puts+0xc>)
 801f842:	4601      	mov	r1, r0
 801f844:	6818      	ldr	r0, [r3, #0]
 801f846:	f7ff bf8d 	b.w	801f764 <_puts_r>
 801f84a:	bf00      	nop
 801f84c:	2000002c 	.word	0x2000002c

0801f850 <__swbuf_r>:
 801f850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f852:	460e      	mov	r6, r1
 801f854:	4614      	mov	r4, r2
 801f856:	4605      	mov	r5, r0
 801f858:	b118      	cbz	r0, 801f862 <__swbuf_r+0x12>
 801f85a:	6983      	ldr	r3, [r0, #24]
 801f85c:	b90b      	cbnz	r3, 801f862 <__swbuf_r+0x12>
 801f85e:	f001 f84b 	bl	80208f8 <__sinit>
 801f862:	4b21      	ldr	r3, [pc, #132]	; (801f8e8 <__swbuf_r+0x98>)
 801f864:	429c      	cmp	r4, r3
 801f866:	d12b      	bne.n	801f8c0 <__swbuf_r+0x70>
 801f868:	686c      	ldr	r4, [r5, #4]
 801f86a:	69a3      	ldr	r3, [r4, #24]
 801f86c:	60a3      	str	r3, [r4, #8]
 801f86e:	89a3      	ldrh	r3, [r4, #12]
 801f870:	071a      	lsls	r2, r3, #28
 801f872:	d52f      	bpl.n	801f8d4 <__swbuf_r+0x84>
 801f874:	6923      	ldr	r3, [r4, #16]
 801f876:	b36b      	cbz	r3, 801f8d4 <__swbuf_r+0x84>
 801f878:	6923      	ldr	r3, [r4, #16]
 801f87a:	6820      	ldr	r0, [r4, #0]
 801f87c:	1ac0      	subs	r0, r0, r3
 801f87e:	6963      	ldr	r3, [r4, #20]
 801f880:	b2f6      	uxtb	r6, r6
 801f882:	4283      	cmp	r3, r0
 801f884:	4637      	mov	r7, r6
 801f886:	dc04      	bgt.n	801f892 <__swbuf_r+0x42>
 801f888:	4621      	mov	r1, r4
 801f88a:	4628      	mov	r0, r5
 801f88c:	f000 ffa0 	bl	80207d0 <_fflush_r>
 801f890:	bb30      	cbnz	r0, 801f8e0 <__swbuf_r+0x90>
 801f892:	68a3      	ldr	r3, [r4, #8]
 801f894:	3b01      	subs	r3, #1
 801f896:	60a3      	str	r3, [r4, #8]
 801f898:	6823      	ldr	r3, [r4, #0]
 801f89a:	1c5a      	adds	r2, r3, #1
 801f89c:	6022      	str	r2, [r4, #0]
 801f89e:	701e      	strb	r6, [r3, #0]
 801f8a0:	6963      	ldr	r3, [r4, #20]
 801f8a2:	3001      	adds	r0, #1
 801f8a4:	4283      	cmp	r3, r0
 801f8a6:	d004      	beq.n	801f8b2 <__swbuf_r+0x62>
 801f8a8:	89a3      	ldrh	r3, [r4, #12]
 801f8aa:	07db      	lsls	r3, r3, #31
 801f8ac:	d506      	bpl.n	801f8bc <__swbuf_r+0x6c>
 801f8ae:	2e0a      	cmp	r6, #10
 801f8b0:	d104      	bne.n	801f8bc <__swbuf_r+0x6c>
 801f8b2:	4621      	mov	r1, r4
 801f8b4:	4628      	mov	r0, r5
 801f8b6:	f000 ff8b 	bl	80207d0 <_fflush_r>
 801f8ba:	b988      	cbnz	r0, 801f8e0 <__swbuf_r+0x90>
 801f8bc:	4638      	mov	r0, r7
 801f8be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f8c0:	4b0a      	ldr	r3, [pc, #40]	; (801f8ec <__swbuf_r+0x9c>)
 801f8c2:	429c      	cmp	r4, r3
 801f8c4:	d101      	bne.n	801f8ca <__swbuf_r+0x7a>
 801f8c6:	68ac      	ldr	r4, [r5, #8]
 801f8c8:	e7cf      	b.n	801f86a <__swbuf_r+0x1a>
 801f8ca:	4b09      	ldr	r3, [pc, #36]	; (801f8f0 <__swbuf_r+0xa0>)
 801f8cc:	429c      	cmp	r4, r3
 801f8ce:	bf08      	it	eq
 801f8d0:	68ec      	ldreq	r4, [r5, #12]
 801f8d2:	e7ca      	b.n	801f86a <__swbuf_r+0x1a>
 801f8d4:	4621      	mov	r1, r4
 801f8d6:	4628      	mov	r0, r5
 801f8d8:	f000 f80c 	bl	801f8f4 <__swsetup_r>
 801f8dc:	2800      	cmp	r0, #0
 801f8de:	d0cb      	beq.n	801f878 <__swbuf_r+0x28>
 801f8e0:	f04f 37ff 	mov.w	r7, #4294967295
 801f8e4:	e7ea      	b.n	801f8bc <__swbuf_r+0x6c>
 801f8e6:	bf00      	nop
 801f8e8:	08022240 	.word	0x08022240
 801f8ec:	08022260 	.word	0x08022260
 801f8f0:	08022220 	.word	0x08022220

0801f8f4 <__swsetup_r>:
 801f8f4:	4b32      	ldr	r3, [pc, #200]	; (801f9c0 <__swsetup_r+0xcc>)
 801f8f6:	b570      	push	{r4, r5, r6, lr}
 801f8f8:	681d      	ldr	r5, [r3, #0]
 801f8fa:	4606      	mov	r6, r0
 801f8fc:	460c      	mov	r4, r1
 801f8fe:	b125      	cbz	r5, 801f90a <__swsetup_r+0x16>
 801f900:	69ab      	ldr	r3, [r5, #24]
 801f902:	b913      	cbnz	r3, 801f90a <__swsetup_r+0x16>
 801f904:	4628      	mov	r0, r5
 801f906:	f000 fff7 	bl	80208f8 <__sinit>
 801f90a:	4b2e      	ldr	r3, [pc, #184]	; (801f9c4 <__swsetup_r+0xd0>)
 801f90c:	429c      	cmp	r4, r3
 801f90e:	d10f      	bne.n	801f930 <__swsetup_r+0x3c>
 801f910:	686c      	ldr	r4, [r5, #4]
 801f912:	89a3      	ldrh	r3, [r4, #12]
 801f914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f918:	0719      	lsls	r1, r3, #28
 801f91a:	d42c      	bmi.n	801f976 <__swsetup_r+0x82>
 801f91c:	06dd      	lsls	r5, r3, #27
 801f91e:	d411      	bmi.n	801f944 <__swsetup_r+0x50>
 801f920:	2309      	movs	r3, #9
 801f922:	6033      	str	r3, [r6, #0]
 801f924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f928:	81a3      	strh	r3, [r4, #12]
 801f92a:	f04f 30ff 	mov.w	r0, #4294967295
 801f92e:	e03e      	b.n	801f9ae <__swsetup_r+0xba>
 801f930:	4b25      	ldr	r3, [pc, #148]	; (801f9c8 <__swsetup_r+0xd4>)
 801f932:	429c      	cmp	r4, r3
 801f934:	d101      	bne.n	801f93a <__swsetup_r+0x46>
 801f936:	68ac      	ldr	r4, [r5, #8]
 801f938:	e7eb      	b.n	801f912 <__swsetup_r+0x1e>
 801f93a:	4b24      	ldr	r3, [pc, #144]	; (801f9cc <__swsetup_r+0xd8>)
 801f93c:	429c      	cmp	r4, r3
 801f93e:	bf08      	it	eq
 801f940:	68ec      	ldreq	r4, [r5, #12]
 801f942:	e7e6      	b.n	801f912 <__swsetup_r+0x1e>
 801f944:	0758      	lsls	r0, r3, #29
 801f946:	d512      	bpl.n	801f96e <__swsetup_r+0x7a>
 801f948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f94a:	b141      	cbz	r1, 801f95e <__swsetup_r+0x6a>
 801f94c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f950:	4299      	cmp	r1, r3
 801f952:	d002      	beq.n	801f95a <__swsetup_r+0x66>
 801f954:	4630      	mov	r0, r6
 801f956:	f001 fc7b 	bl	8021250 <_free_r>
 801f95a:	2300      	movs	r3, #0
 801f95c:	6363      	str	r3, [r4, #52]	; 0x34
 801f95e:	89a3      	ldrh	r3, [r4, #12]
 801f960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f964:	81a3      	strh	r3, [r4, #12]
 801f966:	2300      	movs	r3, #0
 801f968:	6063      	str	r3, [r4, #4]
 801f96a:	6923      	ldr	r3, [r4, #16]
 801f96c:	6023      	str	r3, [r4, #0]
 801f96e:	89a3      	ldrh	r3, [r4, #12]
 801f970:	f043 0308 	orr.w	r3, r3, #8
 801f974:	81a3      	strh	r3, [r4, #12]
 801f976:	6923      	ldr	r3, [r4, #16]
 801f978:	b94b      	cbnz	r3, 801f98e <__swsetup_r+0x9a>
 801f97a:	89a3      	ldrh	r3, [r4, #12]
 801f97c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f984:	d003      	beq.n	801f98e <__swsetup_r+0x9a>
 801f986:	4621      	mov	r1, r4
 801f988:	4630      	mov	r0, r6
 801f98a:	f001 f87f 	bl	8020a8c <__smakebuf_r>
 801f98e:	89a0      	ldrh	r0, [r4, #12]
 801f990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f994:	f010 0301 	ands.w	r3, r0, #1
 801f998:	d00a      	beq.n	801f9b0 <__swsetup_r+0xbc>
 801f99a:	2300      	movs	r3, #0
 801f99c:	60a3      	str	r3, [r4, #8]
 801f99e:	6963      	ldr	r3, [r4, #20]
 801f9a0:	425b      	negs	r3, r3
 801f9a2:	61a3      	str	r3, [r4, #24]
 801f9a4:	6923      	ldr	r3, [r4, #16]
 801f9a6:	b943      	cbnz	r3, 801f9ba <__swsetup_r+0xc6>
 801f9a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f9ac:	d1ba      	bne.n	801f924 <__swsetup_r+0x30>
 801f9ae:	bd70      	pop	{r4, r5, r6, pc}
 801f9b0:	0781      	lsls	r1, r0, #30
 801f9b2:	bf58      	it	pl
 801f9b4:	6963      	ldrpl	r3, [r4, #20]
 801f9b6:	60a3      	str	r3, [r4, #8]
 801f9b8:	e7f4      	b.n	801f9a4 <__swsetup_r+0xb0>
 801f9ba:	2000      	movs	r0, #0
 801f9bc:	e7f7      	b.n	801f9ae <__swsetup_r+0xba>
 801f9be:	bf00      	nop
 801f9c0:	2000002c 	.word	0x2000002c
 801f9c4:	08022240 	.word	0x08022240
 801f9c8:	08022260 	.word	0x08022260
 801f9cc:	08022220 	.word	0x08022220

0801f9d0 <quorem>:
 801f9d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d4:	6903      	ldr	r3, [r0, #16]
 801f9d6:	690c      	ldr	r4, [r1, #16]
 801f9d8:	42a3      	cmp	r3, r4
 801f9da:	4607      	mov	r7, r0
 801f9dc:	f2c0 8081 	blt.w	801fae2 <quorem+0x112>
 801f9e0:	3c01      	subs	r4, #1
 801f9e2:	f101 0814 	add.w	r8, r1, #20
 801f9e6:	f100 0514 	add.w	r5, r0, #20
 801f9ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801f9ee:	9301      	str	r3, [sp, #4]
 801f9f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801f9f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801f9f8:	3301      	adds	r3, #1
 801f9fa:	429a      	cmp	r2, r3
 801f9fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801fa00:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801fa04:	fbb2 f6f3 	udiv	r6, r2, r3
 801fa08:	d331      	bcc.n	801fa6e <quorem+0x9e>
 801fa0a:	f04f 0e00 	mov.w	lr, #0
 801fa0e:	4640      	mov	r0, r8
 801fa10:	46ac      	mov	ip, r5
 801fa12:	46f2      	mov	sl, lr
 801fa14:	f850 2b04 	ldr.w	r2, [r0], #4
 801fa18:	b293      	uxth	r3, r2
 801fa1a:	fb06 e303 	mla	r3, r6, r3, lr
 801fa1e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801fa22:	b29b      	uxth	r3, r3
 801fa24:	ebaa 0303 	sub.w	r3, sl, r3
 801fa28:	f8dc a000 	ldr.w	sl, [ip]
 801fa2c:	0c12      	lsrs	r2, r2, #16
 801fa2e:	fa13 f38a 	uxtah	r3, r3, sl
 801fa32:	fb06 e202 	mla	r2, r6, r2, lr
 801fa36:	9300      	str	r3, [sp, #0]
 801fa38:	9b00      	ldr	r3, [sp, #0]
 801fa3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801fa3e:	b292      	uxth	r2, r2
 801fa40:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801fa44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fa48:	f8bd 3000 	ldrh.w	r3, [sp]
 801fa4c:	4581      	cmp	r9, r0
 801fa4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801fa52:	f84c 3b04 	str.w	r3, [ip], #4
 801fa56:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801fa5a:	d2db      	bcs.n	801fa14 <quorem+0x44>
 801fa5c:	f855 300b 	ldr.w	r3, [r5, fp]
 801fa60:	b92b      	cbnz	r3, 801fa6e <quorem+0x9e>
 801fa62:	9b01      	ldr	r3, [sp, #4]
 801fa64:	3b04      	subs	r3, #4
 801fa66:	429d      	cmp	r5, r3
 801fa68:	461a      	mov	r2, r3
 801fa6a:	d32e      	bcc.n	801faca <quorem+0xfa>
 801fa6c:	613c      	str	r4, [r7, #16]
 801fa6e:	4638      	mov	r0, r7
 801fa70:	f001 fad6 	bl	8021020 <__mcmp>
 801fa74:	2800      	cmp	r0, #0
 801fa76:	db24      	blt.n	801fac2 <quorem+0xf2>
 801fa78:	3601      	adds	r6, #1
 801fa7a:	4628      	mov	r0, r5
 801fa7c:	f04f 0c00 	mov.w	ip, #0
 801fa80:	f858 2b04 	ldr.w	r2, [r8], #4
 801fa84:	f8d0 e000 	ldr.w	lr, [r0]
 801fa88:	b293      	uxth	r3, r2
 801fa8a:	ebac 0303 	sub.w	r3, ip, r3
 801fa8e:	0c12      	lsrs	r2, r2, #16
 801fa90:	fa13 f38e 	uxtah	r3, r3, lr
 801fa94:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801fa98:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801fa9c:	b29b      	uxth	r3, r3
 801fa9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801faa2:	45c1      	cmp	r9, r8
 801faa4:	f840 3b04 	str.w	r3, [r0], #4
 801faa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801faac:	d2e8      	bcs.n	801fa80 <quorem+0xb0>
 801faae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801fab2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801fab6:	b922      	cbnz	r2, 801fac2 <quorem+0xf2>
 801fab8:	3b04      	subs	r3, #4
 801faba:	429d      	cmp	r5, r3
 801fabc:	461a      	mov	r2, r3
 801fabe:	d30a      	bcc.n	801fad6 <quorem+0x106>
 801fac0:	613c      	str	r4, [r7, #16]
 801fac2:	4630      	mov	r0, r6
 801fac4:	b003      	add	sp, #12
 801fac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801faca:	6812      	ldr	r2, [r2, #0]
 801facc:	3b04      	subs	r3, #4
 801face:	2a00      	cmp	r2, #0
 801fad0:	d1cc      	bne.n	801fa6c <quorem+0x9c>
 801fad2:	3c01      	subs	r4, #1
 801fad4:	e7c7      	b.n	801fa66 <quorem+0x96>
 801fad6:	6812      	ldr	r2, [r2, #0]
 801fad8:	3b04      	subs	r3, #4
 801fada:	2a00      	cmp	r2, #0
 801fadc:	d1f0      	bne.n	801fac0 <quorem+0xf0>
 801fade:	3c01      	subs	r4, #1
 801fae0:	e7eb      	b.n	801faba <quorem+0xea>
 801fae2:	2000      	movs	r0, #0
 801fae4:	e7ee      	b.n	801fac4 <quorem+0xf4>
	...

0801fae8 <_dtoa_r>:
 801fae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faec:	ed2d 8b04 	vpush	{d8-d9}
 801faf0:	ec57 6b10 	vmov	r6, r7, d0
 801faf4:	b093      	sub	sp, #76	; 0x4c
 801faf6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801faf8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801fafc:	9106      	str	r1, [sp, #24]
 801fafe:	ee10 aa10 	vmov	sl, s0
 801fb02:	4604      	mov	r4, r0
 801fb04:	9209      	str	r2, [sp, #36]	; 0x24
 801fb06:	930c      	str	r3, [sp, #48]	; 0x30
 801fb08:	46bb      	mov	fp, r7
 801fb0a:	b975      	cbnz	r5, 801fb2a <_dtoa_r+0x42>
 801fb0c:	2010      	movs	r0, #16
 801fb0e:	f000 fffd 	bl	8020b0c <malloc>
 801fb12:	4602      	mov	r2, r0
 801fb14:	6260      	str	r0, [r4, #36]	; 0x24
 801fb16:	b920      	cbnz	r0, 801fb22 <_dtoa_r+0x3a>
 801fb18:	4ba7      	ldr	r3, [pc, #668]	; (801fdb8 <_dtoa_r+0x2d0>)
 801fb1a:	21ea      	movs	r1, #234	; 0xea
 801fb1c:	48a7      	ldr	r0, [pc, #668]	; (801fdbc <_dtoa_r+0x2d4>)
 801fb1e:	f001 fe7f 	bl	8021820 <__assert_func>
 801fb22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801fb26:	6005      	str	r5, [r0, #0]
 801fb28:	60c5      	str	r5, [r0, #12]
 801fb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb2c:	6819      	ldr	r1, [r3, #0]
 801fb2e:	b151      	cbz	r1, 801fb46 <_dtoa_r+0x5e>
 801fb30:	685a      	ldr	r2, [r3, #4]
 801fb32:	604a      	str	r2, [r1, #4]
 801fb34:	2301      	movs	r3, #1
 801fb36:	4093      	lsls	r3, r2
 801fb38:	608b      	str	r3, [r1, #8]
 801fb3a:	4620      	mov	r0, r4
 801fb3c:	f001 f82e 	bl	8020b9c <_Bfree>
 801fb40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fb42:	2200      	movs	r2, #0
 801fb44:	601a      	str	r2, [r3, #0]
 801fb46:	1e3b      	subs	r3, r7, #0
 801fb48:	bfaa      	itet	ge
 801fb4a:	2300      	movge	r3, #0
 801fb4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801fb50:	f8c8 3000 	strge.w	r3, [r8]
 801fb54:	4b9a      	ldr	r3, [pc, #616]	; (801fdc0 <_dtoa_r+0x2d8>)
 801fb56:	bfbc      	itt	lt
 801fb58:	2201      	movlt	r2, #1
 801fb5a:	f8c8 2000 	strlt.w	r2, [r8]
 801fb5e:	ea33 030b 	bics.w	r3, r3, fp
 801fb62:	d11b      	bne.n	801fb9c <_dtoa_r+0xb4>
 801fb64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fb66:	f242 730f 	movw	r3, #9999	; 0x270f
 801fb6a:	6013      	str	r3, [r2, #0]
 801fb6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fb70:	4333      	orrs	r3, r6
 801fb72:	f000 8592 	beq.w	802069a <_dtoa_r+0xbb2>
 801fb76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fb78:	b963      	cbnz	r3, 801fb94 <_dtoa_r+0xac>
 801fb7a:	4b92      	ldr	r3, [pc, #584]	; (801fdc4 <_dtoa_r+0x2dc>)
 801fb7c:	e022      	b.n	801fbc4 <_dtoa_r+0xdc>
 801fb7e:	4b92      	ldr	r3, [pc, #584]	; (801fdc8 <_dtoa_r+0x2e0>)
 801fb80:	9301      	str	r3, [sp, #4]
 801fb82:	3308      	adds	r3, #8
 801fb84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fb86:	6013      	str	r3, [r2, #0]
 801fb88:	9801      	ldr	r0, [sp, #4]
 801fb8a:	b013      	add	sp, #76	; 0x4c
 801fb8c:	ecbd 8b04 	vpop	{d8-d9}
 801fb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb94:	4b8b      	ldr	r3, [pc, #556]	; (801fdc4 <_dtoa_r+0x2dc>)
 801fb96:	9301      	str	r3, [sp, #4]
 801fb98:	3303      	adds	r3, #3
 801fb9a:	e7f3      	b.n	801fb84 <_dtoa_r+0x9c>
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	2300      	movs	r3, #0
 801fba0:	4650      	mov	r0, sl
 801fba2:	4659      	mov	r1, fp
 801fba4:	f7e0 ffb8 	bl	8000b18 <__aeabi_dcmpeq>
 801fba8:	ec4b ab19 	vmov	d9, sl, fp
 801fbac:	4680      	mov	r8, r0
 801fbae:	b158      	cbz	r0, 801fbc8 <_dtoa_r+0xe0>
 801fbb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801fbb2:	2301      	movs	r3, #1
 801fbb4:	6013      	str	r3, [r2, #0]
 801fbb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fbb8:	2b00      	cmp	r3, #0
 801fbba:	f000 856b 	beq.w	8020694 <_dtoa_r+0xbac>
 801fbbe:	4883      	ldr	r0, [pc, #524]	; (801fdcc <_dtoa_r+0x2e4>)
 801fbc0:	6018      	str	r0, [r3, #0]
 801fbc2:	1e43      	subs	r3, r0, #1
 801fbc4:	9301      	str	r3, [sp, #4]
 801fbc6:	e7df      	b.n	801fb88 <_dtoa_r+0xa0>
 801fbc8:	ec4b ab10 	vmov	d0, sl, fp
 801fbcc:	aa10      	add	r2, sp, #64	; 0x40
 801fbce:	a911      	add	r1, sp, #68	; 0x44
 801fbd0:	4620      	mov	r0, r4
 801fbd2:	f001 facb 	bl	802116c <__d2b>
 801fbd6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801fbda:	ee08 0a10 	vmov	s16, r0
 801fbde:	2d00      	cmp	r5, #0
 801fbe0:	f000 8084 	beq.w	801fcec <_dtoa_r+0x204>
 801fbe4:	ee19 3a90 	vmov	r3, s19
 801fbe8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801fbec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801fbf0:	4656      	mov	r6, sl
 801fbf2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801fbf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801fbfa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801fbfe:	4b74      	ldr	r3, [pc, #464]	; (801fdd0 <_dtoa_r+0x2e8>)
 801fc00:	2200      	movs	r2, #0
 801fc02:	4630      	mov	r0, r6
 801fc04:	4639      	mov	r1, r7
 801fc06:	f7e0 fb67 	bl	80002d8 <__aeabi_dsub>
 801fc0a:	a365      	add	r3, pc, #404	; (adr r3, 801fda0 <_dtoa_r+0x2b8>)
 801fc0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc10:	f7e0 fd1a 	bl	8000648 <__aeabi_dmul>
 801fc14:	a364      	add	r3, pc, #400	; (adr r3, 801fda8 <_dtoa_r+0x2c0>)
 801fc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc1a:	f7e0 fb5f 	bl	80002dc <__adddf3>
 801fc1e:	4606      	mov	r6, r0
 801fc20:	4628      	mov	r0, r5
 801fc22:	460f      	mov	r7, r1
 801fc24:	f7e0 fca6 	bl	8000574 <__aeabi_i2d>
 801fc28:	a361      	add	r3, pc, #388	; (adr r3, 801fdb0 <_dtoa_r+0x2c8>)
 801fc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc2e:	f7e0 fd0b 	bl	8000648 <__aeabi_dmul>
 801fc32:	4602      	mov	r2, r0
 801fc34:	460b      	mov	r3, r1
 801fc36:	4630      	mov	r0, r6
 801fc38:	4639      	mov	r1, r7
 801fc3a:	f7e0 fb4f 	bl	80002dc <__adddf3>
 801fc3e:	4606      	mov	r6, r0
 801fc40:	460f      	mov	r7, r1
 801fc42:	f7e0 ffb1 	bl	8000ba8 <__aeabi_d2iz>
 801fc46:	2200      	movs	r2, #0
 801fc48:	9000      	str	r0, [sp, #0]
 801fc4a:	2300      	movs	r3, #0
 801fc4c:	4630      	mov	r0, r6
 801fc4e:	4639      	mov	r1, r7
 801fc50:	f7e0 ff6c 	bl	8000b2c <__aeabi_dcmplt>
 801fc54:	b150      	cbz	r0, 801fc6c <_dtoa_r+0x184>
 801fc56:	9800      	ldr	r0, [sp, #0]
 801fc58:	f7e0 fc8c 	bl	8000574 <__aeabi_i2d>
 801fc5c:	4632      	mov	r2, r6
 801fc5e:	463b      	mov	r3, r7
 801fc60:	f7e0 ff5a 	bl	8000b18 <__aeabi_dcmpeq>
 801fc64:	b910      	cbnz	r0, 801fc6c <_dtoa_r+0x184>
 801fc66:	9b00      	ldr	r3, [sp, #0]
 801fc68:	3b01      	subs	r3, #1
 801fc6a:	9300      	str	r3, [sp, #0]
 801fc6c:	9b00      	ldr	r3, [sp, #0]
 801fc6e:	2b16      	cmp	r3, #22
 801fc70:	d85a      	bhi.n	801fd28 <_dtoa_r+0x240>
 801fc72:	9a00      	ldr	r2, [sp, #0]
 801fc74:	4b57      	ldr	r3, [pc, #348]	; (801fdd4 <_dtoa_r+0x2ec>)
 801fc76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fc7e:	ec51 0b19 	vmov	r0, r1, d9
 801fc82:	f7e0 ff53 	bl	8000b2c <__aeabi_dcmplt>
 801fc86:	2800      	cmp	r0, #0
 801fc88:	d050      	beq.n	801fd2c <_dtoa_r+0x244>
 801fc8a:	9b00      	ldr	r3, [sp, #0]
 801fc8c:	3b01      	subs	r3, #1
 801fc8e:	9300      	str	r3, [sp, #0]
 801fc90:	2300      	movs	r3, #0
 801fc92:	930b      	str	r3, [sp, #44]	; 0x2c
 801fc94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc96:	1b5d      	subs	r5, r3, r5
 801fc98:	1e6b      	subs	r3, r5, #1
 801fc9a:	9305      	str	r3, [sp, #20]
 801fc9c:	bf45      	ittet	mi
 801fc9e:	f1c5 0301 	rsbmi	r3, r5, #1
 801fca2:	9304      	strmi	r3, [sp, #16]
 801fca4:	2300      	movpl	r3, #0
 801fca6:	2300      	movmi	r3, #0
 801fca8:	bf4c      	ite	mi
 801fcaa:	9305      	strmi	r3, [sp, #20]
 801fcac:	9304      	strpl	r3, [sp, #16]
 801fcae:	9b00      	ldr	r3, [sp, #0]
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	db3d      	blt.n	801fd30 <_dtoa_r+0x248>
 801fcb4:	9b05      	ldr	r3, [sp, #20]
 801fcb6:	9a00      	ldr	r2, [sp, #0]
 801fcb8:	920a      	str	r2, [sp, #40]	; 0x28
 801fcba:	4413      	add	r3, r2
 801fcbc:	9305      	str	r3, [sp, #20]
 801fcbe:	2300      	movs	r3, #0
 801fcc0:	9307      	str	r3, [sp, #28]
 801fcc2:	9b06      	ldr	r3, [sp, #24]
 801fcc4:	2b09      	cmp	r3, #9
 801fcc6:	f200 8089 	bhi.w	801fddc <_dtoa_r+0x2f4>
 801fcca:	2b05      	cmp	r3, #5
 801fccc:	bfc4      	itt	gt
 801fcce:	3b04      	subgt	r3, #4
 801fcd0:	9306      	strgt	r3, [sp, #24]
 801fcd2:	9b06      	ldr	r3, [sp, #24]
 801fcd4:	f1a3 0302 	sub.w	r3, r3, #2
 801fcd8:	bfcc      	ite	gt
 801fcda:	2500      	movgt	r5, #0
 801fcdc:	2501      	movle	r5, #1
 801fcde:	2b03      	cmp	r3, #3
 801fce0:	f200 8087 	bhi.w	801fdf2 <_dtoa_r+0x30a>
 801fce4:	e8df f003 	tbb	[pc, r3]
 801fce8:	59383a2d 	.word	0x59383a2d
 801fcec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801fcf0:	441d      	add	r5, r3
 801fcf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801fcf6:	2b20      	cmp	r3, #32
 801fcf8:	bfc1      	itttt	gt
 801fcfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801fcfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801fd02:	fa0b f303 	lslgt.w	r3, fp, r3
 801fd06:	fa26 f000 	lsrgt.w	r0, r6, r0
 801fd0a:	bfda      	itte	le
 801fd0c:	f1c3 0320 	rsble	r3, r3, #32
 801fd10:	fa06 f003 	lslle.w	r0, r6, r3
 801fd14:	4318      	orrgt	r0, r3
 801fd16:	f7e0 fc1d 	bl	8000554 <__aeabi_ui2d>
 801fd1a:	2301      	movs	r3, #1
 801fd1c:	4606      	mov	r6, r0
 801fd1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801fd22:	3d01      	subs	r5, #1
 801fd24:	930e      	str	r3, [sp, #56]	; 0x38
 801fd26:	e76a      	b.n	801fbfe <_dtoa_r+0x116>
 801fd28:	2301      	movs	r3, #1
 801fd2a:	e7b2      	b.n	801fc92 <_dtoa_r+0x1aa>
 801fd2c:	900b      	str	r0, [sp, #44]	; 0x2c
 801fd2e:	e7b1      	b.n	801fc94 <_dtoa_r+0x1ac>
 801fd30:	9b04      	ldr	r3, [sp, #16]
 801fd32:	9a00      	ldr	r2, [sp, #0]
 801fd34:	1a9b      	subs	r3, r3, r2
 801fd36:	9304      	str	r3, [sp, #16]
 801fd38:	4253      	negs	r3, r2
 801fd3a:	9307      	str	r3, [sp, #28]
 801fd3c:	2300      	movs	r3, #0
 801fd3e:	930a      	str	r3, [sp, #40]	; 0x28
 801fd40:	e7bf      	b.n	801fcc2 <_dtoa_r+0x1da>
 801fd42:	2300      	movs	r3, #0
 801fd44:	9308      	str	r3, [sp, #32]
 801fd46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fd48:	2b00      	cmp	r3, #0
 801fd4a:	dc55      	bgt.n	801fdf8 <_dtoa_r+0x310>
 801fd4c:	2301      	movs	r3, #1
 801fd4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801fd52:	461a      	mov	r2, r3
 801fd54:	9209      	str	r2, [sp, #36]	; 0x24
 801fd56:	e00c      	b.n	801fd72 <_dtoa_r+0x28a>
 801fd58:	2301      	movs	r3, #1
 801fd5a:	e7f3      	b.n	801fd44 <_dtoa_r+0x25c>
 801fd5c:	2300      	movs	r3, #0
 801fd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fd60:	9308      	str	r3, [sp, #32]
 801fd62:	9b00      	ldr	r3, [sp, #0]
 801fd64:	4413      	add	r3, r2
 801fd66:	9302      	str	r3, [sp, #8]
 801fd68:	3301      	adds	r3, #1
 801fd6a:	2b01      	cmp	r3, #1
 801fd6c:	9303      	str	r3, [sp, #12]
 801fd6e:	bfb8      	it	lt
 801fd70:	2301      	movlt	r3, #1
 801fd72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801fd74:	2200      	movs	r2, #0
 801fd76:	6042      	str	r2, [r0, #4]
 801fd78:	2204      	movs	r2, #4
 801fd7a:	f102 0614 	add.w	r6, r2, #20
 801fd7e:	429e      	cmp	r6, r3
 801fd80:	6841      	ldr	r1, [r0, #4]
 801fd82:	d93d      	bls.n	801fe00 <_dtoa_r+0x318>
 801fd84:	4620      	mov	r0, r4
 801fd86:	f000 fec9 	bl	8020b1c <_Balloc>
 801fd8a:	9001      	str	r0, [sp, #4]
 801fd8c:	2800      	cmp	r0, #0
 801fd8e:	d13b      	bne.n	801fe08 <_dtoa_r+0x320>
 801fd90:	4b11      	ldr	r3, [pc, #68]	; (801fdd8 <_dtoa_r+0x2f0>)
 801fd92:	4602      	mov	r2, r0
 801fd94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801fd98:	e6c0      	b.n	801fb1c <_dtoa_r+0x34>
 801fd9a:	2301      	movs	r3, #1
 801fd9c:	e7df      	b.n	801fd5e <_dtoa_r+0x276>
 801fd9e:	bf00      	nop
 801fda0:	636f4361 	.word	0x636f4361
 801fda4:	3fd287a7 	.word	0x3fd287a7
 801fda8:	8b60c8b3 	.word	0x8b60c8b3
 801fdac:	3fc68a28 	.word	0x3fc68a28
 801fdb0:	509f79fb 	.word	0x509f79fb
 801fdb4:	3fd34413 	.word	0x3fd34413
 801fdb8:	0802219d 	.word	0x0802219d
 801fdbc:	080221b4 	.word	0x080221b4
 801fdc0:	7ff00000 	.word	0x7ff00000
 801fdc4:	08022199 	.word	0x08022199
 801fdc8:	08022190 	.word	0x08022190
 801fdcc:	0802216d 	.word	0x0802216d
 801fdd0:	3ff80000 	.word	0x3ff80000
 801fdd4:	08022308 	.word	0x08022308
 801fdd8:	0802220f 	.word	0x0802220f
 801fddc:	2501      	movs	r5, #1
 801fdde:	2300      	movs	r3, #0
 801fde0:	9306      	str	r3, [sp, #24]
 801fde2:	9508      	str	r5, [sp, #32]
 801fde4:	f04f 33ff 	mov.w	r3, #4294967295
 801fde8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801fdec:	2200      	movs	r2, #0
 801fdee:	2312      	movs	r3, #18
 801fdf0:	e7b0      	b.n	801fd54 <_dtoa_r+0x26c>
 801fdf2:	2301      	movs	r3, #1
 801fdf4:	9308      	str	r3, [sp, #32]
 801fdf6:	e7f5      	b.n	801fde4 <_dtoa_r+0x2fc>
 801fdf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801fdfe:	e7b8      	b.n	801fd72 <_dtoa_r+0x28a>
 801fe00:	3101      	adds	r1, #1
 801fe02:	6041      	str	r1, [r0, #4]
 801fe04:	0052      	lsls	r2, r2, #1
 801fe06:	e7b8      	b.n	801fd7a <_dtoa_r+0x292>
 801fe08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801fe0a:	9a01      	ldr	r2, [sp, #4]
 801fe0c:	601a      	str	r2, [r3, #0]
 801fe0e:	9b03      	ldr	r3, [sp, #12]
 801fe10:	2b0e      	cmp	r3, #14
 801fe12:	f200 809d 	bhi.w	801ff50 <_dtoa_r+0x468>
 801fe16:	2d00      	cmp	r5, #0
 801fe18:	f000 809a 	beq.w	801ff50 <_dtoa_r+0x468>
 801fe1c:	9b00      	ldr	r3, [sp, #0]
 801fe1e:	2b00      	cmp	r3, #0
 801fe20:	dd32      	ble.n	801fe88 <_dtoa_r+0x3a0>
 801fe22:	4ab7      	ldr	r2, [pc, #732]	; (8020100 <_dtoa_r+0x618>)
 801fe24:	f003 030f 	and.w	r3, r3, #15
 801fe28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801fe2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 801fe30:	9b00      	ldr	r3, [sp, #0]
 801fe32:	05d8      	lsls	r0, r3, #23
 801fe34:	ea4f 1723 	mov.w	r7, r3, asr #4
 801fe38:	d516      	bpl.n	801fe68 <_dtoa_r+0x380>
 801fe3a:	4bb2      	ldr	r3, [pc, #712]	; (8020104 <_dtoa_r+0x61c>)
 801fe3c:	ec51 0b19 	vmov	r0, r1, d9
 801fe40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801fe44:	f7e0 fd2a 	bl	800089c <__aeabi_ddiv>
 801fe48:	f007 070f 	and.w	r7, r7, #15
 801fe4c:	4682      	mov	sl, r0
 801fe4e:	468b      	mov	fp, r1
 801fe50:	2503      	movs	r5, #3
 801fe52:	4eac      	ldr	r6, [pc, #688]	; (8020104 <_dtoa_r+0x61c>)
 801fe54:	b957      	cbnz	r7, 801fe6c <_dtoa_r+0x384>
 801fe56:	4642      	mov	r2, r8
 801fe58:	464b      	mov	r3, r9
 801fe5a:	4650      	mov	r0, sl
 801fe5c:	4659      	mov	r1, fp
 801fe5e:	f7e0 fd1d 	bl	800089c <__aeabi_ddiv>
 801fe62:	4682      	mov	sl, r0
 801fe64:	468b      	mov	fp, r1
 801fe66:	e028      	b.n	801feba <_dtoa_r+0x3d2>
 801fe68:	2502      	movs	r5, #2
 801fe6a:	e7f2      	b.n	801fe52 <_dtoa_r+0x36a>
 801fe6c:	07f9      	lsls	r1, r7, #31
 801fe6e:	d508      	bpl.n	801fe82 <_dtoa_r+0x39a>
 801fe70:	4640      	mov	r0, r8
 801fe72:	4649      	mov	r1, r9
 801fe74:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fe78:	f7e0 fbe6 	bl	8000648 <__aeabi_dmul>
 801fe7c:	3501      	adds	r5, #1
 801fe7e:	4680      	mov	r8, r0
 801fe80:	4689      	mov	r9, r1
 801fe82:	107f      	asrs	r7, r7, #1
 801fe84:	3608      	adds	r6, #8
 801fe86:	e7e5      	b.n	801fe54 <_dtoa_r+0x36c>
 801fe88:	f000 809b 	beq.w	801ffc2 <_dtoa_r+0x4da>
 801fe8c:	9b00      	ldr	r3, [sp, #0]
 801fe8e:	4f9d      	ldr	r7, [pc, #628]	; (8020104 <_dtoa_r+0x61c>)
 801fe90:	425e      	negs	r6, r3
 801fe92:	4b9b      	ldr	r3, [pc, #620]	; (8020100 <_dtoa_r+0x618>)
 801fe94:	f006 020f 	and.w	r2, r6, #15
 801fe98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fe9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fea0:	ec51 0b19 	vmov	r0, r1, d9
 801fea4:	f7e0 fbd0 	bl	8000648 <__aeabi_dmul>
 801fea8:	1136      	asrs	r6, r6, #4
 801feaa:	4682      	mov	sl, r0
 801feac:	468b      	mov	fp, r1
 801feae:	2300      	movs	r3, #0
 801feb0:	2502      	movs	r5, #2
 801feb2:	2e00      	cmp	r6, #0
 801feb4:	d17a      	bne.n	801ffac <_dtoa_r+0x4c4>
 801feb6:	2b00      	cmp	r3, #0
 801feb8:	d1d3      	bne.n	801fe62 <_dtoa_r+0x37a>
 801feba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801febc:	2b00      	cmp	r3, #0
 801febe:	f000 8082 	beq.w	801ffc6 <_dtoa_r+0x4de>
 801fec2:	4b91      	ldr	r3, [pc, #580]	; (8020108 <_dtoa_r+0x620>)
 801fec4:	2200      	movs	r2, #0
 801fec6:	4650      	mov	r0, sl
 801fec8:	4659      	mov	r1, fp
 801feca:	f7e0 fe2f 	bl	8000b2c <__aeabi_dcmplt>
 801fece:	2800      	cmp	r0, #0
 801fed0:	d079      	beq.n	801ffc6 <_dtoa_r+0x4de>
 801fed2:	9b03      	ldr	r3, [sp, #12]
 801fed4:	2b00      	cmp	r3, #0
 801fed6:	d076      	beq.n	801ffc6 <_dtoa_r+0x4de>
 801fed8:	9b02      	ldr	r3, [sp, #8]
 801feda:	2b00      	cmp	r3, #0
 801fedc:	dd36      	ble.n	801ff4c <_dtoa_r+0x464>
 801fede:	9b00      	ldr	r3, [sp, #0]
 801fee0:	4650      	mov	r0, sl
 801fee2:	4659      	mov	r1, fp
 801fee4:	1e5f      	subs	r7, r3, #1
 801fee6:	2200      	movs	r2, #0
 801fee8:	4b88      	ldr	r3, [pc, #544]	; (802010c <_dtoa_r+0x624>)
 801feea:	f7e0 fbad 	bl	8000648 <__aeabi_dmul>
 801feee:	9e02      	ldr	r6, [sp, #8]
 801fef0:	4682      	mov	sl, r0
 801fef2:	468b      	mov	fp, r1
 801fef4:	3501      	adds	r5, #1
 801fef6:	4628      	mov	r0, r5
 801fef8:	f7e0 fb3c 	bl	8000574 <__aeabi_i2d>
 801fefc:	4652      	mov	r2, sl
 801fefe:	465b      	mov	r3, fp
 801ff00:	f7e0 fba2 	bl	8000648 <__aeabi_dmul>
 801ff04:	4b82      	ldr	r3, [pc, #520]	; (8020110 <_dtoa_r+0x628>)
 801ff06:	2200      	movs	r2, #0
 801ff08:	f7e0 f9e8 	bl	80002dc <__adddf3>
 801ff0c:	46d0      	mov	r8, sl
 801ff0e:	46d9      	mov	r9, fp
 801ff10:	4682      	mov	sl, r0
 801ff12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801ff16:	2e00      	cmp	r6, #0
 801ff18:	d158      	bne.n	801ffcc <_dtoa_r+0x4e4>
 801ff1a:	4b7e      	ldr	r3, [pc, #504]	; (8020114 <_dtoa_r+0x62c>)
 801ff1c:	2200      	movs	r2, #0
 801ff1e:	4640      	mov	r0, r8
 801ff20:	4649      	mov	r1, r9
 801ff22:	f7e0 f9d9 	bl	80002d8 <__aeabi_dsub>
 801ff26:	4652      	mov	r2, sl
 801ff28:	465b      	mov	r3, fp
 801ff2a:	4680      	mov	r8, r0
 801ff2c:	4689      	mov	r9, r1
 801ff2e:	f7e0 fe1b 	bl	8000b68 <__aeabi_dcmpgt>
 801ff32:	2800      	cmp	r0, #0
 801ff34:	f040 8295 	bne.w	8020462 <_dtoa_r+0x97a>
 801ff38:	4652      	mov	r2, sl
 801ff3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801ff3e:	4640      	mov	r0, r8
 801ff40:	4649      	mov	r1, r9
 801ff42:	f7e0 fdf3 	bl	8000b2c <__aeabi_dcmplt>
 801ff46:	2800      	cmp	r0, #0
 801ff48:	f040 8289 	bne.w	802045e <_dtoa_r+0x976>
 801ff4c:	ec5b ab19 	vmov	sl, fp, d9
 801ff50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ff52:	2b00      	cmp	r3, #0
 801ff54:	f2c0 8148 	blt.w	80201e8 <_dtoa_r+0x700>
 801ff58:	9a00      	ldr	r2, [sp, #0]
 801ff5a:	2a0e      	cmp	r2, #14
 801ff5c:	f300 8144 	bgt.w	80201e8 <_dtoa_r+0x700>
 801ff60:	4b67      	ldr	r3, [pc, #412]	; (8020100 <_dtoa_r+0x618>)
 801ff62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ff66:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ff6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	f280 80d5 	bge.w	802011c <_dtoa_r+0x634>
 801ff72:	9b03      	ldr	r3, [sp, #12]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	f300 80d1 	bgt.w	802011c <_dtoa_r+0x634>
 801ff7a:	f040 826f 	bne.w	802045c <_dtoa_r+0x974>
 801ff7e:	4b65      	ldr	r3, [pc, #404]	; (8020114 <_dtoa_r+0x62c>)
 801ff80:	2200      	movs	r2, #0
 801ff82:	4640      	mov	r0, r8
 801ff84:	4649      	mov	r1, r9
 801ff86:	f7e0 fb5f 	bl	8000648 <__aeabi_dmul>
 801ff8a:	4652      	mov	r2, sl
 801ff8c:	465b      	mov	r3, fp
 801ff8e:	f7e0 fde1 	bl	8000b54 <__aeabi_dcmpge>
 801ff92:	9e03      	ldr	r6, [sp, #12]
 801ff94:	4637      	mov	r7, r6
 801ff96:	2800      	cmp	r0, #0
 801ff98:	f040 8245 	bne.w	8020426 <_dtoa_r+0x93e>
 801ff9c:	9d01      	ldr	r5, [sp, #4]
 801ff9e:	2331      	movs	r3, #49	; 0x31
 801ffa0:	f805 3b01 	strb.w	r3, [r5], #1
 801ffa4:	9b00      	ldr	r3, [sp, #0]
 801ffa6:	3301      	adds	r3, #1
 801ffa8:	9300      	str	r3, [sp, #0]
 801ffaa:	e240      	b.n	802042e <_dtoa_r+0x946>
 801ffac:	07f2      	lsls	r2, r6, #31
 801ffae:	d505      	bpl.n	801ffbc <_dtoa_r+0x4d4>
 801ffb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ffb4:	f7e0 fb48 	bl	8000648 <__aeabi_dmul>
 801ffb8:	3501      	adds	r5, #1
 801ffba:	2301      	movs	r3, #1
 801ffbc:	1076      	asrs	r6, r6, #1
 801ffbe:	3708      	adds	r7, #8
 801ffc0:	e777      	b.n	801feb2 <_dtoa_r+0x3ca>
 801ffc2:	2502      	movs	r5, #2
 801ffc4:	e779      	b.n	801feba <_dtoa_r+0x3d2>
 801ffc6:	9f00      	ldr	r7, [sp, #0]
 801ffc8:	9e03      	ldr	r6, [sp, #12]
 801ffca:	e794      	b.n	801fef6 <_dtoa_r+0x40e>
 801ffcc:	9901      	ldr	r1, [sp, #4]
 801ffce:	4b4c      	ldr	r3, [pc, #304]	; (8020100 <_dtoa_r+0x618>)
 801ffd0:	4431      	add	r1, r6
 801ffd2:	910d      	str	r1, [sp, #52]	; 0x34
 801ffd4:	9908      	ldr	r1, [sp, #32]
 801ffd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801ffda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ffde:	2900      	cmp	r1, #0
 801ffe0:	d043      	beq.n	802006a <_dtoa_r+0x582>
 801ffe2:	494d      	ldr	r1, [pc, #308]	; (8020118 <_dtoa_r+0x630>)
 801ffe4:	2000      	movs	r0, #0
 801ffe6:	f7e0 fc59 	bl	800089c <__aeabi_ddiv>
 801ffea:	4652      	mov	r2, sl
 801ffec:	465b      	mov	r3, fp
 801ffee:	f7e0 f973 	bl	80002d8 <__aeabi_dsub>
 801fff2:	9d01      	ldr	r5, [sp, #4]
 801fff4:	4682      	mov	sl, r0
 801fff6:	468b      	mov	fp, r1
 801fff8:	4649      	mov	r1, r9
 801fffa:	4640      	mov	r0, r8
 801fffc:	f7e0 fdd4 	bl	8000ba8 <__aeabi_d2iz>
 8020000:	4606      	mov	r6, r0
 8020002:	f7e0 fab7 	bl	8000574 <__aeabi_i2d>
 8020006:	4602      	mov	r2, r0
 8020008:	460b      	mov	r3, r1
 802000a:	4640      	mov	r0, r8
 802000c:	4649      	mov	r1, r9
 802000e:	f7e0 f963 	bl	80002d8 <__aeabi_dsub>
 8020012:	3630      	adds	r6, #48	; 0x30
 8020014:	f805 6b01 	strb.w	r6, [r5], #1
 8020018:	4652      	mov	r2, sl
 802001a:	465b      	mov	r3, fp
 802001c:	4680      	mov	r8, r0
 802001e:	4689      	mov	r9, r1
 8020020:	f7e0 fd84 	bl	8000b2c <__aeabi_dcmplt>
 8020024:	2800      	cmp	r0, #0
 8020026:	d163      	bne.n	80200f0 <_dtoa_r+0x608>
 8020028:	4642      	mov	r2, r8
 802002a:	464b      	mov	r3, r9
 802002c:	4936      	ldr	r1, [pc, #216]	; (8020108 <_dtoa_r+0x620>)
 802002e:	2000      	movs	r0, #0
 8020030:	f7e0 f952 	bl	80002d8 <__aeabi_dsub>
 8020034:	4652      	mov	r2, sl
 8020036:	465b      	mov	r3, fp
 8020038:	f7e0 fd78 	bl	8000b2c <__aeabi_dcmplt>
 802003c:	2800      	cmp	r0, #0
 802003e:	f040 80b5 	bne.w	80201ac <_dtoa_r+0x6c4>
 8020042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020044:	429d      	cmp	r5, r3
 8020046:	d081      	beq.n	801ff4c <_dtoa_r+0x464>
 8020048:	4b30      	ldr	r3, [pc, #192]	; (802010c <_dtoa_r+0x624>)
 802004a:	2200      	movs	r2, #0
 802004c:	4650      	mov	r0, sl
 802004e:	4659      	mov	r1, fp
 8020050:	f7e0 fafa 	bl	8000648 <__aeabi_dmul>
 8020054:	4b2d      	ldr	r3, [pc, #180]	; (802010c <_dtoa_r+0x624>)
 8020056:	4682      	mov	sl, r0
 8020058:	468b      	mov	fp, r1
 802005a:	4640      	mov	r0, r8
 802005c:	4649      	mov	r1, r9
 802005e:	2200      	movs	r2, #0
 8020060:	f7e0 faf2 	bl	8000648 <__aeabi_dmul>
 8020064:	4680      	mov	r8, r0
 8020066:	4689      	mov	r9, r1
 8020068:	e7c6      	b.n	801fff8 <_dtoa_r+0x510>
 802006a:	4650      	mov	r0, sl
 802006c:	4659      	mov	r1, fp
 802006e:	f7e0 faeb 	bl	8000648 <__aeabi_dmul>
 8020072:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020074:	9d01      	ldr	r5, [sp, #4]
 8020076:	930f      	str	r3, [sp, #60]	; 0x3c
 8020078:	4682      	mov	sl, r0
 802007a:	468b      	mov	fp, r1
 802007c:	4649      	mov	r1, r9
 802007e:	4640      	mov	r0, r8
 8020080:	f7e0 fd92 	bl	8000ba8 <__aeabi_d2iz>
 8020084:	4606      	mov	r6, r0
 8020086:	f7e0 fa75 	bl	8000574 <__aeabi_i2d>
 802008a:	3630      	adds	r6, #48	; 0x30
 802008c:	4602      	mov	r2, r0
 802008e:	460b      	mov	r3, r1
 8020090:	4640      	mov	r0, r8
 8020092:	4649      	mov	r1, r9
 8020094:	f7e0 f920 	bl	80002d8 <__aeabi_dsub>
 8020098:	f805 6b01 	strb.w	r6, [r5], #1
 802009c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802009e:	429d      	cmp	r5, r3
 80200a0:	4680      	mov	r8, r0
 80200a2:	4689      	mov	r9, r1
 80200a4:	f04f 0200 	mov.w	r2, #0
 80200a8:	d124      	bne.n	80200f4 <_dtoa_r+0x60c>
 80200aa:	4b1b      	ldr	r3, [pc, #108]	; (8020118 <_dtoa_r+0x630>)
 80200ac:	4650      	mov	r0, sl
 80200ae:	4659      	mov	r1, fp
 80200b0:	f7e0 f914 	bl	80002dc <__adddf3>
 80200b4:	4602      	mov	r2, r0
 80200b6:	460b      	mov	r3, r1
 80200b8:	4640      	mov	r0, r8
 80200ba:	4649      	mov	r1, r9
 80200bc:	f7e0 fd54 	bl	8000b68 <__aeabi_dcmpgt>
 80200c0:	2800      	cmp	r0, #0
 80200c2:	d173      	bne.n	80201ac <_dtoa_r+0x6c4>
 80200c4:	4652      	mov	r2, sl
 80200c6:	465b      	mov	r3, fp
 80200c8:	4913      	ldr	r1, [pc, #76]	; (8020118 <_dtoa_r+0x630>)
 80200ca:	2000      	movs	r0, #0
 80200cc:	f7e0 f904 	bl	80002d8 <__aeabi_dsub>
 80200d0:	4602      	mov	r2, r0
 80200d2:	460b      	mov	r3, r1
 80200d4:	4640      	mov	r0, r8
 80200d6:	4649      	mov	r1, r9
 80200d8:	f7e0 fd28 	bl	8000b2c <__aeabi_dcmplt>
 80200dc:	2800      	cmp	r0, #0
 80200de:	f43f af35 	beq.w	801ff4c <_dtoa_r+0x464>
 80200e2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80200e4:	1e6b      	subs	r3, r5, #1
 80200e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80200e8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80200ec:	2b30      	cmp	r3, #48	; 0x30
 80200ee:	d0f8      	beq.n	80200e2 <_dtoa_r+0x5fa>
 80200f0:	9700      	str	r7, [sp, #0]
 80200f2:	e049      	b.n	8020188 <_dtoa_r+0x6a0>
 80200f4:	4b05      	ldr	r3, [pc, #20]	; (802010c <_dtoa_r+0x624>)
 80200f6:	f7e0 faa7 	bl	8000648 <__aeabi_dmul>
 80200fa:	4680      	mov	r8, r0
 80200fc:	4689      	mov	r9, r1
 80200fe:	e7bd      	b.n	802007c <_dtoa_r+0x594>
 8020100:	08022308 	.word	0x08022308
 8020104:	080222e0 	.word	0x080222e0
 8020108:	3ff00000 	.word	0x3ff00000
 802010c:	40240000 	.word	0x40240000
 8020110:	401c0000 	.word	0x401c0000
 8020114:	40140000 	.word	0x40140000
 8020118:	3fe00000 	.word	0x3fe00000
 802011c:	9d01      	ldr	r5, [sp, #4]
 802011e:	4656      	mov	r6, sl
 8020120:	465f      	mov	r7, fp
 8020122:	4642      	mov	r2, r8
 8020124:	464b      	mov	r3, r9
 8020126:	4630      	mov	r0, r6
 8020128:	4639      	mov	r1, r7
 802012a:	f7e0 fbb7 	bl	800089c <__aeabi_ddiv>
 802012e:	f7e0 fd3b 	bl	8000ba8 <__aeabi_d2iz>
 8020132:	4682      	mov	sl, r0
 8020134:	f7e0 fa1e 	bl	8000574 <__aeabi_i2d>
 8020138:	4642      	mov	r2, r8
 802013a:	464b      	mov	r3, r9
 802013c:	f7e0 fa84 	bl	8000648 <__aeabi_dmul>
 8020140:	4602      	mov	r2, r0
 8020142:	460b      	mov	r3, r1
 8020144:	4630      	mov	r0, r6
 8020146:	4639      	mov	r1, r7
 8020148:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 802014c:	f7e0 f8c4 	bl	80002d8 <__aeabi_dsub>
 8020150:	f805 6b01 	strb.w	r6, [r5], #1
 8020154:	9e01      	ldr	r6, [sp, #4]
 8020156:	9f03      	ldr	r7, [sp, #12]
 8020158:	1bae      	subs	r6, r5, r6
 802015a:	42b7      	cmp	r7, r6
 802015c:	4602      	mov	r2, r0
 802015e:	460b      	mov	r3, r1
 8020160:	d135      	bne.n	80201ce <_dtoa_r+0x6e6>
 8020162:	f7e0 f8bb 	bl	80002dc <__adddf3>
 8020166:	4642      	mov	r2, r8
 8020168:	464b      	mov	r3, r9
 802016a:	4606      	mov	r6, r0
 802016c:	460f      	mov	r7, r1
 802016e:	f7e0 fcfb 	bl	8000b68 <__aeabi_dcmpgt>
 8020172:	b9d0      	cbnz	r0, 80201aa <_dtoa_r+0x6c2>
 8020174:	4642      	mov	r2, r8
 8020176:	464b      	mov	r3, r9
 8020178:	4630      	mov	r0, r6
 802017a:	4639      	mov	r1, r7
 802017c:	f7e0 fccc 	bl	8000b18 <__aeabi_dcmpeq>
 8020180:	b110      	cbz	r0, 8020188 <_dtoa_r+0x6a0>
 8020182:	f01a 0f01 	tst.w	sl, #1
 8020186:	d110      	bne.n	80201aa <_dtoa_r+0x6c2>
 8020188:	4620      	mov	r0, r4
 802018a:	ee18 1a10 	vmov	r1, s16
 802018e:	f000 fd05 	bl	8020b9c <_Bfree>
 8020192:	2300      	movs	r3, #0
 8020194:	9800      	ldr	r0, [sp, #0]
 8020196:	702b      	strb	r3, [r5, #0]
 8020198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802019a:	3001      	adds	r0, #1
 802019c:	6018      	str	r0, [r3, #0]
 802019e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80201a0:	2b00      	cmp	r3, #0
 80201a2:	f43f acf1 	beq.w	801fb88 <_dtoa_r+0xa0>
 80201a6:	601d      	str	r5, [r3, #0]
 80201a8:	e4ee      	b.n	801fb88 <_dtoa_r+0xa0>
 80201aa:	9f00      	ldr	r7, [sp, #0]
 80201ac:	462b      	mov	r3, r5
 80201ae:	461d      	mov	r5, r3
 80201b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80201b4:	2a39      	cmp	r2, #57	; 0x39
 80201b6:	d106      	bne.n	80201c6 <_dtoa_r+0x6de>
 80201b8:	9a01      	ldr	r2, [sp, #4]
 80201ba:	429a      	cmp	r2, r3
 80201bc:	d1f7      	bne.n	80201ae <_dtoa_r+0x6c6>
 80201be:	9901      	ldr	r1, [sp, #4]
 80201c0:	2230      	movs	r2, #48	; 0x30
 80201c2:	3701      	adds	r7, #1
 80201c4:	700a      	strb	r2, [r1, #0]
 80201c6:	781a      	ldrb	r2, [r3, #0]
 80201c8:	3201      	adds	r2, #1
 80201ca:	701a      	strb	r2, [r3, #0]
 80201cc:	e790      	b.n	80200f0 <_dtoa_r+0x608>
 80201ce:	4ba6      	ldr	r3, [pc, #664]	; (8020468 <_dtoa_r+0x980>)
 80201d0:	2200      	movs	r2, #0
 80201d2:	f7e0 fa39 	bl	8000648 <__aeabi_dmul>
 80201d6:	2200      	movs	r2, #0
 80201d8:	2300      	movs	r3, #0
 80201da:	4606      	mov	r6, r0
 80201dc:	460f      	mov	r7, r1
 80201de:	f7e0 fc9b 	bl	8000b18 <__aeabi_dcmpeq>
 80201e2:	2800      	cmp	r0, #0
 80201e4:	d09d      	beq.n	8020122 <_dtoa_r+0x63a>
 80201e6:	e7cf      	b.n	8020188 <_dtoa_r+0x6a0>
 80201e8:	9a08      	ldr	r2, [sp, #32]
 80201ea:	2a00      	cmp	r2, #0
 80201ec:	f000 80d7 	beq.w	802039e <_dtoa_r+0x8b6>
 80201f0:	9a06      	ldr	r2, [sp, #24]
 80201f2:	2a01      	cmp	r2, #1
 80201f4:	f300 80ba 	bgt.w	802036c <_dtoa_r+0x884>
 80201f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80201fa:	2a00      	cmp	r2, #0
 80201fc:	f000 80b2 	beq.w	8020364 <_dtoa_r+0x87c>
 8020200:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020204:	9e07      	ldr	r6, [sp, #28]
 8020206:	9d04      	ldr	r5, [sp, #16]
 8020208:	9a04      	ldr	r2, [sp, #16]
 802020a:	441a      	add	r2, r3
 802020c:	9204      	str	r2, [sp, #16]
 802020e:	9a05      	ldr	r2, [sp, #20]
 8020210:	2101      	movs	r1, #1
 8020212:	441a      	add	r2, r3
 8020214:	4620      	mov	r0, r4
 8020216:	9205      	str	r2, [sp, #20]
 8020218:	f000 fd78 	bl	8020d0c <__i2b>
 802021c:	4607      	mov	r7, r0
 802021e:	2d00      	cmp	r5, #0
 8020220:	dd0c      	ble.n	802023c <_dtoa_r+0x754>
 8020222:	9b05      	ldr	r3, [sp, #20]
 8020224:	2b00      	cmp	r3, #0
 8020226:	dd09      	ble.n	802023c <_dtoa_r+0x754>
 8020228:	42ab      	cmp	r3, r5
 802022a:	9a04      	ldr	r2, [sp, #16]
 802022c:	bfa8      	it	ge
 802022e:	462b      	movge	r3, r5
 8020230:	1ad2      	subs	r2, r2, r3
 8020232:	9204      	str	r2, [sp, #16]
 8020234:	9a05      	ldr	r2, [sp, #20]
 8020236:	1aed      	subs	r5, r5, r3
 8020238:	1ad3      	subs	r3, r2, r3
 802023a:	9305      	str	r3, [sp, #20]
 802023c:	9b07      	ldr	r3, [sp, #28]
 802023e:	b31b      	cbz	r3, 8020288 <_dtoa_r+0x7a0>
 8020240:	9b08      	ldr	r3, [sp, #32]
 8020242:	2b00      	cmp	r3, #0
 8020244:	f000 80af 	beq.w	80203a6 <_dtoa_r+0x8be>
 8020248:	2e00      	cmp	r6, #0
 802024a:	dd13      	ble.n	8020274 <_dtoa_r+0x78c>
 802024c:	4639      	mov	r1, r7
 802024e:	4632      	mov	r2, r6
 8020250:	4620      	mov	r0, r4
 8020252:	f000 fe1b 	bl	8020e8c <__pow5mult>
 8020256:	ee18 2a10 	vmov	r2, s16
 802025a:	4601      	mov	r1, r0
 802025c:	4607      	mov	r7, r0
 802025e:	4620      	mov	r0, r4
 8020260:	f000 fd6a 	bl	8020d38 <__multiply>
 8020264:	ee18 1a10 	vmov	r1, s16
 8020268:	4680      	mov	r8, r0
 802026a:	4620      	mov	r0, r4
 802026c:	f000 fc96 	bl	8020b9c <_Bfree>
 8020270:	ee08 8a10 	vmov	s16, r8
 8020274:	9b07      	ldr	r3, [sp, #28]
 8020276:	1b9a      	subs	r2, r3, r6
 8020278:	d006      	beq.n	8020288 <_dtoa_r+0x7a0>
 802027a:	ee18 1a10 	vmov	r1, s16
 802027e:	4620      	mov	r0, r4
 8020280:	f000 fe04 	bl	8020e8c <__pow5mult>
 8020284:	ee08 0a10 	vmov	s16, r0
 8020288:	2101      	movs	r1, #1
 802028a:	4620      	mov	r0, r4
 802028c:	f000 fd3e 	bl	8020d0c <__i2b>
 8020290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020292:	2b00      	cmp	r3, #0
 8020294:	4606      	mov	r6, r0
 8020296:	f340 8088 	ble.w	80203aa <_dtoa_r+0x8c2>
 802029a:	461a      	mov	r2, r3
 802029c:	4601      	mov	r1, r0
 802029e:	4620      	mov	r0, r4
 80202a0:	f000 fdf4 	bl	8020e8c <__pow5mult>
 80202a4:	9b06      	ldr	r3, [sp, #24]
 80202a6:	2b01      	cmp	r3, #1
 80202a8:	4606      	mov	r6, r0
 80202aa:	f340 8081 	ble.w	80203b0 <_dtoa_r+0x8c8>
 80202ae:	f04f 0800 	mov.w	r8, #0
 80202b2:	6933      	ldr	r3, [r6, #16]
 80202b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80202b8:	6918      	ldr	r0, [r3, #16]
 80202ba:	f000 fcd7 	bl	8020c6c <__hi0bits>
 80202be:	f1c0 0020 	rsb	r0, r0, #32
 80202c2:	9b05      	ldr	r3, [sp, #20]
 80202c4:	4418      	add	r0, r3
 80202c6:	f010 001f 	ands.w	r0, r0, #31
 80202ca:	f000 8092 	beq.w	80203f2 <_dtoa_r+0x90a>
 80202ce:	f1c0 0320 	rsb	r3, r0, #32
 80202d2:	2b04      	cmp	r3, #4
 80202d4:	f340 808a 	ble.w	80203ec <_dtoa_r+0x904>
 80202d8:	f1c0 001c 	rsb	r0, r0, #28
 80202dc:	9b04      	ldr	r3, [sp, #16]
 80202de:	4403      	add	r3, r0
 80202e0:	9304      	str	r3, [sp, #16]
 80202e2:	9b05      	ldr	r3, [sp, #20]
 80202e4:	4403      	add	r3, r0
 80202e6:	4405      	add	r5, r0
 80202e8:	9305      	str	r3, [sp, #20]
 80202ea:	9b04      	ldr	r3, [sp, #16]
 80202ec:	2b00      	cmp	r3, #0
 80202ee:	dd07      	ble.n	8020300 <_dtoa_r+0x818>
 80202f0:	ee18 1a10 	vmov	r1, s16
 80202f4:	461a      	mov	r2, r3
 80202f6:	4620      	mov	r0, r4
 80202f8:	f000 fe22 	bl	8020f40 <__lshift>
 80202fc:	ee08 0a10 	vmov	s16, r0
 8020300:	9b05      	ldr	r3, [sp, #20]
 8020302:	2b00      	cmp	r3, #0
 8020304:	dd05      	ble.n	8020312 <_dtoa_r+0x82a>
 8020306:	4631      	mov	r1, r6
 8020308:	461a      	mov	r2, r3
 802030a:	4620      	mov	r0, r4
 802030c:	f000 fe18 	bl	8020f40 <__lshift>
 8020310:	4606      	mov	r6, r0
 8020312:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020314:	2b00      	cmp	r3, #0
 8020316:	d06e      	beq.n	80203f6 <_dtoa_r+0x90e>
 8020318:	ee18 0a10 	vmov	r0, s16
 802031c:	4631      	mov	r1, r6
 802031e:	f000 fe7f 	bl	8021020 <__mcmp>
 8020322:	2800      	cmp	r0, #0
 8020324:	da67      	bge.n	80203f6 <_dtoa_r+0x90e>
 8020326:	9b00      	ldr	r3, [sp, #0]
 8020328:	3b01      	subs	r3, #1
 802032a:	ee18 1a10 	vmov	r1, s16
 802032e:	9300      	str	r3, [sp, #0]
 8020330:	220a      	movs	r2, #10
 8020332:	2300      	movs	r3, #0
 8020334:	4620      	mov	r0, r4
 8020336:	f000 fc53 	bl	8020be0 <__multadd>
 802033a:	9b08      	ldr	r3, [sp, #32]
 802033c:	ee08 0a10 	vmov	s16, r0
 8020340:	2b00      	cmp	r3, #0
 8020342:	f000 81b1 	beq.w	80206a8 <_dtoa_r+0xbc0>
 8020346:	2300      	movs	r3, #0
 8020348:	4639      	mov	r1, r7
 802034a:	220a      	movs	r2, #10
 802034c:	4620      	mov	r0, r4
 802034e:	f000 fc47 	bl	8020be0 <__multadd>
 8020352:	9b02      	ldr	r3, [sp, #8]
 8020354:	2b00      	cmp	r3, #0
 8020356:	4607      	mov	r7, r0
 8020358:	f300 808e 	bgt.w	8020478 <_dtoa_r+0x990>
 802035c:	9b06      	ldr	r3, [sp, #24]
 802035e:	2b02      	cmp	r3, #2
 8020360:	dc51      	bgt.n	8020406 <_dtoa_r+0x91e>
 8020362:	e089      	b.n	8020478 <_dtoa_r+0x990>
 8020364:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020366:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802036a:	e74b      	b.n	8020204 <_dtoa_r+0x71c>
 802036c:	9b03      	ldr	r3, [sp, #12]
 802036e:	1e5e      	subs	r6, r3, #1
 8020370:	9b07      	ldr	r3, [sp, #28]
 8020372:	42b3      	cmp	r3, r6
 8020374:	bfbf      	itttt	lt
 8020376:	9b07      	ldrlt	r3, [sp, #28]
 8020378:	9607      	strlt	r6, [sp, #28]
 802037a:	1af2      	sublt	r2, r6, r3
 802037c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802037e:	bfb6      	itet	lt
 8020380:	189b      	addlt	r3, r3, r2
 8020382:	1b9e      	subge	r6, r3, r6
 8020384:	930a      	strlt	r3, [sp, #40]	; 0x28
 8020386:	9b03      	ldr	r3, [sp, #12]
 8020388:	bfb8      	it	lt
 802038a:	2600      	movlt	r6, #0
 802038c:	2b00      	cmp	r3, #0
 802038e:	bfb7      	itett	lt
 8020390:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8020394:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8020398:	1a9d      	sublt	r5, r3, r2
 802039a:	2300      	movlt	r3, #0
 802039c:	e734      	b.n	8020208 <_dtoa_r+0x720>
 802039e:	9e07      	ldr	r6, [sp, #28]
 80203a0:	9d04      	ldr	r5, [sp, #16]
 80203a2:	9f08      	ldr	r7, [sp, #32]
 80203a4:	e73b      	b.n	802021e <_dtoa_r+0x736>
 80203a6:	9a07      	ldr	r2, [sp, #28]
 80203a8:	e767      	b.n	802027a <_dtoa_r+0x792>
 80203aa:	9b06      	ldr	r3, [sp, #24]
 80203ac:	2b01      	cmp	r3, #1
 80203ae:	dc18      	bgt.n	80203e2 <_dtoa_r+0x8fa>
 80203b0:	f1ba 0f00 	cmp.w	sl, #0
 80203b4:	d115      	bne.n	80203e2 <_dtoa_r+0x8fa>
 80203b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80203ba:	b993      	cbnz	r3, 80203e2 <_dtoa_r+0x8fa>
 80203bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80203c0:	0d1b      	lsrs	r3, r3, #20
 80203c2:	051b      	lsls	r3, r3, #20
 80203c4:	b183      	cbz	r3, 80203e8 <_dtoa_r+0x900>
 80203c6:	9b04      	ldr	r3, [sp, #16]
 80203c8:	3301      	adds	r3, #1
 80203ca:	9304      	str	r3, [sp, #16]
 80203cc:	9b05      	ldr	r3, [sp, #20]
 80203ce:	3301      	adds	r3, #1
 80203d0:	9305      	str	r3, [sp, #20]
 80203d2:	f04f 0801 	mov.w	r8, #1
 80203d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80203d8:	2b00      	cmp	r3, #0
 80203da:	f47f af6a 	bne.w	80202b2 <_dtoa_r+0x7ca>
 80203de:	2001      	movs	r0, #1
 80203e0:	e76f      	b.n	80202c2 <_dtoa_r+0x7da>
 80203e2:	f04f 0800 	mov.w	r8, #0
 80203e6:	e7f6      	b.n	80203d6 <_dtoa_r+0x8ee>
 80203e8:	4698      	mov	r8, r3
 80203ea:	e7f4      	b.n	80203d6 <_dtoa_r+0x8ee>
 80203ec:	f43f af7d 	beq.w	80202ea <_dtoa_r+0x802>
 80203f0:	4618      	mov	r0, r3
 80203f2:	301c      	adds	r0, #28
 80203f4:	e772      	b.n	80202dc <_dtoa_r+0x7f4>
 80203f6:	9b03      	ldr	r3, [sp, #12]
 80203f8:	2b00      	cmp	r3, #0
 80203fa:	dc37      	bgt.n	802046c <_dtoa_r+0x984>
 80203fc:	9b06      	ldr	r3, [sp, #24]
 80203fe:	2b02      	cmp	r3, #2
 8020400:	dd34      	ble.n	802046c <_dtoa_r+0x984>
 8020402:	9b03      	ldr	r3, [sp, #12]
 8020404:	9302      	str	r3, [sp, #8]
 8020406:	9b02      	ldr	r3, [sp, #8]
 8020408:	b96b      	cbnz	r3, 8020426 <_dtoa_r+0x93e>
 802040a:	4631      	mov	r1, r6
 802040c:	2205      	movs	r2, #5
 802040e:	4620      	mov	r0, r4
 8020410:	f000 fbe6 	bl	8020be0 <__multadd>
 8020414:	4601      	mov	r1, r0
 8020416:	4606      	mov	r6, r0
 8020418:	ee18 0a10 	vmov	r0, s16
 802041c:	f000 fe00 	bl	8021020 <__mcmp>
 8020420:	2800      	cmp	r0, #0
 8020422:	f73f adbb 	bgt.w	801ff9c <_dtoa_r+0x4b4>
 8020426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020428:	9d01      	ldr	r5, [sp, #4]
 802042a:	43db      	mvns	r3, r3
 802042c:	9300      	str	r3, [sp, #0]
 802042e:	f04f 0800 	mov.w	r8, #0
 8020432:	4631      	mov	r1, r6
 8020434:	4620      	mov	r0, r4
 8020436:	f000 fbb1 	bl	8020b9c <_Bfree>
 802043a:	2f00      	cmp	r7, #0
 802043c:	f43f aea4 	beq.w	8020188 <_dtoa_r+0x6a0>
 8020440:	f1b8 0f00 	cmp.w	r8, #0
 8020444:	d005      	beq.n	8020452 <_dtoa_r+0x96a>
 8020446:	45b8      	cmp	r8, r7
 8020448:	d003      	beq.n	8020452 <_dtoa_r+0x96a>
 802044a:	4641      	mov	r1, r8
 802044c:	4620      	mov	r0, r4
 802044e:	f000 fba5 	bl	8020b9c <_Bfree>
 8020452:	4639      	mov	r1, r7
 8020454:	4620      	mov	r0, r4
 8020456:	f000 fba1 	bl	8020b9c <_Bfree>
 802045a:	e695      	b.n	8020188 <_dtoa_r+0x6a0>
 802045c:	2600      	movs	r6, #0
 802045e:	4637      	mov	r7, r6
 8020460:	e7e1      	b.n	8020426 <_dtoa_r+0x93e>
 8020462:	9700      	str	r7, [sp, #0]
 8020464:	4637      	mov	r7, r6
 8020466:	e599      	b.n	801ff9c <_dtoa_r+0x4b4>
 8020468:	40240000 	.word	0x40240000
 802046c:	9b08      	ldr	r3, [sp, #32]
 802046e:	2b00      	cmp	r3, #0
 8020470:	f000 80ca 	beq.w	8020608 <_dtoa_r+0xb20>
 8020474:	9b03      	ldr	r3, [sp, #12]
 8020476:	9302      	str	r3, [sp, #8]
 8020478:	2d00      	cmp	r5, #0
 802047a:	dd05      	ble.n	8020488 <_dtoa_r+0x9a0>
 802047c:	4639      	mov	r1, r7
 802047e:	462a      	mov	r2, r5
 8020480:	4620      	mov	r0, r4
 8020482:	f000 fd5d 	bl	8020f40 <__lshift>
 8020486:	4607      	mov	r7, r0
 8020488:	f1b8 0f00 	cmp.w	r8, #0
 802048c:	d05b      	beq.n	8020546 <_dtoa_r+0xa5e>
 802048e:	6879      	ldr	r1, [r7, #4]
 8020490:	4620      	mov	r0, r4
 8020492:	f000 fb43 	bl	8020b1c <_Balloc>
 8020496:	4605      	mov	r5, r0
 8020498:	b928      	cbnz	r0, 80204a6 <_dtoa_r+0x9be>
 802049a:	4b87      	ldr	r3, [pc, #540]	; (80206b8 <_dtoa_r+0xbd0>)
 802049c:	4602      	mov	r2, r0
 802049e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80204a2:	f7ff bb3b 	b.w	801fb1c <_dtoa_r+0x34>
 80204a6:	693a      	ldr	r2, [r7, #16]
 80204a8:	3202      	adds	r2, #2
 80204aa:	0092      	lsls	r2, r2, #2
 80204ac:	f107 010c 	add.w	r1, r7, #12
 80204b0:	300c      	adds	r0, #12
 80204b2:	f7fe fca9 	bl	801ee08 <memcpy>
 80204b6:	2201      	movs	r2, #1
 80204b8:	4629      	mov	r1, r5
 80204ba:	4620      	mov	r0, r4
 80204bc:	f000 fd40 	bl	8020f40 <__lshift>
 80204c0:	9b01      	ldr	r3, [sp, #4]
 80204c2:	f103 0901 	add.w	r9, r3, #1
 80204c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80204ca:	4413      	add	r3, r2
 80204cc:	9305      	str	r3, [sp, #20]
 80204ce:	f00a 0301 	and.w	r3, sl, #1
 80204d2:	46b8      	mov	r8, r7
 80204d4:	9304      	str	r3, [sp, #16]
 80204d6:	4607      	mov	r7, r0
 80204d8:	4631      	mov	r1, r6
 80204da:	ee18 0a10 	vmov	r0, s16
 80204de:	f7ff fa77 	bl	801f9d0 <quorem>
 80204e2:	4641      	mov	r1, r8
 80204e4:	9002      	str	r0, [sp, #8]
 80204e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80204ea:	ee18 0a10 	vmov	r0, s16
 80204ee:	f000 fd97 	bl	8021020 <__mcmp>
 80204f2:	463a      	mov	r2, r7
 80204f4:	9003      	str	r0, [sp, #12]
 80204f6:	4631      	mov	r1, r6
 80204f8:	4620      	mov	r0, r4
 80204fa:	f000 fdad 	bl	8021058 <__mdiff>
 80204fe:	68c2      	ldr	r2, [r0, #12]
 8020500:	f109 3bff 	add.w	fp, r9, #4294967295
 8020504:	4605      	mov	r5, r0
 8020506:	bb02      	cbnz	r2, 802054a <_dtoa_r+0xa62>
 8020508:	4601      	mov	r1, r0
 802050a:	ee18 0a10 	vmov	r0, s16
 802050e:	f000 fd87 	bl	8021020 <__mcmp>
 8020512:	4602      	mov	r2, r0
 8020514:	4629      	mov	r1, r5
 8020516:	4620      	mov	r0, r4
 8020518:	9207      	str	r2, [sp, #28]
 802051a:	f000 fb3f 	bl	8020b9c <_Bfree>
 802051e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8020522:	ea43 0102 	orr.w	r1, r3, r2
 8020526:	9b04      	ldr	r3, [sp, #16]
 8020528:	430b      	orrs	r3, r1
 802052a:	464d      	mov	r5, r9
 802052c:	d10f      	bne.n	802054e <_dtoa_r+0xa66>
 802052e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020532:	d02a      	beq.n	802058a <_dtoa_r+0xaa2>
 8020534:	9b03      	ldr	r3, [sp, #12]
 8020536:	2b00      	cmp	r3, #0
 8020538:	dd02      	ble.n	8020540 <_dtoa_r+0xa58>
 802053a:	9b02      	ldr	r3, [sp, #8]
 802053c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8020540:	f88b a000 	strb.w	sl, [fp]
 8020544:	e775      	b.n	8020432 <_dtoa_r+0x94a>
 8020546:	4638      	mov	r0, r7
 8020548:	e7ba      	b.n	80204c0 <_dtoa_r+0x9d8>
 802054a:	2201      	movs	r2, #1
 802054c:	e7e2      	b.n	8020514 <_dtoa_r+0xa2c>
 802054e:	9b03      	ldr	r3, [sp, #12]
 8020550:	2b00      	cmp	r3, #0
 8020552:	db04      	blt.n	802055e <_dtoa_r+0xa76>
 8020554:	9906      	ldr	r1, [sp, #24]
 8020556:	430b      	orrs	r3, r1
 8020558:	9904      	ldr	r1, [sp, #16]
 802055a:	430b      	orrs	r3, r1
 802055c:	d122      	bne.n	80205a4 <_dtoa_r+0xabc>
 802055e:	2a00      	cmp	r2, #0
 8020560:	ddee      	ble.n	8020540 <_dtoa_r+0xa58>
 8020562:	ee18 1a10 	vmov	r1, s16
 8020566:	2201      	movs	r2, #1
 8020568:	4620      	mov	r0, r4
 802056a:	f000 fce9 	bl	8020f40 <__lshift>
 802056e:	4631      	mov	r1, r6
 8020570:	ee08 0a10 	vmov	s16, r0
 8020574:	f000 fd54 	bl	8021020 <__mcmp>
 8020578:	2800      	cmp	r0, #0
 802057a:	dc03      	bgt.n	8020584 <_dtoa_r+0xa9c>
 802057c:	d1e0      	bne.n	8020540 <_dtoa_r+0xa58>
 802057e:	f01a 0f01 	tst.w	sl, #1
 8020582:	d0dd      	beq.n	8020540 <_dtoa_r+0xa58>
 8020584:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8020588:	d1d7      	bne.n	802053a <_dtoa_r+0xa52>
 802058a:	2339      	movs	r3, #57	; 0x39
 802058c:	f88b 3000 	strb.w	r3, [fp]
 8020590:	462b      	mov	r3, r5
 8020592:	461d      	mov	r5, r3
 8020594:	3b01      	subs	r3, #1
 8020596:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802059a:	2a39      	cmp	r2, #57	; 0x39
 802059c:	d071      	beq.n	8020682 <_dtoa_r+0xb9a>
 802059e:	3201      	adds	r2, #1
 80205a0:	701a      	strb	r2, [r3, #0]
 80205a2:	e746      	b.n	8020432 <_dtoa_r+0x94a>
 80205a4:	2a00      	cmp	r2, #0
 80205a6:	dd07      	ble.n	80205b8 <_dtoa_r+0xad0>
 80205a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80205ac:	d0ed      	beq.n	802058a <_dtoa_r+0xaa2>
 80205ae:	f10a 0301 	add.w	r3, sl, #1
 80205b2:	f88b 3000 	strb.w	r3, [fp]
 80205b6:	e73c      	b.n	8020432 <_dtoa_r+0x94a>
 80205b8:	9b05      	ldr	r3, [sp, #20]
 80205ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80205be:	4599      	cmp	r9, r3
 80205c0:	d047      	beq.n	8020652 <_dtoa_r+0xb6a>
 80205c2:	ee18 1a10 	vmov	r1, s16
 80205c6:	2300      	movs	r3, #0
 80205c8:	220a      	movs	r2, #10
 80205ca:	4620      	mov	r0, r4
 80205cc:	f000 fb08 	bl	8020be0 <__multadd>
 80205d0:	45b8      	cmp	r8, r7
 80205d2:	ee08 0a10 	vmov	s16, r0
 80205d6:	f04f 0300 	mov.w	r3, #0
 80205da:	f04f 020a 	mov.w	r2, #10
 80205de:	4641      	mov	r1, r8
 80205e0:	4620      	mov	r0, r4
 80205e2:	d106      	bne.n	80205f2 <_dtoa_r+0xb0a>
 80205e4:	f000 fafc 	bl	8020be0 <__multadd>
 80205e8:	4680      	mov	r8, r0
 80205ea:	4607      	mov	r7, r0
 80205ec:	f109 0901 	add.w	r9, r9, #1
 80205f0:	e772      	b.n	80204d8 <_dtoa_r+0x9f0>
 80205f2:	f000 faf5 	bl	8020be0 <__multadd>
 80205f6:	4639      	mov	r1, r7
 80205f8:	4680      	mov	r8, r0
 80205fa:	2300      	movs	r3, #0
 80205fc:	220a      	movs	r2, #10
 80205fe:	4620      	mov	r0, r4
 8020600:	f000 faee 	bl	8020be0 <__multadd>
 8020604:	4607      	mov	r7, r0
 8020606:	e7f1      	b.n	80205ec <_dtoa_r+0xb04>
 8020608:	9b03      	ldr	r3, [sp, #12]
 802060a:	9302      	str	r3, [sp, #8]
 802060c:	9d01      	ldr	r5, [sp, #4]
 802060e:	ee18 0a10 	vmov	r0, s16
 8020612:	4631      	mov	r1, r6
 8020614:	f7ff f9dc 	bl	801f9d0 <quorem>
 8020618:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802061c:	9b01      	ldr	r3, [sp, #4]
 802061e:	f805 ab01 	strb.w	sl, [r5], #1
 8020622:	1aea      	subs	r2, r5, r3
 8020624:	9b02      	ldr	r3, [sp, #8]
 8020626:	4293      	cmp	r3, r2
 8020628:	dd09      	ble.n	802063e <_dtoa_r+0xb56>
 802062a:	ee18 1a10 	vmov	r1, s16
 802062e:	2300      	movs	r3, #0
 8020630:	220a      	movs	r2, #10
 8020632:	4620      	mov	r0, r4
 8020634:	f000 fad4 	bl	8020be0 <__multadd>
 8020638:	ee08 0a10 	vmov	s16, r0
 802063c:	e7e7      	b.n	802060e <_dtoa_r+0xb26>
 802063e:	9b02      	ldr	r3, [sp, #8]
 8020640:	2b00      	cmp	r3, #0
 8020642:	bfc8      	it	gt
 8020644:	461d      	movgt	r5, r3
 8020646:	9b01      	ldr	r3, [sp, #4]
 8020648:	bfd8      	it	le
 802064a:	2501      	movle	r5, #1
 802064c:	441d      	add	r5, r3
 802064e:	f04f 0800 	mov.w	r8, #0
 8020652:	ee18 1a10 	vmov	r1, s16
 8020656:	2201      	movs	r2, #1
 8020658:	4620      	mov	r0, r4
 802065a:	f000 fc71 	bl	8020f40 <__lshift>
 802065e:	4631      	mov	r1, r6
 8020660:	ee08 0a10 	vmov	s16, r0
 8020664:	f000 fcdc 	bl	8021020 <__mcmp>
 8020668:	2800      	cmp	r0, #0
 802066a:	dc91      	bgt.n	8020590 <_dtoa_r+0xaa8>
 802066c:	d102      	bne.n	8020674 <_dtoa_r+0xb8c>
 802066e:	f01a 0f01 	tst.w	sl, #1
 8020672:	d18d      	bne.n	8020590 <_dtoa_r+0xaa8>
 8020674:	462b      	mov	r3, r5
 8020676:	461d      	mov	r5, r3
 8020678:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802067c:	2a30      	cmp	r2, #48	; 0x30
 802067e:	d0fa      	beq.n	8020676 <_dtoa_r+0xb8e>
 8020680:	e6d7      	b.n	8020432 <_dtoa_r+0x94a>
 8020682:	9a01      	ldr	r2, [sp, #4]
 8020684:	429a      	cmp	r2, r3
 8020686:	d184      	bne.n	8020592 <_dtoa_r+0xaaa>
 8020688:	9b00      	ldr	r3, [sp, #0]
 802068a:	3301      	adds	r3, #1
 802068c:	9300      	str	r3, [sp, #0]
 802068e:	2331      	movs	r3, #49	; 0x31
 8020690:	7013      	strb	r3, [r2, #0]
 8020692:	e6ce      	b.n	8020432 <_dtoa_r+0x94a>
 8020694:	4b09      	ldr	r3, [pc, #36]	; (80206bc <_dtoa_r+0xbd4>)
 8020696:	f7ff ba95 	b.w	801fbc4 <_dtoa_r+0xdc>
 802069a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802069c:	2b00      	cmp	r3, #0
 802069e:	f47f aa6e 	bne.w	801fb7e <_dtoa_r+0x96>
 80206a2:	4b07      	ldr	r3, [pc, #28]	; (80206c0 <_dtoa_r+0xbd8>)
 80206a4:	f7ff ba8e 	b.w	801fbc4 <_dtoa_r+0xdc>
 80206a8:	9b02      	ldr	r3, [sp, #8]
 80206aa:	2b00      	cmp	r3, #0
 80206ac:	dcae      	bgt.n	802060c <_dtoa_r+0xb24>
 80206ae:	9b06      	ldr	r3, [sp, #24]
 80206b0:	2b02      	cmp	r3, #2
 80206b2:	f73f aea8 	bgt.w	8020406 <_dtoa_r+0x91e>
 80206b6:	e7a9      	b.n	802060c <_dtoa_r+0xb24>
 80206b8:	0802220f 	.word	0x0802220f
 80206bc:	0802216c 	.word	0x0802216c
 80206c0:	08022190 	.word	0x08022190

080206c4 <__sflush_r>:
 80206c4:	898a      	ldrh	r2, [r1, #12]
 80206c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206ca:	4605      	mov	r5, r0
 80206cc:	0710      	lsls	r0, r2, #28
 80206ce:	460c      	mov	r4, r1
 80206d0:	d458      	bmi.n	8020784 <__sflush_r+0xc0>
 80206d2:	684b      	ldr	r3, [r1, #4]
 80206d4:	2b00      	cmp	r3, #0
 80206d6:	dc05      	bgt.n	80206e4 <__sflush_r+0x20>
 80206d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80206da:	2b00      	cmp	r3, #0
 80206dc:	dc02      	bgt.n	80206e4 <__sflush_r+0x20>
 80206de:	2000      	movs	r0, #0
 80206e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80206e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80206e6:	2e00      	cmp	r6, #0
 80206e8:	d0f9      	beq.n	80206de <__sflush_r+0x1a>
 80206ea:	2300      	movs	r3, #0
 80206ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80206f0:	682f      	ldr	r7, [r5, #0]
 80206f2:	602b      	str	r3, [r5, #0]
 80206f4:	d032      	beq.n	802075c <__sflush_r+0x98>
 80206f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80206f8:	89a3      	ldrh	r3, [r4, #12]
 80206fa:	075a      	lsls	r2, r3, #29
 80206fc:	d505      	bpl.n	802070a <__sflush_r+0x46>
 80206fe:	6863      	ldr	r3, [r4, #4]
 8020700:	1ac0      	subs	r0, r0, r3
 8020702:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8020704:	b10b      	cbz	r3, 802070a <__sflush_r+0x46>
 8020706:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8020708:	1ac0      	subs	r0, r0, r3
 802070a:	2300      	movs	r3, #0
 802070c:	4602      	mov	r2, r0
 802070e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020710:	6a21      	ldr	r1, [r4, #32]
 8020712:	4628      	mov	r0, r5
 8020714:	47b0      	blx	r6
 8020716:	1c43      	adds	r3, r0, #1
 8020718:	89a3      	ldrh	r3, [r4, #12]
 802071a:	d106      	bne.n	802072a <__sflush_r+0x66>
 802071c:	6829      	ldr	r1, [r5, #0]
 802071e:	291d      	cmp	r1, #29
 8020720:	d82c      	bhi.n	802077c <__sflush_r+0xb8>
 8020722:	4a2a      	ldr	r2, [pc, #168]	; (80207cc <__sflush_r+0x108>)
 8020724:	40ca      	lsrs	r2, r1
 8020726:	07d6      	lsls	r6, r2, #31
 8020728:	d528      	bpl.n	802077c <__sflush_r+0xb8>
 802072a:	2200      	movs	r2, #0
 802072c:	6062      	str	r2, [r4, #4]
 802072e:	04d9      	lsls	r1, r3, #19
 8020730:	6922      	ldr	r2, [r4, #16]
 8020732:	6022      	str	r2, [r4, #0]
 8020734:	d504      	bpl.n	8020740 <__sflush_r+0x7c>
 8020736:	1c42      	adds	r2, r0, #1
 8020738:	d101      	bne.n	802073e <__sflush_r+0x7a>
 802073a:	682b      	ldr	r3, [r5, #0]
 802073c:	b903      	cbnz	r3, 8020740 <__sflush_r+0x7c>
 802073e:	6560      	str	r0, [r4, #84]	; 0x54
 8020740:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020742:	602f      	str	r7, [r5, #0]
 8020744:	2900      	cmp	r1, #0
 8020746:	d0ca      	beq.n	80206de <__sflush_r+0x1a>
 8020748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802074c:	4299      	cmp	r1, r3
 802074e:	d002      	beq.n	8020756 <__sflush_r+0x92>
 8020750:	4628      	mov	r0, r5
 8020752:	f000 fd7d 	bl	8021250 <_free_r>
 8020756:	2000      	movs	r0, #0
 8020758:	6360      	str	r0, [r4, #52]	; 0x34
 802075a:	e7c1      	b.n	80206e0 <__sflush_r+0x1c>
 802075c:	6a21      	ldr	r1, [r4, #32]
 802075e:	2301      	movs	r3, #1
 8020760:	4628      	mov	r0, r5
 8020762:	47b0      	blx	r6
 8020764:	1c41      	adds	r1, r0, #1
 8020766:	d1c7      	bne.n	80206f8 <__sflush_r+0x34>
 8020768:	682b      	ldr	r3, [r5, #0]
 802076a:	2b00      	cmp	r3, #0
 802076c:	d0c4      	beq.n	80206f8 <__sflush_r+0x34>
 802076e:	2b1d      	cmp	r3, #29
 8020770:	d001      	beq.n	8020776 <__sflush_r+0xb2>
 8020772:	2b16      	cmp	r3, #22
 8020774:	d101      	bne.n	802077a <__sflush_r+0xb6>
 8020776:	602f      	str	r7, [r5, #0]
 8020778:	e7b1      	b.n	80206de <__sflush_r+0x1a>
 802077a:	89a3      	ldrh	r3, [r4, #12]
 802077c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020780:	81a3      	strh	r3, [r4, #12]
 8020782:	e7ad      	b.n	80206e0 <__sflush_r+0x1c>
 8020784:	690f      	ldr	r7, [r1, #16]
 8020786:	2f00      	cmp	r7, #0
 8020788:	d0a9      	beq.n	80206de <__sflush_r+0x1a>
 802078a:	0793      	lsls	r3, r2, #30
 802078c:	680e      	ldr	r6, [r1, #0]
 802078e:	bf08      	it	eq
 8020790:	694b      	ldreq	r3, [r1, #20]
 8020792:	600f      	str	r7, [r1, #0]
 8020794:	bf18      	it	ne
 8020796:	2300      	movne	r3, #0
 8020798:	eba6 0807 	sub.w	r8, r6, r7
 802079c:	608b      	str	r3, [r1, #8]
 802079e:	f1b8 0f00 	cmp.w	r8, #0
 80207a2:	dd9c      	ble.n	80206de <__sflush_r+0x1a>
 80207a4:	6a21      	ldr	r1, [r4, #32]
 80207a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80207a8:	4643      	mov	r3, r8
 80207aa:	463a      	mov	r2, r7
 80207ac:	4628      	mov	r0, r5
 80207ae:	47b0      	blx	r6
 80207b0:	2800      	cmp	r0, #0
 80207b2:	dc06      	bgt.n	80207c2 <__sflush_r+0xfe>
 80207b4:	89a3      	ldrh	r3, [r4, #12]
 80207b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80207ba:	81a3      	strh	r3, [r4, #12]
 80207bc:	f04f 30ff 	mov.w	r0, #4294967295
 80207c0:	e78e      	b.n	80206e0 <__sflush_r+0x1c>
 80207c2:	4407      	add	r7, r0
 80207c4:	eba8 0800 	sub.w	r8, r8, r0
 80207c8:	e7e9      	b.n	802079e <__sflush_r+0xda>
 80207ca:	bf00      	nop
 80207cc:	20400001 	.word	0x20400001

080207d0 <_fflush_r>:
 80207d0:	b538      	push	{r3, r4, r5, lr}
 80207d2:	690b      	ldr	r3, [r1, #16]
 80207d4:	4605      	mov	r5, r0
 80207d6:	460c      	mov	r4, r1
 80207d8:	b913      	cbnz	r3, 80207e0 <_fflush_r+0x10>
 80207da:	2500      	movs	r5, #0
 80207dc:	4628      	mov	r0, r5
 80207de:	bd38      	pop	{r3, r4, r5, pc}
 80207e0:	b118      	cbz	r0, 80207ea <_fflush_r+0x1a>
 80207e2:	6983      	ldr	r3, [r0, #24]
 80207e4:	b90b      	cbnz	r3, 80207ea <_fflush_r+0x1a>
 80207e6:	f000 f887 	bl	80208f8 <__sinit>
 80207ea:	4b14      	ldr	r3, [pc, #80]	; (802083c <_fflush_r+0x6c>)
 80207ec:	429c      	cmp	r4, r3
 80207ee:	d11b      	bne.n	8020828 <_fflush_r+0x58>
 80207f0:	686c      	ldr	r4, [r5, #4]
 80207f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80207f6:	2b00      	cmp	r3, #0
 80207f8:	d0ef      	beq.n	80207da <_fflush_r+0xa>
 80207fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80207fc:	07d0      	lsls	r0, r2, #31
 80207fe:	d404      	bmi.n	802080a <_fflush_r+0x3a>
 8020800:	0599      	lsls	r1, r3, #22
 8020802:	d402      	bmi.n	802080a <_fflush_r+0x3a>
 8020804:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020806:	f000 f91a 	bl	8020a3e <__retarget_lock_acquire_recursive>
 802080a:	4628      	mov	r0, r5
 802080c:	4621      	mov	r1, r4
 802080e:	f7ff ff59 	bl	80206c4 <__sflush_r>
 8020812:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020814:	07da      	lsls	r2, r3, #31
 8020816:	4605      	mov	r5, r0
 8020818:	d4e0      	bmi.n	80207dc <_fflush_r+0xc>
 802081a:	89a3      	ldrh	r3, [r4, #12]
 802081c:	059b      	lsls	r3, r3, #22
 802081e:	d4dd      	bmi.n	80207dc <_fflush_r+0xc>
 8020820:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020822:	f000 f90d 	bl	8020a40 <__retarget_lock_release_recursive>
 8020826:	e7d9      	b.n	80207dc <_fflush_r+0xc>
 8020828:	4b05      	ldr	r3, [pc, #20]	; (8020840 <_fflush_r+0x70>)
 802082a:	429c      	cmp	r4, r3
 802082c:	d101      	bne.n	8020832 <_fflush_r+0x62>
 802082e:	68ac      	ldr	r4, [r5, #8]
 8020830:	e7df      	b.n	80207f2 <_fflush_r+0x22>
 8020832:	4b04      	ldr	r3, [pc, #16]	; (8020844 <_fflush_r+0x74>)
 8020834:	429c      	cmp	r4, r3
 8020836:	bf08      	it	eq
 8020838:	68ec      	ldreq	r4, [r5, #12]
 802083a:	e7da      	b.n	80207f2 <_fflush_r+0x22>
 802083c:	08022240 	.word	0x08022240
 8020840:	08022260 	.word	0x08022260
 8020844:	08022220 	.word	0x08022220

08020848 <std>:
 8020848:	2300      	movs	r3, #0
 802084a:	b510      	push	{r4, lr}
 802084c:	4604      	mov	r4, r0
 802084e:	e9c0 3300 	strd	r3, r3, [r0]
 8020852:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020856:	6083      	str	r3, [r0, #8]
 8020858:	8181      	strh	r1, [r0, #12]
 802085a:	6643      	str	r3, [r0, #100]	; 0x64
 802085c:	81c2      	strh	r2, [r0, #14]
 802085e:	6183      	str	r3, [r0, #24]
 8020860:	4619      	mov	r1, r3
 8020862:	2208      	movs	r2, #8
 8020864:	305c      	adds	r0, #92	; 0x5c
 8020866:	f7fe fadd 	bl	801ee24 <memset>
 802086a:	4b05      	ldr	r3, [pc, #20]	; (8020880 <std+0x38>)
 802086c:	6263      	str	r3, [r4, #36]	; 0x24
 802086e:	4b05      	ldr	r3, [pc, #20]	; (8020884 <std+0x3c>)
 8020870:	62a3      	str	r3, [r4, #40]	; 0x28
 8020872:	4b05      	ldr	r3, [pc, #20]	; (8020888 <std+0x40>)
 8020874:	62e3      	str	r3, [r4, #44]	; 0x2c
 8020876:	4b05      	ldr	r3, [pc, #20]	; (802088c <std+0x44>)
 8020878:	6224      	str	r4, [r4, #32]
 802087a:	6323      	str	r3, [r4, #48]	; 0x30
 802087c:	bd10      	pop	{r4, pc}
 802087e:	bf00      	nop
 8020880:	08021775 	.word	0x08021775
 8020884:	08021797 	.word	0x08021797
 8020888:	080217cf 	.word	0x080217cf
 802088c:	080217f3 	.word	0x080217f3

08020890 <_cleanup_r>:
 8020890:	4901      	ldr	r1, [pc, #4]	; (8020898 <_cleanup_r+0x8>)
 8020892:	f000 b8af 	b.w	80209f4 <_fwalk_reent>
 8020896:	bf00      	nop
 8020898:	080207d1 	.word	0x080207d1

0802089c <__sfmoreglue>:
 802089c:	b570      	push	{r4, r5, r6, lr}
 802089e:	2268      	movs	r2, #104	; 0x68
 80208a0:	1e4d      	subs	r5, r1, #1
 80208a2:	4355      	muls	r5, r2
 80208a4:	460e      	mov	r6, r1
 80208a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80208aa:	f000 fd3d 	bl	8021328 <_malloc_r>
 80208ae:	4604      	mov	r4, r0
 80208b0:	b140      	cbz	r0, 80208c4 <__sfmoreglue+0x28>
 80208b2:	2100      	movs	r1, #0
 80208b4:	e9c0 1600 	strd	r1, r6, [r0]
 80208b8:	300c      	adds	r0, #12
 80208ba:	60a0      	str	r0, [r4, #8]
 80208bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80208c0:	f7fe fab0 	bl	801ee24 <memset>
 80208c4:	4620      	mov	r0, r4
 80208c6:	bd70      	pop	{r4, r5, r6, pc}

080208c8 <__sfp_lock_acquire>:
 80208c8:	4801      	ldr	r0, [pc, #4]	; (80208d0 <__sfp_lock_acquire+0x8>)
 80208ca:	f000 b8b8 	b.w	8020a3e <__retarget_lock_acquire_recursive>
 80208ce:	bf00      	nop
 80208d0:	2000e0e1 	.word	0x2000e0e1

080208d4 <__sfp_lock_release>:
 80208d4:	4801      	ldr	r0, [pc, #4]	; (80208dc <__sfp_lock_release+0x8>)
 80208d6:	f000 b8b3 	b.w	8020a40 <__retarget_lock_release_recursive>
 80208da:	bf00      	nop
 80208dc:	2000e0e1 	.word	0x2000e0e1

080208e0 <__sinit_lock_acquire>:
 80208e0:	4801      	ldr	r0, [pc, #4]	; (80208e8 <__sinit_lock_acquire+0x8>)
 80208e2:	f000 b8ac 	b.w	8020a3e <__retarget_lock_acquire_recursive>
 80208e6:	bf00      	nop
 80208e8:	2000e0e2 	.word	0x2000e0e2

080208ec <__sinit_lock_release>:
 80208ec:	4801      	ldr	r0, [pc, #4]	; (80208f4 <__sinit_lock_release+0x8>)
 80208ee:	f000 b8a7 	b.w	8020a40 <__retarget_lock_release_recursive>
 80208f2:	bf00      	nop
 80208f4:	2000e0e2 	.word	0x2000e0e2

080208f8 <__sinit>:
 80208f8:	b510      	push	{r4, lr}
 80208fa:	4604      	mov	r4, r0
 80208fc:	f7ff fff0 	bl	80208e0 <__sinit_lock_acquire>
 8020900:	69a3      	ldr	r3, [r4, #24]
 8020902:	b11b      	cbz	r3, 802090c <__sinit+0x14>
 8020904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020908:	f7ff bff0 	b.w	80208ec <__sinit_lock_release>
 802090c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8020910:	6523      	str	r3, [r4, #80]	; 0x50
 8020912:	4b13      	ldr	r3, [pc, #76]	; (8020960 <__sinit+0x68>)
 8020914:	4a13      	ldr	r2, [pc, #76]	; (8020964 <__sinit+0x6c>)
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	62a2      	str	r2, [r4, #40]	; 0x28
 802091a:	42a3      	cmp	r3, r4
 802091c:	bf04      	itt	eq
 802091e:	2301      	moveq	r3, #1
 8020920:	61a3      	streq	r3, [r4, #24]
 8020922:	4620      	mov	r0, r4
 8020924:	f000 f820 	bl	8020968 <__sfp>
 8020928:	6060      	str	r0, [r4, #4]
 802092a:	4620      	mov	r0, r4
 802092c:	f000 f81c 	bl	8020968 <__sfp>
 8020930:	60a0      	str	r0, [r4, #8]
 8020932:	4620      	mov	r0, r4
 8020934:	f000 f818 	bl	8020968 <__sfp>
 8020938:	2200      	movs	r2, #0
 802093a:	60e0      	str	r0, [r4, #12]
 802093c:	2104      	movs	r1, #4
 802093e:	6860      	ldr	r0, [r4, #4]
 8020940:	f7ff ff82 	bl	8020848 <std>
 8020944:	68a0      	ldr	r0, [r4, #8]
 8020946:	2201      	movs	r2, #1
 8020948:	2109      	movs	r1, #9
 802094a:	f7ff ff7d 	bl	8020848 <std>
 802094e:	68e0      	ldr	r0, [r4, #12]
 8020950:	2202      	movs	r2, #2
 8020952:	2112      	movs	r1, #18
 8020954:	f7ff ff78 	bl	8020848 <std>
 8020958:	2301      	movs	r3, #1
 802095a:	61a3      	str	r3, [r4, #24]
 802095c:	e7d2      	b.n	8020904 <__sinit+0xc>
 802095e:	bf00      	nop
 8020960:	08022158 	.word	0x08022158
 8020964:	08020891 	.word	0x08020891

08020968 <__sfp>:
 8020968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802096a:	4607      	mov	r7, r0
 802096c:	f7ff ffac 	bl	80208c8 <__sfp_lock_acquire>
 8020970:	4b1e      	ldr	r3, [pc, #120]	; (80209ec <__sfp+0x84>)
 8020972:	681e      	ldr	r6, [r3, #0]
 8020974:	69b3      	ldr	r3, [r6, #24]
 8020976:	b913      	cbnz	r3, 802097e <__sfp+0x16>
 8020978:	4630      	mov	r0, r6
 802097a:	f7ff ffbd 	bl	80208f8 <__sinit>
 802097e:	3648      	adds	r6, #72	; 0x48
 8020980:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8020984:	3b01      	subs	r3, #1
 8020986:	d503      	bpl.n	8020990 <__sfp+0x28>
 8020988:	6833      	ldr	r3, [r6, #0]
 802098a:	b30b      	cbz	r3, 80209d0 <__sfp+0x68>
 802098c:	6836      	ldr	r6, [r6, #0]
 802098e:	e7f7      	b.n	8020980 <__sfp+0x18>
 8020990:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8020994:	b9d5      	cbnz	r5, 80209cc <__sfp+0x64>
 8020996:	4b16      	ldr	r3, [pc, #88]	; (80209f0 <__sfp+0x88>)
 8020998:	60e3      	str	r3, [r4, #12]
 802099a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802099e:	6665      	str	r5, [r4, #100]	; 0x64
 80209a0:	f000 f84c 	bl	8020a3c <__retarget_lock_init_recursive>
 80209a4:	f7ff ff96 	bl	80208d4 <__sfp_lock_release>
 80209a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80209ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80209b0:	6025      	str	r5, [r4, #0]
 80209b2:	61a5      	str	r5, [r4, #24]
 80209b4:	2208      	movs	r2, #8
 80209b6:	4629      	mov	r1, r5
 80209b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80209bc:	f7fe fa32 	bl	801ee24 <memset>
 80209c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80209c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80209c8:	4620      	mov	r0, r4
 80209ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80209cc:	3468      	adds	r4, #104	; 0x68
 80209ce:	e7d9      	b.n	8020984 <__sfp+0x1c>
 80209d0:	2104      	movs	r1, #4
 80209d2:	4638      	mov	r0, r7
 80209d4:	f7ff ff62 	bl	802089c <__sfmoreglue>
 80209d8:	4604      	mov	r4, r0
 80209da:	6030      	str	r0, [r6, #0]
 80209dc:	2800      	cmp	r0, #0
 80209de:	d1d5      	bne.n	802098c <__sfp+0x24>
 80209e0:	f7ff ff78 	bl	80208d4 <__sfp_lock_release>
 80209e4:	230c      	movs	r3, #12
 80209e6:	603b      	str	r3, [r7, #0]
 80209e8:	e7ee      	b.n	80209c8 <__sfp+0x60>
 80209ea:	bf00      	nop
 80209ec:	08022158 	.word	0x08022158
 80209f0:	ffff0001 	.word	0xffff0001

080209f4 <_fwalk_reent>:
 80209f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80209f8:	4606      	mov	r6, r0
 80209fa:	4688      	mov	r8, r1
 80209fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8020a00:	2700      	movs	r7, #0
 8020a02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020a06:	f1b9 0901 	subs.w	r9, r9, #1
 8020a0a:	d505      	bpl.n	8020a18 <_fwalk_reent+0x24>
 8020a0c:	6824      	ldr	r4, [r4, #0]
 8020a0e:	2c00      	cmp	r4, #0
 8020a10:	d1f7      	bne.n	8020a02 <_fwalk_reent+0xe>
 8020a12:	4638      	mov	r0, r7
 8020a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a18:	89ab      	ldrh	r3, [r5, #12]
 8020a1a:	2b01      	cmp	r3, #1
 8020a1c:	d907      	bls.n	8020a2e <_fwalk_reent+0x3a>
 8020a1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020a22:	3301      	adds	r3, #1
 8020a24:	d003      	beq.n	8020a2e <_fwalk_reent+0x3a>
 8020a26:	4629      	mov	r1, r5
 8020a28:	4630      	mov	r0, r6
 8020a2a:	47c0      	blx	r8
 8020a2c:	4307      	orrs	r7, r0
 8020a2e:	3568      	adds	r5, #104	; 0x68
 8020a30:	e7e9      	b.n	8020a06 <_fwalk_reent+0x12>
	...

08020a34 <_localeconv_r>:
 8020a34:	4800      	ldr	r0, [pc, #0]	; (8020a38 <_localeconv_r+0x4>)
 8020a36:	4770      	bx	lr
 8020a38:	20000180 	.word	0x20000180

08020a3c <__retarget_lock_init_recursive>:
 8020a3c:	4770      	bx	lr

08020a3e <__retarget_lock_acquire_recursive>:
 8020a3e:	4770      	bx	lr

08020a40 <__retarget_lock_release_recursive>:
 8020a40:	4770      	bx	lr

08020a42 <__swhatbuf_r>:
 8020a42:	b570      	push	{r4, r5, r6, lr}
 8020a44:	460e      	mov	r6, r1
 8020a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020a4a:	2900      	cmp	r1, #0
 8020a4c:	b096      	sub	sp, #88	; 0x58
 8020a4e:	4614      	mov	r4, r2
 8020a50:	461d      	mov	r5, r3
 8020a52:	da08      	bge.n	8020a66 <__swhatbuf_r+0x24>
 8020a54:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8020a58:	2200      	movs	r2, #0
 8020a5a:	602a      	str	r2, [r5, #0]
 8020a5c:	061a      	lsls	r2, r3, #24
 8020a5e:	d410      	bmi.n	8020a82 <__swhatbuf_r+0x40>
 8020a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8020a64:	e00e      	b.n	8020a84 <__swhatbuf_r+0x42>
 8020a66:	466a      	mov	r2, sp
 8020a68:	f000 ff1a 	bl	80218a0 <_fstat_r>
 8020a6c:	2800      	cmp	r0, #0
 8020a6e:	dbf1      	blt.n	8020a54 <__swhatbuf_r+0x12>
 8020a70:	9a01      	ldr	r2, [sp, #4]
 8020a72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8020a76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8020a7a:	425a      	negs	r2, r3
 8020a7c:	415a      	adcs	r2, r3
 8020a7e:	602a      	str	r2, [r5, #0]
 8020a80:	e7ee      	b.n	8020a60 <__swhatbuf_r+0x1e>
 8020a82:	2340      	movs	r3, #64	; 0x40
 8020a84:	2000      	movs	r0, #0
 8020a86:	6023      	str	r3, [r4, #0]
 8020a88:	b016      	add	sp, #88	; 0x58
 8020a8a:	bd70      	pop	{r4, r5, r6, pc}

08020a8c <__smakebuf_r>:
 8020a8c:	898b      	ldrh	r3, [r1, #12]
 8020a8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020a90:	079d      	lsls	r5, r3, #30
 8020a92:	4606      	mov	r6, r0
 8020a94:	460c      	mov	r4, r1
 8020a96:	d507      	bpl.n	8020aa8 <__smakebuf_r+0x1c>
 8020a98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8020a9c:	6023      	str	r3, [r4, #0]
 8020a9e:	6123      	str	r3, [r4, #16]
 8020aa0:	2301      	movs	r3, #1
 8020aa2:	6163      	str	r3, [r4, #20]
 8020aa4:	b002      	add	sp, #8
 8020aa6:	bd70      	pop	{r4, r5, r6, pc}
 8020aa8:	ab01      	add	r3, sp, #4
 8020aaa:	466a      	mov	r2, sp
 8020aac:	f7ff ffc9 	bl	8020a42 <__swhatbuf_r>
 8020ab0:	9900      	ldr	r1, [sp, #0]
 8020ab2:	4605      	mov	r5, r0
 8020ab4:	4630      	mov	r0, r6
 8020ab6:	f000 fc37 	bl	8021328 <_malloc_r>
 8020aba:	b948      	cbnz	r0, 8020ad0 <__smakebuf_r+0x44>
 8020abc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020ac0:	059a      	lsls	r2, r3, #22
 8020ac2:	d4ef      	bmi.n	8020aa4 <__smakebuf_r+0x18>
 8020ac4:	f023 0303 	bic.w	r3, r3, #3
 8020ac8:	f043 0302 	orr.w	r3, r3, #2
 8020acc:	81a3      	strh	r3, [r4, #12]
 8020ace:	e7e3      	b.n	8020a98 <__smakebuf_r+0xc>
 8020ad0:	4b0d      	ldr	r3, [pc, #52]	; (8020b08 <__smakebuf_r+0x7c>)
 8020ad2:	62b3      	str	r3, [r6, #40]	; 0x28
 8020ad4:	89a3      	ldrh	r3, [r4, #12]
 8020ad6:	6020      	str	r0, [r4, #0]
 8020ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8020adc:	81a3      	strh	r3, [r4, #12]
 8020ade:	9b00      	ldr	r3, [sp, #0]
 8020ae0:	6163      	str	r3, [r4, #20]
 8020ae2:	9b01      	ldr	r3, [sp, #4]
 8020ae4:	6120      	str	r0, [r4, #16]
 8020ae6:	b15b      	cbz	r3, 8020b00 <__smakebuf_r+0x74>
 8020ae8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020aec:	4630      	mov	r0, r6
 8020aee:	f000 fee9 	bl	80218c4 <_isatty_r>
 8020af2:	b128      	cbz	r0, 8020b00 <__smakebuf_r+0x74>
 8020af4:	89a3      	ldrh	r3, [r4, #12]
 8020af6:	f023 0303 	bic.w	r3, r3, #3
 8020afa:	f043 0301 	orr.w	r3, r3, #1
 8020afe:	81a3      	strh	r3, [r4, #12]
 8020b00:	89a0      	ldrh	r0, [r4, #12]
 8020b02:	4305      	orrs	r5, r0
 8020b04:	81a5      	strh	r5, [r4, #12]
 8020b06:	e7cd      	b.n	8020aa4 <__smakebuf_r+0x18>
 8020b08:	08020891 	.word	0x08020891

08020b0c <malloc>:
 8020b0c:	4b02      	ldr	r3, [pc, #8]	; (8020b18 <malloc+0xc>)
 8020b0e:	4601      	mov	r1, r0
 8020b10:	6818      	ldr	r0, [r3, #0]
 8020b12:	f000 bc09 	b.w	8021328 <_malloc_r>
 8020b16:	bf00      	nop
 8020b18:	2000002c 	.word	0x2000002c

08020b1c <_Balloc>:
 8020b1c:	b570      	push	{r4, r5, r6, lr}
 8020b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020b20:	4604      	mov	r4, r0
 8020b22:	460d      	mov	r5, r1
 8020b24:	b976      	cbnz	r6, 8020b44 <_Balloc+0x28>
 8020b26:	2010      	movs	r0, #16
 8020b28:	f7ff fff0 	bl	8020b0c <malloc>
 8020b2c:	4602      	mov	r2, r0
 8020b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8020b30:	b920      	cbnz	r0, 8020b3c <_Balloc+0x20>
 8020b32:	4b18      	ldr	r3, [pc, #96]	; (8020b94 <_Balloc+0x78>)
 8020b34:	4818      	ldr	r0, [pc, #96]	; (8020b98 <_Balloc+0x7c>)
 8020b36:	2166      	movs	r1, #102	; 0x66
 8020b38:	f000 fe72 	bl	8021820 <__assert_func>
 8020b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020b40:	6006      	str	r6, [r0, #0]
 8020b42:	60c6      	str	r6, [r0, #12]
 8020b44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8020b46:	68f3      	ldr	r3, [r6, #12]
 8020b48:	b183      	cbz	r3, 8020b6c <_Balloc+0x50>
 8020b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b4c:	68db      	ldr	r3, [r3, #12]
 8020b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8020b52:	b9b8      	cbnz	r0, 8020b84 <_Balloc+0x68>
 8020b54:	2101      	movs	r1, #1
 8020b56:	fa01 f605 	lsl.w	r6, r1, r5
 8020b5a:	1d72      	adds	r2, r6, #5
 8020b5c:	0092      	lsls	r2, r2, #2
 8020b5e:	4620      	mov	r0, r4
 8020b60:	f000 fb60 	bl	8021224 <_calloc_r>
 8020b64:	b160      	cbz	r0, 8020b80 <_Balloc+0x64>
 8020b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8020b6a:	e00e      	b.n	8020b8a <_Balloc+0x6e>
 8020b6c:	2221      	movs	r2, #33	; 0x21
 8020b6e:	2104      	movs	r1, #4
 8020b70:	4620      	mov	r0, r4
 8020b72:	f000 fb57 	bl	8021224 <_calloc_r>
 8020b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020b78:	60f0      	str	r0, [r6, #12]
 8020b7a:	68db      	ldr	r3, [r3, #12]
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d1e4      	bne.n	8020b4a <_Balloc+0x2e>
 8020b80:	2000      	movs	r0, #0
 8020b82:	bd70      	pop	{r4, r5, r6, pc}
 8020b84:	6802      	ldr	r2, [r0, #0]
 8020b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8020b8a:	2300      	movs	r3, #0
 8020b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8020b90:	e7f7      	b.n	8020b82 <_Balloc+0x66>
 8020b92:	bf00      	nop
 8020b94:	0802219d 	.word	0x0802219d
 8020b98:	08022280 	.word	0x08022280

08020b9c <_Bfree>:
 8020b9c:	b570      	push	{r4, r5, r6, lr}
 8020b9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8020ba0:	4605      	mov	r5, r0
 8020ba2:	460c      	mov	r4, r1
 8020ba4:	b976      	cbnz	r6, 8020bc4 <_Bfree+0x28>
 8020ba6:	2010      	movs	r0, #16
 8020ba8:	f7ff ffb0 	bl	8020b0c <malloc>
 8020bac:	4602      	mov	r2, r0
 8020bae:	6268      	str	r0, [r5, #36]	; 0x24
 8020bb0:	b920      	cbnz	r0, 8020bbc <_Bfree+0x20>
 8020bb2:	4b09      	ldr	r3, [pc, #36]	; (8020bd8 <_Bfree+0x3c>)
 8020bb4:	4809      	ldr	r0, [pc, #36]	; (8020bdc <_Bfree+0x40>)
 8020bb6:	218a      	movs	r1, #138	; 0x8a
 8020bb8:	f000 fe32 	bl	8021820 <__assert_func>
 8020bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8020bc0:	6006      	str	r6, [r0, #0]
 8020bc2:	60c6      	str	r6, [r0, #12]
 8020bc4:	b13c      	cbz	r4, 8020bd6 <_Bfree+0x3a>
 8020bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8020bc8:	6862      	ldr	r2, [r4, #4]
 8020bca:	68db      	ldr	r3, [r3, #12]
 8020bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8020bd0:	6021      	str	r1, [r4, #0]
 8020bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8020bd6:	bd70      	pop	{r4, r5, r6, pc}
 8020bd8:	0802219d 	.word	0x0802219d
 8020bdc:	08022280 	.word	0x08022280

08020be0 <__multadd>:
 8020be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020be4:	690d      	ldr	r5, [r1, #16]
 8020be6:	4607      	mov	r7, r0
 8020be8:	460c      	mov	r4, r1
 8020bea:	461e      	mov	r6, r3
 8020bec:	f101 0c14 	add.w	ip, r1, #20
 8020bf0:	2000      	movs	r0, #0
 8020bf2:	f8dc 3000 	ldr.w	r3, [ip]
 8020bf6:	b299      	uxth	r1, r3
 8020bf8:	fb02 6101 	mla	r1, r2, r1, r6
 8020bfc:	0c1e      	lsrs	r6, r3, #16
 8020bfe:	0c0b      	lsrs	r3, r1, #16
 8020c00:	fb02 3306 	mla	r3, r2, r6, r3
 8020c04:	b289      	uxth	r1, r1
 8020c06:	3001      	adds	r0, #1
 8020c08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8020c0c:	4285      	cmp	r5, r0
 8020c0e:	f84c 1b04 	str.w	r1, [ip], #4
 8020c12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8020c16:	dcec      	bgt.n	8020bf2 <__multadd+0x12>
 8020c18:	b30e      	cbz	r6, 8020c5e <__multadd+0x7e>
 8020c1a:	68a3      	ldr	r3, [r4, #8]
 8020c1c:	42ab      	cmp	r3, r5
 8020c1e:	dc19      	bgt.n	8020c54 <__multadd+0x74>
 8020c20:	6861      	ldr	r1, [r4, #4]
 8020c22:	4638      	mov	r0, r7
 8020c24:	3101      	adds	r1, #1
 8020c26:	f7ff ff79 	bl	8020b1c <_Balloc>
 8020c2a:	4680      	mov	r8, r0
 8020c2c:	b928      	cbnz	r0, 8020c3a <__multadd+0x5a>
 8020c2e:	4602      	mov	r2, r0
 8020c30:	4b0c      	ldr	r3, [pc, #48]	; (8020c64 <__multadd+0x84>)
 8020c32:	480d      	ldr	r0, [pc, #52]	; (8020c68 <__multadd+0x88>)
 8020c34:	21b5      	movs	r1, #181	; 0xb5
 8020c36:	f000 fdf3 	bl	8021820 <__assert_func>
 8020c3a:	6922      	ldr	r2, [r4, #16]
 8020c3c:	3202      	adds	r2, #2
 8020c3e:	f104 010c 	add.w	r1, r4, #12
 8020c42:	0092      	lsls	r2, r2, #2
 8020c44:	300c      	adds	r0, #12
 8020c46:	f7fe f8df 	bl	801ee08 <memcpy>
 8020c4a:	4621      	mov	r1, r4
 8020c4c:	4638      	mov	r0, r7
 8020c4e:	f7ff ffa5 	bl	8020b9c <_Bfree>
 8020c52:	4644      	mov	r4, r8
 8020c54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8020c58:	3501      	adds	r5, #1
 8020c5a:	615e      	str	r6, [r3, #20]
 8020c5c:	6125      	str	r5, [r4, #16]
 8020c5e:	4620      	mov	r0, r4
 8020c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020c64:	0802220f 	.word	0x0802220f
 8020c68:	08022280 	.word	0x08022280

08020c6c <__hi0bits>:
 8020c6c:	0c03      	lsrs	r3, r0, #16
 8020c6e:	041b      	lsls	r3, r3, #16
 8020c70:	b9d3      	cbnz	r3, 8020ca8 <__hi0bits+0x3c>
 8020c72:	0400      	lsls	r0, r0, #16
 8020c74:	2310      	movs	r3, #16
 8020c76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8020c7a:	bf04      	itt	eq
 8020c7c:	0200      	lsleq	r0, r0, #8
 8020c7e:	3308      	addeq	r3, #8
 8020c80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8020c84:	bf04      	itt	eq
 8020c86:	0100      	lsleq	r0, r0, #4
 8020c88:	3304      	addeq	r3, #4
 8020c8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8020c8e:	bf04      	itt	eq
 8020c90:	0080      	lsleq	r0, r0, #2
 8020c92:	3302      	addeq	r3, #2
 8020c94:	2800      	cmp	r0, #0
 8020c96:	db05      	blt.n	8020ca4 <__hi0bits+0x38>
 8020c98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8020c9c:	f103 0301 	add.w	r3, r3, #1
 8020ca0:	bf08      	it	eq
 8020ca2:	2320      	moveq	r3, #32
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	4770      	bx	lr
 8020ca8:	2300      	movs	r3, #0
 8020caa:	e7e4      	b.n	8020c76 <__hi0bits+0xa>

08020cac <__lo0bits>:
 8020cac:	6803      	ldr	r3, [r0, #0]
 8020cae:	f013 0207 	ands.w	r2, r3, #7
 8020cb2:	4601      	mov	r1, r0
 8020cb4:	d00b      	beq.n	8020cce <__lo0bits+0x22>
 8020cb6:	07da      	lsls	r2, r3, #31
 8020cb8:	d423      	bmi.n	8020d02 <__lo0bits+0x56>
 8020cba:	0798      	lsls	r0, r3, #30
 8020cbc:	bf49      	itett	mi
 8020cbe:	085b      	lsrmi	r3, r3, #1
 8020cc0:	089b      	lsrpl	r3, r3, #2
 8020cc2:	2001      	movmi	r0, #1
 8020cc4:	600b      	strmi	r3, [r1, #0]
 8020cc6:	bf5c      	itt	pl
 8020cc8:	600b      	strpl	r3, [r1, #0]
 8020cca:	2002      	movpl	r0, #2
 8020ccc:	4770      	bx	lr
 8020cce:	b298      	uxth	r0, r3
 8020cd0:	b9a8      	cbnz	r0, 8020cfe <__lo0bits+0x52>
 8020cd2:	0c1b      	lsrs	r3, r3, #16
 8020cd4:	2010      	movs	r0, #16
 8020cd6:	b2da      	uxtb	r2, r3
 8020cd8:	b90a      	cbnz	r2, 8020cde <__lo0bits+0x32>
 8020cda:	3008      	adds	r0, #8
 8020cdc:	0a1b      	lsrs	r3, r3, #8
 8020cde:	071a      	lsls	r2, r3, #28
 8020ce0:	bf04      	itt	eq
 8020ce2:	091b      	lsreq	r3, r3, #4
 8020ce4:	3004      	addeq	r0, #4
 8020ce6:	079a      	lsls	r2, r3, #30
 8020ce8:	bf04      	itt	eq
 8020cea:	089b      	lsreq	r3, r3, #2
 8020cec:	3002      	addeq	r0, #2
 8020cee:	07da      	lsls	r2, r3, #31
 8020cf0:	d403      	bmi.n	8020cfa <__lo0bits+0x4e>
 8020cf2:	085b      	lsrs	r3, r3, #1
 8020cf4:	f100 0001 	add.w	r0, r0, #1
 8020cf8:	d005      	beq.n	8020d06 <__lo0bits+0x5a>
 8020cfa:	600b      	str	r3, [r1, #0]
 8020cfc:	4770      	bx	lr
 8020cfe:	4610      	mov	r0, r2
 8020d00:	e7e9      	b.n	8020cd6 <__lo0bits+0x2a>
 8020d02:	2000      	movs	r0, #0
 8020d04:	4770      	bx	lr
 8020d06:	2020      	movs	r0, #32
 8020d08:	4770      	bx	lr
	...

08020d0c <__i2b>:
 8020d0c:	b510      	push	{r4, lr}
 8020d0e:	460c      	mov	r4, r1
 8020d10:	2101      	movs	r1, #1
 8020d12:	f7ff ff03 	bl	8020b1c <_Balloc>
 8020d16:	4602      	mov	r2, r0
 8020d18:	b928      	cbnz	r0, 8020d26 <__i2b+0x1a>
 8020d1a:	4b05      	ldr	r3, [pc, #20]	; (8020d30 <__i2b+0x24>)
 8020d1c:	4805      	ldr	r0, [pc, #20]	; (8020d34 <__i2b+0x28>)
 8020d1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8020d22:	f000 fd7d 	bl	8021820 <__assert_func>
 8020d26:	2301      	movs	r3, #1
 8020d28:	6144      	str	r4, [r0, #20]
 8020d2a:	6103      	str	r3, [r0, #16]
 8020d2c:	bd10      	pop	{r4, pc}
 8020d2e:	bf00      	nop
 8020d30:	0802220f 	.word	0x0802220f
 8020d34:	08022280 	.word	0x08022280

08020d38 <__multiply>:
 8020d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d3c:	4691      	mov	r9, r2
 8020d3e:	690a      	ldr	r2, [r1, #16]
 8020d40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8020d44:	429a      	cmp	r2, r3
 8020d46:	bfb8      	it	lt
 8020d48:	460b      	movlt	r3, r1
 8020d4a:	460c      	mov	r4, r1
 8020d4c:	bfbc      	itt	lt
 8020d4e:	464c      	movlt	r4, r9
 8020d50:	4699      	movlt	r9, r3
 8020d52:	6927      	ldr	r7, [r4, #16]
 8020d54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8020d58:	68a3      	ldr	r3, [r4, #8]
 8020d5a:	6861      	ldr	r1, [r4, #4]
 8020d5c:	eb07 060a 	add.w	r6, r7, sl
 8020d60:	42b3      	cmp	r3, r6
 8020d62:	b085      	sub	sp, #20
 8020d64:	bfb8      	it	lt
 8020d66:	3101      	addlt	r1, #1
 8020d68:	f7ff fed8 	bl	8020b1c <_Balloc>
 8020d6c:	b930      	cbnz	r0, 8020d7c <__multiply+0x44>
 8020d6e:	4602      	mov	r2, r0
 8020d70:	4b44      	ldr	r3, [pc, #272]	; (8020e84 <__multiply+0x14c>)
 8020d72:	4845      	ldr	r0, [pc, #276]	; (8020e88 <__multiply+0x150>)
 8020d74:	f240 115d 	movw	r1, #349	; 0x15d
 8020d78:	f000 fd52 	bl	8021820 <__assert_func>
 8020d7c:	f100 0514 	add.w	r5, r0, #20
 8020d80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8020d84:	462b      	mov	r3, r5
 8020d86:	2200      	movs	r2, #0
 8020d88:	4543      	cmp	r3, r8
 8020d8a:	d321      	bcc.n	8020dd0 <__multiply+0x98>
 8020d8c:	f104 0314 	add.w	r3, r4, #20
 8020d90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8020d94:	f109 0314 	add.w	r3, r9, #20
 8020d98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8020d9c:	9202      	str	r2, [sp, #8]
 8020d9e:	1b3a      	subs	r2, r7, r4
 8020da0:	3a15      	subs	r2, #21
 8020da2:	f022 0203 	bic.w	r2, r2, #3
 8020da6:	3204      	adds	r2, #4
 8020da8:	f104 0115 	add.w	r1, r4, #21
 8020dac:	428f      	cmp	r7, r1
 8020dae:	bf38      	it	cc
 8020db0:	2204      	movcc	r2, #4
 8020db2:	9201      	str	r2, [sp, #4]
 8020db4:	9a02      	ldr	r2, [sp, #8]
 8020db6:	9303      	str	r3, [sp, #12]
 8020db8:	429a      	cmp	r2, r3
 8020dba:	d80c      	bhi.n	8020dd6 <__multiply+0x9e>
 8020dbc:	2e00      	cmp	r6, #0
 8020dbe:	dd03      	ble.n	8020dc8 <__multiply+0x90>
 8020dc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	d05a      	beq.n	8020e7e <__multiply+0x146>
 8020dc8:	6106      	str	r6, [r0, #16]
 8020dca:	b005      	add	sp, #20
 8020dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dd0:	f843 2b04 	str.w	r2, [r3], #4
 8020dd4:	e7d8      	b.n	8020d88 <__multiply+0x50>
 8020dd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8020dda:	f1ba 0f00 	cmp.w	sl, #0
 8020dde:	d024      	beq.n	8020e2a <__multiply+0xf2>
 8020de0:	f104 0e14 	add.w	lr, r4, #20
 8020de4:	46a9      	mov	r9, r5
 8020de6:	f04f 0c00 	mov.w	ip, #0
 8020dea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8020dee:	f8d9 1000 	ldr.w	r1, [r9]
 8020df2:	fa1f fb82 	uxth.w	fp, r2
 8020df6:	b289      	uxth	r1, r1
 8020df8:	fb0a 110b 	mla	r1, sl, fp, r1
 8020dfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8020e00:	f8d9 2000 	ldr.w	r2, [r9]
 8020e04:	4461      	add	r1, ip
 8020e06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020e0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8020e0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8020e12:	b289      	uxth	r1, r1
 8020e14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8020e18:	4577      	cmp	r7, lr
 8020e1a:	f849 1b04 	str.w	r1, [r9], #4
 8020e1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8020e22:	d8e2      	bhi.n	8020dea <__multiply+0xb2>
 8020e24:	9a01      	ldr	r2, [sp, #4]
 8020e26:	f845 c002 	str.w	ip, [r5, r2]
 8020e2a:	9a03      	ldr	r2, [sp, #12]
 8020e2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8020e30:	3304      	adds	r3, #4
 8020e32:	f1b9 0f00 	cmp.w	r9, #0
 8020e36:	d020      	beq.n	8020e7a <__multiply+0x142>
 8020e38:	6829      	ldr	r1, [r5, #0]
 8020e3a:	f104 0c14 	add.w	ip, r4, #20
 8020e3e:	46ae      	mov	lr, r5
 8020e40:	f04f 0a00 	mov.w	sl, #0
 8020e44:	f8bc b000 	ldrh.w	fp, [ip]
 8020e48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8020e4c:	fb09 220b 	mla	r2, r9, fp, r2
 8020e50:	4492      	add	sl, r2
 8020e52:	b289      	uxth	r1, r1
 8020e54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8020e58:	f84e 1b04 	str.w	r1, [lr], #4
 8020e5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8020e60:	f8be 1000 	ldrh.w	r1, [lr]
 8020e64:	0c12      	lsrs	r2, r2, #16
 8020e66:	fb09 1102 	mla	r1, r9, r2, r1
 8020e6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8020e6e:	4567      	cmp	r7, ip
 8020e70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8020e74:	d8e6      	bhi.n	8020e44 <__multiply+0x10c>
 8020e76:	9a01      	ldr	r2, [sp, #4]
 8020e78:	50a9      	str	r1, [r5, r2]
 8020e7a:	3504      	adds	r5, #4
 8020e7c:	e79a      	b.n	8020db4 <__multiply+0x7c>
 8020e7e:	3e01      	subs	r6, #1
 8020e80:	e79c      	b.n	8020dbc <__multiply+0x84>
 8020e82:	bf00      	nop
 8020e84:	0802220f 	.word	0x0802220f
 8020e88:	08022280 	.word	0x08022280

08020e8c <__pow5mult>:
 8020e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e90:	4615      	mov	r5, r2
 8020e92:	f012 0203 	ands.w	r2, r2, #3
 8020e96:	4606      	mov	r6, r0
 8020e98:	460f      	mov	r7, r1
 8020e9a:	d007      	beq.n	8020eac <__pow5mult+0x20>
 8020e9c:	4c25      	ldr	r4, [pc, #148]	; (8020f34 <__pow5mult+0xa8>)
 8020e9e:	3a01      	subs	r2, #1
 8020ea0:	2300      	movs	r3, #0
 8020ea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8020ea6:	f7ff fe9b 	bl	8020be0 <__multadd>
 8020eaa:	4607      	mov	r7, r0
 8020eac:	10ad      	asrs	r5, r5, #2
 8020eae:	d03d      	beq.n	8020f2c <__pow5mult+0xa0>
 8020eb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8020eb2:	b97c      	cbnz	r4, 8020ed4 <__pow5mult+0x48>
 8020eb4:	2010      	movs	r0, #16
 8020eb6:	f7ff fe29 	bl	8020b0c <malloc>
 8020eba:	4602      	mov	r2, r0
 8020ebc:	6270      	str	r0, [r6, #36]	; 0x24
 8020ebe:	b928      	cbnz	r0, 8020ecc <__pow5mult+0x40>
 8020ec0:	4b1d      	ldr	r3, [pc, #116]	; (8020f38 <__pow5mult+0xac>)
 8020ec2:	481e      	ldr	r0, [pc, #120]	; (8020f3c <__pow5mult+0xb0>)
 8020ec4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8020ec8:	f000 fcaa 	bl	8021820 <__assert_func>
 8020ecc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8020ed0:	6004      	str	r4, [r0, #0]
 8020ed2:	60c4      	str	r4, [r0, #12]
 8020ed4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8020ed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8020edc:	b94c      	cbnz	r4, 8020ef2 <__pow5mult+0x66>
 8020ede:	f240 2171 	movw	r1, #625	; 0x271
 8020ee2:	4630      	mov	r0, r6
 8020ee4:	f7ff ff12 	bl	8020d0c <__i2b>
 8020ee8:	2300      	movs	r3, #0
 8020eea:	f8c8 0008 	str.w	r0, [r8, #8]
 8020eee:	4604      	mov	r4, r0
 8020ef0:	6003      	str	r3, [r0, #0]
 8020ef2:	f04f 0900 	mov.w	r9, #0
 8020ef6:	07eb      	lsls	r3, r5, #31
 8020ef8:	d50a      	bpl.n	8020f10 <__pow5mult+0x84>
 8020efa:	4639      	mov	r1, r7
 8020efc:	4622      	mov	r2, r4
 8020efe:	4630      	mov	r0, r6
 8020f00:	f7ff ff1a 	bl	8020d38 <__multiply>
 8020f04:	4639      	mov	r1, r7
 8020f06:	4680      	mov	r8, r0
 8020f08:	4630      	mov	r0, r6
 8020f0a:	f7ff fe47 	bl	8020b9c <_Bfree>
 8020f0e:	4647      	mov	r7, r8
 8020f10:	106d      	asrs	r5, r5, #1
 8020f12:	d00b      	beq.n	8020f2c <__pow5mult+0xa0>
 8020f14:	6820      	ldr	r0, [r4, #0]
 8020f16:	b938      	cbnz	r0, 8020f28 <__pow5mult+0x9c>
 8020f18:	4622      	mov	r2, r4
 8020f1a:	4621      	mov	r1, r4
 8020f1c:	4630      	mov	r0, r6
 8020f1e:	f7ff ff0b 	bl	8020d38 <__multiply>
 8020f22:	6020      	str	r0, [r4, #0]
 8020f24:	f8c0 9000 	str.w	r9, [r0]
 8020f28:	4604      	mov	r4, r0
 8020f2a:	e7e4      	b.n	8020ef6 <__pow5mult+0x6a>
 8020f2c:	4638      	mov	r0, r7
 8020f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f32:	bf00      	nop
 8020f34:	080223d0 	.word	0x080223d0
 8020f38:	0802219d 	.word	0x0802219d
 8020f3c:	08022280 	.word	0x08022280

08020f40 <__lshift>:
 8020f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f44:	460c      	mov	r4, r1
 8020f46:	6849      	ldr	r1, [r1, #4]
 8020f48:	6923      	ldr	r3, [r4, #16]
 8020f4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8020f4e:	68a3      	ldr	r3, [r4, #8]
 8020f50:	4607      	mov	r7, r0
 8020f52:	4691      	mov	r9, r2
 8020f54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8020f58:	f108 0601 	add.w	r6, r8, #1
 8020f5c:	42b3      	cmp	r3, r6
 8020f5e:	db0b      	blt.n	8020f78 <__lshift+0x38>
 8020f60:	4638      	mov	r0, r7
 8020f62:	f7ff fddb 	bl	8020b1c <_Balloc>
 8020f66:	4605      	mov	r5, r0
 8020f68:	b948      	cbnz	r0, 8020f7e <__lshift+0x3e>
 8020f6a:	4602      	mov	r2, r0
 8020f6c:	4b2a      	ldr	r3, [pc, #168]	; (8021018 <__lshift+0xd8>)
 8020f6e:	482b      	ldr	r0, [pc, #172]	; (802101c <__lshift+0xdc>)
 8020f70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8020f74:	f000 fc54 	bl	8021820 <__assert_func>
 8020f78:	3101      	adds	r1, #1
 8020f7a:	005b      	lsls	r3, r3, #1
 8020f7c:	e7ee      	b.n	8020f5c <__lshift+0x1c>
 8020f7e:	2300      	movs	r3, #0
 8020f80:	f100 0114 	add.w	r1, r0, #20
 8020f84:	f100 0210 	add.w	r2, r0, #16
 8020f88:	4618      	mov	r0, r3
 8020f8a:	4553      	cmp	r3, sl
 8020f8c:	db37      	blt.n	8020ffe <__lshift+0xbe>
 8020f8e:	6920      	ldr	r0, [r4, #16]
 8020f90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8020f94:	f104 0314 	add.w	r3, r4, #20
 8020f98:	f019 091f 	ands.w	r9, r9, #31
 8020f9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8020fa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8020fa4:	d02f      	beq.n	8021006 <__lshift+0xc6>
 8020fa6:	f1c9 0e20 	rsb	lr, r9, #32
 8020faa:	468a      	mov	sl, r1
 8020fac:	f04f 0c00 	mov.w	ip, #0
 8020fb0:	681a      	ldr	r2, [r3, #0]
 8020fb2:	fa02 f209 	lsl.w	r2, r2, r9
 8020fb6:	ea42 020c 	orr.w	r2, r2, ip
 8020fba:	f84a 2b04 	str.w	r2, [sl], #4
 8020fbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8020fc2:	4298      	cmp	r0, r3
 8020fc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8020fc8:	d8f2      	bhi.n	8020fb0 <__lshift+0x70>
 8020fca:	1b03      	subs	r3, r0, r4
 8020fcc:	3b15      	subs	r3, #21
 8020fce:	f023 0303 	bic.w	r3, r3, #3
 8020fd2:	3304      	adds	r3, #4
 8020fd4:	f104 0215 	add.w	r2, r4, #21
 8020fd8:	4290      	cmp	r0, r2
 8020fda:	bf38      	it	cc
 8020fdc:	2304      	movcc	r3, #4
 8020fde:	f841 c003 	str.w	ip, [r1, r3]
 8020fe2:	f1bc 0f00 	cmp.w	ip, #0
 8020fe6:	d001      	beq.n	8020fec <__lshift+0xac>
 8020fe8:	f108 0602 	add.w	r6, r8, #2
 8020fec:	3e01      	subs	r6, #1
 8020fee:	4638      	mov	r0, r7
 8020ff0:	612e      	str	r6, [r5, #16]
 8020ff2:	4621      	mov	r1, r4
 8020ff4:	f7ff fdd2 	bl	8020b9c <_Bfree>
 8020ff8:	4628      	mov	r0, r5
 8020ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020ffe:	f842 0f04 	str.w	r0, [r2, #4]!
 8021002:	3301      	adds	r3, #1
 8021004:	e7c1      	b.n	8020f8a <__lshift+0x4a>
 8021006:	3904      	subs	r1, #4
 8021008:	f853 2b04 	ldr.w	r2, [r3], #4
 802100c:	f841 2f04 	str.w	r2, [r1, #4]!
 8021010:	4298      	cmp	r0, r3
 8021012:	d8f9      	bhi.n	8021008 <__lshift+0xc8>
 8021014:	e7ea      	b.n	8020fec <__lshift+0xac>
 8021016:	bf00      	nop
 8021018:	0802220f 	.word	0x0802220f
 802101c:	08022280 	.word	0x08022280

08021020 <__mcmp>:
 8021020:	b530      	push	{r4, r5, lr}
 8021022:	6902      	ldr	r2, [r0, #16]
 8021024:	690c      	ldr	r4, [r1, #16]
 8021026:	1b12      	subs	r2, r2, r4
 8021028:	d10e      	bne.n	8021048 <__mcmp+0x28>
 802102a:	f100 0314 	add.w	r3, r0, #20
 802102e:	3114      	adds	r1, #20
 8021030:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021034:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021038:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802103c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021040:	42a5      	cmp	r5, r4
 8021042:	d003      	beq.n	802104c <__mcmp+0x2c>
 8021044:	d305      	bcc.n	8021052 <__mcmp+0x32>
 8021046:	2201      	movs	r2, #1
 8021048:	4610      	mov	r0, r2
 802104a:	bd30      	pop	{r4, r5, pc}
 802104c:	4283      	cmp	r3, r0
 802104e:	d3f3      	bcc.n	8021038 <__mcmp+0x18>
 8021050:	e7fa      	b.n	8021048 <__mcmp+0x28>
 8021052:	f04f 32ff 	mov.w	r2, #4294967295
 8021056:	e7f7      	b.n	8021048 <__mcmp+0x28>

08021058 <__mdiff>:
 8021058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802105c:	460c      	mov	r4, r1
 802105e:	4606      	mov	r6, r0
 8021060:	4611      	mov	r1, r2
 8021062:	4620      	mov	r0, r4
 8021064:	4690      	mov	r8, r2
 8021066:	f7ff ffdb 	bl	8021020 <__mcmp>
 802106a:	1e05      	subs	r5, r0, #0
 802106c:	d110      	bne.n	8021090 <__mdiff+0x38>
 802106e:	4629      	mov	r1, r5
 8021070:	4630      	mov	r0, r6
 8021072:	f7ff fd53 	bl	8020b1c <_Balloc>
 8021076:	b930      	cbnz	r0, 8021086 <__mdiff+0x2e>
 8021078:	4b3a      	ldr	r3, [pc, #232]	; (8021164 <__mdiff+0x10c>)
 802107a:	4602      	mov	r2, r0
 802107c:	f240 2132 	movw	r1, #562	; 0x232
 8021080:	4839      	ldr	r0, [pc, #228]	; (8021168 <__mdiff+0x110>)
 8021082:	f000 fbcd 	bl	8021820 <__assert_func>
 8021086:	2301      	movs	r3, #1
 8021088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802108c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021090:	bfa4      	itt	ge
 8021092:	4643      	movge	r3, r8
 8021094:	46a0      	movge	r8, r4
 8021096:	4630      	mov	r0, r6
 8021098:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802109c:	bfa6      	itte	ge
 802109e:	461c      	movge	r4, r3
 80210a0:	2500      	movge	r5, #0
 80210a2:	2501      	movlt	r5, #1
 80210a4:	f7ff fd3a 	bl	8020b1c <_Balloc>
 80210a8:	b920      	cbnz	r0, 80210b4 <__mdiff+0x5c>
 80210aa:	4b2e      	ldr	r3, [pc, #184]	; (8021164 <__mdiff+0x10c>)
 80210ac:	4602      	mov	r2, r0
 80210ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80210b2:	e7e5      	b.n	8021080 <__mdiff+0x28>
 80210b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80210b8:	6926      	ldr	r6, [r4, #16]
 80210ba:	60c5      	str	r5, [r0, #12]
 80210bc:	f104 0914 	add.w	r9, r4, #20
 80210c0:	f108 0514 	add.w	r5, r8, #20
 80210c4:	f100 0e14 	add.w	lr, r0, #20
 80210c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80210cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80210d0:	f108 0210 	add.w	r2, r8, #16
 80210d4:	46f2      	mov	sl, lr
 80210d6:	2100      	movs	r1, #0
 80210d8:	f859 3b04 	ldr.w	r3, [r9], #4
 80210dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80210e0:	fa1f f883 	uxth.w	r8, r3
 80210e4:	fa11 f18b 	uxtah	r1, r1, fp
 80210e8:	0c1b      	lsrs	r3, r3, #16
 80210ea:	eba1 0808 	sub.w	r8, r1, r8
 80210ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80210f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80210f6:	fa1f f888 	uxth.w	r8, r8
 80210fa:	1419      	asrs	r1, r3, #16
 80210fc:	454e      	cmp	r6, r9
 80210fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021102:	f84a 3b04 	str.w	r3, [sl], #4
 8021106:	d8e7      	bhi.n	80210d8 <__mdiff+0x80>
 8021108:	1b33      	subs	r3, r6, r4
 802110a:	3b15      	subs	r3, #21
 802110c:	f023 0303 	bic.w	r3, r3, #3
 8021110:	3304      	adds	r3, #4
 8021112:	3415      	adds	r4, #21
 8021114:	42a6      	cmp	r6, r4
 8021116:	bf38      	it	cc
 8021118:	2304      	movcc	r3, #4
 802111a:	441d      	add	r5, r3
 802111c:	4473      	add	r3, lr
 802111e:	469e      	mov	lr, r3
 8021120:	462e      	mov	r6, r5
 8021122:	4566      	cmp	r6, ip
 8021124:	d30e      	bcc.n	8021144 <__mdiff+0xec>
 8021126:	f10c 0203 	add.w	r2, ip, #3
 802112a:	1b52      	subs	r2, r2, r5
 802112c:	f022 0203 	bic.w	r2, r2, #3
 8021130:	3d03      	subs	r5, #3
 8021132:	45ac      	cmp	ip, r5
 8021134:	bf38      	it	cc
 8021136:	2200      	movcc	r2, #0
 8021138:	441a      	add	r2, r3
 802113a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802113e:	b17b      	cbz	r3, 8021160 <__mdiff+0x108>
 8021140:	6107      	str	r7, [r0, #16]
 8021142:	e7a3      	b.n	802108c <__mdiff+0x34>
 8021144:	f856 8b04 	ldr.w	r8, [r6], #4
 8021148:	fa11 f288 	uxtah	r2, r1, r8
 802114c:	1414      	asrs	r4, r2, #16
 802114e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8021152:	b292      	uxth	r2, r2
 8021154:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8021158:	f84e 2b04 	str.w	r2, [lr], #4
 802115c:	1421      	asrs	r1, r4, #16
 802115e:	e7e0      	b.n	8021122 <__mdiff+0xca>
 8021160:	3f01      	subs	r7, #1
 8021162:	e7ea      	b.n	802113a <__mdiff+0xe2>
 8021164:	0802220f 	.word	0x0802220f
 8021168:	08022280 	.word	0x08022280

0802116c <__d2b>:
 802116c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8021170:	4689      	mov	r9, r1
 8021172:	2101      	movs	r1, #1
 8021174:	ec57 6b10 	vmov	r6, r7, d0
 8021178:	4690      	mov	r8, r2
 802117a:	f7ff fccf 	bl	8020b1c <_Balloc>
 802117e:	4604      	mov	r4, r0
 8021180:	b930      	cbnz	r0, 8021190 <__d2b+0x24>
 8021182:	4602      	mov	r2, r0
 8021184:	4b25      	ldr	r3, [pc, #148]	; (802121c <__d2b+0xb0>)
 8021186:	4826      	ldr	r0, [pc, #152]	; (8021220 <__d2b+0xb4>)
 8021188:	f240 310a 	movw	r1, #778	; 0x30a
 802118c:	f000 fb48 	bl	8021820 <__assert_func>
 8021190:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8021194:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8021198:	bb35      	cbnz	r5, 80211e8 <__d2b+0x7c>
 802119a:	2e00      	cmp	r6, #0
 802119c:	9301      	str	r3, [sp, #4]
 802119e:	d028      	beq.n	80211f2 <__d2b+0x86>
 80211a0:	4668      	mov	r0, sp
 80211a2:	9600      	str	r6, [sp, #0]
 80211a4:	f7ff fd82 	bl	8020cac <__lo0bits>
 80211a8:	9900      	ldr	r1, [sp, #0]
 80211aa:	b300      	cbz	r0, 80211ee <__d2b+0x82>
 80211ac:	9a01      	ldr	r2, [sp, #4]
 80211ae:	f1c0 0320 	rsb	r3, r0, #32
 80211b2:	fa02 f303 	lsl.w	r3, r2, r3
 80211b6:	430b      	orrs	r3, r1
 80211b8:	40c2      	lsrs	r2, r0
 80211ba:	6163      	str	r3, [r4, #20]
 80211bc:	9201      	str	r2, [sp, #4]
 80211be:	9b01      	ldr	r3, [sp, #4]
 80211c0:	61a3      	str	r3, [r4, #24]
 80211c2:	2b00      	cmp	r3, #0
 80211c4:	bf14      	ite	ne
 80211c6:	2202      	movne	r2, #2
 80211c8:	2201      	moveq	r2, #1
 80211ca:	6122      	str	r2, [r4, #16]
 80211cc:	b1d5      	cbz	r5, 8021204 <__d2b+0x98>
 80211ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80211d2:	4405      	add	r5, r0
 80211d4:	f8c9 5000 	str.w	r5, [r9]
 80211d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80211dc:	f8c8 0000 	str.w	r0, [r8]
 80211e0:	4620      	mov	r0, r4
 80211e2:	b003      	add	sp, #12
 80211e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80211ec:	e7d5      	b.n	802119a <__d2b+0x2e>
 80211ee:	6161      	str	r1, [r4, #20]
 80211f0:	e7e5      	b.n	80211be <__d2b+0x52>
 80211f2:	a801      	add	r0, sp, #4
 80211f4:	f7ff fd5a 	bl	8020cac <__lo0bits>
 80211f8:	9b01      	ldr	r3, [sp, #4]
 80211fa:	6163      	str	r3, [r4, #20]
 80211fc:	2201      	movs	r2, #1
 80211fe:	6122      	str	r2, [r4, #16]
 8021200:	3020      	adds	r0, #32
 8021202:	e7e3      	b.n	80211cc <__d2b+0x60>
 8021204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8021208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802120c:	f8c9 0000 	str.w	r0, [r9]
 8021210:	6918      	ldr	r0, [r3, #16]
 8021212:	f7ff fd2b 	bl	8020c6c <__hi0bits>
 8021216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802121a:	e7df      	b.n	80211dc <__d2b+0x70>
 802121c:	0802220f 	.word	0x0802220f
 8021220:	08022280 	.word	0x08022280

08021224 <_calloc_r>:
 8021224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021226:	fba1 2402 	umull	r2, r4, r1, r2
 802122a:	b94c      	cbnz	r4, 8021240 <_calloc_r+0x1c>
 802122c:	4611      	mov	r1, r2
 802122e:	9201      	str	r2, [sp, #4]
 8021230:	f000 f87a 	bl	8021328 <_malloc_r>
 8021234:	9a01      	ldr	r2, [sp, #4]
 8021236:	4605      	mov	r5, r0
 8021238:	b930      	cbnz	r0, 8021248 <_calloc_r+0x24>
 802123a:	4628      	mov	r0, r5
 802123c:	b003      	add	sp, #12
 802123e:	bd30      	pop	{r4, r5, pc}
 8021240:	220c      	movs	r2, #12
 8021242:	6002      	str	r2, [r0, #0]
 8021244:	2500      	movs	r5, #0
 8021246:	e7f8      	b.n	802123a <_calloc_r+0x16>
 8021248:	4621      	mov	r1, r4
 802124a:	f7fd fdeb 	bl	801ee24 <memset>
 802124e:	e7f4      	b.n	802123a <_calloc_r+0x16>

08021250 <_free_r>:
 8021250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021252:	2900      	cmp	r1, #0
 8021254:	d044      	beq.n	80212e0 <_free_r+0x90>
 8021256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802125a:	9001      	str	r0, [sp, #4]
 802125c:	2b00      	cmp	r3, #0
 802125e:	f1a1 0404 	sub.w	r4, r1, #4
 8021262:	bfb8      	it	lt
 8021264:	18e4      	addlt	r4, r4, r3
 8021266:	f000 fb61 	bl	802192c <__malloc_lock>
 802126a:	4a1e      	ldr	r2, [pc, #120]	; (80212e4 <_free_r+0x94>)
 802126c:	9801      	ldr	r0, [sp, #4]
 802126e:	6813      	ldr	r3, [r2, #0]
 8021270:	b933      	cbnz	r3, 8021280 <_free_r+0x30>
 8021272:	6063      	str	r3, [r4, #4]
 8021274:	6014      	str	r4, [r2, #0]
 8021276:	b003      	add	sp, #12
 8021278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802127c:	f000 bb5c 	b.w	8021938 <__malloc_unlock>
 8021280:	42a3      	cmp	r3, r4
 8021282:	d908      	bls.n	8021296 <_free_r+0x46>
 8021284:	6825      	ldr	r5, [r4, #0]
 8021286:	1961      	adds	r1, r4, r5
 8021288:	428b      	cmp	r3, r1
 802128a:	bf01      	itttt	eq
 802128c:	6819      	ldreq	r1, [r3, #0]
 802128e:	685b      	ldreq	r3, [r3, #4]
 8021290:	1949      	addeq	r1, r1, r5
 8021292:	6021      	streq	r1, [r4, #0]
 8021294:	e7ed      	b.n	8021272 <_free_r+0x22>
 8021296:	461a      	mov	r2, r3
 8021298:	685b      	ldr	r3, [r3, #4]
 802129a:	b10b      	cbz	r3, 80212a0 <_free_r+0x50>
 802129c:	42a3      	cmp	r3, r4
 802129e:	d9fa      	bls.n	8021296 <_free_r+0x46>
 80212a0:	6811      	ldr	r1, [r2, #0]
 80212a2:	1855      	adds	r5, r2, r1
 80212a4:	42a5      	cmp	r5, r4
 80212a6:	d10b      	bne.n	80212c0 <_free_r+0x70>
 80212a8:	6824      	ldr	r4, [r4, #0]
 80212aa:	4421      	add	r1, r4
 80212ac:	1854      	adds	r4, r2, r1
 80212ae:	42a3      	cmp	r3, r4
 80212b0:	6011      	str	r1, [r2, #0]
 80212b2:	d1e0      	bne.n	8021276 <_free_r+0x26>
 80212b4:	681c      	ldr	r4, [r3, #0]
 80212b6:	685b      	ldr	r3, [r3, #4]
 80212b8:	6053      	str	r3, [r2, #4]
 80212ba:	4421      	add	r1, r4
 80212bc:	6011      	str	r1, [r2, #0]
 80212be:	e7da      	b.n	8021276 <_free_r+0x26>
 80212c0:	d902      	bls.n	80212c8 <_free_r+0x78>
 80212c2:	230c      	movs	r3, #12
 80212c4:	6003      	str	r3, [r0, #0]
 80212c6:	e7d6      	b.n	8021276 <_free_r+0x26>
 80212c8:	6825      	ldr	r5, [r4, #0]
 80212ca:	1961      	adds	r1, r4, r5
 80212cc:	428b      	cmp	r3, r1
 80212ce:	bf04      	itt	eq
 80212d0:	6819      	ldreq	r1, [r3, #0]
 80212d2:	685b      	ldreq	r3, [r3, #4]
 80212d4:	6063      	str	r3, [r4, #4]
 80212d6:	bf04      	itt	eq
 80212d8:	1949      	addeq	r1, r1, r5
 80212da:	6021      	streq	r1, [r4, #0]
 80212dc:	6054      	str	r4, [r2, #4]
 80212de:	e7ca      	b.n	8021276 <_free_r+0x26>
 80212e0:	b003      	add	sp, #12
 80212e2:	bd30      	pop	{r4, r5, pc}
 80212e4:	2000e0e4 	.word	0x2000e0e4

080212e8 <sbrk_aligned>:
 80212e8:	b570      	push	{r4, r5, r6, lr}
 80212ea:	4e0e      	ldr	r6, [pc, #56]	; (8021324 <sbrk_aligned+0x3c>)
 80212ec:	460c      	mov	r4, r1
 80212ee:	6831      	ldr	r1, [r6, #0]
 80212f0:	4605      	mov	r5, r0
 80212f2:	b911      	cbnz	r1, 80212fa <sbrk_aligned+0x12>
 80212f4:	f000 fa2e 	bl	8021754 <_sbrk_r>
 80212f8:	6030      	str	r0, [r6, #0]
 80212fa:	4621      	mov	r1, r4
 80212fc:	4628      	mov	r0, r5
 80212fe:	f000 fa29 	bl	8021754 <_sbrk_r>
 8021302:	1c43      	adds	r3, r0, #1
 8021304:	d00a      	beq.n	802131c <sbrk_aligned+0x34>
 8021306:	1cc4      	adds	r4, r0, #3
 8021308:	f024 0403 	bic.w	r4, r4, #3
 802130c:	42a0      	cmp	r0, r4
 802130e:	d007      	beq.n	8021320 <sbrk_aligned+0x38>
 8021310:	1a21      	subs	r1, r4, r0
 8021312:	4628      	mov	r0, r5
 8021314:	f000 fa1e 	bl	8021754 <_sbrk_r>
 8021318:	3001      	adds	r0, #1
 802131a:	d101      	bne.n	8021320 <sbrk_aligned+0x38>
 802131c:	f04f 34ff 	mov.w	r4, #4294967295
 8021320:	4620      	mov	r0, r4
 8021322:	bd70      	pop	{r4, r5, r6, pc}
 8021324:	2000e0e8 	.word	0x2000e0e8

08021328 <_malloc_r>:
 8021328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802132c:	1ccd      	adds	r5, r1, #3
 802132e:	f025 0503 	bic.w	r5, r5, #3
 8021332:	3508      	adds	r5, #8
 8021334:	2d0c      	cmp	r5, #12
 8021336:	bf38      	it	cc
 8021338:	250c      	movcc	r5, #12
 802133a:	2d00      	cmp	r5, #0
 802133c:	4607      	mov	r7, r0
 802133e:	db01      	blt.n	8021344 <_malloc_r+0x1c>
 8021340:	42a9      	cmp	r1, r5
 8021342:	d905      	bls.n	8021350 <_malloc_r+0x28>
 8021344:	230c      	movs	r3, #12
 8021346:	603b      	str	r3, [r7, #0]
 8021348:	2600      	movs	r6, #0
 802134a:	4630      	mov	r0, r6
 802134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021350:	4e2e      	ldr	r6, [pc, #184]	; (802140c <_malloc_r+0xe4>)
 8021352:	f000 faeb 	bl	802192c <__malloc_lock>
 8021356:	6833      	ldr	r3, [r6, #0]
 8021358:	461c      	mov	r4, r3
 802135a:	bb34      	cbnz	r4, 80213aa <_malloc_r+0x82>
 802135c:	4629      	mov	r1, r5
 802135e:	4638      	mov	r0, r7
 8021360:	f7ff ffc2 	bl	80212e8 <sbrk_aligned>
 8021364:	1c43      	adds	r3, r0, #1
 8021366:	4604      	mov	r4, r0
 8021368:	d14d      	bne.n	8021406 <_malloc_r+0xde>
 802136a:	6834      	ldr	r4, [r6, #0]
 802136c:	4626      	mov	r6, r4
 802136e:	2e00      	cmp	r6, #0
 8021370:	d140      	bne.n	80213f4 <_malloc_r+0xcc>
 8021372:	6823      	ldr	r3, [r4, #0]
 8021374:	4631      	mov	r1, r6
 8021376:	4638      	mov	r0, r7
 8021378:	eb04 0803 	add.w	r8, r4, r3
 802137c:	f000 f9ea 	bl	8021754 <_sbrk_r>
 8021380:	4580      	cmp	r8, r0
 8021382:	d13a      	bne.n	80213fa <_malloc_r+0xd2>
 8021384:	6821      	ldr	r1, [r4, #0]
 8021386:	3503      	adds	r5, #3
 8021388:	1a6d      	subs	r5, r5, r1
 802138a:	f025 0503 	bic.w	r5, r5, #3
 802138e:	3508      	adds	r5, #8
 8021390:	2d0c      	cmp	r5, #12
 8021392:	bf38      	it	cc
 8021394:	250c      	movcc	r5, #12
 8021396:	4629      	mov	r1, r5
 8021398:	4638      	mov	r0, r7
 802139a:	f7ff ffa5 	bl	80212e8 <sbrk_aligned>
 802139e:	3001      	adds	r0, #1
 80213a0:	d02b      	beq.n	80213fa <_malloc_r+0xd2>
 80213a2:	6823      	ldr	r3, [r4, #0]
 80213a4:	442b      	add	r3, r5
 80213a6:	6023      	str	r3, [r4, #0]
 80213a8:	e00e      	b.n	80213c8 <_malloc_r+0xa0>
 80213aa:	6822      	ldr	r2, [r4, #0]
 80213ac:	1b52      	subs	r2, r2, r5
 80213ae:	d41e      	bmi.n	80213ee <_malloc_r+0xc6>
 80213b0:	2a0b      	cmp	r2, #11
 80213b2:	d916      	bls.n	80213e2 <_malloc_r+0xba>
 80213b4:	1961      	adds	r1, r4, r5
 80213b6:	42a3      	cmp	r3, r4
 80213b8:	6025      	str	r5, [r4, #0]
 80213ba:	bf18      	it	ne
 80213bc:	6059      	strne	r1, [r3, #4]
 80213be:	6863      	ldr	r3, [r4, #4]
 80213c0:	bf08      	it	eq
 80213c2:	6031      	streq	r1, [r6, #0]
 80213c4:	5162      	str	r2, [r4, r5]
 80213c6:	604b      	str	r3, [r1, #4]
 80213c8:	4638      	mov	r0, r7
 80213ca:	f104 060b 	add.w	r6, r4, #11
 80213ce:	f000 fab3 	bl	8021938 <__malloc_unlock>
 80213d2:	f026 0607 	bic.w	r6, r6, #7
 80213d6:	1d23      	adds	r3, r4, #4
 80213d8:	1af2      	subs	r2, r6, r3
 80213da:	d0b6      	beq.n	802134a <_malloc_r+0x22>
 80213dc:	1b9b      	subs	r3, r3, r6
 80213de:	50a3      	str	r3, [r4, r2]
 80213e0:	e7b3      	b.n	802134a <_malloc_r+0x22>
 80213e2:	6862      	ldr	r2, [r4, #4]
 80213e4:	42a3      	cmp	r3, r4
 80213e6:	bf0c      	ite	eq
 80213e8:	6032      	streq	r2, [r6, #0]
 80213ea:	605a      	strne	r2, [r3, #4]
 80213ec:	e7ec      	b.n	80213c8 <_malloc_r+0xa0>
 80213ee:	4623      	mov	r3, r4
 80213f0:	6864      	ldr	r4, [r4, #4]
 80213f2:	e7b2      	b.n	802135a <_malloc_r+0x32>
 80213f4:	4634      	mov	r4, r6
 80213f6:	6876      	ldr	r6, [r6, #4]
 80213f8:	e7b9      	b.n	802136e <_malloc_r+0x46>
 80213fa:	230c      	movs	r3, #12
 80213fc:	603b      	str	r3, [r7, #0]
 80213fe:	4638      	mov	r0, r7
 8021400:	f000 fa9a 	bl	8021938 <__malloc_unlock>
 8021404:	e7a1      	b.n	802134a <_malloc_r+0x22>
 8021406:	6025      	str	r5, [r4, #0]
 8021408:	e7de      	b.n	80213c8 <_malloc_r+0xa0>
 802140a:	bf00      	nop
 802140c:	2000e0e4 	.word	0x2000e0e4

08021410 <__sfputc_r>:
 8021410:	6893      	ldr	r3, [r2, #8]
 8021412:	3b01      	subs	r3, #1
 8021414:	2b00      	cmp	r3, #0
 8021416:	b410      	push	{r4}
 8021418:	6093      	str	r3, [r2, #8]
 802141a:	da08      	bge.n	802142e <__sfputc_r+0x1e>
 802141c:	6994      	ldr	r4, [r2, #24]
 802141e:	42a3      	cmp	r3, r4
 8021420:	db01      	blt.n	8021426 <__sfputc_r+0x16>
 8021422:	290a      	cmp	r1, #10
 8021424:	d103      	bne.n	802142e <__sfputc_r+0x1e>
 8021426:	f85d 4b04 	ldr.w	r4, [sp], #4
 802142a:	f7fe ba11 	b.w	801f850 <__swbuf_r>
 802142e:	6813      	ldr	r3, [r2, #0]
 8021430:	1c58      	adds	r0, r3, #1
 8021432:	6010      	str	r0, [r2, #0]
 8021434:	7019      	strb	r1, [r3, #0]
 8021436:	4608      	mov	r0, r1
 8021438:	f85d 4b04 	ldr.w	r4, [sp], #4
 802143c:	4770      	bx	lr

0802143e <__sfputs_r>:
 802143e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021440:	4606      	mov	r6, r0
 8021442:	460f      	mov	r7, r1
 8021444:	4614      	mov	r4, r2
 8021446:	18d5      	adds	r5, r2, r3
 8021448:	42ac      	cmp	r4, r5
 802144a:	d101      	bne.n	8021450 <__sfputs_r+0x12>
 802144c:	2000      	movs	r0, #0
 802144e:	e007      	b.n	8021460 <__sfputs_r+0x22>
 8021450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021454:	463a      	mov	r2, r7
 8021456:	4630      	mov	r0, r6
 8021458:	f7ff ffda 	bl	8021410 <__sfputc_r>
 802145c:	1c43      	adds	r3, r0, #1
 802145e:	d1f3      	bne.n	8021448 <__sfputs_r+0xa>
 8021460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021464 <_vfiprintf_r>:
 8021464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021468:	460d      	mov	r5, r1
 802146a:	b09d      	sub	sp, #116	; 0x74
 802146c:	4614      	mov	r4, r2
 802146e:	4698      	mov	r8, r3
 8021470:	4606      	mov	r6, r0
 8021472:	b118      	cbz	r0, 802147c <_vfiprintf_r+0x18>
 8021474:	6983      	ldr	r3, [r0, #24]
 8021476:	b90b      	cbnz	r3, 802147c <_vfiprintf_r+0x18>
 8021478:	f7ff fa3e 	bl	80208f8 <__sinit>
 802147c:	4b89      	ldr	r3, [pc, #548]	; (80216a4 <_vfiprintf_r+0x240>)
 802147e:	429d      	cmp	r5, r3
 8021480:	d11b      	bne.n	80214ba <_vfiprintf_r+0x56>
 8021482:	6875      	ldr	r5, [r6, #4]
 8021484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021486:	07d9      	lsls	r1, r3, #31
 8021488:	d405      	bmi.n	8021496 <_vfiprintf_r+0x32>
 802148a:	89ab      	ldrh	r3, [r5, #12]
 802148c:	059a      	lsls	r2, r3, #22
 802148e:	d402      	bmi.n	8021496 <_vfiprintf_r+0x32>
 8021490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021492:	f7ff fad4 	bl	8020a3e <__retarget_lock_acquire_recursive>
 8021496:	89ab      	ldrh	r3, [r5, #12]
 8021498:	071b      	lsls	r3, r3, #28
 802149a:	d501      	bpl.n	80214a0 <_vfiprintf_r+0x3c>
 802149c:	692b      	ldr	r3, [r5, #16]
 802149e:	b9eb      	cbnz	r3, 80214dc <_vfiprintf_r+0x78>
 80214a0:	4629      	mov	r1, r5
 80214a2:	4630      	mov	r0, r6
 80214a4:	f7fe fa26 	bl	801f8f4 <__swsetup_r>
 80214a8:	b1c0      	cbz	r0, 80214dc <_vfiprintf_r+0x78>
 80214aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80214ac:	07dc      	lsls	r4, r3, #31
 80214ae:	d50e      	bpl.n	80214ce <_vfiprintf_r+0x6a>
 80214b0:	f04f 30ff 	mov.w	r0, #4294967295
 80214b4:	b01d      	add	sp, #116	; 0x74
 80214b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80214ba:	4b7b      	ldr	r3, [pc, #492]	; (80216a8 <_vfiprintf_r+0x244>)
 80214bc:	429d      	cmp	r5, r3
 80214be:	d101      	bne.n	80214c4 <_vfiprintf_r+0x60>
 80214c0:	68b5      	ldr	r5, [r6, #8]
 80214c2:	e7df      	b.n	8021484 <_vfiprintf_r+0x20>
 80214c4:	4b79      	ldr	r3, [pc, #484]	; (80216ac <_vfiprintf_r+0x248>)
 80214c6:	429d      	cmp	r5, r3
 80214c8:	bf08      	it	eq
 80214ca:	68f5      	ldreq	r5, [r6, #12]
 80214cc:	e7da      	b.n	8021484 <_vfiprintf_r+0x20>
 80214ce:	89ab      	ldrh	r3, [r5, #12]
 80214d0:	0598      	lsls	r0, r3, #22
 80214d2:	d4ed      	bmi.n	80214b0 <_vfiprintf_r+0x4c>
 80214d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80214d6:	f7ff fab3 	bl	8020a40 <__retarget_lock_release_recursive>
 80214da:	e7e9      	b.n	80214b0 <_vfiprintf_r+0x4c>
 80214dc:	2300      	movs	r3, #0
 80214de:	9309      	str	r3, [sp, #36]	; 0x24
 80214e0:	2320      	movs	r3, #32
 80214e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80214e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80214ea:	2330      	movs	r3, #48	; 0x30
 80214ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80216b0 <_vfiprintf_r+0x24c>
 80214f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80214f4:	f04f 0901 	mov.w	r9, #1
 80214f8:	4623      	mov	r3, r4
 80214fa:	469a      	mov	sl, r3
 80214fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021500:	b10a      	cbz	r2, 8021506 <_vfiprintf_r+0xa2>
 8021502:	2a25      	cmp	r2, #37	; 0x25
 8021504:	d1f9      	bne.n	80214fa <_vfiprintf_r+0x96>
 8021506:	ebba 0b04 	subs.w	fp, sl, r4
 802150a:	d00b      	beq.n	8021524 <_vfiprintf_r+0xc0>
 802150c:	465b      	mov	r3, fp
 802150e:	4622      	mov	r2, r4
 8021510:	4629      	mov	r1, r5
 8021512:	4630      	mov	r0, r6
 8021514:	f7ff ff93 	bl	802143e <__sfputs_r>
 8021518:	3001      	adds	r0, #1
 802151a:	f000 80aa 	beq.w	8021672 <_vfiprintf_r+0x20e>
 802151e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021520:	445a      	add	r2, fp
 8021522:	9209      	str	r2, [sp, #36]	; 0x24
 8021524:	f89a 3000 	ldrb.w	r3, [sl]
 8021528:	2b00      	cmp	r3, #0
 802152a:	f000 80a2 	beq.w	8021672 <_vfiprintf_r+0x20e>
 802152e:	2300      	movs	r3, #0
 8021530:	f04f 32ff 	mov.w	r2, #4294967295
 8021534:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021538:	f10a 0a01 	add.w	sl, sl, #1
 802153c:	9304      	str	r3, [sp, #16]
 802153e:	9307      	str	r3, [sp, #28]
 8021540:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021544:	931a      	str	r3, [sp, #104]	; 0x68
 8021546:	4654      	mov	r4, sl
 8021548:	2205      	movs	r2, #5
 802154a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802154e:	4858      	ldr	r0, [pc, #352]	; (80216b0 <_vfiprintf_r+0x24c>)
 8021550:	f7de fe6e 	bl	8000230 <memchr>
 8021554:	9a04      	ldr	r2, [sp, #16]
 8021556:	b9d8      	cbnz	r0, 8021590 <_vfiprintf_r+0x12c>
 8021558:	06d1      	lsls	r1, r2, #27
 802155a:	bf44      	itt	mi
 802155c:	2320      	movmi	r3, #32
 802155e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021562:	0713      	lsls	r3, r2, #28
 8021564:	bf44      	itt	mi
 8021566:	232b      	movmi	r3, #43	; 0x2b
 8021568:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802156c:	f89a 3000 	ldrb.w	r3, [sl]
 8021570:	2b2a      	cmp	r3, #42	; 0x2a
 8021572:	d015      	beq.n	80215a0 <_vfiprintf_r+0x13c>
 8021574:	9a07      	ldr	r2, [sp, #28]
 8021576:	4654      	mov	r4, sl
 8021578:	2000      	movs	r0, #0
 802157a:	f04f 0c0a 	mov.w	ip, #10
 802157e:	4621      	mov	r1, r4
 8021580:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021584:	3b30      	subs	r3, #48	; 0x30
 8021586:	2b09      	cmp	r3, #9
 8021588:	d94e      	bls.n	8021628 <_vfiprintf_r+0x1c4>
 802158a:	b1b0      	cbz	r0, 80215ba <_vfiprintf_r+0x156>
 802158c:	9207      	str	r2, [sp, #28]
 802158e:	e014      	b.n	80215ba <_vfiprintf_r+0x156>
 8021590:	eba0 0308 	sub.w	r3, r0, r8
 8021594:	fa09 f303 	lsl.w	r3, r9, r3
 8021598:	4313      	orrs	r3, r2
 802159a:	9304      	str	r3, [sp, #16]
 802159c:	46a2      	mov	sl, r4
 802159e:	e7d2      	b.n	8021546 <_vfiprintf_r+0xe2>
 80215a0:	9b03      	ldr	r3, [sp, #12]
 80215a2:	1d19      	adds	r1, r3, #4
 80215a4:	681b      	ldr	r3, [r3, #0]
 80215a6:	9103      	str	r1, [sp, #12]
 80215a8:	2b00      	cmp	r3, #0
 80215aa:	bfbb      	ittet	lt
 80215ac:	425b      	neglt	r3, r3
 80215ae:	f042 0202 	orrlt.w	r2, r2, #2
 80215b2:	9307      	strge	r3, [sp, #28]
 80215b4:	9307      	strlt	r3, [sp, #28]
 80215b6:	bfb8      	it	lt
 80215b8:	9204      	strlt	r2, [sp, #16]
 80215ba:	7823      	ldrb	r3, [r4, #0]
 80215bc:	2b2e      	cmp	r3, #46	; 0x2e
 80215be:	d10c      	bne.n	80215da <_vfiprintf_r+0x176>
 80215c0:	7863      	ldrb	r3, [r4, #1]
 80215c2:	2b2a      	cmp	r3, #42	; 0x2a
 80215c4:	d135      	bne.n	8021632 <_vfiprintf_r+0x1ce>
 80215c6:	9b03      	ldr	r3, [sp, #12]
 80215c8:	1d1a      	adds	r2, r3, #4
 80215ca:	681b      	ldr	r3, [r3, #0]
 80215cc:	9203      	str	r2, [sp, #12]
 80215ce:	2b00      	cmp	r3, #0
 80215d0:	bfb8      	it	lt
 80215d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80215d6:	3402      	adds	r4, #2
 80215d8:	9305      	str	r3, [sp, #20]
 80215da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80216c0 <_vfiprintf_r+0x25c>
 80215de:	7821      	ldrb	r1, [r4, #0]
 80215e0:	2203      	movs	r2, #3
 80215e2:	4650      	mov	r0, sl
 80215e4:	f7de fe24 	bl	8000230 <memchr>
 80215e8:	b140      	cbz	r0, 80215fc <_vfiprintf_r+0x198>
 80215ea:	2340      	movs	r3, #64	; 0x40
 80215ec:	eba0 000a 	sub.w	r0, r0, sl
 80215f0:	fa03 f000 	lsl.w	r0, r3, r0
 80215f4:	9b04      	ldr	r3, [sp, #16]
 80215f6:	4303      	orrs	r3, r0
 80215f8:	3401      	adds	r4, #1
 80215fa:	9304      	str	r3, [sp, #16]
 80215fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021600:	482c      	ldr	r0, [pc, #176]	; (80216b4 <_vfiprintf_r+0x250>)
 8021602:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021606:	2206      	movs	r2, #6
 8021608:	f7de fe12 	bl	8000230 <memchr>
 802160c:	2800      	cmp	r0, #0
 802160e:	d03f      	beq.n	8021690 <_vfiprintf_r+0x22c>
 8021610:	4b29      	ldr	r3, [pc, #164]	; (80216b8 <_vfiprintf_r+0x254>)
 8021612:	bb1b      	cbnz	r3, 802165c <_vfiprintf_r+0x1f8>
 8021614:	9b03      	ldr	r3, [sp, #12]
 8021616:	3307      	adds	r3, #7
 8021618:	f023 0307 	bic.w	r3, r3, #7
 802161c:	3308      	adds	r3, #8
 802161e:	9303      	str	r3, [sp, #12]
 8021620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021622:	443b      	add	r3, r7
 8021624:	9309      	str	r3, [sp, #36]	; 0x24
 8021626:	e767      	b.n	80214f8 <_vfiprintf_r+0x94>
 8021628:	fb0c 3202 	mla	r2, ip, r2, r3
 802162c:	460c      	mov	r4, r1
 802162e:	2001      	movs	r0, #1
 8021630:	e7a5      	b.n	802157e <_vfiprintf_r+0x11a>
 8021632:	2300      	movs	r3, #0
 8021634:	3401      	adds	r4, #1
 8021636:	9305      	str	r3, [sp, #20]
 8021638:	4619      	mov	r1, r3
 802163a:	f04f 0c0a 	mov.w	ip, #10
 802163e:	4620      	mov	r0, r4
 8021640:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021644:	3a30      	subs	r2, #48	; 0x30
 8021646:	2a09      	cmp	r2, #9
 8021648:	d903      	bls.n	8021652 <_vfiprintf_r+0x1ee>
 802164a:	2b00      	cmp	r3, #0
 802164c:	d0c5      	beq.n	80215da <_vfiprintf_r+0x176>
 802164e:	9105      	str	r1, [sp, #20]
 8021650:	e7c3      	b.n	80215da <_vfiprintf_r+0x176>
 8021652:	fb0c 2101 	mla	r1, ip, r1, r2
 8021656:	4604      	mov	r4, r0
 8021658:	2301      	movs	r3, #1
 802165a:	e7f0      	b.n	802163e <_vfiprintf_r+0x1da>
 802165c:	ab03      	add	r3, sp, #12
 802165e:	9300      	str	r3, [sp, #0]
 8021660:	462a      	mov	r2, r5
 8021662:	4b16      	ldr	r3, [pc, #88]	; (80216bc <_vfiprintf_r+0x258>)
 8021664:	a904      	add	r1, sp, #16
 8021666:	4630      	mov	r0, r6
 8021668:	f7fd fc84 	bl	801ef74 <_printf_float>
 802166c:	4607      	mov	r7, r0
 802166e:	1c78      	adds	r0, r7, #1
 8021670:	d1d6      	bne.n	8021620 <_vfiprintf_r+0x1bc>
 8021672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021674:	07d9      	lsls	r1, r3, #31
 8021676:	d405      	bmi.n	8021684 <_vfiprintf_r+0x220>
 8021678:	89ab      	ldrh	r3, [r5, #12]
 802167a:	059a      	lsls	r2, r3, #22
 802167c:	d402      	bmi.n	8021684 <_vfiprintf_r+0x220>
 802167e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021680:	f7ff f9de 	bl	8020a40 <__retarget_lock_release_recursive>
 8021684:	89ab      	ldrh	r3, [r5, #12]
 8021686:	065b      	lsls	r3, r3, #25
 8021688:	f53f af12 	bmi.w	80214b0 <_vfiprintf_r+0x4c>
 802168c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802168e:	e711      	b.n	80214b4 <_vfiprintf_r+0x50>
 8021690:	ab03      	add	r3, sp, #12
 8021692:	9300      	str	r3, [sp, #0]
 8021694:	462a      	mov	r2, r5
 8021696:	4b09      	ldr	r3, [pc, #36]	; (80216bc <_vfiprintf_r+0x258>)
 8021698:	a904      	add	r1, sp, #16
 802169a:	4630      	mov	r0, r6
 802169c:	f7fd ff0e 	bl	801f4bc <_printf_i>
 80216a0:	e7e4      	b.n	802166c <_vfiprintf_r+0x208>
 80216a2:	bf00      	nop
 80216a4:	08022240 	.word	0x08022240
 80216a8:	08022260 	.word	0x08022260
 80216ac:	08022220 	.word	0x08022220
 80216b0:	080223dc 	.word	0x080223dc
 80216b4:	080223e6 	.word	0x080223e6
 80216b8:	0801ef75 	.word	0x0801ef75
 80216bc:	0802143f 	.word	0x0802143f
 80216c0:	080223e2 	.word	0x080223e2

080216c4 <_putc_r>:
 80216c4:	b570      	push	{r4, r5, r6, lr}
 80216c6:	460d      	mov	r5, r1
 80216c8:	4614      	mov	r4, r2
 80216ca:	4606      	mov	r6, r0
 80216cc:	b118      	cbz	r0, 80216d6 <_putc_r+0x12>
 80216ce:	6983      	ldr	r3, [r0, #24]
 80216d0:	b90b      	cbnz	r3, 80216d6 <_putc_r+0x12>
 80216d2:	f7ff f911 	bl	80208f8 <__sinit>
 80216d6:	4b1c      	ldr	r3, [pc, #112]	; (8021748 <_putc_r+0x84>)
 80216d8:	429c      	cmp	r4, r3
 80216da:	d124      	bne.n	8021726 <_putc_r+0x62>
 80216dc:	6874      	ldr	r4, [r6, #4]
 80216de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80216e0:	07d8      	lsls	r0, r3, #31
 80216e2:	d405      	bmi.n	80216f0 <_putc_r+0x2c>
 80216e4:	89a3      	ldrh	r3, [r4, #12]
 80216e6:	0599      	lsls	r1, r3, #22
 80216e8:	d402      	bmi.n	80216f0 <_putc_r+0x2c>
 80216ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80216ec:	f7ff f9a7 	bl	8020a3e <__retarget_lock_acquire_recursive>
 80216f0:	68a3      	ldr	r3, [r4, #8]
 80216f2:	3b01      	subs	r3, #1
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	60a3      	str	r3, [r4, #8]
 80216f8:	da05      	bge.n	8021706 <_putc_r+0x42>
 80216fa:	69a2      	ldr	r2, [r4, #24]
 80216fc:	4293      	cmp	r3, r2
 80216fe:	db1c      	blt.n	802173a <_putc_r+0x76>
 8021700:	b2eb      	uxtb	r3, r5
 8021702:	2b0a      	cmp	r3, #10
 8021704:	d019      	beq.n	802173a <_putc_r+0x76>
 8021706:	6823      	ldr	r3, [r4, #0]
 8021708:	1c5a      	adds	r2, r3, #1
 802170a:	6022      	str	r2, [r4, #0]
 802170c:	701d      	strb	r5, [r3, #0]
 802170e:	b2ed      	uxtb	r5, r5
 8021710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021712:	07da      	lsls	r2, r3, #31
 8021714:	d405      	bmi.n	8021722 <_putc_r+0x5e>
 8021716:	89a3      	ldrh	r3, [r4, #12]
 8021718:	059b      	lsls	r3, r3, #22
 802171a:	d402      	bmi.n	8021722 <_putc_r+0x5e>
 802171c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802171e:	f7ff f98f 	bl	8020a40 <__retarget_lock_release_recursive>
 8021722:	4628      	mov	r0, r5
 8021724:	bd70      	pop	{r4, r5, r6, pc}
 8021726:	4b09      	ldr	r3, [pc, #36]	; (802174c <_putc_r+0x88>)
 8021728:	429c      	cmp	r4, r3
 802172a:	d101      	bne.n	8021730 <_putc_r+0x6c>
 802172c:	68b4      	ldr	r4, [r6, #8]
 802172e:	e7d6      	b.n	80216de <_putc_r+0x1a>
 8021730:	4b07      	ldr	r3, [pc, #28]	; (8021750 <_putc_r+0x8c>)
 8021732:	429c      	cmp	r4, r3
 8021734:	bf08      	it	eq
 8021736:	68f4      	ldreq	r4, [r6, #12]
 8021738:	e7d1      	b.n	80216de <_putc_r+0x1a>
 802173a:	4629      	mov	r1, r5
 802173c:	4622      	mov	r2, r4
 802173e:	4630      	mov	r0, r6
 8021740:	f7fe f886 	bl	801f850 <__swbuf_r>
 8021744:	4605      	mov	r5, r0
 8021746:	e7e3      	b.n	8021710 <_putc_r+0x4c>
 8021748:	08022240 	.word	0x08022240
 802174c:	08022260 	.word	0x08022260
 8021750:	08022220 	.word	0x08022220

08021754 <_sbrk_r>:
 8021754:	b538      	push	{r3, r4, r5, lr}
 8021756:	4d06      	ldr	r5, [pc, #24]	; (8021770 <_sbrk_r+0x1c>)
 8021758:	2300      	movs	r3, #0
 802175a:	4604      	mov	r4, r0
 802175c:	4608      	mov	r0, r1
 802175e:	602b      	str	r3, [r5, #0]
 8021760:	f7f5 f898 	bl	8016894 <_sbrk>
 8021764:	1c43      	adds	r3, r0, #1
 8021766:	d102      	bne.n	802176e <_sbrk_r+0x1a>
 8021768:	682b      	ldr	r3, [r5, #0]
 802176a:	b103      	cbz	r3, 802176e <_sbrk_r+0x1a>
 802176c:	6023      	str	r3, [r4, #0]
 802176e:	bd38      	pop	{r3, r4, r5, pc}
 8021770:	2000e0ec 	.word	0x2000e0ec

08021774 <__sread>:
 8021774:	b510      	push	{r4, lr}
 8021776:	460c      	mov	r4, r1
 8021778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802177c:	f000 f8e2 	bl	8021944 <_read_r>
 8021780:	2800      	cmp	r0, #0
 8021782:	bfab      	itete	ge
 8021784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8021786:	89a3      	ldrhlt	r3, [r4, #12]
 8021788:	181b      	addge	r3, r3, r0
 802178a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802178e:	bfac      	ite	ge
 8021790:	6563      	strge	r3, [r4, #84]	; 0x54
 8021792:	81a3      	strhlt	r3, [r4, #12]
 8021794:	bd10      	pop	{r4, pc}

08021796 <__swrite>:
 8021796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802179a:	461f      	mov	r7, r3
 802179c:	898b      	ldrh	r3, [r1, #12]
 802179e:	05db      	lsls	r3, r3, #23
 80217a0:	4605      	mov	r5, r0
 80217a2:	460c      	mov	r4, r1
 80217a4:	4616      	mov	r6, r2
 80217a6:	d505      	bpl.n	80217b4 <__swrite+0x1e>
 80217a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217ac:	2302      	movs	r3, #2
 80217ae:	2200      	movs	r2, #0
 80217b0:	f000 f898 	bl	80218e4 <_lseek_r>
 80217b4:	89a3      	ldrh	r3, [r4, #12]
 80217b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80217ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80217be:	81a3      	strh	r3, [r4, #12]
 80217c0:	4632      	mov	r2, r6
 80217c2:	463b      	mov	r3, r7
 80217c4:	4628      	mov	r0, r5
 80217c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80217ca:	f000 b817 	b.w	80217fc <_write_r>

080217ce <__sseek>:
 80217ce:	b510      	push	{r4, lr}
 80217d0:	460c      	mov	r4, r1
 80217d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217d6:	f000 f885 	bl	80218e4 <_lseek_r>
 80217da:	1c43      	adds	r3, r0, #1
 80217dc:	89a3      	ldrh	r3, [r4, #12]
 80217de:	bf15      	itete	ne
 80217e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80217e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80217e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80217ea:	81a3      	strheq	r3, [r4, #12]
 80217ec:	bf18      	it	ne
 80217ee:	81a3      	strhne	r3, [r4, #12]
 80217f0:	bd10      	pop	{r4, pc}

080217f2 <__sclose>:
 80217f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80217f6:	f000 b831 	b.w	802185c <_close_r>
	...

080217fc <_write_r>:
 80217fc:	b538      	push	{r3, r4, r5, lr}
 80217fe:	4d07      	ldr	r5, [pc, #28]	; (802181c <_write_r+0x20>)
 8021800:	4604      	mov	r4, r0
 8021802:	4608      	mov	r0, r1
 8021804:	4611      	mov	r1, r2
 8021806:	2200      	movs	r2, #0
 8021808:	602a      	str	r2, [r5, #0]
 802180a:	461a      	mov	r2, r3
 802180c:	f7f4 ffee 	bl	80167ec <_write>
 8021810:	1c43      	adds	r3, r0, #1
 8021812:	d102      	bne.n	802181a <_write_r+0x1e>
 8021814:	682b      	ldr	r3, [r5, #0]
 8021816:	b103      	cbz	r3, 802181a <_write_r+0x1e>
 8021818:	6023      	str	r3, [r4, #0]
 802181a:	bd38      	pop	{r3, r4, r5, pc}
 802181c:	2000e0ec 	.word	0x2000e0ec

08021820 <__assert_func>:
 8021820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021822:	4614      	mov	r4, r2
 8021824:	461a      	mov	r2, r3
 8021826:	4b09      	ldr	r3, [pc, #36]	; (802184c <__assert_func+0x2c>)
 8021828:	681b      	ldr	r3, [r3, #0]
 802182a:	4605      	mov	r5, r0
 802182c:	68d8      	ldr	r0, [r3, #12]
 802182e:	b14c      	cbz	r4, 8021844 <__assert_func+0x24>
 8021830:	4b07      	ldr	r3, [pc, #28]	; (8021850 <__assert_func+0x30>)
 8021832:	9100      	str	r1, [sp, #0]
 8021834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021838:	4906      	ldr	r1, [pc, #24]	; (8021854 <__assert_func+0x34>)
 802183a:	462b      	mov	r3, r5
 802183c:	f000 f81e 	bl	802187c <fiprintf>
 8021840:	f000 f89f 	bl	8021982 <abort>
 8021844:	4b04      	ldr	r3, [pc, #16]	; (8021858 <__assert_func+0x38>)
 8021846:	461c      	mov	r4, r3
 8021848:	e7f3      	b.n	8021832 <__assert_func+0x12>
 802184a:	bf00      	nop
 802184c:	2000002c 	.word	0x2000002c
 8021850:	080223ed 	.word	0x080223ed
 8021854:	080223fa 	.word	0x080223fa
 8021858:	08022428 	.word	0x08022428

0802185c <_close_r>:
 802185c:	b538      	push	{r3, r4, r5, lr}
 802185e:	4d06      	ldr	r5, [pc, #24]	; (8021878 <_close_r+0x1c>)
 8021860:	2300      	movs	r3, #0
 8021862:	4604      	mov	r4, r0
 8021864:	4608      	mov	r0, r1
 8021866:	602b      	str	r3, [r5, #0]
 8021868:	f7f4 ffe0 	bl	801682c <_close>
 802186c:	1c43      	adds	r3, r0, #1
 802186e:	d102      	bne.n	8021876 <_close_r+0x1a>
 8021870:	682b      	ldr	r3, [r5, #0]
 8021872:	b103      	cbz	r3, 8021876 <_close_r+0x1a>
 8021874:	6023      	str	r3, [r4, #0]
 8021876:	bd38      	pop	{r3, r4, r5, pc}
 8021878:	2000e0ec 	.word	0x2000e0ec

0802187c <fiprintf>:
 802187c:	b40e      	push	{r1, r2, r3}
 802187e:	b503      	push	{r0, r1, lr}
 8021880:	4601      	mov	r1, r0
 8021882:	ab03      	add	r3, sp, #12
 8021884:	4805      	ldr	r0, [pc, #20]	; (802189c <fiprintf+0x20>)
 8021886:	f853 2b04 	ldr.w	r2, [r3], #4
 802188a:	6800      	ldr	r0, [r0, #0]
 802188c:	9301      	str	r3, [sp, #4]
 802188e:	f7ff fde9 	bl	8021464 <_vfiprintf_r>
 8021892:	b002      	add	sp, #8
 8021894:	f85d eb04 	ldr.w	lr, [sp], #4
 8021898:	b003      	add	sp, #12
 802189a:	4770      	bx	lr
 802189c:	2000002c 	.word	0x2000002c

080218a0 <_fstat_r>:
 80218a0:	b538      	push	{r3, r4, r5, lr}
 80218a2:	4d07      	ldr	r5, [pc, #28]	; (80218c0 <_fstat_r+0x20>)
 80218a4:	2300      	movs	r3, #0
 80218a6:	4604      	mov	r4, r0
 80218a8:	4608      	mov	r0, r1
 80218aa:	4611      	mov	r1, r2
 80218ac:	602b      	str	r3, [r5, #0]
 80218ae:	f7f4 ffc9 	bl	8016844 <_fstat>
 80218b2:	1c43      	adds	r3, r0, #1
 80218b4:	d102      	bne.n	80218bc <_fstat_r+0x1c>
 80218b6:	682b      	ldr	r3, [r5, #0]
 80218b8:	b103      	cbz	r3, 80218bc <_fstat_r+0x1c>
 80218ba:	6023      	str	r3, [r4, #0]
 80218bc:	bd38      	pop	{r3, r4, r5, pc}
 80218be:	bf00      	nop
 80218c0:	2000e0ec 	.word	0x2000e0ec

080218c4 <_isatty_r>:
 80218c4:	b538      	push	{r3, r4, r5, lr}
 80218c6:	4d06      	ldr	r5, [pc, #24]	; (80218e0 <_isatty_r+0x1c>)
 80218c8:	2300      	movs	r3, #0
 80218ca:	4604      	mov	r4, r0
 80218cc:	4608      	mov	r0, r1
 80218ce:	602b      	str	r3, [r5, #0]
 80218d0:	f7f4 ffc8 	bl	8016864 <_isatty>
 80218d4:	1c43      	adds	r3, r0, #1
 80218d6:	d102      	bne.n	80218de <_isatty_r+0x1a>
 80218d8:	682b      	ldr	r3, [r5, #0]
 80218da:	b103      	cbz	r3, 80218de <_isatty_r+0x1a>
 80218dc:	6023      	str	r3, [r4, #0]
 80218de:	bd38      	pop	{r3, r4, r5, pc}
 80218e0:	2000e0ec 	.word	0x2000e0ec

080218e4 <_lseek_r>:
 80218e4:	b538      	push	{r3, r4, r5, lr}
 80218e6:	4d07      	ldr	r5, [pc, #28]	; (8021904 <_lseek_r+0x20>)
 80218e8:	4604      	mov	r4, r0
 80218ea:	4608      	mov	r0, r1
 80218ec:	4611      	mov	r1, r2
 80218ee:	2200      	movs	r2, #0
 80218f0:	602a      	str	r2, [r5, #0]
 80218f2:	461a      	mov	r2, r3
 80218f4:	f7f4 ffc1 	bl	801687a <_lseek>
 80218f8:	1c43      	adds	r3, r0, #1
 80218fa:	d102      	bne.n	8021902 <_lseek_r+0x1e>
 80218fc:	682b      	ldr	r3, [r5, #0]
 80218fe:	b103      	cbz	r3, 8021902 <_lseek_r+0x1e>
 8021900:	6023      	str	r3, [r4, #0]
 8021902:	bd38      	pop	{r3, r4, r5, pc}
 8021904:	2000e0ec 	.word	0x2000e0ec

08021908 <__ascii_mbtowc>:
 8021908:	b082      	sub	sp, #8
 802190a:	b901      	cbnz	r1, 802190e <__ascii_mbtowc+0x6>
 802190c:	a901      	add	r1, sp, #4
 802190e:	b142      	cbz	r2, 8021922 <__ascii_mbtowc+0x1a>
 8021910:	b14b      	cbz	r3, 8021926 <__ascii_mbtowc+0x1e>
 8021912:	7813      	ldrb	r3, [r2, #0]
 8021914:	600b      	str	r3, [r1, #0]
 8021916:	7812      	ldrb	r2, [r2, #0]
 8021918:	1e10      	subs	r0, r2, #0
 802191a:	bf18      	it	ne
 802191c:	2001      	movne	r0, #1
 802191e:	b002      	add	sp, #8
 8021920:	4770      	bx	lr
 8021922:	4610      	mov	r0, r2
 8021924:	e7fb      	b.n	802191e <__ascii_mbtowc+0x16>
 8021926:	f06f 0001 	mvn.w	r0, #1
 802192a:	e7f8      	b.n	802191e <__ascii_mbtowc+0x16>

0802192c <__malloc_lock>:
 802192c:	4801      	ldr	r0, [pc, #4]	; (8021934 <__malloc_lock+0x8>)
 802192e:	f7ff b886 	b.w	8020a3e <__retarget_lock_acquire_recursive>
 8021932:	bf00      	nop
 8021934:	2000e0e0 	.word	0x2000e0e0

08021938 <__malloc_unlock>:
 8021938:	4801      	ldr	r0, [pc, #4]	; (8021940 <__malloc_unlock+0x8>)
 802193a:	f7ff b881 	b.w	8020a40 <__retarget_lock_release_recursive>
 802193e:	bf00      	nop
 8021940:	2000e0e0 	.word	0x2000e0e0

08021944 <_read_r>:
 8021944:	b538      	push	{r3, r4, r5, lr}
 8021946:	4d07      	ldr	r5, [pc, #28]	; (8021964 <_read_r+0x20>)
 8021948:	4604      	mov	r4, r0
 802194a:	4608      	mov	r0, r1
 802194c:	4611      	mov	r1, r2
 802194e:	2200      	movs	r2, #0
 8021950:	602a      	str	r2, [r5, #0]
 8021952:	461a      	mov	r2, r3
 8021954:	f7f4 ff2c 	bl	80167b0 <_read>
 8021958:	1c43      	adds	r3, r0, #1
 802195a:	d102      	bne.n	8021962 <_read_r+0x1e>
 802195c:	682b      	ldr	r3, [r5, #0]
 802195e:	b103      	cbz	r3, 8021962 <_read_r+0x1e>
 8021960:	6023      	str	r3, [r4, #0]
 8021962:	bd38      	pop	{r3, r4, r5, pc}
 8021964:	2000e0ec 	.word	0x2000e0ec

08021968 <__ascii_wctomb>:
 8021968:	b149      	cbz	r1, 802197e <__ascii_wctomb+0x16>
 802196a:	2aff      	cmp	r2, #255	; 0xff
 802196c:	bf85      	ittet	hi
 802196e:	238a      	movhi	r3, #138	; 0x8a
 8021970:	6003      	strhi	r3, [r0, #0]
 8021972:	700a      	strbls	r2, [r1, #0]
 8021974:	f04f 30ff 	movhi.w	r0, #4294967295
 8021978:	bf98      	it	ls
 802197a:	2001      	movls	r0, #1
 802197c:	4770      	bx	lr
 802197e:	4608      	mov	r0, r1
 8021980:	4770      	bx	lr

08021982 <abort>:
 8021982:	b508      	push	{r3, lr}
 8021984:	2006      	movs	r0, #6
 8021986:	f000 f82b 	bl	80219e0 <raise>
 802198a:	2001      	movs	r0, #1
 802198c:	f7f4 ff06 	bl	801679c <_exit>

08021990 <_raise_r>:
 8021990:	291f      	cmp	r1, #31
 8021992:	b538      	push	{r3, r4, r5, lr}
 8021994:	4604      	mov	r4, r0
 8021996:	460d      	mov	r5, r1
 8021998:	d904      	bls.n	80219a4 <_raise_r+0x14>
 802199a:	2316      	movs	r3, #22
 802199c:	6003      	str	r3, [r0, #0]
 802199e:	f04f 30ff 	mov.w	r0, #4294967295
 80219a2:	bd38      	pop	{r3, r4, r5, pc}
 80219a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80219a6:	b112      	cbz	r2, 80219ae <_raise_r+0x1e>
 80219a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80219ac:	b94b      	cbnz	r3, 80219c2 <_raise_r+0x32>
 80219ae:	4620      	mov	r0, r4
 80219b0:	f000 f830 	bl	8021a14 <_getpid_r>
 80219b4:	462a      	mov	r2, r5
 80219b6:	4601      	mov	r1, r0
 80219b8:	4620      	mov	r0, r4
 80219ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80219be:	f000 b817 	b.w	80219f0 <_kill_r>
 80219c2:	2b01      	cmp	r3, #1
 80219c4:	d00a      	beq.n	80219dc <_raise_r+0x4c>
 80219c6:	1c59      	adds	r1, r3, #1
 80219c8:	d103      	bne.n	80219d2 <_raise_r+0x42>
 80219ca:	2316      	movs	r3, #22
 80219cc:	6003      	str	r3, [r0, #0]
 80219ce:	2001      	movs	r0, #1
 80219d0:	e7e7      	b.n	80219a2 <_raise_r+0x12>
 80219d2:	2400      	movs	r4, #0
 80219d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80219d8:	4628      	mov	r0, r5
 80219da:	4798      	blx	r3
 80219dc:	2000      	movs	r0, #0
 80219de:	e7e0      	b.n	80219a2 <_raise_r+0x12>

080219e0 <raise>:
 80219e0:	4b02      	ldr	r3, [pc, #8]	; (80219ec <raise+0xc>)
 80219e2:	4601      	mov	r1, r0
 80219e4:	6818      	ldr	r0, [r3, #0]
 80219e6:	f7ff bfd3 	b.w	8021990 <_raise_r>
 80219ea:	bf00      	nop
 80219ec:	2000002c 	.word	0x2000002c

080219f0 <_kill_r>:
 80219f0:	b538      	push	{r3, r4, r5, lr}
 80219f2:	4d07      	ldr	r5, [pc, #28]	; (8021a10 <_kill_r+0x20>)
 80219f4:	2300      	movs	r3, #0
 80219f6:	4604      	mov	r4, r0
 80219f8:	4608      	mov	r0, r1
 80219fa:	4611      	mov	r1, r2
 80219fc:	602b      	str	r3, [r5, #0]
 80219fe:	f7f4 febd 	bl	801677c <_kill>
 8021a02:	1c43      	adds	r3, r0, #1
 8021a04:	d102      	bne.n	8021a0c <_kill_r+0x1c>
 8021a06:	682b      	ldr	r3, [r5, #0]
 8021a08:	b103      	cbz	r3, 8021a0c <_kill_r+0x1c>
 8021a0a:	6023      	str	r3, [r4, #0]
 8021a0c:	bd38      	pop	{r3, r4, r5, pc}
 8021a0e:	bf00      	nop
 8021a10:	2000e0ec 	.word	0x2000e0ec

08021a14 <_getpid_r>:
 8021a14:	f7f4 beaa 	b.w	801676c <_getpid>

08021a18 <exp>:
 8021a18:	b538      	push	{r3, r4, r5, lr}
 8021a1a:	ed2d 8b02 	vpush	{d8}
 8021a1e:	ec55 4b10 	vmov	r4, r5, d0
 8021a22:	f000 f841 	bl	8021aa8 <__ieee754_exp>
 8021a26:	eeb0 8a40 	vmov.f32	s16, s0
 8021a2a:	eef0 8a60 	vmov.f32	s17, s1
 8021a2e:	ec45 4b10 	vmov	d0, r4, r5
 8021a32:	f000 f9eb 	bl	8021e0c <finite>
 8021a36:	b168      	cbz	r0, 8021a54 <exp+0x3c>
 8021a38:	a317      	add	r3, pc, #92	; (adr r3, 8021a98 <exp+0x80>)
 8021a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a3e:	4620      	mov	r0, r4
 8021a40:	4629      	mov	r1, r5
 8021a42:	f7df f891 	bl	8000b68 <__aeabi_dcmpgt>
 8021a46:	b160      	cbz	r0, 8021a62 <exp+0x4a>
 8021a48:	f7fd f9b4 	bl	801edb4 <__errno>
 8021a4c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8021a88 <exp+0x70>
 8021a50:	2322      	movs	r3, #34	; 0x22
 8021a52:	6003      	str	r3, [r0, #0]
 8021a54:	eeb0 0a48 	vmov.f32	s0, s16
 8021a58:	eef0 0a68 	vmov.f32	s1, s17
 8021a5c:	ecbd 8b02 	vpop	{d8}
 8021a60:	bd38      	pop	{r3, r4, r5, pc}
 8021a62:	a30f      	add	r3, pc, #60	; (adr r3, 8021aa0 <exp+0x88>)
 8021a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a68:	4620      	mov	r0, r4
 8021a6a:	4629      	mov	r1, r5
 8021a6c:	f7df f85e 	bl	8000b2c <__aeabi_dcmplt>
 8021a70:	2800      	cmp	r0, #0
 8021a72:	d0ef      	beq.n	8021a54 <exp+0x3c>
 8021a74:	f7fd f99e 	bl	801edb4 <__errno>
 8021a78:	2322      	movs	r3, #34	; 0x22
 8021a7a:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8021a90 <exp+0x78>
 8021a7e:	6003      	str	r3, [r0, #0]
 8021a80:	e7e8      	b.n	8021a54 <exp+0x3c>
 8021a82:	bf00      	nop
 8021a84:	f3af 8000 	nop.w
 8021a88:	00000000 	.word	0x00000000
 8021a8c:	7ff00000 	.word	0x7ff00000
	...
 8021a98:	fefa39ef 	.word	0xfefa39ef
 8021a9c:	40862e42 	.word	0x40862e42
 8021aa0:	d52d3051 	.word	0xd52d3051
 8021aa4:	c0874910 	.word	0xc0874910

08021aa8 <__ieee754_exp>:
 8021aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021aac:	ec55 4b10 	vmov	r4, r5, d0
 8021ab0:	49b5      	ldr	r1, [pc, #724]	; (8021d88 <__ieee754_exp+0x2e0>)
 8021ab2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8021ab6:	428b      	cmp	r3, r1
 8021ab8:	ed2d 8b04 	vpush	{d8-d9}
 8021abc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8021ac0:	d93d      	bls.n	8021b3e <__ieee754_exp+0x96>
 8021ac2:	49b2      	ldr	r1, [pc, #712]	; (8021d8c <__ieee754_exp+0x2e4>)
 8021ac4:	428b      	cmp	r3, r1
 8021ac6:	d918      	bls.n	8021afa <__ieee754_exp+0x52>
 8021ac8:	ee10 3a10 	vmov	r3, s0
 8021acc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8021ad0:	4313      	orrs	r3, r2
 8021ad2:	d009      	beq.n	8021ae8 <__ieee754_exp+0x40>
 8021ad4:	ee10 2a10 	vmov	r2, s0
 8021ad8:	462b      	mov	r3, r5
 8021ada:	4620      	mov	r0, r4
 8021adc:	4629      	mov	r1, r5
 8021ade:	f7de fbfd 	bl	80002dc <__adddf3>
 8021ae2:	4604      	mov	r4, r0
 8021ae4:	460d      	mov	r5, r1
 8021ae6:	e002      	b.n	8021aee <__ieee754_exp+0x46>
 8021ae8:	b10e      	cbz	r6, 8021aee <__ieee754_exp+0x46>
 8021aea:	2400      	movs	r4, #0
 8021aec:	2500      	movs	r5, #0
 8021aee:	ecbd 8b04 	vpop	{d8-d9}
 8021af2:	ec45 4b10 	vmov	d0, r4, r5
 8021af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021afa:	a38d      	add	r3, pc, #564	; (adr r3, 8021d30 <__ieee754_exp+0x288>)
 8021afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b00:	ee10 0a10 	vmov	r0, s0
 8021b04:	4629      	mov	r1, r5
 8021b06:	f7df f82f 	bl	8000b68 <__aeabi_dcmpgt>
 8021b0a:	4607      	mov	r7, r0
 8021b0c:	b130      	cbz	r0, 8021b1c <__ieee754_exp+0x74>
 8021b0e:	ecbd 8b04 	vpop	{d8-d9}
 8021b12:	2000      	movs	r0, #0
 8021b14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b18:	f000 b96f 	b.w	8021dfa <__math_oflow>
 8021b1c:	a386      	add	r3, pc, #536	; (adr r3, 8021d38 <__ieee754_exp+0x290>)
 8021b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b22:	4620      	mov	r0, r4
 8021b24:	4629      	mov	r1, r5
 8021b26:	f7df f801 	bl	8000b2c <__aeabi_dcmplt>
 8021b2a:	2800      	cmp	r0, #0
 8021b2c:	f000 808b 	beq.w	8021c46 <__ieee754_exp+0x19e>
 8021b30:	ecbd 8b04 	vpop	{d8-d9}
 8021b34:	4638      	mov	r0, r7
 8021b36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021b3a:	f000 b955 	b.w	8021de8 <__math_uflow>
 8021b3e:	4a94      	ldr	r2, [pc, #592]	; (8021d90 <__ieee754_exp+0x2e8>)
 8021b40:	4293      	cmp	r3, r2
 8021b42:	f240 80ac 	bls.w	8021c9e <__ieee754_exp+0x1f6>
 8021b46:	4a93      	ldr	r2, [pc, #588]	; (8021d94 <__ieee754_exp+0x2ec>)
 8021b48:	4293      	cmp	r3, r2
 8021b4a:	d87c      	bhi.n	8021c46 <__ieee754_exp+0x19e>
 8021b4c:	4b92      	ldr	r3, [pc, #584]	; (8021d98 <__ieee754_exp+0x2f0>)
 8021b4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021b56:	ee10 0a10 	vmov	r0, s0
 8021b5a:	4629      	mov	r1, r5
 8021b5c:	f7de fbbc 	bl	80002d8 <__aeabi_dsub>
 8021b60:	4b8e      	ldr	r3, [pc, #568]	; (8021d9c <__ieee754_exp+0x2f4>)
 8021b62:	00f7      	lsls	r7, r6, #3
 8021b64:	443b      	add	r3, r7
 8021b66:	ed93 7b00 	vldr	d7, [r3]
 8021b6a:	f1c6 0a01 	rsb	sl, r6, #1
 8021b6e:	4680      	mov	r8, r0
 8021b70:	4689      	mov	r9, r1
 8021b72:	ebaa 0a06 	sub.w	sl, sl, r6
 8021b76:	eeb0 8a47 	vmov.f32	s16, s14
 8021b7a:	eef0 8a67 	vmov.f32	s17, s15
 8021b7e:	ec53 2b18 	vmov	r2, r3, d8
 8021b82:	4640      	mov	r0, r8
 8021b84:	4649      	mov	r1, r9
 8021b86:	f7de fba7 	bl	80002d8 <__aeabi_dsub>
 8021b8a:	4604      	mov	r4, r0
 8021b8c:	460d      	mov	r5, r1
 8021b8e:	4622      	mov	r2, r4
 8021b90:	462b      	mov	r3, r5
 8021b92:	4620      	mov	r0, r4
 8021b94:	4629      	mov	r1, r5
 8021b96:	f7de fd57 	bl	8000648 <__aeabi_dmul>
 8021b9a:	a369      	add	r3, pc, #420	; (adr r3, 8021d40 <__ieee754_exp+0x298>)
 8021b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021ba0:	4606      	mov	r6, r0
 8021ba2:	460f      	mov	r7, r1
 8021ba4:	f7de fd50 	bl	8000648 <__aeabi_dmul>
 8021ba8:	a367      	add	r3, pc, #412	; (adr r3, 8021d48 <__ieee754_exp+0x2a0>)
 8021baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bae:	f7de fb93 	bl	80002d8 <__aeabi_dsub>
 8021bb2:	4632      	mov	r2, r6
 8021bb4:	463b      	mov	r3, r7
 8021bb6:	f7de fd47 	bl	8000648 <__aeabi_dmul>
 8021bba:	a365      	add	r3, pc, #404	; (adr r3, 8021d50 <__ieee754_exp+0x2a8>)
 8021bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bc0:	f7de fb8c 	bl	80002dc <__adddf3>
 8021bc4:	4632      	mov	r2, r6
 8021bc6:	463b      	mov	r3, r7
 8021bc8:	f7de fd3e 	bl	8000648 <__aeabi_dmul>
 8021bcc:	a362      	add	r3, pc, #392	; (adr r3, 8021d58 <__ieee754_exp+0x2b0>)
 8021bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021bd2:	f7de fb81 	bl	80002d8 <__aeabi_dsub>
 8021bd6:	4632      	mov	r2, r6
 8021bd8:	463b      	mov	r3, r7
 8021bda:	f7de fd35 	bl	8000648 <__aeabi_dmul>
 8021bde:	a360      	add	r3, pc, #384	; (adr r3, 8021d60 <__ieee754_exp+0x2b8>)
 8021be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021be4:	f7de fb7a 	bl	80002dc <__adddf3>
 8021be8:	4632      	mov	r2, r6
 8021bea:	463b      	mov	r3, r7
 8021bec:	f7de fd2c 	bl	8000648 <__aeabi_dmul>
 8021bf0:	4602      	mov	r2, r0
 8021bf2:	460b      	mov	r3, r1
 8021bf4:	4620      	mov	r0, r4
 8021bf6:	4629      	mov	r1, r5
 8021bf8:	f7de fb6e 	bl	80002d8 <__aeabi_dsub>
 8021bfc:	4602      	mov	r2, r0
 8021bfe:	460b      	mov	r3, r1
 8021c00:	4606      	mov	r6, r0
 8021c02:	460f      	mov	r7, r1
 8021c04:	4620      	mov	r0, r4
 8021c06:	4629      	mov	r1, r5
 8021c08:	f7de fd1e 	bl	8000648 <__aeabi_dmul>
 8021c0c:	ec41 0b19 	vmov	d9, r0, r1
 8021c10:	f1ba 0f00 	cmp.w	sl, #0
 8021c14:	d15d      	bne.n	8021cd2 <__ieee754_exp+0x22a>
 8021c16:	2200      	movs	r2, #0
 8021c18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8021c1c:	4630      	mov	r0, r6
 8021c1e:	4639      	mov	r1, r7
 8021c20:	f7de fb5a 	bl	80002d8 <__aeabi_dsub>
 8021c24:	4602      	mov	r2, r0
 8021c26:	460b      	mov	r3, r1
 8021c28:	ec51 0b19 	vmov	r0, r1, d9
 8021c2c:	f7de fe36 	bl	800089c <__aeabi_ddiv>
 8021c30:	4622      	mov	r2, r4
 8021c32:	462b      	mov	r3, r5
 8021c34:	f7de fb50 	bl	80002d8 <__aeabi_dsub>
 8021c38:	4602      	mov	r2, r0
 8021c3a:	460b      	mov	r3, r1
 8021c3c:	2000      	movs	r0, #0
 8021c3e:	4958      	ldr	r1, [pc, #352]	; (8021da0 <__ieee754_exp+0x2f8>)
 8021c40:	f7de fb4a 	bl	80002d8 <__aeabi_dsub>
 8021c44:	e74d      	b.n	8021ae2 <__ieee754_exp+0x3a>
 8021c46:	4857      	ldr	r0, [pc, #348]	; (8021da4 <__ieee754_exp+0x2fc>)
 8021c48:	a347      	add	r3, pc, #284	; (adr r3, 8021d68 <__ieee754_exp+0x2c0>)
 8021c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c4e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8021c52:	4629      	mov	r1, r5
 8021c54:	4620      	mov	r0, r4
 8021c56:	f7de fcf7 	bl	8000648 <__aeabi_dmul>
 8021c5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021c5e:	f7de fb3d 	bl	80002dc <__adddf3>
 8021c62:	f7de ffa1 	bl	8000ba8 <__aeabi_d2iz>
 8021c66:	4682      	mov	sl, r0
 8021c68:	f7de fc84 	bl	8000574 <__aeabi_i2d>
 8021c6c:	a340      	add	r3, pc, #256	; (adr r3, 8021d70 <__ieee754_exp+0x2c8>)
 8021c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c72:	4606      	mov	r6, r0
 8021c74:	460f      	mov	r7, r1
 8021c76:	f7de fce7 	bl	8000648 <__aeabi_dmul>
 8021c7a:	4602      	mov	r2, r0
 8021c7c:	460b      	mov	r3, r1
 8021c7e:	4620      	mov	r0, r4
 8021c80:	4629      	mov	r1, r5
 8021c82:	f7de fb29 	bl	80002d8 <__aeabi_dsub>
 8021c86:	a33c      	add	r3, pc, #240	; (adr r3, 8021d78 <__ieee754_exp+0x2d0>)
 8021c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021c8c:	4680      	mov	r8, r0
 8021c8e:	4689      	mov	r9, r1
 8021c90:	4630      	mov	r0, r6
 8021c92:	4639      	mov	r1, r7
 8021c94:	f7de fcd8 	bl	8000648 <__aeabi_dmul>
 8021c98:	ec41 0b18 	vmov	d8, r0, r1
 8021c9c:	e76f      	b.n	8021b7e <__ieee754_exp+0xd6>
 8021c9e:	4a42      	ldr	r2, [pc, #264]	; (8021da8 <__ieee754_exp+0x300>)
 8021ca0:	4293      	cmp	r3, r2
 8021ca2:	d811      	bhi.n	8021cc8 <__ieee754_exp+0x220>
 8021ca4:	a336      	add	r3, pc, #216	; (adr r3, 8021d80 <__ieee754_exp+0x2d8>)
 8021ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021caa:	ee10 0a10 	vmov	r0, s0
 8021cae:	4629      	mov	r1, r5
 8021cb0:	f7de fb14 	bl	80002dc <__adddf3>
 8021cb4:	4b3a      	ldr	r3, [pc, #232]	; (8021da0 <__ieee754_exp+0x2f8>)
 8021cb6:	2200      	movs	r2, #0
 8021cb8:	f7de ff56 	bl	8000b68 <__aeabi_dcmpgt>
 8021cbc:	b138      	cbz	r0, 8021cce <__ieee754_exp+0x226>
 8021cbe:	4b38      	ldr	r3, [pc, #224]	; (8021da0 <__ieee754_exp+0x2f8>)
 8021cc0:	2200      	movs	r2, #0
 8021cc2:	4620      	mov	r0, r4
 8021cc4:	4629      	mov	r1, r5
 8021cc6:	e70a      	b.n	8021ade <__ieee754_exp+0x36>
 8021cc8:	f04f 0a00 	mov.w	sl, #0
 8021ccc:	e75f      	b.n	8021b8e <__ieee754_exp+0xe6>
 8021cce:	4682      	mov	sl, r0
 8021cd0:	e75d      	b.n	8021b8e <__ieee754_exp+0xe6>
 8021cd2:	4632      	mov	r2, r6
 8021cd4:	463b      	mov	r3, r7
 8021cd6:	2000      	movs	r0, #0
 8021cd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8021cdc:	f7de fafc 	bl	80002d8 <__aeabi_dsub>
 8021ce0:	4602      	mov	r2, r0
 8021ce2:	460b      	mov	r3, r1
 8021ce4:	ec51 0b19 	vmov	r0, r1, d9
 8021ce8:	f7de fdd8 	bl	800089c <__aeabi_ddiv>
 8021cec:	4602      	mov	r2, r0
 8021cee:	460b      	mov	r3, r1
 8021cf0:	ec51 0b18 	vmov	r0, r1, d8
 8021cf4:	f7de faf0 	bl	80002d8 <__aeabi_dsub>
 8021cf8:	4642      	mov	r2, r8
 8021cfa:	464b      	mov	r3, r9
 8021cfc:	f7de faec 	bl	80002d8 <__aeabi_dsub>
 8021d00:	4602      	mov	r2, r0
 8021d02:	460b      	mov	r3, r1
 8021d04:	2000      	movs	r0, #0
 8021d06:	4926      	ldr	r1, [pc, #152]	; (8021da0 <__ieee754_exp+0x2f8>)
 8021d08:	f7de fae6 	bl	80002d8 <__aeabi_dsub>
 8021d0c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8021d10:	4592      	cmp	sl, r2
 8021d12:	db02      	blt.n	8021d1a <__ieee754_exp+0x272>
 8021d14:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021d18:	e6e3      	b.n	8021ae2 <__ieee754_exp+0x3a>
 8021d1a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8021d1e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8021d22:	2200      	movs	r2, #0
 8021d24:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8021d28:	f7de fc8e 	bl	8000648 <__aeabi_dmul>
 8021d2c:	e6d9      	b.n	8021ae2 <__ieee754_exp+0x3a>
 8021d2e:	bf00      	nop
 8021d30:	fefa39ef 	.word	0xfefa39ef
 8021d34:	40862e42 	.word	0x40862e42
 8021d38:	d52d3051 	.word	0xd52d3051
 8021d3c:	c0874910 	.word	0xc0874910
 8021d40:	72bea4d0 	.word	0x72bea4d0
 8021d44:	3e663769 	.word	0x3e663769
 8021d48:	c5d26bf1 	.word	0xc5d26bf1
 8021d4c:	3ebbbd41 	.word	0x3ebbbd41
 8021d50:	af25de2c 	.word	0xaf25de2c
 8021d54:	3f11566a 	.word	0x3f11566a
 8021d58:	16bebd93 	.word	0x16bebd93
 8021d5c:	3f66c16c 	.word	0x3f66c16c
 8021d60:	5555553e 	.word	0x5555553e
 8021d64:	3fc55555 	.word	0x3fc55555
 8021d68:	652b82fe 	.word	0x652b82fe
 8021d6c:	3ff71547 	.word	0x3ff71547
 8021d70:	fee00000 	.word	0xfee00000
 8021d74:	3fe62e42 	.word	0x3fe62e42
 8021d78:	35793c76 	.word	0x35793c76
 8021d7c:	3dea39ef 	.word	0x3dea39ef
 8021d80:	8800759c 	.word	0x8800759c
 8021d84:	7e37e43c 	.word	0x7e37e43c
 8021d88:	40862e41 	.word	0x40862e41
 8021d8c:	7fefffff 	.word	0x7fefffff
 8021d90:	3fd62e42 	.word	0x3fd62e42
 8021d94:	3ff0a2b1 	.word	0x3ff0a2b1
 8021d98:	08022548 	.word	0x08022548
 8021d9c:	08022558 	.word	0x08022558
 8021da0:	3ff00000 	.word	0x3ff00000
 8021da4:	08022538 	.word	0x08022538
 8021da8:	3defffff 	.word	0x3defffff

08021dac <with_errno>:
 8021dac:	b570      	push	{r4, r5, r6, lr}
 8021dae:	4604      	mov	r4, r0
 8021db0:	460d      	mov	r5, r1
 8021db2:	4616      	mov	r6, r2
 8021db4:	f7fc fffe 	bl	801edb4 <__errno>
 8021db8:	4629      	mov	r1, r5
 8021dba:	6006      	str	r6, [r0, #0]
 8021dbc:	4620      	mov	r0, r4
 8021dbe:	bd70      	pop	{r4, r5, r6, pc}

08021dc0 <xflow>:
 8021dc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021dc2:	4614      	mov	r4, r2
 8021dc4:	461d      	mov	r5, r3
 8021dc6:	b108      	cbz	r0, 8021dcc <xflow+0xc>
 8021dc8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8021dcc:	e9cd 2300 	strd	r2, r3, [sp]
 8021dd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021dd4:	4620      	mov	r0, r4
 8021dd6:	4629      	mov	r1, r5
 8021dd8:	f7de fc36 	bl	8000648 <__aeabi_dmul>
 8021ddc:	2222      	movs	r2, #34	; 0x22
 8021dde:	b003      	add	sp, #12
 8021de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021de4:	f7ff bfe2 	b.w	8021dac <with_errno>

08021de8 <__math_uflow>:
 8021de8:	b508      	push	{r3, lr}
 8021dea:	2200      	movs	r2, #0
 8021dec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8021df0:	f7ff ffe6 	bl	8021dc0 <xflow>
 8021df4:	ec41 0b10 	vmov	d0, r0, r1
 8021df8:	bd08      	pop	{r3, pc}

08021dfa <__math_oflow>:
 8021dfa:	b508      	push	{r3, lr}
 8021dfc:	2200      	movs	r2, #0
 8021dfe:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8021e02:	f7ff ffdd 	bl	8021dc0 <xflow>
 8021e06:	ec41 0b10 	vmov	d0, r0, r1
 8021e0a:	bd08      	pop	{r3, pc}

08021e0c <finite>:
 8021e0c:	b082      	sub	sp, #8
 8021e0e:	ed8d 0b00 	vstr	d0, [sp]
 8021e12:	9801      	ldr	r0, [sp, #4]
 8021e14:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8021e18:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8021e1c:	0fc0      	lsrs	r0, r0, #31
 8021e1e:	b002      	add	sp, #8
 8021e20:	4770      	bx	lr
	...

08021e24 <_init>:
 8021e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e26:	bf00      	nop
 8021e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e2a:	bc08      	pop	{r3}
 8021e2c:	469e      	mov	lr, r3
 8021e2e:	4770      	bx	lr

08021e30 <_fini>:
 8021e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e32:	bf00      	nop
 8021e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021e36:	bc08      	pop	{r3}
 8021e38:	469e      	mov	lr, r3
 8021e3a:	4770      	bx	lr
